TITLE: Listing Kubernetes Pods - Kubectl
DESCRIPTION: This is a fundamental command to list all Pods in the current namespace. It provides a quick overview of the pods running, their status, and readiness.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_107

LANGUAGE: Kubectl
CODE:
```
kubectl get pods
```

----------------------------------------

TITLE: Switching Branches (Git, Bash)
DESCRIPTION: This command switches the current working directory to the specified branch ('some_branch'). It updates the files in the working directory to match the state of the target branch and updates the HEAD pointer.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_11

LANGUAGE: bash
CODE:
```
git checkout some_branch
```

----------------------------------------

TITLE: Executing Linux Directory Navigation Commands - Shell
DESCRIPTION: This snippet provides a sequence of shell commands to navigate the Linux file system. It includes changing to /tmp, moving up directories using .., changing to the home directory (~), verifying the current path with pwd, and returning to the previous directory with cd -.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/exercises/navigation/solution.md#_snippet_0

LANGUAGE: shell
CODE:
```
cd /tmp
cd ..
cd ~
cd ..
cd ..
# root (/)
pwd
cd -
```

----------------------------------------

TITLE: Adding Resource Requests and Limits to Pod Spec (YAML)
DESCRIPTION: This YAML snippet shows how to define both CPU and memory `requests` and `limits` within a container's `resources` block in a pod specification. Requests (250m CPU, 64Mi memory) are used for scheduling, while limits (500m CPU, 128Mi memory) prevent excessive resource consumption. This block is placed under `spec.containers[].resources`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_42

LANGUAGE: YAML
CODE:
```
spec:
  containers:
  - image: python
    imagePullPolicy: Always
    name: yay2
    resources:
      limits:
        cpu: 500m
        memory: 128Mi
      requests:
        cpu: 250m
        memory: 64Mi
```

----------------------------------------

TITLE: Joining Tables SQL
DESCRIPTION: This SQL query demonstrates joining the 'Customers' table (aliased as c) and the 'Orders' table (aliased as o) based on the common 'Customer_ID'. It uses a LEFT JOIN to include all customers and the items they ordered (if any).
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_13

LANGUAGE: SQL
CODE:
```
Select c.Customer_Name, o.Item
From Customers c
Left Join Orders o
  On c.Customer_ID = o.Customer_ID;
```

----------------------------------------

TITLE: Assume IAM Role in GitHub Actions - YAML
DESCRIPTION: This YAML snippet shows a step within a GitHub Actions workflow that uses the `aws-actions/configure-aws-credentials` action. This action is a secure way to authenticate to AWS by assuming an IAM role, avoiding the need to store long-lived credentials in GitHub secrets or the workflow file.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_40

LANGUAGE: YAML
CODE:
```
- uses: aws-actions/configure-aws-credentials@v1
with:
 role-to-assume: arn:aws:iam::someIamRole
 aws-region: ...
```

----------------------------------------

TITLE: Viewing Changes Before Committing (Git, Bash)
DESCRIPTION: This command shows the differences between the working directory and the staging area, or between the staging area and the last commit (HEAD). It's essential for reviewing changes before adding or committing them.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
git diff
```

----------------------------------------

TITLE: Provisioning AWS EC2 Web Server with Terraform
DESCRIPTION: This Terraform configuration defines an AWS EC2 instance and an associated security group. It sets up the instance with Amazon Linux 2, configures storage deletion on termination, applies tags, and uses a remote-exec provisioner to install and configure the web server via SSH. The security group allows inbound HTTP traffic on port 80 from anywhere.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/launch_ec2_web_instance/solution.md#_snippet_1

LANGUAGE: HCL
CODE:
```

provider "aws" {
  region = "us-east-1" // Or your desired region
}

resource "aws_instance" "web_server" {
  ami           = "ami-12345678" // Replace with the correct AMI for Amazon Linux 2
  instance_type = "t2.micro" // Or any instance type with 1 vCPU and 1 GiB memory

  tags = {
    Name = "web-1"
    Type = "web"
  }

  root_block_device {
    volume_size           = 8 // Or any desired size
    delete_on_termination = true
  }

  provisioner "remote-exec" {
    inline = [
      "sudo yum update -y",
      "sudo yum install -y httpd",
      "sudo systemctl start httpd",
      "sudo bash -c 'echo \"I made it! This is awesome!\" > /var/www/html/index.html'",
      "sudo systemctl enable httpd"
    ]

    connection {
      type        = "ssh"
      user        = "ec2-user"
      private_key = file("~/.ssh/your_private_key.pem") // Replace with the path to your private key
      host        = self.public_ip
    }
  }

  security_group_ids = [aws_security_group.web_sg.id]
}

resource "aws_security_group" "web_sg" {
  name        = "web_sg"
  description = "Security group for web server"
  
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
```

----------------------------------------

TITLE: Listing Pods with Wide Output using Kubectl
DESCRIPTION: This command lists all Pods in the current namespace with detailed information, including their IP addresses, which is useful for verifying if Service endpoints match actual Pod IPs during debugging or verification steps.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_49

LANGUAGE: kubectl
CODE:
```
kubectl get pod -o wide
```

----------------------------------------

TITLE: Generating SSH Key Pair (Bash)
DESCRIPTION: Illustrates the use of `ssh-keygen` to generate a new SSH key pair. Specifies the RSA algorithm (`-t rsa`) and a key size of 4096 bits (`-b 4096`). This command will prompt for file location and passphrase.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_39

LANGUAGE: Bash
CODE:
```
ssh-keygen -t rsa -b 4096
```

----------------------------------------

TITLE: Selecting All Fields SQL
DESCRIPTION: This is a basic SQL query to retrieve all columns and all rows from the 'Customers' table. The asterisk (*) is a wildcard representing all columns.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_9

LANGUAGE: SQL
CODE:
```
Select *
From Customers;
```

----------------------------------------

TITLE: SQL Select All Fields
DESCRIPTION: This basic SQL query selects all columns (`*`) from the 'Customers' table. It is used to retrieve all data stored in the table, presenting every row and every column.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/tests/testcases/testcase2.md#_snippet_4

LANGUAGE: SQL
CODE:
```
Select *
From Customers;
```

----------------------------------------

TITLE: Starting Docker Compose Services (Shell)
DESCRIPTION: This Docker Compose command reads the `docker-compose.yml` file in the current directory and starts all the services defined within it. It builds, recreates, starts, and attaches to containers for a service. It's used to deploy multi-container applications defined by Compose.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_44

LANGUAGE: Shell
CODE:
```
docker-compose up
```

----------------------------------------

TITLE: Running a Container (Docker)
DESCRIPTION: Demonstrates the basic command to run a container from an image using Docker. The context explains the internal process involving the Docker daemon, containerd, and runc.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_6

LANGUAGE: Shell
CODE:
```
docker container run ubuntu
```

----------------------------------------

TITLE: Defining Kubernetes NodePort Service in YAML
DESCRIPTION: This YAML manifest defines a Kubernetes Service object of type NodePort named "some-app". It configures the service to route traffic from port 8080 to the target port 8080 on backend Pods, exposes it externally on Node port 2017 (though specifying nodePort is uncommon), and uses the selector `type: backend, service: some-app` to find target Pods.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_50

LANGUAGE: yaml
CODE:
```
apiVersion: v1
kind: Service
metadata:
  name: some-app
spec:
  type: NodePort
  ports:
  - port: 8080
    nodePort: 2017
    protocol: TCP
  selector:
    type: backend
    service: some-app
```

----------------------------------------

TITLE: Creating and Deleting Files and Directories using Shell
DESCRIPTION: This script executes a sequence of standard Unix-like shell commands to perform file and directory operations. It first creates a file named 'x', then a directory named 'content'. It moves 'x' into 'content', creates another file 'y' inside 'content', and finally creates a nested directory structure 'dir1/dir2/dir3' within 'content' before removing the entire 'content' directory and its contents recursively and forcefully.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/exercises/create_remove/solution.md#_snippet_0

LANGUAGE: Shell
CODE:
```
touch x
mkdir content
mv x content
touch content/y
mkdir -p content/dir1/dir2/dir3
rm -rf content
```

----------------------------------------

TITLE: Applying Kubernetes Resource from YAML
DESCRIPTION: Applies a Kubernetes resource definition contained in a YAML file. This command is used to create or update resources based on the file's content.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_130

LANGUAGE: Bash
CODE:
```
k apply -f pod.yaml
```

----------------------------------------

TITLE: Running Docker Container (Shell)
DESCRIPTION: Starts a new container from the 'web_app:latest' image. The container runs in detached mode (`-d`) and maps port 80 on the host machine to port 3000 inside the container (`-p 80:3000`).
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/devops/solutions/containerize_app.md#_snippet_5

LANGUAGE: shell
CODE:
```
docker container run -d -p 80:3000 web_app:latest
```

----------------------------------------

TITLE: Listing Kubernetes Pods in Namespace - Shell
DESCRIPTION: Lists all Pods specifically within the `dev` namespace using the `kubectl get po` command (aliased as `k`).
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_86

LANGUAGE: shell
CODE:
```
k get po -n dev
```

----------------------------------------

TITLE: Describing Kubernetes Pod Details - Kubectl
DESCRIPTION: This command provides a detailed view of a specific Pod, including its current status, events, container information, volumes, node assignment, and resource requests/limits. It's crucial for debugging issues with a particular pod.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_108

LANGUAGE: Kubectl
CODE:
```
kubectl describe pod [name]
```

----------------------------------------

TITLE: Viewing Pod Logs (kubectl, Shell)
DESCRIPTION: Retrieves the logs from a container within a specified pod, which is essential for understanding why a container might be failing or crashing. Can specify a container name if the pod has multiple. Requires the pod name.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_147

LANGUAGE: Shell
CODE:
```
kubectl logs mypod
```

LANGUAGE: Shell
CODE:
```
kubectl logs mypod -c CONTAINER_NAME
```

----------------------------------------

TITLE: Viewing Kubernetes Pod Logs (Shell)
DESCRIPTION: This command retrieves the logs from the main container of a specified Kubernetes Pod. It is used to inspect the output and errors generated by the application running within the pod.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_65

LANGUAGE: Shell
CODE:
```
kubectl logs POD_NAME
```

----------------------------------------

TITLE: Building Docker Image from Dockerfile
DESCRIPTION: Builds a Docker image using the Dockerfile located at `/path/to/Dockerfile`, tagging it as `app:latest`. Requires Docker to be installed and a valid Dockerfile.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/flask_container_ci/README.md#_snippet_5

LANGUAGE: Bash
CODE:
```
docker build -t app:latest /path/to/Dockerfile
```

----------------------------------------

TITLE: Applying Kubernetes Deployment Manifest (Shell)
DESCRIPTION: Applies the configuration defined in the `deployment.yaml` file to the Kubernetes cluster. This command creates new resources or updates existing ones to match the desired state specified in the manifest.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_44

LANGUAGE: Shell
CODE:
```
kubectl apply -f deployment.yaml
```

----------------------------------------

TITLE: Viewing Pod Logs Kubectl
DESCRIPTION: Retrieves and prints logs for the specified pod. This general form works for pods with a single container. For multi-container pods, the container name must be explicitly provided.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_28

LANGUAGE: kubectl
CODE:
```
k logs POD_NAME
```

----------------------------------------

TITLE: List Deployments by Multiple Labels (env=prod, type=web) - Shell
DESCRIPTION: This command uses `kubectl` (aliased as `k`) to retrieve Deployments (`deploy`) in the current namespace that match *both* specified labels: `env=prod` and `type=web`. It illustrates how to combine multiple label selectors using a comma (`,`) for more specific filtering.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/exercises/labels_and_selectors/solution.md#_snippet_2

LANGUAGE: shell
CODE:
```
k get deploy -l env=prod,type=web
```

----------------------------------------

TITLE: Applying Terraform Configuration and Producing State File Shell
DESCRIPTION: The `terraform apply` command is the primary command used to apply the planned changes required to reach the desired state of the configuration, as defined in the `.tf` files. It is also the command that initially creates the `terraform.tfstate` file or updates the remote state after applying changes.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_21

LANGUAGE: Shell
CODE:
```
terraform apply
```

----------------------------------------

TITLE: Defining Ansible Playbook Tasks (YAML)
DESCRIPTION: This Ansible playbook defines tasks to be executed on a remote host identified by the 'some_remote_host' group. It includes two tasks: installing the 'zlib' package using the 'package' module with elevated privileges ('become: yes'), and creating an empty file named '/tmp/some_file' using the 'file' module with 'state: touch'.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/ansible/solutions/my_first_playbook.md#_snippet_0

LANGUAGE: YAML
CODE:
```
- name: Install zlib and create a file
  hosts: some_remote_host
  tasks:
    - name: Install zlib
      package:
        name: zlib
        state: present
      become: yes
    - name: Create the file /tmp/some_file
      file:
        path: '/tmp/some_file'
        state: touch
```

----------------------------------------

TITLE: Creating Directory with Ansible File Module
DESCRIPTION: This Ansible task uses the `file` module to ensure a directory exists at the specified path `/tmp/new_directory`. The `state: directory` parameter guarantees that the target is a directory and creates it if it does not already exist. It's a common operation for preparing filesystems before deploying applications or placing configuration files.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/ansible/solutions/my_first_task.md#_snippet_0

LANGUAGE: Ansible
CODE:
```
- name: Create a new directory
  file:
    path: "/tmp/new_directory"
    state: directory
```

----------------------------------------

TITLE: Defining Dockerfile for Node.js App (Dockerfile)
DESCRIPTION: Specifies the instructions for building a Docker image for the Node.js application. It uses Alpine as the base image, installs Node.js and npm, copies the source code, installs dependencies, exposes port 3000, and defines the entry point for running the application.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/devops/solutions/containerize_app.md#_snippet_1

LANGUAGE: Dockerfile
CODE:
```
FROM alpine
LABEL maintainer="your name/email"
RUN apk add --update nodejs npm
COPY . /src
WORKDIR /src
RUN npm install
EXPOSE 3000
ENTRYPOINT ["node", "./app.js"]
```

----------------------------------------

TITLE: Initializing Git Repo and First Commit - Shell
DESCRIPTION: This snippet demonstrates the complete workflow for creating a new Git repository locally, adding a file to it, making the first commit with a message, and finally inspecting the commit log to confirm the changes. It requires Git installed and a shell environment.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/solutions/commit_01_solution.md#_snippet_0

LANGUAGE: Shell
CODE:
```
mkdir my_repo && cd my_repo
git init
echo "hello_commit" > file
git add file
git commit -a -m "It's my first commit. Exciting!"
git log
```

----------------------------------------

TITLE: Declaring Required Providers - Terraform HCL
DESCRIPTION: Specifies the provider plugins necessary for the Terraform configuration within the `terraform` block. It declares the `aws` and `azurerm` providers, including their source addresses and an optional version constraint for `azurerm`. This block guides `terraform init` in downloading the correct provider plugins.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_3

LANGUAGE: HCL
CODE:
```
terraform {
    required_providers {
      aws = {
        source  = "hashicorp/aws"
      }
      azurerm = {
        source  = "hashicorp/azurerm"
        version = "~> 3.0.2"
      }
    }
  }
```

----------------------------------------

TITLE: Running Web Server Container with Port Mapping and Test (Podman/Curl)
DESCRIPTION: Runs an Apache HTTPD container detached (-d) with a specific name (--name) and maps port 8080 on the host to port 8080 in the container (-p). It then uses curl to test access to the service on the host's mapped port.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_9

LANGUAGE: Shell
CODE:
```
podman run -d --name apache1 -p 8080:8080 registry.redhat.io/rhel8/httpd-24
```

LANGUAGE: Shell
CODE:
```
curl 127.0.0.1:8080
```

----------------------------------------

TITLE: Piping Command Output (Shell)
DESCRIPTION: Illustrates the concept of piping (`|`), where the standard output of the `cat /etc/services` command (listing file content) is redirected as the standard input to the `wc -l` command, which counts the number of lines.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_9

LANGUAGE: shell
CODE:
```
cat /etc/services | wc -l
```

----------------------------------------

TITLE: Describing a Kubernetes Pod (Shell)
DESCRIPTION: Shows how to use `kubectl describe` to get detailed information about a specific Pod, including its status, events, and container states. Useful for debugging issues like `CrashLoopBackOff` or checking runtime details.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_7

LANGUAGE: Shell
CODE:
```
kubectl describe pods <POD_NAME>
```

----------------------------------------

TITLE: Modifying File and Committing Changes with Git (Bash)
DESCRIPTION: This snippet overwrites `new_file` with "Mario & Luigi". The `git commit -a` command stages tracked files that have been modified and then commits them, adding the change with the message "Added Luigi". It creates the second commit for squashing.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/solutions/squashing_commits.md#_snippet_1

LANGUAGE: bash
CODE:
```
echo "Mario & Luigi" > new_file
git commit -a -m "Added Luigi"
```

----------------------------------------

TITLE: Running Interactive Container with Terminal (Podman)
DESCRIPTION: Executes a container interactively (-i) with a pseudo-TTY (-t), typically running a shell command like /bin/bash to provide terminal access inside the container. This keeps the container running until the shell session ends.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_3

LANGUAGE: Shell
CODE:
```
podman container run -it ubuntu /bin/bash
```

LANGUAGE: Shell
CODE:
```
podman container run -it [image:tag] /bin/bash
```

----------------------------------------

TITLE: Listing Pods Across All Namespaces Kubectl
DESCRIPTION: Lists all pods running in the Kubernetes cluster across all namespaces. Useful for getting a cluster-wide view of pod activity. Requires appropriate permissions.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_22

LANGUAGE: kubectl
CODE:
```
kubectl get pods --all-namespaces
```

----------------------------------------

TITLE: Creating Kubernetes Deployment Resource - Kubectl
DESCRIPTION: This command creates a new Kubernetes Deployment resource named 'kubernetes-httpd'. The deployment is configured to use the 'httpd' container image. Kubernetes will ensure the desired number of replicas (defaulting to 1) of pods running this image are maintained.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_103

LANGUAGE: Kubectl
CODE:
```
kubectl create deployment kubernetes-httpd --image=httpd
```

----------------------------------------

TITLE: Creating AWS IAM User, Group, and Policies with Terraform
DESCRIPTION: This Terraform code defines the necessary AWS IAM resources to automate the creation of an admin user setup. It includes resources for an IAM user, an IAM group named 'admin', attaching the 'AdministratorAccess' policy to the 'admin' group, and adding the created user to the 'admin' group. The user is tagged with 'Role = DevOps'.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/create_user/solution.md#_snippet_0

LANGUAGE: Terraform
CODE:
```

resource "aws_iam_group_membership" "team" {
  name = "tf-testing-group-membership"

  users = [
    aws_iam_user.newuser.name,

  ]

  group = aws_iam_group.admin.name
}

resource "aws_iam_group_policy_attachment" "test-attach" {
  group      = aws_iam_group.admin.name
  policy_arn = "arn:aws:iam::aws:policy/AdministratorAccess"
}
resource "aws_iam_group" "admin" {
  name = "admin"
}

resource "aws_iam_user" "newuser" {
  name = "newuser"
  path = "/system/"

  tags = {
    Role = "DevOps"
  }
}
```

----------------------------------------

TITLE: Defining Kubernetes ConfigMap Resource - YAML
DESCRIPTION: This YAML snippet defines a Kubernetes ConfigMap resource. It creates a ConfigMap named 'some-configmap' containing a key-value pair where the key 'some_url' has the value 'samurai.jack'. This ConfigMap is created in the default or currently active namespace unless otherwise specified.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_96

LANGUAGE: YAML
CODE:
```
apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: some-configmap\ndata:\n  some_url: samurai.jack
```

----------------------------------------

TITLE: Building Docker Image (Shell)
DESCRIPTION: Executes the Docker build command to create an image based on the Dockerfile present in the current directory. The image is tagged with the name 'web_app' and the version 'latest'.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/devops/solutions/containerize_app.md#_snippet_2

LANGUAGE: shell
CODE:
```
docker image build -t web_app:latest .
```

----------------------------------------

TITLE: Scaling Up Kubernetes Deployment - Kubectl
DESCRIPTION: This command scales up or sets the number of replicas for a specific Deployment resource. Setting it to 1 ensures that Kubernetes attempts to run exactly one replica of the pods managed by the deployment. This is used to start or resume an application after scaling down.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_110

LANGUAGE: Kubectl
CODE:
```
kubectl scale deployment [name] --replicas=1
```

----------------------------------------

TITLE: Update and Push Git Repository Changes Bash
DESCRIPTION: Standard bash commands to navigate to the Git repository directory, edit a Kubernetes manifest file, stage all changes, commit the changes with a message (implied by `-a`), and push the commit to the specified branch on the origin remote. This action simulates a change in the desired state tracked by ArgoCD. Requires Git installed and a configured remote.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/sync_app_git/solution.md#_snippet_1

LANGUAGE: bash
CODE:
```
cd <git repo>
vi <k8s manifest>
git add .
git commit -a
git push origin <BRANCH_NAME>
```

----------------------------------------

TITLE: Running Docker Container from Image
DESCRIPTION: Runs a Docker container based on the `app` image, detaching it (`-d`), and mapping host port 5000 to container port 5000 (`-p`). Requires the `app` image to exist and Docker to be running.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/flask_container_ci/README.md#_snippet_6

LANGUAGE: Bash
CODE:
```
docker run -d -p 5000:5000 app
```

----------------------------------------

TITLE: Applying Kubernetes Resource to Namespace - Kubectl
DESCRIPTION: This command applies a Kubernetes resource defined in a local YAML file ('my_component.yaml') to a specific namespace. The '--namespace' flag overrides any namespace specified within the YAML file itself for this operation.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_97

LANGUAGE: Kubectl
CODE:
```
kubectl apply -f my_component.yaml --namespace=some-namespace
```

----------------------------------------

TITLE: Listing Pods by Label Selector (Bash)
DESCRIPTION: This command lists all pods in the current namespace that have the specific label 'app=web'.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_24

LANGUAGE: bash
CODE:
```
k get po -l app=web
```

----------------------------------------

TITLE: Listing Pods with Node Details Kubernetes Shell
DESCRIPTION: Lists all pods in the current namespace along with additional details, including the node on which each pod is running. The '-o wide' output format is crucial for seeing details like the node, internal IP, and restart count.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/certificates/ckad.md#_snippet_1

LANGUAGE: Shell
CODE:
```
kubectl get po -o wide
```

----------------------------------------

TITLE: Applying YAML Configuration with Kubectl Apply
DESCRIPTION: Applies the configuration defined in the specified YAML file (`pod.yaml`) to the Kubernetes cluster. This command creates or updates the resources (in this case, a pod) based on the file's content, including any added resource requests or limits. Requires `kubectl`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_40

LANGUAGE: Shell
CODE:
```
kubectl apply -f pod.yaml
```

----------------------------------------

TITLE: Pulling Container Image (Podman)
DESCRIPTION: This command pulls a specified container image with a given tag from a configured container registry. It downloads the image layers to the local storage so that containers can be created from it.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_29

LANGUAGE: shell
CODE:
```
podman image pull ubuntu:latest
```

----------------------------------------

TITLE: Partial YAML for Kubernetes Service Spec
DESCRIPTION: This YAML snippet shows the `spec` section for a Kubernetes Service, defining the selector used to identify target Pods (`app: some-app`) and the port configuration (`port: 8081`, `targetPort: 8081` using TCP protocol). It's presented as part of a larger service definition.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_51

LANGUAGE: yaml
CODE:
```
spec:
  selector:
    app: some-app
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
```

----------------------------------------

TITLE: Finding Most Recurring IP Shell Command
DESCRIPTION: This shell command pipeline processes the `ip_list` file to find the most recurring IP address. It sorts the IPs, extracts the relevant field (assuming IPs are the first space-separated field), counts unique occurrences with their frequency, sorts these counts numerically, and outputs the line with the highest count, which represents the most recurring IP.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/exercises/uniqe_count/solution.md#_snippet_0

LANGUAGE: shell
CODE:
```
sort ip_list | cut -d' ' -f1 | uniq -c | sort -n | tail -1
```

----------------------------------------

TITLE: Querying and Accessing Data Source (Terraform HCL)
DESCRIPTION: Defines an `aws_vpc` data source to query information about the default AWS VPC. The text explains that data retrieved from this source, such as the VPC ID, can be accessed using the `data.<PROVIDER_AND_TYPE>.<NAME>.<ATTRIBUTE>` syntax (e.g., `data.aws_vpc.default.id`).
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_14

LANGUAGE: HCL
CODE:
```
data "aws_vpc" "default {
  default = true
}
```

----------------------------------------

TITLE: Installing Python Dependencies with Pip
DESCRIPTION: Installs all required Python packages listed in the `requirements.txt` file using the pip package manager within the active virtual environment. Requires `requirements.txt` to be present.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/flask_container_ci/README.md#_snippet_2

LANGUAGE: Bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Interpolating Variable in Multiline String (Terraform HCL)
DESCRIPTION: Shows how to embed the value of a variable (`var.awesome_or_meh`) directly within a string literal using interpolation syntax (`${...}`). This is often used in attributes like `user_data` where configuration scripts need variable values, demonstrated here with a heredoc for multiline content.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_12

LANGUAGE: HCL
CODE:
```
user_data = <<-EOF
            This is some fabulos string
            It demonstrates how to use interpolation
            Yes, it's truly ${var.awesome_or_meh}
            EOF
```

----------------------------------------

TITLE: Declaring and Configuring AWS Provider - Terraform HCL
DESCRIPTION: This combined snippet first declares the required AWS provider from a specific source with a version constraint in the `terraform` block. It then provides a separate `provider` block to configure that specific instance of the AWS provider, setting the region to `us-west-2` for resource deployment.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_6

LANGUAGE: HCL
CODE:
```
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.0"
    }
  }
}

# Configure the AWS Provider
provider "aws" {
  region = "us-west-2"
}
```

----------------------------------------

TITLE: Listing Pods in Current Namespace Kubectl
DESCRIPTION: Lists all pods running in the currently selected Kubernetes namespace. Uses the common alias `po` for `pods`. This is the default way to see active pods.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_21

LANGUAGE: kubectl
CODE:
```
kubectl get po
```

----------------------------------------

TITLE: Defining AWS EC2 Instance Resource in Terraform
DESCRIPTION: This Terraform HCL snippet defines an AWS EC2 instance resource. It specifies the resource type (`aws_instance`), a logical name (`some-instance`), the Amazon Machine Image (AMI) to use, and the instance type.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_0

LANGUAGE: Terraform
CODE:
```
resource "aws_instance" "some-instance" {
  ami           = "ami-201720221991yay"
  instance_type = "t2.micro"
}
```

----------------------------------------

TITLE: Generating Base Pod YAML with Kubectl Run
DESCRIPTION: Generates a base YAML definition for a pod named `yay` using the `python` image without deploying it (`--dry-run=client -o yaml`). The output is redirected (`>`) to a file named `pod.yaml` for further editing, typically to add resource requests or limits. Requires `kubectl`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_37

LANGUAGE: Shell
CODE:
```
kubectl run yay --image=python --dry-run=client -o yaml > pod.yaml
```

----------------------------------------

TITLE: Testing Service Connectivity using Curl
DESCRIPTION: This command uses the `curl` utility to send an HTTP request to a specified Service IP and port. It is a common method for testing whether a Kubernetes service is reachable and forwarding traffic correctly to its backend Pods.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_55

LANGUAGE: bash
CODE:
```
curl <SERVICE IP>:<SERVICE PORT>
```

----------------------------------------

TITLE: Explaining AWS IAM Full Access Policy - JSON
DESCRIPTION: This snippet shows a basic AWS IAM policy document in JSON format. It demonstrates a policy that grants 'Allow' effect for all possible 'Action' (*) on all 'Resources' (*) within the AWS account. This specific policy grants administrative access and is equivalent to the managed policy 'AdministratorAccess'. It requires adherence to the standard IAM policy JSON structure.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/README.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": "*",
            "Resources": "*"
        }
    ]
}
```

----------------------------------------

TITLE: Scaling Kubernetes Deployment (kubectl)
DESCRIPTION: This `kubectl` command is used to horizontally scale a specific Kubernetes Deployment to a desired number of replicas. Replace `<DEPLOYMENT_NAME>` with the target deployment's name and `2` with the required number of pod instances.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_60

LANGUAGE: Shell
CODE:
```
kubectl scale deployment <DEPLOYMENT_NAME> --replicas=2
```

----------------------------------------

TITLE: Pulling Podman Image (bash)
DESCRIPTION: This command pulls the specified container image (here, 'httpd') from a configured container registry (usually Docker Hub by default) and stores it locally. Use this if you don't have any images locally to share. Requires Podman and network connectivity.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/sharing_images.md#_snippet_1

LANGUAGE: bash
CODE:
```
podman pull httpd
```

----------------------------------------

TITLE: Pushing Container Image to Registry (Podman)
DESCRIPTION: This command pushes a local container image to a configured container registry. By default, it pushes to the configured default registry, but a specific registry address can be specified after the image name.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_30

LANGUAGE: shell
CODE:
```
podman push IMAGE
```

----------------------------------------

TITLE: Listing IAM Roles AWS CLI
DESCRIPTION: This command uses the AWS Command Line Interface (CLI) to retrieve and display a list of all IAM roles present in the current AWS account. It is typically used here to verify that a newly created role appears in the list. Requires a configured AWS CLI.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/create_role/exercise.md#_snippet_0

LANGUAGE: CLI
CODE:
```
aws iam list-roles
```

----------------------------------------

TITLE: Following File Appends in Real-Time (tail)
DESCRIPTION: Uses the tail command with the -f (follow) option to continuously display new lines as they are appended to a specified file. This is extremely useful for monitoring log files in real-time.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_28

LANGUAGE: bash
CODE:
```
tail -f <file_name>
```

----------------------------------------

TITLE: Configuring Terraform S3 Backend HCL
DESCRIPTION: This HCL snippet shows the basic structure for configuring an Amazon S3 bucket as a remote backend for storing Terraform state. It is placed within the 'terraform' block of your configuration. Specific bucket details would replace the '...' placeholder.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_18

LANGUAGE: HCL
CODE:
```
terraform {
  backend "s3" {
    bucket ...
  }
}
```

----------------------------------------

TITLE: Creating Kubernetes Deployment (Shell)
DESCRIPTION: Creates a new Kubernetes Deployment named "pluck" using the "redis" container image. This command initiates the creation of the deployment object and its associated pods.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_40

LANGUAGE: Shell
CODE:
```
kubectl create deployment pluck --image=redis
```

----------------------------------------

TITLE: Creating Basic Pod YAML via Kubectl
DESCRIPTION: Generates a basic YAML manifest for a Pod without immediately creating it. This is useful for inspection or modification before deployment.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_128

LANGUAGE: Bash
CODE:
```
k run some-pod --image=redix -o yaml --dry-run=client > pod.yaml
```

----------------------------------------

TITLE: Building & Running Docker Container (Shell)
DESCRIPTION: Commands to build a Docker image for the application using a specified Dockerfile path and run a container from that image, mapping host port 5000 to container port 5000.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/flask_container_ci2/README.md#_snippet_3

LANGUAGE: Shell
CODE:
```
docker build -t app:latest /path/to/Dockerfile
```

LANGUAGE: Shell
CODE:
```
docker run -d -p 5000:5000 app
```

----------------------------------------

TITLE: Create Kubernetes Pod Shell
DESCRIPTION: Creates a single Kubernetes pod named 'nginx' using the 'nginx' image. It assigns the label 'app=dev-nginx', exposes port 80, and is configured not to restart automatically upon failure. This command is a quick way to deploy a single instance for testing.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/services_01_solution.md#_snippet_0

LANGUAGE: shell
CODE:
```
kubectl run nginx --image=nginx --restart=Never --port=80 --labels="app=dev-nginx"
```

----------------------------------------

TITLE: Running Container with Explicit Port Binding (Podman)
DESCRIPTION: This command runs an 'httpd' container in detached mode (-d), explicitly mapping the container's internal port 8080 to the host machine's port 8080 (-p 8080:8080). This ensures the server is accessible on port 8080 of the host.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/containerized_web_server.md#_snippet_3

LANGUAGE: Shell
CODE:
```
$ podman run -d -p 8080:8080 httpd
```

----------------------------------------

TITLE: Creating Master and Dev Branches - Git Bash
DESCRIPTION: This snippet shows a sequence of Git commands to set up a basic branching scenario. It includes changing directory into a repository, adding and committing a file on the default branch (assumed master), creating a new branch named 'dev' and switching to it, and then adding and committing a second file specifically on the 'dev' branch.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/solutions/branch_01_solution.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd some_repository
echo "master branch" > file1
git add file1
git commit -a -m "added file1"
git checkout -b dev
echo "dev branch" > file2
git add file2
git commit -a -m "added file2"
```

----------------------------------------

TITLE: Undoing Last Commit (Soft) Git bash
DESCRIPTION: This command undoes the last commit, moving the HEAD pointer back by one commit (`HEAD~1`). The changes from the undone commit are kept in the staging area (index) and the working directory. This is often referred to as a 'soft' reset and does not modify the working files.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_20

LANGUAGE: bash
CODE:
```
git reset HEAD~1
```

----------------------------------------

TITLE: Deploying a Pod using kubectl
DESCRIPTION: This command deploys a single Kubernetes Pod named 'web-1985'. It uses the 'nginx:alpine' container image and sets the restart policy to 'Never', meaning the pod will not be restarted automatically if it terminates.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/certificates/cka.md#_snippet_0

LANGUAGE: Kubernetes CLI
CODE:
```
kubectl run web-1985 --image=nginx:alpine --restart=Never
```

----------------------------------------

TITLE: Terraform Workflow for AWS EC2 - Shell Script
DESCRIPTION: This script demonstrates the complete lifecycle of managing an AWS EC2 instance using Terraform. It includes commands to set up the project directory, write the required `main.tf` configuration file using a here-document, and then run `terraform init`, `terraform validate`, `terraform plan`, `terraform apply -auto-approve`, and `terraform destroy -auto-approve` to manage the infrastructure. Requires Terraform CLI and AWS credentials.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/exercises/launch_ec2_instance/solution.md#_snippet_0

LANGUAGE: Shell
CODE:
```
mkdir exercise

cat << EOT >> main.tf
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.16"
    }
  }

  required_version = ">= 1.2.0"
}

provider "aws" {
  region  = "us-west-2"
}

resource "aws_instance" "app_server" {
  ami           = "ami-830c94e3"
  instance_type = "t2.micro"

  tags = {
    Name = "ExampleAppServerInstance"
  }
}
EOT

terraform init
terraform validate
terraform plan

# You should see this line at the end: Plan: 1 to add, 0 to change, 0 to destroy

terraform apply -auto-approve

# You should see the following output:
# aws_instance.app_server: Creation complete after 49s [id=i-004651a9d4427d236

# Running 'terraform apply' again won't change anything as
# Terraform will compare actual infrastructure to your
# configuration and won't find any difference. You should see the following line:
# Apply complete! Resources: 0 added, 0 changed, 0 destroyed.

# Remove instance
terraform destroy -auto-approve

# Destroy complete! Resources: 1 destroyed.
```

----------------------------------------

TITLE: Creating Kubernetes ReplicaSet with YAML and Kubectl Apply
DESCRIPTION: Defines a Kubernetes ReplicaSet named 'web' with 2 replicas using the 'somewebapp' and 'web' labels. The YAML definition includes the pod template with an httpd container. Applies the definition using 'kubectl apply -f rs.yaml', creating the ReplicaSet and its desired number of pods.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/replicaset_02_solution.md#_snippet_0

LANGUAGE: bash
CODE:
```
cat >> rs.yaml <<EOL
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: web
  labels:
    app: somewebapp
    type: web
spec:
  replicas: 2
  selector:
    matchLabels:
      type: web
  template:
    metadata:
      labels:
        type: web
    spec:
      containers:
      - name: httpd
        image: registry.redhat.io/rhscl/httpd-24-rhel7
EOL

kubectl apply -f rs.yaml
```

----------------------------------------

TITLE: Build Podman Image from Containerfile (Shell)
DESCRIPTION: This command builds a Podman image from a Containerfile (or Dockerfile) located in the current directory. It tags the resulting image with the name 'some_app' and the tag 'latest'. The '.' at the end specifies the build context as the current directory.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_34

LANGUAGE: shell
CODE:
```
podman image build -t some_app:latest .
```

----------------------------------------

TITLE: Updating and Upgrading APT Packages using Ansible
DESCRIPTION: This Ansible task uses the `apt` module to first update the package cache (`update_cache: yes`) and then upgrade all installed packages to their latest versions (`upgrade: yes`). It requires elevated privileges (`become: yes`) to run system package management commands.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/ansible/solutions/update_upgrade_task.md#_snippet_0

LANGUAGE: yaml
CODE:
```
- name: "update and upgrade apt packages."
  become: yes
  apt:
    upgrade: yes
    update_cache: yes
```

----------------------------------------

TITLE: Appending to PATH Variable (Shell)
DESCRIPTION: Demonstrates modifying the `PATH` environment variable. It appends new directories (`/user/bin:/..etc`) to the existing `$PATH`, separated by colons. This allows the shell to find executable commands located in the newly added directories.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_20

LANGUAGE: shell
CODE:
```
PATH="$PATH":/user/bin:/..etc
```

----------------------------------------

TITLE: Verifying Resource in Kubernetes Namespace - Kubectl
DESCRIPTION: This command retrieves and displays ConfigMap resources within a specific namespace. The '-n' flag is a shorthand for '--namespace' and is used here to verify the creation or existence of resources like a ConfigMap in 'some-namespace'.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_99

LANGUAGE: Kubectl
CODE:
```
kubectl get configmap -n some-namespace
```

----------------------------------------

TITLE: Piping and Filtering with Grep (Shell)
DESCRIPTION: Combines piping and redirection. The standard output of the `ls` command is piped (`|`) as the standard input to `grep`, which then filters lines ending with '.txt' (`\.txt$`). Requires `ls`, `grep`, and a shell.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_17

LANGUAGE: shell
CODE:
```
ls | grep "\.txt$"
```

----------------------------------------

TITLE: Creating Kubernetes Deployment Declaratively (YAML)
DESCRIPTION: Defines a Kubernetes Deployment manifest for an Nginx application. It specifies the desired state, including the number of replicas (1), the container image ("nginx:alpine"), and labels for selecting pods. This manifest can be applied using kubectl create -f <filename>.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_31

LANGUAGE: YAML
CODE:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
```

----------------------------------------

TITLE: Checking Port Usage with netstat or lsof (Shell)
DESCRIPTION: Presents two alternative shell command pipelines to check if a specific TCP port is currently in use by a process. Both use `grep` to filter output by the desired port number.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_68

LANGUAGE: Shell
CODE:
```
netstat -tnlp | grep <port_number>
lsof -i -n -P | grep <port_number>
```

----------------------------------------

TITLE: Setting Environment Variable (Temporary) - Shell
DESCRIPTION: Assigns a value (`2`) to a variable (`X`) within the current shell session. This variable is accessible in the current shell but is not automatically inherited by child processes or new shell sessions.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_104

LANGUAGE: Shell
CODE:
```
X=2
```

----------------------------------------

TITLE: Viewing Systemd Journal Logs (journalctl)
DESCRIPTION: Shows the journalctl command, the primary utility for querying and viewing logs collected by the systemd journal. It provides a standardized way to access logs from all systemd services and the kernel.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_27

LANGUAGE: bash
CODE:
```
journalctl
```

----------------------------------------

TITLE: Viewing Single Container Pod Logs Kubectl
DESCRIPTION: Retrieves and prints the logs from the primary (or only) container within the specified pod. If the pod has multiple containers, this command will fail, requiring the container name to be specified.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_24

LANGUAGE: kubectl
CODE:
```
kubectl logs [pod-name]
```

----------------------------------------

TITLE: Performing File and Directory Operations - Bash
DESCRIPTION: This snippet executes a sequence of shell commands to demonstrate basic file and directory manipulation. It covers creating a file, copying it, making multiple copies, creating a directory, moving files into it, copying the directory, renaming the copied directory, and finally removing both directories. It assumes a standard Unix-like shell environment.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/exercises/copy/solution.md#_snippet_0

LANGUAGE: bash
CODE:
```
touch /tmp/x
cp x ~/
cp x y
mkdir files
mv x files | mv y files
cp -r files copy_of_files
mv copy_of_files files2
rm -rf files files2
```

----------------------------------------

TITLE: Viewing Pod Container Logs (Shell)
DESCRIPTION: Explains how to retrieve logs from the containers running inside a Pod using `kubectl logs`. This is essential for understanding why a container might be crashing or behaving unexpectedly, particularly during `CrashLoopBackOff` errors.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_10

LANGUAGE: Shell
CODE:
```
kubectl logs <POD_NAME>
```

----------------------------------------

TITLE: Defining Kubernetes ReplicaSet Configuration (YAML)
DESCRIPTION: This YAML snippet defines a Kubernetes ReplicaSet specification. It sets the desired number of replicas to 2, selects pods with the label 'type: backend', and provides a template for creating new pods with the same label and an 'httpd' container. This ensures a stable set of 2 'backend' pods is running.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_61

LANGUAGE: YAML
CODE:
```
spec:
  replicas: 2
  selector:
    matchLabels:
      type: backend
  template:
    metadata:
      labels:
        type: backend
    spec:
      containers:
      - name: httpd-yup
        image: httpd
```

----------------------------------------

TITLE: Syncing Devel Branch with Main (Git, Bash)
DESCRIPTION: This sequence of commands updates the 'main' branch, switches to the 'devel' branch, and then merges the changes from 'main' into 'devel'. This ensures the 'devel' branch is up-to-date with the latest changes from 'main'.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_9

LANGUAGE: bash
CODE:
```
git checkout main
git pull
git checkout devel
git merge main
```

----------------------------------------

TITLE: Getting Kubernetes Nodes in JSON Format - Shell
DESCRIPTION: Retrieves the list of nodes from the Kubernetes cluster and outputs the data in JSON format, redirecting the output to a specified file (e.g., "some_nodes.json"). This assumes 'k' is an alias for 'kubectl'.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_4

LANGUAGE: shell
CODE:
```
k get nodes -o json > some_nodes.json
```

----------------------------------------

TITLE: Creating ArgoCD Application (CLI) - Bash
DESCRIPTION: This command creates a new ArgoCD application definition using the command-line interface. It requires specifying the application name, associated project, source Git repository URL, the path within the repository containing manifests, the target Kubernetes namespace, and the destination Kubernetes cluster server address. This is the initial setup step in ArgoCD.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/sync_app_git/exercise.md#_snippet_0

LANGUAGE: bash
CODE:
```
argocd app create app-demo \
--project project-demo \
--repo https://fake.repo.address \
--path ./some_app_path \
--dest-namespace default \
--dest-server my.kubernetes.cluster
```

----------------------------------------

TITLE: Setup Host Storage, Run MySQL Container, Verify (Podman/Shell)
DESCRIPTION: This shell script sequence prepares a host directory for persistent database storage, configures necessary SELinux contexts for container access on systems enforcing it, launches a detached MySQL container using Podman with defined user, password, and database via environment variables, mounts the designated host directory to the container's data path for persistence, and checks the status of running containers to confirm the database instance is active. It requires Podman installed, sudo privileges for directory creation and SELinux management, and the 'mysql' container image. The host path '/home/USERNAME/local/mysql' is mounted to '/var/lib/mysql/db' inside the container; adjust 'USERNAME' and potentially the container path based on the specific MySQL image if needed.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/containerized_db_persistent_storage.md#_snippet_0

LANGUAGE: Shell
CODE:
```
# Create the directory for the DB on host
mkdir -pv ~/local/mysql
sudo semanage fcontext -a -t container_file_t '/home/USERNAME/local/mysql(/.*)?'
sudo restorecon -R /home/USERNAME/local/mysql

# Run the container
podman run --name mysql -e MYSQL_USER=mario -e MYSQL_PASSWORD=tooManyMushrooms -e MYSQL_DATABASE=university -e MYSQL_ROOT_PASSWORD=MushroomsPizza -d mysql -v /home/USERNAME/local/mysql:/var/lib/mysql/db

# Verify it's running
podman ps
```

----------------------------------------

TITLE: Adding Tolerations to Pod Spec (YAML)
DESCRIPTION: This YAML snippet illustrates how to add `tolerations` to a pod's specification. This specific toleration matches a taint with key 'app', value 'web', and effect 'NoSchedule', allowing the pod to be scheduled on nodes with this taint. This block is inserted within the `spec` section of a pod definition.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_34

LANGUAGE: YAML
CODE:
```
  - effect: NoSchedule
    key: app
    operator: Equal
    value: web
```

----------------------------------------

TITLE: Adding Resource Requests to Pod Spec (YAML)
DESCRIPTION: This YAML snippet shows how to define CPU (`250m`) and memory (`64Mi`) resource `requests` for a container within the `resources` block of a pod specification. These requests help the scheduler determine suitable nodes. This block is placed under `spec.containers[].resources`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_39

LANGUAGE: YAML
CODE:
```
spec:
  containers:
  - image: python
    imagePullPolicy: Always
    name: yay
    resources:
      requests:
        cpu: 250m
        memory: 64Mi
```

----------------------------------------

TITLE: YAML Manifest for Deployment with Selector Mismatch
DESCRIPTION: This YAML manifest contains a mismatch between the deployment's selector and the pod template's labels, preventing the deployment from managing its intended pods.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_20

LANGUAGE: yaml
CODE:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: dep
  name: dep
spec:
  replicas: 3
  selector:
    matchLabels:
      app: depdep
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: dep
    spec:
      containers:
      - image: redis
        name: redis
        resources: {}
status: {}
```

----------------------------------------

TITLE: YAML Node Affinity Required Scheduling (NotIn Operator)
DESCRIPTION: This YAML snippet shows a node affinity configuration using 'requiredDuringSchedulingIgnoredDuringExecution' and the 'NotIn' operator to prevent scheduling a pod on nodes where the 'region' label exists with the value 'neverland'.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_23

LANGUAGE: yaml
CODE:
```
affinity:
  nodeAffinity:
    requiredDuringSchedlingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: region
          operator: NotIn
          values:
          - neverland
```

----------------------------------------

TITLE: Managing ArgoCD Application Lifecycle with CLI
DESCRIPTION: Provides a sequence of shell commands using the `argocd` CLI and `kubectl` to manage the full lifecycle of an ArgoCD application. This includes creation, checking state, syncing, waiting for synchronization, verifying resource deployment in Kubernetes, and finally deleting the application. Requires the `argocd` CLI and `kubectl` installed and configured.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/app_creation/solution.md#_snippet_0

LANGUAGE: shell
CODE:
```
argocd app create app-demo \
--project app-project \
--repo https://fake.repo.address \
--path ./some_app_path \
--dest-namespace default \
--dest-server my.kubernetes.cluster

# Check app state
argocd app list
argocd app get app-demo

# Sync app state
argocd app sync app-demo
argocd app wait app-demo

# Verify kubernetes resources were created
kubectl get deployments

# Delete the app
argocd app delete app-demo
```

----------------------------------------

TITLE: Creating Kubernetes ReplicaSet with kubectl/YAML
DESCRIPTION: Defines a Kubernetes ReplicaSet in YAML to manage 2 replicas of a web application using the `httpd-24-rhel7` image and applies this configuration using `kubectl apply -f`. Requires `kubectl` and access to a Kubernetes cluster.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/replicaset_01_solution.md#_snippet_0

LANGUAGE: bash
CODE:
```
cat >> rs.yaml <<EOL
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: web
  labels:
    app: somewebapp
    type: web
spec:
  replicas: 2
  selector:
    matchLabels:
      type: web
  template:
    metadata:
      labels:
        type: web
    spec:
      containers:
      - name: httpd
        image: registry.redhat.io/rhscl/httpd-24-rhel7
EOL

kubectl apply -f rs.yaml
```

----------------------------------------

TITLE: Managing Systemd Services (systemctl)
DESCRIPTION: Provides commands for basic systemd service management, including starting, stopping, and checking the status of a service using the systemctl utility. These commands are fundamental for controlling services on modern Linux distributions.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_26

LANGUAGE: bash
CODE:
```
systemctl start <service name>
```

LANGUAGE: bash
CODE:
```
systemctl stop <service name>
```

LANGUAGE: bash
CODE:
```
systemctl status <service name>
```

----------------------------------------

TITLE: Count Characters Per Line from Input Bash
DESCRIPTION: This bash script reads lines of input provided by the user within a while loop. For each line read, it prints the line content without a trailing newline using `echo -n` and pipes it to `wc -c` to get the character count, which is then printed. It prompts the user for input repeatedly until an empty line is entered. Requires standard bash commands like `echo`, `read`, and `wc`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/solutions/count_chars.md#_snippet_0

LANGUAGE: bash
CODE:
```
#!/usr/bin/env bash

echo -n "Please insert your input: "

while read line; do
    echo -n "$line" | wc -c
    echo -n "Please insert your input: "
done
```

----------------------------------------

TITLE: Initializing Terraform Backend Shell
DESCRIPTION: The `terraform init` command is used to initialize a Terraform working directory. When a backend configuration is present (either inline or via backend-config), this command configures the backend, potentially migrating the state to the new location.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_19

LANGUAGE: Shell
CODE:
```
terraform init
```

----------------------------------------

TITLE: Defining ArgoCD Application Destination YAML
DESCRIPTION: This YAML snippet defines the `destination` section of an ArgoCD Application resource. It specifies the target Kubernetes cluster (`server`, usually the API server address or service name) and the namespace within that cluster (`namespace`) where the application resources should be deployed and managed by ArgoCD. This tells ArgoCD *where* to deploy the desired state.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/README.md#_snippet_1

LANGUAGE: YAML
CODE:
```
destination:
  server: http://some.kubernetes.cluster.svc
  namespace: devopsExercises
```

----------------------------------------

TITLE: Switching Current Kubernetes Namespace - Shell
DESCRIPTION: Changes the default namespace for the currently active kubectl context to `some-namespace`. Subsequent commands will target this namespace unless explicitly overridden. The `--current` flag applies the change to the current context.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_91

LANGUAGE: shell
CODE:
```
kubectl config set-context --current --namespace=some-namespace
```

----------------------------------------

TITLE: Defining String Input Variable (Terraform HCL)
DESCRIPTION: Defines a Terraform input variable named "app_id". It specifies the variable's type as string, provides a description for clarity, and sets a default value. This allows users to override the value when running Terraform commands.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_8

LANGUAGE: HCL
CODE:
```
variable "app_id" {
  type        = string
  description = "The id of application"
  default     = "some_value"
}
```

----------------------------------------

TITLE: Implementing AWS Lambda Hello Handler - Python
DESCRIPTION: This Python snippet defines the core logic for an AWS Lambda function. The `lambda_handler` function serves as the entry point, accepting 'event' and 'context' parameters. It extracts a 'name' value from the input 'event' dictionary and returns a greeting string 'Hello ' followed by the extracted name.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/hello_function/solution.md#_snippet_0

LANGUAGE: python
CODE:
```
import json

def lambda_handler(event, context):
    firstName = event['name']
    return 'Hello ' + firstName
```

----------------------------------------

TITLE: Searching File Content with Grep (Shell)
DESCRIPTION: Shows how to use `grep` to search for lines containing a specific 'word' within the file `file.md`. It outputs each line that contains the specified pattern. Requires the `grep` utility and the target file.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_1

LANGUAGE: shell
CODE:
```
grep 'word' file.md
```

----------------------------------------

TITLE: Cloning Git Repository (Shell)
DESCRIPTION: Clones a specific Node.js project repository from GitHub using the Git command-line interface. This is the initial step to obtain the application source code that will be containerized.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/devops/solutions/containerize_app.md#_snippet_0

LANGUAGE: shell
CODE:
```
git clone https://github.com/bregman-arie/node-hello-world
```

----------------------------------------

TITLE: Running Interactive Ubuntu Container - Podman Shell
DESCRIPTION: Runs a new container using the latest 'ubuntu' image with interactive pseudo-TTY enabled (-it) and executes /bin/bash inside the container, allowing terminal access.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/running_containers.md#_snippet_2

LANGUAGE: sh
CODE:
```
podman container run -it ubuntu:latest /bin/bash
```

----------------------------------------

TITLE: Scaling Down Kubernetes ReplicaSet Replicas (Shell)
DESCRIPTION: This command uses 'kubectl scale' (aliased 'k') to decrease the desired number of replicas for the ReplicaSet named 'rori' to 1. The ReplicaSet controller will automatically terminate existing pods until the total count of pods matching its selector is reduced to 1.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_76

LANGUAGE: Shell
CODE:
```
k scale rs rori --replicas=1
```

----------------------------------------

TITLE: Inspecting Current Terraform State Shell
DESCRIPTION: The `terraform show` command is used to inspect the current state file, providing a human-readable output of the resources managed by Terraform, their attributes, and potentially outputs defined in the configuration.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_22

LANGUAGE: Shell
CODE:
```
terraform show
```

----------------------------------------

TITLE: Defining Namespaced Kubernetes ConfigMap - YAML
DESCRIPTION: This YAML snippet defines a Kubernetes ConfigMap resource, explicitly specifying the target namespace. It creates a ConfigMap named 'some-configmap' within the 'some-namespace' namespace, containing the key-value pair 'some_url: samurai.jack'.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_98

LANGUAGE: YAML
CODE:
```
apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: some-configmap\n  namespace: some-namespace
```

----------------------------------------

TITLE: Referencing Resource Attribute - AWS Instance HCL
DESCRIPTION: Configures an AWS EC2 instance resource and demonstrates how to reference the ID attribute of another resource (`aws_security_group.instance.id`) to establish a dependency. This allows the instance to be associated with a specific security group whose definition is managed elsewhere in the configuration. Dependencies: An `aws_security_group` resource named `instance` must exist and be created before this instance.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_2

LANGUAGE: HCL
CODE:
```
resource "aws_instance" "some-instance" {

  ami           = "some-ami"
  instance_type = "t2.micro"
  vpc_security_group_ids = [aws_security_group.instance.id]

}
```

----------------------------------------

TITLE: Configuring AWS IAM Account Password Policy in Terraform
DESCRIPTION: This Terraform resource block defines an account-level password policy for AWS IAM. It enforces a minimum length of 8 characters, requires at least one number, allows users to change their password, and prevents the reuse of the last password.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/password_policy_and_mfa/solution.md#_snippet_0

LANGUAGE: Terraform
CODE:
```
resource "aws_iam_account_password_policy" "strict" {
  minimum_password_length        = 8
  require_numbers                = true
  allow_users_to_change_password = true
  password_reuse_prevention      = 1
}
```

----------------------------------------

TITLE: Configuring AWS Instance User Data with Heredoc (HCL)
DESCRIPTION: Demonstrates how to define the `user_data` argument for an `aws_instance` resource using a heredoc (`<<-EOF ... EOF`). This allows embedding multi-line scripts, typically bash scripts, that execute when the instance boots.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_33

LANGUAGE: HCL
CODE:
```
resource "aws_instance" "example" {
 ami = "..."
 instance_type = "t2.micro"

 user_data = <<-EOF
             #!/bin/bash
             echo "Hello, World" > index.xhtml
 EOF
}
```

----------------------------------------

TITLE: Kubernetes Deployment Node Affinity (YAML Example)
DESCRIPTION: Shows a YAML snippet that defines node affinity rules within a Kubernetes Deployment manifest's pod template. It requires pods to be scheduled only on nodes that have a label with the key "blufer" existing, using `requiredDuringSchedlingIgnoredDuringExecution`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_43

LANGUAGE: YAML
CODE:
```
spec:
  affinity:
    nodeAffinity:
      requiredDuringSchedlingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: blufer
            operator: Exists
```

----------------------------------------

TITLE: Declaring AWS Provider for terraform init - Terraform HCL
DESCRIPTION: Specifies the required `aws` provider from `hashicorp/aws` with a version constraint (`~> 3.0`) within the `terraform` block. This declaration is primarily processed by the `terraform init` command, which downloads and installs the necessary provider plugin according to the source and version specified.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_7

LANGUAGE: HCL
CODE:
```
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.0"
    }
  }
}
```

----------------------------------------

TITLE: Mount Host Directory to Container (Shell)
DESCRIPTION: This command sequence sets the container binary to 'podman', creates a directory on the host ('/tmp/dir_on_the_host'), and then runs a container from 'IMAGE_NAME'. The '-v' flag mounts the host directory '/tmp/dir_on_the_host' to '/tmp/dir_on_the_container' inside the container, allowing data sharing.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_36

LANGUAGE: shell
CODE:
```
CONTAINER_BINARY=podman
mkdir /tmp/dir_on_the_host

$CONTAINER_BINARY run -v /tmp/dir_on_the_host:/tmp/dir_on_the_container IMAGE_NAME
```

----------------------------------------

TITLE: Generating Base Pod YAML with Kubectl Run (yay2)
DESCRIPTION: Generates a base YAML definition for a pod named `yay2` using the `python` image without deploying it (`--dry-run=client -o yaml`). The output is redirected to `pod.yaml` for editing, specifically to add both resource requests and limits. Requires `kubectl`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_41

LANGUAGE: Shell
CODE:
```
kubectl run yay2 --image=python --dry-run=client -o yaml > pod.yaml
```

----------------------------------------

TITLE: Creating Load Balancer Service using Kubectl Expose
DESCRIPTION: This command imperatively creates a Kubernetes Service of type LoadBalancer for an existing Deployment named "alle". It exposes the application running on port 8080, making it accessible externally via a cloud provider's load balancer.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_45

LANGUAGE: kubectl
CODE:
```
kubectl expose deployment alle --type=LoadBalancer --port 8080
```

----------------------------------------

TITLE: Complete Kubernetes Ingress Routing Configuration
DESCRIPTION: This complete YAML manifest defines a Kubernetes Ingress resource with a basic routing rule. It directs HTTP traffic for the host 'my.host' to the backend service named 'someapp-internal-service' on port 8080, illustrating a typical ingress setup.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_57

LANGUAGE: YAML
CODE:
```
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: someapp-ingress
spec:
  rules:
  - host: my.host
    http:
      paths:
      - backend:
          serviceName: someapp-internal-service
          servicePort: 8080
```

----------------------------------------

TITLE: Executing Command in Kubernetes Pod - Shell
DESCRIPTION: Executes a command (`/bin/bash`) inside a running container of a specific Pod (`test-dev`) in a given namespace (`dev`). The `--stdin` and `--tty` flags are used for interactive terminal access, typically to run commands like `ping` inside the pod.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_81

LANGUAGE: shell
CODE:
```
kubectl exec --stdin --tty test-dev -n dev -- /bin/bash
```

----------------------------------------

TITLE: Referring to All Arguments in Shell
DESCRIPTION: Explains the difference between `$@` and `$*`. `$@` treats arguments as separate strings (useful for loops), while `$*` treats all arguments as a single string.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/README.md#_snippet_7

LANGUAGE: Shell
CODE:
```
$@
```

LANGUAGE: Shell
CODE:
```
$*
```

----------------------------------------

TITLE: Listing Kubernetes Namespaces - Shell
DESCRIPTION: Lists all available namespaces in the Kubernetes cluster using the `kubectl get namespaces` command.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_82

LANGUAGE: shell
CODE:
```
kubectl get namespaces
```

----------------------------------------

TITLE: Listing Kubernetes ReplicaSets (Shell)
DESCRIPTION: This command is used to list all ReplicaSet resources in the current Kubernetes namespace. It displays information such as the name, desired number of pods, current number of pods, ready pods, and age, providing a quick overview of the running ReplicaSets.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_62

LANGUAGE: Shell
CODE:
```
kubectl get rs
```

----------------------------------------

TITLE: Declaring Basic Terraform Module Resource (HCL)
DESCRIPTION: Provides the fundamental syntax for declaring a `module` block in Terraform configuration. It highlights the required `source` argument which specifies the location of the module code.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_28

LANGUAGE: HCL
CODE:
```
module "<MODULE_NAME>" {
  source = "<MODULE_SOURCE>"

  ...
}
```

----------------------------------------

TITLE: Creating and Listing Kubernetes Pods with kubectl
DESCRIPTION: This snippet executes two `kubectl` commands sequentially. First, it creates a Kubernetes pod named 'nginx' from the 'nginx' Docker image with a restart policy explicitly set to 'Never'. Following this, it lists all pods present in the currently active Kubernetes namespace, which allows verification of the newly created pod's state.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/pods_01_solution.md#_snippet_0

LANGUAGE: Shell
CODE:
```
kubectl run nginx --image=nginx --restart=Never
kubectl get pods
```

----------------------------------------

TITLE: Running Container in Background (Docker)
DESCRIPTION: Uses the -d flag to run a Docker container in detached mode, meaning it runs in the background and does not attach to the current terminal. Useful for running services.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_7

LANGUAGE: Shell
CODE:
```
docker container run -d httpd
```

----------------------------------------

TITLE: Checking Pod Resource Limits (kubectl, Shell)
DESCRIPTION: Uses `kubectl describe` to view the configuration of a specific pod and pipes the output to `grep` to filter for lines containing "limits", indicating defined resource limits. Requires the name of the target pod.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_141

LANGUAGE: Shell
CODE:
```
kubectl describe po <POD_NAME> | grep -i limits
```

----------------------------------------

TITLE: Problematic JobTemplate Configuration in CronJob | YAML
DESCRIPTION: A snippet showing a 'jobTemplate' structure within a CronJob manifest. It includes configuration lines like 'concurrencyPolicy' and history limits placed under 'spec.template.spec', which is the Pod template spec. This placement prevents the settings from applying to the Job itself, potentially leading to issues like unbounded job history or unexpected concurrency behavior.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_118

LANGUAGE: yaml
CODE:
```
schedule: '*/1 * * * *'
jobTemplate:
  spec:
    template:
      spec:
      restartPolicy: Never
      concurrencyPolicy: Forbid
      successfulJobsHistoryLimit: 1
      failedJobsHistoryLimit: 1
```

----------------------------------------

TITLE: Applying Node Taint with kubectl
DESCRIPTION: Applies a taint to a specified Kubernetes node (`minikube`). The taint has the key `app`, value `web`, and effect `NoSchedule`. The `NoSchedule` effect prevents pods without a corresponding toleration from being scheduled onto this node.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/exercises/taints_101/solution.md#_snippet_1

LANGUAGE: shell
CODE:
```
kubectl taint node minikube app=web:NoSchedule
```

----------------------------------------

TITLE: Creating GCP Compute Instance using gcloud
DESCRIPTION: This command creates a new Compute Engine instance named "instance-1" with a machine type of `e2-micro` and assigns the labels `app=web` and `env=dev`. It's used to provision a new virtual machine with specified configurations and metadata.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/gcp/README.md#_snippet_4

LANGUAGE: Shell
CODE:
```
gcloud compute instances create instance-1 --labels app=web,env=dev --machine-type=e2-micro
```

----------------------------------------

TITLE: Inspecting Container Details (Podman)
DESCRIPTION: This command provides detailed low-level information about a Podman container, including its configuration, state, network settings, and mounted volumes. It is particularly useful for examining aspects like mounted filesystems that `podman diff` doesn't cover.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_26

LANGUAGE: shell
CODE:
```
podman inspec CONTAINER_NAMD/ID
```

----------------------------------------

TITLE: Executing Parallel Stages on Multiple Jenkins Nodes (Jenkinsfile)
DESCRIPTION: Demonstrates a Jenkins Declarative Pipeline that uses the `parallel` directive to run different stages simultaneously on specific nodes identified by labels. It shows how to define agents for individual parallel stages within a main stage.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/cicd/README.md#_snippet_0

LANGUAGE: Jenkinsfile
CODE:
```
pipeline {
    agent any
    stages {
        stage('Build') {
            parallel {
                stage('Node 1') {
                    agent { label 'node1' }
                    steps {
                        // Run build commands on Node 1
                    }
                }
                stage('Node 2') {
                    agent { label 'node2' }
                    steps {
                        // Run build commands on Node 2
                    }
                }
                stage('Node 3') {
                    agent { label 'node3' }
                    steps {
                        // Run build commands on Node 3
                    }
                }
            }
        }
        stage('Deploy') {
            agent any
            steps {
                // Deploy the built artifacts
            }
        }
    }
}
```

----------------------------------------

TITLE: Verifying Kubernetes ReplicaSet Status with Kubectl Get
DESCRIPTION: Uses 'kubectl get rs' to list existing ReplicaSets and verify the 'web' ReplicaSet has been created and reports the correct number of desired, current, and ready replicas. An alternative command 'kubectl get -f rs.yaml' is also provided for more specific verification.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/replicaset_02_solution.md#_snippet_1

LANGUAGE: bash
CODE:
```
kubectl get rs
```

LANGUAGE: bash
CODE:
```
# OR a more specific way: kubectl get -f rs.yaml
```

----------------------------------------

TITLE: Scaling Up Kubernetes ReplicaSet Replicas (Shell)
DESCRIPTION: This command uses 'kubectl scale' (aliased 'k') to increase the desired number of replicas for the ReplicaSet named 'rori' to 5. The ReplicaSet controller will automatically create new pods until the total count of pods matching its selector reaches 5.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_75

LANGUAGE: Shell
CODE:
```
k scale rs rori --replicas=5
```

----------------------------------------

TITLE: Getting Kubernetes Pod Status (Shell)
DESCRIPTION: Retrieves and displays the current status of the 'web' pod using `kubectl get po`. This command is used to check initial details like the pod's state and the current number of restarts.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/killing_containers.md#_snippet_2

LANGUAGE: Shell
CODE:
```
kubectl get po web
```

----------------------------------------

TITLE: Installing Helm Chart with Values File Shell
DESCRIPTION: Shows how to install a Helm chart while overriding default values using a separate values file. This is useful for applying environment-specific configurations (e.g., dev, staging, prod) without modifying the chart itself.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_122

LANGUAGE: Shell
CODE:
```
helm install --values=override-values.yaml [CHART_NAME]
```

----------------------------------------

TITLE: Scaling Kubernetes Deployment Replicas (Shell)
DESCRIPTION: This command is used to adjust the number of desired replicas for a Kubernetes Deployment. It tells the Deployment controller to scale the underlying ReplicaSet(s) up or down to achieve the specified replica count.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_67

LANGUAGE: Shell
CODE:
```
kubectl scale deploy <DEPLOYMENT_NAME> --replicas=8
```

----------------------------------------

TITLE: Listing Pods Across All Namespaces Kubernetes Shell
DESCRIPTION: Lists all pods across every namespace in the entire Kubernetes cluster. This command provides a comprehensive view of all running pods, regardless of which namespace they belong to.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/certificates/ckad.md#_snippet_4

LANGUAGE: Shell
CODE:
```
kubectl get po --all-namespaces
```

----------------------------------------

TITLE: Creating Kubernetes Namespace - Shell
DESCRIPTION: Creates a new namespace named `alle` in the Kubernetes cluster using the `kubectl create ns` command (aliased as `k`).
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_84

LANGUAGE: shell
CODE:
```
k create ns alle
```

----------------------------------------

TITLE: Creating Kubernetes Secret from File | Bash
DESCRIPTION: Command to create a Kubernetes Secret named 'some-secret' from the content of a file located at '/some/file.txt'. Each file in the specified path becomes a key in the secret, with the filename as the key and the file content as the value.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_112

LANGUAGE: bash
CODE:
```
kubectl create secret generic some-secret --from-file=/some/file.txt
```

----------------------------------------

TITLE: Executing Command in Pod Container (Shell)
DESCRIPTION: Demonstrates using `kubectl exec` to run commands directly inside a running container within a Pod. Useful for inspecting the container's filesystem or environment for debugging purposes.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_8

LANGUAGE: Shell
CODE:
```
kubectl exec web -- ls
```

----------------------------------------

TITLE: Verifying Running Container (Shell)
DESCRIPTION: Includes commands to list running Docker containers (`docker container ls`) and view the logs of a specific container (`docker logs <container ID/name>`). These commands help confirm that the application container started successfully and is running as expected.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/devops/solutions/containerize_app.md#_snippet_6

LANGUAGE: shell
CODE:
```
docker container ls
docker logs <container ID/name>
```

----------------------------------------

TITLE: Building Application Image - Multi-Stage Dockerfile
DESCRIPTION: This Dockerfile implements a multi-stage build, separating the build environment from the final runtime environment. The first stage builds the application using a Node.js base image, and the second stage, based on Nginx, copies only the necessary build output (the dist directory) from the first stage, resulting in a smaller and more efficient final image.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/multi_stage_builds.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
FROM node:6
RUN mkdir -p /my_cool_app
RUN npm install -g ember-cli
RUN npm install -g bower
WORKDIR /my_cool_app
RUN npm install
ADD app/ /my_cool_app
RUN bower install
RUN ember build — environment=prod

FROM nginx
RUN mkdir -p /my_cool_app
ADD ./config/nginx/docker.conf /etc/nginx/nginx.conf
ADD ./config/nginx/k8s.conf /etc/nginx/nginx.conf.k8s
# Copy build artifacts from the first stage
COPY — from=0 /my_cool_app/dist /my_cool_app/dist
WORKDIR /my_cool_app
CMD [ “/root/nginx-app.sh”, “nginx”, “-g”, “daemon off;” ]
```

----------------------------------------

TITLE: Deleting Kubernetes Deployment (Bash)
DESCRIPTION: This command deletes a specific Deployment named 'depdep'.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_16

LANGUAGE: bash
CODE:
```
k delete deploy depdep
```

----------------------------------------

TITLE: Creating Deployment Manifest (Bash)
DESCRIPTION: This command generates a YAML manifest for a Deployment named 'dep' with 3 replicas using the 'redis' image, saving it to 'deployment.yaml' without applying it.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_15

LANGUAGE: bash
CODE:
```
k create deploy dep -o yaml --image=redis --dry-run=client --replicas 3 > deployment.yaml
```

----------------------------------------

TITLE: Scaling Up Kubernetes ReplicaSet (Bash)
DESCRIPTION: This command scales a specific ReplicaSet named 'rori' to ensure 5 replicas (pods) are running.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_9

LANGUAGE: bash
CODE:
```
k scale rs rori --replicas=5
```

----------------------------------------

TITLE: Referencing Kubernetes Secret in Deployment | YAML
DESCRIPTION: A snippet from a Kubernetes Deployment manifest's container specification showing how to expose a value from a Secret as an environment variable. The 'valueFrom.secretKeyRef' specifies the name of the Secret ('some-secret') and the key within the Secret ('password') whose value should be assigned to the 'USER_PASSWORD' environment variable.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_115

LANGUAGE: yaml
CODE:
```
spec:
  containers:
    - name: USER_PASSWORD
      valueFrom:
        secretKeyRef:
          name: some-secret
          key: password
```

----------------------------------------

TITLE: Comparing Working Directory to HEAD Git bash
DESCRIPTION: This command compares the working directory against the HEAD commit. It shows the differences between the files currently in your working directory and the version stored in the latest commit. This is a common way to see uncommitted changes, including both staged and unstaged modifications.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_25

LANGUAGE: bash
CODE:
```
git diff HEAD
```

----------------------------------------

TITLE: Encrypting Kubernetes Secrets with Kubeseal (Shell)
DESCRIPTION: This shell command utilizes the `kubeseal` utility to encrypt a standard Kubernetes Secret manifest file. It reads the input secret YAML from `some/secret.yml` via standard input, encrypts it using the Sealed Secrets controller's public key (requires the controller to be running and accessible), and redirects the encrypted output in YAML format (`-o yaml`) to the specified file path `sealed_secrets/some/encrypted_secret.yaml`. This encrypted file is safe to commit to a public or private Git repository.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/secrets_101/soltuion.md#_snippet_0

LANGUAGE: Shell
CODE:
```
kubeseal < some/secret.yml > sealed_secrets/some/encrypted_secret.yaml -o yaml
```

----------------------------------------

TITLE: Modifying File Lines Using Loop - Ansible YAML
DESCRIPTION: Demonstrates using the lineinfile module within a loop (with_items) to modify specific lines in a file based on a regular expression pattern and replace them with new content. It's useful for updating configuration files.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/ansible/README.md#_snippet_12

LANGUAGE: YAML
CODE:
```
- name: Change saiyans levels
  lineinfile:
    dest: /tmp/exercise
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: '^Vegeta', line: 'Vegeta = 250' }
    - { regexp: '^Trunks', line: 'Trunks = 40' }
    ...
```

----------------------------------------

TITLE: Renaming S3 Bucket using AWS CLI
DESCRIPTION: Demonstrates the process for effectively 'renaming' an Amazon S3 bucket using the AWS Command Line Interface. Since S3 bucket names are immutable, the operation involves creating a new bucket with the desired name, syncing all content from the old bucket to the new one, and then deleting the original bucket. This process requires the AWS CLI to be installed and configured with sufficient permissions to create, sync, and delete buckets.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
# Create new bucket
aws s3 mb s3://[NEW_BUCKET_NAME]
# Sync the content from the old bucket to the new bucket
$ aws s3 sync s3://[OLD_BUCKET_NAME] s3://[NEW_BUCKET_NAME]
# Remove old bucket
$ aws s3 rb --force s3://[OLD_BUCKET_NAME]
```

----------------------------------------

TITLE: Fixing Find and Sed Command (Shell)
DESCRIPTION: Shows the corrected syntax for using `find` to locate files (`*.yaml`) and execute (`-exec`) a `sed` command on them. Corrects quoting around the pattern and escaping of the semicolon terminator for `-exec`. Requires `find` and `sed`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_11

LANGUAGE: shell
CODE:
```
find . -iname "*.yaml" -exec sed -i "s/1/2/g" {} \;
```

----------------------------------------

TITLE: Initial Terraform Code for AWS EC2 Instance
DESCRIPTION: This HCL code block, typically saved in a `.tf` file like `main.tf`, defines a basic AWS EC2 instance resource. It's presented here in the context of the initial step before running `terraform init` to download necessary providers.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_1

LANGUAGE: Terraform
CODE:
```
resource "aws_instance" "some-instance" {
  ami           = "ami-201720221991yay"
  instance_type = "t2.micro"
}
```

----------------------------------------

TITLE: Passing and Modifying Slices in Functions Go
DESCRIPTION: This Go snippet illustrates how modifications to slices passed to functions behave. `mod1` changes the elements of the slice, affecting the original slice in the caller. `mod2` uses `append`, which can create a new underlying array, and reassigns the local slice variable `a`. Changes made *after* the append are only to the local slice `a`, not the original slice `s2`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_7

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
)

func mod1(a []int) {
	for i := range a {
		a[i] = 5
	}

	fmt.Println("1:", a)
}

func mod2(a []int) {
	a = append(a, 125) // !

	for i := range a {
		a[i] = 5
	}

	fmt.Println("2:", a)
}

func main() {
	s1 := []int{1, 2, 3, 4}
	mod1(s1)
	fmt.Println("1:", s1)

	s2 := []int{1, 2, 3, 4}
	mod2(s2)
	fmt.Println("2:", s2)
}
```

----------------------------------------

TITLE: Running MySQL Container - Podman - Shell
DESCRIPTION: Command to run a detached MySQL container named 'mysql' using Podman. It sets crucial environment variables for configuring the MySQL user, password, database name, and root password upon initialization. This requires Podman to be installed and available.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/containerized_db.md#_snippet_0

LANGUAGE: Shell
CODE:
```
podman run --name mysql -e MYSQL_USER=mario -e MYSQL_PASSWORD=tooManyMushrooms -e MYSQL_DATABASE=university -e MYSQL_ROOT_PASSWORD=MushroomsPizza -d mysql
```

----------------------------------------

TITLE: Build Docker Image from Containerfile (Shell)
DESCRIPTION: This command builds a Docker image from a Containerfile (or Dockerfile) located in the current directory. It tags the resulting image with the name 'some_app' and the tag 'latest'. The '.' at the end specifies the build context as the current directory.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_33

LANGUAGE: shell
CODE:
```
docker image build -t some_app:latest .
```

----------------------------------------

TITLE: Generating Kubernetes Deployment YAML (Shell)
DESCRIPTION: Uses `kubectl` (or `k`) to generate a basic Kubernetes Deployment manifest in YAML format without actually creating the resource in the cluster (`--dry-run=client`). The command specifies the name ("dep"), image ("redis"), and replica count (3), and redirects the output to a file named `deployment.yaml`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_38

LANGUAGE: Shell
CODE:
```
k create deploy dep -o yaml --image=redis --dry-run=client --replicas 3 > deployment.yaml
```

----------------------------------------

TITLE: Redirecting Standard Input (Shell)
DESCRIPTION: Shows redirecting the content of a file (`unsorted.txt`) as standard input (`stdin`) to the `sort` command using the `<` operator. `sort` processes the file's content as if it were typed directly into the command. Requires `sort` and the input file.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_16

LANGUAGE: shell
CODE:
```
sort < unsorted.txt
```

----------------------------------------

TITLE: Exposing Kubernetes ReplicaSet as Service (Shell)
DESCRIPTION: This command creates a new Kubernetes Service resource to expose the pods managed by a given ReplicaSet. It configures network access to the application running in the pods, specifying the service name, target port, and service type (e.g., NodePort, ClusterIP, LoadBalancer).
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_68

LANGUAGE: Shell
CODE:
```
kubectl expose rs <ReplicaSet Name> --name=<Service Name> --target-port=<Port to expose> --type=NodePort
```

----------------------------------------

TITLE: Checking Kubernetes Service Details (Bash)
DESCRIPTION: This command describes a specific Kubernetes Service, providing details like its type, cluster IP, endpoints, and target ports.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_2

LANGUAGE: bash
CODE:
```
k describe svc <SERVICE_NAME>
```

----------------------------------------

TITLE: Listing Deployments by Multiple Labels (Bash)
DESCRIPTION: This command lists Deployments in the current namespace that have both 'env=prod' and 'type=web' labels.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_26

LANGUAGE: bash
CODE:
```
k get deploy -l env=prod,type=web
```

----------------------------------------

TITLE: Getting All Nodes in Kubernetes Cluster - Shell
DESCRIPTION: Displays a list of all nodes in the current Kubernetes cluster, showing their status, roles, age, and version. This command is fundamental for checking the health and presence of cluster nodes.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
kubectl get nodes
```

----------------------------------------

TITLE: Adding HTTP Inbound Rule to Security Group (AWS CLI)
DESCRIPTION: Authorizes a specific inbound rule (TCP on port 80 from 0.0.0.0/0) for a specified security group. This action allows traffic matching the rule and requires the AWS CLI configured with permissions to modify security groups.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/security_groups/solution.md#_snippet_2

LANGUAGE: bash
CODE:
```
aws ec2 authorize-security-group-ingress \
    --group-name someHTTPSecurityGroup \
    --protocol tcp \
    --port 80 \
    --cidr 0.0.0.0/0
```

----------------------------------------

TITLE: Describing Kubernetes ReplicaSet (Shell)
DESCRIPTION: This command provides comprehensive details about a specific Kubernetes ReplicaSet, identified by its name. The output includes desired, current, and ready pod counts, selector, template, and recent events, which are useful for understanding its state and actions.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_66

LANGUAGE: Shell
CODE:
```
kubectl describe rs <ReplicaSet Name>
```

----------------------------------------

TITLE: Incorrect Kubernetes ReplicaSet Definition (YAML)
DESCRIPTION: This YAML snippet demonstrates a common error in Kubernetes resource definitions where the 'kind' field for a ReplicaSet is misspelled as 'ReplicaCet'. Kubernetes requires the 'kind' field to be exactly 'ReplicaSet' to correctly identify and process the resource type.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_69

LANGUAGE: YAML
CODE:
```
apiVersion: apps/v1
kind: ReplicaCet
metadata:
  name: redis
  labels:
    app: redis
    tier: cache
spec:
  selector:
    matchLabels:
      tier: cache
  template:
    metadata:
      labels:
        tier: cachy
    spec:
      containers:
      - name: redis
        image: redis
```

----------------------------------------

TITLE: Running Container with Automatic Port Binding (Podman)
DESCRIPTION: This command runs an 'httpd' container in detached mode (-d), publishing the container's internal port 8080 to a randomly assigned available port on the host machine (-p 8080).
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/containerized_web_server.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ podman run -d -p 8080 httpd # run the container and bind the port 8080 to a local port
```

----------------------------------------

TITLE: Checking Server Status and Notifying with Bash
DESCRIPTION: This Bash script checks the status of a specified server IP address using the `ping` command. It pings the server 3 times and checks the exit code. If the ping fails (non-zero exit code), it sends an email notification to a specified address using the `mailx` command, indicating that the server is down.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/solutions/host_status.md#_snippet_0

LANGUAGE: bash
CODE:
```
#!/usr/bin/env bash
SERVERIP=<IP Address>
NOTIFYEMAIL=test@example.com

ping -c 3 $SERVERIP > /dev/null 2>&1
if [ $? -ne 0 ]
then
   # Use mailer here:
   mailx -s "Server $SERVERIP is down" -t "$NOTIFYEMAIL" < /dev/null
fi
```

----------------------------------------

TITLE: Counting Conditional Rows SQL
DESCRIPTION: This SQL query counts the number of rows in the 'Customers' table where the value in the 'Items_in_cart' column is greater than 0. It uses COUNT(1) for efficiency and a WHERE clause for filtering.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_12

LANGUAGE: SQL
CODE:
```
Select count(1) as Number_of_People_w_items
From Customers
where Items_in_cart > 0;
```

----------------------------------------

TITLE: Defining Lambda Function in AWS CDK TypeScript
DESCRIPTION: This TypeScript code defines a CDK stack (`SampleStack`) that provisions an AWS Lambda function. It uses the `aws-cdk-lib/aws-lambda` construct library to create a Node.js 14.x runtime Lambda with inline code that returns "hello world". It depends on the `aws-cdk-lib` and `constructs` libraries.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/sample_cdk/solution.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import * as cdk from 'aws-cdk-lib';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import { Construct } from 'constructs';

export class SampleStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const hello = new lambda.Function(this, 'SampleLambda', {
      runtime: lambda.Runtime.NODEJS_14_X,
      code: lambda.Code.fromInline('exports.handler = async () => "hello world";'),
      handler: 'index.handler'
    });
  }
}
```

----------------------------------------

TITLE: Verifying Branch History - Git Bash
DESCRIPTION: These commands are used to verify the results of the previous branching operations. The first `git log` shows the commit history of the current branch (presumably 'dev'). The `git checkout master` command switches back to the master branch, and the second `git log` displays the history of the master branch, which should show a different set of commits compared to 'dev'.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/solutions/branch_01_solution.md#_snippet_1

LANGUAGE: bash
CODE:
```
git log (you should see two commits)
git checkout master
git log (you should see one commit)
```

----------------------------------------

TITLE: Redirecting Stderr and Stdout (Shell)
DESCRIPTION: Demonstrates redirecting both standard output (`stdout`) and standard error (`stderr`) of a command (`yippiekaiyay`, used here as an example that produces error output) to a single file (`file`) using the `&>` operator. Requires a shell.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_18

LANGUAGE: shell
CODE:
```
yippiekaiyay &> file
```

----------------------------------------

TITLE: Loading Remote State with Data Source HCL
DESCRIPTION: This syntax demonstrates how to use the `terraform_remote_state` data source to retrieve outputs and other data from a remote Terraform state managed in a separate configuration. This allows you to reference resources or values defined elsewhere.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_20

LANGUAGE: HCL
CODE:
```
data.terraform_remote_state.<NAME>.outputs.<ATTRIBUTE>
```

----------------------------------------

TITLE: Applying Kustomization with Kubectl Shell
DESCRIPTION: Executes the Kustomization process defined in the specified directory ('someApp') using the 'kubectl apply' command. This command reads the kustomization.yml, generates the final Kubernetes manifests with applied overlays (like common labels), and applies them to the cluster.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/exercises/kustomize_common_labels/solution.md#_snippet_1

LANGUAGE: shell
CODE:
```
kubectl apply -k someApp
```

----------------------------------------

TITLE: Configuring npm start in Node.js package.json
DESCRIPTION: This snippet illustrates the required 'scripts.start' command in the Node.js package.json file. AWS Elastic Beanstalk uses this command to launch the application process. It also shows typical dependencies listed in the file.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/elastic_beanstalk_simple/solution.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{

  "name": "application-name",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "start": "node app"
  },
  "dependencies": {
    "express": "3.1.0",
    "jade": "*",
    "mysql": "*",
    "async": "*",
    "node-uuid": "*"
}

```

----------------------------------------

TITLE: Monitoring System Processes (Bash)
DESCRIPTION: Use the `top` command to get a dynamic real-time view of system processes. It displays CPU usage, memory usage, swap usage, and task information, sorted by CPU utilization by default, making it useful for identifying resource-intensive processes.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_56

LANGUAGE: Bash
CODE:
```
top
```

----------------------------------------

TITLE: Deleting a Specific Pod Kubectl
DESCRIPTION: Deletes a pod identified by its name in the current namespace. The pod will be terminated and removed from the cluster, although a controller like Deployment or StatefulSet may recreate it.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_18

LANGUAGE: kubectl
CODE:
```
kubectl delete pod pod_name
```

----------------------------------------

TITLE: Defining AWS S3 Bucket Terraform Resource
DESCRIPTION: This Terraform HCL block defines an AWS S3 bucket resource. It is used as the starting point in your Terraform configuration file before attempting to rename the bucket.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/exercises/s3_bucket_rename/solution.md#_snippet_0

LANGUAGE: terraform
CODE:
```
resource "aws_s3_bucket" "some_bucket" {
    bucket = "some-old-bucket"
}
```

----------------------------------------

TITLE: Checking Node Taints with Kubectl
DESCRIPTION: Uses `kubectl describe node` to retrieve the configuration details of a specific node and filters the output using `grep -i taints` to show any applied taints. This command requires `kubectl` to be configured and able to communicate with the cluster.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_29

LANGUAGE: Shell
CODE:
```
k describe no master | grep -i taints
```

----------------------------------------

TITLE: Defining Multiple String Variables (Terraform HCL)
DESCRIPTION: Defines two basic string input variables, "memory" and "cpu", each with a specified default value. These variables are typically placed together in a file like `vars.tf` to organize variable definitions within a Terraform project.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_10

LANGUAGE: HCL
CODE:
```
variable "memory" {
  type = string
  default "8192"
}

variable "cpu" {
  type = string
  default = "4"
}
```

----------------------------------------

TITLE: Listing Running Containers - Podman Shell
DESCRIPTION: Lists currently running containers on the host. This command shows container IDs, images, status, and names.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/running_containers.md#_snippet_1

LANGUAGE: sh
CODE:
```
podman container ls
```

----------------------------------------

TITLE: Rolling Back Helm Release Shell
DESCRIPTION: Shows the command to revert a deployed Helm release to a previous, stable revision. This is a critical command for incident response if a new deployment causes issues.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_125

LANGUAGE: Shell
CODE:
```
helm rollback RELEASE_NAME REVISION_ID
```

----------------------------------------

TITLE: Syncing ArgoCD Application State using CLI
DESCRIPTION: This snippet provides a sequence of shell commands to check an ArgoCD application's synchronization state, manually modify a deployment in the Kubernetes cluster (simulating an out-of-sync condition), re-check the state, and then trigger and wait for the ArgoCD synchronization process to complete. It requires the `argocd` and `kubectl` CLIs configured to connect to the respective systems.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/sync_app_cluster/solution.md#_snippet_0

LANGUAGE: Shell
CODE:
```
# Check app state and verify it's in sync
argocd app get app-demo

# Run the following k8s commands (or any other commands that will change the state of your app)
kubectl scale --replicas=0 <DEPLOYMENT_NAME>
kubectl get rs <DEPLOYMENT_NAME>

# Check app state again
argocd app get app-demo

# Sync app state
argocd app sync app-demo
argocd app wait app-demo
```

----------------------------------------

TITLE: Checking File Tracking Status (Git, Bash)
DESCRIPTION: This command checks if a specific file is tracked by Git. An exit code of 0 indicates the file is tracked. It helps verify the tracking status of individual files within the repository.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
git ls-files <file>
```

----------------------------------------

TITLE: Viewing Repository Status (Git, Bash)
DESCRIPTION: This command displays the state of the working directory and the staging area. It helps understand which files have been modified, which are staged for commit, and which are untracked. Essential for managing the repository state.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
git status
```

----------------------------------------

TITLE: Example Dockerfile for Layer Exploration
DESCRIPTION: This Dockerfile serves as an example to demonstrate how different instructions contribute to layers and metadata. It includes instructions like FROM, EXPOSE, ENV, WORKDIR, and multiple separate RUN commands.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/image_layers.md#_snippet_1

LANGUAGE: Dockerfile
CODE:
```
FROM ubuntu
EXPOSE 212
ENV foo=bar
WORKDIR /tmp
RUN dd if=/dev/zero of=some_file bs=1024 count=0 seek=1024
RUN dd if=/dev/zero of=some_file bs=1024 count=0 seek=1024
RUN dd if=/dev/zero of=some_file bs=1024 count=0 seek=1024
```

----------------------------------------

TITLE: Performing Arithmetic Operations in Shell
DESCRIPTION: Demonstrates two ways to perform arithmetic operations in shell: using arithmetic expansion `$((...))` which is generally preferred in Bash, and using the `expr` command.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/README.md#_snippet_11

LANGUAGE: Shell
CODE:
```
$(( 1 + 2 ))
```

LANGUAGE: Shell
CODE:
```
expr 1 + 2
```

----------------------------------------

TITLE: Executing Command in Kubernetes Pod - Kubectl
DESCRIPTION: This command executes an arbitrary command inside a running container within a specific Kubernetes pod. 'some-pod' is the target pod name, '-it' provides an interactive TTY session, and '-- ls' specifies the command to run inside the container.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_100

LANGUAGE: Kubectl
CODE:
```
kubectl exec some-pod -it -- ls
```

----------------------------------------

TITLE: List Pods by Label (app=web) - Shell
DESCRIPTION: This command uses `kubectl` (aliased as `k`) to list all Pods (`po`) in the current namespace that have the label `app` set to the value `web`. It demonstrates how to filter resources based on a single label key-value pair.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/exercises/labels_and_selectors/solution.md#_snippet_0

LANGUAGE: shell
CODE:
```
k get po -l app=web
```

----------------------------------------

TITLE: Merging Devel into Main (Git, Bash)
DESCRIPTION: This sequence of commands switches to the 'main' branch, merges the changes from the 'devel' branch into 'main', and then pushes the updated 'main' branch to the remote repository ('origin'). Used to integrate feature work into the main line.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_12

LANGUAGE: bash
CODE:
```
git checkout main
git merge devel
git push origin main
```

----------------------------------------

TITLE: Discarding Local File Changes Git bash
DESCRIPTION: This command discards all local, uncommitted changes in the specified file (`<file_name>`). It reverts the file to its state in the last commit or the staging area if it has been staged. Replace `<file_name>` with the name of the file whose changes you want to discard.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_19

LANGUAGE: bash
CODE:
```
git checkout -- <file_name>
```

----------------------------------------

TITLE: Setting Up Python Virtual Environment & Dependencies (Shell)
DESCRIPTION: Commands to create and activate a Python virtual environment, then install required dependencies from the 'requirements.txt' file using pip.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/flask_container_ci2/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
python3 -m venv challenge_venv
```

LANGUAGE: Shell
CODE:
```
source challenge_venv/bin/activate
```

LANGUAGE: Shell
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Scaling Kubernetes Deployment (Shell)
DESCRIPTION: Modifies the specified Kubernetes Deployment ("pluck") to scale the number of desired replicas to 5. Kubernetes will then create or delete pods to match this target replica count.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_41

LANGUAGE: Shell
CODE:
```
kubectl scale deployment pluck --replicas=5
```

----------------------------------------

TITLE: Viewing Top Nodes Resource Usage with Kubectl Top
DESCRIPTION: Displays the current CPU and memory usage for each node in the cluster. This command relies on data collected by the Metrics Server, which must be deployed and running. Requires `kubectl`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_44

LANGUAGE: Shell
CODE:
```
kubectl top nodes
```

----------------------------------------

TITLE: Running Docker Container Always Restart Policy Shell
DESCRIPTION: Executes `docker run` to create and start a container named 'forest' from the 'alpine' image, running `sleep 15`, with the `--restart always` policy. This policy ensures the container restarts automatically unless explicitly stopped.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/run_forest_run.md#_snippet_1

LANGUAGE: Shell
CODE:
```
docker run --restart always --name forest alpine sleep 15
```

----------------------------------------

TITLE: Resetting Git State (Git, Bash)
DESCRIPTION: This command is used to undo local changes to the state of a Git repository. Its behavior varies depending on the mode (soft, mixed, hard), potentially modifying the index or the working directory and moving the branch pointer.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_16

LANGUAGE: bash
CODE:
```
git reset
```

----------------------------------------

TITLE: Viewing Docker Image History (Shell)
DESCRIPTION: Use this command to display the history of a Docker image, showing each instruction, its resulting layer size, and the command that created it. This helps visualize which instructions create layers.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/image_layers.md#_snippet_3

LANGUAGE: Shell
CODE:
```
docker image history super_cool_app
```

----------------------------------------

TITLE: Viewing Top Pods Resource Usage with Kubectl Top
DESCRIPTION: Displays the current CPU and memory usage for each pod in the cluster. This command requires the Metrics Server to be deployed and actively collecting pod metrics. Requires `kubectl`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_45

LANGUAGE: Shell
CODE:
```
kubectl top pods
```

----------------------------------------

TITLE: Defining AWS Lambda Handler in Python
DESCRIPTION: This Python code defines the main handler function for an AWS Lambda. It takes an `event` dictionary as input, extracts the value associated with the key 'name', and returns a greeting string. This function will be executed when triggered by an AWS service like API Gateway.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/url_function/solution.md#_snippet_0

LANGUAGE: Python
CODE:
```
import json

def lambda_handler(event, context):
    firstName = event['name']
    return 'Hello ' + firstName
```

----------------------------------------

TITLE: Updating Rollout Image - Kubernetes CLI
DESCRIPTION: This command triggers a new rollout by updating the container image for a specific container (`web-app`) within the target Argo Rollout resource (`SOME-APP`). Changing the image signals Argo Rollouts to begin the configured deployment strategy, in this case, Blue/Green.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/blue_green_rollout/solution.md#_snippet_3

LANGUAGE: Bash
CODE:
```
kubectl argo rollouts set image SOME-APP web-app=some/registry/and/image:v2.0
```

----------------------------------------

TITLE: SQL Aggregate Function SUM
DESCRIPTION: This SQL query calculates the sum of all values in the 'Cash_spent_to_Date' column from the 'Customers' table using the `SUM()` aggregate function. It assigns an alias 'SUM_CASH' to the resulting sum for clarity. This is used to get a total value across a column.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/tests/testcases/testcase2.md#_snippet_6

LANGUAGE: SQL
CODE:
```
Select SUM(Cash_spent_to_Date) as SUM_CASH
From Customers;
```

----------------------------------------

TITLE: Removing Label from Kubernetes Pod
DESCRIPTION: Modifies a specific pod identified by <POD_NAME> by removing the label 'type'. Removing this label causes the pod to no longer match the ReplicaSet's selector, effectively disowning it.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/replicaset_03_solution.md#_snippet_3

LANGUAGE: bash
CODE:
```
kubectl label pod <POD_NAME> type-
```

----------------------------------------

TITLE: Verifying Route 53 Record with dig Shell
DESCRIPTION: This command uses the `dig` utility to perform a DNS lookup for the A record ('foo.<YOUR NAME>'), providing detailed information about the query and the DNS response, including the resolved IP address. Replace `<YOUR NAME>` with your actual registered domain name (note: the text uses `<YOUR NAME>`, which is likely a typo for `<YOUR DOMAIN>`).
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/creating_records/solution.md#_snippet_1

LANGUAGE: shell
CODE:
```
dig foo.<YOUR NAME
```

----------------------------------------

TITLE: Undoing Last Commit (Hard) Git bash
DESCRIPTION: This command resets the repository state to match the HEAD pointer after moving it back (implicitly `HEAD~1` if no other commit is specified), and critically, it discards all changes in the working directory and staging area. This is a 'hard' reset and permanently loses any uncommitted or staged modifications.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_21

LANGUAGE: bash
CODE:
```
git reset --hard
```

----------------------------------------

TITLE: Untracking a Tracked File (Git, Bash)
DESCRIPTION: This command removes a file from the Git index (staging area) but keeps the file in the working directory. It's used to stop tracking a file that was previously added, often before adding it to .gitignore.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
git rm --cached
```

----------------------------------------

TITLE: Creating Kubernetes Secret from Literal | Bash
DESCRIPTION: Command to create a Kubernetes Secret named 'some-secret' from a literal key-value pair where the key is 'password' and the value is 'donttellmypassword'. This is a quick way to inject small sensitive values via the command line.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_111

LANGUAGE: bash
CODE:
```
kubectl create secret generic some-secret --from-literal=password='donttellmypassword'
```

----------------------------------------

TITLE: Listing ArgoCD Applications via CLI Shell
DESCRIPTION: This command uses the `argocd` CLI to list all applications currently configured and managed by the ArgoCD instance. It provides a summary view of applications, their status, and other basic information.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/README.md#_snippet_3

LANGUAGE: Shell
CODE:
```
argocd app list
```

----------------------------------------

TITLE: Applying Label to Kubernetes Node (Bash)
DESCRIPTION: This command applies the label 'hw=max' to a specific node in the cluster named 'some-node'.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_27

LANGUAGE: bash
CODE:
```
kubectl label nodes some-node hw=max
```

----------------------------------------

TITLE: Counting Pods by Label Selector Bash
DESCRIPTION: Lists pods matching the label selector `env=prod` without output headers, pipes the output to `wc -l` to count the number of lines (and thus, pods). Uses common aliases `k` and `po`. Requires `kubectl` and `wc` in the shell environment.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_20

LANGUAGE: bash
CODE:
```
k get po -l env=prod --no-headers | wc -l
```

----------------------------------------

TITLE: Listing Kubernetes Namespaces (Alias) - Shell
DESCRIPTION: Lists all available namespaces in the Kubernetes cluster using the `kubectl get ns` command, which is a common alias for `kubectl get namespaces`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_83

LANGUAGE: shell
CODE:
```
kubectl get ns
```

----------------------------------------

TITLE: Describing Kubernetes Pod (Shell)
DESCRIPTION: This command provides detailed information about a specific Kubernetes Pod, identified by its name. It includes status, events, container details, and conditions, which is essential for debugging pod issues.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_64

LANGUAGE: Shell
CODE:
```
kubectl describe po POD_NAME
```

----------------------------------------

TITLE: Upgrading Helm Release Shell
DESCRIPTION: Shows the command to upgrade a deployed Helm release to a new version of the chart or apply configuration changes defined in updated values. This manages the lifecycle of applications deployed via Helm.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_127

LANGUAGE: Shell
CODE:
```
helm upgrade RELEASE_NAME CHART_NAME
```

----------------------------------------

TITLE: Counting File Lines (WC) - Shell
DESCRIPTION: Uses the `wc` (word count) command with the `-l` option to count the number of newline characters, which typically corresponds to the number of lines in a text file or standard input.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_102

LANGUAGE: Shell
CODE:
```
wc -l
```

----------------------------------------

TITLE: Exposing Kubernetes Deployment with Service - Kubectl
DESCRIPTION: This command creates a Kubernetes Service resource to expose a Deployment. It creates a Service named after the Deployment ('some-deployment') that listens on port 80 and forwards traffic to port 8080 on the pods managed by the deployment.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_101

LANGUAGE: Kubectl
CODE:
```
kubectl expose deploy some-deployment --port=80 --target-port=8080
```

----------------------------------------

TITLE: Defining Liveness Probe (YAML)
DESCRIPTION: Shows a YAML configuration snippet for defining a liveness probe using an `exec` command. This probe is used by Kubelet to determine if a container is healthy; if the command fails, the container is restarted according to the Pod's restart policy. Parameters `initialDelaySeconds` and `periodSeconds` control the probe's timing.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_11

LANGUAGE: YAML
CODE:
```
livenessProbe:
  exec:
    command:
    - cat
    - /appStatus
  initialDelaySeconds: 10
  periodSeconds: 5
```

----------------------------------------

TITLE: Defining AWS S3 Bucket Resource Terraform
DESCRIPTION: This Terraform code snippet defines an AWS S3 bucket resource named 'some_bucket' with the bucket name 'some-old-bucket'. It serves as an example prerequisite for users who do not already have an S3 bucket tracked by Terraform. Note that S3 bucket names must be globally unique.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/exercises/s3_bucket_rename/exercise.md#_snippet_0

LANGUAGE: terraform
CODE:
```
resource "aws_s3_bucket" "some_bucket" {
    bucket = "some-old-bucket"
}
```

----------------------------------------

TITLE: Adding Execute Permissions to File (chmod)
DESCRIPTION: Demonstrates how to use the chmod command in symbolic mode to add execute permissions ('+x') for all users (owner, group, others) to a specified file. This is a common task for making scripts or programs executable.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_21

LANGUAGE: bash
CODE:
```
chmod +x some_file
```

----------------------------------------

TITLE: Redirecting Standard Output (Shell)
DESCRIPTION: Demonstrates redirecting the standard output (`stdout`) of the `ls` command to a file (`filelist.txt`). The `>` operator overwrites the file if it already exists. Requires `ls` and a shell.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_13

LANGUAGE: shell
CODE:
```
ls > filelist.txt
```

----------------------------------------

TITLE: Referencing Local Terraform Module by Relative Path (HCL)
DESCRIPTION: Shows how to reference a Terraform module located in a subdirectory within the same project using a relative file path. This is common for organizing modules locally.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_29

LANGUAGE: HCL
CODE:
```
module "amazing_module" {
  source = "../modules/amazing-module"
}
```

----------------------------------------

TITLE: Deleting Kubernetes ReplicaSet (Shell)
DESCRIPTION: This command uses the 'kubectl delete' command (aliased as 'k') to remove a specific Kubernetes ReplicaSet named 'rori'. By default, this operation will also delete all pods that were created and are currently managed by this ReplicaSet.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_73

LANGUAGE: Shell
CODE:
```
k delete rs rori
```

----------------------------------------

TITLE: Deleting Kubernetes Deployment by File (Shell)
DESCRIPTION: Deletes a Kubernetes Deployment (and potentially other objects) based on the configuration defined in the specified YAML file. This method is useful for deleting resources that were created from a manifest.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_35

LANGUAGE: Shell
CODE:
```
kubectl delete -f deployment.yaml
```

----------------------------------------

TITLE: Grepping for Whole Word (Bash)
DESCRIPTION: Illustrates a `grep` command using word boundary anchors (`\b`) to find lines that contain "aaa" as a whole word, not as part of a larger word (like "aaaaaa"). Applies this to the provided example content.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_47

LANGUAGE: Bash
CODE:
```
grep '\baaa\b'
```

----------------------------------------

TITLE: Deleting Kubernetes Deployment by Name (Shell)
DESCRIPTION: Deletes a specific Kubernetes Deployment identified by its name. This command terminates the pods managed by the deployment and removes the deployment object from the cluster.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_34

LANGUAGE: Shell
CODE:
```
kubectl delete deployment [deployment_name]
```

----------------------------------------

TITLE: Demonstrating Shell Variable Scope and Local Variables
DESCRIPTION: This Bash script demonstrates variable scope. It defines a global variable `NINJA_TURTLE`, a function `the_best_ninja_turtle` with a local variable of the same name, and modifies the global variable. The function call shows that the local variable takes precedence within the function.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/README.md#_snippet_5

LANGUAGE: Shell
CODE:
```
#!/usr/bin/env bash
NINJA_TURTLE=Donatello
function the_best_ninja_turtle {
        local NINJA_TURTLE=Michelangelo
        echo $NINJA_TURTLE
}
NINJA_TURTLE=Raphael
the_best_ninja_turtle
```

----------------------------------------

TITLE: Deleting Kubernetes Deployment Shorthand (Shell)
DESCRIPTION: Deletes a Kubernetes Deployment named "depdep" using the `k` shorthand for the `kubectl` command. This is equivalent to using `kubectl delete deployment depdep`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_39

LANGUAGE: Shell
CODE:
```
k delete deploy depdep
```

----------------------------------------

TITLE: Creating Pod with Requests and Limits (kubectl, Shell & YAML)
DESCRIPTION: Outlines the process for creating a Python pod with both CPU/memory requests and limits. It involves generating initial YAML, modifying it to include both `requests` and `limits` fields, and then applying the updated configuration to the cluster. Requires a Kubernetes cluster.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_143

LANGUAGE: Shell
CODE:
```
kubectl run yay2 --image=python --dry-run=client -o yaml > pod.yaml
```

LANGUAGE: YAML
CODE:
```
spec:
  containers:
  - image: python
    imagePullPolicy: Always
    name: yay2
    resources:
      limits:
        cpu: 500m
        memory: 128Mi
      requests:
        cpu: 250m
        memory: 64Mi
```

LANGUAGE: Shell
CODE:
```
kubectl apply -f pod.yaml
```

----------------------------------------

TITLE: Scaling Down Kubernetes Deployment - Kubectl
DESCRIPTION: This command scales down a specific Deployment resource to zero replicas. It terminates all running pods managed by the deployment. This is often used as a step to force recreation of pods or temporarily stop an application.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_109

LANGUAGE: Kubectl
CODE:
```
kubectl scale deployment [name] --replicas=0
```

----------------------------------------

TITLE: Listing Pods in Specific Namespace Kubernetes Shell
DESCRIPTION: Lists all pods that reside within a specified namespace, in this case, the 'neverland' namespace. The '-n' flag is used to narrow down the scope of the command to a single namespace.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/certificates/ckad.md#_snippet_3

LANGUAGE: Shell
CODE:
```
kubectl get po -n neverland
```

----------------------------------------

TITLE: Find and Replace in YML Files - Bash
DESCRIPTION: This Bash command pipeline finds all files ending with '.yml' (case-insensitive) in a specified directory (`/some_dir`) and its subdirectories. It uses `xargs` to safely pass these filenames to `sed`, which performs an in-place replacement of the character '1' with '2' within each file. Requires `find`, `xargs`, and `sed` commands. Remember to replace `/some_dir` with the actual path.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_62

LANGUAGE: bash
CODE:
```
find /some_dir -iname \*.yml -print0 | xargs -0 -r sed -i "s/1/2/g"
```

----------------------------------------

TITLE: Removing All Stopped Docker Containers (Shell)
DESCRIPTION: This shell command removes all containers that are currently stopped. The `docker ps -a -q` part lists the IDs of all containers (including stopped, `-a`) in a quiet mode (`-q`), and these IDs are then passed as arguments to the `docker rm` command. Running containers are not affected.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_43

LANGUAGE: Shell
CODE:
```
docker rm $(docker ps -a -q)
```

----------------------------------------

TITLE: Staging Specific File After Conflict (Git, Bash)
DESCRIPTION: This command adds changes for a specific file (<file_name>) from the working directory to the staging area after resolving merge conflicts. It marks the file as resolved and ready to be committed or continue the merge/rebase.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_13

LANGUAGE: bash
CODE:
```
git add <file_name>
```

----------------------------------------

TITLE: YAML Manifest for ReplicaSet with Label Mismatch
DESCRIPTION: This YAML manifest contains a mismatch between the selector's matchLabels and the pod template's labels, causing the ReplicaSet not to select its intended pods.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_12

LANGUAGE: yaml
CODE:
```
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: redis
  labels:
    app: redis
    tier: cache
spec:
  selector:
    matchLabels:
      tier: cache
  template:
    metadata:
      labels:
        tier: cachy
    spec:
      containers:
      - name: redis
        image: redis
```

----------------------------------------

TITLE: Grepping for Multiple Strings (Bash)
DESCRIPTION: Demonstrates using `grep` with the `-E` flag (for extended regular expressions) and the `|` operator to search for lines containing either the word "error" or the word "failure" within `some_file`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_45

LANGUAGE: Bash
CODE:
```
grep -E "error|failure" some_file
```

----------------------------------------

TITLE: Tagging Container Image (Podman)
DESCRIPTION: This command applies a new tag to an existing container image. Tags are used to provide versioning and different references for the same image ID, allowing multiple names to point to the same image content.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_31

LANGUAGE: shell
CODE:
```
podman tag IMAGE:TAG
```

----------------------------------------

TITLE: Tagging a Podman image by ID
DESCRIPTION: First, `podman image ls` lists existing images to find the ID of the newly created image. Then, `podman tag` assigns an additional tag 'mario' to that specific image ID, making it easier to reference.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/commit_image.md#_snippet_5

LANGUAGE: bash
CODE:
```
podman image ls
```

LANGUAGE: bash
CODE:
```
podman tag dc7ed2343521 mario
```

----------------------------------------

TITLE: Removing Directory Recursively (Shell)
DESCRIPTION: Demonstrates how to use the `rm` command with the `-r` (recursive) and `-f` (force) flags to remove a directory and all its contents without prompting the user for confirmation. Use with caution. Requires the `rm` utility and appropriate permissions.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_5

LANGUAGE: shell
CODE:
```
rm -rf dir
```

----------------------------------------

TITLE: Removing Specific Container - Podman Shell
DESCRIPTION: Removes a container identified by its ID or name. Replace '[container id/name]' with the actual identifier of the container to remove. The container must typically be stopped first.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/running_containers.md#_snippet_6

LANGUAGE: sh
CODE:
```
podman rm [container id/name]
```

----------------------------------------

TITLE: Listing Pods by Label Selector Kubectl
DESCRIPTION: Lists pods in the current namespace that match the specified label selector (`env=prod`). Uses the common alias `k` for `kubectl` and `po` for `pods`. Useful for filtering resources based on metadata.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_19

LANGUAGE: kubectl
CODE:
```
k get po -l env=prod
```

----------------------------------------

TITLE: Describing Specific Kubernetes Service using Kubectl
DESCRIPTION: This command retrieves and displays detailed information about a specific Kubernetes Service, including its configuration, status, events, and the list of backend Pods (endpoints) it is currently routing traffic to. It is useful for debugging and verifying service setup. Note: `kubectl describe svc <SERVICE_NAME>` is a common alias.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_47

LANGUAGE: kubectl
CODE:
```
kubctl describe service <SERVICE_NAME>
```

----------------------------------------

TITLE: Running Nginx container with Podman
DESCRIPTION: This command starts a new Nginx container in detached mode (-d), names it 'nginx_container', and maps port 80 on the host machine to port 80 inside the container (-p 80:80). It uses the 'nginx:alpine' image.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/commit_image.md#_snippet_0

LANGUAGE: bash
CODE:
```
podman run --name nginx_container -d -p 80:80 nginx:alpine
```

----------------------------------------

TITLE: Accessing Containerized Web Server (Shell/Curl)
DESCRIPTION: This command uses 'curl' to make an HTTP request to the web server running in the container. The address and port (e.g., http://0.0.0.0:41203) should match the output obtained from the 'podman port -l 8080' command.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/containerized_web_server.md#_snippet_2

LANGUAGE: Shell
CODE:
```
$ curl http://0.0.0.0:41203 # use the port from the output of the previous command
```

----------------------------------------

TITLE: Accessing Container and Interacting with MySQL - Podman/MySQL - Shell
DESCRIPTION: A sequence of commands executed within a container's shell, initiated by `podman exec`. It accesses the 'mysql' container, connects to the MySQL server as the root user, selects the 'university' database, creates a 'Students' table, attempts to insert data into a 'Projects' table, and finally queries the 'Students' table. Requires a running 'mysql' container and the 'university' database setup.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/containerized_db.md#_snippet_2

LANGUAGE: Shell
CODE:
```
podman exec -it mysql /bin/bash
mysql -u root
use university;
CREATE TABLE Students (id int NOT NULL, name varchar(255) DEFAULT NULL, PRIMARY KEY (id));
insert into Projects (id, name) values (1,'Luigi');
select * from Students;
```

----------------------------------------

TITLE: Sync and Wait for ArgoCD Application CLI
DESCRIPTION: Manually triggers a synchronization for the specified ArgoCD application using `argocd app sync`. The `argocd app wait` command then pauses execution until the application reaches a synchronized and healthy state, confirming the changes have been applied to the cluster. Requires the `argocd` CLI configured.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/sync_app_git/solution.md#_snippet_3

LANGUAGE: cli
CODE:
```
argocd app sync app-demo
argocd app wait app-demo
```

----------------------------------------

TITLE: Activating Python Virtual Environment
DESCRIPTION: Activates the created `challenge_venv` virtual environment, making its Python interpreter and installed packages available in the current shell session. Requires the environment to exist.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/flask_container_ci/README.md#_snippet_1

LANGUAGE: Bash
CODE:
```
source challenge_venv/bin/activate
```

----------------------------------------

TITLE: Starting Interactive Git Rebase to Squash Commits (Bash)
DESCRIPTION: This command initiates an interactive rebase on the last two commits (`HEAD~2`). It opens an editor allowing the user to modify, reorder, or combine commits, specifically used here to prepare for squashing.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/solutions/squashing_commits.md#_snippet_3

LANGUAGE: bash
CODE:
```
git rebase -i HEAD~2
```

----------------------------------------

TITLE: Syncing and Waiting for ArgoCD Application Sync (CLI) - Bash
DESCRIPTION: This sequence initiates a synchronization operation for the specified ArgoCD application (`app-demo`), instructing ArgoCD to apply the latest state from the configured Git repository to the target Kubernetes cluster. The second command then blocks and waits for the application to reach a synced and healthy state, confirming that the desired changes have been successfully deployed.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/sync_app_git/exercise.md#_snippet_3

LANGUAGE: bash
CODE:
```
argocd app sync app-demo
argocd app wait app-demo
```

----------------------------------------

TITLE: Verifying Running Container - Podman - Shell
DESCRIPTION: Command to list active containers managed by Podman. This is used to confirm that the MySQL container started in the previous step is running successfully in the background. Requires Podman to be installed.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/containerized_db.md#_snippet_1

LANGUAGE: Shell
CODE:
```
podman ps
```

----------------------------------------

TITLE: Describing Kubernetes Pod in Namespace - Shell
DESCRIPTION: Retrieves detailed information about a specific Pod (`test-prod`) in a given namespace (`prod`) using the `kubectl describe` command (aliased as `k`). This is used here specifically to obtain the Pod's IP address.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_80

LANGUAGE: shell
CODE:
```
k describe po test-prod -n prod
```

----------------------------------------

TITLE: Stopping and Removing a Container (Podman)
DESCRIPTION: A combined command using logical AND (&&) to first stop a running container and then remove it. Containers must be stopped before they can be removed using the 'rm' command.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_5

LANGUAGE: Shell
CODE:
```
podman container stop <container id/name> && podman container rm <container id/name>
```

----------------------------------------

TITLE: Changing File Permissions with Chmod (Shell)
DESCRIPTION: Illustrates using the `chmod` command to change file permissions using octal notation. `777` grants read, write, and execute permissions to the owner, group, and others on the file `/tmp/x`. Requires the `chmod` utility and ownership or root privileges for the file.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_6

LANGUAGE: shell
CODE:
```
chmod 777 /tmp/x
```

----------------------------------------

TITLE: Viewing Helm Release History Shell
DESCRIPTION: Demonstrates the command to display the revision history for a specific Helm release. This shows previous installations, upgrades, and rollbacks with their corresponding revision IDs.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_126

LANGUAGE: Shell
CODE:
```
helm history RELEASE_NAME
```

----------------------------------------

TITLE: Changing Kubernetes Context - Shell
DESCRIPTION: Switches the current Kubernetes context to a specified one. This allows you to easily interact with different clusters configured in your kubeconfig file by changing the active cluster context.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_1

LANGUAGE: shell
CODE:
```
kubectl config use-context
```

----------------------------------------

TITLE: Configuring Web Server User Data - Bash
DESCRIPTION: This bash script is intended to be used as user data for EC2 instances launched by the Auto Scaling Group. It installs the Apache web server (`httpd`), starts the service, and enables it to start automatically on boot. This prepares the instances to serve web content as soon as they are provisioned.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/auto_scaling_groups_basics/solution.md#_snippet_0

LANGUAGE: bash
CODE:
```
yum install -y httpd
systemctl start httpd
systemctl enable httpd
```

----------------------------------------

TITLE: Undoing Changes with Revert (Git, Bash)
DESCRIPTION: This command creates a new commit that undoes the changes introduced in a previous commit. It preserves the project history and is a safe way to reverse changes without altering past commits, unlike git reset.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_15

LANGUAGE: bash
CODE:
```
git revert
```

----------------------------------------

TITLE: Verifying Kubernetes ReplicaSet Creation with kubectl
DESCRIPTION: Uses `kubectl get rs` to list existing ReplicaSets, verifying the successful creation of the "web" ReplicaSet. An alternative command `kubectl get -f rs.yaml` specifically checks the status based on the configuration file. Requires `kubectl` and access to a Kubernetes cluster.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/replicaset_01_solution.md#_snippet_1

LANGUAGE: bash
CODE:
```
kubectl get rs
# OR a more specific way: kubectl get -f rs.yaml
```

----------------------------------------

TITLE: Creating Python Virtual Environment
DESCRIPTION: Creates a dedicated Python virtual environment named `challenge_venv` in the current directory, isolating project dependencies. Requires Python 3 installed.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/flask_container_ci/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
python3 -m venv challenge_venv
```

----------------------------------------

TITLE: Running Nginx Container - Podman Shell
DESCRIPTION: Runs a new container using the latest 'nginx' image. This command pulls the image if not available locally and starts the container.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/running_containers.md#_snippet_0

LANGUAGE: sh
CODE:
```
podman container run nginx:latest
```

----------------------------------------

TITLE: Pulling Container Image Podman Shell
DESCRIPTION: Downloads a specified container image from a registry to the local host without starting a container. It uses a variable for the container binary (Podman). Replace 'rhel' with the desired image name and optional tag.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_13

LANGUAGE: shell
CODE:
```
CONTAINER_BINARY=podman
$CONTAINER_BINARY pull rhel
```

----------------------------------------

TITLE: Creating Kubernetes Namespace - Shell
DESCRIPTION: Creates a new namespace named `dev` in the Kubernetes cluster using the `kubectl create ns` command (aliased as `k`). This command is often used as a prerequisite before deploying resources into a specific namespace.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_87

LANGUAGE: shell
CODE:
```
k create ns dev
```

----------------------------------------

TITLE: Listing Namespaces Kubernetes Shell
DESCRIPTION: Retrieves and displays a list of all namespaces present in the Kubernetes cluster. This command is useful for understanding the organizational structure within the cluster and identifying available or custom namespaces.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/certificates/ckad.md#_snippet_2

LANGUAGE: Shell
CODE:
```
kubectl get ns
```

----------------------------------------

TITLE: Debugging Process and CPU Issues (strace, top, perf)
DESCRIPTION: Lists key command-line tools for analyzing and debugging processes and CPU usage. strace traces system calls, top monitors processes and resource use in real-time, and perf is a powerful performance analysis tool.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_32

LANGUAGE: bash
CODE:
```
strace
```

LANGUAGE: bash
CODE:
```
top
```

LANGUAGE: bash
CODE:
```
perf
```

----------------------------------------

TITLE: Listing All Containers (Podman)
DESCRIPTION: Provides the command to list all containers, including those that have exited or stopped, using Podman. Useful for inspecting containers after they have finished their task.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
podman ps -a
```

----------------------------------------

TITLE: Recommended .gitignore Patterns for Terraform Projects (Gitignore)
DESCRIPTION: Lists file patterns commonly included in a `.gitignore` file for Terraform projects. These patterns prevent sensitive or automatically generated files like the Terraform state (`.tfstate`), backups, and the `.terraform` directory (containing providers and modules) from being committed to version control.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_32

LANGUAGE: Gitignore
CODE:
```
**/.terraform/*
*.tfstate
*.tfstate.*
*.tfvars
*.tfvars.json
```

----------------------------------------

TITLE: Defining Basic CircleCI Workflow and Job YAML
DESCRIPTION: This YAML snippet defines a minimal CircleCI configuration file (`.circleci/config.yml`). It sets up a single job named `say-hello` using a Docker executor with the `cimg/base:stable` image. The job includes steps to checkout the code and run a simple command `echo Hello, World!`. A workflow named `say-hello-workflow` is defined to execute this single job.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/circleci/README.md#_snippet_0

LANGUAGE: YAML
CODE:
```
version: 2.1

jobs:
  say-hello:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
workflows:
  say-hello-workflow:
    jobs:
      - say-hello
```

----------------------------------------

TITLE: Adding Validation Block to Terraform Variable (HCL)
DESCRIPTION: Illustrates adding a `validation` block to a variable definition in Terraform. This block contains a `condition` expression that must evaluate to true, and an `error_message` displayed if the condition is false, enabling custom input validation for variables.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_38

LANGUAGE: HCL
CODE:
```
variable "some_var" {
  type = number

  validation {
    condition = var.some_var > 1
    error_message = "you have to specify a number greater than 1"
  }

}
```

----------------------------------------

TITLE: Create Podman Volume (Shell)
DESCRIPTION: This command sequence sets the container binary to 'podman' and then uses it to create a new named volume called 'some_volume'. Volumes are used for persistent data storage independent of the container lifecycle.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_35

LANGUAGE: shell
CODE:
```
CONTAINER_BINARY=podman
$CONTAINER_BINARY volume create some_volume
```

----------------------------------------

TITLE: Listing Kubernetes Deployments (Bash)
DESCRIPTION: This command lists all Deployments in the current Kubernetes namespace.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_13

LANGUAGE: bash
CODE:
```
k get deploy
```

----------------------------------------

TITLE: Listing Kubernetes Services using Kubectl
DESCRIPTION: This command lists all Services currently configured in the default namespace (or the currently active namespace) within the Kubernetes cluster. It provides a quick overview of existing services, their types, cluster IPs, external IPs, ports, and age.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_46

LANGUAGE: kubectl
CODE:
```
kubectl get svc
```

----------------------------------------

TITLE: Listing Local Podman Images (bash)
DESCRIPTION: This command lists all container images currently available in the local Podman storage. It is used here to check if you have images that can be exported and shared. Requires Podman to be installed and configured.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/sharing_images.md#_snippet_0

LANGUAGE: bash
CODE:
```
podman image ls
```

----------------------------------------

TITLE: Verifying custom content with Curl
DESCRIPTION: Uses `curl` again to access the web server on localhost port 80. This time, it verifies that the custom 'Mario' HTML content (from the `nginx_mario` image) is being served.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/commit_image.md#_snippet_8

LANGUAGE: bash
CODE:
```
curl 127.0.0.1:80
```

----------------------------------------

TITLE: Configuring EC2 User Data Script in Shell
DESCRIPTION: This shell script is intended to be run as user data during the launch of an Amazon Linux 2 EC2 instance. It performs system updates, installs the Apache web server (httpd), starts and enables the service, and creates a basic index.html file.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/launch_ec2_web_instance/solution.md#_snippet_0

LANGUAGE: Shell
CODE:
```
yum update -y
yum install -y httpd
systemctl start httpd
systemctl enable httpd
echo "<h1>I made it! This is is awesome!</h1>" > /var/www/html/index.html
```

----------------------------------------

TITLE: List All Resources by Label (env=staging) - Shell
DESCRIPTION: This command utilizes `kubectl` (aliased as `k`) to list all resource types (`all`) in the current namespace that possess the label `env` with the value `staging`. It shows how to apply a label filter across various Kubernetes resource kinds.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/exercises/labels_and_selectors/solution.md#_snippet_1

LANGUAGE: shell
CODE:
```
k get all -l env=staging
```

----------------------------------------

TITLE: Installing/Starting Apache Web Server (Shell)
DESCRIPTION: This script is intended for use as EC2 user data within an AWS Auto Scaling Group. It installs the Apache web server (httpd), starts the service, and configures it to launch automatically on system boot using yum and systemctl commands common on Amazon Linux AMIs.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/auto_scaling_groups_basics/exercise.md#_snippet_0

LANGUAGE: Shell
CODE:
```
yum install -y httpd
systemctl start httpd
systemctl enable httpd
```

----------------------------------------

TITLE: Configuring AWS Provider - Terraform HCL
DESCRIPTION: Configures an instance of the AWS provider, setting the default AWS region (`us-west-1`) for resources managed by this provider block. This is essential for telling Terraform which geographical area to deploy resources into within AWS. Dependencies: The AWS provider must be declared as required and installed via `terraform init`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_4

LANGUAGE: HCL
CODE:
```
provider "aws" {
  region = "us-west-1"
}
```

----------------------------------------

TITLE: Listing Running Containers (Podman)
DESCRIPTION: Shows how to list only the currently running containers on the local host using Podman. Containers that have exited will not appear in this list.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
podman container ls
```

----------------------------------------

TITLE: Checking Deployment Container Image (Bash)
DESCRIPTION: This command describes a specific Deployment and filters the output to find the container image used.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_14

LANGUAGE: bash
CODE:
```
k describe deploy <DEPLOYMENT_NAME> | grep image
```

----------------------------------------

TITLE: Verifying Route 53 Record with nslookup Shell
DESCRIPTION: This command utilizes the `nslookup` utility to query the DNS system for the specified A record ('foo.<YOUR DOMAIN>'), confirming that it resolves to the expected IP address configured in AWS Route 53. Ensure you replace `<YOUR DOMAIN>` with your actual registered domain name.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/creating_records/solution.md#_snippet_0

LANGUAGE: shell
CODE:
```
nslookup foo.<YOUR DOMAIN>
```

----------------------------------------

TITLE: Unstaging File Git bash
DESCRIPTION: This command removes the specified file (`<file_name>`) from the staging area (index) but keeps it in the working directory. It is used to unstage changes that were previously added with `git add`. Replace `<file_name>` with the name of the file to unstage.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_22

LANGUAGE: bash
CODE:
```
git reset <file_name>
```

----------------------------------------

TITLE: Checking Directory Disk Usage (Bash)
DESCRIPTION: Execute the `du` command with the `-sh` options to summarize the disk usage of a specified directory (or the current directory if none is specified) in a human-readable format. This helps quickly determine how much space a directory occupies.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_54

LANGUAGE: Bash
CODE:
```
du -sh
```

----------------------------------------

TITLE: Deploying Metrics Server with Kubectl Apply
DESCRIPTION: Deploys the Kubernetes Metrics Server to the cluster by applying its official YAML definition from a remote URL. The Metrics Server collects resource usage data, enabling tools like `kubectl top`. Requires `kubectl` and internet connectivity.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_43

LANGUAGE: Shell
CODE:
```
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
```

----------------------------------------

TITLE: Displaying Kubernetes Pod Resource Usage - Kubectl
DESCRIPTION: This command fetches and displays the current CPU and memory resource usage for all Pods in the current namespace. It requires the Kubernetes Metrics Server to be installed and running in the cluster.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_106

LANGUAGE: Kubectl
CODE:
```
kubectl top pod
```

----------------------------------------

TITLE: Creating ArgoCD Application via CLI Shell
DESCRIPTION: This command uses the `argocd` CLI to create a new application named "some-app". It specifies the source Git repository (`--repo`), the path within the repository (`--path`), the target Kubernetes namespace (`--dest-namespace`), and the destination Kubernetes cluster (`--dest-server`). The `--project` flag is included but appears to be missing a value in the example.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
argocd app create some-app \
--project  \
--repo https://fake.repo.address \
--path ./app_path \
--dest-namespace default \
--dest-server my.kubernetes.cluster
```

----------------------------------------

TITLE: Recursively Comparing Directories with GNU Diff
DESCRIPTION: This command uses the standard `diff` utility with the `--recursive` flag to compare the contents of two directories, including all subdirectories and files within them. It is a robust method for finding all differences between two directory trees.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/solutions/directories_comparison.md#_snippet_1

LANGUAGE: shell
CODE:
```
diff --recursive directory1 directory2
```

----------------------------------------

TITLE: Showing Labels for a Specific Kubernetes Node - Shell
DESCRIPTION: Retrieves information for a specific node by name (e.g., 'minikube') and includes its associated labels in the output. This command is useful for inspecting node metadata. Assumes 'k' is an alias for 'kubectl'.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_5

LANGUAGE: shell
CODE:
```
k get no minikube --show-labels
```

----------------------------------------

TITLE: Finding Kubernetes Pod Namespace - Shell
DESCRIPTION: Locates the namespace of a specific Pod named `atreus`. It lists Pods across all namespaces (`-A` flag) using `kubectl get po` (aliased as `k`) and pipes the output to `grep` to filter for lines containing the Pod name.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_89

LANGUAGE: shell
CODE:
```
k get po -A | grep atreus
```

----------------------------------------

TITLE: Example Kubernetes CronJob Manifest (Basic) | YAML
DESCRIPTION: A basic YAML manifest for a Kubernetes CronJob. It specifies a schedule ('*/1 * * * *' for every minute) and demonstrates 'startingDeadlineSeconds' and 'concurrencyPolicy: Allow'. The accompanying text highlights that 'concurrencyPolicy: Allow' can lead to issues if jobs fail repeatedly.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_117

LANGUAGE: yaml
CODE:
```
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: some-cron-job
spec:
  schedule: '*/1 * * * *'
  startingDeadlineSeconds: 10
  concurrencyPolicy: Allow
```

----------------------------------------

TITLE: Creating Empty File (Touch) - Shell
DESCRIPTION: Uses the `touch` command to create a new empty file if it doesn't exist. If the file already exists, `touch` updates its access and modification timestamps without altering its content.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_97

LANGUAGE: Shell
CODE:
```
touch new_file
```

----------------------------------------

TITLE: Checking Pod Resource Limits with Kubectl
DESCRIPTION: Uses `kubectl describe pod` for a given pod name (`<POD_NAME>`) and pipes the output to `grep -i limits` to filter lines related to resource `limits` or `requests` configured for the pod's containers. Requires `kubectl`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_36

LANGUAGE: Shell
CODE:
```
kubectl describe po <POD_NAME> | grep -i limits
```

----------------------------------------

TITLE: Searching Container Images Podman Shell
DESCRIPTION: Searches remote container registries for images matching a given name. It displays results including the registry index, image name, description, and star count. Used to find available images before pulling.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_11

LANGUAGE: shell
CODE:
```
podman search snake-game
```

----------------------------------------

TITLE: Defining Object Input Variable (Terraform HCL)
DESCRIPTION: Defines a Terraform input variable named "car_model" with the type `object`. The object includes attributes `model` (string), `color` (string), and `year` (number). This structure allows grouping related configuration values under a single variable name.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_9

LANGUAGE: HCL
CODE:
```
variable "car_model" {
  description = "Car model object"
  type        = object({
    model   = string
    color   = string
    year    = number
  })
}
```

----------------------------------------

TITLE: Deleting Kubernetes Pod with kubectl
DESCRIPTION: Deletes a specific Pod managed by the ReplicaSet using `kubectl delete po <POD_NAME>`. This action demonstrates the ReplicaSet's self-healing capability, as it will automatically create a replacement Pod to maintain the desired replica count. Requires `kubectl` and the exact Pod name.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/replicaset_01_solution.md#_snippet_2

LANGUAGE: bash
CODE:
```
kubectl delete po <POD_NAME>
```

----------------------------------------

TITLE: Listing Directory Contents (Find) - Shell
DESCRIPTION: Uses the `find` command starting from the current directory (`.`) to recursively list all files and subdirectories. When used without specific criteria, it serves as an alternative way to list directory contents.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_100

LANGUAGE: Shell
CODE:
```
find .
```

----------------------------------------

TITLE: Full Jenkins Pipeline with Start Stage Parameter (Jenkinsfile)
DESCRIPTION: Provides the basic structure of a Jenkins Declarative Pipeline, including the `agent`, `parameters`, and `stages` blocks. It demonstrates how the previously defined `START_STAGE` parameter fits within the overall pipeline definition.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/cicd/README.md#_snippet_3

LANGUAGE: Jenkinsfile
CODE:
```
pipeline {
    agent any
    parameters {
        string(name: 'START_STAGE', defaultValue: '', description: 'The name of the stage to start the build from')
    }
    stages {
        stage('Build') {
            // Build steps go here
        }
        stage('Test') {
            // Test steps go here
        }
        stage('Deploy') {
            // Deploy steps go here
        }
    }
}
```

----------------------------------------

TITLE: Removing Container Image Podman Shell
DESCRIPTION: Deletes one or more specified container images from the local host. It will fail if containers are currently using the image unless the '--force' flag is used. Replace 'IMAGE' with the image name or ID.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_20

LANGUAGE: shell
CODE:
```
podman rmi IMAGE
```

----------------------------------------

TITLE: Providing Values for Helm Template YAML
DESCRIPTION: Shows an example of a `values.yaml` file used with Helm templates. This file provides the specific data for the placeholders (like `{{ .Values.name }}`) defined in the corresponding template file.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_120

LANGUAGE: YAML
CODE:
```
name: some-app
container:
  name: some-app-container
  image: some-app-image
  port: 1991
```

----------------------------------------

TITLE: Defining Job Dependency GitHub Actions YAML
DESCRIPTION: This YAML snippet demonstrates how to define dependencies between jobs in a GitHub Actions workflow. By using the 'needs' keyword in 'job2' and specifying 'job1', it ensures that 'job2' will only start executing after 'job1' has completed successfully. This is used to enforce sequential execution of specific jobs within a workflow.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/cicd/README.md#_snippet_5

LANGUAGE: YAML
CODE:
```
jobs:
  job1:
  job2:
    needs: job1
```

----------------------------------------

TITLE: Checking Image Entrypoint Docker Shell
DESCRIPTION: Displays detailed information about a Docker image. The output includes fields like "Cmd" and "Entrypoint" which specify the command or executable that runs by default when a container is started from this image. Replace '<image name>' with the image name or ID.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_18

LANGUAGE: shell
CODE:
```
docker image inspect <image name>
```

----------------------------------------

TITLE: Loading File with templatefile in Terraform Module (HCL)
DESCRIPTION: Illustrates using the `templatefile` function combined with `path.module` to read and render a file from the directory containing the current module. This is often used for generating dynamic scripts or configuration files.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_30

LANGUAGE: HCL
CODE:
```
script = templatesfile("${path.module}/user-data.sh", {
  ...
})
```

----------------------------------------

TITLE: Viewing Kubernetes Events with Kubectl Get Events
DESCRIPTION: Lists recent events in the Kubernetes cluster. Cluster events include actions like pod scheduling, indicating which scheduler (e.g., default or a custom one) made the decision to bind a pod to a node. This command is useful for debugging scheduling issues. Requires `kubectl`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_47

LANGUAGE: Shell
CODE:
```
kubectl get events
```

----------------------------------------

TITLE: Adding Common Labels Kustomize YAML
DESCRIPTION: Defines a Kustomization file that specifies a common label 'team-name: aces' to be added to all Kubernetes resources listed in the 'resources' field. This simplifies applying consistent labels across related manifests like Deployments and Services.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/exercises/kustomize_common_labels/solution.md#_snippet_0

LANGUAGE: yaml
CODE:
```
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

commonLabels:
  team-name: aces

resources:
  - service.yml
  - deployment.yml
```

----------------------------------------

TITLE: Deleting Kubernetes Pods by Field Selector - Kubectl
DESCRIPTION: This command deletes all Pod resources that match a specific field selector condition. In this case, it targets and deletes all pods where the 'status.phase' field is not equal to 'Running'.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_105

LANGUAGE: Kubectl
CODE:
```
kubectl delete pods --field-selector=status.phase!='Running'
```

----------------------------------------

TITLE: Referencing Terraform Module from Git URL (HCL)
DESCRIPTION: Shows how to define a Terraform module resource using a Git URL as the source, specifying a specific reference (like a tag or commit). This allows reusing modules stored in version control systems like GitHub.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_27

LANGUAGE: HCL
CODE:
```
module "some_module" {

  source = "github.com/foo/modules/bar?ref=v0.1"
}
```

----------------------------------------

TITLE: Editing Pod Manifest with Kubectl Edit
DESCRIPTION: Opens the YAML manifest of the specified pod (`some-pod`) in the default command-line editor. This command is used to manually modify the pod's configuration, such as adding `tolerations` to resolve a pending state caused by node taints. Requires `kubectl` and an editor configured.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_33

LANGUAGE: Shell
CODE:
```
kubectl edit po some-pod
```

----------------------------------------

TITLE: Checking SSH Key Bits and Fingerprint (Bash)
DESCRIPTION: Shows how to use `ssh-keygen` with the `-l` (list fingerprint) and `-f` (specify file) flags to display information about an existing SSH key file, including its size in bits and its fingerprint.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_40

LANGUAGE: Bash
CODE:
```
ssh-keygen -l -f /home/user/.ssh/id_rsa
```

----------------------------------------

TITLE: Attaching to Running Container Terminal (Podman)
DESCRIPTION: Allows attaching a shell to the terminal of an already running container specified by its ID or name. The -it flags enable interactive terminal access for executing commands inside the container.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_4

LANGUAGE: Shell
CODE:
```
podman container exec -it [container id/name] bash
```

----------------------------------------

TITLE: Stopping Docker Container Shell (Unless-Stopped Test)
DESCRIPTION: Stops the 'forest' container using `docker container stop forest` after its restart policy has been updated to `unless-stopped`. This action is taken to test if the container restarts after a service restart when stopped explicitly.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/run_forest_run.md#_snippet_7

LANGUAGE: Shell
CODE:
```
docker container stop forest
```

----------------------------------------

TITLE: Adding TLS Configuration to Kubernetes Ingress
DESCRIPTION: This YAML snippet demonstrates how to add a `tls` block within the Ingress `spec` to configure TLS termination. It specifies the host(s) covered by the certificate and references a Kubernetes Secret (`someapp-secret-tls`) containing the TLS certificate and private key.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_59

LANGUAGE: YAML
CODE:
```
spec:
  tls:
  - hosts:
    - some_app.com
    secretName: someapp-secret-tls
```

----------------------------------------

TITLE: Creating Deployment with Node Affinity Workflow (Bash, YAML)
DESCRIPTION: This workflow shows how to generate a Deployment manifest using dry run, manually add node affinity configuration to schedule pods on nodes with a specific label, and then apply the manifest.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_18

LANGUAGE: bash
CODE:
```
kubectl create deployment blufer --image=python --replicas=3 -o yaml --dry-run=client > deployment.yaml
```

LANGUAGE: bash
CODE:
```
vi deployment.yaml
```

LANGUAGE: yaml
CODE:
```
spec:
  affinity:
    nodeAffinity:
      requiredDuringSchedlingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: blufer
            operator: Exists
```

LANGUAGE: bash
CODE:
```
kubectl apply -f deployment.yaml
```

----------------------------------------

TITLE: Demonstrating String Interpolation - JavaScript
DESCRIPTION: This JavaScript snippet illustrates the use of template literals for string interpolation. It defines a numeric variable and embeds its value within a string using the ${variable} syntax, demonstrating how to dynamically create formatted strings.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/software_development/README.md#_snippet_0

LANGUAGE: js
CODE:
```
const messages = 5;
console.log(`You have ${messages} new messages`); // You have 5 new messages
```

----------------------------------------

TITLE: Creating Pod with Kubectl Run (Demonstration)
DESCRIPTION: Uses `kubectl run` to create a basic pod named `some-pod` using the `redis` image. This command is shown in the context of demonstrating how a `NoSchedule` taint prevents a pod without tolerations from being scheduled on the only available node. Requires `kubectl`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_32

LANGUAGE: Shell
CODE:
```
kubectl run some-pod --image=redis
```

----------------------------------------

TITLE: Running Flask Development Server
DESCRIPTION: Starts the Flask development server, making the application accessible typically at `http://127.0.0.1:5000`. Requires `FLASK_APP` to be set and dependencies installed.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/flask_container_ci/README.md#_snippet_4

LANGUAGE: Bash
CODE:
```
flask run
```

----------------------------------------

TITLE: Listing File/Directory Sizes in Bash
DESCRIPTION: This Bash script iterates through files and directories in the current path, sorted by size in reverse order (largest first) using `ls -S1`. For each item found, it prints the item's name followed by its human-readable size. The size is obtained using `du -sh` on the item, and `cut -f1` is used to extract only the size value from the `du` output.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/solutions/files_size.md#_snippet_0

LANGUAGE: bash
CODE:
```
#!/usr/bin/env bash

for i in $(ls -S1); do
    echo $i: $(du -sh "$i" | cut -f1)
done
```

----------------------------------------

TITLE: Creating Multiple Resources using Module Count (HCL)
DESCRIPTION: Demonstrates using the `count` meta-argument with a Terraform module block. This allows the module's contents to be instantiated multiple times, creating parallel infrastructure based on the module definition. Requires Terraform 0.13 or later.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_31

LANGUAGE: HCL
CODE:
```
module "instances" {
  source = "/some/module/path"

  count = 3
}
```

----------------------------------------

TITLE: Counting String Occurrences with Grep (Shell)
DESCRIPTION: Demonstrates using `grep` with the `-c` flag to count the total number of lines in `file.md` that contain the exact string 'This is a string'. Outputs the count of matching lines. Requires the `grep` utility and the target file.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_2

LANGUAGE: shell
CODE:
```
grep -c 'This is a string' file.md
```

----------------------------------------

TITLE: Conditionally Executing Stages by Parameter in Jenkins Pipeline (Jenkinsfile)
DESCRIPTION: Shows how to use the `when` directive with an `expression` to control stage execution in a Jenkins Declarative Pipeline. Stages run only if the `START_STAGE` parameter is empty or matches the current stage name, with subsequent stages also checking the previous stage's success.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/cicd/README.md#_snippet_2

LANGUAGE: Jenkinsfile
CODE:
```
stage('Build') {
    when {
        expression {
            params.START_STAGE == '' || currentStage.name == params.START_STAGE
        }
    }
    // Build steps go here
}

stage('Test') {
    when {
        expression {
            params.START_STAGE == '' || currentStage.name == params.START_STAGE || previousStage.result == 'SUCCESS'
        }
    }
    // Test steps go here
}

stage('Deploy') {
    when {
        expression {
            params.START_STAGE == '' || currentStage.name == params.START_STAGE || previousStage.result == 'SUCCESS'
        }
    }
    // Deploy steps go here
}
```

----------------------------------------

TITLE: Creating New Application from Image OpenShift Bash
DESCRIPTION: This command demonstrates how to create a new application deployment in OpenShift using a specified image, in this case, a MySQL image from Docker Hub. OpenShift automatically creates necessary resources like a DeploymentConfig and Service.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/openshift/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
oc new-app mysql
```

----------------------------------------

TITLE: Create ArgoCD Application CLI
DESCRIPTION: Creates a new ArgoCD application resource using the `argocd app create` command. It defines the application name, associated project, source Git repository, path within the repo, destination namespace, and target Kubernetes server address. Requires the `argocd` CLI configured to connect to the ArgoCD instance.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/sync_app_git/solution.md#_snippet_0

LANGUAGE: cli
CODE:
```
argocd app create app-demo \
--project project-demo \
--repo https://fake.repo.address \
--path ./some_app_path \
--dest-namespace default \
--dest-server my.kubernetes.cluster
```

----------------------------------------

TITLE: Setting Environment Variable (Persistent) - Shell
DESCRIPTION: Assigns a value (`2`) to a variable (`X`) and marks it for export using the `export` command. This makes the variable available not only in the current shell but also in any child processes subsequently launched from it.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_105

LANGUAGE: Shell
CODE:
```
export X=2
```

----------------------------------------

TITLE: Defining ArgoCD Application Source YAML
DESCRIPTION: This YAML snippet defines the `source` section of an ArgoCD Application resource. It specifies the Git repository URL (`repoURL`), the target branch or commit to track (`targetRevision`), and the relative path within the repository where the Kubernetes manifests or Helm charts are located (`path`). This tells ArgoCD *where* to find the desired state of the application.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/README.md#_snippet_0

LANGUAGE: YAML
CODE:
```
source:
  repoURL: https://github.com/bregman-arie/devops-exercises
  targetRevision: HEAD
  path: main
```

----------------------------------------

TITLE: Defining Helm Template File YAML
DESCRIPTION: Illustrates the structure of a Helm template file using Go templating syntax to define placeholders for values that will be provided externally. This allows for creating configurable Kubernetes manifests from a single blueprint.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_119

LANGUAGE: YAML
CODE:
```
apiVersion: v1
kind: Pod
metadata:
  name: {{ .Values.name }}
spec:
  containers:
  - name: {{ .Values.container.name }}
  image: {{ .Values.container.image }}
  port: {{ .Values.container.port }}
```

----------------------------------------

TITLE: Optimized Dockerfile RUN Instruction
DESCRIPTION: This snippet shows how to combine multiple commands into a single `RUN` instruction using the `&&` operator. This technique reduces the number of layers created, which can decrease the final image size.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/image_layers.md#_snippet_5

LANGUAGE: Dockerfile
CODE:
```
RUN dd if=/dev/zero of=some_file bs=1024 count=0 seek=1024 && dd if=/dev/zero of=some_file bs=1024 count=0 seek=1024 && dd if=/dev/zero of=some_file bs=1024 count=0 seek=1024
```

----------------------------------------

TITLE: Partial YAML for Kubernetes LoadBalancer Service Spec
DESCRIPTION: This YAML snippet shows the `spec` section for a Kubernetes Service, illustrating how to configure a `LoadBalancer` type service. It defines the Pod selector (`app: some-app`), sets the type to `LoadBalancer`, configures the ports (mapping service port 8081 to target port 8081, with an optional `nodePort`), enabling external access via a cloud provider's load balancer.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_52

LANGUAGE: yaml
CODE:
```
spec:
  selector:
    app: some-app
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
      nodePort: 32412
```

----------------------------------------

TITLE: Scheduling Pod on Specific Node Workflow (Bash, YAML)
DESCRIPTION: This workflow demonstrates how to generate a Pod manifest using dry run, manually add the 'nodeName' field to schedule the pod on a specific node, and then apply the manifest.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_21

LANGUAGE: bash
CODE:
```
k run some-pod --image=redix -o yaml --dry-run=client > pod.yaml
```

LANGUAGE: bash
CODE:
```
vi pod.yaml
```

LANGUAGE: yaml
CODE:
```
spec:
  nodeName: node1
```

LANGUAGE: bash
CODE:
```
k apply -f pod.yaml
```

----------------------------------------

TITLE: Reversing String using Slicing - Python
DESCRIPTION: This snippet demonstrates a Pythonic way to reverse a string using slicing. It creates a reversed copy of the original string efficiently using a step value of -1.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/python/solutions/reverse_string.md#_snippet_0

LANGUAGE: Python
CODE:
```
my_string[::-1]
```

----------------------------------------

TITLE: Getting ArgoCD Application State (CLI) - Bash
DESCRIPTION: This command retrieves and displays the current status and details of the specified ArgoCD application (`app-demo`). It's used to check the synchronization status, health, and deployed resources after creation, modification, or synchronization, allowing users to verify if ArgoCD has detected changes or completed a sync operation.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/sync_app_git/exercise.md#_snippet_2

LANGUAGE: bash
CODE:
```
argocd app get app-demo
```

----------------------------------------

TITLE: Removing Specific Docker Containers (Shell)
DESCRIPTION: This Docker command removes one or more specified containers. You need to replace `<ID>` with the actual ID(s) of the containers you want to remove. It is typically used for cleaning up individual stopped containers.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_41

LANGUAGE: Shell
CODE:
```
docker container rm <ID>
```

----------------------------------------

TITLE: Assigning Command Output to Variable in Shell
DESCRIPTION: Defines a shell variable `DATE` and assigns the output of the `date` command to it using command substitution (`$()`). This captures the current date and time string.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
DATE=$(date)
```

----------------------------------------

TITLE: Defining Start Stage Parameter in Jenkins Pipeline (Jenkinsfile)
DESCRIPTION: Adds a `string` parameter named `START_STAGE` to a Jenkins Declarative Pipeline. This parameter allows users to specify a stage name to begin the build from, defaulting to an empty string to run from the start.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/cicd/README.md#_snippet_1

LANGUAGE: Jenkinsfile
CODE:
```
parameters {
    string(name: 'START_STAGE', defaultValue: '', description: 'The name of the stage to start the build from')
}
```

----------------------------------------

TITLE: Reading User Input in Shell
DESCRIPTION: Uses the `read` keyword to prompt the user for input and store it in the variable `x`. Execution pauses until the user enters a line and presses Enter.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/README.md#_snippet_8

LANGUAGE: Shell
CODE:
```
read x
```

----------------------------------------

TITLE: Granting View Role to User OpenShift Bash
DESCRIPTION: An example of using the `oc adm policy` command to add the 'view' role to a specific user ('user1') within a named project ('wonderland'). This grants the user read-only access to resources in that project.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/openshift/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
oc adm policy add-role-to-user view user1 -n wonderland
```

----------------------------------------

TITLE: Editing Kubernetes Deployment (Shell)
DESCRIPTION: Opens the configuration of a specified Kubernetes Deployment in a text editor, allowing you to modify its parameters directly. Changes made upon saving the file will be applied to the running deployment. Requires the deployment name as an argument.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_33

LANGUAGE: Shell
CODE:
```
kubectl edit deployment <DEPLOYMENT_NAME>
```

----------------------------------------

TITLE: Viewing Pod Resource Metrics (kubectl, Shell)
DESCRIPTION: Shows resource usage (CPU, Memory) for pods in the cluster. This command requires the Kubernetes metrics-server to be installed and operational.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_145

LANGUAGE: Shell
CODE:
```
kubectl top pod
```

----------------------------------------

TITLE: Exposing Pod as Internal Service (Bash)
DESCRIPTION: This command creates an internal Kubernetes Service named 'sevi' to expose a specific pod named 'web' on port 1991.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_1

LANGUAGE: bash
CODE:
```
kubectl expose pod web --port=1991 --name=sevi
```

----------------------------------------

TITLE: Using Variable with Default Filter in Ansible
DESCRIPTION: Demonstrates how to use a variable ('package_name') for the package name in an Ansible task. The 'default' filter is used to provide a fallback value ('zlib') if the variable is not defined.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/ansible/README.md#_snippet_1

LANGUAGE: yaml
CODE:
```
- name: Install a package
  package:
    name: "{{ package_name|default('zlib') }}"
    state: present
```

----------------------------------------

TITLE: Pruning Unused Docker Data (Shell)
DESCRIPTION: This Docker command cleans up unused Docker resources. It removes all stopped containers, dangling images, and unused networks, helping to free up disk space. Use with caution as it removes multiple resource types.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_42

LANGUAGE: Shell
CODE:
```
docker system prune
```

----------------------------------------

TITLE: Creating New Terraform Workspace Shell
DESCRIPTION: The `terraform workspace new <WORKSPACE_NAME>` command creates a new workspace for the current configuration. Workspaces allow associating multiple states with a single configuration, often used for different environments or feature branches.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_25

LANGUAGE: Shell
CODE:
```
terraform workspace new <WORKSPACE_NAME>
```

----------------------------------------

TITLE: Creating Kubernetes ReplicaSet YAML and Applying
DESCRIPTION: Defines a Kubernetes ReplicaSet resource in YAML format, specifying desired replicas, selectors, and pod template. The subsequent command applies this configuration to the Kubernetes cluster.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/replicaset_03_solution.md#_snippet_0

LANGUAGE: yaml
CODE:
```
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: web
  labels:
    app: somewebapp
    type: web
spec:
  replicas: 2
  selector:
    matchLabels:
      type: web
  template:
    metadata:
      labels:
        type: web
    spec:
      containers:
      - name: httpd
        image: registry.redhat.io/rhscl/httpd-24-rhel7
```

LANGUAGE: bash
CODE:
```
kubectl apply -f rs.yaml
```

----------------------------------------

TITLE: Using Placeholders in YAML Values
DESCRIPTION: This snippet illustrates the syntax `{{ variable_name }}` commonly used in YAML files with templating engines (like Jinja2) to reference values dynamically instead of hardcoding them directly.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_22

LANGUAGE: YAML
CODE:
```
username: {{ my.user_name }}
```

----------------------------------------

TITLE: Counting Database Records by Date Comparison - SQL
DESCRIPTION: This SQL snippet counts the number of rows in the 'shawarma_purchases' table where the 'purchased_at' column falls within the year 2017. It uses direct comparison operators (>= and <=) to define the date range. Requires a database with the 'shawarma_purchases' table and a 'purchased_at' column of a date or timestamp type.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/sql/solutions/improve_query.md#_snippet_0

LANGUAGE: SQL
CODE:
```
SELECT count(*)
FROM shawarma_purchases
WHERE
  purchased_at >= '2017-01-01' AND
  purchased_at <= '2017-31-12'
```

----------------------------------------

TITLE: Running Kubernetes httpd Pod (Shell)
DESCRIPTION: Uses `kubectl run` to create and start a Kubernetes pod named 'web' based on the specified Red Hat httpd image. This pod hosts a web service that will be targeted later.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/killing_containers.md#_snippet_0

LANGUAGE: Shell
CODE:
```
kubectl run web --image registry.redhat.io/rhscl/httpd-24-rhel7
```

----------------------------------------

TITLE: Filtering Data Source Using Another Data Source (Terraform HCL)
DESCRIPTION: Defines an `aws_subnets` data source to retrieve subnets. It demonstrates how to use a `filter` block within the data source definition to narrow down results, specifically using the ID obtained from a separate `aws_vpc` data source.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_15

LANGUAGE: HCL
CODE:
```
data "aws_subnets" "default" {
  filter {
    name   = "vpc-id"
    values = [data.aws_vpc.default.id]
  }
}
```

----------------------------------------

TITLE: Listing Pods with Wide Output Kubectl
DESCRIPTION: Lists all pods in the current namespace, providing extended information such as the node they are scheduled on, IP addresses, and restart count. Useful for seeing pod distribution across nodes.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_17

LANGUAGE: kubectl
CODE:
```
kubectl get pods -o wide
```

----------------------------------------

TITLE: Checking Data Type - Python
DESCRIPTION: This snippet shows the basic usage of the built-in Python function `type()`. This function takes an object as an argument and returns its type. It is commonly used for debugging or introspection to determine the data type of a variable.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/python/solutions/data_types_solution.md#_snippet_0

LANGUAGE: python
CODE:
```
type(...)
```

----------------------------------------

TITLE: Insecure AWS Provider Configuration - Terraform HCL
DESCRIPTION: This Terraform HCL snippet demonstrates an insecure method of configuring the AWS provider by hardcoding access and secret keys directly in the configuration file. It serves as an example of what *not* to do, highlighting a significant security vulnerability.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_39

LANGUAGE: HCL
CODE:
```
provider "aws" {
  region = "us-west-1"

  access_key = "blipblopblap"
  secret_key = "bipbopbipbop"
}
```

----------------------------------------

TITLE: Get ArgoCD Application Status CLI
DESCRIPTION: Uses the `argocd app get` command to retrieve detailed information about the specified ArgoCD application, including its current sync status, health status, and resource details. This is used to observe the effect of the Git changes.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/sync_app_git/solution.md#_snippet_2

LANGUAGE: cli
CODE:
```
argocd app get app-demo
```

----------------------------------------

TITLE: Running Container in Background (Podman)
DESCRIPTION: Uses the -d flag to run a Podman container in detached mode, meaning it runs in the background and will not attach to the current terminal. Useful for running services.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_8

LANGUAGE: Shell
CODE:
```
podman container run -d httpd
```

----------------------------------------

TITLE: Replacing Text In-Place with Sed (Shell)
DESCRIPTION: Demonstrates using the `sed` command with the `-i` flag to perform an in-place replacement of all occurrences of 'good' with 'great' within the file `/tmp/y`. Requires the `sed` utility and write permissions on the target file.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
sed -i s/good/great/g /tmp/y
```

----------------------------------------

TITLE: Creating ArgoCD Helm Application (Shell)
DESCRIPTION: This ArgoCD CLI command creates a new application named 'some-app'. It configures the application to source a Helm chart from a specified Git repository URL, using the chart located at a specific path within the repository. The application is set to automatically sync to a target Kubernetes namespace and server.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/argocd_helm_app/solution.md#_snippet_0

LANGUAGE: Shell
CODE:
```
argocd app create some-app \
--project default \
--repo https://repo-with-helm-chart
--path "./helm" \
--sync-policy auto \
--dest-namespace default \
--dest-server https://kubernetes.cluster
```

----------------------------------------

TITLE: Displaying Open Sockets on Linux using netstat
DESCRIPTION: This command is used on Linux systems to display a list of all active network connections and listening sockets. The `-a` option shows all connections, and the `-n` option displays addresses and port numbers numerically, preventing DNS lookups.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
netstat -an
```

----------------------------------------

TITLE: Viewing Node Resource Metrics (kubectl, Shell)
DESCRIPTION: Displays resource usage (CPU, Memory) for nodes in the cluster. This command relies on the Kubernetes metrics-server being installed and running.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_144

LANGUAGE: Shell
CODE:
```
kubectl top node
```

----------------------------------------

TITLE: Triggering Jenkins Pipeline with Parameter (Shell)
DESCRIPTION: Shows an example command for triggering a Jenkins pipeline build from the command line (e.g., using curl). It demonstrates how to pass the `START_STAGE` parameter to the pipeline via the URL query string.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/cicd/README.md#_snippet_4

LANGUAGE: Shell
CODE:
```
pipeline?START_STAGE=Test
```

----------------------------------------

TITLE: Continuing Rebase After Conflict (Git, Bash)
DESCRIPTION: This command is used after resolving merge conflicts during a rebase operation. It continues the rebase process, moving to the next commit or completing the operation with the resolved changes.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_14

LANGUAGE: bash
CODE:
```
git rebase --continue
```

----------------------------------------

TITLE: Defining Multi-line String (Literal) in YAML
DESCRIPTION: This snippet shows the syntax for creating a multi-line string in YAML using the literal block scalar (`|`). This method preserves newlines and leading indentation of the content, making it suitable for embedding blocks of text or scripts.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_20

LANGUAGE: YAML
CODE:
```
someMultiLineString: |
  look mama
  I can write a multi-line string
  I love YAML
```

----------------------------------------

TITLE: Editing Pod Manifest with kubectl
DESCRIPTION: Opens the manifest (YAML configuration) of an existing pod (`some-pod`) in the default text editor. This allows for manual modification of the pod's definition, such as adding or changing tolerations, resource limits, or other parameters.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/exercises/taints_101/solution.md#_snippet_3

LANGUAGE: shell
CODE:
```
kubectl edit po some-pod
```

----------------------------------------

TITLE: Installing Helm Chart with Set Values Shell
DESCRIPTION: Demonstrates how to install a Helm chart by overriding individual values directly on the command line using the `--set` flag. This is useful for simple, ad-hoc overrides without creating a separate file.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_123

LANGUAGE: Shell
CODE:
```
helm install --set some_key=some_value
```

----------------------------------------

TITLE: Grepping for Lines Ending with a Digit (Bash)
DESCRIPTION: Shows a `grep` command using a regular expression (`[0-9]$`) to find lines in `some_file` that end with a single digit. The `$` anchor matches the end of the line.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_46

LANGUAGE: Bash
CODE:
```
grep '[0-9]$' some_file
```

----------------------------------------

TITLE: Modifying Git Rebase Editor to Squash Commits (Text)
DESCRIPTION: This snippet shows the content of the interactive rebase editor after modifying the second commit's action from `pick` to `squash`. This tells Git to combine the second commit into the first one when the rebase is applied.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/solutions/squashing_commits.md#_snippet_5

LANGUAGE: text
CODE:
```
pick 5412076 New file
squash 4016808 Added Luigi
```

----------------------------------------

TITLE: Bash Script for Directory Comparison
DESCRIPTION: This complete bash script compares two directories specified as arguments. It defines functions for displaying usage help (`help`), validating input arguments (`validate_args`) to check for two arguments and their existence as directories, and performing the comparison using `diff -r` (`compare`). The script parses options (`getopts`) before validating and executing the comparison.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/exercises/shell/solutions/directories_comparison.md#_snippet_0

LANGUAGE: bash
CODE:
```
#!/usr/bin/env bash


help () {
  echo "Usage: compare <filename1> <filename2>"
  echo
}

validate_args() {
  # Ensure that 2 arguments are passed
  if [ $# != 2 ]
  then
    help
    exit 1
  fi

  i=1
  for dir in "$@"
  do
      # Validate existence of directories
      if [ ! -d "$dir" ]
      then
        echo "Directory $dir does not exist"
        exit 1
      fi
      echo "Directory $i: $dir"
      i=$((i + 1))
  done
  echo
}

compare() {
  echo "Comparing directories..."
  echo
  diff -r "$1" "$2"
  
  if [ $? -eq 0 ]
  then
  	echo "No difference"
  fi
  
  exit 0
}

while getopts ":h" option; do
   case $option in
      h) # display Help
         help
         exit 0;;
      \?) # invalid option
         echo "Error: Invalid option"
         exit 1;;
   esac
done

validate_args "$@"
compare "$1" "$2"



```

----------------------------------------

TITLE: Listing Deployed Helm Releases Shell
DESCRIPTION: Provides the commands to view a list of all deployed Helm releases in the current Kubernetes context. This helps in monitoring installed applications and their release names/statuses.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_124

LANGUAGE: Shell
CODE:
```
helm ls
```

LANGUAGE: Shell
CODE:
```
helm list
```

----------------------------------------

TITLE: Configuring Aliased AWS Providers for Multiple Regions (HCL)
DESCRIPTION: Illustrates defining multiple `provider "aws"` blocks, each configured for a different AWS region and assigned a unique `alias`. This allows resources and data sources to target specific regions by referencing the aliased provider instance.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_35

LANGUAGE: HCL
CODE:
```
provider "aws" {
  region = "us-west-1"
  alias = "west_region"
}

provider "aws" {
  region = "us-east-1"
  alias = "east_region"
}

data "aws_region" "west_region" {
  provider = aws.west_region
}

data "aws_region" "east_region" {
  provider = aws.east_region
}
```

----------------------------------------

TITLE: Generating Deployment YAML with Replicas (Shell)
DESCRIPTION: Generates a Kubernetes Deployment manifest in YAML format for a deployment named "blufer" using the "python" image and specifying 3 replicas. The `--dry-run=client` option prevents actual creation, and the output is saved to `deployment.yaml`. This serves as a base for further modifications like adding affinity rules.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_42

LANGUAGE: Shell
CODE:
```
kubectl create deployment blufer --image=python --replicas=3 -o yaml --dry-run=client > deployment.yaml
```

----------------------------------------

TITLE: Assigning Python String (Double Quotes)
DESCRIPTION: Assigns a string literal enclosed in double quotes to the variable 'b'. This demonstrates the string data type in Python.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/python/data_types.md#_snippet_1

LANGUAGE: python
CODE:
```
b = "Hello, is it me you looking for?"
```

----------------------------------------

TITLE: YAML Node Affinity Required Scheduling (In Operator)
DESCRIPTION: This YAML snippet shows a node affinity configuration using 'requiredDuringSchedulingIgnoredDuringExecution' and the 'In' operator to schedule a pod only on nodes where the 'region' label exists and its value is either 'asia' or 'emea'.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_22

LANGUAGE: yaml
CODE:
```
affinity:
  nodeAffinity:
    requiredDuringSchedlingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: region
          operator: In
          values:
          - asia
          - emea
```

----------------------------------------

TITLE: Listing Argo Rollouts - Argo Rollouts CLI
DESCRIPTION: This command uses the Argo Rollouts CLI (integrated with kubectl) to list all active Rollout resources deployed in the current Kubernetes namespace. It provides a summary view of the rollouts, including their names and current status.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/canary_rollout/solution.md#_snippet_2

LANGUAGE: shell
CODE:
```
kubectl argo rollouts list rollouts
```

----------------------------------------

TITLE: Removing Container Image (Podman)
DESCRIPTION: This command is used to remove a specific container image from the host machine. It requires the image identifier (name or ID) and will fail if the image is currently in use by one or more containers.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_23

LANGUAGE: shell
CODE:
```
podman rmi IMAGE
```

----------------------------------------

TITLE: Listing Cluster-Scoped Kubernetes Resources - Kubectl
DESCRIPTION: This command lists all Kubernetes API resource types that are not bound to a specific namespace, meaning they are cluster-scoped. Examples include Nodes, PersistentVolumes, and CustomResourceDefinitions.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_104

LANGUAGE: Kubectl
CODE:
```
kubectl api-resources --namespaced=false
```

----------------------------------------

TITLE: Scaling Down Kubernetes ReplicaSet (Bash)
DESCRIPTION: This command scales a specific ReplicaSet named 'rori' to ensure only 1 replica (pod) is running.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_10

LANGUAGE: bash
CODE:
```
k scale rs rori --replicas=1
```

----------------------------------------

TITLE: Deleting Remote Branch Git bash
DESCRIPTION: This command deletes the specified remote branch (`[branch_name]`) from the `origin` remote repository. It is used to clean up remote branches that are no longer needed. Replace `[branch_name]` with the actual name of the branch to be deleted.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_18

LANGUAGE: bash
CODE:
```
git push origin :[branch_name]
```

----------------------------------------

TITLE: Example Kubernetes Opaque Secret Manifest | YAML
DESCRIPTION: A YAML manifest defining a Kubernetes Secret of type 'Opaque'. It stores a password value directly in plain text under the 'data' field. The text notes this is problematic as the value is not encrypted by default and should typically be base64 encoded.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_113

LANGUAGE: yaml
CODE:
```
apiVersion: v1
kind: Secret
metadata:
    name: some-secret
type: Opaque
data:
    password: mySecretPassword
```

----------------------------------------

TITLE: Pod Toleration Configuration (YAML)
DESCRIPTION: This YAML snippet represents a toleration that can be added to a pod's manifest. It defines a rule that matches the `app=web:NoSchedule` taint, allowing the pod to be scheduled onto nodes with this specific taint, overriding the `NoSchedule` effect.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/exercises/taints_101/solution.md#_snippet_4

LANGUAGE: yaml
CODE:
```
- effect: NoSchedule
    key: app
    operator: Equal
    value: web
```

----------------------------------------

TITLE: Install and Run Stress Tool - Shell
DESCRIPTION: This snippet provides shell commands for Amazon Linux 2 to install the 'stress' tool and then execute it to simulate high CPU utilization. It requires root privileges (sudo) and the EPEL repository. The 'stress -c 4' command targets 4 CPU cores.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/asg_dynamic_scaling_policy/solution.md#_snippet_0

LANGUAGE: shell
CODE:
```
sudo amazon-linux-extras install epel -y
sudo yum install stress -y
stress -c 4  # assuming you have 4 CPUs
```

----------------------------------------

TITLE: Using Ternary-like Operator in Bash
DESCRIPTION: Demonstrates a common Bash pattern simulating a ternary operator (`condition ? true_action : false_action`) using the `[[...]]` test command, the `&&` (AND), and `||` (OR) logical operators for conditional assignment.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/README.md#_snippet_17

LANGUAGE: Shell
CODE:
```
[[ $a = 1 ]] && b="yes, equal" || b="nope"
```

----------------------------------------

TITLE: Switching Current Kubernetes Namespace (kubens) - Shell
DESCRIPTION: Switches the active namespace to `some-namespace` using the `kubens` utility. This provides a faster alternative to using `kubectl config set-context`. Requires the `kubectx` suite to be installed.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_93

LANGUAGE: shell
CODE:
```
kubens some-namespace
```

----------------------------------------

TITLE: Comparing String Lengths in Shell
DESCRIPTION: Compares the length of the first (`$1`) and second (`$2`) command-line arguments using shell parameter expansion (`${#variable}`) and the `[` (test) command with the `-ne` (not equal) operator.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/README.md#_snippet_9

LANGUAGE: Shell
CODE:
```
if [ ${#1} -ne ${#2} ]; then
    ...
```

----------------------------------------

TITLE: Editing a Running Pod Definition
DESCRIPTION: Uses the `kubectl edit` command to open the live definition of a running Pod in the default editor. This allows modification of certain fields, though many are immutable after creation.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_138

LANGUAGE: Bash
CODE:
```
kubectl edit po some-pod
```

----------------------------------------

TITLE: Bash Process Substitution with diff
DESCRIPTION: This command uses process substitution (`<(command)`) to compare the output of two `ls` commands using the `diff` utility. It's useful when a command expects file arguments but you need to provide the output of another command, overcoming limitations of pipes (`|`) which typically connect STDOUT of one command to STDIN of another.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/tests/testcases/testcase2.md#_snippet_2

LANGUAGE: Bash
CODE:
```
diff <(ls /tmp) <(ls /var/tmp)
```

----------------------------------------

TITLE: Generating Static Pod Manifest YAML Bash
DESCRIPTION: Generates a YAML manifest for a simple pod using `kubectl run` with a Python image and a sleep command, prevents restarts, performs a client-side dry run, and redirects the output to a file named `statuc-pod.yaml`. Intended to be placed in the static pods directory.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_27

LANGUAGE: bash
CODE:
```
k run some-pod --image=python --command sleep 2017 --restart=Never --dry-run=client -o yaml > statuc-pod.yaml
```

----------------------------------------

TITLE: Listing Kubernetes ReplicaSets (Bash)
DESCRIPTION: This command lists all ReplicaSets defined in the current Kubernetes namespace.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_4

LANGUAGE: bash
CODE:
```
k get rs
```

----------------------------------------

TITLE: Troubleshooting Network Issues (netstat, lsof, ngrep, tcpdump)
DESCRIPTION: Lists several essential command-line tools used for diagnosing network problems, including checking open ports and connections (netstat, lsof), monitoring network activity (ngrep), and capturing packets for detailed analysis (tcpdump).
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_30

LANGUAGE: bash
CODE:
```
netstat -tnlaup
```

LANGUAGE: bash
CODE:
```
lsof -i -P
```

LANGUAGE: bash
CODE:
```
ngrep -d any metafilter
```

LANGUAGE: bash
CODE:
```
tcpdump
```

----------------------------------------

TITLE: Decompressing RLE String (Python)
DESCRIPTION: This Python function `decompress_str` reverses the run-length encoding. It iterates through the compressed string in steps of two, taking the character at even indices and its count (as a digit string) at odd indices, then appends the character repeated 'count' times to the result string. It relies on the input format being strictly alternating character-count pairs.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/python/solutions/compress_string_solution.md#_snippet_1

LANGUAGE: python
CODE:
```
def decompress_str(mystr: str) -> str:
	result = ''
	for index in range(0, len(mystr), 2):
		result += mystr[index] * int(mystr[index + 1])
	return result
```

----------------------------------------

TITLE: Passing Aliased AWS Provider to Terraform Module (HCL)
DESCRIPTION: Demonstrates how to specify which provider instance a module should use for a given provider type (`aws` in this case) by mapping the provider type to an aliased provider configuration (`aws.some_region`) within the module's `providers` block.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_36

LANGUAGE: HCL
CODE:
```
module "some_module" {
  source = "..."

  providers = {
    aws = aws.some_region
  }

  ...
}
```

----------------------------------------

TITLE: Defining String Variable in Shell
DESCRIPTION: Defines a shell variable named `HW` and assigns the string value 'Hello World' to it. Note the lack of spaces around the `=` operator in shell variable assignments. The original snippet has a missing closing quote.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
HW="Hello World
```

----------------------------------------

TITLE: Creating Kubernetes Resource Quota - Kubectl
DESCRIPTION: This command creates a resource quota named 'some-quota' in the current namespace. It sets hard limits for resource consumption, specifically limiting CPU usage to 2 units and the number of pods to 2 within that namespace.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_94

LANGUAGE: Kubectl
CODE:
```
kubectl create quota some-quota --hard-cpu=2,pods=2
```

----------------------------------------

TITLE: Staging Files for Commit (Git, Bash)
DESCRIPTION: This command adds changes from the working directory to the staging area. The 'FILES' argument specifies which files to add; '.' can be used to add all changes. Necessary step before committing modifications.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
git add FILES
```

----------------------------------------

TITLE: Executing Goroutines with WaitGroup Go
DESCRIPTION: This Go snippet demonstrates concurrent execution using goroutines and synchronization with `sync.WaitGroup`. It launches two goroutines; one sleeps before printing, while the other prints immediately. The main function uses `wg.Wait()` to block until the first goroutine completes, ensuring "1" is printed before "3", but "2" is printed concurrently and likely before "1".
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_6

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"sync"
	"time"
)

func main() {
	var wg sync.WaitGroup

	wg.Add(1)
	go func() {
		time.Sleep(time.Second * 2)
		fmt.Println("1")
		wg.Done()
	}()

	go func() {
		fmt.Println("2")
	}()

	wg.Wait()
	fmt.Println("3")
}
```

----------------------------------------

TITLE: Installing Argo Rollouts Controller - Kubernetes CLI
DESCRIPTION: These commands create a dedicated namespace for Argo Rollouts and apply the official installation manifest from the project's GitHub repository. This deploys the Argo Rollouts controller and associated resources into your Kubernetes cluster, which is required to manage rollout resources.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/blue_green_rollout/solution.md#_snippet_0

LANGUAGE: Bash
CODE:
```
kubectl create namespace argo-rollouts
kubectl apply -n argo-rollouts -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml
```

----------------------------------------

TITLE: Installing Argo Rollouts Controller - Kubernetes CLI
DESCRIPTION: These commands create a dedicated namespace for Argo Rollouts and then apply the standard installation manifest from the official Argo Rollouts repository to deploy the controller and associated resources into that namespace.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/canary_rollout/solution.md#_snippet_0

LANGUAGE: shell
CODE:
```
kubectl create namespace argo-rollouts
```

LANGUAGE: shell
CODE:
```
kubectl apply -n argo-rollouts -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml
```

----------------------------------------

TITLE: Editing Crontab (Shell)
DESCRIPTION: Shows the command `crontab -e`, which is used to edit the crontab file for the current user. This file stores scheduled tasks that are executed periodically by the cron daemon. Requires the `crontab` utility.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_12

LANGUAGE: shell
CODE:
```
crontab -e
```

----------------------------------------

TITLE: Listing GCP Regions using gcloud
DESCRIPTION: This command lists all available Google Cloud Platform regions for compute resources. It's used to check geographical locations where resources can be deployed.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/gcp/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
gcloud compute regions list
```

----------------------------------------

TITLE: Finding and Killing Process by File Path (lsof, kill)
DESCRIPTION: Outlines a two-step process using lsof to find the process ID (PID) associated with a file path currently being used, and then using the kill command to terminate that process. This is a common troubleshooting scenario.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_34

LANGUAGE: bash
CODE:
```
lsof <FILE_PATH>
```

LANGUAGE: bash
CODE:
```
kill <PID>
```

----------------------------------------

TITLE: Enabling Service Autostart (Systemd, SysV, Upstart)
DESCRIPTION: Explains how to configure services to start automatically on boot or after a crash using commands specific to different Linux init systems (Systemd, System V, and Upstart). Includes commands and a configuration file entry example.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_76

LANGUAGE: bash
CODE:
```
systemctl enable [service_name]
```

LANGUAGE: bash
CODE:
```
update-rc.d [service_name]
```

LANGUAGE: configuration
CODE:
```
id:5678:respawn:/bin/sh /path/to/app
```

----------------------------------------

TITLE: Partial Kubernetes Ingress YAML Structure
DESCRIPTION: This YAML snippet shows the initial structure for defining a Kubernetes Ingress resource. It includes the standard `metadata` for naming the resource and the `spec` section where routing rules and other configurations are defined, intended as a starting point.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_56

LANGUAGE: YAML
CODE:
```
metadata:
  name: someapp-ingress
spec:
```

----------------------------------------

TITLE: Configuring Required Node Affinity (YAML)
DESCRIPTION: Defines a `requiredDuringSchedulingIgnoredDuringExecution` node affinity rule in a Pod specification YAML. This ensures the Pod is only scheduled on nodes that match the specified label criteria.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_131

LANGUAGE: YAML
CODE:
```
affinity:
  nodeAffinity:
    requiredDuringSchedlingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: region
          operator: In
          values:
          - asia
          - emea
```

----------------------------------------

TITLE: Modifying Kubernetes Manifests and Committing Changes (Git) - Bash
DESCRIPTION: This sequence of standard Git commands simulates updating application manifests. It involves navigating to the local repository, editing a Kubernetes manifest file (using `vi` as an example), staging the changes, creating a commit, and pushing the committed changes to the specified branch on the origin remote. This action in the Git repository triggers ArgoCD to detect the changes.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/sync_app_git/exercise.md#_snippet_1

LANGUAGE: bash
CODE:
```
cd <git repo>
vi <k8s manifest>
git add .
git commit -a
git push origin <BRANCH_NAME>
```

----------------------------------------

TITLE: Printing Specific Column using AWK Shell
DESCRIPTION: This AWK command processes a specified file line by line and prints the fourth field (column) of each line. By default, AWK uses whitespace (spaces or tabs) as the field separator. The variable `$4` refers to the content of the fourth field in the current input record.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_89

LANGUAGE: AWK
CODE:
```
awk '{print $4}' file
```

----------------------------------------

TITLE: Defining Local File Resource - Terraform
DESCRIPTION: This Terraform code snippet defines a `local_file` resource named `mario_local_file`. It utilizes the `local` provider to manage a file on the local filesystem. The resource is configured to create a file at the path `/tmp/who_is_it.txt` with the specified content 'It's a me, Mario!'. This requires the Terraform `local` provider.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/exercises/terraform_local_provider/exercise.md#_snippet_0

LANGUAGE: Terraform
CODE:
```
resource "local_file" "mario_local_file" {
    content  = "It's a me, Mario!"
    filename = "/tmp/who_is_it.txt"
}
```

----------------------------------------

TITLE: Listing AWS IAM Roles - AWS CLI
DESCRIPTION: This command lists all IAM roles present in the currently configured AWS account. It is used here to confirm the successful creation of a new role by checking if its name appears in the list. Requires the AWS Command Line Interface to be installed and configured with valid AWS credentials.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/create_role/solution.md#_snippet_0

LANGUAGE: AWS CLI
CODE:
```
aws iam list-roles
```

----------------------------------------

TITLE: Printing First Argument with Default in Shell
DESCRIPTION: Prints the value of the first command-line argument (`$1`) if it is set and not empty. Otherwise, it prints the default value 'yay'. This uses shell parameter expansion `${parameter:-word}`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/README.md#_snippet_4

LANGUAGE: Shell
CODE:
```
echo "${1:-yay}"
```

----------------------------------------

TITLE: Extracting IPv4 Addresses using Regex
DESCRIPTION: This regular expression pattern \b(?:\d{1,3}\.){3}\d{1,3}\b is designed to extract IPv4 addresses. It looks for word boundaries (\b) surrounding sequences of 1 to 3 digits followed by a literal dot (.), repeated exactly three times, followed by 1 to 3 digits, also surrounded by word boundaries. Note: The original text had a typo (\ .) which has been corrected for standard regex usage.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_27

LANGUAGE: Regex
CODE:
```
\b(?:\d{1,3}\.){3}\d{1,3}\b
```

----------------------------------------

TITLE: Verifying Kubernetes ReplicaSet Adoption with Kubectl Describe
DESCRIPTION: Uses 'kubectl describe rs web' to inspect the events and status of the recreated ReplicaSet. The output should show no new pod creation events, confirming that the ReplicaSet successfully adopted the existing pods that matched its selector labels.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/replicaset_02_solution.md#_snippet_5

LANGUAGE: bash
CODE:
```
kubectl describe rs web  # You should see there are no new events and if you list the pods with 'kubectl get po -f rs.yaml` you'll see they have the same names
```

----------------------------------------

TITLE: Creating Kubernetes Deployment (Bash)
DESCRIPTION: This command creates a Deployment named 'pluck' using the 'redis' image and configures it to run with 5 replicas.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_17

LANGUAGE: bash
CODE:
```
kubectl create deployment pluck --image=redis --replicas=5
```

----------------------------------------

TITLE: Checking Kubernetes Component Status - Shell
DESCRIPTION: Retrieves the status of core control plane components like etcd, controller-manager, and scheduler. This command is useful for diagnosing the health and operational status of the Kubernetes master node components.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_3

LANGUAGE: shell
CODE:
```
kubectl get componentstatus
```

----------------------------------------

TITLE: Listing Kubernetes Services (Bash)
DESCRIPTION: This command lists all services running in the current Kubernetes namespace.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_0

LANGUAGE: bash
CODE:
```
k get svc
```

----------------------------------------

TITLE: Reverting File Changes Git bash
DESCRIPTION: This command reverts the specified file (`/path/of/the/file`) to its state in the commit prior to the current HEAD. It is used to discard changes to a specific file, effectively rolling it back to a previous version without affecting other files or the commit history. Replace `/path/of/the/file` with the actual path to the file.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_17

LANGUAGE: bash
CODE:
```
git checkout HEAD~1 -- /path/of/the/file
```

----------------------------------------

TITLE: Referencing Input Variables in Resource (Terraform HCL)
DESCRIPTION: Defines a `libvirt_domain` resource named "vm1". It shows how to assign values to resource attributes (`memory`, `cpu`) by referencing input variables defined elsewhere using the `var.<VARIABLE_NAME>` syntax. This demonstrates variable consumption in a resource block.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_11

LANGUAGE: HCL
CODE:
```
resource "libvirt_domain" "vm1" {
   name = "vm1"
   memory = var.memory
   cpu = var.cpu
}
```

----------------------------------------

TITLE: Stopping and Removing Docker Container Shell
DESCRIPTION: Commands `docker container stop forest` and `docker container rm forest` are used sequentially to first gracefully stop and then permanently delete the 'forest' container.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/run_forest_run.md#_snippet_3

LANGUAGE: Shell
CODE:
```
docker container stop forest
docker container rm forest
```

----------------------------------------

TITLE: Checking Kubernetes Pod Restarts (Shell)
DESCRIPTION: Re-runs `kubectl get po web` after attempting to kill the main process. This step is crucial to observe if Kubernetes has detected the process failure and restarted the pod, which would be indicated by an increment in the 'RESTARTS' count.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/killing_containers.md#_snippet_4

LANGUAGE: Shell
CODE:
```
kubectl get po web
```

----------------------------------------

TITLE: Displaying Ansible Facts in Text - Ansible Jinja2
DESCRIPTION: Shows how to embed Ansible facts (ansible_managed, ansible_hostname, ansible_distribution) within a string using Jinja2 templating, typically in a file or message.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/ansible/README.md#_snippet_7

LANGUAGE: Jinja2
CODE:
```
# {{ ansible_managed }}
I'm {{ ansible_hostname }} and my operating system is {{ ansible_distribution }}
```

----------------------------------------

TITLE: Tainting a Node (kubectl, Shell)
DESCRIPTION: Applies a taint to a Kubernetes node, preventing pods that do not have a matching toleration from being scheduled on that node. This specific example uses the `NoSchedule` effect and a custom key-value pair. Requires the node name.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_148

LANGUAGE: Shell
CODE:
```
kubectl taint node node1 app=web:NoSchedule
```

----------------------------------------

TITLE: Verifying Container Port Binding (Podman)
DESCRIPTION: This command lists the port bindings for containers, specifically showing which host port is mapped to the container's internal port 8080 (-l 8080). The output will show the host address and port.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/containerized_web_server.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ podman port -l 8080 # show to which local port the port 8080 on the container, binds to
```

----------------------------------------

TITLE: Switching User Account (su, Bash)
DESCRIPTION: Explains the use of the su command to switch from the current user to another user account. Shows how to switch to the root user, emphasizing the hyphen (-) for a login shell.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_82

LANGUAGE: bash
CODE:
```
su
```

LANGUAGE: bash
CODE:
```
su -
```

----------------------------------------

TITLE: Creating Pod and Service with One Command - Kubectl
DESCRIPTION: This command creates both a single Pod and a Service to expose it. It runs a Pod named 'nginx' using the 'nginx' image, sets its restart policy to 'Never', opens container port 80, and automatically creates a Service to expose this port.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_102

LANGUAGE: Kubectl
CODE:
```
kubectl run nginx --image=nginx --restart=Never --port 80 --expose
```

----------------------------------------

TITLE: Creating Pod in Kubernetes Namespace - Shell
DESCRIPTION: Creates a new Pod named `test-prod` in the `prod` namespace using the `kubectl run` command. It specifies the `ubuntu` image and keeps the container running with a long `sleep` command to demonstrate cross-namespace networking.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_78

LANGUAGE: shell
CODE:
```
kubectl run test-prod -n prod --image ubuntu -- sleep 2000000000
```

----------------------------------------

TITLE: Listing Kubernetes Deployments (Shell)
DESCRIPTION: Retrieves and displays a list of all Deployment objects currently existing in the Kubernetes cluster. This command shows basic information like name, desired replicas, current replicas, and availability status.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_32

LANGUAGE: Shell
CODE:
```
kubectl get deployments
```

LANGUAGE: Shell
CODE:
```
kubectl get deploy
```

----------------------------------------

TITLE: Checking System Load Average (Bash)
DESCRIPTION: Run the `uptime` command to display the current system time, how long the system has been running, the number of users, and the system load averages over the past 1, 5, and 15 minutes. Load average indicates the number of processes waiting for CPU time.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_55

LANGUAGE: Bash
CODE:
```
uptime
```

----------------------------------------

TITLE: Labeling Kubernetes Node (Shell)
DESCRIPTION: Applies the label 'hw=max' to the Kubernetes node named 'some-node'. This is a prerequisite for using node selectors to target this specific node in subsequent pod deployments.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/exercises/node_selectors/solution.md#_snippet_0

LANGUAGE: Shell
CODE:
```
kubectl label nodes some-node hw=max
```

----------------------------------------

TITLE: Creating New User Account (useradd, Bash)
DESCRIPTION: Introduces the basic command-line utility for creating new user accounts on a Linux system. It's the standard tool for this task.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_78

LANGUAGE: bash
CODE:
```
useradd
```

LANGUAGE: bash
CODE:
```
useradd [options] Username
```

----------------------------------------

TITLE: Defining and Referencing Local Values (Terraform HCL)
DESCRIPTION: Defines a `locals` block to assign names (like `x`, `y`, `z`) to expressions or static values, including different data types. The surrounding text indicates that these locals can then be referenced elsewhere in the configuration using the `local.<NAME>` syntax.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_13

LANGUAGE: HCL
CODE:
```
locals {
  x = 2
  y = "o"
  z = 2.2
}
```

----------------------------------------

TITLE: Updating Instance Labels using gcloud
DESCRIPTION: This command updates the labels for a specific Compute Engine instance ("instance-1"), adding or modifying the label `app` with the value `db`. Existing labels are preserved unless explicitly removed.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/gcp/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
gcloud compute instances update instance-1 --update-labels app=db
```

----------------------------------------

TITLE: Stopping All Running Containers - Podman Shell
DESCRIPTION: Stops all currently running containers by obtaining their IDs using 'podman container ls -q' and passing them to the stop command.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/running_containers.md#_snippet_3

LANGUAGE: sh
CODE:
```
podman stop $(podman container ls -q)
```

----------------------------------------

TITLE: Creating File of Specific Size using truncate Shell
DESCRIPTION: The `truncate` command provides a straightforward way to create or resize a file to an exact size. The `-s` option specifies the desired size, here `2M` for 2 megabytes. If the file `new_file.txt` exists and is smaller, it's extended; if larger, it's cut down; if it doesn't exist, it's created.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_92

LANGUAGE: Shell
CODE:
```
truncate -s 2M new_file.txt
```

----------------------------------------

TITLE: Checking Suffix for Digits using Regex in Shell
DESCRIPTION: Uses a regular expression (`^[0-9]+$`) with the `[[...]]` compound command and the `=~` operator to check if the part of the variable `var` after the last dot (`${var//*.}`) consists solely of digits. The variable `var` is assumed contextually.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/README.md#_snippet_10

LANGUAGE: Shell
CODE:
```
regex='^[0-9]+$'
if [[ ${var//*.} =~ $regex ]]; then
...
```

----------------------------------------

TITLE: Creating Kubernetes Pod in Namespace - Shell
DESCRIPTION: Creates a new Pod named `kratos` in the `dev` namespace using the `redis` image, demonstrated using the `kubectl run` command (aliased as `k`).
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_88

LANGUAGE: shell
CODE:
```
k run kratos --image=redis -n dev
```

----------------------------------------

TITLE: Checking Taints on a Kubernetes Node
DESCRIPTION: Uses `kubectl describe node` combined with `grep` to filter output and quickly check if a specific node has any taints applied.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_135

LANGUAGE: Bash
CODE:
```
k describe no master | grep -i taints
```

----------------------------------------

TITLE: Checking Free Memory (Bash)
DESCRIPTION: Use the `free` command to display the total, used, and free amounts of physical memory and swap space in the system. Running it with `-h` provides human-readable output.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_59

LANGUAGE: Bash
CODE:
```
free
```

----------------------------------------

TITLE: Listing Service Accounts OpenShift Bash
DESCRIPTION: This command retrieves and displays a list of all service accounts defined within the current OpenShift project. Service accounts provide an identity for processes running in pods.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/openshift/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
oc get serviceaccounts
```

----------------------------------------

TITLE: Verifying Kubernetes ReplicaSet Creation
DESCRIPTION: Executes a kubectl command to list ReplicaSet resources in the current namespace, allowing verification that the 'web' ReplicaSet was successfully created with the desired number of replicas.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/replicaset_03_solution.md#_snippet_1

LANGUAGE: bash
CODE:
```
kubectl get rs
```

----------------------------------------

TITLE: Stopping and removing the original Podman container
DESCRIPTION: These commands stop the running 'nginx_container' gracefully and then remove it from the system. `podman ps -a` is included to verify that the container has been successfully removed.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/commit_image.md#_snippet_6

LANGUAGE: bash
CODE:
```
podman stop nginx_container
```

LANGUAGE: bash
CODE:
```
podman rm nginx_container
```

LANGUAGE: bash
CODE:
```
podman ps -a
```

----------------------------------------

TITLE: Running Playbook Serially on Hosts - Ansible YAML
DESCRIPTION: Shows how to use the serial keyword in an Ansible play to restrict execution to a specified number or percentage of hosts at a time before moving to the next batch, often used for rolling updates.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/ansible/README.md#_snippet_9

LANGUAGE: YAML
CODE:
```
- hosts: webservers
  serial: 1
  tasks:
    - name: ...
```

----------------------------------------

TITLE: Listing Network Interfaces using ip link (Shell)
DESCRIPTION: Shows the `ip link show` command, a standard Linux utility, used to display information about network interfaces available on the system, including their state and MAC addresses.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_67

LANGUAGE: Shell
CODE:
```
ip link show
```

----------------------------------------

TITLE: Running a new container from the custom image
DESCRIPTION: Starts a new container in detached mode (-d) from the 'nginx_mario' image, mapping host port 80 to container port 80. This container includes the custom 'index.html' file baked into the image.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/commit_image.md#_snippet_7

LANGUAGE: bash
CODE:
```
podman run -d -p 80:80 nginx_mario
```

----------------------------------------

TITLE: Specifying Custom Scheduler Name in Pod Spec (YAML)
DESCRIPTION: This YAML snippet shows how to instruct Kubernetes to use a specific scheduler for a pod by adding the `schedulerName` field to the pod's `spec`. The value must match the `--scheduler-name` argument used by the custom scheduler instance. This block is placed under the top-level `spec` key of a pod definition.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_48

LANGUAGE: YAML
CODE:
```
spec:
  schedulerName: some-custom-scheduler
```

----------------------------------------

TITLE: Building Application Image - Single-Stage Dockerfile
DESCRIPTION: This Dockerfile represents a traditional single-stage build process for an application. It installs all build tools and dependencies required for compiling the application directly into the final image, which leads to a larger image size containing unnecessary development components.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/multi_stage_builds.md#_snippet_0

LANGUAGE: dockerfile
CODE:
```
FROM nginx
RUN apt-get update \
 && apt-get install -y curl python build-essential \
 && apt-get install -y nodejs \
 && apt-get clean -y
RUN mkdir -p /my_app
ADD ./config/nginx/docker.conf /etc/nginx/nginx.conf
ADD ./config/nginx/k8s.conf /etc/nginx/nginx.conf.k8s
ADD app/ /my_cool_app
WORKDIR /my_cool_app
RUN npm install -g ember-cli
RUN npm install -g bower
RUN apt-get update && apt-get install -y git \
 && npm install \
 && bower install \
RUN ember build — environment=prod
CMD [ “/root/nginx-app.sh”, “nginx”, “-g”, “daemon off;” ]
```

----------------------------------------

TITLE: Deploying a Pod with Kubectl Run (Shell)
DESCRIPTION: Explains how to quickly deploy a single Pod using the `kubectl run` command with a specified image. Note that this method is less common than using Deployments or YAML definitions for production workloads.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_6

LANGUAGE: Shell
CODE:
```
kubectl run my-pod --image=nginx:alpine
```

----------------------------------------

TITLE: Converting Integer to String Go
DESCRIPTION: This Go snippet shows how casting an integer `x` to `string(x)` converts the integer as a Unicode code point (101 -> 'e') rather than its decimal string representation. To convert an integer to its decimal string value, the `strconv.Itoa()` function should be used. This highlights the difference between character code conversion and numerical string conversion.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_2

LANGUAGE: go
CODE:
```
package main

import "fmt"

func main() {
    var x int = 101
    var y string
    y = string(x)
    fmt.Println(y)
}
```

----------------------------------------

TITLE: Monitoring File Opens in Real-Time (opensnoop)
DESCRIPTION: Introduces the opensnoop command, a utility (often based on BPF) that traces file open operations across the system in real-time. It's useful for understanding which processes are accessing specific files.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_31

LANGUAGE: bash
CODE:
```
opensnoop
```

----------------------------------------

TITLE: Stopping Specific Container - Podman Shell
DESCRIPTION: Stops a container identified by its ID or name. Replace '[container id/name]' with the actual identifier of the container to stop.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/running_containers.md#_snippet_4

LANGUAGE: sh
CODE:
```
podman stop [container id/name]
```

----------------------------------------

TITLE: Listing Kubernetes Endpoints using Kubectl
DESCRIPTION: This command lists the Endpoints object associated with a specific Kubernetes Service or EndpointSlice. Endpoints objects contain the IP addresses and ports of the Pods that match the service's selector, allowing direct inspection of the service's backend.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_53

LANGUAGE: kubectl
CODE:
```
kubectl get ep <name>
```

----------------------------------------

TITLE: Checking ReplicaSet Container Image (Bash)
DESCRIPTION: This command describes a specific ReplicaSet and filters the output to find the container image used.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_5

LANGUAGE: bash
CODE:
```
k describe rs repli | grep -i image
```

----------------------------------------

TITLE: Defining Argo Rollout Resource - YAML
DESCRIPTION: This YAML manifest defines an Argo Rollout resource named `some-app`. It configures a Blue/Green deployment strategy with 3 replicas and explicitly disables auto-promotion, requiring manual promotion steps. It selects pods based on the `app: some-web-app` label and defines the pod template using the `some/registry/and/image:v1.0` image.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/blue_green_rollout/solution.md#_snippet_1

LANGUAGE: YAML
CODE:
```
---
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: some-app
spec:
  replicas: 3
  strategy:
    blueGreen:     
      autoPromotionEnabled: false
  selector:
    matchLabels:
      app: some-web-app
  template:
    metadata:
      labels:
        app: some-web-app
    spec:
      containers:
      - name: web-app
        image: some/registry/and/image:v1.0
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
```

----------------------------------------

TITLE: Listing Kubernetes Ingress Resources (kubectl)
DESCRIPTION: This command-line snippet uses the `kubectl` tool to retrieve and display a list of all Ingress resources deployed within the currently active Kubernetes namespace. It is a fundamental command for monitoring and verifying ingress deployments.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_58

LANGUAGE: Shell
CODE:
```
kubectl get ingress
```

----------------------------------------

TITLE: Checking System Health (sar, iostat)
DESCRIPTION: Lists common command-line utilities used for reporting on system activity and performance over time (sar) and specifically monitoring storage I/O statistics (iostat). These are helpful for diagnosing performance slowdowns.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_33

LANGUAGE: bash
CODE:
```
sar
```

LANGUAGE: bash
CODE:
```
iostat
```

----------------------------------------

TITLE: Deleting Kubernetes ReplicaSet without Pods (Shell)
DESCRIPTION: This command deletes a Kubernetes ReplicaSet resource but specifically prevents the deletion of the pods it currently manages. The `--cascade=false` flag instructs Kubernetes not to clean up dependent objects, leaving the pods running.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_63

LANGUAGE: Shell
CODE:
```
kubectl delete -f rs.yaml --cascade=false
```

----------------------------------------

TITLE: Watching Argo Rollout Status - Kubernetes CLI
DESCRIPTION: This command provides detailed information about a specific Argo Rollout resource (`some-app`) and continuously watches its status for changes. It's essential for monitoring the progress of the Blue/Green deployment, observing phase transitions, new pod creation, traffic switching, and old pod termination.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/blue_green_rollout/solution.md#_snippet_4

LANGUAGE: Bash
CODE:
```
kubectl argo rollouts get rollout some-app --watch
```

----------------------------------------

TITLE: Changing Directory to Home (Shell)
DESCRIPTION: Shows the `cd` command used with the tilde (`~`) shortcut, which represents the current user's home directory. This command changes the current working directory to the user's home directory. Requires a shell environment.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_7

LANGUAGE: shell
CODE:
```
cd ~
```

----------------------------------------

TITLE: Running Docker Container Always Policy Longer Sleep Shell
DESCRIPTION: Recreates and runs the 'forest' container with the `--restart always` policy and a `sleep 600` command to make it run for a longer duration, followed by `docker container ls` to confirm it is running.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/run_forest_run.md#_snippet_4

LANGUAGE: Shell
CODE:
```
docker run --restart always --name forest alpine sleep 600
```

LANGUAGE: Shell
CODE:
```
docker container ls
```

----------------------------------------

TITLE: Inspecting Pod Environment Variables for Service Info
DESCRIPTION: This command executes the `env` command inside a specified Pod to list its environment variables. Kubernetes injects environment variables containing the host and port information for services accessible from within the Pod, which can be used to discover service connection details.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_54

LANGUAGE: kubectl
CODE:
```
kubectl exec <POD_NAME> -- env
```

----------------------------------------

TITLE: Recreating Kubernetes ReplicaSet from YAML with Kubectl Apply
DESCRIPTION: Applies the same ReplicaSet YAML definition again using 'kubectl apply -f rs.yaml'. Because the pods with matching labels ('type: web') already exist due to the previous 'orphan' deletion, the ReplicaSet will adopt these existing pods to meet its desired replica count instead of creating new ones.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/replicaset_02_solution.md#_snippet_4

LANGUAGE: bash
CODE:
```
kubectl apply -f rs.yaml
```

----------------------------------------

TITLE: Listing Kubernetes Service Accounts | Bash
DESCRIPTION: A 'kubectl' command used to list all Service Account resources in the current Kubernetes namespace. Service accounts provide an identity for processes running in Pods.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_116

LANGUAGE: bash
CODE:
```
kubectl get serviceaccounts
```

----------------------------------------

TITLE: Viewing Image History Docker Shell
DESCRIPTION: Shows the history of a Docker image, listing the commands or instructions that were used to build it layer by layer. This helps understand how the image was created and changes over time. Replace '<name>' with the image name or ID.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_15

LANGUAGE: shell
CODE:
```
docker history <name>
```

----------------------------------------

TITLE: Listing Resources in Terraform State Shell
DESCRIPTION: The `terraform state list` command provides a simple list of all resources tracked in the current state file. This is useful for quickly seeing what resources Terraform is managing.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_23

LANGUAGE: Shell
CODE:
```
terraform state list
```

----------------------------------------

TITLE: Getting Static Pods Directory from Kubelet Config Bash
DESCRIPTION: Extracts the value associated with the `staticPodPath` key from the kubelet configuration file, revealing the specific directory kubelet monitors for static pod manifest files. Requires knowing the path to the kubelet config and read permission.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_15

LANGUAGE: bash
CODE:
```
grep staticPodPath /var/lib/kubelet/config.yaml
```

----------------------------------------

TITLE: Getting Specific Argo Rollout Details (Shell)
DESCRIPTION: Command to retrieve detailed information about a specific Argo Rollout resource named `SOME-APP`. Provides status, history, and configuration details. Requires kubectl and the Argo Rollouts kubectl plugin, and the name of the target rollout.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/README.md#_snippet_10

LANGUAGE: shell
CODE:
```
kubectl argo rollouts get rollout SOME-APP
```

----------------------------------------

TITLE: Identifying Implicit Type Conversion Error Go
DESCRIPTION: This snippet demonstrates an invalid implicit type conversion from `float32` to `int` in Go. Go requires explicit type casting for conversions between incompatible types to prevent data loss or unexpected behavior. The fix involves explicitly converting `x` to `int` using `y = int(x)`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_1

LANGUAGE: go
CODE:
```
func main() {
    var x float32 = 13.5
    var y int
    y = x
}
```

----------------------------------------

TITLE: Editing Kubernetes ReplicaSet Definition (Shell)
DESCRIPTION: This command uses 'kubectl edit' (aliased 'k') to open the live configuration of the ReplicaSet named 'rori' in your default text editor. You can modify fields like the image or replica count and save the changes, which are then applied to the running resource.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_74

LANGUAGE: Shell
CODE:
```
k edis rs rori
```

----------------------------------------

TITLE: Listing AWS EC2 Security Groups (AWS CLI)
DESCRIPTION: Describes all security groups in the current AWS region associated with your account. This requires the AWS CLI to be installed and configured with appropriate IAM permissions to list security groups.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/security_groups/solution.md#_snippet_0

LANGUAGE: bash
CODE:
```
aws ec2 describe-security-groups
```

----------------------------------------

TITLE: Listing Kubernetes DaemonSets (Shell)
DESCRIPTION: This command lists all DaemonSet resources in the current Kubernetes namespace. DaemonSets ensure that a copy of a pod runs on all (or a subset of) nodes in the cluster, commonly used for cluster-wide logging, monitoring, or storage daemons.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_77

LANGUAGE: Shell
CODE:
```
kubectl get ds
```

----------------------------------------

TITLE: Creating Kubernetes Deployment Imperatively (Shell)
DESCRIPTION: Creates a new Kubernetes Deployment named "my-first-deployment" using the "nginx:alpine" container image. This is an imperative way to create a deployment directly from the command line.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_30

LANGUAGE: Shell
CODE:
```
kubectl create deployment my-first-deployment --image=nginx:alpine
```

----------------------------------------

TITLE: Listing Image Tags (Podman)
DESCRIPTION: Shows how to search for and list all available tags for a specific container image in configured registries using Podman. Useful for finding different versions of an image.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_10

LANGUAGE: Shell
CODE:
```
podman search --list-tags IMAGE_NAME
```

----------------------------------------

TITLE: Renaming AWS S3 Bucket Shell Script Process
DESCRIPTION: This shell script provides the sequence of commands to rename an S3 bucket. It involves creating a new bucket using AWS CLI, syncing data from the old to the new bucket, updating Terraform's state to track the new bucket (via remove/import or move), and finally deleting the old bucket using AWS CLI.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/exercises/s3_bucket_rename/solution.md#_snippet_1

LANGUAGE: sh
CODE:
```
# A bucket name is immutable in AWS so we'll have to create a new bucket
aws s3 mb s3://some-new-bucket-123

# Sync old bucket to new bucket
aws s3 sync s3://some-old-bucket s3://some-new-bucket-123

# Option 1 (remove and import)

## Remove the old bucket from Terraform's state
terraform state rm aws_s3_bucket.some_bucket

## Import new bucket to Terraform's state
terraform import aws_s3_bucket.some_bucket some-new-bucket-123

: '
aws_s3_bucket.some_bucket: Refreshing state... [id=some-new-bucket-123]

Import successful!
The resources that were imported are shown above. These resources are now in
your Terraform state and will henceforth be managed by Terraform.
'

# Option 2 (move)

## Move the old bucket from Terraform's state to the new one
terraform state mv aws_s3_bucket.some_bucket some-new-bucket-123

: '
Move "aws_s3_bucket.some_bucket" to "aws_s3_bucket.some-new-bucket-123"
Successfully moved 1 object(s).
'

# Modify Terraform file

# Modify the Terraform definition to include the new name
# resource "aws_s3_bucket" "some_bucket" {
#    bucket = "some-new-bucket-123"
# }

# Remove old bucket
aws s3 rm s3://some-old-bucket --recursive
aws s3 rb s3://some-old-bucket
```

----------------------------------------

TITLE: Showing Current Context OpenShift Bash
DESCRIPTION: Use this command to display the current OpenShift context configured for the `oc` CLI. The context includes information about the cluster, user, and project currently being targeted.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/openshift/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
oc whoami --show-context
```

----------------------------------------

TITLE: Defining Variable and Redirecting Output - Bash
DESCRIPTION: This snippet defines a shell variable `HW_STR` holding the string "Hello World". It then uses the `echo` command to print the variable's value and redirects the standard output (`>`) to a file named `amazing_output.txt`, effectively writing "Hello World" into that file.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/solutions/hello_world.md#_snippet_0

LANGUAGE: Bash
CODE:
```
#!/usr/bin/env bash

HW_STR="Hello World"
echo $HW_STR > amazing_output.txt
```

----------------------------------------

TITLE: Verify IAM Read Access using AWS CLI
DESCRIPTION: This command is used to list the IAM users in your AWS account using the AWS Command Line Interface. It serves as a verification step to confirm that the EC2 instance, after having the IAM role attached, now possesses the necessary permissions (e.g., `iam:ListUsers`) to read IAM information.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/ec2_iam_roles/solution.md#_snippet_0

LANGUAGE: CLI
CODE:
```
aws iam list-users
```

----------------------------------------

TITLE: Killing Main Process in Kubernetes Pod (Shell)
DESCRIPTION: Uses `kubectl exec` to run the `kill 1` command inside the 'web' pod. This attempts to terminate the process with PID 1, which is commonly the main application process managed by the container runtime and Kubernetes.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/killing_containers.md#_snippet_3

LANGUAGE: Shell
CODE:
```
kubectl exec web -- kill 1
```

----------------------------------------

TITLE: Comparing Command Outputs using Process Substitution in Bash
DESCRIPTION: Uses process substitution (`<(...)`) to pass the output of the `ls /tmp` and `ls /var/tmp` commands as temporary files to the `diff` command. This allows `diff` to compare the directory listings.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/README.md#_snippet_18

LANGUAGE: Shell
CODE:
```
diff <(ls /tmp) <(ls /var/tmp)
```

----------------------------------------

TITLE: Displaying Kernel Information (Bash)
DESCRIPTION: Explains how to find the kernel version and other system information using the `uname` command. Shows the `-a` flag for displaying all available system information.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_35

LANGUAGE: Bash
CODE:
```
uname -a
```

----------------------------------------

TITLE: Showing Current Terraform Workspace Shell
DESCRIPTION: The `terraform workspace show` command displays the name of the currently active workspace. This is useful for confirming which state file Terraform is interacting with.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_26

LANGUAGE: Shell
CODE:
```
terraform workspace show
```

----------------------------------------

TITLE: Redirecting Stdout to Stderr (Shell)
DESCRIPTION: Shows how to redirect standard output (file descriptor 1) to standard error (file descriptor 2) using `1>&2`. In this example, the standard output of the command is directed to where stderr usually goes. The file `die_hard` is not created.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_19

LANGUAGE: shell
CODE:
```
yippiekaiyay 1>&2 die_hard
```

----------------------------------------

TITLE: Checking Docker Installation Status - Shell
DESCRIPTION: This snippet provides commands for Fedora/RHEL/CentOS systems to verify if Docker is installed using `rpm -qa` and to check the status of the Docker service using `systemctl status docker`. It ensures the user has Docker installed and running before proceeding with the exercise.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/image_layers.md#_snippet_0

LANGUAGE: Shell
CODE:
```
# Fedora/RHEL/CentOS
rpm -qa | grep docker
systemctl status docker
```

----------------------------------------

TITLE: Listing Cloud Storage Buckets using gsutil
DESCRIPTION: This command uses the `gsutil` tool to list all accessible Cloud Storage buckets. It provides a way to see the top-level containers in Cloud Storage.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/gcp/README.md#_snippet_5

LANGUAGE: Shell
CODE:
```
gsutil ls
```

----------------------------------------

TITLE: Encoding Data with Base64 (Shell)
DESCRIPTION: Provides a simple shell command pipeline using `echo` and `base64` to encode a string. The `-n` flag prevents `echo` from adding a newline, which would otherwise be included in the encoded output.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_65

LANGUAGE: Shell
CODE:
```
echo -n "some password" | base64
```

----------------------------------------

TITLE: Listing All Projects OpenShift Bash
DESCRIPTION: Use this command to list all projects (which are OpenShift's equivalent of Kubernetes namespaces with added features) that the current user has access to. The output includes the project name and its current status.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/openshift/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
oc get projects
```

----------------------------------------

TITLE: Listing Directory Contents (LS) - Shell
DESCRIPTION: The standard command to list files and directories within the current working directory or a specified path. It's one of the most commonly used shell commands for basic filesystem navigation.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_99

LANGUAGE: Shell
CODE:
```
ls
```

----------------------------------------

TITLE: Updating Image for Argo Rollout - Argo Rollouts CLI
DESCRIPTION: This command initiates a new rollout for the specified Rollout resource ('SOME-APP') by updating the image of the container named 'web-app' to a new version ('some/registry/and/image:v2.0'). This triggers the defined canary strategy.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/canary_rollout/solution.md#_snippet_3

LANGUAGE: shell
CODE:
```
kubectl argo rollouts set image SOME-APP web-app=some/registry/and/image:v2.0
```

----------------------------------------

TITLE: Searching for Helm Charts Shell
DESCRIPTION: Demonstrates the command to search for available Helm charts in the Helm Hub repository. Replace `[some_keyword]` with the desired term to find charts related to a specific application or technology.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_121

LANGUAGE: Shell
CODE:
```
helm search hub [some_keyword]
```

----------------------------------------

TITLE: Deleting Kubernetes ReplicaSet with kubectl/YAML
DESCRIPTION: Removes the previously created ReplicaSet by executing `kubectl delete -f rs.yaml`. This command reads the resource definition from the specified file and cleans up the corresponding Kubernetes object and any associated Pods. Requires `kubectl` and the `rs.yaml` file.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/replicaset_01_solution.md#_snippet_3

LANGUAGE: bash
CODE:
```
kubectl delete -f rs.yaml
```

----------------------------------------

TITLE: Watching Argo Rollout Status - Argo Rollouts CLI
DESCRIPTION: This command retrieves the status of the specified Rollout resource ('some-app') and continuously watches for updates. It provides detailed information about the progress of the rollout, including current step, weight, and replica counts, which is useful for monitoring canary deployments.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/canary_rollout/solution.md#_snippet_4

LANGUAGE: shell
CODE:
```
kubectl argo rollouts get rollout some-app --watch
```

----------------------------------------

TITLE: Throttling Task Execution - Ansible YAML
DESCRIPTION: Illustrates using the throttle keyword on a specific task within a play to limit the number of hosts executing that task concurrently, useful for resource-intensive operations or rate-limited APIs.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/ansible/README.md#_snippet_10

LANGUAGE: YAML
CODE:
```
tasks:
- command: /path/to/cpu_intensive_command
  throttle: 1
```

----------------------------------------

TITLE: Defining Ansible Inventory Group (INI)
DESCRIPTION: This snippet from an Ansible inventory file defines a host group named 'some_remote_host'. It lists 'some.remoted.host.com' as the single host belonging to this group. Ansible playbooks reference these groups to determine which hosts to run tasks against.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/ansible/solutions/my_first_playbook.md#_snippet_1

LANGUAGE: INI
CODE:
```
[some_remote_host]
some.remoted.host.com
```

----------------------------------------

TITLE: Listing Block Devices (lsblk, Bash)
DESCRIPTION: Explains the lsblk command used to list information about all available block devices (like hard drives, SSDs, partitions) on the system in a tree-like format.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_88

LANGUAGE: bash
CODE:
```
lsblk
```

----------------------------------------

TITLE: Running Stress Test for AWS ASG Scaling (Shell)
DESCRIPTION: This command simulates high CPU load on a Linux instance for a specified duration to test if an AWS Auto Scaling Group (ASG) triggers a scale-out event based on a CPU utilization metric. It requires the 'stress' package to be installed on the instance. The example command targets 100 CPU cores for 20 seconds.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
sudo stress --cpu 100 --timeout 20
```

----------------------------------------

TITLE: Incorrect Kubernetes Deployment Kind (YAML Example)
DESCRIPTION: An example Kubernetes Deployment manifest intentionally containing an error where the `kind` field is incorrectly set to "Deploy" instead of "Deployment". This manifest is provided to illustrate a common typo and its expected correction.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_36

LANGUAGE: YAML
CODE:
```
apiVersion: apps/v1
kind: Deploy
metadata:
  creationTimestamp: null
  labels:
    app: dep
  name: dep
spec:
  replicas: 3
  selector:
    matchLabels:
      app: dep
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: dep
    spec:
      containers:
      - image: redis
        name: redis
        resources: {}
status: {}
```

----------------------------------------

TITLE: Running Pod with kubectl
DESCRIPTION: Creates a simple pod named `some-pod` using the `redis` Docker image. This pod might fail to schedule or run on the tainted node if it doesn't have a toleration matching the node's taint.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/exercises/taints_101/solution.md#_snippet_2

LANGUAGE: shell
CODE:
```
kubectl run some-pod --image=redis
```

----------------------------------------

TITLE: Listing Namespaced Kubernetes Resources - Kubectl
DESCRIPTION: This command lists all Kubernetes API resource types that are bound to a specific namespace. It helps identify resources like Pods, Deployments, Services, etc., that operate within the scope of a namespace.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_95

LANGUAGE: Kubectl
CODE:
```
kubectl api-resources --namespaced=true
```

----------------------------------------

TITLE: Bash Ternary Operator Equivalent
DESCRIPTION: This Bash snippet demonstrates a common way to replicate the ternary operator functionality (`condition ? value_if_true : value_if_false`). It uses the `&&` (AND) and `||` (OR) operators to conditionally assign a value to the variable `b` based on whether the variable `a` equals 1.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/tests/testcases/testcase2.md#_snippet_1

LANGUAGE: Bash
CODE:
```
[[ $a = 1 ]] && b="yes, equal" || b="nope"
```

----------------------------------------

TITLE: Creating Empty File (Bash)
DESCRIPTION: Create a new empty file using the `touch` command followed by the desired filename. If the file already exists, `touch` will update its access and modification timestamps.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_51

LANGUAGE: Bash
CODE:
```
touch new_file.txt
```

----------------------------------------

TITLE: Handling Command Line Arguments - Bash
DESCRIPTION: This bash script defines a `main` function that checks the number of command-line arguments (`$#`). It uses a `case` statement: if zero arguments are provided, it prints a usage message; if one argument is provided, it prints 'Got it' followed by the argument value (`$1`); for any other number of arguments, it exits with an error status.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/solutions/num_of_args.md#_snippet_0

LANGUAGE: bash
CODE:
```
#!/usr/bin/env bash

set -eu

main() {
  case $# in
    0) printf "%s" "Usage: ./<program name> <argument>"; return 1 ;;
    1) printf "%s" "Got it: $1"; return 0 ;;
    *) return 1 ;;
  esac
}

main "$@"
```

----------------------------------------

TITLE: Modifying Kubernetes ReplicaSet (Bash)
DESCRIPTION: This command opens an editor to modify the definition of a specific ReplicaSet named 'rori', allowing changes like updating the image.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_8

LANGUAGE: bash
CODE:
```
k edis rs rori
```

----------------------------------------

TITLE: Checking Mounted Disks (Bash)
DESCRIPTION: Execute the `mount` command to display a list of currently mounted filesystems and their mount points. This command provides an overview of the filesystem hierarchy.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_48

LANGUAGE: Bash
CODE:
```
mount
```

----------------------------------------

TITLE: Creating Pod in Kubernetes Namespace - Shell
DESCRIPTION: Creates a new Pod named `test-dev` in the `dev` namespace using the `kubectl run` command. It specifies the `ubuntu` image and keeps the container running with a long `sleep` command to demonstrate cross-namespace networking alongside a pod in another namespace.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_79

LANGUAGE: shell
CODE:
```
kubectl run test-dev -n dev --image ubuntu -- sleep 2000000000
```

----------------------------------------

TITLE: Executing Python Application Tests
DESCRIPTION: Runs the automated tests defined in the `tests.py` file using the Python interpreter. Requires `tests.py` to be present and any necessary test dependencies installed.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/flask_container_ci/README.md#_snippet_7

LANGUAGE: Bash
CODE:
```
python tests.py
```

----------------------------------------

TITLE: Verifying Local vs. Directory User Source (Bash)
DESCRIPTION: Shows how to check if a user is defined locally in /etc/passwd using grep and how to query multiple name services (including LDAP) using getent. Useful for debugging authentication issues when users might come from directory services.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_85

LANGUAGE: bash
CODE:
```
grep $(whoami) /etc/passwd
```

LANGUAGE: bash
CODE:
```
getent passwd
```

----------------------------------------

TITLE: Illustrating fork() Process Creation in C
DESCRIPTION: This C code snippet demonstrates how the `fork()` system call creates new processes. Each call to `fork()` duplicates the calling process, and both the parent and the newly created child process continue execution from the point after the `fork()` call. The snippet calls `fork()` twice before printing 'yay', resulting in a specific number of processes and prints.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/os/fork_102.md#_snippet_0

LANGUAGE: C
CODE:
```
#include<stdio.h>
#include <unistd.h> 

int main()
{
  fork();
  fork();
  printf("\nyay\n");
  return 0;
}
```

----------------------------------------

TITLE: Checking Factors in Bash Script
DESCRIPTION: This bash script checks if the first command-line argument (assumed to be a number) is divisible by 2 and/or 3. It prints 'one factor' if divisible by 2, appends '...actually two!' if also divisible by 3, and prints the original number if neither 2 nor 3 are factors. It requires a single numerical argument.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/solutions/factors.md#_snippet_0

LANGUAGE: bash
CODE:
```
#!/usr/bin/env bash

(( $1 % 2 )) || res="one factor"
(( $1 % 3 )) || res+="...actually two!"

echo ${res:-$1}
```

----------------------------------------

TITLE: Monitoring System Resources (dstat)
DESCRIPTION: Utilizes the dstat command with the -t flag to display real-time system resource statistics, including CPU, disk I/O, network, and memory. It's a versatile tool for quickly assessing system performance and identifying potential bottlenecks.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_29

LANGUAGE: bash
CODE:
```
dstat -t
```

----------------------------------------

TITLE: Defining Argo Rollout Resource with Canary Strategy - YAML
DESCRIPTION: This YAML manifest defines a Kubernetes Rollout resource managed by Argo Rollouts. It specifies a canary deployment strategy with 6 replicas, using 'k8s-service-stable' and 'k8s-service-canary' for traffic splitting via Ambassador, and defines weighted steps (30%, 60%, 100%) interspersed with pauses for manual verification.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/canary_rollout/solution.md#_snippet_1

LANGUAGE: yaml
CODE:
```
---
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: some-app
spec:
  replicas: 6
  strategy:
    canary:
      stableService: k8s-service-stable
      canaryService: k8s-service-canary
      trafficRouting:
        ambassador:
          mappings:
            - k8s-mapping
      steps:
      - setWeight: 30
      - pause: {}
      - setWeight: 60
      - pause: {}
      - setWeight: 100
      - pause: {}   
  selector:
    matchLabels:
      app: some-web-app
  template:
    metadata:
      labels:
        app: some-web-app
    spec:
      containers:
      - name: web-app
        image: some/registry/and/image:v1.0
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
```

----------------------------------------

TITLE: Listing Managed Kubernetes Clusters via ArgoCD CLI Shell
DESCRIPTION: This command uses the `argocd` CLI to list all the Kubernetes clusters that the current ArgoCD instance is configured to manage. This includes the cluster where ArgoCD is installed (if applicable) and any external clusters that have been added.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/README.md#_snippet_6

LANGUAGE: Shell
CODE:
```
argocd cluster list
```

----------------------------------------

TITLE: Removing All Containers (Running/Stopped) - Podman Shell
DESCRIPTION: Removes all containers on the host, including stopped ones, by getting all container IDs using 'podman container ls -q -a' and passing them to the remove command. Running containers may require stopping first or using a force flag.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/running_containers.md#_snippet_5

LANGUAGE: sh
CODE:
```
podman rm $(podman container ls -q -a)
```

----------------------------------------

TITLE: Applying a Taint to a Kubernetes Node
DESCRIPTION: Uses the `kubectl taint node` command to add a taint to a specified node. The command includes the node name, key-value pair for the taint, and the effect (e.g., `NoSchedule`).
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_136

LANGUAGE: Bash
CODE:
```
k taint node minikube app=web:NoSchedule
```

----------------------------------------

TITLE: Monitoring Process Statistics (Bash)
DESCRIPTION: Execute `pidstat` to report statistics for processes and threads, including CPU, memory, I/O, and context switching details. It requires the `sysstat` package and allows filtering by process ID or other criteria.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_57

LANGUAGE: Bash
CODE:
```
pidstat
```

----------------------------------------

TITLE: Verifying Orphaned Pods After ReplicaSet Deletion with Kubectl Get
DESCRIPTION: Uses 'kubectl get rs' to confirm the ReplicaSet no longer exists. Uses 'kubectl get po' to verify that the pods previously managed by the ReplicaSet are still running, demonstrating that they were not deleted along with the ReplicaSet.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/replicaset_02_solution.md#_snippet_3

LANGUAGE: bash
CODE:
```
kubectl get rs # no replicas
```

LANGUAGE: bash
CODE:
```
kubectl get po # Pods still running
```

----------------------------------------

TITLE: Illustrating Fact Gathering Failure in Ansible
DESCRIPTION: An Ansible playbook example intended to demonstrate how disabling fact gathering ('gather_facts: no') prevents access to gathered facts like 'ansible_hostname', resulting in a variable undefined error.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/ansible/README.md#_snippet_3

LANGUAGE: yaml
CODE:
```
---
- name: Print information about my host
  hosts: localhost
  gather_facts: 'no'
  tasks:
      - name: Print hostname
        debug:
            msg: "It's me, {{ ansible_hostname }}"
```

----------------------------------------

TITLE: Understanding iota Behavior in Constant Declarations Go
DESCRIPTION: This Go snippet demonstrates the behavior of the `iota` identifier in constant declarations. `iota` increments for each constant specification in a block, starting from 0. Crucially, `iota` resets to 0 whenever a new `const` block is encountered. The output shows this reset across two different `const` blocks.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_4

LANGUAGE: go
CODE:
```
package main

import "fmt"

const (
	x = iota
	y = iota
)
const z = iota

func main() {
	fmt.Printf("%v\n", x)
	fmt.Printf("%v\n", y)
	fmt.Printf("%v\n", z)
}
```

----------------------------------------

TITLE: Running Flask Application Locally (Shell)
DESCRIPTION: Sets the FLASK_APP environment variable to specify the main application file and then executes the Flask development server for local testing.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/flask_container_ci2/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
export FLASK_APP=app/main.py
```

LANGUAGE: Shell
CODE:
```
flask run
```

----------------------------------------

TITLE: Counting Kubernetes Namespaces - Shell
DESCRIPTION: Counts the total number of namespaces in the Kubernetes cluster. It lists namespaces using `kubectl get ns` without outputting headers (`--no-headers`) and then pipes the result to `wc -l` to count lines.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_85

LANGUAGE: shell
CODE:
```
k get ns --no-headers | wc -l
```

----------------------------------------

TITLE: Finding Triplets Summing to Zero using Two Pointers - Python
DESCRIPTION: This Python function finds all unique triplets within a given list of integers that sum up to zero. It first sorts the input list, then iterates through each element. For each element, it uses a two-pointer approach on the remaining sublist to find two other elements that sum to the negative of the current element. The function yields each triplet found.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/software_development/README.md#_snippet_1

LANGUAGE: python
CODE:
```
def find_triplets_sum_to_zero(li):
    li = sorted(li)
    for i, val in enumerate(li):
        low, up = 0, len(li)-1
        while low < i < up:
            tmp = var + li[low] + li[up]
            if tmp > 0:
                up -= 1
            elif tmp < 0:
                low += 1
            else:
                yield li[low], val, li[up]
                low += 1
                up -= 1
```

----------------------------------------

TITLE: Listing Supported API Resources OpenShift Bash
DESCRIPTION: This command lists all the API resource types supported by the OpenShift cluster. It helps users understand the available resource objects they can interact with using the `oc` CLI.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/openshift/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
oc api-resources
```

----------------------------------------

TITLE: Checking Filesystem Types (Bash)
DESCRIPTION: Use the `df` command with the `-T` option to display disk space usage along with the filesystem type for each mounted partition. This helps identify which filesystem (e.g., ext4, XFS) is being used.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_50

LANGUAGE: Bash
CODE:
```
df -T
```

----------------------------------------

TITLE: Getting Detailed ArgoCD Application Info via CLI Shell
DESCRIPTION: This command uses the `argocd` CLI to retrieve and display detailed information about the application named "some-app". The output typically includes synchronization status, health status, resource details, events, and configuration parameters.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/README.md#_snippet_4

LANGUAGE: Shell
CODE:
```
argocd app get some-app
```

----------------------------------------

TITLE: Creating File with Specific Size (Bash)
DESCRIPTION: Use the `truncate` command with the `-s` option to create a file of a specific size or change the size of an existing file. Replace `<size>` with the desired size, potentially using units like K, M, or G.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_53

LANGUAGE: Bash
CODE:
```
truncate -s <size> new_file.txt
```

----------------------------------------

TITLE: Scheduling Pod on Specific Node (YAML)
DESCRIPTION: Adds the `nodeName` field to a Pod specification YAML to explicitly schedule the Pod onto a node with the specified name. This is a simple way to force scheduling.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_129

LANGUAGE: YAML
CODE:
```
spec:
  nodeName: node1
```

----------------------------------------

TITLE: Restarting Docker Service Shell (Unless-Stopped Test)
DESCRIPTION: Restarts the Docker daemon using `sudo systemctl restart docker` after the 'forest' container was stopped with the `unless-stopped` policy, used to observe if the container starts up or remains stopped.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/run_forest_run.md#_snippet_8

LANGUAGE: Shell
CODE:
```
sudo systemctl restart docker
```

----------------------------------------

TITLE: Verifying Kubernetes ReplicaSet Deletion with kubectl
DESCRIPTION: Uses `kubectl get rs` or `kubectl get -f rs.yaml` again to confirm that the ReplicaSet has been successfully deleted from the cluster. The command output should show that the resource is no longer present. Requires `kubectl` and access to a Kubernetes cluster.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/replicaset_01_solution.md#_snippet_4

LANGUAGE: bash
CODE:
```
kubectl get rs
# OR a more specific way: kubectl get -f rs.yaml
```

----------------------------------------

TITLE: Listing Argo Rollouts - Kubernetes CLI
DESCRIPTION: This command uses the `kubectl argo rollouts` plugin to list all active Argo Rollout resources within the current or specified namespace. It's useful for verifying that a rollout resource has been successfully applied and to get a summary of its status.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/exercises/blue_green_rollout/solution.md#_snippet_2

LANGUAGE: Bash
CODE:
```
kubectl argo rollouts list rollouts
```

----------------------------------------

TITLE: Copying custom index.html into Podman container
DESCRIPTION: Copies the locally created 'index.html' file into the running 'nginx_container', specifically replacing the default index file at '/usr/share/nginx/html/index.html'. Requires the container to be running.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/commit_image.md#_snippet_3

LANGUAGE: bash
CODE:
```
podman cp index.html nginx_container:/usr/share/nginx/html/index.html
```

----------------------------------------

TITLE: Removing Empty Files using Bash Script
DESCRIPTION: This Bash script iterates through items in the current directory, checks if they have a size greater than zero using the `-s` test, and removes them recursively and forcefully (`rm -rf`) if they are empty. Note that this script only processes the current directory and does not handle nested directories as mentioned in the document's objective.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/solutions/empty_files.md#_snippet_0

LANGUAGE: bash
CODE:
```
#! /bin/bash
for x in *
do
    if [ -s $x ]
    then
        continue
    else
        rm -rf $x
    fi
done
```

----------------------------------------

TITLE: Defining Custom Kubernetes Scheduler Pod Spec (YAML)
DESCRIPTION: This YAML snippet shows a partial container definition for running a custom Kubernetes scheduler instance. It includes the `command` and arguments necessary to start `kube-scheduler` with specific settings like `leader-elect` and a distinct `scheduler-name`. This is typically part of a Deployment or DaemonSet manifest for the scheduler pod.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_46

LANGUAGE: YAML
CODE:
```
spec:
  containers:
  - command:
    - kube-scheduler
    - --address=127.0.0.1
    - --leader-elect=true
    - --scheduler-name=some-custom-scheduler
...
```

----------------------------------------

TITLE: Updating Docker Container Restart Policy Shell
DESCRIPTION: Changes the restart policy of the existing 'forest' container to `unless-stopped` using `docker update --restart unless-stopped forest`. This policy prevents restarts if the container was explicitly stopped by the user.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/run_forest_run.md#_snippet_6

LANGUAGE: Shell
CODE:
```
docker update --restart unless-stopped forest
```

----------------------------------------

TITLE: Using Variable with Omit Filter in Ansible
DESCRIPTION: Shows how to make a task parameter optional using a variable and the 'default(omit)' filter. If the variable 'use_var' is undefined, the 'use' parameter will be omitted from the task.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/ansible/README.md#_snippet_2

LANGUAGE: yaml
CODE:
```
- name: Install a package
  package:
    name: "zlib"
    state: present
    use: "{{ use_var|default(omit) }}"
```

----------------------------------------

TITLE: Describing Instance Labels using gcloud
DESCRIPTION: This command describes a specific Compute Engine instance ("instance-1") and formats the output to show only its associated labels in YAML format. It helps retrieve existing labels for an instance.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/gcp/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
gcloud compute instances describe instance-1 --format "yaml(labels)"
```

----------------------------------------

TITLE: Changing User Password (passwd, Bash)
DESCRIPTION: Shows the command used to set or change the password for a specified user account. This command prompts for the new password securely.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_79

LANGUAGE: bash
CODE:
```
passwd <username>
```

----------------------------------------

TITLE: Viewing Current Kubernetes Namespace - Shell
DESCRIPTION: Displays the currently active namespace set in the local kubectl configuration. It outputs the full configuration using `kubectl config view` and filters the lines containing "namespace" using `grep`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_90

LANGUAGE: shell
CODE:
```
kubectl config view | grep namespace
```

----------------------------------------

TITLE: Listing Cloud Storage Buckets using gcloud (Alpha)
DESCRIPTION: This command uses the `gcloud` tool (specifically the alpha storage component) to list all accessible Cloud Storage buckets. It's an alternative to `gsutil ls` using the `gcloud` command-line interface.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/gcp/README.md#_snippet_6

LANGUAGE: Shell
CODE:
```
gcloud alpha storage ls
```

----------------------------------------

TITLE: Defining Resource Configuration for Import (Terraform HCL)
DESCRIPTION: Shows a Terraform resource block defining an `aws_instance` with attributes corresponding to an existing AWS instance. This HCL configuration represents the desired state for the instance that will be brought under Terraform management using the `terraform import` command. It serves as a blueprint for the imported resource.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_17

LANGUAGE: HCL
CODE:
```
resource "aws_instance" "tf_aws_instance" {
  ami           = data.aws_ami.ubuntu.id
  instance_type = "t3.micro"

  tags = {
    Name = "import-me"
  }
}
```

----------------------------------------

TITLE: Checking Image Architectures Docker Shell
DESCRIPTION: Retrieves and displays the manifest list for a multi-architecture image, showing which architectures (e.g., Linux x64, Windows x64) are supported by the image tag. This helps determine if an image is compatible with your host architecture. Replace '<name>' with the image name or ID.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_17

LANGUAGE: shell
CODE:
```
docker manifest inspect <name>
```

----------------------------------------

TITLE: Updating Argo Rollout Image (Shell)
DESCRIPTION: Command to initiate a new rollout for the application `SOME-APP` by updating the `web-app` container image to `some/registry/and/image:v2.0`. This triggers the configured rollout strategy (e.g., canary, blue/green). Requires kubectl and the Argo Rollouts kubectl plugin, the rollout name, and the new image tag.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/README.md#_snippet_12

LANGUAGE: shell
CODE:
```
kubectl argo rollouts set image SOME-APP web-app=some/registry/and/image:v2.0
```

----------------------------------------

TITLE: Getting Pods with Wide Output OpenShift Bash
DESCRIPTION: Execute this command to list all pods in the current project, displaying additional details. The `-o wide` flag provides extra information such as the node where the pod is running, helping users identify the physical location of their pods.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/openshift/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
oc get po -o wide
```

----------------------------------------

TITLE: Configuring ArgoCD Sync Period YAML
DESCRIPTION: This YAML snippet shows how to set the `timeout.reconciliation` parameter within the `data` section of the `argocd-cm` ConfigMap. This parameter controls how often ArgoCD checks for differences between the desired state in Git and the actual state in Kubernetes. The value is specified in seconds (e.g., `300s` for 5 minutes).
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/README.md#_snippet_7

LANGUAGE: YAML
CODE:
```
data:
  timeout.reconciliation: 300s
```

----------------------------------------

TITLE: Configuring Required Node Anti-Affinity (YAML)
DESCRIPTION: Defines a `requiredDuringSchedulingIgnoredDuringExecution` node anti-affinity rule in a Pod specification YAML using the `NotIn` operator. This prevents the Pod from being scheduled on nodes that match the specified label criteria.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_132

LANGUAGE: YAML
CODE:
```
affinity:
  nodeAffinity:
    requiredDuringSchedlingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: region
          operator: NotIn
          values:
          - neverland
```

----------------------------------------

TITLE: Checking Scheduler Pod Status Bash
DESCRIPTION: Lists all pods in all namespaces (`-A` is equivalent to `--all-namespaces`) and filters the output using `grep` to find lines containing 'scheduler', typically used to locate the kube-scheduler pod. Requires `kubectl` and `grep`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_23

LANGUAGE: bash
CODE:
```
kubectl get po -A | grep scheduler
```

----------------------------------------

TITLE: Installing AWS EFS Utilities - Shell
DESCRIPTION: Installs the `amazon-efs-utils` package using the `yum` package manager with the `-y` flag for automatic confirmation. This package is required for easily mounting an EFS file system on an Amazon Linux 2 EC2 instance.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/create_efs/solution.md#_snippet_0

LANGUAGE: Shell
CODE:
```
sudo yum install -y amazon-efs-utils
```

----------------------------------------

TITLE: Removing a Taint from a Kubernetes Node
DESCRIPTION: Uses the `kubectl taint node` command with a hyphen suffix to remove a specific taint from a node. The command requires the node name, the taint's key-value pair, and the effect.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_140

LANGUAGE: Bash
CODE:
```
k taint node minikube app=web:NoSchedule-
```

----------------------------------------

TITLE: Verifying Service After Pod Restart (Shell)
DESCRIPTION: Executes the `ps` command inside the 'web' pod again using `kubectl exec`. This final check confirms that, after the restart triggered by killing the process, the web service process is running once more, demonstrating Kubernetes' recovery mechanism.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/killing_containers.md#_snippet_5

LANGUAGE: Shell
CODE:
```
kubectl exec web -- ps
```

----------------------------------------

TITLE: Removing All Container Images Podman Shell
DESCRIPTION: Deletes all container images from the local host. This command is useful for cleaning up disk space occupied by unused images.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_21

LANGUAGE: shell
CODE:
```
podman rmi -a
```

----------------------------------------

TITLE: Configuring Podman Registries (Config File)
DESCRIPTION: This snippet shows the configuration format used in the `/etc/containers/registries.conf` file for Podman. The `[registries.search]` section defines a list of registries that Podman will search when an image name is provided without a fully qualified domain name.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_28

LANGUAGE: ini
CODE:
```
[registries.search]
registries = ["quay.io"]
```

----------------------------------------

TITLE: Checking Ready Pods for ReplicaSet (Bash)
DESCRIPTION: This command describes a specific ReplicaSet and filters the output to check the status of its managed pods.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_6

LANGUAGE: bash
CODE:
```
k describe rs repli | grep -i "Pods Status"
```

----------------------------------------

TITLE: Defining a Python Class with Attributes and Methods
DESCRIPTION: This Python snippet defines a `Student` class with two attributes, `name` and `department`. The `department` attribute has a default value of `None`. The class includes an initializer, a method (`getdetails`) to return a formatted string of the student's information, and a method (`change_department`) to update the student's department. It requires the `Optional` type hint from the `typing` module.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/python/solutions/class_0x00_solution.md#_snippet_0

LANGUAGE: python
CODE:
```
from typing import Optional
""" Student Module

    """


class Student:
    def __init__(self, name: str, department: Optional[str] = None) -> None:
        """ Instance Initialization function

        Args:
            name (str): Name of student
            department (Optional[str], optional): Department. Defaults to None.
        """
        self.name = name
        self.department = department

    def getdetails(self) -> str:
        """ Gets the students details

        Returns:
            str: A formatted string
        """
        return f"Name is {self.name}, I'm in department {self.department}"

    def change_department(self, new_deparment: str) -> None:
        """Changes the department of the student object

        Args:
            new_deparment (str): Assigns the new department value to dept attr
        """
        self.department = new_deparment

# student1 instantiation
student1 = Student("Ayobami", "Statistics")

print(student1.getdetails())

# Calling the change_department function to change the department of student
student1.change_department("CS")

print(student1.department)
```

----------------------------------------

TITLE: Finding Package Providing a File using DNF (Shell)
DESCRIPTION: Demonstrates using the `dnf provides` command to identify which installed or available DNF package contains a specific file path, such as an executable command like `/usr/bin/git`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_75

LANGUAGE: Shell
CODE:
```
dnf provides /usr/bin/git
```

----------------------------------------

TITLE: Validating Current Kubernetes Namespace - Shell
DESCRIPTION: Validates the active namespace in the current kubectl configuration after a change. It views a minified version of the config (`--minify`) using `kubectl config view` and filters for the line containing "namespace:".
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_92

LANGUAGE: shell
CODE:
```
kubectl config view --minify | grep namespace:
```

----------------------------------------

TITLE: Checking Node Taints with kubectl
DESCRIPTION: Uses `kubectl describe node` combined with `grep` to display the taints currently applied to a specific Kubernetes node (named `minikube` in this example). This command is useful for verifying if a taint has been applied or removed, or for simply listing existing taints.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/exercises/taints_101/solution.md#_snippet_0

LANGUAGE: shell
CODE:
```
kubectl describe no minikube | grep -i taints
```

----------------------------------------

TITLE: Counting File Words (WC) - Shell
DESCRIPTION: Uses the `wc` (word count) command with the `-w` option to count the number of words in a text file or standard input. Words are generally defined as sequences of non-blank characters separated by blanks.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_103

LANGUAGE: Shell
CODE:
```
wc -w
```

----------------------------------------

TITLE: Activating NetworkManager Connection (Shell)
DESCRIPTION: Shows the `nmcli con up` command used to activate or re-apply settings to a NetworkManager connection after making modifications. This command is necessary for changes to take effect.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_73

LANGUAGE: Shell
CODE:
```
nmcli con up "System ens5"
```

----------------------------------------

TITLE: Assigning Role to User in Project OpenShift Bash
DESCRIPTION: This administrative command is used to grant a specific role to a user within a particular project. It requires the user running the command to have sufficient privileges to manage policies in the target project. Replace `<role>`, `<user>`, and `<project>` with the actual role, username, and project name.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/openshift/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
oc adm policy add-role-to-user <role> <user> -n <project>
```

----------------------------------------

TITLE: Listing Kubernetes API Resources - Shell
DESCRIPTION: Lists all available API resource types supported by the Kubernetes API server in the current cluster context. Use this command to discover the types of objects you can manage with kubectl.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_2

LANGUAGE: shell
CODE:
```
kubectl api-resources
```

----------------------------------------

TITLE: Creating File of Specific Size using fallocate Shell
DESCRIPTION: The `fallocate` command is an efficient way to pre-allocate disk space for a file without necessarily writing data to it immediately. The `-l` option specifies the length in bytes (2097152 bytes equals 2MB). This method is typically faster than `dd` for simply setting a file's size on supported filesystems.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_93

LANGUAGE: Shell
CODE:
```
fallocate -l 2097152 new_file.txt
```

----------------------------------------

TITLE: Creating CA Public Key using OpenSSL (Shell)
DESCRIPTION: Shows how to create a self-signed X.509 certificate (public key) for a Certificate Authority from a private key file using openssl. The certificate is valid for 730 days and uses SHA-256 hashing.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_64

LANGUAGE: Shell
CODE:
```
openssl req -new -x509 -days 730 -key ca-private-key.pem -sha256 -out ca.pem
```

----------------------------------------

TITLE: Removing Node Taint with Kubectl
DESCRIPTION: Removes a specific taint (`app=web:NoSchedule`) from the node `minikube` using the `kubectl taint` command with a hyphen (`-`) appended to the taint specification. Requires `kubectl` and administrative permissions on the node.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_35

LANGUAGE: Shell
CODE:
```
k taint node minikube app=web:NoSchedule-
```

----------------------------------------

TITLE: Checking Disk I/O Statistics (Bash)
DESCRIPTION: Run `iostat -xz 1` to get detailed I/O statistics for storage devices and partitions, updated every second. The `-x` option provides extended statistics, and `-z` omits devices with no activity.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_58

LANGUAGE: Bash
CODE:
```
iostat -xz 1
```

----------------------------------------

TITLE: Verifying NetworkManager DNS Settings (Shell)
DESCRIPTION: Provides two methods to verify the DNS configuration applied to a NetworkManager connection: checking the content of `/etc/resolv.conf` and querying nmcli for the connection's specific IPv4 DNS setting.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_74

LANGUAGE: Shell
CODE:
```
cat /etc/resolv.conf
nmcli -f ipv4.dns con show "System ens5"
```

----------------------------------------

TITLE: Checking Docker Status (Fedora/RHEL/CentOS) - Bash
DESCRIPTION: This snippet provides commands to verify the installation and running status of the Docker service on Linux distributions using RPM packages (like Fedora, RHEL, CentOS). It checks if the `docker` package is installed and then checks the status of the `docker` systemd service.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/run_forest_run.md#_snippet_0

LANGUAGE: Bash
CODE:
```
# Fedora/RHEL/CentOS
rpm -qa | grep docker
systemctl status docker
```

----------------------------------------

TITLE: Inspecting Docker Image Details (Shell)
DESCRIPTION: This command provides low-level information about a Docker image in JSON format. Checking the 'RootFS' section and counting the layers is another way to confirm the number of image layers.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/image_layers.md#_snippet_4

LANGUAGE: Shell
CODE:
```
docker image inspect super_cool_appl
```

----------------------------------------

TITLE: Checking Argo Rollout Status (Shell)
DESCRIPTION: Command to check the current status of a specific Argo Rollout resource named `SOME-APP`. Provides a concise summary of the rollout's progress and state. Requires kubectl and the Argo Rollouts kubectl plugin, and the name of the target rollout.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/README.md#_snippet_11

LANGUAGE: shell
CODE:
```
kubectl argo rollouts status SOME-APP
```

----------------------------------------

TITLE: Installing Sudo on Debian/Ubuntu (apt-get)
DESCRIPTION: Shows the command to install the sudo package using the apt-get package manager, commonly used on Debian and Ubuntu Linux distributions. Sudo allows permitted users to execute commands as the superuser or another user.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_22

LANGUAGE: bash
CODE:
```
apt-get install sudo
```

----------------------------------------

TITLE: Checking Python Variable Type
DESCRIPTION: Shows how to use the built-in Python function 'type()' to determine the data type of any variable.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/python/data_types.md#_snippet_6

LANGUAGE: python
CODE:
```
type(variable_name)
```

----------------------------------------

TITLE: Creating MySQL App with OpenShift CLI
DESCRIPTION: This command utilizes the OpenShift command-line tool (`oc`) to instantiate a new application resource based on a specified image or template, in this case, 'mysql'. It simplifies the deployment process by automatically creating necessary objects like deployments, services, and build configurations if applicable.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/openshift/solutions/my_first_app.md#_snippet_0

LANGUAGE: OpenShift CLI
CODE:
```
oc new-app mysql
```

----------------------------------------

TITLE: Extracting Last Word of Line using Regex
DESCRIPTION: This regular expression pattern \w+(?=\W*$) attempts to extract the last word on a line. It matches one or more word characters (\w+) that are followed by zero or more non-word characters (\W*) until the end of the line ($). Its effectiveness can depend on line formatting.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_26

LANGUAGE: Regex
CODE:
```
\w+(?=\W*$)
```

----------------------------------------

TITLE: Verifying Taint Application on a Node
DESCRIPTION: Uses `kubectl describe node` and `grep` to confirm that a specific taint has been successfully applied to a node after executing the taint command.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_137

LANGUAGE: Bash
CODE:
```
k describe no minikube | grep -i taints
```

----------------------------------------

TITLE: Adding Document via Elasticsearch API (Curl)
DESCRIPTION: This snippet demonstrates how to add or update a document in an Elasticsearch index using the curl command-line tool. It sends a PUT request to the Elasticsearch REST API endpoint, specifying the index name, document type (_doc), and document ID. The JSON data for the document is provided in the request body, and the `pretty` parameter formats the output response.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_17

LANGUAGE: bash
CODE:
```
curl -X PUT "localhost:9200/customer/_doc/1?pretty" -H 'Content-Type: application/json' -d'\{ "name": "John Doe" \}'
```

----------------------------------------

TITLE: Calculating Sum using Bash
DESCRIPTION: This Bash script validates that the first two command-line arguments ($1 and $2) are non-negative integers using a regular expression. If validation fails, it prints an error and exits. It defines a function `sum` that takes two arguments and prints their arithmetic sum using shell expansion $((...)). Finally, it calls the `sum` function with the validated command-line arguments.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/solutions/sum.md#_snippet_0

LANGUAGE: bash
CODE:
```
#!/usr/bin/env bash

re='^[0-9]+$'

if ! [[ $1 =~ $re && $2 =~ $re ]]; then
    echo "Oh no...I need two numbers"
    exit 2
fi

function sum {
    echo $(( $1 + $2 ))
}

sum $1 $2
```

----------------------------------------

TITLE: Extracting Numbers using Regex
DESCRIPTION: This regular expression pattern \d+ is used to find and extract sequences of one or more digit characters within a given text. It matches any contiguous block of numbers.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_24

LANGUAGE: Regex
CODE:
```
\d+
```

----------------------------------------

TITLE: Listing Kubernetes Pods and Saving Output
DESCRIPTION: Uses kubectl to list all pods in the current namespace and redirects the standard output to a text file named 'running_pods.txt'. This captures the initial state of the pods managed by the ReplicaSet.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/replicaset_03_solution.md#_snippet_2

LANGUAGE: bash
CODE:
```
kubectl get po > running_pods.txt
```

----------------------------------------

TITLE: Separating Multiple Documents in YAML
DESCRIPTION: This snippet shows how to use the `---` marker to separate multiple independent YAML documents within a single file, allowing a single file to contain configurations or data for different purposes.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_23

LANGUAGE: YAML
CODE:
```
document_number: 1
---
document_number: 2
```

----------------------------------------

TITLE: Viewing Container Image History (Docker)
DESCRIPTION: This command displays the history of a Docker image, showing each layer, the command used to create it, and its size. It helps understand how an image was built layer by layer and can be useful for troubleshooting.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_24

LANGUAGE: shell
CODE:
```
docker image history <image name>:<tag>
```

----------------------------------------

TITLE: Implementing and Using Min-Heap with container/heap Go
DESCRIPTION: This Go snippet shows how to implement a min-heap using the standard library's `container/heap` package. It defines a custom type `IntHeap` that satisfies the `heap.Interface` by implementing `Len`, `Less`, `Swap`, `Push`, and `Pop`. The example initializes a heap, adds an element, and then prints the root element, demonstrating that the heap property is maintained (the smallest element is at index 0).
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_8

LANGUAGE: go
CODE:
```
package main

import (
	"container/heap"
	"fmt"
)

// An IntHeap is a min-heap of ints.
type IntHeap []int

func (h IntHeap) Len() int           { return len(h) }
func (h IntHeap) Less(i, j int) bool { return h[i] < h[j] }
func (h IntHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }

func (h *IntHeap) Push(x interface{}) {
	// Push and Pop use pointer receivers because they modify the slice's length,
	// not just its contents.
	*h = append(*h, x.(int))
}

func (h *IntHeap) Pop() interface{} {
	old := *h
	n := len(old)
	x := old[n-1]
	*h = old[0 : n-1]
	return x
}

func main() {
	h := &IntHeap{4, 8, 3, 6}
	heap.Init(h)
	heap.Push(h, 7)

  fmt.Println((*h)[0])
}
```

----------------------------------------

TITLE: Extracting Suffix After Last Dot in Shell
DESCRIPTION: Uses shell parameter expansion (`${parameter//pattern/string}`) to remove the longest match of `*.` (anything followed by a dot) from the beginning of the variable `var`. This effectively extracts the part of the string after the last dot.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/README.md#_snippet_14

LANGUAGE: Shell
CODE:
```
${var//*.}
```

----------------------------------------

TITLE: Adding External Kubernetes Cluster to ArgoCD via CLI Shell
DESCRIPTION: This command uses the `argocd` CLI to register an external Kubernetes cluster with ArgoCD. `CLUSTER_ADDRESS/NAME` is a placeholder for the actual address or a user-defined name for the cluster. This allows a single ArgoCD instance to manage applications deployed across multiple clusters.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/README.md#_snippet_5

LANGUAGE: Shell
CODE:
```
argocd cluster add CLUSTER_ADDRESS/NAME
```

----------------------------------------

TITLE: Verifying Node Taints with Kubectl
DESCRIPTION: Similar to checking taints, this command uses `kubectl describe node` for the specified node (`minikube`) and filters the output with `grep -i taints` to confirm that the intended taints have been successfully applied. Requires `kubectl`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_31

LANGUAGE: Shell
CODE:
```
k describe no minikube | grep -i taints
```

----------------------------------------

TITLE: Asserting File Existence for a List in Ansible
DESCRIPTION: An Ansible task that verifies if all files specified in the 'files_list' variable exist on the host. It uses the 'assert' module within a loop ('loop: "{{ files_list }}"') to check the 'stat.exists' property for each item.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/ansible/README.md#_snippet_5

LANGUAGE: yaml
CODE:
```
- name: Ensure all files exist
  assert:
    that:
      - item.stat.exists
  loop: "{{ files_list }}"
```

----------------------------------------

TITLE: Inspecting Image Layers Docker Shell
DESCRIPTION: Displays detailed information about a Docker image, including its configuration, layers, and metadata. The command can be used to specifically list the image's layers. Replace '<name>' with the image name or ID.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_14

LANGUAGE: shell
CODE:
```
docker image inspect <name>
```

----------------------------------------

TITLE: Printing First Argument in Shell
DESCRIPTION: Prints the value of the first command-line argument passed to the script. `$1` is a special variable in shell scripting that holds the first argument.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/README.md#_snippet_3

LANGUAGE: Shell
CODE:
```
echo $1
```

----------------------------------------

TITLE: Listing NetworkManager Connections (Shell)
DESCRIPTION: Uses the `nmcli con show` command to list existing NetworkManager connections, providing details like name, UUID, type, and associated device. The snippet includes example output showing the format.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_71

LANGUAGE: Shell
CODE:
```
# nmcli con show
NAME         UUID                                  TYPE      DEVICE
System ens5  8126c120-a964-e959-ff98-ac4973344505  ethernet  ens5
System eth0  5fb06bd0-0bb0-7ffb-45f1-d6edd65f3e03  ethernet  --
```

----------------------------------------

TITLE: Defining AWS Lambda Test Event Payload - JSON
DESCRIPTION: This JSON snippet represents a sample input event payload used to test the Lambda function within the AWS console. It provides a key-value pair where the key 'name' holds the string value 'Spyro'. The Lambda function expects this structure to extract the name for its greeting.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/hello_function/solution.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  "name": "Spyro"
}
```

----------------------------------------

TITLE: Extracting Date with Sed - Shell
DESCRIPTION: Demonstrates using `sed` with multiple substitution commands to extract the date from a log line formatted like `[DD/Mon/YYYY:...]`. It removes text before `[`, text after `]`, and text after the first `:` within the date part.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_96

LANGUAGE: Shell
CODE:
```
echo $line | sed 's/.*\\[//g;s/].*//g;s/:.*//g'
```

----------------------------------------

TITLE: Base64 Encoding a String | Bash
DESCRIPTION: A bash command piping the string 'mySecretPassword' (without a trailing newline due to '-n') to the 'base64' utility. This command demonstrates how to encode a secret value before placing it in the 'data' field of a Kubernetes Secret manifest.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_114

LANGUAGE: bash
CODE:
```
echo -n 'mySecretPassword' | base64
```

----------------------------------------

TITLE: Filtering Lines by Length using AWK Shell
DESCRIPTION: This AWK command reads a file and prints only those lines that exceed a specific character length (in this case, 79 characters). The `$0` variable represents the entire current line, and the `length()` function returns its length. The condition `length($0) > 79` acts as a filter before printing the line.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_90

LANGUAGE: AWK
CODE:
```
awk 'length($0) > 79' file
```

----------------------------------------

TITLE: Printing Conditional Day Message (Bash)
DESCRIPTION: This bash script prints a message about the day. It checks if the first command-line argument (`$1`) is provided; if so, it uses that as the day name. Otherwise, it defaults to printing "a great day!". The `${1:-...}` syntax provides the default value.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/solutions/great_day.md#_snippet_0

LANGUAGE: bash
CODE:
```
#!/usr/bin/env bash

echo "Today is ${1:-a great day!}"
```

----------------------------------------

TITLE: Changing Directory to Static Pod Manifests Bash
DESCRIPTION: Changes the current working directory to the typical location where kubelet looks for static pod manifest files. This directory may vary depending on the kubelet configuration (`staticPodPath`). Requires shell access and execute permission for the directories.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_26

LANGUAGE: bash
CODE:
```
cd /etc/kubernetes/manifests
```

----------------------------------------

TITLE: Analyzing Podman image differences
DESCRIPTION: Runs the `podman diff` command on the `nginx_mario` image to show the differences between this custom image and its base image (`nginx:alpine`), highlighting added (A) and changed (C) files.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/commit_image.md#_snippet_9

LANGUAGE: bash
CODE:
```
podman diff nginx_mario
```

----------------------------------------

TITLE: Removing Container Image Tag (Podman)
DESCRIPTION: This command removes a specific tag reference pointing to an image. If the removed tag was the last reference to the image data, the image itself may also be removed from the system.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_32

LANGUAGE: shell
CODE:
```
podman rmi IMAGE:TAG
```

----------------------------------------

TITLE: Diffing Container Image Filesystem (Podman)
DESCRIPTION: This command shows the differences in the filesystem between the base image and the final container image. It lists files that were added, changed, or deleted in the image layers, helping to identify modifications made during the build process.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_25

LANGUAGE: shell
CODE:
```
podman diff IMAGE_NAME
```

----------------------------------------

TITLE: Counting Logical Processors (nproc, Bash)
DESCRIPTION: Presents the nproc command as a simple way to quickly get the number of processing units available to the current process, often equivalent to the number of logical cores.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_86

LANGUAGE: bash
CODE:
```
nproc
```

----------------------------------------

TITLE: Defining Argo Rollouts Analysis Template (YAML)
DESCRIPTION: Explains the YAML configuration for an Argo Rollouts AnalysisTemplate resource. It defines a metric named `success-rate` fetched from Prometheus, which is used to determine if a canary deployment is successful based on the response status code. If the metric falls below 0.90, a rollback is triggered. Requires an Argo Rollouts installation and access to a Prometheus instance.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/README.md#_snippet_8

LANGUAGE: yaml
CODE:
```
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: success-rate
spec:
  args:
  - name: service-name
  metrics:
  - name: success-rate
    interval: 4m
    count: 3
    successCondition: result[0] >= 0.90
    provider:
      prometheus:
        address: http:/some-prometheus-instance:80
        query: sum(response_status{app="{{args.service-name}}",role="canary",status=~"2.*"})/sum(response_status{app="{{args.service-name}}",role="canary"}
```

----------------------------------------

TITLE: Running Git Maintenance (Git, Bash)
DESCRIPTION: This command runs various maintenance tasks to optimize the Git repository. It improves the performance of commands like 'git add' and 'git fetch' and reduces disk space usage. Recommended for periodic execution.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
git-maintainence
```

----------------------------------------

TITLE: Decoding Data with Base64 (Shell)
DESCRIPTION: Provides a simple shell command pipeline using `echo` and `base64` to decode a base64-encoded string. The `-n` flag prevents `echo` from adding a newline before the string is passed to `base64`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_66

LANGUAGE: Shell
CODE:
```
echo -n "allE19remO91" | base64
```

----------------------------------------

TITLE: Adjust Host Directory Ownership for Podman (Shell)
DESCRIPTION: This command is used on systems where a non-root user is running Podman. It changes the ownership of the host directory (and its contents) to match the UID and GID that the unprivileged container user will use, ensuring proper file access from within the container.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_37

LANGUAGE: shell
CODE:
```
podman unshare chown -R UID:GUID /tmp/dir_on_the_host
```

----------------------------------------

TITLE: Installing cpanm Perl Module Installer
DESCRIPTION: This command demonstrates how to install cpanm, the cpanminus tool, which is a popular alternative client for installing Perl modules from CPAN. It uses the standard cpan utility provided with Perl distributions.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/perl/README.md#_snippet_4

LANGUAGE: Shell
CODE:
```
cpan App::cpanminus
```

----------------------------------------

TITLE: Creating Empty File (Echo) - Shell
DESCRIPTION: Uses the `echo` command to print an empty string and redirects the output using `>` to a specified filename. If the file exists, it is truncated to zero size; if it doesn't exist, it is created empty.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_98

LANGUAGE: Shell
CODE:
```
echo "" > new_file
```

----------------------------------------

TITLE: Generating Random UUID (cat /proc)
DESCRIPTION: Shows how to read the virtual file /proc/sys/kernel/random/uuid using cat to generate and output a unique, randomly generated UUID string. This is a quick way to get a standard UUID from the kernel.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_24

LANGUAGE: bash
CODE:
```
cat /proc/sys/kernel/random/uuid
```

----------------------------------------

TITLE: Measure Process Memory Usage - Bash Function
DESCRIPTION: This Bash function `mem` lists processes, sorts them by memory usage (resident set size), filters based on an input argument (process name or ID), and prints the RSS in MB. It requires `ps`, `grep`, and `awk` commands. Input is typically a process name or part of a name provided as an argument to the function (via `$@`). The function excludes the `grep` process itself and formats the output.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_61

LANGUAGE: bash
CODE:
```
mem()
{
    ps -eo rss,pid,euser,args:100 --sort %mem | grep -v grep | grep -i $@ | awk '{printf $1/1024 "MB"; $1=""; print }'
}
```

----------------------------------------

TITLE: Creating User Without Login Shell (adduser, Bash)
DESCRIPTION: Provides an adduser command example to create a user account specifically configured without a valid login shell and no home directory. This is useful for service accounts or system users that should not be able to log in interactively.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_81

LANGUAGE: bash
CODE:
```
adduser user_name --shell=/bin/false --no-create-home
```

----------------------------------------

TITLE: Querying Specific Data SQL
DESCRIPTION: This SQL query selects the 'Items_in_cart' column from the 'Customers' table specifically for the row where the 'Customer_Name' is 'John Smith'. It demonstrates using a WHERE clause to filter results.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_10

LANGUAGE: SQL
CODE:
```
Select Items_in_cart
From Customers
Where Customer_Name = "John Smith";
```

----------------------------------------

TITLE: Deploying Mongo Pod Example (Shell)
DESCRIPTION: Provides an example of deploying a Pod using the `mongo` image via `kubectl run`. This specific example is used in the context to illustrate how a deployment might result in a `CrashLoopBackOff` status, indicating repeated container crashes.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_9

LANGUAGE: Shell
CODE:
```
kubectl run database --image mongo
```

----------------------------------------

TITLE: Mismatched Labels in ReplicaSet Definition (YAML)
DESCRIPTION: This YAML snippet shows an incorrect ReplicaSet definition where the label specified in the 'spec.selector.matchLabels' ('tier: cache') does not match the label used in the 'spec.template.metadata.labels' ('tier: cachy'). For a ReplicaSet to manage pods created from its template, the template labels must match the selector labels.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_70

LANGUAGE: YAML
CODE:
```
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: redis
  labels:
    app: redis
    tier: cache
spec:
  selector:
    matchLabels:
      tier: cache
  template:
    metadata:
      labels:
        tier: cachy
    spec:
      containers:
      - name: redis
        image: redis
```

----------------------------------------

TITLE: Appending Standard Output (Shell)
DESCRIPTION: Demonstrates appending the standard output (`stdout`) of the `echo` command to a file (`myfile.txt`) using the `>>` operator. If the file exists, the output is added to the end; otherwise, a new file is created. Requires `echo` and a shell.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_15

LANGUAGE: shell
CODE:
```
echo "hello" >> myfile.txt
```

----------------------------------------

TITLE: Checking TCP Statistics (Bash)
DESCRIPTION: Execute `sar -n TCP,ETCP 1` to report network statistics, specifically focusing on TCP and Extended TCP details, updated every second. Requires the `sysstat` package and provides insights into network connection activity.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_60

LANGUAGE: Bash
CODE:
```
sar -n TCP,ETCP 1
```

----------------------------------------

TITLE: Listing Git References bash
DESCRIPTION: This command uses the standard `find` utility to list the contents of the `.git/refs/` directory. This directory contains files representing various references like local branches (`heads`), remote branches (`remotes`), and tags (`tags`). It provides a raw view of Git's reference structure.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_23

LANGUAGE: bash
CODE:
```
find .git/refs/
```

----------------------------------------

TITLE: Viewing Image Build Instructions Docker Shell
DESCRIPTION: Shows the history of a Docker image, detailing the instructions from its Dockerfile/Containerfile that created each layer. This helps understand the image build process and recreate it if needed. Replace '<image name>:<tag>' with the image name and tag.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_19

LANGUAGE: shell
CODE:
```
docker image history <image name>:<tag>
```

----------------------------------------

TITLE: Running Application Tests (Shell)
DESCRIPTION: Executes the Python test suite script 'tests.py'. This command is intended to be used within a Continuous Integration (CI) pipeline definition.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/flask_container_ci2/README.md#_snippet_4

LANGUAGE: Shell
CODE:
```
python tests.py
```

----------------------------------------

TITLE: Checking Argument in Bash
DESCRIPTION: This bash script checks the first command-line argument (`$1`). If the argument is exactly the string "pizza", it prints "with pineapple?". Otherwise, it prints "I want pizza!". The script assumes at least one argument is provided when executed.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/solutions/argument_check.md#_snippet_0

LANGUAGE: bash
CODE:
```
#!/usr/bin/env bash

[[ ${1} == "pizza" ]] && echo "with pineapple?" || echo "I want pizza!"
```

----------------------------------------

TITLE: Monitoring Argo Rollout Progress (Shell)
DESCRIPTION: Command to watch the status of a specific Argo Rollout resource named `SOME-APP` in real-time. Provides continuous updates on the rollout's progress as it happens. Requires kubectl and the Argo Rollouts kubectl plugin, and the name of the target rollout.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/README.md#_snippet_14

LANGUAGE: shell
CODE:
```
kubectl argo rollouts get rollout SOME-APP --watch
```

----------------------------------------

TITLE: Saving Current Date to File (Bash)
DESCRIPTION: This bash script captures the output of the `date` command and redirects it to a file named `the_date.txt`. It overwrites the file if it already exists or creates it if it doesn't. The script requires a standard bash environment.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/solutions/basic_date.md#_snippet_0

LANGUAGE: bash
CODE:
```
#!/usr/bin/env bash

echo $(date) > the_date.txt
```

----------------------------------------

TITLE: API Gateway Query Parameter Mapping Template
DESCRIPTION: This template is used in AWS API Gateway's body mapping configuration. It defines how to transform incoming request parameters (specifically the 'name' query string parameter from the URL) into the JSON payload expected by the backend Lambda function.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/url_function/solution.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{ "name": "$input.params('name')" }
```

----------------------------------------

TITLE: Creating File with Text using Cat (Bash)
DESCRIPTION: Create a new file and write text content into it using the `cat` command with output redirection (`>`). Text is entered interactively after running the command, and input is terminated by pressing Ctrl+D.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_52

LANGUAGE: Bash
CODE:
```
cat > new_file
```

----------------------------------------

TITLE: Matching Single Characters with Globbing (Bash)
DESCRIPTION: Explains shell globbing using square brackets `[]`. This command example shows how `ls [XYZ]` matches any single character that is 'X', 'Y', or 'Z' in the current directory's filenames when listing files.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_41

LANGUAGE: Bash
CODE:
```
ls [XYZ]
```

----------------------------------------

TITLE: Editing File with Vi
DESCRIPTION: Opens the specified file (`pod.yaml`) in the `vi` text editor. This is a common step in workflows where a YAML definition is generated and then manually modified before being applied to the cluster. Requires the `vi` editor or similar to be available.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_38

LANGUAGE: Shell
CODE:
```
vi pod.yaml
```

----------------------------------------

TITLE: Installing Perl Module using cpanm
DESCRIPTION: This command illustrates how to install a specific Perl module named Test using the cpanm command-line tool. cpanm handles downloading, building, and installing the module and its dependencies from CPAN.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/perl/README.md#_snippet_5

LANGUAGE: Shell
CODE:
```
cpanm Test
```

----------------------------------------

TITLE: Creating and Updating GCP VM Instance Labels - gcloud CLI
DESCRIPTION: This sequence of gcloud commands demonstrates how to configure the gcloud environment, create a GCP VM instance with specified initial labels and machine type, update one label's value, and remove another label.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/gcp/exercises/instance_101/solution.md#_snippet_0

LANGUAGE: gcloud CLI
CODE:
```
gcloud config set project <PROJECT_ID>
gcloud config set compute/region <REGION NAME>
gcloud config set compute/zone <ZONE NAME>

gcloud compute instances create instance-1 --labels app=web,env=dev --machine-type=e2-micro
gcloud compute instances update instance-1 --update-labels app=db
gcloud compute instances update instance-1 --remove-labels env
```

----------------------------------------

TITLE: Comparing Index to HEAD (Metadata) Git bash
DESCRIPTION: This command compares the Git index (staging area) against the HEAD commit. Unlike `git diff`, `git diff-index` primarily compares metadata like file timestamps and sizes rather than the full content, making it faster but less detailed for content differences. It is used internally by commands like `git status`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_24

LANGUAGE: bash
CODE:
```
git diff-index HEAD
```

----------------------------------------

TITLE: Counting Records by Date Range in SQL
DESCRIPTION: This SQL query counts the total number of records in the `shawarma_purchases` table where the `purchased_at` column's date value is within the range from '2017-01-01' to '2017-12-31', inclusive. It provides the sum of purchases made within the calendar year 2017.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/sql/improve_query.md#_snippet_0

LANGUAGE: SQL
CODE:
```
SELECT COUNT(purchased_at)
FROM shawarma_purchases
WHERE purchased_at BETWEEN '2017-01-01' AND '2017-12-31';
```

----------------------------------------

TITLE: Deleting Kubernetes ReplicaSet Orphan Pods with Kubectl Delete
DESCRIPTION: Deletes the specified ReplicaSet definition using 'kubectl delete -f rs.yaml'. The '--cascade=orphan' flag is crucial as it prevents the deletion of the pods managed by the ReplicaSet, effectively leaving them running as orphaned pods.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/replicaset_02_solution.md#_snippet_2

LANGUAGE: bash
CODE:
```
kubectl delete -f rs.yaml --cascade=orphan
```

----------------------------------------

TITLE: Setting Flask App Entry Point (Bash)
DESCRIPTION: Sets the `FLASK_APP` environment variable to `app/main.py`, telling Flask where to find the application instance when running commands like `flask run`. Required before running Flask commands.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/flask_container_ci/README.md#_snippet_3

LANGUAGE: Bash
CODE:
```
export FLASK_APP=app/main.py
```

----------------------------------------

TITLE: Finding Default Docker Registry
DESCRIPTION: This command displays system-wide information about the Docker installation and environment, including details about the configured container runtime, storage drivers, and the default registry used for image operations like pulling and pushing.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_27

LANGUAGE: shell
CODE:
```
> docker info
Registry: https://index.docker.io/v1
```

----------------------------------------

TITLE: Use Context for Secrets in CircleCI - YAML
DESCRIPTION: This YAML snippet is part of a CircleCI configuration file, illustrating how to reference a 'context'. CircleCI contexts provide a mechanism to manage environment variables, including sensitive secrets, outside of the version-controlled configuration file, improving security.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_41

LANGUAGE: YAML
CODE:
```
context:
- some-context
```

----------------------------------------

TITLE: Deleting Static Pod Manifest File Bash
DESCRIPTION: Removes the YAML or JSON definition file for a static pod from the directory monitored by kubelet (`staticPodPath`), causing kubelet to stop managing and subsequently delete the corresponding static pod. Requires write permission in the static pods directory.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_16

LANGUAGE: bash
CODE:
```
rm <STATIC_POD_PATH>/<POD_DEFINITION_FILE>
```

----------------------------------------

TITLE: Testing Local SSH Connection (Bash)
DESCRIPTION: Shows the command used to attempt an SSH connection to the local machine. This is a basic test often used for troubleshooting SSH server issues.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_77

LANGUAGE: bash
CODE:
```
ssh 127.0.0.1
```

----------------------------------------

TITLE: Creating & Applying Pod with Node Selector (Shell)
DESCRIPTION: Generates a basic pod definition for a redis container using dry-run, redirects it to 'pod.yaml', instructs the user to edit 'pod.yaml' to add the 'nodeSelector' field targeting 'hw: max', and finally applies the modified pod definition to the Kubernetes cluster.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/exercises/node_selectors/solution.md#_snippet_1

LANGUAGE: Shell
CODE:
```
kubectl run some-pod --image=redis --dry-run=client -o yaml > pod.yaml

vi pod.yaml

spec:
  nodeSelector:
    hw: max

kubectl apply -f pod.yaml
```

----------------------------------------

TITLE: Extracting Bytes with Cut (Shell)
DESCRIPTION: Illustrates using the `cut` command with the `-b` flag to extract the first two bytes (characters) from each line of the file `file.md`. Requires the `cut` utility and the target file.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_3

LANGUAGE: shell
CODE:
```
cut -b 1-2 file.md
```

----------------------------------------

TITLE: Saving, Copying, and Loading Podman Images - Bash
DESCRIPTION: Demonstrates the complete workflow for sharing a Podman image. It includes saving the image to a tar archive, comparing archive and image sizes, copying the archive to a remote host using rsync, loading the image from the archive on the remote host (or where loaded), and verifying the image was successfully loaded using `podman image ls`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/sharing_images.md#_snippet_0

LANGUAGE: Bash
CODE:
```
# Save image as an archive
podman save -o httpd.tar httpd

# Check archive and image sizes
du -sh httpd.tar # output: 143MB
podman image ls | grep httpd # output: 149MB
# The archive is obviously smaller than the image itself (6MB difference)

# Copy the archive to a remote host
rsync -azc httpd.tar USER@REMOTE_HOST_FQDN:/tmp/

# Load the image
podman load -i /tmp/httpd.tar

# Verify it exists on the system after loading
podman image ls
```

----------------------------------------

TITLE: Managing Grafana Plugins with CLI - Shell
DESCRIPTION: These shell commands demonstrate how to use the Grafana CLI to manage plugins. The first command lists available plugins from the remote repository, and the second command installs a specific plugin using its ID. This is a common method for installing plugins on a local Grafana instance.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/grafana/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
grafana-cli plugins list-remote
grafana-cli plugins install <plugin-id>
```

----------------------------------------

TITLE: Counting by Year Function SQL
DESCRIPTION: This SQL query counts rows from the 'shawarma_purchases' table where the year extracted from the 'purchased_at' column equals '2017'. Using a function on the column in the WHERE clause can negatively impact performance by preventing index usage.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_15

LANGUAGE: SQL
CODE:
```
SELECT count(*)
FROM shawarma_purchases
WHERE
  YEAR(purchased_at) == '2017'
```

----------------------------------------

TITLE: Extracting Prefix Before Last Dot in Shell
DESCRIPTION: Uses shell parameter expansion (`${parameter%word}`) to remove the shortest match of `.*` (dot followed by anything) from the end of the variable `var`. This effectively extracts the part of the string before the last dot.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/README.md#_snippet_15

LANGUAGE: Shell
CODE:
```
${var%.*}
```

----------------------------------------

TITLE: Fixing Sed Replace Command (Shell)
DESCRIPTION: Provides the corrected syntax for a `sed` command performing substitution. The original snippet had a missing single quote. This shows the valid form using single quotes around the substitution command.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_10

LANGUAGE: shell
CODE:
```
sed 's/1/2/g' /tmp/myFile
```

----------------------------------------

TITLE: Creating CA Private Key using OpenSSL (Shell)
DESCRIPTION: Demonstrates using the openssl command to generate a 4096-bit RSA private key for a Certificate Authority, encrypted with AES-256 and saved to a specified file. This command requires OpenSSL to be installed.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_63

LANGUAGE: Shell
CODE:
```
openssl genrsa -aes256 -out ca-private-key.pem 4096
```

----------------------------------------

TITLE: Specifying Custom Scheduler for Pod (YAML)
DESCRIPTION: Adds the `schedulerName` field to a Pod specification YAML to instruct Kubernetes to use a specific custom scheduler instead of the default one for this Pod.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_134

LANGUAGE: YAML
CODE:
```
spec:
  schedulerName: some-custom-scheduler
```

----------------------------------------

TITLE: Grepping for IPv4 Addresses (Bash)
DESCRIPTION: Shows a `grep` command using a regular expression to search for patterns resembling IPv4 addresses (four groups of 1 to 3 digits separated by dots) within `some_file`. Uses extended regular expression syntax with escaped braces.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_44

LANGUAGE: Bash
CODE:
```
grep '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' some_file
```

----------------------------------------

TITLE: Creating a custom HTML index file using Cat
DESCRIPTION: This command uses a 'here document' (`<<EOT ... EOT`) with `cat` to create a new file named 'index.html' in the current directory, containing simple HTML content.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/commit_image.md#_snippet_2

LANGUAGE: bash
CODE:
```
cat <<EOT >>index.html
<html>
<head>
<title>It's a me</title>
</head>
<body>
<h1>Mario</h1>
</body>
EOT
```

----------------------------------------

TITLE: Renaming Resource in Terraform State Shell
DESCRIPTION: The `terraform state mv` command (state move) is used to rename a resource or move it to a new module path within the Terraform state file. This command should be used cautiously and requires careful planning.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_24

LANGUAGE: Shell
CODE:
```
terraform state mv
```

----------------------------------------

TITLE: SQL Cartesian Product (CROSS JOIN)
DESCRIPTION: This SQL query explicitly performs a Cartesian product between the 'customers' and 'orders' tables using `CROSS JOIN`. It combines every row from the 'customers' table with every row from the 'orders' table. This type of join is often used to generate combinations or can occur unintentionally if a join condition is missing.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/tests/testcases/testcase2.md#_snippet_3

LANGUAGE: SQL
CODE:
```
Select * from customers CROSS JOIN orders;
```

----------------------------------------

TITLE: Setting Default Forks in Ansible Configuration - Ansible INI
DESCRIPTION: Demonstrates how to set the default number of forks (parallel processes) for Ansible execution in the ansible.cfg file, overriding the default of 5.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/ansible/README.md#_snippet_8

LANGUAGE: INI
CODE:
```
[defaults]
forks = 30
```

----------------------------------------

TITLE: Setting create_before_destroy Lifecycle Rule (HCL)
DESCRIPTION: Shows how to add the `create_before_destroy = true` block within a resource's `lifecycle` configuration. This instructs Terraform to create the new version of the resource before destroying the old one, useful for updating immutable resources referenced by others, such as Launch Configurations linked to Auto Scaling Groups.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_34

LANGUAGE: HCL
CODE:
```
lifecycle {
  create_before_destroy = true
}
```

----------------------------------------

TITLE: Defining Readiness Probe (YAML)
DESCRIPTION: Presents a YAML configuration snippet for defining a readiness probe using a `tcpSocket` check on a specific port. Kubelet uses this probe to determine when a container is ready to accept traffic; the Pod is not marked "Ready" until the probe succeeds. Parameters `initialDelaySeconds` and `periodSeconds` control the probe's timing.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_12

LANGUAGE: YAML
CODE:
```
readinessProbe:
      tcpSocket:
        port: 2017
      initialDelaySeconds: 15
      periodSeconds: 20
```

----------------------------------------

TITLE: Mounting AWS EFS - Shell
DESCRIPTION: Mounts the Amazon EFS file system onto the local `efs` directory. It specifies the file system type (`efs`), uses TLS encryption (`-o tls`), requires the specific EFS identifier (`<EFS name>:/`), and sets the local mount point (`efs`). Replace `<EFS name>` with your actual EFS identifier found in the AWS console.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/create_efs/solution.md#_snippet_2

LANGUAGE: Shell
CODE:
```
sudo mount -t efs -o tls <EFS name>:/ efs
```

----------------------------------------

TITLE: Configuring Create-Before-Destroy Lifecycle (Terraform HCL)
DESCRIPTION: Shows a `lifecycle` block, which can be added to a resource definition to alter its default behavior during updates. Setting `create_before_destroy` to `true` tells Terraform to create the new resource instance before destroying the old one, useful for resources with dependencies or immutability constraints.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_16

LANGUAGE: HCL
CODE:
```
lifecycle {
  create_before_destroy = true
}
```

----------------------------------------

TITLE: Applying Node Taint with Kubectl
DESCRIPTION: Applies a taint to a specified node (`minikube`) using the `kubectl taint` command. The taint is defined with a key (`app`), value (`web`), and effect (`NoSchedule`), preventing pods without a matching toleration from being scheduled on this node. Requires `kubectl` and necessary permissions.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_30

LANGUAGE: Shell
CODE:
```
k taint node minikube app=web:NoSchedule
```

----------------------------------------

TITLE: Checking Kubernetes ReplicaSet Pod Status (Shell)
DESCRIPTION: This command uses 'kubectl describe' (aliased 'k') on a ReplicaSet named 'repli' and filters the output using 'grep' to find the line reporting the 'Pods Status'. This line indicates how many pods are in the 'Running' or 'Ready' state under the ReplicaSet's management.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_72

LANGUAGE: Shell
CODE:
```
k describe rs repli | grep -i "Pods Status"
```

----------------------------------------

TITLE: Creating Pod with Resource Requests (kubectl, Shell & YAML)
DESCRIPTION: Defines a workflow to create a Python pod with specific CPU and memory requests. It first generates a base pod YAML using `kubectl run` with `--dry-run`, then shows the YAML structure including resource requests, and finally applies the configuration using `kubectl apply`. Requires a Kubernetes cluster.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_142

LANGUAGE: Shell
CODE:
```
kubectl run yay --image=python --dry-run=client -o yaml > pod.yaml
```

LANGUAGE: YAML
CODE:
```
spec:
  containers:
  - image: python
    imagePullPolicy: Always
    name: yay
    resources:
      requests:
        cpu: 250m
        memory: 64Mi
```

LANGUAGE: Shell
CODE:
```
kubectl apply -f pod.yaml
```

----------------------------------------

TITLE: Configuring AWS Provider with Assume Role for Cross-Account Access (HCL)
DESCRIPTION: Shows how to configure the AWS provider with an `assume_role` block, specifying a `role_arn`. This allows the provider to use temporary credentials obtained by assuming the specified IAM role in another AWS account, facilitating cross-account resource management.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_37

LANGUAGE: HCL
CODE:
```
provider "aws" {
  region = "us-west-1"
  alias = "some-region"

  assume_role {
    role_arn = "arn:aws:iam::<SOME_ACCOUNT_ID>:role/<SOME_ROLE_NAME>"
  }
}
```

----------------------------------------

TITLE: Counting by Date Range SQL
DESCRIPTION: This SQL query counts rows from the 'shawarma_purchases' table where the 'purchased_at' date falls within the range of 2017-01-01 to 2017-12-31. Using a direct range comparison on the column is generally more performant than applying a function, as it allows the database to utilize indexes on the 'purchased_at' column.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_16

LANGUAGE: SQL
CODE:
```
SELECT count(*)
FROM shawarma_purchases
WHERE
  purchased_at >= '2017-01-01' AND
  purchased_at <= '2017-31-12'
```

----------------------------------------

TITLE: Performing Basic OpenShift Project Operations with oc (Shell)
DESCRIPTION: This snippet demonstrates a sequence of fundamental OpenShift commands to manage projects. It includes logging into the cluster, listing existing projects (which might be empty in a new setup), creating a new project named 'neverland', and finally checking the status of the currently active project.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/openshift/solutions/projects_101.md#_snippet_0

LANGUAGE: shell
CODE:
```
oc login -u YOUR_USER -p YOUR_PASSWORD_OR_TOKEN
oc get projects # Empty output in new cluster
oc new-project neverland
oc status
```

----------------------------------------

TITLE: Finding Kubelet Config Path via Process List Bash
DESCRIPTION: Lists all running processes and filters for 'kubelet' to find the kubelet process command line arguments, which may include the `--config` flag specifying the full path to its configuration file. Requires shell access and execution permission on the node.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_14

LANGUAGE: bash
CODE:
```
ps -ef | grep kubelet
```

----------------------------------------

TITLE: Create Kubernetes Service YAML File Shell
DESCRIPTION: Uses a shell heredoc (`cat << EOF`) to create a file named `nginx-service.yaml`. This file contains the definition for a Kubernetes Service resource. The service is named 'nginx-service', uses a selector 'app=dev-nginx' to find target pods, and maps external port 80 to container port 9372.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/services_01_solution.md#_snippet_1

LANGUAGE: shell
CODE:
```
cat << EOF > nginx-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: dev-nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9372
EOF
```

LANGUAGE: yaml
CODE:
```
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: dev-nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9372
```

----------------------------------------

TITLE: Extracting First Word of Line using Regex
DESCRIPTION: This regular expression pattern ^\w+ matches the first word at the beginning of a line. The ^ anchors the match to the start of the line, and \w+ matches one or more "word" characters (letters, numbers, and underscore).
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_25

LANGUAGE: Regex
CODE:
```
^\w+
```

----------------------------------------

TITLE: Comparing Directories with Bash Script Checksum and Diff
DESCRIPTION: This Bash script compares two directories. It first checks if the sorted list of filenames in both directories have the same MD5 checksum. If they do, it assumes no difference (though this is a weak check). Otherwise, it uses `diff -q` to list files that differ or are unique at the top level. It requires exactly two directory arguments.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/solutions/directories_comparison.md#_snippet_0

LANGUAGE: bash
CODE:
```
#!/bin/bash

if test $# -ne 2
then
	echo -e "USAGE: ./dirdiff.sh directory1 directory2"
	exit 1
fi

# check for the checksums. 
# If both the checksums same, then both directories are same
if test `ls -1 $1 | sort | md5sum | awk -F "  " '{print $1}'` == `ls -1 $2 | sort | md5sum | awk -F "  " '{print $1}'`
then
	echo -e "No difference between the 2 directories"
	exit 0
fi

diff -q $1 $2
```

----------------------------------------

TITLE: Listing Recent User Logins (last, Bash)
DESCRIPTION: Introduces the last command used to display a list of the last logged-in users on the system. It reads from /var/log/wtmp to show login and logout times.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_83

LANGUAGE: bash
CODE:
```
last
```

----------------------------------------

TITLE: Conditionally Installing Packages Based on File Existence Ansible
DESCRIPTION: An Ansible playbook that installs a list of packages ('zlib', 'vim') on all hosts. The installation is conditional, only proceeding if the file '/tmp/mario' exists on the target system, checked using the 'stat' module and a 'when' condition.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/ansible/README.md#_snippet_4

LANGUAGE: yaml
CODE:
```
---
- hosts: all
  vars:
      mario_file: /tmp/mario
      package_list:
          - 'zlib'
          - 'vim'
  tasks:
      - name: Check for mario file
        stat:
            path: "{{ mario_file }}"
        register: mario_f

      - name: Install zlib and vim if mario file exists
        become: "yes"
        package:
            name: "{{ item }}"
            state: present
        with_items: "{{ package_list }}"
        when: mario_f.stat.exists
```

----------------------------------------

TITLE: Matching Non-Specified Single Characters with Globbing (Bash)
DESCRIPTION: Demonstrates shell globbing using `[]` with the caret `^`. This command example shows how `ls [^XYZ]` matches any single character *except* 'X', 'Y', or 'Z' in the current directory's filenames when listing files.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_42

LANGUAGE: Bash
CODE:
```
ls [^XYZ]
```

----------------------------------------

TITLE: Initial Single-Stage Dockerfile Build
DESCRIPTION: This Dockerfile represents a typical single-stage build process for an application served by Nginx. It installs all build-time dependencies (like Node.js, npm, bower, build tools, git) and the application code within a single layer, resulting in a larger final image size that includes components not needed at runtime. The user is tasked with refactoring this into a multi-stage build.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/multi_stage_builds.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM nginx
RUN apt-get update \
 && apt-get install -y curl python build-essential \
 && apt-get install -y nodejs \
 && apt-get clean -y
RUN mkdir -p /my_app
ADD ./config/nginx/docker.conf /etc/nginx/nginx.conf
ADD ./config/nginx/k8s.conf /etc/nginx/nginx.conf.k8s
ADD app/ /my_cool_app
WORKDIR /my_cool_app
RUN npm install -g ember-cli
RUN npm install -g bower
RUN apt-get update && apt-get install -y git \
 && npm install \
 && bower install \
RUN ember build — environment=prod
CMD [ "/root/nginx-app.sh", "nginx", "-g", "daemon off;" ]
```

----------------------------------------

TITLE: Compressing String using RLE (Python)
DESCRIPTION: This Python function `compress_str` implements a basic run-length encoding algorithm. It iterates through the input string, counts consecutive identical characters, and appends the character followed by its count to the result string. It handles empty strings and single-character strings correctly.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/python/solutions/compress_string_solution.md#_snippet_0

LANGUAGE: python
CODE:
```
def compress_str(mystr: str) -> str:

	result = ''

	if mystr:
		prevchar = mystr[0]
	else:
		return result

	count = 1
	for nextchar in mystr[1:]:
		if nextchar == prevchar:
			count += 1
		else:
			result += prevchar + str(count)
			count = 1
			prevchar = nextchar

	result += prevchar + str(count)
	return result
```

----------------------------------------

TITLE: Demonstrating Fork System Call in C
DESCRIPTION: This C program includes standard I/O and the unistd header for the `fork()` system call. The `main` function calls `fork()`, which creates a new process (the child) that is a copy of the parent from that point onwards. Both the original parent process and the newly created child process then proceed to execute the code that follows the `fork()` call, including the `printf` statement.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/os/fork_101.md#_snippet_0

LANGUAGE: C
CODE:
```
#include<stdio.h>
#include <unistd.h> 
int main()
{
  fork();
  printf("\nyay\n");
  return 0;
}
```

----------------------------------------

TITLE: Creating EFS Mount Directory - Shell
DESCRIPTION: Creates a new directory named `efs` in the current working directory. This directory will serve as the local mount point for the Amazon EFS file system on the EC2 instance.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/create_efs/solution.md#_snippet_1

LANGUAGE: Shell
CODE:
```
mkdir efs
```

----------------------------------------

TITLE: Comparing Echo with/without Quotes (Shell)
DESCRIPTION: Demonstrates the behavior of the `echo` command when given multiple arguments versus a single quoted string. Both examples produce the same output, showing how `echo` concatenates separate arguments with a space.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_8

LANGUAGE: shell
CODE:
```
echo hello world
echo "hello world"
```

----------------------------------------

TITLE: Removing Instance Labels using gcloud
DESCRIPTION: This command removes the specific label `env` from the Compute Engine instance named "instance-1". It's used to clean up or modify the labeling scheme for an instance.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/gcp/README.md#_snippet_3

LANGUAGE: Shell
CODE:
```
gcloud compute instances update instance-1 --remove-labels env
```

----------------------------------------

TITLE: Checking Docker Installation Status Shell
DESCRIPTION: Commands to verify Docker installation using `rpm -qa | grep docker` and check the Docker service status using `systemctl status docker` on RHEL-based systems.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/run_forest_run.md#_snippet_0

LANGUAGE: Shell
CODE:
```
# Fedora/RHEL/CentOS
rpm -qa | grep docker
systemctl status docker
```

----------------------------------------

TITLE: Restarting Docker Service Shell (Always Policy Test)
DESCRIPTION: Restarts the Docker daemon using `sudo systemctl restart docker` to observe if containers configured with the 'always' restart policy are automatically restarted after the service comes back online.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/run_forest_run.md#_snippet_5

LANGUAGE: Shell
CODE:
```
sudo systemctl restart docker
```

----------------------------------------

TITLE: Checking Docker Status (Shell)
DESCRIPTION: This snippet provides shell commands to check if Docker is installed and the Docker service is running on Fedora/RHEL/CentOS systems. It uses `rpm -qa` to list packages and `systemctl status` to check service status.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/image_layers.md#_snippet_0

LANGUAGE: Shell
CODE:
```
rpm -qa | grep docker
systemctl status docker
```

----------------------------------------

TITLE: Apply SELinux Context Changes (Shell)
DESCRIPTION: This command reapplies the SELinux contexts based on the current policy and file context rules to the specified host directory '/tmp/dir_on_the_host'. It makes the context change set by 'semanage fcontext' effective.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_39

LANGUAGE: shell
CODE:
```
sudo restorecon -Rv /tmp/dir_on_the_host
```

----------------------------------------

TITLE: Removing HTTP Inbound Rule from Security Group (AWS CLI)
DESCRIPTION: Revokes a specific inbound rule (TCP on port 80 from 0.0.0.0/0) from a specified security group. This action denies traffic matching the rule and requires the AWS CLI configured with permissions to modify security groups.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/security_groups/solution.md#_snippet_1

LANGUAGE: bash
CODE:
```
aws ec2 revoke-security-group-ingress \
    --group-name someHTTPSecurityGroup \
    --protocol tcp \
    --port 80 \
    --cidr 0.0.0.0/0
```

----------------------------------------

TITLE: Sharing Container Image Without Registry (Podman/rsync)
DESCRIPTION: This snippet demonstrates how to share a container image between two hosts without using a central registry. It involves saving the image to a tar file on the source host, transferring the file using rsync, and loading the image from the tar file on the destination host.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_22

LANGUAGE: shell
CODE:
```
# On the local host
podman save -o some_image.tar IMAGE
rsync some_image.tar SOME_HOST

# On the remote host
podman load -i some_image.tar
```

----------------------------------------

TITLE: Declaring Required Provider Without Source/Version - Terraform HCL
DESCRIPTION: Declares the `aws` provider as required in the `terraform` block but omits the `source` and `version` arguments. When `terraform init` is run, Terraform will automatically look for the provider in the default registry (`registry.terraform.io/hashicorp/aws`) and fetch the latest suitable version.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/terraform/README.md#_snippet_5

LANGUAGE: HCL
CODE:
```
terraform {
    required_providers {
      aws = {}
    }
  }
```

----------------------------------------

TITLE: SQL Select with WHERE Clause
DESCRIPTION: This SQL query selects the 'Items_in_cart' column from the 'Customers' table but filters the results using a `WHERE` clause to only include rows where the 'Customer_Name' is exactly 'John Smith'. It's used to retrieve specific data based on a condition.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/tests/testcases/testcase2.md#_snippet_5

LANGUAGE: SQL
CODE:
```
Select Items_in_cart
From Customers
Where Customer_Name = "John Smith";
```

----------------------------------------

TITLE: Creating NodePort Service from Deployment Workflow (Bash, YAML)
DESCRIPTION: This workflow demonstrates how to create a NodePort Service manifest from an existing deployment using dry run, manually edit it to ensure selectors match, and then apply the configuration to create the Service.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_3

LANGUAGE: bash
CODE:
```
kubectl expose deployment jabulik --name=jabulik-service --target-port=8080 --type=NodePort --port=8080 --dry-run=client -o yaml -> svc.yaml
```

LANGUAGE: bash
CODE:
```
vi svc.yaml
```

LANGUAGE: bash
CODE:
```
k apply -f svc.yaml
```

----------------------------------------

TITLE: Testing Perl Code with Test::Simple (Failure)
DESCRIPTION: This command executes a Perl one-liner using the Test::Simple module to perform an assertion that is expected to fail. It loads the module with tests => 1 and uses ok() to check if 1 + 1 == 3 is true, demonstrating the output when a test fails.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/perl/README.md#_snippet_7

LANGUAGE: Shell
CODE:
```
perl -M'Test::Simple tests => 1' -e 'ok( 1 + 1 == 3 );'
```

----------------------------------------

TITLE: Testing Perl Code with Test::Simple (Success)
DESCRIPTION: This command executes a Perl one-liner using the Test::Simple module to perform a basic assertion. It loads the module with tests => 1 and uses the ok() function to check if the expression 1 + 1 == 2 evaluates to true, demonstrating a successful test output.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/perl/README.md#_snippet_6

LANGUAGE: Shell
CODE:
```
perl -M'Test::Simple tests => 1' -e 'ok( 1 + 1 == 2 );'
```

----------------------------------------

TITLE: Checking Kubernetes ReplicaSet Container Image (Shell)
DESCRIPTION: This command uses the 'kubectl describe' command (aliased as 'k') on a ReplicaSet named 'repli' and filters the output using 'grep' to find the container image name used in the pod template. The '-i' flag makes the search case-insensitive.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_71

LANGUAGE: Shell
CODE:
```
k describe rs repli | grep -i image
```

----------------------------------------

TITLE: Finding Process ID - Shell
DESCRIPTION: Uses the `ps aux` command to list all running processes in a user-friendly format, piping the output to `grep` to filter and find the line containing the specified script name. This is a common method to obtain the Process ID (PID) of a running application.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_94

LANGUAGE: Shell
CODE:
```
ps aux | grep yourscriptname.sh
```

----------------------------------------

TITLE: Manually Promoting Argo Rollout (Shell)
DESCRIPTION: Command to manually promote a specific Argo Rollout resource `SOME-APP` to the next stage, typically used during manual approval steps in a canary or blue/green strategy. Requires kubectl and the Argo Rollouts kubectl plugin, and the name of the target rollout.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/README.md#_snippet_13

LANGUAGE: shell
CODE:
```
kubectl argo rollouts promote SOME-APP
```

----------------------------------------

TITLE: Creating NodePort Service for ReplicaSet using Kubectl Expose
DESCRIPTION: This command imperatively creates a Kubernetes Service of type NodePort for a ReplicaSet named "some-replicaset". The service is named "replicaset-svc", exposes the application on port 2017, and makes it accessible on a static port on each Node in the cluster.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_48

LANGUAGE: kubectl
CODE:
```
kubectl expose rs some-replicaset --name=replicaset-svc --target-port=2017 --type=NodePort
```

----------------------------------------

TITLE: Retrieving Hardware Information (dmidecode, Bash)
DESCRIPTION: Introduces the dmidecode command, which reads DMI (Desktop Management Interface) or SMBIOS (System Management BIOS) data. This provides detailed information about system hardware components like BIOS, motherboard, processor, and RAM.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_87

LANGUAGE: bash
CODE:
```
dmidecode
```

----------------------------------------

TITLE: Verifying AWS VPC Creation using CLI
DESCRIPTION: This command uses the AWS CLI to describe VPCs. It filters the results to find the VPC with the tag `Name` set to `exercise-vpc`. This verifies that the VPC was successfully created and tagged correctly. Requires AWS CLI installed and configured with credentials.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/new_vpc/solution.md#_snippet_0

LANGUAGE: AWS CLI
CODE:
```
aws ec2 describe-vpcs -filters Name=tag:Name,Values=exercise-vpc
```

----------------------------------------

TITLE: Creating Pod with Node Selector Workflow (Bash, YAML)
DESCRIPTION: This workflow shows how to generate a Pod manifest using dry run, manually add a node selector configuration to schedule the pod on nodes with a specific label, and then apply the manifest.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_28

LANGUAGE: bash
CODE:
```
kubectl run some-pod --image=redis --dry-run=client -o yaml > pod.yaml
```

LANGUAGE: bash
CODE:
```
vi pod.yaml
```

LANGUAGE: yaml
CODE:
```
spec:
  nodeSelector:
    hw: max
```

LANGUAGE: bash
CODE:
```
kubectl apply -f pod.yaml
```

----------------------------------------

TITLE: Debugging Pod Status (kubectl, Shell)
DESCRIPTION: Provides detailed information about a specific pod, including its current state, events, and status conditions, which is crucial for diagnosing issues like `CrashLoopBackOff`. Requires the name of the problematic pod.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_146

LANGUAGE: Shell
CODE:
```
kubectl describe pod POD_NAME
```

----------------------------------------

TITLE: Describing Kubernetes ReplicaSet Status
DESCRIPTION: Retrieves detailed information about the 'web' ReplicaSet, including its status, events, desired number of replicas, current number of replicas, and details about its controlled pods. This helps verify the ReplicaSet's reaction to the disowned pod.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/replicaset_03_solution.md#_snippet_4

LANGUAGE: bash
CODE:
```
kubectl describe rs web
```

----------------------------------------

TITLE: Redirecting Standard Error (Shell)
DESCRIPTION: Shows redirecting the standard error (`stderr`, file descriptor 2) of a command to a file (`error.txt`). In this example, `ls` on a non-existent directory will produce stderr, which is sent to the file instead of the console. Requires `ls` and a shell.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_14

LANGUAGE: shell
CODE:
```
ls /some/nonexistent/directory 2> error.txt
```

----------------------------------------

TITLE: Deploying Pod Kubernetes Shell
DESCRIPTION: Deploys a Kubernetes pod named 'web-1985' using the 'nginx:alpine' container image. The '--restart=Never' flag prevents the pod from automatically restarting if it terminates with an error, which is a requirement for certain CKAD scenarios.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/certificates/ckad.md#_snippet_0

LANGUAGE: Shell
CODE:
```
kubectl run web-1985 --image=nginx:alpine --restart=Never
```

----------------------------------------

TITLE: Pushing Docker Image to Registry (Shell)
DESCRIPTION: Provides the commands to log in to a Docker registry, tag the locally built image with the appropriate registry username, and push the image to the remote registry. This step is optional for local development but required for sharing.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/devops/solutions/containerize_app.md#_snippet_4

LANGUAGE: shell
CODE:
```
docker login
docker image tag web_app:latest <your username>/web_app:latest
docker image push <your username>/web_app:latest
```

----------------------------------------

TITLE: Showing File Authorship (Git, Bash)
DESCRIPTION: This command shows the author and commit information for each line of a file. It can implicitly indicate if a file is tracked, as untracked files have no history. Useful for code archaeology and verifying tracking.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
git blame <file>
```

----------------------------------------

TITLE: Displaying Mounts via Proc Filesystem (Bash)
DESCRIPTION: Read the contents of the /proc/mounts file to see detailed information about the currently mounted filesystems. This is an alternative method to the `mount` command and is often used by system utilities.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_49

LANGUAGE: Bash
CODE:
```
cat /proc/mounts
```

----------------------------------------

TITLE: Deploying Template File Conditionally by Host Group in Ansible
DESCRIPTION: An Ansible playbook that deploys a template file ('system_info.j2') to '/tmp/system_info' on all hosts except those in the 'controllers' group. It uses the 'template' module for deployment.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/ansible/README.md#_snippet_6

LANGUAGE: yaml
CODE:
```
---
- name: Deploy /tmp/system_info file
  hosts: all:!controllers
  tasks:
      - name: Deploy /tmp/system_info
        template:
            src: system_info.j2
            dest: /tmp/system_info
```

----------------------------------------

TITLE: Finding Pod Node Information using kubectl
DESCRIPTION: This command retrieves a list of all Pods in the current namespace and displays them in 'wide' output format. The 'wide' format includes additional information such as the node on which each Pod is running.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/certificates/cka.md#_snippet_1

LANGUAGE: Kubernetes CLI
CODE:
```
kubectl get po -o wide
```

----------------------------------------

TITLE: Defining Application Data in YAML
DESCRIPTION: This snippet demonstrates how to represent structured data, specifically a list of applications with properties like name, language, and version, using the YAML data serialization format, highlighting its indentation-based structure.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_19

LANGUAGE: YAML
CODE:
```
applications:
  - app: "my_app"
    language: "python"
    version: 20.17
```

----------------------------------------

TITLE: Checking Divisibility in Shell
DESCRIPTION: Checks if the first command-line argument (`$1`) is divisible by 4. It uses arithmetic expansion `$((...))` to calculate the remainder (`%`) and the `[` (test) command with `-eq 0` to check if the remainder is zero.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/README.md#_snippet_12

LANGUAGE: Shell
CODE:
```
if [ $(($1 % 4)) -eq 0 ]; then
```

----------------------------------------

TITLE: Viewing Specific Container Logs Kubectl
DESCRIPTION: Retrieves and prints logs for a specific container within a multi-container pod. The `-c` flag is used to specify the target container by name. Necessary when a pod contains more than one container.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_29

LANGUAGE: kubectl
CODE:
```
kubectl logs POD_NAME -c CONTAINER_NAME
```

----------------------------------------

TITLE: Adding Toleration to Pod Spec (YAML)
DESCRIPTION: Adds a `tolerations` block to a Pod specification YAML. This allows the Pod to be scheduled on nodes that have matching taints, effectively ignoring the taint's effect.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_139

LANGUAGE: YAML
CODE:
```
  - effect: NoSchedule
    key: app
    operator: Equal
    value: web
```

----------------------------------------

TITLE: Enabling IPv4 Forwarding via Procfs (Bash)
DESCRIPTION: Shows an alternative method to temporarily enable IPv4 forwarding by writing the value '1' directly to the corresponding file in the `/proc/sys` filesystem using `echo` and `tee` with `sudo`. This change is not persistent.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_38

LANGUAGE: Bash
CODE:
```
echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward
```

----------------------------------------

TITLE: Listing Kernel Runtime Parameters (Bash)
DESCRIPTION: Shows how to list all current kernel runtime parameters and their values using the `sysctl` command with the `-a` flag. Notes potential differences in output based on user privileges (root vs. regular user).
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_36

LANGUAGE: Bash
CODE:
```
sysctl -a
```

----------------------------------------

TITLE: Creating File of Specific Size using dd Shell
DESCRIPTION: This `dd` command is used to create a file named `new_file.txt` with a size of 2 megabytes. It works by reading 1 block (`count=1`) of 2 megabytes (`bs=2MB`) from the `/dev/urandom` device (a source of random data) and writing it directly to the output file. This method is versatile but can be slower for simple size allocation.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_91

LANGUAGE: Shell
CODE:
```
dd if=/dev/urandom of=new_file.txt bs=2MB count=1
```

----------------------------------------

TITLE: Creating Deployment Manager Deployment using gcloud
DESCRIPTION: This command initiates the creation of a new deployment using Google Cloud Deployment Manager. It's used to deploy infrastructure defined by configuration files. The command typically requires additional arguments specifying the configuration.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/gcp/README.md#_snippet_7

LANGUAGE: Shell
CODE:
```
gcloud deployment-manager deployments create
```

----------------------------------------

TITLE: Assigning a Tuple in Python
DESCRIPTION: This snippet assigns a tuple literal to the variable `d`. Tuples are ordered, immutable sequences typically enclosed in parentheses `()`. The exercise requires identifying the `tuple` data type.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/python/advanced_data_types.md#_snippet_3

LANGUAGE: Python
CODE:
```
d = (1, 2, 3)
```

----------------------------------------

TITLE: Verifying initial web server accessibility with Curl
DESCRIPTION: Uses the 'curl' command to access the web server running on localhost port 80. This verifies that the initial Nginx welcome page is being served by the container.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/commit_image.md#_snippet_1

LANGUAGE: bash
CODE:
```
curl 127.0.0.1:80
```

----------------------------------------

TITLE: Describing a Pod Kubectl
DESCRIPTION: Displays detailed information about a specific pod, including its current state, events, labels, annotations, container details, volume mounts, and conditions. Essential for debugging pod issues.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_25

LANGUAGE: kubectl
CODE:
```
kubectl describe pod [pod name]
```

----------------------------------------

TITLE: Committing Podman container changes to a new image
DESCRIPTION: Creates a new image named 'nginx_mario' from the current state of the 'nginx_container'. This new image includes the changes made inside the container, such as the copied 'index.html'. Requires the container to be running.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/commit_image.md#_snippet_4

LANGUAGE: bash
CODE:
```
podman commit nginx_container nginx_mario
```

----------------------------------------

TITLE: Listing Processes in Kubernetes Pod (Shell)
DESCRIPTION: Executes the standard `ps` command inside the running 'web' pod using `kubectl exec` to list the processes currently active within the container. This verifies the web service process is running.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/solutions/killing_containers.md#_snippet_1

LANGUAGE: Shell
CODE:
```
kubectl exec web -- ps
```

----------------------------------------

TITLE: Creating a New Branch (Git, Bash)
DESCRIPTION: This command creates a new branch named <BRANCH> pointing to the current commit. It's a fundamental operation for creating separate lines of development within a repository.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_10

LANGUAGE: bash
CODE:
```
git branch <BRANCH>
```

----------------------------------------

TITLE: Defining Ansible Inventory
DESCRIPTION: Example of an Ansible inventory file defining hosts and host groups using a mixed INI/YAML-like format. Hosts can be listed individually or grouped into categories.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/ansible/README.md#_snippet_0

LANGUAGE: yaml
CODE:
```
192.168.1.2
192.168.1.3
192.168.1.4

[web_servers]
190.40.2.20
190.40.2.21
190.40.2.22
```

----------------------------------------

TITLE: Listing Container Images Podman Shell
DESCRIPTION: Lists the container images currently stored on the local host. It uses a variable to specify the container binary (Podman in this case). An alternative command using CONTAINER_RUNTIME is also mentioned.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_12

LANGUAGE: shell
CODE:
```
CONTAINER_BINARY=podman
$CONTAINER_BINARY images
```

----------------------------------------

TITLE: Listing Docker Images (Shell)
DESCRIPTION: Lists all Docker images available locally on the system. This command is used to verify that the image built in the previous step was successfully created and is present.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/devops/solutions/containerize_app.md#_snippet_3

LANGUAGE: shell
CODE:
```
docker image ls
```

----------------------------------------

TITLE: Calculating Sum SQL
DESCRIPTION: This SQL query calculates the total sum of the 'Cash_spent_to_Date' column across all rows in the 'Customers' table. The result is aliased as 'SUM_CASH'.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_11

LANGUAGE: SQL
CODE:
```
Select SUM(Cash_spent_to_Date) as SUM_CASH
From Customers;
```

----------------------------------------

TITLE: Enabling IPv4 Forwarding Temporarily (Bash)
DESCRIPTION: Demonstrates using `sysctl` with `sudo` to temporarily set a specific kernel parameter, enabling IPv4 forwarding by setting `net.ipv4.ip_forward` to 1. This change is not persistent across reboots.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_37

LANGUAGE: Bash
CODE:
```
sudo sysctl net.ipv4.ip_forward=1
```

----------------------------------------

TITLE: Applying Expressions with iota in Constants Go
DESCRIPTION: This Go snippet shows how an expression applied to `iota` in a constant declaration affects subsequent constants in the same block. Although the first value is discarded using the blank identifier `_`, the expression `iota + 3` is evaluated. For the next constant `x`, `iota` increments and the expression `iota + 3` is implicitly used again, resulting in 1+3=4.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_5

LANGUAGE: go
CODE:
```
package main

import "fmt"

const (
	_ = iota + 3
	x
)

func main() {
	fmt.Printf("%v\n", x)
}
```

----------------------------------------

TITLE: Extracting CSV Field with Awk (Shell)
DESCRIPTION: Shows how to use `awk` with the `-F` flag to set the field separator to a comma (',') and print (`print`) the first field (`$1`) of each line in a CSV file named `file.csv`. Requires the `awk` utility and the target file.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_4

LANGUAGE: shell
CODE:
```
awk -F ',' '{print $1}' file.csv
```

----------------------------------------

TITLE: Restoring Execute Permissions on chmod using ACLs (setfacl)
DESCRIPTION: Provides a command using setfacl (Access Control Lists) with sudo to explicitly set read and execute permissions ('rx') for the file owner ('u::') on the /usr/bin/chmod executable, fixing accidental permission removal that might prevent chmod from being run.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_23

LANGUAGE: bash
CODE:
```
sudo setfacl -m u::rx /usr/bin/chmod
```

----------------------------------------

TITLE: Enabling ManyFile Feature (Git, Bash)
DESCRIPTION: This command sets the 'feature.manyFiles' configuration option to true. It implicitly sets 'index.version' to 4 and 'core.untrackedCache' to true, optimizing Git operations for repositories with a large number of files.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
git config feature.manyFiles true
```

----------------------------------------

TITLE: Debugging Variable Type - Ansible Jinja2
DESCRIPTION: Shows how to use the type_debug filter in Jinja2 to output the data type of an Ansible variable, helpful for debugging playbook logic.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/ansible/README.md#_snippet_13

LANGUAGE: Jinja2
CODE:
```
"{{ some_var | type_debug }}"
```

----------------------------------------

TITLE: Assigning a List Literal in Python
DESCRIPTION: This snippet assigns a list literal `[1, 2, 3]` to the variable `c`. Lists are ordered, mutable sequences enclosed in square brackets `[]`. The outer parentheses `()` are redundant but do not change the fact that a list is assigned. The exercise requires identifying the `list` data type.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/python/advanced_data_types.md#_snippet_2

LANGUAGE: Python
CODE:
```
c = ([1, 2, 3])
```

----------------------------------------

TITLE: Implementing Perl Exception Handling with eval
DESCRIPTION: This code demonstrates Perl's eval block for exception handling. It executes a block of code that is expected to fail (die) and then checks the special variable $@ to capture and print the error details, effectively simulating a try...catch mechanism.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/perl/README.md#_snippet_1

LANGUAGE: Perl
CODE:
```
eval {
    die;
};
if ($@) {
    print "Error. Details: $@";
}
```

----------------------------------------

TITLE: Custom HTML Content for Web Server Index
DESCRIPTION: This HTML snippet provides the content for a custom index.html file. The exercise involves creating this file locally and then copying it into a running container's web server root directory so it becomes the default page served.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/commit_image.md#_snippet_0

LANGUAGE: HTML
CODE:
```
<html>\n<head>\n<title>It's a me</title>\n</head>\n<body>\n<h1>Mario</h1>\n</body>
```

----------------------------------------

TITLE: Manually Installing Grafana Plugin - Shell
DESCRIPTION: This shell command demonstrates how to manually install a Grafana plugin by extracting a downloaded zip archive. The command unzips the plugin file into the specified plugin directory, which is an alternative method to using the Grafana CLI, especially for offline installations or custom plugins.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/grafana/README.md#_snippet_1

LANGUAGE: shell
CODE:
```
unzip my-plugin-0.2.0.zip -d YOUR_PLUGIN_DIR/my-plugin
```

----------------------------------------

TITLE: Restoring Running Script - Linux Shell
DESCRIPTION: Leverages the Linux `/proc` filesystem to access the file descriptor (`fd`) of a running process (`<PID>`). File descriptor `0` often corresponds to the script itself. The `cp` command copies the content from this file descriptor to a new location, effectively restoring the script file.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_95

LANGUAGE: Shell
CODE:
```
cp /proc/<PID>/fd/0 /path_to_restore_your_file/yourscriptname.sh
```

----------------------------------------

TITLE: Reversing String Iteratively - Python
DESCRIPTION: This Python function reverses a string by iterating through its characters and prepending each character to a temporary string. While conceptually clear, this method is generally less efficient than slicing due to repeated string concatenation in a loop.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/python/solutions/reverse_string.md#_snippet_1

LANGUAGE: Python
CODE:
```
def reverse_string(string):
    temp = ""
    for char in string:
        temp =  char + temp
    return temp
```

----------------------------------------

TITLE: Checking containerd Process (Shell)
DESCRIPTION: This shell command lists all running processes (`ps -ef`) and filters them to find lines containing 'containerd' (case-insensitive, `grep -i containerd`). It is used to verify that the containerd process is running on a system with Docker installed, illustrating its role as a high-level runtime.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_40

LANGUAGE: Shell
CODE:
```
ps -ef | grep -i containerd
```

----------------------------------------

TITLE: Building Docker Image (Shell)
DESCRIPTION: This command builds a Docker image from a Dockerfile located in the current directory. It tags the resulting image with the name `super_cool_app` and the tag `latest`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/image_layers.md#_snippet_2

LANGUAGE: Shell
CODE:
```
docker image build -t super_cool_app:latest .
```

----------------------------------------

TITLE: Listing All Objects by Label Selector (Bash)
DESCRIPTION: This command lists all Kubernetes resource types in the current namespace that have the specific label 'env=staging'.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_25

LANGUAGE: bash
CODE:
```
k get all -l env=staging
```

----------------------------------------

TITLE: Listing Running Docker Containers Shell
DESCRIPTION: Uses `docker container ls` to display active containers, used here to check if the 'forest' container is running and its status after executing its command.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/solutions/run_forest_run.md#_snippet_2

LANGUAGE: Shell
CODE:
```
docker container ls
```

----------------------------------------

TITLE: Modifying NetworkManager DNS Settings (Shell)
DESCRIPTION: Illustrates how to use `nmcli con mod` to change the IPv4 DNS server for a specific NetworkManager connection identified by its name. The example sets the DNS to `8.8.8.8` (Google Public DNS).
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_72

LANGUAGE: Shell
CODE:
```
# nmcli con mod "System ens5" ipv4.dns "8.8.8.8"
```

----------------------------------------

TITLE: Running a Container (Podman)
DESCRIPTION: Demonstrates the basic command to run a container from an image using Podman. By default, it runs the image's entrypoint command and exits unless configured otherwise.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
podman run ubuntu
```

----------------------------------------

TITLE: Listing Argo Rollouts Resources (Shell)
DESCRIPTION: Command to list all Argo Rollout resources currently deployed in the Kubernetes cluster. Useful for getting an overview of active rollouts and their statuses. Requires kubectl and the Argo Rollouts kubectl plugin.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/argo/README.md#_snippet_9

LANGUAGE: shell
CODE:
```
kubectl argo rollouts list rollouts
```

----------------------------------------

TITLE: Triggering IPv6 Neighbor Discovery (Shell)
DESCRIPTION: Demonstrates how to trigger IPv6 Neighbor Discovery using the `ping6` command by sending a ping to the all-nodes multicast address `ff02::1`, which prompts local nodes to respond with their link-layer addresses.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_69

LANGUAGE: Shell
CODE:
```
ping6 ff02::1
```

----------------------------------------

TITLE: Using CTE for Aggregation and Join SQL
DESCRIPTION: This SQL query uses a Common Table Expression (CTE) named 'cat_food' to first aggregate the total price spent on items like '%Cat Food%' per Customer_ID from the 'Orders' table. It then joins this CTE with the 'Customers' table to show the customer name and their total spending on cat food, demonstrating the use of a 'WITH' clause for modular queries.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_14

LANGUAGE: SQL
CODE:
```
with cat_food as (
Select Customer_ID, SUM(Price) as TOTAL_PRICE
From Orders
Where Item like "%Cat Food%"
Group by Customer_ID
)
Select Customer_name, TOTAL_PRICE
From Customers c
Inner JOIN cat_food f
  ON c.Customer_ID = f.Customer_ID
where c.Customer_ID in (Select Customer_ID from cat_food);
```

----------------------------------------

TITLE: Executing Shell Commands with IPC::Open3 in Perl
DESCRIPTION: This Perl script utilizes the IPC::Open3 module to execute external shell commands and capture their standard output. It defines a reusable execute_command subroutine that wraps the open3 call, handles potential errors with eval, and is then used to create a large file with truncate and verify its size using stat.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/perl/README.md#_snippet_2

LANGUAGE: Perl
CODE:
```
use IPC::Open3;
use Data::Dumper;

sub execute_command {
    my @command_to_execute = @_;
    my ($stdin, $stdout, $stderr);
    eval {
        open3($stdin, $stdout, $stderr, @command_to_execute);
    };
    if ($@) {
        print "Error. Details: $@";
    }
    close($stdin);
    return $stdout;
}

my $file_name = 'perl_open3_test';
&execute_command('truncate', '-s', '15M', $file_name);
my $result = &execute_command('stat', '-c', '%s', $file_name);
print Dumper(<$result>);
```

----------------------------------------

TITLE: Set SELinux Context for Mounted Directory (Shell)
DESCRIPTION: On systems using SELinux (like Fedora, RHEL), this command adds a file context rule. It tells SELinux to label the host directory '/tmp/dir_on_the_host' (and anything within it) with the 'container_file_t' type, which permits container processes to access it.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_38

LANGUAGE: shell
CODE:
```
sudo semanage fcontext -a -t container_file_t '/tmp/dir_on_the_host(/.*)?'
```

----------------------------------------

TITLE: Deleting Kubernetes ReplicaSet (Bash)
DESCRIPTION: This command deletes a specific ReplicaSet named 'rori'.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_7

LANGUAGE: bash
CODE:
```
k delete rs rori
```

----------------------------------------

TITLE: Assigning Python Integer
DESCRIPTION: Assigns an integer value to the variable 'e'. This demonstrates the integer data type in Python.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/python/data_types.md#_snippet_2

LANGUAGE: python
CODE:
```
e = 100
```

----------------------------------------

TITLE: Assigning a Dictionary in Python
DESCRIPTION: This snippet assigns a dictionary literal to the variable `b`. Dictionaries are collections of key-value pairs, also enclosed in curly braces `{}` with keys and values separated by a colon `:`. The exercise requires identifying the `dict` data type.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/python/advanced_data_types.md#_snippet_1

LANGUAGE: Python
CODE:
```
b = {'1': '2'}
```

----------------------------------------

TITLE: Generating Random Number with shuf
DESCRIPTION: Generates a single (`-n 1`) random integer within the range of 9,999,999 to 99,999,999 (inclusive) using the `shuf` command. This produces an 8-digit number.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/README.md#_snippet_16

LANGUAGE: Shell
CODE:
```
shuf -i 9999999-99999999 -n 1
```

----------------------------------------

TITLE: Demonstrating Perl OOP Inheritance
DESCRIPTION: This snippet illustrates basic object-oriented programming in Perl. It defines two packages (classes), A and B, where B inherits from A using use parent. It shows the standard new constructor and a simple method printA, then instantiates B and calls the inherited method.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/perl/README.md#_snippet_0

LANGUAGE: Perl
CODE:
```
package A;

sub new { return bless {}, shift; };
sub printA { print "A"; };

# Class `B` that extends or use the parent class `A`.
package B;

use parent -norequire, 'A';

sub new { return bless {}, shift; };

# Instance class `B` allows call the inherited method
my $b = B->new();
$b->printA();
```

----------------------------------------

TITLE: Defining a Capitalize Filter Function - Python
DESCRIPTION: Provides a simple Python function cap that takes a string and returns its capitalized version, intended to be used as a custom filter within Ansible playbooks.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/ansible/README.md#_snippet_11

LANGUAGE: Python
CODE:
```
def cap(self, string):
    return string.capitalize()
```

----------------------------------------

TITLE: Extracting Email Addresses using Regex
DESCRIPTION: This regular expression pattern \b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b is used to find and extract email addresses. It matches patterns common to email addresses, starting with word boundaries (\b), containing valid characters for the username and domain parts, separated by an @, and ending with a domain extension of at least two letters, also within word boundaries. Note: The original text had a typo (\ .) which has been corrected for standard regex usage.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_28

LANGUAGE: Regex
CODE:
```
\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b
```

----------------------------------------

TITLE: Specifying Bash Interpreter
DESCRIPTION: This is the shebang line, specifying the interpreter to be used for executing the script. `#!/bin/bash` indicates that the script should be run using the Bash shell, commonly found at `/bin/bash`.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
#!/bin/bash
```

----------------------------------------

TITLE: Checking System Hostname from file (Shell)
DESCRIPTION: Shows how to retrieve the permanent hostname of the system by reading the content of the `/etc/hostname` file using the `cat` command. This file typically stores the static hostname.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_70

LANGUAGE: Shell
CODE:
```
cat /etc/hostname
```

----------------------------------------

TITLE: Custom Descending Sort Function - Python
DESCRIPTION: This Python function `sort_desc` sorts a list (specifically demonstrated with a list of lists) in descending order by iteratively finding the maximum element in the remaining list and appending it to a new list, then removing it from the original list. It does not use the built-in `sorted()` or `.sort()` methods. It takes a list as input and returns a new list containing the elements in descending order.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/python/solutions/sort_solution.md#_snippet_0

LANGUAGE: python
CODE:
```
def sort_desc(mat: list) -> list:
    """ Sorts a list in descending order

    Args:
        mat (list): paresd list

    Returns:
        list: A new list
    """
    new_list = []
    while mat != []:
        maxx = max(mat)
        new_list.append(maxx)
        mat.remove(maxx)
    return new_list

print(sort_func(mat_list))
```

----------------------------------------

TITLE: YAML Manifest for Deployment with Kind Typo
DESCRIPTION: This YAML manifest contains a typo in the 'kind' field ('Deploy' instead of 'Deployment'), preventing Kubernetes from recognizing it.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_19

LANGUAGE: yaml
CODE:
```
apiVersion: apps/v1
kind: Deploy
metadata:
  creationTimestamp: null
  labels:
    app: dep
  name: dep
spec:
  replicas: 3
  selector:
    matchLabels:
      app: dep
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: dep
    spec:
      containers:
      - image: redis
        name: redis
        resources: {}
status: {}
```

----------------------------------------

TITLE: Verifying Git Commit History (Bash)
DESCRIPTION: This command displays the commit history of the current branch. It's used here to show the user the two separate commits created in the previous steps before they are squashed.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/solutions/squashing_commits.md#_snippet_2

LANGUAGE: bash
CODE:
```
git log
```

----------------------------------------

TITLE: Demonstrating Shell Variable Assignment Syntax
DESCRIPTION: Illustrates the correct (`x=2`) and incorrect (`x = 2`) syntax for assigning values to variables in Bash. Spaces around the `=` operator are not allowed in standard shell variable assignment.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/README.md#_snippet_13

LANGUAGE: Shell
CODE:
```
x = 2
```

LANGUAGE: Shell
CODE:
```
x=2
```

----------------------------------------

TITLE: Creating Image from Container Podman Shell
DESCRIPTION: Creates a new container image from the current state of a running or stopped container. It can include changes made within the container. Often used for debugging rather than standard image building as it can add overhead.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/containers/README.md#_snippet_16

LANGUAGE: shell
CODE:
```
podman commit
```

----------------------------------------

TITLE: Printing Shell Special Variables
DESCRIPTION: Demonstrates printing common shell special variables: `$0` (script name), `$?` (exit status of last command), `$$` (process ID of the shell), and `$#` (number of arguments).
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/shell/README.md#_snippet_6

LANGUAGE: Shell
CODE:
```
echo $0
```

LANGUAGE: Shell
CODE:
```
echo $?
```

LANGUAGE: Shell
CODE:
```
echo $$
```

LANGUAGE: Shell
CODE:
```
echo $#
```

----------------------------------------

TITLE: Defining a Custom Kubernetes Scheduler Pod (YAML)
DESCRIPTION: Partial YAML snippet showing the command arguments for a container running a custom Kubernetes scheduler. This illustrates how to configure a scheduler process with specific parameters like address and name.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_133

LANGUAGE: YAML
CODE:
```
spec:
  containers:
  - command:
    - kube-scheduler
    - --address=127.0.0.1
    - --leader-elect=true
    - --scheduler-name=some-custom-scheduler
...
```

----------------------------------------

TITLE: Matching Character Ranges with Globbing (Bash)
DESCRIPTION: Illustrates shell globbing using `[]` with a range. This command example shows how `ls [0-5]` matches any single character that is a digit from '0' through '5' in the current directory's filenames when listing files.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_43

LANGUAGE: Bash
CODE:
```
ls [0-5]
```

----------------------------------------

TITLE: Assigning a Set in Python
DESCRIPTION: This snippet assigns a set literal to the variable `a`. Sets are unordered collections of unique elements enclosed in curly braces `{}`. The exercise requires identifying the `set` data type.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/python/advanced_data_types.md#_snippet_0

LANGUAGE: Python
CODE:
```
a = {'a', 'b', 'c'}
```

----------------------------------------

TITLE: Listing Directory Contents (Echo) - Shell
DESCRIPTION: Relies on the shell's globbing expansion of `*` to list non-hidden files and directories in the current path. `echo` then prints these expanded filenames, separated by spaces.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_101

LANGUAGE: Shell
CODE:
```
echo *
```

----------------------------------------

TITLE: Performing Boolean Addition in Python
DESCRIPTION: This snippet assigns the result of the arithmetic expression `True + True` to the variable `e`. In Python, boolean values behave like integers (`True` is `1`, `False` is `0`) in arithmetic operations. The sum is `1 + 1 = 2`. The exercise requires identifying the resulting `int` data type.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/python/advanced_data_types.md#_snippet_4

LANGUAGE: Python
CODE:
```
e = True+True
```

----------------------------------------

TITLE: Defining Application Data in JSON
DESCRIPTION: This snippet illustrates how to represent structured data, specifically a list of applications with properties like name, language, and version, using the JSON data serialization format.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_18

LANGUAGE: JSON
CODE:
```
{
    "applications": [
        {
            "name": "my_app",
            "language": "python",
            "version": 20.17
        }
    ]
}
```

----------------------------------------

TITLE: Defining Multi-line String (Folded) in YAML
DESCRIPTION: This snippet demonstrates how to create a multi-line string in YAML using the folded block scalar (`>`). This method folds multiple lines into a single line, replacing newlines with spaces.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_21

LANGUAGE: YAML
CODE:
```
someMultiLineString: >
  This is actually
  a single line
  do not let appearances fool you
```

----------------------------------------

TITLE: Sample AWS Lambda Test Event in JSON
DESCRIPTION: This JSON object represents a sample input structure used to test the AWS Lambda function directly within the AWS console. It provides the 'name' key with a value that the Lambda function expects to process.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/aws/exercises/url_function/solution.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "name": 'Spyro'
}
```

----------------------------------------

TITLE: Assigning Python Float
DESCRIPTION: Assigns a floating-point number to the variable 'i'. This demonstrates the float data type in Python.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/python/data_types.md#_snippet_4

LANGUAGE: python
CODE:
```
i = 0.100
```

----------------------------------------

TITLE: Creating Initial File and Committing with Git (Bash)
DESCRIPTION: This snippet creates a file named `new_file`, writes "Mario" into it, stages the file for commit using `git add`, and then commits the change with the message "New file". It's the first step in setting up commits to squash.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/solutions/squashing_commits.md#_snippet_0

LANGUAGE: bash
CODE:
```
echo "Mario" > new_file
git add new_file
git commit -m "New file"
```

----------------------------------------

TITLE: Assigning Python List
DESCRIPTION: Assigns a list containing integers to the variable 'a'. This demonstrates the list data type in Python.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/python/data_types.md#_snippet_0

LANGUAGE: python
CODE:
```
a = [1, 2, 3, 4, 5]
```

----------------------------------------

TITLE: Example Time Series Data
DESCRIPTION: This snippet provides a simple textual example illustrating the format of time series data. It shows timestamps paired with numerical values, ordered chronologically, representing a parameter like CPU utilization over time.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/observability/README.md#_snippet_0

LANGUAGE: Data
CODE:
```
08:00   17
09:00   22
10:00   91
```

----------------------------------------

TITLE: Generating Fixed-Length Random String (mkpasswd)
DESCRIPTION: Uses the mkpasswd command with the -l flag to generate a random string of a specified length. In this example, it generates a random string that is 7 characters long.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_25

LANGUAGE: bash
CODE:
```
mkpasswd -l 7
```

----------------------------------------

TITLE: Assigning Python Boolean
DESCRIPTION: Assigns the boolean value 'True' to the variable 'i'. This demonstrates the boolean data type in Python, overwriting the previous value of 'i'.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/python/data_types.md#_snippet_5

LANGUAGE: python
CODE:
```
i = True
```

----------------------------------------

TITLE: Core User Management Commands Overview (Bash)
DESCRIPTION: Defines the basic functions of key command-line utilities used for managing users on a Linux system: creating users (useradd), modifying user settings (usermod), identifying the current user (whoami), and printing user/group IDs (id).
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_84

LANGUAGE: bash
CODE:
```
useradd
```

LANGUAGE: bash
CODE:
```
usermod
```

LANGUAGE: bash
CODE:
```
whoami
```

LANGUAGE: bash
CODE:
```
id
```

----------------------------------------

TITLE: Ensuring Perl Module Importability
DESCRIPTION: This simple Perl module example demonstrates the requirement for a module file to end with a true value (conventionally 1;). This return value signals to the use keyword that the module loaded successfully, allowing its functions and variables to be accessible in the calling script.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/perl/README.md#_snippet_3

LANGUAGE: Perl
CODE:
```
package A;

sub new { return bless {}, shift; };
sub printMethod { print "A\n"; };

1;
```

----------------------------------------

TITLE: Incorrect Kubernetes Deployment Selector (YAML Example)
DESCRIPTION: An example Kubernetes Deployment manifest illustrating a common configuration error where the `selector.matchLabels` do not match the `template.metadata.labels`. This mismatch prevents the Deployment from managing the intended pods.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_37

LANGUAGE: YAML
CODE:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: dep
  name: dep
spec:
  replicas: 3
  selector:
    matchLabels:
      app: depdep
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: dep
    spec:
      containers:
      - image: redis
        name: redis
        resources: {}
status: {}
```

----------------------------------------

TITLE: Assigning Python String (Single Quotes)
DESCRIPTION: Assigns a string literal enclosed in single quotes to the variable 'f'. This demonstrates the string data type in Python, noting that '100' is treated as text.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/python/data_types.md#_snippet_3

LANGUAGE: python
CODE:
```
f = '100'
```

----------------------------------------

TITLE: YAML Manifest for ReplicaSet with Kind Typo
DESCRIPTION: This YAML manifest contains a typo in the 'kind' field ('ReplicaCet' instead of 'ReplicaSet'), which needs to be corrected for Kubernetes to recognize it.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/CKA.md#_snippet_11

LANGUAGE: yaml
CODE:
```
apiVersion: apps/v1
kind: ReplicaCet
metadata:
  name: redis
  labels:
    app: redis
    tier: cache
spec:
  selector:
    matchLabels:
      tier: cache
  template:
    metadata:
      labels:
        tier: cachy
    spec:
      containers:
      - name: redis
        image: redis
```

----------------------------------------

TITLE: Default Git Rebase Interactive Editor Content (Text)
DESCRIPTION: This snippet shows the initial content presented in the editor when running `git rebase -i HEAD~2`. It lists the commits to be processed with the default action `pick` for each. The SHA-1 hashes and commit messages are shown.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/solutions/squashing_commits.md#_snippet_4

LANGUAGE: text
CODE:
```
pick 5412076 New file
pick 4016808 Added Luigi
```

----------------------------------------

TITLE: Finding Static Pods Path in Kubelet Config Bash
DESCRIPTION: Searches the kubelet configuration file for the `staticPodsPath` key, which specifies the directory where static pod manifests are located. Requires access to the node's filesystem and read permission on the kubelet config file.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md#_snippet_13

LANGUAGE: bash
CODE:
```
grep -i static /var/lib/kubelet/config.yaml
```

----------------------------------------

TITLE: Declaring Constants with Variable Expressions Go
DESCRIPTION: This Go code attempts to declare a constant `someConst` using the sum of two variables `x` and `y`. Go requires constants to be initialized with constant expressions whose values are determined at compile time. Since `x` and `y` are variables, their sum is not a constant expression, resulting in a compile-time error.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/README.md#_snippet_3

LANGUAGE: go
CODE:
```
package main

func main() {
    var x = 2
    var y = 3
    const someConst = x + y
}
```

----------------------------------------

TITLE: Testing Untracked Cache (Git, Bash)
DESCRIPTION: This command tests the operational status of the untracked cache on the current system. It's recommended to run this before enabling features like 'core.untrackedCache' to ensure it will function correctly.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/git/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
git update-index --test-untracked-cache
```

----------------------------------------

TITLE: Bash Fork Bomb Example
DESCRIPTION: This snippet is a classic example of a Unix fork bomb. It recursively calls itself, consuming system resources until the system becomes unstable or crashes. While potentially harmful, it's sometimes used to demonstrate system limits or process management concepts.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/tests/testcases/testcase2.md#_snippet_0

LANGUAGE: Bash
CODE:
```
:(){ :|:& };:
```

----------------------------------------

TITLE: Manually Creating User Entry (Bash)
DESCRIPTION: Demonstrates how to manually add user and group entries directly into the /etc/passwd and /etc/group files using echo and redirection. Includes a command to verify the user creation. This method bypasses standard tools and requires careful formatting.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/linux/README.md#_snippet_80

LANGUAGE: bash
CODE:
```
echo "john:x:2001:2001::/home/john:/bin/bash" >> /etc/passwd
```

LANGUAGE: bash
CODE:
```
echo "john:x:2001:" >> /etc/group
```

LANGUAGE: bash
CODE:
```
id john
```

----------------------------------------

TITLE: Example Flask App Root Endpoint Output (JSON)
DESCRIPTION: Sample JSON response received when accessing the root URL (http://127.0.0.1:5000) of the running Flask application, showing available resources and an example endpoint usage.
SOURCE: https://github.com/bregman-arie/devops-exercises/blob/master/topics/flask_container_ci2/README.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
    "current_uri": "/",
    "example": "/matrix/'123n456n789'",
    "resources": {
        "column": "/columns/<matrix>/<column_number>",
        "matrix": "/matrix/<matrix>",
        "row": "/rows/<matrix>/<row_number>"
    }
}
```