TITLE: Using List Sort Method in Python
DESCRIPTION: This snippet shows how to use the list.sort() method to sort a list in place. It includes examples of using the key and reverse parameters to customize sorting behavior. The method sorts using < comparisons between items and modifies the list in place.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
list.sort(*, key=None, reverse=False)   # Sort the list in place
```

LANGUAGE: python
CODE:
```
# Example with key parameter
my_list.sort(key=str.lower)   # Sort case-insensitively
```

LANGUAGE: python
CODE:
```
# Example with reverse parameter
my_list.sort(reverse=True)   # Sort in descending order
```

----------------------------------------

TITLE: Looping techniques in Python
DESCRIPTION: Demonstrates various looping techniques including iterating over dictionaries, using enumerate(), zip(), reversed(), and sorted() functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/datastructures.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
>>> knights = {'gallahad': 'the pure', 'robin': 'the brave'}
>>> for k, v in knights.items():
...     print(k, v)
...
gallahad the pure
robin the brave

>>> for i, v in enumerate(['tic', 'tac', 'toe']):
...     print(i, v)
...
0 tic
1 tac
2 toe

>>> questions = ['name', 'quest', 'favorite color']
>>> answers = ['lancelot', 'the holy grail', 'blue']
>>> for q, a in zip(questions, answers):
...     print('What is your {0}?  It is {1}.'.format(q, a))
...
What is your name?  It is lancelot.
What is your quest?  It is the holy grail.
What is your favorite color?  It is blue.

>>> for i in reversed(range(1, 10, 2)):
...     print(i)
...
9
7
5
3
1
```

----------------------------------------

TITLE: Installing a Package with pip in a Virtual Environment
DESCRIPTION: Command to install the latest version of a package (novas) using pip within an activated virtual environment. Shows the output of a successful installation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/venv.rst#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
(tutorial-env) $ python -m pip install novas
Collecting novas
  Downloading novas-3.1.1.3.tar.gz (136kB)
Installing collected packages: novas
  Running setup.py install for novas
Successfully installed novas-3.1.1.3
```

----------------------------------------

TITLE: Creating a Virtual Environment with venv in Python
DESCRIPTION: Creates a new virtual environment named 'tutorial-env' using the venv module. This command will generate a directory with a copy of the Python interpreter and supporting files.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/venv.rst#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
python -m venv tutorial-env
```

----------------------------------------

TITLE: Creating a Virtual Environment using venv in Python
DESCRIPTION: This command creates a new virtual environment at the specified path using Python's venv module. It sets up the necessary directory structure and configuration files.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/venv.rst#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
python -m venv /path/to/new/virtual/environment
```

----------------------------------------

TITLE: String removesuffix() Example - Python
DESCRIPTION: Demonstrates the removesuffix() method introduced in Python 3.9 for removing a specific suffix from a string if present.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
>>> 'MiscTests'.removesuffix('Tests')
'Misc'
>>> 'TmpDirMixin'.removesuffix('Tests')
'TmpDirMixin'
```

----------------------------------------

TITLE: Using time() Function in Python
DESCRIPTION: Demonstrates the usage of the time() function, which returns the time in seconds since the epoch as a floating-point number. This function is commonly used to measure elapsed time or generate timestamps.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/time.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
time() -> float
```

----------------------------------------

TITLE: Executing multiple parameterized SQL statements
DESCRIPTION: This code executes multiple SQL INSERT statements with parameterized values using the executemany method on an SQLite cursor object. It requires the SQLite module to be imported and a cursor object to be created. The parameters should be provided as an iterable list of tuples.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_21

LANGUAGE: Python
CODE:
```
rows = [
    (\"row1\",),
    (\"row2\",),
]
# cur is an sqlite3.Cursor object
cur.executemany(\"INSERT INTO data VALUES(?)\", rows)
con.close()
```

----------------------------------------

TITLE: List Comprehensions in Python
DESCRIPTION: Shows various examples of list comprehensions including filtering, transforming elements, and working with nested lists.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/datastructures.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
squares = [x**2 for x in range(10)]
[(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
[x*2 for x in vec]
[x for x in vec if x >= 0]
[abs(x) for x in vec]
[weapon.strip() for weapon in freshfruit]
[(x, x**2) for x in range(6)]
```

----------------------------------------

TITLE: Activating a Virtual Environment on Unix/MacOS
DESCRIPTION: Command to activate a Python virtual environment on Unix or MacOS systems. This modifies the shell environment to use the Python installation in the virtual environment.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/venv.rst#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
source tutorial-env/bin/activate
```

----------------------------------------

TITLE: Upgrading Existing Packages
DESCRIPTION: Command to explicitly upgrade an existing Python package installation using pip.
SOURCE: https://github.com/python/cpython/blob/main/Doc/installing/index.rst#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
python -m pip install --upgrade SomePackage
```

----------------------------------------

TITLE: Demonstrating Keyword Arguments in Python
DESCRIPTION: Example showing two ways to pass keyword arguments to the complex() function using both direct keyword syntax and dictionary unpacking.
SOURCE: https://github.com/python/cpython/blob/main/Doc/glossary.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
complex(real=3, imag=5)
complex(**{'real': 3, 'imag': 5})
```

----------------------------------------

TITLE: Displaying Package Information with pip show
DESCRIPTION: Command to display detailed information about an installed package (requests) using pip within an activated virtual environment. Shows metadata including version, summary, and location.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/venv.rst#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
(tutorial-env) $ python -m pip show requests
---
Metadata-Version: 2.0
Name: requests
Version: 2.7.0
Summary: Python HTTP for Humans.
Home-page: http://python-requests.org
Author: Kenneth Reitz
Author-email: me@kennethreitz.com
License: Apache 2.0
Location: /Users/akuchling/envs/tutorial-env/lib/python3.4/site-packages
Requires:
```

----------------------------------------

TITLE: Illustrating Python Import Forms
DESCRIPTION: Provides various examples of how to import modules, submodules, specific attributes, and use aliases or relative paths in Python. Demonstrates importing a whole module, nested modules, aliasing imports, importing specific names, wildcard imports, and relative imports.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/simple_stmts.rst#_snippet_9

LANGUAGE: python
CODE:
```
import foo
```

LANGUAGE: python
CODE:
```
import foo.bar.baz
```

LANGUAGE: python
CODE:
```
import foo.bar.baz as fbb
```

LANGUAGE: python
CODE:
```
from foo.bar import baz
```

LANGUAGE: python
CODE:
```
from foo import attr
```

LANGUAGE: python
CODE:
```
from module import *
```

LANGUAGE: python
CODE:
```
from . import mod
```

LANGUAGE: python
CODE:
```
from ..subpkg2 import mod
```

----------------------------------------

TITLE: String Indexing and Slicing in Python
DESCRIPTION: Demonstrates Python string indexing with both positive and negative indices using the word 'Python' as an example. Shows how string slicing works and handles out-of-range indices.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/introduction.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
>>> word[42]  # the word only has 6 characters
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: string index out of range

>>> word[4:42]
'on'
>>> word[42:]
''
```

----------------------------------------

TITLE: Using del statement in Python
DESCRIPTION: Shows how to use the del statement to remove items from a list, delete slices, clear the entire list, and delete variables.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/datastructures.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
>>> a = [-1, 1, 66.25, 333, 333, 1234.5]
>>> del a[0]
>>> a
[1, 66.25, 333, 333, 1234.5]
>>> del a[2:4]
>>> a
[1, 66.25, 1234.5]
>>> del a[:]
>>> a
[]
>>> del a
```

----------------------------------------

TITLE: Defining a Function with Default Arguments in Python
DESCRIPTION: This function demonstrates how to define a function with default argument values, allowing the caller to specify only the necessary arguments while providing defaults for others. Dependencies include understanding of Python functions and input/output behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
def ask_ok(prompt, retries=4, reminder='Please try again!'):
    while True:
        reply = input(prompt)
        if reply in {'y', 'ye', 'yes'}:
            return True
        if reply in {'n', 'no', 'nop', 'nope'}:
            return False
        retries = retries - 1
        if retries < 0:
            raise ValueError('invalid user response')
        print(reminder)
```

----------------------------------------

TITLE: Defining Logging Levels in Python
DESCRIPTION: This section defines the numeric values associated with different logging levels in Python's logging module. It provides guidance on when to use each level, such as DEBUG for diagnostic purposes and CRITICAL for severe errors. Users can overwrite existing levels by defining new ones with the same numeric value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
.. py:data:: NOTSET   | 0             | When set on a logger, indicates that|
                        |               | ancestor loggers are to be consulted|
                        |               | to determine the effective level.   |
                        |               | If that still resolves to           |
                        |               | :const:`!NOTSET`, then all events   |
                        |               | are logged. When set on a handler,  |
                        |               | all events are handled.             |
.. py:data:: DEBUG    | 10            | Detailed information, typically only|
                        |               | of interest to a developer trying to|
                        |               | diagnose a problem.                 |
.. py:data:: INFO     | 20            | Confirmation that things are working|
                        |               | as expected.                        |
.. py:data:: WARNING  | 30            | An indication that something        |
                        |               | unexpected happened, or that a      |
                        |               | problem might occur in the near     |
                        |               | future (e.g. 'disk space low'). The |
                        |               | software is still working as        |
                        |               | expected.                           |
.. py:data:: ERROR    | 40            | Due to a more serious problem, the  |
                        |               | software has not been able to       |
                        |               | perform some function.              |
.. py:data:: CRITICAL | 50            | A serious error, indicating that the|
                        |               | program itself may be unable to     |
                        |               | continue running.                   |
```

----------------------------------------

TITLE: Threading Lock Context Manager
DESCRIPTION: Demonstrates using the with statement for thread lock management.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
lock = threading.Lock()
with lock:
    # Critical section of code
    ...
```

----------------------------------------

TITLE: Example of ProcessPoolExecutor for Prime Number Calculation
DESCRIPTION: This example demonstrates the usage of ProcessPoolExecutor to check the primality of large numbers asynchronously. By utilizing concurrent.futures, the code achieves parallel computation of the primality test using a list of predefined prime numbers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/concurrent.futures.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
import concurrent.futures
import math

PRIMES = [
   112272535095293,
   112582705942171,
   112272535095293,
   115280095190773,
   115797848077099,
]
```

----------------------------------------

TITLE: Module Import Examples in Python
DESCRIPTION: Demonstrates various ways to import and use the Fibonacci module, including direct imports, alias imports, and importing specific functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/modules.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> import fibo
>>> fibo.fib(1000)
>>> fibo.fib2(100)
>>> fibo.__name__
>>> fib = fibo.fib
>>> fib(500)
```

----------------------------------------

TITLE: Python Safe Default Parameter Pattern
DESCRIPTION: Shows the recommended pattern for handling mutable default parameters using None as the default value and creating new objects inside the function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
def foo(mydict=None):
    if mydict is None:
        mydict = {}  # create a new dict for local namespace
```

----------------------------------------

TITLE: String rstrip() Example - Python
DESCRIPTION: Shows the usage of rstrip() method to remove trailing characters from strings, including whitespace and character set stripping.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_28

LANGUAGE: python
CODE:
```
>>> '   spacious   '.rstrip()
'   spacious'
>>> 'mississippi'.rstrip('ipz')
'mississ'
```

----------------------------------------

TITLE: Using math.isclose for Approximate Floating-Point Comparisons in Python
DESCRIPTION: Demonstrates how to use the math.isclose function for meaningful comparisons of floating-point values that have representation errors.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/floatingpoint.rst#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> math.isclose(0.1 + 0.1 + 0.1, 0.3)
True
```

----------------------------------------

TITLE: Reading File Contents
DESCRIPTION: Illustrates various methods for reading file contents, including read(), readline(), and iterating over file lines
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/inputoutput.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
f.read()
```

LANGUAGE: python
CODE:
```
f.readline()
```

LANGUAGE: python
CODE:
```
for line in f:
    print(line, end='')
```

----------------------------------------

TITLE: Converting Integer to Hexadecimal String in Python
DESCRIPTION: The hex function converts an integer to a lowercase hexadecimal string prefixed with "0x". Objects that aren't integers must define an __index__ method that returns an integer.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
hex(255)
hex(-42)
```

LANGUAGE: python
CODE:
```
'%#x' % 255, '%x' % 255, '%X' % 255
format(255, '#x'), format(255, 'x'), format(255, 'X')
f'{255:#x}', f'{255:x}', f'{255:X}'
```

----------------------------------------

TITLE: Using asyncio Lock with async with statement
DESCRIPTION: This snippet demonstrates the preferred way to use an asyncio Lock with an `async with` statement to guarantee exclusive access to a shared resource. The `async with` statement ensures that the lock is acquired before accessing the shared resource and released afterward, even if exceptions occur.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-sync.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"lock = asyncio.Lock()

# ... later
async with lock:
    # access shared state"
```

----------------------------------------

TITLE: Demonstrating if-elif-else Statement in Python
DESCRIPTION: This snippet shows how to use if, elif, and else statements in Python to handle different conditions based on user input.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> x = int(input("Please enter an integer: "))
Please enter an integer: 42
>>> if x < 0:
...     x = 0
...     print('Negative changed to zero')
... elif x == 0:
...     print('Zero')
... elif x == 1:
...     print('Single')
... else:
...     print('More')
...
More
```

----------------------------------------

TITLE: Using Placeholders in SQL Queries with Python's sqlite3
DESCRIPTION: Demonstrates how to safely use placeholders to bind values in SQL queries using both named and qmark styles. This approach prevents SQL injection attacks by properly parameterizing queries.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
con = sqlite3.connect(":memory:")
cur = con.execute("CREATE TABLE lang(name, first_appeared)")

# This is the named style used with executemany():
data = (
    {"name": "C", "year": 1972},
    {"name": "Fortran", "year": 1957},
    {"name": "Python", "year": 1991},
    {"name": "Go", "year": 2009},
)
cur.executemany("INSERT INTO lang VALUES(:name, :year)", data)

# This is the qmark style used in a SELECT query:
params = (1972,)
cur.execute("SELECT * FROM lang WHERE first_appeared = ?", params)
print(cur.fetchall())
con.close()
```

----------------------------------------

TITLE: Creating Range Objects in Python
DESCRIPTION: This snippet demonstrates how to create range objects in Python using different parameter combinations. The range constructor accepts start, stop, and step parameters to define the sequence of numbers. Range objects are immutable sequences commonly used in for loops.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
range(stop)                # Create a range from 0 to stop-1
```

LANGUAGE: python
CODE:
```
range(start, stop)         # Create a range from start to stop-1
```

LANGUAGE: python
CODE:
```
range(start, stop, step)   # Create a range from start to stop-1 with given step
```

----------------------------------------

TITLE: File Removal with remove() in Python
DESCRIPTION: Deletes a file from the filesystem. Raises OSError for directories and FileNotFoundError for non-existent files. Identical to unlink() function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_44

LANGUAGE: python
CODE:
```
remove(path, *, dir_fd=None)
```

----------------------------------------

TITLE: Understanding Assert Methods in Python unittest
DESCRIPTION: This segment explains various assert methods in the TestCase class used to assert different conditions like equality, identity, and membership in unit tests. Methods like assertEqual, assertTrue, and assertIsInstance are commonly used to check test scenarios and raise assertion errors when conditions are not met.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_14

LANGUAGE: Python
CODE:
```
The :class:`TestCase` class provides several assert methods to check for and
report failures.  The following table lists the most commonly used methods

| Method                                  | Checks that                 | New in        |
| :meth:`assertEqual(a, b)                | ``a == b``                  |               |
| :meth:`assertNotEqual(a, b)             | ``a != b``                  |               |
| :meth:`assertTrue(x)                    | ``bool(x) is True``         |               |
| :meth:`assertFalse(x)                   | ``bool(x) is False``        |               |
| :meth:`assertIs(a, b)                   | ``a is b``                  | 3.1           |
| :meth:`assertIsNot(a, b)                | ``a is not b``              | 3.1           |
| :meth:`assertIn(a, b)                   | ``a in b``                  | 3.1           |
| :meth:`assertNotIn(a, b)                | ``a not in b``              | 3.1           |
| :meth:`assertIsInstance(a, b)           | ``isinstance(a, b)``        | 3.2           |
| :meth:`assertNotIsInstance(a, b)        | ``not isinstance(a, b)``    | 3.2           |

```

----------------------------------------

TITLE: Deactivating a Virtual Environment
DESCRIPTION: Command to deactivate the current Python virtual environment and return to the system's default Python environment.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/venv.rst#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
deactivate
```

----------------------------------------

TITLE: Demonstrating Attribute Lookup Priority in Python Classes
DESCRIPTION: Shows how Python prioritizes instance attributes over class attributes when both exist with the same name. This example uses a Warehouse class to illustrate the concept.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/classes.rst#2025-04-23_snippet_7

LANGUAGE: Python
CODE:
```
class Warehouse:
   purpose = 'storage'
   region = 'west'

w1 = Warehouse()
print(w1.purpose, w1.region)
w2 = Warehouse()
w2.region = 'east'
print(w2.purpose, w2.region)
```

----------------------------------------

TITLE: Introducing Formatted String Literals in Python 3.6
DESCRIPTION: PEP 498 introduces formatted string literals (f-strings) that allow embedding expressions inside string literals prefixed with 'f'. These expressions are evaluated at runtime and formatted using the format protocol.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.6.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
>>> name = "Fred"
>>> f"He said his name is {name}."
'He said his name is Fred.'
>>> width = 10
>>> precision = 4
>>> value = decimal.Decimal("12.34567")
>>> f"result: {value:{width}.{precision}}"  # nested fields
'result:      12.35'
```

----------------------------------------

TITLE: Basic Date Operations in Python
DESCRIPTION: Examples of creating and manipulating date objects, including comparison operations and calculating time differences.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
>>> from datetime import date
>>> today = date.today()
>>> today
datetime.date(2007, 12, 5)
>>> today == date.fromtimestamp(time.time())
True
>>> my_birthday = date(today.year, 6, 24)
>>> if my_birthday < today:
...     my_birthday = my_birthday.replace(year=today.year + 1)
...
>>> my_birthday
datetime.date(2008, 6, 24)
>>> time_to_birthday = abs(my_birthday - today)
>>> time_to_birthday.days
202
```

----------------------------------------

TITLE: Enumerating Sequences with Python's enumerate Function
DESCRIPTION: The enumerate function constructs an iterable providing a count and values from a given iterable, starting from the specified index. It requires an iterable object and has an optional start parameter that defaults to zero.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> seasons = ['Spring', 'Summer', 'Fall', 'Winter']
>>> list(enumerate(seasons))
[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]
>>> list(enumerate(seasons, start=1))
[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]
```

----------------------------------------

TITLE: Encoding Basic Python Objects to JSON in Python
DESCRIPTION: Demonstrates how to encode Python data structures like lists, dictionaries, and strings to JSON format using json.dumps() and json.dump(). Shows handling of special characters and sort_keys parameter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/json.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> import json
>>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])
'["foo", {"bar": ["baz", null, 1.0, 2]}]'
>>> print(json.dumps("\"foo\bar"))
"\"foo\bar"
>>> print(json.dumps('\u1234'))
"\u1234"
>>> print(json.dumps('\\'))
"\\"
>>> print(json.dumps({"c": 0, "b": 0, "a": 0}, sort_keys=True))
{"a": 0, "b": 0, "c": 0}
>>> from io import StringIO
>>> io = StringIO()
>>> json.dump(['streaming API'], io)
>>> io.getvalue()
'["streaming API"]'
```

----------------------------------------

TITLE: Opening and Writing to Files
DESCRIPTION: Demonstrates file opening with different modes, writing content, and using the with statement for proper file handling
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/inputoutput.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
f = open('workfile', 'w', encoding="utf-8")
```

LANGUAGE: python
CODE:
```
with open('workfile', encoding="utf-8") as f:
    read_data = f.read()
```

LANGUAGE: python
CODE:
```
f.write('This is a test\n')
```

----------------------------------------

TITLE: Creating dictionaries using dict() constructor in Python
DESCRIPTION: Shows different ways to create dictionaries using the dict() constructor, including from sequences of key-value pairs and using keyword arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/datastructures.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
>>> dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])
{'sape': 4139, 'guido': 4127, 'jack': 4098}

>>> {x: x**2 for x in (2, 4, 6)}
{2: 4, 4: 16, 6: 36}

>>> dict(sape=4139, guido=4127, jack=4098)
{'sape': 4139, 'guido': 4127, 'jack': 4098}
```

----------------------------------------

TITLE: Creating Aligned Columns with str.format()
DESCRIPTION: Demonstrates creating aligned columns of data using the formatting specification in str.format(). Numbers are formatted to specific width fields to create a clean tabular output.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/inputoutput.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> for x in range(1, 11):
...     print('{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x))
...
 1   1    1
 2   4    8
 3   9   27
 4  16   64
 5  25  125
 6  36  216
 7  49  343
 8  64  512
 9  81  729
10 100 1000
```

----------------------------------------

TITLE: Checking Path Existence with os.path
DESCRIPTION: The exists function checks whether a given path or file descriptor exists. It returns False for broken symbolic links and inaccessible paths. Since version 3.6, it accepts path-like objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
def exists(path):
    return os.path.exists(path)
```

----------------------------------------

TITLE: Incrementing Reference Count with Py_IncRef (C)
DESCRIPTION: Indicate taking a new strong reference to object *o*. This is a function version of :c:func:`Py_XINCREF` and can be used for runtime dynamic embedding of Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/refcounting.rst#_snippet_10

LANGUAGE: C
CODE:
```
void Py_IncRef(PyObject *o)
```

----------------------------------------

TITLE: Implementing Formatted String Literals (f-strings) in Python
DESCRIPTION: Shows various examples of using f-strings in Python, including basic usage, multi-line strings, using expressions and functions, format specifiers, and the debugging operator.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_35

LANGUAGE: python
CODE:
```
>>> who = 'nobody'
>>> nationality = 'Spanish'
>>> f'{who.title()} expects the {nationality} Inquisition!'
'Nobody expects the Spanish Inquisition!'

>>> f'''This is a string
... on two lines'''
'This is a string\non two lines'

>>> x = 42
>>> f'{{x}} is {x}'
'{x} is 42'

>>> from math import sqrt
>>> f'√2 \N{ALMOST EQUAL TO} {sqrt(2):.5f}'
'√2 ≈ 1.41421'

>>> from fractions import Fraction
>>> calculation = Fraction(1, 3)
>>> f'{calculation=}'
'calculation=Fraction(1, 3)'
>>> f'{calculation = }'
'calculation = Fraction(1, 3)'
>>> f'{calculation = !s}'
'calculation = 1/3'

>>> f'{Fraction(1, 7):.6f}'
'0.142857'
>>> f'{Fraction(1, 7):_^+10}'
'___+1/7___'
```

----------------------------------------

TITLE: Using f-strings in Python for String Formatting
DESCRIPTION: Demonstrates formatted string literals (f-strings) in Python, which allow embedding variable values and expressions directly in strings by prefixing with 'f' or 'F' and enclosing expressions in curly braces.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/inputoutput.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> year = 2016
>>> event = 'Referendum'
>>> f'Results of the {year} {event}'
'Results of the 2016 Referendum'
```

----------------------------------------

TITLE: Path Existence Check Example
DESCRIPTION: Demonstrates checking if various paths exist using Path.exists()
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_32

LANGUAGE: python
CODE:
```
>>> Path('.').exists()
True
>>> Path('setup.py').exists()
True
>>> Path('/etc').exists()
True
>>> Path('nonexistentfile').exists()
False
```

----------------------------------------

TITLE: Reading Configuration Files in Python
DESCRIPTION: This snippet demonstrates how to read configuration files using the ConfigParser class. It shows loading default values from a file, then reading additional configuration files with specified encoding.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
import configparser, os

config = configparser.ConfigParser()
config.read_file(open('defaults.cfg'))
config.read(['site.cfg', os.path.expanduser('~/.myapp.cfg')],
             encoding='cp1250')
```

----------------------------------------

TITLE: Calculating Square Root in Python
DESCRIPTION: This function returns the square root of x, which is useful in various mathematical and scientific contexts where square root calculations are necessary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/math.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
.. function:: sqrt(x)

   Return the square root of *x*.
```

----------------------------------------

TITLE: Defining a Basic NamedTuple Class in Python
DESCRIPTION: Shows the standard class-based syntax for defining a `NamedTuple` with type annotations for its fields. This is the recommended modern approach.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_134

LANGUAGE: python
CODE:
```
class Employee(NamedTuple):
    name: str
    id: int
```

----------------------------------------

TITLE: Implementing PEP 498 Literal String Interpolation
DESCRIPTION: Example showing f-string syntax that allows embedding expressions inside string literals. Expressions are evaluated at runtime and converted to strings. Introduced by PEP 498.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.6.0a1.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
x = 3
f'value={x}'  # Evaluates to 'value=3'
```

----------------------------------------

TITLE: Formatting Datetime Objects in Python
DESCRIPTION: Illustrates formatting a datetime object into a specific string representation using format codes like %Y, %m, %d, %H, %M, and %S within str.format(). Requires importing the datetime module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/string.rst#_snippet_12

LANGUAGE: Python
CODE:
```
>>> import datetime
>>> d = datetime.datetime(2010, 7, 4, 12, 15, 58)
>>> '{:%Y-%m-%d %H:%M:%S}'.format(d)
'2010-07-04 12:15:58'
```

----------------------------------------

TITLE: Iterating Over Objects in Python
DESCRIPTION: These examples demonstrate two equivalent ways to iterate over an object in Python using a for loop.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
for i in iter(obj):
    print(i)

for i in obj:
    print(i)
```

----------------------------------------

TITLE: Using Lists as Queues in Python
DESCRIPTION: Demonstrates using collections.deque for implementing a queue with first-in-first-out (FIFO) operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/datastructures.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from collections import deque
queue = deque(["Eric", "John", "Michael"])
queue.append("Terry")
queue.append("Graham")
queue.popleft()
queue.popleft()
queue
```

----------------------------------------

TITLE: Async and Await Syntax in Python
DESCRIPTION: Demonstrates coroutine functions in Python using 'async def' and 'await'. Utilizes asyncio to create an asynchronous HTTP client for non-blocking I/O operations. Requires Python 3.5 and asyncio module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
async def coro():
    return 'spam'
```

LANGUAGE: Python
CODE:
```
import asyncio

async def http_get(domain):
    reader, writer = await asyncio.open_connection(domain, 80)

    writer.write(b'\r\n'.join([
        b'GET / HTTP/1.1',
        b'Host: %b' % domain.encode('latin-1'),
        b'Connection: close',
        b'', b''
    ]))

    async for line in reader:
        print('>>>', line)

    writer.close()

loop = asyncio.get_event_loop()
try:
    loop.run_until_complete(http_get('example.com'))
finally:
    loop.close()
```

LANGUAGE: Python
CODE:
```
import asyncio

async def coro(name, lock):
    print('coro {}: waiting for lock'.format(name))
    async with lock:
        print('coro {}: holding the lock'.format(name))
        await asyncio.sleep(1)
        print('coro {}: releasing the lock'.format(name))

loop = asyncio.get_event_loop()
lock = asyncio.Lock()
coros = asyncio.gather(coro(1, lock), coro(2, lock))
try:
    loop.run_until_complete(coros)
finally:
    loop.close()
```

----------------------------------------

TITLE: Defining a method in a Python class
DESCRIPTION: Shows the basic syntax for defining a method in a Python class. The method takes self as its first parameter, which refers to the instance of the class.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_47

LANGUAGE: python
CODE:
```
class C:
    def meth(self, arg):
        return arg * 2 + self.attribute
```

----------------------------------------

TITLE: Indentation Rules in Python
DESCRIPTION: This snippet provides an example of indentation in Python code and illustrates how indentation levels are managed to generate INDENT and DEDENT tokens. It also highlights common indentation errors.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/lexical_analysis.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
def perm(l):\n           # Compute the list of all permutations of l\n       if len(l) <= 1:\n                     return [l]\n       r = []\n       for i in range(len(l)):\n                s = l[:i] + l[i+1:]\n                p = perm(s)\n                for x in p:\n                 r.append(l[i:i+1] + x)\n       return r
```

----------------------------------------

TITLE: Formatting with f-strings and Precision Control
DESCRIPTION: Shows how to use f-strings with format specifiers to control precision, field width, and alignment. The example demonstrates rounding Pi to 3 decimal places and aligning columns of data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/inputoutput.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> import math
>>> print(f'The value of pi is approximately {math.pi:.3f}.')
The value of pi is approximately 3.142.

>>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}
>>> for name, phone in table.items():
...     print(f'{name:10} ==> {phone:10d}')
...
Sjoerd     ==>       4127
Jack       ==>       4098
Dcab       ==>       7678
```

----------------------------------------

TITLE: Demonstrating Incorrect Lambda Closure Behavior
DESCRIPTION: This snippet shows how all lambdas created in the previous loop return the same value because they all reference the same variable that has reached its final value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
>>> squares[2]()
16
>>> squares[4]()
16
```

----------------------------------------

TITLE: Installing Packages from requirements.txt
DESCRIPTION: Command to install all packages listed in a requirements.txt file with their specific versions. Shows the process of collecting, downloading, and installing multiple packages at once.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/venv.rst#2025-04-21_snippet_11

LANGUAGE: console
CODE:
```
(tutorial-env) $ python -m pip install -r requirements.txt
Collecting novas==3.1.1.3 (from -r requirements.txt (line 1))
  ...
Collecting numpy==1.9.2 (from -r requirements.txt (line 2))
  ...
Collecting requests==2.7.0 (from -r requirements.txt (line 3))
  ...
Installing collected packages: novas, numpy, requests
  Running setup.py install for novas
Successfully installed novas-3.1.1.3 numpy-1.9.2 requests-2.7.0
```

----------------------------------------

TITLE: Creating Basic Client Socket in Python
DESCRIPTION: Demonstrates how to create a basic client socket that connects to a web server on port 80. Shows the fundamental socket creation and connection process.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/sockets.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
# create an INET, STREAMing socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# now connect to the web server on port 80 - the normal http port
s.connect(("www.python.org", 80))
```

----------------------------------------

TITLE: Demonstrating Python Scopes and Namespaces
DESCRIPTION: This code snippet illustrates how to reference different scopes and namespaces in Python, and demonstrates the effects of the 'global' and 'nonlocal' keywords on variable binding.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/classes.rst#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
def scope_test():
    def do_local():
        spam = "local spam"

    def do_nonlocal():
        nonlocal spam
        spam = "nonlocal spam"

    def do_global():
        global spam
        spam = "global spam"

    spam = "test spam"
    do_local()
    print("After local assignment:", spam)
    do_nonlocal()
    print("After nonlocal assignment:", spam)
    do_global()
    print("After global assignment:", spam)

scope_test()
print("In global scope:", spam)
```

----------------------------------------

TITLE: Demonstrating UnboundLocalError with Variable Assignment in Functions
DESCRIPTION: This snippet shows how assigning to a variable inside a function creates a local variable that shadows any outer scope variable with the same name, leading to UnboundLocalError when the variable is used before assignment.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> x = 10
>>> def bar():
...     print(x)
...
>>> bar()
10
```

----------------------------------------

TITLE: List Operations in Python
DESCRIPTION: Demonstrates basic list operations including creation, indexing, slicing, and concatenation. Shows how lists differ from strings in terms of mutability.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/introduction.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
>>> squares = [1, 4, 9, 16, 25]
>>> squares
[1, 4, 9, 16, 25]
>>> squares[0]  # indexing returns the item
1
>>> squares[-1]
25
>>> squares[-3:]  # slicing returns a new list
[9, 16, 25]
```

----------------------------------------

TITLE: Avoiding Shared Mutable Class Variables in Python
DESCRIPTION: Demonstrates a common pitfall with mutable class variables and shows the correct way to implement instance-specific mutable attributes. This example uses a list of tricks for each dog instance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/classes.rst#2025-04-23_snippet_6

LANGUAGE: Python
CODE:
```
class Dog:

    def __init__(self, name):
        self.name = name
        self.tricks = []    # creates a new empty list for each dog

    def add_trick(self, trick):
        self.tricks.append(trick)

d = Dog('Fido')
e = Dog('Buddy')
d.add_trick('roll over')
e.add_trick('play dead')
d.tricks
e.tricks
```

----------------------------------------

TITLE: F-string Expression Debugging with = Specifier
DESCRIPTION: Demonstrates the new = specifier in f-strings that displays both the expression and its value, useful for debugging and logging purposes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
>>> f'{user=!s}  {delta.days=:,d}'
'user=eric_idle  delta.days=16,075'

>>> print(f'{theta=}  {cos(radians(theta))=:.3f}')
theta=30  cos(radians(theta))=0.866
```

----------------------------------------

TITLE: Defining a Function with Type Hints in Python
DESCRIPTION: This code snippet demonstrates the use of function annotations (type hints) in Python. It defines a function sum_two_numbers that expects two integer arguments (a and b) and specifies that the function will return an integer value.  Type hints improve code readability and can be used by static analysis tools.
SOURCE: https://github.com/python/cpython/blob/main/Doc/glossary.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
def sum_two_numbers(a: int, b: int) -> int:
   return a + b
```

----------------------------------------

TITLE: Python Match Statement Pattern Matching Example
DESCRIPTION: Demonstrates a match statement with multiple case blocks, showing pattern matching against a tuple, guards, variable binding, and a wildcard pattern. The example includes comments explaining each case's behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
>>> flag = False
>>> match (100, 200):
...    case (100, 300):  # Mismatch: 200 != 300
...        print('Case 1')
...    case (100, 200) if flag:  # Successful match, but guard fails
...        print('Case 2')
...    case (100, y):  # Matches and binds y to 200
...        print(f'Case 3, y: {y}')
...    case _:  # Pattern not attempted
...        print('Case 4, I match anything!')
...
Case 3, y: 200
```

----------------------------------------

TITLE: Python With Statement Context Manager Example
DESCRIPTION: Example showing the recommended way to handle multiple context managers using a with statement, replacing the deprecated nested() function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_78

LANGUAGE: Python
CODE:
```
with open('mylog.txt') as infile, open('a.out', 'w') as outfile:
    for line in infile:
        if '<critical>' in line:
            outfile.write(line)
```

----------------------------------------

TITLE: Basic Logging with Python
DESCRIPTION: This snippet demonstrates basic logging in Python, showing how to use the logging module to print messages to the console. The default level is WARNING, so only messages at this level and above are displayed. It uses functions directly from the logging module, operating on the root logger.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
import logging
logging.warning('Watch out!')  # will print a message to the console
logging.info('I told you so')  # will not print anything
```

----------------------------------------

TITLE: Retrieving Match Group and Positions
DESCRIPTION: Demonstrates methods for extracting match information using re module, including group(), start(), end(), and span() methods to get match details
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
m.group()
# Returns the substring that was matched

m.start(), m.end()
# Returns starting and ending indexes of the match

m.span()
# Returns a tuple with start and end indexes
```

----------------------------------------

TITLE: Using str.strip() in Python
DESCRIPTION: Demonstrates the strip() method to remove leading and trailing characters from a string, with examples of default whitespace removal and custom character removal.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_32

LANGUAGE: python
CODE:
```
>>> '   spacious   '.strip()
'spacious'
>>> 'www.example.com'.strip('cmowz.')
'example'

>>> comment_string = '#....... Section 3.2.1 Issue #32 .......'
>>> comment_string.strip('.#! ')
'Section 3.2.1 Issue #32'
```

----------------------------------------

TITLE: Nested List Comprehensions in Python
DESCRIPTION: Demonstrates matrix transposition using nested list comprehensions and equivalent loop-based implementations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/datastructures.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
matrix = [
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12],
]
[[row[i] for row in matrix] for i in range(4)]
```

----------------------------------------

TITLE: String Immutability in Python
DESCRIPTION: Shows that Python strings are immutable and cannot be modified after creation. Demonstrates proper way to create new strings through concatenation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/introduction.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
>>> word[0] = 'J'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment

>>> 'J' + word[1:]
'Jython'
>>> word[:2] + 'py'
'Pypy'
```

----------------------------------------

TITLE: Converting various inputs to integers using int()
DESCRIPTION: Examples of using the int() constructor to convert different types of inputs (numbers, strings in different bases) to integer objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
>>> int(123.45)
123
>>> int('123')
123
>>> int('   -12_345\n')
-12345
>>> int('FACE', 16)
64206
>>> int('0xface', 0)
64206
>>> int('01110011', base=2)
115
```

----------------------------------------

TITLE: Using Mutable Sequence Methods in Python
DESCRIPTION: This snippet shows various methods available for mutable sequences in Python, including copy, extend, multiplication, insert, pop, remove, and reverse operations. Each operation includes a brief description of its functionality and any related notes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
s.copy()                   # creates a shallow copy of s (same as s[:])
```

LANGUAGE: python
CODE:
```
s.extend(t)                # extends s with the contents of t (similar to s[len(s):len(s)] = t)
```

LANGUAGE: python
CODE:
```
s += t                     # extends s with the contents of t
```

LANGUAGE: python
CODE:
```
s *= n                     # updates s with its contents repeated n times
```

LANGUAGE: python
CODE:
```
s.insert(i, x)             # inserts x into s at index i (same as s[i:i] = [x])
```

LANGUAGE: python
CODE:
```
s.pop()                    # retrieves and removes the last item from s
```

LANGUAGE: python
CODE:
```
s.pop(i)                   # retrieves and removes the item at index i from s
```

LANGUAGE: python
CODE:
```
s.remove(x)                # removes the first item from s where s[i] equals x
```

LANGUAGE: python
CODE:
```
s.reverse()                # reverses the items of s in place
```

----------------------------------------

TITLE: Implementing Verbosity Levels with Argparse in Python
DESCRIPTION: This code demonstrates how to implement different verbosity levels using argparse. It introduces a verbosity argument that adjusts the level of detail in the program's output, depending on its value. Key dependencies include the argparse module, and the code handles integer inputs for base and exponent calculation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/argparse.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("x", type=int, help="the base")
parser.add_argument("y", type=int, help="the exponent")
parser.add_argument("-v", "--verbosity", action="count", default=0)
args = parser.parse_args()
answer = args.x**args.y
if args.verbosity >= 2:
    print(f"Running '{__file__}'")
if args.verbosity >= 1:
    print(f"{args.x}^{args.y} == ", end="")
print(answer)
```

----------------------------------------

TITLE: Installing a Specific Package Version with pip
DESCRIPTION: Command to install a specific version of a package (requests 2.6.0) using pip within an activated virtual environment. Shows the output of a successful installation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/venv.rst#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
(tutorial-env) $ python -m pip install requests==2.6.0
Collecting requests==2.6.0
  Using cached requests-2.6.0-py2.py3-none-any.whl
Installing collected packages: requests
Successfully installed requests-2.6.0
```

----------------------------------------

TITLE: Listing Installed Packages with pip list
DESCRIPTION: Command to list all packages installed in the current virtual environment using pip. Shows package names and their versions in a human-readable format.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/venv.rst#2025-04-21_snippet_9

LANGUAGE: console
CODE:
```
(tutorial-env) $ python -m pip list
novas (3.1.1.3)
numpy (1.9.2)
pip (7.0.3)
requests (2.7.0)
setuptools (16.0)
```

----------------------------------------

TITLE: Setting Breakpoints - Pdb - Python
DESCRIPTION: Sets a breakpoint at a specific line number or function. Can optionally include a filename prefix and a condition that must be true for the breakpoint to be honored. Without arguments, lists all current breakpoints.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_8



----------------------------------------

TITLE: Creating Multi-line Strings in Python
DESCRIPTION: This snippet demonstrates how to create multi-line strings in Python using triple quotes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/introduction.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
>>> print("""\
... Usage: thingy [OPTIONS]
...      -h                        Display this usage message
...      -H hostname               Hostname to connect to
... """)
Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to
```

----------------------------------------

TITLE: Fibonacci Sequence Implementation in Python
DESCRIPTION: Demonstrates basic programming concepts through a Fibonacci sequence implementation, including while loops, multiple assignment, and conditional statements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/introduction.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
>>> # Fibonacci series:
>>> # the sum of two elements defines the next
>>> a, b = 0, 1
>>> while a < 10:
...     print(a)
...     a, b = b, a+b
...
0
1
1
2
3
5
8
```

----------------------------------------

TITLE: Handling ValueError with try-except in Python
DESCRIPTION: This code demonstrates how to handle a ValueError exception that might occur when trying to convert user input to an integer, providing user-friendly error feedback and retry capability.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/errors.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> while True:
...     try:
...         x = int(input("Please enter a number: "))
...         break
...     except ValueError:
...         print("Oops!  That was no valid number.  Try again...")
...
```

----------------------------------------

TITLE: Python Interactive Mode Session Example
DESCRIPTION: Demonstrates the interactive Python shell startup, showing version information and a basic command prompt interaction.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/interpreter.rst#2025-04-21_snippet_1

LANGUAGE: shell-session
CODE:
```
$ python3.14
Python 3.14 (default, April 4 2024, 09:25:04)
[GCC 10.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>
```

----------------------------------------

TITLE: Installing Python Package with Pip
DESCRIPTION: Basic command for installing the latest version of a Python package and its dependencies from PyPI using pip.
SOURCE: https://github.com/python/cpython/blob/main/Doc/installing/index.rst#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
python -m pip install SomePackage
```

----------------------------------------

TITLE: Creating Enumerations in Python using Class and Functional Syntax
DESCRIPTION: Demonstrates two ways to create enum classes in Python: using class syntax and functional syntax. Both methods create a Color enumeration with RED, GREEN, and BLUE members.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/enum.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> from enum import Enum

>>> # class syntax
>>> class Color(Enum):
...     RED = 1
...     GREEN = 2
...     BLUE = 3

>>> # functional syntax
>>> Color = Enum('Color', [('RED', 1), ('GREEN', 2), ('BLUE', 3)])
```

----------------------------------------

TITLE: Raising Exceptions in Python
DESCRIPTION: This example demonstrates how to raise exceptions explicitly using the raise statement, showing both the use of an exception instance with arguments and the shorthand notation for raising an exception class.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/errors.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
>>> raise NameError('HiThere')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    raise NameError('HiThere')
NameError: HiThere

raise ValueError  # shorthand for 'raise ValueError()'
```

----------------------------------------

TITLE: Using 'store_true' and 'store_false' actions in argparse Python
DESCRIPTION: Illustrates the use of `action='store_true'` and `action='store_false'` for boolean flags. `store_true` defaults to `False`, and `store_false` defaults to `True`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_32

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo', action='store_true')
>>> parser.add_argument('--bar', action='store_false')
>>> parser.add_argument('--baz', action='store_false')
>>> parser.parse_args('--foo --bar'.split())
Namespace(foo=True, bar=False, baz=True)
```

----------------------------------------

TITLE: Interacting with the Operating System using os Module in Python
DESCRIPTION: Demonstrates basic operations with the os module for working with the operating system, including getting/changing directories and executing shell commands.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> import os
>>> os.getcwd()      # Return the current working directory
'C:\\Python314'
>>> os.chdir('/server/accesslogs')   # Change current working directory
>>> os.system('mkdir today')   # Run the command mkdir in the system shell
0
```

----------------------------------------

TITLE: Using match Statement for Pattern Matching in Python
DESCRIPTION: This example demonstrates how to use the match statement for pattern matching in Python, similar to switch statements in other languages.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
def http_error(status):
    match status:
        case 400:
            return "Bad request"
        case 404:
            return "Not found"
        case 418:
            return "I'm a teapot"
        case _:
            return "Something's wrong with the internet"
```

----------------------------------------

TITLE: Creating Basic Unit Tests with Python's unittest Module
DESCRIPTION: This example demonstrates how to create a simple test class with three test methods to verify string operations. It shows the basic structure of a unittest TestCase subclass, including method naming conventions, assertion methods, and how to run tests using unittest.main().
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import unittest

class TestStringMethods(unittest.TestCase):

    def test_upper(self):
        self.assertEqual('foo'.upper(), 'FOO')

    def test_isupper(self):
        self.assertTrue('FOO'.isupper())
        self.assertFalse('Foo'.isupper())

    def test_split(self):
        s = 'hello world'
        self.assertEqual(s.split(), ['hello', 'world'])
        # check that s.split fails when the separator is not a string
        with self.assertRaises(TypeError):
            s.split(2)

if __name__ == '__main__':
    unittest.main()
```

----------------------------------------

TITLE: Running Async Function After Python 3.13 (asyncio)
DESCRIPTION: Example showing the recommended pattern for running a simple asynchronous function using `asyncio.run`. This function handles loop creation, execution, and closing automatically, replacing the manual `get_event_loop`/`run_until_complete`/`close` pattern.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_30

LANGUAGE: python
CODE:
```
async def main():
    ...

asyncio.run(main())
```

----------------------------------------

TITLE: Initializing a Python Class with __init__
DESCRIPTION: Shows how to define an __init__ method in a Python class to customize object initialization. This example creates an empty list as an instance attribute.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/classes.rst#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
def __init__(self):
    self.data = []
```

----------------------------------------

TITLE: Basic Configuration for Python Logging
DESCRIPTION: Performs basic configuration for the logging system by creating a StreamHandler with a default Formatter and adding it to the root logger. It supports various keyword arguments for customization, including filename, filemode, format, level, and more.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
def basicConfig(**kwargs):
```

----------------------------------------

TITLE: Using the 'with' Statement for File Handling in Python
DESCRIPTION: This example demonstrates how to use the 'with' statement to automatically close a file after processing. The file object supports the context management protocol.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
with open('/etc/passwd', 'r') as f:
    for line in f:
        print line
        ... more processing code ...
```

----------------------------------------

TITLE: Applying Methods to a Sequence Using List Comprehension in Python
DESCRIPTION: Shows how to use list comprehensions to call a method on each object in a sequence and collect the return values in a new list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_42

LANGUAGE: python
CODE:
```
result = [obj.method() for obj in mylist]

result = [function(obj) for obj in mylist]
```

----------------------------------------

TITLE: Variable Assignment and Usage in Python
DESCRIPTION: This snippet shows how to assign values to variables and use them in calculations in Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/introduction.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> width = 20
>>> height = 5 * 9
>>> width * height
900
```

----------------------------------------

TITLE: Basic Argparse Implementation in Python
DESCRIPTION: A minimal example demonstrating how to create an ArgumentParser object and parse arguments. This shows the most basic functionality without adding any custom arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/argparse.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import argparse
parser = argparse.ArgumentParser()
parser.parse_args()
```

----------------------------------------

TITLE: Using nargs='+' for One or More Arguments
DESCRIPTION: Demonstrates how `nargs='+'` collects one or more command-line arguments into a list for a positional argument and generates an error if no arguments are provided.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_44

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser(prog='PROG')
>>> parser.add_argument('foo', nargs='+')
>>> parser.parse_args(['a', 'b'])
Namespace(foo=['a', 'b'])
>>> parser.parse_args([])
usage: PROG [-h] foo [foo ...]
PROG: error: the following arguments are required: foo
```

----------------------------------------

TITLE: Configuring Logging Across Multiple Modules in Python
DESCRIPTION: This snippet demonstrates how to set up logging across multiple modules in a Python application. It shows the configuration in the main module and how to use loggers in an auxiliary module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import logging
import auxiliary_module

# create logger with 'spam_application'
logger = logging.getLogger('spam_application')
logger.setLevel(logging.DEBUG)
# create file handler which logs even debug messages
fh = logging.FileHandler('spam.log')
fh.setLevel(logging.DEBUG)
# create console handler with a higher log level
ch = logging.StreamHandler()
ch.setLevel(logging.ERROR)
# create formatter and add it to the handlers
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)
ch.setFormatter(formatter)
# add the handlers to the logger
logger.addHandler(fh)
logger.addHandler(ch)

logger.info('creating an instance of auxiliary_module.Auxiliary')
a = auxiliary_module.Auxiliary()
logger.info('created an instance of auxiliary_module.Auxiliary')
logger.info('calling auxiliary_module.Auxiliary.do_something')
a.do_something()
logger.info('finished auxiliary_module.Auxiliary.do_something')
logger.info('calling auxiliary_module.some_function()')
auxiliary_module.some_function()
logger.info('done with auxiliary_module.some_function()')
```

----------------------------------------

TITLE: Using Lists as Stacks in Python
DESCRIPTION: Shows how to use Python lists as a stack data structure with last-in-first-out (LIFO) operations using append and pop methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/datastructures.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
stack = [3, 4, 5]
stack.append(6)
stack.append(7)
stack
stack.pop()
stack
stack.pop()
stack.pop()
stack
```

----------------------------------------

TITLE: JSON Serialization and Deserialization
DESCRIPTION: Demonstrates converting Python objects to JSON strings and writing/reading JSON data using the json module
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/inputoutput.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
import json
x = [1, 'simple', 'list']
json.dumps(x)
```

LANGUAGE: python
CODE:
```
json.dump(x, f)
```

LANGUAGE: python
CODE:
```
x = json.load(f)
```

----------------------------------------

TITLE: Upgrading a Package with pip
DESCRIPTION: Command to upgrade an existing package (requests) to the latest version using pip within an activated virtual environment. Shows the uninstallation of the old version and installation of the new one.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/venv.rst#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
(tutorial-env) $ python -m pip install --upgrade requests
Collecting requests
Installing collected packages: requests
  Found existing installation: requests 2.6.0
    Uninstalling requests-2.6.0:
      Successfully uninstalled requests-2.6.0
Successfully installed requests-2.7.0
```

----------------------------------------

TITLE: Working with datetime objects
DESCRIPTION: Demonstrates various datetime operations including combining dates and times, parsing strings, and formatting.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
>>> from datetime import datetime, date, time, timezone

>>> # Using datetime.combine()
>>> d = date(2005, 7, 14)
>>> t = time(12, 30)
>>> datetime.combine(d, t)
datetime.datetime(2005, 7, 14, 12, 30)

>>> # Using datetime.now()
>>> datetime.now()   # doctest: +SKIP
datetime.datetime(2007, 12, 6, 16, 29, 43, 79043)   # GMT +1
```

----------------------------------------

TITLE: Using an Activated Virtual Environment
DESCRIPTION: Example showing a virtual environment activation and demonstration of how the Python path now includes the virtual environment's site-packages directory. This confirms the environment is properly activated.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/venv.rst#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
$ source ~/envs/tutorial-env/bin/activate
(tutorial-env) $ python
Python 3.5.1 (default, May  6 2016, 10:59:36)
  ...
>>> import sys
>>> sys.path
['', '/usr/local/lib/python35.zip', ...,
'~/envs/tutorial-env/lib/python3.5/site-packages']
>>>
```

----------------------------------------

TITLE: Iterating Over Set Elements in Python
DESCRIPTION: This example demonstrates how to iterate over the elements of a set using a for loop.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
>>> S = {2, 3, 5, 7, 11, 13}
>>> for i in S:
...     print(i)
2
3
5
7
11
13
```

----------------------------------------

TITLE: Modifying Shared Configuration in a Module
DESCRIPTION: This snippet (mod.py) demonstrates how to import and modify variables from the configuration module, making those changes visible to all other modules that import it.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
import config
config.x = 1
```

----------------------------------------

TITLE: Using Interactive Help Functions in Python
DESCRIPTION: Shows how to use Python's built-in dir() and help() functions to explore module contents and documentation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> import os
>>> dir(os)
<returns a list of all module functions>
>>> help(os)
<returns an extensive manual page created from the module's docstrings>
```

----------------------------------------

TITLE: Using Positional and Keyword Arguments in Python Format Strings
DESCRIPTION: Demonstrates various ways to use replacement fields in Python format strings, including positional arguments (explicit and implicit), keyword arguments, accessing attributes, and accessing list elements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/string.rst#_snippet_0

LANGUAGE: Python
CODE:
```
"First, thou shalt count to {0}"
"Bring me a {}"
"From {} to {}"
"My quest is {name}"
"Weight in tons {0.weight}"
"Units destroyed: {players[0]}"
```

----------------------------------------

TITLE: Date Handling with datetime Module in Python
DESCRIPTION: Demonstrates creating, formatting, and performing arithmetic operations with dates using the datetime module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
>>> # dates are easily constructed and formatted
>>> from datetime import date
>>> now = date.today()
>>> now
datetime.date(2003, 12, 2)
>>> now.strftime("%m-%d-%y. %d %b %Y is a %A on the %d day of %B.")
'12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'

>>> # dates support calendar arithmetic
>>> birthday = date(1964, 7, 31)
>>> age = now - birthday
>>> age.days
14368
```

----------------------------------------

TITLE: String split() Example - Python
DESCRIPTION: Demonstrates various uses of the split() method including splitting with specific delimiters and maxsplit parameter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
>>> '1,2,3'.split(',')
['1', '2', '3']
>>> '1,2,3'.split(',', maxsplit=1)
['1', '2,3']
>>> '1,2,,3,'.split(',')
['1', '2', '', '3', '']
>>> '1<>2<>3<4'.split('<>')
['1', '2', '3<4']
```

----------------------------------------

TITLE: Python String Literals
DESCRIPTION: Illustrates various forms of string literals in Python, including single quotes, double quotes, triple quotes, raw strings, and byte strings.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/tokenizedata/tokenize_tests.txt#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
# String literals
x = ''; y = "";
x = '\''; y = "'";
x = '"'; y = "\"";
x = "doesn't \"shrink\" does it"
y = 'doesn\'t "shrink" does it'
x = "does \"shrink\" doesn't it"
y = 'does "shrink" doesn\'t it'
x = """
The "quick"
brown fox
jumps over
the 'lazy' dog.
"""
y = '\nThe "quick"\nbrown fox\njumps over\nthe \'lazy\' dog.\n'
y = '''
The "quick"
brown fox
jumps over
the 'lazy' dog.
''';
y = "\n\
The \"quick\"\n\
brown fox\n\
jumps over\n\
the 'lazy' dog.\n\
";
y = '\n\
The \"quick\"\n\
brown fox\n\
jumps over\n\
the \'lazy\' dog.\n\
';
x = r'\\' + R'\\'
x = r'\'' + ''
y = r'''
foo bar \\
baz''' + R'''foo'''
y = r"""foo
bar \\ baz
""" + R'''spam
'''
x = b'abc' + B'ABC'
y = b"abc" + B"ABC"
x = br'abc' + Br'ABC' + bR'ABC' + BR'ABC'
y = br"abc" + Br"ABC" + bR"ABC" + BR"ABC"
x = rb'abc' + rB'ABC' + Rb'ABC' + RB'ABC'
y = rb"abc" + rB"ABC" + Rb"ABC" + RB"ABC"
x = br'\\' + BR'\\'
x = rb'\\' + RB'\\'
x = br'\'' + ''
x = rb'\'' + ''
y = br'''
foo bar \\
baz''' + BR'''
foo'''
y = Br"""foo
bar \\ baz
""" + bR'''spam
'''
y = rB"""foo
bar \\ baz
""" + Rb'''spam
'''
```

----------------------------------------

TITLE: Comprehensive Exception Handling with Multiple Except Clauses
DESCRIPTION: This snippet demonstrates handling multiple specific exception types (OSError, ValueError) separately, with a generic Exception handler as a fallback that logs the error and re-raises it.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/errors.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
import sys

try:
    f = open('myfile.txt')
    s = f.readline()
    i = int(s.strip())
except OSError as err:
    print("OS error:", err)
except ValueError:
    print("Could not convert data to an integer.")
except Exception as err:
    print(f"Unexpected {err=}, {type(err)=}")
    raise
```

----------------------------------------

TITLE: Creating an Enum for RGB Colors in Python
DESCRIPTION: Shows how to create an Enum class for representing RGB primary colors. Each color is assigned a unique integer value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
from enum import Enum
class Color(Enum):
    RED = 1
    GREEN = 2
    BLUE = 3
```

----------------------------------------

TITLE: Working with tuples in Python
DESCRIPTION: Demonstrates tuple creation, nesting, immutability, and packing/unpacking operations in Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/datastructures.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> t = 12345, 54321, 'hello!'
>>> t[0]
12345
>>> t
(12345, 54321, 'hello!')
>>> # Tuples may be nested:
>>> u = t, (1, 2, 3, 4, 5)
>>> u
((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))
>>> # Tuples are immutable:
>>> t[0] = 88888
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> # but they can contain mutable objects:
>>> v = ([1, 2, 3], [3, 2, 1])
>>> v
([1, 2, 3], [3, 2, 1])
```

----------------------------------------

TITLE: Basic List Operations in Python
DESCRIPTION: Demonstrates common list operations including count, index, reverse, append, sort and pop methods using a fruits list example.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/datastructures.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana']
fruits.count('apple')
fruits.count('tangerine')
fruits.index('banana')
fruits.index('banana', 4)
fruits.reverse()
fruits.append('grape')
fruits.sort()
fruits.pop()
```

----------------------------------------

TITLE: SQLite Parameterized Queries for Security
DESCRIPTION: Examples showing secure SQL parameter substitution with sqlite3 to prevent SQL injection. Contrasts insecure string concatenation with the recommended parameterized query approach.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_40

LANGUAGE: python
CODE:
```
# Never do this -- insecure!
symbol = 'IBM'
c.execute("... where symbol = '%s'" % symbol)

# Do this instead
t = (symbol,)
c.execute('select * from stocks where symbol=?', t)

# Larger example
for t in (('2006-03-28', 'BUY', 'IBM', 1000, 45.00),
         ('2006-04-05', 'BUY', 'MSOFT', 1000, 72.00),
         ('2006-04-06', 'SELL', 'IBM', 500, 53.00),
        ):
    c.execute('insert into stocks values (?,?,?,?,?)', t)
```

----------------------------------------

TITLE: Creating a requirements.txt File with pip freeze
DESCRIPTION: Commands to generate a requirements.txt file containing a list of all installed packages and their versions in a format suitable for reinstallation. Shows the output file contents.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/venv.rst#2025-04-21_snippet_10

LANGUAGE: console
CODE:
```
(tutorial-env) $ python -m pip freeze > requirements.txt
(tutorial-env) $ cat requirements.txt
novas==3.1.1.3
numpy==1.9.2
requests==2.7.0
```

----------------------------------------

TITLE: File Reading Example
DESCRIPTION: Shows how to open and read from a file using Path.open()
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_35

LANGUAGE: python
CODE:
```
>>> p = Path('setup.py')
>>> with p.open() as f:
...     f.readline()
...
'#!/usr/bin/env python3\n'
```

----------------------------------------

TITLE: Module Name Check Pattern
DESCRIPTION: Demonstrates how to check if a module is being run as a script using the __name__ variable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_65

LANGUAGE: python
CODE:
```
def main():
    print('Running test...')
    ...

if __name__ == '__main__':
    main()
```

----------------------------------------

TITLE: Efficiently Concatenating Strings in Python
DESCRIPTION: Demonstrates the recommended idiom for efficiently concatenating multiple strings using a list and join() method to avoid the quadratic runtime cost of direct string concatenation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_33

LANGUAGE: python
CODE:
```
chunks = []
for s in my_strings:
    chunks.append(s)
result = ''.join(chunks)
```

----------------------------------------

TITLE: Module Script Execution Pattern in Python
DESCRIPTION: Shows how to make a module executable as both a script and an importable module using the __name__ check pattern.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/modules.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
if __name__ == "__main__":
    import sys
    fib(int(sys.argv[1]))
```

----------------------------------------

TITLE: Resource Management with With Statement
DESCRIPTION: Demonstrates proper resource management using the with statement for automatic cleanup.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/errors.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
with open("myfile.txt") as f:
    for line in f:
        print(line, end="")
```

----------------------------------------

TITLE: Installing Specific Package Versions
DESCRIPTION: Commands demonstrating how to install specific or minimum versions of Python packages using pip with version specifiers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/installing/index.rst#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
python -m pip install SomePackage==1.0.4    # specific version
python -m pip install "SomePackage>=1.0.4"  # minimum version
```

----------------------------------------

TITLE: Running Async Server After Python 3.13 (asyncio)
DESCRIPTION: Example showing the recommended pattern for running a server or long-running task using `asyncio.run` combined with an `asyncio.Event` to keep the loop running indefinitely. The server is started within an async function using `asyncio.get_running_loop`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_32

LANGUAGE: python
CODE:
```
def start_server(loop):
    ...

async def main():
    start_server(asyncio.get_running_loop())
    await asyncio.Event().wait()

asyncio.run(main())
```

----------------------------------------

TITLE: Constructing Lists in Python
DESCRIPTION: This snippet demonstrates various ways to construct lists in Python, including using square brackets, list comprehensions, and the list constructor. It shows how to create empty lists, lists with items, and convert other iterables to lists.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
[]                         # empty list using square brackets
```

LANGUAGE: python
CODE:
```
[a]                        # single-item list
```

LANGUAGE: python
CODE:
```
[a, b, c]                  # multi-item list with comma-separated values
```

LANGUAGE: python
CODE:
```
[x for x in iterable]      # list comprehension
```

LANGUAGE: python
CODE:
```
list()                     # empty list using the constructor
```

LANGUAGE: python
CODE:
```
list(iterable)             # convert an iterable to a list
```

LANGUAGE: python
CODE:
```
list('abc')                # returns ['a', 'b', 'c']
```

LANGUAGE: python
CODE:
```
list((1, 2, 3))            # returns [1, 2, 3]
```

----------------------------------------

TITLE: Working with dictionaries in Python
DESCRIPTION: Demonstrates dictionary creation, key-value pair manipulation, and basic operations like adding, deleting, and accessing elements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/datastructures.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
>>> tel = {'jack': 4098, 'sape': 4139}
>>> tel['guido'] = 4127
>>> tel
{'jack': 4098, 'sape': 4139, 'guido': 4127}
>>> tel['jack']
4098
>>> del tel['sape']
>>> tel['irv'] = 4127
>>> tel
{'jack': 4098, 'guido': 4127, 'irv': 4127}
>>> list(tel)
['jack', 'guido', 'irv']
>>> sorted(tel)
['guido', 'irv', 'jack']
>>> 'guido' in tel
True
>>> 'jack' not in tel
False
```

----------------------------------------

TITLE: Demonstrating F-String Usage in Python
DESCRIPTION: Examples of using f-strings in Python, including various formatting options, nested fields, and debugging features.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/lexical_analysis.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
>>> name = "Fred"
>>> f"He said his name is {name!r}."
"He said his name is 'Fred'."
>>> f"He said his name is {repr(name)}."
"He said his name is 'Fred'."
>>> width = 10
>>> precision = 4
>>> value = decimal.Decimal("12.34567")
>>> f"result: {value:{width}.{precision}}"
'result:      12.35'
>>> today = datetime(year=2017, month=1, day=27)
>>> f"{today:%B %d, %Y}"
'January 27, 2017'
>>> f"{today=:%B %d, %Y}"
'today=January 27, 2017'
>>> number = 1024
>>> f"{number:#0x}"
'0x400'
>>> foo = "bar"
>>> f"{ foo = }"
" foo = 'bar'"
>>> line = "The mill's closed"
>>> f"{line = }"
'line = "The mill\'s closed"'
>>> f"{line = :20}"
"line = The mill's closed   "
>>> f"{line = !r:20}"
'line = "The mill\'s closed" '
```

----------------------------------------

TITLE: Demonstrating Common Python Exceptions
DESCRIPTION: This snippet shows examples of runtime exceptions in Python: ZeroDivisionError, NameError, and TypeError, along with the resulting error messages and traceback information.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/errors.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> 10 * (1/0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    10 * (1/0)
          ~^~
ZeroDivisionError: division by zero
>>> 4 + spam*3
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    4 + spam*3
        ^^^^
NameError: name 'spam' is not defined
>>> '2' + 2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    '2' + 2
    ~~~~^~~
TypeError: can only concatenate str (not "int") to str
```

----------------------------------------

TITLE: Handling Exceptions from Function Calls in Python
DESCRIPTION: This code shows that try-except blocks catch exceptions from any function called within the try block, including nested function calls, demonstrating exception propagation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/errors.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> def this_fails():
...     x = 1/0
...
>>> try:
...     this_fails()
... except ZeroDivisionError as err:
...     print('Handling run-time error:', err)
...
Handling run-time error: division by zero
```

----------------------------------------

TITLE: Validating Directories with os.path
DESCRIPTION: The isdir function checks if a path is an existing directory, with symbolic links followed as necessary. It accommodates path-like objects starting from version 3.6.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
def isdir(path):
    return os.path.isdir(path)
```

----------------------------------------

TITLE: Copying Files with Ignore Patterns in Python
DESCRIPTION: Shows how to use shutil.copytree() with ignore_patterns() to copy a directory tree while excluding certain file patterns. This example ignores .pyc files and files/directories starting with 'tmp'.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/shutil.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from shutil import copytree, ignore_patterns

copytree(source, destination, ignore=ignore_patterns('*.pyc', 'tmp*'))
```

----------------------------------------

TITLE: Declaring Class Method in Python
DESCRIPTION: Example showing how to declare a class method using the @classmethod decorator. The class method receives the class as an implicit first argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
class C:
    @classmethod
    def f(cls, arg1, arg2): ...
```

----------------------------------------

TITLE: SSL Server Setup and Certificate Loading in Python
DESCRIPTION: Shows how to create an SSL server context, load certificates, and bind to a socket for accepting client connections.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_34

LANGUAGE: python
CODE:
```
import socket, ssl

context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
context.load_cert_chain(certfile="mycertfile", keyfile="mykeyfile")

bindsocket = socket.socket()
bindsocket.bind(('myaddr.example.com', 10023))
bindsocket.listen(5)
```

----------------------------------------

TITLE: Demonstrating Floating-Point Arithmetic Precision Issue in Python
DESCRIPTION: Example showing how floating-point calculations can produce unexpected results due to binary floating-point representation limitations, not a Python bug.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/design.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> 1.2 - 1.0
0.19999999999999996
```

----------------------------------------

TITLE: Creating Basic Type Alias (Python)
DESCRIPTION: This snippet demonstrates the straightforward syntax for creating a basic type alias named `Point` in Python using the `type` keyword. It defines `Point` as an alias for the `tuple[float, float]` type, a feature introduced in Python 3.12 via PEP 695.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/simple_stmts.rst#_snippet_12

LANGUAGE: Python
CODE:
```
type Point = tuple[float, float]
```

----------------------------------------

TITLE: Using ZoneInfo for Timezone Management in Python
DESCRIPTION: Demonstrates how to use the new zoneinfo module in Python 3.9 to work with timezones from the IANA time zone database. The example shows creating datetime objects with specific time zones and observing the effects of daylight saving time transitions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.9.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> from zoneinfo import ZoneInfo
>>> from datetime import datetime, timedelta

>>> # Daylight saving time
>>> dt = datetime(2020, 10, 31, 12, tzinfo=ZoneInfo("America/Los_Angeles"))
>>> print(dt)
2020-10-31 12:00:00-07:00
>>> dt.tzname()
'PDT'

>>> # Standard time
>>> dt += timedelta(days=7)
>>> print(dt)
2020-11-07 12:00:00-08:00
>>> print(dt.tzname())
PST
```

----------------------------------------

TITLE: Function Annotations Example
DESCRIPTION: Demonstrates how to add type annotations to function parameters and return values
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
def f(ham: str, eggs: str = 'eggs') -> str:
    print("Annotations:", f.__annotations__)
    print("Arguments:", ham, eggs)
    return ham + ' and ' + eggs
```

----------------------------------------

TITLE: Demonstrating Instance Variable Manipulation in Python
DESCRIPTION: This code snippet shows how to create, modify, and delete instance variables in Python. It demonstrates that instance variables can be created on the fly without prior declaration.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/classes.rst#2025-04-23_snippet_4

LANGUAGE: Python
CODE:
```
x.counter = 1
while x.counter < 10:
    x.counter = x.counter * 2
print(x.counter)
del x.counter
```

----------------------------------------

TITLE: Adding Help Text with argparse Python
DESCRIPTION: Illustrates how to provide help messages for arguments using the `help` parameter. It shows how to include format specifiers like `%(prog)s` and `%(default)s` and demonstrates the output of `print_help()`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_55

LANGUAGE: Python
CODE:
```
>>> parser = argparse.ArgumentParser(prog='frobble')
>>> parser.add_argument('bar', nargs='?', type=int, default=42,
...                     help='the bar to %(prog)s (default: %(default)s)')
>>> parser.print_help()
usage: frobble [-h] [bar]

positional arguments:
 bar     the bar to frobble (default: 42)

options:
 -h, --help  show this help message and exit
```

----------------------------------------

TITLE: Using Intra-Package References
DESCRIPTION: Shows examples of absolute and relative imports for referencing submodules within a package. Examples include using 'from . import echo' and 'from ..filters import equalizer' to refer to modules in sibling and parent packages. Proper package structure is required for resolving these imports.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/modules.rst#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
from . import echo
from .. import formats
from ..filters import equalizer
```

----------------------------------------

TITLE: Using create_autospec for Auto-Speccing in Python
DESCRIPTION: Shows how to use create_autospec to generate a mock that has the same API as the original function, ensuring type checking and argument validation match the real object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
from unittest.mock import create_autospec
def function(a, b, c):
    pass

mock_function = create_autospec(function, return_value='fishy')
mock_function(1, 2, 3)
mock_function.assert_called_once_with(1, 2, 3)
mock_function('wrong arguments')
```

----------------------------------------

TITLE: Using assert_has_awaits in AsyncMock
DESCRIPTION: Demonstrates how to use assert_has_awaits to verify that an AsyncMock was awaited with a specific sequence of calls, with options to check for strict ordering.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_32

LANGUAGE: python
CODE:
```
>>> mock = AsyncMock()
>>> async def main(*args, **kwargs):
...     await mock(*args, **kwargs)
...
>>> calls = [call("foo"), call("bar")]
>>> mock.assert_has_awaits(calls)
Traceback (most recent call last):
...
AssertionError: Awaits not found.
Expected: [call('foo'), call('bar')]
Actual: []
>>> asyncio.run(main('foo'))
>>> asyncio.run(main('bar'))
>>> mock.assert_has_awaits(calls)
```

----------------------------------------

TITLE: Using Dictionaries with str.format() in Python
DESCRIPTION: Demonstrates accessing dictionary values in format strings either by passing the dictionary as the first argument and using square brackets, or by unpacking the dictionary with ** notation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/inputoutput.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
>>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
>>> print('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; '
...       'Dcab: {0[Dcab]:d}'.format(table))
Jack: 4098; Sjoerd: 4127; Dcab: 8637678

>>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
>>> print('Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.format(**table))
Jack: 4098; Sjoerd: 4127; Dcab: 8637678

>>> table = {k: str(v) for k, v in vars().items()}
>>> message = " ".join([f'{k}: ' + '{' + k +'};' for k in table.keys()])
>>> print(message.format(**table))
__name__: __main__; __doc__: None; __package__: None; __loader__: ...
```

----------------------------------------

TITLE: Logging Format Example with Extra Parameters - Python
DESCRIPTION: Demonstrates how to use custom attributes in log messages using the extra parameter. Shows configuration of format string and logging with additional context data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
FORMAT = '%(asctime)s %(clientip)-15s %(user)-8s %(message)s'
logging.basicConfig(format=FORMAT)
d = {'clientip': '192.168.0.1', 'user': 'fbloggs'}
logger = logging.getLogger('tcpserver')
logger.warning('Protocol problem: %s', 'connection reset', extra=d)
```

----------------------------------------

TITLE: Defining static methods with @staticmethod decorator in Python
DESCRIPTION: Demonstrates how to define a static method in Python using the @staticmethod decorator, which allows defining methods that don't require a self parameter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_55

LANGUAGE: python
CODE:
```
class C:
    @staticmethod
    def static(arg1, arg2, arg3):
        # No 'self' parameter!
        ...
```

----------------------------------------

TITLE: Function with Non-Mutable Default Argument
DESCRIPTION: This function uses a non-mutable default argument to avoid shared state across calls by initializing the list within the function body. This avoids issues that arise from using mutable default arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
def f(a, L=None):
    if L is None:
        L = []
    L.append(a)
    return L
```

----------------------------------------

TITLE: Defining Future Functions - asyncio - Python
DESCRIPTION: This snippet defines functions 'isfuture' and 'ensure_future' which help in checking if an object is a Future or Task and in creating a Task for an Awaitable. It also discusses the parameters and error handling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-future.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
.. function:: isfuture(obj)

   Return ``True`` if *obj* is either of:

   * an instance of :class:`asyncio.Future`,
   * an instance of :class:`asyncio.Task`,
   * a Future-like object with a ``_asyncio_future_blocking``
     attribute.

   .. versionadded:: 3.5


.. function:: ensure_future(obj, *, loop=None)

   Return:

   * *obj* argument as is, if *obj* is a :class:`Future`,
     a :class:`Task`, or a Future-like object (:func:`isfuture`
     is used for the test.)

   * a :class:`Task` object wrapping *obj*, if *obj* is a
     coroutine (:func:`iscoroutine` is used for the test);
     in this case the coroutine will be scheduled by
     ``ensure_future()``.

   * a :class:`Task` object that would await on *obj*, if *obj* is an
     awaitable (:func:`inspect.isawaitable` is used for the test.)

   If *obj* is neither of the above a :exc:`TypeError` is raised.

   .. important::

      Save a reference to the result of this function, to avoid
      a task disappearing mid-execution.

      See also the :func:`create_task` function which is the
      preferred way for creating new tasks or use :class:`asyncio.TaskGroup`
      which keeps reference to the task internally.

   .. versionchanged:: 3.5.1
      The function accepts any :term:`awaitable` object.

   .. deprecated:: 3.10
      Deprecation warning is emitted if *obj* is not a Future-like object
      and *loop* is not specified and there is no running event loop.
```

----------------------------------------

TITLE: Random Number Generation in Python
DESCRIPTION: Shows various random number generation capabilities of the random module, including selecting random items, sampling, and generating random numbers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
>>> import random
>>> random.choice(['apple', 'pear', 'banana'])
'apple'
>>> random.sample(range(100), 10)   # sampling without replacement
[30, 83, 16, 4, 8, 81, 41, 50, 18, 33]
>>> random.random()    # random float from the interval [0.0, 1.0)
0.17970987693706186
>>> random.randrange(6)    # random integer chosen from range(6)
4
```

----------------------------------------

TITLE: Parsing URLs with urlparse() in Python
DESCRIPTION: Demonstrates how to use urlparse() to break a URL into its six components (scheme, netloc, path, parameters, query, fragment). Shows examples of parsing different URL formats and accessing components both by index and as named attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.parse.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from urllib.parse import urlparse
urlparse("scheme://netloc/path;parameters?query#fragment")

```

LANGUAGE: python
CODE:
```
o = urlparse("http://docs.python.org:80/3/library/urllib.parse.html?highlight=params#url-parsing")
o
o.scheme
o.netloc
o.hostname
o.port
o._replace(fragment="").geturl()

```

LANGUAGE: python
CODE:
```
from urllib.parse import urlparse
urlparse('//www.cwi.nl:80/%7Eguido/Python.html')
urlparse('www.cwi.nl/%7Eguido/Python.html')
urlparse('help/Python.html')

```

LANGUAGE: python
CODE:
```
from urllib.parse import urlparse
u = urlparse('//www.cwi.nl:80/%7Eguido/Python.html')
u
u._replace(scheme='http')

```

----------------------------------------

TITLE: Defining Generic Type Aliases (PEP 695)
DESCRIPTION: Shows how the new `type` statement can be used to define generic type aliases by including a type parameter list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_3

LANGUAGE: Python
CODE:
```
type Point[T] = tuple[T, T]
```

----------------------------------------

TITLE: Lambda Expression Examples
DESCRIPTION: Shows different use cases for lambda functions including creating function factories and sorting
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
def make_incrementor(n):
    return lambda x: x + n

pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
pairs.sort(key=lambda pair: pair[1])
```

----------------------------------------

TITLE: Asyncio Socket Example
DESCRIPTION: This snippet creates a pair of connected sockets using `socket.socketpair()`. It then registers one of the sockets to wait for data using `loop.create_connection()` with a custom protocol. It simulates sending data to the socket and waits for the connection to be closed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
        # Create a pair of connected sockets
        rsock, wsock = socket.socketpair()

        # Register the socket to wait for data.
        transport, protocol = await loop.create_connection(
            lambda: MyProtocol(on_con_lost), sock=rsock)

        # Simulate the reception of data from the network.
        loop.call_soon(wsock.send, 'abc'.encode())

        try:
            await protocol.on_con_lost
        finally:
            transport.close()
            wsock.close()

    asyncio.run(main())
```

----------------------------------------

TITLE: JSON Encoding and Decoding in Python
DESCRIPTION: Shows how to use the json module to encode Python objects to JSON strings and decode JSON back into Python objects
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_47

LANGUAGE: python
CODE:
```
>>> import json
>>> data = {"spam": "foo", "parrot": 42}
>>> in_json = json.dumps(data) # Encode the data
>>> in_json
'{"parrot": 42, "spam": "foo"}'
>>> json.loads(in_json) # Decode into a Python object
{"spam": "foo", "parrot": 42}
```

----------------------------------------

TITLE: Using asyncio.run() Function - Python
DESCRIPTION: Shows two equivalent ways to execute a coroutine using asyncio - the simplified asyncio.run() approach and the manual event loop management approach.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
import asyncio

async def main():
    await asyncio.sleep(0)
    return 42

asyncio.run(main())
```

LANGUAGE: python
CODE:
```
import asyncio

async def main():
    await asyncio.sleep(0)
    return 42

loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)
try:
    loop.run_until_complete(main())
finally:
    asyncio.set_event_loop(None)
    loop.close()
```

----------------------------------------

TITLE: Implementing Logging Context Manager in Python
DESCRIPTION: A context manager class that allows temporary modification of logging configuration. Supports changing log levels and adding handlers within a specific scope.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_51

LANGUAGE: python
CODE:
```
import logging
import sys

class LoggingContext:
    def __init__(self, logger, level=None, handler=None, close=True):
        self.logger = logger
        self.level = level
        self.handler = handler
        self.close = close

    def __enter__(self):
        if self.level is not None:
            self.old_level = self.logger.level
            self.logger.setLevel(self.level)
        if self.handler:
            self.logger.addHandler(self.handler)

    def __exit__(self, et, ev, tb):
        if self.level is not None:
            self.logger.setLevel(self.old_level)
        if self.handler:
            self.logger.removeHandler(self.handler)
        if self.handler and self.close:
            self.handler.close()
```

----------------------------------------

TITLE: Basic Logging Usage in Python
DESCRIPTION: Demonstrates basic usage of Python's logging module with different log levels and service operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_54

LANGUAGE: shell
CODE:
```
$ python app.py stop foo bar
INFO stop Stopped the 'foo' and 'bar' services.

$ python app.py restart foo bar baz
INFO restart Restarted the 'foo', 'bar' and 'baz' services.
```

----------------------------------------

TITLE: Ensuring resource management with the with statement in Python
DESCRIPTION: This code block illustrates how the with statement guarantees resource management by using context managers. It ensures that the exit method of the context manager is always called, handling exceptions if they occur. No additional dependencies are required other than a suitable context manager implementation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
with EXPRESSION as TARGET:
    SUITE

# is semantically equivalent to:

manager = (EXPRESSION)
enter = type(manager).__enter__
exit = type(manager).__exit__
value = enter(manager)
hit_except = False

try:
    TARGET = value
    SUITE
except:
    hit_except = True
    if not exit(manager, *sys.exc_info()):
        raise
finally:
    if not hit_except:
        exit(manager, None, None, None)
```

----------------------------------------

TITLE: Basic Python List Sorting
DESCRIPTION: Demonstrates basic list sorting using Python's built-in sorted() function and list.sort() method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/sorting.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> sorted([5, 2, 3, 1, 4])
[1, 2, 3, 4, 5]

>>> a = [5, 2, 3, 1, 4]
>>> a.sort()
>>> a
[1, 2, 3, 4, 5]
```

----------------------------------------

TITLE: Counting Characters with defaultdict
DESCRIPTION: This snippet demonstrates how to utilize defaultdict with int as the default factory to count the occurrences of characters in a string.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
>>> s = 'mississippi'
>>> d = defaultdict(int)
>>> for k in s:
...     d[k] += 1
...
>>> sorted(d.items())
[('i', 4), ('m', 1), ('p', 2), ('s', 4)]
```

----------------------------------------

TITLE: Basic Exception Handling Example - Python
DESCRIPTION: Simple example showing a try-except block structure in Python that demonstrates exception handling syntax.
SOURCE: https://github.com/python/cpython/blob/main/InternalDocs/exception_handling.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
try:
    g(0)
except:
    res = "fail"
```

----------------------------------------

TITLE: Demonstrating Exception Printing and Formatting in Python
DESCRIPTION: This example showcases various ways to print and format exceptions and tracebacks using the traceback module. It includes examples of print_tb, print_exception, print_exc, format_exc, format_exception, extract_tb, and format_tb functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_28

LANGUAGE: python
CODE:
```
import sys, traceback

def lumberjack():
    bright_side_of_life()

def bright_side_of_life():
    return tuple()[0]

try:
    lumberjack()
except IndexError as exc:
    print("*** print_tb:")
    traceback.print_tb(exc.__traceback__, limit=1, file=sys.stdout)
    print("*** print_exception:")
    traceback.print_exception(exc, limit=2, file=sys.stdout)
    print("*** print_exc:")
    traceback.print_exc(limit=2, file=sys.stdout)
    print("*** format_exc, first and last line:")
    formatted_lines = traceback.format_exc().splitlines()
    print(formatted_lines[0])
    print(formatted_lines[-1])
    print("*** format_exception:")
    print(repr(traceback.format_exception(exc)))
    print("*** extract_tb:")
    print(repr(traceback.extract_tb(exc.__traceback__)))
    print("*** format_tb:")
    print(repr(traceback.format_tb(exc.__traceback__)))
    print("*** tb_lineno:", exc.__traceback__.tb_lineno)
```

----------------------------------------

TITLE: Describing Union Types in Python
DESCRIPTION: This function demonstrates the creation of a union type for accepting either an integer or a float as input. It provides a flexible type hinting approach that simplifies usage while maintaining type safety.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_101

LANGUAGE: python
CODE:
```
def square(number: int | float) -> int | float:
    return number ** 2
```

----------------------------------------

TITLE: Using asyncio.TaskGroup for Structured Concurrency Python
DESCRIPTION: Illustrates using asyncio.TaskGroup to manage multiple tasks concurrently with strong safety guarantees. The tasks are run and completed within an async context manager.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
async def main():
    async with asyncio.TaskGroup() as tg:
        task1 = tg.create_task(
            say_after(1, 'hello'))

        task2 = tg.create_task(
            say_after(2, 'world'))

        print(f"started at {time.strftime('%X')}")

    # The await is implicit when the context manager exits.

    print(f"finished at {time.strftime('%X')}")
```

----------------------------------------

TITLE: Initializing ArgumentParser in Python
DESCRIPTION: This snippet demonstrates how to create a basic ArgumentParser object. The constructor accepts various keyword arguments to configure the parser's behavior and help messages, such as the program name, description, and epilog.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_0

LANGUAGE: python
CODE:
```
parser = argparse.ArgumentParser(
                       prog='ProgramName',
                       description='What the program does',
                       epilog='Text at the bottom of help')
```

----------------------------------------

TITLE: Returning Normalized Absolutized Pathnames with os.path
DESCRIPTION: The function abspath(path) returns a normalized absolutized version of the pathname by joining the current working directory with the given path using normpath. Since version 3.6, it accepts path-like objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
def abspath(path):
    return normpath(join(os.getcwd(), path))
```

----------------------------------------

TITLE: Sequence Comparisons in Python
DESCRIPTION: Provides examples of using lexicographical ordering to compare sequences in Python. Lexicographical comparisons consider sequence types and their ordering, applying recursively for nested sequences.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/datastructures.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
(1, 2, 3)              < (1, 2, 4)
[1, 2, 3]              < [1, 2, 4]
'ABC' < 'C' < 'Pascal' < 'Python'
(1, 2, 3, 4)           < (1, 2, 4)
(1, 2)                 < (1, 2, -1)
(1, 2, 3)             == (1.0, 2.0, 3.0)
(1, 2, ('aa', 'ab'))   < (1, 2, ('abc', 'a'), 4)
```

----------------------------------------

TITLE: Importing and Basic Usage of Python Pathlib
DESCRIPTION: Examples showing basic usage of the pathlib module including importing Path class, listing directories, and file operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> from pathlib import Path

>>> p = Path('.')
>>> [x for x in p.iterdir() if x.is_dir()]
[PosixPath('.hg'), PosixPath('docs'), PosixPath('dist'),
 PosixPath('__pycache__'), PosixPath('build')]

>>> list(p.glob('**/*.py'))
[PosixPath('test_pathlib.py'), PosixPath('setup.py'),
 PosixPath('pathlib.py'), PosixPath('docs/conf.py'),
 PosixPath('build/lib/pathlib.py')]
```

----------------------------------------

TITLE: Implementing Static Method in Python Using Decorator
DESCRIPTION: Example showing how to define and use a static method using the @staticmethod decorator. Static methods don't reference the 'self' variable and can be called from either a class or an instance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
class E:
    @staticmethod
    def f(x):
        return x * 10
```

----------------------------------------

TITLE: Deprecating sqlite3.Cursor.execute() with Named Placeholders and Sequence in Python
DESCRIPTION: Using named placeholders (e.g., ':name') with parameters supplied as a sequence (e.g., a tuple or list) in sqlite3.Cursor.execute() is deprecated. A DeprecationWarning is emitted, and this usage will raise a ProgrammingError in Python 3.14. Parameters for named placeholders must be supplied as a dictionary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_30

LANGUAGE: Python
CODE:
```
cursor.execute("SELECT * FROM table WHERE id = :id", (1,))
```

----------------------------------------

TITLE: Mutable List Modification in Python Function
DESCRIPTION: Shows how to modify a list in-place within a function to affect the original variable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
def func2(a):
    a[0] = 'new-value'     # 'a' references a mutable list
    a[1] = a[1] + 1        # changes a shared object
```

----------------------------------------

TITLE: Reading CSV Files with Default Format - Python
DESCRIPTION: This snippet demonstrates the simplest way to read a CSV file using Python's csv module. It opens a file named 'some.csv' and prints each row read from it. The reading process takes the system's default newline processing into account.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/csv.rst#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
import csv
with open('some.csv', newline='') as f:
    reader = csv.reader(f)
    for row in reader:
        print(row)
```

----------------------------------------

TITLE: Implementing Conditional Logging with Performance Optimization
DESCRIPTION: Demonstrates how to conditionally log messages based on log level to avoid expensive function calls when logging is disabled. This optimization prevents unnecessary computation of expensive arguments when the logger's threshold is set above the specified level.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
if logger.isEnabledFor(logging.DEBUG):
    logger.debug('Message with %s, %s', expensive_func1(),
                                        expensive_func2())
```

----------------------------------------

TITLE: Bytes Hexadecimal Conversion Methods
DESCRIPTION: Demonstrates conversion between bytes and hexadecimal representations with various formatting options
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_40

LANGUAGE: python
CODE:
```
bytes.fromhex('2Ef0 F1f2  ')
```

LANGUAGE: python
CODE:
```
b'\xf0\xf1\xf2'.hex()
```

LANGUAGE: python
CODE:
```
b'\xf0\xf1\xf2'.hex('-')
```

----------------------------------------

TITLE: Using Unpack with TypedDict for **kwargs Typing
DESCRIPTION: Demonstrates how to use `Unpack` with a `TypedDict` to provide precise type hints for arbitrary keyword arguments (`**kwargs`) in a function signature.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_92

LANGUAGE: python
CODE:
```
from typing import TypedDict, Unpack

class Movie(TypedDict):
    name: str
    year: int

# This function expects two keyword arguments - `name` of type `str`
# and `year` of type `int`.
def foo(**kwargs: Unpack[Movie]): ...
```

----------------------------------------

TITLE: Convert mapping types into sorted item lists before sorting
DESCRIPTION: This snippet converts mapping (dictionary) types into sorted item lists before sorting. The `key` argument in the `sorted` function uses a lambda expression to sort each dictionary's items (key-value pairs) before comparing the dictionaries themselves. This avoids `TypeError` exceptions, which occur when attempting to directly compare dictionaries.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/sorting.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```

>>> data = [{'a': 1}, {'b': 2}]
>>> sorted(data, key=lambda d: sorted(d.items()))
[{'a': 1}, {'b': 2}]

```

----------------------------------------

TITLE: Using threading.local for thread-local data (Python)
DESCRIPTION: This snippet demonstrates how to initialize and use thread-local storage provided by the `threading.local` class. An instance of `threading.local` is created, and attributes (like 'x') are assigned to it. Each thread accessing the same `mydata` instance will have its own distinct value for `mydata.x`. This is used to manage data that needs to be unique per thread.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/threading.rst#_snippet_0

LANGUAGE: Python
CODE:
```
mydata = threading.local()
mydata.x = 1
```

----------------------------------------

TITLE: Try-Finally Clean-up Actions
DESCRIPTION: Demonstrates using finally clause for clean-up actions that must execute regardless of exceptions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/errors.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
try:
    raise KeyboardInterrupt
finally:
    print('Goodbye, world!')
```

----------------------------------------

TITLE: Executing Git Commit Command using Popen in Python
DESCRIPTION: This snippet demonstrates how to pass arguments to an external program (git) using a sequence with the Popen constructor. It shows the recommended way to execute a command with arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/subprocess.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
Popen(["/usr/bin/git", "commit", "-m", "Fixes a bug."])
```

----------------------------------------

TITLE: Running Coroutines with asyncio Python
DESCRIPTION: A code snippet showing the use of async/await syntax to create a coroutine and run it with asyncio.run(), demonstrating a simple asynchronous operation with delays.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import asyncio

async def main():
    print('hello')
    await asyncio.sleep(1)
    print('world')

asyncio.run(main())
```

----------------------------------------

TITLE: Using asyncio Condition with async with statement
DESCRIPTION: This snippet demonstrates the preferred way to use an asyncio Condition with an `async with` statement. The `async with` statement ensures that the underlying lock is acquired before waiting on the condition and released afterward, even if exceptions occur.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-sync.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
"cond = asyncio.Condition()

# ... later
async with cond:
    await cond.wait()"
```

----------------------------------------

TITLE: Encoding and Decoding Filesystem Paths in Python
DESCRIPTION: Encodes a path-like object to the filesystem encoding and decoding it back. Useful for handling file paths in a standard way across different platforms.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
.. function:: fsencode(filename)

   Encode :term:`path-like <path-like object>` *filename* to the
   :term:`filesystem encoding and error handler`; return :class:`bytes`
   unchanged.

   :func:`fsdecode` is the reverse function.

   .. versionadded:: 3.2

   .. versionchanged:: 3.6
      Support added to accept objects implementing the :class:`os.PathLike`
      interface.
```

LANGUAGE: Python
CODE:
```
.. function:: fsdecode(filename)

   Decode the :term:`path-like <path-like object>` *filename* from the
   :term:`filesystem encoding and error handler`; return :class:`str`
   unchanged.

   :func:`fsencode` is the reverse function.

   .. versionadded:: 3.2

   .. versionchanged:: 3.6
      Support added to accept objects implementing the :class:`os.PathLike`
      interface.
```

----------------------------------------

TITLE: Defining Type Aliases in Python
DESCRIPTION: Example showing how to create and use type aliases to simplify type hints in function signatures. Demonstrates refactoring complex type annotations into more readable form.
SOURCE: https://github.com/python/cpython/blob/main/Doc/glossary.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
def remove_gray_shades(
        colors: list[tuple[int, int, int]]) -> list[tuple[int, int, int]]:
    pass

# Simplified version using type alias
Color = tuple[int, int, int]

def remove_gray_shades(colors: list[Color]) -> list[Color]:
    pass
```

----------------------------------------

TITLE: Assigning a Single Object Reference to Multiple Variables in Python
DESCRIPTION: Demonstrates assigning the *same* newly created empty list object to two different variables, 'e' and 'f', using chained assignment. This ensures that 'e' and 'f' are aliases, both referring to the exact same list object in memory. Changes to the list through one variable will be visible through the other.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_2

LANGUAGE: Python
CODE:
```
e = f = []
```

----------------------------------------

TITLE: Basic URL Fetching with urllib in Python
DESCRIPTION: Demonstrates the simplest way to fetch a URL using urllib.request.urlopen(). The content of the URL is read and stored in a variable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/urllib2.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
import urllib.request
with urllib.request.urlopen('http://python.org/') as response:
   html = response.read()
```

----------------------------------------

TITLE: Inserting Multiple Rows into SQLite Table in Python
DESCRIPTION: Executes an INSERT statement to add two rows of data to the 'movie' table. This demonstrates how to insert multiple records in a single SQL statement.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
cur.execute("""
    INSERT INTO movie VALUES
        ('Monty Python and the Holy Grail', 1975, 8.2),
        ('And Now for Something Completely Different', 1971, 7.5)
""")
con.commit()
```

----------------------------------------

TITLE: Recursive Directory Creation with makedirs() in Python
DESCRIPTION: Creates nested directory structure including all necessary parent directories. Supports exist_ok parameter to handle existing directories and preserves parent directory permissions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_40

LANGUAGE: python
CODE:
```
makedirs(name, mode=0o777, exist_ok=False)
```

----------------------------------------

TITLE: Using Self for Methods Returning Current Class Instance in Python
DESCRIPTION: Shows how the `Self` type can be used as a return annotation for methods that return an instance of the class they are called on, correctly preserving the specific subclass type in inheritance scenarios.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_53

LANGUAGE: python
CODE:
```
from typing import Self, reveal_type

class Foo:
    def return_self(self) -> Self:
        ...
        return self

class SubclassOfFoo(Foo): pass

reveal_type(Foo().return_self())  # Revealed type is "Foo"
reveal_type(SubclassOfFoo().return_self())  # Revealed type is "SubclassOfFoo"
```

----------------------------------------

TITLE: Defining Functions with Positional-Only and Keyword-Only Parameters
DESCRIPTION: This section describes how to define functions utilizing positional-only parameters and keyword-only parameters using '/' and '*', respectively. This provides clarity on how arguments are expected to be passed during function calls.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):
    pass
```

----------------------------------------

TITLE: Generating URL-safe Random String with Python secrets Module
DESCRIPTION: This snippet demonstrates the use of token_urlsafe() function from the secrets module to generate a URL-safe random string containing 16 random bytes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/secrets.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> token_urlsafe(16)  #doctest:+SKIP
'Drmhze6EPcv0fN_81Bj-nA'
```

----------------------------------------

TITLE: Creating Mock File Context with mock_open
DESCRIPTION: Demonstrates how to use mock_open to simulate file operations and context management for testing purposes
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_58

LANGUAGE: python
CODE:
```
with patch('__main__.open', mock_open(read_data='bibble')) as m:
    with open('foo') as h:
        result = h.read()

m.assert_called_once_with('foo')
assert result == 'bibble'
```

----------------------------------------

TITLE: Logging to Multiple Destinations with Different Formats in Python
DESCRIPTION: This example demonstrates how to log messages to multiple destinations (console and file) with different formats and log levels in Python. It configures root logger and creates additional loggers for different areas of an application.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
import logging

# set up logging to file - see previous section for more details
logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
                    datefmt='%m-%d %H:%M',
                    filename='/tmp/myapp.log',
                    filemode='w')
# define a Handler which writes INFO messages or higher to the sys.stderr
console = logging.StreamHandler()
console.setLevel(logging.INFO)
# set a format which is simpler for console use
formatter = logging.Formatter('%(name)-12s: %(levelname)-8s %(message)s')
# tell the handler to use this format
console.setFormatter(formatter)
# add the handler to the root logger
logging.getLogger('').addHandler(console)

# Now, we can log to the root logger, or any other logger. First the root...
logging.info('Jackdaws love my big sphinx of quartz.')

# Now, define a couple of other loggers which might represent areas in your
# application:

logger1 = logging.getLogger('myapp.area1')
logger2 = logging.getLogger('myapp.area2')

logger1.debug('Quick zephyrs blow, vexing daft Jim.')
logger1.info('How quickly daft jumping zebras vex.')
logger2.warning('Jail zesty vixen who grabbed pay from quack.')
logger2.error('The five boxing wizards jump quickly.')
```

----------------------------------------

TITLE: Modifying a Dictionary While Iterating in Python
DESCRIPTION: This snippet shows two strategies for modifying a dictionary while iterating over it: using a copy of the dictionary and creating a new dictionary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
# Create a sample collection
users = {'Hans': 'active', 'Éléonore': 'inactive', '景太郎': 'active'}

# Strategy:  Iterate over a copy
for user, status in users.copy().items():
    if status == 'inactive':
        del users[user]

# Strategy:  Create a new collection
active_users = {}
for user, status in users.items():
    if status == 'active':
        active_users[user] = status
```

----------------------------------------

TITLE: Compiling Regular Expression Patterns in Python
DESCRIPTION: Demonstrates how to compile a regular expression pattern into a regular expression object using re.compile(). Shows the equivalent usage of re.match() for comparison.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
prog = re.compile(pattern)
result = prog.match(string)
```

LANGUAGE: python
CODE:
```
result = re.match(pattern, string)
```

----------------------------------------

TITLE: Running and Stopping the Loop - Asyncio - Python
DESCRIPTION: This snippet outlines methods related to running and stopping the event loop: `run_until_complete`, `run_forever`, `stop`, `is_running`, `is_closed`, and `close`. Each method controls the execution flow of asynchronous tasks, managing the lifecycle of the event loop itself.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
.. method:: loop.run_until_complete(future)

   Run until the *future* (an instance of :class:`Future`) has
   completed.

   If the argument is a :ref:`coroutine object <coroutine>` it
   is implicitly scheduled to run as a :class:`asyncio.Task`.

   Return the Future's result or raise its exception.

.. method:: loop.run_forever()

   Run the event loop until :meth:`stop` is called.

   If :meth:`stop` is called before :meth:`run_forever` is called,
   the loop will poll the I/O selector once with a timeout of zero,
   run all callbacks scheduled in response to I/O events (and
   those that were already scheduled), and then exit.

   If :meth:`stop` is called while :meth:`run_forever` is running,
   the loop will run the current batch of callbacks and then exit.
   Note that new callbacks scheduled by callbacks will not run in this
   case; instead, they will run the next time :meth:`run_forever` or
   :meth:`run_until_complete` is called.

.. method:: loop.stop()

   Stop the event loop.

.. method:: loop.is_running()

   Return ``True`` if the event loop is currently running.

.. method:: loop.is_closed()

   Return ``True`` if the event loop was closed.

.. method:: loop.close()

   Close the event loop.

   The loop must not be running when this function is called.
   Any pending callbacks will be discarded.

   This method clears all queues and shuts down the executor, but does
   not wait for the executor to finish.

   This method is idempotent and irreversible.  No other methods
   should be called after the event loop is closed.
```

----------------------------------------

TITLE: Using Fractions and Decimal Modules for Precise Representation in Python
DESCRIPTION: This snippet demonstrates how to use the fractions and decimal modules in Python to perform precise calculations and representations of floating-point numbers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/floatingpoint.rst#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
>>> from decimal import Decimal
>>> from fractions import Fraction

>>> Fraction.from_float(0.1)
Fraction(3602879701896397, 36028797018963968)

>>> (0.1).as_integer_ratio()
(3602879701896397, 36028797018963968)

>>> Decimal.from_float(0.1)
Decimal('0.1000000000000000055511151231257827021181583404541015625')

>>> format(Decimal.from_float(0.1), '.17')
'0.10000000000000001'
```

----------------------------------------

TITLE: Configuring Mock Return Value in Python
DESCRIPTION: Demonstrates how to set and use the return_value attribute of a Mock object. This attribute determines the value returned when the mock is called.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
>>> mock = Mock()
>>> mock.return_value.attribute = sentinel.Attribute
>>> mock.return_value()
<Mock name='mock()()' id='...'>
>>> mock.return_value.assert_called_with()

>>> mock = Mock(return_value=3)
>>> mock.return_value
3
>>> mock()
3
```

----------------------------------------

TITLE: Using str.isupper() Method in Python
DESCRIPTION: The isupper() method checks if all cased characters in a string are uppercase. This example shows testing various strings with different casing patterns.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
'BANANA'.isupper()
True
'banana'.isupper()
False
'baNana'.isupper()
False
```

----------------------------------------

TITLE: Package Directory Structure Example
DESCRIPTION: Shows a typical Python package directory structure for a sound processing library.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/modules.rst#2025-04-21_snippet_7

LANGUAGE: text
CODE:
```
sound/                          Top-level package
         __init__.py               Initialize the sound package
         formats/                  Subpackage for file format conversions
                 __init__.py
                 wavread.py
                 wavwrite.py
                 aiffread.py
                 aiffwrite.py
                 auread.py
                 auwrite.py
                 ...
         effects/                  Subpackage for sound effects
                 __init__.py
                 echo.py
                 surround.py
                 reverse.py
                 ...
         filters/                  Subpackage for filters
                 __init__.py
                 equalizer.py
                 vocoder.py
                 karaoke.py
                 ...
```

----------------------------------------

TITLE: Python Package Directory Structure Example
DESCRIPTION: Example showing a typical Python package directory layout with multiple subpackages and modules.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/import.rst#2025-04-21_snippet_4

LANGUAGE: text
CODE:
```
package/
    __init__.py
    subpackage1/
        __init__.py
        moduleX.py
        moduleY.py
    subpackage2/
        __init__.py
        moduleZ.py
    moduleA.py
```

----------------------------------------

TITLE: Assigning UTF-8 Encoded Text to Variable in Python
DESCRIPTION: This snippet demonstrates the assignment of arbitrary UTF-8 encoded text to a variable 'x'. The text contains Cyrillic characters.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/tokenizedata/tokenize_tests-no-coding-cookie-and-utf8-bom-sig-only.txt#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
x = 'ЉЊЈЁЂ'
```

----------------------------------------

TITLE: Using the global Keyword to Access Outer Scope Variables
DESCRIPTION: This snippet shows how to use the global keyword to explicitly indicate that a variable refers to a global variable, allowing modification of the global variable inside a function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> x = 10
>>> def foobar():
...     global x
...     print(x)
...     x += 1
...
>>> foobar()
10
```

----------------------------------------

TITLE: Pattern Matching with Point Tuples in Python
DESCRIPTION: Demonstrates basic pattern matching using tuple patterns to match point coordinates and bind variables. Shows different cases for matching origin point, points on axes, and general points.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
match point:
    case (0, 0):
        print("Origin")
    case (0, y):
        print(f"Y={y}")
    case (x, 0):
        print(f"X={x}")
    case (x, y):
        print(f"X={x}, Y={y}")
    case _:
        raise ValueError("Not a point")
```

----------------------------------------

TITLE: Demonstrating Python Iterators with Lists
DESCRIPTION: This example shows how to manually use Python's iterator interface with a list. It creates an iterator from a list, then uses both the __next__() method and the next() function to retrieve elements from the iterator one by one.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> L = [1, 2, 3]
>>> it = iter(L)
>>> it  #doctest: +ELLIPSIS
<...iterator object at ...>
>>> it.__next__()  # same as next(it)
1
>>> next(it)
2
```

----------------------------------------

TITLE: Demonstrating Iterator Usage in Python
DESCRIPTION: This snippet shows how to use an iterator in Python, including calling next() and handling StopIteration exceptions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> next(it)
3
>>> next(it)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration
>>>
```

----------------------------------------

TITLE: Comparing timedelta.seconds vs total_seconds() in Python
DESCRIPTION: Illustrates a common mistake when working with timedelta objects - using the seconds attribute instead of the total_seconds() method, which gives different results for durations longer than one day.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> from datetime import timedelta
>>> duration = timedelta(seconds=11235813)
>>> duration.days, duration.seconds
(130, 3813)
>>> duration.total_seconds()
11235813.0
```

----------------------------------------

TITLE: Implementing Test Reuse with Mixin Classes in Python
DESCRIPTION: Shows how to maximize code reuse in tests by using mixin classes. This pattern allows testing the same functionality with different input types without duplicating code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/test.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
class TestFuncAcceptsSequencesMixin:

    func = mySuperWhammyFunction

    def test_func(self):
        self.func(self.arg)

class AcceptLists(TestFuncAcceptsSequencesMixin, unittest.TestCase):
    arg = [1, 2, 3]

class AcceptStrings(TestFuncAcceptsSequencesMixin, unittest.TestCase):
    arg = 'abc'

class AcceptTuples(TestFuncAcceptsSequencesMixin, unittest.TestCase):
    arg = (1, 2, 3)
```

----------------------------------------

TITLE: Basic Random Module Usage Examples in Python
DESCRIPTION: Demonstrates basic usage of the random module, including generating random floats, integers from ranges, choosing elements from sequences, shuffling lists, and sampling without replacement.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/random.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> random()                          # Random float:  0.0 <= x < 1.0
0.37444887175646646

>>> uniform(2.5, 10.0)                # Random float:  2.5 <= x <= 10.0
3.1800146073117523

>>> expovariate(1 / 5)                # Interval between arrivals averaging 5 seconds
5.148957571865031

>>> randrange(10)                     # Integer from 0 to 9 inclusive
7

>>> randrange(0, 101, 2)              # Even integer from 0 to 100 inclusive
26

>>> choice(['win', 'lose', 'draw'])   # Single random element from a sequence
'draw'

>>> deck = 'ace two three four'.split()
>>> shuffle(deck)                     # Shuffle a list
>>> deck
['four', 'two', 'ace', 'three']

>>> sample([10, 20, 30, 40, 50], k=4) # Four samples without replacement
[40, 10, 50, 30]
```

----------------------------------------

TITLE: Patching Class Methods
DESCRIPTION: This snippet demonstrates using patch.object to replace a specific method of a class with a mock and assert it was called with expected arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_46

LANGUAGE: python
CODE:
```
>>> @patch.object(SomeClass, 'class_method')
... def test(mock_method):
...     SomeClass.class_method(3)
...     mock_method.assert_called_with(3)
...
>>> test()
```

----------------------------------------

TITLE: Accessing Exception Arguments in Python
DESCRIPTION: This example shows how to capture an exception instance in a variable and access its arguments and details using the 'as' keyword in the except clause.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/errors.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> try:
...     raise Exception('spam', 'eggs')
... except Exception as inst:
...     print(type(inst))    # the exception type
...     print(inst.args)     # arguments stored in .args
...     print(inst)          # __str__ allows args to be printed directly,
...                          # but may be overridden in exception subclasses
...     x, y = inst.args     # unpack args
...     print('x =', x)
...     print('y =', y)
...
<class 'Exception'>
('spam', 'eggs')
('spam', 'eggs')
x = spam
y = eggs
```

----------------------------------------

TITLE: Iterating Over File Lines in Python
DESCRIPTION: This snippet shows how to iterate over the lines of a file using a for loop.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
for line in file:
    # do something for each line
    ...
```

----------------------------------------

TITLE: Parsing Optional and Positional Arguments with argparse Python
DESCRIPTION: Illustrates how `argparse.parse_args` handles both optional arguments (identified by '-') and positional arguments, showing successful parsing and required argument errors.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_29

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser(prog='PROG')
>>> parser.add_argument('-f', '--foo')
>>> parser.add_argument('bar')
>>> parser.parse_args(['BAR'])
Namespace(bar='BAR', foo=None)
>>> parser.parse_args(['BAR', '--foo', 'FOO'])
Namespace(bar='BAR', foo='FOO')
>>> parser.parse_args(['--foo', 'FOO'])
usage: PROG [-h] [-f FOO] bar
PROG: error: the following arguments are required: bar
```

----------------------------------------

TITLE: Basic Pool Usage Example in Python
DESCRIPTION: Demonstrates using a multiprocessing Pool to perform parallel processing, including async evaluation, mapping operations, and timeout handling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_41

LANGUAGE: python
CODE:
```
from multiprocessing import Pool
import time

def f(x):
    return x*x

if __name__ == '__main__':
    with Pool(processes=4) as pool:         # start 4 worker processes
        result = pool.apply_async(f, (10,)) # evaluate "f(10)" asynchronously in a single process
        print(result.get(timeout=1))        # prints "100" unless your computer is *very* slow

        print(pool.map(f, range(10)))       # prints "[0, 1, 4,..., 81]"

        it = pool.imap(f, range(10))
        print(next(it))                     # prints "0"
        print(next(it))                     # prints "1"
        print(it.next(timeout=1))           # prints "4" unless your computer is *very* slow

        result = pool.apply_async(time.sleep, (10,))
        print(result.get(timeout=1))        # raises multiprocessing.TimeoutError
```

----------------------------------------

TITLE: Parsing Arguments from a List with argparse (Python)
DESCRIPTION: Demonstrates how to pass a list of strings directly to ArgumentParser.parse_args instead of using sys.argv. This is useful for testing or parsing arguments from sources other than the command line. The example shows parsing a list with and without the '--sum' option.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_72

LANGUAGE: python
CODE:
```
parser = argparse.ArgumentParser()
parser.add_argument(
    'integers', metavar='int', type=int, choices=range(10),
    nargs='+', help='an integer in the range 0..9')
parser.add_argument(
    '--sum', dest='accumulate', action='store_const', const=sum,
    default=max, help='sum the integers (default: find the max)')
parser.parse_args(['1', '2', '3', '4'])
parser.parse_args(['1', '2', '3', '4', '--sum'])
```

----------------------------------------

TITLE: Container Type Arguments (list, Mapping) - Python
DESCRIPTION: Illustrates how standard containers like `list` and `Mapping` expect a fixed number of type arguments (one for list elements, two for mapping keys/values). Shows correct and incorrect examples. Requires `collections.abc`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_16

LANGUAGE: python
CODE:
```
from collections.abc import Mapping

# Type checker will infer that all elements in ``x`` are meant to be ints
x: list[int] = []

# Type checker error: ``list`` only accepts a single type argument:
y: list[int, str] = [1, 'foo']

# Type checker will infer that all keys in ``z`` are meant to be strings,
# and that all values in ``z`` are meant to be either strings or ints
z: Mapping[str, str | int] = {}
```

----------------------------------------

TITLE: Using cache Decorator for Function Memoization in Python
DESCRIPTION: Example demonstrating the @cache decorator to memoize factorial calculations. The cache stores previous results to avoid redundant recursive calls.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
@cache
def factorial(n):
    return n * factorial(n-1) if n else 1

>>> factorial(10)      # no previously cached result, makes 11 recursive calls
3628800
>>> factorial(5)       # just looks up cached value result
120
>>> factorial(12)      # makes two new recursive calls, the other 10 are cached
479001600
```

----------------------------------------

TITLE: Using QueueHandler and QueueListener for Thread-Safe Logging in Python
DESCRIPTION: Demonstrates how to set up thread-safe logging using QueueHandler and QueueListener classes. This approach prevents blocking in the main application thread by offloading the actual logging operations to a separate thread, which is particularly useful when handlers might be slow.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
que = queue.Queue(-1)  # no limit on size
queue_handler = QueueHandler(que)
handler = logging.StreamHandler()
listener = QueueListener(que, handler)
root = logging.getLogger()
root.addHandler(queue_handler)
formatter = logging.Formatter('%(threadName)s: %(message)s')
handler.setFormatter(formatter)
listener.start()
# The log output will display the thread which generated
# the event (the main thread) rather than the internal
# thread which monitors the internal queue. This is what
# you want to happen.
root.warning('Look out!')
listener.stop()
```

----------------------------------------

TITLE: Reading with Explicit Encoding
DESCRIPTION: This code snippet illustrates how to read from a text file while ensuring the encoding is explicitly set, thereby avoiding potential encoding-related issues when handling non-ASCII characters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/io.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
with open("README.md") as f:
    long_description = f.read()
```

----------------------------------------

TITLE: Base64 Encoding Example with bytes
DESCRIPTION: Demonstrates encoding a byte string to base64 and then decoding it back to the original data using Python's base64 module
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/base64.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
import base64\nencoded = base64.b64encode(b'data to be encoded')\nencoded\nb'ZGF0YSB0byBiZSBlbmNvZGVk'\ndata = base64.b64decode(encoded)\ndata\nb'data to be encoded'
```

----------------------------------------

TITLE: Running Shell Command with Asyncio
DESCRIPTION: Demonstrates how to run a shell command asynchronously, capture stdout and stderr, and handle the process result
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-subprocess.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
async def run(cmd):
    proc = await asyncio.create_subprocess_shell(
        cmd,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE)

    stdout, stderr = await proc.communicate()

    print(f'[{cmd!r} exited with {proc.returncode}]')
    if stdout:
        print(f'[stdout]\n{stdout.decode()}')
    if stderr:
        print(f'[stderr]\n{stderr.decode()}')

asyncio.run(run('ls /zzz'))
```

----------------------------------------

TITLE: Adding Positional Arguments in Argparse
DESCRIPTION: Demonstrates how to add a required positional argument to an argparse parser. This example adds an 'echo' argument that will print whatever value is provided by the user.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/argparse.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("echo")
args = parser.parse_args()
print(args.echo)
```

----------------------------------------

TITLE: Unit Testing with unittest Module in Python
DESCRIPTION: Demonstrates creating more comprehensive tests using the unittest module with test classes and methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
import unittest

class TestStatisticalFunctions(unittest.TestCase):

    def test_average(self):
        self.assertEqual(average([20, 30, 70]), 40.0)
        self.assertEqual(round(average([1, 5, 7]), 1), 4.3)
        with self.assertRaises(ZeroDivisionError):
            average([])
        with self.assertRaises(TypeError):
            average(20, 30, 70)

unittest.main()  # Calling from the command line invokes all tests
```

----------------------------------------

TITLE: Exception Group with Iteration Notes
DESCRIPTION: Demonstrates combining exception groups with notes to provide context for each error. Shows how to track when each error occurred during iteration.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/errors.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
def f():
    raise OSError('operation failed')

excs = []
for i in range(3):
    try:
        f()
    except Exception as e:
        e.add_note(f'Happened in Iteration {i+1}')
        excs.append(e)

raise ExceptionGroup('We have some problems', excs)
```

----------------------------------------

TITLE: Implementing Worker Threads with Queue in Python
DESCRIPTION: This snippet demonstrates how to create a pool of worker threads that process jobs from a queue. It uses the threading and queue modules to manage concurrent execution.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/library.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import threading, queue, time

# The worker thread gets jobs off the queue.  When the queue is empty, it
# assumes there will be no more work and exits.
# (Realistically workers will run until terminated.)
def worker():
    print('Running worker')
    time.sleep(0.1)
    while True:
        try:
            arg = q.get(block=False)
        except queue.Empty:
            print('Worker', threading.current_thread(), end=' ')
            print('queue empty')
            break
        else:
            print('Worker', threading.current_thread(), end=' ')
            print('running with argument', arg)
            time.sleep(0.5)

# Create queue
q = queue.Queue()

# Start a pool of 5 workers
for i in range(5):
    t = threading.Thread(target=worker, name='worker %i' % (i+1))
    t.start()

# Begin adding work to the queue
for i in range(50):
    q.put(i)

# Give threads time to run
print('Main thread sleeping')
time.sleep(5)
```

----------------------------------------

TITLE: Creating an In-Memory Binary Stream with BytesIO
DESCRIPTION: This snippet demonstrates the creation of an in-memory binary stream using the BytesIO class, suitable for handling binary data in memory.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/io.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
f = io.BytesIO(b"some initial binary data: \x00\x01")
```

----------------------------------------

TITLE: Configuring Multiprocess Logging in Python
DESCRIPTION: This snippet demonstrates how to set up logging configurations for multiple processes, including a main process, worker processes, and a listener process. It uses Queue and QueueHandler for inter-process communication of log messages.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_34

LANGUAGE: python
CODE:
```
def main():
    q = Queue()
    # The main process gets a simple configuration which prints to the console.
    config_initial = {
        'version': 1,
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'level': 'INFO'
            }
        },
        'root': {
            'handlers': ['console'],
            'level': 'DEBUG'
        }
    }
    # The worker process configuration is just a QueueHandler attached to the
    # root logger, which allows all messages to be sent to the queue.
    config_worker = {
        'version': 1,
        'disable_existing_loggers': True,
        'handlers': {
            'queue': {
                'class': 'logging.handlers.QueueHandler',
                'queue': q
            }
        },
        'root': {
            'handlers': ['queue'],
            'level': 'DEBUG'
        }
    }
    # The listener process configuration shows that the full flexibility of
    # logging configuration is available to dispatch events to handlers however
    # you want.
    config_listener = {
        'version': 1,
        'disable_existing_loggers': True,
        'formatters': {
            'detailed': {
                'class': 'logging.Formatter',
                'format': '%(asctime)s %(name)-15s %(levelname)-8s %(processName)-10s %(message)s'
            },
            'simple': {
                'class': 'logging.Formatter',
                'format': '%(name)-15s %(levelname)-8s %(processName)-10s %(message)s'
            }
        },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
                'level': 'INFO'
            },
            'file': {
                'class': 'logging.FileHandler',
                'filename': 'mplog.log',
                'mode': 'w',
                'formatter': 'detailed'
            },
            'foofile': {
                'class': 'logging.FileHandler',
                'filename': 'mplog-foo.log',
                'mode': 'w',
                'formatter': 'detailed'
            },
            'errors': {
                'class': 'logging.FileHandler',
                'filename': 'mplog-errors.log',
                'mode': 'w',
                'formatter': 'detailed',
                'level': 'ERROR'
            }
        },
        'loggers': {
            'foo': {
                'handlers': ['foofile']
            }
        },
        'root': {
            'handlers': ['console', 'file', 'errors'],
            'level': 'DEBUG'
        }
    }
    # Log some initial events, just to show that logging in the parent works
    # normally.
    logging.config.dictConfig(config_initial)
    logger = logging.getLogger('setup')
    logger.info('About to create workers ...')
    workers = []
    for i in range(5):
        wp = Process(target=worker_process, name='worker %d' % (i + 1),
                     args=(config_worker,))
        workers.append(wp)
        wp.start()
        logger.info('Started worker: %s', wp.name)
    logger.info('About to create listener ...')
    stop_event = Event()
    lp = Process(target=listener_process, name='listener',
                 args=(q, stop_event, config_listener))
    lp.start()
    logger.info('Started listener')
    # We now hang around for the workers to finish their work.
    for wp in workers:
        wp.join()
    # Workers all done, listening can now stop.
    # Logging in the parent still works normally.
    logger.info('Telling listener to stop ...')
    stop_event.set()
    lp.join()
    logger.info('All done.')
```

----------------------------------------

TITLE: Creating Distinct Type with NewType in Python
DESCRIPTION: Explains how to use `NewType` to create a distinct type that helps static type checkers catch logical errors, while having no runtime overhead.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import NewType

UserId = NewType('UserId', int)
some_id = UserId(524313)
```

----------------------------------------

TITLE: File System Stats Example
DESCRIPTION: Example showing how to use os.stat() to get file information in a cross-platform way.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
os.stat(path)
```

----------------------------------------

TITLE: Using Subtests for Granular Test Iterations in Python unittest
DESCRIPTION: Demonstrates how to use the subTest context manager to create more granular test iterations within a single test method. This is useful for testing multiple similar cases without stopping at the first failure.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
class NumbersTest(unittest.TestCase):

    def test_even(self):
        """
        Test that numbers between 0 and 5 are all even.
        """
        for i in range(0, 6):
            with self.subTest(i=i):
                self.assertEqual(i % 2, 0)
```

----------------------------------------

TITLE: Making a GET Request with URL Parameters using urllib.request
DESCRIPTION: This example demonstrates how to make a GET request to a URL with parameters encoded using urllib.parse.urlencode. The encoded parameters are appended to the URL, and the response content is read and decoded as UTF-8.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_49

LANGUAGE: python
CODE:
```
>>> import urllib.request
>>> import urllib.parse
>>> params = urllib.parse.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})
>>> url = "http://www.musi-cal.com/cgi-bin/query?%s" % params
>>> with urllib.request.urlopen(url) as f:
...     print(f.read().decode('utf-8'))
... 
```

----------------------------------------

TITLE: Implementing Property with Getter, Setter, and Deleter Using Decorators in Python
DESCRIPTION: Demonstrates creating a property with getter, setter, and deleter methods using decorator chaining. This approach allows for more organized and readable property implementations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
class C:
    def __init__(self):
        self._x = None

    @property
    def x(self):
        """I'm the 'x' property."""
        return self._x

    @x.setter
    def x(self, value):
        self._x = value

    @x.deleter
    def x(self):
        del self._x
```

----------------------------------------

TITLE: Initializing and Using Counter Objects in Python
DESCRIPTION: This snippet demonstrates various ways to initialize Counter objects and use their methods. It covers creating empty counters, initializing from iterables and mappings, and accessing counts.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
c = Counter()                           # a new, empty counter
c = Counter('gallahad')                 # a new counter from an iterable
c = Counter({'red': 4, 'blue': 2})      # a new counter from a mapping
c = Counter(cats=4, dogs=8)             # a new counter from keyword args

c = Counter(['eggs', 'ham'])
c['bacon']                              # count of a missing element is zero
0

c['sausage'] = 0                        # counter entry with a zero count
del c['sausage']                        # del actually removes the entry
```

----------------------------------------

TITLE: Using perf_counter Function in Python
DESCRIPTION: Returns the value of a high-resolution performance counter in fractional seconds, useful for benchmarking and measuring short durations. Uses the same clock as time.monotonic in CPython.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/time.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
perf_counter() -> float
```

----------------------------------------

TITLE: Caching Database Query Function using functools in Python
DESCRIPTION: The functools module introduces an lru_cache decorator to cache function calls, thereby saving repeated queries to external resources. This can significantly optimize database access by caching results of frequent searches. Dependencies include ensuring the function receives immutable arguments suitable for caching. The cache can be reset if underlying data changes using cache_clear.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
>>> import functools
>>> @functools.lru_cache(maxsize=300)
... def get_phone_number(name):
...     c = conn.cursor()
...     c.execute('SELECT phonenumber FROM phonelist WHERE name=?', (name,))
...     return c.fetchone()[0]

>>> for name in user_requests:        # doctest: +SKIP
...     get_phone_number(name)        # cached lookup

>>> get_phone_number.cache_info()     # doctest: +SKIP

>>> get_phone_number.cache_clear()
```

----------------------------------------

TITLE: Basic Copy Function Usage - Python
DESCRIPTION: Creates a shallow copy of an object, where a new compound object is created but contains references to the objects in the original.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/copy.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
copy(obj)
```

----------------------------------------

TITLE: Fix for never-awaited coroutines
DESCRIPTION: This snippet shows the recommended fix for the `RuntimeWarning` caused by a never-awaited coroutine.  The fix is to either await the coroutine using the `await` keyword or schedule it as a task using `asyncio.create_task`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-dev.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
async def main():
    await test()
```

----------------------------------------

TITLE: Handling Multiple Exception Types in Python
DESCRIPTION: This example shows how to specify multiple exception types in a single except clause by using a tuple of exception classes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/errors.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
... except (RuntimeError, TypeError, NameError):
...     pass
```

----------------------------------------

TITLE: Mocking Unbound Methods with Autospec
DESCRIPTION: Demonstrates how to patch unbound methods while preserving method signatures and ensuring self is passed correctly
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
>>> class Foo:
...   def foo(self):
...     pass
...
>>> with patch.object(Foo, 'foo', autospec=True) as mock_foo:
...   mock_foo.return_value = 'foo'
...   foo = Foo()
...   foo.foo()
...
'foo'
>>> mock_foo.assert_called_once_with(foo)
```

----------------------------------------

TITLE: Executing Coroutine in asyncio Event Loop - Python
DESCRIPTION: This function executes a coroutine in an asyncio event loop and manages the lifecycle of the event loop, including finalizing asynchronous generators and closing the executor. It takes parameters for debug mode and a loop factory for customized event loop creation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-runner.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
async def main():
    await asyncio.sleep(1)
    print('hello')

asyncio.run(main())
```

----------------------------------------

TITLE: URL Fetching with ThreadPoolExecutor
DESCRIPTION: Complete example showing how to use ThreadPoolExecutor to fetch multiple URLs concurrently and handle exceptions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/concurrent.futures.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
import concurrent.futures
import urllib.request

URLS = ['http://www.foxnews.com/',
        'http://www.cnn.com/',
        'http://europe.wsj.com/',
        'http://www.bbc.co.uk/',
        'http://nonexistent-subdomain.python.org/']

# Retrieve a single page and report the URL and contents
def load_url(url, timeout):
    with urllib.request.urlopen(url, timeout=timeout) as conn:
        return conn.read()

# We can use a with statement to ensure threads are cleaned up promptly
with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
    # Start the load operations and mark each future with its URL
    future_to_url = {executor.submit(load_url, url, 60): url for url in URLS}
    for future in concurrent.futures.as_completed(future_to_url):
        url = future_to_url[future]
        try:
            data = future.result()
        except Exception as exc:
            print('%r generated an exception: %s' % (url, exc))
        else:
            print('%r page is %d bytes' % (url, len(data)))
```

----------------------------------------

TITLE: Executing Code in Thread or Process Pools in asyncio - Python
DESCRIPTION: These methods facilitate the execution of blocking code in a specified executor context. Users can utilize thread or process pools and supply functions with parameters. This design prevents blocking the event loop while allowing integration of synchronous code into asynchronous workflows.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
.. awaitablemethod:: loop.run_in_executor(executor, func, *args)
   Arrange for *func* to be called in the specified executor.

   The *executor* argument should be an :class:`concurrent.futures.Executor`
   instance. The default executor is used if *executor* is ``None``.
   The default executor can be set by :meth:`loop.set_default_executor`,
   otherwise, a :class:`concurrent.futures.ThreadPoolExecutor` will be
   lazy-initialized and used by :func:`run_in_executor` if needed.

   Example::

      import asyncio
      import concurrent.futures

      def blocking_io():
          # File operations (such as logging) can block the
          # event loop: run them in a thread pool.
          with open('/dev/urandom', 'rb') as f:
              return f.read(100)

      def cpu_bound():
          # CPU-bound operations will block the event loop:
          # in general it is preferable to run them in a
          # process pool.
          return sum(i * i for i in range(10 ** 7))

      async def main():
          loop = asyncio.get_running_loop()

          ## Options:

          # 1. Run in the default loop's executor:
          result = await loop.run_in_executor(
              None, blocking_io)
          print('default thread pool', result)

          # 2. Run in a custom thread pool:
          with concurrent.futures.ThreadPoolExecutor() as pool:
              result = await loop.run_in_executor(
                  pool, blocking_io)
              print('custom thread pool', result)

          # 3. Run in a custom process pool:
          with concurrent.futures.ProcessPoolExecutor() as pool:
              result = await loop.run_in_executor(
                  pool, cpu_bound)
              print('custom process pool', result)

          # 4. Run in a custom interpreter pool:
          with concurrent.futures.InterpreterPoolExecutor() as pool:
              result = await loop.run_in_executor(
                  pool, cpu_bound)
              print('custom interpreter pool', result)

      if __name__ == '__main__':
          asyncio.run(main())

   Note that the entry point guard (``if __name__ == '__main__'``)
   is required for option 3 due to the peculiarities of :mod:`multiprocessing`,
   which is used by :class:`~concurrent.futures.ProcessPoolExecutor`.
   See :ref:`Safe importing of main module <multiprocessing-safe-main-import>`.

   This method returns a :class:`asyncio.Future` object.

   Use :func:`functools.partial` :ref:`to pass keyword arguments
   <asyncio-pass-keywords>` to *func*.

   .. versionchanged:: 3.5.3
      :meth:`loop.run_in_executor` no longer configures the
      ``max_workers`` of the thread pool executor it creates, instead
      leaving it up to the thread pool executor
      (:class:`~concurrent.futures.ThreadPoolExecutor`) to set the
      default.

.. method:: loop.set_default_executor(executor)

   Set *executor* as the default executor used by :meth:`run_in_executor`.
   *executor* must be an instance of
   :class:`~concurrent.futures.ThreadPoolExecutor`, which includes
   :class:`~concurrent.futures.InterpreterPoolExecutor`.

   .. versionchanged:: 3.11
      *executor* must be an instance of
      :class:`~concurrent.futures.ThreadPoolExecutor`.
```

----------------------------------------

TITLE: Implementing Restricted Unpickling in Python
DESCRIPTION: Security-focused implementation of a restricted unpickler that only allows safe built-in classes to be loaded. Prevents arbitrary code execution during unpickling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pickle.rst#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
import builtins
import io
import pickle

safe_builtins = {
    'range',
    'complex',
    'set',
    'frozenset',
    'slice',
}

class RestrictedUnpickler(pickle.Unpickler):

    def find_class(self, module, name):
        # Only allow safe classes from builtins.
        if module == "builtins" and name in safe_builtins:
            return getattr(builtins, name)
        # Forbid everything else.
        raise pickle.UnpicklingError("global '%s.%s' is forbidden" %
                                     (module, name))

def restricted_loads(s):
    """Helper function analogous to pickle.loads()."""
    return RestrictedUnpickler(io.BytesIO(s)).load()
```

----------------------------------------

TITLE: Defining a Coroutine Function in Python
DESCRIPTION: Shows how to define a coroutine function using the `async def` syntax, which allows the suspension and resumption of execution via `await` statements. It highlights the constraint of not using `yield from` in coroutine bodies.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
async def func(param1, param2):
    do_stuff()
    await some_coroutine()
```

----------------------------------------

TITLE: Invoke pdb from Command Line
DESCRIPTION: Shows the command-line syntax for invoking the `pdb` module to debug a Python script or module. The debugger will pause execution before the first line. Options allow executing commands or specifying a module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_3

LANGUAGE: Shell
CODE:
```
python -m pdb [-c command] (-m module | pyfile) [args ...]
```

----------------------------------------

TITLE: Creating a Text Stream with open
DESCRIPTION: This code snippet demonstrates how to create a text stream using the built-in open function with specified encoding. It highlights the importance of explicitly setting encoding to avoid issues on different operating systems.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/io.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
f = open("myfile.txt", "r", encoding="utf-8")
```

----------------------------------------

TITLE: Tracking Memory Usage with tracemalloc in Python
DESCRIPTION: This example demonstrates how to use tracemalloc to monitor memory usage during operations. It computes sums with different sized temporary lists, showing how to measure both current memory usage and peak memory usage, and how to reset peak measurements between operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tracemalloc.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
import tracemalloc

tracemalloc.start()

# Example code: compute a sum with a large temporary list
large_sum = sum(list(range(100000)))

first_size, first_peak = tracemalloc.get_traced_memory()

tracemalloc.reset_peak()

# Example code: compute a sum with a small temporary list
small_sum = sum(list(range(1000)))

second_size, second_peak = tracemalloc.get_traced_memory()

print(f"{first_size=}, {first_peak=}")
print(f"{second_size=}, {second_peak=}")
```

----------------------------------------

TITLE: Encoding Python Data Structure to JSON
DESCRIPTION: This snippet shows the json.JSONEncoder's encode method, which converts a Python data structure into its JSON string representation. The example illustrates converting a dictionary containing a list into JSON format.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/json.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
>>> json.JSONEncoder().encode({"foo": ["bar", "baz"]})
'{"foo": ["bar", "baz"]}'
```

----------------------------------------

TITLE: Instantiating Concrete Paths in Python
DESCRIPTION: Shows how to create concrete path objects using Path, PosixPath, and WindowsPath classes. Demonstrates system-specific behavior and error handling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
>>> import os
>>> os.name
'posix'
>>> Path('setup.py')
PosixPath('setup.py')
>>> PosixPath('setup.py')
PosixPath('setup.py')
>>> WindowsPath('setup.py')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "pathlib.py", line 798, in __new__
    % (cls.__name__,))
UnsupportedOperation: cannot instantiate 'WindowsPath' on your system
```

----------------------------------------

TITLE: Getting Package Version (Python)
DESCRIPTION: Shows how to import the `version` function from `importlib.metadata` and use it to retrieve the version string of an installed distribution package by its name, such as 'wheel'. Requires the specified package to be installed in the current environment.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_1

LANGUAGE: Python Console
CODE:
```
>>> from importlib.metadata import version  # doctest: +SKIP
>>> version('wheel')  # doctest: +SKIP
'0.32.3'
```

----------------------------------------

TITLE: Defining a Bounded TypeVar (New Syntax)
DESCRIPTION: Illustrates the modern syntax for defining a type variable with an upper bound using the `:` syntax within a generic class definition.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_97

LANGUAGE: python
CODE:
```
class StrSequence[S: str]:  # S is a TypeVar with a `str` upper bound;
    ...                     # we can say that S is "bounded by `str`"
```

----------------------------------------

TITLE: Using a Data Class in Python
DESCRIPTION: This example shows how to create an instance of the Employee data class and access its attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/classes.rst#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
>>> john = Employee('john', 'computer lab', 1000)
>>> john.dept
'computer lab'
>>> john.salary
1000
```

----------------------------------------

TITLE: Defining a Basic Python Class
DESCRIPTION: Demonstrates the simplest form of class definition in Python. This example shows the basic structure of a class with a docstring and two class members: an integer attribute and a method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/classes.rst#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
class MyClass:
    """A simple example class"""
    i = 12345

    def f(self):
        return 'hello world'
```

----------------------------------------

TITLE: Running Coroutines Concurrently with asyncio Python
DESCRIPTION: Demonstrates the use of asyncio.create_task to execute coroutines concurrently, where two tasks are scheduled and awaited, printing outputs asynchronously.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
async def main():
    task1 = asyncio.create_task(
        say_after(1, 'hello'))

    task2 = asyncio.create_task(
        say_after(2, 'world'))

    print(f"started at {time.strftime('%X')}")

    # Wait until both tasks are completed (should take
    # around 2 seconds.)
    await task1
    await task2

    print(f"finished at {time.strftime('%X')}")
```

----------------------------------------

TITLE: Redirecting stdout with contextlib.redirect_stdout in Python
DESCRIPTION: Shows how to use redirect_stdout to capture or redirect the output of functions that write to sys.stdout. Examples include capturing help() output to a string and redirecting output to a file or sys.stderr.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextlib.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
with redirect_stdout(io.StringIO()) as f:
    help(pow)
s = f.getvalue()
```

LANGUAGE: python
CODE:
```
with open('help.txt', 'w') as f:
    with redirect_stdout(f):
        help(pow)
```

LANGUAGE: python
CODE:
```
with redirect_stdout(sys.stderr):
    help(pow)
```

----------------------------------------

TITLE: Property Attribute Implementation in Python
DESCRIPTION: Example showing how to define a managed attribute using the property class with getter, setter and deleter methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
class C:
    def __init__(self):
        self._x = None

    def getx(self):
        return self._x

    def setx(self, value):
        self._x = value

    def delx(self):
        del self._x
```

----------------------------------------

TITLE: Implementing RotatingFileHandler for Logging
DESCRIPTION: This code snippet sets up a logger that utilizes the RotatingFileHandler to manage log files, allowing for the creation of new log files once a certain size is reached. It demonstrates how to configure the logger, add the handler, and produce log messages that will be managed by this handler.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
import glob
import logging
import logging.handlers

LOG_FILENAME = 'logging_rotatingfile_example.out'

# Set up a specific logger with our desired output level
my_logger = logging.getLogger('MyLogger')
my_logger.setLevel(logging.DEBUG)

# Add the log message handler to the logger
handler = logging.handlers.RotatingFileHandler(
                 LOG_FILENAME, maxBytes=20, backupCount=5)

my_logger.addHandler(handler)

# Log some messages
for i in range(20):
    my_logger.debug('i = %d' % i)

# See what files are created
logfiles = glob.glob('%s*' % LOG_FILENAME)

for filename in logfiles:
    print(filename)
```

----------------------------------------

TITLE: Working with sets in Python
DESCRIPTION: Demonstrates set creation, membership testing, and set operations like union, intersection, difference, and symmetric difference.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/datastructures.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
>>> basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
>>> print(basket)                      # show that duplicates have been removed
{'orange', 'banana', 'pear', 'apple'}
>>> 'orange' in basket                 # fast membership testing
True
>>> 'crabgrass' in basket
False

>>> # Demonstrate set operations on unique letters from two words
>>>
>>> a = set('abracadabra')
>>> b = set('alacazam')
>>> a                                  # unique letters in a
{'a', 'r', 'b', 'c', 'd'}
>>> a - b                              # letters in a but not in b
{'r', 'd', 'b'}
>>> a | b                              # letters in a or b or both
{'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}
>>> a & b                              # letters in both a and b
{'a', 'c'}
>>> a ^ b                              # letters in a or b but not both
{'r', 'd', 'b', 'm', 'z', 'l'}
```

----------------------------------------

TITLE: Improving F-String Debugging with = Feature
DESCRIPTION: Add a new debugging feature to f-strings that displays the expression and its value
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0b1.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
f"{3*9+15=}"  # Produces '3*9+15=42'
```

----------------------------------------

TITLE: Checking instance types with isinstance() in Python
DESCRIPTION: Demonstrates how to use the isinstance() function to check if an object is an instance of a class, including testing for virtual inheritance from abstract base classes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_48

LANGUAGE: python
CODE:
```
from collections.abc import Mapping

class P:
     pass

class C(P):
    pass

Mapping.register(P)
```

----------------------------------------

TITLE: Queue Deadlock Example in Python Multiprocessing
DESCRIPTION: Demonstrates a deadlock scenario when using multiprocessing queues where joining a process before retrieving queue items causes the program to hang.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_45

LANGUAGE: python
CODE:
```
from multiprocessing import Process, Queue

def f(q):
    q.put('X' * 1000000)

if __name__ == '__main__':
    queue = Queue()
    p = Process(target=f, args=(queue,))
    p.start()
    p.join()                    # this deadlocks
    obj = queue.get()
```

----------------------------------------

TITLE: Assignment Expression Support (PEP 572)
DESCRIPTION: Implementation of PEP 572 adding support for assignment expressions (the 'walrus operator' := ) to Python syntax.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0a1.rst#2025-04-21_snippet_1



----------------------------------------

TITLE: Using String Join Method with Sequence in Python
DESCRIPTION: Demonstrates how the join() string method combines sequence elements with a separator string, showing why join is a string method rather than a sequence method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/design.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
", ".join(['1', '2', '4', '8', '16'])
```

----------------------------------------

TITLE: Variable Annotation Syntax in Python
DESCRIPTION: Demonstrates the syntax for variable and class attribute annotations in Python, showing both standalone annotations and annotations with assignments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/glossary.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
class C:
    field: 'annotation'

count: int = 0
```

----------------------------------------

TITLE: Performing a GET Request with HTTPSConnection in Python
DESCRIPTION: This example demonstrates how to perform a GET request to docs.python.org using the HTTPSConnection class. It shows establishing a connection, sending a request with headers, and retrieving a response.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.client.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> import http.client
>>> host = "docs.python.org"
>>> conn = http.client.HTTPSConnection(host)
>>> conn.request("GET", "/3/", headers={"Host": host})
>>> response = conn.getresponse()
>>> print(response.status, response.reason)
200 OK
```

----------------------------------------

TITLE: Python Dangerous Default Parameter Example
DESCRIPTION: Demonstrates the potential issue with using mutable default parameters in Python functions, where the default value is shared between function calls.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
def foo(mydict={}):  # Danger: shared reference to one dict for all calls
    ... compute something ...
    mydict[key] = value
    return mydict
```

----------------------------------------

TITLE: Logging to a File with Python
DESCRIPTION: This snippet shows how to log messages to a file using Python's logging module. It demonstrates setting up basic configuration to log messages of severity DEBUG and above to a file with UTF-8 encoding. The encoding parameter was introduced in Python 3.9.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
import logging
logger = logging.getLogger(__name__)
logging.basicConfig(filename='example.log', encoding='utf-8', level=logging.DEBUG)
logger.debug('This message should go to the log file')
logger.info('So should this')
logger.warning('And this, too')
logger.error('And non-ASCII stuff, too, like Øresund and Malmö')
```

----------------------------------------

TITLE: Creating an Iterator from a List in Python
DESCRIPTION: This snippet demonstrates how to create an iterator from a list using the `iter()` function, and how to iterate through the values using the `next()` method until `StopIteration` is raised. It highlights the behavior of the iterator when no more items are available.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.2.rst#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
L = [1,2,3]

i = iter(L)

print(i)

print(i.next())  # Outputs: 1
print(i.next())  # Outputs: 2
print(i.next())  # Outputs: 3

print(i.next())  # Raises StopIteration
```

----------------------------------------

TITLE: Using With Statement with Multiple Context Managers in Python
DESCRIPTION: Demonstrates how to use the with statement with multiple context managers in Python. The example shows that using multiple items in a with statement is equivalent to nesting individual with statements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
with A() as a, B() as b:
    SUITE
```

----------------------------------------

TITLE: Parsing a TOML file using tomllib.load()
DESCRIPTION: Example demonstrating how to open and parse a TOML file using the tomllib.load() function. This opens the file in binary mode and returns a Python dictionary with the parsed content.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tomllib.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import tomllib

with open("pyproject.toml", "rb") as f:
    data = tomllib.load(f)
```

----------------------------------------

TITLE: Data Parallelism Using Pool in Python
DESCRIPTION: Demonstrates how to use the Pool object from the multiprocessing module to parallelize the execution of a function across multiple input values. It defines a simple squaring function and applies it to a list of numbers using Pool.map().
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from multiprocessing import Pool

def f(x):
    return x*x

if __name__ == '__main__':
    with Pool(5) as p:
        print(p.map(f, [1, 2, 3]))
```

----------------------------------------

TITLE: Demonstrating Additional Unpacking Generalizations in Python
DESCRIPTION: This snippet shows how the additional unpacking generalizations in PEP 448 enable the use of multiple unpackings in function calls and collection displays, leading to more concise and readable code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
>>> print(*[1], *[2], 3, *[4, 5])
1 2 3 4 5

>>> def fn(a, b, c, d):
...     print(a, b, c, d)
...

>>> fn(**{'a': 1, 'c': 3}, **{'b': 2, 'd': 4})
1 2 3 4

>>> *range(4), 4
(0, 1, 2, 3, 4)

>>> [*range(4), 4]
[0, 1, 2, 3, 4]

>>> {*range(4), 4, *(5, 6, 7)}
{0, 1, 2, 3, 4, 5, 6, 7}

>>> {'x': 1, **{'y': 2}}
{'x': 1, 'y': 2}
```

----------------------------------------

TITLE: Raising Explicitly Chained Exception (Python)
DESCRIPTION: Demonstrates how to explicitly chain one exception to another using the 'raise ... from ...' syntax. The 'original_exc' becomes the '__cause__' of 'new_exc', suppressing the default '__context__' display if both are present. This is used to indicate that 'new_exc' was triggered by 'original_exc'.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/exceptions.rst#_snippet_0

LANGUAGE: python
CODE:
```
raise new_exc from original_exc
```

----------------------------------------

TITLE: Logging Configuration File Example
DESCRIPTION: This is an example of a logging configuration file (`logging.conf`) that defines loggers, handlers, and formatters. It configures a root logger and a simpleExample logger, along with a console handler and a simple formatter. The file uses the ini format.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging.rst#2025-04-21_snippet_9

LANGUAGE: ini
CODE:
```
[loggers]
keys=root,simpleExample

[handlers]
keys=consoleHandler

[formatters]
keys=simpleFormatter

[logger_root]
level=DEBUG
handlers=consoleHandler

[logger_simpleExample]
level=DEBUG
handlers=consoleHandler
qualname=simpleExample
propagate=0

[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=simpleFormatter
args=(sys.stdout,)

[formatter_simpleFormatter]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
```

----------------------------------------

TITLE: Managing Multiple Context Managers with ExitStack in Python
DESCRIPTION: Demonstrates the use of ExitStack to dynamically manage multiple context managers. The example shows how to open multiple files in a single with statement using ExitStack.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextlib.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
with ExitStack() as stack:
    files = [stack.enter_context(open(fname)) for fname in filenames]
    # All opened files will automatically be closed at the end of
    # the with statement, even if attempts to open files later
    # in the list raise an exception
```

----------------------------------------

TITLE: Demonstrating Dictionary Merge and Update Operators in Python
DESCRIPTION: This snippet demonstrates the new merge (|) and update (|=) operators for the built-in dict class in Python 3.9, which complement existing methods for dictionary merging and updating. These operators allow for more concise dictionary manipulation and require no special dependencies beyond Python 3.9.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.9.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> x = {"key1": "value1 from x", "key2": "value2 from x"}
>>> y = {"key2": "value2 from y", "key3": "value3 from y"}
>>> x | y
{'key1': 'value1 from x', 'key2': 'value2 from y', 'key3': 'value3 from y'}
>>> y | x
{'key2': 'value2 from x', 'key3': 'value3 from y', 'key1': 'value1 from x'}
```

----------------------------------------

TITLE: Command Line Parsing with argparse
DESCRIPTION: Example showing how to use the argparse module to create a command-line interface with optional switches and arguments. Includes argument validation and help message generation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.7.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
import argparse

parser = argparse.ArgumentParser(description='Command-line example.')

# Add optional switches
parser.add_argument('-v', action='store_true', dest='is_verbose',
                    help='produce verbose output')
parser.add_argument('-o', action='store', dest='output',
                    metavar='FILE',
                    help='direct output to FILE instead of stdout')
parser.add_argument('-C', action='store', type=int, dest='context',
                    metavar='NUM', default=0,
                    help='display NUM lines of added context')

# Allow any number of additional arguments.
parser.add_argument(nargs='*', action='store', dest='inputs',
                    help='input filenames (default is stdin)')

args = parser.parse_args()
print args.__dict__
```

----------------------------------------

TITLE: Utilizing asyncio for Async Queue Operations in Python
DESCRIPTION: This Python snippet demonstrates the use of asyncio queues for distributing workload among multiple concurrent tasks. The example simulates several workers retrieving and processing tasks from a queue. Dependencies include Python's asyncio, random, and time modules. The asyncio.Queue is used for task management, where tasks consist of sleeping for random durations to simulate workload. The main function coordinates queue operations and concurrently processes them using worker tasks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-queue.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
import asyncio
import random
import time


async def worker(name, queue):
    while True:
        # Get a "work item" out of the queue.
        sleep_for = await queue.get()

        # Sleep for the "sleep_for" seconds.
        await asyncio.sleep(sleep_for)

        # Notify the queue that the "work item" has been processed.
        queue.task_done()

        print(f'{name} has slept for {sleep_for:.2f} seconds')


async def main():
    # Create a queue that we will use to store our "workload".
    queue = asyncio.Queue()

    # Generate random timings and put them into the queue.
    total_sleep_time = 0
    for _ in range(20):
        sleep_for = random.uniform(0.05, 1.0)
        total_sleep_time += sleep_for
        queue.put_nowait(sleep_for)

    # Create three worker tasks to process the queue concurrently.
    tasks = []
    for i in range(3):
        task = asyncio.create_task(worker(f'worker-{i}', queue))
        tasks.append(task)

    # Wait until the queue is fully processed.
    started_at = time.monotonic()
    await queue.join()
    total_slept_for = time.monotonic() - started_at

    # Cancel our worker tasks.
    for task in tasks:
        task.cancel()
    # Wait until all worker tasks are cancelled.
    await asyncio.gather(*tasks, return_exceptions=True)

    print('====')
    print(f'3 workers slept in parallel for {total_slept_for:.2f} seconds')
    print(f'total expected sleep time: {total_sleep_time:.2f} seconds')


asyncio.run(main())
```

----------------------------------------

TITLE: Defining and Using a Data Class in Python 3.7
DESCRIPTION: Example demonstrating the usage of the new @dataclass decorator from the dataclasses module, which automatically generates special methods like __init__, __repr__, and __eq__ based on class variable annotations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
@dataclass
class Point:
    x: float
    y: float
    z: float = 0.0

p = Point(1.5, 2.5)
print(p)   # produces "Point(x=1.5, y=2.5, z=0.0)"
```

----------------------------------------

TITLE: Simple String Replacement in Python
DESCRIPTION: Shows a simple string replacement operation using built-in string methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> 'tea for too'.replace('too', 'two')
'tea for two'
```

----------------------------------------

TITLE: Example of using finally to enforce cleanup in Python
DESCRIPTION: This snippet demonstrates the use of a finally clause to enforce cleanup actions, such as returning a specific value despite an exception occurring. Requires proper understanding of try-finally in Python and uses built-in libraries only.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
def f():
    try:
        1/0
    finally:
        return 42
```

----------------------------------------

TITLE: Implementing IPv4 Echo Server Python
DESCRIPTION: This snippet shows a minimal TCP/IP echo server using IPv4. It creates a socket, binds it to all available interfaces on a specified port, listens for one connection, accepts the connection, and then enters a loop to receive data from the client and send it back. It uses `socket.AF_INET` for IPv4 and `SOCK_STREAM` for TCP. The `with` statement ensures resources are properly closed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/socket.rst#_snippet_8

LANGUAGE: Python
CODE:
```
# Echo server program
import socket

HOST = ''                 # Symbolic name meaning all available interfaces
PORT = 50007              # Arbitrary non-privileged port
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.bind((HOST, PORT))
    s.listen(1)
    conn, addr = s.accept()
    with conn:
        print('Connected by', addr)
        while True:
            data = conn.recv(1024)
            if not data: break
            conn.sendall(data)
```

----------------------------------------

TITLE: Comparing match() and search() Methods in Python
DESCRIPTION: Demonstrates the difference between re.match() which only checks for matches at the beginning of a string, and re.search() which scans through the entire string for matches. Shows how to properly choose between the two methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
>>> print(re.match('super', 'superstition').span())
(0, 5)
>>> print(re.match('super', 'insuperable'))
None

>>> print(re.search('super', 'superstition').span())
(0, 5)
>>> print(re.search('super', 'insuperable').span())
(2, 7)
```

----------------------------------------

TITLE: Defining Function with Basic Type Hints in Python
DESCRIPTION: Demonstrates how to add basic type hints to function arguments and return values using standard types like `float` and `str`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_0

LANGUAGE: Python
CODE:
```
def surface_area_of_cube(edge_length: float) -> str:
    return f"The surface area of the cube is {6 * edge_length ** 2}."
```

----------------------------------------

TITLE: Post-mortem Debugging Using pdb.pm()
DESCRIPTION: Enters post-mortem debugging mode after an uncaught exception occurs. This allows inspection of the stack frame at the point of the error. Call `pdb.pm()` after the traceback is printed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_5

LANGUAGE: Python
CODE:
```
import pdb
def f(x):
    print(1 / x)
f(0)
pdb.pm()
```

----------------------------------------

TITLE: CLI Application Main Script with Logging
DESCRIPTION: Main script for a CLI application implementing command parsing and logging configuration. Supports different log levels and subcommands for service management.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_52

LANGUAGE: python
CODE:
```
import argparse
import importlib
import logging
import os
import sys

def main(args=None):
    scriptname = os.path.basename(__file__)
    parser = argparse.ArgumentParser(scriptname)
    levels = ('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL')
    parser.add_argument('--log-level', default='INFO', choices=levels)
    subparsers = parser.add_subparsers(dest='command',
                                       help='Available commands:')
    start_cmd = subparsers.add_parser('start', help='Start a service')
    start_cmd.add_argument('name', metavar='NAME',
                           help='Name of service to start')
    stop_cmd = subparsers.add_parser('stop',
                                     help='Stop one or more services')
    stop_cmd.add_argument('names', metavar='NAME', nargs='+',
                          help='Name of service to stop')
    restart_cmd = subparsers.add_parser('restart',
                                        help='Restart one or more services')
    restart_cmd.add_argument('names', metavar='NAME', nargs='+',
                             help='Name of service to restart')
    options = parser.parse_args()
    try:
        mod = importlib.import_module(options.command)
        cmd = getattr(mod, 'command')
    except (ImportError, AttributeError):
        print('Unable to find the code for command \'%s\'' % options.command)
        return 1
    logging.basicConfig(level=options.log_level,
                        format='%(levelname)s %(name)s %(message)s')
    cmd(options)

if __name__ == '__main__':
    sys.exit(main())
```

----------------------------------------

TITLE: Escaping HTML Characters in Python
DESCRIPTION: This function converts special HTML characters in the input string to their HTML-safe equivalents. If the optional parameter 'quote' is set to true, it also escapes single and double quotes, making it suitable for use in HTML attribute values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/html.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
def escape(s, quote=True):
    """Convert the characters ``&``, ``<`` and ``>`` in string *s* to HTML-safe
    sequences.  Use this if you need to display text that might contain such
    characters in HTML.  If the optional flag *quote* is true, the characters
    (``"``) and (``'``) are also translated; this helps for inclusion in an HTML
    attribute value delimited by quotes, as in ``<a href="...">``."
    pass  # Implementation code goes here
```

----------------------------------------

TITLE: Running Mixed Async/Blocking After Python 3.13 (asyncio)
DESCRIPTION: Example showing the recommended pattern for interleaving asynchronous operations with blocking code using `asyncio.Runner`. The `Runner` context manager handles loop creation and management, allowing `runner.run()` to execute async functions within the managed loop.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_34

LANGUAGE: python
CODE:
```
async def operation_one():
    ...

def blocking_code():
    ...

async def operation_two():
    ...

with asyncio.Runner() as runner:
    runner.run(operation_one())
    blocking_code()
    runner.run(operation_two())
```

----------------------------------------

TITLE: Parsing Command Line Arguments with Argparse in Python
DESCRIPTION: This snippet demonstrates how to use the `argparse` module in Python to define and parse command line arguments.  It showcases features like specifying allowed values, metavars, required arguments, and help messages. The parser defines arguments for an action (deploy, start, stop), target hostnames, and a user option.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import argparse
parser = argparse.ArgumentParser(
            description = 'Manage servers',         # main description for help
            epilog = 'Tested on Solaris and Linux') # displayed after help
parser.add_argument('action',                       # argument name
            choices = ['deploy', 'start', 'stop'],  # three allowed values
            help = 'action on each target')         # help msg
parser.add_argument('targets',
            metavar = 'HOSTNAME',                   # var name used in help msg
            nargs = '+',                            # require one or more targets
            help = 'url for target machines')       # help msg explanation
parser.add_argument('-u', '--user',                 # -u or --user option
            required = True,                        # make it a required argument
            help = 'login as user')
```

----------------------------------------

TITLE: Formatting Numbers with Digit Separators in Python
DESCRIPTION: Demonstrates using the comma (,) and underscore (_) as digit group separators within Python's str.format() method for integers, floats, binary, and hexadecimal numbers. Shows how to combine separators.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/string.rst#_snippet_10

LANGUAGE: Python
CODE:
```
>>> '{:,}'.format(1234567890)
'1,234,567,890'
>>> '{:_}'.format(1234567890)
'1_234_567_890'
>>> '{:_b}'.format(1234567890)
'100_1001_1001_0110_0000_0010_1101_0010'
>>> '{:_x}'.format(1234567890)
'4996_02d2'
>>> '{:_}'.format(123456789.123456789)
'123_456_789.12345679'
>>> '{:.,}'.format(123456789.123456789)
'123456789.123,456,79'
>>> '{:,._}'.format(123456789.123456789)
'123,456,789.123_456_79'
```

----------------------------------------

TITLE: Implementing LRU Cache for Web Content Retrieval in Python
DESCRIPTION: Example of using the lru_cache decorator to cache web content retrieval. It demonstrates caching PEP (Python Enhancement Proposal) content with a maximum cache size of 32 entries.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
@lru_cache(maxsize=32)
def get_pep(num):
    'Retrieve text of a Python Enhancement Proposal'
    resource = f'https://peps.python.org/pep-{num:04d}'
    try:
        with urllib.request.urlopen(resource) as s:
            return s.read()
    except urllib.error.HTTPError:
        return 'Not Found'

>>> for n in 8, 290, 308, 320, 8, 218, 320, 279, 289, 320, 9991:
...     pep = get_pep(n)
...     print(n, len(pep))

>>> get_pep.cache_info()
CacheInfo(hits=3, misses=8, maxsize=32, currsize=8)
```

----------------------------------------

TITLE: Creating a Word Index with defaultdict in Python
DESCRIPTION: Demonstrates using the new defaultdict type from the collections module to create an index of words based on their initial letter. The defaultdict automatically creates a new list when accessing a key for the first time.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_26

LANGUAGE: python
CODE:
```
words = """Nel mezzo del cammin di nostra vita
mi ritrovai per una selva oscura
che la diritta via era smarrita""".lower().split()

index = defaultdict(list)

for w in words:
    init_letter = w[0]
    index[init_letter].append(w)
```

----------------------------------------

TITLE: Creating Independent Lists using List Comprehension
DESCRIPTION: Shows the proper way to create a list of separate, independent lists using list comprehension to avoid the shared reference problem.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
>>> lists = [[] for i in range(3)]
>>> lists[0].append(3)
>>> lists[1].append(5)
>>> lists[2].append(7)
>>> lists
[[3], [5], [7]]
```

----------------------------------------

TITLE: Python Module Name Check Condition
DESCRIPTION: A conditional check commonly used to determine if a module is being run directly rather than being imported. This block only executes when the module is used to populate the __main__ namespace.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/import.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
if __name__ == "__main__":
```

----------------------------------------

TITLE: Concurrent Task Execution with asyncio.gather() in Python
DESCRIPTION: Demonstrates the use of asyncio.gather() to run multiple coroutines concurrently. This example calculates factorials of different numbers in parallel, showcasing how gather can be used for efficient concurrent execution of tasks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
import asyncio

async def factorial(name, number):
    f = 1
    for i in range(2, number + 1):
        print(f"Task {name}: Compute factorial({number}), currently i={i}...")
        await asyncio.sleep(1)
        f *= i
    print(f"Task {name}: factorial({number}) = {f}")
    return f

async def main():
    # Schedule three calls *concurrently*:
    L = await asyncio.gather(
        factorial("A", 2),
        factorial("B", 3),
        factorial("C", 4),
    )
    print(L)

asyncio.run(main())
```

----------------------------------------

TITLE: Defining a Generic TypedDict (Python 3.12+)
DESCRIPTION: Shows the modern syntax for creating a generic `TypedDict` using type variables directly in square brackets.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_159

LANGUAGE: python
CODE:
```
class Group[T](TypedDict):
    key: T
    group: list[T]
```

----------------------------------------

TITLE: Multiple Return Values Function Pattern in Python
DESCRIPTION: Demonstrates different approaches to return multiple values from a Python function, including tuple return and mutable object modification.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
def func1(x, y):
    a = 'new-value'        # a and b are local names
    b = b + 1              # assigned to new objects
    return a, b            # return new values
```

----------------------------------------

TITLE: Reading CSV Files with Custom Delimiter - Python
DESCRIPTION: This code snippet reads a CSV file named 'passwd' using a colon ':' as the delimiter and disables quoting. It prints each row to the console. The example demonstrates how to customize CSV reading behavior for different file formats.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/csv.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
import csv
with open('passwd', newline='') as f:
    reader = csv.reader(f, delimiter=':', quoting=csv.QUOTE_NONE)
    for row in reader:
        print(row)
```

----------------------------------------

TITLE: Converting and Normalizing Time Units with timedelta in Python
DESCRIPTION: Demonstrates creating a timedelta object with various time units (days, seconds, microseconds, etc.) and shows how these values are normalized into the three core attributes (days, seconds, microseconds).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from datetime import timedelta
>>> delta = timedelta(
...     days=50,
...     seconds=27,
...     microseconds=10,
...     milliseconds=29000,
...     minutes=5,
...     hours=8,
...     weeks=2
... )
>>> # Only days, seconds, and microseconds remain
>>> delta
datetime.timedelta(days=64, seconds=29156, microseconds=10)
```

----------------------------------------

TITLE: Compiling Regular Expressions in Python
DESCRIPTION: Demonstrates how to compile regular expressions into pattern objects using re.compile(). Shows basic pattern compilation and usage of flags.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> import re
>>> p = re.compile('ab*')
>>> p
re.compile('ab*')

>>> p = re.compile('ab*', re.IGNORECASE)
```

----------------------------------------

TITLE: Implementing Dual-Stack Echo Client Python
DESCRIPTION: This snippet demonstrates a TCP/IP echo client supporting both IPv4 and IPv6 using `socket.getaddrinfo`. It iterates through the address information returned for the host and port, attempting to create and connect a socket for each address family until a successful connection is made. It handles potential `OSError` exceptions during socket creation or connection attempts.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/socket.rst#_snippet_11

LANGUAGE: Python
CODE:
```
# Echo client program
import socket
import sys

HOST = 'daring.cwi.nl'    # The remote host
PORT = 50007              # The same port as used by the server
s = None
for res in socket.getaddrinfo(HOST, PORT, socket.AF_UNSPEC, socket.SOCK_STREAM):
    af, socktype, proto, canonname, sa = res
    try:
        s = socket.socket(af, socktype, proto)
    except OSError as msg:
        s = None
        continue
    try:
        s.connect(sa)
    except OSError as msg:
        s.close()
        s = None
        continue
    break
if s is None:
    print('could not open socket')
    sys.exit(1)
with s:
    s.sendall(b'Hello, world')
    data = s.recv(1024)
print('Received', repr(data))
```

----------------------------------------

TITLE: Basic URL Opening with Python urllib
DESCRIPTION: Example showing how to open and read the Python.org main page using urllib.request.urlopen(). This demonstrates basic web scraping functionality, returning the first 300 bytes of content as a bytes object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_39

LANGUAGE: python
CODE:
```
>>> import urllib.request
>>> with urllib.request.urlopen('http://www.python.org/') as f:
...     print(f.read(300))
...
b'<!doctype html>\n<!--[if lt IE 7]>   <html class="no-js ie6 lt-ie7 lt-ie8 lt-ie9">   <![endif]-->\n<!--[if IE 7]>      <html class="no-js ie7 lt-ie8 lt-ie9">          <![endif]-->\n<!--[if IE 8]>      <html class="no-js ie8 lt-ie9">
```

----------------------------------------

TITLE: Automatic Retry of System Calls Failing with EINTR
DESCRIPTION: This snippet covers the changes introduced by PEP 475, which implements automatic retry of system calls that are interrupted by the EINTR error. It illustrates how this improves robustness in Python code by reducing the boilerplate previously necessary for handling such errors.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
print("Hello World")

while True:
    try:
        print("Hello World")
        break
    except InterruptedError:
        continue
```

----------------------------------------

TITLE: Using key Parameter with min/max
DESCRIPTION: Example demonstrating the new key parameter for min() and max() built-in functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
L = ['medium', 'longest', 'short']
# Prints 'longest'
print max(L, key=len)
# Prints 'short', because lexicographically 'short' has the largest value
print max(L)
```

----------------------------------------

TITLE: Using With Statement for Python Threading Lock
DESCRIPTION: Shows the preferred Pythonic way to acquire and release threading locks, semaphores, or other objects supporting the context manager protocol using the `with` statement. This ensures the resource is released automatically upon exiting the block.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/threading.rst#_snippet_9

LANGUAGE: python
CODE:
```
with some_lock:
    # do something...
```

----------------------------------------

TITLE: Defining Functions with Keyword Arguments in Python
DESCRIPTION: This function illustrates how to accept keyword arguments along with positional arguments, showing that these can be passed in various configurations and the restrictions on argument passing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
    print("-- This parrot wouldn't", action, end=' ')
    print("if you put", voltage, "volts through it.")
    print("-- Lovely plumage, the", type)
    print("-- It's", state, '!')
```

----------------------------------------

TITLE: Constructing Tuples in Python
DESCRIPTION: This snippet demonstrates different ways to create tuples in Python, including using parentheses, commas, and the tuple constructor. It shows how to create empty tuples, singleton tuples, and convert other iterables to tuples.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
()                         # empty tuple using parentheses
```

LANGUAGE: python
CODE:
```
a,                         # singleton tuple using trailing comma
```

LANGUAGE: python
CODE:
```
(a,)                       # singleton tuple using parentheses and trailing comma
```

LANGUAGE: python
CODE:
```
a, b, c                    # tuple using commas to separate items
```

LANGUAGE: python
CODE:
```
(a, b, c)                  # tuple using parentheses and commas
```

LANGUAGE: python
CODE:
```
tuple()                    # empty tuple using the constructor
```

LANGUAGE: python
CODE:
```
tuple(iterable)            # convert an iterable to a tuple
```

LANGUAGE: python
CODE:
```
tuple('abc')               # returns ('a', 'b', 'c')
```

LANGUAGE: python
CODE:
```
tuple([1, 2, 3])           # returns (1, 2, 3)
```

----------------------------------------

TITLE: Iterating Over Dictionary Keys in Python
DESCRIPTION: This snippet shows how to iterate over the keys of a dictionary using a for loop.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> m = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,
...      'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12}
>>> for key in m:
...     print(key, m[key])
Jan 1
Feb 2
Mar 3
Apr 4
May 5
Jun 6
Jul 7
Aug 8
Sep 9
Oct 10
Nov 11
Dec 12
```

----------------------------------------

TITLE: Search vs Match Examples
DESCRIPTION: Demonstrates the difference between re.match(), re.search(), and re.fullmatch() functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
>>> re.match("c", "abcdef")    # No match
>>> re.search("c", "abcdef")   # Match
<re.Match object; span=(2, 3), match='c'>
>>> re.fullmatch("p.*n", "python") # Match
<re.Match object; span=(0, 6), match='python'>
>>> re.fullmatch("r.*n", "python") # No match
```

----------------------------------------

TITLE: Stacking Multiple Patch Decorators in Python
DESCRIPTION: Shows how to stack multiple patch decorators to mock multiple objects simultaneously. Demonstrates order of decorator application and assertion checking.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_49

LANGUAGE: python
CODE:
```
>>> @patch.object(SomeClass, 'class_method')
... @patch.object(SomeClass, 'static_method')
... def test(mock1, mock2):
...     assert SomeClass.static_method is mock1
...     assert SomeClass.class_method is mock2
...     SomeClass.static_method('foo')
...     SomeClass.class_method('bar')
...     return mock1, mock2
...
>>> mock1, mock2 = test()
>>> mock1.assert_called_once_with('foo')
>>> mock2.assert_called_once_with('bar')
```

----------------------------------------

TITLE: Implementing Logging in an Auxiliary Module in Python
DESCRIPTION: This snippet shows how to implement logging in an auxiliary module that is part of a larger application. It demonstrates creating child loggers and using them in a class and function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import logging

# create logger
module_logger = logging.getLogger('spam_application.auxiliary')

class Auxiliary:
    def __init__(self):
        self.logger = logging.getLogger('spam_application.auxiliary.Auxiliary')
        self.logger.info('creating an instance of Auxiliary')

    def do_something(self):
        self.logger.info('doing something')
        a = 1 + 1
        self.logger.info('done doing something')

def some_function():
    module_logger.info('received a call to "some_function"')
```

----------------------------------------

TITLE: Adding Syntax for Variable Annotations in Python 3.6
DESCRIPTION: PEP 526 introduces syntax for variable annotations, allowing developers to specify variable types alongside their definitions. This feature enhances metadata for static analysis tools.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.6.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
primes: List[int] = []

captain: str  # Note: no initial value!

class Starship:
    stats: Dict[str, int] = {}
```

----------------------------------------

TITLE: Defining a Dataclass with Type Annotations (Python)
DESCRIPTION: This example demonstrates how to define a dataclass using the @dataclass decorator. The class InventoryItem has fields for name, unit_price, and quantity_on_hand, all with type annotations. The @dataclass decorator will automatically generate an __init__ method, among others.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dataclasses.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"from dataclasses import dataclass

@dataclass
class InventoryItem:
    \"\"\"Class for keeping track of an item in inventory.\"\"\"
    name: str
    unit_price: float
    quantity_on_hand: int = 0

    def total_cost(self) -> float:
        return self.unit_price * self.quantity_on_hand"
```

----------------------------------------

TITLE: Generated __init__ Method for a Dataclass (Python)
DESCRIPTION: This snippet shows the __init__ method that is automatically generated by the @dataclass decorator for the InventoryItem class. It takes the defined fields as parameters and initializes the corresponding attributes of the object. This demonstrates how the dataclasses module reduces boilerplate code by automatically creating common methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dataclasses.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"def __init__(self, name: str, unit_price: float, quantity_on_hand: int = 0):
    self.name = name
    self.unit_price = unit_price
    self.quantity_on_hand = quantity_on_hand"
```

----------------------------------------

TITLE: Python List Reference Behavior
DESCRIPTION: Demonstrates how Python variables act as references to objects and the behavior of mutable objects when referenced by multiple variables.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
>>> x = []
>>> y = x
>>> y.append(10)
>>> y
[10]
>>> x
[10]
```

----------------------------------------

TITLE: HTTP Server Response and Main Server Loop with AsyncIO
DESCRIPTION: Implements an HTTP server using asyncio that writes a response with status code 200 and renders a goodbye message. The server listens on localhost port 8081 and can be tested using telnet or curl.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextvars.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
writer.write(b'HTTP/1.1 200 OK\r\n')  # status line
writer.write(b'\r\n')  # headers
writer.write(render_goodbye())  # body
writer.close()

async def main():
    srv = await asyncio.start_server(
        handle_request, '127.0.0.1', 8081)

    async with srv:
        await srv.serve_forever()

asyncio.run(main())

# To test it you can use telnet or curl:
#     telnet 127.0.0.1 8081
#     curl 127.0.0.1:8081
```

----------------------------------------

TITLE: Demonstrating tuple immutability with __iadd__ in Python
DESCRIPTION: Shows how tuple immutability works even when modifying a mutable object inside the tuple. The __iadd__ operation on the list succeeds, but attempting to reassign the tuple element still fails with a TypeError.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_44

LANGUAGE: python
CODE:
```
>>> result = a_tuple[0].__iadd__(['item'])
>>> a_tuple[0] = result
Traceback (most recent call last):
  ...
TypeError: 'tuple' object does not support item assignment
```

----------------------------------------

TITLE: Error Output and Program Termination in Python
DESCRIPTION: Shows how to write error messages to stderr to ensure visibility even when stdout is redirected.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
>>> sys.stderr.write('Warning, log file not found starting a new one\n')
Warning, log file not found starting a new one
```

----------------------------------------

TITLE: Defining and Using a Simple Generator Function in Python
DESCRIPTION: This snippet demonstrates how to define a generator function that yields integers up to a specified limit, and how to use it in various contexts.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
>>> gen = generate_ints(3)
>>> gen  #doctest: +ELLIPSIS
<generator object generate_ints at ...>
>>> next(gen)
0
>>> next(gen)
1
>>> next(gen)
2
>>> next(gen)
Traceback (most recent call last):
  File "stdin", line 1, in <module>
  File "stdin", line 2, in generate_ints
StopIteration
```

----------------------------------------

TITLE: Priority Queue Implementation - Python
DESCRIPTION: This code snippet demonstrates how to implement a priority queue using the heapq module. It covers adding and removing tasks with priorities and handling entries efficiently to maintain the heap structure.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/heapq.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
pq = []                         # list of entries arranged in a heap
entry_finder = {}               # mapping of tasks to entries
REMOVED = '<removed-task>'      # placeholder for a removed task
counter = itertools.count()     # unique sequence count

def add_task(task, priority=0):
    'Add a new task or update the priority of an existing task'
    if task in entry_finder:
        remove_task(task)
    count = next(counter)
    entry = [priority, count, task]
    entry_finder[task] = entry
    heappush(pq, entry)

def remove_task(task):
    'Mark an existing task as REMOVED. Raise KeyError if not found.'
    entry = entry_finder.pop(task)
    entry[-1] = REMOVED


def pop_task():
    'Remove and return the lowest priority task. Raise KeyError if empty.'
    while pq:
        priority, count, task = heappop(pq)
        if task is not REMOVED:
            del entry_finder[task]
            return task
    raise KeyError('pop from an empty priority queue')
```

----------------------------------------

TITLE: Defining Generic Classes (PEP 695)
DESCRIPTION: Shows the new syntax for declaring generic classes by including a type parameter list in square brackets after the class name.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_1

LANGUAGE: Python
CODE:
```
class list[T]:
    def __getitem__(self, index: int, /) -> T:
        ...

    def append(self, element: T) -> None:
        ...
```

----------------------------------------

TITLE: Dictionary-Based Logging Configuration in Python
DESCRIPTION: This snippet demonstrates a dictionary-based configuration for the `logging` module. It defines formatters, handlers (console and console_priority), and the root logger. The configuration specifies how log messages should be formatted and where they should be outputted (stdout for INFO level, stderr for ERROR level).
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
{"version": 1,
 "formatters": {"brief": {"format": "%(levelname)-8s: %(name)-15s: %(message)s"},
                "full": {"format": "%(asctime)s %(name)-15s %(levelname)-8s %(message)s"}
                },
 "handlers": {"console": {
                   "class": "logging.StreamHandler",
                   "formatter": "brief",
                   "level": "INFO",
                   "stream": "ext://sys.stdout"},
              "console_priority": {
                   "class": "logging.StreamHandler",
                   "formatter": "full",
                   "level": "ERROR",
                   "stream": "ext://sys.stderr"}
                },
 "root": {"level": "DEBUG", "handlers": ["console", "console_priority"]}}
```

----------------------------------------

TITLE: List Comprehension Examples in Python
DESCRIPTION: Examples demonstrating list comprehension syntax for filtering strings and creating cartesian products of sequences. Shows both incorrect and correct tuple syntax.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.0.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
seq1 = 'abc'
seq2 = (1,2,3)
>>> [ (x,y) for x in seq1 for y in seq2]
[('a', 1), ('a', 2), ('a', 3), ('b', 1), ('b', 2), ('b', 3), ('c', 1),
('c', 2), ('c', 3)]

# Syntax error
[ x,y for x in seq1 for y in seq2]
# Correct
[ (x,y) for x in seq1 for y in seq2]
```

----------------------------------------

TITLE: Using Run Function with Check Flag
DESCRIPTION: Example of using the run() function with check=True parameter to raise CalledProcessError if the command returns non-zero exit status.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/subprocess.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
run(..., check=True)
```

----------------------------------------

TITLE: Using str.encode() Method in Python
DESCRIPTION: The encode() method returns a string encoded to bytes. It accepts optional encoding (defaults to utf-8) and errors parameters to control how encoding errors are handled.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
str.encode(encoding="utf-8", errors="strict")
```

----------------------------------------

TITLE: Named Group Matching with groupdict()
DESCRIPTION: Shows how to use named capture groups and retrieve them as a dictionary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
>>> m = re.match(r"(?P<first_name>\w+) (?P<last_name>\w+)", "Malcolm Reynolds")
>>> m.groupdict()
{'first_name': 'Malcolm', 'last_name': 'Reynolds'}
```

----------------------------------------

TITLE: Replacing Substrings with Regular Expressions in Python
DESCRIPTION: Demonstrates the use of re.sub() function to replace substrings in a string using regular expressions. It shows examples with both string and function replacements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> re.sub(r'def\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*\(\s*\):',
...        r'static PyObject*\npy_\1(void)\n{',
...        'def myfunc():')
'static PyObject*\npy_myfunc(void)\n{'
```

LANGUAGE: python
CODE:
```
>>> def dashrepl(matchobj):
...     if matchobj.group(0) == '-': return ' '
...     else: return '-'
...
>>> re.sub('-{1,2}', dashrepl, 'pro----gram-files')
'pro--gram files'
>>> re.sub(r'\sAND\s', ' & ', 'Baked Beans And Spam', flags=re.IGNORECASE)
'Baked Beans & Spam'
```

----------------------------------------

TITLE: Converting Iterators to Tuples in Python
DESCRIPTION: This snippet shows how to convert an iterator to a tuple using the tuple() constructor function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> L = [1, 2, 3]
>>> iterator = iter(L)
>>> t = tuple(iterator)
>>> t
(1, 2, 3)
```

----------------------------------------

TITLE: Complete Script with Custom File Handler in Python
DESCRIPTION: This combines the custom file handler and the logging configuration into a complete, runnable script. It imports the necessary modules, defines the `owned_file_handler` function, sets up the logging configuration dictionary, applies the configuration using `logging.config.dictConfig`, and logs a debug message. This demonstrates the full implementation from handler creation to message logging.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_42

LANGUAGE: python
CODE:
```
import logging, logging.config, os, shutil

def owned_file_handler(filename, mode='a', encoding=None, owner=None):
    if owner:
        if not os.path.exists(filename):
            open(filename, 'a').close()
        shutil.chown(filename, *owner)
    return logging.FileHandler(filename, mode, encoding)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            'format': '%(asctime)s %(levelname)s %(name)s %(message)s'
        },
    },
    'handlers': {
        'file':{
            # The values below are popped from this dictionary and
            # used to create the handler, set the handler's level and
            # its formatter.
            '()': owned_file_handler,
            'level':'DEBUG',
            'formatter': 'default',
            # The values below are passed to the handler creator callable
            # as keyword arguments.
            'owner': ['pulse', 'pulse'],
            'filename': 'chowntest.log',
            'mode': 'w',
            'encoding': 'utf-8',
        },
    },
    'root': {
        'handlers': ['file'],
        'level': 'DEBUG',
    },
}

logging.config.dictConfig(LOGGING)
logger = logging.getLogger('mylogger')
logger.debug('A debug message')
```

----------------------------------------

TITLE: Using the @dataclass Decorator (Python)
DESCRIPTION: This example shows different ways to use the @dataclass decorator. The first two are equivalent, with the second explicitly showing the empty parentheses. The third shows the decorator with all of its parameters set to their default values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dataclasses.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"@dataclass
class C:
    ...

@dataclass()
class C:
    ...

@dataclass(init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False,
           match_args=True, kw_only=False, slots=False, weakref_slot=False)
class C:
    ..."
```

----------------------------------------

TITLE: Exception Group Handling in Python
DESCRIPTION: Demonstrates how to raise and handle nested exception groups using except* clauses. Shows handling of multiple exception types while allowing other exceptions to propagate.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/errors.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
def f():
    raise ExceptionGroup(
        "group1",
        [
            OSError(1),
            SystemError(2),
            ExceptionGroup(
                "group2",
                [
                    OSError(3),
                    RecursionError(4)
                ]
            )
        ]
    )

try:
    f()
except* OSError as e:
    print("There were OSErrors")
except* SystemError as e:
    print("There were SystemErrors")
```

----------------------------------------

TITLE: Sending Email with Python SMTP
DESCRIPTION: A complete example demonstrating how to send an email using Python's smtplib. The script prompts for From/To addresses and message content, then sends the email through a local SMTP server. It includes basic error handling and debug output.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/smtplib.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
import smtplib

def prompt(title):
    return input(title).strip()

from_addr = prompt("From: ")
to_addrs  = prompt("To: ").split()
print("Enter message, end with ^D (Unix) or ^Z (Windows):")

# Add the From: and To: headers at the start!
lines = [f"From: {from_addr}", f"To: {', '.join(to_addrs)}", ""]
while True:
    try:
        line = input()
    except EOFError:
        break
    else:
        lines.append(line)

msg = "\r\n".join(lines)
print("Message length is", len(msg))

server = smtplib.SMTP("localhost")
server.set_debuglevel(1)
server.sendmail(from_addr, to_addrs, msg)
server.quit()
```

----------------------------------------

TITLE: Creating Server Socket in Python
DESCRIPTION: Shows how to create a server socket that listens for incoming connections on a specified port. Includes binding to a host and setting up the connection queue.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/sockets.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
# create an INET, STREAMing socket
serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# bind the socket to a public host, and a well-known port
serversocket.bind((socket.gethostname(), 80))
# become a server socket
serversocket.listen(5)
```

----------------------------------------

TITLE: Literals in Python Programming
DESCRIPTION: This section describes literals in Python, explaining the different types of literals available, including string and bytes literals, and the syntax associated with each.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/lexical_analysis.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
.. index:: literal, constant

Literals are notations for constant values of some built-in types.

.. index:: string literal, bytes literal, ASCII
   single: ' (single quote); string literal
   single: " (double quote); string literal
```

----------------------------------------

TITLE: Launching Python Using py and python (Windows CMD)
DESCRIPTION: Shows various common ways to launch the default Python interpreter or run scripts/modules using the `py` and `python` commands on Windows. It includes examples for entering interactive mode, executing a local script file, and running a specific Python module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/windows.rst#_snippet_0

LANGUAGE: cmd
CODE:
```
$> py
...
$> python my-script.py
...
$> py -m this
...
```

----------------------------------------

TITLE: Configuring Chained Method Calls on Mocks in Python
DESCRIPTION: Shows how to configure a mock for a complex chain of method calls, which is common when mocking APIs like database connections. The example sets up a mock to return a specific value for a database query.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
mock = Mock()
cursor = mock.connection.cursor.return_value
cursor.execute.return_value = ['foo']
mock.connection.cursor().execute("SELECT 1")
expected = call.connection.cursor().execute("SELECT 1").call_list()
mock.mock_calls
mock.mock_calls == expected
```

----------------------------------------

TITLE: Defining Class and Instance Variables in Python
DESCRIPTION: Illustrates the difference between class variables (shared by all instances) and instance variables (unique to each instance) in Python. This example defines a Dog class with both types of variables.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/classes.rst#2025-04-23_snippet_5

LANGUAGE: Python
CODE:
```
class Dog:

    kind = 'canine'         # class variable shared by all instances

    def __init__(self, name):
        self.name = name    # instance variable unique to each instance

d = Dog('Fido')
e = Dog('Buddy')
d.kind                  # shared by all dogs
e.kind                  # shared by all dogs
d.name                  # unique to d
e.name                  # unique to e
```

----------------------------------------

TITLE: Demonstrating Extended Iterable Unpacking in Python 3
DESCRIPTION: Shows how to use the new extended iterable unpacking feature in Python 3, which allows assigning parts of a sequence to named variables while collecting remaining items in a list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.0.rst#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
(a, *rest, b) = range(5)
```

----------------------------------------

TITLE: Expanding and Resolving Paths in Python
DESCRIPTION: Demonstrates various methods for expanding and resolving paths, including home(), expanduser(), cwd(), absolute(), and resolve().
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
>>> Path.home()
PosixPath('/home/antoine')

>>> p = PosixPath('~/films/Monty Python')
>>> p.expanduser()
PosixPath('/home/eric/films/Monty Python')

>>> Path.cwd()
PosixPath('/home/antoine/pathlib')

>>> p = Path('tests')
>>> p
PosixPath('tests')
>>> p.absolute()
PosixPath('/home/antoine/pathlib/tests')

>>> p = Path()
>>> p
PosixPath('.')
>>> p.resolve()
PosixPath('/home/antoine/pathlib')

>>> p = Path('docs/../setup.py')
>>> p.resolve()
PosixPath('/home/antoine/pathlib/setup.py')
```

----------------------------------------

TITLE: Efficient Fibonacci Number Calculation Using LRU Cache in Python
DESCRIPTION: Demonstrates using the lru_cache decorator to implement dynamic programming for efficient Fibonacci number calculation. The cache has no size limit (maxsize=None).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
@lru_cache(maxsize=None)
def fib(n):
    if n < 2:
        return n
    return fib(n-1) + fib(n-2)

>>> [fib(n) for n in range(16)]
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]

>>> fib.cache_info()
CacheInfo(hits=28, misses=16, maxsize=None, currsize=16)
```

----------------------------------------

TITLE: Using argparse Subparsers with Functions (Python)
DESCRIPTION: Shows how to use add_subparsers with set_defaults to associate subcommands with specific Python functions, and then execute the appropriate function after parsing arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_81

LANGUAGE: Python
CODE:
```
# subcommand functions
def foo(args):
    print(args.x * args.y)

def bar(args):
    print('((%s))' % args.z)

# create the top-level parser
parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(required=True)

# create the parser for the "foo" command
parser_foo = subparsers.add_parser('foo')
parser_foo.add_argument('-x', type=int, default=1)
parser_foo.add_argument('y', type=float)
parser_foo.set_defaults(func=foo)

# create the parser for the "bar" command
parser_bar = subparsers.add_parser('bar')
parser_bar.add_argument('z')
parser_bar.set_defaults(func=bar)

# parse the args and call whatever function was selected
args = parser.parse_args('foo 1 -x 2'.split())
args.func(args)

# parse the args and call whatever function was selected
args = parser.parse_args('bar XYZYX'.split())
args.func(args)
```

----------------------------------------

TITLE: Python Numeric Literals
DESCRIPTION: Demonstrates various forms of numeric literals in Python, including integers in different bases, long integers, and floating-point numbers.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/tokenizedata/tokenize_tests.txt#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
# Ordinary integers
0xff != 255
0o377 != 255
2147483647   != 0o17777777777
-2147483647-1 != 0o20000000000
0o37777777777 != -1
0xffffffff != -1; 0o37777777777 != -1; -0o1234567 == 0O001234567; 0b10101 == 0B00010101

# Long integers
x = 0
x = 0
x = 0xffffffffffffffff
x = 0xffffffffffffffff
x = 0o77777777777777777
x = 0B11101010111111111
x = 123456789012345678901234567890
x = 123456789012345678901234567890

# Floating-point numbers
x = 3.14
x = 314.
x = 0.314
# XXX x = 000.314
x = .314
x = 3e14
x = 3E14
x = 3e-14
x = 3e+14
x = 3.e14
x = .3e14
x = 3.1e4
```

----------------------------------------

TITLE: Using batched function in Python's itertools
DESCRIPTION: Example showing how to use the batched function to divide a flattened list into tuples of a specified size. The function yields batches as soon as they're full or when the input is exhausted.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> flattened_data = ['roses', 'red', 'violets', 'blue', 'sugar', 'sweet']
>>> unflattened = list(batched(flattened_data, 2))
>>> unflattened
[('roses', 'red'), ('violets', 'blue'), ('sugar', 'sweet')]
```

----------------------------------------

TITLE: Asserting Sequence Equality in Python unittest
DESCRIPTION: Method to test if two sequences are equal. It can optionally check for specific sequence types and provides detailed error messages on failure.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
assertSequenceEqual(first, second, msg=None, seq_type=None)
```

----------------------------------------

TITLE: Reading CSV Files with DictReader
DESCRIPTION: Demonstrates reading CSV data into dictionaries using DictReader, mapping columns to dictionary keys.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/csv.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> import csv
>>> with open('names.csv', newline='') as csvfile:
...     reader = csv.DictReader(csvfile)
...     for row in reader:
...         print(row['first_name'], row['last_name'])
...
Eric Idle
John Cleese

>>> print(row)
{'first_name': 'John', 'last_name': 'Cleese'}
```

----------------------------------------

TITLE: Arbitrary Argument List Function Definition
DESCRIPTION: Shows how to define a function that can accept a variable number of arguments using *args
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
def write_multiple_items(file, separator, *args):
    file.write(separator.join(args))
```

----------------------------------------

TITLE: Converting between time zones with ZoneInfo
DESCRIPTION: Demonstrates timezone conversion using astimezone() with ZoneInfo objects. Shows how fold is automatically set to the correct value when converting from UTC to a zone with a DST transition.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/zoneinfo.rst#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> from datetime import timezone
>>> LOS_ANGELES = ZoneInfo("America/Los_Angeles")
>>> dt_utc = datetime(2020, 11, 1, 8, tzinfo=timezone.utc)

>>> # Before the PDT -> PST transition
>>> print(dt_utc.astimezone(LOS_ANGELES))
2020-11-01 01:00:00-07:00

>>> # After the PDT -> PST transition
>>> print((dt_utc + timedelta(hours=1)).astimezone(LOS_ANGELES))
2020-11-01 01:00:00-08:00
```

----------------------------------------

TITLE: Establishing a Secure SSL Connection to a Server
DESCRIPTION: Shows how to use an SSL context to create a secure connection to a server with certificate validation and hostname verification.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
>>> conn = context.wrap_socket(socket.socket(socket.AF_INET),
...                            server_hostname="www.python.org")
>>> conn.connect(("www.python.org", 443))
```

----------------------------------------

TITLE: Using dir() Function with Modules
DESCRIPTION: Demonstrates using the dir() function to inspect module contents and defined names in the current scope.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/modules.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
>>> import fibo, sys
>>> dir(fibo)
['__name__', 'fib', 'fib2']
>>> dir(sys)
```

----------------------------------------

TITLE: Adding Arguments to ArgumentParser in Python
DESCRIPTION: This snippet shows how to add different types of arguments to an ArgumentParser instance using the add_argument method. It includes examples of adding a positional argument, an optional argument that takes a value, and an optional flag that stores a boolean.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_1

LANGUAGE: python
CODE:
```
parser.add_argument('filename')           # positional argument
parser.add_argument('-c', '--count')      # option that takes a value
parser.add_argument('-v', '--verbose',
                       action='store_true')  # on/off flag
```

----------------------------------------

TITLE: TypedDict Example in typing Module
DESCRIPTION: This code demonstrates the new TypedDict class from the typing module (PEP 589), which allows creating dictionary types with per-key type annotations. The example shows how to use the 'total=False' parameter to make keys optional.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_28

LANGUAGE: python
CODE:
```
class Location(TypedDict, total=False):
    lat_long: tuple
    grid_square: str
    xy_coordinate: tuple
```

----------------------------------------

TITLE: Encode Binary File to Base64
DESCRIPTION: Function for encoding contents of a binary input file to base64 and writing to an output file, inserting newlines every 76 bytes as per MIME standards
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/base64.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
def encode(input, output):\n    Encode the contents of the binary input file and write base64 encoded data to output file
```

----------------------------------------

TITLE: Package Import Examples
DESCRIPTION: Shows different ways to import and use package modules and functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/modules.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
import sound.effects.echo
sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)

from sound.effects import echo
echo.echofilter(input, output, delay=0.7, atten=4)

from sound.effects.echo import echofilter
echofilter(input, output, delay=0.7, atten=4)
```

----------------------------------------

TITLE: Demonstrating str.splitlines() in Python
DESCRIPTION: Shows how the splitlines() method splits a string into a list of lines, compared to the split('\n') method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
>>> "One line\n".splitlines()
['One line']

>>> ''.split('\n')
['']
>>> 'Two lines\n'.split('\n')
['Two lines', '']
```

----------------------------------------

TITLE: Adding pairwise function to itertools module in Python
DESCRIPTION: Adds the pairwise() function to the itertools module, which allows iterating over pairs of consecutive elements in an iterable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
Add itertools.pairwise().
```

----------------------------------------

TITLE: Timeout Context Manager - Python
DESCRIPTION: The timeout function creates an asynchronous context manager that limits the amount of time spent waiting on an awaitable. Users can specify a delay; if the delay elapses before the operation completes, a TimeoutError is raised.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
async def timeout(delay):
    """
    Return an :ref:`asynchronous context manager <async-context-managers>`
    that can be used to limit the amount of time spent waiting on
    something.

    *delay* can either be ``None``, or a float/int number of
    seconds to wait. If *delay* is ``None``, no time limit will
    be applied; this can be useful if the delay is unknown when
    the context manager is created.

    In either case, the context manager can be rescheduled after
    creation using :meth:`Timeout.reschedule`.

    Example::

        async def main():
            async with asyncio.timeout(10):
                await long_running_task()

    If ``long_running_task`` takes more than 10 seconds to complete,
    the context manager will cancel the current task and handle
    the resulting :exc:`asyncio.CancelledError` internally, transforming it
    into a :exc:`TimeoutError` which can be caught and handled.

    .. note::

      The :func:`asyncio.timeout` context manager is what transforms
      the :exc:`asyncio.CancelledError` into a :exc:`TimeoutError`,
      which means the :exc:`TimeoutError` can only be caught
      *outside* of the context manager.
    """

```

----------------------------------------

TITLE: Removing Duplicates from a Sequence Using Dictionary in Python
DESCRIPTION: This snippet demonstrates how to remove duplicates from a sequence using a dictionary's fromkeys method and then retrieving the keys. This is an efficient way to uniquify a sequence in Python.
SOURCE: https://github.com/python/cpython/blob/main/Objects/dictnotes.txt#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
dict.fromkeys(seqn).keys()
```

----------------------------------------

TITLE: Safely Evaluating Expressions with ast.literal_eval
DESCRIPTION: This snippet shows how to safely evaluate an expression string using `ast.literal_eval`. It highlights how `literal_eval` can parse strings, numbers, tuples, lists, dicts, sets, booleans and `None`, and how it prevents execution of arbitrary code, as demonstrated by the `ValueError` when attempting to evaluate an `os.system` call.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_53

LANGUAGE: python
CODE:
```
>>> from ast import literal_eval

>>> request = "{'req': 3, 'func': 'pow', 'args': (2, 0.5)}"
>>> literal_eval(request)
{'args': (2, 0.5), 'req': 3, 'func': 'pow'}

>>> request = "os.system('do something harmful')"
>>> literal_eval(request)
Traceback (most recent call last):
  ...
ValueError: malformed node or string: <_ast.Call object at 0x101739a10>
```

----------------------------------------

TITLE: Using Dictionary Views in Python
DESCRIPTION: This example demonstrates the usage of dictionary views in Python, showing how to create and iterate through keys and values, observe their dynamic behavior, perform set operations, and access the original dictionary through the mapping property.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_95

LANGUAGE: python
CODE:
```
>>> dishes = {'eggs': 2, 'sausage': 1, 'bacon': 1, 'spam': 500}
>>> keys = dishes.keys()
>>> values = dishes.values()

>>> # iteration
>>> n = 0
>>> for val in values:
...     n += val
...
>>> print(n)
504

>>> # keys and values are iterated over in the same order (insertion order)
>>> list(keys)
['eggs', 'sausage', 'bacon', 'spam']
>>> list(values)
[2, 1, 1, 500]

>>> # view objects are dynamic and reflect dict changes
>>> del dishes['eggs']
>>> del dishes['sausage']
>>> list(keys)
['bacon', 'spam']

>>> # set operations
>>> keys & {'eggs', 'bacon', 'salad'}
{'bacon'}
>>> keys ^ {'sausage', 'juice'} == {'juice', 'sausage', 'bacon', 'spam'}
True
>>> keys | ['juice', 'juice', 'juice'] == {'bacon', 'spam', 'juice'}
True

>>> # get back a read-only proxy for the original dictionary
>>> values.mapping
mappingproxy({'bacon': 1, 'spam': 500})
>>> values.mapping['spam']
500
```

----------------------------------------

TITLE: Accessing ConfigParser Settings in Python
DESCRIPTION: Demonstrates how to access configuration settings using ConfigParser, including handling of missing values and error cases.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
>>> # Settings with values are treated as before:
>>> config["mysqld"]["user"]
'mysql'

>>> # Settings without values provide None:
>>> config["mysqld"]["skip-bdb"]

>>> # Settings which aren't specified still raise an error:
>>> config["mysqld"]["does-not-exist"]
Traceback (most recent call last):
  ...
KeyError: 'does-not-exist'
```

----------------------------------------

TITLE: Accessing Arguments by Name - Python
DESCRIPTION: Shows how to access arguments using keyword names within the format string. Arguments can be passed directly as keyword arguments or unpacked from a dictionary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/string.rst#_snippet_3

LANGUAGE: python
CODE:
```
>>> 'Coordinates: {latitude}, {longitude}'.format(latitude='37.24N', longitude='-115.81W')
'Coordinates: 37.24N, -115.81W'
>>> coord = {'latitude': '37.24N', 'longitude': '-115.81W'}
>>> 'Coordinates: {latitude}, {longitude}'.format(**coord)
'Coordinates: 37.24N, -115.81W'
```

----------------------------------------

TITLE: Chaining Iterables with Itertools in Python
DESCRIPTION: This example uses itertools.chain.from_iterable to create a single iterable from multiple nested iterables. The function requires the itertools module and a single iterable that returns other iterables. The output is all elements of the input iterables chained together into a single list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_36

LANGUAGE: python
CODE:
```
>>> list(itertools.chain.from_iterable([[1,2,3], [4,5,6]]))
[1, 2, 3, 4, 5, 6]
```

----------------------------------------

TITLE: Using Mock with Specifications
DESCRIPTION: Demonstrates how to use Mock with specifications to ensure mock objects match real implementations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
>>> mock = Mock(spec=SomeClass)
>>> mock.old_method()
Traceback (most recent call last):
   ...
AttributeError: Mock object has no attribute 'old_method'. Did you mean: 'class_method'?
```

----------------------------------------

TITLE: Using the key Parameter for Case-Insensitive List Sorting in Python
DESCRIPTION: Demonstrates different ways to perform case-insensitive sorting in Python 2.4, comparing the new key parameter approach with the traditional cmp parameter. The key parameter is more efficient as it calls the comparison function once per element rather than multiple times.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
>>> L = ['A', 'b', 'c', 'D']
>>> L.sort()                 # Case-sensitive sort
>>> L
['A', 'D', 'b', 'c']
>>> # Using 'key' parameter to sort list
>>> L.sort(key=lambda x: x.lower())
>>> L
['A', 'b', 'c', 'D']
>>> # Old-fashioned way
>>> L.sort(cmp=lambda x,y: cmp(x.lower(), y.lower()))
>>> L
['A', 'b', 'c', 'D']
```

----------------------------------------

TITLE: Adding file_digest helper function to Python hashlib
DESCRIPTION: Adds a new hashlib.file_digest() helper function for efficiently hashing file objects. This provides an optimized way to compute hashes of files.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a7.rst#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
Add hashlib.file_digest helper for efficient hashing of file object
```

----------------------------------------

TITLE: Accepting Connection with asyncio
DESCRIPTION: This method accepts a connection, modeled after the blocking socket.accept() method. The socket must be bound to an address and listening for connections.  It returns a pair (conn, address) where conn is a new socket object and address is the address bound to the socket on the other end of the connection.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
.. method:: loop.sock_accept(sock)
   :async:

   Accept a connection.  Modeled after the blocking
   :meth:`socket.accept() <socket.socket.accept>` method.

   The socket must be bound to an address and listening
   for connections. The return value is a pair ``(conn, address)`` where *conn*
   is a *new* socket object usable to send and receive data on the connection,
   and *address* is the address bound to the socket on the other end of the
   connection.

```

----------------------------------------

TITLE: Basic zip() Function Usage in Python
DESCRIPTION: Demonstrates how zip() handles iterables of different lengths by stopping at the shortest iterable length
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
list(zip(range(3), ['fee', 'fi', 'fo', 'fum']))
```

----------------------------------------

TITLE: String lstrip() Example - Python
DESCRIPTION: Demonstrates the usage of the lstrip() method to remove leading characters from strings. Shows both whitespace stripping and character set stripping.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
>>> '   spacious   '.lstrip()
'spacious   '
>>> 'www.example.com'.lstrip('cmowz.')
'example.com'
```

----------------------------------------

TITLE: Checking File Access Permissions in Python
DESCRIPTION: This function tests for access to a file path using real uid/gid. It can check for existence (F_OK) or specific permissions (R_OK, W_OK, X_OK). It supports relative paths, following symlinks, and using effective ids. Returns True if access is allowed, False otherwise.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
def access(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True):
    """Use the real uid/gid to test for access to path."""
```

----------------------------------------

TITLE: Implementing cached_property Decorator in Python
DESCRIPTION: Example showing how to use @cached_property to create a cached property that computes its value once and stores it for subsequent access.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
class DataSet:

    def __init__(self, sequence_of_numbers):
        self._data = tuple(sequence_of_numbers)

    @cached_property
    def stdev(self):
        return statistics.stdev(self._data)
```

----------------------------------------

TITLE: Comparing Floating-Point Values with Tolerances (Python)
DESCRIPTION: This snippet explains the method for determining if two floating-point values are close enough based on specified absolute and relative tolerances. It details the parameters for these tolerances and how they interact when evaluating closeness, especially with special values like NaN and infinity.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/cmath.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
``abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)``

*rel_tol* is the relative tolerance -- it is the maximum allowed difference between *a* and *b*, relative to the larger absolute value of *a* or *b*.
For example, to set a tolerance of 5%, pass ``rel_tol=0.05``. The default tolerance is ``1e-09``, which assures that the two values are the same within about 9 decimal digits. *rel_tol* must be nonnegative and less than ``1.0``.

*abs_tol* is the absolute tolerance; it defaults to ``0.0`` and it must be nonnegative.
```

----------------------------------------

TITLE: Defining and Initializing Python Arrays
DESCRIPTION: This snippet demonstrates how to define a Python array with a specific typecode and an optional initializer. The initializer can be from different data types like bytes, byte arrays, or Unicode strings. Key methods such as frombytes and fromunicode are utilized for initializing array content. It is essential to use the correct typecode when appending items or extending arrays to avoid exceptions like TypeError or ValueError.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/array.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"""
.. class:: array(typecode[, initializer])

   A new array whose items are restricted by *typecode*, and initialized
   from the optional *initializer* value, which must be a :class:`bytes`
   or :class:`bytearray` object, a Unicode string, or iterable over elements
   of the appropriate type.

   If given a :class:`bytes` or :class:`bytearray` object, the initializer
   is passed to the new array\'s :meth:`frombytes` method;
   if given a Unicode string, the initializer is passed to the
   :meth:`fromunicode` method;
   otherwise, the initializer\'s iterator is passed to the :meth:`extend` method
   to add initial items to the array.

   Array objects support the ordinary sequence operations of indexing, slicing,
   concatenation, and multiplication.  When using slice assignment, the assigned
   value must be an array object with the same type code; in all other cases,
   :exc:`TypeError` is raised. Array objects also implement the buffer interface,
   and may be used wherever :term:`bytes-like objects <bytes-like object>` are supported.

   .. audit-event:: array.__new__ typecode,initializer array.array

"""
```

----------------------------------------

TITLE: Basic subprocess.run Examples in Python
DESCRIPTION: Examples demonstrating how to use subprocess.run() to execute commands with various options including basic execution, error checking, and output capturing. These examples show common usage patterns for the subprocess module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/subprocess.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> subprocess.run(["ls", "-l"])  # doesn't capture output
CompletedProcess(args=['ls', '-l'], returncode=0)

>>> subprocess.run("exit 1", shell=True, check=True)
Traceback (most recent call last):
  ...
subprocess.CalledProcessError: Command 'exit 1' returned non-zero exit status 1

>>> subprocess.run(["ls", "-l", "/dev/null"], capture_output=True)
CompletedProcess(args=['ls', '-l', '/dev/null'], returncode=0,
stdout=b'crw-rw-rw- 1 root root 1, 3 Jan 23 16:23 /dev/null\n', stderr=b'')
```

----------------------------------------

TITLE: Reading CSV with Error Handling - Python
DESCRIPTION: This snippet shows how to read a CSV file while catching and reporting errors. It exits with an appropriate message if a csv.Error occurs while reading.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/csv.rst#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
import csv, sys
filename = 'some.csv'
with open(filename, newline='') as f:
    reader = csv.reader(f)
    try:
        for row in reader:
            print(row)
    except csv.Error as e:
        sys.exit('file {}, line {}: {}'.format(filename, reader.line_num, e))
```

----------------------------------------

TITLE: Opening URL in New Window using webbrowser (Python)
DESCRIPTION: Illustrates the use of the module-level `webbrowser.open_new()` function in Python. This function attempts to open the specified `url` in a new browser window, raising the window to the front if possible. It provides a simple method to launch a URL in a dedicated window. Requires the `webbrowser` module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/webbrowser.rst#_snippet_2

LANGUAGE: python
CODE:
```
webbrowser.open_new(url)
```

----------------------------------------

TITLE: Setting Environment Variables in Python
DESCRIPTION: Sets environment variables for the current process, affecting child processes. Designed to interact safely with environment configurations on different platforms.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
.. function:: putenv(key, value, /)

   .. index:: single: environment variables; setting

   Set the environment variable named *key* to the string *value*.  Such
   changes to the environment affect subprocesses started with :func:`os.system`,
   :func:`popen` or :func:`fork` and :func:`execv`.

   Assignments to items in :data:`os.environ` are automatically translated into
   corresponding calls to :func:`putenv`; however, calls to :func:`putenv`
   don't update :data:`os.environ`, so it is actually preferable to assign to items
   of :data:`os.environ`. This also applies to :func:`getenv` and :func:`getenvb`, which
   respectively use :data:`os.environ` and :data:`os.environb` in their implementations.

   See also the :func:`os.reload_environ` function.

   .. note::

      On some platforms, including FreeBSD and macOS, setting ``environ`` may
      cause memory leaks. Refer to the system documentation for :c:func:`!putenv`.
```

----------------------------------------

TITLE: Threaded TCP Server Implementation in Python
DESCRIPTION: A threaded TCP server implementation using ThreadingMixIn. Handles multiple concurrent connections by spawning a new thread for each client request.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/socketserver.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
import socket
import threading
import socketserver

class ThreadedTCPRequestHandler(socketserver.BaseRequestHandler):

    def handle(self):
        data = str(self.request.recv(1024), 'ascii')
        cur_thread = threading.current_thread()
        response = bytes("{}: {}".format(cur_thread.name, data), 'ascii')
        self.request.sendall(response)

class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
    pass

def client(ip, port, message):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.connect((ip, port))
        sock.sendall(bytes(message, 'ascii'))
        response = str(sock.recv(1024), 'ascii')
        print("Received: {}".format(response))

if __name__ == "__main__":
    # Port 0 means to select an arbitrary unused port
    HOST, PORT = "localhost", 0

    server = ThreadedTCPServer((HOST, PORT), ThreadedTCPRequestHandler)
    with server:
        ip, port = server.server_address

        # Start a thread with the server -- that thread will then start one
        # more thread for each request
        server_thread = threading.Thread(target=server.serve_forever)
        # Exit the server thread when the main thread terminates
        server_thread.daemon = True
        server_thread.start()
        print("Server loop running in thread:", server_thread.name)

        client(ip, port, "Hello World 1")
        client(ip, port, "Hello World 2")
        client(ip, port, "Hello World 3")

        server.shutdown()
```

----------------------------------------

TITLE: Initializing Random Number Generator in Python
DESCRIPTION: The seed() function initializes the random number generator. It can take an optional argument 'a' for the seed value and a version parameter. If 'a' is omitted, the current system time is used.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/random.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
seed(a=None, version=2)
```

----------------------------------------

TITLE: Library Logging Initialization Python
DESCRIPTION: This snippet sets up a logger for a library component, webapplib, simulating logging messages from a shared library amongst multiple web applications. It logs a debug message and includes a sleep to simulate processing time.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
import logging
import time

logger = logging.getLogger(__name__)

def useful():
    # Just a representative event logged from the library
    logger.debug('Hello from webapplib!')
    # Just sleep for a bit so other threads get to run
    time.sleep(0.01)
```

----------------------------------------

TITLE: Using Generator Expression with sum() in Python
DESCRIPTION: This snippet shows how to use a generator expression with the sum() function to achieve the same result as a reduction operation, offering a more concise and Pythonic approach.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_31

LANGUAGE: python
CODE:
```
 total = sum(b for a, b in items)
```

----------------------------------------

TITLE: Creating Python Sets
DESCRIPTION: Examples of different ways to create sets in Python using literal syntax and constructors.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_88

LANGUAGE: python
CODE:
```
{'jack', 'sjoerd'}
{c for c in 'abracadabra' if c not in 'abc'}
set()
set('foobar')
set(['a', 'b', 'foo'])
```

----------------------------------------

TITLE: Command-line Interface for Creating Virtual Environments in Python
DESCRIPTION: This function provides a command-line interface for creating virtual environments using the ExtendedEnvBuilder class. It parses command-line arguments to customize the virtual environment creation process.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/venv.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
def main(args=None):
    import argparse

    parser = argparse.ArgumentParser(prog=__name__,
                                     description='Creates virtual Python '
                                                 'environments in one or '
                                                 'more target '
                                                 'directories.')
    parser.add_argument('dirs', metavar='ENV_DIR', nargs='+',
                        help='A directory in which to create the '
                             'virtual environment.')
    parser.add_argument('--no-setuptools', default=False,
                        action='store_true', dest='nodist',
                        help="Don't install setuptools or pip in the "
                             "virtual environment.")
    parser.add_argument('--no-pip', default=False,
                        action='store_true', dest='nopip',
                        help="Don't install pip in the virtual "
                             "environment.")
    parser.add_argument('--system-site-packages', default=False,
                        action='store_true', dest='system_site',
                        help='Give the virtual environment access to the '
                             'system site-packages dir.')
    if os.name == 'nt':
        use_symlinks = False
    else:
        use_symlinks = True
    parser.add_argument('--symlinks', default=use_symlinks,
                        action='store_true', dest='symlinks',
                        help='Try to use symlinks rather than copies, '
                             'when symlinks are not the default for '
                             'the platform.')
```

----------------------------------------

TITLE: Defining a Data Class in Python
DESCRIPTION: This snippet demonstrates how to use the @dataclass decorator to create a simple data class called Employee with attributes for name, department, and salary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/classes.rst#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
from dataclasses import dataclass

@dataclass
class Employee:
    name: str
    dept: str
    salary: int
```

----------------------------------------

TITLE: Implementing Async With Statement in Python
DESCRIPTION: Explains the use of `async with` to work with asynchronous context managers, showing its equivalence to calling `__aenter__` and `__aexit__` methods wrapped in `await` calls. This ensures proper resource management during asynchronous operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
async with EXPRESSION as TARGET:
    SUITE
```

LANGUAGE: python
CODE:
```
manager = (EXPRESSION)
aenter = type(manager).__aenter__
aexit = type(manager).__aexit__
value = await aenter(manager)
hit_except = False

try:
    TARGET = value
    SUITE
except:
    hit_except = True
    if not await aexit(manager, *sys.exc_info()):
        raise
finally:
    if not hit_except:
        await aexit(manager, None, None, None)
```

----------------------------------------

TITLE: Constructing Absolute URL with urljoin Function in Python
DESCRIPTION: The urljoin function constructs a full (absolute) URL by combining a base URL with another URL. It uses components of the base URL to provide missing components in the relative URL.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.parse.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
urljoin(base, url, allow_fragments=True)
```

----------------------------------------

TITLE: Handling Keyboard Interrupts in Python
DESCRIPTION: This snippet demonstrates how to handle keyboard interrupts in Python using a try-except block. It exits the program gracefully when a KeyboardInterrupt is received.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xmlrpc.server.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
except KeyboardInterrupt:\n    print(\"\nKeyboard interrupt received, exiting.\")\n    sys.exit(0)
```

----------------------------------------

TITLE: Example of storing groupby results in Python
DESCRIPTION: Example showing how to store the results of groupby in lists, as the groups are iterators that share the underlying iterable and aren't visible after the groupby object is advanced.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
groups = []
uniquekeys = []
data = sorted(data, key=keyfunc)
for k, g in groupby(data, keyfunc):
    groups.append(list(g))      # Store group iterator as a list
    uniquekeys.append(k)
```

----------------------------------------

TITLE: Defining a Generic Function (New Syntax)
DESCRIPTION: Illustrates the modern syntax for defining a generic function using type parameter lists directly after the function name.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_94

LANGUAGE: python
CODE:
```
def lookup_name[X, Y](mapping: Mapping[X, Y], key: X, default: Y) -> Y:
    try:
        return mapping[key]
    except KeyError:
        return default
```

----------------------------------------

TITLE: Accessing ShareableList from Multiple Processes
DESCRIPTION: This example shows how to share a ShareableList between two processes by using the name of the shared memory block. One process creates the list, and another process accesses it using the name.  Modifications in one process are reflected in the other.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.shared_memory.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
>>> b = shared_memory.ShareableList(range(5))         # In a first process
>>> c = shared_memory.ShareableList(name=b.shm.name)  # In a second process
>>> c
ShareableList([0, 1, 2, 3, 4], name='...')
>>> c[-1] = -999
>>> b[-1]
-999
>>> b.shm.close()
>>> c.shm.close()
>>> c.shm.unlink()
```

----------------------------------------

TITLE: Simulating WebApp Request Processing in Python
DESCRIPTION: This code simulates the processing of multiple web requests across two dummy web applications using threads. Context variables are used to inject request information into logs, and each web application logs its requests specifically to its log file using custom logging handlers and filters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
import argparse
from contextvars import ContextVar
import logging
import os
from random import choice
import threading
import webapplib

logger = logging.getLogger(__name__)
root = logging.getLogger()
root.setLevel(logging.DEBUG)

class Request:
    """
    A simple dummy request class which just holds dummy HTTP request method,
    client IP address and client username
    """
    def __init__(self, method, ip, user):
        self.method = method
        self.ip = ip
        self.user = user

REQUESTS = [
    Request('GET', '192.168.2.20', 'jim'),
    Request('POST', '192.168.3.20', 'fred'),
    Request('GET', '192.168.2.21', 'sheila'),
    Request('POST', '192.168.3.21', 'jim'),
    Request('GET', '192.168.2.22', 'fred'),
    Request('POST', '192.168.3.22', 'sheila'),
]

formatter = logging.Formatter('%(threadName)-11s %(appName)s %(name)-9s %(user)-6s %(ip)s %(method)-4s %(message)s')

ctx_request = ContextVar('request')
ctx_appname = ContextVar('appname')

class InjectingFilter(logging.Filter):
    """
    A filter which injects context-specific information into logs and ensures
    that only information for a specific webapp is included in its log
    """
    def __init__(self, app):
        self.app = app

    def filter(self, record):
        request = ctx_request.get()
        record.method = request.method
        record.ip = request.ip
        record.user = request.user
        record.appName = appName = ctx_appname.get()
        return appName == self.app.name

class WebApp:
    """
    A dummy web application class which has its own handler and filter for a
    webapp-specific log.
    """
    def __init__(self, name):
        self.name = name
        handler = logging.FileHandler(name + '.log', 'w')
        f = InjectingFilter(self)
        handler.setFormatter(formatter)
        handler.addFilter(f)
        root.addHandler(handler)
        self.num_requests = 0

    def process_request(self, request):
        """
        This is the dummy method for processing a request. It's called on a
        different thread for every request. We store the context information into
        the context vars before doing anything else.
        """
        ctx_request.set(request)
        ctx_appname.set(self.name)
        self.num_requests += 1
        logger.debug('Request processing started')
        webapplib.useful()
        logger.debug('Request processing finished')

def main():
    fn = os.path.splitext(os.path.basename(__file__))[0]
    adhf = argparse.ArgumentDefaultsHelpFormatter
    ap = argparse.ArgumentParser(formatter_class=adhf, prog=fn,
                                 description='Simulate a couple of web '
                                             'applications handling some '
                                             'requests, showing how request '
                                             'context can be used to '
                                             'populate logs')
    aa = ap.add_argument
    aa('--count', '-c', type=int, default=100, help='How many requests to simulate')
    options = ap.parse_args()

    app1 = WebApp('app1')
    app2 = WebApp('app2')
    apps = [app1, app2]
    threads = []
    handler = logging.FileHandler('app.log', 'w')
    handler.setFormatter(formatter)
    root.addHandler(handler)

    for i in range(options.count):
        try:
            app = choice(apps)
            request = choice(REQUESTS)
            t = threading.Thread(target=app.process_request, args=(request,))
            threads.append(t)
            t.start()
        except KeyboardInterrupt:
            break

    for t in threads:
        t.join()

    for app in apps:
        print('%s processed %s requests' % (app.name, app.num_requests))

if __name__ == '__main__':
    main()
```

----------------------------------------

TITLE: Suppressing Exceptions with contextlib.suppress in Python
DESCRIPTION: Demonstrates the use of suppress context manager to silence specific exceptions. It shows how to use suppress to ignore FileNotFoundError when removing files, equivalent to using try-except blocks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextlib.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
from contextlib import suppress

with suppress(FileNotFoundError):
    os.remove('somefile.tmp')

with suppress(FileNotFoundError):
    os.remove('someotherfile.tmp')
```

LANGUAGE: python
CODE:
```
try:
    os.remove('somefile.tmp')
except FileNotFoundError:
    pass

try:
    os.remove('someotherfile.tmp')
except FileNotFoundError:
    pass
```

----------------------------------------

TITLE: Callable Object Class Implementation in Python
DESCRIPTION: Shows how to create callable objects using classes with __call__ method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_26

LANGUAGE: python
CODE:
```
class linear:
    def __init__(self, a, b):
        self.a, self.b = a, b

    def __call__(self, x):
        return self.a * x + self.b
```

----------------------------------------

TITLE: Generating UUIDs using Python's uuid module
DESCRIPTION: This snippet demonstrates various methods of generating UUIDs using Python's uuid module, including uuid1(), uuid3(), uuid4(), uuid5(), and creating UUIDs from strings or bytes. It also shows how to access special UUIDs like NIL and MAX, and how to work with UUIDv7 timestamps.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/uuid.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> import uuid

>>> # make a UUID based on the host ID and current time
>>> uuid.uuid1()
UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')

>>> # make a UUID using an MD5 hash of a namespace UUID and a name
>>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')
UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')

>>> # make a random UUID
>>> uuid.uuid4()
UUID('16fd2706-8baf-433b-82eb-8c7fada847da')

>>> # make a UUID using a SHA-1 hash of a namespace UUID and a name
>>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')
UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')

>>> # make a UUID from a string of hex digits (braces and hyphens ignored)
>>> x = uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}')

>>> # convert a UUID to a string of hex digits in standard form
>>> str(x)
'00010203-0405-0607-0809-0a0b0c0d0e0f'

>>> # get the raw 16 bytes of the UUID
>>> x.bytes
b'\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f'

>>> # make a UUID from a 16-byte string
>>> uuid.UUID(bytes=x.bytes)
UUID('00010203-0405-0607-0809-0a0b0c0d0e0f')

>>> # get the Nil UUID
>>> uuid.NIL
UUID('00000000-0000-0000-0000-000000000000')

>>> # get the Max UUID
>>> uuid.MAX
UUID('ffffffff-ffff-ffff-ffff-ffffffffffff')

>>> # get UUIDv7 creation (local) time as a timestamp in milliseconds
>>> u = uuid.uuid7()
>>> u.time  # doctest: +SKIP
1743936859822
>>> # get UUIDv7 creation (local) time as a datetime object
>>> import datetime as dt
>>> dt.datetime.fromtimestamp(u.time / 1000)  # doctest: +SKIP
datetime.datetime(...)
```

----------------------------------------

TITLE: String Indexing and Slicing in Python
DESCRIPTION: This snippet shows how to access individual characters in a string using indexing and how to extract substrings using slicing in Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/introduction.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
>>> word = 'Python'
>>> word[0]  # character in position 0
'P'
>>> word[5]  # character in position 5
'n'
>>> word[-1]  # last character
'n'
>>> word[-2]  # second-last character
'o'
>>> word[-6]
'P'
>>> word[0:2]  # characters from position 0 (included) to 2 (excluded)
'Py'
>>> word[2:5]  # characters from position 2 (included) to 5 (excluded)
'tho'
>>> word[:2]   # character from the beginning to position 2 (excluded)
'Py'
>>> word[4:]   # characters from position 4 (included) to the end
'on'
>>> word[-2:]  # characters from the second-last (included) to the end
'on'
>>> word[:2] + word[2:]
'Python'
>>> word[:4] + word[4:]
'Python'
```

----------------------------------------

TITLE: Implementing Function Decorator with wraps in Python
DESCRIPTION: Demonstrates how to preserve function metadata using the @wraps decorator from functools. Shows how the decorator maintains the original function's name and docstring when creating wrapper functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
>>> from functools import wraps
>>> def my_decorator(f):
...     @wraps(f)
...     def wrapper(*args, **kwds):
...         print('Calling decorated function')
...         return f(*args, **kwds)
...     return wrapper
...
>>> @my_decorator
... def example():
...     """Docstring"""
...     print('Called example function')
...
>>> example()
Calling decorated function
Called example function
>>> example.__name__
'example'
>>> example.__doc__
'Docstring'
```

----------------------------------------

TITLE: Command Line Argument Processing with argparse in Python
DESCRIPTION: Demonstrates sophisticated command line argument processing using the argparse module, including positional and optional arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
import argparse

parser = argparse.ArgumentParser(
    prog='top',
    description='Show top lines from each file')
parser.add_argument('filenames', nargs='+')
parser.add_argument('-l', '--lines', type=int, default=10)
args = parser.parse_args()
print(args)
```

----------------------------------------

TITLE: Decoding JSON to Python Objects
DESCRIPTION: Demonstrates how to parse JSON strings into Python objects using json.loads() and json.load(). Shows handling of escape sequences and reading from file-like objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/json.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> import json
>>> json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]')
['foo', {'bar': ['baz', None, 1.0, 2]}]
>>> json.loads('"\\"foo\\bar"')
'"foo\x08ar'
>>> from io import StringIO
>>> io = StringIO('["streaming API"]')
>>> json.load(io)
['streaming API']
```

----------------------------------------

TITLE: Memoization Function with Weak References in Python
DESCRIPTION: Implements a memoization function using weak references to avoid keeping cached objects alive unnecessarily.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.1.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
_cache = {}
def memoize(x):
    if _cache.has_key(x):
        obj = _cache[x]()
        # If weak reference object still exists,
        # return it
        if obj is not None: return obj

    retval = f(x)

    # Cache a weak reference
    _cache[x] = weakref.ref(retval)

    return retval
```

----------------------------------------

TITLE: Demonstrating break and continue Statements in Python Loops
DESCRIPTION: This snippet shows how to use break and continue statements in nested loops to control the flow of execution.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> for n in range(2, 10):
...     for x in range(2, n):
...         if n % x == 0:
...             print(f"{n} equals {x} * {n//x}")
...             break
...
4 equals 2 * 2
6 equals 2 * 3
8 equals 2 * 4
9 equals 3 * 3

>>> for num in range(2, 10):
...     if num % 2 == 0:
...         print(f"Found an even number {num}")
...         continue
...     print(f"Found an odd number {num}")
...
Found an even number 2
Found an odd number 3
Found an even number 4
Found an odd number 5
Found an even number 6
Found an odd number 7
Found an even number 8
Found an odd number 9
```

----------------------------------------

TITLE: Creating timezone-aware datetime objects in Python
DESCRIPTION: This snippet shows how to use the new datetime.timezone type to create timezone-aware datetime objects, making it easier to work with UTC offsets.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_33

LANGUAGE: python
CODE:
```
>>> from datetime import datetime, timezone

>>> datetime.now(timezone.utc)
datetime.datetime(2010, 12, 8, 21, 4, 2, 923754, tzinfo=datetime.timezone.utc)

>>> datetime.strptime("01/01/2000 12:00 +0000", "%m/%d/%Y %H:%M %z")
datetime.datetime(2000, 1, 1, 12, 0, tzinfo=datetime.timezone.utc)
```

----------------------------------------

TITLE: Set Parser Defaults and Parse Arguments - Python argparse
DESCRIPTION: Demonstrates how to create an ArgumentParser, add an argument with a type, set parser-level default values using set_defaults, and parse a list of arguments. Shows the resulting Namespace object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_91

LANGUAGE: python
CODE:
```
parser = argparse.ArgumentParser()
parser.add_argument('foo', type=int)
parser.set_defaults(bar=42, baz='badger')
parser.parse_args(['736'])
```

----------------------------------------

TITLE: Initializing Python with PyConfig, Reading, and Overriding Options - C
DESCRIPTION: This C function provides a more comprehensive example of initializing Python with `PyConfig`. It initializes the config, sets the program name using `PyConfig_SetBytesString`, reads the default configuration using `PyConfig_Read`, overrides settings like the module search path and executable, and finally initializes the interpreter with `Py_InitializeFromConfig`, clearing the config upon completion or error.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/init_config.rst#_snippet_7

LANGUAGE: C
CODE:
```
PyStatus init_python(const char *program_name)
{
    PyStatus status;

    PyConfig config;
    PyConfig_InitPythonConfig(&config);

    /* Set the program name before reading the configuration
       (decode byte string from the locale encoding).

       Implicitly preinitialize Python. */
    status = PyConfig_SetBytesString(&config, &config.program_name,
                                     program_name);
    if (PyStatus_Exception(status)) {
        goto done;
    }

    /* Read all configuration at once */
    status = PyConfig_Read(&config);
    if (PyStatus_Exception(status)) {
        goto done;
    }

    /* Specify sys.path explicitly */
    /* If you want to modify the default set of paths, finish
       initialization first and then use PySys_GetObject("path") */
    config.module_search_paths_set = 1;
    status = PyWideStringList_Append(&config.module_search_paths,
                                     L"/path/to/stdlib");
    if (PyStatus_Exception(status)) {
        goto done;
    }
    status = PyWideStringList_Append(&config.module_search_paths,
                                     L"/path/to/more/modules");
    if (PyStatus_Exception(status)) {
        goto done;
    }

    /* Override executable computed by PyConfig_Read() */
    status = PyConfig_SetString(&config, &config.executable,
                                L"/path/to/my_executable");
    if (PyStatus_Exception(status)) {
        goto done;
    }

    status = Py_InitializeFromConfig(&config);

done:
    PyConfig_Clear(&config);
    return status;
}
```

----------------------------------------

TITLE: Defining a Simple Generator Function in Python
DESCRIPTION: This snippet exemplifies how to define a generator function using the `yield` statement. It explains the state retention feature of a generator which allows it to resume execution to provide a series of values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.2.rst#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
def generate_ints(N):
    for i in range(N):
        yield i

# Usage example:
gen = generate_ints(3)
print(gen.next())  # Outputs: 0
print(gen.next())  # Outputs: 1
print(gen.next())  # Outputs: 2

print(gen.next())  # Raises StopIteration
```

----------------------------------------

TITLE: Defining TypedDict using Class Syntax
DESCRIPTION: Shows the standard class-based syntax for defining a `TypedDict` with specific keys and value types, along with examples of type-checking success and failure, and demonstrating that it behaves like a plain dictionary at runtime.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_147

LANGUAGE: python
CODE:
```
class Point2D(TypedDict):
    x: int
    y: int
    label: str

a: Point2D = {'x': 1, 'y': 2, 'label': 'good'}  # OK
b: Point2D = {'z': 3, 'label': 'bad'}           # Fails type check

assert Point2D(x=1, y=2, label='first') == dict(x=1, y=2, label='first')
```

----------------------------------------

TITLE: Path Navigation and Properties in Python Pathlib
DESCRIPTION: Demonstrates path navigation, querying path properties, and file operations using pathlib.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> p = Path('/etc')
>>> q = p / 'init.d' / 'reboot'
>>> q
PosixPath('/etc/init.d/reboot')
>>> q.resolve()
PosixPath('/etc/rc.d/init.d/halt')

>>> q.exists()
True
>>> q.is_dir()
False

>>> with q.open() as f: f.readline()
...
'#!/bin/bash\n'
```

----------------------------------------

TITLE: Generating Alphanumeric Password with Python secrets Module
DESCRIPTION: This snippet shows how to generate an eight-character alphanumeric password using the secrets.choice() function and string module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/secrets.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
import string
import secrets
alphabet = string.ascii_letters + string.digits
password = ''.join(secrets.choice(alphabet) for i in range(8))
```

----------------------------------------

TITLE: Defining an Average Function with Generics in Python
DESCRIPTION: This function calculates the average of a list of float values. It expects a list containing float elements and returns their average as a float. The function takes advantage of type hints for better code clarity and type checking.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_96

LANGUAGE: python
CODE:
```
def average(values: list[float]) -> float:
    return sum(values) / len(values)
```

----------------------------------------

TITLE: Using Module-Level re.split() Function in Python
DESCRIPTION: Demonstrates the re.split() function, which takes the regex pattern as its first argument. Examples show splitting with and without capturing delimiters, and limiting the number of splits.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
>>> re.split(r'[\W]+', 'Words, words, words.')
['Words', 'words', 'words', '']
>>> re.split(r'([\W]+)', 'Words, words, words.')
['Words', ', ', 'words', ', ', 'words', '.', '']
>>> re.split(r'[\W]+', 'Words, words, words.', 1)
['Words', 'words, words.']
```

----------------------------------------

TITLE: Referencing a Submodule in Python's Import System
DESCRIPTION: Example of importing a submodule from a package. This code imports the 'Foo' class from the 'foo' submodule inside the 'spam' package, demonstrating Python's module binding behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/import.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from .foo import Foo
```

----------------------------------------

TITLE: Shell Command for Module Execution
DESCRIPTION: Demonstrates how to execute a Python module from the command line with arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/modules.rst#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
$ python fibo.py 50
```

----------------------------------------

TITLE: Defining Generic Functions (New Syntax) - Python 3.12+
DESCRIPTION: Shows the new syntactic support for defining generic functions using type parameters directly in square brackets after the function name (introduced in Python 3.12). Requires `collections.abc`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_14

LANGUAGE: python
CODE:
```
from collections.abc import Sequence

def first[T](l: Sequence[T]) -> T:  # Function is generic over the TypeVar "T"
    return l[0]
```

----------------------------------------

TITLE: ThreadPoolExecutor File Copy Example
DESCRIPTION: Shows how to use ThreadPoolExecutor with a context manager to copy multiple files concurrently.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/concurrent.futures.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import shutil
with ThreadPoolExecutor(max_workers=4) as e:
    e.submit(shutil.copy, 'src1.txt', 'dest1.txt')
    e.submit(shutil.copy, 'src2.txt', 'dest2.txt')
    e.submit(shutil.copy, 'src3.txt', 'dest3.txt')
    e.submit(shutil.copy, 'src4.txt', 'dest4.txt')
```

----------------------------------------

TITLE: Implementing Task Cancellation Handling in Python AsyncIO
DESCRIPTION: Example demonstrating how coroutines can intercept and handle cancellation requests using asyncio Tasks. Shows the interaction between a main coroutine and a cancellable task with proper exception handling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
async def cancel_me():
    print('cancel_me(): before sleep')

    try:
        # Wait for 1 hour
        await asyncio.sleep(3600)
    except asyncio.CancelledError:
        print('cancel_me(): cancel sleep')
        raise
    finally:
        print('cancel_me(): after sleep')

async def main():
    # Create a "cancel_me" Task
    task = asyncio.create_task(cancel_me())

    # Wait for 1 second
    await asyncio.sleep(1)

    task.cancel()
    try:
        await task
    except asyncio.CancelledError:
        print("main(): cancel_me is cancelled now")

asyncio.run(main())
```

----------------------------------------

TITLE: Python Exception Hierarchy Tree
DESCRIPTION: This snippet visually represents the hierarchy of Python exceptions. It shows the relationships between base exceptions like `BaseException` and specific exceptions like `ZeroDivisionError` and `FileNotFoundError`. Understanding this hierarchy is crucial for effective exception handling.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/exception_hierarchy.txt#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
"BaseException
 ├── BaseExceptionGroup
 ├── GeneratorExit
 ├── KeyboardInterrupt
 ├── SystemExit
 └── Exception
      ├── ArithmeticError
      │    ├── FloatingPointError
      │    ├── OverflowError
      │    └── ZeroDivisionError
      ├── AssertionError
      ├── AttributeError
      ├── BufferError
      ├── EOFError
      ├── ExceptionGroup [BaseExceptionGroup]
      ├── ImportError
      │    └── ModuleNotFoundError
      ├── LookupError
      │    ├── IndexError
      │    └── KeyError
      ├── MemoryError
      ├── NameError
      │    └── UnboundLocalError
      ├── OSError
      │    ├── BlockingIOError
      │    ├── ChildProcessError
      │    ├── ConnectionError
      │    │    ├── BrokenPipeError
      │    │    ├── ConnectionAbortedError
      │    │    ├── ConnectionRefusedError
      │    │    └── ConnectionResetError
      │    ├── FileExistsError
      │    ├── FileNotFoundError
      │    ├── InterruptedError
      │    ├── IsADirectoryError
      │    ├── NotADirectoryError
      │    ├── PermissionError
      │    ├── ProcessLookupError
      │    └── TimeoutError
      ├── ReferenceError
      ├── RuntimeError
      │    ├── NotImplementedError
      │    ├── PythonFinalizationError
      │    └── RecursionError
      ├── StopAsyncIteration
      ├── StopIteration
      ├── SyntaxError
      │    └── IndentationError
      │         └── TabError
      ├── SystemError
      ├── TypeError
      ├── ValueError
      │    └── UnicodeError
      │         ├── UnicodeDecodeError
      │         ├── UnicodeEncodeError
      │         └── UnicodeTranslateError
      └── Warning
           ├── BytesWarning
           ├── DeprecationWarning
           ├── EncodingWarning
           ├── FutureWarning
           ├── ImportWarning
           ├── PendingDeprecationWarning
           ├── ResourceWarning
           ├── RuntimeWarning
           ├── SyntaxWarning
           ├── UnicodeWarning
           └── UserWarning"
```

----------------------------------------

TITLE: Basic Logging with the logging Module in Python
DESCRIPTION: Demonstrates how to use the logging module for basic logging operations. This example shows how to log messages at different severity levels and the default output format.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib2.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
import logging
logging.debug('Debugging information')
logging.info('Informational message')
logging.warning('Warning:config file %s not found', 'server.conf')
logging.error('Error occurred')
logging.critical('Critical error -- shutting down')
```

----------------------------------------

TITLE: Reading Text Resource
DESCRIPTION: Illustrates how to read a text resource using `importlib.resources.read_text`. The function takes a module as an anchor and the name of the resource. The example explicitly specifies the encoding for backward compatibility with older versions of the module, especially when multiple path names are given.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.resources.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"importlib.resources.read_text(my_module, \"info.txt\")"
```

----------------------------------------

TITLE: Writing GZIP File Python
DESCRIPTION: Illustrates how to create a new gzip-compressed file and write byte content to it. It uses the `gzip.open` function in binary write mode ('wb') and a `with` statement. The byte string `content` is written to the compressed file.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/gzip.rst#_snippet_1

LANGUAGE: Python
CODE:
```
import gzip
content = b"Lots of content here"
with gzip.open('/home/joe/file.txt.gz', 'wb') as f:
    f.write(content)
```

----------------------------------------

TITLE: Set Breakpoint Using pdb.set_trace()
DESCRIPTION: Inserts a breakpoint at the specified location in the code. When execution reaches this line, the debugger prompt will appear, allowing interactive debugging. This is a common way to start a debugging session.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_0

LANGUAGE: Python
CODE:
```
import pdb; pdb.set_trace()
```

----------------------------------------

TITLE: Setting Return Values for Mock Methods in Python
DESCRIPTION: Demonstrates how to set return values for methods on a mock object, which is useful when mocking more complex objects with method calls.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
mock = Mock()
mock.method.return_value = 3
mock.method()
```

----------------------------------------

TITLE: Calling a base class method using super() in Python
DESCRIPTION: Shows how to call a method defined in a base class from a derived class using the built-in super() function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_52

LANGUAGE: python
CODE:
```
class Derived(Base):
    def meth(self):
        super().meth()  # calls Base.meth
```

----------------------------------------

TITLE: Comparing try/except vs conditional for dictionary key lookups in Python
DESCRIPTION: Demonstrates two approaches for handling dictionary lookups: using try/except to catch KeyError versus using a conditional check. The try/except pattern is more efficient when the key is usually present, while the conditional check is better when the key is often missing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/design.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
try:
    value = mydict[key]
except KeyError:
    mydict[key] = getvalue(key)
    value = mydict[key]
```

LANGUAGE: python
CODE:
```
if key in mydict:
    value = mydict[key]
else:
    value = mydict[key] = getvalue(key)
```

----------------------------------------

TITLE: Applying Methods to a Sequence Using For Loops in Python
DESCRIPTION: Demonstrates using simple for loops to call methods or functions on each object in a sequence without collecting return values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_43

LANGUAGE: python
CODE:
```
for obj in mylist:
    obj.method()

for obj in mylist:
    function(obj)
```

----------------------------------------

TITLE: Retrieving Environment Variables in Python
DESCRIPTION: Functions to get environment variable values both as strings and bytes, allowing for flexible handling of environment configurations. Notably, they reflect the environment state at the time of their call.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
.. function:: getenv(key, default=None)

   Return the value of the environment variable *key* as a string if it exists, or
   *default* if it doesn't. *key* is a string. Note that
   since :func:`getenv` uses :data:`os.environ`, the mapping of :func:`getenv` is
   similarly also captured on import, and the function may not reflect
   future environment changes.

   On Unix, keys and values are decoded with :func:`sys.getfilesystemencoding`
   and ``'surrogateescape'`` error handler. Use :func:`os.getenvb` if you
   would like to use a different encoding.

   .. availability:: Unix, Windows.
```

LANGUAGE: Python
CODE:
```
.. function:: getenvb(key, default=None)

   Return the value of the environment variable *key* as bytes if it exists, or
   *default* if it doesn't. *key* must be bytes. Note that
   since :func:`getenvb` uses :data:`os.environb`, the mapping of :func:`getenvb` is
   similarly also captured on import, and the function may not reflect
   future environment changes.

   :func:`getenvb` is only available if :const:`supports_bytes_environ`
   is ``True``.

   .. availability:: Unix.

   .. versionadded:: 3.2
```

----------------------------------------

TITLE: Creating an IP Network
DESCRIPTION: Creates an IPv4Network or IPv6Network object from a string representation of an IP network. The function determines whether the network is IPv4 or IPv6 and creates the appropriate object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ipaddress.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> ipaddress.ip_network('192.168.0.0/28')
IPv4Network('192.168.0.0/28')
```

----------------------------------------

TITLE: Raising Exceptions with Explicit Chaining (Python)
DESCRIPTION: This snippet demonstrates how to explicitly chain exceptions using the `raise ... from ...` syntax in Python. When a `ZeroDivisionError` occurs, it is caught, and a new `RuntimeError` is raised, explicitly linking the original exception (`exc`) as the cause using the `from` clause. This results in both tracebacks being printed, with the original exception identified as the cause.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/simple_stmts.rst#_snippet_6

LANGUAGE: python
CODE:
```
try:
    print(1 / 0)
except Exception as exc:
    raise RuntimeError("Something bad happened") from exc
```

----------------------------------------

TITLE: Defining Function for Changing Directory in Python
DESCRIPTION: Provides functions to change the current directory and retrieve the current working directory. These functions are essential for working with directories in file operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
.. function:: chdir(path)
              fchdir(fd)
              getcwd()
   :noindex:

   These functions are described in :ref:`os-file-dir`.
```

----------------------------------------

TITLE: Joining Paths - pathlib Python
DESCRIPTION: This code snippet uses the `joinpath` method to combine a base path with additional path segments, showing its behavior across different path types, such as `PurePosixPath` and `PureWindowsPath`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
>>> PurePosixPath('/etc').joinpath('passwd')
PurePosixPath('/etc/passwd')
>>> PurePosixPath('/etc').joinpath(PurePosixPath('passwd'))
PurePosixPath('/etc/passwd')
>>> PurePosixPath('/etc').joinpath('init.d', 'apache2')
PurePosixPath('/etc/init.d/apache2')
>>> PureWindowsPath('c:').joinpath('/Program Files')
PureWindowsPath('c:/Program Files')
```

----------------------------------------

TITLE: Defining a Basic Generic Function (New Syntax)
DESCRIPTION: Shows a simple example of a generic function defined using the modern syntax with a basic type variable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_100

LANGUAGE: python
CODE:
```
def repeat[T](x: T, n: int) -> Sequence[T]:
    """Return a list containing n references to x."""
    return [x]*n
```

----------------------------------------

TITLE: Mocking Classes with patch in Python
DESCRIPTION: Shows how to mock a class using patch so that instances created within the test code return controlled values. The example demonstrates configuring the return value of a method on the mocked instance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
def some_function():
    instance = module.Foo()
    return instance.method()

with patch('module.Foo') as mock:
    instance = mock.return_value
    instance.method.return_value = 'the result'
    result = some_function()
    assert result == 'the result'
```

----------------------------------------

TITLE: Using strip Method in Python bytes Objects
DESCRIPTION: Demonstrates how to remove both leading and trailing characters from bytes objects using the strip() method. It removes specified bytes from both ends of the sequence.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_52

LANGUAGE: python
CODE:
```
>>> b'   spacious   '.strip()
b'spacious'
>>> b'www.example.com'.strip(b'cmowz.')
b'example'
```

----------------------------------------

TITLE: Named Groups as Dictionary using groupdict() in Python
DESCRIPTION: Demonstrates retrieving named groups as a dictionary using the `groupdict()` method of a match object. This provides an easy way to access all named groups and their corresponding matched strings in a dictionary format, which is helpful for processing the extracted data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
>>> m = re.match(r'(?P<first>\w+) (?P<last>\w+)', 'Jane Doe')
>>> m.groupdict()
{'first': 'Jane', 'last': 'Doe'}
```

----------------------------------------

TITLE: Reading Unicode Data from Files in Python
DESCRIPTION: This snippet shows how to read Unicode data from a file in Python using the built-in open function with the encoding parameter set to 'utf-8'. The example provides a way to iterate over lines in a file, handling them as Unicode strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/unicode.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
with open('unicode.txt', encoding='utf-8') as f:
    for line in f:
        print(repr(line))
```

----------------------------------------

TITLE: Using sys Module Properties in Python
DESCRIPTION: Demonstrates accessing and modifying system-specific parameters through the sys module, including prompt strings and module search paths.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/modules.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> import sys
>>> sys.ps1
'>>> '
>>> sys.ps2
'... '
>>> sys.ps1 = 'C> '
C> print('Yuck!')
Yuck!
C>
```

----------------------------------------

TITLE: OS System Call Replacement with Subprocess
DESCRIPTION: Converting os.system calls to subprocess.call with proper error handling
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/subprocess.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
try:
    retcode = call("mycmd" + " myarg", shell=True)
    if retcode < 0:
        print("Child was terminated by signal", -retcode, file=sys.stderr)
    else:
        print("Child returned", retcode, file=sys.stderr)
except OSError as e:
    print("Execution failed:", e, file=sys.stderr)
```

----------------------------------------

TITLE: Closing Database Connection
DESCRIPTION: This snippet ensures that the SQLite connection is gracefully closed at the end of the operations to free up resources and avoid potential database locking issues.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_17

LANGUAGE: Python
CODE:
```
conn.close()
```

----------------------------------------

TITLE: Implementing Method References in Python Classes
DESCRIPTION: Shows how to implement methods that reference other methods using the self argument within a class definition.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/classes.rst#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
class Bag:
    def __init__(self):
        self.data = []

    def add(self, x):
        self.data.append(x)

    def addtwice(self, x):
        self.add(x)
        self.add(x)
```

----------------------------------------

TITLE: Basic Class Inheritance in Python
DESCRIPTION: Demonstrates the basic syntax for creating a derived class from a base class in Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/classes.rst#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
class DerivedClassName(BaseClassName):
    <statement-1>
    .
    .
    .
    <statement-N>
```

----------------------------------------

TITLE: Retrieving Data from URLs in Python
DESCRIPTION: Shows how to retrieve and process data from a URL using the urllib.request module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
>>> from urllib.request import urlopen
>>> with urlopen('http://worldtimeapi.org/api/timezone/etc/UTC.txt') as response:
...     for line in response:
...         line = line.decode()             # Convert bytes to a str
...         if line.startswith('datetime'):
...             print(line.rstrip())         # Remove trailing newline
...
datetime: 2022-01-01T01:36:47.689215+00:00
```

----------------------------------------

TITLE: Demonstrating Parenthesized Context Managers in Python
DESCRIPTION: Shows various valid ways to use parentheses with context managers in Python 3.10, allowing for better formatting of multiple context managers across lines.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
with (CtxManager() as example):
    ...

with (
    CtxManager1(),
    CtxManager2()
):
    ...

with (CtxManager1() as example,
      CtxManager2()):
    ...

with (CtxManager1(),
      CtxManager2() as example):
    ...

with (
    CtxManager1() as example1,
    CtxManager2() as example2
):
    ...
```

LANGUAGE: python
CODE:
```
with (
    CtxManager1() as example1,
    CtxManager2() as example2,
    CtxManager3() as example3,
):
    ...
```

----------------------------------------

TITLE: Creating a Basic Enum for Weekdays in Python
DESCRIPTION: Demonstrates how to create a simple Enum class for representing days of the week. Each day is assigned a unique integer value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
from enum import Enum
class Weekday(Enum):
    MONDAY = 1
    TUESDAY = 2
    WEDNESDAY = 3
    THURSDAY = 4
    FRIDAY = 5
    SATURDAY = 6
    SUNDAY = 7
```

----------------------------------------

TITLE: JSON to Python Type Conversion Table
DESCRIPTION: Mapping table showing how JSON data types are converted to Python types during decoding
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/json.rst#2025-04-21_snippet_8

LANGUAGE: text
CODE:
```
+---------------+-------------------+
| JSON          | Python            |
+===============+===================+
| object        | dict              |
+---------------+-------------------+
| array         | list              |
+---------------+-------------------+
| string        | str               |
+---------------+-------------------+
| number (int)  | int               |
+---------------+-------------------+
| number (real) | float             |
+---------------+-------------------+
| true          | True              |
+---------------+-------------------+
| false         | False             |
+---------------+-------------------+
| null          | None              |
+---------------+-------------------+
```

----------------------------------------

TITLE: Using the dir Function in Python
DESCRIPTION: The dir function shows a list of attribute names in the local or specified object scope. It's versatile, adapting its output based on whether the input is a module, type or class object, or other object types. The function has an optional parameter, object, whose attributes it attempts to list if provided.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> import struct
>>> dir()   # show the names in the module namespace  # doctest: +SKIP
['__builtins__', '__name__', 'struct']
>>> dir(struct)   # show the names in the struct module # doctest: +SKIP
['Struct', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__initializing__', '__loader__', '__name__', '__package__', '_clearcache', 'calcsize', 'error', 'pack', 'pack_into', 'unpack', 'unpack_from']
```

LANGUAGE: python
CODE:
```
>>> class Shape:
...     def __dir__(self):
...         return ['area', 'perimeter', 'location']
...
>>> s = Shape()
>>> dir(s)
['area', 'location', 'perimeter']
```

----------------------------------------

TITLE: Using Generator Expressions and List Comprehensions in Python
DESCRIPTION: These examples show how to use generator expressions and list comprehensions to process a list of strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
>>> line_list = ['  line 1\n', 'line 2  \n', ' \n', '']

>>> # Generator expression -- returns iterator
>>> stripped_iter = (line.strip() for line in line_list)

>>> # List comprehension -- returns list
>>> stripped_list = [line.strip() for line in line_list]

>>> stripped_list = [line.strip() for line in line_list
...                  if line != ""]
```

----------------------------------------

TITLE: Sorting List in Python
DESCRIPTION: Demonstrates sorting a list and iterating through it without altering the original list. The sorted function returns a new list that is sorted.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/datastructures.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
>>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
>>> for i in sorted(basket):
...     print(i)
...
apple
apple
banana
orange
orange
pear
```

----------------------------------------

TITLE: Defining Subparsers with Argparse in Python
DESCRIPTION: This snippet demonstrates how to define subparsers using the `argparse` module.  Subparsers allow you to create command-line interfaces with distinct subcommands, each with its own set of arguments. It creates subparsers for 'launch' and 'move' commands, each with specific arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
import argparse
parser = argparse.ArgumentParser(prog='HELM')
subparsers = parser.add_subparsers()

parser_l = subparsers.add_parser('launch', help='Launch Control')   # first subgroup
parser_l.add_argument('-m', '--missiles', action='store_true')
parser_l.add_argument('-t', '--torpedos', action='store_true')

parser_m = subparsers.add_parser('move', help='Move Vessel',        # second subgroup
                                 aliases=('steer', 'turn'))         # equivalent names
parser_m.add_argument('-c', '--course', type=int, required=True)
parser_m.add_argument('-s', '--speed', type=int, default=0)
```

----------------------------------------

TITLE: Implementing switch-like functionality with dictionaries in Python
DESCRIPTION: Shows how to implement switch-like functionality using a dictionary mapping case values to functions. This pattern is useful for cases where you need to choose from many possibilities based on a value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/design.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
functions = {'a': function_1,
             'b': function_2,
             'c': self.method_1}

func = functions[value]
func()
```

----------------------------------------

TITLE: Directory Navigation with Current Working Directory Functions
DESCRIPTION: Functions to get and manipulate the current working directory, including getcwd() for string return and getcwdb() for bytestring return.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_37

LANGUAGE: python
CODE:
```
getcwd()
```

LANGUAGE: python
CODE:
```
getcwdb()
```

----------------------------------------

TITLE: Creating Basic Resource Management Context Manager in Python
DESCRIPTION: Example of creating a context manager using @contextmanager decorator to manage resource acquisition and release.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextlib.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from contextlib import contextmanager

@contextmanager
def managed_resource(*args, **kwds):
    # Code to acquire resource, e.g.:
    resource = acquire_resource(*args, **kwds)
    try:
        yield resource
    finally:
        # Code to release resource, e.g.:
        release_resource(resource)
```

----------------------------------------

TITLE: Adding Final and @final to typing Module
DESCRIPTION: Implementation of PEP 591 by adding Final qualifier and @final decorator to the typing module for preventing subclassing and overriding.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0b1.rst#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
Final
@final
```

----------------------------------------

TITLE: String removeprefix() Example - Python
DESCRIPTION: Shows the usage of removeprefix() method introduced in Python 3.9 to remove a specific prefix from a string if present.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
>>> 'TestHook'.removeprefix('Test')
'Hook'
>>> 'BaseTestCase'.removeprefix('Test')
'BaseTestCase'
```

----------------------------------------

TITLE: Using zip() for Parallel Iteration in Python
DESCRIPTION: Demonstrates how to use the zip() function to iterate over multiple iterables in parallel. The example shows how zip() creates tuples containing items from each iterable at the same position.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_28

LANGUAGE: python
CODE:
```
>>> for item in zip([1, 2, 3], ['sugar', 'spice', 'everything nice']):
...     print(item)
...
(1, 'sugar')
(2, 'spice')
(3, 'everything nice')
```

----------------------------------------

TITLE: Asserting Unreachable Code with typing.assert_never (Python)
DESCRIPTION: New function typing.assert_never() is used to ask a type checker to confirm that a line of code is not reachable. At runtime, it raises an AssertionError.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.11.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
typing.assert_never()
```

----------------------------------------

TITLE: Using shelve.open as a Context Manager in Python
DESCRIPTION: Example of using shelve.open with a context manager to ensure proper database closure. The with statement automatically closes the database when execution leaves the block.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/shelve.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
with shelve.open('spam') as db:
    db['eggs'] = 'eggs'
```

----------------------------------------

TITLE: Working with Strings in Python
DESCRIPTION: This snippet shows various ways to create and manipulate strings in Python, including using single and double quotes, and escaping characters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/introduction.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> 'spam eggs'  # single quotes
'spam eggs'
>>> "Paris rabbit got your back :)! Yay!"  # double quotes
'Paris rabbit got your back :)! Yay!'
>>> '1975'  # digits and numerals enclosed in quotes are also strings
'1975'
>>> 'doesn\'t'  # use \' to escape the single quote...
"doesn't"
>>> "doesn't"  # ...or use double quotes instead
"doesn't"
>>> '"Yes," they said.'
'"Yes," they said.'
>>> "\"Yes,\" they said."
'"Yes," they said.'
>>> '"Isn\'t," they said.'
'"Isn\'t," they said.'
```

----------------------------------------

TITLE: Using super() in Python Class Inheritance
DESCRIPTION: Shows the typical usage of super() in a Python class hierarchy with inheritance. The example demonstrates how to call a method in a parent class without explicitly naming the parent class, making the code more maintainable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
class C(B):
    def method(self, arg):
        super().method(arg)    # This does the same thing as:
                               # super(C, self).method(arg)
```

----------------------------------------

TITLE: Checking File Extensions with endswith()
DESCRIPTION: Shows how to use the new tuple support in str.endswith() to check multiple file extensions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
def is_image_file (filename):
    return filename.endswith(('.gif', '.jpg', '.tiff'))
```

----------------------------------------

TITLE: Property Decorator Enhancements
DESCRIPTION: Shows the new getter, setter and deleter decorators for properties that provide shortcuts for modifying existing properties.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
class C(object):
    @property
    def x(self):
        return self._x

    @x.setter
    def x(self, value):
        self._x = value

    @x.deleter
    def x(self):
        del self._x

class D(C):
    @C.x.getter
    def x(self):
        return self._x * 2

    @x.setter
    def x(self, value):
        self._x = value / 2
```

----------------------------------------

TITLE: Defining a Simple Class in Python
DESCRIPTION: This snippet demonstrates a basic class definition in Python, which inherits from the base class `object` if no other inheritance is specified. The example also explains that the class suite is executed in a new namespace.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
class Foo: pass
```

LANGUAGE: python
CODE:
```
class Foo(object): pass
```

----------------------------------------

TITLE: Using functools.wraps to Introspect Functions in Python
DESCRIPTION: The functools.wraps decorator has been enhanced to add a __wrapped__ attribute allowing for introspection of the original callable. This enables retrieval of metadata like annotations and uncached original function. It gracefully handles absent attributes such as __doc__.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
>>> get_phone_number = get_phone_number.__wrapped__    # uncached function
```

----------------------------------------

TITLE: Catching Exceptions in Python 3
DESCRIPTION: Shows the updated syntax for catching exceptions in Python 3, using 'as' instead of a comma to assign the exception to a variable. The variable is explicitly deleted when leaving the except block.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.0.rst#2025-04-23_snippet_8

LANGUAGE: Python
CODE:
```
except SomeException as variable:
```

----------------------------------------

TITLE: Python Argument Forwarding Pattern
DESCRIPTION: Shows how to collect and forward both positional and keyword arguments from one function to another using *args and **kwargs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
def f(x, *args, **kwargs):
    ...
    kwargs['width'] = '14.3c'
    ...
    g(x, *args, **kwargs)
```

----------------------------------------

TITLE: Setting Logging Level from Command Line in Python
DESCRIPTION: This snippet provides a method to dynamically set the logging level from a command-line option using Python's logging module. It converts the log level to upper case for consistency and checks if it is a valid logging level, raising an error if it's not.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
# assuming loglevel is bound to the string value obtained from the
# command line argument. Convert to upper case to allow the user to
# specify --log=DEBUG or --log=debug
numeric_level = getattr(logging, loglevel.upper(), None)
if not isinstance(numeric_level, int):
    raise ValueError('Invalid log level: %s' % loglevel)
logging.basicConfig(level=numeric_level, ...)
```

----------------------------------------

TITLE: Exploring Python List Methods in Interactive Interpreter
DESCRIPTION: This code demonstrates how to use Python's interactive interpreter to explore list methods. It shows creating an empty list, listing all available methods, filtering for non-special methods, viewing help documentation for a specific method, and appending an item to the list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/general.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> L = []
>>> dir(L) # doctest: +NORMALIZE_WHITESPACE
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__',
'__dir__', '__doc__', '__eq__', '__format__', '__ge__',
'__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__',
'__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__',
'__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__',
'__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__',
'__sizeof__', '__str__', '__subclasshook__', 'append', 'clear',
'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove',
'reverse', 'sort']
>>> [d for d in dir(L) if '__' not in d]
['append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']

>>> help(L.append)
Help on built-in function append:
<BLANKLINE>
append(...)
    L.append(object) -> None -- append object to end
<BLANKLINE>
>>> L.append(1)
>>> L
[1]
```

----------------------------------------

TITLE: Deprecated Methods in datetime (Python)
DESCRIPTION: The datetime methods utcnow() and utcfromtimestamp() are deprecated. The recommended approach is to use datetime.datetime.now(tz=datetime.UTC) and datetime.datetime.fromtimestamp(timestamp, tz=datetime.UTC) respectively, utilizing the timezone-aware datetime.UTC object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/deprecations/pending-removal-in-future.rst#_snippet_5

LANGUAGE: Python
CODE:
```
datetime.datetime.utcnow
```

LANGUAGE: Python
CODE:
```
datetime.datetime.utcfromtimestamp
```

----------------------------------------

TITLE: Basic Usage of str.format() Method in Python
DESCRIPTION: Shows basic usage of the str.format() method with both positional and keyword arguments. This method allows formatting strings by replacing field markers {} with provided values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/inputoutput.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> print('We are the {} who say "{}!"'.format('knights', 'Ni'))
We are the knights who say "Ni!"

>>> print('{0} and {1}'.format('spam', 'eggs'))
spam and eggs
>>> print('{1} and {0}'.format('spam', 'eggs'))
eggs and spam

>>> print('This {food} is {adjective}.'.format(
...       food='spam', adjective='absolutely horrible'))
This spam is absolutely horrible.

>>> print('The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',
...                                                    other='Georg'))
The story of Bill, Manfred, and Georg.
```

----------------------------------------

TITLE: Creating Dictionaries in Python
DESCRIPTION: Shows multiple ways to create dictionaries that are functionally equivalent. These examples demonstrate dictionary creation using keyword arguments, braces with key-value pairs, the zip function, list of tuples, and dictionary transformation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_90

LANGUAGE: python
CODE:
```
>>> a = dict(one=1, two=2, three=3)
>>> b = {'one': 1, 'two': 2, 'three': 3}
>>> c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))
>>> d = dict([('two', 2), ('one', 1), ('three', 3)])
>>> e = dict({'three': 3, 'one': 1, 'two': 2})
>>> f = dict({'one': 1, 'three': 3}, two=2)
>>> a == b == c == d == e == f
True
```

----------------------------------------

TITLE: Using String Split Method in Python
DESCRIPTION: Shows the string split() method which divides a string into substrings based on a separator, complementing the explanation of why join() is a string method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/design.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
"1, 2, 4, 8, 16".split(", ")
```

----------------------------------------

TITLE: Setting Up Logger Instances in Python
DESCRIPTION: This snippet outlines how to create a logger instance that adheres to the module namespace. This is useful for tracking messages based on their origin within the application structure. The logger uses the module's name to provide intuitive logging.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
logger = logging.getLogger(__name__)
```

----------------------------------------

TITLE: Parsing Time String Using strptime in Python
DESCRIPTION: Shows how to use the strptime function to parse a string representing a time according to a specific format. The function returns a struct_time object containing the parsed time components.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/time.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
>>> import time
>>> time.strptime("30 Nov 00", "%d %b %y")   # doctest: +NORMALIZE_WHITESPACE
time.struct_time(tm_year=2000, tm_mon=11, tm_mday=30, tm_hour=0, tm_min=0,
                 tm_sec=0, tm_wday=3, tm_yday=335, tm_isdst=-1)
```

----------------------------------------

TITLE: Configuring Logging Programmatically in Python
DESCRIPTION: This code snippet demonstrates how to configure logging programmatically using the Python logging module. It creates a logger, a console handler, and a formatter, then adds the handler to the logger and logs messages at different severity levels.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
import logging

# create logger
logger = logging.getLogger('simple_example')
logger.setLevel(logging.DEBUG)

# create console handler and set level to debug
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)

# create formatter
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# add formatter to ch
ch.setFormatter(formatter)

# add ch to logger
logger.addHandler(ch)

# 'application' code
logger.debug('debug message')
logger.info('info message')
logger.warning('warn message')
logger.error('error message')
logger.critical('critical message')
```

----------------------------------------

TITLE: Implementing Asynchronous Test Case with IsolatedAsyncioTestCase
DESCRIPTION: Example demonstrating the lifecycle and order of execution for an async test case using IsolatedAsyncioTestCase. Shows setup, test, cleanup and teardown methods in proper sequence.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_36

LANGUAGE: python
CODE:
```
from unittest import IsolatedAsyncioTestCase

events = []

class Test(IsolatedAsyncioTestCase):

    def setUp(self):
        events.append("setUp")

    async def asyncSetUp(self):
        self._async_connection = await AsyncConnection()
        events.append("asyncSetUp")

    async def test_response(self):
        events.append("test_response")
        response = await self._async_connection.get("https://example.com")
        self.assertEqual(response.status_code, 200)
        self.addAsyncCleanup(self.on_cleanup)

    def tearDown(self):
        events.append("tearDown")

    async def asyncTearDown(self):
        await self._async_connection.close()
        events.append("asyncTearDown")

    async def on_cleanup(self):
        events.append("cleanup")

if __name__ == "__main__":
    unittest.main()
```

----------------------------------------

TITLE: Waiting for Child Process Completion in Python
DESCRIPTION: The wait() function waits for the completion of a child process and returns a tuple containing its pid and exit status. It raises ChildProcessError if there are no children to wait for.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_75

LANGUAGE: python
CODE:
```
def wait():
    # Function implementation
```

----------------------------------------

TITLE: Reading GZIP File Python
DESCRIPTION: Shows how to open and read the entire content of a gzip-compressed file specified by a path. It uses the `gzip.open` function in binary read mode ('rb') and a `with` statement for automatic file closing. The read content is stored in `file_content`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/gzip.rst#_snippet_0

LANGUAGE: Python
CODE:
```
import gzip
with gzip.open('/home/joe/file.txt.gz', 'rb') as f:
    file_content = f.read()
```

----------------------------------------

TITLE: Basic logging usage example in Python application
DESCRIPTION: Demonstrates idiomatic logging usage with two Python files: a main application (myapp.py) that configures logging and calls a library function, and a library module (mylib.py) that performs logging using a module-level logger.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
# myapp.py
import logging
import mylib
logger = logging.getLogger(__name__)

def main():
    logging.basicConfig(filename='myapp.log', level=logging.INFO)
    logger.info('Started')
    mylib.do_something()
    logger.info('Finished')

if __name__ == '__main__':
    main()
```

LANGUAGE: python
CODE:
```
# mylib.py
import logging
logger = logging.getLogger(__name__)

def do_something():
    logger.info('Doing something')
```

----------------------------------------

TITLE: Safe Main Module Import Pattern for Multiprocessing
DESCRIPTION: Demonstrates the correct pattern for protecting the entry point of a multiprocessing program using spawn or forkserver start methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_48

LANGUAGE: python
CODE:
```
from multiprocessing import Process

def foo():
    print('hello')

p = Process(target=foo)
p.start()
```

LANGUAGE: python
CODE:
```
from multiprocessing import Process, freeze_support, set_start_method

def foo():
    print('hello')

if __name__ == '__main__':
    freeze_support()
    set_start_method('spawn')
    p = Process(target=foo)
    p.start()
```

----------------------------------------

TITLE: Computing SHA-256 Digest in Python
DESCRIPTION: This example demonstrates how to compute a SHA-256 digest in Python using the hashlib module. Dependencies include the hashlib module. The code shows how to update a hash object with data and retrieve the digest as both raw bytes and a hexadecimal string.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/hashlib.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> import hashlib
>>> m = hashlib.sha256()
>>> m.update(b"Nobody inspects")
>>> m.update(b" the spammish repetition")
>>> m.digest()
b'\x03\x1e\xdd}Ae\x15\x93\xc5\xfe\\\x00o\xa5u+7\xfd\xdf\xf7\xbcN\x84:\xa6\xaf\x0c\x95\x0fK\x94\x06'
>>> m.hexdigest()
'031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406'
```

----------------------------------------

TITLE: Basic Argument Parsing with Short Options in Python
DESCRIPTION: Demonstrates adding a verbose flag with short and long options using argparse, enabling command-line verbosity control
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/argparse.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("-v", "--verbose", help="increase output verbosity",
                   action="store_true")
args = parser.parse_args()
if args.verbose:
    print("verbosity turned on")
```

----------------------------------------

TITLE: Generator Expressions Usage Examples
DESCRIPTION: Demonstrates the use of generator expressions as memory-efficient alternatives to list comprehensions for processing large data sets.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
links = [link for link in get_all_links() if not link.followed]
for link in links:
    ...

for link in get_all_links():
    if link.followed:
        continue
    ...

links = (link for link in get_all_links() if not link.followed)
for link in links:
    ...

print sum(obj.count for obj in list_all_objects())
```

----------------------------------------

TITLE: Patching Methods with MagicMock in Python
DESCRIPTION: Demonstrates how to replace a method on an object with a MagicMock to verify it's called with the correct arguments. This snippet shows creating a mock for a method and then verifying the call arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
real = SomeClass()
real.method = MagicMock(name='method')
real.method(3, 4, 5, key='value')
```

----------------------------------------

TITLE: Higher-Order Function Implementation in Python
DESCRIPTION: Demonstrates creating higher-order functions using nested scopes and callable objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_25

LANGUAGE: python
CODE:
```
def linear(a, b):
    def result(x):
        return a * x + b
    return result
```

----------------------------------------

TITLE: Demonstrating Floating-Point Equality Comparison Issues in Python
DESCRIPTION: Shows why direct equality comparisons with floating-point numbers can fail due to representation errors in binary arithmetic.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/floatingpoint.rst#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> 0.1 + 0.1 + 0.1 == 0.3
False
```

----------------------------------------

TITLE: Initializing Mock Backend with Chained Configuration
DESCRIPTION: Demonstrates creating a complex mock backend with nested configuration and chained method calls using Python's mock library
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
>>> mock_response = Mock(spec=open)
>>> mock_backend = Mock()
>>> config = {'get_endpoint.return_value.create_call.return_value.start_call.return_value': mock_response}
>>> mock_backend.configure_mock(**config)
```

----------------------------------------

TITLE: Using assertRaises as a Context Manager in Python
DESCRIPTION: Demonstrates how to use the assertRaises method as a context manager to test exception handling. The code shows how to verify that specific exceptions are raised during execution and how to access the exception object for further validation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
with self.assertRaises(SomeException):
    do_something()
```

LANGUAGE: python
CODE:
```
with self.assertRaises(SomeException) as cm:
    do_something()

the_exception = cm.exception
self.assertEqual(the_exception.error_code, 3)
```

----------------------------------------

TITLE: Using Try-Finally for Resource Management in Python
DESCRIPTION: Demonstrates the `try...finally` pattern in Python to ensure a resource, such as a database connection, is always closed after use, regardless of whether exceptions occur within the guarded block.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/threading.rst#_snippet_5

LANGUAGE: python
CODE:
```
conn = connectdb()
try:
    # ... use connection ...
finally:
    conn.close()
```

----------------------------------------

TITLE: Text File Operations Example
DESCRIPTION: Demonstrates reading and writing text content to files
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_36

LANGUAGE: python
CODE:
```
>>> p = Path('my_text_file')
>>> p.write_text('Text file contents')
18
>>> p.read_text()
'Text file contents'
```

----------------------------------------

TITLE: Implementing setUpModule and tearDownModule in Python unittest
DESCRIPTION: Shows how to implement module-level setup and teardown functions for unittest. These functions are used to create and close connections or other resources shared across all tests in a module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_45

LANGUAGE: python
CODE:
```
def setUpModule():
    createConnection()

def tearDownModule():
    closeConnection()
```

----------------------------------------

TITLE: Using the New breakpoint() Function in Python 3.7
DESCRIPTION: The new built-in breakpoint() function provides an easy way to enter the Python debugger. By default, it imports pdb and calls pdb.set_trace(), but this behavior can be customized by binding sys.breakpointhook() to a different function or setting the PYTHONBREAKPOINT environment variable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
breakpoint()  # This will pause execution and enter the debugger
```

----------------------------------------

TITLE: Implementing Dual-Stack Echo Server Python
DESCRIPTION: This snippet shows a more robust TCP/IP echo server supporting both IPv4 and IPv6 using `socket.getaddrinfo`. It iterates through the address information returned for the host and port, attempting to create, bind, and listen on a socket for each address family until successful. It handles potential `OSError` exceptions during socket creation or binding.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/socket.rst#_snippet_10

LANGUAGE: Python
CODE:
```
# Echo server program
import socket
import sys

HOST = None               # Symbolic name meaning all available interfaces
PORT = 50007              # Arbitrary non-privileged port
s = None
for res in socket.getaddrinfo(HOST, PORT, socket.AF_UNSPEC,
                                 socket.SOCK_STREAM, 0, socket.AI_PASSIVE):
    af, socktype, proto, canonname, sa = res
    try:
        s = socket.socket(af, socktype, proto)
    except OSError as msg:
        s = None
        continue
    try:
        s.bind(sa)
        s.listen(1)
    except OSError as msg:
        s.close()
        s = None
        continue
    break
if s is None:
    print('could not open socket')
    sys.exit(1)
conn, addr = s.accept()
with conn:
    print('Connected by', addr)
    while True:
        data = conn.recv(1024)
        if not data: break
        conn.send(data)
```

----------------------------------------

TITLE: Using the datetime Module for Date and Time Operations in Python
DESCRIPTION: Shows how to create and manipulate datetime objects in Python. Examples include creating timestamps, formatting dates, and modifying datetime components using the replace method. This demonstrates the core functionality of the datetime module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.3.rst#2025-04-21_snippet_36

LANGUAGE: python
CODE:
```
>>> import datetime
>>> now = datetime.datetime.now()
>>> now.isoformat()
'2002-12-30T21:27:03.994956'
>>> now.ctime()  # Only available on date, datetime
'Mon Dec 30 21:27:03 2002'
>>> now.strftime('%Y %d %b')
'2002 30 Dec'
```

LANGUAGE: python
CODE:
```
>>> d = datetime.datetime.now()
>>> d
datetime.datetime(2002, 12, 30, 22, 15, 38, 827738)
>>> d.replace(year=2001, hour = 12)
datetime.datetime(2001, 12, 30, 12, 15, 38, 827738)
>>>
```

----------------------------------------

TITLE: Grouping Key-Value Pairs with defaultdict
DESCRIPTION: This snippet demonstrates how to use defaultdict to group a sequence of key-value pairs into a dictionary of lists. It simplifies the process of appending values to lists associated with keys.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
>>> s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
>>> d = defaultdict(list)
>>> for k, v in s:
...     d[k].append(v)
...
>>> sorted(d.items())
[('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]
```

----------------------------------------

TITLE: Exiting Python Interpreter with sys.exit()
DESCRIPTION: The sys.exit() function raises a SystemExit exception to exit the Python interpreter. It can take an optional argument to specify the exit status or error message.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sys.rst#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
sys.exit([arg])
```

----------------------------------------

TITLE: Creating Separate Mutable Objects in Python
DESCRIPTION: Demonstrates creating two distinct empty list objects and assigning them to variables 'c' and 'd'. Because lists are mutable types, each '[]' literal guarantees the creation of a new, unique object in memory, ensuring 'c' and 'd' always refer to different list objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_1

LANGUAGE: Python
CODE:
```
c = []; d = []
```

----------------------------------------

TITLE: Creating a Virtual Environment on Windows using venv in Python
DESCRIPTION: This PowerShell command creates a new virtual environment at the specified path on Windows using Python's venv module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/venv.rst#2025-04-21_snippet_1

LANGUAGE: powershell
CODE:
```
PS> python -m venv C:\path\to\new\virtual\environment
```

----------------------------------------

TITLE: Basic Exception Re-raising in Python
DESCRIPTION: Demonstrates how to re-raise an exception after catching it, useful when you need to examine but not handle an exception.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/errors.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
try:
    raise NameError('HiThere')
except NameError:
    print('An exception flew by!')
    raise
```

----------------------------------------

TITLE: Set Breakpoint Using breakpoint()
DESCRIPTION: Inserts a breakpoint at the specified location. Available since Python 3.7, this built-in function provides a cleaner alternative to `import pdb; pdb.set_trace()` for entering the debugger.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_1

LANGUAGE: Python
CODE:
```
breakpoint()
```

----------------------------------------

TITLE: Sorting Dictionary Keys in Python
DESCRIPTION: Demonstrates how to iterate over dictionary keys in sorted order using the built-in sorted() function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/design.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
for key in sorted(mydict):
    ...  # do whatever with mydict[key]...
```

----------------------------------------

TITLE: Raising Exceptions and Suppressing Chaining (Python)
DESCRIPTION: This snippet demonstrates how to explicitly suppress exception chaining in Python using the `raise ... from None` syntax. Although a `ZeroDivisionError` occurs and is caught, raising a new `RuntimeError` with `from None` prevents the original exception from being linked or displayed in the traceback. This is useful when the original exception is irrelevant to the cause of the new one.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/simple_stmts.rst#_snippet_8

LANGUAGE: python
CODE:
```
try:
    print(1 / 0)
except:
    raise RuntimeError("Something bad happened") from None
```

----------------------------------------

TITLE: Case-Insensitive String Sorting
DESCRIPTION: Shows how to perform case-insensitive string sorting using the key parameter with str.casefold function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/sorting.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> sorted("This is a test string from Andrew".split(), key=str.casefold)
['a', 'Andrew', 'from', 'is', 'string', 'test', 'This']
```

----------------------------------------

TITLE: Using a Generator Function in Python
DESCRIPTION: This example demonstrates how to use the reverse generator function to iterate over a string in reverse order.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/classes.rst#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
>>> for char in reverse('golf'):
...     print(char)
...
f
l
o
g
```

----------------------------------------

TITLE: Importing Module by Name (char*) in C
DESCRIPTION: This function imports a module given its name as a C string. It's a wrapper around PyImport_Import that accepts a const char * argument.  The function returns a new reference to the imported module or NULL on failure, setting an exception.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/import.rst#2025-04-21_snippet_0

LANGUAGE: c
CODE:
```
"PyObject* PyImport_ImportModule(const char *name)"
```

----------------------------------------

TITLE: Defining Positional-Only Parameters in Python Functions
DESCRIPTION: This snippet introduces the new parameter syntax '/' to define positional-only parameters in a function, which improves clarity and prevents misuse of parameters as keyword arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
def f(a, b, /, c, d, *, e, f):
    print(a, b, c, d, e, f)
```

----------------------------------------

TITLE: Accessing Environment Variables in Python
DESCRIPTION: Example showing how to use os.environ to access environment variables. The HOME environment variable is accessed as a dictionary key.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
environ['HOME']
```

----------------------------------------

TITLE: Pattern Matching with Classes in Python
DESCRIPTION: This example demonstrates how to use pattern matching with custom classes, capturing class attributes into variables and handling different cases.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
class Point:
    x: int
    y: int

def location(point):
    match point:
        case Point(x=0, y=0):
            print("Origin is the point's location.")
        case Point(x=0, y=y):
            print(f"Y={y} and the point is on the y-axis.")
        case Point(x=x, y=0):
            print(f"X={x} and the point is on the x-axis.")
        case Point():
            print("The point is located somewhere else on the plane.")
        case _:
            print("Not a point")
```

----------------------------------------

TITLE: Executing Shell Command with Popen in Python
DESCRIPTION: This snippet illustrates how Popen executes a shell command when shell=True is specified. It shows the equivalent command that Popen constructs internally when given a sequence of arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/subprocess.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
Popen(['/bin/sh', '-c', args[0], args[1], ...])
```

----------------------------------------

TITLE: Creating a Table in SQLite using Python
DESCRIPTION: Executes a SQL statement to create a new table named 'movie' with columns for title, year, and score. This demonstrates basic table creation in SQLite.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
cur.execute("CREATE TABLE movie(title, year, score)")
```

----------------------------------------

TITLE: Writing to a CSV File - Python
DESCRIPTION: This snippet illustrates how to write multiple rows to a CSV file named 'some.csv' using Python's csv module. The writer writes rows from an iterable directly into the file.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/csv.rst#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
import csv
with open('some.csv', 'w', newline='') as f:
    writer = csv.writer(f)
    writer.writerows(someiterable)
```

----------------------------------------

TITLE: Setting up Python Virtual Environment (Shell)
DESCRIPTION: Demonstrates creating a Python virtual environment named 'example', activating it, and installing the 'wheel' package using pip within that environment. This is a common prerequisite setup for subsequent examples using `importlib.metadata` on installed packages.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_0

LANGUAGE: Shell Session
CODE:
```
$ python -m venv example
$ source example/bin/activate
(example) $ python -m pip install wheel
```

----------------------------------------

TITLE: Checking Approximate Equality of Floats in Python
DESCRIPTION: The isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0) function returns True if values a and b are close to each other, False otherwise. Closeness is determined by relative and absolute tolerances. rel_tol is the maximum allowed difference relative to the larger absolute value of a or b. abs_tol is the minimum absolute tolerance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/math.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0)
```

----------------------------------------

TITLE: Calling a Python Function with Keyword Arguments from C
DESCRIPTION: Shows how to call a Python function with keyword arguments from C using PyObject_Call and Py_BuildValue.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/extending.rst#2025-04-21_snippet_13

LANGUAGE: C
CODE:
```
PyObject *dict;
...
dict = Py_BuildValue("{s:i}", "name", val);
result = PyObject_Call(my_callback, NULL, dict);
Py_DECREF(dict);
if (result == NULL)
    return NULL; /* Pass error back */
/* Here maybe use the result */
Py_DECREF(result);
```

----------------------------------------

TITLE: Using NewType in Function Signature in Python
DESCRIPTION: Shows how a function signature can require a `NewType`, allowing static analysis to enforce that the correct type is passed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_6

LANGUAGE: Python
CODE:
```
def get_user_name(user_id: UserId) -> str:
    ...
```

----------------------------------------

TITLE: Date Formatting and Calendar Operations
DESCRIPTION: Demonstrates various date formatting methods and calendar-related operations including ISO format, custom strftime formats, and calendar component extraction.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
>>> from datetime import date
>>> d = date.fromordinal(730920) # 730920th day after 1. 1. 0001
>>> d
datetime.date(2002, 3, 11)

>>> # Methods related to formatting string output
>>> d.isoformat()
'2002-03-11'
>>> d.strftime("%d/%m/%y")
'11/03/02'
>>> d.strftime("%A %d. %B %Y")
'Monday 11. March 2002'
>>> d.ctime()
'Mon Mar 11 00:00:00 2002'
>>> 'The {1} is {0:%d}, the {2} is {0:%B}.'.format(d, "day", "month")
'The day is 11, the month is March.'

>>> # Methods for to extracting 'components' under different calendars
>>> t = d.timetuple()
>>> for i in t:     # doctest: +SKIP
...     print(i)
2002                # year
3                   # month
11                  # day
0
0
0
0                   # weekday (0 = Monday)
70                  # 70th day in the year
-1
>>> ic = d.isocalendar()
>>> for i in ic:    # doctest: +SKIP
...     print(i)
2002                # ISO year
11                  # ISO week number
1                   # ISO day number ( 1 = Monday )

>>> # A date object is immutable; all operations produce a new object
>>> d.replace(year=2005)
datetime.date(2005, 3, 11)
```

----------------------------------------

TITLE: Deep Copy Function Usage - Python
DESCRIPTION: Creates a deep copy of an object, recursively copying all nested objects. Includes an optional memo parameter to handle recursive structures.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/copy.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
deepcopy(obj[, memo])
```

----------------------------------------

TITLE: Simple Pattern Matching with HTTP Status Codes in Python
DESCRIPTION: This function demonstrates basic pattern matching in Python using HTTP status codes. It shows how to match against literal values and use a wildcard case.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
def http_error(status):
    match status:
        case 400:
            return "Bad request"
        case 404:
            return "Not found"
        case 418:
            return "I'm a teapot"
        case _:
            return "Something's wrong with the internet"
```

----------------------------------------

TITLE: Caseless String Comparison with Unicode Normalization in Python
DESCRIPTION: This snippet demonstrates how to perform a caseless comparison of Unicode strings using normalization and the `casefold` method.  It defines a function `compare_caseless` that normalizes the strings using 'NFD', applies `casefold` for case-insensitive comparison, and normalizes again, ensuring that strings with equivalent characters are considered equal regardless of case or representation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/unicode.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
import unicodedata

def compare_caseless(s1, s2):
    def NFD(s):
        return unicodedata.normalize('NFD', s)

    return NFD(NFD(s1).casefold()) == NFD(NFD(s2).casefold())

# Example usage
single_char = 'ê'
multiple_chars = '\N{LATIN CAPITAL LETTER E}\N{COMBINING CIRCUMFLEX ACCENT}'

print(compare_caseless(single_char, multiple_chars))
```

----------------------------------------

TITLE: Making a POST Request with Data using urllib.request
DESCRIPTION: This example demonstrates how to make a POST request to a URL with data encoded using urllib.parse.urlencode. The encoded data is converted to bytes using ascii encoding and passed as the data argument to urlopen.  The response content is read and decoded as UTF-8.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_50

LANGUAGE: python
CODE:
```
>>> import urllib.request
>>> import urllib.parse
>>> data = urllib.parse.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})
>>> data = data.encode('ascii')
>>> with urllib.request.urlopen("http://requestb.in/xrbl82xr", data) as f:
...     print(f.read().decode('utf-8'))
... 
```

----------------------------------------

TITLE: Acquiring a Lock in Python's Multiprocessing Module
DESCRIPTION: This method acquires a lock, either blocking or non-blocking. It supports timeout and returns True if the lock is acquired, False otherwise. The behavior differs slightly from threading.Lock.acquire.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_24

LANGUAGE: python
CODE:
```
def acquire(block=True, timeout=None):
    # Method implementation not shown in the original text
```

----------------------------------------

TITLE: Generated __init__ Method with Default Value (Python)
DESCRIPTION: This snippet shows the generated __init__ method for the class C defined above. The parameter 'b' has a default value of 0, making it an optional parameter in the constructor. This demonstrates how default values in field declarations affect the generated __init__ method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dataclasses.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
"def __init__(self, a: int, b: int = 0):"
```

----------------------------------------

TITLE: Type Checking with Collections ABC
DESCRIPTION: Example showing how to use isinstance() to check if an object implements the Sized interface before calling len()
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.abc.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
size = None
if isinstance(myvar, collections.abc.Sized):
    size = len(myvar)
```

----------------------------------------

TITLE: Handling HTTP Connection Errors in Python
DESCRIPTION: Shows how to handle RemoteDisconnected exceptions when making HTTP requests using http.client. Demonstrates retrying the request up to 3 times on disconnect errors.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
import http.client
conn = http.client.HTTPConnection('www.python.org')
for retries in range(3):
    try:
        conn.request('GET', '/')
        resp = conn.getresponse()
    except http.client.RemoteDisconnected:
        pass
```

----------------------------------------

TITLE: Using 'store_const' action in argparse Python
DESCRIPTION: Shows how to use the `action='store_const'` attribute to store a constant value (`const`) when the argument is encountered, commonly used for flags.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_31

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo', action='store_const', const=42)
>>> parser.parse_args(['--foo'])
Namespace(foo=42)
```

----------------------------------------

TITLE: Literal Type Example in typing Module
DESCRIPTION: This snippet shows the new Literal type (PEP 586) from the typing module, which constrains a parameter or return value to one or more specific literal values rather than a general type.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
def get_status(port: int) -> Literal['connected', 'disconnected']:
    ...
```

----------------------------------------

TITLE: File Wildcard Searching with glob Module in Python
DESCRIPTION: Shows how to use the glob module to find files matching a pattern in a directory.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> import glob
>>> glob.glob('*.py')
['primes.py', 'random.py', 'quote.py']
```

----------------------------------------

TITLE: Using Value Conversion in f-strings
DESCRIPTION: Demonstrates f-string modifiers for value conversion: '!a' for ascii(), '!s' for str(), and '!r' for repr(). Also shows the self-documenting '=' specifier for debugging.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/inputoutput.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> animals = 'eels'
>>> print(f'My hovercraft is full of {animals}.')
My hovercraft is full of eels.
>>> print(f'My hovercraft is full of {animals!r}.')
My hovercraft is full of 'eels'.

>>> bugs = 'roaches'
>>> count = 13
>>> area = 'living room'
>>> print(f'Debugging {bugs=} {count=} {area=}')
Debugging bugs='roaches' count=13 area='living room'
```

----------------------------------------

TITLE: Python Source Encoding Declaration
DESCRIPTION: Example of declaring source file encoding in Python using a special comment line.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/interpreter.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
# -*- coding: encoding -*-
```

----------------------------------------

TITLE: Logging Exception in Python
DESCRIPTION: This snippet demonstrates how to log exceptions using Python's logging library. It records the traceback of exceptions thrown within a try-except block using the `logging.exception()` function. No special dependencies are required apart from the inclusion of the logging module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.3.rst#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
def f():
    try:    1/0
    except: logging.exception('Problem recorded')

f()
```

----------------------------------------

TITLE: Extending JSONEncoder Class in Python
DESCRIPTION: Shows how to create a custom JSONEncoder subclass to handle special Python types (complex numbers) by overriding the default method and implementing custom serialization logic.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/json.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
>>> import json
>>> class ComplexEncoder(json.JSONEncoder):
...     def default(self, obj):
...         if isinstance(obj, complex):
...             return [obj.real, obj.imag]
...         # Let the base class default method raise the TypeError
...         return super().default(obj)
...
>>> json.dumps(2 + 1j, cls=ComplexEncoder)
'[2.0, 1.0]'
>>> ComplexEncoder().encode(2 + 1j)
'[2.0, 1.0]'
>>> list(ComplexEncoder().iterencode(2 + 1j))
['[2.0', ', 1.0', ']']
```

----------------------------------------

TITLE: Creating and Using Parameterized Generics
DESCRIPTION: This example showcases the creation of a list using parameterized generics. It emphasizes that the types specified are not enforced during the creation of the object, which can lead to unexpected behaviors if types are mixed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_99

LANGUAGE: python
CODE:
```
>>> t = list[str]
>>> t([1, 2, 3])
[1, 2, 3]
```

----------------------------------------

TITLE: Mathematical Operations with math Module in Python
DESCRIPTION: Demonstrates basic mathematical operations using the math module, which provides access to C library math functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
>>> import math
>>> math.cos(math.pi / 4)
0.70710678118654757
>>> math.log(1024, 2)
10.0
```

----------------------------------------

TITLE: Parsing and Formatting Datetime in Python
DESCRIPTION: Demonstrates the use of strptime to parse a date string and strftime to format a datetime object. This example shows how to convert between different date formats using these methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_29

LANGUAGE: python
CODE:
```
>>> datetime.strptime('31/01/22 23:59:59.999999',
...                   '%d/%m/%y %H:%M:%S.%f')
datetime.datetime(2022, 1, 31, 23, 59, 59, 999999)
>>> _.strftime('%a %d %b %Y, %I:%M%p')
'Mon 31 Jan 2022, 11:59PM'
```

----------------------------------------

TITLE: Implementing variable annotations syntax in Python
DESCRIPTION: Implements PEP 526 to add syntax support for variable annotations, allowing type hints to be specified for variables.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.6.0b1.rst#2025-04-21_snippet_2



----------------------------------------

TITLE: Timeit with Globals - Python
DESCRIPTION: Demonstrates using timeit with globals() to access multiple custom functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/timeit.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
def f(x):
    return x**2
def g(x):
    return x**4
def h(x):
    return x**8

import timeit
print(timeit.timeit('[func(42) for func in (f,g,h)]', globals=globals()))
```

----------------------------------------

TITLE: Changing Path Stem in Python using PurePath.with_stem()
DESCRIPTION: Shows how to use the with_stem() method to create a new path with a changed stem. It also demonstrates error handling for paths without a name.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
>>> p = PureWindowsPath('c:/Downloads/draft.txt')
>>> p.with_stem('final')
PureWindowsPath('c:/Downloads/final.txt')
>>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')
>>> p.with_stem('lib')
PureWindowsPath('c:/Downloads/lib.gz')
>>> p = PureWindowsPath('c:/')
>>> p.with_stem('')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/antoine/cpython/default/Lib/pathlib.py", line 861, in with_stem
    return self.with_name(stem + self.suffix)
  File "/home/antoine/cpython/default/Lib/pathlib.py", line 851, in with_name
    raise ValueError("%r has an empty name" % (self,))
ValueError: PureWindowsPath('c:/') has an empty name
```

----------------------------------------

TITLE: Deprecating os.fork() in Multithreaded Processes in Python
DESCRIPTION: Calling os.fork() from a multithreaded process on POSIX platforms now raises a DeprecationWarning due to fundamental incompatibility. This usage has always been problematic, and the warning is added to increase awareness. Consider using 'spawn' or 'forkserver' start methods with multiprocessing or concurrent.futures.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_27

LANGUAGE: Python
CODE:
```
os.fork()
```

----------------------------------------

TITLE: Defining Generic Type Alias (Python)
DESCRIPTION: Shows how to define a user-defined generic type alias using the `type` keyword, representing a union of a generic type (`Iterable[S]`) and a non-generic type (`int`), and how to use it as a return type hint.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_36

LANGUAGE: Python
CODE:
```
from collections.abc import Iterable

type Response[S] = Iterable[S] | int

# Return type here is same as Iterable[str] | int
def response(query: str) -> Response[str]:
    ...
```

----------------------------------------

TITLE: Reversing Sequences with Extended Slices
DESCRIPTION: Demonstrates how to use a negative stride in extended slice syntax to create a reversed copy of a sequence, showing examples with both lists and strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.3.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
>>> L[::-1]
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]

>>> s='abcd'
>>> s[::2]
'ac'
>>> s[::-1]
'dcba'
```

----------------------------------------

TITLE: Using NewType for Distinct Types in Python
DESCRIPTION: Shows how to declare a `NewType` based on an existing type (like `int`). `NewType` creates a distinct type for type checkers but behaves like the base type at runtime.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_141

LANGUAGE: python
CODE:
```
UserId = NewType('UserId', int)  # Declare the NewType "UserId"
first_user = UserId(1)  # "UserId" returns the argument unchanged at runtime
```

----------------------------------------

TITLE: Changing Log Message Format in Python
DESCRIPTION: This snippet configures the logging format to display log messages with specific severity and message details. By adjusting the format string and logging level, developers can customize the output of logging messages for better clarity and usefulness.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
import logging
logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)
logging.debug('This message should appear on the console')
logging.info('So should this')
logging.warning('And this, too')
```

----------------------------------------

TITLE: Logging Configuration with Custom Handler in Python
DESCRIPTION: This snippet shows a logging configuration dictionary that uses the `owned_file_handler` to create a file handler. It specifies the handler using the `()` key, passing the handler function. Other keys are used as keyword arguments for the handler function (owner, filename, mode, encoding). The logging configuration demonstrates how to customize handler creation using dictConfig.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_41

LANGUAGE: python
CODE:
```
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            'format': '%(asctime)s %(levelname)s %(name)s %(message)s'
        },
    },
    'handlers': {
        'file':{
            # The values below are popped from this dictionary and
            # used to create the handler, set the handler's level and
            # its formatter.
            '()': owned_file_handler,
            'level':'DEBUG',
            'formatter': 'default',
            # The values below are passed to the handler creator callable
            # as keyword arguments.
            'owner': ['pulse', 'pulse'],
            'filename': 'chowntest.log',
            'mode': 'w',
            'encoding': 'utf-8',
        },
    },
    'root': {
        'handlers': ['file'],
        'level': 'DEBUG',
    }
}
```

----------------------------------------

TITLE: Stream-based TCP Request Handler Implementation in Python
DESCRIPTION: A TCP request handler class that uses file-like stream objects for communication. Handles incoming data using readline() and responds with uppercase version of received data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/socketserver.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
class MyTCPHandler(socketserver.StreamRequestHandler):

    def handle(self):
        # self.rfile is a file-like object created by the handler.
        # We can now use e.g. readline() instead of raw recv() calls.
        # We limit ourselves to 10000 bytes to avoid abuse by the sender.
        self.data = self.rfile.readline(10000).rstrip()
        print(f"{self.client_address[0]} wrote:")
        print(self.data.decode("utf-8"))
        # Likewise, self.wfile is a file-like object used to write back
        # to the client
        self.wfile.write(self.data.upper())
```

----------------------------------------

TITLE: Adding AsyncMock to unittest.mock in Python
DESCRIPTION: Adds AsyncMock to unittest.mock to support mocking asyncio coroutines in unit tests.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0b1.rst#2025-04-21_snippet_16

LANGUAGE: Python
CODE:
```
from unittest.mock import AsyncMock
```

----------------------------------------

TITLE: Mathematical Operations with Counter Objects in Python
DESCRIPTION: This snippet demonstrates mathematical operations between Counter objects, including addition, subtraction, intersection, union, equality, and inclusion. It also shows unary operations and how they handle zero and negative counts.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
c = Counter(a=3, b=1)
d = Counter(a=1, b=2)
c + d                       # add two counters together:  c[x] + d[x]
Counter({'a': 4, 'b': 3})
c - d                       # subtract (keeping only positive counts)
Counter({'a': 2})
c & d                       # intersection:  min(c[x], d[x])
Counter({'a': 1, 'b': 1})
c | d                       # union:  max(c[x], d[x])
Counter({'a': 3, 'b': 2})
c == d                      # equality:  c[x] == d[x]
False
c <= d                      # inclusion:  c[x] <= d[x]
False

c = Counter(a=2, b=-4)
+c
Counter({'a': 2})
-c
Counter({'b': 4})
```

----------------------------------------

TITLE: Type Union Operator Example
DESCRIPTION: Demonstrates the new type union operator syntax for expressing multiple allowed types in type hints.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
def square(number: int | float) -> int | float:
    return number ** 2
```

----------------------------------------

TITLE: Defining read-write abstract property
DESCRIPTION: This code snippet demonstrates how to define a read-write abstract property within an abstract base class (ABC) in Python. The @property decorator is used with an abstract setter (@x.setter @abstractmethod) to enforce implementation of both getter and setter in subclasses.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/abc.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
class C(ABC):
    @property
    def x(self):
        ...

    @x.setter
    @abstractmethod
    def x(self, val):
        ...

```

----------------------------------------

TITLE: Pattern Matching Error Case Example
DESCRIPTION: Demonstrates pattern matching with a tuple containing an error code. The pattern matches any tuple starting with 'error' followed by any code value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
case ('error', code, _):
    print(f"An error {code} occurred.")
```

----------------------------------------

TITLE: Defining HTTPStatus Enum in Python
DESCRIPTION: This snippet demonstrates how to use the HTTPStatus enum to access HTTP status codes and their properties, including texts and descriptions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
>>> from http import HTTPStatus
>>> HTTPStatus.OK
HTTPStatus.OK
>>> HTTPStatus.OK == 200
True
>>> HTTPStatus.OK.value
200
>>> HTTPStatus.OK.phrase
'OK'
>>> HTTPStatus.OK.description
'Request fulfilled, document follows'
>>> list(HTTPStatus)
[HTTPStatus.CONTINUE, HTTPStatus.SWITCHING_PROTOCOLS, ...]
```

----------------------------------------

TITLE: Creating and Using AsyncMock in Python
DESCRIPTION: Demonstrates creating an AsyncMock object that behaves like an async function, where the result of a call is an awaitable. Shows how to verify that an AsyncMock is recognized as a coroutine function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
>>> mock = AsyncMock()
>>> inspect.iscoroutinefunction(mock)
True
>>> inspect.isawaitable(mock())  # doctest: +SKIP
True
```

----------------------------------------

TITLE: Statistical Calculations in Python
DESCRIPTION: Demonstrates basic statistical operations using the statistics module to calculate mean, median, and variance of numeric data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
>>> import statistics
>>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]
>>> statistics.mean(data)
1.6071428571428572
>>> statistics.median(data)
1.25
>>> statistics.variance(data)
1.3720238095238095
```

----------------------------------------

TITLE: Implementing __missing__ Method in Dictionary Subclass
DESCRIPTION: Demonstrates how to implement a __missing__ method in a dictionary subclass. This example shows a Counter class that returns 0 for missing keys, allowing them to be incremented without initialization.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_91

LANGUAGE: python
CODE:
```
>>> class Counter(dict):
...     def __missing__(self, key):
...         return 0
...
>>> c = Counter()
>>> c['red']
0
>>> c['red'] += 1
>>> c['red']
1
```

----------------------------------------

TITLE: Unpacking Iterators in Python
DESCRIPTION: This example demonstrates how to unpack elements from an iterator into individual variables.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> L = [1, 2, 3]
>>> iterator = iter(L)
>>> a, b, c = iterator
>>> a, b, c
(1, 2, 3)
```

----------------------------------------

TITLE: Using zip function in Python
DESCRIPTION: Demonstrates how to use the zip function to transpose a matrix. The asterisk is used for argument unpacking.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/datastructures.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> list(zip(*matrix))
[(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]
```

----------------------------------------

TITLE: Demonstrating Python Range Object Usage
DESCRIPTION: Examples showing various ways to use the range() function in Python, including creating lists with different start, stop, and step values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
>>> list(range(10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> list(range(1, 11))
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>>> list(range(0, 30, 5))
[0, 5, 10, 15, 20, 25]
>>> list(range(0, 10, 3))
[0, 3, 6, 9]
>>> list(range(0, -10, -1))
[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
>>> list(range(0))
[]
>>> list(range(1, 0))
[]
```

----------------------------------------

TITLE: String splitlines() Example - Python
DESCRIPTION: Shows how splitlines() method breaks strings at line boundaries with optional line ending retention.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
>>> 'ab c\n\nde fg\rkl\r\n'.splitlines()
['ab c', '', 'de fg', 'kl']
>>> 'ab c\n\nde fg\rkl\r\n'.splitlines(keepends=True)
['ab c\n', '\n', 'de fg\r', 'kl\r\n']
```

----------------------------------------

TITLE: Converting Integers to Octal String in Python
DESCRIPTION: Example demonstrating different ways to convert integers to octal string representations, including using oct() function, string formatting with %, format(), and f-strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
>>> oct(8)
'0o10'
>>> oct(-56)
'-0o70'
>>> '%#o' % 10, '%o' % 10
('0o12', '12')
>>> format(10, '#o'), format(10, 'o')
('0o12', '12')
>>> f'{10:#o}', f'{10:o}'
('0o12', '12')
```

----------------------------------------

TITLE: Creating and Parsing Subcommands with argparse in Python
DESCRIPTION: This snippet demonstrates how to create a main argument parser, add subparsers using `add_subparsers`, define arguments for each subparser using `add_parser`, and then parse command-line arguments that select and pass arguments to the appropriate subparser. It shows how different argument lists result in different Namespace objects containing only the relevant arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_75

LANGUAGE: python
CODE:
```
# create the top-level parser
parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('--foo', action='store_true', help='foo help')
subparsers = parser.add_subparsers(help='subcommand help')

# create the parser for the "a" command
parser_a = subparsers.add_parser('a', help='a help')
parser_a.add_argument('bar', type=int, help='bar help')

# create the parser for the "b" command
parser_b = subparsers.add_parser('b', help='b help')
parser_b.add_argument('--baz', choices=('X', 'Y', 'Z'), help='baz help')

# parse some argument lists
parser.parse_args(['a', '12'])
parser.parse_args(['--foo', 'b', '--baz', 'Z'])
```

----------------------------------------

TITLE: Adding Description and Epilog to ArgumentParser (Python)
DESCRIPTION: Demonstrates how to add a description before the arguments and an epilog after the arguments in the help message using the `description` and `epilog` arguments during `ArgumentParser` initialization.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_6

LANGUAGE: Python
CODE:
```
parser = argparse.ArgumentParser(
    description='A foo that bars',
    epilog="And that's how you'd foo a bar")
parser.print_help()
```

----------------------------------------

TITLE: File Status Check Example
DESCRIPTION: Shows how to check file status and size using Path.stat()
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
>>> p = Path('setup.py')
>>> p.stat().st_size
956
>>> p.stat().st_mtime
1327883547.852554
```

----------------------------------------

TITLE: TCP Echo Server Using AsyncIO Streams
DESCRIPTION: A complete TCP echo server implementation using asyncio.start_server. The server listens for connections, echoes received data back to clients, and properly manages connections.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-stream.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
import asyncio

async def handle_echo(reader, writer):
    data = await reader.read(100)
    message = data.decode()
    addr = writer.get_extra_info('peername')

    print(f"Received {message!r} from {addr!r}")

    print(f"Send: {message!r}")
    writer.write(data)
    await writer.drain()

    print("Close the connection")
    writer.close()
    await writer.wait_closed()

async def main():
    server = await asyncio.start_server(
        handle_echo, '127.0.0.1', 8888)

    addrs = ', '.join(str(sock.getsockname()) for sock in server.sockets)
    print(f'Serving on {addrs}')

    async with server:
        await server.serve_forever()

asyncio.run(main())
```

----------------------------------------

TITLE: Creating sliding windows over sequences with sliding_window in Python
DESCRIPTION: Demonstrates the sliding_window function which creates a sliding window of a specified size over a sequence, returning consecutive overlapping subsequences.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_78

LANGUAGE: python
CODE:
```
>>> list(sliding_window('ABCDEFG', 1))
[('A',), ('B',), ('C',), ('D',), ('E',), ('F',), ('G',)]
>>> list(sliding_window('ABCDEFG', 2))
[('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'F'), ('F', 'G')]
>>> list(sliding_window('ABCDEFG', 3))
[('A', 'B', 'C'), ('B', 'C', 'D'), ('C', 'D', 'E'), ('D', 'E', 'F'), ('E', 'F', 'G')]
>>> list(sliding_window('ABCDEFG', 4))
[('A', 'B', 'C', 'D'), ('B', 'C', 'D', 'E'), ('C', 'D', 'E', 'F'), ('D', 'E', 'F', 'G')]
>>> list(sliding_window('ABCDEFG', 5))
[('A', 'B', 'C', 'D', 'E'), ('B', 'C', 'D', 'E', 'F'), ('C', 'D', 'E', 'F', 'G')]
>>> list(sliding_window('ABCDEFG', 6))
[('A', 'B', 'C', 'D', 'E', 'F'), ('B', 'C', 'D', 'E', 'F', 'G')]
>>> list(sliding_window('ABCDEFG', 7))
```

----------------------------------------

TITLE: Implementing IPv4 Echo Client Python
DESCRIPTION: This snippet demonstrates a minimal TCP/IP echo client using IPv4. It creates a socket, connects to a specified remote host and port, sends a message, receives data back from the server, and prints the received data. It uses `socket.AF_INET` for IPv4 and `SOCK_STREAM` for TCP. The `with` statement ensures resources are properly closed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/socket.rst#_snippet_9

LANGUAGE: Python
CODE:
```
# Echo client program
import socket

HOST = 'daring.cwi.nl'    # The remote host
PORT = 50007              # The same port as used by the server
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.connect((HOST, PORT))
    s.sendall(b'Hello, world')
    data = s.recv(1024)
print('Received', repr(data))
```

----------------------------------------

TITLE: Creating an Asynchronous Hello World Example with asyncio in Python
DESCRIPTION: This code snippet demonstrates a simple 'Hello World' using the asyncio library. It defines an asynchronous function 'main' that prints 'Hello ...', waits for 1 second with 'asyncio.sleep', and then prints '... World!'. This showcases the use of async/await syntax for concurrency.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import asyncio

async def main():
    print('Hello ...')
    await asyncio.sleep(1)
    print('... World!')

asyncio.run(main())
```

----------------------------------------

TITLE: Configuring Multiple Handlers and Formatters in Python Logging
DESCRIPTION: This snippet shows how to configure multiple handlers and formatters in Python logging. It demonstrates logging to both a file and the console with different log levels.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
import logging

logger = logging.getLogger('simple_example')
logger.setLevel(logging.DEBUG)
# create file handler which logs even debug messages
fh = logging.FileHandler('spam.log')
fh.setLevel(logging.DEBUG)
# create console handler with a higher log level
ch = logging.StreamHandler()
ch.setLevel(logging.ERROR)
# create formatter and add it to the handlers
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
ch.setFormatter(formatter)
fh.setFormatter(formatter)
# add the handlers to logger
logger.addHandler(ch)
logger.addHandler(fh)

# 'application' code
logger.debug('debug message')
logger.info('info message')
logger.warning('warn message')
logger.error('error message')
logger.critical('critical message')
```

----------------------------------------

TITLE: Creating SSL Client Socket with Custom Context (Python)
DESCRIPTION: Example of creating an SSL client socket using a custom context and IPv4. It loads CA certificates from a file and connects to www.python.org.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
hostname = 'www.python.org'
# PROTOCOL_TLS_CLIENT requires valid cert chain and hostname
context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
context.load_verify_locations('path/to/cabundle.pem')

with socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) as sock:
    with context.wrap_socket(sock, server_hostname=hostname) as ssock:
        print(ssock.version())
```

----------------------------------------

TITLE: File Open Mode Constants
DESCRIPTION: Constants for file open modes including read-only, write-only, read-write, append, create, exclusive, and truncate flags.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_21

LANGUAGE: Python
CODE:
```
O_RDONLY
O_WRONLY
O_RDWR
O_APPEND
O_CREAT
O_EXCL
O_TRUNC
```

----------------------------------------

TITLE: Sorting Complex Objects with Lambda Functions
DESCRIPTION: Examples of sorting tuples and custom objects using lambda functions as key parameters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/sorting.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> student_tuples = [
...     ('john', 'A', 15),
...     ('jane', 'B', 12),
...     ('dave', 'B', 10),
... ]
>>> sorted(student_tuples, key=lambda student: student[2])   # sort by age
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
```

----------------------------------------

TITLE: Demonstrating Iterator Mock Return Values in Python
DESCRIPTION: Shows how to mock an iterator return value and its behavior when consumed multiple times. The first iteration returns the list while subsequent iterations return empty lists.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_53

LANGUAGE: python
CODE:
```
mock.__iter__.return_value = iter(['a', 'b', 'c'])
list(mock)
# Returns: ['a', 'b', 'c']
list(mock)
# Returns: []
```

----------------------------------------

TITLE: Using argparse FileType for File Arguments (Python)
DESCRIPTION: Illustrates using `argparse.FileType` as an argument type to automatically open command-line arguments as files with specified modes, buffer sizes, and encodings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_83

LANGUAGE: Python
CODE:
```
parser = argparse.ArgumentParser()
parser.add_argument('--raw', type=argparse.FileType('wb', 0))
parser.add_argument('out', type=argparse.FileType('w', encoding='UTF-8'))
parser.parse_args(['--raw', 'raw.dat', 'file.txt'])
```

----------------------------------------

TITLE: Using asyncio.run with loop_factory after policy deprecation
DESCRIPTION: Demonstrates the recommended way to specify an event loop implementation, such as SelectorEventLoop on Windows, when running an asyncio application after the deprecation of the asyncio policy system. Use asyncio.run or asyncio.Runner with the loop_factory argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_28

LANGUAGE: python
CODE:
```
import asyncio

async def main():
    ...

asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)
```

----------------------------------------

TITLE: Building a Dictionary of Sets with defaultdict
DESCRIPTION: This snippet illustrates how to use defaultdict to create a dictionary of sets, allowing unique values to be stored for each key from a list of key-value pairs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
>>> s = [('red', 1), ('blue', 2), ('red', 3), ('blue', 4), ('red', 1), ('blue', 4)]
>>> d = defaultdict(set)
>>> for k, v in s:
...     d[k].add(v)
...
>>> sorted(d.items())
[('blue', {2, 4}), ('red', {1, 3})]
```

----------------------------------------

TITLE: Using asyncio Semaphore with acquire and release
DESCRIPTION: This snippet demonstrates how to use an asyncio Semaphore with explicit `acquire` and `release` calls to manage access to a shared resource. The semaphore is acquired before accessing the shared resource and released in a `finally` block to ensure it's always released, even if exceptions occur.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-sync.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
"sem = asyncio.Semaphore(10)

# ... later
await sem.acquire()
try:
    # work with shared resource
finally:
    sem.release()"
```

----------------------------------------

TITLE: MagicMock Default Behavior Examples
DESCRIPTION: Shows the default behavior of MagicMock objects with various magic methods and how to customize their return values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_52

LANGUAGE: python
CODE:
```
>>> mock = MagicMock()
>>> mock[3] = 'fish'
>>> mock.__setitem__.assert_called_with(3, 'fish')
>>> mock.__getitem__.return_value = 'result'
>>> mock[2]
'result'

>>> mock = MagicMock()
>>> int(mock)
1
>>> len(mock)
0
>>> list(mock)
[]
>>> object() in mock
False
```

----------------------------------------

TITLE: Escaping HTML Characters with html.escape
DESCRIPTION: This snippet shows how to use the `html.escape` function from the `html` module to escape special characters in an HTML string. It demonstrates the conversion of characters like `>` and `<` to their corresponding HTML entities.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_56

LANGUAGE: python
CODE:
```
>>> import html
>>> html.escape('x > 2 && x < 7')
'x &gt; 2 &amp;&amp; x &lt; 7'
```

----------------------------------------

TITLE: Multiple Decorators Applied to a Python Function
DESCRIPTION: Shows how multiple decorators can be applied to a single function definition. Each decorator is applied on a separate line above the function, with the order of application being from bottom to top.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
@A
@B
@C
def f ():
    ...
```

----------------------------------------

TITLE: Fibonacci Series Generator Function in Python
DESCRIPTION: Implements a function that returns a list containing Fibonacci numbers up to a given value. Shows list manipulation and return statement usage.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
def fib2(n):  # return Fibonacci series up to n
    """Return a list containing the Fibonacci series up to n."""
    result = []
    a, b = 0, 1
    while a < n:
        result.append(a)    # see below
        a, b = b, a+b
    return result
```

----------------------------------------

TITLE: Delegating Generator Syntax with yield from
DESCRIPTION: Demonstrates the new yield from syntax allowing generators to delegate iteration and value passing to subgenerators, enabling more modular generator design
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.3.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
def g(x):
    yield from range(x, 0, -1)
    yield from range(x)

list(g(5))
```

LANGUAGE: python
CODE:
```
def accumulate():
    tally = 0
    while 1:
        next = yield
        if next is None:
            return tally
        tally += next

def gather_tallies(tallies):
    while 1:
        tally = yield from accumulate()
        tallies.append(tally)
```

----------------------------------------

TITLE: Receiving Data from Socket with asyncio
DESCRIPTION: This method receives up to nbytes from a socket. It's the asynchronous version of socket.recv(). It returns the received data as a bytes object and the socket must be non-blocking.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
.. method:: loop.sock_recv(sock, nbytes)
   :async:

   Receive up to *nbytes* from *sock*.  Asynchronous version of
   :meth:`socket.recv() <socket.socket.recv>`.

   Return the received data as a bytes object.

   *sock* must be a non-blocking socket.

```

----------------------------------------

TITLE: Dictionary Reversibility in Python
DESCRIPTION: Shows how dictionaries and dictionary views can be reversed using the reversed() function, demonstrating reversed iteration over keys, values, and items.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_93

LANGUAGE: python
CODE:
```
>>> d = {"one": 1, "two": 2, "three": 3, "four": 4}
>>> d
{'one': 1, 'two': 2, 'three': 3, 'four': 4}
>>> list(reversed(d))
['four', 'three', 'two', 'one']
>>> list(reversed(d.values()))
[4, 3, 2, 1]
>>> list(reversed(d.items()))
[('four', 4), ('three', 3), ('two', 2), ('one', 1)]
```

----------------------------------------

TITLE: Profiling a function with cProfile
DESCRIPTION: This code snippet demonstrates how to profile a function call using the cProfile module.  It imports the cProfile and re modules, then uses cProfile.run() to profile the execution of re.compile('foo|bar'). The results are printed to the console.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/profile.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
import cProfile
import re
cProfile.run('re.compile("foo|bar")')
```

----------------------------------------

TITLE: Using perf_counter_ns Function in Python
DESCRIPTION: Similar to perf_counter(), but returns time in nanoseconds as an integer rather than fractional seconds as a float, avoiding precision loss caused by the float type.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/time.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
perf_counter_ns() -> int
```

----------------------------------------

TITLE: Formatting complete exception with format_exception
DESCRIPTION: Formats a complete exception including stack trace and exception information. Returns a list of strings that, when combined, match the output of print_exception.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
format_exception(exc, /[, value, tb], limit=None, chain=True)
```

----------------------------------------

TITLE: Creating and Using Temporary Files in Python
DESCRIPTION: Examples of using tempfile module to create temporary files, read/write data, and ensure proper cleanup. Shows both direct usage and context manager patterns.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tempfile.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> import tempfile

# create a temporary file and write some data to it
>>> fp = tempfile.TemporaryFile()
>>> fp.write(b'Hello world!')
# read data from file
>>> fp.seek(0)
>>> fp.read()
b'Hello world!'
# close the file, it will be removed
>>> fp.close()

# create a temporary file using a context manager
>>> with tempfile.TemporaryFile() as fp:
...     fp.write(b'Hello world!')
...     fp.seek(0)
...     fp.read()
b'Hello world!'
>>>
# file is now closed and removed

# create a temporary file using a context manager
# close the file, use the name to open the file again
>>> with tempfile.NamedTemporaryFile(delete_on_close=False) as fp:
...     fp.write(b'Hello world!')
...     fp.close()
... # the file is closed, but not removed
... # open the file again by using its name
...     with open(fp.name, mode='rb') as f:
...         f.read()
b'Hello world!'
>>>
# file is now removed

# create a temporary directory using the context manager
>>> with tempfile.TemporaryDirectory() as tmpdirname:
...     print('created temporary directory', tmpdirname)
>>>
# directory and contents have been removed
```

----------------------------------------

TITLE: Using set comprehensions in Python
DESCRIPTION: Shows how to use set comprehensions to create sets based on conditions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/datastructures.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
>>> a = {x for x in 'abracadabra' if x not in 'abc'}
>>> a
{'r', 'd'}
```

----------------------------------------

TITLE: Encoding and Decoding Filenames with os.fsencode and os.fsdecode
DESCRIPTION: This snippet demonstrates how to use `os.fsencode` to encode a filename to the filesystem encoding and `os.fsdecode` to decode a filename from the filesystem encoding. It illustrates handling filenames that contain non-ASCII characters using appropriate encoding.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_54

LANGUAGE: python
CODE:
```
>>> import os
>>> filename = 'Sehenswürdigkeiten'
>>> os.fsencode(filename)
b'Sehensw\xc3\xbcrdigkeiten'
```

----------------------------------------

TITLE: Using os.scandir() for Efficient Directory Iteration
DESCRIPTION: This snippet presents the use of the new os.scandir() function introduced in PEP 471, which provides a more efficient means of iterating over directory entries compared to existing methods. It emphasizes the performance benefits and memory efficiency when dealing with large directories.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
for entry in os.scandir(path):
    if not entry.name.startswith('.') and entry.is_file():
        print(entry.name)
```

----------------------------------------

TITLE: Scheduling Delayed Callbacks - Asyncio - Python
DESCRIPTION: This snippet describes the method for scheduling delayed callbacks using `call_later`. It enables you to set a delay after which the specified callback will be executed, returning a handle to cancel the scheduled callback if necessary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
.. method:: loop.call_later(delay, callback, *args, context=None)

   Schedule *callback* to be called after the given *delay*
   number of seconds (can be either an int or a float).

   An instance of :class:`asyncio.TimerHandle` is returned which can
   be used to cancel the callback.

   *callback* will be called exactly once.  If two callbacks are
   scheduled for exactly the same time, the order in which they
   are called is undefined.

   The optional positional *args* will be passed to the callback when
   it is called. If you want the callback to be called with keyword
   arguments use :func:`functools.partial`.

   An optional keyword-only *context* argument allows specifying a
   custom :class:`contextvars.Context` for the *callback* to run in.
   The current context is used when no *context* is provided.
```

----------------------------------------

TITLE: Loading and Applying Dictionary-Based Logging Configuration in Python
DESCRIPTION: This snippet shows how to load a dictionary-based logging configuration from a JSON file and apply it using `logging.config.dictConfig`. It opens a JSON file, loads the configuration, applies the configuration using the dictConfig function, and then demonstrates logging messages with different levels, using both standard output and standard error.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
>>> import json, logging.config
>>> with open('conf.json') as f:
...     conf = json.load(f)
... 
>>> logging.config.dictConfig(conf)
>>> logging.info("Transaction completed normally")
INFO    : root           : Transaction completed normally
>>> logging.critical("Abnormal termination")
2011-02-17 11:14:36,694 root            CRITICAL Abnormal termination
```

----------------------------------------

TITLE: Python List Trailing Comma Error Prevention
DESCRIPTION: This example showcases a common error where omitting a comma in a multi-line list concatenates strings unintentionally. Using a trailing comma consistently helps avoid such errors by ensuring each element is treated as a separate item.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/design.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
       x = [
         "fee",
         "fie"
         "foo",
         "fum"
       ]
```

----------------------------------------

TITLE: Specifying Source Code Encoding in Python
DESCRIPTION: This snippet demonstrates how to declare the encoding of a Python source file using a special comment. This comment, typically placed on the first or second line of the file, informs Python about the encoding used for the source code, allowing it to correctly interpret Unicode literals.  It is crucial for handling non-ASCII characters in the source code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/unicode.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
#!/usr/bin/env python
# -*- coding: latin-1 -*-

u = 'abcdé'
print(ord(u[-1]))
```

----------------------------------------

TITLE: Command Line Timing Comparison in Python
DESCRIPTION: Demonstrates using timeit from command line to compare three different string joining approaches: generator expression, list comprehension, and map function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/timeit.rst#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
$ python -m timeit "'-'.join(str(n) for n in range(100))"
10000 loops, best of 5: 30.2 usec per loop
$ python -m timeit "'-'.join([str(n) for n in range(100)])"
10000 loops, best of 5: 27.5 usec per loop
$ python -m timeit "'-'.join(map(str, range(100)))"
10000 loops, best of 5: 23.2 usec per loop
```

----------------------------------------

TITLE: Using TemporaryDirectory context manager in Python
DESCRIPTION: Demonstrates the new TemporaryDirectory context manager in the tempfile module for easy cleanup of temporary directories.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_61

LANGUAGE: python
CODE:
```
with tempfile.TemporaryDirectory() as tmpdirname:
    print('created temporary dir:', tmpdirname)
```

----------------------------------------

TITLE: Using isinstance for Type Narrowing in Python
DESCRIPTION: Demonstrates how the built-in `isinstance` check acts as a type predicate, allowing static type checkers to narrow the type of a variable within conditional blocks (`if`/`else`).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_87

LANGUAGE: python
CODE:
```
def is_str(val: str | float):
    # "isinstance" type predicate
    if isinstance(val, str):
        # Type of ``val`` is narrowed to ``str``
        ...
    else:
        # Else, type of ``val`` is narrowed to ``float``.
        ...
```

----------------------------------------

TITLE: Capturing stdout Output in Python using StringIO
DESCRIPTION: Shows how to redirect standard output to a StringIO object in Python to capture printed output. This technique allows capturing output that would normally go to stdout for further processing or testing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/extending.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> import io, sys
>>> sys.stdout = io.StringIO()
>>> print('foo')
>>> print('hello world!')
>>> sys.stderr.write(sys.stdout.getvalue())
foo
hello world!
```

----------------------------------------

TITLE: Defining and Using a Protocol Class in Python
DESCRIPTION: Illustrates how to define a `Protocol` class specifying a required method (`meth`) and demonstrates how a class (`C`) that structurally matches the protocol passes a static type check when used where the protocol is expected.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_142

LANGUAGE: python
CODE:
```
class Proto(Protocol):
    def meth(self) -> int:
        ...

class C:
    def meth(self) -> int:
        return 0

def func(x: Proto) -> int:
    return x.meth()

func(C())  # Passes static type check
```

----------------------------------------

TITLE: Calling Static Methods in Python
DESCRIPTION: Demonstration of how static methods can be called identically from either a class or an instance. Static methods return the underlying function with no changes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
>>> E.f(3)
30
>>> E().f(3)
30
```

----------------------------------------

TITLE: Basic __import__() Usage Example
DESCRIPTION: Shows how the import statement is translated to __import__() function calls
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
spam = __import__('spam', globals(), locals(), [], 0)
```

----------------------------------------

TITLE: Dictionary Insertion Order Preservation in Python
DESCRIPTION: Demonstrates how dictionaries preserve insertion order, showing that updating keys doesn't affect order and that keys added after deletion are inserted at the end of the dictionary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_92

LANGUAGE: python
CODE:
```
>>> d = {"one": 1, "two": 2, "three": 3, "four": 4}
>>> d
{'one': 1, 'two': 2, 'three': 3, 'four': 4}
>>> list(d)
['one', 'two', 'three', 'four']
>>> list(d.values())
[1, 2, 3, 4]
>>> d["one"] = 42
>>> d
{'one': 42, 'two': 2, 'three': 3, 'four': 4}
>>> del d["two"]
>>> d["two"] = None
>>> d
{'one': 42, 'three': 3, 'four': 4, 'two': None}
```

----------------------------------------

TITLE: Compiling a Compact Regular Expression in Python
DESCRIPTION: Compiles a non-verbose regular expression to match character references in different numerical forms using Python's `re` module. No dependencies apart from the `re` module are required. The regex accepts strings like `&123;`, `&0x1A;`, and `&076;`. Outputs a compiled pattern object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
charref = re.compile("&#(0[0-7]+"
                        "|[0-9]+"
                        "|x[0-9a-fA-F]+);")
```

----------------------------------------

TITLE: Creating a Context Decorator for Logging Entry and Exit
DESCRIPTION: Demonstrates how to use ContextDecorator to create a logging wrapper that can be used both as a context manager and a function decorator, tracking function entry and exit points
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextlib.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
from contextlib import ContextDecorator
import logging

logging.basicConfig(level=logging.INFO)

class track_entry_and_exit(ContextDecorator):
    def __init__(self, name):
        self.name = name

    def __enter__(self):
        logging.info('Entering: %s', self.name)

    def __exit__(self, exc_type, exc, exc_tb):
        logging.info('Exiting: %s', self.name)
```

----------------------------------------

TITLE: Relative import syntax in Python 3
DESCRIPTION: The only acceptable syntax for relative imports in Python 3. All import forms not starting with '.' are interpreted as absolute imports.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.0.rst#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from .[module] import name
```

----------------------------------------

TITLE: Formatting Strings with Field Specifiers in Python
DESCRIPTION: Demonstrates using format specifiers to control string formatting, including field width, alignment, and nested references. Shows examples of right-justifying numbers and dynamically setting field widths.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
>>> fmt = '{0:15} ${1:>6}'
>>> fmt.format('Registration', 35)
'Registration    $    35'
>>> fmt.format('Tutorial', 50)
'Tutorial        $    50'
>>> fmt.format('Banquet', 125)
'Banquet         $   125'

>>> fmt = '{0:{1}}'
>>> width = 15
>>> fmt.format('Invoice #1234', width)
'Invoice #1234  '
>>> width = 35
>>> fmt.format('Invoice #1234', width)
'Invoice #1234                      '
```

----------------------------------------

TITLE: Restricting Argument Values with Choices in Python argparse
DESCRIPTION: Illustrates how to use the `choices` argument with a list of allowed values to ensure that the parsed argument value is one of the specified options.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_52

LANGUAGE: Python
CODE:
```
>>> parser = argparse.ArgumentParser(prog='game.py')
>>> parser.add_argument('move', choices=['rock', 'paper', 'scissors'])
>>> parser.parse_args(['rock'])
Namespace(move='rock')
```

----------------------------------------

TITLE: Worker Thread Pattern for Queue Processing in Python
DESCRIPTION: This example demonstrates a common pattern for processing items in a queue using a worker thread. It shows how to set up a daemon thread that continuously processes queue items, marks tasks as done, and how to wait for all enqueued tasks to complete.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/queue.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import threading
import queue

q = queue.Queue()

def worker():
    while True:
        item = q.get()
        print(f'Working on {item}')
        print(f'Finished {item}')
        q.task_done()

# Turn-on the worker thread.
threading.Thread(target=worker, daemon=True).start()

# Send thirty task requests to the worker.
for item in range(30):
    q.put(item)

# Block until all tasks are done.
q.join()
print('All work completed')
```

----------------------------------------

TITLE: Configuring TLS Version for Client Context in Python
DESCRIPTION: Example showing how to create an SSL context with specific TLS version restrictions. This snippet configures a client-side SSL context that only allows TLSv1.3 connections, restricting both minimum and maximum protocol versions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_39

LANGUAGE: python
CODE:
```
>>> client_context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
>>> client_context.minimum_version = ssl.TLSVersion.TLSv1_3
>>> client_context.maximum_version = ssl.TLSVersion.TLSv1_3
```

----------------------------------------

TITLE: Patch Decorator Usage
DESCRIPTION: Examples of using patch decorators to mock class and module attributes in tests.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
>>> original = SomeClass.attribute
>>> @patch.object(SomeClass, 'attribute', sentinel.attribute)
... def test():
...     assert SomeClass.attribute == sentinel.attribute
...
>>> test()
>>> assert SomeClass.attribute == original
```

----------------------------------------

TITLE: Pattern Matching with Tuple Unpacking in Python
DESCRIPTION: This example shows how to use pattern matching with tuple unpacking to handle different cases of a point represented as an (x, y) tuple.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
# point is an (x, y) tuple
match point:
    case (0, 0):
        print("Origin")
    case (0, y):
        print(f"Y={y}")
    case (x, 0):
        print(f"X={x}")
    case (x, y):
        print(f"X={x}, Y={y}")
    case _:
        raise ValueError("Not a point")
```

----------------------------------------

TITLE: Define Final Class Attribute and Inheritance Python
DESCRIPTION: Illustrates using `typing.Final` for class attributes and demonstrates that type checkers will flag attempts to override a final attribute in a subclass.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_75

LANGUAGE: Python
CODE:
```
class Connection:
    TIMEOUT: Final[int] = 10

class FastConnector(Connection):
    TIMEOUT = 1  # Error reported by type checker
```

----------------------------------------

TITLE: Refactoring Complex Lambda to Nested Function in Python
DESCRIPTION: This snippet shows how to refactor a complex lambda expression into a more readable nested function definition.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_29

LANGUAGE: python
CODE:
```
import functools
def combine(a, b):
    return 0, a[1] + b[1]

total = functools.reduce(combine, items)[1]
```

----------------------------------------

TITLE: Creating static class data and methods in Python
DESCRIPTION: Shows how to create static class data and static methods in Python. Static data is implemented as class attributes, and static methods using the @staticmethod decorator.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_54

LANGUAGE: python
CODE:
```
class C:
    count = 0   # number of times C.__init__ called

    def __init__(self):
        C.count = C.count + 1

    def getcount(self):
        return C.count  # or return self.count
```

----------------------------------------

TITLE: Sorting a list based on external resource
DESCRIPTION: This snippet shows how to sort a list based on an external resource, such as a dictionary containing grades for students. The `key` argument of the `sorted` function uses the `__getitem__` method of the dictionary to retrieve the grade for each student, allowing the list of students to be sorted based on their grades.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/sorting.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
>>> students = ['dave', 'john', 'jane']
>>> newgrades = {'john': 'F', 'jane':'A', 'dave': 'C'}
>>> sorted(students, key=newgrades.__getitem__)
['jane', 'dave', 'john']
```

----------------------------------------

TITLE: Using ZoneInfo with datetime objects in Python
DESCRIPTION: Demonstrates creating datetime objects with ZoneInfo time zones, illustrating how they handle daylight saving time transitions automatically. Shows basic usage with datetime arithmetic and fold attribute support.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/zoneinfo.rst#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from zoneinfo import ZoneInfo
>>> from datetime import datetime, timedelta

>>> dt = datetime(2020, 10, 31, 12, tzinfo=ZoneInfo("America/Los_Angeles"))
>>> print(dt)
2020-10-31 12:00:00-07:00

>>> dt.tzname()
'PDT'

>>> dt_add = dt + timedelta(days=1)

>>> print(dt_add)
2020-11-01 12:00:00-08:00

>>> dt_add.tzname()
'PST'
```

----------------------------------------

TITLE: Converting Integer to Bytes in Python
DESCRIPTION: This function converts an integer to an array of bytes. It handles different byte orders and signed/unsigned representations. The length parameter determines the number of bytes used to represent the integer.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
def to_bytes(n, length=1, byteorder='big', signed=False):
    if byteorder == 'little':
        order = range(length)
    elif byteorder == 'big':
        order = reversed(range(length))
    else:
        raise ValueError("byteorder must be either 'little' or 'big'")

    return bytes((n >> i*8) & 0xff for i in order)
```

----------------------------------------

TITLE: Writing CSV Files with DictWriter
DESCRIPTION: Shows how to write dictionary data to CSV files using DictWriter with defined field names.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/csv.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
import csv

with open('names.csv', 'w', newline='') as csvfile:
    fieldnames = ['first_name', 'last_name']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

    writer.writeheader()
    writer.writerow({'first_name': 'Baked', 'last_name': 'Beans'})
    writer.writerow({'first_name': 'Lovely', 'last_name': 'Spam'})
    writer.writerow({'first_name': 'Wonderful', 'last_name': 'Spam'})
```

----------------------------------------

TITLE: Type Checking with Generics in Python
DESCRIPTION: This code snippet demonstrates how improper use of type parameters with isinstance can lead to runtime errors. It shows a case where a generic type is defined and checks for compatibility with the isinstance function, which is not allowed for parameterized generics.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_98

LANGUAGE: python
CODE:
```
>>> isinstance([1, 2], list[str])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: isinstance() argument 2 cannot be a parameterized generic
```

----------------------------------------

TITLE: Changing Current Working Directory in Python
DESCRIPTION: This function changes the current working directory to the specified path. It can support using a file descriptor referring to an opened directory. It may raise OSError or its subclasses if the operation fails.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_32

LANGUAGE: python
CODE:
```
def chdir(path):
    """Change the current working directory to path."""
```

----------------------------------------

TITLE: Defining Generic Class with Multiple Type Variables and Constraints
DESCRIPTION: Shows how to define a generic class with multiple type variables, including those with bounds (`B: Sequence[bytes]`) and constraints (`S: (int, str)`), using both the new `[]` syntax and the old `Generic[...]` inheritance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_30

LANGUAGE: python
CODE:
```
from typing import TypeVar, Generic, Sequence

class WeirdTrio[T, B: Sequence[bytes], S: (int, str)]:
    ...

OldT = TypeVar('OldT', contravariant=True)
OldB = TypeVar('OldB', bound=Sequence[bytes], covariant=True)
OldS = TypeVar('OldS', int, str)

class OldWeirdTrio(Generic[OldT, OldB, OldS]):
    ...
```

----------------------------------------

TITLE: Setting Return Values for Mocks in Python
DESCRIPTION: Shows different ways to set return values on mock objects, including setting them directly on the mock, on methods, or in the constructor.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
mock = Mock()
mock.return_value = 3
mock()
```

----------------------------------------

TITLE: Reading and Accessing Configuration Data in Python
DESCRIPTION: Shows how to read a configuration file, access sections and values, and iterate through configuration options.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> config = configparser.ConfigParser()
>>> config.sections()
[]
>>> config.read('example.ini')
['example.ini']
>>> config.sections()
['forge.example', 'topsecret.server.example']
>>> 'forge.example' in config
True
>>> 'python.org' in config
False
>>> config['forge.example']['User']
'hg'
>>> config['DEFAULT']['Compression']
'yes'
>>> topsecret = config['topsecret.server.example']
>>> topsecret['ForwardX11']
'no'
>>> topsecret['Port']
'50022'
>>> for key in config['forge.example']:  # doctest: +SKIP
...     print(key)
user
compressionlevel
serveraliveinterval
compression
forwardx11
>>> config['forge.example']['ForwardX11']
'yes'
```

----------------------------------------

TITLE: Examples of Function Calling Conventions in Python
DESCRIPTION: This code provides examples of function definitions showcasing different calling conventions: positional, positional-or-keyword, and keyword-only, highlighting the constraints and behaviors associated with each.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
def standard_arg(arg):
    print(arg)

def pos_only_arg(arg, /):
    print(arg)

def kwd_only_arg(*, arg):
    print(arg)

def combined_example(pos_only, /, standard, *, kwd_only):
    print(pos_only, standard, kwd_only)
```

----------------------------------------

TITLE: Adding HTTP Headers to Requests in Python
DESCRIPTION: Example demonstrating how to add custom HTTP headers to a Request object using the add_header method. This shows how to add a Referer header and customize the User-Agent header.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_47

LANGUAGE: python
CODE:
```
import urllib.request
req = urllib.request.Request('http://www.example.com/')
req.add_header('Referer', 'http://www.python.org/')
# Customize the default User-Agent header value:
req.add_header('User-Agent', 'urllib-example/0.1 (Contact: . . .)')
with urllib.request.urlopen(req) as f:
   print(f.read().decode('utf-8'))
```

----------------------------------------

TITLE: Connecting to a Server and Receiving Data in Python
DESCRIPTION: This snippet shows how to connect to a server using a Client, receive data of various types, and handle byte arrays. It corresponds to the server example above and uses the same authentication key.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_43

LANGUAGE: python
CODE:
```
from multiprocessing.connection import Client
from array import array

address = ('localhost', 6000)

with Client(address, authkey=b'secret password') as conn:
    print(conn.recv())                  # => [2.25, None, 'junk', float]

    print(conn.recv_bytes())            # => 'hello'

    arr = array('i', [0, 0, 0, 0, 0])
    print(conn.recv_bytes_into(arr))    # => 8
    print(arr)                          # => array('i', [42, 1729, 0, 0, 0])
```

----------------------------------------

TITLE: Custom JSON Encoder for Logging in Python
DESCRIPTION: This snippet demonstrates how to use a custom JSON encoder to handle specific data types (sets, strings) when serializing log messages. The `Encoder` class extends `json.JSONEncoder` and overrides the `default` method to provide custom serialization logic for sets (converted to tuples) and strings (encoded using unicode_escape). This addresses issues with default JSON serialization and ensures proper handling of non-standard data types in logs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_38

LANGUAGE: python
CODE:
```
import json
import logging


class Encoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, set):
            return tuple(o)
        elif isinstance(o, str):
            return o.encode('unicode_escape').decode('ascii')
        return super().default(o)

class StructuredMessage:
    def __init__(self, message, /, **kwargs):
        self.message = message
        self.kwargs = kwargs

    def __str__(self):
        s = Encoder().encode(self.kwargs)
        return '%s >>> %s' % (self.message, s)

_ = StructuredMessage   # optional, to improve readability

def main():
    logging.basicConfig(level=logging.INFO, format='%(message)s')
    logging.info(_('message 1', set_value={1, 2, 3}, snowman='\u2603'))

if __name__ == '__main__':
    main()
```

----------------------------------------

TITLE: Splitting Strings with Regular Expressions in Python
DESCRIPTION: Demonstrates the use of re.split() function to split strings based on regular expression patterns. It shows various examples with different patterns and parameters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
>>> re.split(r'\W+', 'Words, words, words.')
['Words', 'words', 'words', '']
>>> re.split(r'(\W+)', 'Words, words, words.')
['Words', ', ', 'words', ', ', 'words', '.', '']
>>> re.split(r'\W+', 'Words, words, words.', maxsplit=1)
['Words', 'words, words.']
>>> re.split('[a-f]+', '0a3B9', flags=re.IGNORECASE)
['0', '3', '9']
```

LANGUAGE: python
CODE:
```
>>> re.split(r'(\W+)', '...words, words...')
['', '...', 'words', ', ', 'words', '...', '']

>>> re.split(r'\b', 'Words, words, words.')
['', 'Words', ', ', 'words', ', ', 'words', '.']
>>> re.split(r'\W*', '...words...')
['', '', 'w', 'o', 'r', 'd', 's', '', '']
>>> re.split(r'(\W*)', '...words...')
['', '...', '', '', 'w', '', 'o', '', 'r', '', 'd', '', 's', '...', '', '', '']
```

----------------------------------------

TITLE: Defining User-Defined Generic Class (New Syntax)
DESCRIPTION: Defines a user-defined generic class using the new `ClassName[T]` syntax introduced in Python 3.12, parameterised by a type variable `T` which can then be used within the class body.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_27

LANGUAGE: python
CODE:
```
from logging import Logger

class LoggedVar[T]:
    def __init__(self, value: T, name: str, logger: Logger) -> None:
        self.name = name
        self.logger = logger
        self.value = value

    def set(self, new: T) -> None:
        self.log('Set ' + repr(self.value))
        self.value = new

    def get(self) -> T:
        self.log('Get ' + repr(self.value))
        return self.value

    def log(self, message: str) -> None:
        self.logger.info('%s: %s', self.name, message)
```

----------------------------------------

TITLE: Finding All Matches with Regular Expressions in Python
DESCRIPTION: Shows the usage of re.findall() function to find all non-overlapping matches of a pattern in a string. It returns a list of strings or tuples depending on the capturing groups in the pattern.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> re.findall(r'\bf[a-z]*', 'which foot or hand fell fastest')
['foot', 'fell', 'fastest']
>>> re.findall(r'(\w+)=(\d+)', 'set width=20 and height=10')
[('width', '20'), ('height', '10')]
```

----------------------------------------

TITLE: Mock Attribute Management
DESCRIPTION: Demonstrates how to manage mock attributes including deletion and name handling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_40

LANGUAGE: python
CODE:
```
mock = MagicMock()
hasattr(mock, 'm')
# Returns True
del mock.m
hasattr(mock, 'm')
# Returns False
```

----------------------------------------

TITLE: Adding socket.create_server and socket.has_dualstack_ipv6 functions in Python
DESCRIPTION: New convenience functions create_server() and has_dualstack_ipv6() have been added to the socket module to simplify creation of server sockets supporting both IPv4 and IPv6.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0a4.rst#2025-04-23_snippet_4

LANGUAGE: Python
CODE:
```
import socket

server = socket.create_server(('', 8000))
dual_stack = socket.has_dualstack_ipv6()
```

----------------------------------------

TITLE: Using itertools.groupby for Element Grouping
DESCRIPTION: Demonstration of itertools.groupby function to group elements in an iterable based on a key function, showing examples with numbers and string processing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
>>> import itertools
>>> L = [2, 4, 6, 7, 8, 9, 11, 12, 14]
>>> for key_val, it in itertools.groupby(L, lambda x: x % 2):
...    print key_val, list(it)
...
0 [2, 4, 6]
1 [7]
0 [8]
1 [9, 11]
0 [12, 14]
>>>
```

----------------------------------------

TITLE: Dataclass with Default Factory Function - Python
DESCRIPTION: This snippet illustrates how to define a dataclass with a mutable default value using the `field(default_factory=list)` approach, ensuring each instance gets its own list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dataclasses.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
@dataclass
class D:
    x: list = field(default_factory=list)

assert D().x is not D().x
```

----------------------------------------

TITLE: Calculating Population Variance in Python
DESCRIPTION: These snippets demonstrate how to use the pvariance function to calculate the population variance of a dataset. It shows usage both with and without a pre-calculated mean.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
>>> data = [0.0, 0.25, 0.25, 1.25, 1.5, 1.75, 2.75, 3.25]
>>> pvariance(data)
1.25
>>> mu = mean(data)
>>> pvariance(data, mu)
```

----------------------------------------

TITLE: Counter Usage Example
DESCRIPTION: Demonstrates using Counter class to tally occurrences of items in a list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> # Tally occurrences of words in a list
>>> cnt = Counter()
>>> for word in ['red', 'blue', 'red', 'green', 'blue', 'blue']:
...     cnt[word] += 1
...
>>> cnt
Counter({'blue': 3, 'red': 2, 'green': 1})
```

----------------------------------------

TITLE: Using cProfile as a Context Manager in Python
DESCRIPTION: This snippet shows how to use cProfile as a context manager, which automatically handles enabling and disabling profiling. It's a more concise way to profile a specific block of code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/profile.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
import cProfile

with cProfile.Profile() as pr:
    # ... do something ...

    pr.print_stats()
```

----------------------------------------

TITLE: Creating IP Address Objects in Python
DESCRIPTION: Demonstrates how to create IP address objects using the ipaddress module's factory functions and direct class instantiation. Shows both IPv4 and IPv6 address creation from strings and integers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/ipaddress.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> ipaddress.ip_address('192.0.2.1')
IPv4Address('192.0.2.1')
>>> ipaddress.ip_address('2001:DB8::1')
IPv6Address('2001:db8::1')
>>> ipaddress.ip_address(3221225985)
IPv4Address('192.0.2.1')
>>> ipaddress.IPv6Address(1)
IPv6Address('::1')
```

----------------------------------------

TITLE: Calculating Median in Python
DESCRIPTION: These examples demonstrate how to use the median function to calculate the median value of a dataset. It shows cases for both odd and even numbers of data points.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> median([1, 3, 5])
3
>>> median([1, 3, 5, 7])
4.0
```

----------------------------------------

TITLE: Exception Transformation with Explicit Chaining
DESCRIPTION: Example of transforming a ConnectionError into a RuntimeError while maintaining the cause chain.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/errors.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
def func():
    raise ConnectionError

try:
    func()
except ConnectionError as exc:
    raise RuntimeError('Failed to open database') from exc
```

----------------------------------------

TITLE: Aligning Text and Specifying Width - Python
DESCRIPTION: Explains how to align text (left, right, center) and specify a minimum field width using format specifiers. Also shows how to use a custom fill character.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/string.rst#_snippet_7

LANGUAGE: python
CODE:
```
>>> '{:<30}'.format('left aligned')
'left aligned                  '
>>> '{:>30}'.format('right aligned')
'                 right aligned'
>>> '{:^30}'.format('centered')
'           centered           '
>>> '{:*^30}'.format('centered')  # use '*' as a fill char
'***********centered***********'
```

----------------------------------------

TITLE: Implicit Line Joining in Python
DESCRIPTION: This example illustrates implicit line joining for expressions within parentheses, which allows multi-line statements without the use of backslashes. Comments may be included.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/lexical_analysis.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
month_names = ['Januari', 'Februari', 'Maart',      # These are the
                  'April',   'Mei',      'Juni',       # Dutch names
                  'Juli',    'Augustus', 'September',  # for the months
                  'Oktober', 'November', 'December']   # of the year
```

----------------------------------------

TITLE: Releasing Reference and Clearing Object with Py_CLEAR (C)
DESCRIPTION: Release a strong reference for object *o*. The object may be ``NULL``, in which case the macro has no effect; otherwise the effect is the same as for :c:func:`Py_DECREF`, except that the argument is also set to ``NULL``. This macro is safe to use even if the object's deallocation triggers code that might reference the object, because it sets the argument to ``NULL`` before releasing the reference. It is recommended for releasing references to objects that might be traversed during garbage collection.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/refcounting.rst#_snippet_9

LANGUAGE: C
CODE:
```
void Py_CLEAR(PyObject *o)
```

----------------------------------------

TITLE: Connecting to SQLite Database in Python
DESCRIPTION: Creates a connection to an SQLite database named 'tutorial.db' in the current working directory. If the database doesn't exist, it will be created.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import sqlite3
con = sqlite3.connect("tutorial.db")
```

----------------------------------------

TITLE: Future Class Implementation - asyncio - Python
DESCRIPTION: This snippet provides the definition of the Future class, including methods such as 'set_result', 'set_exception', and 'done'. It outlines how to manage the states of a Future object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-future.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
.. class:: Future(*, loop=None)

   A Future represents an eventual result of an asynchronous
   operation.  Not thread-safe.

   Future is an :term:`awaitable` object.  Coroutines can await on
   Future objects until they either have a result or an exception
   set, or until they are cancelled. A Future can be awaited multiple
   times and the result is same.

   Typically Futures are used to enable low-level
   callback-based code (e.g. in protocols implemented using asyncio
   :ref:`transports <asyncio-transports-protocols>`)
   to interoperate with high-level async/await code.

   The rule of thumb is to never expose Future objects in user-facing
   APIs, and the recommended way to create a Future object is to call
   :meth:`loop.create_future`.  This way alternative event loop
   implementations can inject their own optimized implementations
   of a Future object.

   .. versionchanged:: 3.7
      Added support for the :mod:`contextvars` module.

   .. deprecated:: 3.10
      Deprecation warning is emitted if *loop* is not specified
      and there is no running event loop.
```

----------------------------------------

TITLE: Running a simple HTTP server
DESCRIPTION: This snippet demonstrates how to create and run a basic HTTP server using the HTTPServer class and BaseHTTPRequestHandler. It initializes the server with a specified address and handler, then starts serving requests indefinitely.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.server.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
def run(server_class=HTTPServer, handler_class=BaseHTTPRequestHandler):
    server_address = ('', 8000)
    httpd = server_class(server_address, handler_class)
    httpd.serve_forever()
```

----------------------------------------

TITLE: Splitting Strings with Regular Expressions in Python
DESCRIPTION: This example illustrates how to split a string using the `split()` method of a compiled regular expression in Python. It demonstrates using a regular expression to define the delimiters and splitting the string based on those delimiters. It also shows how to limit the number of splits using the `maxsplit` parameter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
>>> p = re.compile(r'\W+')
>>> p.split('This is a test, short and sweet, of split().')
['This', 'is', 'a', 'test', 'short', 'and', 'sweet', 'of', 'split', '']
>>> p.split('This is a test, short and sweet, of split().', 3)
```

----------------------------------------

TITLE: Type Conversion for Arguments in Argparse
DESCRIPTION: Fixes the previous example by specifying that the 'square' argument should be treated as an integer using the type parameter. This allows for numeric operations on the input.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/argparse.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("square", help="display a square of a given number",
                   type=int)
args = parser.parse_args()
print(args.square**2)
```

----------------------------------------

TITLE: List and Tuple Comparison Example
DESCRIPTION: Shows how Python compares sequences lexicographically, demonstrating that different types are not considered equal even with identical elements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/expressions.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
[1,2] == (1,2)  # False
[1,2,x] <= [1,2,y]  # Same as x <= y
[1,2] < [1,2,3]  # True
```

----------------------------------------

TITLE: Using AsyncMock with patch
DESCRIPTION: This snippet indicates that the patch function now returns an AsyncMock if the target function being patched is asynchronous.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_44

LANGUAGE: python
CODE:
```
>>> @patch('async_module.async_function')
... async def test(mock_function):
...     assert isinstance(mock_function, AsyncMock)
...     await mock_function()
... 
>>> asyncio.run(test())
```

----------------------------------------

TITLE: Asyncio Future Example - asyncio - Python
DESCRIPTION: This snippet provides an example of creating a Future object, scheduling a task to set the result, and waiting for the Future to complete. It demonstrates the use of asyncio features in practice.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-future.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
async def set_after(fut, delay, value):
        # Sleep for *delay* seconds.
        await asyncio.sleep(delay)

        # Set *value* as a result of *fut* Future.
        fut.set_result(value)

    async def main():
        # Get the current event loop.
        loop = asyncio.get_running_loop()

        # Create a new Future object.
        fut = loop.create_future()

        # Run "set_after()" coroutine in a parallel Task.
        # We are using the low-level "loop.create_task()" API here because
        # we already have a reference to the event loop at hand.
        # Otherwise we could have just used "asyncio.create_task()".
        loop.create_task(
            set_after(fut, 1, '... world'))

        print('hello ...')

        # Wait until *fut* has a result (1 second) and print it.
        print(await fut)

    asyncio.run(main())
```

----------------------------------------

TITLE: Basic Group Matching in Python Regex
DESCRIPTION: Demonstrates basic regex group matching and accessing group values with defaults.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
>>> m = re.match(r"(\d+)\.?(\d+)?", "24")
>>> m.groups()      # Second group defaults to None.
('24', None)
>>> m.groups('0')   # Now, the second group defaults to '0'.
('24', '0')
```

----------------------------------------

TITLE: Creating a Helper Function to Copy Mock Arguments in Python
DESCRIPTION: A solution using side_effect to copy arguments passed to a mock, allowing assertions on the original values even when they're modified during execution.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_28

LANGUAGE: python
CODE:
```
>>> from copy import deepcopy
>>> from unittest.mock import Mock, patch, DEFAULT
>>> def copy_call_args(mock):
...     new_mock = Mock()
...     def side_effect(*args, **kwargs):
...         args = deepcopy(args)
...         kwargs = deepcopy(kwargs)
...         new_mock(*args, **kwargs)
...         return DEFAULT
...     mock.side_effect = side_effect
...     return new_mock
...
>>> with patch('mymodule.frob') as mock_frob:
...     new_mock = copy_call_args(mock_frob)
...     val = {6}
...     mymodule.grob(val)
...
>>> new_mock.assert_called_with({6})
>>> new_mock.call_args
call({6})
```

----------------------------------------

TITLE: Making Assertions About Dictionary Mock Usage in Python
DESCRIPTION: Example of how to inspect and assert against the recorded access patterns of a mocked dictionary using call_args_list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_36

LANGUAGE: python
CODE:
```
>>> mock.__getitem__.call_args_list
[call('a'), call('c'), call('d'), call('b'), call('d')]
>>> mock.__setitem__.call_args_list
[call('b', 'fish'), call('d', 'eggs')]
>>> my_dict
{'a': 1, 'b': 'fish', 'c': 3, 'd': 'eggs'}
```

----------------------------------------

TITLE: Fixing Type Parameter in Inheritance (Python)
DESCRIPTION: Shows how to inherit from a generic base class (`Mapping`) while fixing one or more of its type parameters (`str` for the key type), leaving the inheriting class generic over the remaining parameters (`T` for the value type).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_34

LANGUAGE: Python
CODE:
```
from collections.abc import Mapping

class MyDict[T](Mapping[str, T]):
    ...
```

----------------------------------------

TITLE: Using a Helper Method to Avoid Nested Patches in Python Unit Tests
DESCRIPTION: A cleaner approach to applying multiple patches in Python tests using a helper method and test cleanup to avoid deeply nested code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_32

LANGUAGE: python
CODE:
```
>>> class MyTest(unittest.TestCase):
...
...     def create_patch(self, name):
...         patcher = patch(name)
...         thing = patcher.start()
...         self.addCleanup(patcher.stop)
...         return thing
...
...     def test_foo(self):
...         mock_foo = self.create_patch('mymodule.Foo')
...         mock_bar = self.create_patch('mymodule.Bar')
...         mock_spam = self.create_patch('mymodule.Spam')
...
...         assert mymodule.Foo is mock_foo
...         assert mymodule.Bar is mock_bar
...         assert mymodule.Spam is mock_spam
...
>>> original = mymodule.Foo
>>> MyTest('test_foo').run()
>>> assert mymodule.Foo is original
```

----------------------------------------

TITLE: Compressing Binary String using Python gzip
DESCRIPTION: This snippet shows how to use the `gzip.compress` function to compress a binary string. It imports the `gzip` module, defines a sample binary string `s_in`, and stores the resulting compressed binary data in the `s_out` variable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/gzip.rst#_snippet_3

LANGUAGE: python
CODE:
```
import gzip
s_in = b"Lots of content here"
s_out = gzip.compress(s_in)
```

----------------------------------------

TITLE: Mocking Method Calls on Objects in Python
DESCRIPTION: Demonstrates how to pass a mock object into a method and verify that a particular method on the mock was called. This pattern is useful when testing code that uses external objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
class ProductionClass:
    def closer(self, something):
        something.close()

real = ProductionClass()
mock = Mock()
real.closer(mock)
mock.close.assert_called_with()
```

----------------------------------------

TITLE: Iterating Over a Sequence in Reverse Order in Python
DESCRIPTION: Demonstrates how to use the built-in reversed() function to iterate over a sequence in reverse order without modifying the original sequence.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_35

LANGUAGE: python
CODE:
```
for x in reversed(sequence):
    ...  # do something with x ...
```

----------------------------------------

TITLE: Generating Overlapping Triplets with Triplewise in Python
DESCRIPTION: Defines a function, triplewise, for generating overlapping triplets from an iterable, useful for sliding window operations with a width of three.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_92

LANGUAGE: Python
CODE:
```
def triplewise(iterable):
    "Return overlapping triplets from an iterable"
    # triplewise('ABCDEFG') → ABC BCD CDE DEF EFG
    for (a, _), (b, c) in pairwise(pairwise(iterable)):
        yield a, b, c
```

----------------------------------------

TITLE: Marking strings for translation using _()
DESCRIPTION: This code snippet illustrates how to mark strings for translation in Python code using the _() function. It shows an example where a string intended for translation is wrapped in _('...') to indicate that it should be included in the message catalog.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/gettext.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
filename = 'mylog.txt'
   message = _('writing a log message')
   with open(filename, 'w') as fp:
       fp.write(message)
```

----------------------------------------

TITLE: Using SimpleQueue.get method in Python
DESCRIPTION: A method to remove and return an item from the queue. If block is true and timeout is None, it blocks until an item is available. With a positive timeout, it waits up to that many seconds before raising Empty. If block is false, it immediately returns an item or raises Empty.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/queue.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
SimpleQueue.get(block=True, timeout=None)
```

----------------------------------------

TITLE: Scheduling Callbacks - Asyncio - Python
DESCRIPTION: This snippet details the methods for scheduling callbacks in the event loop: `call_soon` and `call_soon_threadsafe`. These methods allow you to schedule functions to be called in the next iteration of the loop and handle thread safety appropriately.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
.. method:: loop.call_soon(callback, *args, context=None)

   Schedule the *callback* :term:`callback` to be called with
   *args* arguments at the next iteration of the event loop.

   Return an instance of :class:`asyncio.Handle`,
   which can be used later to cancel the callback.

   Callbacks are called in the order in which they are registered.
   Each callback will be called exactly once.

   The optional keyword-only *context* argument specifies a
   custom :class:`contextvars.Context` for the *callback* to run in.
   Callbacks use the current context when no *context* is provided.

   Unlike :meth:`call_soon_threadsafe`, this method is not thread-safe.

.. method:: loop.call_soon_threadsafe(callback, *args, context=None)

   A thread-safe variant of :meth:`call_soon`. When scheduling callbacks from
   another thread, this function *must* be used, since :meth:`call_soon` is not
   thread-safe.

   This function is safe to be called from a reentrant context or signal handler,
   however, it is not safe or fruitful to use the returned handle in such contexts.

   Raises :exc:`RuntimeError` if called on a loop that's been closed.
   This can happen on a secondary thread when the main application is
   shutting down.
```

----------------------------------------

TITLE: Converting Configuration Values to Python Data Types
DESCRIPTION: Shows how to convert configuration values to appropriate Python data types using both manual conversion and built-in getter methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> int(topsecret['Port'])
50022
>>> float(topsecret['CompressionLevel'])
9.0
>>> topsecret.getboolean('ForwardX11')
False
>>> config['forge.example'].getboolean('ForwardX11')
True
>>> config.getboolean('forge.example', 'Compression')
True
```

----------------------------------------

TITLE: Custom Socket Class Implementation in Python
DESCRIPTION: Defines a custom socket class with methods for sending and receiving fixed-length messages. Includes error handling and buffer management.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/sockets.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
class MySocket:
    """demonstration class only
      - coded for clarity, not efficiency
    """

    def __init__(self, sock=None):
        if sock is None:
            self.sock = socket.socket(
                            socket.AF_INET, socket.SOCK_STREAM)
        else:
            self.sock = sock

    def connect(self, host, port):
        self.sock.connect((host, port))

    def mysend(self, msg):
        totalsent = 0
        while totalsent < MSGLEN:
            sent = self.sock.send(msg[totalsent:])
            if sent == 0:
                raise RuntimeError("socket connection broken")
            totalsent = totalsent + sent

    def myreceive(self):
        chunks = []
        bytes_recd = 0
        while bytes_recd < MSGLEN:
            chunk = self.sock.recv(min(MSGLEN - bytes_recd, 2048))
            if chunk == b'':
                raise RuntimeError("socket connection broken")
            chunks.append(chunk)
            bytes_recd = bytes_recd + len(chunk)
        return b''.join(chunks)
```

----------------------------------------

TITLE: Using Pipes for Inter-Process Communication in Python
DESCRIPTION: Shows how to use the Pipe function from multiprocessing to create a communication channel between processes. It creates a parent and child connection, sends data through the pipe, and retrieves it in the main process.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from multiprocessing import Process, Pipe

def f(conn):
    conn.send([42, None, 'hello'])
    conn.close()

if __name__ == '__main__':
    parent_conn, child_conn = Pipe()
    p = Process(target=f, args=(child_conn,))
    p.start()
```

----------------------------------------

TITLE: Defining Overloaded Function with @overload in Python
DESCRIPTION: This snippet demonstrates how to use the @overload decorator to define multiple type signatures for the same function (`process`). The @overload definitions are for type checkers, while the final definition provides the runtime implementation. This allows for more precise type hinting than simple unions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_172

LANGUAGE: Python
CODE:
```
@overload
def process(response: None) -> None:
    ...
@overload
def process(response: int) -> tuple[int, str]:
    ...
@overload
def process(response: bytes) -> str:
    ...
def process(response):
    ...  # actual implementation goes here
```

----------------------------------------

TITLE: Renaming Files with Path.rename() in Python
DESCRIPTION: Example of using the Path.rename() method to rename a file from 'foo' to 'bar'. The method returns a new Path instance pointing to the renamed file. The example also shows writing to and reading from the file.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_43

LANGUAGE: python
CODE:
```
>>> p = Path('foo')
>>> p.open('w').write('some text')
9
>>> target = Path('bar')
>>> p.rename(target)
PosixPath('bar')
>>> target.open().read()
'some text'
```

----------------------------------------

TITLE: Creating a Generic Type Alias in Python
DESCRIPTION: This code snippet illustrates how to create a generic type alias using the type statement in Python, along with lazy evaluation of the value. It demonstrates the use of typing.TypeVar and annotation-def to manage type parameters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
type ListOrSet[T] = list[T] | set[T]
```

LANGUAGE: python
CODE:
```
annotation-def TYPE_PARAMS_OF_ListOrSet():
    T = typing.TypeVar("T")

    annotation-def VALUE_OF_ListOrSet():
        return list[T] | set[T]
    # In reality, the value is lazily evaluated
    return typing.TypeAliasType("ListOrSet", VALUE_OF_ListOrSet(), type_params=(T,))
ListOrSet = TYPE_PARAMS_OF_ListOrSet()
```

----------------------------------------

TITLE: Converting Values to Floating-Point Numbers in Python
DESCRIPTION: The float constructor creates floating-point numbers from numbers or strings. It handles various formats including scientific notation, infinity, and NaN values. The method falls back to __index__ if __float__ is not defined.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
float('+1.23')
float('   -12345\n')
float('1e-003')
float('+1E6')
float('-Infinity')
```

----------------------------------------

TITLE: Defining a Dataclass with Custom Field in Python
DESCRIPTION: Demonstrates how to use the field() function to customize a field in a dataclass. In this example, a list field is created with a default factory.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dataclasses.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
@dataclass
class C:
    mylist: list[int] = field(default_factory=list)

c = C()
c.mylist += [1, 2, 3]
```

----------------------------------------

TITLE: Implementing Asynchronous Iterator in Python
DESCRIPTION: Demonstrates how to create a class that acts as an asynchronous iterator by implementing the `__aiter__` and `__anext__` dunder methods. This allows the class instances to be used with the `async for` statement. The `__anext__` method must return an awaitable and raise `StopAsyncIteration` when the iteration is complete.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_37

LANGUAGE: Python
CODE:
```
class Reader:
    async def readline(self):
        ...

    def __aiter__(self):
        return self

    async def __anext__(self):
        val = await self.readline()
        if val == b'':
            raise StopAsyncIteration
        return val
```

----------------------------------------

TITLE: Loading Certificate Chain in Python SSLContext
DESCRIPTION: This method loads a private key and corresponding certificate from files. It supports encrypted private keys with an optional password callback function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
SSLContext.load_cert_chain(certfile, keyfile=None, password=None)
```

----------------------------------------

TITLE: Verifying Python Installations on macOS
DESCRIPTION: Shell commands to test and verify the installation of both free-threaded and traditional Python builds on macOS. It demonstrates how to check the installed versions and their locations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/mac.rst#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
$ # test that the free-threaded interpreter was installed if the Unix Command Tools package was enabled
$ /usr/local/bin/python3.13t -VV
Python 3.13.0b2 experimental free-threading build (v3.13.0b2:3a83b172af, Jun  5 2024, 12:57:31) [Clang 15.0.0 (clang-1500.3.9.4)]
$ #    and the traditional interpreter
$ /usr/local/bin/python3.13 -VV
Python 3.13.0b2 (v3.13.0b2:3a83b172af, Jun  5 2024, 12:50:24) [Clang 15.0.0 (clang-1500.3.9.4)]
$ # test that they are also available without the prefix if /usr/local/bin is on $PATH
$ python3.13t -VV
Python 3.13.0b2 experimental free-threading build (v3.13.0b2:3a83b172af, Jun  5 2024, 12:57:31) [Clang 15.0.0 (clang-1500.3.9.4)]
$ python3.13 -VV
Python 3.13.0b2 (v3.13.0b2:3a83b172af, Jun  5 2024, 12:50:24) [Clang 15.0.0 (clang-1500.3.9.4)]
```

----------------------------------------

TITLE: Hashing with BLAKE2b and custom digest size
DESCRIPTION: This example showcases how to use BLAKE2b with a custom digest size. It initializes a BLAKE2b object with a specified digest size (20 bytes), updates it with data, and then retrieves the hexadecimal representation of the hash. It also verifies the digest size.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/hashlib.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
>>> from hashlib import blake2b
>>> h = blake2b(digest_size=20)
>>> h.update(b'Replacing SHA1 with the more secure function')
>>> h.hexdigest()
'd24f26cf8de66472d58d4e1b1774b4c9158b1f4c'
>>> h.digest_size
20
>>> len(h.digest())
20

```

----------------------------------------

TITLE: Nested With Statement Equivalent in Python
DESCRIPTION: Shows the semantic equivalent of a multi-item with statement as nested with statements, illustrating how Python processes multiple context managers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
with A() as a:
    with B() as b:
        SUITE
```

----------------------------------------

TITLE: Defining Simple Type Aliases (PEP 695)
DESCRIPTION: Demonstrates the new `type` statement for creating simple type aliases, providing a more explicit way to define type names.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_2

LANGUAGE: Python
CODE:
```
type Point = tuple[float, float]
```

----------------------------------------

TITLE: Formatting Paragraphs with textwrap in Python
DESCRIPTION: Demonstrates how to use the textwrap module to format paragraphs of text to fit a given screen width. This is useful for creating well-formatted text output in console applications or other text-based interfaces.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib2.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> import textwrap
>>> doc = """The wrap() method is just like fill() except that it returns
... a list of strings instead of one big string with newlines to separate
... the wrapped lines."""
...
>>> print(textwrap.fill(doc, width=40))
The wrap() method is just like fill()
except that it returns a list of strings
instead of one big string with newlines
to separate the wrapped lines.
```

----------------------------------------

TITLE: Checking Header Presence in Message
DESCRIPTION: Demonstrates checking for the existence of a header using the `in` operator on a message object
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.compat32-message.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
if 'message-id' in myMessage:
    print('Message-ID:', myMessage['message-id'])
```

----------------------------------------

TITLE: Keyword-Only Fields in Python Dataclass
DESCRIPTION: Example showing how to define keyword-only fields in a dataclass using KW_ONLY sentinel. Fields y and z must be specified as keywords during instantiation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dataclasses.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
@dataclass
class Point:
    x: float
    _: KW_ONLY
    y: float
    z: float

p = Point(0, y=1.5, z=2.0)
```

----------------------------------------

TITLE: Converting Naive UTC datetime to POSIX Timestamp in Python
DESCRIPTION: These code snippets show two ways to obtain a POSIX timestamp from a naive datetime instance representing UTC time.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
timestamp = dt.replace(tzinfo=timezone.utc).timestamp()
```

LANGUAGE: python
CODE:
```
timestamp = (dt - datetime(1970, 1, 1)) / timedelta(seconds=1)
```

----------------------------------------

TITLE: Using SharedMemory with NumPy Arrays for Cross-Process Data Sharing in Python
DESCRIPTION: This example shows how to use SharedMemory with NumPy arrays to share and modify data across multiple Python processes or interactive shells.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.shared_memory.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> # In the first Python interactive shell
>>> import numpy as np
>>> a = np.array([1, 1, 2, 3, 5, 8])  # Start with an existing NumPy array
>>> from multiprocessing import shared_memory
>>> shm = shared_memory.SharedMemory(create=True, size=a.nbytes)
>>> # Now create a NumPy array backed by shared memory
>>> b = np.ndarray(a.shape, dtype=a.dtype, buffer=shm.buf)
>>> b[:] = a[:]  # Copy the original data into shared memory
>>> b
array([1, 1, 2, 3, 5, 8])
>>> type(b)
<class 'numpy.ndarray'>
>>> type(a)
<class 'numpy.ndarray'>
>>> shm.name  # We did not specify a name so one was chosen for us
'psm_21467_46075'

>>> # In either the same shell or a new Python shell on the same machine
>>> import numpy as np
>>> from multiprocessing import shared_memory
>>> # Attach to the existing shared memory block
>>> existing_shm = shared_memory.SharedMemory(name='psm_21467_46075')
>>> # Note that a.shape is (6,) and a.dtype is np.int64 in this example
>>> c = np.ndarray((6,), dtype=np.int64, buffer=existing_shm.buf)
>>> c
array([1, 1, 2, 3, 5, 8])
>>> c[-1] = 888
>>> c
array([  1,   1,   2,   3,   5, 888])

>>> # Back in the first Python interactive shell, b reflects this change
>>> b
array([  1,   1,   2,   3,   5, 888])

>>> # Clean up from within the second Python shell
>>> del c  # Unnecessary; merely emphasizing the array is no longer used
>>> existing_shm.close()

>>> # Clean up from within the first Python shell
>>> del b  # Unnecessary; merely emphasizing the array is no longer used
>>> shm.close()
>>> shm.unlink()  # Free and release the shared memory block at the very end
```

----------------------------------------

TITLE: Tracking Multiple Mock Calls with call_args_list in Python
DESCRIPTION: Demonstrates the use of call_args_list to track all calls made to a Mock object. This attribute stores a list of call objects representing each call made to the mock.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
>>> mock = Mock(return_value=None)
>>> mock()
>>> mock(3, 4)
>>> mock(key='fish', next='w00t!')
>>> mock.call_args_list
[call(), call(3, 4), call(key='fish', next='w00t!')]
>>> expected = [(), ((3, 4),), ({'key': 'fish', 'next': 'w00t!'},)]
>>> mock.call_args_list == expected
True
```

----------------------------------------

TITLE: Collecting and Analyzing Profiling Data with cProfile and pstats in Python
DESCRIPTION: This snippet demonstrates how to use cProfile to collect profiling data, and pstats to analyze and print the results. It shows how to enable and disable profiling, sort the stats, and output them to a string buffer.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/profile.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
pr = cProfile.Profile()
pr.enable()
# ... do something ...
pr.disable()
s = io.StringIO()
sortby = SortKey.CUMULATIVE
ps = pstats.Stats(pr, stream=s).sort_stats(sortby)
ps.print_stats()
print(s.getvalue())
```

----------------------------------------

TITLE: Displaying Date/Time in Log Messages in Python
DESCRIPTION: This snippet shows how to include the date and time in the log messages. By adding '%(asctime)s' to the format string, the timestamp will appear in each log entry. Custom date formatting can also be specified using the datefmt argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
import logging
logging.basicConfig(format='%(asctime)s %(message)s')
logging.warning('is when this event was logged.')
```

LANGUAGE: python
CODE:
```
import logging
logging.basicConfig(format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')
logging.warning('is when this event was logged.')
```

----------------------------------------

TITLE: Adding Optional Arguments in Argparse
DESCRIPTION: Demonstrates how to add an optional argument that takes a value. The --verbosity option is added, which can be provided with a value to enable verbose output.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/argparse.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("--verbosity", help="increase output verbosity")
args = parser.parse_args()
if args.verbosity:
    print("verbosity turned on")
```

----------------------------------------

TITLE: Selecting Random Elements from Sequences in Python
DESCRIPTION: The choice() function returns a random element from a non-empty sequence. The choices() function returns a k-sized list of elements chosen from the population with replacement.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/random.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
choice(seq)

choices(population, weights=None, *, cum_weights=None, k=1)
```

----------------------------------------

TITLE: Implementing Schwartzian Transform for complex sorting in Python
DESCRIPTION: Shows how to sort a list based on a metric using the key argument of list.sort() method, which is Python's implementation of the Schwartzian Transform sorting technique.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_45

LANGUAGE: python
CODE:
```
Isorted = L[:]
Isorted.sort(key=lambda s: int(s[10:15]))
```

----------------------------------------

TITLE: Determining Path Relativity - pathlib Python
DESCRIPTION: Using the `is_relative_to` method, this snippet checks if a certain path is relative to another without accessing the filesystem. The method bases its decision on string comparison, illustrated with examples.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
>>> p = PurePath('/etc/passwd')
>>> p.is_relative_to('/etc')
True
>>> p.is_relative_to('/usr')
False

>>> u = PurePath('/usr')
>>> u == p or u in p.parents
False
```

----------------------------------------

TITLE: Using assert_awaited_once with AsyncMock
DESCRIPTION: Demonstrates how to use assert_awaited_once to verify that an AsyncMock was awaited exactly once, with an error raised if awaited multiple times.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_28

LANGUAGE: python
CODE:
```
>>> mock = AsyncMock()
>>> async def main():
...     await mock()
...
>>> asyncio.run(main())
>>> mock.assert_awaited_once()
>>> asyncio.run(main())
>>> mock.assert_awaited_once()
Traceback (most recent call last):
...
AssertionError: Expected mock to have been awaited once. Awaited 2 times.
```

----------------------------------------

TITLE: Creating and Managing Tasks with asyncio Python
DESCRIPTION: Describes creating tasks with asyncio.create_task(), highlighting the importance of holding references to tasks and handling task results using callbacks to prevent premature garbage collection.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
background_tasks = set()

for i in range(10):
    task = asyncio.create_task(some_coro(param=i))

    # Add task to the set. This creates a strong reference.
    background_tasks.add(task)

    # To prevent keeping references to finished tasks forever,
    # make each task remove its own reference from the set after
    # completion:
    task.add_done_callback(background_tasks.discard)
```

----------------------------------------

TITLE: Creating Independent Iterators with Tee
DESCRIPTION: The tee function allows the creation of multiple independent iterators from a single input iterable, useful for scenarios where multiple traversals of the same iterable are needed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
.. function:: tee(iterable, n=2)

   Return *n* independent iterators from a single iterable.
```

----------------------------------------

TITLE: Generator Function Example in Python
DESCRIPTION: Example demonstrating the behavior of generators and generator functions, including next(), send(), throw(), and close() methods. Shows exception handling and cleanup behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/expressions.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
def echo(value=None):
    print("Execution starts when 'next()' is called for the first time.")
    try:
        while True:
            try:
                value = (yield value)
            except Exception as e:
                value = e
    finally:
        print("Don't forget to clean up when 'close()' is called.")

generator = echo(1)
print(next(generator))
print(next(generator))
print(generator.send(2))
generator.throw(TypeError, "spam")
generator.close()
```

----------------------------------------

TITLE: Specializing JSON Object Encoding in Python
DESCRIPTION: Shows how to handle custom Python objects (like complex numbers) during JSON serialization by providing a custom encoder function to the default parameter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/json.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> import json
>>> def custom_json(obj):
...     if isinstance(obj, complex):
...         return {'__complex__': True, 'real': obj.real, 'imag': obj.imag}
...     raise TypeError(f'Cannot serialize object of {type(obj)}')
...
>>> json.dumps(1 + 2j, default=custom_json)
'{"__complex__": true, "real": 1.0, "imag": 2.0}'
```

----------------------------------------

TITLE: Defining Custom Type Converters with Argparse in Python
DESCRIPTION: This snippet demonstrates how to define custom type converters in argparse to modify command-line input for pre-processing. The code defines arguments with custom prefixes and uses lambda functions for type conversion. Dependencies include the argparse module, and it showcases differentiation of arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/argparse.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
import argparse
parser = argparse.ArgumentParser(prefix_chars='-+')
parser.add_argument('-a', metavar='<value>', action='append',
                   type=lambda x: ('-', x))
parser.add_argument('+a', metavar='<value>', action='append',
                   type=lambda x: ('+', x))
args = parser.parse_args()
print(args)
```

----------------------------------------

TITLE: Python Match Statement Sequence Pattern with Star
DESCRIPTION: Demonstrates Python's `match` statement using a sequence pattern with the `*` operator to match remaining elements or as a wildcard. The example shows capturing the rest of a sequence (`*rest`) and using a simple wildcard (`*_`). This syntax is parsed into `MatchSequence` and `MatchStar` AST nodes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_42

LANGUAGE: Python
CODE:
```
match x:
    case [1, 2, *rest]:
        ...
    case [*_]:
        ...
```

----------------------------------------

TITLE: Creating Bytearray Objects
DESCRIPTION: Shows various methods of creating bytearray objects with different initialization techniques
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_41

LANGUAGE: python
CODE:
```
bytearray()
```

LANGUAGE: python
CODE:
```
bytearray(10)
```

LANGUAGE: python
CODE:
```
bytearray(range(20))
```

LANGUAGE: python
CODE:
```
bytearray(b'Hi!')
```

----------------------------------------

TITLE: Creating HMAC Object with Key and Digest Algorithm
DESCRIPTION: Initializes a new HMAC object with a secret key, optional message, and specified digest algorithm. Supports various hash algorithms through hashlib.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/hmac.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
hmac.new(key, msg=None, digestmod)
```

----------------------------------------

TITLE: Creating a Base-2 Integer Conversion Function Using Partial in Python
DESCRIPTION: Demonstrates using the partial function to create a new callable that behaves like the int function with a default base of 2. This example shows how to partially apply arguments to create specialized functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> basetwo = partial(int, base=2)
>>> basetwo.__doc__ = 'Convert base 2 string to an int.'
>>> basetwo('10010')
18
```

----------------------------------------

TITLE: Defining Function with Var-Positional and Var-Keyword Parameters in Python
DESCRIPTION: Illustrates a function definition in Python that can accept an arbitrary number of positional (*args) and keyword (**kwargs) arguments. This function structure is useful for creating flexible APIs. The function takes any additional arguments after mandatory or keyword-only ones.
SOURCE: https://github.com/python/cpython/blob/main/Doc/glossary.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
def func(*args, **kwargs): ...
```

----------------------------------------

TITLE: File Management with shutil Module in Python
DESCRIPTION: Demonstrates higher-level file operations using the shutil module for copying and moving files and directories.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> import shutil
>>> shutil.copyfile('data.db', 'archive.db')
'archive.db'
>>> shutil.move('/build/executables', 'installdir')
'installdir'
```

----------------------------------------

TITLE: Implementing Async For Loop in Python
DESCRIPTION: Demonstrates the usage of the `async for` statement to iterate over asynchronous iterables. The snippet provides an equivalent structure using `await` to handle `__aiter__` and `__anext__` on the asynchronous iterator.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
async for TARGET in ITER:
    SUITE
else:
    SUITE2
```

LANGUAGE: python
CODE:
```
iter = (ITER)
iter = type(iter).__aiter__(iter)
running = True

while running:
    try:
        TARGET = await type(iter).__anext__(iter)
    except StopAsyncIteration:
        running = False
    else:
        SUITE
else:
    SUITE2
```

----------------------------------------

TITLE: Using to_thread() for IO-bound operations in Python
DESCRIPTION: Example demonstrating how to use asyncio.to_thread() to run blocking IO-bound functions in a separate thread without blocking the event loop. This preserves concurrency while handling operations that would otherwise block.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
def blocking_io():
    print(f"start blocking_io at {time.strftime('%X')}")
    # Note that time.sleep() can be replaced with any blocking
    # IO-bound operation, such as file operations.
    time.sleep(1)
    print(f"blocking_io complete at {time.strftime('%X')}")

async def main():
    print(f"started main at {time.strftime('%X')}")

    await asyncio.gather(
        asyncio.to_thread(blocking_io),
        asyncio.sleep(1))

    print(f"finished main at {time.strftime('%X')}")


asyncio.run(main())

# Expected output:
#
# started main at 19:50:53
# start blocking_io at 19:50:53
# blocking_io complete at 19:50:54
# finished main at 19:50:54
```

----------------------------------------

TITLE: Using Functions as side_effect for Dynamic Return Values in Python
DESCRIPTION: Demonstrates setting side_effect to a function that dynamically determines return values based on the arguments passed to the mock. This allows for more complex mock behaviors.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
vals = {(1, 2): 1, (2, 3): 2}
def side_effect(*args):
    return vals[args]

mock = MagicMock(side_effect=side_effect)
mock(1, 2)
mock(2, 3)
```

----------------------------------------

TITLE: Scheduling callback threadsafe
DESCRIPTION: This code shows how to schedule a callback function to be executed in the asyncio event loop's thread from another OS thread. `loop.call_soon_threadsafe` ensures that the callback is safely added to the event loop's queue for execution.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-dev.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
loop.call_soon_threadsafe(callback, *args)
```

----------------------------------------

TITLE: Asserting Mock Call Arguments in Python
DESCRIPTION: Example of assert_called_with() to verify the arguments of the last mock call
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
mock = Mock()
mock.method(1, 2, 3, test='wow')
<Mock name='mock.method()' id='...'>
mock.method.assert_called_with(1, 2, 3, test='wow')
```

----------------------------------------

TITLE: Configuring Mock Attributes in Python
DESCRIPTION: Demonstrates how to configure attributes of Mock objects using keyword arguments. This includes setting return values and side effects for nested mock objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
>>> m = MagicMock(attribute=3, other='fish')
>>> m.attribute
3
>>> m.other
'fish'

>>> attrs = {'method.return_value': 3, 'other.side_effect': KeyError}
>>> mock = Mock(some_attribute='eggs', **attrs)
>>> mock.some_attribute
'eggs'
>>> mock.method()
3
>>> mock.other()
Traceback (most recent call last):
  ...
KeyError
```

----------------------------------------

TITLE: Getting the Origin Type with get_origin in Python
DESCRIPTION: Demonstrates the usage of the `get_origin` function to retrieve the unsubscripted base type from various type hints, including generics, unions, Annotated, and ParamSpec attributes. Returns `None` for non-generic types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_177

LANGUAGE: python
CODE:
```
assert get_origin(str) is None
assert get_origin(Dict[str, int]) is dict
assert get_origin(Union[int, str]) is Union
assert get_origin(Annotated[str, "metadata"]) is Annotated
P = ParamSpec('P')
assert get_origin(P.args) is P
assert get_origin(P.kwargs) is P
```

----------------------------------------

TITLE: Creating Worker Processes in Python
DESCRIPTION: This snippet demonstrates the creation of multiple worker processes using the multiprocessing library. It utilizes a list to keep track of the workers and a queue for inter-process communication. After starting all worker processes, it waits for each to complete before concluding the logging thread.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
workers = []
for i in range(5):
    wp = Process(target=worker_process, name='worker %d' % (i + 1), args=(q,))
    workers.append(wp)
    wp.start()
logging.config.dictConfig(d)
lp = threading.Thread(target=logger_thread, args=(q,))
lp.start()
# At this point, the main process could do some useful work of its own
# Once it's done that, it can wait for the workers to terminate...
for wp in workers:
    wp.join()
# And now tell the logging thread to finish up, too
q.put(None)
lp.join()
```

----------------------------------------

TITLE: Using sleep Function in Python
DESCRIPTION: Suspends execution of the calling thread for the given number of seconds. The argument may be a floating-point number for more precise sleep time. Implementation varies by platform, using high-resolution timers when available.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/time.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
sleep(secs)
```

----------------------------------------

TITLE: Using connection context manager in Python with sqlite3
DESCRIPTION: This snippet demonstrates how to use a Connection object as a context manager to automatically handle transactions. It shows examples of successful and failed transactions within a 'with' statement.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_30

LANGUAGE: Python
CODE:
```
con = sqlite3.connect(":memory:")
con.execute("CREATE TABLE lang(id INTEGER PRIMARY KEY, name VARCHAR UNIQUE)")

# Successful, con.commit() is called automatically afterwards
with con:
    con.execute("INSERT INTO lang(name) VALUES(?)", ("Python",))

# con.rollback() is called after the with block finishes with an exception,
# the exception is still raised and must be caught
try:
    with con:
        con.execute("INSERT INTO lang(name) VALUES(?)", ("Python",))
except sqlite3.IntegrityError:
    print("couldn't add Python twice")

# Connection object used as context manager only commits or rollbacks transactions,
# so the connection object should be closed manually
con.close()
```

----------------------------------------

TITLE: Changing Log Levels in Python Logging
DESCRIPTION: Shows how to change the logging level to get more or less detailed information in the log output.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_55

LANGUAGE: shell
CODE:
```
$ python app.py --log-level DEBUG start foo
DEBUG start About to start foo
INFO start Started the 'foo' service.

$ python app.py --log-level DEBUG stop foo bar
DEBUG stop About to stop 'foo' and 'bar'
INFO stop Stopped the 'foo' and 'bar' services.

$ python app.py --log-level DEBUG restart foo bar baz
DEBUG restart About to restart 'foo', 'bar' and 'baz'
INFO restart Restarted the 'foo', 'bar' and 'baz' services.
```

----------------------------------------

TITLE: Guarding Limited Resources with BoundedSemaphore Python
DESCRIPTION: Shows how a `BoundedSemaphore` can be used to control access to resources with a fixed capacity, like database connections. The semaphore is initialized with the maximum number of allowed concurrent accesses. Threads use the `acquire()` and `release()` methods (often implicitly via the `with` statement) to manage their access, ensuring the capacity limit is not exceeded. The `BoundedSemaphore` raises an error if released too many times.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/threading.rst#_snippet_4

LANGUAGE: python
CODE:
```
maxconnections = 5
# ...
pool_sema = BoundedSemaphore(value=maxconnections)
```

LANGUAGE: python
CODE:
```
with pool_sema:
```

----------------------------------------

TITLE: Creating RotatingFileHandler Class - Python
DESCRIPTION: This class handles the creation of log files that rotate when they reach a specified size. It includes parameters for maximum file size, backup counts, and error handling during logging operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
class RotatingFileHandler(filename, mode='a', maxBytes=0, backupCount=0, encoding=None, delay=False, errors=None):
    Returns a new instance of the :class:`RotatingFileHandler` class. The specified
    file is opened and used as the stream for logging. If *mode* is not specified,
    ``'a'`` is used.  If *encoding* is not ``None``, it is used to open the file
    with that encoding.  If *delay* is true, then file opening is deferred until the
    first call to :meth:`emit`.  By default, the file grows indefinitely. If
    *errors* is provided, it determines how encoding errors are handled.
```

----------------------------------------

TITLE: Demonstrating Sliding Window Function in Python
DESCRIPTION: This snippet demonstrates the usage of a function, sliding_window, which yields sequential windows of size n from a given iterable. It highlights behavior with different window sizes, including cases with insufficient data and when n is zero or negative.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_79

LANGUAGE: Python
CODE:
```
>>> list(sliding_window('ABCDEFG', 8))
[]
>>> try:
...     list(sliding_window('ABCDEFG', -1))
... except ValueError:
...     'zero or negative n not supported'
...
'zero or negative n not supported'
>>> try:
...     list(sliding_window('ABCDEFG', 0))
... except ValueError:
...     'zero or negative n not supported'
...
'zero or negative n not supported'
```

----------------------------------------

TITLE: Counting Elements in a Sequence Using Dictionary in Python
DESCRIPTION: This code snippet shows how to count the occurrences of elements in a sequence using a dictionary. It uses the get method with a default value to handle new elements efficiently.
SOURCE: https://github.com/python/cpython/blob/main/Objects/dictnotes.txt#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
for e in seqn:
  d[e] = d.get(e,0) + 1
```

----------------------------------------

TITLE: Writing Data to WriteTransport in Python
DESCRIPTION: This method writes data bytes to the transport asynchronously. It buffers the data and arranges for it to be sent out without blocking.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
WriteTransport.write(data)
```

----------------------------------------

TITLE: Creating an Iterator with islice
DESCRIPTION: This function creates an iterator that returns selected elements from the input iterable, functioning similarly to sequence slicing but without supporting negative values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
.. function:: islice(iterable, stop)
              islice(iterable, start, stop[, step])

   Make an iterator that returns selected elements from the iterable.
   Works like sequence slicing but does not support negative values for
   *start*, *stop*, or *step*.

   If *start* is zero or ``None``, iteration starts at zero.  Otherwise,
   elements from the iterable are skipped until *start* is reached.

   If *stop* is ``None``, iteration continues until the input is
   exhausted, if at all.  Otherwise, it stops at the specified position.

   If *step* is ``None``, the step defaults to one.  Elements are returned
   consecutively unless *step* is set higher than one which results in
   items being skipped.
```

----------------------------------------

TITLE: Demonstrating rstrip Method in Python bytes Objects
DESCRIPTION: Shows how to remove trailing characters from bytes objects using the rstrip() method. The method removes specified bytes from the end of the sequence until it encounters a byte not in the specified set.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_48

LANGUAGE: python
CODE:
```
>>> b'   spacious   '.rstrip()
b'   spacious'
>>> b'mississippi'.rstrip(b'ipz')
b'mississ'
```

----------------------------------------

TITLE: Itertools Recipe: sliding_window function
DESCRIPTION: Function that collects data into overlapping fixed-length chunks or blocks using a deque with maxlen for efficiency.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_41

LANGUAGE: python
CODE:
```
def sliding_window(iterable, n):
    "Collect data into overlapping fixed-length chunks or blocks."
    # sliding_window('ABCDEFG', 4) → ABCD BCDE CDEF DEFG
    iterator = iter(iterable)
    window = deque(islice(iterator, n - 1), maxlen=n)
    for x in iterator:
        window.append(x)
        yield tuple(window)
```

----------------------------------------

TITLE: Downloading a file using urlretrieve with urllib.request
DESCRIPTION: This example demonstrates how to download a file from a URL using urllib.request.urlretrieve. It retrieves the content from the given URL and saves it to a local file. The function returns a tuple containing the filename of the saved file and the headers of the HTTP response.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_53

LANGUAGE: python
CODE:
```
>>> import urllib.request
>>> local_filename, headers = urllib.request.urlretrieve('http://python.org/')
>>> html = open(local_filename)
>>> html.close()
```

----------------------------------------

TITLE: Python Union Flattening Example
DESCRIPTION: Shows how nested `Union` types are automatically flattened into a single `Union` with all constituent types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_59

LANGUAGE: python
CODE:
```
Union[Union[int, str], float] == Union[int, str, float]
```

----------------------------------------

TITLE: Sorting by Cumulative Time and Printing Top 10
DESCRIPTION: This code snippet sorts the profiling data by cumulative time spent in a function (including subfunctions) and prints the top 10 most significant lines.  This helps identify time-consuming algorithms.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/profile.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
p.sort_stats(SortKey.CUMULATIVE).print_stats(10)
```

----------------------------------------

TITLE: Comparing Different Summation Methods for Precision in Python
DESCRIPTION: Demonstrates the precision differences between various summation methods, including Fraction-based exact summation, math.fsum(), sum(), and manual accumulation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/floatingpoint.rst#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
>>> arr = [-0.10430216751806065, -266310978.67179024, 143401161448607.16,
...        -143401161400469.7, 266262841.31058735, -0.003244936839808227]
>>> float(sum(map(Fraction, arr)))   # Exact summation with single rounding
8.042173697819788e-13
>>> math.fsum(arr)                   # Single rounding
8.042173697819788e-13
>>> sum(arr)                         # Multiple roundings in extended precision
8.042178034628478e-13
>>> total = 0.0
>>> for x in arr:
...     total += x                   # Multiple roundings in standard precision
...
>>> total                            # Straight addition has no correct digits!
-0.0051575902860057365
```

----------------------------------------

TITLE: Mocking Imports with patch.dict
DESCRIPTION: Shows how to mock module imports using patch.dict to modify sys.modules temporarily.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_41

LANGUAGE: python
CODE:
```
import sys
mock = Mock()
with patch.dict('sys.modules', {'fooble': mock}):
    import fooble
    fooble.blob()
assert 'fooble' not in sys.modules
mock.blob.assert_called_once_with()
```

----------------------------------------

TITLE: Email Structure Analysis Example
DESCRIPTION: Example demonstrating how to analyze the structure of a multipart email message using walk() method and checking multipart status of each part.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.message.rst#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> from email.iterators import _structure
>>> for part in msg.walk():
...     print(part.get_content_maintype() == 'multipart',
...           part.is_multipart())
True True
False False
False True
False False
False False
False True
False False
>>> _structure(msg)
multipart/report
    text/plain
    message/delivery-status
        text/plain
        text/plain
    message/rfc822
        text/plain
```

----------------------------------------

TITLE: File Pattern Matching with Path.glob()
DESCRIPTION: Shows how to use Path.glob() to match files using patterns. Supports recursive matching and case sensitivity options.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_39

LANGUAGE: python
CODE:
```
>>> sorted(Path('.').glob('*.py'))
[PosixPath('pathlib.py'), PosixPath('setup.py'), PosixPath('test_pathlib.py')]
>>> sorted(Path('.').glob('*/*.py'))
[PosixPath('docs/conf.py')]
>>> sorted(Path('.').glob('**/*.py'))
[PosixPath('build/lib/pathlib.py'),
 PosixPath('docs/conf.py'),
 PosixPath('pathlib.py'),
 PosixPath('setup.py'),
 PosixPath('test_pathlib.py')]
```

----------------------------------------

TITLE: quote Function Definition
DESCRIPTION: The quote function replaces special characters in a string using %{xx} escape. Letters, digits, and the characters '_.-~' are not quoted. By default, this function is intended for quoting the path section of a URL. The safe parameter specifies additional ASCII characters that should not be quoted, and the encoding and errors parameters specify how to deal with non-ASCII characters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.parse.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
.. function:: quote(string, safe='/', encoding=None, errors=None)

   Replace special characters in *string* using the :samp:`%{xx}` escape. Letters,
   digits, and the characters ``'_.-~'`` are never quoted. By default, this
   function is intended for quoting the path section of a URL. The optional
   *safe* parameter specifies additional ASCII characters that should not be
   quoted --- its default value is ``'/'``.

   *string* may be either a :class:`str` or a :class:`bytes` object.

   .. versionchanged:: 3.7
      Moved from :rfc:`2396` to :rfc:`3986` for quoting URL strings. "~" is now
      included in the set of unreserved characters.

   The optional *encoding* and *errors* parameters specify how to deal with
   non-ASCII characters, as accepted by the :meth:`str.encode` method.
   *encoding* defaults to ``'utf-8'``. 
   *errors* defaults to ``'strict'``, meaning unsupported characters raise a
   :class:`UnicodeEncodeError`.
   *encoding* and *errors* must not be supplied if *string* is a
   :class:`bytes`, or a :class:`TypeError` is raised.

   Note that ``quote(string, safe, encoding, errors)`` is equivalent to
   ``quote_from_bytes(string.encode(encoding, errors), safe)``.

   Example: ``quote('/El Niño/')`` yields ``'/El%20Ni%C3%B1o/'``.

```

----------------------------------------

TITLE: Generating Cryptographically Secure Random Bytes in Python
DESCRIPTION: Provides functions for generating random bytes using system-specific entropy sources, with support for different operating systems and careful consideration of randomness quality
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_85

LANGUAGE: python
CODE:
```
def getrandom(size, flags=0):
    # Get random bytes from system entropy sources
    pass
```

LANGUAGE: python
CODE:
```
def urandom(size):
    # Return cryptographically suitable random bytes
    pass
```

----------------------------------------

TITLE: Parsing CSV Strings - Python
DESCRIPTION: This snippet demonstrates how to parse CSV formatted strings using Python's csv module. It shows how to read a CSV from a string representation and print the resulting rows.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/csv.rst#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
import csv
for row in csv.reader(['one,two,three']):
    print(row)
```

----------------------------------------

TITLE: Extract Entire tar.gz Archive with 'data' Filter - Python
DESCRIPTION: This snippet demonstrates how to open a gzip-compressed tar archive (`sample.tar.gz`) and extract its entire contents to the current directory. It explicitly applies the 'data' extraction filter for enhanced safety during extraction.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_30

LANGUAGE: Python
CODE:
```
import tarfile
tar = tarfile.open("sample.tar.gz")
tar.extractall(filter='data')
tar.close()
```

----------------------------------------

TITLE: Filtering Lists in Python
DESCRIPTION: Shows a technique to safely filter out unwanted elements from a list, in this case, NaN values, by creating a new list. This approach avoids modifying the list while looping over it.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/datastructures.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
>>> import math
>>> raw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8]
>>> filtered_data = []
>>> for value in raw_data:
...     if not math.isnan(value):
...         filtered_data.append(value)
...
>>> filtered_data
[56.2, 51.7, 55.3, 52.5, 47.8]
```

----------------------------------------

TITLE: Sending Email with smtplib in Python
DESCRIPTION: Demonstrates how to send email using the smtplib module, which provides access to SMTP protocol client functionality.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
>>> import smtplib
>>> server = smtplib.SMTP('localhost')
>>> server.sendmail('soothsayer@example.org', 'jcaesar@example.org',
... """To: jcaesar@example.org
... From: soothsayer@example.org
...
... Beware the Ides of March.
... """)
>>> server.quit()
```

----------------------------------------

TITLE: Basic Usage of fileinput Module in Python
DESCRIPTION: Demonstrates the typical usage pattern of the fileinput module to process lines from multiple files. This code iterates over all files listed in command-line arguments (or stdin if none) and processes each line with UTF-8 encoding.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/fileinput.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import fileinput
for line in fileinput.input(encoding="utf-8"):
    process(line)
```

----------------------------------------

TITLE: Subprocess Run Enhancement
DESCRIPTION: Added new capture_output argument to subprocess.run for capturing command output.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.7.0b1.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
"subprocess.run(capture_output=True)"
```

----------------------------------------

TITLE: Annotating Functions with Python Callable
DESCRIPTION: Provides examples of using `collections.abc.Callable` to type hint functions and async functions. It shows how to specify argument types (as a list) and the return type for callables.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_10

LANGUAGE: Python
CODE:
```
from collections.abc import Callable, Awaitable

def feeder(get_next_item: Callable[[], str]) -> None:
    ...  # Body

def async_query(on_success: Callable[[int], None],
                on_error: Callable[[int, Exception], None]) -> None:
    ...  # Body

async def on_update(value: str) -> None:
    ...  # Body

callback: Callable[[str], Awaitable[None]] = on_update
```

----------------------------------------

TITLE: Creating Lambda Functions with Default Arguments to Fix Closure Behavior
DESCRIPTION: This solution demonstrates how to use default arguments in lambda functions to capture the current value of a loop variable at definition time rather than reference time.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
>>> squares = []
>>> for x in range(5):
...     squares.append(lambda n=x: n**2)
```

----------------------------------------

TITLE: Non-capturing Group Usage with re Module in Python
DESCRIPTION: This snippet demonstrates how to use non-capturing groups `(?:...)` in Python's `re` module. Non-capturing groups allow you to group parts of a regular expression without capturing the matched content. This is useful when you need to group expressions for repetition or alternation but don't need to retrieve the matched substring.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
>>> m = re.match("([abc])+", "abc")
>>> m.groups()
('c',)
>>> m = re.match("(?:[abc])+", "abc")
>>> m.groups()
()
```

----------------------------------------

TITLE: Using ZipFile as Context Manager in Python
DESCRIPTION: Example showing how to use ZipFile class with a context manager (with statement) to automatically handle file closure. The code creates a new ZIP file 'spam.zip' and writes a file 'eggs.txt' to it.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/zipfile.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
with ZipFile('spam.zip', 'w') as myzip:
    myzip.write('eggs.txt')
```

----------------------------------------

TITLE: Alternative Approaches to Dictionary Mocking in Python
DESCRIPTION: Two alternative methods for mocking dictionaries: using plain Mock with specific magic methods, or using MagicMock with dict as the spec argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_34

LANGUAGE: python
CODE:
```
>>> mock = Mock()
>>> mock.__getitem__ = Mock(side_effect=getitem)
>>> mock.__setitem__ = Mock(side_effect=setitem)
```

LANGUAGE: python
CODE:
```
>>> mock = MagicMock(spec_set=dict)
>>> mock.__getitem__.side_effect = getitem
>>> mock.__setitem__.side_effect = setitem
```

----------------------------------------

TITLE: Understanding Shallow Copying in Python Sequence Multiplication
DESCRIPTION: Demonstrates the issue with repeated references when using sequence multiplication, showing how modifying one element affects all references to the same object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
>>> lists = [[]] * 3
>>> lists
[[], [], []]
>>> lists[0].append(3)
>>> lists
[[3], [3], [3]]
```

----------------------------------------

TITLE: Creating a Bidirectional Pipe in Python
DESCRIPTION: The Pipe function returns a pair of Connection objects representing the ends of a pipe. If duplex is True (default), the pipe is bidirectional. The send method serializes objects using pickle, and recv recreates them.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
Pipe([duplex])
```

----------------------------------------

TITLE: Using staticmethod in Python Classes
DESCRIPTION: Demonstrates how to use the staticmethod decorator idiom to create a method that doesn't automatically transform into an instance method. This pattern is useful when you want a function to be part of a class namespace without requiring an instance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
def regular_function():
    ...

class C:
    method = staticmethod(regular_function)
```

----------------------------------------

TITLE: Tokenizing Shell Command for Popen Arguments using shlex in Python
DESCRIPTION: This example shows how to use shlex.split() to correctly tokenize a complex shell command into a sequence of arguments for Popen. It demonstrates handling of quoted strings and special characters in command arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/subprocess.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> import shlex, subprocess
>>> command_line = input()
/bin/vikings -input eggs.txt -output "spam spam.txt" -cmd "echo '$MONEY'"
>>> args = shlex.split(command_line)
>>> print(args)
['/bin/vikings', '-input', 'eggs.txt', '-output', 'spam spam.txt', '-cmd', "echo '$MONEY'"]
>>> p = subprocess.Popen(args) # Success!
```

----------------------------------------

TITLE: Python Immutable Object Behavior
DESCRIPTION: Shows how immutable objects behave differently from mutable objects when assigned to multiple variables.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
>>> x = 5  # ints are immutable
>>> y = x
>>> x = x + 1  # 5 can't be mutated, we are creating a new object here
>>> x
6
>>> y
5
```

----------------------------------------

TITLE: Pickle Dumps Function Definition
DESCRIPTION: Function that returns a pickled representation of an object as a bytes object. Accepts parameters for protocol version, import fixes, and buffer callback handling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pickle.rst#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
dumps(obj, protocol=None, *, fix_imports=True, buffer_callback=None)
```

----------------------------------------

TITLE: Basic Process Creation in Python
DESCRIPTION: Shows how to create and start a process using the Process class from the multiprocessing module. It defines a simple function that prints a greeting and demonstrates how to create, start, and join a process.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from multiprocessing import Process

def f(name):
    print('hello', name)

if __name__ == '__main__':
    p = Process(target=f, args=('bob',))
    p.start()
    p.join()
```

----------------------------------------

TITLE: Using assertLogs to Test Logging in Python
DESCRIPTION: Demonstrates how to use assertLogs to verify that specific log messages are generated. The context manager captures log records and provides access to both the raw LogRecord objects and the formatted output strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
with self.assertLogs('foo', level='INFO') as cm:
    logging.getLogger('foo').info('first message')
    logging.getLogger('foo.bar').error('second message')
self.assertEqual(cm.output, ['INFO:foo:first message',
                              'ERROR:foo.bar:second message'])
```

----------------------------------------

TITLE: URL Resource Management with closing() Function
DESCRIPTION: Example of using the closing() context manager with urlopen to ensure proper resource cleanup.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextlib.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
from contextlib import closing
from urllib.request import urlopen

with closing(urlopen('https://www.python.org')) as page:
    for line in page:
        print(line)
```

----------------------------------------

TITLE: Changing Path Name in Python using PurePath.with_name()
DESCRIPTION: Demonstrates how to use the with_name() method to create a new path with a changed name. It also shows error handling when the original path doesn't have a name.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
>>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')
>>> p.with_name('setup.py')
PureWindowsPath('c:/Downloads/setup.py')
>>> p = PureWindowsPath('c:/')
>>> p.with_name('setup.py')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/antoine/cpython/default/Lib/pathlib.py", line 751, in with_name
    raise ValueError("%r has an empty name" % (self,))
ValueError: PureWindowsPath('c:/') has an empty name
```

----------------------------------------

TITLE: Random Sampling in Python
DESCRIPTION: The sample() function returns a k-length list of unique elements chosen from the population sequence. It supports random sampling without replacement and can handle repeated elements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/random.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
sample(population, k, *, counts=None)
```

----------------------------------------

TITLE: Directory Scanning Example with os.scandir()
DESCRIPTION: Example demonstrating how to use os.scandir() to list non-hidden files in a directory. The code efficiently checks file types without making additional system calls in most cases.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_45

LANGUAGE: python
CODE:
```
with os.scandir(path) as it:
    for entry in it:
        if not entry.name.startswith('.') and entry.is_file():
            print(entry.name)
```

----------------------------------------

TITLE: Decorator Function Equivalent Implementation
DESCRIPTION: Shows the equivalent implementation of decorated functions without using decorator syntax.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
def func(): pass
func = f1(arg)(f2(func))
```

----------------------------------------

TITLE: Defining a Basic TypeVar (New Syntax)
DESCRIPTION: Shows the modern syntax for defining a basic type variable directly within a generic class definition.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_96

LANGUAGE: python
CODE:
```
class Sequence[T]:  # T is a TypeVar
    ...
```

----------------------------------------

TITLE: Eliminating Duplicates and Sorting in Python
DESCRIPTION: Illustrates using set to remove duplicates and sorting the unique elements in a sequence. The combination of sorted and set functions offers an idiomatic way to loop over unique sorted elements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/datastructures.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
>>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
>>> for f in sorted(set(basket)):
...     print(f)
...
apple
banana
orange
pear
```

----------------------------------------

TITLE: Implementing Basic Test Skipping in Python unittest
DESCRIPTION: Demonstrates how to use various skip decorators (@unittest.skip, @unittest.skipIf, @unittest.skipUnless) to conditionally skip test methods or entire test classes. Also shows how to skip tests within the test method itself.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
class MyTestCase(unittest.TestCase):

    @unittest.skip("demonstrating skipping")
    def test_nothing(self):
        self.fail("shouldn't happen")

    @unittest.skipIf(mylib.__version__ < (1, 3),
                     "not supported in this library version")
    def test_format(self):
        # Tests that work for only a certain version of the library.
        pass

    @unittest.skipUnless(sys.platform.startswith("win"), "requires Windows")
    def test_windows_support(self):
        # windows specific testing code
        pass

    def test_maybe_skipped(self):
        if not external_resource_available():
            self.skipTest("external resource not available")
        # test code that depends on the external resource
        pass
```

----------------------------------------

TITLE: Defining Dataclass With Mutable Default - Python
DESCRIPTION: This code snippet outlines an invalid approach for creating a dataclass with a mutable default argument, which would raise a ValueError. It demonstrates that two instances of class D sharing the same class variable x can lead to unintended interactions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dataclasses.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
@dataclass
class D:
    x: list = []      # This code raises ValueError
    def add(self, element):
        self.x.append(element)
```

----------------------------------------

TITLE: Annotating Tuples (Fixed, Variable Length, Empty) - Python
DESCRIPTION: Explains the special-casing of tuples in the typing system, allowing any number of type arguments for fixed-length tuples, `tuple[T, ...]` for variable-length tuples of a single type, and `tuple[()]` for empty tuples. Shows correct and incorrect assignments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_17

LANGUAGE: python
CODE:
```
# OK: ``x`` is assigned to a tuple of length 1 where the sole element is an int
x: tuple[int] = (5,)

# OK: ``y`` is assigned to a tuple of length 2;
# element 1 is an int, element 2 is a str
y: tuple[int, str] = (5, "foo")

# Error: the type annotation indicates a tuple of length 1,
# but ``z`` has been assigned to a tuple of length 3
z: tuple[int] = (1, 2, 3)

x: tuple[int, ...] = (1, 2)
# These reassignments are OK: ``tuple[int, ...]`` indicates x can be of any length
x = (1, 2, 3)
x = ()
# This reassignment is an error: all elements in ``x`` must be ints
x = ("foo", "bar")

# ``y`` can only ever be assigned to an empty tuple
y: tuple[()] = ()

z: tuple = ("foo", "bar")
# These reassignments are OK: plain ``tuple`` is equivalent to ``tuple[Any, ...]``
z = (1, 2, 3)
z = ()
```

----------------------------------------

TITLE: Performing Common Operations with Python Decimal Objects
DESCRIPTION: Illustrates how `Decimal` objects interact with standard Python functions and operations like `max()`, `min()`, `sorted()`, `sum()`, type conversions (`str`, `float`, `int`), and basic arithmetic (`*`, `%`).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_5

LANGUAGE: python
CODE:
```
>>> data = list(map(Decimal, '1.34 1.87 3.45 2.35 1.00 0.03 9.25'.split()))
>>> max(data)
Decimal('9.25')
>>> min(data)
Decimal('0.03')
>>> sorted(data)
[Decimal('0.03'), Decimal('1.00'), Decimal('1.34'), Decimal('1.87'),
 Decimal('2.35'), Decimal('3.45'), Decimal('9.25')]
>>> sum(data)
Decimal('19.29')
>>> a,b,c = data[:3]
>>> str(a)
'1.34'
>>> float(a)
1.34
>>> round(a, 1)
Decimal('1.3')
>>> int(a)
1
>>> a * 5
Decimal('6.70')
>>> a * b
Decimal('2.5058')
>>> c % a
Decimal('0.77')
```

----------------------------------------

TITLE: Creating a Secure SSL Context for Client Connections
DESCRIPTION: Demonstrates two approaches to create an SSL context: using the recommended create_default_context() function or manually configuring a context with proper security settings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
>>> context = ssl.create_default_context()
```

LANGUAGE: python
CODE:
```
>>> context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
>>> context.load_verify_locations("/etc/ssl/certs/ca-bundle.crt")
```

----------------------------------------

TITLE: Defining a Generator Function in Python
DESCRIPTION: This snippet shows how to define a simple generator function that yields a sequence of integers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
>>> def generate_ints(N):
...    for i in range(N):
...        yield i
```

----------------------------------------

TITLE: Using check_output for Shell Command Output in Python
DESCRIPTION: Example showing how to capture command output using subprocess.check_output with error handling via stderr
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/subprocess.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
subprocess.check_output(
    "ls non_existent_file; exit 0",
    stderr=subprocess.STDOUT,
    shell=True)
```

----------------------------------------

TITLE: Getting Package Version with importlib.metadata - Python
DESCRIPTION: Demonstrates how to use the `version()` function from `importlib.metadata` to quickly retrieve the installed version string for a specified distribution package name.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_16

LANGUAGE: python
CODE:
```
>>> version('wheel')  # doctest: +SKIP
'0.32.3'
```

----------------------------------------

TITLE: Comparing Expected Calls with call Objects in Python
DESCRIPTION: Demonstrates how to create a list of expected calls using the call object and compare it with mock_calls to verify the exact sequence of method calls.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
expected = [call.method(), call.attribute.method(10, x=53)]
mock.mock_calls == expected
```

----------------------------------------

TITLE: Computing Relative Path - pathlib Python
DESCRIPTION: This snippet showcases the `relative_to` method, used to compute a relative path. It handles scenarios where either the paths differ in starting point or represent different drives, leading to exceptions. The `walk_up` parameter allows relative path computation with `..` entries if needed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
>>> p = PurePosixPath('/etc/passwd')
>>> p.relative_to('/')
PurePosixPath('etc/passwd')
>>> p.relative_to('/etc')
PurePosixPath('passwd')
>>> p.relative_to('/usr')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "pathlib.py", line 941, in relative_to
    raise ValueError(error_message.format(str(self), str(formatted)))
ValueError: '/etc/passwd' is not in the subpath of '/usr' OR one path is relative and the other is absolute.

>>> p.relative_to('/usr', walk_up=True)
PurePosixPath('../etc/passwd')
>>> p.relative_to('foo', walk_up=True)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "pathlib.py", line 941, in relative_to
    raise ValueError(error_message.format(str(self), str(formatted)))
ValueError: '/etc/passwd' is not on the same drive as 'foo' OR one path is relative and the other is absolute.
```

----------------------------------------

TITLE: Python Exception Handling Syntax Update
DESCRIPTION: Demonstrates the new syntax in Python 3.14 allowing parentheses to be omitted when catching multiple exception types using 'except' or 'except*' without an 'as' clause. This simplifies the syntax for common multi-exception handling patterns.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_6

LANGUAGE: python
CODE:
```
try:
    release_new_sleep_token_album()
except AlbumNotFound, SongsTooGoodToBeReleased:
    print("Sorry, no new album this year.")
```

LANGUAGE: python
CODE:
```
# The same applies to except* (for exception groups):
try:
    release_new_sleep_token_album()
except* AlbumNotFound, SongsTooGoodToBeReleased:
    print("Sorry, no new album this year.")
```

----------------------------------------

TITLE: Nesting Dict and List Proxies in Multiprocessing
DESCRIPTION: Shows how to nest dictionary and list proxies together for hierarchical shared data structures. Demonstrates accessing and modifying values in nested proxy structures.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_37

LANGUAGE: python
CODE:
```
>>> l_outer = manager.list([ manager.dict() for i in range(2) ])
>>> d_first_inner = l_outer[0]
>>> d_first_inner['a'] = 1
>>> d_first_inner['b'] = 2
>>> l_outer[1]['c'] = 3
>>> l_outer[1]['z'] = 26
>>> print(l_outer[0])
{'a': 1, 'b': 2}
>>> print(l_outer[1])
{'c': 3, 'z': 26}
```

----------------------------------------

TITLE: Using AsyncIO Stream Drain Method
DESCRIPTION: Shows how to use the drain() method to handle flow control. This method waits until it's appropriate to resume writing to the stream, preventing buffer overflow.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-stream.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
writer.write(data)
await writer.drain()
```

----------------------------------------

TITLE: Comparing Strings with Unicode Normalization in Python
DESCRIPTION: This snippet demonstrates how to compare Unicode strings using normalization to handle characters represented by different sequences of code points.  It defines a function `compare_strs` that normalizes the input strings using the 'NFD' (Normalization Form Decomposition) form before comparing them, ensuring that strings with equivalent characters are considered equal, even if they are represented differently.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/unicode.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
import unicodedata

def compare_strs(s1, s2):
    def NFD(s):
        return unicodedata.normalize('NFD', s)

    return NFD(s1) == NFD(s2)

single_char = 'ê'
multiple_chars = '\N{LATIN SMALL LETTER E}\N{COMBINING CIRCUMFLEX ACCENT}'
print('length of first string=', len(single_char))
print('length of second string=', len(multiple_chars))
print(compare_strs(single_char, multiple_chars))
```

----------------------------------------

TITLE: URL-encoding query parameters in Python
DESCRIPTION: The urlencode function converts a mapping object or a sequence of two-element tuples to a percent-encoded ASCII text string. It supports various options for handling different types of input and encoding methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.parse.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
urlencode(query, doseq=False, safe='', encoding=None, errors=None, quote_via=quote_plus)
```

----------------------------------------

TITLE: Stepping into Function Calls - Pdb - Python
DESCRIPTION: Executes the current line and stops at the first possible occasion, which could be inside a called function or on the next line in the current function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_16



----------------------------------------

TITLE: Python Match Statement Mapping Pattern with Double Star
DESCRIPTION: Demonstrates Python's `match` statement using a mapping pattern with the `**` operator. The example shows matching specific keys and values (`{1: _, 2: _}`) and using `**rest` to capture the remaining key-value pairs in the mapping. This syntax is parsed into `MatchMapping` AST nodes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_43

LANGUAGE: Python
CODE:
```
match x:
    case {1: _, 2: _}:
        ...
    case {**rest}:
        ...
```

----------------------------------------

TITLE: Incrementing Dictionary Item - Python
DESCRIPTION: This Python function increments a dictionary item by key. It uses a `try...except KeyError` block to handle cases where the key is not initially present, setting the starting value to 0 in that case. It then adds 1 to the value and assigns it back to the dictionary key.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/intro.rst#_snippet_15

LANGUAGE: Python
CODE:
```
def incr_item(dict, key):
    try:
        item = dict[key]
    except KeyError:
        item = 0
    dict[key] = item + 1
```

----------------------------------------

TITLE: Adding Contextual Information to Log Records using Filters in Python
DESCRIPTION: Demonstrates how to add custom contextual information to LogRecord objects using a filter function without modifying the original record. Uses copy.copy() to create a new record and adds a 'user' field.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
import copy
import logging

def filter(record: logging.LogRecord):
    record = copy.copy(record)
    record.user = 'jim'
    return record

if __name__ == '__main__':
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    handler = logging.StreamHandler()
    formatter = logging.Formatter('%(message)s from %(user)-8s')
    handler.setFormatter(formatter)
    handler.addFilter(filter)
    logger.addHandler(handler)

    logger.info('A log message')
```

----------------------------------------

TITLE: Breakpoint Mechanism Implementation
DESCRIPTION: Implements PEP 553 adding a new built-in breakpoint() function that calls sys.breakpointhook(). By default uses pdb.set_trace() but can be customized.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.7.0a2.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
breakpoint()
sys.breakpointhook()
sys.__breakpointhook__
```

----------------------------------------

TITLE: Running pydoc from command line to display module documentation
DESCRIPTION: This command line example shows how to use pydoc to display documentation for the sys module. Running this command will show documentation in a style similar to Unix man pages.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pydoc.rst#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
python -m pydoc sys
```

----------------------------------------

TITLE: Getting formatted exception as string with format_exc
DESCRIPTION: Returns the current exception formatted as a string, similar to print_exc but returning the result instead of printing it.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
format_exc(limit=None, chain=True)
```

----------------------------------------

TITLE: Demonstrating Python Thread run() with args
DESCRIPTION: This snippet shows how the default `Thread.run()` method executes the target function provided during initialization, using arguments from the `args` parameter. It demonstrates that both list and tuple formats for `args` are accepted. Note that calling `run()` directly executes the target in the current thread, not a new thread.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/threading.rst#_snippet_1

LANGUAGE: python
CODE:
```
>>> from threading import Thread
>>> t = Thread(target=print, args=[1])
>>> t.run()
1
>>> t = Thread(target=print, args=(1,))
>>> t.run()
1
```

----------------------------------------

TITLE: Using patch as a Context Manager in Python
DESCRIPTION: Shows how to use patch as a context manager in a with statement to temporarily replace a method on a class and verify how it was called.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
with patch.object(ProductionClass, 'method', return_value=None) as mock_method:
    thing = ProductionClass()
    thing.method(1, 2, 3)

mock_method.assert_called_once_with(1, 2, 3)
```

----------------------------------------

TITLE: Using a Context Manager for Database Transactions in Python
DESCRIPTION: This snippet demonstrates how to use the DatabaseConnection context manager to handle database transactions, ensuring proper commit or rollback.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
db_connection = DatabaseConnection()
with db_connection as cursor:
    cursor.execute('insert into ...')
    cursor.execute('delete from ...')
    # ... more operations ...
```

----------------------------------------

TITLE: Defining an Enum with Methods - Python
DESCRIPTION: This snippet shows how to create an Enum class called Weekday with methods that demonstrate functionality such as retrieving the current day of the week.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/enum.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
>>> from datetime import date
>>> class Weekday(Enum):
...     MONDAY = 1
...     TUESDAY = 2
...     WEDNESDAY = 3
...     THURSDAY = 4
...     FRIDAY = 5
...     SATURDAY = 6
...     SUNDAY = 7
...     @classmethod
...     def today(cls):
...         print('today is %s' % cls(date.today().isoweekday()).name)
...
>>> dir(Weekday.SATURDAY)
['__class__', '__doc__', '__eq__', '__hash__', '__module__', 'name', 'today', 'value']
```

----------------------------------------

TITLE: Accessing Arguments by Position - Python
DESCRIPTION: Demonstrates how to access arguments passed to `str.format` using their positional index within the format string. Indices can be explicit or implicit (Python 3.1+), and arguments can be repeated.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/string.rst#_snippet_2

LANGUAGE: python
CODE:
```
>>> '{0}, {1}, {2}'.format('a', 'b', 'c')
'a, b, c'
>>> '{}, {}, {}'.format('a', 'b', 'c')  # 3.1+ only
'a, b, c'
>>> '{2}, {1}, {0}'.format('a', 'b', 'c')
'c, b, a'
>>> '{2}, {1}, {0}'.format(*'abc')      # unpacking argument sequence
'c, b, a'
>>> '{0}{1}{0}'.format('abra', 'cad')   # arguments' indices can be repeated
'abracadabra'
```

----------------------------------------

TITLE: Converting non-comparable types to strings for sorting
DESCRIPTION: This snippet demonstrates how to convert non-comparable data types (e.g., strings and integers) to strings before sorting using the `map` function and `str` conversion. This avoids `TypeError` exceptions during the sorting process when comparing strings and integers directly.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/sorting.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```

>>> data = ['twelve', '11', 10]
>>> sorted(map(str, data))
['10', '11', 'twelve']

```

----------------------------------------

TITLE: Unicode Escape Sequences in Python Strings
DESCRIPTION: This snippet illustrates how to include Unicode characters in Python string literals using escape sequences such as `\u` (4-digit hex code) and `\U` (8-digit hex code). It demonstrates how these escape sequences are used to represent specific Unicode code points within strings, and how the `ord` function can retrieve the numerical value of characters in the string.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/unicode.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> s = "a\xac\u1234\u20ac\U00008000"
... #     ^^^^ two-digit hex escape
... #         ^^^^^^ four-digit Unicode escape
... #                     ^^^^^^^^^^ eight-digit Unicode escape
>>> [ord(c) for c in s]
[97, 172, 4660, 8364, 32768]
```

----------------------------------------

TITLE: Determining File Size with os.path
DESCRIPTION: The getsize function returns the size of a file or directory, specified by path, in bytes. It raises OSError for inaccessible or non-existent files, with path-like object support since version 3.6.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
def getsize(path):
    return os.path.getsize(path)
```

----------------------------------------

TITLE: Efficiently Concatenating Bytes Objects in Python
DESCRIPTION: Shows how to efficiently accumulate multiple bytes objects using bytearray with in-place concatenation, which provides better performance than creating new immutable bytes objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_34

LANGUAGE: python
CODE:
```
result = bytearray()
for b in my_bytes_objects:
    result += b
```

----------------------------------------

TITLE: Creating Secure SMTP Connection with SSL in Python
DESCRIPTION: Example demonstrating how to create a secure SMTP connection using the default SSL context. This snippet shows how to properly establish a TLS connection to a mail server with certificate validation and hostname checking enabled.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_38

LANGUAGE: python
CODE:
```
>>> import ssl, smtplib
>>> smtp = smtplib.SMTP("mail.python.org", port=587)
>>> context = ssl.create_default_context()
>>> smtp.starttls(context=context)
(220, b'2.0.0 Ready to start TLS')
```

----------------------------------------

TITLE: Using Annotations in Python Functions and Variables
DESCRIPTION: This code snippet provides an example of using annotations for variables and function parameters in Python. It explains how annotations are lazily evaluated within annotation scopes and how they can be used for type hints, without affecting runtime semantics.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
x: annotation = 1
def f(param: annotation): ...
```

LANGUAGE: python
CODE:
```
def f() -> annotation: ...
```

----------------------------------------

TITLE: Using the Walrus Operator for Assignment Expressions in Python
DESCRIPTION: Demonstrates Python 3.8's walrus operator (:=) which allows variable assignment within expressions, specifically in a file reading loop.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/design.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
while chunk := fp.read(200):
   print(chunk)
```

----------------------------------------

TITLE: Structured Logging with JSON in Python
DESCRIPTION: This snippet demonstrates how to use JSON to serialize log events in a machine-parseable format. It defines a `StructuredMessage` class that takes a message and keyword arguments, and formats them into a JSON string using `json.dumps`. This enables structured logging where each log message contains a JSON representation of relevant data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_36

LANGUAGE: python
CODE:
```
import json
import logging

class StructuredMessage:
    def __init__(self, message, /, **kwargs):
        self.message = message
        self.kwargs = kwargs

    def __str__(self):
        return '%s >>> %s' % (self.message, json.dumps(self.kwargs))

_ = StructuredMessage   # optional, to improve readability

logging.basicConfig(level=logging.INFO, format='%(message)s')
logging.info(_('message 1', foo='bar', bar='baz', num=123, fnum=123.456))
```

----------------------------------------

TITLE: PEP 540: Forced UTF-8 Runtime Mode in Python 3.7
DESCRIPTION: This snippet documents PEP 540, which introduces a command-line option and environment variable to force UTF-8 encoding in the Python interpreter. This mode disregards locale settings and changes error handling for standard input/output streams to accommodate the new encoding strategy.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_2



----------------------------------------

TITLE: Displaying Argparse Help Message in Python
DESCRIPTION: This snippet demonstrates how to trigger the automatically generated help message in `argparse`. It uses the `-h` flag, which is a standard convention for displaying help.  This shows the usage instructions for the script.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> parser.parse_args('-h'.split())
```

----------------------------------------

TITLE: Logging Configuration Example in Python
DESCRIPTION: This Python script sets up logging using the provided JSON configuration. It logs messages at different severity levels and showcases how the logger can be utilized within an application.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
import json
import logging
import logging.config

CONFIG = '''
{
    "version": 1,
    "disable_existing_loggers": false,
    "formatters": {
        "simple": {
            "format": "%(levelname)-8s - %(message)s"
        }
    },
    "handlers": {
        "stdout": {
            "class": "logging.StreamHandler",
            "level": "INFO",
            "formatter": "simple",
            "stream": "ext://sys.stdout",
            "filters": ["warnings_and_below"]
        },
        "stderr": {
            "class": "logging.StreamHandler",
            "level": "ERROR",
            "formatter": "simple",
            "stream": "ext://sys.stderr"
        },
        "file": {
            "class": "logging.FileHandler",
            "formatter": "simple",
            "filename": "app.log",
            "mode": "w"
        }
    },
    "root": {
        "level": "DEBUG",
        "handlers": [
            "stderr",
            "stdout",
            "file"
        ]
    }
}
'''

logging.config.dictConfig(json.loads(CONFIG))
logging.debug('A DEBUG message')
logging.info('An INFO message')
logging.warning('A WARNING message')
logging.error('An ERROR message')
logging.critical('A CRITICAL message')
```

----------------------------------------

TITLE: Using the reversed() Function for Reverse Iteration in Python
DESCRIPTION: Demonstrates the new reversed() built-in function, which returns an iterator that yields elements from a sequence in reverse order. This is more efficient than using extended slicing for reverse iteration.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> for i in reversed(xrange(1,4)):
...    print i
...
3
2
1
```

----------------------------------------

TITLE: Clearing Breakpoints - Pdb - Python
DESCRIPTION: Clears breakpoints. Can clear breakpoints at a specific file and line number, a list of breakpoint numbers, or all breakpoints (with confirmation).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_10



----------------------------------------

TITLE: Writing Text to Files with pathlib
DESCRIPTION: The example shows how to create or rewrite a file using the Path.write_text method from the pathlib module. This function simplifies file writing operations in Python by using Path objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_24

LANGUAGE: Python
CODE:
```
>>> import pathlib
>>> p = pathlib.Path('~/spam42')
>>> p.expanduser().write_text('ham')
3
```

----------------------------------------

TITLE: Directory Creation with mkdir() in Python
DESCRIPTION: Creates a directory with specified path and permissions. Handles special mode handling on Windows for 0o700. Raises FileExistsError if directory exists and FileNotFoundError if parent directory is missing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_39

LANGUAGE: python
CODE:
```
mkdir(path, mode=0o777, *, dir_fd=None)
```

----------------------------------------

TITLE: NamedTuple Type Hints Implementation
DESCRIPTION: Example of using typing.NamedTuple to create a Component class with type hints for part number, weight, and optional description.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
class Component(NamedTuple):
    part_number: int
    weight: float
    description: Optional[str] = None
```

----------------------------------------

TITLE: Formatting datetime with ISO format
DESCRIPTION: Shows different ways to format datetime objects using isoformat() with timespec parameter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
>>> from datetime import datetime
>>> datetime.now().isoformat(timespec='minutes')   # doctest: +SKIP
'2002-12-25T00:00'
>>> dt = datetime(2015, 1, 1, 12, 30, 59, 0)
>>> dt.isoformat(timespec='microseconds')
'2015-01-01T12:30:59.000000'
```

----------------------------------------

TITLE: Defining an Abstract Base Class using ABC in Python
DESCRIPTION: Demonstrates how to create an abstract base class by inheriting from ABC. This approach simplifies the creation of ABCs by avoiding direct metaclass usage.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/abc.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from abc import ABC

class MyABC(ABC):
    pass
```

----------------------------------------

TITLE: Discovering Test Modules in Python (unittest)
DESCRIPTION: The 'discover' method finds all test modules by recursively searching through subdirectories from a specified starting directory. It returns a TestSuite object containing the discovered tests, adhering to the defined pattern for file matching.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_38

LANGUAGE: Python
CODE:
```
.. method:: discover(start_dir, pattern='test*.py', top_level_dir=None)

   Find all the test modules by recursing into subdirectories from the
   specified start directory, and return a TestSuite object containing them.
   Only test files that match *pattern* will be loaded. (Using shell style
   pattern matching.) Only module names that are importable (i.e. are valid
   Python identifiers) will be loaded.

   All test modules must be importable from the top level of the project. If
   the start directory is not the top level directory then *top_level_dir*
   must be specified separately.

   If importing a module fails, for example due to a syntax error, then
   this will be recorded as a single error and discovery will continue.  If
   the import failure is due to :exc:`SkipTest` being raised, it will be
   recorded as a skip instead of an error.

   If a package (a directory containing a file named :file:`__init__.py`) is
   found, the package will be checked for a ``load_tests`` function. If this
   exists then it will be called
   ``package.load_tests(loader, tests, pattern)``. Test discovery takes care
   to ensure that a package is only checked for tests once during an
   invocation, even if the load_tests function itself calls
   ``loader.discover``.

   If ``load_tests`` exists then discovery does *not* recurse into the
   package, ``load_tests`` is responsible for loading all tests in the
   package.

   The pattern is deliberately not stored as a loader attribute so that
   packages can continue discovery themselves.

   *top_level_dir* is stored internally, and used as a default to any
   nested calls to ``discover()``. That is, if a package's ``load_tests``
   calls ``loader.discover()``, it does not need to pass this argument.

   *start_dir* can be a dotted module name as well as a directory.

   .. versionadded:: 3.2

   .. versionchanged:: 3.4
      Modules that raise :exc:`SkipTest` on import are recorded as skips,
      not errors.

      *start_dir* can be a :term:`namespace packages <namespace package>`.

      Paths are sorted before being imported so that execution order is the
      same even if the underlying file system's ordering is not dependent
      on file name.

   .. versionchanged:: 3.5
      Found packages are now checked for ``load_tests`` regardless of
      whether their path matches *pattern*, because it is impossible for
      a package name to match the default pattern.

   .. versionchanged:: 3.11
      *start_dir* can not be a :term:`namespace packages <namespace package>`.
      It has been broken since Python 3.7, and Python 3.11 officially removes it.

   .. versionchanged:: 3.13
      *top_level_dir* is only stored for the duration of *discover* call.

   .. versionchanged:: 3.14
      *start_dir* can once again be a :term:`namespace package`.
```

----------------------------------------

TITLE: Using str.format() Method in Python
DESCRIPTION: The format() method performs string formatting by replacing fields delimited by braces with the string value of corresponding arguments. This example shows basic numeric replacement.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
"The sum of 1 + 2 is {0}".format(1+2)
'The sum of 1 + 2 is 3'
```

----------------------------------------

TITLE: Creating a Complex Number Class in Python
DESCRIPTION: Demonstrates a more advanced class definition with an __init__ method that takes arguments. This class represents a complex number with real and imaginary parts.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/classes.rst#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
class Complex:
    def __init__(self, realpart, imagpart):
        self.r = realpart
        self.i = imagpart

x = Complex(3.0, -4.5)
x.r, x.i
```

----------------------------------------

TITLE: Arbitrary F-string Nesting in Python 3.12
DESCRIPTION: Shows how the relaxation of quote rules in Python 3.12 (PEP 701) allows for arbitrary nesting of f-strings within expressions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_7

LANGUAGE: python
CODE:
```
f"{f"{f"{f"{f"{f"{1+1}"}"}"}"}"}"
```

----------------------------------------

TITLE: Basic Pickle Usage Example in Python
DESCRIPTION: Simple example demonstrating how to pickle and unpickle data using the dump() and load() functions with a file.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pickle.rst#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
import pickle

# An arbitrary collection of objects supported by pickle.
data = {
    'a': [1, 2.0, 3+4j],
    'b': ("character string", b"byte string"),
    'c': {None, True, False}
}

with open('data.pickle', 'wb') as f:
    # Pickle the 'data' dictionary using the highest protocol available.
    pickle.dump(data, f, pickle.HIGHEST_PROTOCOL)
```

----------------------------------------

TITLE: Equivalent Command Line Interface Using argparse in Python
DESCRIPTION: Modern implementation using the argparse module to create a similar command line interface with better features
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/getopt.rst#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
import argparse

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-o', '--output')
    parser.add_argument('-v', dest='verbose', action='store_true')
    parser.add_argument('rest', nargs='*')
    args = parser.parse_args()
    process(args.rest, output=args.output, verbose=args.verbose)
```

----------------------------------------

TITLE: Example Usage of os.stat
DESCRIPTION: This example demonstrates how to use the `os.stat` function to retrieve file status information. It imports the `os` module, calls `os.stat` on a file named 'somefile.txt', and then accesses the `st_size` attribute of the returned `stat_result` object to get the file size. The `statinfo` object holds different attributes of the file.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_46

LANGUAGE: python
CODE:
```

      >>> import os
      >>> statinfo = os.stat('somefile.txt')
      >>> statinfo
      os.stat_result(st_mode=33188, st_ino=7876932, st_dev=234881026,
      st_nlink=1, st_uid=501, st_gid=501, st_size=264, st_atime=1297230295,
      st_mtime=1297230027, st_ctime=1297230027)
      >>> statinfo.st_size
      264

```

----------------------------------------

TITLE: Constructor Patterns in C++ vs Python
DESCRIPTION: Demonstrates different approaches to implementing constructors in C++ versus Python, highlighting Python's use of default arguments and variable-length argument lists to achieve similar functionality.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_57

LANGUAGE: cpp
CODE:
```
C() { cout << "No arguments\n"; }
C(int i) { cout << "Argument is " << i << "\n"; }
```

LANGUAGE: python
CODE:
```
class C:
    def __init__(self, i=None):
        if i is None:
            print("No arguments")
        else:
            print("Argument is", i)
```

LANGUAGE: python
CODE:
```
def __init__(self, *args):
    ...
```

----------------------------------------

TITLE: Creating IPv6 Addresses
DESCRIPTION: Shows how to create IPv6Address objects from strings.  Requires the `ipaddress` module.  Addresses can be in exploded or compressed form, and may include a scope ID.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ipaddress.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> ipaddress.IPv6Address('2001:db8::1000')
IPv6Address('2001:db8::1000')
>>> ipaddress.IPv6Address('ff02::5678%1')
IPv6Address('ff02::5678%1')
```

----------------------------------------

TITLE: Using Named Group References in Replacement Strings in Python
DESCRIPTION: Demonstrates different ways to reference named capture groups in replacement strings using \g<name> and \g<number> syntax, which helps avoid ambiguity with numeric references.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
>>> p = re.compile('section{ (?P<name> [^}]* ) }', re.VERBOSE)
>>> p.sub(r'subsection{\1}','section{First}')
'subsection{First}'
>>> p.sub(r'subsection{\g<1>}','section{First}')
'subsection{First}'
>>> p.sub(r'subsection{\g<name>}','section{First}')
'subsection{First}'
```

----------------------------------------

TITLE: Using VERBOSE Flag for Readable Regular Expressions in Python
DESCRIPTION: Illustrates the use of the VERBOSE flag (re.X) to create more readable regular expressions by allowing whitespace and comments within the pattern.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
a = re.compile(r"""\d +  # the integral part
                         \.    # the decimal point
                         \d *  # some fractional digits""", re.X)
b = re.compile(r"\d+\.\d*")
```

----------------------------------------

TITLE: Nested Pattern Matching with Lists of Points in Python
DESCRIPTION: This example shows how to use nested pattern matching to handle different cases of a list containing Point objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
match points:
    case []:
        print("No points in the list.")
    case [Point(0, 0)]:
        print("The origin is the only point in the list.")
    case [Point(x, y)]:
        print(f"A single point {x}, {y} is in the list.")
    case [Point(0, y1), Point(0, y2)]:
        print(f"Two points on the Y axis at {y1}, {y2} are in the list.")
    case _:
        print("Something else is found in the list.")
```

----------------------------------------

TITLE: Using datetime.fromisoformat() Method in Python
DESCRIPTION: Examples of parsing different ISO format datetime strings using the fromisoformat() method. Shows handling of various formats including timezone information and microseconds.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
datetime.datetime(2011, 11, 4, 0, 0)
datetime.fromisoformat('2011-11-04T00:05:23')
datetime.fromisoformat('2011-11-04T00:05:23Z')
datetime.fromisoformat('20111104T000523')
datetime.fromisoformat('2011-W01-2T00:05:23.283')
datetime.fromisoformat('2011-11-04 00:05:23.283')
datetime.fromisoformat('2011-11-04 00:05:23.283+00:00')
datetime.fromisoformat('2011-11-04T00:05:23+04:00')
```

----------------------------------------

TITLE: Dataclass Inheritance Field Order
DESCRIPTION: Example demonstrating field ordering in dataclass inheritance, where derived class fields override base class fields.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dataclasses.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
@dataclass
class Base:
    x: Any = 15.0
    y: int = 0

@dataclass
class C(Base):
    z: int = 10
    x: int = 15
```

----------------------------------------

TITLE: Implementing a Sequence ABC through Direct Inheritance in Python
DESCRIPTION: Example showing how to create a class that directly inherits from the Sequence ABC. The class must implement the required abstract methods (__getitem__ and __len__), while optional mixin methods can be overridden as needed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.abc.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
class C(Sequence):                      # Direct inheritance
    def __init__(self): ...             # Extra method not required by the ABC
    def __getitem__(self, index):  ...  # Required abstract method
    def __len__(self):  ...             # Required abstract method
    def count(self, value): ...         # Optionally override a mixin method
```

----------------------------------------

TITLE: Creating Dates from ISO Format
DESCRIPTION: Examples of using date.fromisoformat() to create date objects from various ISO format strings
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> from datetime import date
>>> date.fromisoformat('2019-12-04')
datetime.date(2019, 12, 4)
>>> date.fromisoformat('20191204')
datetime.date(2019, 12, 4)
>>> date.fromisoformat('2021-W01-1')
datetime.date(2021, 1, 4)
```

----------------------------------------

TITLE: Comparing AnyStr and Union[str, bytes] Usage in Python
DESCRIPTION: This snippet contrasts the usage of `AnyStr` and `str | bytes` (Union[str, bytes]). `AnyStr` is unsuitable when the return type can vary between `str` and `bytes` based on runtime conditions, as the type variable cannot be resolved. `str | bytes` is the correct annotation for functions that may return either type.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_49

LANGUAGE: python
CODE:
```
# Invalid use of AnyStr:
# The type variable is used only once in the function signature,
# so cannot be "solved" by the type checker
def greet_bad(cond: bool) -> AnyStr:
    return "hi there!" if cond else b"greetings!"

# The better way of annotating this function:
def greet_proper(cond: bool) -> str | bytes:
    return "hi there!" if cond else b"greetings!"
```

----------------------------------------

TITLE: Resource Closing Context Manager Implementation
DESCRIPTION: Shows the implementation of a closing context manager that ensures resources are properly closed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextlib.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from contextlib import contextmanager

@contextmanager
def closing(thing):
    try:
        yield thing
    finally:
        thing.close()
```

----------------------------------------

TITLE: Exception Chaining with From Clause
DESCRIPTION: Shows how to chain exceptions using the 'raise from' syntax to indicate one exception is the direct cause of another.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/errors.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
try:
    open("database.sqlite")
except OSError:
    raise RuntimeError("unable to handle error")
```

----------------------------------------

TITLE: Using splitext() Function with Complex Paths
DESCRIPTION: Shows how splitext() handles paths with multiple periods and directory structures. Returns the extension starting from the last period.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
>>> splitext('foo.bar.exe')
('foo.bar', '.exe')
>>> splitext('/foo/bar.exe')
('/foo/bar', '.exe')
```

----------------------------------------

TITLE: Implementing a Custom T-String Template Handler in Python
DESCRIPTION: Defines a function `lower_upper` that processes a t-string template, converting static parts to lowercase and interpolated values to uppercase. Demonstrates how to iterate through template items and handle `Interpolation` objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_3

LANGUAGE: python
CODE:
```
from string.templatelib import Template, Interpolation

def lower_upper(template: Template) -> str:
    """Render static parts lowercased and interpolations uppercased."""
    parts: list[str] = []
    for item in template:
        if isinstance(item, Interpolation):
            parts.append(str(item.value).upper())
        else:
            parts.append(item.lower())
    return "".join(parts)

name = "world"
assert lower_upper(t"HELLO {name}") == "hello WORLD"
```

----------------------------------------

TITLE: Demonstrating Dictionary Mock Behavior in Python
DESCRIPTION: Example showing how a properly configured dictionary mock behaves like a normal dictionary while recording access for later assertions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_35

LANGUAGE: python
CODE:
```
>>> mock['a']
1
>>> mock['c']
3
>>> mock['d']
Traceback (most recent call last):
    ...
KeyError: 'd'
>>> mock['b'] = 'fish'
>>> mock['d'] = 'eggs'
>>> mock['b']
'fish'
>>> mock['d']
'eggs'
```

----------------------------------------

TITLE: Python Lambda Function Timing
DESCRIPTION: Demonstrates timing a lambda function using timeit's Python interface.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/timeit.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> timeit.timeit(lambda: "-".join(map(str, range(100))), number=10000)
0.19665591977536678
```

----------------------------------------

TITLE: Integrating Doctests with Unittest
DESCRIPTION: This code demonstrates how to integrate doctests with the unittest framework using a `load_tests` function. The `load_tests` function is used by unittest's test discovery to add doctests from a specified module to the test suite. It imports the necessary modules and adds a DocTestSuite to the tests.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/doctest.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
import unittest
import doctest
import my_module_with_doctests

def load_tests(loader, tests, ignore):
    tests.addTests(doctest.DocTestSuite(my_module_with_doctests))
    return tests
```

----------------------------------------

TITLE: Closing and Reopening SQLite Connection in Python
DESCRIPTION: Shows how to close an existing database connection, open a new one, and execute a query to verify data persistence.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
con.close()
new_con = sqlite3.connect("tutorial.db")
new_cur = new_con.cursor()
res = new_cur.execute("SELECT title, year FROM movie ORDER BY score DESC")
title, year = res.fetchone()
print(f'The highest scoring Monty Python movie is {title!r}, released in {year}')
new_con.close()
```

----------------------------------------

TITLE: Using Iterables as side_effect for Multiple Returns in Python
DESCRIPTION: Shows how to set side_effect to an iterable so that each call to the mock returns the next value. This is useful when a function is called multiple times with different expected return values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
mock = MagicMock(side_effect=[4, 5, 6])
mock()
mock()
mock()
```

----------------------------------------

TITLE: Localizing a Python Module with gettext
DESCRIPTION: This code demonstrates how to internationalize a single Python module using the class-based API of gettext. It imports the translation for a module named 'spam' from a specific locale directory and assigns the gettext function to '_' for convenient usage.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/gettext.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
import gettext
t = gettext.translation('spam', '/usr/share/locale')
_ = t.gettext
```

----------------------------------------

TITLE: Using Match.group() Method in Python Regular Expressions
DESCRIPTION: Demonstrates how to retrieve captured groups from a Match object. The method can return a single group or multiple groups as a tuple, and supports both numbered and named groups.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
>>> m = re.match(r"(\w+) (\w+)", "Isaac Newton, physicist")
>>> m.group(0)       # The entire match
'Isaac Newton'
>>> m.group(1)       # The first parenthesized subgroup.
'Isaac'
>>> m.group(2)       # The second parenthesized subgroup.
'Newton'
>>> m.group(1, 2)    # Multiple arguments give us a tuple.
('Isaac', 'Newton')
```

----------------------------------------

TITLE: Basic INI Configuration File Structure Example
DESCRIPTION: Shows a simple INI configuration file with server settings, including default values and section-specific overrides.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_6

LANGUAGE: ini
CODE:
```
[DEFAULT]
ServerAliveInterval = 45
Compression = yes
CompressionLevel = 9
ForwardX11 = yes

[forge.example]
User = hg

[topsecret.server.example]
Port = 50022
ForwardX11 = no
```

----------------------------------------

TITLE: Create Uncompressed tar Archive from Files - Python
DESCRIPTION: This code demonstrates creating a new, uncompressed tar archive (`sample.tar`) in write mode (`"w"`). It then adds a list of specified files (`foo`, `bar`, `quux`) to the archive before closing it.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_32

LANGUAGE: Python
CODE:
```
import tarfile
tar = tarfile.open("sample.tar", "w")
for name in ["foo", "bar", "quux"]:
       tar.add(name)
tar.close()
```

----------------------------------------

TITLE: Directory Walking Example - File Size Calculator
DESCRIPTION: Example showing how to walk through directories to calculate file sizes while ignoring __pycache__ directories.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_40

LANGUAGE: python
CODE:
```
from pathlib import Path
for root, dirs, files in Path("cpython/Lib/concurrent").walk(on_error=print):
  print(
      root,
      "consumes",
      sum((root / file).stat().st_size for file in files),
      "bytes in",
      len(files),
      "non-directory files"
  )
  if '__pycache__' in dirs:
        dirs.remove('__pycache__')
```

----------------------------------------

TITLE: Marking Method as Final with @final in Python
DESCRIPTION: This snippet shows how to use the @final decorator on a method (`done`) within a class (`Base`). This indicates to a type checker that the `done` method cannot be overridden in any subclass of `Base`. The decorator can also be applied to a class to prevent subclassing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_173

LANGUAGE: Python
CODE:
```
class Base:
    @final
    def done(self) -> None:
```

----------------------------------------

TITLE: Adding Content-Disposition Header in Python Email
DESCRIPTION: Shows how to add a Content-Disposition header with filename parameter to a Python email message object using the add_header method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.message.rst#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
msg.add_header('Content-Disposition', 'attachment', filename='bud.gif')
```

----------------------------------------

TITLE: Timedelta Arithmetic Operations
DESCRIPTION: Shows various arithmetic operations with timedelta objects including multiplication, division, and subtraction to manipulate time durations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> from datetime import timedelta
>>> year = timedelta(days=365)
>>> ten_years = 10 * year
>>> ten_years
datetime.timedelta(days=3650)
>>> ten_years.days // 365
10
>>> nine_years = ten_years - year
>>> nine_years
datetime.timedelta(days=3285)
>>> three_years = nine_years // 3
>>> three_years, three_years.days // 365
(datetime.timedelta(days=1095), 3)
```

----------------------------------------

TITLE: Examples of Using isoformat Method in Python datetime
DESCRIPTION: These examples demonstrate the usage of the isoformat method with different datetime objects and parameters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
>>> from datetime import datetime, timezone
>>> datetime(2019, 5, 18, 15, 17, 8, 132263).isoformat()
'2019-05-18T15:17:08.132263'
>>> datetime(2019, 5, 18, 15, 17, tzinfo=timezone.utc).isoformat()
'2019-05-18T15:17:00+00:00'
```

LANGUAGE: python
CODE:
```
>>> from datetime import tzinfo, timedelta, datetime
>>> class TZ(tzinfo):
...     """A time zone with an arbitrary, constant -06:39 offset."""
...     def utcoffset(self, dt):
...         return timedelta(hours=-6, minutes=-39)
...
>>> datetime(2002, 12, 25, tzinfo=TZ()).isoformat(' ')
'2002-12-25 00:00:00-06:39'
>>> datetime(2009, 11, 27, microsecond=100, tzinfo=TZ()).isoformat()
'2009-11-27T00:00:00.000100-06:39'
```

----------------------------------------

TITLE: Defining a Generic Function with Bounded TypeVar (New Syntax)
DESCRIPTION: Illustrates defining a generic function using the modern syntax with a type variable that has an upper bound.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_101

LANGUAGE: python
CODE:
```
def print_capitalized[S: str](x: S) -> S:
```

----------------------------------------

TITLE: Configuring Unix-style Python Script Execution
DESCRIPTION: Shebang line configuration for making Python scripts executable on Unix-like systems. Must be placed at the start of the file and requires proper file permissions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/appendix.rst#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
#!/usr/bin/env python3
```

----------------------------------------

TITLE: Basic Usage of MagicMock in Python
DESCRIPTION: Demonstrates how to create a MagicMock object, set its return value, and assert how it was called. This shows the basic pattern of configuring a mock and verifying its usage.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from unittest.mock import MagicMock
thing = ProductionClass()
thing.method = MagicMock(return_value=3)
thing.method(3, 4, 5, key='value')
thing.method.assert_called_with(3, 4, 5, key='value')
```

----------------------------------------

TITLE: Escaping Backslashes in Python Regular Expressions
DESCRIPTION: Demonstrates the difference between regular Python strings and raw strings when defining regular expressions that contain backslash characters. Shows how backslashes need to be escaped in regular strings but not in raw strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
'\\\\'  # Regular string to match a literal backslash in regex (needs double escaping)
```

LANGUAGE: python
CODE:
```
r"\n"    # Raw string containing '\' and 'n' (two characters)
```

LANGUAGE: python
CODE:
```
"\n"     # Regular string containing a newline (one character)
```

----------------------------------------

TITLE: Converting Bytes to Integer in Python
DESCRIPTION: This class method converts an array of bytes to an integer. It supports different byte orders and signed/unsigned representations. The bytes argument can be a bytes-like object or an iterable producing bytes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
def from_bytes(bytes, byteorder='big', signed=False):
    if byteorder == 'little':
        little_ordered = list(bytes)
    elif byteorder == 'big':
        little_ordered = list(reversed(bytes))
    else:
        raise ValueError("byteorder must be either 'little' or 'big'")

    n = sum(b << i*8 for i, b in enumerate(little_ordered))
    if signed and little_ordered and (little_ordered[-1] & 0x80):
        n -= 1 << 8*len(little_ordered)

    return n
```

----------------------------------------

TITLE: Fetching HTTP Headers with AsyncIO
DESCRIPTION: An example showing how to query HTTP headers using asyncio streams. It supports both HTTP and HTTPS, establishes a connection based on the URL scheme, and properly handles the response data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-stream.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
import asyncio
import urllib.parse
import sys

async def print_http_headers(url):
    url = urllib.parse.urlsplit(url)
    if url.scheme == 'https':
        reader, writer = await asyncio.open_connection(
            url.hostname, 443, ssl=True)
    else:
        reader, writer = await asyncio.open_connection(
            url.hostname, 80)

    query = (
        f"HEAD {url.path or '/'} HTTP/1.0\r\n"
        f"Host: {url.hostname}\r\n"
        f"\r\n"
    )

    writer.write(query.encode('latin-1'))
    while True:
        line = await reader.readline()
        if not line:
            break

        line = line.decode('latin1').rstrip()
        if line:
            print(f'HTTP header> {line}')

    # Ignore the body, close the socket
    writer.close()
    await writer.wait_closed()

url = sys.argv[1]
asyncio.run(print_http_headers(url))
```

----------------------------------------

TITLE: Creating a Multidimensional List (Correct Method) in Python
DESCRIPTION: Shows the correct approach to create a multidimensional list by first creating the outer list and then filling each element with a newly created inner list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_40

LANGUAGE: python
CODE:
```
A = [None] * 3
for i in range(3):
    A[i] = [None] * 2
```

----------------------------------------

TITLE: Using patch as a Decorator in Python
DESCRIPTION: Demonstrates how to use the patch decorator to replace classes during tests. Shows nested decorators and how mocks are passed to the test function in the order the decorators are applied.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from unittest.mock import patch
@patch('module.ClassName2')
@patch('module.ClassName1')
def test(MockClass1, MockClass2):
    module.ClassName1()
    module.ClassName2()
    assert MockClass1 is module.ClassName1
    assert MockClass2 is module.ClassName2
    assert MockClass1.called
    assert MockClass2.called

test()
```

----------------------------------------

TITLE: Generating UUIDs with Python uuid module
DESCRIPTION: Examples of generating different versions of UUIDs using Python's uuid module, including time-based, namespace-based and random UUIDs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_32

LANGUAGE: python
CODE:
```
>>> import uuid
>>> # make a UUID based on the host ID and current time
>>> uuid.uuid1()
UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')

>>> # make a UUID using an MD5 hash of a namespace UUID and a name
>>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')
UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')

>>> # make a random UUID
>>> uuid.uuid4()
UUID('16fd2706-8baf-433b-82eb-8c7fada847da')

>>> # make a UUID using a SHA-1 hash of a namespace UUID and a name
>>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')
UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')
```

----------------------------------------

TITLE: Demonstrating Mock Argument Matching in Python
DESCRIPTION: Shows how Mock objects can match arguments regardless of whether they were passed positionally or by name, which applies to assert_called_with, assert_called_once_with, assert_has_calls, and assert_any_call methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
>>> def f(a, b, c): pass
...
>>> mock = Mock(spec=f)
>>> mock(1, 2, c=3)
<Mock name='mock()' id='140161580456576'>
>>> mock.assert_called_with(1, 2, 3)
>>> mock.assert_called_with(a=1, b=2, c=3)
```

----------------------------------------

TITLE: Using assert_not_awaited with AsyncMock
DESCRIPTION: Shows how to use assert_not_awaited to verify that an AsyncMock was never awaited.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_33

LANGUAGE: python
CODE:
```
>>> mock = AsyncMock()
>>> mock.assert_not_awaited()
```

----------------------------------------

TITLE: Removing Duplicates from a List Using Set Conversion in Python
DESCRIPTION: Demonstrates a faster method for removing duplicates from a list by converting it to a set and back to a list, which works when all elements are hashable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_37

LANGUAGE: python
CODE:
```
mylist = list(set(mylist))
```

----------------------------------------

TITLE: Reading Binary Resource with Multiple Path Names
DESCRIPTION: Demonstrates how to read a binary resource located within a subdirectory of a package using `importlib.resources.read_binary`. The function takes a module as an anchor and the path to the resource, either as a single string or as multiple path name components. The example shows the equivalence between specifying the path as a single string and as multiple strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.resources.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
"importlib.resources.read_binary(my_module, \"pics/painting.png\")\nimportlib.resources.read_binary(my_module, \"pics\", \"painting.png\")"
```

----------------------------------------

TITLE: Class-based State Management in Python
DESCRIPTION: Shows how to use a class instance to manage and modify multiple values through a function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_24

LANGUAGE: python
CODE:
```
class Namespace:
    def __init__(self, /, **args):
        for key, value in args.items():
            setattr(self, key, value)

def func4(args):
    args.a = 'new-value'        # args is a mutable Namespace
    args.b = args.b + 1         # change object in-place
```

----------------------------------------

TITLE: Asserting Single Mock Call in Python
DESCRIPTION: Demonstration of assert_called_once() to verify a mock was called exactly once, with example of failure case when called multiple times
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
mock = Mock()
mock.method()
<Mock name='mock.method()' id='...'>
mock.method.assert_called_once()
mock.method()
<Mock name='mock.method()' id='...'>
mock.method.assert_called_once()
```

----------------------------------------

TITLE: Grouping Subcommands with Title and Description in argparse Help
DESCRIPTION: This snippet demonstrates using the `title` and `description` arguments when calling `add_subparsers`. This organizes the subcommands into a distinct group in the help output, improving readability for complex command-line interfaces.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_77

LANGUAGE: python
CODE:
```
parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(title='subcommands',
                                   description='valid subcommands',
                                   help='additional help')
subparsers.add_parser('foo')
subparsers.add_parser('bar')
parser.parse_args(['-h'])
```

----------------------------------------

TITLE: Decoding Bytes with Error Handling in Python
DESCRIPTION: This snippet demonstrates how to decode a byte string to a Unicode string using different error handling strategies: strict, replace, backslashreplace and ignore.  It shows how each strategy deals with invalid bytes during the decoding process, such as replacing them with a replacement character, using a backslash escape, or ignoring them completely.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/unicode.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> b'\x80abc'.decode("utf-8", "strict")  #doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
    ...
UnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 0:
  invalid start byte
>>> b'\x80abc'.decode("utf-8", "replace")
'\ufffdabc'
>>> b'\x80abc'.decode("utf-8", "backslashreplace")
'\\x80abc'
>>> b'\x80abc'.decode("utf-8", "ignore")
'abc'
```

----------------------------------------

TITLE: Using Special Characters in Strings with Python
DESCRIPTION: This snippet demonstrates how to use special characters like newlines in strings and how they are interpreted differently with and without the print() function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/introduction.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> s = 'First line.\nSecond line.'  # \n means newline
>>> s  # without print(), special characters are included in the string
'First line.\nSecond line.'
>>> print(s)  # with print(), special characters are interpreted, so \n produces new line
First line.
Second line.
```

----------------------------------------

TITLE: Defining Logging Object Connections with YAML
DESCRIPTION: A YAML example showing how to connect loggers, handlers, and formatters in Python's logging configuration. It demonstrates defining formatters with IDs, configuring handlers that reference those formatters, and setting up loggers with references to handlers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.config.rst#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
formatters:
  brief:
    # configuration for formatter with id 'brief' goes here
  precise:
    # configuration for formatter with id 'precise' goes here
handlers:
  h1: #This is an id
   # configuration of handler with id 'h1' goes here
   formatter: brief
  h2: #This is another id
   # configuration of handler with id 'h2' goes here
   formatter: precise
loggers:
  foo.bar.baz:
    # other configuration for logger 'foo.bar.baz'
    handlers: [h1, h2]
```

----------------------------------------

TITLE: Transposing 2D Matrix in Python
DESCRIPTION: The transpose function swaps the rows and columns of a 2D matrix. It uses the zip function with the strict parameter to ensure consistent column lengths.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_51

LANGUAGE: python
CODE:
```
def transpose(matrix):
    "Swap the rows and columns of a 2-D matrix."
    # transpose([(1, 2, 3), (11, 22, 33)]) → (1, 11) (2, 22) (3, 33)
    return zip(*matrix, strict=True)
```

----------------------------------------

TITLE: Activating a Virtual Environment on Windows
DESCRIPTION: Command to activate a Python virtual environment on Windows systems. This modifies the shell environment to use the Python installation in the virtual environment.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/venv.rst#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
tutorial-env\Scripts\activate
```

----------------------------------------

TITLE: Updating parse_args Usage when Migrating from optparse to argparse in Python
DESCRIPTION: Replace the optparse pattern '(options, args) = parser.parse_args()' with 'args = parser.parse_args()' and add separate add_argument calls for positional arguments. Note that the 'options' object is now called 'args' in argparse.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/argparse-optparse.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
args = parser.parse_args()
```

----------------------------------------

TITLE: Detecting never-awaited coroutines
DESCRIPTION: This code demonstrates the `RuntimeWarning` that asyncio emits when a coroutine function is called but not awaited or scheduled.  The warning helps prevent the common mistake of forgetting to await a coroutine, which can lead to unexpected behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-dev.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
import asyncio

async def test():
    print("never scheduled")

async def main():
    test()

asyncio.run(main())
```

----------------------------------------

TITLE: Removing Multiple Items from a List in Python
DESCRIPTION: Shows three variations for removing multiple items from a list using slice replacement with filter(), generator expressions, or list comprehensions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_38

LANGUAGE: python
CODE:
```
mylist[:] = filter(keep_function, mylist)
mylist[:] = (x for x in mylist if keep_condition)
mylist[:] = [x for x in mylist if keep_condition]
```

----------------------------------------

TITLE: Reading CSV Files with Specific Encoding - Python
DESCRIPTION: This snippet shows how to read a CSV file while specifying a different encoding (UTF-8). It prints each row, taking into account character encoding for correct interpretation of the file's content.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/csv.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
import csv
with open('some.csv', newline='', encoding='utf-8') as f:
    reader = csv.reader(f)
    for row in reader:
        print(row)
```

----------------------------------------

TITLE: Marking Required Keys in total=False TypedDict
DESCRIPTION: Shows how to explicitly mark individual keys as required within a `TypedDict` that has `total=False` using the `Required` type hint. Includes both class-based and alternative dictionary syntax.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_156

LANGUAGE: python
CODE:
```
class Point2D(TypedDict, total=False):
    x: Required[int]
    y: Required[int]
    label: str
```

LANGUAGE: python
CODE:
```
Point2D = TypedDict('Point2D', {
    'x': Required[int],
    'y': Required[int],
    'label': str
}, total=False)
```

----------------------------------------

TITLE: Configuring Loggers and Handlers in Python
DESCRIPTION: This snippet sets up a logging configuration dictionary, specifying handlers, log levels, and formatters for different loggers. It defines the 'foo' logger that uses a custom handler, and configures the root logger to handle DEBUG level logs across console and file outputs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
d = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'detailed': {
            'format': '%(asctime)s %(name)s %(levelname)s %(message)s'
        },
    },
    'handlers': {
        'foofile': {
            'filename': 'mplog-foo.log',
            'mode': 'w',
            'level': 'ERROR',
            'formatter': 'detailed',
        },
    },
    'loggers': {
        'foo': {
            'handlers': ['foofile']
        }
    },
    'root': {
        'level': 'DEBUG',
        'handlers': ['console', 'file', 'errors']
    },
}
```

----------------------------------------

TITLE: Using Context Manager for Wrapping Code Blocks in Python
DESCRIPTION: Demonstrates how to use the track_entry_and_exit context manager to wrap a block of code with entry and exit logging.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_42

LANGUAGE: python
CODE:
```
with track_entry_and_exit('widget loader'):
    print('Some time consuming activity goes here')
    load_widget()
```

----------------------------------------

TITLE: Using asyncio Semaphore with async with statement
DESCRIPTION: This snippet demonstrates the preferred way to use an asyncio Semaphore with an `async with` statement to manage access to a shared resource. The `async with` statement ensures that the semaphore is acquired before accessing the shared resource and released afterward, even if exceptions occur.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-sync.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
"sem = asyncio.Semaphore(10)

# ... later
async with sem:
    # work with shared resource"
```

----------------------------------------

TITLE: Using @override Decorator for Method Overrides in Python
DESCRIPTION: Illustrates the use of the `@override` decorator to explicitly mark methods intended to override a superclass method. It shows a valid override (`log_status`) and an invalid one (`done`) where the method does not exist in the base class, resulting in a type checker error.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_175

LANGUAGE: Python
CODE:
```
class Base:
    def log_status(self) -> None:
        ...

class Sub(Base):
    @override
    def log_status(self) -> None:  # Okay: overrides Base.log_status
        ...

    @override
    def done(self) -> None:  # Error reported by type checker
        ...
```

----------------------------------------

TITLE: Define Final Variable Python
DESCRIPTION: Shows how to use `typing.Final` to indicate that a variable's value should not be reassigned after its initial definition, which type checkers can enforce.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_74

LANGUAGE: Python
CODE:
```
MAX_SIZE: Final = 9000
MAX_SIZE += 1  # Error reported by type checker
```

----------------------------------------

TITLE: Implementing an Iterator Class in Python
DESCRIPTION: This code defines a Reverse class that implements the iterator protocol, allowing iteration over a sequence in reverse order.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/classes.rst#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
class Reverse:
    """Iterator for looping over a sequence backwards."""
    def __init__(self, data):
        self.data = data
        self.index = len(data)

    def __iter__(self):
        return self

    def __next__(self):
        if self.index == 0:
            raise StopIteration
        self.index = self.index - 1
        return self.data[self.index]
```

----------------------------------------

TITLE: Serving Files with Python's HTTP Server
DESCRIPTION: This Python command illustrates how to run an HTTP server from the command line, serving files from the current directory by default. Users can specify an optional port number to change the default port 8000. No dependencies are required besides Python's standard library.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.server.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
python -m http.server [OPTIONS] [port]
```

----------------------------------------

TITLE: Implementing groupby function in Python
DESCRIPTION: Equivalent implementation of the groupby function that creates an iterator returning consecutive keys and groups from the iterable. The key is a function computing a key value for each element, defaulting to identity if not specified.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
def groupby(iterable, key=None):
    # [k for k, g in groupby('AAAABBBCCDAABBB')] → A B C D A B
    # [list(g) for k, g in groupby('AAAABBBCCD')] → AAAA BBB CC D

    keyfunc = (lambda x: x) if key is None else key
    iterator = iter(iterable)
    exhausted = False

    def _grouper(target_key):
        nonlocal curr_value, curr_key, exhausted
        yield curr_value
        for curr_value in iterator:
            curr_key = keyfunc(curr_value)
            if curr_key != target_key:
                return
            yield curr_value
        exhausted = True

    try:
        curr_value = next(iterator)
    except StopIteration:
        return
    curr_key = keyfunc(curr_value)

    while not exhausted:
        target_key = curr_key
        curr_group = _grouper(target_key)
```

----------------------------------------

TITLE: Implementing Type-Safe Decorator with ParamSpec (Python)
DESCRIPTION: Provides a complete example of using `ParamSpec` (`**P`) to create a type-safe decorator (`add_logging`) that wraps a function (`add_two`). It shows how `P.args` and `P.kwargs` are used to correctly type the `*args` and `**kwargs` of the inner function, preserving the original function's parameter types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_125

LANGUAGE: python
CODE:
```
from collections.abc import Callable
import logging

def add_logging[T, **P](f: Callable[P, T]) -> Callable[P, T]:
    '''A type-safe decorator to add logging to a function.'''
    def inner(*args: P.args, **kwargs: P.kwargs) -> T:
        logging.info(f'{f.__name__} was called')
        return f(*args, **kwargs)
    return inner

@add_logging
def add_two(x: float, y: float) -> float:
    '''Add two numbers together.'''
    return x + y
```

----------------------------------------

TITLE: Lambda Function Syntax Example in Python
DESCRIPTION: This example shows the equivalent function definition for a lambda expression. Lambda expressions create anonymous functions with a single expression as the body, which is implicitly returned.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/expressions.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
def <lambda>(parameters):
    return expression
```

----------------------------------------

TITLE: Implementing TCP Echo Server Protocol in Python
DESCRIPTION: Defines an EchoServerProtocol class that implements a simple TCP echo server. It handles incoming connections, receives data, echoes it back, and closes the connection.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
import asyncio


class EchoServerProtocol(asyncio.Protocol):
    def connection_made(self, transport):
        peername = transport.get_extra_info('peername')
        print('Connection from {}'.format(peername))
        self.transport = transport

    def data_received(self, data):
        message = data.decode()
        print('Data received: {!r}'.format(message))

        print('Send: {!r}'.format(message))
        self.transport.write(data)

        print('Close the client socket')
        self.transport.close()


async def main():
    # Get a reference to the event loop as we plan to use
    # low-level APIs.
    loop = asyncio.get_running_loop()

    server = await loop.create_server(
        EchoServerProtocol,
        '127.0.0.1', 8888)

    async with server:
        await server.serve_forever()


asyncio.run(main())
```

----------------------------------------

TITLE: Configuring Logging with File in Python
DESCRIPTION: This code snippet demonstrates how to configure logging using a configuration file and the `fileConfig` function in the Python logging module. It imports the necessary modules, reads the configuration from a file, creates a logger, and logs messages at different levels.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
import logging
import logging.config

logging.config.fileConfig('logging.conf')

# create logger
logger = logging.getLogger('simpleExample')

# 'application' code
logger.debug('debug message')
logger.info('info message')
logger.warning('warn message')
logger.error('error message')
logger.critical('critical message')
```

----------------------------------------

TITLE: String Templating with the string.Template Class in Python
DESCRIPTION: Demonstrates how to use the string.Template class for simple string substitution. This is useful for creating customizable text templates that can be edited by end-users without altering the application code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib2.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> from string import Template
>>> t = Template('${village}folk send $$10 to $cause.')
>>> t.substitute(village='Nottingham', cause='the ditch fund')
'Nottinghamfolk send $10 to the ditch fund.'

>>> t = Template('Return the $item to $owner.')
>>> d = dict(item='unladen swallow')
>>> t.substitute(d)
Traceback (most recent call last):
  ...
KeyError: 'owner'
>>> t.safe_substitute(d)
'Return the unladen swallow to $owner.'
```

----------------------------------------

TITLE: Getting File Extension - pathlib Python
DESCRIPTION: The code shows how to retrieve the file extension of the last path component using the `suffix` attribute in `PurePosixPath`. The extension is the text following the last period, if present.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
>>> PurePosixPath('my/library/setup.py').suffix
'.py'
>>> PurePosixPath('my/library.tar.gz').suffix
'.gz'
>>> PurePosixPath('my/library').suffix
''
```

----------------------------------------

TITLE: Initializing ArgumentParser with argparse
DESCRIPTION: This code snippet shows how to use the argparse library to achieve similar functionality as that provided by optparse. The argparse module is more opinionated and integrates positional arguments into the option parsing, offering extended capabilities for command-line interfaces.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/optparse.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import argparse

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-o', '--output')
    parser.add_argument('-v', dest='verbose', action='store_true')
    parser.add_argument('rest', nargs='*')
    args = parser.parse_args()
    process(args.rest, output=args.output, verbose=args.verbose)
```

----------------------------------------

TITLE: Using ArgumentDefaultsHelpFormatter in ArgumentParser in Python
DESCRIPTION: Demonstrates the use of `argparse.ArgumentDefaultsHelpFormatter` to automatically include the default value for each argument in its help message, providing users with clear information about the default behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_10

LANGUAGE: Python
CODE:
```
>>> parser = argparse.ArgumentParser(
...     prog='PROG',
...     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
>>> parser.add_argument('--foo', type=int, default=42, help='FOO!')
>>> parser.add_argument('bar', nargs='*', default=[1, 2, 3], help='BAR!')
>>> parser.print_help()
usage: PROG [-h] [--foo FOO] [bar ...]

positional arguments:
 bar         BAR! (default: [1, 2, 3])

options:
 -h, --help  show this help message and exit
 --foo FOO   FOO! (default: 42)
```

----------------------------------------

TITLE: Parsing Options with argparse in Python
DESCRIPTION: Demonstrates basic usage of `ArgumentParser` and `parse_args` to handle options passed as separate arguments, using the `=` separator for long options, and concatenating values for short options.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_64

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser(prog='PROG')
>>> parser.add_argument('-x')
>>> parser.add_argument('--foo')
>>> parser.parse_args(['-x', 'X'])
Namespace(foo=None, x='X')
>>> parser.parse_args(['--foo', 'FOO'])
Namespace(foo='FOO', x=None)
>>> parser.parse_args(['--foo=FOO'])
Namespace(foo='FOO', x=None)
>>> parser.parse_args(['-xX'])
Namespace(foo=None, x='X')
```

----------------------------------------

TITLE: Parsing Date Strings with datetime.strptime in Python
DESCRIPTION: Shows how to use the new strptime method of the datetime class to parse a date string into a datetime object. The method uses the same format characters as time.strptime and time.strftime.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_27

LANGUAGE: python
CODE:
```
from datetime import datetime

ts = datetime.strptime('10:13:15 2006-03-07',
                       '%H:%M:%S %Y-%m-%d')
```

----------------------------------------

TITLE: Nested Pattern Matching with Points List in Python
DESCRIPTION: Demonstrates nested pattern matching with a list of Point objects. Uses __match_args__ for positional matching and handles various list patterns.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
class Point:
    __match_args__ = ('x', 'y')
    def __init__(self, x, y):
        self.x = x
        self.y = y

match points:
    case []:
        print("No points")
    case [Point(0, 0)]:
        print("The origin")
    case [Point(x, y)]:
        print(f"Single point {x}, {y}")
    case [Point(0, y1), Point(0, y2)]:
        print(f"Two on the Y axis at {y1}, {y2}")
    case _:
        print("Something else")
```

----------------------------------------

TITLE: Runner Context Manager for Async Functions - Python
DESCRIPTION: This class provides a context manager to run multiple async functions within the same event loop context. It manages the event loop's creation and allows specifying the debug mode, ensuring efficient running of top-level async calls.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-runner.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
async def main():
    await asyncio.sleep(1)
    print('hello')

with asyncio.Runner() as runner:
    runner.run(main())
```

----------------------------------------

TITLE: Using Pattern.search() in Python Regular Expressions
DESCRIPTION: Demonstrates how to use the search() method of a compiled regular expression pattern. The search method scans through a string looking for the first location where the pattern produces a match, with optional parameters for position limits.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
>>> pattern = re.compile("d")
>>> pattern.search("dog")     # Match at index 0
<re.Match object; span=(0, 1), match='d'>
>>> pattern.search("dog", 1)  # No match; search doesn't include the "d"
```

----------------------------------------

TITLE: Using Named Groups with Match.group() in Python
DESCRIPTION: Shows how to use named groups in regular expressions with the (?P<name>...) syntax and how to retrieve their values using the group() method with the group name.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
>>> m = re.match(r"(?P<first_name>\w+) (?P<last_name>\w+)", "Malcolm Reynolds")
>>> m.group('first_name')
'Malcolm'
>>> m.group('last_name')
'Reynolds'
```

----------------------------------------

TITLE: Parsing XML from File in Python
DESCRIPTION: Code example showing how to parse an XML document from a file using ElementTree. It creates a tree object and then accesses the root element.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import xml.etree.ElementTree as ET
tree = ET.parse('country_data.xml')
root = tree.getroot()
```

----------------------------------------

TITLE: Accumulating References in a Dictionary of Lists in Python
DESCRIPTION: This snippet demonstrates how to accumulate references in a dictionary where values are lists. It uses enumerate to get page numbers and setdefault to efficiently handle new keys and append to existing lists.
SOURCE: https://github.com/python/cpython/blob/main/Objects/dictnotes.txt#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
for pagenumber, page in enumerate(pages):
  for word in page:
    d.setdefault(word, []).append(pagenumber)
```

----------------------------------------

TITLE: Using Assignment Expressions (Walrus Operator) with Regular Expressions in Python
DESCRIPTION: This example demonstrates using the walrus operator (:=) with pattern matching. The assignment expression assigns the result of pattern.search(data) to the variable 'matching' while simultaneously evaluating the truthiness of the result in the if statement condition.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/expressions.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
if matching := pattern.search(data):
    do_something(matching)
```

----------------------------------------

TITLE: Waiting for Awaitables with Timeout - Python
DESCRIPTION: The wait_for function allows waiting for an awaitable to complete with a specified timeout. If the timeout occurs before the awaitable completes, it raises a TimeoutError, thus allowing the management of long-running tasks efficiently.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
async def wait_for(aw, timeout):
    """
    Wait for the *aw* :ref:`awaitable <asyncio-awaitables>`
    to complete with a timeout.

    If *aw* is a coroutine it is automatically scheduled as a Task.

    *timeout* can either be ``None`` or a float or int number
    of seconds to wait for.  If *timeout* is ``None``, block until the future
    completes.

    If a timeout occurs, it cancels the task and raises
    :exc:`TimeoutError`.
    """

```

----------------------------------------

TITLE: Accessing Resource Path using Context Manager
DESCRIPTION: Demonstrates how to obtain the file system path to a resource using `importlib.resources.path` within a context manager. This allows operations that require an actual file system path (e.g., `pathlib.Path.stat`) to be performed on resources. The context manager ensures cleanup of any temporary files created during extraction from archives.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.resources.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
"with importlib.resources.path(anchor, \"resource.txt\") as fspath:\n    result = fspath.stat()"
```

----------------------------------------

TITLE: Wrapping a Socket with SSL Context in Python
DESCRIPTION: Wraps an existing Python socket with SSL/TLS context. It returns an instance of SSLSocket (or a custom subclass) tied to the context, its settings, and certificates. Various parameters control handshake behavior and hostname verification.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
SSLContext.wrap_socket(sock, server_side=False, \
      do_handshake_on_connect=True, suppress_ragged_eofs=True, \
      server_hostname=None, session=None)
```

----------------------------------------

TITLE: Using str.find() Method with in Operator in Python
DESCRIPTION: The find() method returns the lowest index where a substring is found. This example demonstrates the difference between using find() and the 'in' operator, which is preferred for simply checking substring existence.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
'Py' in 'Python'
True
```

----------------------------------------

TITLE: Strict parameter for zip() function in Python
DESCRIPTION: Adds a 'strict' parameter to zip() that raises a ValueError if arguments are exhausted at different lengths.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a1.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
zip(iter1, iter2, strict=True)
```

----------------------------------------

TITLE: Server Process Manager
DESCRIPTION: Demonstrates using a Manager to create shared objects that can be manipulated across processes. Shows managing shared dict, list and set objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from multiprocessing import Process, Manager

def f(d, l, s):
    d[1] = '1'
    d['2'] = 2
    d[0.25] = None
    l.reverse()
    s.add('a')
    s.add('b')

if __name__ == '__main__':
    with Manager() as manager:
        d = manager.dict()
        l = manager.list(range(10))
        s = manager.set()

        p = Process(target=f, args=(d, l, s))
        p.start()
        p.join()

        print(d)
        print(l)
        print(s)
```

----------------------------------------

TITLE: Using strict flag with map and zip in Python
DESCRIPTION: Describes the addition of an optional keyword-only `strict` flag to the `map` built-in function, similar to `zip`, to ensure all input iterables have equal length.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_14

LANGUAGE: Python
CODE:
```
map
```

LANGUAGE: Python
CODE:
```
zip
```

----------------------------------------

TITLE: String strip() Method with Custom Characters in Python
DESCRIPTION: Demonstrates the new ability to specify custom characters for stripping in the strip(), lstrip(), and rstrip() string methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.3.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
>>> '   abc '.strip()
'abc'
>>> '><><abc<><><>'.strip('<>')
'abc'
>>> '><><abc<><><>\n'.strip('<>')
'abc<><><>\n'
>>> u'\u4000\u4001abc\u4000'.strip(u'\u4000')
u'\u4001abc'
```

----------------------------------------

TITLE: Class Decorator Syntax Example
DESCRIPTION: Demonstrates the new class decorator syntax that allows applying decorators to class definitions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
@foo
@bar
class A:
  pass

# Equivalent to:
class A:
  pass

A = foo(bar(A))
```

----------------------------------------

TITLE: Python TestCase with Setup and Teardown
DESCRIPTION: Shows a complete TestCase implementation with both setUp and tearDown methods for proper resource management.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
import unittest

class WidgetTestCase(unittest.TestCase):
    def setUp(self):
        self.widget = Widget('The widget')

    def tearDown(self):
        self.widget.dispose()
```

----------------------------------------

TITLE: Creating Simple Color Enum with auto() in Python
DESCRIPTION: This snippet demonstrates how to create a simple Color enum using the auto() function to automatically assign values to enum members.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
class Color(Enum):
    RED = auto()
    BLUE = auto()
    GREEN = auto()

Color.GREEN
```

----------------------------------------

TITLE: Using class aliasing for easier base class changes in Python
DESCRIPTION: Demonstrates a technique to make it easier to change the base class by assigning the base class to an alias and deriving from the alias.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_53

LANGUAGE: python
CODE:
```
class Base:
    ...

BaseAlias = Base

class Derived(BaseAlias):
    ...
```

----------------------------------------

TITLE: Decorator Function Example in Python
DESCRIPTION: Example showing how decorator expressions are applied to function definitions, demonstrating nested decorator behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
@f1(arg)
@f2
def func(): pass
```

----------------------------------------

TITLE: Testing Approximate Equality with math.isclose() Using Relative Tolerance
DESCRIPTION: Demonstrates the usage of math.isclose() function to compare floating point numbers using relative tolerance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
>>> import math
>>> a = 5.0
>>> b = 4.99998
>>> math.isclose(a, b, rel_tol=1e-5)
True
>>> math.isclose(a, b, rel_tol=1e-6)
False
```

----------------------------------------

TITLE: Generating Secure Temporary URL with Python secrets Module
DESCRIPTION: This snippet demonstrates how to generate a hard-to-guess temporary URL containing a security token using secrets.token_urlsafe() function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/secrets.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
import secrets
url = 'https://example.com/reset=' + secrets.token_urlsafe()
```

----------------------------------------

TITLE: Creating Bytes Literals in Python
DESCRIPTION: Demonstrates various methods of creating bytes literals with different quote types and prefixes
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_38

LANGUAGE: python
CODE:
```
b"still allows embedded 'single' quotes"
```

LANGUAGE: python
CODE:
```
b'''3 single quotes'''
```

LANGUAGE: python
CODE:
```
b"""3 double quotes"""
```

----------------------------------------

TITLE: Creating a gzip'ed tar-file archive in Python
DESCRIPTION: This snippet demonstrates how to create a gzip'ed tar-file archive containing all files from the user's .ssh directory using the shutil.make_archive function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/shutil.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> from shutil import make_archive
>>> import os
>>> archive_name = os.path.expanduser(os.path.join('~', 'myarchive'))
>>> root_dir = os.path.expanduser(os.path.join('~', '.ssh'))
>>> make_archive(archive_name, 'gztar', root_dir)
'/Users/tarek/myarchive.tar.gz'
```

----------------------------------------

TITLE: Testing Method Calls with Mock Assertions in Python
DESCRIPTION: Shows how to test that a method calls another method with specific arguments. The example replaces a method with a MagicMock and then verifies it was called correctly using assert_called_once_with.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
class ProductionClass:
    def method(self):
        self.something(1, 2, 3)
    def something(self, a, b, c):
        pass

real = ProductionClass()
real.something = MagicMock()
real.method()
real.something.assert_called_once_with(1, 2, 3)
```

----------------------------------------

TITLE: Using fullmatch in Python re Module
DESCRIPTION: Example showing the usage of the new fullmatch function in the re module that anchors the pattern at both ends of the string to match.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.4.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
re.fullmatch(pattern, string)
regex.fullmatch(string)
```

----------------------------------------

TITLE: Using Iterable for Stream Input in Python
DESCRIPTION: This function demonstrates type-hinting an input stream using `collections.abc.Iterable[str]`. This is useful for functions that process input line by line, allowing them to accept various iterable types like file objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_164

LANGUAGE: python
CODE:
```
def read_config(stream: Iterable[str]):
    for line in stream:
        ...
```

----------------------------------------

TITLE: Implementing Asynchronous Context Manager in Python
DESCRIPTION: Shows how to create a class that can be used with the `async with` statement by implementing the `__aenter__` and `__aexit__` asynchronous dunder methods. Both methods must be awaitables. `__aenter__` is semantically similar to `__enter__`, and `__aexit__` to `__exit__`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_38

LANGUAGE: Python
CODE:
```
class AsyncContextManager:
    async def __aenter__(self):
        await log('entering context')

    async def __aexit__(self, exc_type, exc, tb):
        await log('exiting context')
```

----------------------------------------

TITLE: Accessing Path Parent - pathlib Python
DESCRIPTION: The code shows how to use the `parent` attribute to find the immediate parent directory of a given path. It showcases usage across different path structures, demonstrating situations where the path cannot go past an anchor or an empty path.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
>>> p = PurePosixPath('/a/b/c/d')
>>> p.parent
PurePosixPath('/a/b/c')
>>> p = PurePosixPath('/')
>>> p.parent
PurePosixPath('/')
>>> p = PurePosixPath('.')
>>> p.parent
PurePosixPath('.')
```

----------------------------------------

TITLE: Retrieving Stem of Path - pathlib Python
DESCRIPTION: This code snippet accesses the `stem` attribute, which extracts the final component of a path without its suffix. It focuses on `PurePosixPath` and handles various filename situations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
>>> PurePosixPath('my/library.tar.gz').stem
'library.tar'
>>> PurePosixPath('my/library.tar').stem
'library'
>>> PurePosixPath('my/library').stem
'library'
```

----------------------------------------

TITLE: Generating Complex Alphanumeric Password with Python secrets Module
DESCRIPTION: This snippet demonstrates how to generate a ten-character alphanumeric password with specific requirements using secrets.choice() and string operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/secrets.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
import string
import secrets
alphabet = string.ascii_letters + string.digits
while True:
    password = ''.join(secrets.choice(alphabet) for i in range(10))
    if (any(c.islower() for c in password)
            and any(c.isupper() for c in password)
            and sum(c.isdigit() for c in password) >= 3):
        break
```

----------------------------------------

TITLE: Demonstrating lstrip Method in Python bytes Objects
DESCRIPTION: Shows how to remove leading characters from bytes objects using the lstrip() method. The method removes specified bytes from the beginning of the sequence until it encounters a byte not in the specified set.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_46

LANGUAGE: python
CODE:
```
>>> b'   spacious   '.lstrip()
b'spacious   '
>>> b'www.example.com'.lstrip(b'cmowz.')
b'example.com'
```

----------------------------------------

TITLE: Using asdict() with Nested Dataclasses in Python
DESCRIPTION: Illustrates the use of asdict() function to convert nested dataclasses into dictionaries. It shows how the function recursively handles nested structures.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dataclasses.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
@dataclass
class Point:
     x: int
     y: int

@dataclass
class C:
     mylist: list[Point]

p = Point(10, 20)
assert asdict(p) == {'x': 10, 'y': 20}

c = C([Point(0, 0), Point(10, 4)])
assert asdict(c) == {'mylist': [{'x': 0, 'y': 0}, {'x': 10, 'y': 4}]}
```

----------------------------------------

TITLE: Using Pattern.match() in Python Regular Expressions
DESCRIPTION: Demonstrates the match() method which checks if a pattern matches at the beginning of a string. Unlike search(), match() only finds matches that begin at the start of the string or at the specified position.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
>>> pattern = re.compile("o")
>>> pattern.match("dog")      # No match as "o" is not at the start of "dog".
>>> pattern.match("dog", 1)   # Match as "o" is the 2nd character of "dog".
<re.Match object; span=(1, 2), match='o'>
```

----------------------------------------

TITLE: Using Counter Methods in Python
DESCRIPTION: This snippet showcases the usage of Counter-specific methods like elements(), most_common(), subtract(), and total(). It demonstrates how to iterate over elements, find most common items, subtract counters, and compute the sum of counts.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
c = Counter(a=4, b=2, c=0, d=-2)
sorted(c.elements())
['a', 'a', 'a', 'a', 'b', 'b']

Counter('abracadabra').most_common(3)
[('a', 5), ('b', 2), ('r', 2)]

c = Counter(a=4, b=2, c=0, d=-2)
d = Counter(a=1, b=2, c=3, d=4)
c.subtract(d)
c
Counter({'a': 3, 'b': 0, 'c': -3, 'd': -6})

c = Counter(a=10, b=5, c=0)
c.total()
15
```

----------------------------------------

TITLE: Using Backslashes in Python 3.12 F-string Expressions
DESCRIPTION: Shows that backslash characters, such as `\n` for a newline, can now be included directly within f-string expressions in Python 3.12 (PEP 701), which was previously disallowed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_9

LANGUAGE: python
CODE:
```
print(f"This is the playlist: {"\n".join(songs)}")
```

----------------------------------------

TITLE: Using input() function in Python
DESCRIPTION: Example of using the input() function to read user input from standard output. The function returns the input as a string after stripping trailing newlines.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
>>> s = input('--> ')  # doctest: +SKIP
--> Monty Python's Flying Circus
>>> s  # doctest: +SKIP
"Monty Python's Flying Circus"
```

----------------------------------------

TITLE: Final Type Example in typing Module
DESCRIPTION: This snippet demonstrates the new Final annotation (PEP 591) from the typing module, which indicates to static type checkers that a variable, function, method, or class cannot be reassigned, overridden, or subclassed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
pi: Final[float] = 3.1415926536
```

----------------------------------------

TITLE: Using asyncio Lock with acquire and release
DESCRIPTION: This snippet demonstrates how to use an asyncio Lock with explicit `acquire` and `release` calls to guarantee exclusive access to a shared resource. The lock is acquired before accessing the shared resource and released in a `finally` block to ensure it's always released, even if exceptions occur.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-sync.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
"lock = asyncio.Lock()

# ... later
await lock.acquire()
try:
    # access shared state
finally:
    lock.release()"
```

----------------------------------------

TITLE: Printing current stack trace with print_stack
DESCRIPTION: Prints the current stack trace from a specific frame. Useful for debugging to see the call path that led to the current execution point.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
print_stack(f=None, limit=None, file=None)
```

----------------------------------------

TITLE: Multi-level Sorting Implementation
DESCRIPTION: Shows how to implement multi-level sorting using a wrapper function with multiple sort specifications.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/sorting.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> def multisort(xs, specs):
...     for key, reverse in reversed(specs):
...         xs.sort(key=attrgetter(key), reverse=reverse)
...     return xs

>>> multisort(list(student_objects), (('grade', True), ('age', False)))
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
```

----------------------------------------

TITLE: Example code for chained exceptions (pdb exceptions command)
DESCRIPTION: Provides Python code defining functions out, middle, and inner that demonstrate a scenario involving chained exceptions, used as an example for the exceptions command in Pdb.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_26

LANGUAGE: python
CODE:
```
def out():
    try:
        middle()
    except Exception as e:
        raise ValueError("reraise middle() error") from e

def middle():
    try:
        return inner(0)
    except Exception as e:
        raise ValueError("Middle fail")

def inner(x):
    1 / x

 out()
```

----------------------------------------

TITLE: Opening URLs with urllib.request.urlopen in Python
DESCRIPTION: This function opens a URL and returns an object that can be used as a context manager. It supports HTTP, HTTPS, and FTP connections, and can handle additional data, timeouts, and SSL contexts.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
urlopen(url, data=None[, timeout], *, context=None)
```

----------------------------------------

TITLE: Awaiting Coroutines Sequentially with asyncio Python
DESCRIPTION: This snippet shows how to use await to run coroutines sequentially within an asyncio program, with sample print statements indicating the time delays.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import asyncio
import time

async def say_after(delay, what):
    await asyncio.sleep(delay)
    print(what)

async def main():
    print(f"started at {time.strftime('%X')}")

    await say_after(1, 'hello')
    await say_after(2, 'world')

    print(f"finished at {time.strftime('%X')}")

asyncio.run(main())
```

----------------------------------------

TITLE: Creating Temporary Directories in Python
DESCRIPTION: Securely creates a temporary directory that can be used as a context manager. The directory and its contents are removed on context exit or object destruction. Offers control over cleanup behavior and error handling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tempfile.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
TemporaryDirectory(suffix=None, prefix=None, dir=None, ignore_cleanup_errors=False, *, delete=True)
```

----------------------------------------

TITLE: Handling Task Cancellation with asyncio Python
DESCRIPTION: Details the process of task cancellation in asyncio, recommending the use of try/finally blocks to handle asyncio.CancelledError exceptions and ensuring proper cleanup during cancellation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_6



----------------------------------------

TITLE: Getting a Distribution Instance with importlib.metadata - Python
DESCRIPTION: Shows the recommended way to obtain a concrete `Distribution` object for a named package using the `distribution()` function, which serves as the entry point to more detailed metadata.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_23

LANGUAGE: python
CODE:
```
>>> from importlib.metadata import distribution  # doctest: +SKIP
>>> dist = distribution('wheel')  # doctest: +SKIP
>>> type(dist)  # doctest: +SKIP
<class 'importlib.metadata.PathDistribution'>
```

----------------------------------------

TITLE: Changing Path Suffix in Python using PurePath.with_suffix()
DESCRIPTION: Illustrates the use of the with_suffix() method to create a new path with a changed suffix. It shows various scenarios including adding, changing, and removing suffixes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
>>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')
>>> p.with_suffix('.bz2')
PureWindowsPath('c:/Downloads/pathlib.tar.bz2')
>>> p = PureWindowsPath('README')
>>> p.with_suffix('.txt')
PureWindowsPath('README.txt')
>>> p = PureWindowsPath('README.txt')
>>> p.with_suffix('')
PureWindowsPath('README')
```

----------------------------------------

TITLE: Using SMTP with context manager in Python
DESCRIPTION: Example showing how to use the SMTP class with Python's with statement for automatic connection cleanup. The code demonstrates connecting to a domain and executing a noop command.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/smtplib.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> from smtplib import SMTP
>>> with SMTP("domain.org") as smtp:
...     smtp.noop()
...
(250, b'Ok')
>>>
```

----------------------------------------

TITLE: String Concatenation and Repetition in Python
DESCRIPTION: This snippet shows how to concatenate strings using the + operator and repeat strings using the * operator in Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/introduction.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
>>> # 3 times 'un', followed by 'ium'
>>> 3 * 'un' + 'ium'
'unununium'
```

----------------------------------------

TITLE: Exception Class Hierarchy and Matching in Python
DESCRIPTION: This code demonstrates how exception class inheritance affects exception handling, showing that exception handlers match the specified class and its subclasses in order of appearance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/errors.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
class B(Exception):
    pass

class C(B):
    pass

class D(C):
    pass

for cls in [B, C, D]:
    try:
        raise cls()
    except D:
        print("D")
    except C:
        print("C")
    except B:
        print("B")
```

----------------------------------------

TITLE: Deprecating Bitwise Inversion (~) on bool in Python
DESCRIPTION: Using the bitwise inversion operator (~) on boolean values is deprecated and will raise an error in Python 3.16. Use 'not' for logical negation. If bitwise inversion of the underlying integer is truly needed, explicitly convert to int first (e.g., ~int(x)).
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_43

LANGUAGE: Python
CODE:
```
~bool_variable
```

----------------------------------------

TITLE: HTTP PUT Request using urllib.request in Python
DESCRIPTION: Example showing how to perform an HTTP PUT request using the Request class with a specified method parameter. This demonstrates how to use methods other than the default GET or POST.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_44

LANGUAGE: python
CODE:
```
import urllib.request
DATA = b'some data'
req = urllib.request.Request(url='http://localhost:8080', data=DATA, method='PUT')
with urllib.request.urlopen(req) as f:
    pass
print(f.status)
print(f.reason)
```

----------------------------------------

TITLE: Using the enumerate() Function - Python
DESCRIPTION: This snippet illustrates the use of the `enumerate()` built-in function in Python, which simplifies loops by providing both index and value from a list or iterator. It helps avoid common patterns involving manual index handling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.3.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
for i, item in enumerate(L):
    # ... compute some result based on item ...
    L[i] = result
```

----------------------------------------

TITLE: Setting Temporary Breakpoints - Pdb - Python
DESCRIPTION: Sets a temporary breakpoint that is automatically removed after being hit for the first time. Arguments are identical to the 'break' command.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_9



----------------------------------------

TITLE: Handling Leap Year Date Parsing in Python
DESCRIPTION: Example showing how to safely parse dates involving leap years using strptime(). Demonstrates the recommended approach to avoid leap year bugs when parsing month/day without year.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
from datetime import datetime
date_string = "02/29"
when = datetime.strptime(f"{date_string};1984", "%m/%d;%Y")  # Avoids leap year bug.
when.strftime("%B %d")
```

----------------------------------------

TITLE: Simple INI Configuration Override File
DESCRIPTION: Demonstrates a minimal INI file used to override specific values from another configuration file.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_7

LANGUAGE: ini
CODE:
```
[DEFAULT]
ServerAliveInterval = -1
```

----------------------------------------

TITLE: Adding Version Information in Python argparse
DESCRIPTION: Replace the OptionParser constructor version argument with an explicit add_argument call for --version when migrating to argparse. This configures a version flag with appropriate action and version text.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/argparse-optparse.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
parser.add_argument('--version', action='version', version='<the version>')
```

----------------------------------------

TITLE: Function Definition for import_module in Python
DESCRIPTION: Provides an efficient wrapper around __import__ to import modules using absolute or relative paths. It returns the specified module or package, simplifying module importation over __import__. For new modules created during runtime, calling invalidate_caches may be necessary for detection.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
.. function:: import_module(name, package=None)

    Import a module. The *name* argument specifies what module to
    import in absolute or relative terms
    (e.g. either ``pkg.mod`` or ``..mod``). If the name is
    specified in relative terms, then the *package* argument must be set to
    the name of the package which is to act as the anchor for resolving the
    package name (e.g. ``import_module('..mod', 'pkg.subpkg')`` will import
    ``pkg.mod``).
```

----------------------------------------

TITLE: Generating Random Numbers in Python
DESCRIPTION: Examples of using the random module to generate various types of random numbers. Includes basic random floating-point generation, selecting random integers from ranges, and higher-level functions for selecting from sequences.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/library.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
import random
random.random()
```

----------------------------------------

TITLE: Setting Mock Spec to Class with Mixed Sync/Async Methods
DESCRIPTION: Demonstrates how setting a mock's spec to a class with both synchronous and asynchronous methods automatically detects and sets appropriate mock types for each method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
>>> class ExampleClass:
...     def sync_foo():
...         pass
...     async def async_foo():
...         pass
...
>>> a_mock = AsyncMock(ExampleClass)
>>> a_mock.sync_foo
<MagicMock name='mock.sync_foo' id='...'>
>>> a_mock.async_foo
<AsyncMock name='mock.async_foo' id='...'>
>>> mock = Mock(ExampleClass)
>>> mock.sync_foo
<Mock name='mock.sync_foo' id='...'>
>>> mock.async_foo
<AsyncMock name='mock.async_foo' id='...'>
```

----------------------------------------

TITLE: Using random.sample Function in Python
DESCRIPTION: Demonstrates the usage of the new random.sample function for choosing k unique elements from a population without replacement. Shows examples with different types of populations and error handling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.3.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
>>> days = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'St', 'Sn']
>>> random.sample(days, 3)      # Choose 3 elements
['St', 'Sn', 'Th']
>>> random.sample(days, 7)      # Choose 7 elements
['Tu', 'Th', 'Mo', 'We', 'St', 'Fr', 'Sn']
>>> random.sample(days, 7)      # Choose 7 again
['We', 'Mo', 'Sn', 'Fr', 'Tu', 'St', 'Th']
>>> random.sample(days, 8)      # Can't choose eight
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
  File "random.py", line 414, in sample
      raise ValueError, "sample larger than population"
ValueError: sample larger than population
>>> random.sample(xrange(1,10000,2), 10)   # Choose ten odd nos. under 10000
[3407, 3805, 1505, 7023, 2401, 2267, 9733, 3151, 8083, 9195]
```

----------------------------------------

TITLE: Using Round Function for Approximate Value Comparison in Python
DESCRIPTION: Shows how the round function can be used to compare approximate values when the exact comparison would fail due to floating-point errors.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/floatingpoint.rst#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> round(math.pi, ndigits=2) == round(22 / 7, ndigits=2)
True
```

----------------------------------------

TITLE: Checking for Substring in Python bytes
DESCRIPTION: Shows how to check if a subsequence is a substring of bytes object using the 'in' operator, which is preferred over using the find() method when only testing for presence.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_44

LANGUAGE: python
CODE:
```
>>> b'Py' in b'Python'
True
```

----------------------------------------

TITLE: Creating a Custom SQL Function with MD5 Hash in SQLite3
DESCRIPTION: This example demonstrates how to create and use a custom SQL function in SQLite3 that calculates an MD5 hash. It shows the complete workflow from defining the function to executing it in a query.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
>>> import hashlib
>>> def md5sum(t):
...     return hashlib.md5(t).hexdigest()
>>> con = sqlite3.connect(":memory:")
>>> con.create_function("md5", 1, md5sum)
>>> for row in con.execute("SELECT md5(?)", (b"foo",)):
...     print(row)
('acbd18db4cc2f85cedef654fccc4a4d8',)
>>> con.close()
```

----------------------------------------

TITLE: Implementing Dict Merge and Update Operators
DESCRIPTION: Implementation of PEP 584's merge (|) and update (|=) operators for dict and collections.UserDict objects.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.9.0a4.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
dict1 | dict2  # merge operator
dict1 |= dict2  # update operator
```

----------------------------------------

TITLE: Checking Regular Files with os.path
DESCRIPTION: The isfile function verifies if the specified path represents an existing regular file, following symbolic links as needed. Support for path-like objects was introduced in version 3.6.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
def isfile(path):
    return os.path.isfile(path)
```

----------------------------------------

TITLE: Calculating Directory Sizes While Walking a Directory Tree in Python
DESCRIPTION: Example using os.walk() to recursively traverse a directory structure, calculating the total size of files in each directory while skipping __pycache__ directories.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_48

LANGUAGE: python
CODE:
```
import os
from os.path import join, getsize
for root, dirs, files in os.walk('python/Lib/xml'):
    print(root, "consumes", end=" ")
    print(sum(getsize(join(root, name)) for name in files), end=" ")
    print("bytes in", len(files), "non-directory files")
    if '__pycache__' in dirs:
        dirs.remove('__pycache__')  # don't visit __pycache__ directories
```

----------------------------------------

TITLE: Installing Packages with Multiple Python Versions (POSIX)
DESCRIPTION: Commands for installing packages using different Python versions on POSIX systems (Linux/macOS).
SOURCE: https://github.com/python/cpython/blob/main/Doc/installing/index.rst#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
python2   -m pip install SomePackage  # default Python 2
python2.7 -m pip install SomePackage  # specifically Python 2.7
python3   -m pip install SomePackage  # default Python 3
python3.4 -m pip install SomePackage  # specifically Python 3.4
```

----------------------------------------

TITLE: Using the closing Function for Resource Management in Python
DESCRIPTION: This snippet shows how to use the closing function from contextlib to automatically close a resource at the end of a block. It demonstrates opening a URL and iterating over its contents.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_18

LANGUAGE: Python
CODE:
```
import urllib, sys
from contextlib import closing

with closing(urllib.urlopen('http://www.yahoo.com')) as f:
    for line in f:
        sys.stdout.write(line)
```

----------------------------------------

TITLE: Creating and using row factories in Python with sqlite3
DESCRIPTION: This section demonstrates how to create and use custom row factories to change how query results are returned. It includes examples of using sqlite3.Row, a dict factory, and a named tuple factory.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_32

LANGUAGE: Python
CODE:
```
con = sqlite3.connect(":memory:")
con.row_factory = sqlite3.Row

res = con.execute("SELECT 'Earth' AS name, 6378 AS radius")
row = res.fetchone()
row.keys()
row[0]         # Access by index.
row["name"]    # Access by name.
row["RADIUS"]  # Column names are case-insensitive.
con.close()
```

LANGUAGE: Python
CODE:
```
def dict_factory(cursor, row):
    fields = [column[0] for column in cursor.description]
    return {key: value for key, value in zip(fields, row)}

con = sqlite3.connect(":memory:")
con.row_factory = dict_factory
for row in con.execute("SELECT 1 AS a, 2 AS b"):
    print(row)
con.close()
```

LANGUAGE: Python
CODE:
```
from collections import namedtuple

def namedtuple_factory(cursor, row):
    fields = [column[0] for column in cursor.description]
    cls = namedtuple("Row", fields)
    return cls._make(row)

con = sqlite3.connect(":memory:")
con.row_factory = namedtuple_factory
cur = con.execute("SELECT 1 AS a, 2 AS b")
row = cur.fetchone()
row
row[0]  # Indexed access.
row.b   # Attribute access.
con.close()
```

----------------------------------------

TITLE: Using Path objects in zipfile module for directory traversal and file operations
DESCRIPTION: This code snippet demonstrates constructing and using zipfile.Path objects to traverse ZIP archives with a pathlib-like syntax. It shows how to chain paths with the / operator or joinpath method to navigate the ZIP archive directory structure.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/zipfile.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
>>> Path(...).joinpath('child').joinpath('grandchild')
>>> Path(...).joinpath('child', 'grandchild')
>>> Path(...) / 'child' / 'grandchild'
```

----------------------------------------

TITLE: Using zip() with strict=True Option
DESCRIPTION: Shows how zip() behaves with strict=True parameter when combining iterables of equal length
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
list(zip(('a', 'b', 'c'), (1, 2, 3), strict=True))
```

----------------------------------------

TITLE: Generating Random Byte String with Python secrets Module
DESCRIPTION: This snippet demonstrates how to use the token_bytes() function from the secrets module to generate a random byte string of 16 bytes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/secrets.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> token_bytes(16)  #doctest:+SKIP
b'\xebr\x17D*t\xae\xd4\xe3S\xb6\xe2\xebP1\x8b'
```

----------------------------------------

TITLE: Generating Random Integers in Python
DESCRIPTION: The randrange() function returns a randomly selected element from a range. It supports various argument patterns similar to the range() function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/random.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
randrange(stop)
randrange(start, stop[, step])
```

----------------------------------------

TITLE: Parsing Arguments and Accessing Results in Python
DESCRIPTION: This snippet illustrates how to parse the command-line arguments using the parse_args method of the ArgumentParser. The parsed arguments are stored as attributes on the returned Namespace object, which can then be accessed to retrieve the provided values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_2

LANGUAGE: python
CODE:
```
args = parser.parse_args()
print(args.filename, args.count, args.verbose)
```

----------------------------------------

TITLE: Running Subprocess Commands in Python
DESCRIPTION: Examples of using the new subprocess.run() function to execute commands and handle the results. Shows basic usage, error checking, and output capturing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_30

LANGUAGE: Python
CODE:
```
>>> subprocess.run(["ls", "-l"])  # doesn't capture output
CompletedProcess(args=['ls', '-l'], returncode=0)

>>> subprocess.run("exit 1", shell=True, check=True)
Traceback (most recent call last):
  ...
subprocess.CalledProcessError: Command 'exit 1' returned non-zero exit status 1

>>> subprocess.run(["ls", "-l", "/dev/null"], stdout=subprocess.PIPE)
CompletedProcess(args=['ls', '-l', '/dev/null'], returncode=0,
stdout=b'crw-rw-rw- 1 root root 1, 3 Jan 23 16:23 /dev/null\n')
```

----------------------------------------

TITLE: Using splitext() Function with Basic Paths
DESCRIPTION: Demonstrates splitting a basic filename into root and extension components. When no extension exists, returns an empty string as the extension.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
>>> splitext('bar')
('bar', '')
```

----------------------------------------

TITLE: Mocking Asynchronous Iterators in Python
DESCRIPTION: Shows how to mock asynchronous iterators using MagicMock by configuring the __aiter__ method's return value. This example works with Python 3.8 and later.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
mock = MagicMock()  # AsyncMock also works here
mock.__aiter__.return_value = [1, 2, 3]
async def main():
    return [i async for i in mock]

asyncio.run(main())
```

----------------------------------------

TITLE: Demonstrating Lambda Closure Variable Changes
DESCRIPTION: This example shows how changing the global variable affects all lambda functions that close over it, proving they all reference the same variable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
>>> x = 8
>>> squares[2]()
64
```

----------------------------------------

TITLE: Date Formatting Examples
DESCRIPTION: Examples of various date formatting methods including isoformat() and ctime()
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
>>> from datetime import date
>>> date(2002, 12, 4).isoformat()
'2002-12-04'
>>> date(2002, 12, 4).ctime()
'Wed Dec  4 00:00:00 2002'
```

----------------------------------------

TITLE: unittest Filtering with -k Command-Line Option
DESCRIPTION: The unittest module introduces the -k command-line option for filtering tests. This option allows users to specify a name substring or Unix shell-like pattern to select specific tests to run.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_33

LANGUAGE: python
CODE:
```
unittest
--------

The new ``-k`` command-line option allows filtering tests by a name
substring or a Unix shell-like pattern.
For example, ``python -m unittest -k foo`` runs
``foo_tests.SomeTest.test_something``, ``bar_tests.SomeTest.test_foo``,
but not ``bar_tests.FooTest.test_something``.
(Contributed by Jonas Haag in :issue:`32071`.)
```

----------------------------------------

TITLE: Using the contextmanager Decorator for Database Transactions in Python
DESCRIPTION: This snippet shows how to use the @contextmanager decorator from the contextlib module to create a context manager for database transactions. It yields a cursor and handles committing or rolling back the transaction.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_16

LANGUAGE: Python
CODE:
```
from contextlib import contextmanager

@contextmanager
def db_transaction (connection):
    cursor = connection.cursor()
    try:
        yield cursor
    except:
        connection.rollback()
        raise
    else:
        connection.commit()

db = DatabaseConnection()
with db_transaction(db) as cursor:
    ...
```

----------------------------------------

TITLE: Python Optional Argument With Optional Type
DESCRIPTION: Shows a function with an optional argument that *does* allow `None` as a value, correctly using the `Optional` type annotation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_64

LANGUAGE: python
CODE:
```
def foo(arg: Optional[int] = None) -> None:
    ...
```

----------------------------------------

TITLE: Function with Mutable Default Argument
DESCRIPTION: This function accumulates values in a mutable default parameter (a list), illustrating potential pitfalls when using mutable default arguments in Python functions. It emphasizes that such default values are shared across function calls.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
def f(a, L=[]):
    L.append(a)
    return L

print(f(1))
print(f(2))
print(f(3))
```

----------------------------------------

TITLE: Using Assignment Expressions with the Walrus Operator in Python
DESCRIPTION: This snippet demonstrates the use of the assignment expression (walrus operator :=) to assign values to variables inline during a test. It enhances code readability by reducing function calls.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
if (n := len(a)) > 10:
    print(f"List is too long ({n} elements, expected <= 10)")
```

----------------------------------------

TITLE: Creating a Multidimensional List Using List Comprehension in Python
DESCRIPTION: Demonstrates creating a multidimensional list using a list comprehension, which creates independent inner lists for each element of the outer list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_41

LANGUAGE: python
CODE:
```
w, h = 2, 3
A = [[None] * w for i in range(h)]
```

----------------------------------------

TITLE: Type Hinting Generic Containers (Sequence, Mapping) - Python
DESCRIPTION: Demonstrates type hints for generic container abstract base classes like `Sequence` and `Mapping`, specifying the expected types of elements or keys/values. Requires `collections.abc`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_13

LANGUAGE: python
CODE:
```
from collections.abc import Mapping, Sequence

class Employee: ...

# Sequence[Employee] indicates that all elements in the sequence
# must be instances of "Employee".
# Mapping[str, str] indicates that all keys and all values in the mapping
# must be strings.
def notify_by_email(employees: Sequence[Employee],
                   overrides: Mapping[str, str]) -> None: ...
```

----------------------------------------

TITLE: Defining External and Internal Class Methods in Python
DESCRIPTION: Demonstrates different ways to define and assign methods to a class, including external function definition and internal method declaration.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/classes.rst#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
# Function defined outside the class
def f1(self, x, y):
    return min(x, x+y)

class C:
    f = f1

    def g(self):
        return 'hello world'

    h = g
```

----------------------------------------

TITLE: Formatting Numbers in Multiple Bases with Python
DESCRIPTION: Illustrates formatting numbers in decimal (d), hexadecimal (X), octal (o), and binary (b) bases within nested loops using str.format(). Demonstrates dynamic width specification and printing multiple formats on a single line.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/string.rst#_snippet_15

LANGUAGE: Python
CODE:
```
>>> width = 5
>>> for num in range(5,12): #doctest: +NORMALIZE_WHITESPACE
...     for base in 'dXob':
...         print('{0:{width}{base}}'.format(num, base=base, width=width), end=' ')
...     print()
...
    5     5     5   101
    6     6     6   110
    7     7     7   111
    8     8    10  1000
    9     9    11  1001
   10     A    12  1010
   11     B    13  1011
```

----------------------------------------

TITLE: Mock Side Effect with File Content
DESCRIPTION: Shows how to use side_effect to return different content for different file operations using mock_open.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
DEFAULT = "default"
data_dict = {"file1": "data1",
             "file2": "data2"}

def open_side_effect(name):
    return mock_open(read_data=data_dict.get(name, DEFAULT))()

with patch("builtins.open", side_effect=open_side_effect):
    with open("file1") as file1:
        assert file1.read() == "data1"

    with open("file2") as file2:
        assert file2.read() == "data2"

    with open("file3") as file2:
        assert file2.read() == "default"
```

----------------------------------------

TITLE: Splitting Text with Regular Expressions in Python
DESCRIPTION: This snippet demonstrates how to split text into a list using the re.split() function. It shows two examples: one splitting on newlines and another splitting on multiple delimiters with a maxsplit parameter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_28

LANGUAGE: python
CODE:
```
>>> entries = re.split("\n+", text)
>>> entries
['Ross McFluff: 834.345.1254 155 Elm Street',
'Ronald Heathmore: 892.345.3428 436 Finley Avenue',
'Frank Burger: 925.541.7625 662 South Dogwood Way',
'Heather Albrecht: 548.326.4584 919 Park Place']

>>> [re.split(":? ", entry, maxsplit=3) for entry in entries]
[['Ross', 'McFluff', '834.345.1254', '155 Elm Street'],
['Ronald', 'Heathmore', '892.345.3428', '436 Finley Avenue'],
['Frank', 'Burger', '925.541.7625', '662 South Dogwood Way'],
['Heather', 'Albrecht', '548.326.4584', '919 Park Place']]

>>> [re.split(":? ", entry, maxsplit=4) for entry in entries]
[['Ross', 'McFluff', '834.345.1254', '155', 'Elm Street'],
['Ronald', 'Heathmore', '892.345.3428', '436', 'Finley Avenue'],
['Frank', 'Burger', '925.541.7625', '662', 'South Dogwood Way'],
['Heather', 'Albrecht', '548.326.4584', '919', 'Park Place']]
```

----------------------------------------

TITLE: Deque Breadth-First Search Example
DESCRIPTION: This code illustrates the use of a `deque` in a breadth-first search algorithm. The `unsearched` deque holds nodes to be explored.  The algorithm iteratively removes a node from the left, explores its neighbors, and adds them to the right of the deque.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib2.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
unsearched = deque([starting_node])
def breadth_first_search(unsearched):
    node = unsearched.popleft()
    for m in gen_moves(node):
        if is_goal(m):
            return m
        unsearched.append(m)
```

----------------------------------------

TITLE: Finding n Smallest Items - Python
DESCRIPTION: The `nsmallest` function returns a list of the n smallest elements from an iterable, allowing for custom sorting via a key function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/heapq.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
def nsmallest(n, iterable, key=None):
    """
    Return a list with the *n* smallest elements from the dataset defined by
    *iterable*. *key*, if provided, specifies a function of one argument that is
    used to extract a comparison key from each element in *iterable*.
    """
```

----------------------------------------

TITLE: Tracking Method Calls on Mock Objects in Python
DESCRIPTION: Shows how to use the method_calls attribute to track calls to methods and attributes of a Mock object. This attribute records the call chain for nested method calls.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
>>> mock = Mock()
>>> mock.method()
<Mock name='mock.method()' id='...'>
>>> mock.property.method.attribute()
<Mock name='mock.property.method.attribute()' id='...'>
>>> mock.method_calls
[call.method(), call.property.method.attribute()]
```

----------------------------------------

TITLE: Creating Decimal Instances in Python
DESCRIPTION: Illustrates how to construct `Decimal` objects from various data types like integers, strings, floats (showing potential precision issues with binary floats), tuples, and special string representations for NaN and Infinity.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_1

LANGUAGE: python
CODE:
```
>>> getcontext().prec = 28
>>> Decimal(10)
Decimal('10')
>>> Decimal('3.14')
Decimal('3.14')
>>> Decimal(3.14)
Decimal('3.140000000000000124344978758017532527446746826171875')
>>> Decimal((0, (3, 1, 4), -2))
Decimal('3.14')
>>> Decimal(str(2.0 ** 0.5))
Decimal('1.4142135623730951')
>>> Decimal(2) ** Decimal('0.5')
Decimal('1.414213562373095048801688724')
>>> Decimal('NaN')
Decimal('NaN')
>>> Decimal('-Infinity')
Decimal('-Infinity')
```

----------------------------------------

TITLE: Signaling Test Failure in Python unittest
DESCRIPTION: Method to unconditionally signal a test failure with an optional error message.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
fail(msg=None)
```

----------------------------------------

TITLE: Analyzing Profiling Results with pstats
DESCRIPTION: This code demonstrates how to use the pstats module to analyze and format profiling data saved to a file. It imports pstats and SortKey, creates a Stats object, strips directory names, sorts the statistics, and prints the results. The example also provides different sorting methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/profile.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
import pstats
from pstats import SortKey
p = pstats.Stats('restats')
p.strip_dirs().sort_stats(-1).print_stats()
```

----------------------------------------

TITLE: Using time.fromisoformat() to parse ISO 8601 time strings in Python
DESCRIPTION: Examples of parsing ISO 8601 formatted time strings using time.fromisoformat() method. Shows handling of different formats including microseconds with period or comma separator, and timezone offsets.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
>>> time.fromisoformat('04:23:01.000384')
datetime.time(4, 23, 1, 384)
>>> time.fromisoformat('04:23:01,000384')
datetime.time(4, 23, 1, 384)
>>> time.fromisoformat('04:23:01+04:00')
datetime.time(4, 23, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=14400)))
>>> time.fromisoformat('04:23:01Z')
datetime.time(4, 23, 1, tzinfo=datetime.timezone.utc)
>>> time.fromisoformat('04:23:01+00:00')
datetime.time(4, 23, 1, tzinfo=datetime.timezone.utc)
```

----------------------------------------

TITLE: Implementing Augmented Assignment Operators in Python
DESCRIPTION: These methods are invoked for augmented assignment operations (e.g., +=, -=). They should attempt to perform the operation in-place, modifying `self`, and return the result. If not defined or returning `NotImplemented`, Python falls back to the standard and reflected binary methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_25

LANGUAGE: Python
CODE:
```
object.__iadd__(self, other)
object.__isub__(self, other)
object.__imul__(self, other)
object.__imatmul__(self, other)
object.__itruediv__(self, other)
object.__ifloordiv__(self, other)
object.__imod__(self, other)
object.__ipow__(self, other[, modulo])
object.__ilshift__(self, other)
object.__irshift__(self, other)
object.__iand__(self, other)
object.__ixor__(self, other)
object.__ior__(self, other)
```

----------------------------------------

TITLE: Generator Expression Example in Python
DESCRIPTION: This code snippet showcases a generator expression in Python, used to calculate the sum of squares for numbers in a range.  It demonstrates concise and memory-efficient way to generate a sequence of values within another expression. The sum() function is used to compute the total of the generated squares.
SOURCE: https://github.com/python/cpython/blob/main/Doc/glossary.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> sum(i*i for i in range(10))         # sum of squares 0, 1, 4, ... 81
285
```

----------------------------------------

TITLE: Mutable Default Parameter Handling
DESCRIPTION: Demonstrates the proper way to handle mutable default parameters using None as the default value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
def whats_on_the_telly(penguin=None):
    if penguin is None:
        penguin = []
    penguin.append("property of the zoo")
    return penguin
```

----------------------------------------

TITLE: Using process_time Function in Python
DESCRIPTION: Returns the sum of system and user CPU time of the current process in fractional seconds. Does not include time elapsed during sleep and is process-wide by definition.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/time.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
process_time() -> float
```

----------------------------------------

TITLE: argparse nargs=N for Fixed Argument Count in Python
DESCRIPTION: Demonstrates using nargs=N (where N is an integer) to specify that an argument expects exactly N values, which are then collected into a list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_40

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo', nargs=2)
>>> parser.add_argument('bar', nargs=1)
>>> parser.parse_args('c --foo a b'.split())
Namespace(bar=['c'], foo=['a', 'b'])
```

----------------------------------------

TITLE: Implicit Any in Generic Inheritance (Python)
DESCRIPTION: Illustrates that using a generic class (`Iterable`) as a base class without specifying type parameters implicitly defaults each parameter position to `Any`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_35

LANGUAGE: Python
CODE:
```
from collections.abc import Iterable

class MyIterable(Iterable): # Same as Iterable[Any]
    ...
```

----------------------------------------

TITLE: Dynamic String Alignment with Python Format
DESCRIPTION: Demonstrates using nested format specifiers within str.format() to dynamically control string alignment (<, ^, >) and fill characters based on variables. Iterates through different alignment options.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/string.rst#_snippet_13

LANGUAGE: Python
CODE:
```
>>> for align, text in zip('<^>', ['left', 'center', 'right']):
...     '{0:{fill}{align}16}'.format(text, fill=align, align=align)
...
'left<<<<<<<<<<<<'
'^^^^^center^^^^^'
'>>>>>>>>>>>right'
```

----------------------------------------

TITLE: Capturing Delimiters with split() in Python
DESCRIPTION: Shows how to use capturing parentheses in a regex pattern to include the delimiters in the result of split(). The second example captures the delimiters as separate elements in the result list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
>>> p = re.compile(r'\W+')
>>> p2 = re.compile(r'(\W+)')
>>> p.split('This... is a test.')
['This', 'is', 'a', 'test', '']
>>> p2.split('This... is a test.')
['This', '... ', 'is', ' ', 'a', ' ', 'test', '.', '']
```

----------------------------------------

TITLE: Defining IntEnum Class - Python
DESCRIPTION: This snippet illustrates the definition of an IntEnum class, where Enum members are also integers and can be used in any operation that relies on integer value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/enum.rst#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
>>> from enum import IntEnum
>>> class Number(IntEnum):
...     ONE = 1
...     TWO = 2
...     THREE = 3
...
>>> Number.THREE
<Number.THREE: 3>
>>> Number.ONE + Number.TWO
3
>>> Number.THREE + 5
8
>>> Number.THREE == 3
True
```

----------------------------------------

TITLE: Demonstrating Special Method Lookup Bypassing Instance Attributes
DESCRIPTION: This snippet illustrates that assigning a special method like `__len__` directly to an object's instance dictionary (`c.__len__ = ...`) does not affect the behavior of built-in functions like `len()`, which use a specialized lookup process that bypasses instance attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_33

LANGUAGE: python
CODE:
```
class C:
    pass
c = C()
c.__len__ = lambda: 5
len(c)
```

----------------------------------------

TITLE: Creating Task in Asyncio Event Loop
DESCRIPTION: Schedules the execution of a coroutine and returns a Task object, with optional naming and context specification. Supports third-party event loop implementations for task creation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
loop.create_task(coro, *, name=None, context=None)
```

----------------------------------------

TITLE: Sending GET Request with Data in URL in Python
DESCRIPTION: Demonstrates how to pass data in an HTTP GET request by encoding it in the URL itself using urllib.parse.urlencode().
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/urllib2.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
>>> import urllib.request
>>> import urllib.parse
>>> data = {}
>>> data['name'] = 'Somebody Here'
>>> data['location'] = 'Northampton'
>>> data['language'] = 'Python'
>>> url_values = urllib.parse.urlencode(data)
>>> print(url_values)  # The order may differ from below.  #doctest: +SKIP
name=Somebody+Here&language=Python&location=Northampton
>>> url = 'http://www.example.com/example.cgi'
>>> full_url = url + '?' + url_values
>>> data = urllib.request.urlopen(full_url)
```

----------------------------------------

TITLE: Compressing File Data using Python gzip
DESCRIPTION: This snippet demonstrates how to compress data from an existing input file object (`f_in`) and write it to a new gzip-compressed file named '/home/joe/file.txt.gz'. It requires the `gzip` and `shutil` modules and assumes `f_in` is an open file-like object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/gzip.rst#_snippet_2

LANGUAGE: python
CODE:
```
with gzip.open('/home/joe/file.txt.gz', 'wb') as f_out:
  shutil.copyfileobj(f_in, f_out)
```

----------------------------------------

TITLE: TypeVarTuple Usage with *args
DESCRIPTION: Demonstrates how an unpacked TypeVarTuple can be used to annotate `*args`, allowing the types of individual arguments to be referenced and checked against a callback signature.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_122

LANGUAGE: python
CODE:
```
def call_soon[*Ts](
    callback: Callable[[*Ts], None],
    *args: *Ts
) -> None:
    ...
    callback(*args)
```

----------------------------------------

TITLE: Configuring Default Decimal Context for Threads Python
DESCRIPTION: This snippet demonstrates how to set application-wide default configurations for the `decimal` module context *before* starting threads. It modifies the `DefaultContext` object to set precision, rounding mode, and trap settings. This ensures that any thread calling `getcontext()` without having called `setcontext()` will receive a context initialized with these shared defaults, preventing race conditions if threads access the default context concurrently at startup. Requires the `decimal` module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_38

LANGUAGE: Python
CODE:
```
# Set applicationwide defaults for all threads about to be launched
DefaultContext.prec = 12
DefaultContext.rounding = ROUND_DOWN
DefaultContext.traps = ExtendedContext.traps.copy()
DefaultContext.traps[InvalidOperation] = 1
setcontext(DefaultContext)

# Afterwards, the threads can be started
t1.start()
t2.start()
t3.start()
 . . .
```

----------------------------------------

TITLE: Pickling and Unpickling ShareableList Objects
DESCRIPTION: This example demonstrates that ShareableList objects can be pickled and unpickled, effectively sharing the underlying shared memory block. The deserialized object attaches to the existing shared memory using the unique name.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.shared_memory.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> import pickle
>>> from multiprocessing import shared_memory
>>> sl = shared_memory.ShareableList(range(10))
>>> list(sl)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

>>> deserialized_sl = pickle.loads(pickle.dumps(sl))
>>> list(deserialized_sl)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

>>> sl[0] = -1
>>> deserialized_sl[1] = -2
>>> list(sl)
[-1, -2, 2, 3, 4, 5, 6, 7, 8, 9]
>>> list(deserialized_sl)
[-1, -2, 2, 3, 4, 5, 6, 7, 8, 9]

>>> sl.shm.close()
>>> sl.shm.unlink()
```

----------------------------------------

TITLE: Python HTTP Server on Custom Port
DESCRIPTION: This snippet shows how to launch a Python HTTP server on a custom port by specifying the desired port number as an argument. By default, the server listens on port 8000. This feature requires only Python's standard library.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.server.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
python -m http.server 9000
```

----------------------------------------

TITLE: Database Dump Example in Python SQLite3
DESCRIPTION: Demonstrates how to dump an SQLite database to a SQL file using the iterdump() method. Creates a connection to example.db and writes the dump to dump.sql.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
con = sqlite3.connect('example.db')
with open('dump.sql', 'w') as f:
    for line in con.iterdump():
        f.write('%s\n' % line)
con.close()
```

----------------------------------------

TITLE: Parsing Namespaced XML with Custom Prefix Dictionary in Python
DESCRIPTION: Shows an improved method for searching namespaced XML by creating a dictionary with custom prefixes. This approach simplifies the search functions and makes the code more readable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
ns = {'real_person': 'http://people.example.com',
      'role': 'http://characters.example.com'}

for actor in root.findall('real_person:actor', ns):
    name = actor.find('real_person:name', ns)
    print(name.text)
    for char in actor.findall('role:character', ns):
        print(' |-->', char.text)
```

----------------------------------------

TITLE: Default Help Formatting with ArgumentParser in Python
DESCRIPTION: Illustrates the default behavior of `ArgumentParser` when formatting the description and epilog text in the help message. By default, text is line-wrapped and internal whitespace is cleaned up.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_8

LANGUAGE: Python
CODE:
```
>>> parser = argparse.ArgumentParser(
...     prog='PROG',
...     description='''this description
...         was indented weird
...             but that is okay''',
...     epilog='''
...             likewise for this epilog whose whitespace will
...         be cleaned up and whose words will be wrapped
...         across a couple lines''')
>>> parser.print_help()
usage: PROG [-h]

this description was indented weird but that is okay

options:
 -h, --help  show this help message and exit

likewise for this epilog whose whitespace will be cleaned up and whose words
will be wrapped across a couple lines
```

----------------------------------------

TITLE: Representing Paths as URIs in Python
DESCRIPTION: Shows how to use the as_uri() method to represent paths as 'file' URIs for both PosixPath and WindowsPath objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_28

LANGUAGE: python
CODE:
```
>>> p = PosixPath('/etc/passwd')
>>> p.as_uri()
'file:///etc/passwd'
>>> p = WindowsPath('c:/Windows')
>>> p.as_uri()
'file:///c:/Windows'
```

----------------------------------------

TITLE: Parsing Query String with parse_qsl Function in Python
DESCRIPTION: The parse_qsl function parses a query string and returns a list of name-value pairs. It accepts optional parameters for handling blank values, strict parsing, encoding, and more.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.parse.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
parse_qsl(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace', max_num_fields=None, separator='&')
```

----------------------------------------

TITLE: Verbose Regular Expression Compilation with re.VERBOSE
DESCRIPTION: Demonstrates creating a more readable regular expression using re.VERBOSE flag, which allows whitespace and comments in regex pattern. Useful for complex pattern matching with improved readability.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_32

LANGUAGE: python
CODE:
```
pat = re.compile(r"""
    \s*                 # Skip leading whitespace
    (?P<header>[^:]+)   # Header name
    \s* :               # Whitespace, and a colon
    (?P<value>.*?)      # The header's value -- *? used to
                        # lose the following trailing whitespace
    \s*$                # Trailing whitespace to end-of-line
   """, re.VERBOSE)
```

LANGUAGE: python
CODE:
```
pat = re.compile(r"\s*(?P<header>[^:]+)\s*:(?P<value>.*?)\s*$")
```

----------------------------------------

TITLE: Chaining Iterables with itertools.chain
DESCRIPTION: Example of using itertools.chain() to combine multiple iterables into a single sequential iterator.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
itertools.chain(['a', 'b', 'c'], (1, 2, 3)) =>
  a, b, c, 1, 2, 3
```

----------------------------------------

TITLE: Accessing Arguments' Attributes - Python
DESCRIPTION: Illustrates how to access attributes of arguments within the format string using dot notation. Includes an example with a complex number and a custom class with a `__str__` method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/string.rst#_snippet_4

LANGUAGE: python
CODE:
```
>>> c = 3-5j
>>> ('The complex number {0} is formed from the real part {0.real} '
...  'and the imaginary part {0.imag}.').format(c)
'The complex number (3-5j) is formed from the real part 3.0 and the imaginary part -5.0.'
>>> class Point:
...     def __init__(self, x, y):
...         self.x, self.y = x, y
...     def __str__(self):
...         return 'Point({self.x}, {self.y})'.format(self=self)
...
>>> str(Point(4, 2))
'Point(4, 2)'
```

----------------------------------------

TITLE: Sorting with Operator Module Functions
DESCRIPTION: Demonstrates using operator.itemgetter and operator.attrgetter for more efficient sorting of complex objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/sorting.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> from operator import itemgetter, attrgetter

>>> sorted(student_tuples, key=itemgetter(2))
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]

>>> sorted(student_objects, key=attrgetter('age'))
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
```

----------------------------------------

TITLE: Basic Command-line Test Discovery in Python unittest
DESCRIPTION: Shows basic commands for running test discovery from the command line within a project directory.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
cd project_directory
python -m unittest discover
```

----------------------------------------

TITLE: Creating Lambda Functions in a Loop with Incorrect Closure Behavior
DESCRIPTION: This example demonstrates a common pitfall where lambda functions defined in a loop all end up capturing the same final value of the loop variable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> squares = []
>>> for x in range(5):
...     squares.append(lambda: x**2)
```

----------------------------------------

TITLE: Using Lock Objects with Context Manager in Python
DESCRIPTION: Demonstrates how to use a thread lock object with Python's 'with' statement for safe thread synchronization. The lock is automatically acquired when entering the with block and released when exiting.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/_thread.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import _thread

a_lock = _thread.allocate_lock()

with a_lock:
    print("a_lock is locked while this executes")
```

----------------------------------------

TITLE: Define Class Variable with ClassVar Python
DESCRIPTION: Shows how to use `typing.ClassVar` to explicitly mark an attribute within a class definition as a class variable, distinct from instance variables.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_72

LANGUAGE: Python
CODE:
```
class Starship:
    stats: ClassVar[dict[str, int]] = {} # class variable
    damage: int = 10                     # instance variable
```

----------------------------------------

TITLE: Displaying Current Date with call_later in Python asyncio
DESCRIPTION: This example shows how to use loop.call_later to schedule a recurring callback that displays the current date every second for 5 seconds before stopping the event loop.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_36

LANGUAGE: python
CODE:
```
import asyncio
import datetime

def display_date(end_time, loop):
    print(datetime.datetime.now())
    if (loop.time() + 1.0) < end_time:
        loop.call_later(1, display_date, end_time, loop)
    else:
        loop.stop()

loop = asyncio.new_event_loop()

# Schedule the first call to display_date()
end_time = loop.time() + 5.0
loop.call_soon(display_date, end_time, loop)

# Blocking call interrupted by loop.stop()
try:
    loop.run_forever()
finally:
    loop.close()
```

----------------------------------------

TITLE: Escaping Special Characters in Regular Expressions in Python
DESCRIPTION: Shows how to use re.escape() function to escape special characters in a string, making it safe to use as a literal pattern in regular expressions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
>>> print(re.escape('https://www.python.org'))
https://www\.python\.org

>>> legal_chars = string.ascii_lowercase + string.digits + "!#$%&'*+-.^_`|~:"
>>> print('[%s]+' % re.escape(legal_chars))
[abcdefghijklmnopqrstuvwxyz0123456789!\#\$%\&'\*\+\-\.\^_`\|\~:]+

>>> operators = ['+', '-', '*', '/', '**']
>>> print('|'.join(map(re.escape, sorted(operators, reverse=True))))
/|\-|\+|\*\*|\*
```

LANGUAGE: python
CODE:
```
>>> digits_re = r'\d+'
>>> sample = '/usr/sbin/sendmail - 0 errors, 12 warnings'
>>> print(re.sub(digits_re, digits_re.replace('\\', r'\\'), sample))
/usr/sbin/sendmail - \d+ errors, \d+ warnings
```

----------------------------------------

TITLE: File Comparison Example
DESCRIPTION: Shows how to compare if two paths point to the same file
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_33

LANGUAGE: python
CODE:
```
>>> p = Path('spam')
>>> q = Path('eggs')
>>> p.samefile(q)
False
>>> p.samefile('spam')
True
```

----------------------------------------

TITLE: Sending All Data to Socket with asyncio
DESCRIPTION: This method sends data to a socket. It's the asynchronous version of socket.sendall(). The method continues sending until all data has been sent or an error occurs.  None is returned on success.  The socket must be non-blocking.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
.. method:: loop.sock_sendall(sock, data)
   :async:

   Send *data* to the *sock* socket. Asynchronous version of
   :meth:`socket.sendall() <socket.socket.sendall>`.

   This method continues to send to the socket until either all data
   in *data* has been sent or an error occurs.  ``None`` is returned
   on success.  On error, an exception is raised. Additionally, there is no way
   to determine how much data, if any, was successfully processed by the
   receiving end of the connection.

   *sock* must be a non-blocking socket.

```

----------------------------------------

TITLE: Modifying Link Attributes with ElementTree API
DESCRIPTION: Example demonstrating how to use ElementTree to parse an XML file, find elements using path expressions, iterate through elements, modify attributes, and write the changes back to a file. This specifically shows how to set the 'target' attribute on all links.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
>>> from xml.etree.ElementTree import ElementTree
>>> tree = ElementTree()
>>> tree.parse("index.xhtml")
<Element 'html' at 0xb77e6fac>
>>> p = tree.find("body/p")     # Finds first occurrence of tag p in body
>>> p
<Element 'p' at 0xb77ec26c>
>>> links = list(p.iter("a"))   # Returns list of all links
>>> links
[<Element 'a' at 0xb77ec2ac>, <Element 'a' at 0xb77ec1cc>]
>>> for i in links:             # Iterates through all found links
...     i.attrib["target"] = "blank"
...
>>> tree.write("output.xhtml")
```

----------------------------------------

TITLE: Handling Unix Signals in asyncio - Python
DESCRIPTION: These methods allow users to handle Unix signals in a way that integrates with the asyncio event loop. They enable the registration and removal of signal handlers that can invoke callbacks directly in the event loop's context, unlike traditional signal handling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
.. method:: loop.add_signal_handler(signum, callback, *args)

   Set *callback* as the handler for the *signum* signal.

   The callback will be invoked by *loop*, along with other queued callbacks
   and runnable coroutines of that event loop. Unlike signal handlers
   registered using :func:`signal.signal`, a callback registered with this
   function is allowed to interact with the event loop.

   Raise :exc:`ValueError` if the signal number is invalid or uncatchable.
   Raise :exc:`RuntimeError` if there is a problem setting up the handler.

   Use :func:`functools.partial` :ref:`to pass keyword arguments
   <asyncio-pass-keywords>` to *callback*.

   Like :func:`signal.signal`, this function must be invoked in the main
   thread.

.. method:: loop.remove_signal_handler(sig)

   Remove the handler for the *sig* signal.

   Return ``True`` if the signal handler was removed, or ``False`` if
   no handler was set for the given signal.

   .. availability:: Unix.
```

----------------------------------------

TITLE: Using runtime_checkable Protocol with isinstance (Named)
DESCRIPTION: Illustrates the use of `@runtime_checkable` for a protocol `Named` requiring a `name` attribute, showing that `isinstance()` can check for attribute presence on objects like `threading.Thread` instances.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_146

LANGUAGE: python
CODE:
```
@runtime_checkable
class Named(Protocol):
    name: str

import threading
assert isinstance(threading.Thread(name='Bob'), Named)
```

----------------------------------------

TITLE: Tracking Mock Calls with call_args in Python
DESCRIPTION: Shows how to use the call_args attribute to track the arguments of the most recent call to a Mock object. This attribute stores the arguments as a tuple of positional and keyword arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
>>> mock = Mock(return_value=None)
>>> print(mock.call_args)
None
>>> mock()
>>> mock.call_args
call()
>>> mock.call_args == ()
True
>>> mock(3, 4)
>>> mock.call_args
call(3, 4)
>>> mock.call_args == ((3, 4),)
True
>>> mock.call_args.args
(3, 4)
>>> mock.call_args.kwargs
{}
>>> mock(3, 4, 5, key='fish', next='w00t!')
>>> mock.call_args
call(3, 4, 5, key='fish', next='w00t!')
>>> mock.call_args.args
(3, 4, 5)
>>> mock.call_args.kwargs
{'key': 'fish', 'next': 'w00t!'}
```

----------------------------------------

TITLE: Managing file resources with CPython's reference counting
DESCRIPTION: Shows how CPython's reference counting can lead to subtle issues when managing resources across different Python implementations. The example demonstrates proper resource management using the 'with' statement for file handling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/design.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
for file in very_long_list_of_files:
    f = open(file)
    c = f.read(1)
```

LANGUAGE: python
CODE:
```
for file in very_long_list_of_files:
    with open(file) as f:
        c = f.read(1)
```

----------------------------------------

TITLE: Using JSON Module from Shell for Validation and Pretty-Printing
DESCRIPTION: Demonstrates how to use the json module from the command line to validate JSON strings and pretty-print them, including error handling for invalid JSON.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/json.rst#2025-04-21_snippet_7

LANGUAGE: shell
CODE:
```
$ echo '{"json":"obj"}' | python -m json
{
    "json": "obj"
}
$ echo '{1.2:3.4}' | python -m json
Expecting property name enclosed in double quotes: line 1 column 2 (char 1)
```

----------------------------------------

TITLE: Command-Line JSON Validation
DESCRIPTION: This command-line example demonstrates how to use Python's json module to validate and pretty-print JSON data from standard input. The snippet illustrates successful and error cases.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/json.rst#2025-04-21_snippet_13

LANGUAGE: shell
CODE:
```
$ echo '{"json": "obj"}' | python -m json
{
    "json": "obj"
}
$ echo '{1.2:3.4}' | python -m json
Expecting property name enclosed in double quotes: line 1 column 2 (char 1)
```

----------------------------------------

TITLE: Execute Python String Code - Simple Interface
DESCRIPTION: Simple interface for executing Python source code from a string, with parameters for execution context and start token. Returns execution result as PyObject* or NULL if exception occurred.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/veryhigh.rst#2025-04-21_snippet_0

LANGUAGE: c
CODE:
```
PyObject* PyRun_String(const char *str, int start, PyObject *globals, PyObject *locals)
```

----------------------------------------

TITLE: Basic GET Request Example with HTTPSConnection in Python
DESCRIPTION: A simple example of using the GET method with HTTPSConnection to connect to www.python.org. This demonstrates the minimal code required to establish an HTTPS connection.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.client.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> import http.client
>>> conn = http.client.HTTPSConnection("www.python.org")
```

----------------------------------------

TITLE: Python Optional Argument Without Optional Type
DESCRIPTION: Provides an example of a function with an optional argument (having a default value) that does not require the `Optional` type annotation if `None` is not an allowed value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_63

LANGUAGE: python
CODE:
```
def foo(arg: int = 0) -> None:
    ...
```

----------------------------------------

TITLE: Hashing a File with hashlib
DESCRIPTION: This example demonstrates how to calculate the hash of a file using the `hashlib.file_digest` function with a specified hash algorithm (SHA256). It opens the file in binary read mode, calculates the digest, and then retrieves the hexadecimal representation of the hash.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/hashlib.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```

      >>> import io, hashlib, hmac
      >>> with open(hashlib.__file__, "rb") as f:
      ...     digest = hashlib.file_digest(f, "sha256")
      ...
      >>> digest.hexdigest()  # doctest: +ELLIPSIS
      '...' 

```

----------------------------------------

TITLE: Shell Pipeline Replacement with Python Subprocess
DESCRIPTION: Converting shell pipelines to Python subprocess with proper SIGPIPE handling
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/subprocess.rst#2025-04-21_snippet_12

LANGUAGE: bash
CODE:
```
output=$(dmesg | grep hda)
```

LANGUAGE: python
CODE:
```
p1 = Popen(["dmesg"], stdout=PIPE)
p2 = Popen(["grep", "hda"], stdin=p1.stdout, stdout=PIPE)
p1.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.
output = p2.communicate()[0]
```

----------------------------------------

TITLE: Creating Fibonacci Module in Python
DESCRIPTION: Defines a Python module with two functions for generating Fibonacci sequences. One function prints the sequence up to n, while the other returns it as a list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/modules.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
# Fibonacci numbers module

def fib(n):    # write Fibonacci series up to n
    a, b = 0, 1
    while a < n:
        print(a, end=' ')
        a, b = b, a+b
    print()

def fib2(n):   # return Fibonacci series up to n
    result = []
    a, b = 0, 1
    while a < n:
        result.append(a)
        a, b = b, a+b
    return result
```

----------------------------------------

TITLE: Parsing a TOML string using tomllib.loads()
DESCRIPTION: Example showing how to parse a TOML string directly using the tomllib.loads() function. This converts the TOML string into a Python dictionary according to the module's conversion rules.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tomllib.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import tomllib

toml_str = """
python-version = "3.11.0"
python-implementation = "CPython"
"""

data = tomllib.loads(toml_str)
```

----------------------------------------

TITLE: Raising Exceptions with Mocks in Python
DESCRIPTION: Demonstrates how to configure a mock to raise an exception when called, which is useful for testing error handling in your code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
mock = Mock(side_effect=Exception('Boom!'))
mock()
```

----------------------------------------

TITLE: Using CSV DictWriter's writeheader Method in Python
DESCRIPTION: Demonstrates the use of the writeheader method in the csv.DictWriter class to output a header row with field names before writing the actual data rows.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_40

LANGUAGE: python
CODE:
```
>>> import csv, sys
>>> w = csv.DictWriter(sys.stdout, ['name', 'dept'], dialect='unix')
>>> w.writeheader()
"name","dept"
>>> w.writerows([
...     {'name': 'tom', 'dept': 'accounting'},
...     {'name': 'susan', 'dept': 'Salesl'}])
"tom","accounting"
"susan","sales"
```

----------------------------------------

TITLE: Unpack struct Data into Variables in Python
DESCRIPTION: Demonstrates unpacking binary data from a byte string using the `struct` module and assigning the resulting values directly to individual variables.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/struct.rst#_snippet_6

LANGUAGE: Python
CODE:
```
record = b'raymond   \x32\x12\x08\x01\x08'
name, serialnum, school, gradelevel = unpack('<10sHHb', record)
```

----------------------------------------

TITLE: Copying Directory Tree with Pattern Exclusion in Python
DESCRIPTION: Example of using shutil.copytree with the new ignore_patterns function to copy a directory while excluding .svn directories and Emacs backup files.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_38

LANGUAGE: python
CODE:
```
shutil.copytree('Doc/library', '/tmp/library',
                  ignore=shutil.ignore_patterns('*~', '.svn'))
```

----------------------------------------

TITLE: Shell Command Substitution with Python Subprocess
DESCRIPTION: Converting shell command substitution to Python subprocess calls
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/subprocess.rst#2025-04-21_snippet_11

LANGUAGE: bash
CODE:
```
output=$(mycmd myarg)
```

LANGUAGE: python
CODE:
```
output = check_output(["mycmd", "myarg"])
```

----------------------------------------

TITLE: Hello World Example Using call_soon in Python asyncio
DESCRIPTION: This example demonstrates how to use the loop.call_soon method to schedule a callback that prints 'Hello World' and stops the event loop.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_35

LANGUAGE: python
CODE:
```
import asyncio

def hello_world(loop):
    """A callback to print 'Hello World' and stop the event loop"""
    print('Hello World')
    loop.stop()

loop = asyncio.new_event_loop()

# Schedule a call to hello_world()
loop.call_soon(hello_world, loop)

# Blocking call interrupted by loop.stop()
try:
    loop.run_forever()
finally:
    loop.close()
```

----------------------------------------

TITLE: Using transpose function for matrix transposition in Python
DESCRIPTION: Demonstrates the transpose function which converts rows to columns, taking input iterables and returning tuples of corresponding elements at each position.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_61

LANGUAGE: python
CODE:
```
>>> output_iterator = transpose([input1, input2])
>>> next(output_iterator)
(1, 11)
>>> list(zip(input1, input2))
[(2, 22), (3, 33)]
```

----------------------------------------

TITLE: Creating an In-Memory Text Stream with StringIO
DESCRIPTION: This snippet shows how to create an in-memory text stream using the StringIO class from the io module, allowing manipulation of string data similarly to file objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/io.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
f = io.StringIO("some initial text data")
```

----------------------------------------

TITLE: Releasing a Lock in Python's Multiprocessing Module
DESCRIPTION: This method releases a lock. It can be called from any process or thread, not just the one that acquired it. Raises ValueError if called on an unlocked lock.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_25

LANGUAGE: python
CODE:
```
def release():
    # Method implementation not shown in the original text
```

----------------------------------------

TITLE: Computing Memory Allocation Differences Between Snapshots in Python
DESCRIPTION: Code snippet that shows how to take two snapshots of memory usage at different points in time and display the differences to identify memory leaks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tracemalloc.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import tracemalloc
tracemalloc.start()
# ... start your application ...

snapshot1 = tracemalloc.take_snapshot()
# ... call the function leaking memory ...
snapshot2 = tracemalloc.take_snapshot()

top_stats = snapshot2.compare_to(snapshot1, 'lineno')

print("[ Top 10 differences ]")
for stat in top_stats[:10]:
    print(stat)
```

----------------------------------------

TITLE: Implementing Total Ordering for a Student Class in Python
DESCRIPTION: Example of using the total_ordering decorator to simplify the implementation of rich comparison methods for a Student class. It requires defining __eq__ and one other comparison method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
@total_ordering
class Student:
    def _is_valid_operand(self, other):
        return (hasattr(other, "lastname") and
                hasattr(other, "firstname"))
    def __eq__(self, other):
        if not self._is_valid_operand(other):
            return NotImplemented
        return ((self.lastname.lower(), self.firstname.lower()) ==
                (other.lastname.lower(), other.firstname.lower()))
    def __lt__(self, other):
        if not self._is_valid_operand(other):
            return NotImplemented
        return ((self.lastname.lower(), self.firstname.lower()) <
                (other.lastname.lower(), other.firstname.lower()))
```

----------------------------------------

TITLE: Using fileinput with Context Manager in Python
DESCRIPTION: Shows how to use the fileinput.input function with a context manager to automatically close file handles when processing is complete.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_48

LANGUAGE: python
CODE:
```
with fileinput.input(files=('log1.txt', 'log2.txt')) as f:
    for line in f:
        process(line)
```

----------------------------------------

TITLE: Using b32decode in Python
DESCRIPTION: Decodes Base32 encoded bytes-like objects or ASCII strings and returns the decoded bytes. Supports case folding and optional mapping of digits 0 and 1 to letters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/base64.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
b32decode(s, casefold=False, map01=None)
```

----------------------------------------

TITLE: Finding and Accessing Elements with find() and findall() in Python
DESCRIPTION: Demonstrates how to use find() to get the first matching child element, findall() to get all matching direct children, and how to access text content and attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> for country in root.findall('country'):
...     rank = country.find('rank').text
...     name = country.get('name')
...     print(name, rank)
...
Liechtenstein 1
Singapore 4
Panama 68
```

----------------------------------------

TITLE: Replacing optparse.OptionParser.add_option with ArgumentParser.add_argument in Python
DESCRIPTION: Replace all optparse.OptionParser.add_option method calls with ArgumentParser.add_argument method calls when migrating from optparse to argparse.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/argparse-optparse.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
parser.add_argument
```

----------------------------------------

TITLE: Demonstrating Partial Function Application in Python
DESCRIPTION: This snippet shows how to use functools.partial to create a new function with some parameters pre-filled. It creates a specialized logging function for a server subsystem.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
import functools

def log(message, subsystem):
    """Write the contents of 'message' to the specified subsystem."""
    print('%s: %s' % (subsystem, message))
    ...

server_log = functools.partial(log, subsystem='server')
server_log('Unable to open socket')
```

----------------------------------------

TITLE: Initializing a Property in Python
DESCRIPTION: Demonstrates creating a property using the property function with getter, setter, and deleter functions. The property allows controlled access to the 'x' attribute with a custom docstring.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
x = property(getx, setx, delx, "I'm the 'x' property.")
```

----------------------------------------

TITLE: Heapq Module Example
DESCRIPTION: This snippet demonstrates the use of the `heapq` module for implementing a heap data structure. `heapify` rearranges a list into heap order, `heappush` adds a new element, and `heappop` removes the smallest element. This is useful for efficiently accessing the smallest element repeatedly.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib2.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
>>> from heapq import heapify, heappop, heappush
>>> data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]
>>> heapify(data)                      # rearrange the list into heap order
>>> heappush(data, -5)                 # add a new entry
>>> [heappop(data) for i in range(3)]  # fetch the three smallest entries
[-5, 0, 1]
```

----------------------------------------

TITLE: Adding Argument to Group and Printing Help (Basic)
DESCRIPTION: Demonstrates adding an argument to an existing argument group and then printing the parser's help message to show how the argument is displayed within the group.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_86

LANGUAGE: python
CODE:
```
>>> group.add_argument('bar', help='bar help')
>>> parser.print_help()
usage: PROG [--foo FOO] bar

group:
  bar    bar help
  --foo FOO  foo help
```

----------------------------------------

TITLE: Condensed SHA-256 Digest Computation
DESCRIPTION: This concise example shows how to compute a SHA-256 digest directly from a byte string using the hashlib module. The hashlib module must be imported. The function hexdigest() is used to return the hash digest in a hexadecimal string format.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/hashlib.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> hashlib.sha256(b"Nobody inspects the spammish repetition").hexdigest()
'031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406'
```

----------------------------------------

TITLE: Binary File Operations Example
DESCRIPTION: Shows reading and writing binary content to files
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_37

LANGUAGE: python
CODE:
```
>>> p = Path('my_binary_file')
>>> p.write_bytes(b'Binary file contents')
20
>>> p.read_bytes()
b'Binary file contents'
```

----------------------------------------

TITLE: Finding All Matches with findall() and finditer()
DESCRIPTION: Demonstrates methods for extracting multiple matches from a string, with findall() returning a list and finditer() returning an iterator of match objects
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
p = re.compile(r'\d+')
p.findall('12 drummers drumming, 11 pipers piping, 10 lords a-leaping')
# Returns: ['12', '11', '10']

iterator = p.finditer('12 drummers drumming, 11 ... 10 ...')
for match in iterator:
    print(match.span())
```

----------------------------------------

TITLE: Using str.format_map() Method with Custom Dictionary in Python
DESCRIPTION: The format_map() method is similar to format() but uses the mapping directly without copying. This example shows using a dict subclass with a __missing__ method to handle missing keys.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
class Default(dict):
    def __missing__(self, key):
        return key

'{name} was born in {country}'.format_map(Default(name='Guido'))
'Guido was born in country'
```

----------------------------------------

TITLE: Creating a Binary Stream with open
DESCRIPTION: This code illustrates how to create a binary stream using the open function, specifying 'rb' mode for reading binary data without any encoding or newline translation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/io.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
f = open("myfile.jpg", "rb")
```

----------------------------------------

TITLE: Calculating Mode in Python
DESCRIPTION: These examples show how to use the mode function to find the most common data point in a dataset. It demonstrates usage with both numeric and nominal data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
>>> mode([1, 1, 2, 3, 3, 3, 3, 4])
3
>>> mode(["red", "blue", "blue", "red", "green", "red", "red"])
'red'
```

----------------------------------------

TITLE: Defining Complex Type Aliases with 'type' Statement in Python
DESCRIPTION: Illustrates using the `type` statement to define aliases for more complex types like dictionaries and tuples, improving the readability of function signatures.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_2

LANGUAGE: Python
CODE:
```
from collections.abc import Sequence

type ConnectionOptions = dict[str, str]
type Address = tuple[str, int]
type Server = tuple[Address, ConnectionOptions]

def broadcast_message(message: str, servers: Sequence[Server]) -> None:
    ...

# The static type checker will treat the previous type signature as
# being exactly equivalent to this one.
def broadcast_message(
    message: str,
    servers: Sequence[tuple[tuple[str, int], dict[str, str]]]
) -> None:
    ...
```

----------------------------------------

TITLE: Process Pool Workers
DESCRIPTION: Shows using Pool class to manage a pool of worker processes. Demonstrates different methods of task distribution including map, imap_unordered, and apply_async.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
from multiprocessing import Pool, TimeoutError
import time
import os

def f(x):
    return x*x

if __name__ == '__main__':
    # start 4 worker processes
    with Pool(processes=4) as pool:
        # print "[0, 1, 4,..., 81]"
        print(pool.map(f, range(10)))

        # print same numbers in arbitrary order
        for i in pool.imap_unordered(f, range(10)):
            print(i)

        # evaluate "f(20)" asynchronously
        res = pool.apply_async(f, (20,))      # runs in *only* one process
        print(res.get(timeout=1))             # prints "400"

        # evaluate "os.getpid()" asynchronously
        res = pool.apply_async(os.getpid, ()) # runs in *only* one process
        print(res.get(timeout=1))             # prints the PID of that process

        # launching multiple evaluations asynchronously *may* use more processes
        multiple_results = [pool.apply_async(os.getpid, ()) for i in range(4)]
        print([res.get(timeout=1) for res in multiple_results])

        # make a single worker sleep for 10 seconds
        res = pool.apply_async(time.sleep, (10,))
        try:
            print(res.get(timeout=1))
        except TimeoutError:
            print("We lacked patience and got a multiprocessing.TimeoutError")

        print("For the moment, the pool remains available for more work")
```

----------------------------------------

TITLE: New String Method Implementation in Python Core
DESCRIPTION: Addition of .isascii() method to str, bytes and bytearray types to test if a string contains only ASCII characters.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.7.0b1.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
".isascii()"
```

----------------------------------------

TITLE: Using Condition.wait_for with Predicate Python
DESCRIPTION: Demonstrates using `Condition.wait_for()` to simplify waiting for a condition based on a predicate function. It takes a predicate function and handles the `while not predicate(): cv.wait()` loop internally, blocking until the predicate returns true or a timeout occurs. The condition variable's lock must be held while calling this method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/threading.rst#_snippet_3

LANGUAGE: python
CODE:
```
# Consume an item
with cv:
    cv.wait_for(an_item_is_available)
    get_an_available_item()
```

----------------------------------------

TITLE: Using Function Decorator for Wrapping Functions in Python
DESCRIPTION: Shows how the same track_entry_and_exit function can be used as a decorator to wrap an entire function with entry and exit logging.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_43

LANGUAGE: python
CODE:
```
@track_entry_and_exit('widget loader')
def activity():
    print('Some time consuming activity goes here')
    load_widget()
```

----------------------------------------

TITLE: Post-Init Processing in Python Dataclass
DESCRIPTION: Example demonstrating post-initialization processing in a dataclass where field c is calculated from fields a and b after initialization.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dataclasses.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
@dataclass
class C:
    a: float
    b: float
    c: float = field(init=False)

    def __post_init__(self):
        self.c = self.a + self.b
```

----------------------------------------

TITLE: Handling Undefined Variables in Python
DESCRIPTION: This snippet demonstrates the error that occurs when trying to use an undefined variable in Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/introduction.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> n  # try to access an undefined variable
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'n' is not defined
```

----------------------------------------

TITLE: Prevent argparse from Exiting on Error
DESCRIPTION: Illustrates how to prevent `ArgumentParser` from exiting when an invalid argument is encountered by setting `exit_on_error=False`. Shows how to manually catch the `argparse.ArgumentError` exception instead of the program terminating.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_21

LANGUAGE: Python
CODE:
```
import argparse

parser = argparse.ArgumentParser(exit_on_error=False)
parser.add_argument('--integers', type=int)
try:
    parser.parse_args('--integers a'.split())
except argparse.ArgumentError:
    print('Catching an argumentError')
```

----------------------------------------

TITLE: Using Process Methods in Python Multiprocessing
DESCRIPTION: Example demonstrating the usage of Process class methods including process creation, starting, checking status, and termination using the multiprocessing module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
>>> import multiprocessing, time, signal
>>> mp_context = multiprocessing.get_context('spawn')
>>> p = mp_context.Process(target=time.sleep, args=(1000,))
>>> print(p, p.is_alive())
<...Process ... initial> False
>>> p.start()
>>> print(p, p.is_alive())
<...Process ... started> True
>>> p.terminate()
>>> time.sleep(0.1)
>>> print(p, p.is_alive())
<...Process ... stopped exitcode=-SIGTERM> False
>>> p.exitcode == -signal.SIGTERM
True
```

----------------------------------------

TITLE: Configuring SSL Context for Certificate Verification in Python
DESCRIPTION: Shows two approaches for customizing SSL certificate verification: completely disabling verification using _create_unverified_context(), and specifying a custom certificate file using create_default_context(). Includes example of using the custom context with urllib.request.urlopen().
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.4.rst#2025-04-21_snippet_37

LANGUAGE: python
CODE:
```
import urllib.request
import ssl

# This disables all verification
context = ssl._create_unverified_context()

# This allows using a specific certificate for the host, which doesn't need
# to be in the trust store
context = ssl.create_default_context(cafile="/path/to/file.crt")

urllib.request.urlopen("https://invalid-cert", context=context)
```

----------------------------------------

TITLE: Using Pattern.fullmatch() in Python Regular Expressions
DESCRIPTION: Shows how to use fullmatch() which checks if the entire string matches the pattern. The method also accepts optional position parameters to limit the search region.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
>>> pattern = re.compile("o[gh]")
>>> pattern.fullmatch("dog")      # No match as "o" is not at the start of "dog".
>>> pattern.fullmatch("ogre")     # No match as not the full string matches.
>>> pattern.fullmatch("doggie", 1, 3)   # Matches within given limits.
<re.Match object; span=(1, 3), match='og'>
```

----------------------------------------

TITLE: Demonstrating Subsequence Testing with Python Strings
DESCRIPTION: Shows how the 'in' operator works with strings for subsequence testing rather than just simple containment testing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> "gg" in "eggs"
True
```

----------------------------------------

TITLE: Basic String Replacement with sub() Method in Python
DESCRIPTION: Shows how to use the sub() method to replace matches of a regular expression with a specified string. The example replaces color names with the word 'colour' and demonstrates the count parameter to limit replacements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
>>> p = re.compile('(blue|white|red)')
>>> p.sub('colour', 'blue socks and red shoes')
'colour socks and colour shoes'
>>> p.sub('colour', 'blue socks and red shoes', count=1)
'colour socks and red shoes'
```

----------------------------------------

TITLE: Invoking Python Interpreter - Basic Command
DESCRIPTION: Basic command to start the Python interpreter from the command line. Shows the standard command format for Python 3.14.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/interpreter.rst#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
python3.14
```

----------------------------------------

TITLE: Accessing Arguments' Items - Python
DESCRIPTION: Demonstrates accessing items of arguments (like list or tuple elements) within the format string using square bracket notation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/string.rst#_snippet_5

LANGUAGE: python
CODE:
```
>>> coord = (3, 5)
>>> 'X: {0[0]};  Y: {0[1]}'.format(coord)
'X: 3;  Y: 5'
```

----------------------------------------

TITLE: Creating a Configuration Module for Sharing Global Variables
DESCRIPTION: This example shows how to create a dedicated configuration module (config.py) to share variables across different modules in a Python application.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
x = 0   # Default value of the 'x' configuration setting
```

----------------------------------------

TITLE: Implementing Unary Arithmetic Operators in Python
DESCRIPTION: These methods are called to implement unary arithmetic operations such as negation (`-`), positive (`+`), absolute value (`abs()`), and bitwise inversion (`~`). They take only `self` as an argument and should return the result of the operation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_26

LANGUAGE: Python
CODE:
```
object.__neg__(self)
object.__pos__(self)
object.__abs__(self)
object.__invert__(self)
```

----------------------------------------

TITLE: Set Operations with Multiple Iterables
DESCRIPTION: Demonstrates enhanced set operations that now accept multiple iterables as arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_28

LANGUAGE: python
CODE:
```
>>> s=set('1234567890')
>>> s.intersection('abc123', 'cdf246')  # Intersection between all inputs
set(['2'])
>>> s.difference('246', '789')
set(['1', '0', '3', '5'])
```

----------------------------------------

TITLE: Setting Up NullHandler for Library Logging
DESCRIPTION: Code snippet demonstrating how to add a NullHandler to a library's top-level logger to prevent logging messages being output to sys.stderr when no logging configuration is provided by the application.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
import logging
logging.getLogger('foo').addHandler(logging.NullHandler())
```

----------------------------------------

TITLE: Initializing Pdb with Skip Patterns (Python)
DESCRIPTION: Shows how to instantiate the `pdb.Pdb` class with the `skip` argument to prevent stepping into specified modules (e.g., Django modules) and then immediately enter the debugger using `set_trace`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_7

LANGUAGE: python
CODE:
```
import pdb; pdb.Pdb(skip=['django.*']).set_trace()
```

----------------------------------------

TITLE: Using Shared Configuration Variables in the Main Module
DESCRIPTION: This example (main.py) shows how the main module can import both the configuration module and other modules, accessing the shared configuration values that may have been modified by other modules.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
import config
import mod
print(config.x)
```

----------------------------------------

TITLE: Converting to Different Bases - Python
DESCRIPTION: Shows how to convert integer values to different number bases (decimal, hexadecimal, octal, binary) using format specifiers, including adding prefixes like `0x`, `0o`, and `0b`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/string.rst#_snippet_9

LANGUAGE: python
CODE:
```
>>> # format also supports binary numbers
>>> "int: {0:d};  hex: {0:x};  oct: {0:o};  bin: {0:b}".format(42)
'int: 42;  hex: 2a;  oct: 52;  bin: 101010'
>>> # with 0x, 0o, or 0b as prefix:
>>> "int: {0:d};  hex: {0:#x};  oct: {0:#o};  bin: {0:#b}".format(42)
'int: 42;  hex: 0x2a;  oct: 0o52;  bin: 0b101010'
```

----------------------------------------

TITLE: Setting ArgumentParser Program Name (Python)
DESCRIPTION: Demonstrates how to explicitly set the program name displayed in the help message using the `prog` argument when creating an `ArgumentParser` instance. This overrides the default behavior of deriving the name from `sys.argv[0]`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_3

LANGUAGE: Python
CODE:
```
parser = argparse.ArgumentParser(prog='myprogram')
parser.print_help()
```

----------------------------------------

TITLE: Using the @override Decorator (Python)
DESCRIPTION: Illustrates the use of the `@typing.override` decorator to explicitly mark methods intended to override a method in a base class. This helps static type checkers verify that the method signature correctly matches a superclass method, preventing errors like typos in method names, as introduced in PEP 698.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_19

LANGUAGE: python
CODE:
```
from typing import override

class Base:
  def get_color(self) -> str:
    return "blue"

class GoodChild(Base):
  @override  # ok: overrides Base.get_color
  def get_color(self) -> str:
    return "yellow"

class BadChild(Base):
  @override  # type checker error: does not override Base.get_color
  def get_colour(self) -> str:
    return "red"
```

----------------------------------------

TITLE: Accessing Path Parents - pathlib Python
DESCRIPTION: This snippet illustrates how to access the parents of a path using the `parents` attribute, which provides a sequence of ancestor paths. In the example, it shows the use in `PureWindowsPath` for logical parent traversals.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> p = PureWindowsPath('c:/foo/bar/setup.py')
>>> p.parents[0]
PureWindowsPath('c:/foo/bar')
>>> p.parents[1]
PureWindowsPath('c:/foo')
>>> p.parents[2]
PureWindowsPath('c:/')
```

----------------------------------------

TITLE: Querying All Entry Points (Python)
DESCRIPTION: Shows how to call the `entry_points()` function from `importlib.metadata` without any arguments. This retrieves an `EntryPoints` object representing a collection of all entry points discovered across all installed distribution packages in the current Python environment.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_3

LANGUAGE: Python Console
CODE:
```
>>> eps = entry_points()  # doctest: +SKIP
```

----------------------------------------

TITLE: Basic Pattern Matching in Python
DESCRIPTION: Shows how to perform basic pattern matching using compiled regex objects. Demonstrates matching against empty strings and words.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> import re
>>> p = re.compile('[a-z]+')
>>> p
re.compile('[a-z]+')

>>> p.match("")
>>> print(p.match(""))
None

>>> m = p.match('tempo')
>>> m
<re.Match object; span=(0, 5), match='tempo'>
```

----------------------------------------

TITLE: Exception Handling with Mock Side Effects
DESCRIPTION: Demonstrates setting up mock objects to raise exceptions and using side effects to control return values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_38

LANGUAGE: python
CODE:
```
m = MagicMock(side_effect=IndexError)
m(1, 2, 3)
# Raises IndexError
m.mock_calls
[call(1, 2, 3)]
m.side_effect = KeyError('Bang!')
m('two', 'three', 'four')
# Raises KeyError
```

----------------------------------------

TITLE: Removing None values before sorting
DESCRIPTION: This snippet demonstrates how to remove `None` values from a list before sorting using a generator expression. This is needed because `None` is not comparable to other data types, and attempting to sort a list containing `None` values without filtering them out will raise a `TypeError`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/sorting.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```

>>> data = [3.3, None, 1.1, 2.2]
>>> sorted(x for x in data if x is not None)
[1.1, 2.2, 3.3]

```

----------------------------------------

TITLE: Using else Clause with try-except in Python
DESCRIPTION: This example demonstrates using the else clause with try-except, which executes code only if no exception occurs in the try block - useful for operations that should only happen after successful execution.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/errors.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
for arg in sys.argv[1:]:
    try:
        f = open(arg, 'r')
    except OSError:
        print('cannot open', arg)
    else:
        print(arg, 'has', len(f.readlines()), 'lines')
        f.close()
```

----------------------------------------

TITLE: Inferring dest for Optional Arguments in Python argparse
DESCRIPTION: Shows how the 'dest' attribute name for optional arguments is inferred from the provided option strings. It demonstrates that the first long option string (with '--' removed) is preferred, and hyphens are converted to underscores. If only short options are present, the first short option (with '-' removed) is used.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_61

LANGUAGE: python
CODE:
```
parser = argparse.ArgumentParser()
parser.add_argument('-f', '--foo-bar', '--foo')
parser.add_argument('-x', '-y')
parser.parse_args('-f 1 -x 2'.split())
parser.parse_args('--foo 1 -y 2'.split())
```

----------------------------------------

TITLE: Performance Measurement with timeit in Python
DESCRIPTION: Demonstrates using the timeit module to compare the performance of different approaches to the same problem.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
>>> from timeit import Timer
>>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()
0.57535828626024577
>>> Timer('a,b = b,a', 'a=1; b=2').timeit()
0.54962537085770791
```

----------------------------------------

TITLE: Checking If Path Is Absolute - pathlib Python
DESCRIPTION: This snippet demonstrates the `is_absolute` method that determines if a path is absolute based on the presence of both a root and a drive component, showcasing examples for both `PurePosixPath` and `PureWindowsPath`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
>>> PurePosixPath('/a/b').is_absolute()
True
>>> PurePosixPath('a/b').is_absolute()
False

>>> PureWindowsPath('c:/a/b').is_absolute()
True
>>> PureWindowsPath('/a/b').is_absolute()
False
>>> PureWindowsPath('c:').is_absolute()
False
>>> PureWindowsPath('//some/share').is_absolute()
True
```

----------------------------------------

TITLE: SQL Table Creation with Type Declaration Example
DESCRIPTION: Example showing SQL table creation with different column types that can be used with PARSE_DECLTYPES flag for type conversion
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
CREATE TABLE test(
   i integer primary key,  ! will look up a converter named "integer"
   p point,                ! will look up a converter named "point"
   n number(10)            ! will look up a converter named "number"
 )
```

----------------------------------------

TITLE: Using '--' for Positional Arguments in argparse (Python)
DESCRIPTION: Shows how to use the '--' pseudo-argument to tell argparse that all subsequent strings should be treated as positional arguments, even if they start with '-'. This forces '-f' to be interpreted as the positional argument 'foo'.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_70

LANGUAGE: python
CODE:
```
parser.parse_args(['--', '-f'])
```

----------------------------------------

TITLE: Using time.fromisoformat
DESCRIPTION: Examples of using the time.fromisoformat() method to parse time strings in ISO 8601 format.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
>>> from datetime import time
>>> time.fromisoformat('04:23:01')
datetime.time(4, 23, 1)
>>> time.fromisoformat('T04:23:01')
datetime.time(4, 23, 1)
>>> time.fromisoformat('T042301')
datetime.time(4, 23, 1)
```

----------------------------------------

TITLE: Handler Configuration Example - INI Format - Python
DESCRIPTION: This INI snippet illustrates how to define handler configurations in Python's logging framework. Each handler section specifies the class, logging level, formatter, and any constructor arguments necessary for instantiation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.config.rst#2025-04-21_snippet_12

LANGUAGE: INI
CODE:
```
[handler_hand01]
class=StreamHandler
level=NOTSET
formatter=form01
args=(sys.stdout,)

[handler_hand02]
class=FileHandler
level=DEBUG
formatter=form02
args=('python.log', 'w')

[handler_hand03]
class=handlers.SocketHandler
level=INFO
formatter=form03
args=('localhost', handlers.DEFAULT_TCP_LOGGING_PORT)

[handler_hand04]
class=handlers.DatagramHandler
level=WARN
formatter=form04
args=('localhost', handlers.DEFAULT_UDP_LOGGING_PORT)

[handler_hand05]
class=handlers.SysLogHandler
level=ERROR
formatter=form05
```

----------------------------------------

TITLE: Implementing TCP Server with Custom Request Handler in Python
DESCRIPTION: Example implementation of a TCP server using socketserver.TCPServer with a custom request handler class. The server receives data from clients, converts it to uppercase, and sends it back. Includes buffered reading to handle large messages up to 10KB.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/socketserver.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
import socketserver

class MyTCPHandler(socketserver.BaseRequestHandler):
    """
    The request handler class for our server.

    It is instantiated once per connection to the server, and must
    override the handle() method to implement communication to the
    client.
    """

    def handle(self):
        # self.request is the TCP socket connected to the client
        pieces = [b'']
        total = 0
        while b'\n' not in pieces[-1] and total < 10_000:
            pieces.append(self.request.recv(2000))
            total += len(pieces[-1])
        self.data = b''.join(pieces)
        print(f"Received from {self.client_address[0]}:")
        print(self.data.decode("utf-8"))
        # just send back the same data, but upper-cased
        self.request.sendall(self.data.upper())
        # after we return, the socket will be closed.

if __name__ == "__main__":
    HOST, PORT = "localhost", 9999

    # Create the server, binding to localhost on port 9999
    with socketserver.TCPServer((HOST, PORT), MyTCPHandler) as server:
```

----------------------------------------

TITLE: Using os.scandir() to improve directory walking performance
DESCRIPTION: The os.walk() function has been optimized using the new os.scandir() function, which exposes file information from the underlying system calls like readdir or FindFirstFile/FindNextFile, resulting in significant performance improvements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_38

LANGUAGE: python
CODE:
```
import os

# This is now 3-20x faster depending on platform
for root, dirs, files in os.walk(directory_path):
    # process directories and files
```

----------------------------------------

TITLE: Directory Removal Implementation
DESCRIPTION: Implementation of a recursive directory removal function similar to shutil.rmtree using Path.walk()
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_41

LANGUAGE: python
CODE:
```
# Delete everything reachable from the directory "top".
# CAUTION:  This is dangerous! For example, if top == Path('/'),
# it could delete all of your files.
for root, dirs, files in top.walk(top_down=False):
    for name in files:
        (root / name).unlink()
    for name in dirs:
        (root / name).rmdir()
```

----------------------------------------

TITLE: Using the new print() function in Python 3
DESCRIPTION: Examples of how to use the new print() function in Python 3 compared to the print statement in Python 2. Shows various usage patterns including specifying separators and file objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.0.rst#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
Old: print "The answer is", 2*2
New: print("The answer is", 2*2)

Old: print x,           # Trailing comma suppresses newline
New: print(x, end=" ")  # Appends a space instead of a newline

Old: print              # Prints a newline
New: print()            # You must call the function!

Old: print >>sys.stderr, "fatal error"
New: print("fatal error", file=sys.stderr)

Old: print (x, y)       # prints repr((x, y))
New: print((x, y))      # Not the same as print(x, y)!
```

LANGUAGE: python
CODE:
```
print("There are <", 2**32, "> possibilities!", sep="")
```

----------------------------------------

TITLE: Using redirect_stderr Context Manager in Python
DESCRIPTION: Demonstrates the new redirect_stderr context manager for redirecting stderr output to a file-like object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
>>> import contextlib, io, logging
>>> f = io.StringIO()
>>> with contextlib.redirect_stderr(f):
...     logging.warning('warning')
...
>>> f.getvalue()
'WARNING:root:warning\n'
```

----------------------------------------

TITLE: Reading and Writing Files with Surrogateescape Error Handler in Python
DESCRIPTION: This snippet demonstrates opening a file with ASCII encoding and the 'surrogateescape' error handler, which allows handling non-ASCII bytes safely. The code reads a file, processes its content, and writes the modified data to a new file, preserving any non-ASCII bytes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/unicode.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
with open(fname, 'r', encoding="ascii", errors="surrogateescape") as f:
    data = f.read()

# make changes to the string 'data'

with open(fname + '.new', 'w',
         encoding="ascii", errors="surrogateescape") as f:
    f.write(data)
```

----------------------------------------

TITLE: Example showing underscore/comma separators in float formatting
DESCRIPTION: Support for underscore and comma as thousands separators in floating-point presentation types of string formatting.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.14.0a6.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
f"{1234.5678:_}"  # Will format with underscore separators
f"{1234.5678:,}"  # Will format with comma separators
```

----------------------------------------

TITLE: Visualizing Floating-Point Precision in Python
DESCRIPTION: This code demonstrates how Python stores and displays the approximation of 1/10. It shows the full decimal representation and how it's typically rounded for display.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/floatingpoint.rst#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
>>> 0.1 * 2 ** 55
3602879701896397.0

>>> 3602879701896397 * 10 ** 55 // 2 ** 55
1000000000000000055511151231257827021181583404541015625

>>> format(0.1, '.17f')
'0.10000000000000001'
```

----------------------------------------

TITLE: Retrieving and Inspecting Server Certificate
DESCRIPTION: Demonstrates how to obtain the server's certificate from an established SSL connection and inspect its details, including validation fields and subject information.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_32

LANGUAGE: python
CODE:
```
>>> cert = conn.getpeercert()

>>> pprint.pprint(cert)
{'OCSP': ('http://ocsp.digicert.com',),
 'caIssuers': ('http://cacerts.digicert.com/DigiCertSHA2ExtendedValidationServerCA.crt',),
 'crlDistributionPoints': ('http://crl3.digicert.com/sha2-ev-server-g1.crl',
                           'http://crl4.digicert.com/sha2-ev-server-g1.crl'),
 'issuer': ((('countryName', 'US'),),
            (('organizationName', 'DigiCert Inc'),),
            (('organizationalUnitName', 'www.digicert.com'),),
            (('commonName', 'DigiCert SHA2 Extended Validation Server CA'),)),
 'notAfter': 'Sep  9 12:00:00 2016 GMT',
 'notBefore': 'Sep  5 00:00:00 2014 GMT',
 'serialNumber': '01BB6F00122B177F36CAB49CEA8B6B26',
 'subject': ((('businessCategory', 'Private Organization'),),
             (('1.3.6.1.4.1.311.60.2.1.3', 'US'),),
             (('1.3.6.1.4.1.311.60.2.1.2', 'Delaware'),),
             (('serialNumber', '3359300'),),
             (('streetAddress', '16 Allen Rd'),),
             (('postalCode', '03894-4801'),),
             (('countryName', 'US'),),
             (('stateOrProvinceName', 'NH'),),
             (('localityName', 'Wolfeboro'),),
             (('organizationName', 'Python Software Foundation'),),
             (('commonName', 'www.python.org'),)),
 'subjectAltName': (('DNS', 'www.python.org'),
                    ('DNS', 'python.org'),
```

----------------------------------------

TITLE: Ensuring Unique Enum Values with @unique Decorator in Python
DESCRIPTION: Shows how to use the @unique decorator to ensure that all enum members have unique values. Attempting to create duplicate values will raise a ValueError.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_5

LANGUAGE: Python
CODE:
```
from enum import Enum, unique
@unique
class Mistake(Enum):
    ONE = 1
    TWO = 2
    THREE = 3
    FOUR = 3
```

----------------------------------------

TITLE: Detecting NaN and Infinity in Python
DESCRIPTION: This code shows how to use the isnan() and isinf() functions from the math module to detect NaN and infinity values.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/mathdata/ieee754.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
isinf(INF), isinf(NINF), isnan(NAN)
```

----------------------------------------

TITLE: quote_plus Function Definition
DESCRIPTION: The quote_plus function is similar to the quote function, but it also replaces spaces with plus signs, as required for quoting HTML form values when building up a query string to go into a URL. Plus signs in the original string are escaped unless they are included in the safe parameter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.parse.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
.. function:: quote_plus(string, safe='', encoding=None, errors=None)

   Like :func:`quote`, but also replace spaces with plus signs, as required for
   quoting HTML form values when building up a query string to go into a URL.
   Plus signs in the original string are escaped unless they are included in
   *safe*.  It also does not have *safe* default to ``'/'``.

   Example: ``quote_plus('/El Niño/')`` yields ``'%2FEl+Ni%C3%B1o%2F'``.

```

----------------------------------------

TITLE: Implementing PEP 678: Exception Notes in Python
DESCRIPTION: Replaces the __note__ field of BaseException with the final design from PEP 678. Adds an add_note() method to BaseException and creates a __notes__ field when necessary.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0b1.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
try:
    raise ValueError("Original error")
except ValueError as e:
    e.add_note("Additional information")
    raise
```

----------------------------------------

TITLE: Assigning Identical Immutable Values in Python
DESCRIPTION: Demonstrates assigning the same immutable integer value (1) to two different variables. In CPython, small integers are often cached, leading 'a' and 'b' to potentially refer to the same object, although this behavior is implementation-dependent and should not be relied upon for identity checks (use '==' for value comparison).
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_0

LANGUAGE: Python
CODE:
```
a = 1; b = 1
```

----------------------------------------

TITLE: Calculating Power of a Number in Python
DESCRIPTION: This function computes x raised to the power of y, adhering to the IEEE 754 standard for exceptional cases. It is essential for mathematical computations involving exponents.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/math.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
.. function:: pow(x, y)

   Return *x* raised to the power *y*.  Exceptional cases follow
   the IEEE 754 standard as far as possible.  In particular,
   ``pow(1.0, x)`` and ``pow(x, 0.0)`` always return ``1.0``, even
   when *x* is a zero or a NaN.  If both *x* and *y* are finite,
   *x* is negative, and *y* is not an integer then ``pow(x, y)``
   is undefined, and raises :exc:`ValueError`.
```

----------------------------------------

TITLE: Tracking Order of Mock Calls
DESCRIPTION: Demonstrates tracking the order of method calls using mock_calls attribute and manager mocks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_42

LANGUAGE: python
CODE:
```
manager = Mock()
mock_foo = manager.foo
mock_bar = manager.bar

mock_foo.something()
mock_bar.other.thing()

manager.mock_calls
expected_calls = [call.foo.something(), call.bar.other.thing()]
manager.mock_calls == expected_calls
```

----------------------------------------

TITLE: Initializing a Process-Shared Queue in Python
DESCRIPTION: Creates a process-shared queue using a pipe and locks/semaphores. It implements all methods of queue.Queue except task_done and join. The queue raises queue.Empty and queue.Full exceptions for timeouts.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
Queue([maxsize])
```

----------------------------------------

TITLE: Database Transaction Context Manager Class
DESCRIPTION: Implementation of a database transaction context manager using a class.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
class DatabaseConnection:
    # Database interface
    def cursor(self):
        "Returns a cursor object and starts a new transaction"
    def commit(self):
        "Commits current transaction"
    def rollback(self):
        "Rolls back current transaction"

    def __enter__(self):
        # Code to start a new transaction
        cursor = self.cursor()
        return cursor

    def __exit__(self, type, value, tb):
        if tb is None:
            # No exception, so commit
            self.commit()
        else:
            # Exception occurred, so rollback.
            self.rollback()
            # return False
```

----------------------------------------

TITLE: Listing File Extensions - pathlib Python
DESCRIPTION: This snippet demonstrates the `suffixes` attribute, which provides a list of all suffixes in a path component. It is useful for identifying multi-part extensions in file names.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
>>> PurePosixPath('my/library.tar.gar').suffixes
['.tar', '.gar']
>>> PurePosixPath('my/library.tar.gz').suffixes
['.tar', '.gz']
>>> PurePosixPath('my/library').suffixes
[]
```

----------------------------------------

TITLE: Testing Approximate Equality with math.isclose() Using Absolute Tolerance
DESCRIPTION: Shows how to use math.isclose() function with absolute tolerance for comparing floating point numbers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
>>> import math
>>> a = 5.0
>>> b = 4.99998
>>> math.isclose(a, b, abs_tol=0.00003)
True
>>> math.isclose(a, b, abs_tol=0.00001)
False
```

----------------------------------------

TITLE: Using gzip and bz2 with Context Managers in Python
DESCRIPTION: This snippet shows how to use the gzip.GzipFile class with a context manager to automatically handle file closing after writing. This practice ensures resources are properly managed and reduces potential for resource leaks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.1.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
with gzip.GzipFile(filename, "wb") as f:
    f.write(b"xxx")
```

----------------------------------------

TITLE: Generic Hash Computation Using hashlib.new
DESCRIPTION: Demonstrates the creation and use of a generic hash object with a specified algorithm using the hashlib.new function. The hashlib module needs to be loaded. The 'new' function is used to specify the hashing algorithm, here being 'sha256', and it outlines the update and hexdigest methods to process and retrieve the hash value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/hashlib.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> h = hashlib.new('sha256')
>>> h.update(b"Nobody inspects the spammish repetition")
>>> h.hexdigest()
'031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406'
```

----------------------------------------

TITLE: Using LiteralString for SQL Queries in Python
DESCRIPTION: Demonstrates how `LiteralString` can be used to type-check string arguments in sensitive APIs like SQL query functions, preventing potential injection vulnerabilities by disallowing arbitrary `str` inputs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_51

LANGUAGE: python
CODE:
```
def run_query(sql: LiteralString) -> None:
    ...

def caller(arbitrary_string: str, literal_string: LiteralString) -> None:
    run_query("SELECT * FROM students")  # OK
    run_query(literal_string)  # OK
    run_query("SELECT * FROM " + literal_string)  # OK
    run_query(arbitrary_string)  # type checker error
    run_query(  # type checker error
        f"SELECT * FROM students WHERE name = {arbitrary_string}"
    )
```

----------------------------------------

TITLE: Handling SIGPIPE in Python Program
DESCRIPTION: This example shows how to handle the SIGPIPE signal when piping output to tools like head(1). It wraps the main entry point in a try-except block to catch BrokenPipeError and gracefully exit the program.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/signal.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
import os
import sys

def main():
    try:
        # simulate large output (your code replaces this loop)
        for x in range(10000):
            print("y")
        # flush output here to force SIGPIPE to be triggered
        # while inside this try block.
        sys.stdout.flush()
    except BrokenPipeError:
        # Python flushes standard streams on exit; redirect remaining output
        # to devnull to avoid another BrokenPipeError at shutdown
        devnull = os.open(os.devnull, os.O_WRONLY)
        os.dup2(devnull, sys.stdout.fileno())
        sys.exit(1)  # Python exits with error code 1 on EPIPE

if __name__ == '__main__':
    main()
```

----------------------------------------

TITLE: Generic Type Alias and Function Usage (Python)
DESCRIPTION: Defines a generic type alias `Vec` for an iterable of pairs and a function `inproduct` that uses this alias and demonstrates type variable constraints.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_37

LANGUAGE: Python
CODE:
```
type Vec[T] = Iterable[tuple[T, T]]

def inproduct[T: (int, float, complex)](v: Vec[T]) -> T: # Same as Iterable[tuple[T, T]]
    return sum(x*y for x, y in v)
```

----------------------------------------

TITLE: Shared Memory Between Processes
DESCRIPTION: Shows how to use shared memory between processes using Value and Array objects. Demonstrates modifying shared numeric values and arrays across processes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from multiprocessing import Process, Value, Array

def f(n, a):
    n.value = 3.1415927
    for i in range(len(a)):
        a[i] = -a[i]

if __name__ == '__main__':
    num = Value('d', 0.0)
    arr = Array('i', range(10))

    p = Process(target=f, args=(num, arr))
    p.start()
    p.join()

    print(num.value)
    print(arr[:])
```

----------------------------------------

TITLE: Setting Attributes on Mock Objects in Python
DESCRIPTION: Demonstrates how to set attributes on mock objects, which can be useful when you need to simulate objects with specific attribute values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
mock = Mock()
mock.x = 3
mock.x
```

----------------------------------------

TITLE: Returning formatted representation (pformat function) - Python
DESCRIPTION: The pformat function returns the formatted representation of an object as a string. Various parameters are available to customize its formatting including indent, width, depth, and others.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pprint.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
def pformat(object, indent=1, width=80, depth=None, *, compact=False, sort_dicts=True, underscore_numbers=False):
    Return the formatted representation of *object* as a string.
```

----------------------------------------

TITLE: Implementing ProcessPoolExecutor in Python
DESCRIPTION: The ProcessPoolExecutor class allows asynchronous task execution using a pool of processes, which bypasses the Global Interpreter Lock to execute picklable objects and return values. It provides various options such as setting a max workers limit, initialization of processes, and handling terminated worker processes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/concurrent.futures.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
class ProcessPoolExecutor(max_workers=None, mp_context=None, initializer=None, initargs=(), max_tasks_per_child=None):
   An :class:`Executor` subclass that executes calls asynchronously using a pool
   of at most *max_workers* processes.  If *max_workers* is ``None`` or not
   given, it will default to :func:`os.process_cpu_count`.
   If *max_workers* is less than or equal to ``0``, then a :exc:`ValueError`
   will be raised.
   On Windows, *max_workers* must be less than or equal to ``61``. If it is not
   then :exc:`ValueError` will be raised. If *max_workers* is ``None``, then
   the default chosen will be at most ``61``, even if more processors are
   available.
   *mp_context* can be a :mod:`multiprocessing` context or ``None``. It will be
   used to launch the workers. If *mp_context* is ``None`` or not given, the
   default :mod:`multiprocessing` context is used.
   See :ref:`multiprocessing-start-methods`.

   *initializer* is an optional callable that is called at the start of
   each worker process; *initargs* is a tuple of arguments passed to the
   initializer.  Should *initializer* raise an exception, all currently
   pending jobs will raise a :exc:`~concurrent.futures.process.BrokenProcessPool`,
   as well as any attempt to submit more jobs to the pool.

   *max_tasks_per_child* is an optional argument that specifies the maximum
   number of tasks a single process can execute before it will exit and be
   replaced with a fresh worker process. By default *max_tasks_per_child* is
   ``None`` which means worker processes will live as long as the pool. When
   a max is specified, the "spawn" multiprocessing start method will be used by
   default in absence of a *mp_context* parameter. This feature is incompatible
   with the "fork" start method.
```

----------------------------------------

TITLE: Accessing Command Line Arguments in Python
DESCRIPTION: Basic example of accessing command line arguments using the sys.argv list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
# File demo.py
import sys
print(sys.argv)
```

----------------------------------------

TITLE: Implementing delegation pattern in Python
DESCRIPTION: Shows how to implement the delegation design pattern in Python by creating a class that provides a new implementation of one method while delegating all other methods to an underlying object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_49

LANGUAGE: python
CODE:
```
class UpperOut:

    def __init__(self, outfile):
        self._outfile = outfile

    def write(self, s):
        self._outfile.write(s.upper())

    def __getattr__(self, name):
        return getattr(self._outfile, name)
```

----------------------------------------

TITLE: Committing Changes to SQLite Database
DESCRIPTION: This snippet commits all the changes made to the database (including the previous table and index creations and data insertions) to ensure data persistence.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_16

LANGUAGE: Python
CODE:
```
conn.commit()
```

----------------------------------------

TITLE: Using Struct Objects for Binary Data Packing and Unpacking in Python
DESCRIPTION: This example shows how to use the new Struct objects in the struct module for more efficient binary data handling. It demonstrates creating a Struct instance with a format string and using its pack/unpack methods to convert between Python values and binary data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_31

LANGUAGE: python
CODE:
```
s = struct.Struct('ih3s')

data = s.pack(1972, 187, 'abc')
year, number, name = s.unpack(data)
```

----------------------------------------

TITLE: Using collections.deque in Python
DESCRIPTION: Example demonstrating the usage of the new collections.deque data structure for double-ended queue operations including append, appendleft, pop, popleft, and searching.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
>>> from collections import deque
>>> d = deque('ghi')        # make a new deque with three items
>>> d.append('j')           # add a new entry to the right side
>>> d.appendleft('f')       # add a new entry to the left side
>>> d                       # show the representation of the deque
deque(['f', 'g', 'h', 'i', 'j'])
>>> d.pop()                 # return and remove the rightmost item
'j'
>>> d.popleft()             # return and remove the leftmost item
'f'
>>> list(d)                 # list the contents of the deque
['g', 'h', 'i']
>>> 'h' in d                # search the deque
True
```

----------------------------------------

TITLE: ORM Descriptor Example - Python
DESCRIPTION: Illustrates how data descriptors can be leveraged to implement an object relational mapping mechanism where Python classes represent database schemas, delegating data retrieval and storage to database access.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
class Field:

    def __set_name__(self, owner, name):
        self.fetch = f'SELECT {name} FROM {owner.table} WHERE {owner.key}=?;'
        self.store = f'UPDATE {owner.table} SET {name}=? WHERE {owner.key}=?;'

    def __get__(self, obj, objtype=None):
        return conn.execute(self.fetch, [obj.key]).fetchone()[0]

    def __set__(self, obj, value):
        conn.execute(self.store, [value, obj.key])
        conn.commit()
```

LANGUAGE: Python
CODE:
```
class Movie:
    table = 'Movies'                    # Table name
    key = 'title'                       # Primary key
    director = Field()
    year = Field()

    def __init__(self, key):
        self.key = key

class Song:
    table = 'Music'
    key = 'title'
    artist = Field()
    year = Field()
    genre = Field()

    def __init__(self, key):
        self.key = key
```

----------------------------------------

TITLE: Demonstrating Python Scope Keywords (Global, Nonlocal, Type)
DESCRIPTION: Shows the basic syntax for the `global`, `nonlocal`, and `type` statements in Python. `global` affects module-level scope, `nonlocal` affects enclosing function scopes, and `type` declares type aliases.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/simple_stmts.rst#_snippet_11

LANGUAGE: python
CODE:
```
global identifier
```

LANGUAGE: python
CODE:
```
nonlocal identifier
```

LANGUAGE: python
CODE:
```
type identifier = expression
```

----------------------------------------

TITLE: Checking Python Library Path
DESCRIPTION: Code to view the current Python library search path using sys module.
SOURCE: https://github.com/python/cpython/blob/main/PC/readme.txt#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import sys
print sys.path
```

----------------------------------------

TITLE: Initializing HTTPConnection
DESCRIPTION: Demonstrates different ways to instantiate an HTTPConnection object to connect to a server. It shows how to specify the host, port, and timeout.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.client.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> h1 = http.client.HTTPConnection('www.python.org')
>>> h2 = http.client.HTTPConnection('www.python.org:80')
>>> h3 = http.client.HTTPConnection('www.python.org', 80)
>>> h4 = http.client.HTTPConnection('www.python.org', 80, timeout=10)
```

----------------------------------------

TITLE: Server Main Loop Implementation in Python
DESCRIPTION: Implements the main server loop that accepts client connections and handles them by creating client threads. Demonstrates the basic server socket lifecycle.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/sockets.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
while True:
    # accept connections from outside
    (clientsocket, address) = serversocket.accept()
    # now do something with the clientsocket
    # in this case, we'll pretend this is a threaded server
    ct = make_client_thread(clientsocket)
    ct.start()
```

----------------------------------------

TITLE: Using gzip Compression Functions in Python
DESCRIPTION: Demonstrates the use of the gzip.compress and gzip.decompress functions for in-memory compression and decompression of text data, showing the conversion between strings and bytes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_50

LANGUAGE: python
CODE:
```
>>> import gzip
>>> s = 'Three shall be the number thou shalt count, '
>>> s += 'and the number of the counting shall be three'
>>> b = s.encode()                        # convert to utf-8
>>> len(b)
89
>>> c = gzip.compress(b)
>>> len(c)
77
>>> gzip.decompress(c).decode()[:42]      # decompress and convert to text
'Three shall be the number thou shalt count'
```

----------------------------------------

TITLE: Python Trailing Commas in Data Structures
DESCRIPTION: The following examples show how Python allows trailing commas in lists, tuples, and dictionaries. This feature simplifies adding or reordering elements and helps prevent errors caused by accidentally omitting commas.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/design.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
   [1, 2, 3,]
   ('a', 'b', 'c',)
   d = {
       "A": [1, 5],
       "B": [6, 7],  # last trailing comma is optional but good style
   }
```

----------------------------------------

TITLE: Basic glob Pattern Matching in Python
DESCRIPTION: Examples demonstrating basic glob pattern matching functionality including number patterns, file extensions, and recursive directory searching
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/glob.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> import glob
>>> glob.glob('./[0-9].*')
['./1.gif', './2.txt']
>>> glob.glob('*.gif')
['1.gif', 'card.gif']
>>> glob.glob('?.gif')
['1.gif']
>>> glob.glob('**/*.txt', recursive=True)
['2.txt', 'sub/3.txt']
>>> glob.glob('./**/', recursive=True)
['./', './sub/']
```

----------------------------------------

TITLE: Using a Function for Replacement in sub() in Python
DESCRIPTION: Shows how to use a function as the replacement parameter for sub(). The function receives a match object for each match and returns the replacement string, allowing for dynamic replacements based on the matched text.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_28

LANGUAGE: python
CODE:
```
>>> def hexrepl(match):
...     "Return the hex string for a decimal number"
...     value = int(match.group())
...     return hex(value)
...
>>> p = re.compile(r'\d+')
>>> p.sub(hexrepl, 'Call 65490 for printing, 49152 for user code.')
'Call 0xffd2 for printing, 0xc000 for user code.'
```

----------------------------------------

TITLE: Typing **kwargs with TypedDict and Unpack (Python)
DESCRIPTION: Shows how to use `typing.TypedDict` and `typing.Unpack` to provide precise type hints for keyword arguments (`**kwargs`), allowing different types within the keyword arguments dictionary. This is an improvement over the previous method where all `**kwargs` had to be of the same type, as introduced in PEP 692.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_18

LANGUAGE: python
CODE:
```
from typing import TypedDict, Unpack

class Movie(TypedDict):
  name: str
  year: int

def foo(**kwargs: Unpack[Movie]): ...
```

----------------------------------------

TITLE: Example: Using breakpoint() in a Function
DESCRIPTION: Demonstrates placing the `breakpoint()` call inside a function. When the function is called, execution will pause at the `breakpoint()` line, allowing inspection of local variables like `x`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_2

LANGUAGE: Python
CODE:
```
def double(x):
   breakpoint()
   return x * 2
val = 3
print(f"{val} * 2 is {double(val)}")
```

----------------------------------------

TITLE: Using Sentinel Objects in Python Mock Testing
DESCRIPTION: Demonstrates how to use sentinel objects to test method arguments and return values in mock testing scenarios.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_54

LANGUAGE: python
CODE:
```
real = ProductionClass()
real.method = Mock(name="method")
real.method.return_value = sentinel.some_object
result = real.method()
assert result is sentinel.some_object
result
```

----------------------------------------

TITLE: Handling Data Received in Protocol for Python
DESCRIPTION: This method is called when data is received. The data parameter is a non-empty bytes object containing the incoming data. It can be called multiple times while a connection is open.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
Protocol.data_received(data)
```

----------------------------------------

TITLE: Defining an Abstract Base Class using ABCMeta in Python
DESCRIPTION: Shows how to create an abstract base class by explicitly using the ABCMeta metaclass. This method provides more control over the class creation process.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/abc.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from abc import ABCMeta

class MyABC(metaclass=ABCMeta):
    pass
```

----------------------------------------

TITLE: Listing Package Metadata Keys (Python)
DESCRIPTION: Demonstrates using the `metadata` function from `importlib.metadata` to get the metadata for a named distribution package ('wheel' in this case) and then listing the keys (field names) available in the resulting `PackageMetadata` object. This shows the types of metadata stored for the package.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_2

LANGUAGE: Python Console
CODE:
```
>>> list(metadata('wheel'))  # doctest: +SKIP
['Metadata-Version', 'Name', 'Version', 'Summary', 'Home-page', 'Author', 'Author-email', 'Maintainer', 'Maintainer-email', 'License', 'Project-URL', 'Project-URL', 'Project-URL', 'Keywords', 'Platform', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Requires-Python', 'Provides-Extra', 'Requires-Dist', 'Requires-Dist']
```

----------------------------------------

TITLE: Using time.isoformat() with different timespec parameters in Python
DESCRIPTION: Examples of formatting time objects as ISO 8601 strings using the isoformat() method with different timespec parameters, showing how precision can be controlled from hours to microseconds.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_24

LANGUAGE: python
CODE:
```
>>> from datetime import time
>>> time(hour=12, minute=34, second=56, microsecond=123456).isoformat(timespec='minutes')
'12:34'
>>> dt = time(hour=12, minute=34, second=56, microsecond=0)
>>> dt.isoformat(timespec='microseconds')
'12:34:56.000000'
>>> dt.isoformat(timespec='auto')
'12:34:56'
```

----------------------------------------

TITLE: Named Groups in Python's re Module
DESCRIPTION: This snippet illustrates the use of named groups `(?P<name>...)` in Python's `re` module. Named groups allow you to assign a name to a group, making it easier to reference the matched content by name instead of by its numerical index. It also shows how to retrieve named groups as a dictionary using `groupdict()`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
>>> p = re.compile(r'(?P<word>\b\w+\b)')
>>> m = p.search( '(((( Lots of punctuation )))' )
>>> m.group('word')
'Lots'
>>> m.group(1)
'Lots'
```

----------------------------------------

TITLE: Complex Exception Handling with Finally
DESCRIPTION: Shows how finally clauses interact with return statements and different types of exceptions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/errors.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
def divide(x, y):
    try:
        result = x / y
    except ZeroDivisionError:
        print("division by zero!")
    else:
        print("result is", result)
    finally:
        print("executing finally clause")
```

----------------------------------------

TITLE: Advanced Verbosity Control with Argument Counting
DESCRIPTION: Implements multiple verbosity levels using the 'count' action, allowing users to specify verbosity via repeated flags
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/argparse.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("square", type=int,
                   help="display the square of a given number")
parser.add_argument("-v", "--verbosity", action="count", default=0,
                   help="increase output verbosity")
args = parser.parse_args()
answer = args.square**2
if args.verbosity >= 2:
    print(f"the square of {args.square} equals {answer}")
elif args.verbosity >= 1:
    print(f"{args.square}^2 == {answer}")
else:
    print(answer)
```

----------------------------------------

TITLE: Sending POST Request with Data in Python
DESCRIPTION: Shows how to send data to a URL using a POST request. The data is encoded using urllib.parse.urlencode() and passed to the Request object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/urllib2.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
import urllib.parse
import urllib.request

url = 'http://www.someserver.com/cgi-bin/register.cgi'
values = {'name' : 'Michael Foord',
          'location' : 'Northampton',
          'language' : 'Python' }

data = urllib.parse.urlencode(values)
data = data.encode('ascii') # data should be bytes
req = urllib.request.Request(url, data)
with urllib.request.urlopen(req) as response:
   the_page = response.read()
```

----------------------------------------

TITLE: Asyncio to_thread Coroutine Implementation
DESCRIPTION: New coroutine implementation for running IO-bound functions in separate threads to avoid blocking the event loop. Functions as a high-level version of run_in_executor with direct keyword argument support.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a1.rst#2025-04-21_snippet_59

LANGUAGE: Python
CODE:
```
async def to_thread(func, /, *args, **kwargs):
    """Asynchronously run function in a separate thread."""
    loop = events.get_running_loop()
    return await loop.run_in_executor(
        None, functools.partial(func, *args, **kwargs))
```

----------------------------------------

TITLE: Packaging Python Application using zipapp
DESCRIPTION: This command packages the application located in the 'myapp' directory into a standalone executable archive. The -p option specifies the interpreter to be used when running the archive.  The resulting archive can be executed on any machine with the appropriate interpreter available.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/zipapp.rst#2025-04-21_snippet_5

LANGUAGE: shell-session
CODE:
```
$ python -m zipapp -p "interpreter" myapp
```

----------------------------------------

TITLE: File Seek Constants Definition
DESCRIPTION: Constants used for seeking positions in files. SEEK_SET (0) for beginning, SEEK_CUR (1) for current position, and SEEK_END (2) for end of file position.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_18

LANGUAGE: Python
CODE:
```
SEEK_SET
SEEK_CUR
SEEK_END
```

----------------------------------------

TITLE: Introducing Type Hints in Python with PEP 484
DESCRIPTION: This snippet demonstrates the new type hinting feature for function parameters and return types introduced in PEP 484. It showcases how annotations can be used for better code documentation and provides the basic functionality of type annotations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
def greeting(name: str) -> str:
    return 'Hello ' + name
```

----------------------------------------

TITLE: File Permissions Modification with chmod()
DESCRIPTION: Function to change file mode permissions using numeric mode values. Supports file descriptors, directory descriptors, and symlink following. Accepts stat module constants for permission flags.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_34

LANGUAGE: python
CODE:
```
chmod(path, mode, *, dir_fd=None, follow_symlinks=True)
```

----------------------------------------

TITLE: Enum Class Operations in Python
DESCRIPTION: Shows various operations on enum classes, including getting a list of members, accessing members by name, and getting the length of the enum.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/enum.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> dir(Color)
['BLUE', 'GREEN', 'RED', '__class__', '__contains__', '__doc__', '__getitem__', '__init_subclass__', '__iter__', '__len__', '__members__', '__module__', '__name__', '__qualname__']

>>> Color['BLUE']
<Color.BLUE: 3>

>>> list(Color)
[<Color.RED: 1>, <Color.GREEN: 2>, <Color.BLUE: 3>]

>>> len(Color)
3

>>> list(reversed(Color))
[<Color.BLUE: 3>, <Color.GREEN: 2>, <Color.RED: 1>]
```

----------------------------------------

TITLE: Comparing parse_known_args and parse_intermixed_args in Python
DESCRIPTION: This snippet demonstrates the difference between `ArgumentParser.parse_known_args` and `ArgumentParser.parse_intermixed_args`. It shows how `parse_known_args` leaves arguments after the first positional as unparsed, while `parse_intermixed_args` collects all positional arguments into the specified destination, even if they appear after optional arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_97

LANGUAGE: Python
CODE:
```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo')
>>> parser.add_argument('cmd')
>>> parser.add_argument('rest', nargs='*', type=int)
>>> parser.parse_known_args('doit 1 --foo bar 2 3'.split())
(Namespace(cmd='doit', foo='bar', rest=[1]), ['2', '3'])
>>> parser.parse_intermixed_args('doit 1 --foo bar 2 3'.split())
Namespace(cmd='doit', foo='bar', rest=[1, 2, 3])
```

----------------------------------------

TITLE: Compiling Regular Expressions with Unicode Matching in Python
DESCRIPTION: This snippet demonstrates the use of Python's re module to compile a regular expression pattern that matches Unicode digits in a string. It highlights how the pattern \d matches numerals in different scripts and the influence of the re.ASCII flag on matching behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/unicode.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
import re
p = re.compile(r'\d+')

s = "Over \u0e55\u0e57 57 flavours"
m = p.search(s)
print(repr(m.group()))
```

----------------------------------------

TITLE: Comparing object and Any Type Checking Behavior in Python
DESCRIPTION: This snippet illustrates the difference in type checking behavior between `object` and `Any`. When a parameter is typed as `object`, type checkers enforce that operations must be valid for `object`. When typed as `Any`, type checkers allow any operation, effectively disabling static type checking for that value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_45

LANGUAGE: python
CODE:
```
def hash_a(item: object) -> int:
    # Fails type checking; an object does not have a 'magic' method.
    item.magic()
    ...

def hash_b(item: Any) -> int:
    # Passes type checking
    item.magic()
    ...
```

----------------------------------------

TITLE: Using Default for Optional Positional Arguments in Python argparse
DESCRIPTION: Demonstrates that the `default` value is assigned to a positional argument with `nargs='?'` when no argument is provided on the command line, but the provided argument is used if present.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_48

LANGUAGE: Python
CODE:
```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('foo', nargs='?', default=42)
>>> parser.parse_args(['a'])
Namespace(foo='a')
>>> parser.parse_args([])
Namespace(foo=42)
```

----------------------------------------

TITLE: Mock Side Effect Precedence - Python
DESCRIPTION: Illustrates the order of precedence between side_effect, return_value, and wraps when configuring a mock object. This example shows that side_effect takes precedence over return_value and wraps, and return_value takes precedence over wraps.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_64

LANGUAGE: python
CODE:
```
>>> from unittest.mock import Mock
>>> class Order:
...     @staticmethod
...     def get_value():
...         return "third"
...
>>> order_mock = Mock(spec=Order, wraps=Order)
>>> order_mock.get_value.side_effect = ["first"]
>>> order_mock.get_value.return_value = "second"
>>> order_mock.get_value()
'first'
```

----------------------------------------

TITLE: Updating Dataclass Hashing Behavior in Python
DESCRIPTION: The 'hash' parameter has been replaced with 'unsafe_hash' for dataclasses. If unsafe_hash is True, a __hash__ function is added. The default behavior (unsafe_hash=False) is equivalent to the old hash=None behavior.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.7.0b2.rst#2025-04-21_snippet_10



----------------------------------------

TITLE: Pretty Printing JSON in Python
DESCRIPTION: Demonstrates how to format JSON output with proper indentation for improved readability using the indent and sort_keys parameters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/json.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> import json
>>> print(json.dumps({'6': 7, '4': 5}, sort_keys=True, indent=4))
{
    "4": 5,
    "6": 7
}
```

----------------------------------------

TITLE: Creating a Custom argparse Action Subclass in Python
DESCRIPTION: Provides an example of creating a custom action by inheriting from argparse.Action and overriding the __init__ and __call__ methods to define custom argument processing logic.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_39

LANGUAGE: python
CODE:
```
>>> class FooAction(argparse.Action):
...     def __init__(self, option_strings, dest, nargs=None, **kwargs):
...         if nargs is not None:
...             raise ValueError("nargs not allowed")
...         super().__init__(option_strings, dest, **kwargs)
...     def __call__(self, parser, namespace, values, option_string=None):
...         print('%r %r %r' % (namespace, values, option_string))
...         setattr(namespace, self.dest, values)
...
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo', action=FooAction)
>>> parser.add_argument('bar', action=FooAction)
>>> args = parser.parse_args('1 --foo 2'.split())
Namespace(bar=None, foo=None) '1' None
Namespace(bar='1', foo=None) '2' '--foo'
>>> args
Namespace(bar='1', foo='2')
```

----------------------------------------

TITLE: Deprecating `lib2to3` package
DESCRIPTION: The `lib2to3` package has been deprecated and may not be able to parse Python 3.10 or newer code. It is suggested to follow PEP 617 for the new PEG parser for CPython.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a1.rst#2025-04-21_snippet_14



----------------------------------------

TITLE: Context Manager Using Decorator
DESCRIPTION: Shows how to create a context manager using the @contextmanager decorator.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
from contextlib import contextmanager

@contextmanager
def db_transaction(connection):
    cursor = connection.cursor()
    try:
        yield cursor
    except:
        connection.rollback()
        raise
    else:
        connection.commit()

db = DatabaseConnection()
with db_transaction(db) as cursor:
    ...
```

----------------------------------------

TITLE: Non-Greedy Regex Matching in Python
DESCRIPTION: Demonstrates non-greedy matching using '?', which matches the smallest possible text. Used to extract the first HTML tag from a string with minimal matching.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
print(re.match('<.*?>', s).group())
```

----------------------------------------

TITLE: Generating Permutations with Itertools in Python
DESCRIPTION: This snippet demonstrates how to use the itertools.permutations function to generate all possible pairs from a list of integers. Requires the itertools module. The input is a list and an optional length parameter, *r*; if not specified, it defaults to the list length. The output is a list of tuple pairs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_35

LANGUAGE: python
CODE:
```
>>> list(itertools.permutations([1,2,3,4], 2))
[(1, 2), (1, 3), (1, 4),
 (2, 1), (2, 3), (2, 4),
 (3, 1), (3, 2), (3, 4),
 (4, 1), (4, 2), (4, 3)]
```

----------------------------------------

TITLE: Exception Group Collection Pattern
DESCRIPTION: Shows a common pattern for collecting exceptions into an exception group. Demonstrates handling multiple test failures by collecting exceptions and raising them as a group.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/errors.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
excs = []
for test in tests:
    try:
        test.run()
    except Exception as e:
        excs.append(e)

if excs:
   raise ExceptionGroup("Test Failures", excs)
```

----------------------------------------

TITLE: Binary Number Conversion Examples
DESCRIPTION: Examples showing how to convert integers to binary strings using bin() function and format() method with different formatting options.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> bin(3)
'0b11'
>>> bin(-10)
'-0b1010'
>>> format(14, '#b'), format(14, 'b')
('0b1110', '1110')
>>> f'{14:#b}', f'{14:b}')
('0b1110', '1110')
```

----------------------------------------

TITLE: TCP Echo Client Using AsyncIO Streams
DESCRIPTION: A complete TCP echo client implementation using asyncio.open_connection. The client establishes a connection, sends a message, receives a response, and properly closes the connection.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-stream.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
import asyncio

async def tcp_echo_client(message):
    reader, writer = await asyncio.open_connection(
        '127.0.0.1', 8888)

    print(f'Send: {message!r}')
    writer.write(message.encode())
    await writer.drain()

    data = await reader.read(100)
    print(f'Received: {data.decode()!r}')

    print('Close the connection')
    writer.close()
    await writer.wait_closed()

asyncio.run(tcp_echo_client('Hello World!'))
```

----------------------------------------

TITLE: Sending Email via SMTP in Python
DESCRIPTION: Demonstrates how to send email using the smtplib module. This example creates an interactive mail sender that connects to a local SMTP server and sends a message to one or more recipients.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/library.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
import sys, smtplib

fromaddr = input("From: ")
toaddrs  = input("To: ").split(',')
print("Enter message, end with ^D:")
msg = ''
while True:
    line = sys.stdin.readline()
    if not line:
        break
    msg += line

# The actual mail send
server = smtplib.SMTP('localhost')
server.sendmail(fromaddr, toaddrs, msg)
server.quit()
```

----------------------------------------

TITLE: Creating HTML Email with Plain Text Alternative in Python
DESCRIPTION: Shows how to create an HTML email message with an alternative plain text version and an embedded image, saving a copy and sending it using Python's email module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.examples.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
# ../includes/email-alternative.py
```

----------------------------------------

TITLE: Awaiting Coroutines and Tasks with asyncio Python
DESCRIPTION: Shows how to await coroutines in asyncio, emphasizing that coroutine objects must be awaited to execute. It prints outputs after awaiting nested coroutines.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
import asyncio

async def nested():
    return 42

async def main():
    # Nothing happens if we just call "nested()".
    # A coroutine object is created but not awaited,
    # so it *won't run at all*.
    nested()  # will raise a "RuntimeWarning".

    # Let's do it differently now and await it:
    print(await nested())  # will print "42".

asyncio.run(main())
```

----------------------------------------

TITLE: Macros for Memory Management - C
DESCRIPTION: This section provides macros like 'PyMem_New' and 'PyMem_Resize' that simplify memory allocation processes by automatically calculating memory sizes based on data types. These macros improve code readability and reduce the risk of errors in memory size calculations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/memory.rst#2025-04-21_snippet_4

LANGUAGE: C
CODE:
```
.. c:macro:: PyMem_New(TYPE, n)

   Same as :c:func:`PyMem_Malloc`, but allocates ``(n * sizeof(TYPE))`` bytes of
   memory.  Returns a pointer cast to ``TYPE*``.  The memory will not have
   been initialized in any way.
```

LANGUAGE: C
CODE:
```
.. c:macro:: PyMem_Resize(p, TYPE, n)

   Same as :c:func:`PyMem_Realloc`, but the memory block is resized to ``(n *
   sizeof(TYPE))`` bytes.  Returns a pointer cast to ``TYPE*``. On return,
   *p* will be a pointer to the new memory area, or ``NULL`` in the event of
   failure.
```

----------------------------------------

TITLE: Using Server Object as Asynchronous Context Manager in Python AsyncIO
DESCRIPTION: Demonstrates how to use a Server object as an asynchronous context manager to ensure proper cleanup when operations are completed. The server is created using loop.create_server() and then used in an async with statement, which guarantees the server is closed and no longer accepts new connections when the block is exited.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_32

LANGUAGE: python
CODE:
```
srv = await loop.create_server(...)

async with srv:
    # some code

# At this point, srv is closed and no longer accepts new connections.
```

----------------------------------------

TITLE: Expanded Process Example with Process IDs in Python
DESCRIPTION: An expanded example of process creation that shows the individual process IDs involved. It defines functions to print process information and demonstrates how to create and manage a child process.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from multiprocessing import Process
import os

def info(title):
    print(title)
    print('module name:', __name__)
    print('parent process:', os.getppid())
    print('process id:', os.getpid())

def f(name):
    info('function f')
    print('hello', name)

if __name__ == '__main__':
    info('main line')
    p = Process(target=f, args=('bob',))
    p.start()
    p.join()
```

----------------------------------------

TITLE: Patching Dictionaries
DESCRIPTION: This snippet shows how to patch a dictionary object in tests and restore it to its original state after the test completion.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_47

LANGUAGE: python
CODE:
```
>>> original_dict = {'a': 1, 'b': 2}
>>> with patch.dict(original_dict, {'a': 10}):
...     assert original_dict['a'] == 10
... assert original_dict['a'] == 1
```

----------------------------------------

TITLE: argparse 'extend' Action with nargs='+' Example (Python)
DESCRIPTION: Shows the 'extend' action used with nargs='+' to append multiple argument values to a list. This is suitable for arguments that can appear multiple times, each followed by one or more values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_35

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument("--foo", action="extend", nargs="+", type=str)
>>> parser.parse_args(["--foo", "f1", "--foo", "f2", "f3", "f4"])
Namespace(foo=['f1', 'f2', 'f3', 'f4'])
```

----------------------------------------

TITLE: Using Word Boundaries in Regular Expressions in Python
DESCRIPTION: Illustrates how to use `\b` in regular expressions to enforce word boundaries, ensuring a pattern matches only complete words using Python's `re` module. It requires the `re` library and expects alphanumeric word sequences. Successfully returns a match object if the entire word matches, or `None` otherwise.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_13

LANGUAGE: Python
CODE:
```
p = re.compile(r'\bclass\b')
print(p.search('no class at all'))
print(p.search('the declassified algorithm'))
print(p.search('one subclass is'))
```

----------------------------------------

TITLE: Using Reader and Writer Protocols for I/O Arguments in Python
DESCRIPTION: This function demonstrates how to type-hint arguments using the `io.Reader` and `io.Writer` protocols from the `typing` module. It reads string data from a `Reader` and writes encoded bytes to a `Writer`. This is a simpler alternative to using the broader `IO` classes when only read or write methods are needed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_163

LANGUAGE: python
CODE:
```
def read_and_write(reader: Reader[str], writer: Writer[bytes]):
    data = reader.read()
    writer.write(data.encode())
```

----------------------------------------

TITLE: Using list class subscription (Python)
DESCRIPTION: This snippet demonstrates calling the `__class_getitem__` method on a built-in class (`list`) by subscribing it with a type (`int`). The output confirms that this operation returns a `types.GenericAlias` object, which is used for type hinting.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_18

LANGUAGE: Python
CODE:
```
list[int]
# list.__class_getitem__ returns a GenericAlias object:
type(list[int])
```

----------------------------------------

TITLE: Using Future Annotations in Python (PEP 563)
DESCRIPTION: The 'from __future__ import annotations' directive changes annotation storage to string format. This makes annotations like {'x': 'int'} instead of {'x': int}.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a2.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from __future__ import annotations
```

----------------------------------------

TITLE: Converting Values to Strings with str() and repr()
DESCRIPTION: Illustrates the difference between str() and repr() functions for converting values to strings. str() produces human-readable output while repr() generates interpreter-readable representations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/inputoutput.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> s = 'Hello, world.'
>>> str(s)
'Hello, world.'
>>> repr(s)
"'Hello, world.'"
>>> str(1/7)
'0.14285714285714285'
>>> x = 10 * 3.25
>>> y = 200 * 200
>>> s = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...'
>>> print(s)
The value of x is 32.5, and y is 40000...
>>> # The repr() of a string adds string quotes and backslashes:
>>> hello = 'hello, world\n'
>>> hellos = repr(hello)
>>> print(hellos)
'hello, world\n'
>>> # The argument to repr() may be any Python object:
>>> repr((x, y, ('spam', 'eggs')))
"(32.5, 40000, ('spam', 'eggs'))"
```

----------------------------------------

TITLE: Using BytesIO getbuffer Method in Python
DESCRIPTION: Demonstrates how to use the BytesIO.getbuffer() method to obtain a readable and writable view of a buffer's contents without copying data. The example shows how modifying the view automatically updates the underlying buffer.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/io.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> b = io.BytesIO(b"abcdef")
>>> view = b.getbuffer()
>>> view[2:4] = b"56"
>>> b.getvalue()
b'ab56ef'
```

----------------------------------------

TITLE: Creating an IP Address
DESCRIPTION: Creates an IPv4Address or IPv6Address object based on the input string. The function determines whether the address is IPv4 or IPv6 and creates the appropriate object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ipaddress.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> ipaddress.ip_address('192.168.0.1')
IPv4Address('192.168.0.1')
>>> ipaddress.ip_address('2001:db8::')
IPv6Address('2001:db8::')
```

----------------------------------------

TITLE: Configuring Mock with Return Values in Python
DESCRIPTION: Examples of setting up mock return values and configuring mock attributes using configure_mock
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
mock = Mock()
attrs = {'method.return_value': 3, 'other.side_effect': KeyError}
mock.configure_mock(**attrs)
mock.method()
3
mock.other()
Traceback (most recent call last):
  ...
KeyError
```

----------------------------------------

TITLE: Using Operator Methodcaller and Attrgetter in Python
DESCRIPTION: Demonstrates the use of operator.methodcaller to create a callable for invoking a method with specified arguments and operator.attrgetter to perform attribute lookups with dot notation. No additional dependencies required. Inputs are method names and optional arguments; outputs are results of the method/attribute calls.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_37

LANGUAGE: python
CODE:
```
>>> replacer = operator.methodcaller('replace', 'old', 'new')
>>> replacer('old wine in old bottles')
'new wine in new bottles'
```

LANGUAGE: python
CODE:
```
>>> inst_name = operator.attrgetter(
...        '__class__.__name__')
>>> inst_name('')
'str'
>>> inst_name(help)
'_Helper'
```

----------------------------------------

TITLE: Pattern Matching and Searching with re Module
DESCRIPTION: Shows typical pattern matching workflow using re.compile(), including matching, searching, and handling match results
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
p = re.compile( ... )
m = p.match( 'string goes here' )
if m:
    print('Match found: ', m.group())
else:
    print('No match')
```

----------------------------------------

TITLE: Implementing Python any() Function
DESCRIPTION: Example implementation showing how the any() function works internally by iterating through elements and returning True if any element is truthy, False otherwise.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def any(iterable):
    for element in iterable:
        if element:
            return True
    return False
```

----------------------------------------

TITLE: Launch Specific Python Version (Command Prompt)
DESCRIPTION: Demonstrates how to use the py launcher to execute a specific installed Python version (e.g., 3.7) by providing the version number as an argument. This overrides the default behavior of launching the latest version.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/windows.rst#_snippet_21

LANGUAGE: Batch
CODE:
```
py -3.7
```

----------------------------------------

TITLE: Accessing Specific Metadata Field (Dictionary Style, Python)
DESCRIPTION: Shows how to access a specific metadata field from a `PackageMetadata` object using standard dictionary-style subscripting (`[]`). Providing the metadata keyword name ('Requires-Python') retrieves the raw, unparsed string value for that field.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_14

LANGUAGE: Python Console
CODE:
```
>>> wheel_metadata['Requires-Python']  # doctest: +SKIP
'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'
```

----------------------------------------

TITLE: Using ANY in Mock Assertions in Python
DESCRIPTION: Shows how to use the ANY sentinel to make flexible assertions about mock calls where some arguments don't matter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_57

LANGUAGE: python
CODE:
```
mock = Mock(return_value=None)
mock('foo', bar=object())
mock.assert_called_once_with('foo', bar=ANY)
```

----------------------------------------

TITLE: Making Python Scripts Executable on Unix (Shell)
DESCRIPTION: Command to make a Python script executable on Unix systems by changing its permissions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/unix.rst#2025-04-21_snippet_7

LANGUAGE: sh
CODE:
```
$ chmod +x script
```

----------------------------------------

TITLE: Future Methods Definition - asyncio - Python
DESCRIPTION: This snippet describes the various methods of the Future class, including 'result', 'set_result', 'set_exception', and others that manage Future operations and their states.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-future.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
.. method:: result()

      Return the result of the Future.

      If the Future is *done* and has a result set by the
      :meth:`set_result` method, the result value is returned.

      If the Future is *done* and has an exception set by the
      :meth:`set_exception` method, this method raises the exception.

      If the Future has been *cancelled*, this method raises
      a :exc:`CancelledError` exception.

      If the Future's result isn't yet available, this method raises
      an :exc:`InvalidStateError` exception.

   .. method:: set_result(result)

      Mark the Future as *done* and set its result.

      Raises an :exc:`InvalidStateError` error if the Future is
      already *done*.

   .. method:: set_exception(exception)

      Mark the Future as *done* and set an exception.

      Raises an :exc:`InvalidStateError` error if the Future is
      already *done*.

   .. method:: done()

      Return ``True`` if the Future is *done*.

      A Future is *done* if it was *cancelled* or if it has a result
      or an exception set with :meth:`set_result` or
      :meth:`set_exception` calls.

   .. method:: cancelled()

      Return ``True`` if the Future was *cancelled*.

      The method is usually used to check if a Future is not
      *cancelled* before setting a result or an exception for it::

          if not fut.cancelled():
              fut.set_result(42)

   .. method:: add_done_callback(callback, *, context=None)

      Add a callback to be run when the Future is *done*.

      The *callback* is called with the Future object as its only
      argument.
```

----------------------------------------

TITLE: Creating Temporary Files with TemporaryFile in Python
DESCRIPTION: Creates a secure temporary file that is automatically destroyed when closed. The file is not visible in the filesystem on Unix. It can be used as a context manager and supports various file modes and encoding options.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tempfile.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
TemporaryFile(mode='w+b', buffering=-1, encoding=None, newline=None, suffix=None, prefix=None, dir=None, *, errors=None)
```

----------------------------------------

TITLE: Configuring Warning Capture in Python Logging
DESCRIPTION: Function that enables or disables the capture of warnings from the warnings module into the logging system. When enabled, warnings are formatted and logged to 'py.warnings' logger with WARNING severity.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
captureWarnings(capture)
```

----------------------------------------

TITLE: Adding Optional Argument with argparse Python
DESCRIPTION: Demonstrates how to add an optional command-line argument using `ArgumentParser.add_argument` by providing one or more flag names prefixed with '-'.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_27

LANGUAGE: python
CODE:
```
>>> parser.add_argument('-f', '--foo')
```

----------------------------------------

TITLE: Listing Local Variables in Python
DESCRIPTION: This snippet describes the `py-locals` command which lists all local variables in the current Python frame. It helps developers see the state of local variables at any point in time, which is essential for debugging complex code with multiple nested calls.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/gdb_helpers.rst#2025-04-21_snippet_6

LANGUAGE: gdb
CODE:
```
(gdb) py-locals
self = <SwappableArea(running=<gtk.Dialog at remote 0x98faaa4>,
main_page=0) at remote 0x98fa6e4>
d = <gtk.Dialog at remote 0x98faaa4>
```

----------------------------------------

TITLE: Private Name Mangling in Python Classes
DESCRIPTION: Explains how Python's name mangling works for private variables (names starting with double underscores). Shows how these variables can be accessed both inside and outside of classes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_58

LANGUAGE: python
CODE:
```
class A:
    def __one(self):
        return 1
    def two(self):
        return 2 * self.__one()

class B(A):
    def three(self):
        return 3 * self._A__one()

four = 4 * A()._A__one()
```

----------------------------------------

TITLE: Implementing Custom Hashable Wrapper for Mutable Lists in Python
DESCRIPTION: Shows how to create a wrapper class that allows mutable lists to be used as dictionary keys by implementing custom __eq__ and __hash__ methods. The hash implementation handles unhashable members and potential arithmetic overflow.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/design.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
class ListWrapper:
    def __init__(self, the_list):
        self.the_list = the_list

    def __eq__(self, other):
        return self.the_list == other.the_list

    def __hash__(self):
        l = self.the_list
        result = 98767 - len(l)*555
        for i, el in enumerate(l):
            try:
                result = result + (hash(el) % 9999999) * 1001 + i
            except Exception:
                result = (result % 7777777) + i * 333
        return result
```

----------------------------------------

TITLE: Itertools Recipe: nth function
DESCRIPTION: Function that returns the nth item from an iterable or a default value if the iterable is exhausted before reaching the nth item.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_34

LANGUAGE: python
CODE:
```
def nth(iterable, n, default=None):
    "Returns the nth item or a default value."
    return next(islice(iterable, n, None), default)
```

----------------------------------------

TITLE: Extracting Base Path with os.path
DESCRIPTION: The basename function returns the base name of a given pathname. It's extracted from the second element of a split path, differing from Unix's basename program. Since version 3.6, it supports path-like objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def basename(path):
    return split(path)[1]
```

----------------------------------------

TITLE: Using as_completed() with asynchronous iteration in Python
DESCRIPTION: Example demonstrating how to use asyncio.as_completed() with asynchronous iteration to process awaitables as they finish. This pattern allows easy correlation of previously scheduled tasks with their results.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
ipv4_connect = create_task(open_connection("127.0.0.1", 80))
ipv6_connect = create_task(open_connection("::1", 80))
tasks = [ipv4_connect, ipv6_connect]

async for earliest_connect in as_completed(tasks):
    # earliest_connect is done. The result can be obtained by
    # awaiting it or calling earliest_connect.result()
    reader, writer = await earliest_connect

    if earliest_connect is ipv6_connect:
        print("IPv6 connection established.")
    else:
        print("IPv4 connection established.")
```

----------------------------------------

TITLE: Using standard_b64encode in Python
DESCRIPTION: Encodes bytes-like objects using the standard Base64 alphabet and returns the encoded bytes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/base64.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
standard_b64encode(s)
```

----------------------------------------

TITLE: Using abstractmethod Decorator in Python ABCs
DESCRIPTION: Demonstrates various ways to use the abstractmethod decorator in abstract base classes, including with regular methods, class methods, static methods, and properties.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/abc.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
class C(ABC):
    @abstractmethod
    def my_abstract_method(self, arg1):
        ...
    @classmethod
    @abstractmethod
    def my_abstract_classmethod(cls, arg2):
        ...
    @staticmethod
    @abstractmethod
    def my_abstract_staticmethod(arg3):
        ...

    @property
    @abstractmethod
    def my_abstract_property(self):
        ...
    @my_abstract_property.setter
    @abstractmethod
    def my_abstract_property(self, val):
        ...

    @abstractmethod
    def _get_x(self):
        ...
    @abstractmethod
    def _set_x(self, val):
        ...
    x = property(_get_x, _set_x)
```

----------------------------------------

TITLE: Demonstrating UnboundLocalError with Variable Modification
DESCRIPTION: This snippet shows the problematic case where modifying a variable inside a function causes an UnboundLocalError because the variable is treated as local but used before assignment.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> x = 10
>>> def foo():
...     print(x)
...     x += 1
```

----------------------------------------

TITLE: Instantiating Named Tuples
DESCRIPTION: This snippet demonstrates how to instantiate named tuples using positional and keyword arguments and how to access their fields both by index and name.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_14

LANGUAGE: Python
CODE:
```
>>> Point = namedtuple('Point', ['x', 'y'])
>>> p = Point(11, y=22)     # instantiate with positional or keyword arguments
>>> p[0] + p[1]             # indexable like the plain tuple (11, 22)
33
>>> x, y = p                # unpack like a regular tuple
>>> x, y
(11, 22)
>>> p.x + p.y               # fields also accessible by name
33
>>> p                       # readable __repr__ with a name=value style
Point(x=11, y=22)
```

----------------------------------------

TITLE: Calling Built-in Methods on Objects - Python
DESCRIPTION: Demonstrates calling a built-in method, such as `append`, on an object like a list. Built-in methods are a form of built-in functions implicitly passed the object as an extra argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_3

LANGUAGE: python
CODE:
```
alist.append()
```

----------------------------------------

TITLE: Archiving and Unpacking with shutil
DESCRIPTION: This snippet demonstrates how to use the `shutil.make_archive` to create archives of various formats and `shutil.unpack_archive` to unpack them. It also shows how to register new archive formats using `shutil.register_archive_format` function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_55

LANGUAGE: python
CODE:
```
>>> import shutil, pprint

>>> os.chdir('mydata')  # change to the source directory
>>> f = shutil.make_archive('/var/backup/mydata',
...                         'zip')      # archive the current directory
>>> f                                   # show the name of archive
'/var/backup/mydata.zip'
>>> os.chdir('tmp')                     # change to an unpacking
>>> shutil.unpack_archive('/var/backup/mydata.zip')  # recover the data

>>> pprint.pprint(shutil.get_archive_formats())  # display known formats
[('bztar', "bzip2'ed tar-file"),
 ('gztar', "gzip'ed tar-file"),
 ('tar', 'uncompressed tar file'),
 ('zip', 'ZIP file')]

>>> shutil.register_archive_format(     # register a new archive format
...     name='xz',
...     function=xz.compress,           # callable archiving function
...     extra_args=[('level', 8)],      # arguments to the function
...     description='xz compression'
... )
```

----------------------------------------

TITLE: Implementing Common Search Functions Using Bisect in Python
DESCRIPTION: Collection of utility functions that implement common search operations (index, find_lt, find_le, find_gt, find_ge) for sorted lists using the bisect module. These functions transform the basic bisection operations into standard lookups.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/bisect.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
def index(a, x):
    'Locate the leftmost value exactly equal to x'
    i = bisect_left(a, x)
    if i != len(a) and a[i] == x:
        return i
    raise ValueError

def find_lt(a, x):
    'Find rightmost value less than x'
    i = bisect_left(a, x)
    if i:
        return a[i-1]
    raise ValueError

def find_le(a, x):
    'Find rightmost value less than or equal to x'
    i = bisect_right(a, x)
    if i:
        return a[i-1]
    raise ValueError

def find_gt(a, x):
    'Find leftmost value greater than x'
    i = bisect_right(a, x)
    if i != len(a):
        return a[i]
    raise ValueError

def find_ge(a, x):
    'Find leftmost item greater than or equal to x'
    i = bisect_left(a, x)
    if i != len(a):
        return a[i]
    raise ValueError
```

----------------------------------------

TITLE: Retrieving Last Modification Time with os.path
DESCRIPTION: The getmtime function provides the last modification time of a path in seconds since the epoch. Compatibility with path-like objects was added in version 3.6.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
def getmtime(path):
    return os.path.getmtime(path)
```

----------------------------------------

TITLE: Using print_exc for current exception shorthand
DESCRIPTION: A convenience function that prints the current exception information without requiring explicit parameters for the exception objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
print_exc(limit=None, file=None, chain=True)
```

----------------------------------------

TITLE: Conditional Processing of Match Objects in Python
DESCRIPTION: Shows how to test for successful matches using a simple if statement. Match objects always have a boolean value of True, while unsuccessful matches return None.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
match = re.search(pattern, string)
if match:
    process(match)
```

----------------------------------------

TITLE: Implementing UTC Time Formatting for Logging in Python
DESCRIPTION: This snippet demonstrates how to create a UTCFormatter class that formats log times using UTC. It also shows how to configure logging to use this formatter using the dictConfig API.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_50

LANGUAGE: python
CODE:
```
import logging
import logging.config
import time

class UTCFormatter(logging.Formatter):
    converter = time.gmtime

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'utc': {
            '()': UTCFormatter,
            'format': '%(asctime)s %(message)s',
        },
        'local': {
            'format': '%(asctime)s %(message)s',
        }
    },
    'handlers': {
        'console1': {
            # Handler configuration would go here
        }
    }
}
```

----------------------------------------

TITLE: Matching Whitespace Characters in Python Regex
DESCRIPTION: This snippet shows how to match any whitespace character using the \s special sequence in Python regular expressions. It is equivalent to the character class [ \t\n\r\f\v].
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
[ \t\n\r\f\v]
```

----------------------------------------

TITLE: Generating Prime Numbers Using Sieve of Eratosthenes in Python
DESCRIPTION: The sieve function generates prime numbers less than n using the Sieve of Eratosthenes algorithm. It uses a bytearray for efficient memory usage.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_57

LANGUAGE: python
CODE:
```
def sieve(n):
    "Primes less than n."
    # sieve(30) → 2 3 5 7 11 13 17 19 23 29
    if n > 2:
        yield 2
    data = bytearray((0, 1)) * (n // 2)
    for p in iter_index(data, 1, start=3, stop=isqrt(n) + 1):
        data[p*p : n : p+p] = bytes(len(range(p*p, n, p+p)))
    yield from iter_index(data, 1, start=3)
```

----------------------------------------

TITLE: Mitigating Round-off Errors with Increased Precision Python
DESCRIPTION: This snippet demonstrates how increasing the precision of the Decimal context can mitigate round-off errors encountered in the previous example. By setting the context precision to 20, the associative and distributive properties of addition are restored for the given values, showing that `(u + v) + w` equals `u + (v + w)` and `(u*v) + (u*w)` equals `u * (v+w)`. Requires the `decimal` module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_36

LANGUAGE: Python
CODE:
```
getcontext().prec = 20
u, v, w = Decimal(11111113), Decimal(-11111111), Decimal('7.51111111')
print((u + v) + w)
print(u + (v + w))


u, v, w = Decimal(20000), Decimal(-6), Decimal('6.0000003')
print((u*v) + (u*w))
print(u * (v+w))
```

----------------------------------------

TITLE: Avoiding Submodule Name Shadowing
DESCRIPTION: Demonstrates how defining a local function with the same name as a submodule in '__init__.py' can shadow that submodule when using 'from package import *'. This is an example of a potential pitfall, emphasizing the importance of avoiding naming conflicts in package files.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/modules.rst#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
__all__ = [
    "echo",      # refers to the 'echo.py' file
    "surround",  # refers to the 'surround.py' file
    "reverse",   # !!! refers to the 'reverse' function now !!!
]

def reverse(msg: str):  # <-- this name shadows the 'reverse.py' submodule
    return msg[::-1]    #     in the case of a 'from sound.effects import *'
```

----------------------------------------

TITLE: Changing File Permissions with Path.chmod() in Python
DESCRIPTION: Demonstrates how to change file permissions using the Path.chmod() method. The example shows checking the current file mode, changing it to read-only (0o444), and verifying the change was applied.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_44

LANGUAGE: python
CODE:
```
>>> p = Path('setup.py')
>>> p.stat().st_mode
33277
>>> p.chmod(0o444)
>>> p.stat().st_mode
33060
```

----------------------------------------

TITLE: Recursively Deleting Directory Contents Using os.walk in Python
DESCRIPTION: Example implementation of a recursive directory deletion function (similar to shutil.rmtree) using os.walk with topdown=False to ensure directories are emptied before being removed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_49

LANGUAGE: python
CODE:
```
# Delete everything reachable from the directory named in "top",
# assuming there are no symbolic links.
# CAUTION:  This is dangerous!  For example, if top == '/', it
# could delete all your disk files.
import os
for root, dirs, files in os.walk(top, topdown=False):
    for name in files:
        os.remove(os.path.join(root, name))
    for name in dirs:
```

----------------------------------------

TITLE: Using assertRaises Context Manager in Python unittest
DESCRIPTION: Shows how to use the assertRaises method as a context manager to test for expected exceptions in a more concise way.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.7.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
with self.assertRaises(KeyError):
    {}['foo']
```

----------------------------------------

TITLE: Reading CSV Files with csv.reader
DESCRIPTION: Demonstrates basic CSV file reading using csv.reader with custom delimiter and quote character settings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/csv.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> import csv
>>> with open('eggs.csv', newline='') as csvfile:
...     spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
...     for row in spamreader:
...         print(', '.join(row))
Spam, Spam, Spam, Spam, Spam, Baked Beans
Spam, Lovely Spam, Wonderful Spam
```

----------------------------------------

TITLE: Implementing Echo Server using Python Selectors
DESCRIPTION: A simple echo server implementation using the selectors module for I/O multiplexing. The server accepts connections, registers them for read events, and echoes back any received data. It demonstrates non-blocking socket operations and event-driven programming.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/selectors.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import selectors
import socket

sel = selectors.DefaultSelector()

def accept(sock, mask):
    conn, addr = sock.accept()  # Should be ready
    print('accepted', conn, 'from', addr)
    conn.setblocking(False)
    sel.register(conn, selectors.EVENT_READ, read)

def read(conn, mask):
    data = conn.recv(1000)  # Should be ready
    if data:
        print('echoing', repr(data), 'to', conn)
        conn.send(data)  # Hope it won't block
    else:
        print('closing', conn)
        sel.unregister(conn)
        conn.close()

sock = socket.socket()
sock.bind(('localhost', 1234))
sock.listen(100)
sock.setblocking(False)
sel.register(sock, selectors.EVENT_READ, accept)

while True:
    events = sel.select()
    for key, mask in events:
        callback = key.data
        callback(key.fileobj, mask)
```

----------------------------------------

TITLE: Configuring Python Logging with YAML Dictionary Approach
DESCRIPTION: An example of logging configuration using the dictionary-based approach with YAML format. This configuration sets up formatters, handlers, loggers and the root logger with various properties.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging.rst#2025-04-21_snippet_10

LANGUAGE: yaml
CODE:
```
version: 1
formatters:
  simple:
    format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
handlers:
  console:
    class: logging.StreamHandler
    level: DEBUG
    formatter: simple
    stream: ext://sys.stdout
loggers:
  simpleExample:
    level: DEBUG
    handlers: [console]
    propagate: no
root:
  level: DEBUG
  handlers: [console]
```

----------------------------------------

TITLE: Configuring Python Logging with JSON
DESCRIPTION: This JSON configuration sets up logging with different handlers for different message severities. The stdout handler captures INFO and WARNING messages, while stderr captures ERROR messages, and DEBUG messages are logged to a file 'app.log'.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
{
    "version": 1,
    "disable_existing_loggers": false,
    "formatters": {
        "simple": {
            "format": "%(levelname)-8s - %(message)s"
        }
    },
    "handlers": {
        "stdout": {
            "class": "logging.StreamHandler",
            "level": "INFO",
            "formatter": "simple",
            "stream": "ext://sys.stdout"
        },
        "stderr": {
            "class": "logging.StreamHandler",
            "level": "ERROR",
            "formatter": "simple",
            "stream": "ext://sys.stderr"
        },
        "file": {
            "class": "logging.FileHandler",
            "formatter": "simple",
            "filename": "app.log",
            "mode": "w"
        }
    },
    "root": {
        "level": "DEBUG",
        "handlers": [
            "stderr",
            "stdout",
            "file"
        ]
    }
}
```

----------------------------------------

TITLE: Removing Trailing Newlines from Strings in Python
DESCRIPTION: Demonstrates how to remove trailing newlines from strings in Python using the rstrip() method, which is similar to Perl's chomp() function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_31

LANGUAGE: python
CODE:
```
>>> lines = ("line 1 \r\n"
...          "\r\n"
...          "\r\n")
>>> lines.rstrip("\n\r")
'line 1 '
```

----------------------------------------

TITLE: Encoding Unicode Strings to Bytes with Error Handling in Python
DESCRIPTION: This snippet demonstrates encoding a Unicode string to a byte string using various error handling methods. It showcases 'ignore', 'replace', 'xmlcharrefreplace', 'backslashreplace', and 'namereplace'.  The examples highlight how each method handles characters that cannot be encoded in the target encoding (e.g., ASCII), by either ignoring them, replacing them with a question mark, using XML character references, using backslash escapes, or using Unicode name escapes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/unicode.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> u = chr(40960) + 'abcd' + chr(1972)
>>> u.encode('utf-8')
b'\xea\x80\x80abcd\xde\xb4'
>>> u.encode('ascii')  #doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
    ...
UnicodeEncodeError: 'ascii' codec can't encode character '\ua000' in
  position 0: ordinal not in range(128)
>>> u.encode('ascii', 'ignore')
b'abcd'
>>> u.encode('ascii', 'replace')
b'?abcd?'
>>> u.encode('ascii', 'xmlcharrefreplace')
b'&#40960;abcd&#1972;'
>>> u.encode('ascii', 'backslashreplace')
b'\\ua000abcd\\u07b4'
>>> u.encode('ascii', 'namereplace')
b'\\N{YI SYLLABLE IT}abcd\\u07b4'
```

----------------------------------------

TITLE: Using Async Context Manager for Database Connections
DESCRIPTION: Demonstrates creating and using an async context manager for managing database connections asynchronously.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextlib.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from contextlib import asynccontextmanager

@asynccontextmanager
async def get_connection():
    conn = await acquire_db_connection()
    try:
        yield conn
    finally:
        await release_db_connection(conn)

async def get_all_users():
    async with get_connection() as conn:
        return conn.query('SELECT ...')
```

----------------------------------------

TITLE: Using asyncio.Server as an Asynchronous Context Manager
DESCRIPTION: Example showing how to use the asyncio.Server object as an asynchronous context manager to handle server lifecycle. When the context exits, the server is closed and no longer accepts new connections.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
srv = await loop.create_server(...)

async with srv:
    # some code

# At this point, srv is closed and no longer accepts new connections.
```

----------------------------------------

TITLE: Matching Alphanumeric Characters in Python Regex
DESCRIPTION: This snippet demonstrates the use of the \w special sequence in Python regular expressions. It matches any alphanumeric character and is equivalent to the character class [a-zA-Z0-9_].
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
[a-zA-Z0-9_]
```

----------------------------------------

TITLE: Complex List Comprehension in Python
DESCRIPTION: This example demonstrates a complex list comprehension with multiple for loops and conditions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
>>> seq1 = 'abc'
>>> seq2 = (1, 2, 3)
>>> [(x, y) for x in seq1 for y in seq2]  #doctest: +NORMALIZE_WHITESPACE
[('a', 1), ('a', 2), ('a', 3),
 ('b', 1), ('b', 2), ('b', 3),
 ('c', 1), ('c', 2), ('c', 3)]
```

----------------------------------------

TITLE: List Mutability and References in Python
DESCRIPTION: Illustrates list mutability through modification and assignment operations. Shows how list references work and demonstrates shallow copying.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/introduction.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
>>> rgb = ["Red", "Green", "Blue"]
>>> rgba = rgb
>>> id(rgb) == id(rgba)  # they reference the same object
True
>>> rgba.append("Alph")
>>> rgb
["Red", "Green", "Blue", "Alph"]
```

----------------------------------------

TITLE: Implementing Hashing for Custom Objects - Python
DESCRIPTION: This snippet shows an example implementation of the `__hash__` method for a Python class. It demonstrates how to combine the hash values of multiple attributes (like name, nick, and color) into a single hash value for the object, making instances of the class hashable and suitable for use as dictionary keys or set members.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_8

LANGUAGE: python
CODE:
```
def __hash__(self):
    return hash((self.name, self.nick, self.color))
```

----------------------------------------

TITLE: Formatting Date Using strftime in Python
DESCRIPTION: Demonstrates how to use the strftime function to format a date according to the RFC 2822 Internet email standard. This example uses gmtime to get the current UTC time and formats it into a specific string representation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/time.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
>>> from time import gmtime, strftime
>>> strftime("%a, %d %b %Y %H:%M:%S +0000", gmtime())
'Thu, 28 Jun 2001 14:17:15 +0000'
```

----------------------------------------

TITLE: Configuring Mock return values and side effects
DESCRIPTION: This snippet shows how to configure return values on methods of instances on the patched class and how to use side effects to return different mocks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_43

LANGUAGE: python
CODE:
```
>>> Original = Class
>>> patcher = patch('__main__.Class', spec=True)
>>> MockClass = patcher.start()
>>> instance = MockClass()
>>> assert isinstance(instance, Original)
>>> patcher.stop()
...
```

----------------------------------------

TITLE: Iterative Hashing with BLAKE2b
DESCRIPTION: This example demonstrates how to iteratively update the hash with multiple chunks of data using BLAKE2b. It initializes a BLAKE2b object, iterates through a list of data chunks, updating the hash with each chunk, and then retrieves the final hexadecimal digest.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/hashlib.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
>>> from hashlib import blake2b
>>> items = [b'Hello', b' ', b'world']
>>> h = blake2b()
>>> for item in items:
...     h.update(item)
...
>>> h.hexdigest()
'6ff843ba685842aa82031d3f53c48b66326df7639a63d128974c5c14f31a0f33343a8c65551134ed1ae0f2b0dd2bb495dc81039e3eeb0aa1bb0388bbeac29183'

```

----------------------------------------

TITLE: Setting global variable in Pdb (! command)
DESCRIPTION: Shows how to set a global variable `list_options` within the Pdb debugger using the `!` command, prefixing the assignment with `global` on the same line, including the Pdb prompt before and after.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_25

LANGUAGE: none
CODE:
```
(Pdb) global list_options; list_options = ['-l']
(Pdb)
```

----------------------------------------

TITLE: Shuffling Sequences in Python
DESCRIPTION: The shuffle() function shuffles the sequence x in place. For immutable sequences, use sample(x, k=len(x)) to return a new shuffled list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/random.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
shuffle(x)
```

----------------------------------------

TITLE: Defining a Generic Function in Python
DESCRIPTION: This code snippet demonstrates the syntax and evaluation rules for declaring generic functions in Python using the typing module. It highlights the use of TypeVar for type parameters and the notion of annotation scopes. The function allows specifying bounds, constraints, and defaults, and explains how these are lazily evaluated.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
def func[T](arg: T): ...
```

LANGUAGE: python
CODE:
```
annotation-def TYPE_PARAMS_OF_func():
    T = typing.TypeVar("T")
    def func(arg: T): ...
    func.__type_params__ = (T,)
    return func
func = TYPE_PARAMS_OF_func()
```

----------------------------------------

TITLE: Parsing XML from String in Python
DESCRIPTION: Example showing how to parse XML directly from a string into an Element object using the fromstring function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
root = ET.fromstring(country_data_as_string)
```

----------------------------------------

TITLE: Dynamic Mock Return Values
DESCRIPTION: Shows how to create mocks with dynamic return values using side effect functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_39

LANGUAGE: python
CODE:
```
def side_effect(value):
    return value + 1

m = MagicMock(side_effect=side_effect)
m(1)
# Returns 2
m(2)
# Returns 3
```

----------------------------------------

TITLE: Creating Constant Functions with defaultdict
DESCRIPTION: This snippet shows how to create a defaultdict with a constant factory function using a lambda. It demonstrates how to provide default values for keys that are not present.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
>>> def constant_factory(value):
...     return lambda: value
...
>>> d = defaultdict(constant_factory('<missing>'))
>>> d.update(name='John', action='ran')
>>> '%(name)s %(action)s to %(object)s' % d
'John ran to <missing>'
```

----------------------------------------

TITLE: Stepping Over Function Calls - Pdb - Python
DESCRIPTION: Continues execution until the next line in the current function is reached or the current function returns. Called functions are executed at full speed without stopping inside them.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_17



----------------------------------------

TITLE: Text Munging with Regular Expressions in Python
DESCRIPTION: This snippet shows how to use re.sub() with a custom function to randomize the order of characters in each word of a sentence, except for the first and last characters. It demonstrates text manipulation using regular expressions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
>>> def repl(m):
...     inner_word = list(m.group(2))
...     random.shuffle(inner_word)
...     return m.group(1) + "".join(inner_word) + m.group(3)
...
>>> text = "Professor Abdolmalek, please report your absences promptly."
>>> re.sub(r"(\w)(\w+)(\w)", repl, text)
'Poefsrosr Aealmlobdk, pslaee reorpt your abnseces plmrptoy.'
>>> re.sub(r"(\w)(\w+)(\w)", repl, text)
'Pofsroser Aodlambelk, plasee reoprt yuor asnebces potlmrpy.'
```

----------------------------------------

TITLE: Matching End of Line Patterns in Python
DESCRIPTION: Demonstrates using the `$` metacharacter with the `re` module to match patterns at the end of a line or string. The function requires the `re` library. Matches are contingent on the newline character being at the end. Returns a match object if successful, otherwise `None`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
print(re.search('}$', '{block}'))  #doctest: +ELLIPSIS
print(re.search('}$', '{block} '))
print(re.search('}$', '{block}\n'))  #doctest: +ELLIPSIS
```

----------------------------------------

TITLE: Regular Expression Grouping in Python
DESCRIPTION: Shows how to create and access capture groups within regular expressions using Python's `re` module. Requires the `re` library, and allows extracting substrings based on their groups in the pattern. Outputs match objects that can be queried for group contents.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_14

LANGUAGE: Python
CODE:
```
p = re.compile('(ab)*')
print(p.match('ababababab').span())
```

LANGUAGE: Python
CODE:
```
p = re.compile('(a)b')
m = p.match('ab')
m.group()
m.group(0)
```

LANGUAGE: Python
CODE:
```
p = re.compile('(a(b)c)d')
m = p.match('abcd')
m.group(0)
m.group(1)
m.group(2)
m.group(2,1,2)
m.groups()
```

----------------------------------------

TITLE: Subprocess Output Capture with subprocess.run
DESCRIPTION: The subprocess.run function now accepts the capture_output keyword argument. When set to true, stdout and stderr will be captured, providing a simpler way to retrieve the output of subprocesses without needing to use subprocess.PIPE directly.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
subprocess
----------

The :func:`subprocess.run` function accepts the new *capture_output*
keyword argument.  When true, stdout and stderr will be captured.
This is equivalent to passing :const:`subprocess.PIPE` as *stdout* and
*stderr* arguments.
(Contributed by Bo Bayles in :issue:`32102`.)
```

----------------------------------------

TITLE: Configuration File Format for Logging - INI Format - Python
DESCRIPTION: This INI snippet outlines the basic structure required for logging configuration files in Python. It specifies required sections such as [loggers], [handlers], and [formatters], and shows how to link logger configurations to their respective handlers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.config.rst#2025-04-21_snippet_11

LANGUAGE: INI
CODE:
```
[loggers]
keys=root,log02,log03,log04,log05,log06,log07

[handlers]
keys=hand01,hand02,hand03,hand04,hand05,hand06,hand07,hand08,hand09

[formatters]
keys=form01,form02,form03,form04,form05,form06,form07,form08,form09

[logger_root]
level=NOTSET
handlers=hand01
```

----------------------------------------

TITLE: Defining Generator Functions in Python
DESCRIPTION: Examples of defining generator functions and asynchronous generator functions using the yield keyword. Generator functions return an iterator when called, and execution is suspended at each yield expression.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/expressions.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
def gen():  # defines a generator function
    yield 123

async def agen(): # defines an asynchronous generator function
    yield 123
```

----------------------------------------

TITLE: Type Checking with Union Types
DESCRIPTION: This code snippet indicates the behavior of isinstance checks against union types in Python. It compares objects against a union and clarifies that unions can be tested for equality, flattened, or even checked against None.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_102

LANGUAGE: python
CODE:
```
>>> isinstance("", int | str)
True
```

----------------------------------------

TITLE: Making argparse Arguments Required Python
DESCRIPTION: Shows how to make an optional argument mandatory using the `required=True` parameter in `add_argument`. It demonstrates parsing with the required argument present and the error message when it is missing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_54

LANGUAGE: Python
CODE:
```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo', required=True)
>>> parser.parse_args(['--foo', 'BAR'])
Namespace(foo='BAR')
>>> parser.parse_args([])
usage: [-h] --foo FOO
: error: the following arguments are required: --foo
```

----------------------------------------

TITLE: Making Call Assertions with Mock Objects in Python
DESCRIPTION: Shows how to use the call helper object to make assertions about mock calls and their arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_55

LANGUAGE: python
CODE:
```
m = MagicMock(return_value=None)
m(1, 2, a='foo', b='bar')
m()
m.call_args_list == [call(1, 2, a='foo', b='bar'), call()]
```

----------------------------------------

TITLE: Creating a Dictionary Comprehension in Python
DESCRIPTION: This example demonstrates how to use a dictionary comprehension to generate a dictionary of squared numbers. It shows a concise way to process elements from a range and create key-value pairs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/glossary.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
results = {n: n ** 2 for n in range(10)}
```

----------------------------------------

TITLE: Using default for Optional Arguments
DESCRIPTION: Explains how the `default` value is used for optional arguments when the option string is not present on the command line.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_45

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo', default=42)
>>> parser.parse_args(['--foo', '2'])
Namespace(foo='2')
>>> parser.parse_args([])
Namespace(foo=42)
```

----------------------------------------

TITLE: Recommended Shebang for Python Scripts (Python)
DESCRIPTION: The recommended shebang line to use at the top of Python scripts on Unix systems. This line allows the script to be executed directly and uses the env command to locate the Python interpreter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/unix.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
#!/usr/bin/env python3
```

----------------------------------------

TITLE: Enable Color in argparse Help Messages (Keyword)
DESCRIPTION: Shows how to enable color output in the help message generated by `ArgumentParser` by initializing it with `color=True`. This can improve the readability of the help text in supported terminals.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_24

LANGUAGE: Python
CODE:
```
import argparse

parser = argparse.ArgumentParser(description='Process some integers.', color=True)
parser.add_argument('--action', choices=['sum', 'max'])
parser.add_argument('integers', metavar='N', type=int, nargs='+', help='an integer for the accumulator')
# The following line would print the help message with color if supported
# parser.parse_args(['--help'])
```

----------------------------------------

TITLE: Demonstrating Greater Than Assertion in Python
DESCRIPTION: Example showing the assertGreaterEqual method failing when comparing values 3 and 4.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
>>> self.assertGreaterEqual(3, 4)
AssertionError: "3" unexpectedly not greater than or equal to "4"
```

----------------------------------------

TITLE: Using getpass() Function for Password Input in Python
DESCRIPTION: The getpass() function prompts users for a password without echoing the input. It takes an optional prompt string (defaults to 'Password: ') and an optional stream parameter for where to write the prompt. On Unix, it writes to the controlling terminal or falls back to sys.stderr.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/getpass.rst#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
getpass(prompt='Password: ', stream=None)
```

----------------------------------------

TITLE: Raw String Notation for Regular Expressions in Python
DESCRIPTION: This snippet demonstrates the use of raw string notation (r"") for regular expressions in Python. It shows how raw strings simplify the writing of patterns containing backslashes, making them more readable and less error-prone.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_32

LANGUAGE: python
CODE:
```
>>> re.match(r"\W(.)\1\W", " ff ")
<re.Match object; span=(0, 4), match=' ff '>
>>> re.match("\\W(.)\\1\\W", " ff ")
<re.Match object; span=(0, 4), match=' ff '>

>>> re.match(r"\\", r"\\")
<re.Match object; span=(0, 1), match='\\'>
>>> re.match("\\\\", r"\\")
<re.Match object; span=(0, 1), match='\\'>
```

----------------------------------------

TITLE: File Path Info Example
DESCRIPTION: Demonstrates using PathInfo object to check file type information
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_34

LANGUAGE: python
CODE:
```
>>> p = Path('src')
>>> if p.info.is_symlink():
...     print('symlink')
... elif p.info.is_dir():
...     print('directory')
... elif p.info.exists():
...     print('something else')
... else:
...     print('not found')
...
directory
```

----------------------------------------

TITLE: Writing CSV Files with csv.writer
DESCRIPTION: Shows how to write data to a CSV file using csv.writer with custom formatting parameters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/csv.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import csv
with open('eggs.csv', 'w', newline='') as csvfile:
    spamwriter = csv.writer(csvfile, delimiter=' ',
                              quotechar='|', quoting=csv.QUOTE_MINIMAL)
    spamwriter.writerow(['Spam'] * 5 + ['Baked Beans'])
    spamwriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])
```

----------------------------------------

TITLE: Resolving Hostname and Port using getaddrinfo (Python)
DESCRIPTION: This snippet illustrates calling the `socket.getaddrinfo` function to translate a hostname ("example.org") and a service port (80) into a list of address information tuples suitable for creating sockets. It specifies the desired protocol as TCP. The function returns a list of tuples containing family, type, protocol, canonical name, and socket address.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/socket.rst#_snippet_4

LANGUAGE: python
CODE:
```
socket.getaddrinfo("example.org", 80, proto=socket.IPPROTO_TCP)
```

----------------------------------------

TITLE: Defining Color Flag Enum with Bit Operations in Python
DESCRIPTION: This snippet demonstrates how to define a Color enum using the Flag class, allowing for bit operations and combinations of flag values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
class Color(Flag):
    RED = auto()
    GREEN = auto()
    BLUE = auto()
    MAGENTA = RED | BLUE
    YELLOW = RED | GREEN
    CYAN = GREEN | BLUE

Color(3)  # named combination
Color(7)      # not named combination
```

----------------------------------------

TITLE: Resetting Mock State in Python
DESCRIPTION: Demonstration of reset_mock() functionality to clear call attributes and optional reset of return_value and side_effect
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
mock = Mock(return_value=None)
mock('hello')
mock.called
True
mock.reset_mock()
mock.called
False
```

----------------------------------------

TITLE: Demonstrating Type Hints with NewType
DESCRIPTION: Example showing how to use the new NewType helper function from the typing module to create lightweight distinct types for annotations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.6.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
from typing import NewType

UserId = NewType('UserId', int)
some_id = UserId(524313)
```

----------------------------------------

TITLE: Obtaining the Event Loop - Asyncio - Python
DESCRIPTION: This snippet contains low-level functions to retrieve or create an event loop in a given OS thread, specifically `get_running_loop`, `get_event_loop`, `set_event_loop`, and `new_event_loop`. It’s important for managing event loop lifecycle and behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
.. function:: get_running_loop()

   Return the running event loop in the current OS thread.

   Raise a :exc:`RuntimeError` if there is no running event loop.

   This function can only be called from a coroutine or a callback.

   .. versionadded:: 3.7

.. function:: get_event_loop()

   Get the current event loop.

   When called from a coroutine or a callback (e.g. scheduled with
   call_soon or similar API), this function will always return the
   running event loop.

   If there is no running event loop set, the function will return
   the result of the ``get_event_loop_policy().get_event_loop()`` call.

   Because this function has rather complex behavior (especially
   when custom event loop policies are in use), using the
   :func:`get_running_loop` function is preferred to :func:`get_event_loop`
   in coroutines and callbacks.

   .. versionchanged:: 3.14
      Raises a :exc:`RuntimeError` if there is no current event loop.

   .. note::

      The :mod:`!asyncio` policy system is deprecated and will be removed
      in Python 3.16; from there on, this function will return the current
      running event loop if present else it will return the
      loop set by :func:`set_event_loop`.

.. function:: set_event_loop(loop)

   Set *loop* as the current event loop for the current OS thread.

.. function:: new_event_loop()

   Create and return a new event loop object.
```

----------------------------------------

TITLE: Running Doctests in a Test Runner with Python
DESCRIPTION: This code snippet demonstrates how to create a minimal test runner for running doctests within a Python module. It imports the doctest module and checks for command-line arguments to execute specific docstring examples or run all tests in the module, displaying the results.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/doctest.rst#2025-04-21_snippet_27

LANGUAGE: Python
CODE:
```
if __name__ == '__main__':
    import doctest
    flags = doctest.REPORT_NDIFF|doctest.FAIL_FAST
    if len(sys.argv) > 1:
        name = sys.argv[1]
        if name in globals():
            obj = globals()[name]
        else:
            obj = __test__[name]
        doctest.run_docstring_examples(obj, globals(), name=name,
                                       optionflags=flags)
    else:
        fail, total = doctest.testmod(optionflags=flags)
        print(f"{fail} failures out of {total} tests")
```

----------------------------------------

TITLE: Comparing Enum Members in Python
DESCRIPTION: Demonstrates how enumeration members are compared by identity and equality, but not ordered comparisons. Also shows comparisons with non-enum values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
>>> Color.RED is Color.RED
True
>>> Color.RED is Color.BLUE
False
>>> Color.RED is not Color.BLUE
True

>>> Color.RED < Color.BLUE
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: '<' not supported between instances of 'Color' and 'Color'

>>> Color.BLUE == Color.RED
False
>>> Color.BLUE != Color.RED
True
>>> Color.BLUE == Color.BLUE
True

>>> Color.BLUE == 2
False
```

----------------------------------------

TITLE: Using nargs='?' for Optional Files
DESCRIPTION: Illustrates a common use case for `nargs='?'` to define optional positional arguments, such as input and output file paths, showing how `None` is assigned when arguments are not provided.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_42

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('infile', nargs='?')
>>> parser.add_argument('outfile', nargs='?')
>>> parser.parse_args(['input.txt', 'output.txt'])
Namespace(infile='input.txt', outfile='output.txt')
>>> parser.parse_args(['input.txt'])
Namespace(infile='input.txt', outfile=None)
>>> parser.parse_args([])
Namespace(infile=None, outfile=None)
```

----------------------------------------

TITLE: Using split Method with Separator in Python bytes Objects
DESCRIPTION: Demonstrates how to split bytes objects into lists using a specified separator. Shows different behaviors with maxsplit parameter and handling of consecutive separators.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_50

LANGUAGE: python
CODE:
```
>>> b'1,2,3'.split(b',')
[b'1', b'2', b'3']
>>> b'1,2,3'.split(b',', maxsplit=1)
[b'1', b'2,3']
>>> b'1,2,,3,'.split(b',')
[b'1', b'2', b'', b'3', b'']
>>> b'1<>2<>3<4'.split(b'<>')
[b'1', b'2', b'3<4']
```

----------------------------------------

TITLE: Basic Python Command Line Syntax in Shell
DESCRIPTION: Shows the general syntax for invoking the Python interpreter with various options and arguments. This is the main syntax pattern for running Python from the command line.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/cmdline.rst#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
python [-bBdEhiIOPqRsSuvVWx?] [-c command | -m module-name | script | - ] [args]
```

----------------------------------------

TITLE: Displaying Top 10 Memory Allocators in Python using tracemalloc
DESCRIPTION: Code snippet that demonstrates how to start tracemalloc, take a snapshot, and display the top 10 files allocating the most memory in a Python application.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tracemalloc.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import tracemalloc

tracemalloc.start()

# ... run your application ...

snapshot = tracemalloc.take_snapshot()
top_stats = snapshot.statistics('lineno')

print("[ Top 10 ]")
for stat in top_stats[:10]:
    print(stat)
```

----------------------------------------

TITLE: Handling Subprocess Timeout in Python
DESCRIPTION: Example of how to properly handle TimeoutExpired exceptions when using subprocess.communicate(). The code shows how to catch the exception, kill the child process, and recover any output without losing data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/subprocess.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
proc = subprocess.Popen(...)
try:
    outs, errs = proc.communicate(timeout=15)
except TimeoutExpired:
    proc.kill()
    outs, errs = proc.communicate()
```

----------------------------------------

TITLE: Using ExitStack to Manage File I/O
DESCRIPTION: This snippet demonstrates how to use ExitStack to manage multiple file operations safely. It allows files to remain open if all are opened successfully, or close them automatically if any file fails to open, ensuring clean resource management.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextlib.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
with ExitStack() as stack:\n    files = [stack.enter_context(open(fname)) for fname in filenames]\n    # Hold onto the close method, but don't call it yet.\n    close_files = stack.pop_all().close\n    # If opening any file fails, all previously opened files will be\n    # closed automatically. If all files are opened successfully,\n    # they will remain open even after the with statement ends.\n    # close_files() can then be invoked explicitly to close them all.
```

----------------------------------------

TITLE: Creating Named Tuples in Python
DESCRIPTION: This function definition provides a way to create a new tuple subclass with named fields that can be accessed by their names. It also outlines the structure of the named tuples and their methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_13

LANGUAGE: Python
CODE:
```
.. function:: namedtuple(typename, field_names, *, rename=False, defaults=None, module=None)

    Returns a new tuple subclass named *typename*.  The new subclass is used to
    create tuple-like objects that have fields accessible by attribute lookup as
    well as being indexable and iterable.
```

----------------------------------------

TITLE: Using assert_type for Static Type Checking Verification in Python
DESCRIPTION: These examples show how to use the `typing.assert_type` function. It is a runtime no-op but signals to a static type checker to verify that the inferred type of the first argument matches the specified type, emitting an error if they don't. This helps developers confirm the type checker's analysis.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_165

LANGUAGE: python
CODE:
```
def greet(name: str) -> None:
    assert_type(name, str)  # OK, inferred type of `name` is `str`
    assert_type(name, int)  # type checker error
```

LANGUAGE: python
CODE:
```
def complex_function(arg: object):
    # Do some complex type-narrowing logic,
    # after which we hope the inferred type will be `int`
    ...
    # Test whether the type checker correctly understands our function
    assert_type(arg, int)
```

----------------------------------------

TITLE: Unquoting URL-encoded strings in Python
DESCRIPTION: The unquote function replaces %xx escapes with their single-character equivalent. It can handle both str and bytes objects, with optional encoding and error handling parameters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.parse.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
unquote('/El%20Ni%C3%B1o/')
```

----------------------------------------

TITLE: Using TYPE_CHECKING for Conditional Imports in Python
DESCRIPTION: Illustrates the use of the typing.TYPE_CHECKING constant to perform imports only during static type checking, avoiding runtime overhead. It also shows how to use forward references (string annotations) for types from conditionally imported modules.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_183

LANGUAGE: Python
CODE:
```
if TYPE_CHECKING:
    import expensive_mod

def fun(arg: 'expensive_mod.SomeType') -> None:
    local_var: expensive_mod.AnotherType = other_fun()
```

----------------------------------------

TITLE: Recursive Directory Tree Walking Example in Python
DESCRIPTION: This example demonstrates how to recursively walk a directory tree using stat module functions. It defines a walktree function that traverses directories and calls a callback function for each regular file. The example also includes a simple visitfile callback that prints the file path.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stat.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import os, sys
from stat import *

def walktree(top, callback):
    '''recursively descend the directory tree rooted at top,
       calling the callback function for each regular file'''

    for f in os.listdir(top):
        pathname = os.path.join(top, f)
        mode = os.lstat(pathname).st_mode
        if S_ISDIR(mode):
            # It's a directory, recurse into it
            walktree(pathname, callback)
        elif S_ISREG(mode):
            # It's a file, call the callback function
            callback(pathname)
        else:
            # Unknown file type, print a message
            print('Skipping %s' % pathname)

def visitfile(file):
    print('visiting', file)

if __name__ == '__main__':
    walktree(sys.argv[1], visitfile)
```

----------------------------------------

TITLE: Extract Subset of tar.gz Archive Using Generator - Python
DESCRIPTION: This example shows how to selectively extract members from a gzip-compressed tar archive. It defines a generator function `py_files` that yields only members with a '.py' extension and passes this generator to the `extractall` method's `members` parameter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_31

LANGUAGE: Python
CODE:
```
import os
import tarfile

def py_files(members):
       for tarinfo in members:
           if os.path.splitext(tarinfo.name)[1] == ".py":
               yield tarinfo

tar = tarfile.open("sample.tar.gz")
tar.extractall(members=py_files(tar))
tar.close()
```

----------------------------------------

TITLE: Implementing Python all() Function
DESCRIPTION: Example implementation showing how the all() function works internally by iterating through elements and returning False if any element is falsy, True otherwise.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
def all(iterable):
    for element in iterable:
        if not element:
            return False
    return True
```

----------------------------------------

TITLE: TCP Client Implementation in Python
DESCRIPTION: A TCP client that connects to a server, sends data, and receives a response. Uses socket.socket for creating TCP connection and handles data transmission.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/socketserver.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
import socket
import sys

HOST, PORT = "localhost", 9999
data = " ".join(sys.argv[1:])

# Create a socket (SOCK_STREAM means a TCP socket)
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
    # Connect to server and send data
    sock.connect((HOST, PORT))
    sock.sendall(bytes(data, "utf-8"))
    sock.sendall(b"\n")

    # Receive data from the server and shut down
    received = str(sock.recv(1024), "utf-8")

print("Sent:    ", data)
print("Received:", received)
```

----------------------------------------

TITLE: Adding Aliases for Subcommands in argparse
DESCRIPTION: This snippet shows how to define aliases for a subparser using the `aliases` argument in `add_parser`. This allows users to invoke the same subparser using multiple different command names, such as using 'co' as a shorthand for 'checkout'.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_78

LANGUAGE: python
CODE:
```
parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers()
checkout = subparsers.add_parser('checkout', aliases=['co'])
checkout.add_argument('foo')
parser.parse_args(['co', 'bar'])
```

----------------------------------------

TITLE: Counting with Collections.Counter in Python
DESCRIPTION: This snippet demonstrates using the collections.Counter class to count unique items in a sequence. The class provides a convenient way to tally elements and return a dictionary-like object with elements as keys and their counts as values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.1.rst#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
Counter(['red', 'blue', 'red', 'green', 'blue', 'blue'])
Counter({'blue': 3, 'red': 2, 'green': 1})
```

----------------------------------------

TITLE: Sorting one list by values from another list in Python
DESCRIPTION: Demonstrates how to sort one list based on the values in another list by zipping them together, sorting the pairs, and then extracting the desired elements from the sorted pairs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_46

LANGUAGE: python
CODE:
```
>>> list1 = ["what", "I'm", "sorting", "by"]
>>> list2 = ["something", "else", "to", "sort"]
>>> pairs = zip(list1, list2)
>>> pairs = sorted(pairs)
>>> pairs
[("I'm", 'else'), ('by', 'sort'), ('sorting', 'to'), ('what', 'something')]
>>> result = [x[1] for x in pairs]
>>> result
['else', 'sort', 'to', 'something']
```

----------------------------------------

TITLE: Using side_effect with Mock in Python
DESCRIPTION: Shows how to use the side_effect attribute to make a mock raise an exception, return values from a dictionary based on arguments, or return values from a sequence on consecutive calls.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from unittest.mock import Mock
mock = Mock(side_effect=KeyError('foo'))
mock()
```

LANGUAGE: python
CODE:
```
values = {'a': 1, 'b': 2, 'c': 3}
def side_effect(arg):
    return values[arg]

mock.side_effect = side_effect
mock('a'), mock('b'), mock('c')
```

LANGUAGE: python
CODE:
```
mock.side_effect = [5, 4, 3, 2, 1]
mock(), mock(), mock()
```

----------------------------------------

TITLE: Obtaining Directory Names with os.path
DESCRIPTION: The dirname function extracts and returns the directory name of a pathname from the first element of a split path. Support for path-like objects was added in version 3.6.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
def dirname(path):
    return split(path)[0]
```

----------------------------------------

TITLE: Using assert_any_await in AsyncMock
DESCRIPTION: Shows how to use assert_any_await to verify that an AsyncMock was awaited at any point with specific arguments, regardless of other awaits.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
>>> mock = AsyncMock()
>>> async def main(*args, **kwargs):
...     await mock(*args, **kwargs)
...
>>> asyncio.run(main('foo', bar='bar'))
>>> asyncio.run(main('hello'))
>>> mock.assert_any_await('foo', bar='bar')
>>> mock.assert_any_await('other')
Traceback (most recent call last):
...
AssertionError: mock('other') await not found
```

----------------------------------------

TITLE: Demonstrating Python Range Object Features
DESCRIPTION: Examples showing various features of the range object in Python, including containment tests, element index lookup, slicing, and support for negative indices.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
>>> r = range(0, 20, 2)
>>> r
range(0, 20, 2)
>>> 11 in r
False
>>> 10 in r
True
>>> r.index(10)
5
>>> r[5]
10
>>> r[:5]
range(0, 10, 2)
>>> r[-1]
18
```

----------------------------------------

TITLE: Binding Widgets to Events in Tkinter with Python
DESCRIPTION: This example demonstrates how to bind a Python function to a Tkinter widget event using the bind method. It sets up a callback to change a button's active foreground color to red when the cursor enters the button's area. This requires Python's tkinter module and knowledge of widget event handling in Tkinter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
def turn_red(self, event):
    event.widget["activeforeground"] = "red"

self.button.bind("<Enter>", self.turn_red)
```

----------------------------------------

TITLE: Demonstrating Package Import Structure
DESCRIPTION: Shows a typical Python package directory structure used to explain absolute vs relative imports.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_3

LANGUAGE: plaintext
CODE:
```
pkg/
pkg/__init__.py
pkg/main.py
pkg/string.py
```

----------------------------------------

TITLE: Using Thousands Separators in String Formatting in Python
DESCRIPTION: Shows how to use the new thousands separator format specifier with various numeric types, including int, float, complex, and Decimal.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.1.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> format(1234567, ',d')
'1,234,567'
>>> format(1234567.89, ',.2f')
'1,234,567.89'
>>> format(12345.6 + 8901234.12j, ',f')
'12,345.600000+8,901,234.120000j'
>>> format(Decimal('1234567.89'), ',f')
'1,234,567.89'
```

----------------------------------------

TITLE: Filtering NaN values for statistical analysis in Python
DESCRIPTION: This snippet demonstrates how to handle NaN (Not a Number) values in datasets before applying statistical functions. It shows how to identify NaN values, filter them out, and then calculate statistics like the median to obtain meaningful results.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> from statistics import median
>>> from math import isnan
>>> from itertools import filterfalse

>>> data = [20.7, float('NaN'),19.2, 18.3, float('NaN'), 14.4]
>>> sorted(data)  # This has surprising behavior
[20.7, nan, 14.4, 18.3, 19.2, nan]
>>> median(data)  # This result is unexpected
16.35

>>> sum(map(isnan, data))    # Number of missing values
2
>>> clean = list(filterfalse(isnan, data))  # Strip NaN values
>>> clean
[20.7, 19.2, 18.3, 14.4]
>>> sorted(clean)  # Sorting now works as expected
[14.4, 18.3, 19.2, 20.7]
>>> median(clean)       # This result is now well defined
18.75
```

----------------------------------------

TITLE: Creating and Sending Simple Text Email in Python
DESCRIPTION: Demonstrates how to create and send a simple text email message with Unicode content using Python's email and smtplib modules.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.examples.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
# ../includes/email-simple.py
```

----------------------------------------

TITLE: Implementing Logged Attribute Access Descriptor in Python
DESCRIPTION: Descriptor that logs all access and modifications to an age attribute. Demonstrates attribute management with __get__ and __set__ methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
import logging

logging.basicConfig(level=logging.INFO)

class LoggedAgeAccess:
    def __get__(self, obj, objtype=None):
        value = obj._age
        logging.info('Accessing %r giving %r', 'age', value)
        return value

    def __set__(self, obj, value):
        logging.info('Updating %r to %r', 'age', value)
        obj._age = value

class Person:
    age = LoggedAgeAccess()             # Descriptor instance
    def __init__(self, name, age):
        self.name = name                # Regular instance attribute
        self.age = age                  # Calls __set__()

    def birthday(self):
        self.age += 1                   # Calls both __get__() and __set__()
```

----------------------------------------

TITLE: Adding Password for HTTP Authentication with urllib
DESCRIPTION: This snippet demonstrates how to set up a password manager for handling HTTP basic authentication using the urllib.request module. It adds a username and password for the top-level URL, creates an opener with an authentication handler, and installs it for subsequent requests. To use this, ensure the urllib module is imported and initialized correctly.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/urllib2.rst#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
# create a password manager
password_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()

# Add the username and password.
# If we knew the realm, we could use it instead of None.
top_level_url = "http://example.com/foo/"
password_mgr.add_password(None, top_level_url, username, password)

handler = urllib.request.HTTPBasicAuthHandler(password_mgr)

# create "opener" (OpenerDirector instance)
opener = urllib.request.build_opener(handler)

# use the opener to fetch a URL
opener.open(a_url)

# Install the opener.
# Now all calls to urllib.request.urlopen use our opener.
urllib.request.install_opener(opener)
```

----------------------------------------

TITLE: Using patch.dict in Python
DESCRIPTION: Demonstrates how to use patch.dict to temporarily modify a dictionary within a scope and restore it afterward. Useful for patching configuration or environment variables.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
foo = {'key': 'value'}
original = foo.copy()
with patch.dict(foo, {'newkey': 'newvalue'}, clear=True):
    assert foo == {'newkey': 'newvalue'}

assert foo == original
```

----------------------------------------

TITLE: Implementing Timeout with Task Uncancellation in Python AsyncIO
DESCRIPTION: Example showing how to use asyncio.timeout with proper task uncancellation to isolate timeout effects to specific code blocks while allowing other operations to continue.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
async def make_request_with_timeout():
    try:
        async with asyncio.timeout(1):
            # Structured block affected by the timeout:
            await make_request()
            await make_another_request()
    except TimeoutError:
        log("There was a timeout")
    # Outer code not affected by the timeout:
    await unrelated_code()
```

----------------------------------------

TITLE: Saving Profiling Results to a File with cProfile
DESCRIPTION: This code shows how to save the profiling results to a file instead of printing them to the console. It imports cProfile and re, then calls cProfile.run() with an additional 'restats' argument, which specifies the filename to save the profiling data to.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/profile.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
import cProfile
import re
cProfile.run('re.compile("foo|bar")', 'restats')
```

----------------------------------------

TITLE: Deprecating shutil.rmtree() onerror argument in Python
DESCRIPTION: The 'onerror' argument of shutil.rmtree() is deprecated. Use the 'onexc' argument instead for handling exceptions during the removal process.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_28

LANGUAGE: Python
CODE:
```
shutil.rmtree(path, onerror=handler)
```

----------------------------------------

TITLE: Using Basic split() with Regular Expressions in Python
DESCRIPTION: Demonstrates using re.split() to split a string into a list of words. The pattern \W+ matches one or more non-word characters used as delimiters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
>>> p = re.compile(r'\W+')
>>> p.split('This... is a test.')
['This', 'is', 'a', 'test', '']
```

----------------------------------------

TITLE: Generating Employee Records with Named Tuples
DESCRIPTION: This snippet shows how named tuples can be used for creating records from CSV and SQL data, allowing fields to be accessed by name for better readability.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_15

LANGUAGE: Python
CODE:
```
EmployeeRecord = namedtuple('EmployeeRecord', 'name, age, title, department, paygrade')

import csv
for emp in map(EmployeeRecord._make, csv.reader(open("employees.csv", "rb"))):
    print(emp.name, emp.title)

import sqlite3
conn = sqlite3.connect('/companydata')
cursor = conn.cursor()
cursor.execute('SELECT name, age, title, department, paygrade FROM employees')
for emp in map(EmployeeRecord._make, cursor.fetchall()):
    print(emp.name, emp.title)
```

----------------------------------------

TITLE: Basic ThreadPoolExecutor Usage Example
DESCRIPTION: Demonstrates how to use ThreadPoolExecutor to execute a power calculation asynchronously.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/concurrent.futures.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
with ThreadPoolExecutor(max_workers=1) as executor:
    future = executor.submit(pow, 323, 1235)
    print(future.result())
```

----------------------------------------

TITLE: Pattern Matching with Point Class in Python
DESCRIPTION: Shows pattern matching using class patterns with a Point class. Demonstrates matching using named attributes and different point positions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

def where_is(point):
    match point:
        case Point(x=0, y=0):
            print("Origin")
        case Point(x=0, y=y):
            print(f"Y={y}")
        case Point(x=x, y=0):
            print(f"X={x}")
        case Point():
            print("Somewhere else")
        case _:
            print("Not a point")
```

----------------------------------------

TITLE: Using Counter Class in Python Collections Module
DESCRIPTION: Demonstrates the usage of the new Counter class in the collections module for tallying data. Shows how to create a Counter, increment counts, and use methods like most_common() and elements().
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.7.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
>>> from collections import Counter
>>> c = Counter()
>>> for letter in 'here is a sample of english text':
...   c[letter] += 1
...
>>> c # doctest: +SKIP
Counter({' ': 6, 'e': 5, 's': 3, 'a': 2, 'i': 2, 'h': 2,
'l': 2, 't': 2, 'g': 1, 'f': 1, 'm': 1, 'o': 1, 'n': 1,
'p': 1, 'r': 1, 'x': 1})
>>> c['e']
5
>>> c['z']
0
```

LANGUAGE: python
CODE:
```
>>> c.most_common(5)
[(' ', 6), ('e', 5), ('s', 3), ('a', 2), ('i', 2)]
>>> c.elements() ->
   'a', 'a', ' ', ' ', ' ', ' ', ' ', ' ',
   'e', 'e', 'e', 'e', 'e', 'g', 'f', 'i', 'i',
   'h', 'h', 'm', 'l', 'l', 'o', 'n', 'p', 's',
   's', 's', 'r', 't', 't', 'x'
>>> c['e']
5
>>> c.subtract('very heavy on the letter e')
>>> c['e']    # Count is now lower
-1
```

----------------------------------------

TITLE: argparse 'count' Action Example (Python)
DESCRIPTION: Illustrates the 'count' action, which increments a counter each time the argument is encountered on the command line. Commonly used for managing verbosity levels.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_36

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--verbose', '-v', action='count', default=0)
>>> parser.parse_args(['-vvv'])
Namespace(verbose=3)
```

----------------------------------------

TITLE: Python Threading Barrier for Client-Server Sync
DESCRIPTION: Illustrates the use of a `threading.Barrier` to synchronize two threads (simulated client and server), ensuring both threads have reached the barrier before proceeding into their main loops.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/threading.rst#_snippet_7

LANGUAGE: python
CODE:
```
b = Barrier(2, timeout=5)

def server():
    start_server()
    b.wait()
    while True:
        connection = accept_connection()
        process_server_connection(connection)

def client():
    b.wait()
    while True:
        connection = make_connection()
        process_client_connection(connection)
```

----------------------------------------

TITLE: Using localcontext for Temporary Precision Change in Python
DESCRIPTION: Demonstrates using `localcontext` as a context manager to temporarily set context attributes like precision (`prec`) within a `with` block. The changes are scoped to the block, and the previous context is automatically restored upon exiting, useful for isolated high-precision calculations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_30

LANGUAGE: python
CODE:
```
from decimal import localcontext

with localcontext() as ctx:
    ctx.prec = 42   # Perform a high precision calculation
    s = calculate_something()
s = +s  # Round the final result back to the default precision
```

----------------------------------------

TITLE: Using Match.groups() Method in Python Regular Expressions
DESCRIPTION: Demonstrates how to retrieve all capturing groups at once using the groups() method, which returns a tuple containing all the captured subgroups.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
>>> m = re.match(r"(\d+)\.(\d+)", "24.1632")
>>> m.groups()
('24', '1632')
```

----------------------------------------

TITLE: Creating Network Connection in Asyncio
DESCRIPTION: Opens a streaming transport connection with extensive configuration options for socket family, SSL/TLS, address resolution, and connection strategies. Supports Happy Eyeballs algorithm for improved connection reliability.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
loop.create_connection(protocol_factory, host=None, port=None, *, ssl=None, family=0, proto=0, flags=0, sock=None, local_addr=None, server_hostname=None)
```

----------------------------------------

TITLE: Creating a Simplified Queue in Python
DESCRIPTION: SimpleQueue is a simplified Queue type, similar to a locked Pipe. It provides basic queue operations like empty(), get(), and put(), as well as a close() method to release internal resources.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
SimpleQueue()
```

----------------------------------------

TITLE: Locating Items in N-Dimensional C Arrays with Offsets
DESCRIPTION: The C function `get_item_pointer` calculates a pointer to an element in an N-dimensional array using strides and suboffsets. It iteratively adjusts the pointer based on index strides and suboffsets, utilizing array dimensions and element indices. Dependencies include valid stride, suboffset, and index arrays, and the function returns the calculated item pointer.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/buffer.rst#2025-04-21_snippet_2

LANGUAGE: c
CODE:
```
void *get_item_pointer(int ndim, void *buf, Py_ssize_t *strides,
                       Py_ssize_t *suboffsets, Py_ssize_t *indices) {
    char *pointer = (char*)buf;
    int i;
    for (i = 0; i < ndim; i++) {
        pointer += strides[i] * indices[i];
        if (suboffsets[i] >=0 ) {
            pointer = *((char**)pointer) + suboffsets[i];
        }
    }
    return (void*)pointer;
}
```

----------------------------------------

TITLE: Building a block-reader with iter()
DESCRIPTION: Example of using the second form of iter() with a sentinel value to create a block reader for processing fixed-width blocks from a binary database file until the end of file is reached.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
from functools import partial
with open('mydata.db', 'rb') as f:
    for block in iter(partial(f.read, 64), b''):
        process_block(block)
```

----------------------------------------

TITLE: Parsing Python Assignment with Unpacking AST
DESCRIPTION: This snippet demonstrates the AST for an assignment statement involving unpacking ('a,b = c') using `ast.parse` and `ast.dump`. The output shows the `Assign` node where the `targets` field contains a single node representing the unpacking, which is a `Tuple` node with `Store` context, containing the individual target `Name` nodes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_33

LANGUAGE: python
CODE:
```
print(ast.dump(ast.parse('a,b = c'), indent=4))
```

----------------------------------------

TITLE: Using Atexit as a Decorator
DESCRIPTION: Demonstrates how to use the atexit.register method as a decorator to automatically register a function to be called during program termination.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/atexit.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
import atexit

@atexit.register
def goodbye():
    print('You are now leaving the Python sector.')
```

----------------------------------------

TITLE: Reading a Compressed File with LZMA
DESCRIPTION: This code snippet demonstrates how to read data from a compressed file using the lzma module, making it easy to handle compressed file operations in Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/lzma.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
import lzma
with lzma.open("file.xz") as f:
    file_content = f.read()
```

----------------------------------------

TITLE: Demonstrating String rsplit Method in Python
DESCRIPTION: Shows the difference between split and rsplit string methods. While split divides from the beginning of the string, rsplit starts from the end, which is useful when you want to separate the last part of a delimited string.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
>>> 'www.python.org'.split('.', 1)
['www', 'python.org']
'www.python.org'.rsplit('.', 1)
['www.python', 'org']
```

----------------------------------------

TITLE: Implementing Listener Process for Distributed Logging in Python
DESCRIPTION: This function sets up the listener process that receives logging events from a queue and dispatches them using the custom MyHandler. It configures logging based on the provided configuration and runs until a stop event is set.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_33

LANGUAGE: python
CODE:
```
def listener_process(q, stop_event, config):
    """
    This initializes logging according to the specified configuration,
    starts the listener and waits for it to finish.
    """
    logging.config.dictConfig(config)
    listener = logging.handlers.QueueListener(q, MyHandler())
    listener.start()
    if os.name == 'posix':
        # On POSIX, the setup logger will have been configured in the
        # parent process, but should have been disabled following the
        # dictConfig call.
        # On Windows, since fork isn't used, the setup logger won't
        # exist in the child, so it would be created and the message
        # would appear - hence the "if posix" clause.
        logger = logging.getLogger('setup')
        logger.critical('Should not appear, because of disabled logger...')
    stop_event.wait()
    listener.stop()
```

----------------------------------------

TITLE: Define Literal Return Type Python
DESCRIPTION: Illustrates using `typing.Literal` to specify that a function is type-hinted to always return a specific literal value, in this case, `True`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_68

LANGUAGE: Python
CODE:
```
def validate_simple(data: Any) -> Literal[True]:
    ...
```

----------------------------------------

TITLE: Using mean() function in Python's statistics module
DESCRIPTION: Examples of using the mean() function to calculate the arithmetic mean (average) of data. The examples show how the function works with different data types including integers, floating point numbers, Fractions, and Decimal values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> mean([1, 2, 3, 4, 4])
2.8
>>> mean([-1.0, 2.5, 3.25, 5.75])
2.625

>>> from fractions import Fraction as F
>>> mean([F(3, 7), F(1, 21), F(5, 3), F(1, 3)])
Fraction(13, 21)

>>> from decimal import Decimal as D
>>> mean([D("0.5"), D("0.75"), D("0.625"), D("0.375")])
Decimal('0.5625')
```

----------------------------------------

TITLE: Name Mangling for Private Variables in Python
DESCRIPTION: Demonstrates name mangling mechanism for private variables and method inheritance in Python classes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/classes.rst#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
class Mapping:
    def __init__(self, iterable):
        self.items_list = []
        self.__update(iterable)

    def update(self, iterable):
        for item in iterable:
            self.items_list.append(item)

    __update = update   # private copy of original update() method

class MappingSubclass(Mapping):

    def update(self, keys, values):
        # provides new signature for update()
        # but does not break __init__()
        for item in zip(keys, values):
            self.items_list.append(item)
```

----------------------------------------

TITLE: Using %(prog)s in Help Messages (Python)
DESCRIPTION: Shows how the `%(prog)s` format specifier can be used within argument help strings to dynamically insert the program name configured via the `prog` argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_4

LANGUAGE: Python
CODE:
```
parser = argparse.ArgumentParser(prog='myprogram')
parser.add_argument('--foo', help='foo of the %(prog)s program')
parser.print_help()
```

----------------------------------------

TITLE: Read and List Members of gzip Compressed tar Archive - Python
DESCRIPTION: This snippet opens a gzip-compressed tar archive (`sample.tar.gz`) in read mode (`"r:gz"`). It then iterates through each member (`tarinfo`) in the archive and prints its name, size, and type (regular file, directory, or something else).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_34

LANGUAGE: Python
CODE:
```
import tarfile
tar = tarfile.open("sample.tar.gz", "r:gz")
for tarinfo in tar:
       print(tarinfo.name, "is", tarinfo.size, "bytes in size and is ", end="")
       if tarinfo.isreg():
           print("a regular file.")
       elif tarinfo.isdir():
           print("a directory.")
       else:
           print("something else.")
tar.close()
```

----------------------------------------

TITLE: Using shlex.split to Parse Shell-like Command Strings in Python
DESCRIPTION: The split function parses a string using shell-like syntax, handling quotes and whitespace appropriately. This example demonstrates using the shlex.join function to combine a list of tokens into a properly shell-escaped string.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/shlex.rst#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from shlex import join
>>> print(join(['echo', '-n', 'Multiple words']))
echo -n 'Multiple words'
```

----------------------------------------

TITLE: Python Grammar: Attribute References
DESCRIPTION: Defines the syntax for attribute references in Python, which are a primary followed by a period and an identifier.  Explains how the object is asked to produce the attribute whose name is the identifier, and how `__getattribute__` and `__getattr__` methods are used.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/expressions.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
"attributeref: `primary` \".\" `identifier`"
```

----------------------------------------

TITLE: Making GET Requests with http.client in Python
DESCRIPTION: Demonstrates how to make a GET request using http.client, retrieve the response object, and read data from it. It shows both reading the entire content at once and reading in chunks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.client.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> conn.request("GET", "/")
>>> r1 = conn.getresponse()
>>> print(r1.status, r1.reason)
200 OK
>>> data1 = r1.read()  # This will return entire content.
>>> # The following example demonstrates reading data in chunks.
>>> conn.request("GET", "/")
>>> r1 = conn.getresponse()
>>> while chunk := r1.read(200):
...     print(repr(chunk))
b'<!doctype html>\n<!--[if"...
...
```

----------------------------------------

TITLE: Padding Numeric Strings with zfill
DESCRIPTION: Demonstrates the str.zfill() method for padding numeric strings with zeros on the left side, handling different numeric formats
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/inputoutput.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
'12'.zfill(5)
```

LANGUAGE: python
CODE:
```
'-3.14'.zfill(7)
```

LANGUAGE: python
CODE:
```
'3.14159265359'.zfill(5)
```

----------------------------------------

TITLE: Handling Bad File Descriptor Error in Python
DESCRIPTION: This Python snippet opens and reads the first line of the script file itself. A 'Bad file descriptor' error can occur if the file descriptor is closed twice, as demonstrated in Python Development Mode with a ResourceWarning. The issue arises from improperly using 'os.close(fp.fileno())'. To prevent this error, one should avoid closing the file descriptor explicitly after the file object has been closed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/devmode.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
import os

def main():
    fp = open(__file__)
    firstline = fp.readline()
    print(firstline.rstrip())
    os.close(fp.fileno())
    # The file is closed implicitly

main()
```

----------------------------------------

TITLE: Replacing imp.load_source with importlib in Python
DESCRIPTION: This Python function provides a replacement implementation for the deprecated `imp.load_source` function using the `importlib` module. It loads a module from a source file but does not automatically add it to `sys.modules`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_45

LANGUAGE: Python
CODE:
```
import importlib.util
import importlib.machinery

def load_source(modname, filename):
    loader = importlib.machinery.SourceFileLoader(modname, filename)
    spec = importlib.util.spec_from_file_location(modname, filename, loader=loader)
    module = importlib.util.module_from_spec(spec)
    # The module is always executed and not cached in sys.modules.
    # Uncomment the following line to cache the module.
    # sys.modules[module.__name__] = module
    loader.exec_module(module)
    return module
```

----------------------------------------

TITLE: Packing short integer with little-endian byte order in Python struct
DESCRIPTION: Demonstrates using the Python `struct` module to pack a short integer (1023) into bytes using little-endian byte order, indicated by the '<' format character prefix. The output shows the resulting bytes in little-endian format.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/struct.rst#_snippet_2

LANGUAGE: Python
CODE:
```
struct.pack('<h', 1023)
# Output: b'\xff\x03'
```

----------------------------------------

TITLE: Using argparse FileType with Stdin/Stdout (Python)
DESCRIPTION: Shows how `argparse.FileType` handles the pseudo-argument `'-'`, automatically converting it to `sys.stdin` for readable files or `sys.stdout` for writable files.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_84

LANGUAGE: Python
CODE:
```
parser = argparse.ArgumentParser()
parser.add_argument('infile', type=argparse.FileType('r'))
parser.parse_args(['-'])
```

----------------------------------------

TITLE: Using the 'with' Statement for Thread Locking in Python
DESCRIPTION: This snippet shows how to use the 'with' statement with a threading.Lock object to ensure proper acquisition and release of locks in critical sections of code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
lock = threading.Lock()
with lock:
    # Critical section of code
    ...
```

----------------------------------------

TITLE: Iterating Over Child Elements in Python
DESCRIPTION: Shows how to iterate over the children of an XML element and access their tag names and attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> for child in root:
...     print(child.tag, child.attrib)
...
country {'name': 'Liechtenstein'}
country {'name': 'Singapore'}
country {'name': 'Panama'}
```

----------------------------------------

TITLE: Generating Permutations
DESCRIPTION: This function returns successive permutations of elements from the input iterable. It can generate full-length permutations if 'r' is not specified.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
.. function:: permutations(iterable, r=None)

   Return successive *r* length `permutations of elements
   <https://www.britannica.com/science/permutation>`_ from the *iterable*.

   If *r* is not specified or is ``None``, then *r* defaults to the length
   of the *iterable* and all possible full-length permutations
   are generated.
```

----------------------------------------

TITLE: Creating a Context Manager with Decorator Support in Python
DESCRIPTION: Shows how to create a context manager using the contextlib.contextmanager decorator that can also be used as a function decorator, implementing a logger that tracks entry and exit times.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_41

LANGUAGE: python
CODE:
```
from contextlib import contextmanager
import logging

logging.basicConfig(level=logging.INFO)

@contextmanager
def track_entry_and_exit(name):
    logging.info('Entering: %s', name)
    yield
    logging.info('Exiting: %s', name)
```

----------------------------------------

TITLE: Using connection shortcut methods in Python with sqlite3
DESCRIPTION: This example shows how to use the execute, executemany, and executescript methods of the Connection class to perform database operations more concisely without explicitly creating Cursor objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_29

LANGUAGE: Python
CODE:
```
# Create and fill the table.
con = sqlite3.connect(":memory:")
con.execute("CREATE TABLE lang(name, first_appeared)")
data = [
    ("C++", 1985),
    ("Objective-C", 1984),
]
con.executemany("INSERT INTO lang(name, first_appeared) VALUES(?, ?)", data)

# Print the table contents
for row in con.execute("SELECT name, first_appeared FROM lang"):
    print(row)

print("I just deleted", con.execute("DELETE FROM lang").rowcount, "rows")

# close() is not a shortcut method and it's not called automatically;
# the connection object should be closed manually
con.close()
```

----------------------------------------

TITLE: Defining Type Predicates with TypeGuard in Python
DESCRIPTION: Demonstrates using `typing.TypeGuard` to define a user-defined type predicate function. It shows how `TypeGuard[NarrowedType]` in the return annotation narrows the argument's type to exactly `NarrowedType` if the function returns `True`, particularly useful for cases like narrowing generic types where `TypeIs` might not apply.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_89

LANGUAGE: python
CODE:
```
from typing import TypeGuard

def is_str_list(val: list[object]) -> TypeGuard[list[str]]:
    '''Determines whether all objects in the list are strings'''
    return all(isinstance(x, str) for x in val)

def func1(val: list[object]):
    if is_str_list(val):
        # Type of ``val`` is narrowed to ``list[str]``.
        print(" ".join(val))
    else:
        # Type of ``val`` remains as ``list[object]``.
        print("Not a list of strings!")
```

----------------------------------------

TITLE: Adding Custom Methods to Enum Classes in Python
DESCRIPTION: Demonstrates how to add custom methods to an Enum class. This example adds a class method to create a Weekday enum from a datetime.date object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
class Weekday(Enum):
    MONDAY = 1
    TUESDAY = 2
    WEDNESDAY = 3
    THURSDAY = 4
    FRIDAY = 5
    SATURDAY = 6
    SUNDAY = 7
    #
    @classmethod
    def from_date(cls, date):
        return cls(date.isoweekday())
```

----------------------------------------

TITLE: Using ParamSpec in Python Typing
DESCRIPTION: Shows the correct usage of typing.ParamSpec in Python typing, preventing incorrect usage like typing.List[P][int]. This change enforces stricter type checking for ParamSpec.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a1.rst#2025-04-21_snippet_37

LANGUAGE: Python
CODE:
```
typing.List[P][int]
```

----------------------------------------

TITLE: Writer Protocol Example: Writing Binary Data to Stream
DESCRIPTION: This code defines a function that utilizes the `Writer` protocol for writing binary data to an output stream. It showcases type hinting for stream writing operations, specifically writing bytes to the stream.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/io.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
"def write_binary(writer: Writer[bytes]):
    writer.write(b"Hello world!\n")"
```

----------------------------------------

TITLE: Pickle Dump Function Definition
DESCRIPTION: Function that writes a pickled representation of an object to a file object. Takes parameters for protocol version, import fixes, and buffer callback handling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pickle.rst#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
dump(obj, file, protocol=None, *, fix_imports=True, buffer_callback=None)
```

----------------------------------------

TITLE: Enum Member Attribute Access in Python
DESCRIPTION: Demonstrates how to access the name and value attributes of enum members.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/enum.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> Color.BLUE.name
'BLUE'
>>> Color.RED.value
1
```

----------------------------------------

TITLE: Using run_coroutine_threadsafe() from external thread in Python
DESCRIPTION: Example showing how to submit a coroutine to an event loop from a different OS thread using run_coroutine_threadsafe(). This is useful for integrating asyncio with thread-based code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
def in_thread(loop: asyncio.AbstractEventLoop) -> None:
    # Run some blocking IO
    pathlib.Path("example.txt").write_text("hello world", encoding="utf8")

    # Create a coroutine
    coro = asyncio.sleep(1, result=3)

    # Submit the coroutine to a given loop
    future = asyncio.run_coroutine_threadsafe(coro, loop)

    # Wait for the result with an optional timeout argument
    assert future.result(timeout=2) == 3

async def amain() -> None:
    # Get the running loop
    loop = asyncio.get_running_loop()

    # Run something in a thread
    await asyncio.to_thread(in_thread, loop)
```

----------------------------------------

TITLE: Exception Handling Syntax Changes in Python 3.0
DESCRIPTION: Explains the change in exception handling syntax from using a comma to using 'as' when capturing exception objects. Shows examples of correct usage in both Python 2.6 and 3.0.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
try:
    ...
except (TypeError, ValueError):
    ...

try:
    ...
except TypeError as exc:
    ...
```

----------------------------------------

TITLE: Handling exceptions and timeouts with run_coroutine_threadsafe() in Python
DESCRIPTION: Example demonstrating how to handle exceptions and timeouts when using run_coroutine_threadsafe(). This pattern allows proper error handling and cancellation of tasks running in a different thread.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
try:
    result = future.result(timeout)
except TimeoutError:
    print('The coroutine took too long, cancelling the task...')
    future.cancel()
except Exception as exc:
    print(f'The coroutine raised an exception: {exc!r}')
else:
    print(f'The coroutine returned: {result!r}')
```

----------------------------------------

TITLE: Retrieving and Printing Messages using IMAP4 in Python
DESCRIPTION: This example demonstrates how to open a mailbox, retrieve all messages, and print them. It uses the imaplib module to connect to an IMAP server, login, select a mailbox, search for all messages, fetch each message's content, and then close the connection.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/imaplib.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
import getpass, imaplib

M = imaplib.IMAP4(host='example.org')
M.login(getpass.getuser(), getpass.getpass())
M.select()
typ, data = M.search(None, 'ALL')
for num in data[0].split():
    typ, data = M.fetch(num, '(RFC822)')
    print('Message %s\n%s\n' % (num, data[0][1]))
M.close()
M.logout()
```

----------------------------------------

TITLE: Using nargs='*' for Zero or More Arguments
DESCRIPTION: Shows how `nargs='*'` collects zero or more command-line arguments into a list for both optional and positional arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_43

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo', nargs='*')
>>> parser.add_argument('--bar', nargs='*')
>>> parser.add_argument('baz', nargs='*')
>>> parser.parse_args('a b --foo x y --bar 1 2'.split())
Namespace(bar=['1', '2'], baz=['a', 'b'], foo=['x', 'y'])
```

----------------------------------------

TITLE: Adding aclosing Context Manager for Async Generators in Python
DESCRIPTION: Adds contextlib.aclosing for deterministic cleanup of async generators, analogous to contextlib.closing for non-async generators.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a2.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
contextlib.aclosing
```

----------------------------------------

TITLE: Complex Argument Matching
DESCRIPTION: Shows how to implement custom matchers for complex object comparisons in mock assertions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_43

LANGUAGE: python
CODE:
```
class Foo:
    def __init__(self, a, b):
        self.a, self.b = a, b

def compare(self, other):
    if not type(self) == type(other):
        return False
    if self.a != other.a:
        return False
    if self.b != other.b:
        return False
    return True

class Matcher:
    def __init__(self, compare, some_obj):
        self.compare = compare
        self.some_obj = some_obj
    def __eq__(self, other):
        return self.compare(self.some_obj, other)

match_foo = Matcher(compare, Foo(1, 2))
mock.assert_called_with(match_foo)
```

----------------------------------------

TITLE: Specifying Custom dest for Arguments in Python argparse
DESCRIPTION: Explains how to use the 'dest' keyword argument in argparse.add_argument to explicitly set a custom attribute name for the parsed argument's value on the Namespace object, overriding the default inference behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_62

LANGUAGE: python
CODE:
```
parser = argparse.ArgumentParser()
parser.add_argument('--foo', dest='bar')
parser.parse_args('--foo XXX'.split())
```

----------------------------------------

TITLE: Asyncio Sleep Function Migration Example
DESCRIPTION: Example showing how to update asyncio code after removal of the loop parameter from high-level API. Demonstrates migration from explicitly passing loop parameter to using implicit current event loop.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_25

LANGUAGE: python
CODE:
```
async def foo(loop):
    await asyncio.sleep(1, loop=loop)
```

LANGUAGE: python
CODE:
```
async def foo():
    await asyncio.sleep(1)
```

----------------------------------------

TITLE: Loading Pickled Objects from Bytes in Python
DESCRIPTION: Function to reconstitute an object hierarchy from a pickled bytes representation. The protocol version is detected automatically. Takes parameters for controlling compatibility with Python 2 pickles and handling buffer objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pickle.rst#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
loads(data, /, *, fix_imports=True, encoding="ASCII", errors="strict", buffers=None)
```

----------------------------------------

TITLE: Iterating through indices with iter_index function in Python
DESCRIPTION: Demonstrates the iter_index function which yields indices where a target value appears in a sequence. It supports string, iterator, and list inputs with optional start and stop parameters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_67

LANGUAGE: python
CODE:
```
>>> list(iter_index('AABCADEAF', 'A'))
[0, 1, 4, 7]
>>> list(iter_index('AABCADEAF', 'B'))
[2]
>>> list(iter_index('AABCADEAF', 'X'))
[]
>>> list(iter_index('', 'X'))
[]
>>> list(iter_index('AABCADEAF', 'A', 1))
[1, 4, 7]
>>> list(iter_index(iter('AABCADEAF'), 'A', 1))
[1, 4, 7]
>>> list(iter_index('AABCADEAF', 'A', 2))
[4, 7]
>>> list(iter_index(iter('AABCADEAF'), 'A', 2))
[4, 7]
>>> list(iter_index('AABCADEAF', 'A', 10))
[]
>>> list(iter_index(iter('AABCADEAF'), 'A', 10))
[]
>>> list(iter_index('AABCADEAF', 'A', 1, 7))
[1, 4]
>>> list(iter_index(iter('AABCADEAF'), 'A', 1, 7))
[1, 4]
>>> # Verify that ValueErrors not swallowed (gh-107208)
>>> def assert_no_value(iterable, forbidden_value):
...     for item in iterable:
...         if item == forbidden_value:
...             raise ValueError
...         yield item
...
>>> list(iter_index(assert_no_value('AABCADEAF', 'B'), 'A'))
Traceback (most recent call last):
...
ValueError
>>> # Verify that both paths can find identical NaN values
>>> x = float('NaN')
>>> y = float('NaN')
>>> list(iter_index([0, x, x, y, 0], x))
[1, 2]
>>> list(iter_index(iter([0, x, x, y, 0]), x))
[1, 2]
>>> # Test list input. Lists do not support None for the stop argument
>>> list(iter_index(list('AABCADEAF'), 'A'))
[0, 1, 4, 7]
>>> # Verify that input is consumed lazily
>>> input_iterator = iter('AABCADEAF')
>>> output_iterator = iter_index(input_iterator, 'A')
>>> next(output_iterator)
0
>>> next(output_iterator)
1
>>> next(output_iterator)
4
>>> ''.join(input_iterator)
'DEAF'
```

----------------------------------------

TITLE: Using str.isidentifier() with keyword.iskeyword() in Python
DESCRIPTION: Demonstrates how to check if a string is a valid Python identifier and whether it's a reserved keyword. The example shows testing both a regular identifier and a Python keyword.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
from keyword import iskeyword

'hello'.isidentifier(), iskeyword('hello')
(True, False)
'def'.isidentifier(), iskeyword('def')
(True, True)
```

----------------------------------------

TITLE: Configuring ArgumentParser with Parent Parsers in Python
DESCRIPTION: Demonstrates how to create a parent `ArgumentParser` and reuse its arguments in multiple child parsers by passing the parent in the `parents` list. Note that `add_help=False` is typically used in parent parsers to avoid conflicts.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_7

LANGUAGE: Python
CODE:
```
>>> parent_parser = argparse.ArgumentParser(add_help=False)
>>> parent_parser.add_argument('--parent', type=int)

>>> foo_parser = argparse.ArgumentParser(parents=[parent_parser])
>>> foo_parser.add_argument('foo')
>>> foo_parser.parse_args(['--parent', '2', 'XXX'])
Namespace(foo='XXX', parent=2)

>>> bar_parser = argparse.ArgumentParser(parents=[parent_parser])
>>> bar_parser.add_argument('--bar')
>>> bar_parser.parse_args(['--bar', 'YYY'])
Namespace(bar='YYY', parent=None)
```

----------------------------------------

TITLE: Resource Sharing Pattern in Python Multiprocessing
DESCRIPTION: Shows the incorrect and correct ways to share resources between processes using global variables versus explicit parameter passing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_46

LANGUAGE: python
CODE:
```
from multiprocessing import Process, Lock

def f():
    ... do something using "lock" ...

if __name__ == '__main__':
    lock = Lock()
    for i in range(10):
        Process(target=f).start()
```

LANGUAGE: python
CODE:
```
from multiprocessing import Process, Lock

def f(l):
    ... do something using "l" ...

if __name__ == '__main__':
    lock = Lock()
    for i in range(10):
        Process(target=f, args=(lock,)).start()
```

----------------------------------------

TITLE: Subclassing Immutable Types in Python
DESCRIPTION: Shows how to properly subclass immutable types by overriding __new__ instead of __init__, with examples for customizing date, int, and str classes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_60

LANGUAGE: python
CODE:
```
from datetime import date

class FirstOfMonthDate(date):
    "Always choose the first day of the month"
    def __new__(cls, year, month, day):
        return super().__new__(cls, year, month, 1)

class NamedInt(int):
    "Allow text names for some numbers"
    xlat = {'zero': 0, 'one': 1, 'ten': 10}
    def __new__(cls, value):
        value = cls.xlat.get(value, value)
        return super().__new__(cls, value)

class TitleStr(str):
    "Convert str to name suitable for a URL path"
    def __new__(cls, s):
        s = s.lower().replace(' ', '-')
        s = ''.join([c for c in s if c.isalnum() or c == '-'])
        return super().__new__(cls, s)
```

----------------------------------------

TITLE: Declaring TypeVarTuple using PEP 695 Syntax
DESCRIPTION: Demonstrates declaring a TypeVarTuple within a type parameter list using the PEP 695 syntax with a single asterisk before the name.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_107

LANGUAGE: python
CODE:
```
def move_first_element_to_last[T, *Ts](tup: tuple[T, *Ts]) -> tuple[*Ts, T]:
    return (*tup[1:], tup[0])
```

----------------------------------------

TITLE: Replacing Smallest Item in Heap - Python
DESCRIPTION: The `heapreplace` function pops and returns the smallest item from the heap, simultaneously pushing a new item onto the heap. This operation is more efficient than calling `heappop` followed by `heappush`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/heapq.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
def heapreplace(heap, item):
    """
    Pop and return the smallest item from the *heap*, and also push the new *item*.
    The heap size doesn't change. If the heap is empty, :exc:`IndexError` is raised.
    """
```

----------------------------------------

TITLE: Using Unicode Escape Sequences in Python 3.12 F-string Expressions
DESCRIPTION: Illustrates the support for unicode escape sequences like `\N{...}` within f-string expressions in Python 3.12 (PEP 701), enabling the direct use of named unicode characters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_10

LANGUAGE: python
CODE:
```
print(f"This is the playlist: {"\N{BLACK HEART SUIT}".join(songs)}")
```

----------------------------------------

TITLE: Using Mathematical Functions with Python Decimal
DESCRIPTION: Demonstrates the use of mathematical methods available directly on `Decimal` objects, such as `sqrt()`, `exp()`, `ln()` (natural logarithm), and `log10()`. Note that the precision of the results is controlled by the current context.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_6

LANGUAGE: python
CODE:
```
>>> getcontext().prec = 28
>>> Decimal(2).sqrt()
Decimal('1.414213562373095048801688724')
>>> Decimal(1).exp()
Decimal('2.718281828459045235360287471')
>>> Decimal('10').ln()
Decimal('2.302585092994045684017991455')
>>> Decimal('10').log10()
Decimal('1')
```

----------------------------------------

TITLE: Add standard sort order to class by defining __lt__ method
DESCRIPTION: This code snippet shows how to add a standard sort order to a class by defining the `__lt__` method, which implements the less-than comparison. By defining this method, you can use the built-in `sorted` function on instances of the class.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/sorting.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
>>> class Student:
...   def __init__(self, name, grade, age):
...     self.name = name
...     self.grade = grade
...     self.age = age
...   def __repr__(self):
...     return repr((self.name, self.grade, self.age))

>>> student_objects = [
...        Student('john', 'A', 15),
...        Student('jane', 'B', 12),
...        Student('dave', 'B', 10),
... ]

>>> Student.__lt__ = lambda self, other: self.age < other.age
>>> sorted(student_objects)
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
```

----------------------------------------

TITLE: Handling Exceptions and Warnings with Assert Methods in Python unittest
DESCRIPTION: Assert methods like assertRaises and assertWarns in unittest check for exception or warning occurrences in test functions, supporting parameterization of exceptions and warnings along with optional regex matching. They facilitate validating expected exception messages and warning outputs in test scenarios.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_15

LANGUAGE: Python
CODE:
```
It is also possible to check the production of exceptions, warnings, using the following methods:

| Method                                                  | Checks that                          | New in     |
| :meth:`assertRaises(exc, fun, *args, **kwds)            | ``fun(*args, **kwds)`` raises *exc*  |            |
| :meth:`assertRaisesRegex(exc, r, fun, *args, **kwds)    | ``fun(*args, **kwds)`` raises *exc*  | 3.1        |
| :meth:`assertWarns(warn, fun, *args, **kwds)            | ``fun(*args, **kwds)`` raises *warn* | 3.2        |
| :meth:`assertWarnsRegex(warn, r, fun, *args, **kwds)    | ``fun(*args, **kwds)`` raises *warn* | 3.2        |

```

----------------------------------------

TITLE: Configuring Python Implementation-Specific Options
DESCRIPTION: Examples of using the -X option to enable various implementation-specific features in CPython, such as fault handling, memory tracing, import time profiling, and UTF-8 mode.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/cmdline.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
-X faulthandler
```

LANGUAGE: python
CODE:
```
-X showrefcount
```

LANGUAGE: python
CODE:
```
-X tracemalloc
```

LANGUAGE: python
CODE:
```
-X tracemalloc=NFRAME
```

LANGUAGE: python
CODE:
```
-X int_max_str_digits
```

LANGUAGE: python
CODE:
```
-X importtime
```

LANGUAGE: python
CODE:
```
python3 -X importtime -c 'import asyncio'
```

LANGUAGE: python
CODE:
```
-X dev
```

LANGUAGE: python
CODE:
```
-X utf8
```

LANGUAGE: python
CODE:
```
-X utf8=0
```

LANGUAGE: python
CODE:
```
-X pycache_prefix=PATH
```

LANGUAGE: python
CODE:
```
-X warn_default_encoding
```

LANGUAGE: python
CODE:
```
-X no_debug_ranges
```

LANGUAGE: python
CODE:
```
-X frozen_modules
```

----------------------------------------

TITLE: Simulating Random Scenarios with Python's Random Module
DESCRIPTION: Examples of simulating real-world scenarios using various random functions, including weighted sampling with replacement, sampling without replacement, and estimating probabilities through simulation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/random.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> # Six roulette wheel spins (weighted sampling with replacement)
>>> choices(['red', 'black', 'green'], [18, 18, 2], k=6)
['red', 'green', 'black', 'black', 'red', 'black']

>>> # Deal 20 cards without replacement from a deck
>>> # of 52 playing cards, and determine the proportion of cards
>>> # with a ten-value:  ten, jack, queen, or king.
>>> deal = sample(['tens', 'low cards'], counts=[16, 36], k=20)
>>> deal.count('tens') / 20
0.15

>>> # Estimate the probability of getting 5 or more heads from 7 spins
>>> # of a biased coin that settles on heads 60% of the time.
>>> sum(binomialvariate(n=7, p=0.6) >= 5 for i in range(10_000)) / 10_000
0.4169

>>> # Probability of the median of 5 samples being in middle two quartiles
>>> def trial():
...     return 2_500 <= sorted(choices(range(10_000), k=5))[2] < 7_500
...
>>> sum(trial() for i in range(10_000)) / 10_000
0.7958
```

----------------------------------------

TITLE: Matching Patterns with Start of Line in Python
DESCRIPTION: Demonstrates using the `^` metacharacter with the `re` module to match patterns at the start of a line or string, contingent on the `MULTILINE` flag. It requires the `re` library and matches patterns that begin with the specified sequence. Outputs a match object if successful, otherwise `None`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
print(re.search('^From', 'From Here to Eternity'))  #doctest: +ELLIPSIS
print(re.search('^From', 'Reciting From Memory'))
```

----------------------------------------

TITLE: Implementing combinations function in Python
DESCRIPTION: Equivalent implementation of the combinations function that returns r-length subsequences of elements from the input iterable, emitted in lexicographic order. Elements are treated as unique based on position, not value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
def combinations(iterable, r):
    # combinations('ABCD', 2) → AB AC AD BC BD CD
    # combinations(range(4), 3) → 012 013 023 123

    pool = tuple(iterable)
    n = len(pool)
    if r > n:
        return
    indices = list(range(r))

    yield tuple(pool[i] for i in indices)
    while True:
        for i in reversed(range(r)):
            if indices[i] != i + n - r:
                break
        else:
            return
        indices[i] += 1
        for j in range(i+1, r):
            indices[j] = indices[j-1] + 1
        yield tuple(pool[i] for i in indices)
```

----------------------------------------

TITLE: Dataclass Inheritance with Post-Init
DESCRIPTION: Example showing how to properly initialize a parent class from a dataclass using __post_init__ method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dataclasses.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
class Rectangle:
    def __init__(self, height, width):
        self.height = height
        self.width = width

@dataclass
class Square(Rectangle):
    side: float

    def __post_init__(self):
        super().__init__(self.side, self.side)
```

----------------------------------------

TITLE: Creating a Non-Blocking TCP Socket - Python
DESCRIPTION: This snippet demonstrates how to create a new socket object in Python. It specifies the IPv4 address family (`socket.AF_INET`) and the TCP stream socket type (`socket.SOCK_STREAM`). The `SOCK_NONBLOCK` flag is included using a bitwise OR, attempting to make the socket non-blocking upon creation if the operating system supports it. This requires importing the `socket` module. The output is a socket object configured for IPv4 TCP communication with the non-blocking flag applied.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/socket.rst#_snippet_2

LANGUAGE: Python
CODE:
```
sock = socket.socket(
    socket.AF_INET,
    socket.SOCK_STREAM | socket.SOCK_NONBLOCK)
```

----------------------------------------

TITLE: Parsing Binary Addition Operation into AST (Python)
DESCRIPTION: Shows the AST structure for a binary addition operation. Parsing `x + y` results in a `BinOp` node specifying the left operand (`x`), the `Add` operator, and the right operand (`y`).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_17

LANGUAGE: python
CODE:
```
print(ast.dump(ast.parse('x + y', mode='eval'), indent=4))
```

----------------------------------------

TITLE: XPath Examples for XML Parsing in Python
DESCRIPTION: Provides examples of XPath expressions used with ElementTree to locate elements in an XML tree. These examples demonstrate various XPath capabilities, including selecting child elements, grandchildren, and elements with specific attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
import xml.etree.ElementTree as ET

root = ET.fromstring(countrydata)

# Top-level elements
root.findall(".")

# All 'neighbor' grand-children of 'country' children of the top-level
# elements
root.findall("./country/neighbor")

# Nodes with name='Singapore' that have a 'year' child
root.findall(".//year/..[@name='Singapore']")

# 'year' nodes that are children of nodes with name='Singapore'
root.findall(".//*[@name='Singapore']/year")

# All 'neighbor' nodes that are the second child of their parent
root.findall(".//neighbor[2]")

# All dublin-core "title" tags in the document
root.findall(".//{http://purl.org/dc/elements/1.1/}title")
```

----------------------------------------

TITLE: Using Built-in Types as Converters in Python argparse
DESCRIPTION: Illustrates how to use standard Python types and functions like `int`, `float`, `ascii`, `ord`, and `pathlib.Path` directly as the `type` argument for argument conversion.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_50

LANGUAGE: Python
CODE:
```
import argparse
import pathlib

parser = argparse.ArgumentParser()
parser.add_argument('count', type=int)
parser.add_argument('distance', type=float)
parser.add_argument('street', type=ascii)
parser.add_argument('code_point', type=ord)
parser.add_argument('datapath', type=pathlib.Path)
```

----------------------------------------

TITLE: Comparing lstrip vs removeprefix Methods in Python bytes Objects
DESCRIPTION: Demonstrates the difference between lstrip() which removes any combination of specified characters, and removeprefix() which removes a specific prefix string as a whole from a bytes object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_47

LANGUAGE: python
CODE:
```
>>> b'Arthur: three!'.lstrip(b'Arthur: ')
b'ee!'
>>> b'Arthur: three!'.removeprefix(b'Arthur: ')
b'three!'
```

----------------------------------------

TITLE: Using runtime_checkable Protocol with isinstance (Closable)
DESCRIPTION: Applies the `@runtime_checkable` decorator to a protocol class `Closable` and demonstrates how it can be used with the `isinstance()` function to check if an object structurally matches the protocol by having the required `close` method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_145

LANGUAGE: python
CODE:
```
@runtime_checkable
class Closable(Protocol):
    def close(self): ...

assert isinstance(open('/some/file'), Closable)
```

----------------------------------------

TITLE: ThreadPoolExecutor Deadlock Example
DESCRIPTION: Demonstrates how deadlocks can occur when Futures wait on each other's results.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/concurrent.futures.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
import time
def wait_on_b():
    time.sleep(5)
    print(b.result())  # b will never complete because it is waiting on a.
    return 5

def wait_on_a():
    time.sleep(5)
    print(a.result())  # a will never complete because it is waiting on b.
    return 6


executor = ThreadPoolExecutor(max_workers=2)
a = executor.submit(wait_on_b)
b = executor.submit(wait_on_a)
```

----------------------------------------

TITLE: Creating MIMEBase Objects in Python
DESCRIPTION: Creates a base class for MIME-specific message objects. It adds Content-Type and MIME-Version headers. Takes maintype, subtype, and optional parameters for the Content-Type header.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.mime.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
MIMEBase(_maintype, _subtype, *, policy=compat32, **_params)
```

----------------------------------------

TITLE: Logging Exceptions with Exception Instances in Python
DESCRIPTION: Shows how logging methods now accept exception instances directly as the exc_info argument, in addition to boolean values and exception tuples.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
>>> import logging
>>> try:
...     1/0
... except ZeroDivisionError as ex:
...     logging.error('exception', exc_info=ex)
ERROR:root:exception
```

----------------------------------------

TITLE: Slicing Iterators with itertools.islice
DESCRIPTION: Demonstrates how to slice iterators using itertools.islice() with various start, stop, and step parameters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
itertools.islice(range(10), 8) =>
  0, 1, 2, 3, 4, 5, 6, 7
itertools.islice(range(10), 2, 8) =>
  2, 3, 4, 5, 6, 7
itertools.islice(range(10), 2, 8, 2) =>
  2, 4, 6
```

----------------------------------------

TITLE: Power Calculation with Dynamic Verbosity
DESCRIPTION: Extends the previous example to calculate powers with configurable base and exponent, supporting multiple verbosity levels
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/argparse.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("x", type=int, help="the base")
parser.add_argument("y", type=int, help="the exponent")
parser.add_argument("-v", "--verbosity", action="count", default=0)
args = parser.parse_args()
answer = args.x**args.y
if args.verbosity >= 2:
    print(f"{args.x} to the power {args.y} equals {answer}")
elif args.verbosity >= 1:
    print(f"{args.x}^{args.y} == {answer}")
else:
    print(answer)
```

----------------------------------------

TITLE: Process-Safe Shared Memory Example in Python
DESCRIPTION: Example showing how to use shared ctypes objects between processes. Demonstrates creating and modifying various types of shared memory objects including integers, doubles, strings and custom structures using the multiprocessing.sharedctypes module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_31

LANGUAGE: python
CODE:
```
from multiprocessing import Process, Lock
from multiprocessing.sharedctypes import Value, Array
from ctypes import Structure, c_double

class Point(Structure):
    _fields_ = [('x', c_double), ('y', c_double)]

def modify(n, x, s, A):
    n.value **= 2
    x.value **= 2
    s.value = s.value.upper()
    for a in A:
        a.x **= 2
        a.y **= 2

if __name__ == '__main__':
    lock = Lock()

    n = Value('i', 7)
    x = Value(c_double, 1.0/3.0, lock=False)
    s = Array('c', b'hello world', lock=lock)
    A = Array(Point, [(1.875,-6.25), (-5.75,2.0), (2.375,9.5)], lock=lock)

    p = Process(target=modify, args=(n, x, s, A))
    p.start()
    p.join()

    print(n.value)
    print(x.value)
    print(s.value)
    print([(a.x, a.y) for a in A])
```

----------------------------------------

TITLE: Handling Invalid Arguments with argparse in Python
DESCRIPTION: Shows examples of how `parse_args` handles common errors like invalid option types, unrecognized options, and incorrect numbers of positional arguments, demonstrating the error messages and usage output.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_66

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser(prog='PROG')
>>> parser.add_argument('--foo', type=int)
>>> parser.add_argument('bar', nargs='?')

>>> # invalid type
>>> parser.parse_args(['--foo', 'spam'])
usage: PROG [-h] [--foo FOO] [bar]
PROG: error: argument --foo: invalid int value: 'spam'

>>> # invalid option
>>> parser.parse_args(['--bar'])
usage: PROG [-h] [--foo FOO] [bar]
PROG: error: no such option: --bar

>>> # wrong number of arguments
>>> parser.parse_args(['spam', 'badger'])
usage: PROG [-h] [--foo FOO] [bar]
PROG: error: extra arguments found: badger
```

----------------------------------------

TITLE: Adding bytearray.resize Method
DESCRIPTION: Adds a new method to efficiently resize bytearray objects in place without creating new objects.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.14.0a5.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
Add :meth:`bytearray.resize` method so :class:`bytearray` can be efficiently
resized in place.
```

----------------------------------------

TITLE: Using assertRaisesRegex to Test Exception Messages in Python
DESCRIPTION: Shows how to use assertRaisesRegex to verify both that an exception is raised and that its message matches a specific pattern. The method can be used directly with callable arguments or as a context manager.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
self.assertRaisesRegex(ValueError, "invalid literal for.*XYZ'$",
                       int, 'XYZ')
```

LANGUAGE: python
CODE:
```
with self.assertRaisesRegex(ValueError, 'literal'):
   int('XYZ')
```

----------------------------------------

TITLE: Listing Files with .txt Extension Using fnmatch in Python
DESCRIPTION: This snippet demonstrates how to use the fnmatch module to print all file names in the current directory with the .txt extension. It combines the os.listdir() function with fnmatch.fnmatch() to filter files based on a pattern.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/fnmatch.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import fnmatch
import os

for file in os.listdir('.'):
    if fnmatch.fnmatch(file, '*.txt'):
        print(file)
```

----------------------------------------

TITLE: Defining Type Alias with TypeAlias Annotation in Python
DESCRIPTION: Demonstrates using the `TypeAlias` annotation from the `typing` module to explicitly mark a variable assignment as a type alias.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import TypeAlias

Vector: TypeAlias = list[float]
```

----------------------------------------

TITLE: Using strftime Function in Python
DESCRIPTION: Converts a time tuple or struct_time to a string according to a format specification. If no time tuple is provided, the current time as returned by localtime() is used.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/time.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
strftime(format[, t])
```

----------------------------------------

TITLE: User Home Directory Expansion with os.path
DESCRIPTION: The expanduser function replaces initial '~' or '~user' components with home directories on Unix and Windows, using environment variables or user directories. It handles path-like objects starting with version 3.6.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
def expanduser(path):
    return os.path.expanduser(path)
```

----------------------------------------

TITLE: SSL Server Client Connection Handler in Python
DESCRIPTION: Implements the main server loop for handling client connections with SSL wrapping and proper connection cleanup.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_35

LANGUAGE: python
CODE:
```
while True:
    newsocket, fromaddr = bindsocket.accept()
    connstream = context.wrap_socket(newsocket, server_side=True)
    try:
        deal_with_client(connstream)
    finally:
        connstream.shutdown(socket.SHUT_RDWR)
        connstream.close()
```

----------------------------------------

TITLE: Defining Type Predicates with TypeIs in Python
DESCRIPTION: Shows how to define a user-defined type predicate function using `typing.TypeIs`. It illustrates how `TypeIs[NarrowedType]` in the return annotation signals to type checkers that if the function returns `True`, the argument's type is narrowed to the intersection of its original type and `NarrowedType`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_88

LANGUAGE: python
CODE:
```
from typing import assert_type, final, TypeIs

class Parent: pass
class Child(Parent): pass
@final
class Unrelated: pass

def is_parent(val: object) -> TypeIs[Parent]:
    return isinstance(val, Parent)

def run(arg: Child | Unrelated):
    if is_parent(arg):
        # Type of ``arg`` is narrowed to the intersection
        # of ``Parent`` and ``Child``, which is equivalent to
        # ``Child``.
        assert_type(arg, Child)
    else:
        # Type of ``arg`` is narrowed to exclude ``Parent``,
        # so only ``Unrelated`` is left.
        assert_type(arg, Unrelated)
```

----------------------------------------

TITLE: Demonstrating Basic Floating-Point Display in Python
DESCRIPTION: Shows how Python manages floating-point display by rounding the true decimal value of binary approximations for better readability.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/floatingpoint.rst#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> 1 / 10
0.1
```

----------------------------------------

TITLE: Demonstrating List Operations with operator.itemgetter
DESCRIPTION: Shows usage of operator.itemgetter() for sorting and mapping operations on a list of tuples.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
map(operator.itemgetter(1), L)
sorted(L, key=operator.itemgetter(1))
```

----------------------------------------

TITLE: Calculating Cartesian Product
DESCRIPTION: The product function computes the Cartesian product of the input iterables. It can also take an optional repeat argument to specify repetitions of the input.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
.. function:: product(*iterables, repeat=1)

   `Cartesian product <https://en.wikipedia.org/wiki/Cartesian_product>`_
   of the input iterables.
```

----------------------------------------

TITLE: Safe representation of objects (saferepr function) - Python
DESCRIPTION: The saferepr function provides a string representation of an object while safeguarding against recursion, ensuring that recursive entries are represented appropriately.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pprint.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
def saferepr(object):
    Return a string representation of *object*, protected against recursion in some common data structures.
```

----------------------------------------

TITLE: Mocking Asynchronous Context Managers in Python
DESCRIPTION: Demonstrates how to mock asynchronous context managers using MagicMock by configuring the __aenter__ and __aexit__ methods. The example shows how to verify these methods are called correctly.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
class AsyncContextManager:
    async def __aenter__(self):
        return self
    async def __aexit__(self, exc_type, exc, tb):
        pass

mock_instance = MagicMock(AsyncContextManager())  # AsyncMock also works here
async def main():
    async with mock_instance as result:
        pass

asyncio.run(main())
mock_instance.__aenter__.assert_awaited_once()
mock_instance.__aexit__.assert_awaited_once()
```

----------------------------------------

TITLE: Parse Known Arguments - Python argparse
DESCRIPTION: Demonstrates using parse_known_args to parse a subset of arguments, returning a tuple containing the populated namespace and a list of remaining, unparsed argument strings. Useful for passing arguments to other programs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_94

LANGUAGE: python
CODE:
```
parser = argparse.ArgumentParser()
parser.add_argument('--foo', action='store_true')
parser.add_argument('bar')
parser.parse_known_args(['--foo', '--badger', 'BAR', 'spam'])
```

----------------------------------------

TITLE: Pdb alias to print self instance variables (ps)
DESCRIPTION: Defines a Pdb alias `ps` that is a shortcut for `pi self`, useful for printing the instance variables of the `self` object in the current context.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_23

LANGUAGE: none
CODE:
```
alias ps pi self
```

----------------------------------------

TITLE: Calling Object Methods from C with PyObject_CallMethod
DESCRIPTION: Demonstrates how to call an object's method from C using PyObject_CallMethod. The example shows calling a file object's 'seek' method with position and whence arguments, including proper error handling and reference counting.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/extending.rst#2025-04-21_snippet_1

LANGUAGE: c
CODE:
```
res = PyObject_CallMethod(f, "seek", "(ii)", 10, 0);
if (res == NULL) {
        ... an exception occurred ...
}
else {
        Py_DECREF(res);
}
```

----------------------------------------

TITLE: Formatting Messages with Placeholders in Python
DESCRIPTION: This snippet demonstrates how to format strings with placeholders using the `__()` syntax for localization support. It shows usage with the print function and illustrates logging with formatted messages.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_26

LANGUAGE: Python
CODE:
```
>>> print(__('Message with {0} {name}', 2, name='placeholders'))
Message with 2 placeholders
>>> class Point: pass
...
>>> p = Point()
>>> p.x = 0.5
>>> p.y = 0.5
>>> print(__('Message with coordinates: ({point.x:.2f}, {point.y:.2f})',
...       point=p))
Message with coordinates: (0.50, 0.50)
>>> from wherever import DollarMessage as __
>>> print(__('Message with $num $what', num=2, what='placeholders'))
Message with 2 placeholders
```

----------------------------------------

TITLE: Context Manager Mocking with Magic Methods
DESCRIPTION: Demonstrates how to mock objects used as context managers by implementing __enter__ and __exit__ magic methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_51

LANGUAGE: python
CODE:
```
>>> mock = Mock()
>>> mock.__enter__ = Mock(return_value='foo')
>>> mock.__exit__ = Mock(return_value=False)
>>> with mock as m:
...     assert m == 'foo'
...
>>> mock.__enter__.assert_called_with()
>>> mock.__exit__.assert_called_with(None, None, None)
```

----------------------------------------

TITLE: Utilizing InterpreterPoolExecutor in Python
DESCRIPTION: This code snippet defines a class InterpreterPoolExecutor that extends ThreadPoolExecutor to run tasks asynchronously in separate Python interpreters, thus achieving true multi-core parallelism. Each thread in the pool operates in an isolated interpreter, with support for initializers serialized via pickle.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/concurrent.futures.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
class InterpreterPoolExecutor(max_workers=None, thread_name_prefix='', initializer=None, initargs=(), shared=None):
   A :class:`ThreadPoolExecutor` subclass that executes calls asynchronously
   using a pool of at most *max_workers* threads.  Each thread runs
   tasks in its own interpreter.  The worker interpreters are isolated
   from each other, which means each has its own runtime state and that
   they can't share any mutable objects or other data.  Each interpreter
   has its own :term:`Global Interpreter Lock <global interpreter lock>`,
   which means code run with this executor has true multi-core parallelism.

   The optional *initializer* and *initargs* arguments have the same
   meaning as for :class:`!ThreadPoolExecutor`: the initializer is run
   when each worker is created, though in this case it is run in
   the worker's interpreter.  The executor serializes the *initializer*
   and *initargs* using :mod:`pickle` when sending them to the worker's
   interpreter.

   The optional *shared* argument is a :class:`dict` of objects that all
   interpreters in the pool share.  The *shared* items are added to each
   interpreter's ``__main__`` module.  Not all objects are shareable.
   Shareable objects include the builtin singletons, :class:`str`
   and :class:`bytes`, and :class:`memoryview`.  See :pep:`734`
   for more info.
```

----------------------------------------

TITLE: Using assert_awaited with AsyncMock
DESCRIPTION: Shows how to use assert_awaited to verify that an AsyncMock was awaited at least once, demonstrating the distinction between calling a mock and awaiting it.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
>>> mock = AsyncMock()
>>> async def main(coroutine_mock):
...     await coroutine_mock
...
>>> coroutine_mock = mock()
>>> mock.called
True
>>> mock.assert_awaited()
Traceback (most recent call last):
...
AssertionError: Expected mock to have been awaited.
>>> asyncio.run(main(coroutine_mock))
>>> mock.assert_awaited()
```

----------------------------------------

TITLE: Pretty Printing Complex Data Structures with pprint in Python
DESCRIPTION: Shows how to use the pprint module to print both built-in and user-defined objects in a more readable format. It adds line breaks and indentation to clearly reveal data structure when the result is longer than one line.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib2.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> import pprint
>>> t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta',
...     'yellow'], 'blue']]]
...
>>> pprint.pprint(t, width=30)
[[[['black', 'cyan'],
   'white',
   ['green', 'red']],
  [['magenta', 'yellow'],
   'blue']]]
```

----------------------------------------

TITLE: Key Derivation with PBKDF2 HMAC
DESCRIPTION: This snippet demonstrates the usage of `hashlib.pbkdf2_hmac` for key derivation using the PKCS#5 standard. It specifies the hash algorithm ('sha256'), password, salt, and iteration count.  The derived key's hexadecimal representation is then printed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/hashlib.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
>>> from hashlib import pbkdf2_hmac
>>> our_app_iters = 500_000  # Application specific, read above.
>>> dk = pbkdf2_hmac('sha256', b'password', b'bad salt' * 2, our_app_iters)
>>> dk.hex()
'15530bba69924174860db778f2c6f8104d3aaf9d26241840c8c4a641c8d000a9'

```

----------------------------------------

TITLE: Power Operation Examples in Python
DESCRIPTION: Demonstrates the behavior of Python's power operator (**) with different numeric types, including negative exponents and special cases.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/expressions.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
10**2    # Returns 100
10**-2   # Returns 0.01
0.0**-2  # Raises ZeroDivisionError
```

----------------------------------------

TITLE: Mock Initialization with Side Effect and Return Value - Python
DESCRIPTION: Demonstrates setting side_effect and return_value during mock initialization, confirming that side_effect takes precedence.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_69

LANGUAGE: python
CODE:
```
>>> order_mock = Mock(spec=Order, wraps=Order,
...                   **{"get_value.side_effect": ["first"],
...                      "get_value.return_value": "second"}
...                   )
...
>>> order_mock.get_value()
'first'
>>> order_mock.get_value.side_effect = None
>>> order_mock.get_value()
'second'
>>> order_mock.get_value.return_value = DEFAULT
>>> order_mock.get_value()
'third'
```

----------------------------------------

TITLE: Duplicate-Free Enum Implementation
DESCRIPTION: Enum implementation that prevents creation of alias members by raising an error on duplicate values
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_29

LANGUAGE: python
CODE:
```
class DuplicateFreeEnum(Enum):
    def __init__(self, *args):
        cls = self.__class__
        if any(self.value == e.value for e in cls):
            a = self.name
            e = cls(self.value).name
            raise ValueError(
                "aliases not allowed in DuplicateFreeEnum:  %r --> %r"
                % (a, e))
```

----------------------------------------

TITLE: Demonstrating Python Chained Comparisons
DESCRIPTION: Shows how Python handles chained comparison operations, where x < y <= z is evaluated as x < y and y <= z, with y being evaluated only once.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/expressions.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
x < y <= z
```

----------------------------------------

TITLE: Retrieving proxy settings in Python
DESCRIPTION: This helper function returns a dictionary of scheme to proxy server URL mappings. It scans environment variables and system configurations to determine proxy settings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
getproxies()
```

----------------------------------------

TITLE: Initializing Deque Objects in Python
DESCRIPTION: This snippet shows how to initialize a deque object from the collections module. It explains that deques are double-ended queues that support efficient appends and pops from both ends, with optional maximum length constraints.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
deque([iterable, [maxlen]])
```

----------------------------------------

TITLE: Using Backreferences in Regular Expressions in Python
DESCRIPTION: Explains how to use backreferences with Python's `re` module to match the same content as captured in an earlier group. Requires the `re` library. Accepts strings with repeated words, such as 'the the', and returns a match object for such duplicates.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_15

LANGUAGE: Python
CODE:
```
p = re.compile(r'\b(\w+)\s+\1\b')
p.search('Paris in the the spring').group()
```

----------------------------------------

TITLE: Using Context for Multiple Start Methods in Python
DESCRIPTION: Shows how to use get_context() to obtain a context object, allowing the use of multiple start methods in the same program. It creates a process using the 'spawn' context and demonstrates message passing through a queue.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
import multiprocessing as mp

def foo(q):
    q.put('hello')

if __name__ == '__main__':
    ctx = mp.get_context('spawn')
    q = ctx.Queue()
    p = ctx.Process(target=foo, args=(q,))
    p.start()
    print(q.get())
    p.join()
```

----------------------------------------

TITLE: Filtering Unique Elements with Unique_everseen Function in Python
DESCRIPTION: Demonstrates filtering of unique elements from an input using unique_everseen. Highlights case-insensitive filtering and lazy evaluation with iterators.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_83

LANGUAGE: Python
CODE:
```
>>> list(unique_everseen('AAAABBBCCDAABBB'))
['A', 'B', 'C', 'D']
>>> list(unique_everseen('ABBCcAD', str.casefold))
['A', 'B', 'C', 'D']
>>> list(unique_everseen('ABBcCAD', str.casefold))
['A', 'B', 'c', 'D']
>>> # Verify that the input is consumed lazily
>>> input_iterator = iter('AAAABBBCCDAABBB')
>>> output_iterator = unique_everseen(input_iterator)
>>> next(output_iterator)
'A'
>>> ''.join(input_iterator)
'AAABBBCCDAABBB'
```

----------------------------------------

TITLE: Check Buffer Contiguity in C
DESCRIPTION: The function 'PyBuffer_IsContiguous' checks if a buffer's memory is contiguous in C or Fortran style, based on the specified order ('C', 'F', or 'A'). It returns 1 if contiguous, 0 otherwise.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/buffer.rst#2025-04-21_snippet_5

LANGUAGE: C
CODE:
```
int PyBuffer_IsContiguous(const Py_buffer *view, char order)
```

----------------------------------------

TITLE: Using wait() for Multiple Process Communication in Python
DESCRIPTION: This example demonstrates using multiprocessing.connection.wait() to handle messages from multiple processes simultaneously. It creates several child processes, each sending messages through a pipe, and the main process waits for and processes these messages.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_44

LANGUAGE: python
CODE:
```
from multiprocessing import Process, Pipe, current_process
from multiprocessing.connection import wait

def foo(w):
    for i in range(10):
        w.send((i, current_process().name))
    w.close()

if __name__ == '__main__':
    readers = []

    for i in range(4):
        r, w = Pipe(duplex=False)
        readers.append(r)
        p = Process(target=foo, args=(w,))
        p.start()
        # We close the writable end of the pipe now to be sure that
        # p is the only process which owns a handle for it.  This
        # ensures that when p closes its handle for the writable end,
        # wait() will promptly report the readable end as being ready.
        w.close()

    while readers:
        for r in wait(readers):
            try:
                msg = r.recv()
            except EOFError:
                readers.remove(r)
            else:
                print(msg)
```

----------------------------------------

TITLE: Removing Elements from XML in Python
DESCRIPTION: Demonstrates how to remove elements from an XML tree based on a condition, specifically removing countries with a rank higher than 50.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
>>> for country in root.findall('country'):
...     # using root.findall() to avoid removal during traversal
...     rank = int(country.find('rank').text)
...     if rank > 50:
...         root.remove(country)
...
>>> tree.write('output.xml')
```

----------------------------------------

TITLE: Generating Power Set in Python
DESCRIPTION: The powerset function generates all subsequences of the given iterable, from shortest to longest. It uses combinations from itertools to create the subsequences.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_48

LANGUAGE: python
CODE:
```
def powerset(iterable):
    "Subsequences of the iterable from shortest to longest."
    # powerset([1,2,3]) → () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))
```

----------------------------------------

TITLE: Finding Elements with iter() Method in Python
DESCRIPTION: Shows how to use the iter() method to recursively search through an XML tree for elements with a specific tag name.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> for neighbor in root.iter('neighbor'):
...     print(neighbor.attrib)
...
{'name': 'Austria', 'direction': 'E'}
{'name': 'Switzerland', 'direction': 'W'}
{'name': 'Malaysia', 'direction': 'N'}
{'name': 'Costa Rica', 'direction': 'W'}
{'name': 'Colombia', 'direction': 'E'}
```

----------------------------------------

TITLE: Defining StrEnum Class - Python
DESCRIPTION: This snippet explains the definition of StrEnum, where Enum members are strings compatible with string operations, detailing handling for cases expecting exact string types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/enum.rst#2025-04-21_snippet_13

LANGUAGE: Python
CODE:
```
``StrEnum`` is the same as :class:`Enum`, but its members are also strings and can be used
   in most of the same places that a string can be used.
```

----------------------------------------

TITLE: Error Handling in asyncio Event Loop - Python
DESCRIPTION: These methods provide a way to customize exception handling in the asyncio event loop. Users can set their own exception handler, retrieve the current handler, and call the default handler when needed. This flexibility is essential for managing errors gracefully in asynchronous applications.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
.. method:: loop.set_exception_handler(handler)
   Set *handler* as the new event loop exception handler.

   If *handler* is ``None``, the default exception handler will
   be set.  Otherwise, *handler* must be a callable with the signature
   matching ``(loop, context)``, where ``loop``
   is a reference to the active event loop, and ``context``
   is a ``dict`` object containing the details of the exception
   (see :meth:`call_exception_handler` documentation for details
   about context).

   If the handler is called on behalf of a :class:`~asyncio.Task` or
   :class:`~asyncio.Handle`, it is run in the
   :class:`contextvars.Context` of that task or callback handle.

   .. versionchanged:: 3.12

      The handler may be called in the :class:`~contextvars.Context`
      of the task or handle where the exception originated.

.. method:: loop.get_exception_handler()

   Return the current exception handler, or ``None`` if no custom
   exception handler was set.

   .. versionadded:: 3.5.2

.. method:: loop.default_exception_handler(context)

   Default exception handler.

   This is called when an exception occurs and no exception
   handler is set. This can be called by a custom exception
   handler that wants to defer to the default handler behavior.

   *context* parameter has the same meaning as in
   :meth:`call_exception_handler`.

.. method:: loop.call_exception_handler(context)

   Call the current event loop exception handler.
```

----------------------------------------

TITLE: Using asyncio in the REPL
DESCRIPTION: This code snippet provides instructions for using asyncio in the Python REPL (Read-Eval-Print Loop). It illustrates how to invoke the asyncio REPL, where users can directly use the 'await' keyword instead of calling 'asyncio.run()'. This provides a quick way to experiment with asynchronous code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
$ python -m asyncio
asyncio REPL ...
Use "await" directly instead of "asyncio.run()".
Type "help", "copyright", "credits" or "license" for more information.
>>> import asyncio
>>> await asyncio.sleep(10, result='hello')
'hello'
```

----------------------------------------

TITLE: Marking Arguments as Deprecated in Python argparse
DESCRIPTION: Demonstrates how to use the 'deprecated=True' keyword argument with argparse.add_argument to mark an option as deprecated. When the deprecated option is used on the command line, argparse will print a warning message to sys.stderr.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_63

LANGUAGE: python
CODE:
```
import argparse
parser = argparse.ArgumentParser(prog='snake.py')
parser.add_argument('--legs', default=0, type=int, deprecated=True)
parser.parse_args([])
parser.parse_args(['--legs', '4'])  # doctest: +SKIP
```

----------------------------------------

TITLE: Calculating Base-2 Logarithm in Python
DESCRIPTION: This function calculates the base-2 logarithm of x, generally offering higher accuracy compared to log(x, 2). It is crucial for binary logarithmic calculations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/math.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
.. function:: log2(x)

   Return the base-2 logarithm of *x*. This is usually more accurate than
   ``log(x, 2)``.
```

----------------------------------------

TITLE: Using unittest.TestCase.subTest for Dynamic Subtests in Python
DESCRIPTION: Demonstrates how to use the new subTest method of TestCase to create dynamic subtests within a single test method. This allows multiple test cases to be generated in a loop, with each subtest independently identified and counted, even if some fail.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.4.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
class NumbersTest(unittest.TestCase):
    def test_even(self):
        for i in range(6):
            with self.subTest(i=i):
                self.assertEqual(i % 2, 0)
```

----------------------------------------

TITLE: Handling Unicode Filenames in Python
DESCRIPTION: This code snippet illustrates how to handle Unicode filenames in Python. It showcases how to open a file using a Unicode filename and how functions in the os module can process such filenames automatically.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/unicode.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
filename = 'filename\u4500abc'
with open(filename, 'w') as f:
    f.write('blah\n')

import os
print(os.listdir(b'.'))
print(os.listdir('.'))
```

----------------------------------------

TITLE: Using b64decode in Python
DESCRIPTION: Decodes Base64 encoded bytes-like objects or ASCII strings and returns the decoded bytes. Supports alternative alphabets and validation of input characters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/base64.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
b64decode(s, altchars=None, validate=False)
```

----------------------------------------

TITLE: Basic FTP Client Session in Python
DESCRIPTION: A complete example session demonstrating how to connect to an FTP server, log in, list directory contents, download a file, and close the connection using Python's ftplib module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ftplib.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> from ftplib import FTP
>>> ftp = FTP('ftp.us.debian.org')  # connect to host, default port
>>> ftp.login()                     # user anonymous, passwd anonymous@
'230 Login successful.'
>>> ftp.cwd('debian')               # change into "debian" directory
'250 Directory successfully changed.'
>>> ftp.retrlines('LIST')           # list directory contents
-rw-rw-r--    1 1176     1176         1063 Jun 15 10:18 README
...
drwxr-sr-x    5 1176     1176         4096 Dec 19  2000 pool
drwxr-sr-x    4 1176     1176         4096 Nov 17  2008 project
drwxr-xr-x    3 1176     1176         4096 Oct 10  2012 tools
'226 Directory send OK.'
>>> with open('README', 'wb') as fp:
>>>     ftp.retrbinary('RETR README', fp.write)
'226 Transfer complete.'
>>> ftp.quit()
'221 Goodbye.'
```

----------------------------------------

TITLE: Accessing Metadata via Distribution Instance - Python
DESCRIPTION: Demonstrates accessing specific fields from the package's core metadata using the `metadata` attribute of a `Distribution` instance, which behaves like a dictionary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_25

LANGUAGE: python
CODE:
```
>>> dist.metadata['Requires-Python']  # doctest: +SKIP
'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'
>>> dist.metadata['License']  # doctest: +SKIP
'MIT'
```

----------------------------------------

TITLE: Annotating Class Objects (type[C], Covariance, Unions) - Python
DESCRIPTION: Explains how to use `type[C]` to annotate variables that hold class objects themselves, demonstrating covariance (a subtype class is acceptable) and how to use unions of class types. Requires `typing` (implicitly for `type`). Note: `BasicUser` is used in the last example but not defined in the snippet context.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_18

LANGUAGE: python
CODE:
```
a = 3         # Has type ``int``
b = int       # Has type ``type[int]``
c = type(a)   # Also has type ``type[int]``

class User: ...
class ProUser(User): ...
class TeamUser(User): ...

def make_new_user(user_class: type[User]) -> User:
    # ...
    return user_class()

make_new_user(User)      # OK
make_new_user(ProUser)   # Also OK: ``type[ProUser]`` is a subtype of ``type[User]``
make_new_user(TeamUser)  # Still fine
make_new_user(User())    # Error: expected ``type[User]`` but got ``User``
make_new_user(int)       # Error: ``type[int]`` is not a subtype of ``type[User]``

def new_non_team_user(user_class: type[BasicUser | ProUser]): ...

new_non_team_user(BasicUser)  # OK
new_non_team_user(ProUser)    # OK
new_non_team_user(TeamUser)   # Error: ``type[TeamUser]`` is not a subtype
                              # of ``type[BasicUser | ProUser]``
new_non_team_user(User)       # Also an error
```

----------------------------------------

TITLE: Implementing Busy Retry Loop in Python Testing
DESCRIPTION: Example showing how to use the busy_retry function for implementing retry loops with timeout in tests. Demonstrates both error and non-error handling cases.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/test.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
for _ in support.busy_retry(support.SHORT_TIMEOUT):
    if check():
        break

for _ in support.busy_retry(support.SHORT_TIMEOUT, error=False):
    if check():
        break
else:
    raise RuntimeError('my custom error')
```

----------------------------------------

TITLE: Demonstrating Greedy Matching in Regular Expressions
DESCRIPTION: Shows how the greedy nature of quantifiers like * and + can lead to unexpected results, particularly when matching HTML tags. The example demonstrates why a pattern like '<.*>' captures more than intended.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
>>> s = '<html><head><title>Title</title>'
>>> len(s)
32
>>> print(re.match('<.*>', s).span())
(0, 32)
>>> print(re.match('<.*>', s).group())
<html><head><title>Title</title>
```

----------------------------------------

TITLE: Compiling a Regular Expression in Verbose Mode in Python
DESCRIPTION: Compiles a regular expression to match character references in different numerical forms. The `re.VERBOSE` flag is used to allow comments and improve readability of the regular expression. It requires the `re` library. The function processes inputs like `&123;`, `&0x1A;`, and `&076;` to recognize the number format. It outputs a compiled pattern object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
charref = re.compile(r"""
 &[#]                # Start of a numeric entity reference
 (
     0[0-7]+         # Octal form
   | [0-9]+          # Decimal form
   | x[0-9a-fA-F]+   # Hexadecimal form
 )
 ;                   # Trailing semicolon
""", re.VERBOSE)
```

----------------------------------------

TITLE: Sending a File Using Non-Blocking Sockets in asyncio - Python
DESCRIPTION: This method sends a file using high-performance os.sendfile if possible. It requires a non-blocking socket and a regular file object opened in binary mode. Parameters 'offset' and 'count' control the byte range sent, and 'fallback' determines whether to read the file manually if sendfile syscall is not supported.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
.. method:: loop.sock_sendfile(sock, file, offset=0, count=None, \
                               *, fallback=True)
   :async:

   Send a file using high-performance :mod:`os.sendfile` if possible.
   Return the total number of bytes sent.

   Asynchronous version of :meth:`socket.sendfile() <socket.socket.sendfile>`.

   *sock* must be a non-blocking :const:`socket.SOCK_STREAM`
   :class:`~socket.socket`.

   *file* must be a regular file object open in binary mode.

   *offset* tells from where to start reading the file. If specified,
   *count* is the total number of bytes to transmit as opposed to
   sending the file until EOF is reached. File position is always updated,
   even when this method raises an error, and
   :meth:`file.tell() <io.IOBase.tell>` can be used to obtain the actual
   number of bytes sent.

   *fallback*, when set to ``True``, makes asyncio manually read and send
   the file when the platform does not support the sendfile syscall
   (e.g. Windows or SSL socket on Unix).

   Raise :exc:`SendfileNotAvailableError` if the system does not support
   *sendfile* syscall and *fallback* is ``False``.

   *sock* must be a non-blocking socket.

   .. versionadded:: 3.7
```

----------------------------------------

TITLE: Creating a Flag Enum for Weekdays in Python
DESCRIPTION: Shows how to create a Flag enum for representing multiple weekdays. Each day is assigned a power of 2 value, allowing for bitwise operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
from enum import Flag
class Weekday(Flag):
    MONDAY = 1
    TUESDAY = 2
    WEDNESDAY = 4
    THURSDAY = 8
    FRIDAY = 16
    SATURDAY = 32
    SUNDAY = 64
```

----------------------------------------

TITLE: Running Doctest from Command Line
DESCRIPTION: Bash commands to execute doctest module via CLI, testing Python files or text files for accurate example execution. It can be executed with options for verbosity and controlling behavior with option flags.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/doctest.rst#2025-04-21_snippet_2

LANGUAGE: Bash
CODE:
```
python -m doctest [-v] [-o OPTION] [-f] file [file ...]

```

LANGUAGE: Bash
CODE:
```
python -m doctest -v example.py

```

LANGUAGE: Bash
CODE:
```
python -m doctest -v example.txt

```

----------------------------------------

TITLE: Merging Multiple Configuration Files in Python
DESCRIPTION: Illustrates how to read and merge multiple configuration files, with later files overriding values from earlier ones.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> config_override = configparser.ConfigParser()
>>> config_override['DEFAULT'] = {'ServerAliveInterval': '-1'}
>>> with open('override.ini', 'w') as configfile:
...     config_override.write(configfile)
...
>>> config_override = configparser.ConfigParser()
>>> config_override.read(['example.ini', 'override.ini'])
['example.ini', 'override.ini']
>>> print(config_override.get('DEFAULT', 'ServerAliveInterval'))
-1
```

----------------------------------------

TITLE: Add sys.exception method (Python)
DESCRIPTION: Introduces the `sys.exception` method, which returns the active exception instance. This provides a direct way to access the exception currently being handled.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a4.rst#2025-04-21_snippet_41



----------------------------------------

TITLE: Creating an Infinite Iterator with Repeat
DESCRIPTION: This function returns an iterator that continuously yields the same object, with an optional limitation on the number of repetitions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
.. function:: repeat(object[, times])

   Make an iterator that returns *object* over and over again. Runs indefinitely
   unless the *times* argument is specified.
```

----------------------------------------

TITLE: Closing Range of File Descriptors in Python
DESCRIPTION: The closerange() function closes all file descriptors from fd_low to fd_high-1, ignoring errors. It's much faster than manually closing each descriptor in a loop.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
def closerange(fd_low, fd_high, /):
    """Close all file descriptors from fd_low (inclusive) to fd_high (exclusive),
    ignoring errors. Equivalent to (but much faster than):

    for fd in range(fd_low, fd_high):
        try:
            os.close(fd)
        except OSError:
            pass
    """
```

----------------------------------------

TITLE: Parsing Namespaced XML with Explicit URIs in Python
DESCRIPTION: Demonstrates how to parse and search XML with namespaces by manually adding the URI to every tag or attribute in the xpath. This approach requires explicit namespace handling in the search functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
root = fromstring(xml_text)
for actor in root.findall('{http://people.example.com}actor'):
    name = actor.find('{http://people.example.com}name')
    print(name.text)
    for char in actor.findall('{http://characters.example.com}character'):
        print(' |-->', char.text)
```

----------------------------------------

TITLE: Default Metavar in argparse Help Python
DESCRIPTION: Shows the default behavior of `argparse` when generating help messages, where the `metavar` is derived from the `dest` value (uppercased for optional arguments, direct for positional). It includes parsing an example command line and printing the default help output.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_57

LANGUAGE: Python
CODE:
```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo')
>>> parser.add_argument('bar')
>>> parser.parse_args('X --foo Y'.split())
Namespace(bar='X', foo='Y')
>>> parser.print_help()
usage:  [-h] [--foo FOO] bar

positional arguments:
 bar

options:
 -h, --help  show this help message and exit
 --foo FOO
```

----------------------------------------

TITLE: Adding Docstrings and Methods to NamedTuple
DESCRIPTION: Shows that `NamedTuple` subclasses can include standard Python features like docstrings and custom methods, allowing for more complex behavior and better documentation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_137

LANGUAGE: python
CODE:
```
class Employee(NamedTuple):
    """Represents an employee."""
    name: str
    id: int = 3

    def __repr__(self) -> str:
        return f'<Employee {self.name}, id={self.id}>'
```

----------------------------------------

TITLE: Implementing Method Caching in Weather Class
DESCRIPTION: Demonstrates the use of cached_property and lru_cache decorators for method caching in a Weather class. Shows caching for immutable station_id implementations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_62

LANGUAGE: python
CODE:
```
class Weather:
    "Lookup weather information on a government website"

    def __init__(self, station_id):
        self._station_id = station_id
        # The _station_id is private and immutable

    def current_temperature(self):
        "Latest hourly observation"
        # Do not cache this because old results
        # can be out of date.

    @cached_property
    def location(self):
        "Return the longitude/latitude coordinates of the station"
        # Result only depends on the station_id

    @lru_cache(maxsize=20)
    def historic_rainfall(self, date, units='mm'):
        "Rainfall on a given date"
        # Depends on the station_id, date, and units.
```

----------------------------------------

TITLE: Rewriting functools.reduce as a For Loop in Python
DESCRIPTION: This snippet demonstrates how to rewrite a functools.reduce operation as a more readable for loop, using multiplication as an example.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_26

LANGUAGE: python
CODE:
```
import functools
# Instead of:
product = functools.reduce(operator.mul, [1, 2, 3], 1)

# You can write:
product = 1
for i in [1, 2, 3]:
    product *= i
```

----------------------------------------

TITLE: SSL Client Request Example in Python
DESCRIPTION: Demonstrates sending an HTTP HEAD request over an SSL connection and receiving the response headers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_33

LANGUAGE: python
CODE:
```
conn.sendall(b"HEAD / HTTP/1.0\r\nHost: linuxfr.org\r\n\r\n")
pprint.pprint(conn.recv(1024).split(b"\r\n"))
```

----------------------------------------

TITLE: Printing TracebackException to File (Python)
DESCRIPTION: New method traceback.TracebackException.print() prints the formatted TracebackException instance to a file.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.11.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
traceback.TracebackException.print()
```

----------------------------------------

TITLE: Parsing XML Documents with xml.dom.minidom
DESCRIPTION: Demonstrates different ways to parse XML content using xml.dom.minidom's parse and parseString functions. Shows parsing from files and strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.dom.minidom.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from xml.dom.minidom import parse, parseString

dom1 = parse('c:\\temp\\mydata.xml')  # parse an XML file by name

datasource = open('c:\\temp\\mydata.xml')
dom2 = parse(datasource)  # parse an open file

dom3 = parseString('<myxml>Some data<empty/> some more data</myxml>')
```

----------------------------------------

TITLE: Formatting and Converting Hexadecimal Data in Python
DESCRIPTION: Shows how to format a list of integers as a concatenated hexadecimal string using str.format() with the * operator for unpacking. Also demonstrates converting the resulting hexadecimal string back to an integer using int(_, 16).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/string.rst#_snippet_14

LANGUAGE: Python
CODE:
```
>>> octets = [192, 168, 0, 1]
>>> '{:02X}{:02X}{:02X}{:02X}'.format(*octets)
'C0A80001'
>>> int(_, 16)
3232235521
```

----------------------------------------

TITLE: PyCFunctionFast Implementation Signature
DESCRIPTION: Fast-path function signature for implementing Python callables. Takes self and array of argument pointers for better performance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/structures.rst#2025-04-23_snippet_4

LANGUAGE: c
CODE:
```
PyObject *PyCFunctionFast(PyObject *self,
                                PyObject *const *args,
                                Py_ssize_t nargs);
```

----------------------------------------

TITLE: Determining Path Root - pathlib Python
DESCRIPTION: This snippet explains how to determine the root of a path using `PureWindowsPath` and `PurePosixPath` in the pathlib module. The returned root string varies based on the operating system path style and the presence of leading slashes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> PureWindowsPath('c:/Program Files/').root
'\\'
>>> PureWindowsPath('c:Program Files/').root
''
>>> PurePosixPath('/etc').root
'/'
>>> PureWindowsPath('//host/share').root
'\\'
```

----------------------------------------

TITLE: Basic Process Synchronization with Lock
DESCRIPTION: Demonstrates using a Lock to synchronize output between multiple processes. Uses multiprocessing.Lock to ensure only one process prints at a time.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from multiprocessing import Process, Lock

def f(l, i):
    l.acquire()
    try:
        print('hello world', i)
    finally:
        l.release()

if __name__ == '__main__':
    lock = Lock()

    for num in range(10):
        Process(target=f, args=(lock, num)).start()
```

----------------------------------------

TITLE: Creating TCP Server with asyncio in Python
DESCRIPTION: This method creates a TCP server listening on a specified host and port. It returns a Server object. The method supports various parameters for configuring the server, including SSL options, address reuse, and connection backlog.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
loop.create_server(protocol_factory, \
               host=None, port=None, *, \
               family=socket.AF_UNSPEC, \
               flags=socket.AI_PASSIVE, \
               sock=None, backlog=100, ssl=None, \
               reuse_address=None, reuse_port=None, \
               keep_alive=None, \
               ssl_handshake_timeout=None, \
               ssl_shutdown_timeout=None, \
               start_serving=True)
```

----------------------------------------

TITLE: Raising Exceptions with Implicit Chaining (Python)
DESCRIPTION: This snippet illustrates implicit exception chaining in Python. A `ZeroDivisionError` is raised and caught, and then a new `RuntimeError` is raised within the `except` block. Python automatically links the original exception as the context (`__context__`) of the new exception, resulting in both tracebacks being displayed with "During handling of the above exception" connecting them.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/simple_stmts.rst#_snippet_7

LANGUAGE: python
CODE:
```
try:
    print(1 / 0)
except:
    raise RuntimeError("Something bad happened")
```

----------------------------------------

TITLE: Registering Type-Annotated Implementations with singledispatch
DESCRIPTION: Shows how to add specialized implementations to a generic function using type annotations. The register attribute automatically infers the type of the first argument based on the annotation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
>>> @fun.register
... def _(arg: int, verbose=False):
...     if verbose:
...         print("Strength in numbers, eh?", end=" ")
...     print(arg)
...
>>> @fun.register
... def _(arg: list, verbose=False):
...     if verbose:
...         print("Enumerate this:")
...     for i, elem in enumerate(arg):
...         print(i, elem)
```

----------------------------------------

TITLE: Customized Exception Formatting in Python Logging
DESCRIPTION: Shows how to create a custom logging formatter class (OneLineExceptionFormatter) to print exception information on a single line. It overrides formatException to control exception formatting. Key dependencies include Python's logging module, and custom format strings to match output requirements. Enables precise control over log message presentation, particularly by handling multi-line exceptions as single-line outputs for cleaner logs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_46

LANGUAGE: Python
CODE:
```
import logging

class OneLineExceptionFormatter(logging.Formatter):
    def formatException(self, exc_info):
        """
        Format an exception so that it prints on a single line.
        """
        result = super().formatException(exc_info)
        return repr(result)  # or format into one line however you want to

    def format(self, record):
        s = super().format(record)
        if record.exc_text:
            s = s.replace('\n', '') + '|'
        return s


def configure_logging():
    fh = logging.FileHandler('output.txt', 'w')
    f = OneLineExceptionFormatter('%(asctime)s|%(levelname)s|%(message)s|',
                                  '%d/%m/%Y %H:%M:%S')
    fh.setFormatter(f)
    root = logging.getLogger()
    root.setLevel(logging.DEBUG)
    root.addHandler(fh)


def main():
    configure_logging()
    logging.info('Sample message')
    try:
        x = 1 / 0
    except ZeroDivisionError as e:
        logging.exception('ZeroDivisionError: %s', e)


if __name__ == '__main__':
    main()
```

----------------------------------------

TITLE: Post-Mortem Debugging in Python
DESCRIPTION: This snippet shows how to import the pdb module and enter post-mortem debugging after an unhandled exception occurs. It utilizes the sys.last_exc variable, which contains the last exception instance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sys.rst#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
import pdb; pdb.pm()
```

----------------------------------------

TITLE: Multi-threading with the threading Module in Python
DESCRIPTION: Shows how to use the threading module to run tasks in the background while the main program continues to run. This example demonstrates creating a custom Thread subclass for asynchronous file compression.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib2.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
import threading, zipfile

class AsyncZip(threading.Thread):
    def __init__(self, infile, outfile):
        threading.Thread.__init__(self)
        self.infile = infile
        self.outfile = outfile

    def run(self):
        f = zipfile.ZipFile(self.outfile, 'w', zipfile.ZIP_DEFLATED)
        f.write(self.infile)
        f.close()
        print('Finished background zip of:', self.infile)

background = AsyncZip('mydata.txt', 'myarchive.zip')
background.start()
print('The main program continues to run in foreground.')

background.join()    # Wait for the background task to finish
print('Main program waited until background was done.')
```

----------------------------------------

TITLE: Creating MIMEMultipart Messages in Python
DESCRIPTION: Creates a multipart MIME message with optional subtype, boundary, and initial subparts. This is used for messages that contain multiple sections such as text and attachments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.mime.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
MIMEMultipart(_subtype='mixed', boundary=None, _subparts=None, \
                         *, policy=compat32, **_params)
```

----------------------------------------

TITLE: Using Hexadecimal Conversion Functions in binascii Module
DESCRIPTION: Examples of using b2a_hex() and hexlify() functions to convert binary data to hexadecimal representation. Shows various ways to format the output using separators and bytes_per_sep parameters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/binascii.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> import binascii
>>> binascii.b2a_hex(b'\xb9\x01\xef')
b'b901ef'
>>> binascii.hexlify(b'\xb9\x01\xef', '-')
b'b9-01-ef'
>>> binascii.b2a_hex(b'\xb9\x01\xef', b'_', 2)
b'b9_01ef'
>>> binascii.b2a_hex(b'\xb9\x01\xef', b' ', -2)
b'b901 ef'
```

----------------------------------------

TITLE: Creating a Cursor for SQLite Operations in Python
DESCRIPTION: Creates a cursor object from the database connection. The cursor is used to execute SQL statements and fetch results from queries.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
cur = con.cursor()
```

----------------------------------------

TITLE: Modifying String-like Objects in Python
DESCRIPTION: Shows how to modify string-like objects in-place using io.StringIO and array modules, since strings themselves are immutable in Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_29

LANGUAGE: python
CODE:
```
>>> import io
>>> s = "Hello, world"
>>> sio = io.StringIO(s)
>>> sio.getvalue()
'Hello, world'
>>> sio.seek(7)
7
>>> sio.write("there!")
6
>>> sio.getvalue()
'Hello, there!'

>>> import array
>>> a = array.array('w', s)
>>> print(a)
array('w', 'Hello, world')
>>> a[0] = 'y'
>>> print(a)
array('w', 'yello, world')
>>> a.tounicode()
'yello, world'
```

----------------------------------------

TITLE: Asserting warnings in Python unittest
DESCRIPTION: Demonstrates the new assertWarns method in unittest.TestCase for verifying that a specific warning type is triggered by the code under test.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_59

LANGUAGE: python
CODE:
```
with self.assertWarns(DeprecationWarning):
    legacy_function('XYZ')
```

----------------------------------------

TITLE: Typical Command Line Parsing Script Using getopt in Python
DESCRIPTION: A complete example of parsing command line arguments in a script using getopt, with error handling and option processing
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/getopt.rst#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
import getopt, sys

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "ho:v", ["help", "output="])
    except getopt.GetoptError as err:
        # print help information and exit:
        print(err)  # will print something like "option -a not recognized"
        usage()
        sys.exit(2)
    output = None
    verbose = False
    for o, a in opts:
        if o == "-v":
            verbose = True
        elif o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o in ("-o", "--output"):
            output = a
        else:
            assert False, "unhandled option"
    process(args, output=output, verbose=verbose)

if __name__ == "__main__":
    main()
```

----------------------------------------

TITLE: Defining HTTPMethod Enum in Python
DESCRIPTION: This snippet shows how to utilize the HTTPMethod enum to represent various HTTP methods, including their descriptions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
>>> from http import HTTPMethod
>>> HTTPMethod.GET
<HTTPMethod.GET>
>>> HTTPMethod.GET == 'GET'
True
>>> HTTPMethod.GET.value
'GET'
>>> HTTPMethod.GET.description
'Retrieve the target.'
>>> list(HTTPMethod)
[<HTTPMethod.CONNECT>,
 <HTTPMethod.DELETE>,
 <HTTPMethod.GET>,
 <HTTPMethod.HEAD>,
 <HTTPMethod.OPTIONS>,
 <HTTPMethod.PATCH>,
 <HTTPMethod.POST>,
 <HTTPMethod.PUT>,
 <HTTPMethod.TRACE>]
```

----------------------------------------

TITLE: Registering Custom Argument Types in Python argparse
DESCRIPTION: This example illustrates how to use `ArgumentParser.register` to define and register a custom type for argument parsing. It registers a type named 'hexadecimal integer' that converts input strings from hexadecimal to an integer, demonstrating its use with `add_argument` and the resulting parsing behavior, including error handling for invalid input.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_98

LANGUAGE: Python
CODE:
```
>>> import argparse
>>> parser = argparse.ArgumentParser()
>>> parser.register('type', 'hexadecimal integer', lambda s: int(s, 16))
>>> parser.add_argument('--foo', type='hexadecimal integer')
_StoreAction(option_strings=['--foo'], dest='foo', nargs=None, const=None, default=None, type='hexadecimal integer', choices=None, required=False, help=None, metavar=None, deprecated=False)
>>> parser.parse_args(['--foo', '0xFA'])
Namespace(foo=250)
>>> parser.parse_args(['--foo', '1.2'])
usage: PROG [-h] [--foo FOO]
PROG: error: argument --foo: invalid 'hexadecimal integer' value: '1.2'
```

----------------------------------------

TITLE: Asyncio Subprocess with SubprocessProtocol
DESCRIPTION: This snippet demonstrates using `loop.subprocess_exec` and a custom `SubprocessProtocol` to interact with a subprocess. The `DateProtocol` captures the standard output of the subprocess and uses an `asyncio.Future` to signal when the subprocess has exited and the output is ready.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
    import asyncio
    import sys

    class DateProtocol(asyncio.SubprocessProtocol):
        def __init__(self, exit_future):
            self.exit_future = exit_future
            self.output = bytearray()
            self.pipe_closed = False
            self.exited = False

        def pipe_connection_lost(self, fd, exc):
            self.pipe_closed = True
            self.check_for_exit()

        def pipe_data_received(self, fd, data):
            self.output.extend(data)

        def process_exited(self):
            self.exited = True
            # process_exited() method can be called before
            # pipe_connection_lost() method: wait until both methods are
            # called.
            self.check_for_exit()

        def check_for_exit(self):
            if self.pipe_closed and self.exited:
                self.exit_future.set_result(True)

    async def get_date():
        # Get a reference to the event loop as we plan to use
        # low-level APIs.
        loop = asyncio.get_running_loop()

        code = 'import datetime; print(datetime.datetime.now())'
        exit_future = asyncio.Future(loop=loop)

        # Create the subprocess controlled by DateProtocol;
        # redirect the standard output into a pipe.
        transport, protocol = await loop.subprocess_exec(
            lambda: DateProtocol(exit_future),
            sys.executable, '-c', code,
            stdin=None, stderr=None)

        # Wait for the subprocess exit using the process_exited()
        # method of the protocol.
        await exit_future

        # Close the stdout pipe.
        transport.close()

        # Read the output which was collected by the
        # pipe_data_received() method of the protocol.
        data = bytes(protocol.output)
        return data.decode('ascii').rstrip()

    date = asyncio.run(get_date())
    print(f"Current date: {date}")
```

----------------------------------------

TITLE: Using SimpleQueue.put_nowait method in Python
DESCRIPTION: A method to add an item to the queue without blocking. This is equivalent to put(item, block=False) and is provided for compatibility with Queue.put_nowait.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/queue.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
SimpleQueue.put_nowait(item)
```

----------------------------------------

TITLE: Unix-style Shebang with Virtual Command
DESCRIPTION: This shebang line uses a path commonly found in Unix-like systems (`#! /usr/bin/python`) which the Windows launcher recognizes as a virtual command. It instructs the launcher to locate and use the default Python interpreter or an active virtual environment, providing compatibility for portable scripts.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/windows.rst#_snippet_30

LANGUAGE: sh
CODE:
```
#! /usr/bin/python
```

----------------------------------------

TITLE: Printing TracebackException to File
DESCRIPTION: Prints the formatted exception information to a specified file (defaulting to sys.stderr). The chain parameter controls whether to include cause and context exceptions in the output.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
TracebackException.print(*, file=None, chain=True)
```

----------------------------------------

TITLE: Demonstrating Unicode code point tables in character encoding
DESCRIPTION: A representation of how Unicode maps characters to their corresponding code points in the standard. This shows examples of Latin letters, symbols, and emoji with their hexadecimal code point values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/unicode.rst#2025-04-21_snippet_0

LANGUAGE: none
CODE:
```
0061    'a'; LATIN SMALL LETTER A
0062    'b'; LATIN SMALL LETTER B
0063    'c'; LATIN SMALL LETTER C
...
007B    '{'; LEFT CURLY BRACKET
...
2167    'Ⅷ'; ROMAN NUMERAL EIGHT
2168    'Ⅸ'; ROMAN NUMERAL NINE
...
265E    '♞'; BLACK CHESS KNIGHT
265F    '♟'; BLACK CHESS PAWN
...
1F600   '😀'; GRINNING FACE
1F609   '😉'; WINKING FACE
...
```

----------------------------------------

TITLE: Loading Pickled Data in Python
DESCRIPTION: Example showing how to load previously pickled data from a file using the load() function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pickle.rst#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
import pickle

with open('data.pickle', 'rb') as f:
    # The protocol version used is detected automatically, so we do not
    # have to specify it.
    data = pickle.load(f)
```

----------------------------------------

TITLE: Iterating over SQL results using cursor
DESCRIPTION: This code demonstrates how to execute a SELECT query using an SQLite cursor in Python and iterate over the results. The snippet requires the SQLite module to be imported and a table named 'data' to exist. The expected output is a tuple containing row data from the executed query.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_20

LANGUAGE: Python
CODE:
```
import sqlite3
con = sqlite3.connect(\":memory:\", isolation_level=None)
cur = con.execute(\"CREATE TABLE data(t)\")
cur.execute(\"INSERT INTO data VALUES(1)\")

for row in cur.execute(\"SELECT t FROM data\"):
    print(row)
```

----------------------------------------

TITLE: Itertools Recipe: tail function
DESCRIPTION: Function that returns an iterator over the last n items using a deque with maxlen.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_32

LANGUAGE: python
CODE:
```
def tail(n, iterable):
    "Return an iterator over the last n items."
    # tail(3, 'ABCDEFG') → E F G
    return iter(deque(iterable, maxlen=n))
```

----------------------------------------

TITLE: Using Never/NoReturn for Non-Returning Functions in Python
DESCRIPTION: Illustrates the use of `Never` (or `NoReturn`) to indicate functions that never return normally, either by raising an exception or by being unreachable in certain control flow paths.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_52

LANGUAGE: python
CODE:
```
from typing import Never  # or NoReturn

def stop() -> Never:
    raise RuntimeError('no way')

def never_call_me(arg: Never) -> None:
    pass

def int_or_str(arg: int | str) -> None:
    never_call_me(arg)  # type checker error
    match arg:
        case int():
            print("It's an int")
        case str():
            print("It's a str")
        case _:
            never_call_me(arg)  # OK, arg is of type Never (or NoReturn)
```

----------------------------------------

TITLE: Using AsyncMock for Coroutine Testing
DESCRIPTION: Demonstrates how to use AsyncMock to test asynchronous code by tracking await calls through await_args_list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_36

LANGUAGE: python
CODE:
```
mock = AsyncMock()
async def main(*args):
    await mock(*args)

mock.await_args_list
[]
asyncio.run(main('foo'))
mock.await_args_list
[call('foo')]
asyncio.run(main('bar'))
mock.await_args_list
[call('foo'), call('bar')]
```

----------------------------------------

TITLE: Matrix Multiplication Operator in Python
DESCRIPTION: Introduces the '@' infix operator for matrix multiplication. The operator can be implemented in custom objects through __matmul__, __rmatmul__, and __imatmul__ methods. Demonstrates usage with NumPy to simplify scientific code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
S = (H @ beta - r).T @ inv(H @ V @ H.T) @ (H @ beta - r)
```

LANGUAGE: Python
CODE:
```
import numpy

x = numpy.ones(3)
x

m = numpy.eye(3)
m

x @ m
```

----------------------------------------

TITLE: Creating Compact JSON Encoding in Python
DESCRIPTION: Shows how to create compact JSON output by customizing the separators parameter to remove whitespace between elements and members.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/json.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> import json
>>> json.dumps([1, 2, 3, {'4': 5, '6': 7}], separators=(',', ':'))
'[1,2,3,{"4":5,"6":7}]'
```

----------------------------------------

TITLE: Support Managed Attributes - Py_TPFLAGS_MANAGED_WEAKREF - C
DESCRIPTION: A new type flag added to allow extension classes to support weakrefs with less bookkeeping, using less memory and with faster access.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_68

LANGUAGE: C
CODE:
```
Py_TPFLAGS_MANAGED_WEAKREF
```

----------------------------------------

TITLE: Using AnyStr for Functions Accepting str or bytes in Python
DESCRIPTION: This example shows the use of `AnyStr`, a constrained type variable, for functions that must accept either `str` or `bytes` but not a mix of both. The type variable ensures that all arguments and the return type are consistent (`str` or `bytes`).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_48

LANGUAGE: python
CODE:
```
def concat(a: AnyStr, b: AnyStr) -> AnyStr:
    return a + b

concat("foo", "bar")    # OK, output has type 'str'
concat(b"foo", b"bar")  # OK, output has type 'bytes'
concat("foo", b"bar")   # Error, cannot mix str and bytes
```

----------------------------------------

TITLE: Reading and Writing Unicode Data to Files in Update Mode
DESCRIPTION: This code snippet demonstrates opening a file in update mode ('w+') with an 'utf-8' encoding. It writes a line of text containing a Unicode character, seeks to the beginning of the file, and reads the first character.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/unicode.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
with open('test', encoding='utf-8', mode='w+') as f:
    f.write('\u4500 blah blah blah\n')
    f.seek(0)
    print(repr(f.readline()[:1]))
```

----------------------------------------

TITLE: Connecting Socket to Remote Address with asyncio
DESCRIPTION: This method connects a socket to a remote socket at a specified address.  It's the asynchronous version of socket.connect(). The socket must be non-blocking.  The address will be resolved using loop.getaddrinfo if it's not already resolved.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
.. method:: loop.sock_connect(sock, address)
   :async:

   Connect *sock* to a remote socket at *address*.

   Asynchronous version of :meth:`socket.connect() <socket.socket.connect>`.

   *sock* must be a non-blocking socket.

```

----------------------------------------

TITLE: Asyncio Integration with Context Variables
DESCRIPTION: Example of using context variables in an asyncio-based echo server to track client addresses.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextvars.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
import asyncio
import contextvars

client_addr_var = contextvars.ContextVar('client_addr')

def render_goodbye():
    client_addr = client_addr_var.get()
    return f'Good bye, client @ {client_addr}\r\n'.encode()

async def handle_request(reader, writer):
    addr = writer.transport.get_extra_info('socket').getpeername()
    client_addr_var.set(addr)

    while True:
        line = await reader.readline()
        print(line)
        if not line.strip():
            break
```

----------------------------------------

TITLE: SQL Query with Type Annotation Example
DESCRIPTION: Example demonstrating how to specify type conversion in SQL query using square brackets in column names with PARSE_COLNAMES flag
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_10

LANGUAGE: sql
CODE:
```
SELECT MAX(p) as "p [point]" FROM test;  ! will look up converter "point"
```

----------------------------------------

TITLE: Working with SQLite URIs in Python
DESCRIPTION: This example shows how to use SQLite URIs to open databases with specific options, such as read-only mode, creating shared in-memory databases, and handling non-existent database files.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_31

LANGUAGE: Python
CODE:
```
con = sqlite3.connect("file:tutorial.db?mode=ro", uri=True)
con.execute("CREATE TABLE readonly(data)")
con.close()

con = sqlite3.connect("file:nosuchdb.db?mode=rw", uri=True)

db = "file:mem1?mode=memory&cache=shared"
con1 = sqlite3.connect(db, uri=True)
con2 = sqlite3.connect(db, uri=True)
with con1:
    con1.execute("CREATE TABLE shared(data)")
    con1.execute("INSERT INTO shared VALUES(28)")
res = con2.execute("SELECT data FROM shared")
assert res.fetchone() == (28,)

con1.close()
con2.close()
```

----------------------------------------

TITLE: Securing IMAP4 Connections with IMAP4_SSL in Python
DESCRIPTION: IMAP4_SSL is a subclass of IMAP4 that connects to servers over SSL. It requires the ssl module, with support for specifying an ssl_context. This class defaults to the standard IMAP4-over-SSL port and supports timeout configurations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/imaplib.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
class IMAP4_SSL(host='', port=IMAP4_SSL_PORT, *, ssl_context=None, timeout=None):
    # IMAP4_SSL class implementation
```

----------------------------------------

TITLE: Python Parameter Definition Example
DESCRIPTION: Illustrates the difference between parameters and arguments in Python function definitions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
def func(foo, bar=None, **kwargs):
    pass
```

----------------------------------------

TITLE: Demonstrating Binary Representation of Decimal Number in Python
DESCRIPTION: Shows how a decimal number like 1.2 is actually stored as a binary approximation in Python's float type, explaining precision issues.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/design.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> x = 1.2
```

----------------------------------------

TITLE: Using Built-in Functions with Iterators in Python
DESCRIPTION: This section provides examples of using various built-in functions that work with iterators, including map, filter, enumerate, sorted, any, all, and zip.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
>>> def upper(s):
...     return s.upper()

>>> list(map(upper, ['sentence', 'fragment']))
['SENTENCE', 'FRAGMENT']
>>> [upper(s) for s in ['sentence', 'fragment']]
['SENTENCE', 'FRAGMENT']
```

LANGUAGE: python
CODE:
```
>>> def is_even(x):
...     return (x % 2) == 0

>>> list(filter(is_even, range(10)))
[0, 2, 4, 6, 8]
```

LANGUAGE: python
CODE:
```
>>> for item in enumerate(['subject', 'verb', 'object']):
...     print(item)
(0, 'subject')
(1, 'verb')
(2, 'object')
```

LANGUAGE: python
CODE:
```
>>> import random
>>> # Generate 8 random numbers between [0, 10000)
>>> rand_list = random.sample(range(10000), 8)
>>> rand_list  #doctest: +SKIP
[769, 7953, 9828, 6431, 8442, 9878, 6213, 2207]
>>> sorted(rand_list)  #doctest: +SKIP
[769, 2207, 6213, 6431, 7953, 8442, 9828, 9878]
>>> sorted(rand_list, reverse=True)  #doctest: +SKIP
[9878, 9828, 8442, 7953, 6431, 6213, 2207, 769]
```

LANGUAGE: python
CODE:
```
>>> any([0, 1, 0])
True
>>> any([0, 0, 0])
False
>>> any([1, 1, 1])
True
>>> all([0, 1, 0])
False
>>> all([0, 0, 0])
False
>>> all([1, 1, 1])
True
```

----------------------------------------

TITLE: Comparing Function Definitions with and without Decorators in Python
DESCRIPTION: This snippet illustrates the equivalence of using the @decorator syntax and manually applying a decorator function. It shows how the staticmethod decorator can be applied to a function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/glossary.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
def f(arg):
    ...
f = staticmethod(f)

@staticmethod
def f(arg):
    ...
```

----------------------------------------

TITLE: Using asyncio.run with loop_factory for custom event loop (Python)
DESCRIPTION: This snippet shows how to use asyncio.run with the loop_factory argument to specify a custom event loop implementation, such as asyncio.SelectorEventLoop on Windows. This is the recommended approach instead of using the deprecated asyncio policy system (e.g., asyncio.set_event_loop_policy).
SOURCE: https://github.com/python/cpython/blob/main/Doc/deprecations/pending-removal-in-3.16.rst#_snippet_0

LANGUAGE: Python
CODE:
```
import asyncio

async def main():
    ...

asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)
```

----------------------------------------

TITLE: File Encoding Warning Example
DESCRIPTION: Example showing a common file encoding bug when opening files without specifying encoding.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
# BUG: "rb" mode or encoding="utf-8" should be used.
with open("data.json") as f:
    data = json.load(f)
```

----------------------------------------

TITLE: Python Internal Lookup Chain Simulation
DESCRIPTION: Shows how to use ChainMap to simulate Python's internal lookup chain combining locals, globals, and builtins.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import builtins
pylookup = ChainMap(locals(), globals(), vars(builtins))
```

----------------------------------------

TITLE: Defining Generic Functions (TypeVar) - Python
DESCRIPTION: Demonstrates defining a generic function using the `TypeVar` factory from the `typing` module to declare a type variable. Requires `collections.abc` and `typing`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_15

LANGUAGE: python
CODE:
```
from collections.abc import Sequence
from typing import TypeVar

U = TypeVar('U')                  # Declare type variable "U"

def second(l: Sequence[U]) -> U:  # Function is generic over the TypeVar "U"
    return l[1]
```

----------------------------------------

TITLE: Implementing setUpClass and tearDownClass in Python unittest
DESCRIPTION: Demonstrates how to implement class-level setup and teardown methods in a unittest.TestCase subclass. These methods are used for creating and destroying expensive shared resources across all tests in a class.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_44

LANGUAGE: python
CODE:
```
import unittest

class Test(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls._connection = createExpensiveConnectionObject()

    @classmethod
    def tearDownClass(cls):
        cls._connection.destroy()
```

----------------------------------------

TITLE: Asserting Mock Basic Calls in Python
DESCRIPTION: Examples showing how to assert that a mock was called using assert_called() method introduced in Python 3.6
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
mock = Mock()
mock.method()
<Mock name='mock.method()' id='...'>
mock.method.assert_called()
```

----------------------------------------

TITLE: String Formatting with Thousands Separator
DESCRIPTION: Shows how to format large numbers with comma separators using Python's string format mini-language. Demonstrates formatting for both floating-point and integer numbers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.7.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> '{:20,.2f}'.format(18446744073709551616.0)
'18,446,744,073,709,551,616.00'
>>> '{:20,d}'.format(18446744073709551616)
'18,446,744,073,709,551,616'
```

----------------------------------------

TITLE: Creating a Dictionary from an Iterator in Python
DESCRIPTION: This example demonstrates how to create a dictionary from an iterator that returns (key, value) tuples.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> L = [('Italy', 'Rome'), ('France', 'Paris'), ('US', 'Washington DC')]
>>> dict(iter(L))
{'Italy': 'Rome', 'France': 'Paris', 'US': 'Washington DC'}
```

----------------------------------------

TITLE: Combining Positional and Optional Arguments in Python
DESCRIPTION: Shows how to create a script that accepts a positional integer argument and an optional verbosity flag, with flexible argument order
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/argparse.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("square", type=int,
                   help="display a square of a given number")
parser.add_argument("-v", "--verbose", action="store_true",
                   help="increase output verbosity")
args = parser.parse_args()
answer = args.square**2
if args.verbose:
    print(f"the square of {args.square} equals {answer}")
else:
    print(answer)
```

----------------------------------------

TITLE: Implementing Custom JSON Serialization
DESCRIPTION: This snippet demonstrates how to override the default serialization behavior of JSONEncoder to support custom objects by implementing a 'default' method. The method attempts to iterate the input object; if it succeeds, it converts it into a list, allowing for more complex data structures to be serialized.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/json.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
def default(self, o):
    try:
        iterable = iter(o)
    except TypeError:
        pass
    else:
        return list(iterable)
    # Let the base class default method raise the TypeError
    return super().default(o)
```

----------------------------------------

TITLE: Getting Traceback of Largest Memory Block using tracemalloc
DESCRIPTION: Code snippet that stores 25 frames of memory allocation, takes a snapshot, and displays the traceback of the biggest memory block to identify where memory is being allocated.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tracemalloc.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
import tracemalloc

# Store 25 frames
tracemalloc.start(25)

# ... run your application ...

snapshot = tracemalloc.take_snapshot()
top_stats = snapshot.statistics('traceback')

# pick the biggest memory block
stat = top_stats[0]
print("%s memory blocks: %.1f KiB" % (stat.count, stat.size / 1024))
for line in stat.traceback.format():
    print(line)
```

----------------------------------------

TITLE: Performance Testing with timeit Module in Python
DESCRIPTION: Example of using the timeit module to compare performance between two different ways of converting strings to Unicode.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.3.rst#2025-04-21_snippet_32

LANGUAGE: python
CODE:
```
import timeit

timer1 = timeit.Timer('unicode("abc")')
timer2 = timeit.Timer('"abc" + u""')

# Run three trials
print timer1.repeat(repeat=3, number=100000)
print timer2.repeat(repeat=3, number=100000)

# On my laptop this outputs:
# [0.36831796169281006, 0.37441694736480713, 0.35304892063140869]
# [0.17574405670166016, 0.18193507194519043, 0.17565798759460449]
```

----------------------------------------

TITLE: Defining a TypedDict with Required and NotRequired Keys - Python
DESCRIPTION: Demonstrates usage of Required and NotRequired in TypedDict to mark the necessity of certain keys. Dependencies include Python 3.11 or newer. 'Movie' is defined with one required key, 'title', and one optional, 'year'.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.11.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
class Movie(TypedDict):
   title: str
   year: NotRequired[int]

m1: Movie = {"title": "Black Panther", "year": 2018}  # OK
m2: Movie = {"title": "Star Wars"}  # OK (year is not required)
m3: Movie = {"year": 2022}  # ERROR (missing required field title)
```

----------------------------------------

TITLE: Opening LZMA-compressed Files in Python
DESCRIPTION: The open() function opens LZMA-compressed files in binary or text mode, returning a file object. It supports various modes and optional parameters for format, filters, encoding, and more.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/lzma.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
open(filename, mode="rb", *, format=None, check=-1, preset=None, filters=None, encoding=None, errors=None, newline=None)
```

----------------------------------------

TITLE: Naming Mocks for Better Test Diagnostics in Python
DESCRIPTION: Demonstrates how to name your mocks for better readability in test failure messages. The name is propagated to attributes or methods of the mock.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
mock = MagicMock(name='foo')
mock
mock.method
```

----------------------------------------

TITLE: Creating Named Temporary Files in Python
DESCRIPTION: Creates a temporary file with a visible name in the filesystem. Offers control over file deletion behavior through delete and delete_on_close parameters. The file can be reopened by name if proper precautions are taken.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tempfile.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
NamedTemporaryFile(mode='w+b', buffering=-1, encoding=None, newline=None, suffix=None, prefix=None, dir=None, delete=True, *, errors=None, delete_on_close=True)
```

----------------------------------------

TITLE: Using SharedMemory for Low-Level Shared Memory Operations in Python
DESCRIPTION: This example demonstrates basic usage of SharedMemory instances, including creating, modifying, and accessing shared memory blocks across different instances.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.shared_memory.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> from multiprocessing import shared_memory
>>> shm_a = shared_memory.SharedMemory(create=True, size=10)
>>> type(shm_a.buf)
<class 'memoryview'>
>>> buffer = shm_a.buf
>>> len(buffer)
10
>>> buffer[:4] = bytearray([22, 33, 44, 55])  # Modify multiple at once
>>> buffer[4] = 100                           # Modify single byte at a time
>>> # Attach to an existing shared memory block
>>> shm_b = shared_memory.SharedMemory(shm_a.name)
>>> import array
>>> array.array('b', shm_b.buf[:5])  # Copy the data into a new array.array
array('b', [22, 33, 44, 55, 100])
>>> shm_b.buf[:5] = b'howdy'  # Modify via shm_b using bytes
>>> bytes(shm_a.buf[:5])      # Access via shm_a
b'howdy'
>>> shm_b.close()   # Close each SharedMemory instance
>>> shm_a.close()
>>> shm_a.unlink()  # Call unlink only once to release the shared memory
```

----------------------------------------

TITLE: Creating Default SSL Context
DESCRIPTION: Example showing usage of the new create_default_context() function to obtain a secure SSLContext with reasonable defaults.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.4.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
context = ssl.create_default_context()
# Modify context if needed
lib.use_ssl(context=context)
```

----------------------------------------

TITLE: Pipe Communication Example
DESCRIPTION: Demonstrates using multiprocessing.Pipe for inter-process communication, showing sending and receiving of various data types including lists, bytes, and arrays.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
>>> from multiprocessing import Pipe
>>> a, b = Pipe()
>>> a.send([1, 'hello', None])
>>> b.recv()
[1, 'hello', None]
>>> b.send_bytes(b'thank you')
>>> a.recv_bytes()
b'thank you'
>>> import array
>>> arr1 = array.array('i', range(5))
>>> arr2 = array.array('i', [0] * 10)
>>> a.send_bytes(arr1)
>>> count = b.recv_bytes_into(arr2)
>>> assert count == len(arr1) * arr1.itemsize
>>> arr2
array('i', [0, 1, 2, 3, 4, 0, 0, 0, 0, 0])
```

----------------------------------------

TITLE: Clean Python Bytecode Cache Command
DESCRIPTION: Unix command to remove all compiled Python bytecode files (.pyc/.pyo) during development to ensure testing with fresh bytecode compilation.
SOURCE: https://github.com/python/cpython/blob/main/InternalDocs/interpreter.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
find . -name '*.py[co]' -exec rm -f '{}' +
```

----------------------------------------

TITLE: Implementing HTTPSHandler for HTTPS Connections in Python
DESCRIPTION: HTTPSHandler is used for handling HTTPS connections. It can be initialized with debug level, SSL context, and hostname checking options.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
class HTTPSHandler(debuglevel=0, context=None, check_hostname=None):
```

----------------------------------------

TITLE: Signature Object Usage Example in Python
DESCRIPTION: Demonstrates creating and inspecting a Signature object from a function definition using the inspect.signature() function. Shows how to access parameter information and annotations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/inspect.rst#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> from inspect import signature
>>> def foo(a, *, b:int, **kwargs):
...     pass

>>> sig = signature(foo)

>>> str(sig)
'(a, *, b: int, **kwargs)'

>>> str(sig.parameters['b'])
'b: int'

>>> sig.parameters['b'].annotation
<class 'int'>
```

----------------------------------------

TITLE: Dictionary setdefault alternative - Python
DESCRIPTION: This code snippet provides a more concise alternative to the previous snippet using the `setdefault` method. It achieves the same functionality in a single line of code, making it more readable and efficient.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.0.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
"return dict.setdefault(key, [])"
```

----------------------------------------

TITLE: Using Decorators with Classes in Python
DESCRIPTION: This snippet illustrates how to apply decorators to a class, which modifies or enhances the class definition. The decorators are applied in a nested manner, starting from the innermost function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
@f1(arg)
@f2
class Foo: pass
```

LANGUAGE: python
CODE:
```
class Foo: pass
Foo = f1(arg)(f2(Foo))
```

----------------------------------------

TITLE: Implementing TOML parsing in Python tomllib module
DESCRIPTION: Implements PEP 680, adding the tomllib module to provide support for parsing TOML (Tom's Obvious, Minimal Language) data.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a7.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
PEP 680, the tomllib module. Adds support for parsing TOML.
```

----------------------------------------

TITLE: Using Path-Like Objects with File System Functions
DESCRIPTION: Demonstrates how the new PathLike protocol introduced in PEP 519 allows pathlib.Path objects to be used transparently with functions that previously only accepted strings or bytes as file paths.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.6.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> import pathlib
>>> with open(pathlib.Path("README")) as f:
...     contents = f.read()
...
>>> import os.path
>>> os.path.splitext(pathlib.Path("some_file.txt"))
('some_file', '.txt')
>>> os.path.join("/a/b", pathlib.Path("c"))
'/a/b/c'
>>> import os
>>> os.fspath(pathlib.Path("some_file.txt"))
'some_file.txt'
```

----------------------------------------

TITLE: Using subn() Method for Replacement Count in Python
DESCRIPTION: Demonstrates the subn() method which works like sub() but returns a tuple containing the new string and the number of replacements made. Also shows how empty matches are handled.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
>>> p = re.compile('(blue|white|red)')
>>> p.subn('colour', 'blue socks and red shoes')
('colour socks and colour shoes', 2)
>>> p.subn('colour', 'no colours at all')
('no colours at all', 0)

>>> p = re.compile('x*')
>>> p.sub('-', 'abxd')
'-a-b--d-'
```

----------------------------------------

TITLE: Path Comparison and Operators in Python Pathlib
DESCRIPTION: Demonstrates path comparison operations and path manipulation using operators.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> PurePosixPath('foo') == PurePosixPath('FOO')
False
>>> PureWindowsPath('foo') == PureWindowsPath('FOO')
True
>>> PureWindowsPath('FOO') in { PureWindowsPath('foo') }
True
>>> PureWindowsPath('C:') < PureWindowsPath('d:')
True
```

----------------------------------------

TITLE: Enum Membership and Value Lookup in Python
DESCRIPTION: Shows how to check for enum membership using the 'in' operator and how to look up enum members by value using call syntax.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/enum.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> some_var = Color.RED
>>> some_var in Color
True
>>> Color.RED.value in Color
True
```

----------------------------------------

TITLE: Implementing Optional Arguments with Sentinel Objects
DESCRIPTION: Demonstrates how to implement methods with optional arguments using a sentinel object pattern, which is particularly useful when None is a valid input value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_59

LANGUAGE: python
CODE:
```
_sentinel = object()

def pop(self, key, default=_sentinel):
    if key in self:
        value = self[key]
        del self[key]
        return value
    if default is _sentinel:
        raise KeyError(key)
    return default
```

----------------------------------------

TITLE: Defining a Generic Class (New Syntax)
DESCRIPTION: Shows the preferred modern syntax for defining a generic class using type parameter lists directly after the class name.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_93

LANGUAGE: python
CODE:
```
class Mapping[KT, VT]:
    def __getitem__(self, key: KT) -> VT:
        ...
        # Etc.
```

----------------------------------------

TITLE: Skipping Entire Test Classes in Python unittest
DESCRIPTION: Shows how to skip an entire test class using the @unittest.skip decorator. This is useful when a whole set of tests needs to be skipped under certain conditions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
@unittest.skip("showing class skipping")
class MySkippedTestCase(unittest.TestCase):
    def test_not_run(self):
        pass
```

----------------------------------------

TITLE: Using set_trace_async in an Async Function (Python)
DESCRIPTION: Demonstrates how to use the `pdb.set_trace_async` function within an asynchronous Python function. This requires using the `await` keyword before calling the function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_6

LANGUAGE: python
CODE:
```
async def f():
    await pdb.set_trace_async()
```

----------------------------------------

TITLE: Alias for universal_newlines in subprocess
DESCRIPTION: The subprocess.run function and subprocess.Popen constructor now accept the text keyword argument. This argument serves as an alias for universal_newlines, providing a more descriptive and intuitive name for controlling newline handling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
The ``subprocess.run`` function and the :class:`subprocess.Popen` constructor
now accept the *text* keyword argument as an alias
to *universal_newlines*.
(Contributed by Andrew Clegg in :issue:`31756`.)
```

----------------------------------------

TITLE: Connecting to Pipes in asyncio - Python
DESCRIPTION: These methods allow the registration of read and write ends of pipes with the event loop. Protocol factories must return asyncio protocol implementations, and pipes are treated as file-like objects. The methods return transport and protocol pairs, and special care must be taken on Windows environments regarding event loop selections.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_28

LANGUAGE: python
CODE:
```
.. method:: loop.connect_read_pipe(protocol_factory, pipe)
   :async:

   Register the read end of *pipe* in the event loop.

   *protocol_factory* must be a callable returning an
   :ref:`asyncio protocol <asyncio-protocol>` implementation.

   *pipe* is a :term:`file-like object <file object>`.

   Return pair ``(transport, protocol)``, where *transport* supports
   the :class:`ReadTransport` interface and *protocol* is an object
   instantiated by the *protocol_factory*.

   With :class:`SelectorEventLoop` event loop, the *pipe* is set to
   non-blocking mode.

.. method:: loop.connect_write_pipe(protocol_factory, pipe)
   :async:

   Register the write end of *pipe* in the event loop.

   *protocol_factory* must be a callable returning an
   :ref:`asyncio protocol <asyncio-protocol>` implementation.

   *pipe* is :term:`file-like object <file object>`.

   Return pair ``(transport, protocol)``, where *transport* supports
   :class:`WriteTransport` interface and *protocol* is an object
   instantiated by the *protocol_factory*.

   With :class:`SelectorEventLoop` event loop, the *pipe* is set to
   non-blocking mode.

.. note::
   :class:`SelectorEventLoop` does not support the above methods on
   Windows.  Use :class:`ProactorEventLoop` instead for Windows.
```

----------------------------------------

TITLE: Creating TimedRotatingFileHandler Class - Python
DESCRIPTION: This class manages log files that rotate based on specified time intervals. Parameters allow customization of the rollover frequency and backup file management.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
class TimedRotatingFileHandler(filename, when='h', interval=1, backupCount=0, encoding=None, delay=False, utc=False, atTime=None, errors=None):
    Returns a new instance of the :class:`TimedRotatingFileHandler` class. The
    specified file is opened and used as the stream for logging. On rotating it also
    sets the filename suffix. Rotating happens based on the product of *when* and
    *interval*.
```

----------------------------------------

TITLE: Fine-grained Error Tracing in Python Tracebacks
DESCRIPTION: Demonstrates Python 3.11's enhanced traceback feature, which points to the exact expression causing an error instead of just the line, providing more precise error location information
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.11.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
Traceback (most recent call last):
  File "distance.py", line 11, in <module>
    print(manhattan_distance(p1, p2))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "distance.py", line 6, in manhattan_distance
    return abs(point_1.x - point_2.x) + abs(point_1.y - point_2.y)
                           ^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'x'
```

LANGUAGE: python
CODE:
```
Traceback (most recent call last):
  File "query.py", line 37, in <module>
    magic_arithmetic('foo')
  File "query.py", line 18, in magic_arithmetic
    return add_counts(x) / 25
           ^^^^^^^^^^^^^
  File "query.py", line 24, in add_counts
    return 25 + query_user(user1) + query_user(user2)
                ^^^^^^^^^^^^^^^^^^
  File "query.py", line 32, in query_user
    return 1 + query_count(db, response['a']['b']['c']['user'], retry=True)
                           ~~~~~~~~~~~~~~~~~~^^^^^
TypeError: 'NoneType' object is not subscriptable
```

LANGUAGE: python
CODE:
```
Traceback (most recent call last):
  File "calculation.py", line 54, in <module>
    result = (x / y / z) * (a / b / c)
              ~~~~~~^~~
ZeroDivisionError: division by zero
```

----------------------------------------

TITLE: Creating an Asynchronous Context Manager with AsyncContextDecorator in Python
DESCRIPTION: Shows how to implement an asynchronous context manager that can also be used as a decorator using AsyncContextDecorator. The example demonstrates usage with async functions and the asyncio.run() function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextlib.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
from asyncio import run
from contextlib import AsyncContextDecorator

class mycontext(AsyncContextDecorator):
    async def __aenter__(self):
        print('Starting')
        return self

    async def __aexit__(self, *exc):
        print('Finishing')
        return False
```

LANGUAGE: python
CODE:
```
@mycontext()
async def function():
    print('The bit in the middle')

run(function())
```

LANGUAGE: python
CODE:
```
async def function():
   async with mycontext():
        print('The bit in the middle')

run(function())
```

----------------------------------------

TITLE: Deprecated Method in logging (Python)
DESCRIPTION: The logging.warn() method has been deprecated since Python 3.3. Users should use the logging.warning() method instead for emitting warning messages.
SOURCE: https://github.com/python/cpython/blob/main/Doc/deprecations/pending-removal-in-future.rst#_snippet_8

LANGUAGE: Python
CODE:
```
logging.warn()
```

----------------------------------------

TITLE: Using Self Type Annotation - Python
DESCRIPTION: Illustrates how to use the Self annotation for methods returning an instance of their class. Prerequisites include Python 3.11 for Self support. Methods such as __enter__ in context managers now have clearer typing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.11.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
class MyLock:
    def __enter__(self) -> Self:
        self.lock()
        return self

class MyInt:
    @classmethod
    def fromhex(cls, s: str) -> Self:
        return cls(int(s, 16))
```

----------------------------------------

TITLE: Installing Python Dependencies using pip
DESCRIPTION: This command installs all the application's dependencies into the specified target directory (myapp) using pip. It reads the dependencies from the requirements.txt file.  The requirements.txt file should contain a list of packages to install, one package per line.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/zipapp.rst#2025-04-21_snippet_4

LANGUAGE: shell-session
CODE:
```
$ python -m pip install -r requirements.txt --target myapp
```

----------------------------------------

TITLE: Mocking Magic Methods with MagicMock in Python
DESCRIPTION: Shows how to mock Python magic methods using MagicMock, which has pre-created magic methods that can be configured and verified like regular methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
mock = MagicMock()
mock.__str__.return_value = 'foobarbaz'
str(mock)
mock.__str__.assert_called_with()
```

----------------------------------------

TITLE: Implementing Rounding and Truncation Methods in Python
DESCRIPTION: These methods implement the built-in `round()` function and `math` module functions `trunc()`, `floor()`, and `ceil()`. Unless `ndigits` is provided to `__round__`, they should return the object's value truncated to an `Integral` type, typically an `int`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_29

LANGUAGE: Python
CODE:
```
object.__round__(self, [,ndigits])
object.__trunc__(self)
object.__floor__(self)
object.__ceil__(self)
```

----------------------------------------

TITLE: Patching a Class with Mock
DESCRIPTION: This snippet demonstrates how to use the patch decorator to replace a class with a MagicMock instance and check the instance creation and method return values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_42

LANGUAGE: python
CODE:
```
>>> class Class:
...     def method(self):
...         pass
...
>>> with patch('__main__.Class') as MockClass:
...     instance = MockClass.return_value
...     instance.method.return_value = 'foo'
...     assert Class() is instance
...     assert Class().method() == 'foo'
...
```

----------------------------------------

TITLE: Using SharedMemoryManager with Context Manager
DESCRIPTION: This example demonstrates a convenient pattern for using SharedMemoryManager objects via the 'with' statement to ensure that all shared memory blocks are released after they are no longer needed.  It shows how to create a ShareableList, distribute work among multiple processes, and consolidate results.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.shared_memory.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> with SharedMemoryManager() as smm:
...     sl = smm.ShareableList(range(2000))
...     # Divide the work among two processes, storing partial results in sl
...     p1 = Process(target=do_work, args=(sl, 0, 1000))
...     p2 = Process(target=do_work, args=(sl, 1000, 2000))
...     p1.start()
...     p2.start()  # A multiprocessing.Pool might be more efficient
...     p1.join()
...     p2.join()   # Wait for all work to complete in both processes
...     total_result = sum(sl)  # Consolidate the partial results now in sl
```

----------------------------------------

TITLE: Annotating Python Generator with Full Type Parameters
DESCRIPTION: Annotates a Python generator function using `Generator[YieldType, SendType, ReturnType]`, specifying types for yielded values, values sent into the generator, and the final return value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_19

LANGUAGE: python
CODE:
```
def echo_round() -> Generator[int, float, str]:
    sent = yield 0
    while sent >= 0:
        sent = yield round(sent)
    return 'Done'
```

----------------------------------------

TITLE: ConfigParser with Default Values in Python
DESCRIPTION: Example of using ConfigParser with default values that are used in interpolation when options are not defined elsewhere.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
import configparser

# New instance with 'bar' and 'baz' defaulting to 'Life' and 'hard' each
config = configparser.ConfigParser({'bar': 'Life', 'baz': 'hard'})
config.read('example.cfg')

print(config.get('Section1', 'foo'))     # -> "Python is fun!"
config.remove_option('Section1', 'bar')
config.remove_option('Section1', 'baz')
print(config.get('Section1', 'foo'))     # -> "Life is hard!"
```

----------------------------------------

TITLE: Using Underscores in Numeric Literals for Readability in Python 3.6
DESCRIPTION: PEP 515 enables underscores in numeric literals, enhancing their readability. However, it has constraints on where underscores can appear.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.6.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
>>> 1_000_000_000_000_000
1000000000000000
>>> 0x_FF_FF_FF_FF
4294967295

>>> '{:_}'.format(1000000)
'1_000_000'
>>> '{:_x}'.format(0xFFFFFFFF)
'ffff_ffff'
```

----------------------------------------

TITLE: Defining Static and Class Methods
DESCRIPTION: Demonstrates how to create static and class methods using the new descriptor functionality in Python 2.2. Static methods don't receive the instance argument, while class methods receive the class as first argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.2.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
class C(object):
    def f(arg1, arg2):
        ...
    f = staticmethod(f)

    def g(cls, arg1, arg2):
        ...
    g = classmethod(g)
```

----------------------------------------

TITLE: Enable Argument Suggestion on Error in argparse (Keyword)
DESCRIPTION: Shows how to enable suggestions for mistyped argument choices or subparser names by initializing `ArgumentParser` with `suggest_on_error=True`. This feature provides helpful hints to the user when an invalid choice is provided.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_22

LANGUAGE: Python
CODE:
```
import argparse

parser = argparse.ArgumentParser(description='Process some integers.', suggest_on_error=True)
parser.add_argument('--action', choices=['sum', 'max'])
parser.add_argument('integers', metavar='N', type=int, nargs='+', help='an integer for the accumulator')
# The following line is expected to raise an error and print a suggestion
# parser.parse_args(['--action', 'sumn', 1, 2, 3])
```

----------------------------------------

TITLE: Handling ExceptionGroup with except* in Python
DESCRIPTION: This snippet shows how to handle exceptions belonging to an ExceptionGroup using except* clauses. It matches exceptions within the group and processes each type separately. Requires Python 3.11 or later for ExceptionGroups, and it maintains Python's built-in libraries.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
>>> try:
...     raise ExceptionGroup("eg",
...         [ValueError(1), TypeError(2), OSError(3), OSError(4)])
... except* TypeError as e:
...     print(f'caught {type(e)} with nested {e.exceptions}')
... except* OSError as e:
...     print(f'caught {type(e)} with nested {e.exceptions}')
...
caught <class 'ExceptionGroup'> with nested (TypeError(2),)
caught <class 'ExceptionGroup'> with nested (OSError(3), OSError(4))
  + Exception Group Traceback (most recent call last):
  |   File "<stdin>", line 2, in <module>
  | ExceptionGroup: eg
  +-+---------------- 1 ----------------
    | ValueError: 1
    +------------------------------------
```

----------------------------------------

TITLE: Reading Text Resource with Encoding and Multiple Path Names
DESCRIPTION: Demonstrates how to read a text resource located within a subdirectory, specifying the encoding. The function `importlib.resources.read_text` requires an explicit encoding argument if there are multiple path names for backward compatibility. The example shows reading `info/chapter1.txt` with UTF-8 encoding.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.resources.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
"importlib.resources.read_text(my_module, \"info\", \"chapter1.txt\",\n                                    encoding='utf-8')"
```

----------------------------------------

TITLE: argparse.ArgumentParser.add_argument Method Signature
DESCRIPTION: The signature for the `add_argument` method of `ArgumentParser`, outlining the positional argument (`name or flags`) and the various keyword arguments available for configuring how a single command-line argument should be parsed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_26

LANGUAGE: Python
CODE:
```
ArgumentParser.add_argument(name or flags..., *, [action], [nargs], \
                           [const], [default], [type], [choices], [required], \
                           [help], [metavar], [dest], [deprecated])
```

----------------------------------------

TITLE: Using subprocess.check_output for Command Execution in Python
DESCRIPTION: Example demonstrating the new subprocess.check_output function that runs a command with specified arguments and returns the command's output as a string when successful, or raises a CalledProcessError exception on failure.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.7.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
>>> subprocess.check_output(['df', '-h', '.'])
'Filesystem     Size   Used  Avail Capacity  Mounted on\n
/dev/disk0s2    52G    49G   3.0G    94%    /\n'

>>> subprocess.check_output(['df', '-h', '/bogus'])
  ...
subprocess.CalledProcessError: Command '['df', '-h', '/bogus']' returned non-zero exit status 1
```

----------------------------------------

TITLE: Using Context Decorator as Context Manager
DESCRIPTION: Example of using the track_entry_and_exit context manager within a with statement to log entry and exit of a code block
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextlib.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
with track_entry_and_exit('widget loader'):
    print('Some time consuming activity goes here')
    load_widget()
```

----------------------------------------

TITLE: Basic URLError and HTTPError Handling with Urllib in Python
DESCRIPTION: Presents two approaches to handling URLError and HTTPError exceptions when opening URLs using urllib. The snippets show how to discern between HTTP errors, such as connection issues or server errors, and handling them appropriately.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/urllib2.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
from urllib.request import Request, urlopen
from urllib.error import URLError, HTTPError
req = Request(someurl)
try:
    response = urlopen(req)
except HTTPError as e:
    print('The server couldn\'t fulfill the request.')
    print('Error code: ', e.code)
except URLError as e:
    print('We failed to reach a server.')
    print('Reason: ', e.reason)
else:
    # everything is fine

```

LANGUAGE: Python
CODE:
```
from urllib.request import Request, urlopen
from urllib.error import URLError
req = Request(someurl)
try:
    response = urlopen(req)
except URLError as e:
    if hasattr(e, 'reason'):
        print('We failed to reach a server.')
        print('Reason: ', e.reason)
    elif hasattr(e, 'code'):
        print('The server couldn\'t fulfill the request.')
        print('Error code: ', e.code)
else:
    # everything is fine

```

----------------------------------------

TITLE: Comparing IntEnum with Standard Enum
DESCRIPTION: Shows that IntEnum members cannot be compared with standard Enum members even with same values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
>>> class Shape(IntEnum):
...     CIRCLE = 1
...     SQUARE = 2
...
>>> class Color(Enum):
...     RED = 1
...     GREEN = 2
...
>>> Shape.CIRCLE == Color.RED
False
```

----------------------------------------

TITLE: Hashing Data with HMAC and hashlib
DESCRIPTION: This example shows how to use the `hashlib.file_digest` function with HMAC to hash data. It creates an `io.BytesIO` object containing data, initializes an HMAC object with a key and a hash algorithm, and then uses `hashlib.file_digest` to calculate the digest using the HMAC object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/hashlib.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```

      >>> buf = io.BytesIO(b"somedata")
      >>> mac1 = hmac.HMAC(b"key", digestmod=hashlib.sha512)
      >>> digest = hashlib.file_digest(buf, lambda: mac1)

      >>> digest is mac1
      True
      >>> mac2 = hmac.HMAC(b"key", b"somedata", digestmod=hashlib.sha512)
      >>> mac1.digest() == mac2.digest()
      True

```

----------------------------------------

TITLE: Deprecated Function in codecs (Python)
DESCRIPTION: The codecs.open function is deprecated. The standard built-in open() function should be used instead for file handling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/deprecations/pending-removal-in-future.rst#_snippet_3

LANGUAGE: Python
CODE:
```
codecs.open
```

----------------------------------------

TITLE: Autospeccing Mock Objects with urllib Request
DESCRIPTION: Shows how to use autospec to create mocks that match the original object's API and enforce call signatures
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_59

LANGUAGE: python
CODE:
```
from urllib import request
patcher = patch('__main__.request', autospec=True)
mock_request = patcher.start()
request is mock_request
mock_request.Request
```

----------------------------------------

TITLE: Extracting All Files from a ZIP Archive in Python
DESCRIPTION: The `ZipFile.extractall` method extracts all or specified members from a ZIP archive to a given directory. It includes a security note warning against extracting from untrusted sources due to potential directory traversal attacks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/zipfile.rst#2025-04-21_snippet_3



----------------------------------------

TITLE: Defining Simple Type Alias with 'type' Statement in Python
DESCRIPTION: Shows the modern way (Python 3.12+) to define a simple type alias using the `type` statement, making complex types more readable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_1

LANGUAGE: Python
CODE:
```
type Vector = list[float]

def scale(scalar: float, vector: Vector) -> Vector:
    return [scalar * num for num in vector]

# passes type checking; a list of floats qualifies as a Vector.
new_vector = scale(2.0, [1.0, -4.2, 5.4])
```

----------------------------------------

TITLE: Calling Class Methods in Python
DESCRIPTION: Demonstration of how class methods can be called from either a class or an instance. The class reference is automatically passed as the first argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
>>> F.f(3)
('F', 3)
>>> F().f(3)
('F', 3)
```

----------------------------------------

TITLE: Using Multiple Context Managers in a Single With Statement in Python
DESCRIPTION: Shows the new syntax for using multiple context managers in a single with statement, which simplifies file handling and other contextual operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.1.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> with open('mylog.txt') as infile, open('a.out', 'w') as outfile:
...     for line in infile:
...         if '<critical>' in line:
...             outfile.write(line)
```

----------------------------------------

TITLE: Creating a tar archive with base_dir in Python
DESCRIPTION: This snippet shows how to use the make_archive function with the base_dir parameter to include specific files in the archive while excluding others.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/shutil.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> from shutil import make_archive
>>> import os
>>> archive_name = os.path.expanduser(os.path.join('~', 'myarchive'))
>>> make_archive(
...     archive_name,
...     'tar',
...     root_dir='tmp/root',
...     base_dir='structure/content',
... )
'/Users/tarek/my_archive.tar'
```

----------------------------------------

TITLE: Retrieving Final Path Component - pathlib Python
DESCRIPTION: This snippet retrieves the last component of a path, excluding drive and root, using the `name` attribute. It demonstrates usage in both `PurePosixPath` and `PureWindowsPath`, highlighting how UNC drive names affect the result.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
>>> PurePosixPath('my/library/setup.py').name
'setup.py'
>>> PureWindowsPath('//some/share/setup.py').name
'setup.py'
>>> PureWindowsPath('//some/share').name
''
```

----------------------------------------

TITLE: Inheriting from Non-Generic Class (Python)
DESCRIPTION: Demonstrates how a generic class can inherit from a non-generic base class like `collections.abc.Sized`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_33

LANGUAGE: Python
CODE:
```
from collections.abc import Sized

class LinkedList[T](Sized):
    ...
```

----------------------------------------

TITLE: Using asyncio.sleep() in Python
DESCRIPTION: Illustrates the usage of asyncio.sleep() function to create a coroutine that displays the current date every second for 5 seconds. This example shows how to use sleep for timing and task suspension in asynchronous code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
import asyncio
import datetime

async def display_date():
    loop = asyncio.get_running_loop()
    end_time = loop.time() + 5.0
    while True:
        print(datetime.datetime.now())
        if (loop.time() + 1.0) >= end_time:
            break
        await asyncio.sleep(1)

asyncio.run(display_date())
```

----------------------------------------

TITLE: Defining Escape Sequences for Python Regular Expressions
DESCRIPTION: Lists the escape sequences supported by Python's regular expression parser, which are mostly the same as those supported by Python string literals.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
\a      \b      \f      \n
\N      \r      \t      \u
\U      \v      \x      \\
```

----------------------------------------

TITLE: Using Lambda Expressions for Small Functions in Python
DESCRIPTION: This snippet shows how to create small, anonymous functions using lambda expressions in Python. It includes examples of simple arithmetic and string operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_27

LANGUAGE: python
CODE:
```
adder = lambda x, y: x+y

print_assign = lambda name, value: name + '=' + str(value)
```

----------------------------------------

TITLE: Command Line Arguments with ChainMap
DESCRIPTION: Example of using ChainMap to manage command-line arguments, environment variables, and default values with priority ordering.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
import os, argparse

defaults = {'color': 'red', 'user': 'guest'}

parser = argparse.ArgumentParser()
parser.add_argument('-u', '--user')
parser.add_argument('-c', '--color')
namespace = parser.parse_args()
command_line_args = {k: v for k, v in vars(namespace).items() if v is not None}

combined = ChainMap(command_line_args, os.environ, defaults)
print(combined['color'])
print(combined['user'])
```

----------------------------------------

TITLE: Temporarily Suppressing Warnings
DESCRIPTION: Example of using catch_warnings context manager to suppress specific warnings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/warnings.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
import warnings

def fxn():
    warnings.warn("deprecated", DeprecationWarning)

with warnings.catch_warnings():
    warnings.simplefilter("ignore")
    fxn()
```

----------------------------------------

TITLE: Using 'append' action in argparse Python
DESCRIPTION: Demonstrates the `action='append'` attribute, which stores argument values in a list, allowing an option to be specified multiple times on the command line.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_33

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo', action='append')
>>> parser.parse_args('--foo 1 --foo 2'.split())
Namespace(foo=['1', '2'])
```

----------------------------------------

TITLE: Loading Objects with Python Unpickler
DESCRIPTION: Method to read and reconstruct a pickled object from the file object given to the Unpickler constructor. Returns the reconstituted object hierarchy.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pickle.rst#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
load()
```

----------------------------------------

TITLE: A Valid Function Call with Positional-Only Parameters
DESCRIPTION: This code demonstrates a valid function call that respects the new positional-only parameter syntax, showcasing how to correctly pass values to the function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
f(10, 20, 30, d=40, e=50, f=60)
```

----------------------------------------

TITLE: Element Repetition with itertools.repeat
DESCRIPTION: Shows how to use itertools.repeat() to create an iterator that repeats an element either infinitely or a specified number of times.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
itertools.repeat('abc') =>
  abc, abc, abc, abc, abc, abc, abc, abc, abc, abc, ...
itertools.repeat('abc', 5) =>
  abc, abc, abc, abc, abc
```

----------------------------------------

TITLE: Creating UUID Objects - Python UUID Class Examples
DESCRIPTION: Examples demonstrating different ways to create UUID objects using various input formats including hex strings, bytes, and integer values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/uuid.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
UUID('{12345678-1234-5678-1234-567812345678}')
UUID('12345678123456781234567812345678')
UUID('urn:uuid:12345678-1234-5678-1234-567812345678')
UUID(bytes=b'\x12\x34\x56\x78'*4)
UUID(bytes_le=b'\x78\x56\x34\x12\x34\x12\x78\x56' +
              b'\x12\x34\x56\x78\x12\x34\x56\x78')
UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))
UUID(int=0x12345678123456781234567812345678)
```

----------------------------------------

TITLE: Creating a Threaded UDP Server in Python
DESCRIPTION: Demonstrates how to create a threaded version of a UDP server by using the ThreadingMixIn class. The example shows the proper class inheritance order, with the mixin class coming first to correctly override methods from UDPServer.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/socketserver.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
class ThreadingUDPServer(ThreadingMixIn, UDPServer):
    pass
```

----------------------------------------

TITLE: Implementing Custom Set with ABC Mixin
DESCRIPTION: Complete example of implementing a custom Set class using collections.abc.Set as a mixin. Shows how to implement the required abstract methods while inheriting additional set operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.abc.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
class ListBasedSet(collections.abc.Set):
    ''' Alternate set implementation favoring space over speed
        and not requiring the set elements to be hashable. '''
    def __init__(self, iterable):
        self.elements = lst = []
        for value in iterable:
            if value not in lst:
                lst.append(value)

    def __iter__(self):
        return iter(self.elements)

    def __contains__(self, value):
        return value in self.elements

    def __len__(self):
        return len(self.elements)

s1 = ListBasedSet('abcdef')
s2 = ListBasedSet('defghi')
overlap = s1 & s2            # The __and__() method is supported automatically
```

----------------------------------------

TITLE: Illustrate ClassVar Usage and Type Checking Python
DESCRIPTION: Demonstrates the intended usage of `typing.ClassVar` by showing how setting the variable on the class is allowed, while setting it on an instance is flagged as an error by type checkers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_73

LANGUAGE: Python
CODE:
```
enterprise_d = Starship(3000)
enterprise_d.stats = {} # Error, setting class variable on instance
Starship.stats = {}     # This is OK
```

----------------------------------------

TITLE: Selecting Data from SQLite Table in Python
DESCRIPTION: Executes a SELECT query to retrieve the 'score' column from the 'movie' table. This demonstrates how to fetch data from a SQLite database.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
res = cur.execute("SELECT score FROM movie")
res.fetchall()
```

----------------------------------------

TITLE: Boolean Expression Assignments in Python
DESCRIPTION: Demonstrates how to assign the result of a Boolean expression to a variable using the logical operators. Shows a clear method to select the first non-empty string from a list of strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/datastructures.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
>>> string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'
>>> non_null = string1 or string2 or string3
>>> non_null
'Trondheim'
```

----------------------------------------

TITLE: Keyed Hashing for Authentication
DESCRIPTION: This snippet illustrates how to generate a keyed hash for authentication purposes using BLAKE2b. It demonstrates the process of hashing a message with a key to produce an authentication code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/hashlib.rst#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
>>> from hashlib import blake2b\n>>> h = blake2b(key=b'pseudorandom key', digest_size=16)\n>>> h.update(b'message data')\n>>> h.hexdigest()\n'3d363ff7401e02026f4a4687d4863ced'
```

----------------------------------------

TITLE: Modifying Python Module Search Path
DESCRIPTION: Shows how to modify the interpreter's module search path using sys.path.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/modules.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> import sys
>>> sys.path.append('/ufs/guido/lib/python')
```

----------------------------------------

TITLE: Calculating Logarithms in Python
DESCRIPTION: This function computes the natural logarithm of x or the logarithm to a specified base. It is valuable for mathematical computations involving logarithmic transformations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/math.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
.. function:: log(x[, base])

   With one argument, return the natural logarithm of *x* (to base *e*).

   With two arguments, return the logarithm of *x* to the given *base*,
   calculated as ``log(x)/log(base)``.
```

----------------------------------------

TITLE: Demonstrating F-String Quoting and Backslashes in Python
DESCRIPTION: Examples of using the same quoting type as the outer f-string inside a replacement field, and using backslashes in f-string replacement fields.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/lexical_analysis.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
>>> a = dict(x=2)
>>> f"abc {a["x"]} def"
'abc 2 def'

>>> a = ["a", "b", "c"]
>>> print(f"List a contains:\n{"\n".join(a)}")
List a contains:
a
b
c
```

----------------------------------------

TITLE: Demonstrating Addition with Context Precision in Python
DESCRIPTION: This doctest example illustrates how setting the global context precision affects standard decimal addition. It shows a scenario where adding zero to a sum can change the result due to the way standard addition handles rounding based on the current context and intermediate values, highlighting the importance of controlled conversion.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_32

LANGUAGE: python
CODE:
```
getcontext().prec = 3
>>> Decimal('3.4445') + Decimal('1.0023')
Decimal('4.45')
>>> Decimal('3.4445') + Decimal(0) + Decimal('1.0023')
Decimal('4.44')
```

----------------------------------------

TITLE: Mock Exhausted Side Effect - Python
DESCRIPTION: Illustrates what happens when a mock's side_effect is exhausted, leading to a StopIteration exception.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_70

LANGUAGE: python
CODE:
```
>>> order_mock = Mock(spec=Order, wraps=Order)
>>> order_mock.get_value.side_effect = ["first side effect value",
...                                     "another side effect value"]
>>> order_mock.get_value.return_value = "second"

>>> order_mock.get_value()
'first side effect value'
>>> order_mock.get_value()
'another side effect value'

>>> order_mock.get_value()
Traceback (most recent call last):
 ...
StopIteration
```

----------------------------------------

TITLE: Creating Hex Digests with BLAKE2b
DESCRIPTION: This snippet demonstrates how to create hex digests using the blake2b function from the hashlib library in Python. It allows for customization of the digest size.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/hashlib.rst#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
>>> blake2b(digest_size=10).hexdigest()\n'6fa1d8fcfd719046d762'\n>>> blake2b(digest_size=11).hexdigest()\n'eb6ec15daf9546254f0809'
```

LANGUAGE: Python
CODE:
```
>>> blake2s(digest_size=10).hexdigest()\n'1bf21a98c78a1c376ae9'\n>>> blake2s(digest_size=11).hexdigest()\n'567004bf96e4a25773ebf4'
```

----------------------------------------

TITLE: TypedDict with NotRequired (Class Syntax)
DESCRIPTION: Shows how to mark individual keys in a class-based `TypedDict` definition as non-required using the `NotRequired` type hint, indicating that instances of this TypedDict can optionally omit these keys.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_153

LANGUAGE: python
CODE:
```
class Point2D(TypedDict):
    x: int
    y: int
    label: NotRequired[str]
```

----------------------------------------

TITLE: Serving Files from a Specific Directory with Python HTTP Server
DESCRIPTION: This example command starts a Python HTTP server that serves files from a specified directory, instead of the current working directory. It leverages the --directory option introduced in Python 3.7.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.server.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
python -m http.server --directory /tmp/
```

----------------------------------------

TITLE: Implementing astimezone Method for Python datetime
DESCRIPTION: This code snippet shows the implementation of the astimezone method for the datetime class. It converts the datetime object to a new timezone while preserving the same UTC time.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
def astimezone(self, tz):
    if self.tzinfo is tz:
        return self
    # Convert self to UTC, and attach the new timezone object.
    utc = (self - self.utcoffset()).replace(tzinfo=tz)
    # Convert from UTC to tz's local time.
    return tz.fromutc(utc)
```

----------------------------------------

TITLE: Finding Adverbs and Their Positions with Regular Expressions in Python
DESCRIPTION: This snippet shows how to use re.finditer() to find all adverbs and their positions in a text. It demonstrates how to work with match objects to extract more detailed information about pattern matches.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
>>> text = "He was carefully disguised but captured quickly by police."
>>> for m in re.finditer(r"\w+ly\b", text):
...     print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0)))
07-16: carefully
40-47: quickly
```

----------------------------------------

TITLE: Implementing zip_longest in Python
DESCRIPTION: Implementation equivalent to the zip_longest function that aggregates elements from multiple iterables and fills missing values with a fillvalue when iterables have uneven lengths.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
def zip_longest(*iterables, fillvalue=None):
    # zip_longest('ABCD', 'xy', fillvalue='-') → Ax By C- D-

    iterators = list(map(iter, iterables))
    num_active = len(iterators)
    if not num_active:
        return

    while True:
        values = []
        for i, iterator in enumerate(iterators):
            try:
                value = next(iterator)
            except StopIteration:
                num_active -= 1
                if not num_active:
                    return
                iterators[i] = repeat(fillvalue)
                value = fillvalue
            values.append(value)
        yield tuple(values)
```

----------------------------------------

TITLE: Implementing str.title() in Python
DESCRIPTION: Shows the usage of the title() method to convert a string to title case, and provides a custom implementation using regular expressions to handle apostrophes correctly.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_33

LANGUAGE: python
CODE:
```
>>> 'Hello world'.title()
'Hello World'

>>> "they're bill's friends from the UK".title()
"They'Re Bill'S Friends From The Uk"

>>> import re
>>> def titlecase(s):
...     return re.sub(r"[A-Za-z]+('[A-Za-z]+)?",
...                   lambda mo: mo.group(0).capitalize(),
...                   s)
...
>>> titlecase("they're bill's friends.")
"They're Bill's Friends."
```

----------------------------------------

TITLE: Parallel File Copy Using ThreadPoolExecutor in Python
DESCRIPTION: Demonstrates how to use ThreadPoolExecutor to copy multiple files concurrently using a maximum of 4 worker threads. Uses the concurrent.futures and shutil modules to manage parallel execution.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
import concurrent.futures, shutil
with concurrent.futures.ThreadPoolExecutor(max_workers=4) as e:
    e.submit(shutil.copy, 'src1.txt', 'dest1.txt')
    e.submit(shutil.copy, 'src2.txt', 'dest2.txt')
    e.submit(shutil.copy, 'src3.txt', 'dest3.txt')
    e.submit(shutil.copy, 'src3.txt', 'dest4.txt')
```

----------------------------------------

TITLE: Multi-line With Statement with Parentheses in Python
DESCRIPTION: Demonstrates using parentheses to write multi-item context managers across multiple lines for better readability, a feature introduced in Python 3.10.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
with (
    A() as a,
    B() as b,
):
    SUITE
```

----------------------------------------

TITLE: Handling Invalid HTTP Requests in Python
DESCRIPTION: Shows how to handle an invalid HTTP request using http.client. The example makes a request to a non-existent page, checks the error status code, and properly closes the connection.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.client.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> # Example of an invalid request
>>> conn = http.client.HTTPSConnection("docs.python.org")
>>> conn.request("GET", "/parrot.spam")
>>> r2 = conn.getresponse()
>>> print(r2.status, r2.reason)
404 Not Found
>>> data2 = r2.read()
>>> conn.close()
```

----------------------------------------

TITLE: Unpack struct Data into a Named Tuple in Python
DESCRIPTION: Shows how to unpack binary data using the `struct` module and then use the results to create an instance of a `collections.namedtuple`, providing named access to the unpacked fields.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/struct.rst#_snippet_7

LANGUAGE: Python
CODE:
```
from collections import namedtuple
Student = namedtuple('Student', 'name serialnum school gradelevel')
Student._make(unpack('<10sHHb', record))
```

----------------------------------------

TITLE: Symlink Path Example
DESCRIPTION: Demonstrates creating and reading a symbolic link using Path methods
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
>>> p = Path('mylink')
>>> p.symlink_to('setup.py')
>>> p.readlink()
PosixPath('setup.py')
```

----------------------------------------

TITLE: Advanced Type Parameter Usage (PEP 695)
DESCRIPTION: Illustrates the use of the new syntax to declare type aliases or variables involving ParamSpec (**P), TypeVarTuple (*Ts), TypeVar with bounds (T: Hashable), and TypeVar with constraints (T: (int, str)).
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_4

LANGUAGE: Python
CODE:
```
type IntFunc[**P] = Callable[P, int]  # ParamSpec
type LabeledTuple[*Ts] = tuple[str, *Ts]  # TypeVarTuple
type HashableSequence[T: Hashable] = Sequence[T]  # TypeVar with bound
type IntOrStrSequence[T: (int, str)] = Sequence[T]  # TypeVar with constraints
```

----------------------------------------

TITLE: Network Address Iteration in Python
DESCRIPTION: Demonstrates how to iterate through usable addresses in a network and access network addresses using index notation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/ipaddress.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> net4 = ipaddress.ip_network('192.0.2.0/24')
>>> for x in net4.hosts():
...     print(x)  # doctest: +ELLIPSIS
192.0.2.1
192.0.2.2
192.0.2.3
192.0.2.4
...
192.0.2.252
192.0.2.253
192.0.2.254
```

----------------------------------------

TITLE: Extracting a File from a ZIP Archive in Python
DESCRIPTION: The `ZipFile.extract` method removes a specified member from the ZIP archive to a given directory, defaulting to the current working directory. The member can be specified by name or as a ZipInfo object. This snippet highlights handling absolute paths and illegal characters during extraction.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/zipfile.rst#2025-04-21_snippet_2



----------------------------------------

TITLE: Using await with pdb.set_trace_async (Python)
DESCRIPTION: Highlights the support for the `await` keyword when using the new `pdb.set_trace_async()` function. This allows stepping through and debugging asynchronous coroutines effectively.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_27

LANGUAGE: Python
CODE:
```
await
```

----------------------------------------

TITLE: Apply 'data' Extraction Filter Using extractall filter Parameter - Python
DESCRIPTION: This example calls `extractall` directly, passing the 'data' filter object (`tarfile.data_filter`) via the `filter` parameter. This method will fail if `tarfile.data_filter` is not available (on older Python versions), unlike the fallback method using `getattr`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_20

LANGUAGE: Python
CODE:
```
my_tarfile.extractall(filter=tarfile.data_filter)
```

----------------------------------------

TITLE: Comparing Direct Addition vs sum() for Floating-Point Addition in Python
DESCRIPTION: Demonstrates how the sum() function can mitigate precision loss during floating-point addition by using extended precision for intermediate calculations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/floatingpoint.rst#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
>>> 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 == 1.0
False
>>> sum([0.1] * 10) == 1.0
True
```

----------------------------------------

TITLE: Accessing Creation or Metadata Change Time with os.path
DESCRIPTION: The getctime function returns the ctime, indicating metadata change on Unix and creation time on Windows, as seconds from the epoch. It supports path-like objects from version 3.6.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
def getctime(path):
    return os.path.getctime(path)
```

----------------------------------------

TITLE: Mocking Magic Methods with Mock Class
DESCRIPTION: Examples of implementing magic methods using Mock objects, including string representation and iteration. Shows both function and mock-based implementations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_50

LANGUAGE: python
CODE:
```
>>> def __str__(self):
...     return 'fooble'
...
>>> mock = Mock()
>>> mock.__str__ = __str__
>>> str(mock)
'fooble'

>>> mock = Mock()
>>> mock.__str__ = Mock()
>>> mock.__str__.return_value = 'fooble'
>>> str(mock)
'fooble'

>>> mock = Mock()
>>> mock.__iter__ = Mock(return_value=iter([]))
>>> list(mock)
[]
```

----------------------------------------

TITLE: Extracting Type Arguments with get_args in Python
DESCRIPTION: Shows how the `get_args` function extracts the type arguments from a generic type hint. It returns a tuple of arguments for types like `Dict` and `Union`, and an empty tuple for non-generic types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_178

LANGUAGE: python
CODE:
```
assert get_args(int) == ()
assert get_args(Dict[int, str]) == (int, str)
assert get_args(Union[int, str]) == (int, str)
```

----------------------------------------

TITLE: Customizing Enum String Conversion - Python
DESCRIPTION: This snippet demonstrates how to override the __str__ method in an Enum class to change how Enum members are converted to strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/enum.rst#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
>>> class OtherStyle(Enum):
...     ALTERNATE = auto()
...     OTHER = auto()
...     SOMETHING_ELSE = auto()
...     def __str__(self):
...         return f'{self.name}'
...
>>> OtherStyle.ALTERNATE, str(OtherStyle.ALTERNATE), f"{OtherStyle.ALTERNATE}"
(<OtherStyle.ALTERNATE: 1>, 'ALTERNATE', 'ALTERNATE')
```

----------------------------------------

TITLE: Configuring Handlers with YAML in Python Logging
DESCRIPTION: A YAML example showing how to configure console and file handlers in Python's logging system. It demonstrates setting the handler class, formatter, level, filters, and handler-specific parameters like stream for console handler and filename/rotation settings for file handler.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.config.rst#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
handlers:
  console:
    class : logging.StreamHandler
    formatter: brief
    level   : INFO
    filters: [allow_foo]
    stream  : ext://sys.stdout
  file:
    class : logging.handlers.RotatingFileHandler
    formatter: precise
    filename: logconfig.log
    maxBytes: 1024
    backupCount: 3
```

----------------------------------------

TITLE: Python Interface Timing Examples
DESCRIPTION: Shows how to use timeit's Python interface to measure execution time using different approaches including direct string execution and lambda functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/timeit.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> import timeit
>>> timeit.timeit('"-".join(str(n) for n in range(100))', number=10000)
0.3018611848820001
>>> timeit.timeit('"-".join([str(n) for n in range(100)])', number=10000)
0.2727368790656328
>>> timeit.timeit('"-".join(map(str, range(100)))', number=10000)
0.23702679807320237
```

----------------------------------------

TITLE: Creating Alternate Class Constructor with classmethod
DESCRIPTION: Example of using a class method to create an alternate constructor, similar to dict.fromkeys(). This pattern is useful when you need different ways to initialize class instances.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
class Dict(dict):
    @classmethod
    def fromkeys(cls, iterable, value=None):
        "Emulate dict_fromkeys() in Objects/dictobject.c"
        d = cls()
        for key in iterable:
            d[key] = value
        return d
```

----------------------------------------

TITLE: Printing and Formatting Stack Traces in Python
DESCRIPTION: This example demonstrates different methods to print and format stack traces using the traceback module. It includes examples of print_stack, extract_stack, and format_stack functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
import traceback
def another_function():
    lumberstack()

def lumberstack():
    traceback.print_stack()
    print(repr(traceback.extract_stack()))
    print(repr(traceback.format_stack()))

another_function()
```

----------------------------------------

TITLE: Pure Path Operations in Python Pathlib
DESCRIPTION: Shows usage of PurePath classes for path manipulation without filesystem access.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> PurePath('setup.py')      # Running on a Unix machine
PurePosixPath('setup.py')

>>> PurePath('foo', 'some/path', 'bar')
PurePosixPath('foo/some/path/bar')
>>> PurePath(Path('foo'), Path('bar'))
PurePosixPath('foo/bar')

>>> PurePath()
PurePosixPath('.')
```

----------------------------------------

TITLE: Initializing StreamHandler in Python
DESCRIPTION: Creates a new instance of StreamHandler class. If a stream is specified, it's used for logging output; otherwise, sys.stderr is used.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
StreamHandler(stream=None)
```

----------------------------------------

TITLE: Attaching PDB Remotely to a Running Python Process via Command Line
DESCRIPTION: Illustrates how to use the `pdb` module's new `-p PID` command-line option to attach the Python debugger to a running process with the specified process ID (PID).
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_5

LANGUAGE: sh
CODE:
```
python -m pdb -p 1234
```

----------------------------------------

TITLE: Reusable Context Manager with ExitStack
DESCRIPTION: Shows how to use ExitStack as a reusable context manager with multiple callback registrations
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextlib.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
from contextlib import ExitStack

stack = ExitStack()
with stack:
    stack.callback(print, "Callback: from first context")
    print("Leaving first context")
```

----------------------------------------

TITLE: Demonstrating Argument Mutation Problem in Python Mocking
DESCRIPTION: Example showing how argument mutation can cause assertion failures when testing functions that modify their arguments, using Python's unittest.mock.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
>>> with patch('mymodule.frob') as mock_frob:
...     val = {6}
...     mymodule.grob(val)
...
>>> val
set()
>>> mock_frob.assert_called_with({6})
Traceback (most recent call last):
    ...
AssertionError: Expected: (({6},), {})
Called with: ((set(),), {})
```

----------------------------------------

TITLE: Defining Function with Keyword-Only Parameters in Python
DESCRIPTION: This snippet demonstrates how to define a function with keyword-only parameters. Keyword-only parameters must be specified in the function call with their names. There are no additional prerequisites except understanding Python's function definition syntax.
SOURCE: https://github.com/python/cpython/blob/main/Doc/glossary.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
def func(arg, *, kw_only1, kw_only2): ...
```

----------------------------------------

TITLE: Pdb interaction showing exceptions command usage
DESCRIPTION: Illustrates the usage of the `exceptions` command in Pdb to list and navigate between chained exceptions during a debugging session, showing the debugger prompt and output.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_27

LANGUAGE: none
CODE:
```
> example.py(5)out()
-> raise ValueError("reraise middle() error") from e

(Pdb) exceptions
  0 ZeroDivisionError('division by zero')
  1 ValueError('Middle fail')
> 2 ValueError('reraise middle() error')

(Pdb) exceptions 0
> example.py(16)inner()
-> 1 / x

(Pdb) up
> example.py(10)middle()
-> return inner(0)
```

----------------------------------------

TITLE: Entering Asynchronous Context Manager in Python unittest
DESCRIPTION: Asynchronous method to enter an asynchronous context manager and add its __aexit__ method as a cleanup function in IsolatedAsyncioTestCase.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_35

LANGUAGE: python
CODE:
```
async def enterAsyncContext(cm)
```

----------------------------------------

TITLE: Using split Method with Whitespace in Python bytes Objects
DESCRIPTION: Shows how the split() method behaves when no separator is specified, using whitespace as the default delimiter. Consecutive whitespace is treated as a single separator and leading/trailing whitespace is ignored.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_51

LANGUAGE: python
CODE:
```
>>> b'1 2 3'.split()
[b'1', b'2', b'3']
>>> b'1 2 3'.split(maxsplit=1)
[b'1', b'2 3']
>>> b'   1   2   3   '.split()
[b'1', b'2', b'3']
```

----------------------------------------

TITLE: Creating File Selection Dialogs in Tkinter - Python
DESCRIPTION: The functions `askopenfile`, `asksaveasfile`, `askopenfilename`, `asksaveasfilename`, and `askdirectory` facilitate the creation of modal dialog windows for selecting files or directories. They accept various options including `mode`, `title`, `initialdir`, etc., and return either file objects or filenames based on the user's selection.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dialog.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
.. function:: askopenfile(mode="r", **options)
              askopenfiles(mode="r", **options)
              asksaveasfile(mode="w", **options)
              askopenfilename(**options)
              askopenfilenames(**options)
              asksaveasfilename(**options)
              askdirectory(**options)

```

----------------------------------------

TITLE: Executing a script of SQL statements
DESCRIPTION: This snippet demonstrates executing a script consisting of multiple SQL statements using the executescript method on an SQLite cursor. It requires an active database connection and a cursor object. The script includes transactions and table creation statements, ensuring changes are committed to the database.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_22

LANGUAGE: Python
CODE:
```
# cur is an sqlite3.Cursor object
cur.executescript(\"\"\"
    BEGIN;
    CREATE TABLE person(firstname, lastname, age);
    CREATE TABLE book(title, author, published);
    CREATE TABLE publisher(name, address);
    COMMIT;
\"\"\")
```

----------------------------------------

TITLE: Preventing Subclassing with @final in Python
DESCRIPTION: Demonstrates how the `@final` decorator is used to prevent a class (`Leaf`) from being subclassed. Type checkers will report an error if a class attempts to inherit from a final class (`Other(Leaf)`).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_174

LANGUAGE: Python
CODE:
```
@final
class Leaf:
    ...
class Other(Leaf):  # Error reported by type checker
    ...
```

----------------------------------------

TITLE: Splitting URL with urlsplit Function in Python
DESCRIPTION: The urlsplit function splits a URL into its components, returning a 5-item named tuple. It's similar to urlparse but doesn't split params from the URL.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.parse.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
urlsplit(urlstring, scheme='', allow_fragments=True)
```

----------------------------------------

TITLE: Implementing ndiff Comparison
DESCRIPTION: Demonstration of using difflib's ndiff function to generate human-readable differences between text sequences
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/difflib.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
../includes/ndiff.py
```

----------------------------------------

TITLE: Demonstrating Lazy Evaluation of Type Aliases
DESCRIPTION: Shows how type aliases created with the 'type' statement are lazily evaluated, with exceptions only being raised when the __value__ attribute is accessed. This enables referring to types that don't exist yet during alias creation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/executionmodel.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> type Alias = 1/0
>>> Alias.__value__
Traceback (most recent call last):
  ...
ZeroDivisionError: division by zero
>>> def func[T: 1/0](): pass
>>> T = func.__type_params__[0]
>>> T.__bound__
Traceback (most recent call last):
  ...
ZeroDivisionError: division by zero
```

----------------------------------------

TITLE: Defining YAML Logging Formatters
DESCRIPTION: Example showing how to configure different types of formatters in YAML, including basic, default and custom formatter implementations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.config.rst#2025-04-21_snippet_4

LANGUAGE: yaml
CODE:
```
formatters:
  brief:
    format: '%(message)s'
  default:
    format: '%(asctime)s %(levelname)-8s %(name)-15s %(message)s'
    datefmt: '%Y-%m-%d %H:%M:%S'
  custom:
      (): my.package.customFormatterFactory
      bar: baz
      spam: 99.9
      answer: 42
```

----------------------------------------

TITLE: Implementing Descriptors with __set_name__ Protocol
DESCRIPTION: Shows how to use the new __set_name__ method in descriptors (PEP 487), which is called when a descriptor is assigned to a class attribute, providing descriptors with their attribute name in the owner class.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.6.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
class IntField:
    def __get__(self, instance, owner):
        return instance.__dict__[self.name]

    def __set__(self, instance, value):
        if not isinstance(value, int):
            raise ValueError(f'expecting integer in {self.name}')
        instance.__dict__[self.name] = value

    # this is the new initializer:
    def __set_name__(self, owner, name):
        self.name = name

class Model:
    int_field = IntField()
```

----------------------------------------

TITLE: Using Mock Objects with isinstance() in Python
DESCRIPTION: Shows how Mock objects can be configured to pass isinstance() checks for the objects they are replacing. This is achieved by setting the __class__ attribute or using spec/spec_set.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
>>> mock = Mock(spec=3)
>>> isinstance(mock, int)
True

>>> mock = Mock()
>>> mock.__class__ = dict
>>> isinstance(mock, dict)
True

>>> mock = Mock(spec=SomeClass)
>>> isinstance(mock, SomeClass)
True
>>> mock = Mock(spec_set=SomeClass())
>>> isinstance(mock, SomeClass)
True
```

----------------------------------------

TITLE: Accessing Module Attributes - Python
DESCRIPTION: Shows the standard way to access an attribute (`x`) on a module object (`m`) and its equivalence to accessing the item directly from the module's internal namespace dictionary (`m.__dict__`). Module attribute references are translated to lookups in this dictionary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_4

LANGUAGE: python
CODE:
```
m.x
```

LANGUAGE: python
CODE:
```
m.__dict__["x"]
```

----------------------------------------

TITLE: Basic Metaclass Definition and Application Python
DESCRIPTION: This example demonstrates the fundamental structure of a Python metaclass by inheriting from `type`. It shows how to apply a metaclass using the `metaclass` keyword argument in a class definition and confirms that subclasses of a class using a metaclass will also be instances of that metaclass.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_15

LANGUAGE: Python
CODE:
```
class Meta(type):
    pass

class MyClass(metaclass=Meta):
    pass

class MySubclass(MyClass):
    pass
```

----------------------------------------

TITLE: Using Asyncio Barrier in Python
DESCRIPTION: This example demonstrates the usage of the asyncio Barrier class. It creates a barrier, adds waiting tasks, and shows the barrier's state at different points of execution.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-sync.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
# create 2 new waiting tasks
asyncio.create_task(b.wait())
asyncio.create_task(b.wait())

await asyncio.sleep(0)
print(b)

# The third .wait() call passes the barrier
await b.wait()
print(b)
print("barrier passed")

await asyncio.sleep(0)
print(b)

asyncio.run(example_barrier())
```

----------------------------------------

TITLE: Implementing In-Order Tree Traversal with a Recursive Generator in Python
DESCRIPTION: This code snippet shows how to implement an in-order traversal of a binary tree using a recursive generator function in Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
# A recursive generator that generates Tree leaves in in-order.
def inorder(t):
    if t:
        for x in inorder(t.left):
            yield x

        yield t.label

        for x in inorder(t.right):
            yield x
```

----------------------------------------

TITLE: Introspecting Required and Optional Keys (__required_keys__, __optional_keys__)
DESCRIPTION: Demonstrates using `__required_keys__` and `__optional_keys__` attributes to introspect the required and optional keys of a `TypedDict`, including how inheritance affects these sets.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_162

LANGUAGE: python
CODE:
```
>>> class Point2D(TypedDict, total=False):
...     x: int
...     y: int
... 
>>> class Point3D(Point2D):
...     z: int
... 
>>> Point3D.__required_keys__ == frozenset({'z'})
True
>>> Point3D.__optional_keys__ == frozenset({'x', 'y'})
True
```

----------------------------------------

TITLE: Last Resort Handler Configuration
DESCRIPTION: StreamHandler configuration writing to sys.stderr with WARNING level, used as a fallback when no other handlers are configured. Can be disabled by setting to None.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
lastResort = StreamHandler(sys.stderr)
```

----------------------------------------

TITLE: Resource Management with Custom Context Manager
DESCRIPTION: This snippet outlines a custom context manager that utilizes ExitStack for resource acquisition and ensures clean releases, demonstrating its implementation in __enter__ and __exit__ methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextlib.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
from contextlib import contextmanager, AbstractContextManager, ExitStack\n\nclass ResourceManager(AbstractContextManager):\n\n    def __init__(self, acquire_resource, release_resource, check_resource_ok=None):\n        self.acquire_resource = acquire_resource\n        self.release_resource = release_resource\n        if check_resource_ok is None:\n            def check_resource_ok(resource):\n                return True\n        self.check_resource_ok = check_resource_ok\n\n    @contextmanager\n    def _cleanup_on_error(self):\n        with ExitStack() as stack:\n            stack.push(self)\n            yield\n            # The validation check passed and didn't raise an exception\n            # Accordingly, we want to keep the resource, and pass it\n            # back to our caller\n            stack.pop_all()\n\n    def __enter__(self):\n        resource = self.acquire_resource()\n        with self._cleanup_on_error():\n            if not self.check_resource_ok(resource):\n                msg = "Failed validation for {!r}"\n                raise RuntimeError(msg.format(resource))\n        return resource\n\n    def __exit__(self, *exc_details):\n        # We don't need to duplicate any of our resource release logic\n        self.release_resource()
```

----------------------------------------

TITLE: Iterating Usable Hosts with ip_network in Python
DESCRIPTION: Demonstrates how to use the `hosts()` method to return an iterator of usable host addresses in a network. Dependencies: `ip_network` from the `ipaddress` module in Python. The method excludes the network and broadcast addresses unless the prefix length is 31. Inputs: CIDR notation as input. Outputs: List of `IPv4Address` objects representing usable hosts.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ipaddress.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
list(ip_network('192.0.2.0/29').hosts())  #doctest: +NORMALIZE_WHITESPACE
[IPv4Address('192.0.2.1'), IPv4Address('192.0.2.2'),
 IPv4Address('192.0.2.3'), IPv4Address('192.0.2.4'),
 IPv4Address('192.0.2.5'), IPv4Address('192.0.2.6')]
```

----------------------------------------

TITLE: Item Getter Implementation
DESCRIPTION: Defines a function that dynamically fetches items from an object (e.g., list, dictionary) using the object's `__getitem__` method. It returns a callable object that, when called with an object, returns the item value(s). This function is useful as an argument to functions like `map` and `sorted`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/operator.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def itemgetter(*items):
    if len(items) == 1:
        item = items[0]
        def g(obj):
            return obj[item]
    else:
        def g(obj):
            return tuple(obj[item] for item in items)
    return g
```

----------------------------------------

TITLE: Releasing a Recursive Lock in Python's Multiprocessing Module
DESCRIPTION: This method releases a recursive lock, decrementing the recursion level. It raises AssertionError if called by a non-owner process or thread, or if the lock is unlocked.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_28

LANGUAGE: python
CODE:
```
def release():
    # Method implementation not shown in the original text
```

----------------------------------------

TITLE: Using QueueListener with Context Manager in Python
DESCRIPTION: Shows how to use the QueueListener class with Python's context manager protocol (with statement). This automatically handles starting and stopping the listener when entering and exiting the context block.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
with QueueListener(que, handler) as listener:
    # The queue listener automatically starts
    # when the 'with' block is entered.
    pass
# The queue listener automatically stops once
# the 'with' block is exited.
```

----------------------------------------

TITLE: Using urlsplit to parse URLs in Python 2.7
DESCRIPTION: Example of urlsplit behavior in Python 2.7, showing the RFC 3986 compliant parsing of unknown URL schemes, which now properly extracts the host from the URL.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.7.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
>>> import urlparse
>>> urlparse.urlsplit('invented://host/filename?query')
('invented', 'host', '/filename?query', '', '')
```

----------------------------------------

TITLE: Implementing Expected Failures in Python unittest
DESCRIPTION: Demonstrates how to use the @unittest.expectedFailure decorator to mark tests that are expected to fail. This is useful for documenting known issues or testing edge cases.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
class ExpectedFailureTestCase(unittest.TestCase):
    @unittest.expectedFailure
    def test_fail(self):
        self.assertEqual(1, 0, "broken")
```

----------------------------------------

TITLE: Making PUT Requests with http.client in Python
DESCRIPTION: Demonstrates using the PUT HTTP method to create or update a resource on a server. The example creates a request with file contents as the body and sends it to a local server.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.client.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> # This creates an HTTP request
>>> # with the content of BODY as the enclosed representation
>>> # for the resource http://localhost:8080/file
...
>>> import http.client
>>> BODY = "***filecontents***"
>>> conn = http.client.HTTPConnection("localhost", 8080)
>>> conn.request("PUT", "/file", BODY)
>>> response = conn.getresponse()
>>> print(response.status, response.reason)
200, OK
```

----------------------------------------

TITLE: Basic Timeit Command Line Usage - Python
DESCRIPTION: Demonstrates basic command line usage of timeit to compare string operations performance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/timeit.rst#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
$ python -m timeit -s "text = 'sample string'; char = 'g'" "char in text"
$ python -m timeit -s "text = 'sample string'; char = 'g'" "text.find(char)"
```

----------------------------------------

TITLE: Implementing Request Object Methods in Python
DESCRIPTION: This snippet defines several methods of the Request object, including get_method(), add_header(), add_unredirected_header(), has_header(), remove_header(), get_full_url(), set_proxy(), get_header(), and header_items(). These methods allow manipulation and retrieval of request details.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
.. method:: Request.get_method()

.. method:: Request.add_header(key, val)

.. method:: Request.add_unredirected_header(key, header)

.. method:: Request.has_header(header)

.. method:: Request.remove_header(header)

.. method:: Request.get_full_url()

.. method:: Request.set_proxy(host, type)

.. method:: Request.get_header(header_name, default=None)

.. method:: Request.header_items()
```

----------------------------------------

TITLE: Basic Usage of pprint.pp() in Python
DESCRIPTION: This snippet demonstrates the basic usage of pprint.pp() to display the entire contents of a Python dictionary. It shows how the function formats complex nested structures for better readability.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pprint.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> pprint.pp(project_info)
{'author': 'The Python Packaging Authority',
 'author_email': 'pypa-dev@googlegroups.com',
 'bugtrack_url': None,
 'classifiers': ['Development Status :: 3 - Alpha',
                'Intended Audience :: Developers',
                'License :: OSI Approved :: MIT License',
                'Programming Language :: Python :: 2',
                'Programming Language :: Python :: 2.6',
                'Programming Language :: Python :: 2.7',
                'Programming Language :: Python :: 3',
                'Programming Language :: Python :: 3.2',
                'Programming Language :: Python :: 3.3',
                'Programming Language :: Python :: 3.4',
                'Topic :: Software Development :: Build Tools'],
 'description': 'A sample Python project\n'
               '=======================\n'
               '\n'
               'This is the description file for the project.\n'
               '\n'
               'The file should use UTF-8 encoding and be written using '
               'ReStructured Text. It\n'
               'will be used to generate the project webpage on PyPI, and '
               'should be written for\n'
               'that purpose.\n'
               '\n'
               'Typical contents for this file would include an overview of '
               'the project, basic\n'
               'usage examples, etc. Generally, including the project '
               'changelog in here is not\n'
               'a good idea, although a simple "What\'s New" section for the '
               'most recent version\n'
               'may be appropriate.',
 'description_content_type': None,
 'docs_url': None,
 'download_url': 'UNKNOWN',
 'downloads': {'last_day': -1, 'last_month': -1, 'last_week': -1},
 'home_page': 'https://github.com/pypa/sampleproject',
 'keywords': 'sample setuptools development',
 'license': 'MIT',
 'maintainer': None,
 'maintainer_email': None,
 'name': 'sampleproject',
 'package_url': 'https://pypi.org/project/sampleproject/',
 'platform': 'UNKNOWN',
 'project_url': 'https://pypi.org/project/sampleproject/',
 'project_urls': {'Download': 'UNKNOWN',
                  'Homepage': 'https://github.com/pypa/sampleproject'},
 'release_url': 'https://pypi.org/project/sampleproject/1.2.0/',
 'requires_dist': None,
 'requires_python': None,
 'summary': 'A sample Python project',
 'version': '1.2.0'}
```

----------------------------------------

TITLE: Processing File Content in Chunks Using Assignment Expressions in Python
DESCRIPTION: This example shows how to use the walrus operator (:=) in a while loop to read and process file data in chunks. The assignment expression both assigns file.read(9000) to 'chunk' and checks if it's truthy (non-empty) for the while loop condition.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/expressions.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
while chunk := file.read(9000):
    process(chunk)
```

----------------------------------------

TITLE: Handling Argparse Conflict (Default Error) (Python)
DESCRIPTION: Demonstrates the default behavior of `ArgumentParser` when attempting to add an argument with an option string that already exists. By default, this raises an `ArgumentError` indicating the conflicting option string.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_17

LANGUAGE: python
CODE:
```
>>> import argparse
>>> parser = argparse.ArgumentParser(prog='PROG')
>>> parser.add_argument('-f', '--foo', help='old foo help')
>>> parser.add_argument('--foo', help='new foo help')
Traceback (most recent call last):
 ..
ArgumentError: argument --foo: conflicting option string(s): --foo
```

----------------------------------------

TITLE: Using Round Function for Comparing Floating-Point Numbers in Python
DESCRIPTION: Illustrates that the round() function cannot fully resolve floating-point comparison issues for values that already have representation errors.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/floatingpoint.rst#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> round(0.1, 1) + round(0.1, 1) + round(0.1, 1) == round(0.3, 1)
False
```

----------------------------------------

TITLE: Unquoting URL-encoded strings to bytes in Python
DESCRIPTION: The unquote_to_bytes function replaces %xx escapes with their single-octet equivalent and returns a bytes object. It can handle both str and bytes input.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.parse.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
unquote_to_bytes('a%26%EF')
```

----------------------------------------

TITLE: Using lower() Method in Python Bytes
DESCRIPTION: Demonstrates converting all uppercase ASCII characters in a bytes sequence to lowercase.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_60

LANGUAGE: python
CODE:
```
>>> b'Hello World'.lower()
b'hello world'
```

----------------------------------------

TITLE: String-Based Enum Values in Python
DESCRIPTION: Implementation of an Enum class using descriptive strings as values for each enum member
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_25

LANGUAGE: python
CODE:
```
class Color(Enum):
    RED = 'stop'
    GREEN = 'go'
    BLUE = 'too fast!'
```

----------------------------------------

TITLE: Demonstrating F-Strings as Docstrings in Python
DESCRIPTION: Example showing that f-strings cannot be used as docstrings in Python, even if they don't include expressions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/lexical_analysis.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
>>> def foo():
...     f"Not a docstring"
...
>>> foo.__doc__ is None
True
```

----------------------------------------

TITLE: Creating Multiple Titled Argument Groups
DESCRIPTION: Shows how to create multiple argument groups using `add_argument_group` with titles and descriptions, add arguments to each group, and print the help message to see the organized output.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_87

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser(prog='PROG', add_help=False)
>>> group1 = parser.add_argument_group('group1', 'group1 description')
>>> group1.add_argument('foo', help='foo help')
>>> group2 = parser.add_argument_group('group2', 'group2 description')
>>> group2.add_argument('--bar', help='bar help')
>>> parser.print_help()
usage: PROG [--bar BAR] foo

group1:
  group1 description

  foo    foo help

group2:
  group2 description

  --bar BAR  bar help
```

----------------------------------------

TITLE: Defining Module Initialization Function - Python C API (C)
DESCRIPTION: This C snippet defines the standard initialization function for an extension module using the PyMODINIT_FUNC macro. The function is named PyInit_spam and is responsible for creating and returning the module object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/intro.rst#_snippet_2

LANGUAGE: c
CODE:
```
PyMODINIT_FUNC
PyInit_spam(void)
{
    return PyModule_Create(&spam_module);
}
```

----------------------------------------

TITLE: Using assertWarnsRegex to Test Warning Messages in Python
DESCRIPTION: Shows how to use assertWarnsRegex to verify both that a warning is triggered and that its message matches a specific pattern. The method can be used directly with callable arguments or as a context manager.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
self.assertWarnsRegex(DeprecationWarning,
                       r'legacy_function\(\) is deprecated',
                       legacy_function, 'XYZ')
```

LANGUAGE: python
CODE:
```
with self.assertWarnsRegex(RuntimeWarning, 'unsafe frobnicating'):
    frobnicate('/etc/passwd')
```

----------------------------------------

TITLE: Using typing.Union with singledispatch in Python
DESCRIPTION: Demonstrates how to register implementations for multiple types using Union types. This allows a single implementation to handle multiple input types that share the same behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
>>> @fun.register
... def _(arg: int | float, verbose=False):
...     if verbose:
...         print("Strength in numbers, eh?", end=" ")
...     print(arg)
...
>>> from typing import Union
>>> @fun.register
... def _(arg: Union[list, set], verbose=False):
...     if verbose:
...         print("Enumerate this:")
...     for i, elem in enumerate(arg):
...         print(i, elem)
...
```

----------------------------------------

TITLE: Using Mock.assert_not_called() method in unittest.mock
DESCRIPTION: A new method assert_not_called() was added to the Mock class in the unittest.mock module to check if a mock object was called. This method verifies that the mock was not called during testing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
mock_object.assert_not_called()
```

----------------------------------------

TITLE: NullHandler for Logging in Python
DESCRIPTION: Demonstrates setting up a logging.NullHandler to suppress warnings about missing log handlers in applications that do not use logging but call library code that does, preventing spurious warnings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.1.rst#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
h = logging.NullHandler()
logging.getLogger("foo").addHandler(h)
```

----------------------------------------

TITLE: Generator Usage Example
DESCRIPTION: Demonstrates how to use the enhanced generator including sending values into it.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
>>> it = counter(10)
>>> print it.next()
0
>>> print it.next()
1
>>> print it.send(8)
8
>>> print it.next()
9
```

----------------------------------------

TITLE: Using Protocol for Complex Callable Signatures in Python
DESCRIPTION: Illustrates using a `Protocol` with a `__call__` method to type hint callables with complex signatures, such as those involving variadic arguments (`*args`) and keyword-only arguments. Includes examples demonstrating type checking behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_12

LANGUAGE: Python
CODE:
```
from collections.abc import Iterable
from typing import Protocol

class Combiner(Protocol):
    def __call__(self, *vals: bytes, maxlen: int | None = None) -> list[bytes]: ...

def batch_proc(data: Iterable[bytes], cb_results: Combiner) -> bytes:
    for item in data:
        ...

def good_cb(*vals: bytes, maxlen: int | None = None) -> list[bytes]:
    ...
def bad_cb(*vals: bytes, maxitems: int | None) -> list[bytes]:
    ...

batch_proc([], good_cb)  # OK
batch_proc([], bad_cb)   # Error! Argument 2 has incompatible type because of
                            # different name and kind in the callback
```

----------------------------------------

TITLE: String Partition Examples
DESCRIPTION: Demonstrates the new partition() and rpartition() string methods that split strings around a separator.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
>>> ('http://www.python.org').partition('://')
('http', '://', 'www.python.org')
>>> ('file:/usr/share/doc/index.html').partition('://')
('file:/usr/share/doc/index.html', '', '')
>>> (u'Subject: a quick question').partition(':')
(u'Subject', u':', u' a quick question')
>>> 'www.python.org'.rpartition('.')
('www.python', '.', 'org')
>>> 'www.python.org'.rpartition(':')
('', '', 'www.python.org')
```

----------------------------------------

TITLE: Setting Widget Options Using Dictionary Syntax in Tkinter
DESCRIPTION: Shows how to update widget options after creation using dictionary-style syntax.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
fred["fg"] = "red"
fred["bg"] = "blue"
```

----------------------------------------

TITLE: Implementing Multi-threaded Logging in Python
DESCRIPTION: This example demonstrates how to implement logging in a multi-threaded Python application. It shows logging from both the main thread and a worker thread.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
import logging
import threading
import time

def worker(arg):
    while not arg['stop']:
        logging.debug('Hi from myfunc')
        time.sleep(0.5)

def main():
    logging.basicConfig(level=logging.DEBUG, format='%(relativeCreated)6d %(threadName)s %(message)s')
    info = {'stop': False}
    thread = threading.Thread(target=worker, args=(info,))
    thread.start()
    while True:
        try:
            logging.debug('Hello from main')
            time.sleep(0.75)
        except KeyboardInterrupt:
            info['stop'] = True
            break
    thread.join()

if __name__ == '__main__':
    main()
```

----------------------------------------

TITLE: Parsing Email Message from Bytes Example
DESCRIPTION: Demonstrates how to use message_from_bytes() function to parse email message data from bytes at an interactive Python prompt.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.parser.rst#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
>>> import email
>>> msg = email.message_from_bytes(myBytes)  # doctest: +SKIP
```

----------------------------------------

TITLE: Customizing ArgumentParser Usage Message (Python)
DESCRIPTION: Illustrates how to override the default usage message generated by `ArgumentParser` using the `usage` argument. It also shows how the `%(prog)s` specifier can be used within the custom usage string.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_5

LANGUAGE: Python
CODE:
```
parser = argparse.ArgumentParser(prog='PROG', usage='%(prog)s [options]')
parser.add_argument('--foo', nargs='?', help='foo help')
parser.add_argument('bar', nargs='+', help='bar help')
parser.print_help()
```

----------------------------------------

TITLE: Adding the typing.override Decorator
DESCRIPTION: This adds the new typing.override decorator as specified in PEP 698. This decorator is used to explicitly indicate that a method overrides a method from a superclass, enabling static type checkers to verify the correctness of overrides.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.12.0a6.rst#2025-04-21_snippet_7



----------------------------------------

TITLE: Setting Global Argparse Argument Default (Python)
DESCRIPTION: Illustrates using the `argument_default` parameter in `ArgumentParser` to set a default value for all arguments, such as `argparse.SUPPRESS` to prevent attributes from being created for arguments that are not present on the command line. Shows parsing with and without the optional argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_15

LANGUAGE: python
CODE:
```
>>> import argparse
>>> parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS)
>>> parser.add_argument('--foo')
>>> parser.add_argument('bar', nargs='?')
>>> parser.parse_args(['--foo', '1', 'BAR'])
Namespace(bar='BAR', foo='1')
>>> parser.parse_args([])
Namespace()
```

----------------------------------------

TITLE: Adding TypedDict to typing Module
DESCRIPTION: Implementation of PEP 589 by adding TypedDict to the typing module for defining dictionaries with typed values.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0b1.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
TypedDict
```

----------------------------------------

TITLE: Finding Adverbs with Regular Expressions in Python
DESCRIPTION: This snippet demonstrates how to use re.findall() to find all occurrences of adverbs (words ending in 'ly') in a given text. It shows a simple pattern matching technique using regular expressions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
>>> text = "He was carefully disguised but captured quickly by police."
>>> re.findall(r"\w+ly\b", text)
['carefully', 'quickly']
```

----------------------------------------

TITLE: Modifying XML Elements in Python
DESCRIPTION: Example showing how to modify XML elements by changing text content and adding attributes, then writing the modified tree to a file.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
>>> for rank in root.iter('rank'):
...     new_rank = int(rank.text) + 1
...     rank.text = str(new_rank)
...     rank.set('updated', 'yes')
...
>>> tree.write('output.xml')
```

----------------------------------------

TITLE: Using Starmap to Call Functions
DESCRIPTION: The starmap function computes a given function using arguments from an iterable in tuple form, functioning as an alternative to map.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
.. function:: starmap(function, iterable)

   Make an iterator that computes the *function* using arguments obtained
   from the *iterable*.
```

----------------------------------------

TITLE: Demonstrating Any Type Compatibility (Python)
DESCRIPTION: Shows how the `Any` type behaves in assignments and function calls, highlighting that a static type checker allows any operation on `Any` and assignment to any type, potentially leading to runtime errors.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_42

LANGUAGE: Python
CODE:
```
from typing import Any

a: Any = None
a = []          # OK
a = 2           # OK

s: str = ''
s = a           # OK

def foo(item: Any) -> int:
    # Passes type checking; 'item' could be any type,
    # and that type might have a 'bar' method
    item.bar()
    ...
```

----------------------------------------

TITLE: Using Unicode in Python file handling with error messages
DESCRIPTION: Python code demonstrating how to include Unicode characters directly in string literals for error messages, specifically showing a French error message in a file handling operation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/unicode.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
try:
    with open('/tmp/input.txt', 'r') as f:
        ...
except OSError:
    # 'File not found' error message.
    print("Fichier non trouvé")
```

----------------------------------------

TITLE: TypedDict Example
DESCRIPTION: This example demonstrates how to create a TypedDict and retrieve its annotations in string format.  It creates a `Movie` TypedDict with `name` and `year` fields, and then uses `get_annotations` to retrieve the annotations as strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/annotationlib.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```

       >>> Movie = TypedDict("movie", {"name": str, "year": int})
       >>> get_annotations(Movie, format=Format.STRING)
       {'name': 'str', 'year': 'int'}

```

----------------------------------------

TITLE: Including Broken Links in Existence Checks with os.path
DESCRIPTION: The lexists function validates if a path exists, including broken symbolic links, equivalent to exists on systems without lstat support. It accepts path-like objects since version 3.6.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
def lexists(path):
    return os.path.lexists(path)
```

----------------------------------------

TITLE: Using string.Template for Basic Substitution and Error Handling in Python
DESCRIPTION: This snippet demonstrates the basic usage of the string.Template class. It shows how to create a template, perform successful substitution using 'substitute', handle errors like invalid placeholders (ValueError) and missing keys (KeyError) with 'substitute', and use 'safe_substitute' to gracefully handle missing keys.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/string.rst#_snippet_16

LANGUAGE: python
CODE:
```
>>> from string import Template
>>> s = Template('$who likes $what')
>>> s.substitute(who='tim', what='kung pao')
'tim likes kung pao'
>>> d = dict(who='tim')
>>> Template('Give $who $100').substitute(d)
Traceback (most recent call last):
...
ValueError: Invalid placeholder in string: line 1, col 11
>>> Template('$who likes $what').substitute(d)
Traceback (most recent call last):
...
KeyError: 'what'
>>> Template('$who likes $what').safe_substitute(d)
'tim likes $what'
```

----------------------------------------

TITLE: Adding Positional Argument with argparse Python
DESCRIPTION: Shows how to add a positional command-line argument using `ArgumentParser.add_argument` by providing a simple argument name without a '-' prefix.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_28

LANGUAGE: python
CODE:
```
>>> parser.add_argument('bar')
```

----------------------------------------

TITLE: Running Multiple Subprocesses in Parallel
DESCRIPTION: Shows how to execute multiple shell commands simultaneously using asyncio.gather() method
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-subprocess.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
async def main():
    await asyncio.gather(
        run('ls /zzz'),
        run('sleep 1; echo "hello"'))

asyncio.run(main())
```

----------------------------------------

TITLE: Inheriting from TypedDict
DESCRIPTION: Illustrates how a `TypedDict` can inherit from one or more other `TypedDict` types using the class-based syntax, combining their keys. An equivalent non-inheriting definition is also provided.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_157

LANGUAGE: python
CODE:
```
class Point3D(Point2D):
    z: int
```

LANGUAGE: python
CODE:
```
class Point3D(TypedDict):
    x: int
    y: int
    z: int
```

----------------------------------------

TITLE: Implementing Async Timer Context Manager
DESCRIPTION: Example of an async context manager used for timing code execution, demonstrating both context manager and decorator usage.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextlib.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
import time
from contextlib import asynccontextmanager

@asynccontextmanager
async def timeit():
    now = time.monotonic()
    try:
        yield
    finally:
        print(f'it took {time.monotonic() - now}s to run')

@timeit()
async def main():
    # ... async code ...
```

----------------------------------------

TITLE: Reading Configuration with RawConfigParser in Python
DESCRIPTION: Demonstrates reading configuration data using RawConfigParser, including type conversion methods like getfloat() and getint().
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
import configparser

config = configparser.RawConfigParser()
config.read('example.cfg')

# getfloat() raises an exception if the value is not a float
# getint() and getboolean() also do this for their respective types
a_float = config.getfloat('Section1', 'a_float')
an_int = config.getint('Section1', 'an_int')
print(a_float + an_int)

# Notice that the next output does not interpolate '%(bar)s' or '%(baz)s'.
# This is because we are using a RawConfigParser().
if config.getboolean('Section1', 'a_bool'):
    print(config.get('Section1', 'foo'))
```

----------------------------------------

TITLE: Relative Import Examples in Python Package Structure
DESCRIPTION: Examples showing valid relative import statements within a Python package hierarchy. Demonstrates different levels of relative imports using dot notation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/import.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from .moduleY import spam
from .moduleY import spam as ham
from . import moduleY
from ..subpackage1 import moduleY
from ..subpackage2.moduleZ import eggs
from ..moduleA import foo
```

----------------------------------------

TITLE: Deprecated Methods/Attributes in threading (Python)
DESCRIPTION: Several methods and attributes in the threading module are deprecated, primarily due to naming conventions. Users should use notify_all() instead of notifyAll(), is_set() instead of isSet(), and the daemon attribute instead of the isDaemon() and setDaemon() methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/deprecations/pending-removal-in-future.rst#_snippet_14

LANGUAGE: Python
CODE:
```
threading.Condition.notifyAll
```

LANGUAGE: Python
CODE:
```
threading.Event.isSet
```

LANGUAGE: Python
CODE:
```
threading.Thread.isDaemon
```

LANGUAGE: Python
CODE:
```
threading.Thread.setDaemon
```

----------------------------------------

TITLE: Initializing Counter with Atexit Module
DESCRIPTION: Demonstrates how to use atexit to save a counter's value automatically when the program terminates, reading initial value from a file and saving updated value at exit.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/atexit.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
try:
    with open('counterfile') as infile:
        _count = int(infile.read())
except FileNotFoundError:
    _count = 0

def incrcounter(n):
    global _count
    _count = _count + n

def savecounter():
    with open('counterfile', 'w') as outfile:
        outfile.write('%d' % _count)

import atexit

atexit.register(savecounter)
```

----------------------------------------

TITLE: Using islower Method in Python bytes Objects
DESCRIPTION: Shows the islower() method which checks if there is at least one lowercase ASCII character in the sequence and no uppercase ASCII characters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_57

LANGUAGE: python
CODE:
```
>>> b'hello world'.islower()
True
>>> b'Hello world'.islower()
False
```

----------------------------------------

TITLE: Receiving Datagram into Buffer from Socket with asyncio
DESCRIPTION: This method receives a datagram of up to nbytes from a socket into a buffer. Asynchronous version of socket.recvfrom_into(). Returns a tuple of (number of bytes received, remote address). The socket must be a non-blocking socket.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
.. method:: loop.sock_recvfrom_into(sock, buf, nbytes=0)
   :async:

   Receive a datagram of up to *nbytes* from *sock* into *buf*.
   Asynchronous version of
   :meth:`socket.recvfrom_into() <socket.socket.recvfrom_into>`.

   Return a tuple of (number of bytes received, remote address).

   *sock* must be a non-blocking socket.

```

----------------------------------------

TITLE: Getting CPU Count in Python
DESCRIPTION: Returns the number of CPUs in the system. This may not be equivalent to the number of CPUs the current process can use. Raises NotImplementedError if the CPU count cannot be determined.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
cpu_count()
```

----------------------------------------

TITLE: Running a coroutine threadsafe
DESCRIPTION: This code demonstrates running a coroutine object from a different OS thread using `asyncio.run_coroutine_threadsafe`.  It returns a `concurrent.futures.Future` object that can be used to retrieve the result of the coroutine.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-dev.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
async def coro_func():
    return await asyncio.sleep(1, 42)

# Later in another OS thread:

future = asyncio.run_coroutine_threadsafe(coro_func(), loop)
# Wait for the result:
result = future.result()
```

----------------------------------------

TITLE: Implementing accumulate function in Python
DESCRIPTION: This code snippet demonstrates the implementation of the accumulate function which returns accumulated sums or results from binary functions. It takes an iterable and optional function and initial value parameters, returning an iterator that yields running totals.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
def accumulate(iterable, function=operator.add, *, initial=None):
    'Return running totals'
    # accumulate([1,2,3,4,5]) → 1 3 6 10 15
    # accumulate([1,2,3,4,5], initial=100) → 100 101 103 106 110 115
    # accumulate([1,2,3,4,5], operator.mul) → 1 2 6 24 120

    iterator = iter(iterable)
    total = initial
    if initial is None:
        try:
            total = next(iterator)
        except StopIteration:
            return

    yield total
    for element in iterator:
        total = function(total, element)
        yield total
```

----------------------------------------

TITLE: Implementing Conditional Logging with Decorator in Python
DESCRIPTION: This snippet defines a decorator 'log_if_errors' that implements conditional logging. It uses a MemoryHandler to buffer log messages and only outputs them if an error occurs. The decorator can be customized with target handler, flush level, and buffer capacity.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_48

LANGUAGE: python
CODE:
```
import logging
from logging.handlers import MemoryHandler
import sys

logger = logging.getLogger(__name__)
logger.addHandler(logging.NullHandler())

def log_if_errors(logger, target_handler=None, flush_level=None, capacity=None):
    if target_handler is None:
        target_handler = logging.StreamHandler()
    if flush_level is None:
        flush_level = logging.ERROR
    if capacity is None:
        capacity = 100
    handler = MemoryHandler(capacity, flushLevel=flush_level, target=target_handler)

    def decorator(fn):
        def wrapper(*args, **kwargs):
            logger.addHandler(handler)
            try:
                return fn(*args, **kwargs)
            except Exception:
                logger.exception('call failed')
                raise
            finally:
                super(MemoryHandler, handler).flush()
                logger.removeHandler(handler)
        return wrapper

    return decorator

def write_line(s):
    sys.stderr.write('%s\n' % s)

def foo(fail=False):
    write_line('about to log at DEBUG ...')
    logger.debug('Actually logged at DEBUG')
    write_line('about to log at INFO ...')
    logger.info('Actually logged at INFO')
    write_line('about to log at WARNING ...')
    logger.warning('Actually logged at WARNING')
    if fail:
        write_line('about to log at ERROR ...')
        logger.error('Actually logged at ERROR')
        write_line('about to log at CRITICAL ...')
        logger.critical('Actually logged at CRITICAL')
    return fail

decorated_foo = log_if_errors(logger)(foo)

if __name__ == '__main__':
    logger.setLevel(logging.DEBUG)
    write_line('Calling undecorated foo with False')
    assert not foo(False)
    write_line('Calling undecorated foo with True')
    assert foo(True)
    write_line('Calling decorated foo with False')
    assert not decorated_foo(False)
    write_line('Calling decorated foo with True')
    assert decorated_foo(True)
```

----------------------------------------

TITLE: Marking Types for Type Checking Only with @type_check_only in Python
DESCRIPTION: Shows how the `@type_check_only` decorator is applied to classes or functions that should only be visible and used during static type checking, not at runtime. This is typically used for types defined in stub files.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_176

LANGUAGE: Python
CODE:
```
@type_check_only
class Response:  # private or not available at runtime
    code: int
    def get_header(self, name: str) -> str: ...

def fetch_response() -> Response: ...
```

----------------------------------------

TITLE: Using Descriptors in Dataclasses - Python
DESCRIPTION: This code snippet models a descriptor for integer conversion within a dataclass. It defines behavior for getting and setting a field value through the descriptor, demonstrating its use as a default value in the InventoryItem class.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dataclasses.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
class IntConversionDescriptor:
    def __init__(self, *, default):
        self._default = default

    def __set_name__(self, owner, name):
        self._name = "_" + name

    def __get__(self, obj, type):
        if obj is None:
            return self._default

        return getattr(obj, self._name, self._default)

    def __set__(self, obj, value):
        setattr(obj, self._name, int(value))

@dataclass
class InventoryItem:
    quantity_on_hand: IntConversionDescriptor = IntConversionDescriptor(default=100)

i = InventoryItem()
print(i.quantity_on_hand)   # 100
i.quantity_on_hand = 2.5    # calls __set__ with 2.5
print(i.quantity_on_hand)   # 2
```

----------------------------------------

TITLE: Implementing Qt GUI for Logging in Python
DESCRIPTION: Demonstrates how to create a Qt-based GUI for displaying log messages in a Python application. It includes a custom QtHandler, a Worker thread, and a main Window class.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_56

LANGUAGE: python
CODE:
```
import datetime
import logging
import random
import sys
import time

# Deal with minor differences between different Qt packages
try:
    from PySide6 import QtCore, QtGui, QtWidgets
    Signal = QtCore.Signal
    Slot = QtCore.Slot
except ImportError:
    try:
        from PyQt6 import QtCore, QtGui, QtWidgets
        Signal = QtCore.pyqtSignal
        Slot = QtCore.pyqtSlot
    except ImportError:
        try:
            from PySide2 import QtCore, QtGui, QtWidgets
            Signal = QtCore.Signal
            Slot = QtCore.Slot
        except ImportError:
            from PyQt5 import QtCore, QtGui, QtWidgets
            Signal = QtCore.pyqtSignal
            Slot = QtCore.pyqtSlot

logger = logging.getLogger(__name__)


#
# Signals need to be contained in a QObject or subclass in order to be correctly
# initialized.
#
class Signaller(QtCore.QObject):
    signal = Signal(str, logging.LogRecord)

#
# Output to a Qt GUI is only supposed to happen on the main thread. So, this
# handler is designed to take a slot function which is set up to run in the main
# thread. In this example, the function takes a string argument which is a
# formatted log message, and the log record which generated it. The formatted
# string is just a convenience - you could format a string for output any way
# you like in the slot function itself.
#
# You specify the slot function to do whatever GUI updates you want. The handler
# doesn't know or care about specific UI elements.
#
class QtHandler(logging.Handler):
    def __init__(self, slotfunc, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.signaller = Signaller()
        self.signaller.signal.connect(slotfunc)

    def emit(self, record):
        s = self.format(record)
        self.signaller.signal.emit(s, record)

#
# This example uses QThreads, which means that the threads at the Python level
# are named something like "Dummy-1". The function below gets the Qt name of the
# current thread.
#
def ctname():
    return QtCore.QThread.currentThread().objectName()


#
# Used to generate random levels for logging.
#
LEVELS = (logging.DEBUG, logging.INFO, logging.WARNING, logging.ERROR,
          logging.CRITICAL)

#
# This worker class represents work that is done in a thread separate to the
# main thread. The way the thread is kicked off to do work is via a button press
# that connects to a slot in the worker.
#
# Because the default threadName value in the LogRecord isn't much use, we add
# a qThreadName which contains the QThread name as computed above, and pass that
# value in an "extra" dictionary which is used to update the LogRecord with the
# QThread name.
#
# This example worker just outputs messages sequentially, interspersed with
# random delays of the order of a few seconds.
#
class Worker(QtCore.QObject):
    @Slot()
    def start(self):
        extra = {'qThreadName': ctname() }
        logger.debug('Started work', extra=extra)
        i = 1
        # Let the thread run until interrupted. This allows reasonably clean
        # thread termination.
        while not QtCore.QThread.currentThread().isInterruptionRequested():
            delay = 0.5 + random.random() * 2
            time.sleep(delay)
            try:
                if random.random() < 0.1:
                    raise ValueError('Exception raised: %d' % i)
                else:
                    level = random.choice(LEVELS)
                    logger.log(level, 'Message after delay of %3.1f: %d', delay, i, extra=extra)
            except ValueError as e:
                logger.exception('Failed: %s', e, extra=extra)
            i += 1

#
# Implement a simple UI for this cookbook example. This contains:
#
# * A read-only text edit window which holds formatted log messages
# * A button to start work and log stuff in a separate thread
# * A button to log something from the main thread
# * A button to clear the log window
#
class Window(QtWidgets.QWidget):

    COLORS = {
        logging.DEBUG: 'black',
        logging.INFO: 'blue',
        logging.WARNING: 'orange',
        logging.ERROR: 'red',
        logging.CRITICAL: 'purple',
    }

    def __init__(self, app):
        super().__init__()
        self.app = app
        self.textedit = te = QtWidgets.QPlainTextEdit(self)
        # Set whatever the default monospace font is for the platform
        f = QtGui.QFont('nosuchfont')
        if hasattr(f, 'Monospace'):
            f.setStyleHint(f.Monospace)
        else:
            f.setStyleHint(f.StyleHint.Monospace)  # for Qt6
        te.setFont(f)
        te.setReadOnly(True)
        PB = QtWidgets.QPushButton
        self.work_button = PB('Start background work', self)
        self.log_button = PB('Log a message at a random level', self)
        self.clear_button = PB('Clear log window', self)
        self.handler = h = QtHandler(self.update_status)
        # Remember to use qThreadName rather than threadName in the format string.
        fs = '%(asctime)s %(qThreadName)-12s %(levelname)-8s %(message)s'
        formatter = logging.Formatter(fs)
        h.setFormatter(formatter)
        logger.addHandler(h)
        # Set up to terminate the QThread when we exit
        app.aboutToQuit.connect(self.force_quit)

        # Lay out all the widgets
        layout = QtWidgets.QVBoxLayout(self)
        layout.addWidget(te)
        layout.addWidget(self.work_button)
        layout.addWidget(self.log_button)
        layout.addWidget(self.clear_button)
        self.setFixedSize(900, 400)

        # Connect the non-worker slots and signals
        self.log_button.clicked.connect(self.manual_update)
        self.clear_button.clicked.connect(self.clear_display)

        # Start a new worker thread and connect the slots for the worker
        self.start_thread()
        self.work_button.clicked.connect(self.worker.start)
        # Once started, the button should be disabled
        self.work_button.clicked.connect(lambda : self.work_button.setEnabled(False))

    def start_thread(self):
        self.worker = Worker()
        self.worker_thread = QtCore.QThread()
        self.worker.setObjectName('Worker')
        self.worker_thread.setObjectName('WorkerThread')  # for qThreadName
        self.worker.moveToThread(self.worker_thread)
        # This will start an event loop in the worker thread
        self.worker_thread.start()

    def kill_thread(self):
        # Just tell the worker to stop, then tell it to quit and wait for that
        # to happen
        self.worker_thread.requestInterruption()
        if self.worker_thread.isRunning():
            self.worker_thread.quit()
            self.worker_thread.wait()
        else:
            print('worker has already exited.')

    def force_quit(self):
```

----------------------------------------

TITLE: Optimizing Memory Usage of UUID Class - Python
DESCRIPTION: Optimization of UUID class memory footprint using __slots__. This modification reduces memory consumption for UUID object instances.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
uuid.UUID.__slots__ = []  # Memory optimization
```

----------------------------------------

TITLE: Using unittest.main with increased verbosity
DESCRIPTION: Example of using unittest.main() with the verbosity parameter set to 2 for more detailed test output information. This provides more comprehensive test result information during execution.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_40

LANGUAGE: python
CODE:
```
if __name__ == '__main__':
    unittest.main(verbosity=2)
```

----------------------------------------

TITLE: Create Uncompressed tar Archive Using 'with' Statement - Python
DESCRIPTION: This example shows the preferred way to create a new tar archive using the `with` statement. This ensures the archive is properly closed even if errors occur. It creates an uncompressed tar file (`sample.tar`) and adds specified files.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_33

LANGUAGE: Python
CODE:
```
import tarfile
with tarfile.open("sample.tar", "w") as tar:
       for name in ["foo", "bar", "quux"]:
           tar.add(name)
```

----------------------------------------

TITLE: IntFlag Class Definition and Usage in Python
DESCRIPTION: Demonstrates creating an IntFlag enum with auto-generated values, supporting bitwise operations and integer interactions
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/enum.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
from enum import IntFlag, auto
class Color(IntFlag):
    RED = auto()
    GREEN = auto()
    BLUE = auto()

Color.RED & 2
Color.RED | 2
Color.RED + 2
```

----------------------------------------

TITLE: Python Script with Python 3 Shebang
DESCRIPTION: This snippet shows modifying the shebang line to `#! python3` to explicitly request that the script be run using the latest installed Python 3.x interpreter via the Windows launcher. This overrides the default behavior for scripts.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/windows.rst#_snippet_28

LANGUAGE: python
CODE:
```
#! python3
import sys
sys.stdout.write("hello from Python %s\n" % (sys.version,))
```

----------------------------------------

TITLE: UDP Server Handler Implementation in Python
DESCRIPTION: A UDP server handler that processes datagram packets. Implements a BaseRequestHandler for UDP connections with explicit client addressing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/socketserver.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
import socketserver

class MyUDPHandler(socketserver.BaseRequestHandler):
    """
    This class works similar to the TCP handler class, except that
    self.request consists of a pair of data and client socket, and since
    there is no connection the client address must be given explicitly
    when sending data back via sendto().
    """

    def handle(self):
        data = self.request[0].strip()
        socket = self.request[1]
        print(f"{self.client_address[0]} wrote:")
        print(data)
        socket.sendto(data.upper(), self.client_address)

if __name__ == "__main__":
    HOST, PORT = "localhost", 9999
    with socketserver.UDPServer((HOST, PORT), MyUDPHandler) as server:
        server.serve_forever()
```

----------------------------------------

TITLE: Defining NamedTuple with Functional Syntax (Tuple List)
DESCRIPTION: Presents an alternative functional syntax for creating a `NamedTuple` class, where fields are specified as a list of tuples containing the field name and its type.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_140

LANGUAGE: python
CODE:
```
Employee = NamedTuple('Employee', [('name', str), ('id', int)])
```

----------------------------------------

TITLE: Upgrading Connection to TLS with asyncio
DESCRIPTION: This method upgrades an existing transport-based connection to TLS by inserting a TLS coder/decoder between the transport and protocol. It creates a two-interface instance that handles the TLS communication.  The method returns the created two-interface instance or None if the transport is already closing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
.. method:: loop.start_tls(transport, protocol, \
               sslcontext, *, server_side=False, \
               server_hostname=None, ssl_handshake_timeout=None, \
               ssl_shutdown_timeout=None)
   :async:

   Upgrade an existing transport-based connection to TLS.

   Create a TLS coder/decoder instance and insert it between the *transport*
   and the *protocol*. The coder/decoder implements both *transport*-facing
   protocol and *protocol*-facing transport.

   Return the created two-interface instance. After *await*, the *protocol*
   must stop using the original *transport* and communicate with the returned
   object only because the coder caches *protocol*-side data and sporadically
   exchanges extra TLS session packets with *transport*.

   In some situations (e.g. when the passed transport is already closing) this
   may return ``None``.

   Parameters:

   * *transport* and *protocol* instances that methods like
     :meth:`~loop.create_server` and
     :meth:`~loop.create_connection` return.

   * *sslcontext*: a configured instance of :class:`~ssl.SSLContext`.

   * *server_side* pass ``True`` when a server-side connection is being
     upgraded (like the one created by :meth:`~loop.create_server`).

   * *server_hostname*: sets or overrides the host name that the target
     server's certificate will be matched against.

   * *ssl_handshake_timeout* is (for a TLS connection) the time in seconds to
     wait for the TLS handshake to complete before aborting the connection.
     ``60.0`` seconds if ``None`` (default).

   * *ssl_shutdown_timeout* is the time in seconds to wait for the SSL shutdown
     to complete before aborting the connection. ``30.0`` seconds if ``None``
     (default).

```

----------------------------------------

TITLE: Basic Mock Subclass Example
DESCRIPTION: Demonstrates creating and using a mock subclass with assertions about instance types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_40

LANGUAGE: python
CODE:
```
mymock = Subclass()
mymock.foo
assert isinstance(mymock, Subclass)
assert not isinstance(mymock.foo, Subclass)
assert not isinstance(mymock(), Subclass)
```

----------------------------------------

TITLE: Debug Statement Using pdb.run()
DESCRIPTION: Executes a given statement (as a string or code object) under debugger control. The debugger prompt appears before execution starts, allowing breakpoints and stepping. Useful for debugging short code snippets or expressions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_4

LANGUAGE: Python
CODE:
```
import pdb
def f(x):
    print(1 / x)
pdb.run("f(2)")
```

----------------------------------------

TITLE: Summarizing an address range in ipaddress
DESCRIPTION: This code shows how to summarize a range of IP addresses into a list of IPv4Network objects using the summarize_address_range function. It takes the first and last IP addresses in the range and returns an iterator that yields the summarized networks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ipaddress.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
>>> [ipaddr for ipaddr in ipaddress.summarize_address_range(
...    ipaddress.IPv4Address('192.0.2.0'),
...    ipaddress.IPv4Address('192.0.2.130'))]
[IPv4Network('192.0.2.0/25'), IPv4Network('192.0.2.128/31'), IPv4Network('192.0.2.130/32')]

```

----------------------------------------

TITLE: State Management with Multiple Methods in Python
DESCRIPTION: Demonstrates object-oriented state management with multiple methods sharing state.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_27

LANGUAGE: python
CODE:
```
class counter:
    value = 0

    def set(self, x):
        self.value = x

    def up(self):
        self.value = self.value + 1

    def down(self):
        self.value = self.value - 1
```

----------------------------------------

TITLE: Weather Class with Mutable Station ID
DESCRIPTION: Implements Weather class with mutable station_id, showing proper hash and equality method implementation for lru_cache compatibility.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_63

LANGUAGE: python
CODE:
```
class Weather:
    "Example with a mutable station identifier"

    def __init__(self, station_id):
        self.station_id = station_id

    def change_station(self, station_id):
        self.station_id = station_id

    def __eq__(self, other):
        return self.station_id == other.station_id

    def __hash__(self):
        return hash(self.station_id)

    @lru_cache(maxsize=20)
    def historic_rainfall(self, date, units='cm'):
        'Rainfall on a given date'
        # Depends on the station_id, date, and units.
```

----------------------------------------

TITLE: Implementing HTTPDigestAuthHandler for Remote Host Authentication in Python
DESCRIPTION: HTTPDigestAuthHandler handles digest authentication with the remote host. It tries digest authentication before falling back to basic authentication if both handlers are present.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
class HTTPDigestAuthHandler(password_mgr=None):
```

----------------------------------------

TITLE: Itertools Recipe: first_true function
DESCRIPTION: Function that returns the first true value in an iterable or a default value if none are found, optionally applying a predicate function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_36

LANGUAGE: python
CODE:
```
def first_true(iterable, default=False, predicate=None):
    "Returns the first true value or the *default* if there is no true value."
    # first_true([a,b,c], x) → a or b or c or x
    # first_true([a,b], x, f) → a if f(a) else b if f(b) else x
    return next(filter(predicate, iterable), default)
```

----------------------------------------

TITLE: Adding Section to ConfigParser
DESCRIPTION: Method signature for adding a new section to ConfigParser instance. Raises DuplicateSectionError if section exists, ValueError if default section name is used, and UnnamedSectionDisabledError for unsupported unnamed sections.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_24

LANGUAGE: python
CODE:
```
add_section(section)
```

----------------------------------------

TITLE: Converting Time Tuple to Unix Timestamp - Python
DESCRIPTION: This function converts a time tuple into its corresponding Unix timestamp, allowing for easier timestamp manipulations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/calendar.rst#2025-04-21_snippet_20

LANGUAGE: Python
CODE:
```
.. function:: timegm(tuple)
```

----------------------------------------

TITLE: Generic Error Handling for IP Address Validation
DESCRIPTION: Example showing how to handle IP address validation errors generically using ValueError as the parent class for all ipaddress module-specific exceptions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/ipaddress.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
try:
    network = ipaddress.IPv4Network(address)
except ValueError:
    print('address/netmask is invalid for IPv4:', address)
```

----------------------------------------

TITLE: Receiving Datagram from Socket with asyncio
DESCRIPTION: This method receives a datagram of up to bufsize from a socket. It is an asynchronous version of socket.recvfrom(). It returns a tuple containing the received data and the remote address. The socket must be a non-blocking socket.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
.. method:: loop.sock_recvfrom(sock, bufsize)
   :async:

   Receive a datagram of up to *bufsize* from *sock*.  Asynchronous version of
   :meth:`socket.recvfrom() <socket.socket.recvfrom>`.

   Return a tuple of (received data, remote address).

   *sock* must be a non-blocking socket.

```

----------------------------------------

TITLE: Auto-Numbering Enum Implementation
DESCRIPTION: Custom Enum implementation with auto-numbering functionality using __new__ method
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_26

LANGUAGE: python
CODE:
```
class AutoNumber(Enum):
    def __new__(cls):
        value = len(cls.__members__) + 1
        obj = object.__new__(cls)
        obj._value_ = value
        return obj

class Color(AutoNumber):
    RED = ()
    GREEN = ()
    BLUE = ()
```

----------------------------------------

TITLE: Creating a Dataclass Using make_dataclass() in Python
DESCRIPTION: Shows how to programmatically create a dataclass using the make_dataclass() function. It demonstrates defining fields, methods, and customizing dataclass behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dataclasses.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
C = make_dataclass('C',
                   [('x', int),
                     'y',
                    ('z', int, field(default=5))],
                   namespace={'add_one': lambda self: self.x + 1})
```

----------------------------------------

TITLE: Connecting Remote Client to Manager in Python
DESCRIPTION: Example showing how a client can connect to a remote manager server and access the shared queue. Includes code for both sending and receiving data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_34

LANGUAGE: python
CODE:
```
>>> from multiprocessing.managers import BaseManager
>>> class QueueManager(BaseManager): pass
>>> QueueManager.register('get_queue')
>>> m = QueueManager(address=('foo.bar.org', 50000), authkey=b'abracadabra')
>>> m.connect()
>>> queue = m.get_queue()
>>> queue.put('hello')
```

----------------------------------------

TITLE: Function Declaration with Trailing Commas
DESCRIPTION: Example of modified Python grammar allowing trailing commas in function parameter lists, improving consistency with other syntactic elements that already allowed trailing commas.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.6.0a1.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
def f(*, a = 3,): pass
```

----------------------------------------

TITLE: Using itertools.accumulate for Scanning in Python
DESCRIPTION: The itertools module now includes the accumulate function, inspired by Numpy and APL's scan operator. It calculates accumulated sums or results by applying the provided function, useful for tasks like creating cumulative distributions. It expects an iterable input and supports optional function arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
>>> from itertools import accumulate
>>> list(accumulate([8, 2, 50]))
>>> prob_dist = [0.1, 0.4, 0.2, 0.3]
>>> list(accumulate(prob_dist))      # cumulative probability distribution
```

----------------------------------------

TITLE: Basic Process Creation with freeze_support Example
DESCRIPTION: Demonstrates basic process creation with freeze_support() for Windows compatibility when freezing executables. Shows the main entry point pattern with process creation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
print('hello world!')

if __name__ == '__main__':
    freeze_support()
    Process(target=f).start()
```

----------------------------------------

TITLE: Merging Multiple Sorted Inputs - Python
DESCRIPTION: The `merge` function merges multiple sorted iterables into a single sorted output and returns an iterator over the sorted values. It is optimized for performance with already sorted inputs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/heapq.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
def merge(*iterables, key=None, reverse=False):
    """
    Merge multiple sorted inputs into a single sorted output (for example, merge
    timestamped entries from multiple log files). Returns an :term:`iterator`
    over the sorted values.
    """
```

----------------------------------------

TITLE: Creating Iterator Copies with itertools.tee
DESCRIPTION: Shows how to create multiple independent copies of an iterator using itertools.tee().
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
itertools.tee( itertools.count() ) =>
   iterA, iterB

where iterA ->
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ...

and   iterB ->
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ...
```

----------------------------------------

TITLE: Asserting Inferred Type with typing.assert_type (Python)
DESCRIPTION: New function typing.assert_type() is used to ask a type checker to confirm that the type it has inferred for a given expression matches the given type. At runtime it simply returns the received value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.11.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
typing.assert_type()
```

----------------------------------------

TITLE: Implementing load_tests function for TestCase classes
DESCRIPTION: Example implementation of the load_tests protocol that creates a custom TestSuite from a specific set of TestCase classes. This allows modules to customize how their tests are loaded during test discovery.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_42

LANGUAGE: python
CODE:
```
test_cases = (TestCase1, TestCase2, TestCase3)

def load_tests(loader, tests, pattern):
    suite = TestSuite()
    for test_class in test_cases:
        tests = loader.loadTestsFromTestCase(test_class)
        suite.addTests(tests)
    return suite
```

----------------------------------------

TITLE: Environment Variable Modification Example
DESCRIPTION: Example demonstrating setting an environment variable using os.environ on Windows, showing automatic uppercase conversion of keys.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
environ['monty'] = 'python'
```

----------------------------------------

TITLE: Using os.path.commonpath
DESCRIPTION: The os.path.commonpath function is used to find the longest common sub-path of each passed pathname, returning a valid path. This snippet showcases how commonpath provides a more useful result compared to the os.path.commonprefix function. No specific dependencies are needed beyond the os module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_22

LANGUAGE: Python
CODE:
```
>>> os.path.commonprefix(['/usr/lib', '/usr/local/lib'])
'/usr/l'

>>> os.path.commonpath(['/usr/lib', '/usr/local/lib'])
'/usr'
```

----------------------------------------

TITLE: Asserting datetime adaptation in Python with sqlite3
DESCRIPTION: This snippet demonstrates how to adapt and convert datetime objects to and from SQLite timestamp format. It uses the adapt_datetime_epoch and convert_timestamp functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_28

LANGUAGE: Python
CODE:
```
# Dropping microseconds as adapt_datetime_epoch truncates fractional second part.
now = datetime.datetime.now().replace(microsecond=0)
current_timestamp = int(now.timestamp())

assert adapt_datetime_epoch(now) == current_timestamp
assert convert_timestamp(str(current_timestamp).encode()) == now
```

----------------------------------------

TITLE: Defining abstract class methods in Python
DESCRIPTION: This snippet shows how to use the new abstractclassmethod and abstractstaticmethod decorators from the abc module to define abstract class methods in abstract base classes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_36

LANGUAGE: python
CODE:
```
class Temperature(metaclass=abc.ABCMeta):
    @abc.abstractclassmethod
    def from_fahrenheit(cls, t):
        ...
    @abc.abstractclassmethod
    def from_celsius(cls, t):
        ...
```

----------------------------------------

TITLE: Using Unique Decorator for Enumerations in Python
DESCRIPTION: This snippet demonstrates the use of the @unique decorator from the enum module, which ensures that an enumeration cannot have duplicate values. If duplicates are detected, it raises a ValueError.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/enum.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
>>> from enum import Enum, unique
>>> @unique
... class Mistake(Enum):
...     ONE = 1
...     TWO = 2
...     THREE = 3
...     FOUR = 3
...
Traceback (most recent call last):
...
ValueError: duplicate values found in <enum 'Mistake'>: FOUR -> THREE
```

----------------------------------------

TITLE: Implementing Context Manager Exit in Python
DESCRIPTION: This method is called when exiting a runtime context established by `__enter__`. It handles cleanup and receives exception details if an exception occurred. Returning a true value suppresses the exception, otherwise, it's propagated normally.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_31

LANGUAGE: Python
CODE:
```
object.__exit__(self, exc_type, exc_value, traceback)
```

----------------------------------------

TITLE: Itertools Recipe: flatten function
DESCRIPTION: Function that flattens one level of nesting in a list of lists using chain.from_iterable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
def flatten(list_of_lists):
    "Flatten one level of nesting."
    return chain.from_iterable(list_of_lists)
```

----------------------------------------

TITLE: Demonstrating getcallargs Function Usage in Python
DESCRIPTION: This snippet shows how to use the getcallargs function from the inspect module to bind arguments to a function's parameter names. It includes examples of successful calls and an error case.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/inspect.rst#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
>>> from inspect import getcallargs
>>> def f(a, b=1, *pos, **named):
...     pass
...
>>> getcallargs(f, 1, 2, 3) == {'a': 1, 'named': {}, 'b': 2, 'pos': (3,)}
True
>>> getcallargs(f, a=2, x=4) == {'a': 2, 'named': {'x': 4}, 'b': 1, 'pos': ()}
True
>>> getcallargs(f)
Traceback (most recent call last):
...
TypeError: f() missing 1 required positional argument: 'a'
```

----------------------------------------

TITLE: Suppressing Warnings in Python Tests
DESCRIPTION: This code snippet demonstrates how to use the ignore_warnings decorator to suppress specific categories of warnings during test execution. In this case, it suppresses DeprecationWarnings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/test.rst#2025-04-21_snippet_16

LANGUAGE: Python
CODE:
```
@warning_helper.ignore_warnings(category=DeprecationWarning)
def test_suppress_warning():
    # do something
```

----------------------------------------

TITLE: Importing Tkinter Modules in Python
DESCRIPTION: Basic import statements for using Tkinter in Python applications. This snippet shows how to import the main tkinter module and the ttk module for themed widgets.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from tkinter import *
from tkinter import ttk
```

----------------------------------------

TITLE: Using standard_b64decode in Python
DESCRIPTION: Decodes bytes-like objects or ASCII strings using the standard Base64 alphabet and returns the decoded bytes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/base64.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
standard_b64decode(s)
```

----------------------------------------

TITLE: Shutting Down Python Logging System
DESCRIPTION: Informs the logging system to perform an orderly shutdown by flushing and closing all handlers. This should be called at application exit, and no further use of the logging system should be made after this call.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
def shutdown():
```

----------------------------------------

TITLE: Calculating Remainder Near for Decimal Python
DESCRIPTION: Shows the `remainder_near` method calculating the remainder from division. This method chooses the remainder sign to minimize its absolute value. The example `Decimal(18).remainder_near(Decimal(10))` results in `Decimal('-2')`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_26

LANGUAGE: python
CODE:
```
Decimal(18).remainder_near(Decimal(10))
```

----------------------------------------

TITLE: Converting Path to POSIX Representation - pathlib Python
DESCRIPTION: The snippet illustrates the `as_posix` method of `PurePath` to convert a Windows path with backslashes to a POSIX-style path with forward slashes. It shows how `as_posix()` can transform the path representation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
>>> p = PureWindowsPath('c:\\windows')
>>> str(p)
'c:\\windows'
>>> p.as_posix()
'c:/windows'
```

----------------------------------------

TITLE: Using ProcessPoolExecutor with Logging
DESCRIPTION: This snippet illustrates how to utilize the ProcessPoolExecutor from the concurrent.futures module for managing worker processes. It shows alternative ways to create a queue and submit worker processes for execution.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
queue = multiprocessing.Manager().Queue(-1)  # also works with the examples above
    with concurrent.futures.ProcessPoolExecutor(max_workers=10) as executor:
        for i in range(10):
            executor.submit(worker_process, queue, worker_configurer)
```

----------------------------------------

TITLE: Basic CSV File Parsing in Python
DESCRIPTION: Demonstrates the simplest way to parse a comma-separated values (CSV) file using Python's csv module. The reader function reads from an input file and returns each line as a list of fields.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.3.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
import csv

input = open('datafile', 'rb')
reader = csv.reader(input)
for line in reader:
    print line
```

----------------------------------------

TITLE: Initializing Python with PyConfig and Setting Program Name - C
DESCRIPTION: This C function demonstrates how to initialize the Python interpreter using a `PyConfig` structure. It initializes the config, sets the program name using `PyConfig_SetString` (which implicitly preinitializes Python), initializes the interpreter with `Py_InitializeFromConfig`, and handles potential errors using `PyStatus_Exception` and `Py_ExitStatusException`, ensuring the config is cleared.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/init_config.rst#_snippet_6

LANGUAGE: C
CODE:
```
void init_python(void)
{
    PyStatus status;

    PyConfig config;
    PyConfig_InitPythonConfig(&config);

    /* Set the program name. Implicitly preinitialize Python. */
    status = PyConfig_SetString(&config, &config.program_name,
                                L"/path/to/my_program");
    if (PyStatus_Exception(status)) {
        goto exception;
    }

    status = Py_InitializeFromConfig(&config);
    if (PyStatus_Exception(status)) {
        goto exception;
    }
    PyConfig_Clear(&config);
    return;

exception:
    PyConfig_Clear(&config);
    Py_ExitStatusException(status);
}
```

----------------------------------------

TITLE: Using Python timeit Module from Command Line
DESCRIPTION: Shows how to use the timeit module directly from the command line using the -m option to benchmark code execution time, with an example of setup and code to be timed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/cmdline.rst#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
python -m timeit -s "setup here" "benchmarked code here"
python -m timeit -h # for details
```

----------------------------------------

TITLE: Inspecting Mock Call Arguments in Python
DESCRIPTION: Demonstrates how to inspect the arguments of mock calls by accessing the args and kwargs attributes of call objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_56

LANGUAGE: python
CODE:
```
m = MagicMock(return_value=None)
m(1, 2, 3, arg='one', arg2='two')
kall = m.call_args
kall.args
kall.kwargs
```

----------------------------------------

TITLE: Using Decimal quantize Method for Fixed-Point Rounding in Python
DESCRIPTION: Explains and demonstrates the `quantize()` method, which rounds a `Decimal` number to a fixed exponent specified by another `Decimal` number, often used for monetary calculations requiring a fixed number of decimal places with specific rounding rules.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_7

LANGUAGE: python
CODE:
```
>>> Decimal('7.325').quantize(Decimal('.01'), rounding=ROUND_DOWN)
Decimal('7.32')
>>> Decimal('7.325').quantize(Decimal('1.'), rounding=ROUND_UP)
Decimal('8')
```

----------------------------------------

TITLE: Contextual Logging Filter Implementation in Python
DESCRIPTION: Implements a custom logging filter that adds IP address and username context to log records using random demonstration data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
import logging
from random import choice

class ContextFilter(logging.Filter):
    """
    This is a filter which injects contextual information into the log.

    Rather than use actual contextual information, we just use random
    data in this demo.
    """

    USERS = ['jim', 'fred', 'sheila']
    IPS = ['123.231.231.123', '127.0.0.1', '192.168.0.1']

    def filter(self, record):

        record.ip = choice(ContextFilter.IPS)
        record.user = choice(ContextFilter.USERS)
        return True

if __name__ == '__main__':
    levels = (logging.DEBUG, logging.INFO, logging.WARNING, logging.ERROR, logging.CRITICAL)
    logging.basicConfig(level=logging.DEBUG,
                        format='%(asctime)-15s %(name)-5s %(levelname)-8s IP: %(ip)-15s User: %(user)-8s %(message)s')
    a1 = logging.getLogger('a.b.c')
    a2 = logging.getLogger('d.e.f')

    f = ContextFilter()
    a1.addFilter(f)
    a2.addFilter(f)
    a1.debug('A debug message')
    a1.info('An info message with %s', 'some parameters')
    for x in range(10):
        lvl = choice(levels)
        lvlname = logging.getLevelName(lvl)
        a2.log(lvl, 'A message at %s level with %d %s', lvlname, 2, 'parameters')
```

----------------------------------------

TITLE: Removing Read-only Files in Directory Tree on Windows
DESCRIPTION: Shows how to use shutil.rmtree() with a custom error handler to remove a directory tree on Windows, handling read-only files by clearing the readonly bit and retrying the removal.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/shutil.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
import os, stat
import shutil

def remove_readonly(func, path, _):
    "Clear the readonly bit and reattempt the removal"
    os.chmod(path, stat.S_IWRITE)
    func(path)

shutil.rmtree(directory, onexc=remove_readonly)
```

----------------------------------------

TITLE: Creating Named Tuples in Collections Module
DESCRIPTION: Introduces the namedtuple factory function for creating tuple subclasses with named fields, allowing attribute-based and index-based access to tuple elements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
var_type = collections.namedtuple('variable', 'id name type size')
var = var_type(1, 'frequency', 'int', 4)
print(var[0], var.id)    # Equivalent
print(var[2], var.type)  # Equivalent
```

----------------------------------------

TITLE: Printing exception information with print_exception
DESCRIPTION: Prints complete exception information including the stack trace, exception type, and value. Can handle SyntaxError formatting and chained exceptions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
print_exception(exc, /[, value, tb], limit=None, file=None, chain=True)
```

----------------------------------------

TITLE: Functional API for Creating Python Enums
DESCRIPTION: Shows how to use the functional API to create Enum classes, including various ways to specify enum members and values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
>>> Animal = Enum('Animal', 'ANT BEE CAT DOG')
>>> Animal
<enum 'Animal'>
>>> Animal.ANT
<Animal.ANT: 1>
>>> list(Animal)
[<Animal.ANT: 1>, <Animal.BEE: 2>, <Animal.CAT: 3>, <Animal.DOG: 4>]

>>> Animal = Enum('Animal', 'ANT BEE CAT DOG', module=__name__)

>>> Animal = Enum('Animal', 'ANT BEE CAT DOG', qualname='SomeData.Animal')
```

----------------------------------------

TITLE: Multi-line Timing Command Line - Python
DESCRIPTION: Shows how to time multi-line expressions using command line timeit to compare hasattr vs try/except.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/timeit.rst#2025-04-21_snippet_6

LANGUAGE: shell
CODE:
```
$ python -m timeit "try:" "  str.__bool__" "except AttributeError:" "  pass"
$ python -m timeit "if hasattr(str, '__bool__'): pass"

$ python -m timeit "try:" "  int.__bool__" "except AttributeError:" "  pass"
$ python -m timeit "if hasattr(int, '__bool__'): pass"
```

----------------------------------------

TITLE: Defining Flag Enum Class - Python
DESCRIPTION: This snippet details the Flag class, which extends Enum functionality to support bitwise operations, demonstrating its usage with a Color example.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/enum.rst#2025-04-21_snippet_14

LANGUAGE: Python
CODE:
```
>>> from enum import Flag, auto
>>> class Color(Flag):
...     RED = auto()
...     GREEN = auto()
...     BLUE = auto()
...
>>> purple = Color.RED | Color.BLUE
>>> white = Color.RED | Color.GREEN | Color.BLUE
>>> Color.GREEN in purple
False
>>> Color.GREEN in white
True
>>> purple in white
True
>>> white in purple
False
```

----------------------------------------

TITLE: Object Get Attribute Emulation - Python
DESCRIPTION: Emulates PyObject_GenericGetAttr() by following Python's object attribute lookup order including MRO and descriptor protocol. Returns attribute values or raises AttributeError if attribute is not found, handling descriptors and instance variables.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
def object_getattribute(obj, name):
    "Emulate PyObject_GenericGetAttr() in Objects/object.c"
    null = object()
    objtype = type(obj)
    cls_var = find_name_in_mro(objtype, name, null)
    descr_get = getattr(type(cls_var), '__get__', null)
    if descr_get is not null:
        if (hasattr(type(cls_var), '__set__')
            or hasattr(type(cls_var), '__delete__')):
            return descr_get(cls_var, obj, objtype)     # data descriptor
    if hasattr(obj, '__dict__') and name in vars(obj):
        return vars(obj)[name]                          # instance variable
    if descr_get is not null:
        return descr_get(cls_var, obj, objtype)         # non-data descriptor
    if cls_var is not null:
        return cls_var                                  # class variable
    raise AttributeError(name)
```

----------------------------------------

TITLE: Doctest Function Example
DESCRIPTION: Shows how to write and structure doctests within function docstrings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
def f (x, y):
    """>>> f(2,2)
4
>>> f(3,2)
6
    """
    return x*y

finder = doctest.DocTestFinder()

# Get list of DocTest instances
tests = finder.find(f)
```

----------------------------------------

TITLE: Installing Packages with Multiple Python Versions (Windows)
DESCRIPTION: Commands for installing packages using different Python versions on Windows using the py launcher.
SOURCE: https://github.com/python/cpython/blob/main/Doc/installing/index.rst#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
py -2   -m pip install SomePackage  # default Python 2
py -2.7 -m pip install SomePackage  # specifically Python 2.7
py -3   -m pip install SomePackage  # default Python 3
py -3.4 -m pip install SomePackage  # specifically Python 3.4
```

----------------------------------------

TITLE: Default Formatter Configuration Dictionary
DESCRIPTION: Python dictionary representation of a default formatter configuration with format and date format strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.config.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
{
  'format' : '%(asctime)s %(levelname)-8s %(name)-15s %(message)s',
  'datefmt' : '%Y-%m-%d %H:%M:%S'
}
```

----------------------------------------

TITLE: Basic Python Threading Timer Example
DESCRIPTION: Shows how to create and start a Python `threading.Timer` object to execute a specific function (`hello` in this case) after a specified delay (30 seconds). The timer runs in a separate thread.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/threading.rst#_snippet_6

LANGUAGE: python
CODE:
```
def hello():
    print("hello, world")

t = Timer(30.0, hello)
t.start()  # after 30 seconds, "hello, world" will be printed
```

----------------------------------------

TITLE: RFC5424 Syslog Handler Implementation
DESCRIPTION: Custom syslog handler implementation supporting RFC5424 protocol with structured data support. Includes timestamp formatting and message composition according to the RFC specification.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_59

LANGUAGE: python
CODE:
```
class SysLogHandler5424(logging.handlers.SysLogHandler):

    tz_offset = re.compile(r'([+-]\d{2})(\d{2})$')
    escaped = re.compile(r'([\]"\\])')

    def __init__(self, *args, **kwargs):
        self.msgid = kwargs.pop('msgid', None)
        self.appname = kwargs.pop('appname', None)
        super().__init__(*args, **kwargs)

    def format(self, record):
        version = 1
        asctime = datetime.datetime.fromtimestamp(record.created).isoformat()
        m = self.tz_offset.match(time.strftime('%z'))
        has_offset = False
        if m and time.timezone:
            hrs, mins = m.groups()
            if int(hrs) or int(mins):
                has_offset = True
        if not has_offset:
            asctime += 'Z'
        else:
            asctime += f'{hrs}:{mins}'
        try:
            hostname = socket.gethostname()
        except Exception:
            hostname = '-'
        appname = self.appname or '-'
        procid = record.process
        msgid = '-'
        msg = super().format(record)
        sdata = '-'
        if hasattr(record, 'structured_data'):
            sd = record.structured_data
            parts = []

            def replacer(m):
                g = m.groups()
                return '\\' + g[0]

            for sdid, dv in sd.items():
                part = f'[{sdid}'
                for k, v in dv.items():
                    s = str(v)
                    s = self.escaped.sub(replacer, s)
                    part += f' {k}="{s}"'
                part += ']'
                parts.append(part)
            sdata = ''.join(parts)
        return f'{version} {asctime} {hostname} {appname} {procid} {msgid} {sdata} {msg}'
```

----------------------------------------

TITLE: Legacy Modules Replaceable by subprocess in Python
DESCRIPTION: List of older Python modules and functions that the subprocess module is intended to replace, such as os.system and os.spawn* functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/subprocess.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
os.system
os.spawn*
```

----------------------------------------

TITLE: Creating Mutually Exclusive Groups with Argparse in Python
DESCRIPTION: This example utilizes argparse's capability to define mutually exclusive argument groups, ensuring that only one of a set of contradictory options can be used. It contrasts the --verbose and --quiet options. Dependencies involve the argparse module, and it processes integer arguments for mathematical operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/argparse.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
import argparse
parser = argparse.ArgumentParser()
group = parser.add_mutually_exclusive_group()
group.add_argument("-v", "--verbose", action="store_true")
group.add_argument("-q", "--quiet", action="store_true")
parser.add_argument("x", type=int, help="the base")
parser.add_argument("y", type=int, help="the exponent")
args = parser.parse_args()
answer = args.x**args.y
if args.quiet:
    print(answer)
elif args.verbose:
    print(f"{args.x} to the power {args.y} equals {answer}")
else:
    print(f"{args.x}^{args.y} == {answer}")
```

----------------------------------------

TITLE: Demonstrating Class Method Resolution Order (MRO)
DESCRIPTION: Example showing complex inheritance scenario with multiple classes and inheritance levels, illustrating MRO computation
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/mro.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> O = object
>>> class F(O): pass
>>> class E(O): pass
>>> class D(O): pass
>>> class C(D,F): pass
>>> class B(E,D): pass
>>> class A(B,C): pass
```

LANGUAGE: python
CODE:
```
>>> A.mro()  # doctest: +NORMALIZE_WHITESPACE
[<class 'A'>, <class 'B'>, <class 'E'>,
<class 'C'>, <class 'D'>, <class 'F'>,
<class 'object'>]
```

----------------------------------------

TITLE: Avoiding KeyboardInterrupt in HTTP Server (Python)
DESCRIPTION: This example demonstrates how to create an HTTP server that avoids KeyboardInterrupt by installing a custom SIGINT handler. It uses a socket pair and a selector to gracefully shutdown the server on SIGINT.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/signal.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
import signal
import socket
from selectors import DefaultSelector, EVENT_READ
from http.server import HTTPServer, SimpleHTTPRequestHandler

interrupt_read, interrupt_write = socket.socketpair()

def handler(signum, frame):
    print('Signal handler called with signal', signum)
    interrupt_write.send(b'\0')
signal.signal(signal.SIGINT, handler)

def serve_forever(httpd):
    sel = DefaultSelector()
    sel.register(interrupt_read, EVENT_READ)
    sel.register(httpd, EVENT_READ)

    while True:
        for key, _ in sel.select():
            if key.fileobj == interrupt_read:
                interrupt_read.recv(1)
                return
            if key.fileobj == httpd:
                httpd.handle_request()

print("Serving on port 8000")
httpd = HTTPServer(('', 8000), SimpleHTTPRequestHandler)
serve_forever(httpd)
print("Shutdown...")
```

----------------------------------------

TITLE: Using subTest in Python unittest
DESCRIPTION: The subTest method in Python unittest is a context manager that executes enclosed code blocks as subtests with optional messages and parameters, aiding in narrowing down test failures. It allows for nesting and multiple subtests within a test case.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
.. method:: subTest(msg=None, **params)

   Return a context manager which executes the enclosed code block as a
   subtest.  *msg* and *params* are optional, arbitrary values which are
   displayed whenever a subtest fails, allowing you to identify them
   clearly.

```

----------------------------------------

TITLE: Database Backup with Progress Monitoring in Python SQLite3
DESCRIPTION: Shows how to create a backup of an SQLite database with progress tracking. Copies an existing database to a new file with page-by-page progress reporting.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
def progress(status, remaining, total):
    print(f'Copied {total-remaining} of {total} pages...')

src = sqlite3.connect('example.db')
dst = sqlite3.connect('backup.db')
with dst:
    src.backup(dst, pages=1, progress=progress)
dst.close()
src.close()
```

----------------------------------------

TITLE: Python TestCase with Setup Method
DESCRIPTION: Demonstrates a TestCase implementation with setUp method for test fixture initialization.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
import unittest

class WidgetTestCase(unittest.TestCase):
    def setUp(self):
        self.widget = Widget('The widget')

    def test_default_widget_size(self):
        self.assertEqual(self.widget.size(), (50,50),
                         'incorrect default size')

    def test_widget_resize(self):
        self.widget.resize(100,150)
        self.assertEqual(self.widget.size(), (100,150),
                         'wrong size after resize')
```

----------------------------------------

TITLE: Transferring Files with asyncio
DESCRIPTION: This method sends a file over a transport using the high-performance `os.sendfile` if available, otherwise it falls back to manual reading and sending.  It returns the total number of bytes sent.  The *file* argument must be opened in binary mode.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
.. method:: loop.sendfile(transport, file, \
                          offset=0, count=None, *, fallback=True)
   :async:

   Send a *file* over a *transport*.  Return the total number of bytes
   sent.

   The method uses high-performance :meth:`os.sendfile` if available.

   *file* must be a regular file object opened in binary mode.

   *offset* tells from where to start reading the file. If specified,
   *count* is the total number of bytes to transmit as opposed to
   sending the file until EOF is reached. File position is always updated,
   even when this method raises an error, and
   :meth:`file.tell() <io.IOBase.tell>` can be used to obtain the actual
   number of bytes sent.

   *fallback* set to ``True`` makes asyncio to manually read and send
   the file when the platform does not support the sendfile system call
   (e.g. Windows or SSL socket on Unix).

   Raise :exc:`SendfileNotAvailableError` if the system does not support
   the *sendfile* syscall and *fallback* is ``False``.

```

----------------------------------------

TITLE: Setting Global Socket Timeout for urllib Requests
DESCRIPTION: This snippet shows how to set a global timeout for socket connections when using urllib. By defining a default timeout, users can avoid indefinitely hanging requests, especially when fetching resources from the web. Ensure the socket and urllib.request modules are both imported for proper utilization.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/urllib2.rst#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
import socket
import urllib.request

# timeout in seconds
timeout = 10
socket.setdefaulttimeout(timeout)

# this call to urllib.request.urlopen now uses the default timeout
# we have set in the socket module
req = urllib.request.Request('http://www.voidspace.org.uk')
response = urllib.request.urlopen(req)
```

----------------------------------------

TITLE: Multiprocessing Manager Example
DESCRIPTION: Demonstrates using a Manager to create a shared dictionary that can be accessed and modified by multiple processes. The Manager creates a separate server process that holds the dictionary. Worker processes insert values into the dictionary and print out the results in the main process.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
import time
from multiprocessing import Pool, Manager


def factorial(N, dictionary):
    "Compute a factorial."
    # Calculate the result
    fact = 1L
    for i in range(1, N+1):
        fact = fact * i

    # Store result in dictionary
    dictionary[N] = fact

if __name__ == '__main__':
    p = Pool(5)
    mgr = Manager()
    d = mgr.dict()         # Create shared dictionary

    # Run tasks using the pool
    for N in range(1, 1000, 10):
        p.apply_async(factorial, (N, d))

    # Mark pool as closed -- no more tasks can be added.
    p.close()

    # Wait for tasks to exit
    p.join()

    # Output results
    for k, v in sorted(d.items()):
        print k, v
```

----------------------------------------

TITLE: Sanitizing Template String with html in Python
DESCRIPTION: Illustrates how the 'html' function can be used with a template string to sanitize potentially unsafe input. The example shows how HTML tags within an interpolated variable are escaped when processed by the 'html' function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_1

LANGUAGE: python
CODE:
```
evil = "<script>alert('evil')</script>"
template = t"<p>{evil}</p>"
assert html(template) == "<p>&lt;script&gt;alert('evil')&lt;/script&gt;</p>"
```

----------------------------------------

TITLE: Loading Cookies from HTTP Header String
DESCRIPTION: Shows how to load cookie data from a raw HTTP header string using the load() method of SimpleCookie
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.cookies.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
C = cookies.SimpleCookie()
C.load("chips=ahoy; vienna=finger")
```

----------------------------------------

TITLE: Querying SQLite Master Table in Python
DESCRIPTION: Executes a SELECT query on the sqlite_master table to verify the creation of the 'movie' table. This demonstrates how to check for table existence in SQLite.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
res = cur.execute("SELECT name FROM sqlite_master")
res.fetchone()
```

----------------------------------------

TITLE: Backreference with Named Groups in Python
DESCRIPTION: This snippet shows how to use backreferences with named groups in Python's `re` module, using the syntax `(?P=name)`. Backreferences allow you to match the same text that was previously matched by a named group, ensuring that the same pattern is repeated.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
>>> p = re.compile(r'\b(?P<word>\w+)\s+(?P=word)\b')
>>> p.search('Paris in the the spring').group()
'the the'
```

----------------------------------------

TITLE: Creating a Multidimensional List (Incorrect Method) in Python
DESCRIPTION: Demonstrates an incorrect way to create a multidimensional list using the multiplication operator, which results in all rows referencing the same inner list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_39

LANGUAGE: python
CODE:
```
A = [[None] * 2] * 3
```

----------------------------------------

TITLE: Defining Color Enum with object() as Values in Python
DESCRIPTION: This example shows how to create a Color enum using object() instances as values, which signifies that the actual values are not important.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
class Color(Enum):
    RED = object()
    GREEN = object()
    BLUE = object()

Color.GREEN                         # doctest: +SKIP
```

----------------------------------------

TITLE: SQLite Database Opening - Python
DESCRIPTION: This function opens an SQLite database and behaves like a mapping. It provides context management for automatic closing and supports various access flags and modes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dbm.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
def open(filename, /, flag="r", mode=0o666):
    """
    Open an SQLite database.
    The returned object behaves like a :term:`mapping`,
    implements a :meth:`!close` method,
    and supports a "closing" context manager via the :keyword:`with` keyword.

    :param filename:
        The path to the database to be opened.
    :type filename: :term:`path-like object`

    :param str flag:
        * ``'r'`` (default): |flag_r|
        * ``'w'``: |flag_w|
        * ``'c'``: |flag_c|
        * ``'n'``: |flag_n|

    :param mode:
        The Unix file access mode of the file (default: octal ``0o666``),
        used only when the database has to be created.
    """
    # implementation goes here
```

----------------------------------------

TITLE: Setting asyncio logger level
DESCRIPTION: This code snippet shows how to set the log level for the asyncio logger using the logging module.  Setting the level to WARNING will suppress INFO and DEBUG messages. This can be useful for reducing verbosity in production environments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-dev.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
logging.getLogger("asyncio").setLevel(logging.WARNING)
```

----------------------------------------

TITLE: Sample Standard Deviation Calculation
DESCRIPTION: Example of using stdev() function to calculate sample standard deviation of a numeric dataset.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
>>> stdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])
1.0810874155219827
```

----------------------------------------

TITLE: Signing and Verifying Cookies with BLAKE2b
DESCRIPTION: This snippet shows how to sign and verify cookies using a secret key with BLAKE2b. It provides functions for signing a cookie and verifying the signature against the generated one.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/hashlib.rst#2025-04-21_snippet_13

LANGUAGE: Python
CODE:
```
>>> from hashlib import blake2b\n>>> from hmac import compare_digest\n>>> SECRET_KEY = b'pseudorandomly generated server secret key'\n>>> AUTH_SIZE = 16\n>>> def sign(cookie):\n...     h = blake2b(digest_size=AUTH_SIZE, key=SECRET_KEY)\n...     h.update(cookie)\n...     return h.hexdigest().encode('utf-8')\n>>> def verify(cookie, sig):\n...     good_sig = sign(cookie)\n...     return compare_digest(good_sig, sig)\n>>> cookie = b'user-alice'\n>>> sig = sign(cookie)\n>>> print("{0},{1}".format(cookie.decode('utf-8'), sig))\nuser-alice,b'43b3c982cf697e0c5ab22172d1ca7421'\n>>> verify(cookie, sig)\nTrue\n>>> verify(b'user-bob', sig)\nFalse\n>>> verify(cookie, b'0102030405060708090a0b0c0d0e0f00')\nFalse
```

----------------------------------------

TITLE: Selecting Entry Points by Group (Direct Call, Python)
DESCRIPTION: Shows an alternative, more concise way to select entry points by group. Keyword arguments passed directly to the `entry_points()` function (e.g., `group='console_scripts'`) are automatically forwarded to the internal select mechanism, returning the filtered `EntryPoints` collection.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_6

LANGUAGE: Python Console
CODE:
```
>>> scripts = entry_points(group='console_scripts')  # doctest: +SKIP
```

----------------------------------------

TITLE: Deprecating sys.last_value in Python
DESCRIPTION: The sys.last_value field, which held the value of the last uncaught exception, is deprecated. Use sys.last_exc instead to access the last exception object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_32

LANGUAGE: Python
CODE:
```
sys.last_value
```

----------------------------------------

TITLE: Combining URL Components with urlunsplit Function in Python
DESCRIPTION: The urlunsplit function combines elements of a tuple returned by urlsplit into a complete URL string. It accepts a five-item iterable as an argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.parse.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
urlunsplit(parts)
```

----------------------------------------

TITLE: Creating a Mock Subclass with Helper Methods in Python
DESCRIPTION: Example of subclassing MagicMock to add custom helper methods that simplify testing by providing convenience functionality.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_37

LANGUAGE: python
CODE:
```
>>> class MyMock(MagicMock):
...     def has_been_called(self):
...         return self.called
...
>>> mymock = MyMock(return_value=None)
>>> mymock
<MyMock id='...'>
>>> mymock.has_been_called()
False
>>> mymock()
>>> mymock.has_been_called()
True
```

----------------------------------------

TITLE: Creating datetime.date Object from Tuple in Python
DESCRIPTION: This snippet describes a function that creates and returns a new datetime.date object. It takes a tuple of arguments that can be passed to datetime.date.fromtimestamp method. This allows for flexible creation of date objects based on timestamp-compatible input.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/datetime.rst#2025-04-21_snippet_49

LANGUAGE: Python
CODE:
```
Create and return a new :class:`datetime.date` object given an argument
tuple suitable for passing to :meth:`datetime.date.fromtimestamp`.
```

----------------------------------------

TITLE: Filtering Warnings in Python
DESCRIPTION: Demonstrates how to filter out specific warnings using the warnings.filterwarnings() function in Python 2.1.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.1.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
import warnings
warnings.filterwarnings(action = 'ignore',
                          message='.*regex module is deprecated',
                          category=DeprecationWarning,
                          module = '__main__')
```

----------------------------------------

TITLE: Extended Auto-Number Enum with Args
DESCRIPTION: Enhanced version of auto-numbering Enum that supports additional arguments and custom initialization
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_27

LANGUAGE: python
CODE:
```
class AutoNumber(Enum):
    def __new__(cls, *args):
        value = len(cls.__members__) + 1
        obj = object.__new__(cls)
        obj._value_ = value
        return obj

class Swatch(AutoNumber):
    def __init__(self, pantone='unknown'):
        self.pantone = pantone
    AUBURN = '3497'
    SEA_GREEN = '1246'
    BLEACHED_CORAL = ()
```

----------------------------------------

TITLE: Restricting Direct Instantiation of SSL Objects in Python
DESCRIPTION: Direct instantiation of SSLSocket and SSLObject objects is now prohibited. Users should use ssl.wrap_socket() or SSLContext instead. This change improves the consistency and security of SSL usage in Python.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.7.0b2.rst#2025-04-21_snippet_9



----------------------------------------

TITLE: Defining __all__ for a Package
DESCRIPTION: Illustrates how to use the '__all__' variable in a package's '__init__.py' file to specify which submodules should be imported when using 'from package import *'. Dependencies include a properly structured Python package with '__init__.py'. '__all__' must be kept updated with the package's submodules.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/modules.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
__all__ = ["echo", "surround", "reverse"]
```

----------------------------------------

TITLE: argparse BooleanOptionalAction Example (Python)
DESCRIPTION: Shows how to use the built-in BooleanOptionalAction to automatically create both positive (--foo) and negative (--no-foo) boolean flags for an argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_38

LANGUAGE: python
CODE:
```
>>> import argparse
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo', action=argparse.BooleanOptionalAction)
>>> parser.parse_args(['--no-foo'])
Namespace(foo=False)
```

----------------------------------------

TITLE: Identifying Absolute Paths with os.path
DESCRIPTION: The isabs function examines whether a given path is absolute, indicated by platform-specific path beginnings. Path-like object support was added in version 3.6, with Windows adjustments in version 3.13.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
def isabs(path):
    return os.path.isabs(path)
```

----------------------------------------

TITLE: Using fileinput with Context Manager in Python
DESCRIPTION: Shows how to use the fileinput module with a context manager (with statement) to ensure proper cleanup of resources. This example processes lines from two specific text files with UTF-8 encoding.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/fileinput.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
with fileinput.input(files=('spam.txt', 'eggs.txt'), encoding="utf-8") as f:
    for line in f:
        process(line)
```

----------------------------------------

TITLE: Secure Digest Comparison
DESCRIPTION: Compares two digest values using a timing-attack resistant method. Ensures consistent time complexity regardless of input contents.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/hmac.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
hmac.compare_digest(a, b)
```

----------------------------------------

TITLE: Starting and Shutting Down SharedMemoryManager
DESCRIPTION: This example demonstrates how to start a SharedMemoryManager, create ShareableList and SharedMemory objects, and then shut down the manager, releasing the shared memory blocks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.shared_memory.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> from multiprocessing.managers import SharedMemoryManager
>>> smm = SharedMemoryManager()
>>> smm.start()  # Start the process that manages the shared memory blocks
>>> sl = smm.ShareableList(range(4))
>>> sl
ShareableList([0, 1, 2, 3], name='psm_6572_7512')
>>> raw_shm = smm.SharedMemory(size=128)
>>> another_sl = smm.ShareableList('alpha')
>>> another_sl
ShareableList(['a', 'l', 'p', 'h', 'a'], name='psm_6572_12221')
>>> smm.shutdown()  # Calls unlink() on sl, raw_shm, and another_sl
```

----------------------------------------

TITLE: cProfile Context Manager Usage - Python
DESCRIPTION: Demonstrates how to use the cProfile.Profile class as a context manager to profile a block of code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
import cProfile

with cProfile.Profile() as profiler:
      # code to be profiled
      ...
```

----------------------------------------

TITLE: Creating Python Objects Using Py_BuildValue
DESCRIPTION: This section describes the `Py_BuildValue` function, which constructs Python objects from C values. It outlines different formats recognized by the function for various types and the result of each operation based on the input format string.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/extending.rst#2025-04-21_snippet_16

LANGUAGE: C
CODE:
```
PyObject *Py_BuildValue(const char *format, ...);

/* Examples of Py_BuildValue calls */
Py_BuildValue("");                        None
Py_BuildValue("i", 123);                  123
Py_BuildValue("iii", 123, 456, 789);      (123, 456, 789)
Py_BuildValue("s", "hello");              'hello'
Py_BuildValue("y", "hello");              b'hello'
Py_BuildValue("ss", "hello", "world");    ('hello', 'world')
Py_BuildValue("s#", "hello", 4);          'hell'
Py_BuildValue("y#", "hello", 4);          b'hell'
Py_BuildValue("()");                      ()
Py_BuildValue("(i)", 123);                (123,)
Py_BuildValue("(ii)", 123, 456);          (123, 456)
Py_BuildValue("(i,i)", 123, 456);         (123, 456)
Py_BuildValue("[i,i]", 123, 456);         [123, 456]
Py_BuildValue("{s:i,s:i}", "abc", 123, "def", 456);    {'abc': 123, 'def': 456}
Py_BuildValue("((ii)(ii)) (ii)", 1, 2, 3, 4, 5, 6);          (((1, 2), (3, 4)), (5, 6));
```

----------------------------------------

TITLE: Defining a Class Method Using Decorator Syntax in Python
DESCRIPTION: Demonstrates the new decorator syntax for defining a class method using the @classmethod decorator. This replaces the previous method of explicitly calling classmethod() on the function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
class C:

   @classmethod
   def meth (cls):
       ...
```

----------------------------------------

TITLE: Adapter and Converter Recipes for Date and Time Types
DESCRIPTION: Provides recipes for common adapters and converters, specifically for handling date and datetime objects. Includes methods for ISO 8601 formatting and Unix timestamp conversion.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
import datetime
import sqlite3

def adapt_date_iso(val):
    """Adapt datetime.date to ISO 8601 date."""
    return val.isoformat()

def adapt_datetime_iso(val):
    """Adapt datetime.datetime to timezone-naive ISO 8601 date."""
    return val.isoformat()

def adapt_datetime_epoch(val):
    """Adapt datetime.datetime to Unix timestamp."""
    return int(val.timestamp())

sqlite3.register_adapter(datetime.date, adapt_date_iso)
sqlite3.register_adapter(datetime.datetime, adapt_datetime_iso)
sqlite3.register_adapter(datetime.datetime, adapt_datetime_epoch)

def convert_date(val):
    """Convert ISO 8601 date to datetime.date object."""
    return datetime.date.fromisoformat(val.decode())

def convert_datetime(val):
    """Convert ISO 8601 datetime to datetime.datetime object."""
    return datetime.datetime.fromisoformat(val.decode())

def convert_timestamp(val):
    """Convert Unix epoch timestamp to datetime.datetime object."""
    return datetime.datetime.fromtimestamp(int(val))

sqlite3.register_converter("date", convert_date)
sqlite3.register_converter("datetime", convert_datetime)
sqlite3.register_converter("timestamp", convert_timestamp)
```

----------------------------------------

TITLE: Itertools Recipe: grouper function
DESCRIPTION: Function that collects data into non-overlapping fixed-length chunks or blocks with options to handle incomplete chunks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_42

LANGUAGE: python
CODE:
```
def grouper(iterable, n, *, incomplete='fill', fillvalue=None):
    "Collect data into non-overlapping fixed-length chunks or blocks."
    # grouper('ABCDEFG', 3, fillvalue='x') → ABC DEF Gxx
    # grouper('ABCDEFG', 3, incomplete='strict') → ABC DEF ValueError
    # grouper('ABCDEFG', 3, incomplete='ignore') → ABC DEF
    iterators = [iter(iterable)] * n
    match incomplete:
        case 'fill':
            return zip_longest(*iterators, fillvalue=fillvalue)
        case 'strict':
            return zip(*iterators, strict=True)
        case 'ignore':
            return zip(*iterators)
        case _:
            raise ValueError('Expected fill, strict, or ignore')
```

----------------------------------------

TITLE: Itertools Recipe: take function
DESCRIPTION: Function that returns the first n items of an iterable as a list using islice.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
def take(n, iterable):
    "Return first n items of the iterable as a list."
    return list(islice(iterable, n))
```

----------------------------------------

TITLE: Timeit with Custom Functions - Python
DESCRIPTION: Shows how to use timeit with custom functions using setup parameter and globals.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/timeit.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
def test():
    """Stupid test function"""
    L = [i for i in range(100)]

if __name__ == '__main__':
    import timeit
    print(timeit.timeit("test()", setup="from __main__ import test"))
```

----------------------------------------

TITLE: Using Condition.wait for State Synchronization Python
DESCRIPTION: This snippet shows the standard pattern for waiting and notifying using a `threading.Condition` in a producer-consumer scenario. A consumer repeatedly checks a condition inside a `while` loop and calls `wait()` when the condition is false, while a producer modifies the state and calls `notify()`. The condition variable's lock must be held using a `with` statement.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/threading.rst#_snippet_2

LANGUAGE: python
CODE:
```
# Consume one item
with cv:
    while not an_item_is_available():
        cv.wait()
    get_an_available_item()
```

LANGUAGE: python
CODE:
```
# Produce one item
with cv:
    make_an_item_available()
    cv.notify()
```

----------------------------------------

TITLE: Preserving Traceback with with_traceback (Python)
DESCRIPTION: Shows how to catch one exception ('SomeException'), obtain its traceback using 'sys.exception().__traceback__', and then attach that traceback to a newly raised exception ('OtherException') using the 'with_traceback()' method. This preserves the original execution context despite changing the exception type.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/exceptions.rst#_snippet_1

LANGUAGE: python
CODE:
```
try:
    ...
except SomeException:
    tb = sys.exception().__traceback__
    raise OtherException(...).with_traceback(tb)
```

----------------------------------------

TITLE: Python Assignment Example
DESCRIPTION: This code snippet demonstrates how to reduce code volume and improve execution speed in Python by assigning a complex expression to a variable and then referencing the variable multiple times. This approach avoids repeated name resolution at runtime, enhancing performance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/design.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
   ref = function(args).mydict[index][index]
   ref.a = 21
   ref.b = 42
   ref.c = 63
```

----------------------------------------

TITLE: Type Hinting with Generics in Python Collections
DESCRIPTION: This snippet shows how to apply type hinting to built-in collection types in Python 3.9, allowing list and dict to be used as generic types directly. Type hinting enhances code readability and maintainability, defining expected input types without dependencies beyond Python 3.9.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.9.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def greet_all(names: list[str]) -> None:
    for name in names:
        print("Hello", name)
```

----------------------------------------

TITLE: Basic Python Generator Example
DESCRIPTION: Demonstrates basic generator functionality with a simple counter implementation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
def counter (maximum):
    i = 0
    while i < maximum:
        yield i
        i += 1
```

----------------------------------------

TITLE: argparse 'version' Action Example (Python)
DESCRIPTION: Demonstrates the 'version' action, which prints the specified version string and exits the program. Requires the 'version' keyword argument in add_argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_37

LANGUAGE: python
CODE:
```
>>> import argparse
>>> parser = argparse.ArgumentParser(prog='PROG')
>>> parser.add_argument('--version', action='version', version='%(prog)s 2.0')
>>> parser.parse_args(['--version'])
PROG 2.0
```

----------------------------------------

TITLE: Creating Socket with Exponential Backoff
DESCRIPTION: This method attempts to create a socket and implements an exponential back-off algorithm upon failure. The retry mechanism includes a start delay, a multiplier, and a maximum delay. During the delay period, messages may be dropped.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
   .. method:: createSocket()

      Tries to create a socket; on failure, uses an exponential back-off
      algorithm.  On initial failure, the handler will drop the message it was
      trying to send.  When subsequent messages are handled by the same
      instance, it will not try connecting until some time has passed.  The
      default parameters are such that the initial delay is one second, and if
      after that delay the connection still can't be made, the handler will
      double the delay each time up to a maximum of 30 seconds.

      This behaviour is controlled by the following handler attributes:

      * ``retryStart`` (initial delay, defaulting to 1.0 seconds).
      * ``retryFactor`` (multiplier, defaulting to 2.0).
      * ``retryMax`` (maximum delay, defaulting to 30.0 seconds).

      This means that if the remote listener starts up *after* the handler has
      been used, you could lose messages (since the handler won't even attempt
      a connection until the delay has elapsed, but just silently drop messages
      during the delay period).
```

----------------------------------------

TITLE: Creating a Simple HTML Parser Application in Python
DESCRIPTION: This code snippet demonstrates the use of the HTMLParser class to create a simple HTML parser that handles start tags, end tags, and data. The parser is subclassed to implement specific behavior for handling different HTML elements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/html.parser.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from html.parser import HTMLParser

class MyHTMLParser(HTMLParser):
    def handle_starttag(self, tag, attrs):
        print("Encountered a start tag:", tag)

    def handle_endtag(self, tag):
        print("Encountered an end tag :", tag)

    def handle_data(self, data):
        print("Encountered some data  :", data)

parser = MyHTMLParser()
parser.feed('<html><head><title>Test</title></head>'
            '<body><h1>Parse me!</h1></body></html>')
```

----------------------------------------

TITLE: Accessing Element Properties in Python
DESCRIPTION: Demonstrates how to access basic properties of an Element object, including its tag name and attributes dictionary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> root.tag
'data'
>>> root.attrib
{}
```

----------------------------------------

TITLE: Defining Type Variables (Old Syntax)
DESCRIPTION: Demonstrates the older method for manually constructing reusable type variables using the `TypeVar` constructor, including basic, bounded, and constrained examples.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_99

LANGUAGE: python
CODE:
```
T = TypeVar('T')  # Can be anything
S = TypeVar('S', bound=str)  # Can be any subtype of str
A = TypeVar('A', str, bytes)  # Must be exactly str or bytes
```

----------------------------------------

TITLE: Using range() Function in Python Loops
DESCRIPTION: This example demonstrates various ways to use the range() function in Python loops, including specifying start, stop, and step values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> for i in range(5):
...     print(i)
...
0
1
2
3
4

>>> list(range(5, 10))
[5, 6, 7, 8, 9]

>>> list(range(0, 10, 3))
[0, 3, 6, 9]

>>> list(range(-10, -100, -30))
[-10, -40, -70]
```

----------------------------------------

TITLE: Simplifying Reduction Operations with For Loops in Python
DESCRIPTION: This snippet demonstrates how to simplify a complex reduction operation using a simple for loop, improving readability and maintainability.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_30

LANGUAGE: python
CODE:
```
 total = 0
 for a, b in items:
     total += b
```

----------------------------------------

TITLE: Checking Support for follow_symlinks Parameter in Python's os Module
DESCRIPTION: Example showing how to check whether a particular function supports the follow_symlinks=False parameter on the local platform by using the in operator on the supports_follow_symlinks set object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_47

LANGUAGE: python
CODE:
```
os.stat in os.supports_follow_symlinks
```

----------------------------------------

TITLE: Bisect Module Example
DESCRIPTION: This example demonstrates the use of the `bisect` module for inserting elements into a sorted list. The `bisect.insort` function inserts an element while maintaining the sorted order. This is an efficient way to keep a list sorted as new elements are added.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib2.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
>>> import bisect
>>> scores = [(100, 'perl'), (200, 'tcl'), (400, 'lua'), (500, 'python')]
>>> bisect.insort(scores, (300, 'ruby'))
>>> scores
[(100, 'perl'), (200, 'tcl'), (300, 'ruby'), (400, 'lua'), (500, 'python')]
```

----------------------------------------

TITLE: Creating Hash Objects with hashlib
DESCRIPTION: Examples comparing old and new ways to create hash objects using the hashlib module. Shows the transition from md5/sha modules to the consolidated hashlib interface.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_38

LANGUAGE: python
CODE:
```
# Old versions
h = md5.md5()
h = md5.new()

# New version
h = hashlib.md5()

# Old versions
h = sha.sha()
h = sha.new()

# New version
h = hashlib.sha1()

# Hash that weren't previously available
h = hashlib.sha224()
h = hashlib.sha256()
h = hashlib.sha384()
h = hashlib.sha512()

# Alternative form
h = hashlib.new('md5')          # Provide algorithm as a string
```

----------------------------------------

TITLE: Grouping data into fixed-length chunks with grouper in Python
DESCRIPTION: Demonstrates the grouper function which collects data into fixed-length chunks or blocks. It can fill incomplete groups with a specified fillvalue.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_76

LANGUAGE: python
CODE:
```
>>> list(grouper('abcdefg', 3, fillvalue='x'))
[('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'x', 'x')]
```

----------------------------------------

TITLE: Module-Level Regex Functions
DESCRIPTION: Demonstrates using top-level regex functions from the re module that create pattern objects internally and cache compiled patterns
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
re.match(r'From\s+', 'Fromage amk')  # Returns None
re.match(r'From\s+', 'From amk Thu May 14 19:12:10 1998')  # Returns match object
```

----------------------------------------

TITLE: Enabling Breakpoints - Pdb - Python
DESCRIPTION: Enables one or more breakpoints specified by their numbers, allowing them to stop execution again.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_12



----------------------------------------

TITLE: StringIO Example: Writing and Retrieving Data
DESCRIPTION: This code snippet demonstrates how to use StringIO to write strings to an in-memory buffer, retrieve the contents, and then close the object. It showcases basic operations like writing, printing, and retrieving data from a StringIO object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/io.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
"import io

output = io.StringIO()
output.write('First line.\n')
print('Second line.', file=output)

# Retrieve file contents -- this will be
# 'First line.\nSecond line.\n'
contents = output.getvalue()

# Close object and discard memory buffer --
# .getvalue() will now raise an exception.
output.close()"
```

----------------------------------------

TITLE: Writing and Reading BZ2 Compressed Files in Python
DESCRIPTION: This snippet demonstrates writing compressed data to a file in binary mode using the BZ2 module, as well as reading and decompressing that data back into its original form. It includes checks to confirm the data integrity after the round-trip.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/bz2.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> import bz2
>>> data = b"""
... Donec rhoncus quis sapien sit amet molestie. Fusce scelerisque vel augue
... nec ullamcorper. Nam rutrum pretium placerat. Aliquam vel tristique lorem,
... sit amet cursus ante. In interdum laoreet mi, sit amet ultrices purus
... pulvinar a. Nam gravida euismod magna, non varius justo tincidunt feugiat.
... Aliquam pharetra lacus non risus vehicula rutrum. Maecenas aliquam leo
... felis. Pellentesque semper nunc sit amet nibh ullamcorper, ac elementum
... dolor luctus. Curabitur lacinia mi ornare consectetur vestibulum."""
>>> with bz2.open("myfile.bz2", "wb") as f:
...     # Write compressed data to file
...     unused = f.write(data)
...
>>> with bz2.open("myfile.bz2", "rb") as f:
...     # Decompress data from file
...     content = f.read()
...
>>> content == data  # Check equality to original object after round-trip
True
```

----------------------------------------

TITLE: Itertools Recipe: unique_justseen function
DESCRIPTION: Function that yields unique elements from an iterable in order, remembering only the element just seen, with an optional key function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_38

LANGUAGE: python
CODE:
```
def unique_justseen(iterable, key=None):
    "Yield unique elements, preserving order. Remember only the element just seen."
    # unique_justseen('AAAABBBCCDAABBB') → A B C D A B
    # unique_justseen('ABBcCAD', str.casefold) → A B c A D
    if key is None:
        return map(itemgetter(0), groupby(iterable))
    return map(next, map(itemgetter(1), groupby(iterable, key)))
```

----------------------------------------

TITLE: Sending Signal to Calling Process in Python
DESCRIPTION: The raise_signal function sends a signal to the calling process. It takes a signal number as an argument and returns nothing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/signal.rst#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
def raise_signal(signum):
    """Sends a signal to the calling process. Returns nothing."""
```

----------------------------------------

TITLE: Analyzing Performance Data with Perf Report - Shell
DESCRIPTION: This command analyzes the recorded performance data using 'perf report', providing a filtered output of performance samples that helps identify bottlenecks in the Python application.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/perf_profiling.rst#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
$ perf report --stdio -n -g
```

----------------------------------------

TITLE: Computing with Positional Arguments
DESCRIPTION: Demonstrates how to use a positional argument to compute a value (squaring a number), but fails because argparse treats inputs as strings by default.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/argparse.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("square", help="display a square of a given number")
args = parser.parse_args()
print(args.square**2)
```

----------------------------------------

TITLE: Converting SQLite Values to Custom Python Types
DESCRIPTION: Illustrates how to convert SQLite values back to custom Python types using converter functions. This example shows both implicit (using PARSE_DECLTYPES) and explicit (using PARSE_COLNAMES) approaches.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
class Point:
    def __init__(self, x, y):
        self.x, self.y = x, y

    def __repr__(self):
        return f"Point({self.x}, {self.y})"

def adapt_point(point):
    return f"{point.x};{point.y}"

def convert_point(s):
    x, y = list(map(float, s.split(b";")))
    return Point(x, y)

# Register the adapter and converter
sqlite3.register_adapter(Point, adapt_point)
sqlite3.register_converter("point", convert_point)

# 1) Parse using declared types
p = Point(4.0, -3.2)
con = sqlite3.connect(":memory:", detect_types=sqlite3.PARSE_DECLTYPES)
cur = con.execute("CREATE TABLE test(p point)")

cur.execute("INSERT INTO test(p) VALUES(?)", (p,))
cur.execute("SELECT p FROM test")
print("with declared types:", cur.fetchone()[0])
cur.close()
con.close()

# 2) Parse using column names
con = sqlite3.connect(":memory:", detect_types=sqlite3.PARSE_COLNAMES)
cur = con.execute("CREATE TABLE test(p)")

cur.execute("INSERT INTO test(p) VALUES(?)", (p,))
cur.execute('SELECT p AS "p [point]" FROM test')
print("with column names:", cur.fetchone()[0])
cur.close()
con.close()
```

----------------------------------------

TITLE: Shielding From Cancellation - Python
DESCRIPTION: The shield function protects an awaitable object from cancellation. If the awaited coroutine is cancelled, the Task within the shielded awaitable will continue running. This behavior can be useful for ensuring critical tasks are completed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
async def shield(aw):
    """
    Protect an :ref:`awaitable object <asyncio-awaitables>`
    from being :meth:`cancelled <Task.cancel>`.

    If *aw* is a coroutine it is automatically scheduled as a Task.

    The statement::

        task = asyncio.create_task(something())
        res = await shield(task)

    is equivalent to::

        res = await something()

    *except* that if the coroutine containing it is cancelled, the
    Task running in ``something()`` is not cancelled.  From the point
    of view of ``something()``, the cancellation did not happen.
    Although its caller is still cancelled, so the "await" expression
    still raises a :exc:`CancelledError`.

    .. important::

       Save a reference to tasks passed to this function, to avoid
       a task disappearing mid-execution. The event loop only keeps
       weak references to tasks. A task that isn't referenced elsewhere
       may get garbage collected at any time, even before it's done.

    .. versionchanged:: 3.10
       Removed the *loop* parameter.
    .. deprecated:: 3.10
       Deprecation warning is emitted if *aw* is not Future-like object
       and there is no running event loop.
    """

```

----------------------------------------

TITLE: Using lookahead with Python iterators
DESCRIPTION: Example showing how to check the next value in an iterator without advancing it, followed by using next() to move forward.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
>>> lookahead(iterator)             # Check next value
'b'
>>> next(iterator)                  # Continue moving forward
'b'
```

----------------------------------------

TITLE: Conditional Import Example in IDLE
DESCRIPTION: Shows the recommended pattern for placing imports that are only needed for testing in an 'if __name__ == "__main__"' clause rather than at the top of the file to avoid circular imports and potential deadlocks.
SOURCE: https://github.com/python/cpython/blob/main/Lib/idlelib/README.txt#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
if __name__ == '__main__'
```

----------------------------------------

TITLE: Using subprocess.call() for Simple Command Execution in Python
DESCRIPTION: Shows how to use the subprocess.call() function to execute a command and get its return status. This function is a convenient wrapper around Popen for simple use cases.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
sts = subprocess.call(['dpkg', '-i', '/tmp/new-package.deb'])
if sts == 0:
    # Success
    ...
else:
    # dpkg returned an error
    ...
```

----------------------------------------

TITLE: Opening and Managing ZIP Files in Python
DESCRIPTION: The `ZipFile.open` method accesses a file within a ZIP archive as a binary file-like object. It supports both read ('r') and write ('w') modes, and can handle encrypted files with a password. The code example demonstrates using the method as a context manager. Dependencies include the io module for buffer operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/zipfile.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
with ZipFile('spam.zip') as myzip:
    with myzip.open('eggs.txt') as myfile:
        print(myfile.read())
```

----------------------------------------

TITLE: ThreadingMock Usage Example
DESCRIPTION: Shows how to use ThreadingMock for testing threaded code with wait conditions and timeouts.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_37

LANGUAGE: python
CODE:
```
mock = ThreadingMock()
thread = threading.Thread(target=mock)
thread.start()
mock.wait_until_called(timeout=1)
thread.join()
```

----------------------------------------

TITLE: Stateful Object Pickling Example in Python
DESCRIPTION: Implementation of a TextReader class demonstrating custom pickling behavior for stateful objects using __getstate__ and __setstate__ methods to handle file objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pickle.rst#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
class TextReader:
    """Print and number lines in a text file."""

    def __init__(self, filename):
        self.filename = filename
        self.file = open(filename)
        self.lineno = 0

    def readline(self):
        self.lineno += 1
        line = self.file.readline()
        if not line:
            return None
        if line.endswith('\n'):
            line = line[:-1]
        return "%i: %s" % (self.lineno, line)

    def __getstate__(self):
        # Copy the object's state from self.__dict__ which contains
        # all our instance attributes. Always use the dict.copy()
        # method to avoid modifying the original state.
        state = self.__dict__.copy()
        # Remove the unpicklable entries.
        del state['file']
        return state

    def __setstate__(self, state):
        # Restore instance attributes (i.e., filename and lineno).
        self.__dict__.update(state)
        # Restore the previously opened file's state. To do so, we need to
        # reopen it and read from it until the line count is restored.
        file = open(self.filename)
        for _ in range(self.lineno):
            file.readline()
        # Finally, save the file.
        self.file = file
```

----------------------------------------

TITLE: Writing CSV with Unix Dialect using Python CSV Module
DESCRIPTION: This snippet demonstrates how to write a CSV file using the Unix dialect, which uses '\n' as the line terminator and quotes all fields. Dependencies include the Python csv module, and the snippet opens a file for writing using this specific dialect.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/csv.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
import csv

with open('students.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile, dialect='unix')

```

----------------------------------------

TITLE: Removing Suffix from bytes/bytearray in Python
DESCRIPTION: Demonstrates the removesuffix() method for bytes and bytearray objects which removes a specified suffix if the binary data ends with it. Returns a new object with the suffix removed or the original data if the suffix is not found.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_43

LANGUAGE: python
CODE:
```
>>> b'MiscTests'.removesuffix(b'Tests')
b'Misc'
>>> b'TmpDirMixin'.removesuffix(b'Tests')
b'TmpDirMixin'
```

----------------------------------------

TITLE: Hashing with BLAKE2b (Shortcut)
DESCRIPTION: This snippet shows a shortcut for hashing data with BLAKE2b. It passes the initial data directly to the constructor and retrieves the hexadecimal digest immediately.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/hashlib.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> from hashlib import blake2b
>>> blake2b(b'Hello world').hexdigest()
'6ff843ba685842aa82031d3f53c48b66326df7639a63d128974c5c14f31a0f33343a8c65551134ed1ae0f2b0dd2bb495dc81039e3eeb0aa1bb0388bbeac29183'

```

----------------------------------------

TITLE: Using Named Temporary Files as a Safer Alternative to mktemp in Python
DESCRIPTION: Example showing how to use NamedTemporaryFile with delete=False as a safer alternative to the deprecated mktemp function, addressing potential security issues.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tempfile.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> f = NamedTemporaryFile(delete=False)
>>> f.name
'/tmp/tmptjujjt'
>>> f.write(b"Hello World!\n")
13
>>> f.close()
>>> os.unlink(f.name)
>>> os.path.exists(f.name)
False
```

----------------------------------------

TITLE: PEP 553: Built-in breakpoint() Function in Python 3.7
DESCRIPTION: This entry introduces the new built-in function breakpoint(), aligned with PEP 553, which enhances debugging by allowing developers to easily insert breakpoints in their code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_3



----------------------------------------

TITLE: Translation Function Usage Example
DESCRIPTION: Shows how to mark strings for translation using the installed _ function in Python's builtins namespace.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/gettext.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
print(_('This string will be translated.'))
```

----------------------------------------

TITLE: Defining Generic Classes in Python
DESCRIPTION: This code snippet shows the syntax for declaring generic classes using the Python typing module. The example demonstrates the use of TypeVar for parameterizing classes and explains how base classes and decorators are evaluated relative to type parameter scopes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_28

LANGUAGE: python
CODE:
```
class Bag[T]: ...
```

LANGUAGE: python
CODE:
```
annotation-def TYPE_PARAMS_OF_Bag():
    T = typing.TypeVar("T")
    class Bag(typing.Generic[T]):
        __type_params__ = (T,)
        ...
    return Bag
Bag = TYPE_PARAMS_OF_Bag()
```

----------------------------------------

TITLE: Using reversible dict and dict views in Python
DESCRIPTION: Enhancement to make dict and dict views reversible. This allows iterating through dictionary keys, values, or items in reverse order using the reversed() built-in function.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0a1.rst#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
# Creating a dictionary
my_dict = {'a': 1, 'b': 2, 'c': 3}

# Iterating in reverse order through keys
for key in reversed(my_dict):
    print(key)

# Iterating in reverse order through items
for key, value in reversed(my_dict.items()):
    print(key, value)

# Iterating in reverse order through values
for value in reversed(my_dict.values()):
    print(value)
```

----------------------------------------

TITLE: Direct Timeit Module Usage - Python
DESCRIPTION: Shows how to use timeit.timeit() function directly in Python code to measure performance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/timeit.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> import timeit
>>> timeit.timeit('char in text', setup='text = "sample string"; char = "g"')
>>> timeit.timeit('text.find(char)', setup='text = "sample string"; char = "g"')
```

----------------------------------------

TITLE: Formatting current stack with format_stack
DESCRIPTION: A shorthand for formatting the current stack into a list of strings. Combines extract_stack and format_list operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
format_stack(f=None, limit=None)
```

----------------------------------------

TITLE: Using asyncio Condition with acquire and release
DESCRIPTION: This snippet demonstrates how to use an asyncio Condition with explicit `acquire` and `release` calls. The underlying lock is acquired before waiting on the condition and released in a `finally` block to ensure it's always released, even if exceptions occur.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-sync.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
"cond = asyncio.Condition()

# ... later
await cond.acquire()
try:
    await cond.wait()
finally:
    cond.release()"
```

----------------------------------------

TITLE: Parsing Command-Line Arguments for Virtual Environment Creation in Python
DESCRIPTION: This snippet defines command-line arguments for a virtual environment creation script. It includes options for clearing existing environments, upgrading, and verbosity settings. The parser is configured to handle these arguments and provide help text for each option.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/venv.rst#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
parser.add_argument('--clear', default=False, action='store_true',
                    dest='clear', help='Delete the contents of the '
                                       'virtual environment '
                                       'directory if it already '
                                       'exists, before virtual '
                                       'environment creation.')
parser.add_argument('--upgrade', default=False, action='store_true',
                    dest='upgrade', help='Upgrade the virtual '
                                         'environment directory to '
                                         'use this version of '
                                         'Python, assuming Python '
                                         'has been upgraded '
                                         'in-place.')
parser.add_argument('--verbose', default=False, action='store_true',
                    dest='verbose', help='Display the output '
                                         'from the scripts which '
                                         'install setuptools and pip.')
options = parser.parse_args(args)
if options.upgrade and options.clear:
    raise ValueError('you cannot supply --upgrade and --clear together.')
```

----------------------------------------

TITLE: Explicit Acquire-Release for Python Threading Lock
DESCRIPTION: Shows the explicit `acquire` and `release` calls for a threading lock within a `try...finally` block. This pattern is functionally equivalent to using the `with` statement for synchronization objects, ensuring the lock is always released.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/threading.rst#_snippet_10

LANGUAGE: python
CODE:
```
some_lock.acquire()
try:
    # do something...
finally:
    some_lock.release()
```

----------------------------------------

TITLE: Calculating Population Standard Deviation in Python
DESCRIPTION: This example shows how to use the pstdev function to calculate the population standard deviation of a dataset.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
>>> pstdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])
0.986893273527251
```

----------------------------------------

TITLE: Base Handler Class Definition
DESCRIPTION: This class is an abstract base class for running WSGI applications. Each instance will handle a single HTTP request, although in principle you could create a subclass that was reusable for multiple requests. It provides a run method intended for external use that will execute the specified WSGI application, *app*.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/wsgiref.rst#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
".. class:: BaseHandler()\n\n   This is an abstract base class for running WSGI applications.  Each instance\n   will handle a single HTTP request, although in principle you could create a\n   subclass that was reusable for multiple requests.\n\n   :class:`BaseHandler` instances have only one method intended for external use:\n\n\n   .. method:: BaseHandler.run(app)\n\n      Run the specified WSGI application, *app*."
```

----------------------------------------

TITLE: Regular Expression Pattern Splitting
DESCRIPTION: Example showing new re.split functionality that supports splitting on patterns that match empty strings like word boundaries.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_13

LANGUAGE: Python
CODE:
```
re.split(r'\b')
```

----------------------------------------

TITLE: Configuring Python Logging with basicConfig
DESCRIPTION: Example showing how to configure logging using the basicConfig function with various parameters including filename, level, and format.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
import logging
logging.basicConfig(filename='/var/log/application.log',
    level=0,  # Log all messages
    format='%(levelname):%(process):%(thread):%(message)')
```

----------------------------------------

TITLE: Alternative Self Implementation with TypeVar in Python
DESCRIPTION: Provides an equivalent implementation of the `Self` behavior using a `TypeVar` bound to the base class, demonstrating the underlying mechanism that `Self` simplifies.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_54

LANGUAGE: python
CODE:
```
from typing import TypeVar

Self = TypeVar("Self", bound="Foo")

class Foo:
    def return_self(self: Self) -> Self:
        ...
        return self
```

----------------------------------------

TITLE: Customizing Metavar in argparse Help Python
DESCRIPTION: Demonstrates how to override the default `metavar` displayed in help messages using the `metavar` parameter in `add_argument`. It shows parsing an example command line and printing the help output with custom metavar values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_58

LANGUAGE: Python
CODE:
```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo', metavar='YYY')
>>> parser.add_argument('bar', metavar='XXX')
>>> parser.parse_args('X --foo Y'.split())
Namespace(bar='X', foo='Y')
>>> parser.print_help()
usage:  [-h] [--foo YYY] XXX

positional arguments:
 XXX

options:
 -h, --help  show this help message and exit
 --foo YYY
```

----------------------------------------

TITLE: Getting Email Recipients Example - Python
DESCRIPTION: Demonstrates how to extract all recipient email addresses from a message using getaddresses() function. The example combines To, CC, Resent-To, and Resent-CC fields.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.utils.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from email.utils import getaddresses

tos = msg.get_all('to', [])
ccs = msg.get_all('cc', [])
resent_tos = msg.get_all('resent-to', [])
resent_ccs = msg.get_all('resent-cc', [])
all_recipients = getaddresses(tos + ccs + resent_tos + resent_ccs)
```

----------------------------------------

TITLE: Using dataclass_transform on a Decorator Function (Python)
DESCRIPTION: This example demonstrates applying `@dataclass_transform` to a function `create_model` that decorates classes. Type checkers will recognize that classes decorated with `@create_model`, like `CustomerModel`, should have dataclass-like features, such as an automatically generated `__init__` method based on type-annotated attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_169

LANGUAGE: Python
CODE:
```
@dataclass_transform()
def create_model[T](cls: type[T]) -> type[T]:
    ...
    return cls

@create_model
class CustomerModel:
    id: int
    name: str
```

----------------------------------------

TITLE: Error Code Lookup Example in Python XML Parser
DESCRIPTION: Demonstrates how to handle XML parsing errors by catching ExpatError exceptions and looking up corresponding error messages using the errors dictionary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pyexpat.rst#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
from xml.parsers.expat import ParserCreate, ExpatError, errors

p = ParserCreate()
try:
    p.Parse(some_xml_document)
except ExpatError as err:
    print("Error:", errors.messages[err.code])
```

----------------------------------------

TITLE: Modified XML Output After Removing Countries
DESCRIPTION: The XML output after removing countries with a rank higher than 50, showing only Liechtenstein and Singapore remain.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_12

LANGUAGE: xml
CODE:
```
<?xml version="1.0"?>
<data>
    <country name="Liechtenstein">
        <rank updated="yes">2</rank>
        <year>2008</year>
        <gdppc>141100</gdppc>
        <neighbor name="Austria" direction="E"/>
        <neighbor name="Switzerland" direction="W"/>
    </country>
    <country name="Singapore">
        <rank updated="yes">5</rank>
        <year>2011</year>
        <gdppc>59900</gdppc>
        <neighbor name="Malaysia" direction="N"/>
```

----------------------------------------

TITLE: Running unittest Discovery in Python
DESCRIPTION: Demonstrates how to use the unittest discover command to find and run test files in a specified directory.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.7.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
python -m unittest discover -s test
```

----------------------------------------

TITLE: Testing with doctest Module in Python
DESCRIPTION: Shows how to write and validate tests embedded in docstrings using the doctest module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
def average(values):
    """Computes the arithmetic mean of a list of numbers.

    >>> print(average([20, 30, 70]))
    40.0
    """
    return sum(values) / len(values)

import doctest
doctest.testmod()   # automatically validate the embedded tests
```

----------------------------------------

TITLE: While Loop with Assignment Expression to Read Blocks in Python
DESCRIPTION: This code demonstrates using the walrus operator in a while loop to read fixed-size blocks from a file and process them, enhancing code efficiency and clarity.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
while (block := f.read(256)) != '':
    process(block)
```

----------------------------------------

TITLE: Filtering Profile Stats Output in Python
DESCRIPTION: Demonstrates how to use the print_stats method to filter and limit the output of profiling statistics. The example shows two different ways to apply restrictions: first limiting by percentage, then by filename pattern, and vice versa.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/profile.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
print_stats(.1, 'foo:')
```

LANGUAGE: python
CODE:
```
print_stats('foo:', .1)
```

----------------------------------------

TITLE: Verifying Global Variable Modification After Function Call
DESCRIPTION: This example verifies that the global variable was indeed modified by the function that declared it as global.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> print(x)
11
```

----------------------------------------

TITLE: Closing Write End of WriteTransport in Python
DESCRIPTION: This method closes the write end of the transport after flushing all buffered data. Data may still be received. It can raise NotImplementedError if the transport doesn't support half-closed connections.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
WriteTransport.write_eof()
```

----------------------------------------

TITLE: Multi-Process Logging with Queue Handler in Python
DESCRIPTION: Implements a logging system that allows multiple processes to log to a single file using a QueueHandler and dedicated listener process. Includes process-safe logging configuration and message handling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
import logging
import logging.handlers
import multiprocessing
from random import choice, random
import time

def listener_configurer():
    root = logging.getLogger()
    h = logging.handlers.RotatingFileHandler('mptest.log', 'a', 300, 10)
    f = logging.Formatter('%(asctime)s %(processName)-10s %(name)s %(levelname)-8s %(message)s')
    h.setFormatter(f)
    root.addHandler(h)

def listener_process(queue, configurer):
    configurer()
    while True:
        try:
            record = queue.get()
            if record is None:
                break
            logger = logging.getLogger(record.name)
            logger.handle(record)
        except Exception:
            import sys, traceback
            print('Whoops! Problem:', file=sys.stderr)
            traceback.print_exc(file=sys.stderr)

LEVELS = [logging.DEBUG, logging.INFO, logging.WARNING,
          logging.ERROR, logging.CRITICAL]

LOGGERS = ['a.b.c', 'd.e.f']

MESSAGES = [
    'Random message #1',
    'Random message #2',
    'Random message #3',
]

def worker_configurer(queue):
    h = logging.handlers.QueueHandler(queue)
    root = logging.getLogger()
    root.addHandler(h)
    root.setLevel(logging.DEBUG)

def worker_process(queue, configurer):
    configurer(queue)
    name = multiprocessing.current_process().name
    print('Worker started: %s' % name)
    for i in range(10):
        time.sleep(random())
        logger = logging.getLogger(choice(LOGGERS))
        level = choice(LEVELS)
        message = choice(MESSAGES)
        logger.log(level, message)
    print('Worker finished: %s' % name)

def main():
    queue = multiprocessing.Queue(-1)
    listener = multiprocessing.Process(target=listener_process,
                                       args=(queue, listener_configurer))
    listener.start()
    workers = []
    for i in range(10):
        worker = multiprocessing.Process(target=worker_process,
                                         args=(queue, worker_configurer))
        workers.append(worker)
        worker.start()
    for w in workers:
        w.join()
    queue.put_nowait(None)
    listener.join()

if __name__ == '__main__':
    main()
```

----------------------------------------

TITLE: Weekday of a Given Date - Python
DESCRIPTION: This function returns the day of the week for a specified date, enabling date-based operations in calendar applications.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/calendar.rst#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
.. function:: weekday(year, month, day)
```

----------------------------------------

TITLE: Generating Random Bytes in Python
DESCRIPTION: The randbytes() function generates n random bytes. It should not be used for security tokens; use secrets.token_bytes() instead.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/random.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
randbytes(n)
```

----------------------------------------

TITLE: Defining HTTPHandler Class for Web Server Logging in Python
DESCRIPTION: Implementation of the HTTPHandler class that supports sending logging messages to a web server using either GET or POST methods. Supports secure connections and credentials for authentication.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_35

LANGUAGE: python
CODE:
```
class HTTPHandler(host, url, method='GET', secure=False, credentials=None, context=None):
   """
   Returns a new instance of the HTTPHandler class. The *host* can be
   """
```

----------------------------------------

TITLE: Positional-Only Arguments Example
DESCRIPTION: Demonstrates how positional-only arguments can prevent keyword argument ambiguity by using the '/' syntax
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
def foo(name, /, **kwds):
    return 'name' in kwds
```

----------------------------------------

TITLE: Adapting Custom Python Types to SQLite Values
DESCRIPTION: Shows how to adapt custom Python types to SQLite-compatible values using either a __conform__ method or a separate adapter function. This allows storing custom objects in SQLite databases.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
class Point:
    def __init__(self, x, y):
        self.x, self.y = x, y

    def __conform__(self, protocol):
        if protocol is sqlite3.PrepareProtocol:
            return f"{self.x};{self.y}"

con = sqlite3.connect(":memory:")
cur = con.cursor()

cur.execute("SELECT ?", (Point(4.0, -3.2),))
print(cur.fetchone()[0])
con.close()
```

LANGUAGE: python
CODE:
```
class Point:
    def __init__(self, x, y):
        self.x, self.y = x, y

def adapt_point(point):
    return f"{point.x};{point.y}"

sqlite3.register_adapter(Point, adapt_point)

con = sqlite3.connect(":memory:")
cur = con.cursor()

cur.execute("SELECT ?", (Point(1.0, 2.5),))
print(cur.fetchone()[0])
con.close()
```

----------------------------------------

TITLE: Use Literal Type Alias (Invalid) Python
DESCRIPTION: Provides an example of calling a function that accepts a `Literal` type alias, demonstrating a call with a value that does *not* conform to the defined literals, which would result in a type checker error.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_71

LANGUAGE: Python
CODE:
```
open_helper('/other/path', 'typo')
```

----------------------------------------

TITLE: Getting Level Name or Value in Python Logging
DESCRIPTION: Returns the textual or numeric representation of a logging level. It handles predefined levels, custom levels set with addLevelName, and numeric values. It also accepts string representations of levels and returns their numeric values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
def getLevelName(level):
```

----------------------------------------

TITLE: Explicit Exception Chaining in Python 3
DESCRIPTION: Demonstrates explicit exception chaining, where a secondary exception is raised from a primary exception. The primary exception is stored in the __cause__ attribute of the secondary exception.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.0.rst#2025-04-23_snippet_9

LANGUAGE: Python
CODE:
```
raise SecondaryException() from primary_exception
```

----------------------------------------

TITLE: Using String Literal Concatenation with Comments in Python Regular Expressions
DESCRIPTION: Example demonstrating how string literal concatenation can be used to split a regular expression pattern across multiple lines with embedded comments for clarity. This technique helps make complex patterns more readable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/lexical_analysis.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
re.compile("[A-Za-z_]"       # letter or underscore
         "[A-Za-z0-9_]*"   # letter, digit or underscore
        )
```

----------------------------------------

TITLE: Using Auto-assignment for Enum Values in Python
DESCRIPTION: Demonstrates how to use the 'auto()' function to automatically assign values to enum members. This is useful when the specific values are not important.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_4

LANGUAGE: Python
CODE:
```
from enum import Enum, auto
class Weekday(Flag):
    MONDAY = auto()
    TUESDAY = auto()
    WEDNESDAY = auto()
    THURSDAY = auto()
    FRIDAY = auto()
    SATURDAY = auto()
    SUNDAY = auto()
    WEEKEND = SATURDAY | SUNDAY
```

----------------------------------------

TITLE: Initializing CPython with UTF-8 Mode (C)
DESCRIPTION: This snippet demonstrates how to preinitialize the Python interpreter using `PyPreConfig` to specifically enable UTF-8 mode. It then proceeds with the standard `Py_Initialize` and `Py_Finalize` calls, showing the typical lifecycle of an embedded Python interpreter. It requires the CPython C API headers and proper linking. It shows initializing `PyPreConfig`, setting a flag (`utf8_mode`), calling `Py_PreInitialize`, handling potential errors via `PyStatus`, and finally calling `Py_Initialize` and `Py_Finalize`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/init_config.rst#_snippet_5

LANGUAGE: C
CODE:
```
PyStatus status;
PyPreConfig preconfig;
PyPreConfig_InitPythonConfig(&preconfig);

preconfig.utf8_mode = 1;

status = Py_PreInitialize(&preconfig);
if (PyStatus_Exception(status)) {
    Py_ExitStatusException(status);
}

/* at this point, Python speaks UTF-8 */

Py_Initialize();
/* ... use Python API here ... */
Py_Finalize();
```

----------------------------------------

TITLE: Sending MIME Email with Image Attachments in Python
DESCRIPTION: Demonstrates how to create and send a MIME message containing image attachments from a directory using Python's email module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.examples.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
# ../includes/email-mime.py
```

----------------------------------------

TITLE: Creating and Manipulating SimpleCookie in Python
DESCRIPTION: Demonstrates basic cookie creation, setting values, and generating HTTP headers using the SimpleCookie class from the http.cookies module
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.cookies.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from http import cookies
C = cookies.SimpleCookie()
C["fig"] = "newton"
C["sugar"] = "wafer"
print(C) # generate HTTP headers
```

----------------------------------------

TITLE: Initializing a Joinable Queue in Python
DESCRIPTION: JoinableQueue is a Queue subclass that adds task_done() and join() methods. It allows tracking of task completion and blocking until all items have been processed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
JoinableQueue([maxsize])
```

----------------------------------------

TITLE: Custom stdout Capturing in Python with a Custom TextIOBase Class
DESCRIPTION: Demonstrates creating a custom TextIOBase subclass to capture standard output in Python. The custom class collects written data in a list and can be used to redirect output for later retrieval.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/extending.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> import io, sys
>>> class StdoutCatcher(io.TextIOBase):
...     def __init__(self):
...         self.data = []
...     def write(self, stuff):
...         self.data.append(stuff)
...
>>> import sys
>>> sys.stdout = StdoutCatcher()
>>> print('foo')
>>> print('hello world!')
>>> sys.stderr.write(''.join(sys.stdout.data))
foo
hello world!
```

----------------------------------------

TITLE: Functional Total Ordering with functools in Python
DESCRIPTION: The functools module includes a total_ordering decorator facilitating automatic generation of rich comparison methods given implementations of the __eq__ and __lt__ methods. This simplifies class definition involving comparison without needing to manually implement all comparison dunder methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
    @total_ordering
    class Student:
        def __eq__(self, other):
            return ((self.lastname.lower(), self.firstname.lower()) ==
                    (other.lastname.lower(), other.firstname.lower()))

        def __lt__(self, other):
            return ((self.lastname.lower(), self.firstname.lower()) <
                    (other.lastname.lower(), other.firstname.lower()))
```

----------------------------------------

TITLE: Environment Variable Expansion with os.path
DESCRIPTION: The expandvars function replaces environment variables represented by $name, ${name}, or %name% (Windows) within a path. It maintains unsupported references unchanged and supports path-like objects since version 3.6.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
def expandvars(path):
    return os.path.expandvars(path)
```

----------------------------------------

TITLE: Pathname Constant Definitions in Python OS Module
DESCRIPTION: Defines system-specific constants for pathname manipulation, including current directory, parent directory, separators, and path-related identifiers used across different operating systems
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_84

LANGUAGE: python
CODE:
```
curdir = '.'
```

LANGUAGE: python
CODE:
```
pardir = '..'
```

LANGUAGE: python
CODE:
```
sep = '/' # POSIX
sep = '\\' # Windows
```

----------------------------------------

TITLE: Implementing Custom Validator Classes in Python
DESCRIPTION: Three concrete validator implementations: OneOf for validating against a set of options, Number for numeric validation with optional range checks, and String for string validation with size and predicate checks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
class OneOf(Validator):

    def __init__(self, *options):
        self.options = set(options)

    def validate(self, value):
        if value not in self.options:
            raise ValueError(
                f'Expected {value!r} to be one of {self.options!r}'
            )

class Number(Validator):

    def __init__(self, minvalue=None, maxvalue=None):
        self.minvalue = minvalue
        self.maxvalue = maxvalue

    def validate(self, value):
        if not isinstance(value, (int, float)):
            raise TypeError(f'Expected {value!r} to be an int or float')
        if self.minvalue is not None and value < self.minvalue:
            raise ValueError(
                f'Expected {value!r} to be at least {self.minvalue!r}'
            )
        if self.maxvalue is not None and value > self.maxvalue:
            raise ValueError(
                f'Expected {value!r} to be no more than {self.maxvalue!r}'
            )

class String(Validator):

    def __init__(self, minsize=None, maxsize=None, predicate=None):
        self.minsize = minsize
        self.maxsize = maxsize
        self.predicate = predicate

    def validate(self, value):
        if not isinstance(value, str):
            raise TypeError(f'Expected {value!r} to be an str')
        if self.minsize is not None and len(value) < self.minsize:
            raise ValueError(
                f'Expected {value!r} to be no smaller than {self.minsize!r}'
            )
        if self.maxsize is not None and len(value) > self.maxsize:
            raise ValueError(
                f'Expected {value!r} to be no bigger than {self.maxsize!r}'
            )
        if self.predicate is not None and not self.predicate(value):
            raise ValueError(
                f'Expected {self.predicate} to be true for {value!r}'
            )
```

----------------------------------------

TITLE: Parsing and Dumping Module AST (Python)
DESCRIPTION: Parses a Python source string representing a module (`"exec"` mode) into an AST using `ast.parse` and then prints a formatted string representation of the resulting AST tree using `ast.dump` with indentation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_2

LANGUAGE: python
CODE:
```
print(ast.dump(ast.parse('x = 1'), indent=4))
```

----------------------------------------

TITLE: ZeroMQ Socket Listener for Logging
DESCRIPTION: This snippet demonstrates how to create a QueueListener that listens for log messages over a ZeroMQ socket, enabling the processing of log messages in an asynchronous manner.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_30

LANGUAGE: Python
CODE:
```
class ZeroMQSocketListener(QueueListener):
    def __init__(self, uri, /, *handlers, **kwargs):
        self.ctx = kwargs.get('ctx') or zmq.Context()
        socket = zmq.Socket(self.ctx, zmq.SUB)
        socket.setsockopt_string(zmq.SUBSCRIBE, '')  # subscribe to everything
        socket.connect(uri)
        super().__init__(socket, *handlers, **kwargs)

    def dequeue(self):
        msg = self.queue.recv_json()
        return logging.makeLogRecord(msg)
```

----------------------------------------

TITLE: Defining and Using the @singledispatch Decorator in Python
DESCRIPTION: Demonstrates how to create a generic function using the @singledispatch decorator that dispatches based on the type of the first argument. The example shows a basic implementation along with various specialized handlers for different types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
>>> from functools import singledispatch
>>> @singledispatch
... def fun(arg, verbose=False):
...     if verbose:
...         print("Let me just say,", end=" ")
...     print(arg)
```

----------------------------------------

TITLE: Using Raw Strings in Python
DESCRIPTION: This snippet shows how to use raw strings in Python to prevent backslashes from being interpreted as special characters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/introduction.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
>>> print('C:\some\name')  # here \n means newline!
C:\some
ame
>>> print(r'C:\some\name')  # note the r before the quote
C:\some\name
```

----------------------------------------

TITLE: Creating a Yes/No/Cancel Dialog with tkinter.messagebox
DESCRIPTION: The askyesnocancel function creates a dialog with YES, NO, and CANCEL buttons. It returns True if YES is clicked, None if CANCEL is clicked, and False if NO is clicked.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.messagebox.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
def askyesnocancel(title=None, message=None, **options):

   Ask a question. Shows buttons :data:`YES`, :data:`NO` and :data:`CANCEL`.
   Return ``True`` if the answer is yes, ``None`` if cancelled, and ``False``
   otherwise.
```

----------------------------------------

TITLE: Adding Multiprocessing Support for Frozen Python Programs
DESCRIPTION: Adds support for programs using multiprocessing that have been frozen to produce a Windows executable. This function should be called immediately after the 'if __name__ == '__main__'' line in the main module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
from multiprocessing import Process, freeze_support

def f():

```

----------------------------------------

TITLE: Calculating Base-10 Logarithm in Python
DESCRIPTION: This function computes the base-10 logarithm of x, providing a more precise alternative to log(x, 10). It is often used in scientific and engineering applications.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/math.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
.. function:: log10(x)

   Return the base-10 logarithm of *x*.  This is usually more accurate
   than ``log(x, 10)``.
```

----------------------------------------

TITLE: Computing Least Common Multiple in Python
DESCRIPTION: The lcm() function returns the least common multiple of the specified integer arguments. If all arguments are nonzero, it returns the smallest positive integer that is a multiple of all arguments. If any argument is zero, it returns 0. Without arguments, it returns 1.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/math.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
lcm(*integers)
```

----------------------------------------

TITLE: Python Grammar: Subscriptions
DESCRIPTION: Defines the syntax for subscriptions in Python, which are used to select an element from a container. Includes how `__getitem__` and `__class_getitem__` are used, and how expression lists are evaluated into tuples when they contain commas or starred expressions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/expressions.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
"subscription: `primary` \"[\" `flexible_expression_list` \"]\""
```

----------------------------------------

TITLE: Iterating over IPv4Network in ipaddress
DESCRIPTION: This code demonstrates iterating over all addresses within an IPv4Network. The example returns all hosts within the given IPv4Network, including unusable hosts. To iterate only over usable hosts, use the IPv4Network.hosts() method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ipaddress.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```

>>> for addr in IPv4Network('192.0.2.0/28'):
...     addr
...
IPv4Address('192.0.2.0')
IPv4Address('192.0.2.1')
IPv4Address('192.0.2.2')
IPv4Address('192.0.2.3')
IPv4Address('192.0.2.4')
IPv4Address('192.0.2.5')
IPv4Address('192.0.2.6')
IPv4Address('192.0.2.7')
IPv4Address('192.0.2.8')
IPv4Address('192.0.2.9')
IPv4Address('192.0.2.10')
IPv4Address('192.0.2.11')
IPv4Address('192.0.2.12')
IPv4Address('192.0.2.13')
IPv4Address('192.0.2.14')
IPv4Address('192.0.2.15')

```

----------------------------------------

TITLE: Declaring Type Aliases with TypeAlias in Python
DESCRIPTION: Shows the basic usage of `TypeAlias` to explicitly declare a variable assignment as a type alias, improving clarity and helping type checkers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_56

LANGUAGE: python
CODE:
```
from typing import TypeAlias

Factors: TypeAlias = list[int]
```

----------------------------------------

TITLE: Asserting List and Tuple Equality in Python unittest
DESCRIPTION: Methods to test if two lists or tuples are equal. They provide detailed error messages showing only the differences between the compared objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
assertListEqual(first, second, msg=None)
assertTupleEqual(first, second, msg=None)
```

----------------------------------------

TITLE: Defining a Class with singledispatchmethod in Python
DESCRIPTION: Shows how to use the @singledispatchmethod decorator to create generic methods that dispatch based on the type of the first non-self argument, allowing different method implementations based on argument types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
class Negator:
    @singledispatchmethod
    def neg(self, arg):
        raise NotImplementedError("Cannot negate a")

    @neg.register
    def _(self, arg: int):
        return -arg

    @neg.register
    def _(self, arg: bool):
        return not arg
```

----------------------------------------

TITLE: Perform Thread-Safe Sum Python
DESCRIPTION: Demonstrates adding numbers together in a thread-safe manner using a lock. This snippet shows the core logic within a `with lock:` block.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_66

LANGUAGE: Python
CODE:
```
with lock:
    return sum(numbers)
```

----------------------------------------

TITLE: Fibonacci Function Definition in Python
DESCRIPTION: Implements a function to print Fibonacci series up to a given number. Demonstrates basic function definition, docstrings, and loop implementation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
def fib(n):    # write Fibonacci series less than n
    """Print a Fibonacci series less than n."""
    a, b = 0, 1
    while a < n:
        print(a, end=' ')
        a, b = b, a+b
    print()
```

----------------------------------------

TITLE: Adding Content-Disposition Header with Non-ASCII Filename in Python Email
DESCRIPTION: Demonstrates adding a Content-Disposition header with a non-ASCII filename using extended interface in Python email message object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.message.rst#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
msg.add_header('Content-Disposition', 'attachment',
               filename=('iso-8859-1', '', 'Fußballer.ppt'))
```

----------------------------------------

TITLE: Creating Symbolic Links with Path.symlink_to() in Python
DESCRIPTION: Demonstrates how to create a symbolic link using the Path.symlink_to() method from pathlib. The example creates a symlink named 'mylink' pointing to 'setup.py' and shows how to access the target file through the symlink.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_42

LANGUAGE: python
CODE:
```
>>> p = Path('mylink')
>>> p.symlink_to('setup.py')
>>> p.resolve()
PosixPath('/home/antoine/pathlib/setup.py')
>>> p.stat().st_size
956
>>> p.lstat().st_size
8
```

----------------------------------------

TITLE: Non-blocking SSL Handshake Implementation in Python
DESCRIPTION: Shows how to implement non-blocking SSL handshake using select to handle SSLWantReadError and SSLWantWriteError conditions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_37

LANGUAGE: python
CODE:
```
while True:
    try:
        sock.do_handshake()
        break
    except ssl.SSLWantReadError:
        select.select([sock], [], [])
    except ssl.SSLWantWriteError:
        select.select([], [sock], [])
```

----------------------------------------

TITLE: Initializing FileHandler in Python
DESCRIPTION: Creates a new instance of FileHandler class. Opens the specified file for logging. Supports various modes, encoding, and delayed opening.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
FileHandler(filename, mode='a', encoding=None, delay=False, errors=None)
```

----------------------------------------

TITLE: Python Indentation Examples
DESCRIPTION: Demonstrates various levels of indentation in Python code, including nested blocks and mixed indentation styles.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/tokenizedata/tokenize_tests.txt#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
# Indentation
if 1:
    x = 2
if 1:
        x = 2
if 1:
    while 0:
     if 0:
           x = 2
     x = 2
if 0:
  if 2:
   while 0:
        if 1:
          x = 2
```

----------------------------------------

TITLE: Demonstrating Floating-Point Round-off Errors Python
DESCRIPTION: This snippet demonstrates how standard floating-point arithmetic in Python (simulated here with Decimal at reduced precision) can lead to round-off errors, causing the associative and distributive properties of addition to fail. It shows calculations where `(u + v) + w` and `u + (v + w)` yield different results, and similarly for `(u*v) + (u*w)` and `u * (v+w)`. The context precision is set to 8.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_35

LANGUAGE: Python
CODE:
```
from decimal import Decimal, getcontext
getcontext().prec = 8

u, v, w = Decimal(11111113), Decimal(-11111111), Decimal('7.51111111')
print((u + v) + w)
print(u + (v + w))

u, v, w = Decimal(20000), Decimal(-6), Decimal('6.0000003')
print((u*v) + (u*w))
print(u * (v+w))
```

----------------------------------------

TITLE: Customizing the User-Agent Header Globally in Python
DESCRIPTION: Example showing how to customize the default User-Agent header for all requests made with an opener. This modifies the addheaders attribute of an OpenerDirector object to set a custom User-Agent that mimics Mozilla.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_48

LANGUAGE: python
CODE:
```
import urllib.request
opener = urllib.request.build_opener()
opener.addheaders = [('User-agent', 'Mozilla/5.0')]
with opener.open('http://www.example.com/') as f:
  print(f.read().decode('utf-8'))
```

----------------------------------------

TITLE: Annotating Python Generator with Default SendType and ReturnType
DESCRIPTION: Annotates a Python generator function using `Generator[YieldType]`, relying on the default `SendType` and `ReturnType` which are `None`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_20

LANGUAGE: python
CODE:
```
def infinite_stream(start: int) -> Generator[int]:
    while True:
        yield start
        start += 1
```

----------------------------------------

TITLE: Evaluating Extended Assert Statement - Python
DESCRIPTION: This snippet illustrates the equivalent conditional code for the extended `assert expression1, expression2` statement when `__debug__` is true. It checks `expression1` and raises an `AssertionError` with `expression2` as the message if `expression1` is false.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/simple_stmts.rst#_snippet_3

LANGUAGE: python
CODE:
```
if __debug__:
    if not expression1: raise AssertionError(expression2)
```

----------------------------------------

TITLE: Comparing IPv4/IPv6 Addresses
DESCRIPTION: Illustrates how to compare IPv4 and IPv6 address objects using comparison operators. Note that addresses with different scope IDs are not considered equal.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ipaddress.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> IPv4Address('127.0.0.2') > IPv4Address('127.0.0.1')
True
>>> IPv4Address('127.0.0.2') == IPv4Address('127.0.0.1')
False
>>> IPv4Address('127.0.0.2') != IPv4Address('127.0.0.1')
True
>>> IPv6Address('fe80::1234') == IPv6Address('fe80::1234%1')
False
>>> IPv6Address('fe80::1234%1') != IPv6Address('fe80::1234%2')
True
```

----------------------------------------

TITLE: Invalid Subtyping of Python NewType
DESCRIPTION: Demonstrates an invalid attempt to create a subtype of a `NewType`. Subclassing a `NewType` is not supported and will result in runtime errors and type checking failures.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_8

LANGUAGE: Python
CODE:
```
from typing import NewType

UserId = NewType('UserId', int)

# Fails at runtime and does not pass type checking
class AdminUserId(UserId): pass
```

----------------------------------------

TITLE: Using Validator Descriptors in a Component Class
DESCRIPTION: Practical example showing how to use the validator descriptors in a real class to enforce data validation rules on class attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
class Component:

    name = String(minsize=3, maxsize=10, predicate=str.isupper)
    kind = OneOf('wood', 'metal', 'plastic')
    quantity = Number(minvalue=0)

    def __init__(self, name, kind, quantity):
        self.name = name
        self.kind = kind
        self.quantity = quantity
```

----------------------------------------

TITLE: Parsing List Literal into AST Nodes (Python)
DESCRIPTION: Illustrates the AST representation of a Python list literal. The example uses `ast.parse` to generate the AST for `[1, 2, 3]` and `ast.dump` to display the resulting `List` node containing `Constant` elements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_7

LANGUAGE: python
CODE:
```
print(ast.dump(ast.parse('[1, 2, 3]', mode='eval'), indent=4))
```

----------------------------------------

TITLE: Clearing Cookies in Python
DESCRIPTION: This method clears cookies from the CookieJar. It has optional parameters to specify domains and paths for more granular control over cookie removal.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.cookiejar.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
def clear(self, domain=None, path=None, name=None):
    pass
```

----------------------------------------

TITLE: IntFlag Usage Examples in Python
DESCRIPTION: Demonstrates IntFlag usage including bitwise operations and flag combinations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
>>> from enum import IntFlag
>>> class Perm(IntFlag):
...     R = 4
...     W = 2
...     X = 1
...
>>> Perm.R | Perm.W
<Perm.R|W: 6>
>>> Perm.R + Perm.W
6
>>> RW = Perm.R | Perm.W
>>> Perm.R in RW
True
```

----------------------------------------

TITLE: Parsing RFC 822 Email Headers in Python
DESCRIPTION: Shows how to parse email headers using classes from the email.parser module in Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.examples.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
# ../includes/email-headers.py
```

----------------------------------------

TITLE: Implementing Basic WSGI Hello World Application in Python
DESCRIPTION: A minimal WSGI application that demonstrates the basic structure and requirements of a WSGI app. It creates a simple HTTP server that responds with 'Hello World' on port 8000.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/wsgiref.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
def hello_world_app(environ, start_response):
    status = "200 OK"  # HTTP Status
    headers = [("Content-type", "text/plain; charset=utf-8")]  # HTTP Headers
    start_response(status, headers)

    # The returned object is going to be printed
    return [b"Hello World"]

with make_server("", 8000, hello_world_app) as httpd:
    print("Serving on port 8000...")

    # Serve until process is killed
    httpd.serve_forever()
```

----------------------------------------

TITLE: Sample Variance Calculation with Mean
DESCRIPTION: Examples of calculating sample variance using variance() function, both with and without pre-calculated mean value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
>>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]
>>> variance(data)
1.3720238095238095

>>> m = mean(data)
>>> variance(data, m)
1.3720238095238095
```

----------------------------------------

TITLE: Using tarfile with Context Manager and Filter in Python
DESCRIPTION: Shows how to use the tarfile.TarFile class with a context manager and a filter function to control which files are added to the archive and to modify file metadata during archiving.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_51

LANGUAGE: python
CODE:
```
>>> import tarfile, glob

>>> def myfilter(tarinfo):
...     if tarinfo.isfile():             # only save real files
...         tarinfo.uname = 'monty'      # redact the user name
...         return tarinfo

>>> with tarfile.open(name='myarchive.tar.gz', mode='w:gz') as tf:
...     for filename in glob.glob('*.txt'):
...         tf.add(filename, filter=myfilter)
...     tf.list()
-rw-r--r-- monty/501        902 2011-01-26 17:59:11 annotations.txt
-rw-r--r-- monty/501        123 2011-01-26 17:59:11 general_questions.txt
-rw-r--r-- monty/501       3514 2011-01-26 17:59:11 prion.txt
-rw-r--r-- monty/501        124 2011-01-26 17:59:11 py_todo.txt
```

----------------------------------------

TITLE: Parsing File-like Objects with Parser in Python
DESCRIPTION: Reads data from a text-mode file-like object, parses the text, and returns the root message object. The file object must support both readline and read methods. Similar to BytesParser.parse() but for text mode.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.parser.rst#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
parse(fp, headersonly=False)
```

----------------------------------------

TITLE: Applying Patches to Test Class Methods
DESCRIPTION: Shows techniques for applying patches across multiple test methods using class decorators and setUp/tearDown methods
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
>>> @patch('mymodule.SomeClass')
... class MyTest(unittest.TestCase):
...
...     def test_one(self, MockSomeClass):
...         self.assertIs(mymodule.SomeClass, MockSomeClass)
...
...     def test_two(self, MockSomeClass):
...         self.assertIs(mymodule.SomeClass, MockSomeClass)
```

----------------------------------------

TITLE: Creating a Basic Web Server with SimpleHTTPRequestHandler in Python
DESCRIPTION: This code snippet demonstrates how to create a very basic web server using the SimpleHTTPRequestHandler class. It serves files relative to the current directory on port 8000.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.server.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import http.server
import socketserver

PORT = 8000

Handler = http.server.SimpleHTTPRequestHandler

with socketserver.TCPServer(("", PORT), Handler) as httpd:
    print("serving at port", PORT)
    httpd.serve_forever()
```

----------------------------------------

TITLE: Using Fraction Methods in Python
DESCRIPTION: Shows usage of various Fraction methods including as_integer_ratio(), is_integer(), from_float(), from_decimal(), and limit_denominator().
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/fractions.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> from fractions import Fraction
>>> Fraction('3.1415926535897932').limit_denominator(1000)
Fraction(355, 113)
>>> from math import pi, cos
>>> Fraction(cos(pi/3))
Fraction(4503599627370497, 9007199254740992)
>>> Fraction(cos(pi/3)).limit_denominator()
Fraction(1, 2)
>>> Fraction(1.1).limit_denominator()
Fraction(11, 10)
```

----------------------------------------

TITLE: Accessing Annotated Origin Type at Runtime
DESCRIPTION: Shows how to retrieve the original type wrapped by `Annotated` at runtime using the `__origin__` attribute.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_85

LANGUAGE: Python
CODE:
```
>>> from typing import Annotated, get_origin
>>> Password = Annotated[str, "secret"]
>>> Password.__origin__
<class 'str'>
```

----------------------------------------

TITLE: Get annotations from function
DESCRIPTION: This doctest demonstrates how to retrieve annotations from a function using `get_annotations`. It defines a simple function `f` with type hints and uses `get_annotations` to retrieve these annotations as a dictionary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/annotationlib.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> def f(a: int, b: str) -> float:
      ...     pass
      >>> get_annotations(f)
      {'a': <class 'int'>, 'b': <class 'str'>, 'return': <class 'float'>}

```

----------------------------------------

TITLE: Using math.prod with Start Value
DESCRIPTION: Demonstrates using the new math.prod() function to calculate the product of values with an initial starting value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
>>> prior = 0.8
>>> likelihoods = [0.625, 0.84, 0.30]
>>> math.prod(likelihoods, start=prior)
0.126
```

----------------------------------------

TITLE: Checking Object Tracking Status with gc.is_tracked (Python)
DESCRIPTION: This snippet demonstrates the use of the `gc.is_tracked()` function in Python to determine if an object is currently being tracked by the garbage collector. It shows examples for various built-in types, illustrating that immutable types like integers, strings, and empty tuples are typically not tracked, while mutable containers like lists and dictionaries are.
SOURCE: https://github.com/python/cpython/blob/main/InternalDocs/garbage_collector.md#_snippet_9

LANGUAGE: Python
CODE:
```
>>> gc.is_tracked(0)
False
>>> gc.is_tracked("a")
False
>>> gc.is_tracked([])
True
>>> gc.is_tracked(())
False
>>> gc.is_tracked({})
True
>>> gc.is_tracked({"a": 1})
True
```

----------------------------------------

TITLE: Nesting Mutually Exclusive Group in Argument Group
DESCRIPTION: Demonstrates how to add a mutually exclusive group inside a regular argument group that has a title and description. The help output shows the mutually exclusive options listed under the parent argument group's section.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_90

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser(prog='PROG')
>>> group = parser.add_argument_group('Group title', 'Group description')
>>> exclusive_group = group.add_mutually_exclusive_group(required=True)
>>> exclusive_group.add_argument('--foo', help='foo help')
>>> exclusive_group.add_argument('--bar', help='bar help')
>>> parser.print_help()
usage: PROG [-h] (--foo FOO | --bar BAR)

options:
  -h, --help  show this help message and exit

Group title:
  Group description

  --foo FOO   foo help
  --bar BAR   bar help
```

----------------------------------------

TITLE: Checking Module Importability in Python
DESCRIPTION: Shows how to use importlib.util.find_spec() to check if a module can be imported without actually importing it. This example checks for the 'itertools' module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
import importlib.util
import sys

# For illustrative purposes.
name = 'itertools'

if name in sys.modules:
    print(f"{name!r} already in sys.modules")
elif (spec := importlib.util.find_spec(name)) is not None:
    # If you chose to perform the actual import ...
    module = importlib.util.module_from_spec(spec)
    sys.modules[name] = module
    spec.loader.exec_module(module)
    print(f"{name!r} has been imported")
else:
    print(f"can't find the {name!r} module")
```

----------------------------------------

TITLE: Using Pass in Function Definition - Python
DESCRIPTION: This example demonstrates the use of the `pass` statement as a placeholder within a function definition. It is used when a statement is syntactically required but no code functionality is needed immediately.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/simple_stmts.rst#_snippet_4

LANGUAGE: python
CODE:
```
def f(arg): pass    # a function that does nothing (yet)
```

----------------------------------------

TITLE: Setting ConfigParser Option Value
DESCRIPTION: Method signature for setting an option value within a section. Raises NoSectionError if section doesn't exist. Only string values are fully supported for interpolation and file operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_25

LANGUAGE: python
CODE:
```
set(section, option, value)
```

----------------------------------------

TITLE: Pushing and Popping from Heap - Python
DESCRIPTION: The `heappushpop` function pushes an item onto the heap and then pops and returns the smallest item. This combined action is more efficient than calling `heappush` followed by `heappop` separately.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/heapq.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
def heappushpop(heap, item):
    """
    Push *item* on the heap, then pop and return the smallest item from the
    *heap*. The combined action runs more efficiently than :func:`heappush`
    followed by a separate call to :func:`heappop`.
    """
```

----------------------------------------

TITLE: Creating a Pretty Formatted Memory Usage Report with tracemalloc
DESCRIPTION: Advanced code snippet that displays the top N lines allocating the most memory with formatting, file paths, line numbers, and the actual code. It filters out system modules to focus on application code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tracemalloc.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
import linecache
import os
import tracemalloc

def display_top(snapshot, key_type='lineno', limit=10):
    snapshot = snapshot.filter_traces((
        tracemalloc.Filter(False, "<frozen importlib._bootstrap>"),
        tracemalloc.Filter(False, "<unknown>"),
    ))
    top_stats = snapshot.statistics(key_type)

    print("Top %s lines" % limit)
    for index, stat in enumerate(top_stats[:limit], 1):
        frame = stat.traceback[0]
        print("#%s: %s:%s: %.1f KiB"
              % (index, frame.filename, frame.lineno, stat.size / 1024))
        line = linecache.getline(frame.filename, frame.lineno).strip()
        if line:
            print('    %s' % line)

    other = top_stats[limit:]
    if other:
        size = sum(stat.size for stat in other)
        print("%s other: %.1f KiB" % (len(other), size / 1024))
    total = sum(stat.size for stat in top_stats)
    print("Total allocated size: %.1f KiB" % (total / 1024))

tracemalloc.start()

# ... run your application ...

snapshot = tracemalloc.take_snapshot()
display_top(snapshot)
```

----------------------------------------

TITLE: Connecting Existing Sockets with Custom Protocol in Python
DESCRIPTION: Demonstrates how to use loop.create_connection with a custom protocol to handle data received on an existing socket. The protocol closes the connection after receiving data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
import asyncio
import socket


class MyProtocol(asyncio.Protocol):

    def __init__(self, on_con_lost):
        self.transport = None
        self.on_con_lost = on_con_lost

    def connection_made(self, transport):
        self.transport = transport

    def data_received(self, data):
        print("Received:", data.decode())

        # We are done: close the transport;
        # connection_lost() will be called automatically.
        self.transport.close()

    def connection_lost(self, exc):
        # The socket has been closed
        self.on_con_lost.set_result(True)


async def main():
    # Get a reference to the event loop as we plan to use
    # low-level APIs.
    loop = asyncio.get_running_loop()
    on_con_lost = loop.create_future()
```

----------------------------------------

TITLE: Writing Data to a ZIP Archive using writestr in Python
DESCRIPTION: The `ZipFile.writestr` method inserts data as a file into a ZIP archive. The data can be a string (encoded as UTF-8) or bytes. It supports specific ZipInfo instances or archive filenames, and allows setting custom compression types and levels.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/zipfile.rst#2025-04-21_snippet_5



----------------------------------------

TITLE: Splitting Iterables with Before_and_after Function in Python
DESCRIPTION: The function splits an iterable using a predicate to create two iterators: one that satisfies the predicate and one that contains the rest, similar to a non-consuming takewhile.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_94

LANGUAGE: Python
CODE:
```
def before_and_after(predicate, it):
   """ Variant of takewhile() that allows complete
       access to the remainder of the iterator.

       >>> it = iter('ABCdEfGhI')
       >>> all_upper, remainder = before_and_after(str.isupper, it)
       >>> ''.join(all_upper)
       'ABC'
       >>> ''.join(remainder)     # takewhile() would lose the 'd'
       'dEfGhI'

       Note that the true iterator must be fully consumed
       before the remainder iterator can generate valid results.
   """
   it = iter(it)
   transition = []

   def true_iterator():
       for elem in it:
           if predicate(elem):
               yield elem
           else:
               transition.append(elem)
               return

   return true_iterator(), chain(transition, it)
```

----------------------------------------

TITLE: Using b85decode in Python
DESCRIPTION: Decodes base85-encoded bytes-like objects or ASCII strings and returns the decoded bytes. Padding is implicitly removed if necessary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/base64.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
b85decode(b)
```

----------------------------------------

TITLE: Using reveal_type for Static Type Checking (Python)
DESCRIPTION: This snippet shows how to use the `reveal_type` function with a static type checker. When the type checker processes this code, it will report the inferred type of the variable `x`, which is `int`. This is useful for debugging type inference issues.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_167

LANGUAGE: Python
CODE:
```
x: int = 1
reveal_type(x)  # Revealed type is "builtins.int"
```

----------------------------------------

TITLE: Using Asynchronous Comprehensions in Python
DESCRIPTION: Shows the syntax for asynchronous comprehensions introduced in PEP 530, allowing async for in list comprehensions and await expressions in all types of comprehensions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.6.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
result = [i async for i in aiter() if i % 2]
```

LANGUAGE: python
CODE:
```
result = [await fun() for fun in funcs if await condition()]
```

----------------------------------------

TITLE: Logging During Directory Copy in Python
DESCRIPTION: Demonstrates how to add logging to the shutil.copytree() function using a custom ignore function. This example logs the current working directory for each copied item.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/shutil.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from shutil import copytree
import logging

def _logpath(path, names):
    logging.info('Working in %s', path)
    return []   # nothing will be ignored

copytree(source, destination, ignore=_logpath)
```

----------------------------------------

TITLE: Converting Shell-style Pattern to Regular Expression with fnmatch.translate()
DESCRIPTION: This example shows how to use fnmatch.translate() to convert a shell-style pattern to a regular expression. It then compiles the regex and uses it to match a filename. This demonstrates the integration between fnmatch and the re module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/fnmatch.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> import fnmatch, re
>>>
>>> regex = fnmatch.translate('*.txt')
>>> regex
'(?s:.*\.txt)\Z'
>>> reobj = re.compile(regex)
>>> reobj.match('foobar.txt')
<re.Match object; span=(0, 10), match='foobar.txt'>
```

----------------------------------------

TITLE: Using urlsafe_b64decode in Python
DESCRIPTION: Decodes bytes-like objects or ASCII strings using URL- and filesystem-safe Base64 alphabet, which substitutes '-' for '+' and '_' for '/' from the standard alphabet.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/base64.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
urlsafe_b64decode(s)
```

----------------------------------------

TITLE: Using Assignment Expressions in List Comprehensions in Python
DESCRIPTION: This example illustrates how the walrus operator can be effectively used within list comprehensions to both filter and transform data, making the code more concise.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
[clean_name.title() for name in names
 if (clean_name := normalize('NFC', name)) in allowed_names]
```

----------------------------------------

TITLE: Checking Dataclass Instance Status in Python
DESCRIPTION: Function to determine if an object is specifically an instance of a dataclass, not the dataclass itself. Uses is_dataclass() and isinstance() checks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dataclasses.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
def is_dataclass_instance(obj):
    return is_dataclass(obj) and not isinstance(obj, type)
```

----------------------------------------

TITLE: Comprehensive Call Tracking with mock_calls in Python
DESCRIPTION: Demonstrates the use of mock_calls to record all calls to a Mock object, including method calls, magic methods, and return value mocks. This attribute provides a complete call history.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
>>> mock = MagicMock()
>>> result = mock(1, 2, 3)
>>> mock.first(a=3)
<MagicMock name='mock.first()' id='...'>
>>> mock.second()
<MagicMock name='mock.second()' id='...'>
>>> int(mock)
1
>>> result(1)
<MagicMock name='mock()()' id='...'>
>>> expected = [call(1, 2, 3), call.first(a=3), call.second(),
... call.__int__(), call()(1)]
>>> mock.mock_calls == expected
True
```

----------------------------------------

TITLE: Asserting Set Equality in Python unittest
DESCRIPTION: Method to test if two sets are equal. It provides an error message listing the differences between the sets if they are not equal.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
assertSetEqual(first, second, msg=None)
```

----------------------------------------

TITLE: Creating Virtual Environments with ExtendedEnvBuilder in Python
DESCRIPTION: This snippet demonstrates the creation of virtual environments using an ExtendedEnvBuilder class. It configures the builder with various options parsed from command-line arguments, such as system site packages, clear, symlinks, upgrade, nodist, nopip, and verbose settings. The builder then creates environments for each specified directory.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/venv.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
builder = ExtendedEnvBuilder(system_site_packages=options.system_site,
                               clear=options.clear,
                               symlinks=options.symlinks,
                               upgrade=options.upgrade,
                               nodist=options.nodist,
                               nopip=options.nopip,
                               verbose=options.verbose)
for d in options.dirs:
    builder.create(d)
```

----------------------------------------

TITLE: Init-Only Variables in Python Dataclass
DESCRIPTION: Example showing how to use init-only variables with database initialization in post_init method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dataclasses.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
@dataclass
class C:
    i: int
    j: int | None = None
    database: InitVar[DatabaseType | None] = None

    def __post_init__(self, database):
        if self.j is None and database is not None:
            self.j = database.lookup('j')

c = C(10, database=my_database)
```

----------------------------------------

TITLE: Autospec with Class Having None Member - Python
DESCRIPTION: Demonstrates how autospec handles class members initialized to None by creating a MagicMock instead of attempting to introspect a NoneType object. This enables access to arbitrary attributes and methods on the mock, as if it were a regular Mock object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_61

LANGUAGE: python
CODE:
```
>>> class Something:
...     member = None
...
>>> mock = create_autospec(Something)
>>> mock.member.foo.bar.baz()
<MagicMock name='mock.member.foo.bar.baz()' id='...'>
```

----------------------------------------

TITLE: Using importlib.metadata Module Example - Python
DESCRIPTION: Demonstrates how to use the new importlib.metadata module to read package metadata like version, requirements and files. The example shows checking metadata for the 'requests' package.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
>>> from importlib.metadata import version, requires, files
>>> version('requests')
'2.22.0'
>>> list(requires('requests'))
['chardet (<3.1.0,>=3.0.2)']
>>> list(files('requests'))[:5]
[PackagePath('requests-2.22.0.dist-info/INSTALLER'),
 PackagePath('requests-2.22.0.dist-info/LICENSE'),
 PackagePath('requests-2.22.0.dist-info/METADATA'),
 PackagePath('requests-2.22.0.dist-info/RECORD'),
 PackagePath('requests-2.22.0.dist-info/WHEEL')]
```

----------------------------------------

TITLE: Implementing dispatch pattern with getattr in Python
DESCRIPTION: Demonstrates using getattr() to implement a dispatch pattern, allowing dynamic method selection based on a value. This approach uses a naming convention to locate the appropriate method to call.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/design.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
class MyVisitor:
    def visit_a(self):
        ...

    def dispatch(self, value):
        method_name = 'visit_' + str(value)
        method = getattr(self, method_name)
        method()
```

----------------------------------------

TITLE: Setting Up a Proxy Handler in urllib
DESCRIPTION: This code snippet illustrates how to create a proxy handler that bypasses any proxy settings by initializing it with an empty dictionary. This allows for direct connections without using any proxies defined in the current environment. Users must ensure that the urllib module is available to implement this functionality.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/urllib2.rst#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
proxy_support = urllib.request.ProxyHandler({})
opener = urllib.request.build_opener(proxy_support)
urllib.request.install_opener(opener)
```

----------------------------------------

TITLE: Closing TarFile Archive in Python
DESCRIPTION: Closes the `TarFile` object. In write mode, this appends the necessary finishing zero blocks to the archive file, ensuring it is properly terminated. It is important to call this method when finished with a `TarFile` opened in write mode.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_7

LANGUAGE: python
CODE:
```
TarFile.close()
```

----------------------------------------

TITLE: Comparing rstrip vs removesuffix Methods in Python bytes Objects
DESCRIPTION: Demonstrates the difference between rstrip() which removes any combination of specified characters, and removesuffix() which removes a specific suffix string as a whole from a bytes object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_49

LANGUAGE: python
CODE:
```
>>> b'Monty Python'.rstrip(b' Python')
b'M'
>>> b'Monty Python'.removesuffix(b' Python')
b'Monty'
```

----------------------------------------

TITLE: Implementing Single Dispatch with Union Types in Python
DESCRIPTION: Example showing how functools.singledispatch now supports types.UnionType and typing.Union as annotations for dispatch arguments
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.11.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
@singledispatch
def fun(arg, verbose=False):
    if verbose:
        print("Let me just say,", end=" ")
    print(arg)

@fun.register
def _(arg: int | float, verbose=False):
    if verbose:
        print("Strength in numbers, eh?", end=" ")
    print(arg)

from typing import Union
@fun.register
def _(arg: Union[list, set], verbose=False):
    if verbose:
        print("Enumerate this:")
    for i, elem in enumerate(arg):
        print(i, elem)
```

----------------------------------------

TITLE: Accessing IPv4Interface attributes in ipaddress
DESCRIPTION: This code demonstrates how to access the ip, network, with_prefixlen, with_netmask, and with_hostmask attributes of an IPv4Interface object. It creates an IPv4Interface object from the string '192.0.2.5/24' and then accesses these attributes, which provide the address, network, and different string representations of the interface.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ipaddress.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
>>> interface = IPv4Interface('192.0.2.5/24')
>>> interface.ip
IPv4Address('192.0.2.5')

```

LANGUAGE: python
CODE:
```
>>> interface = IPv4Interface('192.0.2.5/24')
>>> interface.network
IPv4Network('192.0.2.0/24')

```

LANGUAGE: python
CODE:
```
>>> interface = IPv4Interface('192.0.2.5/24')
>>> interface.with_prefixlen
'192.0.2.5/24'

```

LANGUAGE: python
CODE:
```
>>> interface = IPv4Interface('192.0.2.5/24')
>>> interface.with_netmask
'192.0.2.5/255.255.255.0'

```

LANGUAGE: python
CODE:
```
>>> interface = IPv4Interface('192.0.2.5/24')
>>> interface.with_hostmask
'192.0.2.5/0.0.0.255'

```

----------------------------------------

TITLE: Defining MemoryHandler Class for Buffered Logging in Python
DESCRIPTION: Implementation of the MemoryHandler class that buffers log records in memory and periodically flushes them to a target handler. Flushing occurs when the buffer is full or when a record of specified severity is seen.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
class MemoryHandler(capacity, flushLevel=ERROR, target=None, flushOnClose=True):
   """
   Returns a new instance of the MemoryHandler class. The instance is
   initialized with a buffer size of *capacity* (number of records buffered).
   If *flushLevel* is not specified, ERROR is used. If no *target* is
   specified, the target will need to be set using setTarget() before this
   handler does anything useful. If *flushOnClose* is specified as ``False``,
   then the buffer is *not* flushed when the handler is closed. If not specified
   or specified as ``True``, the previous behaviour of flushing the buffer will
   occur when the handler is closed.
   """
```

----------------------------------------

TITLE: Decimal Modulo and Equality Tests Example
DESCRIPTION: This example demonstrates that `Decimal` allows exact representation which enables modulo calculations and equality tests that are unsuitable for binary floating point numbers. Regular floats have inherent imprecision, and `Decimal` fixes this issue.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib2.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
>>> Decimal('1.00') % Decimal('.10')
Decimal('0.00')
>>> 1.00 % 0.10
0.09999999999999995

>>> sum([Decimal('0.1')]*10) == Decimal('1.0')
True
>>> 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 == 1.0
False
```

----------------------------------------

TITLE: Replacing %s and %r with !s and !r - Python
DESCRIPTION: Shows how to use the `!s` (str) and `!r` (repr) conversion flags within the format string, similar to the old `%s` and `%r` format specifiers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/string.rst#_snippet_6

LANGUAGE: python
CODE:
```
>>> "repr() shows quotes: {!r}; str() doesn't: {!s}".format('test1', 'test2')
"repr() shows quotes: 'test1'; str() doesn't: test2"
```

----------------------------------------

TITLE: Asyncio Event Example
DESCRIPTION: This snippet demonstrates the usage of an asyncio Event to notify multiple asyncio tasks that an event has happened. The `waiter` task waits for the event to be set, and the `main` function sets the event after a delay, allowing the waiter to proceed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-sync.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
"async def waiter(event):
    print('waiting for it ...')
    await event.wait()
    print('... got it!')

async def main():
    # Create an Event object.
    event = asyncio.Event()

    # Spawn a Task to wait until 'event' is set.
    waiter_task = asyncio.create_task(waiter(event))

    # Sleep for 1 second and set the event.
    await asyncio.sleep(1)
    event.set()

    # Wait until the waiter task is finished.
    await waiter_task

asyncio.run(main())"
```

----------------------------------------

TITLE: UDP Client Implementation in Python
DESCRIPTION: A UDP client that sends datagrams to a server and receives responses. Demonstrates connectionless UDP communication using sendto() method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/socketserver.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
import socket
import sys

HOST, PORT = "localhost", 9999
data = " ".join(sys.argv[1:])

# SOCK_DGRAM is the socket type to use for UDP sockets
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

# As you can see, there is no connect() call; UDP has no connections.
# Instead, data is directly sent to the recipient via sendto().
sock.sendto(bytes(data + "\n", "utf-8"), (HOST, PORT))
received = str(sock.recv(1024), "utf-8")

print("Sent:    ", data)
print("Received:", received)
```

----------------------------------------

TITLE: Example Scenario for Using assert_never in Python
DESCRIPTION: This code snippet shows a function using a `match` statement to handle a union type (`int | str`). The final `case _` is intended to be unreachable if the union is exhaustive. The `typing.assert_never` function would typically be called within this unreachable case to signal to a static type checker that this code path should never be reached.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_166

LANGUAGE: python
CODE:
```
def int_or_str(arg: int | str) -> None:
    match arg:
        case int():
            print("It's an int")
        case str():
            print("It's a str")
        case _ as unreachable:
```

----------------------------------------

TITLE: Declaring Context Variables in Python
DESCRIPTION: Example showing how to declare and use a basic context variable with a default value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextvars.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
var: ContextVar[int] = ContextVar('var', default=42)
```

----------------------------------------

TITLE: Creating MIMEMessage Objects in Python
DESCRIPTION: Creates MIME objects for encapsulating another message. The payload must be an instance of the Message class. Defaults to RFC822 subtype, typically used for forwarded or attached emails.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.mime.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
MIMEMessage(_msg, _subtype='rfc822', *, policy=compat32)
```

----------------------------------------

TITLE: Enabling union type expressions for GenericAlias objects
DESCRIPTION: Extends GenericAlias objects to support union type expressions, allowing for more complex type annotations involving generic types. This feature enables expressions like 'list[int] | dict[float, str]'.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a3.rst#2025-04-21_snippet_20

LANGUAGE: Python
CODE:
```
from typing import Union

ComplexType = Union[list[int], dict[float, str]]
def func(x: ComplexType) -> None:
    pass
```

----------------------------------------

TITLE: Creating Datagram Endpoint in Asyncio
DESCRIPTION: Creates a datagram connection with configurable socket parameters, supporting different network families and connection strategies.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
loop.create_datagram_endpoint(protocol_factory, local_addr=None, remote_addr=None, *, family=0, proto=0, flags=0, reuse_port=None)
```

----------------------------------------

TITLE: Using unittest --durations Option (Bash)
DESCRIPTION: This snippet shows the command line usage and output of the new `--durations` option for the `unittest` module. It demonstrates how to run tests and display the N slowest test cases, providing performance insights.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_22

LANGUAGE: Bash
CODE:
```
python3 -m unittest --durations=3 lib.tests.test_threading
.....
Slowest test durations
----------------------------------------------------------------------
1.210s     test_timeout (Lib.test.test_threading.BarrierTests)
1.003s     test_default_timeout (Lib.test.test_threading.BarrierTests)
0.518s     test_timeout (Lib.test.test_threading.EventTests)

(0.000 durations hidden.  Use -v to show these durations.)
----------------------------------------------------------------------
Ran 158 tests in 9.869s

OK (skipped=3)
```

----------------------------------------

TITLE: Locale-Specific Floating-Point String Conversion in Python
DESCRIPTION: Formats a floating-point number considering the current locale's decimal point settings. This function mimics the built-in str conversion but respects locale-specific settings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/locale.rst#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
.. function:: str(float)

   Formats a floating-point number using the same format as the built-in function
   ``str(float)``, but takes the decimal point into account.
```

----------------------------------------

TITLE: Creating IsolatedAsyncioTestCase for unittest Module
DESCRIPTION: Implementation of unittest.IsolatedAsyncioTestCase to facilitate testing of asyncio-based code in isolation.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0b1.rst#2025-04-21_snippet_13

LANGUAGE: Python
CODE:
```
unittest.IsolatedAsyncioTestCase
```

----------------------------------------

TITLE: ZipFile Extraction in Python
DESCRIPTION: Example demonstrating how to extract files from a ZIP archive using the zipfile module's extract and extractall methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_44

LANGUAGE: python
CODE:
```
z = zipfile.ZipFile('python-251.zip')

# Unpack a single file, writing it relative
# to the /tmp directory.
z.extract('Python/sysmodule.c', '/tmp')

# Unpack all the files in the archive.
z.extractall()
```

----------------------------------------

TITLE: Enabling Context-Aware Warnings in Python
DESCRIPTION: This snippet demonstrates how to enable context-aware warnings in Python using either a command-line option or an environment variable. The context_aware_warnings flag affects the behavior of the warnings module, particularly the catch_warnings class.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/warnings.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
-X context_aware_warnings
```

LANGUAGE: bash
CODE:
```
PYTHON_CONTEXT_AWARE_WARNINGS=1
```

----------------------------------------

TITLE: Reader Protocol Example: Reading Data from Stream
DESCRIPTION: This code defines a function that uses the `Reader` protocol for reading data from a stream. It demonstrates type hinting for stream reading operations, ensuring the read data is of the expected type (in this case, a string).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/io.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
"def read_it(reader: Reader[str]):
    data = reader.read(11)
    assert isinstance(data, str)"
```

----------------------------------------

TITLE: Using __getitem__ Method with Match Objects in Python
DESCRIPTION: Demonstrates how to use the __getitem__ method (bracket notation) to access capturing groups, which provides a more convenient syntax than the group() method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
>>> m = re.match(r"(\w+) (\w+)", "Isaac Newton, physicist")
>>> m[0]       # The entire match
'Isaac Newton'
>>> m[1]       # The first parenthesized subgroup.
'Isaac'
>>> m[2]       # The second parenthesized subgroup.
'Newton'
```

----------------------------------------

TITLE: Adding New Strftime Format Code for Timezone Offset
DESCRIPTION: This update adds a new %:z strftime format code that generates tzoffset with colons as separator.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.12.0a1.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
time.strftime("%:z")  # Generates tzoffset with colons, e.g. +05:30
```

----------------------------------------

TITLE: Wrapping Single Exceptions with ExceptionGroup using except*
DESCRIPTION: The snippet demonstrates using except* to handle non-group exceptions by wrapping them into an ExceptionGroup. This example shows a simple usage with BlockingIOError and requires Python 3.11 or later.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
>>> try:
...     raise BlockingIOError
... except* BlockingIOError as e:
...     print(repr(e))
...
ExceptionGroup('', (BlockingIOError(),))
```

----------------------------------------

TITLE: Calculating Confidence Interval using Bootstrap Method in Python
DESCRIPTION: This snippet demonstrates how to calculate and print a 90% confidence interval for a sample mean using the bootstrap method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/random.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
print(f'The sample mean of {mean(data):.1f} has a 90% confidence '
      f'interval from {means[5]:.1f} to {means[94]:.1f}')
```

----------------------------------------

TITLE: Creating a Warning Message Box with tkinter.messagebox
DESCRIPTION: The showwarning function creates and displays a warning message box with the specified title and message. It uses a warning icon to alert the user about potential issues.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.messagebox.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
def showwarning(title=None, message=None, **options):

   Creates and displays a warning message box with the specified title
   and message.
```

----------------------------------------

TITLE: Reading an Email and Sending via Sendmail using Policy in Python
DESCRIPTION: This example demonstrates how to read an email message from a file, apply a policy with custom line separators, and send it through the system sendmail program on Unix systems.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.policy.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> from email import message_from_binary_file
>>> from email.generator import BytesGenerator
>>> from email import policy
>>> from subprocess import Popen, PIPE
>>> with open('mymsg.txt', 'rb') as f:
...     msg = message_from_binary_file(f, policy=policy.default)
...
>>> p = Popen(['sendmail', msg['To'].addresses[0]], stdin=PIPE)
>>> g = BytesGenerator(p.stdin, policy=msg.policy.clone(linesep='\r\n'))
>>> g.flatten(msg)
>>> p.stdin.close()
>>> rc = p.wait()
```

----------------------------------------

TITLE: Default close_fds Behavior in subprocess on Windows
DESCRIPTION: On Windows, the default value for close_fds has been changed from False to True when redirecting standard handles. This ensures that file descriptors are closed when redirecting standard handles, matching the behavior on other platforms.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
On Windows the default for *close_fds* was changed from ``False`` to
``True`` when redirecting the standard handles.  It's now possible to set
*close_fds* to true when redirecting the standard handles.  See
:class:`subprocess.Popen`.  This means that *close_fds* now defaults to
``True`` on all supported platforms.
(Contributed by Segev Finer in :issue:`19764`.)
```

----------------------------------------

TITLE: Planet Enum with Properties
DESCRIPTION: Complex Enum implementation with custom initialization and property calculations
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_31

LANGUAGE: python
CODE:
```
class Planet(Enum):
    MERCURY = (3.303e+23, 2.4397e6)
    VENUS   = (4.869e+24, 6.0518e6)
    EARTH   = (5.976e+24, 6.37814e6)
    MARS    = (6.421e+23, 3.3972e6)
    JUPITER = (1.9e+27,   7.1492e7)
    SATURN  = (5.688e+26, 6.0268e7)
    URANUS  = (8.686e+25, 2.5559e7)
    NEPTUNE = (1.024e+26, 2.4746e7)
    def __init__(self, mass, radius):
        self.mass = mass
        self.radius = radius
    @property
    def surface_gravity(self):
        G = 6.67300E-11
        return G * self.mass / (self.radius * self.radius)
```

----------------------------------------

TITLE: Setting Up Remote Manager Server in Python
DESCRIPTION: Example of creating a manager server that hosts a shared queue which can be accessed by remote clients. Shows server-side setup with queue registration.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_33

LANGUAGE: python
CODE:
```
>>> from multiprocessing.managers import BaseManager
>>> from queue import Queue
>>> queue = Queue()
>>> class QueueManager(BaseManager): pass
>>> QueueManager.register('get_queue', callable=lambda:queue)
>>> m = QueueManager(address=('', 50000), authkey=b'abracadabra')
>>> s = m.get_server()
>>> s.serve_forever()
```

----------------------------------------

TITLE: Registering Virtual Subclasses in Python ABCs
DESCRIPTION: Demonstrates how to register a class as a virtual subclass of an ABC using the register method. This allows unrelated classes to be treated as subclasses of the ABC.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/abc.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from abc import ABC

class MyABC(ABC):
    pass

MyABC.register(tuple)

assert issubclass(tuple, MyABC)
assert isinstance((), MyABC)
```

----------------------------------------

TITLE: Ignoring Exception Details in Doctests - Python
DESCRIPTION: This snippet demonstrates how to specify that the exception details can be ignored when a doctest expects an exception of a certain type. It shows examples of this behavior and clarifies the variations that can be accepted with this directive.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/doctest.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> raise Exception('message')\nTraceback (most recent call last):\nException: message\n\n>>> raise Exception('message')\nTraceback (most recent call last):\nbuiltins.Exception: message\n\n>>> raise Exception('message')\nTraceback (most recent call last):\n__main__.Exception: message
```

----------------------------------------

TITLE: Defining SSL/TLS Verification Flags in Python
DESCRIPTION: These constants define various verification flags for SSL/TLS connections, including CRL checks, strict X.509 verification, and proxy certificate verification.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
VERIFY_CRL_CHECK_CHAIN
VERIFY_X509_STRICT
VERIFY_ALLOW_PROXY_CERTS
VERIFY_X509_TRUSTED_FIRST
VERIFY_X509_PARTIAL_CHAIN
```

----------------------------------------

TITLE: Context Management Example in Python
DESCRIPTION: Comprehensive example demonstrating context management, including copying context and manipulating variables.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextvars.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
import contextvars

var = contextvars.ContextVar('var')
var.set('spam')
print(var.get())  # 'spam'

ctx = contextvars.copy_context()

def main():
    print(var.get())  # 'spam'
    print(ctx[var])  # 'spam'

    var.set('ham')

    print(var.get())  # 'ham'
    print(ctx[var])  # 'ham'

ctx.run(main)

print(ctx[var])  # 'ham'
print(var.get())  # 'spam'
```

----------------------------------------

TITLE: Casting 1D memoryview to 2D with unsigned long format
DESCRIPTION: Example showing how to reshape a 1D memoryview of unsigned long integers into a 2D array through casting.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_83

LANGUAGE: python
CODE:
```
buf = struct.pack("L"*6, *list(range(6)))
x = memoryview(buf)
y = x.cast('L', shape=[2,3])
len(y)
2
y.nbytes
48
y.tolist()
[[0, 1, 2], [3, 4, 5]]
```

----------------------------------------

TITLE: In-Memory Database Backup in Python SQLite3
DESCRIPTION: Demonstrates how to create a transient copy of a database in memory. Copies an existing database file into a temporary in-memory database.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
src = sqlite3.connect('example.db')
dst = sqlite3.connect(':memory:')
src.backup(dst)
dst.close()
src.close()
```

----------------------------------------

TITLE: Example: Using MozillaCookieJar in Python
DESCRIPTION: Illustrates how to load and use cookies from a Netscape/Mozilla cookie file with the MozillaCookieJar. This requires importing os, http.cookiejar, and urllib.request. It shows loading cookies from a file and using them with an opener to access a URL.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.cookiejar.rst#2025-04-21_snippet_13

LANGUAGE: Python
CODE:
```
import os, http.cookiejar, urllib.request
cj = http.cookiejar.MozillaCookieJar()
cj.load(os.path.join(os.path.expanduser("~"), ".netscape", "cookies.txt"))
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
r = opener.open("http://example.com/")
```

----------------------------------------

TITLE: Full Path Matching with Pattern - pathlib Python
DESCRIPTION: This snippet demonstrates how to perform a full path match using the `full_match` method with glob-style patterns. It encompasses both recursive and non-recursive patterns and shows examples of case sensitivity adjustments across platforms.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
>>> PurePath('a/b.py').full_match('a/*.py')
True
>>> PurePath('a/b.py').full_match('*.py')
False
>>> PurePath('/a/b/c.py').full_match('/a/**')
True
>>> PurePath('/a/b/c.py').full_match('**/*.py')
True

>>> PurePosixPath('b.py').full_match('*.PY')
False
>>> PureWindowsPath('b.py').full_match('*.PY')
True
```

----------------------------------------

TITLE: Examples of defining bounded TypeVars (Python)
DESCRIPTION: Provides examples of defining bounded type variables using both the new type parameter syntax (`T: SupportsAbs`) and the `TypeVar` constructor (`U`, `V`). It shows that bounds can be abstract types (like Protocols) or unions of types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_106

LANGUAGE: Python
CODE:
```
# Can be anything with an __abs__ method
def print_abs[T: SupportsAbs](arg: T) -> None:
    print("Absolute value:", abs(arg))

U = TypeVar('U', bound=str|bytes)  # Can be any subtype of the union str|bytes
V = TypeVar('V', bound=SupportsAbs)  # Can be anything with an __abs__ method
```

----------------------------------------

TITLE: Implementing the __index__ Special Method in Python
DESCRIPTION: This snippet demonstrates how to implement the __index__ special method, which is used for slice indexing. The method should return an integer value to be used as the index.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_19

LANGUAGE: Python
CODE:
```
class C:
    def __index__ (self):
        return self.value
```

----------------------------------------

TITLE: Importing a Module and Its Attribute
DESCRIPTION: This function imports a specified module and retrieves an attribute from it, raising appropriate errors if the module or attribute does not exist. It acts as a helper function combining module import and attribute access functionalities.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/import.rst#2025-04-21_snippet_26

LANGUAGE: C
CODE:
```
.. c:function:: PyObject* PyImport_ImportModuleAttr(PyObject *mod_name, PyObject *attr_name)

   Import the module *mod_name* and get its attribute *attr_name*.

   Names must be Python :class:`str` objects.

   Helper function combining :c:func:`PyImport_Import` and
   :c:func:`PyObject_GetAttr`. For example, it can raise :exc:`ImportError` if
   the module is not found, and :exc:`AttributeError` if the attribute doesn't
   exist.

   .. versionadded:: 3.14
```

----------------------------------------

TITLE: Implementing Asynchronous Generators in Python
DESCRIPTION: Demonstrates the new ability in Python 3.6 to use await and yield in the same function body, enabling asynchronous generators. This creates a ticker function that yields numbers with a delay between them.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.6.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
async def ticker(delay, to):
    """Yield numbers from 0 to *to* every *delay* seconds."""
    for i in range(to):
        yield i
        await asyncio.sleep(delay)
```

----------------------------------------

TITLE: Creating Types Dynamically with type()
DESCRIPTION: Demonstrates how to create a class dynamically using the type() constructor. This shows the equivalence between standard class definition syntax and using type() to create a class programmatically with the same attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
>>> class X:
...     a = 1
...
>>> X = type('X', (), dict(a=1))
```

----------------------------------------

TITLE: Adding Decimal Numbers with Low Precision (Python)
DESCRIPTION: Demonstrates that the `decimal` module, by default, rounds only the result of an arithmetic operation based on the context's precision (`prec`). The inputs are treated as exact, and their sum is rounded afterwards.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_39

LANGUAGE: Python
CODE:
```
getcontext().prec = 3
Decimal('3.104') + Decimal('2.104')
```

----------------------------------------

TITLE: Retrieving Active Child Processes in Python
DESCRIPTION: Returns a list of all live children of the current process. This function has the side effect of "joining" any processes that have already finished.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
active_children()
```

----------------------------------------

TITLE: Asserting Dictionary Equality in Python unittest
DESCRIPTION: Method to test if two dictionaries are equal. It constructs an error message showing the differences in the dictionaries if they are not equal.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
assertDictEqual(first, second, msg=None)
```

----------------------------------------

TITLE: Declaring Type Alias with ParamSpec using PEP 695 Syntax (Python)
DESCRIPTION: Demonstrates declaring a type alias using the new type parameter syntax (PEP 695) with a `ParamSpec` (`**P`) to represent the parameters of a callable that returns an integer.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_123

LANGUAGE: python
CODE:
```
type IntFunc[**P] = Callable[P, int]
```

----------------------------------------

TITLE: Registering a New CSV Dialect - Python
DESCRIPTION: This code snippet illustrates how to register a custom CSV dialect named 'unixpwd' with a specific delimiter and quoting behavior. It then demonstrates how to read a file using this new dialect.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/csv.rst#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
import csv
csv.register_dialect('unixpwd', delimiter=':', quoting=csv.QUOTE_NONE)
with open('passwd', newline='') as f:
    reader = csv.reader(f, 'unixpwd')
```

----------------------------------------

TITLE: Accessing binary file object in Python 3 text I/O
DESCRIPTION: In Python 3, you can access the underlying binary file object of a text file object using the buffer attribute. This is useful for speeding up encoding and decoding operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.0.rst#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
f.buffer
```

----------------------------------------

TITLE: Mocking Magic Methods with Regular Mock in Python
DESCRIPTION: Demonstrates how to manually add magic methods to a regular Mock object. This approach requires explicitly creating each magic method you need.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
mock = Mock()
mock.__str__ = Mock(return_value='wheeeeee')
str(mock)
```

----------------------------------------

TITLE: Formatting IPv4/IPv6 Addresses with format()
DESCRIPTION: Demonstrates how to format IPv4 and IPv6 addresses using the `format()` function and f-strings with different specifiers such as binary, hexadecimal, and default string representation.  Uses the `ipaddress` module and format specifiers to control the output.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ipaddress.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> format(ipaddress.IPv4Address('192.168.0.1'))
'192.168.0.1'
>>> '{:#b}'.format(ipaddress.IPv4Address('192.168.0.1'))
'0b11000000101010000000000000000001'
>>> f'{ipaddress.IPv6Address("2001:db8::1000"):s}'
'2001:db8::1000'
>>> format(ipaddress.IPv6Address('2001:db8::1000'), '_X')
'2001_0DB8_0000_0000_0000_0000_0000_1000'
>>> '{:#_n}'.format(ipaddress.IPv6Address('2001:db8::1000'))
'0x2001_0db8_0000_0000_0000_0000_0000_1000'
```

----------------------------------------

TITLE: Handling non-UTF-8 text encodings in Python with sqlite3
DESCRIPTION: This example shows how to handle non-UTF-8 text encodings and arbitrary data stored in TEXT columns using custom text_factory functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_33

LANGUAGE: Python
CODE:
```
con.text_factory = lambda data: str(data, encoding="latin2")
```

LANGUAGE: Python
CODE:
```
con.text_factory = lambda data: str(data, errors="surrogateescape")
```

----------------------------------------

TITLE: Creating and Using Memory Views in Python
DESCRIPTION: Demonstrates creating a memoryview from a bytes object, accessing elements through indexing, and working with slices.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_67

LANGUAGE: python
CODE:
```
>>> v = memoryview(b'abcefg')
>>> v[1]
98
>>> v[-1]
103
>>> v[1:4]
<memory at 0x7f3ddc9f4350>
>>> bytes(v[1:4])
b'bce'
```

----------------------------------------

TITLE: Flattening nested iterables with flatten function in Python
DESCRIPTION: Demonstrates the flatten function which flattens a sequence of sequences into a single flat sequence, useful for working with nested data structures.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_74

LANGUAGE: python
CODE:
```
>>> list(flatten([('a', 'b'), (), ('c', 'd', 'e'), ('f',), ('g', 'h', 'i')]))
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']
```

----------------------------------------

TITLE: Python unittest Pattern Matching Examples
DESCRIPTION: Demonstrates equivalent ways to run test discovery with pattern matching and directory specification.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
python -m unittest discover -s project_directory -p "*_test.py"
python -m unittest discover project_directory "*_test.py"
```

----------------------------------------

TITLE: Releasing memoryview resources with release method
DESCRIPTION: Examples demonstrating how to release the underlying buffer exposed by a memoryview object, both explicitly and using context management.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_78

LANGUAGE: python
CODE:
```
m = memoryview(b'abc')
m.release()
m[0]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: operation forbidden on released memoryview object
```

----------------------------------------

TITLE: TimePeriod Enum with Ignore Attribute
DESCRIPTION: Example of using the _ignore_ attribute in Enum creation for dynamic member generation
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_32

LANGUAGE: python
CODE:
```
from datetime import timedelta
class Period(timedelta, Enum):
    "different lengths of time"
    _ignore_ = 'Period i'
    Period = vars()
    for i in range(367):
        Period['day_%d' % i] = i
```

----------------------------------------

TITLE: Deprecating Tarfile Extraction Without Filter in Python
DESCRIPTION: Extracting tar archives using the tarfile module without explicitly specifying a 'filter' argument is deprecated until Python 3.14. In 3.14, the 'data' filter will become the default for security reasons. See tarfile-extraction-filter documentation for details.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_34

LANGUAGE: Python
CODE:
```
tarfile.open('archive.tar').extractall(path)
```

----------------------------------------

TITLE: Basic XML-RPC Client Usage in Python
DESCRIPTION: A simple example demonstrating how to create and use an XML-RPC client in Python. The code connects to a remote server (betty.userland.com) and calls a remote method (examples.getStateName).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xmlrpc.client.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
# simple test program (from the XML-RPC specification)
from xmlrpc.client import ServerProxy, Error

# server = ServerProxy("http://localhost:8000") # local server
with ServerProxy("http://betty.userland.com") as proxy:

    print(proxy)

    try:
        print(proxy.examples.getStateName(41))
    except Error as v:
        print("ERROR", v)
```

----------------------------------------

TITLE: Demonstrating Mock Subclass Inheritance for Attributes in Python
DESCRIPTION: Example showing how helper methods in a Mock subclass are automatically available on attributes and return values of instances of the subclass.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_38

LANGUAGE: python
CODE:
```
>>> mymock.foo
<MyMock name='mock.foo' id='...'>
>>> mymock.foo.has_been_called()
False
>>> mymock.foo()
<MyMock name='mock.foo()' id='...'>
>>> mymock.foo.has_been_called()
True
```

----------------------------------------

TITLE: Dumping Objects with Python Pickler
DESCRIPTION: Method to write the pickled representation of an object to the file object specified in the Pickler constructor.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pickle.rst#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
dump(obj)
```

----------------------------------------

TITLE: Using monotonic Function in Python
DESCRIPTION: Returns the value of a monotonic clock in fractional seconds that cannot go backward. The clock is not affected by system clock updates, making it useful for measuring time intervals accurately.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/time.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
monotonic() -> float
```

----------------------------------------

TITLE: Basic Usage of ShareableList
DESCRIPTION: This example shows how to create a ShareableList with different data types, access and modify elements, and handle exceptions when exceeding storage limits. It also demonstrates the use of index and count methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.shared_memory.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> from multiprocessing import shared_memory
>>> a = shared_memory.ShareableList(['howdy', b'HoWdY', -273.154, 100, None, True, 42])
>>> [ type(entry) for entry in a ]
[<class 'str'>, <class 'bytes'>, <class 'float'>, <class 'int'>, <class 'NoneType'>, <class 'bool'>, <class 'int'>]
>>> a[2]
-273.154
>>> a[2] = -78.5
>>> a[2]
-78.5
>>> a[2] = 'dry ice'  # Changing data types is supported as well
>>> a[2]
'dry ice'
>>> a[2] = 'larger than previously allocated storage space'
Traceback (most recent call last):
  ...
ValueError: exceeds available storage for existing str
>>> a[2]
'dry ice'
>>> len(a)
7
>>> a.index(42)
6
>>> a.count(b'howdy')
0
>>> a.count(b'HoWdY')
1
>>> a.shm.close()
>>> a.shm.unlink()
>>> del a  # Use of a ShareableList after call to unlink() is unsupported
```

----------------------------------------

TITLE: Annotating Async Generator with Explicit None SendType
DESCRIPTION: Annotates a Python asynchronous generator function explicitly specifying `None` for `SendType` using `AsyncGenerator[YieldType, None]`, which is equivalent to the default.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_24

LANGUAGE: python
CODE:
```
async def infinite_stream(start: int) -> AsyncGenerator[int, None]:
    while True:
        yield start
        start = await increment(start)
```

----------------------------------------

TITLE: Python Example of Reference Cycles with Linked Lists
DESCRIPTION: Demonstrates how to create reference cycles in Python using a simple Link class to form a circular linked list. It shows how objects involved in a cycle can become unreachable when external references are deleted, setting up a scenario for the garbage collector to detect and collect them.
SOURCE: https://github.com/python/cpython/blob/main/InternalDocs/garbage_collector.md#_snippet_5

LANGUAGE: Python
CODE:
```
>>> import gc
>>> 
>>> class Link:
...    def __init__(self, next_link=None):
...        self.next_link = next_link
...  
>>> link_3 = Link()
>>> link_2 = Link(link_3)
>>> link_1 = Link(link_2)
>>> link_3.next_link = link_1
>>> A = link_1
>>> del link_1, link_2, link_3
>>> 
>>> link_4 = Link()
>>> link_4.next_link = link_4
>>> del link_4
>>> 
```

----------------------------------------

TITLE: Setting Return Values in Mock Constructor in Python
DESCRIPTION: Shows how to set the return value for a mock directly in the constructor, which provides a more concise way to configure mocks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
mock = Mock(return_value=3)
mock()
```

----------------------------------------

TITLE: Example SHAKE-256 Digest Computation
DESCRIPTION: An example of using the shake_256 function from the hashlib module to compute a variable-length digest. The hashlib module must be imported. This code uses hexdigest with a specified length to produce a hexadecimal string of given byte length.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/hashlib.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> h = hashlib.shake_256(b'Nobody inspects the spammish repetition')
>>> h.hexdigest(20)
'44709d6fcb83d92a76dcb0b668c98e1b1d3dafe7'
```

----------------------------------------

TITLE: Setting Up a WSGI Server with wsgiref
DESCRIPTION: Example of setting up a basic HTTP server that runs a WSGI application using the wsgiref package. Shows server initialization and startup, useful for debugging WSGI applications.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_42

LANGUAGE: python
CODE:
```
from wsgiref import simple_server

wsgi_app = ...

host = ''
port = 8000
httpd = simple_server.make_server(host, port, wsgi_app)
httpd.serve_forever()
```

----------------------------------------

TITLE: Demonstrating NameError Suggestion for Standard Library Modules in Python
DESCRIPTION: This snippet shows how Python 3.12's improved error messages suggest importing standard library modules when a `NameError` occurs for a common module name like 'sys'. The traceback demonstrates the suggested fix.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_14

LANGUAGE: Python
CODE:
```
sys.version_info
```

----------------------------------------

TITLE: Receiving Data into Buffer from Socket with asyncio
DESCRIPTION: This method receives data from a socket into a buffer, modeled after the blocking socket.recv_into() method. It returns the number of bytes written to the buffer.  The socket must be non-blocking.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
.. method:: loop.sock_recv_into(sock, buf)
   :async:

   Receive data from *sock* into the *buf* buffer.  Modeled after the blocking
   :meth:`socket.recv_into() <socket.socket.recv_into>` method.

   Return the number of bytes written to the buffer.

   *sock* must be a non-blocking socket.

```

----------------------------------------

TITLE: Python Exception Group Handling with except*
DESCRIPTION: Demonstrates the new Exception Groups feature introduced in PEP 654, allowing simultaneous raising and handling of multiple unrelated exceptions
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.11.rst#2025-04-21_snippet_1



----------------------------------------

TITLE: Using Task Groups for Concurrency Management in asyncio Python
DESCRIPTION: Explains how to use asyncio.TaskGroup to group tasks, allowing safer management of related tasks that can be awaited collectively as a context manager.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
async def main():
    async with asyncio.TaskGroup() as tg:
        task1 = tg.create_task(some_coro(...))
        task2 = tg.create_task(another_coro(...))
    print(f"Both tasks have completed now: {task1.result()}, {task2.result()}")
```

----------------------------------------

TITLE: Using __slots__ to Detect Attribute Assignment Bugs
DESCRIPTION: Example showing how __slots__ can prevent misspelled attribute assignments by restricting attribute names to only those specified in __slots__.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
class Vehicle:
    __slots__ = ('id_number', 'make', 'model')
```

----------------------------------------

TITLE: Counting Lines and Handling ResourceWarnings in Python
DESCRIPTION: This Python code snippet opens a file specified via command line arguments, counts the number of lines, and prints it. If the Python Development Mode is enabled, it raises a ResourceWarning due to an unclosed file. To avoid this warning, the file can be closed explicitly using a context manager.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/devmode.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
import sys

def main():
    fp = open(sys.argv[1])
    nlines = len(fp.readlines())
    print(nlines)
    # The file is closed implicitly

if __name__ == "__main__":
    main()
```

LANGUAGE: Python
CODE:
```
def main():
    # Close the file explicitly when exiting the with block
    with open(sys.argv[1]) as fp:
        nlines = len(fp.readlines())
    print(nlines)
```

----------------------------------------

TITLE: Mutual Module Import Example
DESCRIPTION: Shows problematic mutual import pattern between two modules foo.py and bar.py.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_66

LANGUAGE: python
CODE:
```
from bar import bar_var
foo_var = 1
```

LANGUAGE: python
CODE:
```
from foo import foo_var
bar_var = 2
```

----------------------------------------

TITLE: Using Memoryview in Python 3.x for Efficient Memory Access
DESCRIPTION: This Python snippet demonstrates how memoryview provides a memory-efficient way to manipulate data without copying it. It covers the creation and manipulation of memoryview objects, including slicing and conversion to bytes or lists. Dependencies include understanding Python's bytes-like objects. Inputs are immutable strings or bytearrays, while outputs are memoryviews that map to the original data without duplicate storage.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.7.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> import string
>>> m = memoryview(string.letters)
>>> m
<memory at 0x37f850>
>>> len(m)           # Returns length of underlying object
52
>>> m[0], m[25], m[26]   # Indexing returns one byte
('a', 'z', 'A')
>>> m2 = m[0:26]         # Slicing returns another memoryview
>>> m2
<memory at 0x37f080>

>>> b = bytearray(string.letters)  # Creating a mutable object
>>> b
bytearray(b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')
>>> mb = memoryview(b)
>>> mb[0] = '*'         # Assign to view, changing the bytearray.
>>> b[0:5]              # The bytearray has been changed.
bytearray(b'*bcde')
```

----------------------------------------

TITLE: Define Literal Type Alias Python
DESCRIPTION: Shows how to create a type alias using `typing.Literal` to restrict the possible values for a variable or parameter to a specific set of literal strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_69

LANGUAGE: Python
CODE:
```
type Mode = Literal['r', 'rb', 'w', 'wb']
def open_helper(file: str, mode: Mode) -> str:
    ...
```

----------------------------------------

TITLE: Converting Between Decimal and Float in Python
DESCRIPTION: Demonstrates the improved numeric type interoperability where Decimal can now directly accept float objects, and shows the precise representation of a floating-point value in Decimal format.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_46

LANGUAGE: python
CODE:
```
>>> from decimal import Decimal
>>> from fractions import Fraction
>>> Decimal(1.1)
Decimal('1.100000000000000088817841970012523233890533447265625')
>>> Fraction(1.1)
Fraction(2476979795053773, 2251799813685248)
```

----------------------------------------

TITLE: Defining TypeAlias and Generic Class in Python
DESCRIPTION: Demonstrates the use of `TypeAlias` for creating type aliases and a simple generic class definition, noting the deprecation of `TypeAlias` in favor of the `type` statement.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_58

LANGUAGE: python
CODE:
```
BoxOfStrings: TypeAlias = "Box[str]"

class Box(Generic[T]):
    @classmethod
    def make_box_of_strings(cls) -> BoxOfStrings: ...
```

----------------------------------------

TITLE: Setting Write Buffer Limits for WriteTransport in Python
DESCRIPTION: This method sets high and low watermarks for write flow control. It affects when pause_writing() and resume_writing() are called. Setting high to zero forces low to zero and causes pause_writing() to be called when buffer becomes non-empty.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
WriteTransport.set_write_buffer_limits(high=None, low=None)
```

----------------------------------------

TITLE: Retrieving Enabled Ciphers in Python SSLContext
DESCRIPTION: This method returns a list of enabled cipher suites for the SSLContext, including details like key exchange, authentication, and encryption algorithms.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
>>> ctx = ssl.SSLContext(ssl.PROTOCOL_SSLv23)
>>> ctx.set_ciphers('ECDHE+AESGCM:!ECDSA')
>>> ctx.get_ciphers()
[{'aead': True,
  'alg_bits': 256,
  'auth': 'auth-rsa',
  'description': 'ECDHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH     Au=RSA  '
                 'Enc=AESGCM(256) Mac=AEAD',
  'digest': None,
  'id': 50380848,
  'kea': 'kx-ecdhe',
  'name': 'ECDHE-RSA-AES256-GCM-SHA384',
  'protocol': 'TLSv1.2',
  'strength_bits': 256,
  'symmetric': 'aes-256-gcm'},
 {'aead': True,
  'alg_bits': 128,
  'auth': 'auth-rsa',
  'description': 'ECDHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH     Au=RSA  '
                 'Enc=AESGCM(128) Mac=AEAD',
  'digest': None,
  'id': 50380847,
  'kea': 'kx-ecdhe',
  'name': 'ECDHE-RSA-AES128-GCM-SHA256',
  'protocol': 'TLSv1.2',
  'strength_bits': 128,
  'symmetric': 'aes-128-gcm'}]
```

----------------------------------------

TITLE: Using check_warnings Context Manager for Testing Warnings
DESCRIPTION: Example demonstrating how to use the check_warnings context manager to verify warning messages in tests.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_41

LANGUAGE: python
CODE:
```
with test_support.check_warnings() as wrec:
    warnings.simplefilter("always")
    # ... code that triggers a warning ...
    assert str(wrec.message) == "function is outdated"
    assert len(wrec.warnings) == 1, "Multiple warnings raised"
```

----------------------------------------

TITLE: Using DEBUG_LEAK Constant in Python's gc Module
DESCRIPTION: The DEBUG_LEAK constant combines multiple debugging flags (DEBUG_COLLECTABLE, DEBUG_UNCOLLECTABLE, and DEBUG_SAVEALL) to provide comprehensive information for diagnosing memory leaks in a Python program.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/gc.rst#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
DEBUG_COLLECTABLE | DEBUG_UNCOLLECTABLE | DEBUG_SAVEALL
```

----------------------------------------

TITLE: Improving Codec Handling in Python
DESCRIPTION: Illustrates codec error handling and convenience function usage in Python 2 and 3. Demonstrates the use of `codecs.encode` and `codecs.decode` for handling non-text encodings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.4.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> b"abcdef".decode("hex")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
LookupError: 'hex' is not a text encoding; use codecs.decode() to handle arbitrary codecs
```

LANGUAGE: python
CODE:
```
>>> "hello".encode("rot13")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
LookupError: 'rot13' is not a text encoding; use codecs.encode() to handle arbitrary codecs
```

LANGUAGE: python
CODE:
```
>>> import codecs

>>> codecs.decode(b"abcdefgh", "hex")
Traceback (most recent call last):
  File "/usr/lib/python3.4/encodings/hex_codec.py", line 20, in hex_decode
    return (binascii.a2b_hex(input), len(input))
binascii.Error: Non-hexadecimal digit found

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
binascii.Error: decoding with 'hex' codec failed (Error: Non-hexadecimal digit found)
```

----------------------------------------

TITLE: Setting Signal Handlers for SIGINT and SIGTERM in Python asyncio
DESCRIPTION: This Unix-specific example shows how to register handlers for SIGINT and SIGTERM signals using loop.add_signal_handler. It runs an event loop for an hour or until interrupted by a signal.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_38

LANGUAGE: python
CODE:
```
import asyncio
import functools
import os
import signal

def ask_exit(signame, loop):
    print("got signal %s: exit" % signame)
    loop.stop()

async def main():
    loop = asyncio.get_running_loop()

    for signame in {'SIGINT', 'SIGTERM'}:
        loop.add_signal_handler(
            getattr(signal, signame),
            functools.partial(ask_exit, signame, loop))

    await asyncio.sleep(3600)

print("Event loop running for 1 hour, press Ctrl+C to interrupt.")
print(f"pid {os.getpid()}: send SIGINT or SIGTERM to exit.")

asyncio.run(main())
```

----------------------------------------

TITLE: Defining a Generic TypedDict (Python <= 3.11)
DESCRIPTION: Illustrates how to create a generic `TypedDict` for compatibility with older Python versions (3.11 and lower) by explicitly inheriting from `typing.Generic`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_160

LANGUAGE: python
CODE:
```
T = TypeVar("T")

class Group(TypedDict, Generic[T]):
    key: T
    group: list[T]
```

----------------------------------------

TITLE: Using linecache to Retrieve a Line from a Python File
DESCRIPTION: A simple example demonstrating how to use the linecache module to retrieve a specific line from a Python source file. The example imports the linecache module and uses getline() to retrieve line 8 from the linecache module's own source file.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/linecache.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> import linecache
>>> linecache.getline(linecache.__file__, 8)
'import sys\n'
```

----------------------------------------

TITLE: Implementing Buffered Email Logging in Python
DESCRIPTION: This snippet defines a BufferingSMTPHandler class that extends BufferingHandler to send log messages via email. It buffers a specified number of messages before sending them in a single email. The script includes a command-line interface for easy testing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_49

LANGUAGE: python
CODE:
```
import logging
import logging.handlers
import smtplib

class BufferingSMTPHandler(logging.handlers.BufferingHandler):
    def __init__(self, mailhost, port, username, password, fromaddr, toaddrs,
                 subject, capacity):
        logging.handlers.BufferingHandler.__init__(self, capacity)
        self.mailhost = mailhost
        self.mailport = port
        self.username = username
        self.password = password
        self.fromaddr = fromaddr
        if isinstance(toaddrs, str):
            toaddrs = [toaddrs]
        self.toaddrs = toaddrs
        self.subject = subject
        self.setFormatter(logging.Formatter("%(asctime)s %(levelname)-5s %(message)s"))

    def flush(self):
        if len(self.buffer) > 0:
            try:
                smtp = smtplib.SMTP(self.mailhost, self.mailport)
                smtp.starttls()
                smtp.login(self.username, self.password)
                msg = "From: %s\r\nTo: %s\r\nSubject: %s\r\n\r\n" % (self.fromaddr, ','.join(self.toaddrs), self.subject)
                for record in self.buffer:
                    s = self.format(record)
                    msg = msg + s + "\r\n"
                smtp.sendmail(self.fromaddr, self.toaddrs, msg)
                smtp.quit()
            except Exception:
                if logging.raiseExceptions:
                    raise
            self.buffer = []

if __name__ == '__main__':
    import argparse

    ap = argparse.ArgumentParser()
    aa = ap.add_argument
    aa('host', metavar='HOST', help='SMTP server')
    aa('--port', '-p', type=int, default=587, help='SMTP port')
    aa('user', metavar='USER', help='SMTP username')
    aa('password', metavar='PASSWORD', help='SMTP password')
    aa('to', metavar='TO', help='Addressee for emails')
    aa('sender', metavar='SENDER', help='Sender email address')
    aa('--subject', '-s',
       default='Test Logging email from Python logging module (buffering)',
       help='Subject of email')
    options = ap.parse_args()
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)
    h = BufferingSMTPHandler(options.host, options.port, options.user,
                             options.password, options.sender,
                             options.to, options.subject, 10)
    logger.addHandler(h)
    for i in range(102):
        logger.info("Info index = %d", i)
    h.flush()
    h.close()
```

----------------------------------------

TITLE: Using nargs='?' with Optional and Positional Arguments
DESCRIPTION: Demonstrates the behavior of `nargs='?'` for both optional and positional arguments, showing how `const` and `default` values are used when arguments are omitted.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_41

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo', nargs='?', const='c', default='d')
>>> parser.add_argument('bar', nargs='?', default='d')
>>> parser.parse_args(['XX', '--foo', 'YY'])
Namespace(bar='XX', foo='YY')
>>> parser.parse_args(['XX', '--foo'])
Namespace(bar='XX', foo='c')
>>> parser.parse_args([])
Namespace(bar='d', foo='d')
```

----------------------------------------

TITLE: Correctly Calling Special Method from Type Object
DESCRIPTION: This snippet demonstrates the correct way to invoke a special method from its defining type object, passing the instance (or type itself) as the first argument. This method call (`type(1).__hash__(1)`) mimics the underlying mechanism used by implicit special method lookup.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_35

LANGUAGE: python
CODE:
```
type(1).__hash__(1) == hash(1)
type(int).__hash__(int) == hash(int)
```

----------------------------------------

TITLE: Finding Unique Values with Unique Function in Python
DESCRIPTION: Demonstrates the process of finding unique elements using the unique function. Includes usage of a key function and reverse ordering.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_85

LANGUAGE: Python
CODE:
```
>>> list(unique([[1, 2], [3, 4], [1, 2]]))
[[1, 2], [3, 4]]
>>> list(unique('ABBcCAD', str.casefold))
['A', 'B', 'c', 'D']
>>> list(unique('ABBcCAD', str.casefold, reverse=True))
['D', 'c', 'B', 'A']
```

----------------------------------------

TITLE: Adding statistical functions to statistics module in Python
DESCRIPTION: Adds covariance(), correlation(), and linear_regression() functions to the statistics module for advanced statistical calculations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
Add statistics.covariance(), Pearson's statistics.correlation(), and simple statistics.linear_regression() functions.
```

----------------------------------------

TITLE: Using IPv4Network as a container of addresses in ipaddress
DESCRIPTION: This code demonstrates how an IPv4Network object can act as a container for IPv4Address objects.  It shows how to access addresses within the network using indexing and how to check if an address belongs to a given network using the 'in' operator. This example checks for membership inside the IPv4Network('192.0.2.0/28') network.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ipaddress.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
>>> IPv4Network('192.0.2.0/28')[0]
IPv4Address('192.0.2.0')
>>> IPv4Network('192.0.2.0/28')[15]
IPv4Address('192.0.2.15')
>>> IPv4Address('192.0.2.6') in IPv4Network('192.0.2.0/28')
True
>>> IPv4Address('192.0.3.6') in IPv4Network('192.0.2.0/28')
False

```

----------------------------------------

TITLE: Python memoryview Context Management
DESCRIPTION: Demonstrates using memoryview objects with context management protocol for resource management.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
>>> with memoryview(b'abcdefgh') as v:
...     print(v.tolist())
[97, 98, 99, 100, 101, 102, 103, 104]
```

----------------------------------------

TITLE: Using Context Decorator as Function Decorator
DESCRIPTION: Demonstrates using the track_entry_and_exit as a function decorator to log function entry and exit
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextlib.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
@track_entry_and_exit('widget loader')
def activity():
    print('Some time consuming activity goes here')
    load_widget()
```

----------------------------------------

TITLE: Demonstrating Reference Cycle with sys.getrefcount (Python)
DESCRIPTION: Illustrates a reference cycle where a list contains a reference to itself. It shows that even after deleting the external variable, the object's reference count remains non-zero due to the internal cycle, preventing deallocation by simple reference counting.
SOURCE: https://github.com/python/cpython/blob/main/InternalDocs/garbage_collector.md#_snippet_1

LANGUAGE: pycon
CODE:
```
>>> container = []
>>> container.append(container)
>>> sys.getrefcount(container)
3
>>> del container
```

----------------------------------------

TITLE: Basic Python Embedding in C Application
DESCRIPTION: A simple C program that initializes the Python interpreter, executes a Python script that prints the current date and time, and then finalizes the interpreter. This demonstrates the very high level embedding interface.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/embedding.rst#2025-04-21_snippet_0

LANGUAGE: c
CODE:
```
#define PY_SSIZE_T_CLEAN
#include <Python.h>

int
main(int argc, char *argv[])
{
    PyStatus status;
    PyConfig config;
    PyConfig_InitPythonConfig(&config);

    /* optional but recommended */
    status = PyConfig_SetBytesString(&config, &config.program_name, argv[0]);
    if (PyStatus_Exception(status)) {
        goto exception;
    }

    status = Py_InitializeFromConfig(&config);
    if (PyStatus_Exception(status)) {
        goto exception;
    }
    PyConfig_Clear(&config);

    PyRun_SimpleString("from time import time,ctime\n"
                     "print('Today is', ctime(time()))\n");
    if (Py_FinalizeEx() < 0) {
        exit(120);
    }
    return 0;

  exception:
     PyConfig_Clear(&config);
     Py_ExitStatusException(status);
}
```

----------------------------------------

TITLE: Exception Handling Examples in Python Math Library
DESCRIPTION: Examples of Python math function calls that raise exceptions or handle NaN values. Shows cases where ValueError is raised for invalid operations and how NaN inputs are processed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/math.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
sqrt(-1.0)  # Raises ValueError
```

LANGUAGE: python
CODE:
```
log(0.0)  # Raises ValueError
```

LANGUAGE: python
CODE:
```
exp(1000.0)  # Raises OverflowError
```

LANGUAGE: python
CODE:
```
pow(float('nan'), 0.0)  # Special case handling with NaN
```

LANGUAGE: python
CODE:
```
hypot(float('nan'), float('inf'))  # Special case handling with NaN
```

----------------------------------------

TITLE: Augmented Assignment Class Implementation in Python
DESCRIPTION: Example class implementing augmented assignment support through the __iadd__ special method. Shows how to create a Number class that handles the += operator.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.0.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
class Number:
    def __init__(self, value):
        self.value = value
    def __iadd__(self, increment):
        return Number( self.value + increment)

n = Number(5)
n += 3
print n.value
```

----------------------------------------

TITLE: Using assert_awaited_with in AsyncMock
DESCRIPTION: Shows how to use assert_awaited_with to verify that the last await on an AsyncMock was with specific arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
>>> mock = AsyncMock()
>>> async def main(*args, **kwargs):
...     await mock(*args, **kwargs)
...
>>> asyncio.run(main('foo', bar='bar'))
>>> mock.assert_awaited_with('foo', bar='bar')
>>> mock.assert_awaited_with('other')
Traceback (most recent call last):
...
AssertionError: expected await not found.
Expected: mock('other')
Actual: mock('foo', bar='bar')
```

----------------------------------------

TITLE: Using the nonlocal Keyword in Nested Scopes
DESCRIPTION: This example demonstrates using the nonlocal keyword to modify a variable in an outer (but not global) scope from within a nested function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> def foo():
...    x = 10
...    def bar():
...        nonlocal x
...        print(x)
...        x += 1
...    bar()
...    print(x)
...
>>> foo()
10
11
```

----------------------------------------

TITLE: Using itertools.groupby with Strings
DESCRIPTION: Example showing how to use itertools.groupby for processing strings, including counting letter occurrences and finding unique letters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
>>> word = 'abracadabra'
>>> letters = sorted(word)   # Turn string into a sorted list of letters
>>> letters
['a', 'a', 'a', 'a', 'a', 'b', 'b', 'c', 'd', 'r', 'r']
>>> for k, g in itertools.groupby(letters):
...    print k, list(g)
...
a ['a', 'a', 'a', 'a', 'a']
b ['b', 'b']
c ['c']
d ['d']
r ['r', 'r']
>>> # List unique letters
>>> [k for k, g in groupby(letters)]
['a', 'b', 'c', 'd', 'r']
>>> # Count letter occurrences
>>> [(k, len(list(g))) for k, g in groupby(letters)]
[('a', 5), ('b', 2), ('c', 1), ('d', 1), ('r', 2)]
```

----------------------------------------

TITLE: Duplicating File Descriptors in Python
DESCRIPTION: The dup() function returns a duplicate of the given file descriptor. The new descriptor is non-inheritable, except for standard streams on Windows. The dup2() function duplicates one descriptor to another, with optional inheritability.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
def dup(fd, /):
    """Return a duplicate of file descriptor fd. The new file descriptor is
    non-inheritable.
    """
```

LANGUAGE: python
CODE:
```
def dup2(fd, fd2, inheritable=True):
    """Duplicate file descriptor fd to fd2, closing the latter first if
    necessary. Return fd2. The new file descriptor is inheritable
    by default or non-inheritable if inheritable is False.
    """
```

----------------------------------------

TITLE: Implementing __setattr__ with custom logic in Python
DESCRIPTION: Demonstrates how to implement __setattr__ with custom logic while avoiding infinite recursion by calling object.__setattr__.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_51

LANGUAGE: python
CODE:
```
class X:
    def __setattr__(self, name, value):
        # Custom logic here...
        object.__setattr__(self, name, value)
```

----------------------------------------

TITLE: Explicit Line Joining in Python
DESCRIPTION: This snippet demonstrates how explicit line joining is achieved in Python by using a backslash at the end of a physical line. Comments cannot be placed on lines ending with a backslash.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/lexical_analysis.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
if 1900 < year < 2100 and 1 <= month <= 12 \
      and 1 <= day <= 31 and 0 <= hour < 24 \
      and 0 <= minute < 60 and 0 <= second < 60:   # Looks like a valid date
           return 1
```

----------------------------------------

TITLE: Implementing Lazy Imports in Python
DESCRIPTION: Demonstrates how to implement lazy imports using importlib.util.LazyLoader. This allows for postponing the actual loading of a module until it's accessed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.rst#2025-04-21_snippet_32

LANGUAGE: python
CODE:
```
>>> import importlib.util
>>> import sys
>>> def lazy_import(name):
...     spec = importlib.util.find_spec(name)
...     loader = importlib.util.LazyLoader(spec.loader)
...     spec.loader = loader
...     module = importlib.util.module_from_spec(spec)
...     sys.modules[name] = module
...     loader.exec_module(module)
...     return module
...
>>> lazy_typing = lazy_import("typing")
>>> #lazy_typing is a real module object,
>>> #but it is not loaded in memory yet.
>>> lazy_typing.TYPE_CHECKING
False
```

----------------------------------------

TITLE: Making HEAD Requests with http.client in Python
DESCRIPTION: Demonstrates using the HEAD HTTP method with http.client. The HEAD method is used to retrieve only the headers of a resource without the body, which is why the data length is zero.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.client.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
>>> import http.client
>>> conn = http.client.HTTPSConnection("www.python.org")
>>> conn.request("HEAD", "/")
>>> res = conn.getresponse()
>>> print(res.status, res.reason)
200 OK
>>> data = res.read()
>>> print(len(data))
0
>>> data == b''
True
```

----------------------------------------

TITLE: Configuring Logging Formatters in INI Format for Python
DESCRIPTION: Example of a formatter configuration block in INI format for Python's logging system. This shows how to define format strings, date formats, style indicators, validation settings, default values, and formatter class specification.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.config.rst#2025-04-21_snippet_14

LANGUAGE: ini
CODE:
```
[formatter_form01]
format=F1 %(asctime)s %(levelname)s %(message)s %(customfield)s
datefmt=
style=%
validate=True
defaults={'customfield': 'defaultvalue'}
class=logging.Formatter
```

----------------------------------------

TITLE: Handling Invalid Choices with argparse Python
DESCRIPTION: Demonstrates how `argparse` handles invalid input when the `choices` parameter is used, showing the resulting usage and error messages. It highlights that the input 'fire' is not among the valid choices ('rock', 'paper', 'scissors').
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_53

LANGUAGE: Python
CODE:
```
>>> parser.parse_args(['fire'])
usage: game.py [-h] {rock,paper,scissors}
game.py: error: argument move: invalid choice: 'fire' (choose from 'rock',
paper', 'scissors')
```

----------------------------------------

TITLE: Getting Parent Process Object in Python
DESCRIPTION: Returns the Process object corresponding to the parent process of the current process. For the main process, parent_process will be None.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
parent_process()
```

----------------------------------------

TITLE: Mapping In-place Operators to Functions in Python
DESCRIPTION: This section describes in-place operations, mapping them to their corresponding functions like 'iadd(a, b)' for 'a += b'. It also explains the semantics of these operations, especially for immutable and mutable data types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/operator.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
``iadd(a, b)``
```

LANGUAGE: python
CODE:
```
``iand(a, b)``
```

LANGUAGE: python
CODE:
```
``iconcat(a, b)``
```

LANGUAGE: python
CODE:
```
``ifloordiv(a, b)``
```

LANGUAGE: python
CODE:
```
``ilshift(a, b)``
```

LANGUAGE: python
CODE:
```
``imod(a, b)``
```

LANGUAGE: python
CODE:
```
``imul(a, b)``
```

LANGUAGE: python
CODE:
```
``imatmul(a, b)``
```

LANGUAGE: python
CODE:
```
``ior(a, b)``
```

LANGUAGE: python
CODE:
```
``ipow(a, b)``
```

LANGUAGE: python
CODE:
```
``irshift(a, b)``
```

LANGUAGE: python
CODE:
```
``isub(a, b)``
```

LANGUAGE: python
CODE:
```
``itruediv(a, b)``
```

----------------------------------------

TITLE: Demonstrating IEEE 754 Binary64 Representation in Python
DESCRIPTION: This snippet shows how to calculate the best possible approximation of 1/10 in IEEE 754 double precision using Python. It demonstrates the binary representation and the rounding process.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/floatingpoint.rst#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
>>> 2**52 <=  2**56 // 10  < 2**53
True

>>> q, r = divmod(2**56, 10)
>>> r
6

>>> q+1
7205759403792794
```

----------------------------------------

TITLE: Detecting Incorrect await Usage with -O in Python
DESCRIPTION: Illustrates how incorrect usage of the `await` keyword and asynchronous comprehensions is now detected as a `SyntaxError` even when code is optimized with the `-O` command-line option.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_15

LANGUAGE: Shell
CODE:
```
python -O -c 'assert await 1'
```

LANGUAGE: Python
CODE:
```
await
```

LANGUAGE: Python
CODE:
```
SyntaxError
```

----------------------------------------

TITLE: Using assert_awaited_once_with in AsyncMock
DESCRIPTION: Demonstrates how to use assert_awaited_once_with to verify that an AsyncMock was awaited exactly once with specific arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
>>> mock = AsyncMock()
>>> async def main(*args, **kwargs):
...     await mock(*args, **kwargs)
...
>>> asyncio.run(main('foo', bar='bar'))
>>> mock.assert_awaited_once_with('foo', bar='bar')
>>> asyncio.run(main('foo', bar='bar'))
>>> mock.assert_awaited_once_with('foo', bar='bar')
Traceback (most recent call last):
...
AssertionError: Expected mock to have been awaited once. Awaited 2 times.
```

----------------------------------------

TITLE: Demonstrating IP Network Validation Errors
DESCRIPTION: Examples showing the difference in error messages between using the factory function ip_network() and direct IPv4Network constructor for invalid network definitions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/ipaddress.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
>>> ipaddress.ip_network("192.168.0.1/64")
Traceback (most recent call last):
  ...
ValueError: '192.168.0.1/64' does not appear to be an IPv4 or IPv6 network
>>> ipaddress.IPv4Network("192.168.0.1/64")
Traceback (most recent call last):
  ...
ipaddress.NetmaskValueError: '64' is not a valid netmask
```

----------------------------------------

TITLE: Checking type of accessed Enum member (Python)
DESCRIPTION: This checks the type of the object returned by accessing an `Enum` member via class subscription (`Menu['SPAM']`). The output confirms the result is an instance of the `Menu` `Enum` itself, further illustrating how `__getitem__` on the metaclass overrides `__class_getitem__` behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_22

LANGUAGE: Python
CODE:
```
type(Menu['SPAM'])
```

----------------------------------------

TITLE: Implementing asyncio.Runner context manager in Python
DESCRIPTION: Implements the asyncio.Runner class as a context manager, allowing it to be used with the 'with' statement for managing asyncio runner lifecycles.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a7.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
Implement asyncio.Runner context manager
```

----------------------------------------

TITLE: Implementing Float Comparison Function in Python
DESCRIPTION: This function compares two float values for equality within a small epsilon to account for floating-point precision issues.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/mathdata/ieee754.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
EPS = 1E-15
def equal(x, y):
    """Almost equal helper for floats"""
    return abs(x - y) < EPS
```

----------------------------------------

TITLE: Annotating Async Generator with Default SendType
DESCRIPTION: Annotates a Python asynchronous generator function using `AsyncGenerator[YieldType]`, relying on the default `SendType` which is `None`. Async generators do not have a `ReturnType` type argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_23

LANGUAGE: python
CODE:
```
async def infinite_stream(start: int) -> AsyncGenerator[int]:
    while True:
        yield start
        start = await increment(start)
```

----------------------------------------

TITLE: ChainMap Basic Usage Example - Python
DESCRIPTION: Demonstrates the basic usage of ChainMap with dictionary ordering and iteration.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> baseline = {'music': 'bach', 'art': 'rembrandt'}
>>> adjustments = {'art': 'van gogh', 'opera': 'carmen'}
>>> list(ChainMap(adjustments, baseline))
['music', 'art', 'opera']
```

----------------------------------------

TITLE: LastUpdatedOrderedDict Implementation
DESCRIPTION: Custom OrderedDict subclass that maintains items in order of their last update time by moving updated keys to the end.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
class LastUpdatedOrderedDict(OrderedDict):
    'Store items in the order the keys were last added'

    def __setitem__(self, key, value):
        super().__setitem__(key, value)
        self.move_to_end(key)
```

----------------------------------------

TITLE: Using await_args with AsyncMock
DESCRIPTION: Shows how the await_args attribute of AsyncMock stores the arguments that the mock was last awaited with, functioning similarly to Mock.call_args.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_35

LANGUAGE: python
CODE:
```
>>> mock = AsyncMock()
>>> async def main(*args):
...     await mock(*args)
...
>>> mock.await_args
>>> asyncio.run(main('foo'))
>>> mock.await_args
call('foo')
>>> asyncio.run(main('bar'))
>>> mock.await_args
call('bar')
```

----------------------------------------

TITLE: Safely Replacing Object Reference with Py_XSETREF (C)
DESCRIPTION: Variant of :c:macro:`Py_SETREF` macro that uses :c:func:`Py_XDECREF` instead of :c:func:`Py_DECREF`. This macro is used for safely replacing object references where the destination object might be NULL.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/refcounting.rst#_snippet_13

LANGUAGE: C
CODE:
```
Py_XSETREF(dst, src)
```

----------------------------------------

TITLE: Randomized Hashing with BLAKE2b and Salt
DESCRIPTION: This snippet demonstrates how to implement randomized hashing in BLAKE2b by using a salt to protect against collision attacks. It highlights how hashing two identical messages with different salts yields different digests.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/hashlib.rst#2025-04-21_snippet_14

LANGUAGE: Python
CODE:
```
>>> import os\n>>> from hashlib import blake2b\n>>> msg = b'some message'\n>>> # Calculate the first hash with a random salt.\n>>> salt1 = os.urandom(blake2b.SALT_SIZE)\n>>> h1 = blake2b(salt=salt1)\n>>> h1.update(msg)\n>>> # Calculate the second hash with a different random salt.\n>>> salt2 = os.urandom(blake2b.SALT_SIZE)\n>>> h2 = blake2b(salt=salt2)\n>>> h2.update(msg)\n>>> # The digests are different.\n>>> h1.digest() != h2.digest()\nTrue
```

----------------------------------------

TITLE: Subclassing DefaultEventLoopPolicy in Python
DESCRIPTION: This snippet demonstrates how to create a custom event loop policy by subclassing DefaultEventLoopPolicy in Python's asyncio. The method get_event_loop is overridden to modify the loop behavior. No specific dependencies are required other than Python's asyncio module. The method should return an event loop object or None, with modifications applied to the event loop before returning it.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-policy.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
class MyEventLoopPolicy(asyncio.DefaultEventLoopPolicy):

    def get_event_loop(self):
        """Get the event loop.

        This may be None or an instance of EventLoop.
        """
        loop = super().get_event_loop()
        # Do something with loop ...
        return loop

asyncio.set_event_loop_policy(MyEventLoopPolicy())
```

----------------------------------------

TITLE: Using str.zfill() in Python
DESCRIPTION: Demonstrates the zfill() method to pad a string with zeros on the left side to a specified width, handling both positive and negative numbers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_34

LANGUAGE: python
CODE:
```
>>> "42".zfill(5)
'00042'
>>> "-42".zfill(5)
'-0042'
```

----------------------------------------

TITLE: Calculating Product of Elements in Python
DESCRIPTION: This function calculates the product of all elements in an iterable, useful in mathematical contexts where aggregation of numeric values is needed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/math.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
.. function:: prod(iterable, *, start=1)

   Calculate the product of all the elements in the input *iterable*.
   The default *start* value for the product is ``1``.
```

----------------------------------------

TITLE: Enhanced KeyboardInterrupt Handling in subprocess
DESCRIPTION: The subprocess module is now more graceful when handling KeyboardInterrupt exceptions during subprocess calls or within Popen context managers. It now waits briefly for the child process to exit before propagating the exception.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
The subprocess module is now more graceful when handling
:exc:`KeyboardInterrupt` during :func:`subprocess.call`,
:func:`subprocess.run`, or in a :class:`~subprocess.Popen`
context manager.  It now waits a short amount of time for the child
to exit, before continuing the handling of the ``KeyboardInterrupt``
exception.
(Contributed by Gregory P. Smith in :issue:`25942`.)
```

----------------------------------------

TITLE: Using textwrap.indent() in Python
DESCRIPTION: Demonstrates the usage of the textwrap.indent() function to add a prefix to the beginning of selected lines in a text string.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/textwrap.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> s = 'hello\n\n \nworld'
>>> indent(s, '  ')
'  hello\n\n \n  world'

>>> print(indent(s, '+ ', lambda line: True))
+ hello
+
+
+ world
```

----------------------------------------

TITLE: Implementing the 'replace' Codec Error Handling in Python
DESCRIPTION: Implements the 'replace' error handling. Substitutes '?' (ASCII character) for encoding errors or '�' (U+FFFD, the official REPLACEMENT CHARACTER) for decoding errors.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/codecs.rst#_snippet_14

LANGUAGE: Python
CODE:
```
replace_errors(exception)
```

----------------------------------------

TITLE: Displaying Help Messages for Main and Subparsers in argparse
DESCRIPTION: This snippet shows how to request help messages using the `--help` flag for the main parser and for specific subparsers ('a' and 'b'). It illustrates that requesting help for a subparser only displays help relevant to that subparser, not the main parser or other subparsers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_76

LANGUAGE: python
CODE:
```
parser.parse_args(['--help'])
parser.parse_args(['a', '--help'])
parser.parse_args(['b', '--help'])
```

----------------------------------------

TITLE: Using Dict.fromkeys Alternate Constructor
DESCRIPTION: Demonstration of using the alternate constructor to create a new dictionary from a list of keys. The constructor returns an instance of the class it was called from.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
>>> d = Dict.fromkeys('abracadabra')
>>> type(d) is Dict
True
>>> d
{'a': None, 'b': None, 'r': None, 'c': None, 'd': None}
```

----------------------------------------

TITLE: Defining Generic Protocol (Python 3.12+)
DESCRIPTION: Demonstrates the modern syntax for defining a generic protocol using square brackets `[]` for type parameters directly on the class definition.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_143

LANGUAGE: python
CODE:
```
class GenProto[T](Protocol):
    def meth(self) -> T:
        ...
```

----------------------------------------

TITLE: Adding --upgrade-deps Option to venv Module
DESCRIPTION: New command-line option for the venv module that allows upgrading dependencies when creating a virtual environment.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.9.0a1.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
--upgrade-deps
```

----------------------------------------

TITLE: Detect 64-bit Python Interpreter
DESCRIPTION: This snippet demonstrates how to reliably determine if the current Python interpreter is 64-bit by querying the `sys.maxsize` attribute. This method avoids potential inaccuracies when querying executable files directly, especially on platforms like macOS where universal binaries are used.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/platform.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"is_64bits = sys.maxsize > 2**32"
```

----------------------------------------

TITLE: In-place Subtraction with collections.Counter in Python
DESCRIPTION: The Counter class in collections now supports in-place subtraction using the -= operator for saturating arithmetic, and a new subtract method for allowing negative counts. These methods flexibly handle multisets scenarios depending on count behavior preferences.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_28

LANGUAGE: python
CODE:
```
>>> from collections import Counter
>>> tally = Counter(dogs=5, cats=3)
>>> tally -= Counter(dogs=2, cats=8)    # saturating subtraction
>>> tally = Counter(dogs=5, cats=3)
>>> tally.subtract(dogs=2, cats=8)      # regular subtraction
```

----------------------------------------

TITLE: Implementing dropwhile function in Python
DESCRIPTION: Equivalent implementation of the dropwhile function that creates an iterator dropping elements from the iterable while the predicate is true, then returns every remaining element without testing the predicate again.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
def dropwhile(predicate, iterable):
    # dropwhile(lambda x: x<5, [1,4,6,3,8]) → 6 3 8

    iterator = iter(iterable)
    for x in iterator:
        if not predicate(x):
            yield x
            break

    for x in iterator:
        yield x
```

----------------------------------------

TITLE: Converting Float to Decimal with Context Traps in Python
DESCRIPTION: This doctest example shows how `Context.create_decimal_from_float` applies context trap settings during conversion. When the `Inexact` trap is enabled and the float conversion is inexact for the given precision, a `decimal.Inexact` exception is raised.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_34

LANGUAGE: python
CODE:
```
context = Context(prec=5, traps=[Inexact])
>>> context.create_decimal_from_float(math.pi)
Traceback (most recent call last):
    ...
decimal.Inexact: None
```

----------------------------------------

TITLE: Asynchronous Setup in Python unittest
DESCRIPTION: Asynchronous method called to prepare the test fixture in IsolatedAsyncioTestCase. It runs after setUp and immediately before the test method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_32

LANGUAGE: python
CODE:
```
async def asyncSetUp()
```

----------------------------------------

TITLE: Using shutil.which() on Windows
DESCRIPTION: Demonstrates the usage of shutil.which() function on Windows to locate the Python executable. The function searches the PATH and considers file extensions based on the PATHEXT environment variable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/shutil.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> shutil.which("python")
'C:\\Python33\\python.EXE'
```

----------------------------------------

TITLE: Using side_effect with Mock Objects in Python
DESCRIPTION: Explains how to use the side_effect attribute of a Mock object. This attribute can be set to a function, iterable, or exception to control the mock's behavior when called.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
>>> mock = Mock()
>>> mock.side_effect = Exception('Boom!')
>>> mock()
Traceback (most recent call last):
  ...
Exception: Boom!

>>> mock = Mock()
>>> mock.side_effect = [3, 2, 1]
>>> mock(), mock(), mock()
(3, 2, 1)

>>> mock = Mock(return_value=3)
>>> def side_effect(*args, **kwargs):
...     return DEFAULT
...
>>> mock.side_effect = side_effect
>>> mock()
3

>>> side_effect = lambda value: value + 1
>>> mock = Mock(side_effect=side_effect)
>>> mock(3)
4
>>> mock(-8)
-7

>>> m = Mock(side_effect=KeyError, return_value=3)
>>> m()
Traceback (most recent call last):
 ...
KeyError
>>> m.side_effect = None
>>> m()
3
```

----------------------------------------

TITLE: Python Performance Benchmarks Comparison Table
DESCRIPTION: A comprehensive benchmark comparison table showing performance metrics across Python versions 3.4-3.9 for various operations including variable access, data structure operations, and stack operations. Results are measured in nanoseconds on an Intel Core i7-4960HQ processor.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.9.rst#2025-04-21_snippet_3

LANGUAGE: none
CODE:
```
Python version                       3.4     3.5     3.6     3.7     3.8    3.9
--------------                       ---     ---     ---     ---     ---    ---

Variable and attribute read access:
    read_local                       7.1     7.1     5.4     5.1     3.9    3.9
    read_nonlocal                    7.1     8.1     5.8     5.4     4.4    4.5
    read_global                     15.5    19.0    14.3    13.6     7.6    7.8
    read_builtin                    21.1    21.6    18.5    19.0     7.5    7.8
    read_classvar_from_class        25.6    26.5    20.7    19.5    18.4   17.9
    read_classvar_from_instance     22.8    23.5    18.8    17.1    16.4   16.9
    read_instancevar                32.4    33.1    28.0    26.3    25.4   25.3
    read_instancevar_slots          27.8    31.3    20.8    20.8    20.2   20.5
    read_namedtuple                 73.8    57.5    45.0    46.8    18.4   18.7
    read_boundmethod                37.6    37.9    29.6    26.9    27.7   41.1

Variable and attribute write access:
    write_local                      8.7     9.3     5.5     5.3     4.3    4.3
    write_nonlocal                  10.5    11.1     5.6     5.5     4.7    4.8
    write_global                    19.7    21.2    18.0    18.0    15.8   16.7
    write_classvar                  92.9    96.0   104.6   102.1    39.2   39.8
    write_instancevar               44.6    45.8    40.0    38.9    35.5   37.4
    write_instancevar_slots         35.6    36.1    27.3    26.6    25.7   25.8

Data structure read access:
    read_list                       24.2    24.5    20.8    20.8    19.0   19.5
    read_deque                      24.7    25.5    20.2    20.6    19.8   20.2
    read_dict                       24.3    25.7    22.3    23.0    21.0   22.4
    read_strdict                    22.6    24.3    19.5    21.2    18.9   21.5

Data structure write access:
    write_list                      27.1    28.5    22.5    21.6    20.0   20.0
    write_deque                     28.7    30.1    22.7    21.8    23.5   21.7
    write_dict                      31.4    33.3    29.3    29.2    24.7   25.4
    write_strdict                   28.4    29.9    27.5    25.2    23.1   24.5

Stack (or queue) operations:
    list_append_pop                 93.4   112.7    75.4    74.2    50.8   50.6
    deque_append_pop                43.5    57.0    49.4    49.2    42.5   44.2
    deque_append_popleft            43.7    57.3    49.7    49.7    42.8   46.4

Timing loop:
    loop_overhead                    0.5     0.6     0.4     0.3     0.3    0.3
```

----------------------------------------

TITLE: Formatting Floating-Point Numbers for Display in Python
DESCRIPTION: Demonstrates different methods for formatting floating-point numbers to control the display precision, including string formatting and the repr() function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/floatingpoint.rst#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> format(math.pi, '.12g')  # give 12 significant digits
'3.14159265359'

>>> format(math.pi, '.2f')   # give 2 digits after the point
'3.14'

>>> repr(math.pi)
'3.141592653589793'
```

----------------------------------------

TITLE: Specifying Numeric Sign - Python
DESCRIPTION: Demonstrates how to control the display of the sign for numbers using '+', ' ', and '-' flags, replicating the behavior of old `%+f`, `% f`, and `%-f`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/string.rst#_snippet_8

LANGUAGE: python
CODE:
```
>>> '{:+f}; {:+f}'.format(3.14, -3.14)  # show it always
'+3.140000; -3.140000'
>>> '{: f}; {: f}'.format(3.14, -3.14)  # show a space for positive numbers
' 3.140000; -3.140000'
>>> '{:-f}; {:-f}'.format(3.14, -3.14)  # show only the minus -- same as '{:f}; {:f}'
'3.140000; -3.140000'
```

----------------------------------------

TITLE: Mocking a Dictionary with MagicMock in Python
DESCRIPTION: Technique for creating a mock dictionary that records access while still behaving like a real dictionary by using side_effect to delegate to an actual dictionary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_33

LANGUAGE: python
CODE:
```
>>> my_dict = {'a': 1, 'b': 2, 'c': 3}
>>> def getitem(name):
...      return my_dict[name]
...
>>> def setitem(name, val):
...     my_dict[name] = val
...
>>> mock = MagicMock()
>>> mock.__getitem__.side_effect = getitem
>>> mock.__setitem__.side_effect = setitem
```

----------------------------------------

TITLE: Demonstrating Nested Patches with Multiple Context Managers in Python
DESCRIPTION: Example of how multiple patch context managers can lead to deeply nested code when patching multiple objects in Python's unittest framework.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
>>> class MyTest(unittest.TestCase):
...
...     def test_foo(self):
...         with patch('mymodule.Foo') as mock_foo:
...             with patch('mymodule.Bar') as mock_bar:
...                 with patch('mymodule.Spam') as mock_spam:
...                     assert mymodule.Foo is mock_foo
...                     assert mymodule.Bar is mock_bar
...                     assert mymodule.Spam is mock_spam
...
>>> original = mymodule.Foo
>>> MyTest('test_foo').test_foo()
>>> assert mymodule.Foo is original
```

----------------------------------------

TITLE: Testing Element Values in ElementTree with Proper Null Checking
DESCRIPTION: Example showing two approaches to check if an element exists: using truth value testing (deprecated in Python 3.12) and the recommended explicit None check. Truth value testing for Elements can be misleading as elements with no subelements test as False.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
element = root.find('foo')

if not element:  # careful!
    print("element not found, or element has no subelements")

if element is None:
    print("element not found")
```

----------------------------------------

TITLE: Creating NewType from Another NewType in Python
DESCRIPTION: Illustrates how to define a `NewType` (`ProUserId`) based on an existing `NewType` (`UserId`). This pattern is valid and allows for layered type distinctions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_9

LANGUAGE: Python
CODE:
```
from typing import NewType

UserId = NewType('UserId', int)

ProUserId = NewType('ProUserId', UserId)
```

----------------------------------------

TITLE: Adding os.readinto Function
DESCRIPTION: Introduces a new function to read data from a file descriptor directly into a buffer object, improving efficiency by avoiding intermediate objects.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.14.0a5.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
Add :func:`os.readinto` to read into a :ref:`buffer object <bufferobjects>`
from a file descriptor.
```

----------------------------------------

TITLE: Using re with Lookbehind Assertions
DESCRIPTION: This example illustrates using lookbehind assertions with fixed-length references in Python's regular expression module. The example demonstrates how to match patterns using captured groups in assertions. The re module must be imported to use this function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_25

LANGUAGE: Python
CODE:
```
>>> import re
>>> pat = re.compile(r'(a|b).(?<=\1)c')
>>> pat.match('aac')
<_sre.SRE_Match object; span=(0, 3), match='aac'>
>>> pat.match('bbc')
<_sre.SRE_Match object; span=(0, 3), match='bbc'>
```

----------------------------------------

TITLE: Array Module Example
DESCRIPTION: This example shows how to create and use an array using the `array` module.  It creates an array of unsigned short integers ('H') and performs operations like summing the elements and slicing the array. This is more memory efficient than a list for homogeneous numerical data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib2.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
>>> from array import array
>>> a = array('H', [4000, 10, 700, 22222])
>>> sum(a)
26932
>>> a[1:3]
array('H', [10, 700])
```

----------------------------------------

TITLE: System Information Functions
DESCRIPTION: Functions for retrieving various system configuration values and information about CPU count, load average, and system configuration parameters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_83

LANGUAGE: Python
CODE:
```
def confstr(name): return str
def cpu_count(): return int
def getloadavg(): return tuple
def process_cpu_count(): return int
def sysconf(name): return int
```

----------------------------------------

TITLE: Formatting traceback with format_tb
DESCRIPTION: A shorthand for formatting a traceback object into a list of strings. Combines extract_tb and format_list operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
format_tb(tb, limit=None)
```

----------------------------------------

TITLE: Adding Junction Path Check Functions (Python)
DESCRIPTION: Adds new functions to check if a path is a junction: os.path.isjunction() and pathlib.Path.is_junction(). This provides a way to identify junction points in the file system.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.12.0a3.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
os.path.isjunction
pathlib.Path.is_junction
```

----------------------------------------

TITLE: Py_NewRef Assignment Example C
DESCRIPTION: Demonstrates using Py_NewRef to create a new strong reference and assign it, replacing the need for a separate Py_INCREF call before assignment.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/refcounting.rst#_snippet_5

LANGUAGE: C
CODE:
```
Py_INCREF(obj);
self->attr = obj;
```

LANGUAGE: C
CODE:
```
self->attr = Py_NewRef(obj);
```

----------------------------------------

TITLE: Defining ProxyHandler Class for Request Proxying in Python
DESCRIPTION: ProxyHandler causes requests to go through a proxy. It can be initialized with a dictionary of protocol-to-proxy URL mappings or use environment variables.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
class ProxyHandler(proxies=None):
```

----------------------------------------

TITLE: Deque Operations with collections in Python
DESCRIPTION: The deque class in collections added methods count and reverse to increase interoperability with lists, enabling counting of elements and reverse iteration over the deque. This enhancement broadens deque's suitability in scenarios where list-like operations are needed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
>>> from collections import deque
>>> d = deque('simsalabim')
>>> d.count('s')
>>> d.reverse()
>>> d
```

----------------------------------------

TITLE: Forcing Decimal Input Rounding with Unary Plus (Python)
DESCRIPTION: Illustrates how applying the unary plus operator (`+`) to a `Decimal` number triggers rounding of that number according to the current context's precision (`prec`) before any other operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_41

LANGUAGE: Python
CODE:
```
getcontext().prec = 3
+Decimal('1.23456789')      # unary plus triggers rounding
```

----------------------------------------

TITLE: Sorting in reverse using reversed function twice
DESCRIPTION: This snippet demonstrates how to simulate the effect of `sorted(data, key=itemgetter(0), reverse=True)` using `reversed` function twice. This approach maintains sort stability, ensuring that records with equal keys retain their original order. The `itemgetter` function from the `operator` module is used to specify the sorting key.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/sorting.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
>>> data = [('red', 1), ('blue', 1), ('red', 2), ('blue', 2)]
>>> from operator import itemgetter
>>> standard_way = sorted(data, key=itemgetter(0), reverse=True)
>>> double_reversed = list(reversed(sorted(reversed(data), key=itemgetter(0))))
>>> assert standard_way == double_reversed
>>> standard_way
[('red', 1), ('red', 2), ('blue', 1), ('blue', 2)]
```

----------------------------------------

TITLE: Sending Signal to Subprocess via SubprocessTransport in Python
DESCRIPTION: This method sends a signal number to the subprocess, similar to subprocess.Popen.send_signal().
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
SubprocessTransport.send_signal(signal)
```

----------------------------------------

TITLE: Patching Non-Existing Attributes
DESCRIPTION: This snippet illustrates the usage of the create=True parameter to allow patching of attributes that do not currently exist, preventing an AttributeError.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_45

LANGUAGE: python
CODE:
```
>>> @patch('sys.non_existing_attribute', 42)
... def test():
...     assert sys.non_existing_attribute == 42
...
>>> test()
Traceback (most recent call last):
  ...
AttributeError: <module 'sys' (built-in)> does not have the attribute 'non_existing_attribute'
...
>>> @patch('sys.non_existing_attribute', 42, create=True)
... def test(mock_stdout):
...     assert sys.non_existing_attribute == 42
...
>>> test()
```

----------------------------------------

TITLE: Overriding Default Warning Filters
DESCRIPTION: Example of disabling all Python warnings in an application.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/warnings.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
import sys

if not sys.warnoptions:
    import warnings
    warnings.simplefilter("ignore")
```

----------------------------------------

TITLE: Using assertCountEqual in Python unittest
DESCRIPTION: Shows how to use the new assertCountEqual method to compare two iterables for equal element counts, regardless of order.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_60

LANGUAGE: python
CODE:
```
def test_anagram(self):
    self.assertCountEqual('algorithm', 'logarithm')
```

----------------------------------------

TITLE: Using functools.reduce for Cumulative Operations in Python
DESCRIPTION: This snippet demonstrates the use of functools.reduce to perform cumulative operations on iterables. It shows examples of string concatenation and multiplication of numbers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_24

LANGUAGE: python
CODE:
```
>>> import operator, functools
>>> functools.reduce(operator.concat, ['A', 'BB', 'C'])
'ABBC'
>>> functools.reduce(operator.concat, [])
Traceback (most recent call last):
  ...
TypeError: reduce() of empty sequence with no initial value
>>> functools.reduce(operator.mul, [1, 2, 3], 1)
6
>>> functools.reduce(operator.mul, [], 1)
1
```

----------------------------------------

TITLE: Adding Notes to Exceptions in Python
DESCRIPTION: Shows how to add contextual notes to exceptions using the add_note() method. The notes are displayed in the traceback after the exception message.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/errors.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
try:
    raise TypeError('bad type')
except Exception as e:
    e.add_note('Add some information')
    e.add_note('Add some more information')
    raise
```

----------------------------------------

TITLE: Adding PYTHONSAFEPATH Environment Variable in Python
DESCRIPTION: Introduces the -P command line option and PYTHONSAFEPATH environment variable to prevent prepending potentially unsafe paths to sys.path for security reasons.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0b1.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
import sys

# Example usage (not actual implementation)
if 'PYTHONSAFEPATH' in os.environ or '-P' in sys.argv:
    # Don't prepend potentially unsafe path to sys.path
    pass
```

----------------------------------------

TITLE: Using fsum() Function in Python math Module
DESCRIPTION: Example showing the import and usage of the fsum() function from Python's math module, which provides a high-precision summation of floating-point numbers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/math.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from math import fsum
```

----------------------------------------

TITLE: Deprecating typing.Sized Alias in Python
DESCRIPTION: The typing.Sized alias for collections.abc.Sized is deprecated. Use collections.abc.Sized directly instead.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_36

LANGUAGE: Python
CODE:
```
typing.Sized
```

----------------------------------------

TITLE: Evaluating Simple Assert Statement - Python
DESCRIPTION: This snippet shows the equivalent conditional code for the simple `assert expression` statement when the built-in `__debug__` flag is true. It checks if the expression is false and raises an `AssertionError` if it is.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/simple_stmts.rst#_snippet_2

LANGUAGE: python
CODE:
```
if __debug__:
    if not expression: raise AssertionError
```

----------------------------------------

TITLE: Detecting never-retrieved exceptions
DESCRIPTION: This example demonstrates the scenario where an exception is raised within a Task, but the exception is never retrieved. Asyncio emits a log message when the Future object associated with the Task is garbage collected. This helps identify unhandled exceptions that might otherwise go unnoticed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-dev.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
import asyncio

async def bug():
    raise Exception("not consumed")

async def main():
    asyncio.create_task(bug())

asyncio.run(main())
```

----------------------------------------

TITLE: Disabling Breakpoints - Pdb - Python
DESCRIPTION: Disables one or more breakpoints specified by their numbers. Disabled breakpoints remain in the list but do not stop execution until re-enabled.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_11



----------------------------------------

TITLE: Improving `unittest` to report subtests
DESCRIPTION: The `unittest` module now reports skipped and failed subtests separately, including outputting the test description for errors in test method, class, and module cleanups.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a1.rst#2025-04-21_snippet_12



----------------------------------------

TITLE: Creating special tuples in Python
DESCRIPTION: Shows how to create empty tuples and single-item tuples, demonstrating the syntax quirks involved.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/datastructures.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> empty = ()
>>> singleton = 'hello',    # <-- note trailing comma
>>> len(empty)
0
>>> len(singleton)
1
>>> singleton
('hello',)
```

----------------------------------------

TITLE: Defining a Factorial Function in Python
DESCRIPTION: This Python function calculates the factorial of a non-negative integer, leveraging mathematical operations. Dependencies include the standard math module. Inputs must be non-negative integers, and outputs the factorial of the given number. Errors are raised for non-integer inputs, negative numbers, or overly large values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/doctest.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"""
This is the "example" module.

The example module supplies one function, factorial(). For example,

>>> factorial(5)
120
"""

def factorial(n):
    """Return the factorial of n, an exact integer >= 0.

    >>> [factorial(n) for n in range(6)]
    [1, 1, 2, 6, 24, 120]
    >>> factorial(30)
    265252859812191058636308480000000
    >>> factorial(-1)
    Traceback (most recent call last):
    ...
    ValueError: n must be >= 0

    Factorials of floats are OK, but the float must be an exact integer:
    >>> factorial(30.1)
    Traceback (most recent call last):
    ...
    ValueError: n must be exact integer
    >>> factorial(30.0)
    265252859812191058636308480000000

    It must also not be ridiculously large:
    >>> factorial(1e100)
    Traceback (most recent call last):
    ...
    OverflowError: n too large
    """

    import math
    if not n >= 0:
        raise ValueError("n must be >= 0")
    if math.floor(n) != n:
        raise ValueError("n must be exact integer")
    if n+1 == n:  # catch a value like 1e300
        raise OverflowError("n too large")
    result = 1
    factor = 2
    while factor <= n:
        result *= factor
        factor += 1
    return result

if __name__ == "__main__":
    import doctest
    doctest.testmod()

```

----------------------------------------

TITLE: Creating TracebackException from Existing Exception
DESCRIPTION: Class method to create a TracebackException instance from an existing exception object with options to limit stack depth, control source line lookup, and capture local variables for enhanced debugging.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
TracebackException.from_exception(exc, *, limit=None, lookup_lines=True, capture_locals=False)
```

----------------------------------------

TITLE: Doctest Exception Handling Example
DESCRIPTION: Shows how to test for exceptions in doctest, including proper traceback formatting and exception detail verification.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/doctest.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> [1, 2, 3].remove(42)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: list.remove(x): x not in list
```

----------------------------------------

TITLE: Comparing IntEnum Types in Python
DESCRIPTION: Demonstrates how IntEnum members can be compared to integers and other IntEnum members of different types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
>>> from enum import IntEnum
>>> class Shape(IntEnum):
...     CIRCLE = 1
...     SQUARE = 2
...
>>> class Request(IntEnum):
...     POST = 1
...     GET = 2
...
>>> Shape == 1
False
>>> Shape.CIRCLE == 1
True
>>> Shape.CIRCLE == Request.POST
True
```

----------------------------------------

TITLE: Making POST Requests with http.client in Python
DESCRIPTION: Shows how to make a POST request to submit form data. The example encodes parameters using urllib.parse.urlencode, sets appropriate headers for form submission, and handles the response which is a redirection.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.client.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> import http.client, urllib.parse
>>> params = urllib.parse.urlencode({'@number': 12524, '@type': 'issue', '@action': 'show'})
>>> headers = {"Content-type": "application/x-www-form-urlencoded",
...            "Accept": "text/plain"}
>>> conn = http.client.HTTPConnection("bugs.python.org")
>>> conn.request("POST", "", params, headers)
>>> response = conn.getresponse()
>>> print(response.status, response.reason)
302 Found
>>> data = response.read()
>>> data
b'Redirecting to <a href="https://bugs.python.org/issue12524">https://bugs.python.org/issue12524</a>'
>>> conn.close()
```

----------------------------------------

TITLE: Using __getitem__ with Named Groups in Python Regular Expressions
DESCRIPTION: Shows how to access named capturing groups using the bracket notation with the group name as an index.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
>>> m = re.match(r"(?P<first_name>\w+) (?P<last_name>\w+)", "Isaac Newton")
>>> m['first_name']
'Isaac'
>>> m['last_name']
'Newton'
```

----------------------------------------

TITLE: Implementing a Context Manager for Database Transactions in Python
DESCRIPTION: This code outlines the structure of a DatabaseConnection class that implements the context management protocol for handling database transactions using the 'with' statement.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
class DatabaseConnection:
    # Database interface
    def cursor (self):
        "Returns a cursor object and starts a new transaction"
    def commit (self):
        "Commits current transaction"
    def rollback (self):
        "Rolls back current transaction"

    def __enter__ (self):
        # Code to start a new transaction
        cursor = self.cursor()
        return cursor
```

----------------------------------------

TITLE: Using Bisect for Grade Assignment in Python
DESCRIPTION: Example of using the bisect function for numeric table lookups, specifically for assigning letter grades based on numeric exam scores with defined breakpoints.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/bisect.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> def grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):
...     i = bisect(breakpoints, score)
...     return grades[i]
...
>>> [grade(score) for score in [33, 99, 77, 70, 89, 90, 100]]
['F', 'A', 'C', 'C', 'B', 'A', 'A']
```

----------------------------------------

TITLE: Implementing a Custom Context Manager with ContextDecorator in Python
DESCRIPTION: Demonstrates how to create a custom context manager that can also be used as a decorator using ContextDecorator. The example shows a simple context manager that prints messages on enter and exit.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextlib.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
from contextlib import ContextDecorator

class mycontext(ContextDecorator):
    def __enter__(self):
        print('Starting')
        return self

    def __exit__(self, *exc):
        print('Finishing')
        return False
```

LANGUAGE: python
CODE:
```
@mycontext()
def function():
    print('The bit in the middle')

function()
```

LANGUAGE: python
CODE:
```
with mycontext():
    print('The bit in the middle')
```

----------------------------------------

TITLE: Setting SO_REUSEADDR Socket Option Python
DESCRIPTION: This snippet shows how to set the `SO_REUSEADDR` socket option before binding a socket. Setting this flag to `1` (true) tells the operating system kernel to allow immediate reuse of a local socket that is still in the `TIME_WAIT` state after a previous connection has closed. This is useful for quickly restarting server applications and avoiding "Address already in use" errors.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/socket.rst#_snippet_14

LANGUAGE: Python
CODE:
```
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.bind((HOST, PORT))
```

----------------------------------------

TITLE: Create tar.gz Archive with Custom Filter to Reset Ownership - Python
DESCRIPTION: This code demonstrates creating a gzip-compressed tar archive (`sample.tar.gz`) and using a custom filter function (`reset`) with the `add` method. The `reset` function modifies the `uid`, `gid`, `uname`, and `gname` attributes of the `tarinfo` object before it's added to the archive, effectively resetting ownership to 'root'.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_35

LANGUAGE: Python
CODE:
```
import tarfile
def reset(tarinfo):
       tarinfo.uid = tarinfo.gid = 0
       tarinfo.uname = tarinfo.gname = "root"
       return tarinfo
tar = tarfile.open("sample.tar.gz", "w:gz")
tar.add("foo", filter=reset)
tar.close()
```

----------------------------------------

TITLE: Localizing an Entire Python Application with gettext
DESCRIPTION: This code shows how to set up internationalization for an entire application by installing the translation function globally in the built-in namespace. This allows all files to use the '_' function without importing it in each file.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/gettext.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
import gettext
gettext.install('myapplication')
```

----------------------------------------

TITLE: Adding Class Cleanup Function in Python unittest
DESCRIPTION: Class method to add a cleanup function to be called after tearDownClass. Functions are called in reverse order (LIFO) and can include arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
addClassCleanup(function, /, *args, **kwargs)
```

----------------------------------------

TITLE: Pretty-Printing AST with ast.dump (Python)
DESCRIPTION: This Python snippet illustrates the usage of the `ast.dump` function to obtain a formatted string representation of an Abstract Syntax Tree (AST). It demonstrates parsing a simple Python source code string into an AST and then dumping it with specified indentation (4 spaces) and including empty lists/fields (`show_empty=True`) for detailed debugging.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_62

LANGUAGE: python
CODE:
```
>>> print(ast.dump(ast.parse("""
... async def f():
...     await other_func()
... """), indent=4, show_empty=True))
Module(
    body=[
        AsyncFunctionDef(
            name='f',
            args=arguments(
                posonlyargs=[],
                args=[],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Await(
                        value=Call(
                            func=Name(id='other_func', ctx=Load()),
                            args=[],
                            keywords=[])))],
            decorator_list=[],
            type_params=[])],
    type_ignores=[])
```

----------------------------------------

TITLE: TarInfo Name Attribute in Python
DESCRIPTION: A string attribute representing the name of the archive member. This is the path/filename as stored within the tar archive. It is a key identifier for the member.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_13

LANGUAGE: python
CODE:
```
TarInfo.name
```

----------------------------------------

TITLE: Service Management Command Implementations
DESCRIPTION: Individual command implementations for starting, stopping, and restarting services with consistent logging.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_53

LANGUAGE: python
CODE:
```
# start.py
import logging

logger = logging.getLogger(__name__)

def command(options):
    logger.debug('About to start %s', options.name)
    # actually do the command processing here ...
    logger.info('Started the \'%s\' service.', options.name)
```

LANGUAGE: python
CODE:
```
# stop.py
import logging

logger = logging.getLogger(__name__)

def command(options):
    n = len(options.names)
    if n == 1:
        plural = ''
        services = '\'%s\'' % options.names[0]
    else:
        plural = 's'
        services = ', '.join('\'%s\'' % name for name in options.names)
        i = services.rfind(', ')
        services = services[:i] + ' and ' + services[i + 2:]
    logger.debug('About to stop %s', services)
    # actually do the command processing here ...
    logger.info('Stopped the %s service%s.', services, plural)
```

LANGUAGE: python
CODE:
```
# restart.py
import logging

logger = logging.getLogger(__name__)

def command(options):
    n = len(options.names)
    if n == 1:
        plural = ''
        services = '\'%s\'' % options.names[0]
    else:
        plural = 's'
        services = ', '.join('\'%s\'' % name for name in options.names)
        i = services.rfind(', ')
        services = services[:i] + ' and ' + services[i + 2:]
    logger.debug('About to restart %s', services)
    # actually do the command processing here ...
    logger.info('Restarted the %s service%s.', services, plural)
```

----------------------------------------

TITLE: Manual String Formatting with rjust Method
DESCRIPTION: Shows manual string alignment using the str.rjust() method, which right-justifies strings in a field of given width by padding with spaces. Similar methods include str.ljust() and str.center().
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/inputoutput.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> for x in range(1, 11):
...     print(repr(x).rjust(2), repr(x*x).rjust(3), end=' ')
...     # Note use of 'end' on previous line
...     print(repr(x*x*x).rjust(4))
...
 1   1    1
 2   4    8
 3   9   27
 4  16   64
 5  25  125
 6  36  216
 7  49  343
 8  64  512
 9  81  729
10 100 1000
```

----------------------------------------

TITLE: Implementing UDP Echo Server Protocol in Python
DESCRIPTION: Defines an EchoServerProtocol class that implements a simple UDP echo server. It receives datagrams and sends them back to the sender.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
import asyncio


class EchoServerProtocol:
    def connection_made(self, transport):
        self.transport = transport

    def datagram_received(self, data, addr):
        message = data.decode()
        print('Received %r from %s' % (message, addr))
        print('Send %r to %s' % (message, addr))
        self.transport.sendto(data, addr)


async def main():
    print("Starting UDP server")

    # Get a reference to the event loop as we plan to use
    # low-level APIs.
    loop = asyncio.get_running_loop()

    # One protocol instance will be created to serve all
    # client requests.
    transport, protocol = await loop.create_datagram_endpoint(
        EchoServerProtocol,
        local_addr=('127.0.0.1', 9999))

    try:
        await asyncio.sleep(3600)  # Serve for 1 hour.
    finally:
        transport.close()


asyncio.run(main())
```

----------------------------------------

TITLE: Basic Formatter Configuration Dictionary
DESCRIPTION: Python dictionary representation of a basic formatter configuration with just a format string.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.config.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
{
  'format' : '%(message)s'
}
```

----------------------------------------

TITLE: Thread Synchronization using threading.Barrier in Python
DESCRIPTION: The threading module introduces Barrier for thread synchronization purposes. It allows a task to wait until all threads have reached a certain execution point, useful in parallel processing tasks with shared preconditions. The Barrier resets post-completion, supporting loops and multiple cycles.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
    from threading import Barrier, Thread

    def get_votes(site):
        ballots = conduct_election(site)
        all_polls_closed.wait()        # do not count until all polls are closed
        totals = summarize(ballots)
        publish(site, totals)

    all_polls_closed = Barrier(len(sites))
    for site in sites:
        Thread(target=get_votes, args=(site,)).start()
```

----------------------------------------

TITLE: Drawing Star Shape Loop - Turtle Python
DESCRIPTION: Draws the outline of a star shape using a `while` loop. It moves forward and turns left repeatedly, breaking the loop when the turtle returns close to its starting position (checked with `abs(pos()) < 1`).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_10

LANGUAGE: Python
CODE:
```
while True:
    forward(200)
    left(170)
    if abs(pos()) < 1:
        break
```

----------------------------------------

TITLE: Python Callable Function Usage
DESCRIPTION: Shows the restored callable() built-in function for checking if objects are callable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
>>> callable(max)
True
>>> callable(20)
False
```

----------------------------------------

TITLE: Mixed Type Operations in Python
DESCRIPTION: This snippet shows how Python handles operations with mixed type operands, converting integers to floating-point when necessary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/introduction.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> 4 * 3.75 - 1
14.0
```

----------------------------------------

TITLE: UserDict Class Definition
DESCRIPTION: The UserDict class acts as a wrapper around dictionary objects, allowing the user to access the underlying dictionary via the `data` attribute.  If initialdata is provided, :attr:`data` is initialized with its contents. It simulates a dictionary and provides access to the underlying dictionary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```

.. class:: UserDict([initialdata])

    Class that simulates a dictionary.  The instance's contents are kept in a
    regular dictionary, which is accessible via the :attr:`data` attribute of
    :class:`UserDict` instances.  If *initialdata* is provided, :attr:`data` is
    initialized with its contents; note that a reference to *initialdata* will not
    be kept, allowing it to be used for other purposes.

    In addition to supporting the methods and operations of mappings,
    :class:`UserDict` instances provide the following attribute:

    .. attribute:: data

        A real dictionary used to store the contents of the :class:`UserDict`
        class.

```

----------------------------------------

TITLE: Creating a Priority Queue with a Dataclass Wrapper in Python
DESCRIPTION: This example shows how to create a priority queue using a dataclass wrapper that compares only the priority number and ignores the data item itself. The dataclass is configured with 'order=True' to enable comparison operators.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/queue.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from dataclasses import dataclass, field
from typing import Any

@dataclass(order=True)
class PrioritizedItem:
    priority: int
    item: Any=field(compare=False)
```

----------------------------------------

TITLE: Building Python Objects: Py_BuildValue C API
DESCRIPTION: Creates a new Python object (or a tuple if the format string has multiple units) from C values based on a format string, similar to those used by PyArg_Parse*. Returns the newly created Python object on success or NULL on error, raising an exception.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/arg.rst#_snippet_28

LANGUAGE: C
CODE:
```
PyObject* Py_BuildValue(const char *format, ...)
```

----------------------------------------

TITLE: Allowing assignment expressions in set literals and comprehensions
DESCRIPTION: Implements support for assignment expressions (walrus operator) in set literals and set comprehensions as per PEP 572. This allows for more expressive set creation.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a3.rst#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
{(x := i*2) for i in range(5)}
{y := 1, y := 2, y := 3}
```

----------------------------------------

TITLE: Converting memoryview to list with tolist method
DESCRIPTION: Examples showing how tolist() converts memoryview data to Python lists, supporting both integer bytes and floating-point values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_76

LANGUAGE: python
CODE:
```
memoryview(b'abc').tolist()
[97, 98, 99]
import array
a = array.array('d', [1.1, 2.2, 3.3])
m = memoryview(a)
m.tolist()
[1.1, 2.2, 3.3]
```

----------------------------------------

TITLE: Using splitext() Function with Leading Periods
DESCRIPTION: Illustrates how splitext() handles filenames that begin with periods, treating leading periods as part of the root name rather than extensions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
>>> splitext('.cshrc')
('.cshrc', '')
>>> splitext('/foo/....jpg')
('/foo/....jpg', '')
```

----------------------------------------

TITLE: Executing Python code from a file using run_path function
DESCRIPTION: The run_path function executes the code at a specified filesystem location and returns the resulting module's globals dictionary. It can handle Python source files, compiled bytecode files, or valid sys.path entries containing a __main__ module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/runpy.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
run_path(path_name, init_globals=None, run_name=None)
```

----------------------------------------

TITLE: Working with Non-Byte Format Memory Views in Python
DESCRIPTION: Shows how to create and manipulate a memoryview with a non-byte format using array.array as the source object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_68

LANGUAGE: python
CODE:
```
>>> import array
>>> a = array.array('l', [-11111111, 22222222, -33333333, 44444444])
>>> m = memoryview(a)
>>> m[0]
-11111111
>>> m[-1]
44444444
>>> m[::2].tolist()
[-11111111, -33333333]
```

----------------------------------------

TITLE: Defining Closure Variables in Python
DESCRIPTION: This example demonstrates how closure variables are defined and used in nested functions. It shows the use of the 'nonlocal' keyword to allow write access to a variable from an outer scope.
SOURCE: https://github.com/python/cpython/blob/main/Doc/glossary.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
def outer():
    x = 0
    def inner():
        nonlocal x
        x += 1
        print(x)
    return inner
```

----------------------------------------

TITLE: Streaming JSON Encoding
DESCRIPTION: This snippet describes the iterencode method, which encodes a given Python object and yields each string representation as it becomes available, useful for handling large data sets without consuming too much memory.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/json.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
for chunk in json.JSONEncoder().iterencode(bigobject):
    mysocket.write(chunk)
```

----------------------------------------

TITLE: Partial Date Mocking with Side Effect
DESCRIPTION: Shows how to mock datetime.date with a side effect to allow constructor calls while controlling the today() method return value
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
>>> from datetime import date
>>> with patch('mymodule.date') as mock_date:
...     mock_date.today.return_value = date(2010, 10, 8)
...     mock_date.side_effect = lambda *args, **kw: date(*args, **kw)
...
...     assert mymodule.date.today() == date(2010, 10, 8)
...     assert mymodule.date(2009, 6, 8) == date(2009, 6, 8)
```

----------------------------------------

TITLE: Creating URL request objects in Python
DESCRIPTION: This class represents an abstraction of a URL request. It allows specification of URL, data, headers, and other request parameters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
Request(url, data=None, headers={}, origin_req_host=None, unverifiable=False, method=None)
```

----------------------------------------

TITLE: Modifying Email Subject in Python
DESCRIPTION: Demonstrates how to delete an existing subject header and set a new one in a Python email message object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.message.rst#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
del msg['subject']
msg['subject'] = 'Python roolz!'
```

----------------------------------------

TITLE: Context manager implementation for cProfile.Profile
DESCRIPTION: As of Python 3.8, the cProfile.Profile class can be used as a context manager, allowing for profiling specific code blocks using a with statement.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_34

LANGUAGE: python
CODE:
```
with cProfile.Profile() as profiler:
    # Code to be profiled
    pass
```

----------------------------------------

TITLE: Returning a Value Using Py_BuildValue in C
DESCRIPTION: This snippet demonstrates how to return a value from a Python C extension using the Py_BuildValue function. It is necessary to include the Python.h header when creating C extensions. The function defines how to package the return value before sending it back to Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/windows.rst#2025-04-21_snippet_3

LANGUAGE: C
CODE:
```
return Py_BuildValue("");
```

----------------------------------------

TITLE: Customizing Enum String Representation - Python
DESCRIPTION: This snippet shows how to override the __repr__ method in an Enum class to customize the string representation of its members.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/enum.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
>>> class OtherStyle(Enum):
...     ALTERNATE = auto()
...     OTHER = auto()
...     SOMETHING_ELSE = auto()
...     def __repr__(self):
...         cls_name = self.__class__.__name__
...         return f'{cls_name}.{self.name}'
...
>>> OtherStyle.ALTERNATE, str(OtherStyle.ALTERNATE), f"{OtherStyle.ALTERNATE}"
(OtherStyle.ALTERNATE, 'OtherStyle.ALTERNATE', 'OtherStyle.ALTERNATE')
```

----------------------------------------

TITLE: Casting memoryview between different data formats
DESCRIPTION: Examples demonstrating how to cast memoryviews between different formats and shapes, showing 1D->1D, 1D->multidimensional, and format conversions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_80

LANGUAGE: python
CODE:
```
import array
a = array.array('l', [1,2,3])
x = memoryview(a)
x.format
'l'
x.itemsize
8
len(x)
3
x.nbytes
24
y = x.cast('B')
y.format
'B'
y.itemsize
1
len(y)
24
y.nbytes
24
```

----------------------------------------

TITLE: Trapping FloatOperation in Python Decimal
DESCRIPTION: Shows how to enable the `FloatOperation` trap in the decimal context, causing exceptions when `Decimal` interacts implicitly with native `float` types (e.g., construction or comparison), except for exact equality comparisons.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_2

LANGUAGE: python
CODE:
```
>>> c = getcontext()
>>> c.traps[FloatOperation] = True
>>> Decimal(3.14)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
decimal.FloatOperation: [<class 'decimal.FloatOperation'>]
>>> Decimal('3.5') < 3.7
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
decimal.FloatOperation: [<class 'decimal.FloatOperation'>]
>>> Decimal('3.5') == 3.5
True
```

----------------------------------------

TITLE: Using SSL Context with SMTP
DESCRIPTION: Shows usage of SSLContext parameter with SMTP_SSL constructor and starttls method for controlling secure channel parameters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.3.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
SMTP_SSL(context=sslContext)
SMTP.starttls(context=sslContext)
```

----------------------------------------

TITLE: Using RawDescriptionHelpFormatter in ArgumentParser in Python
DESCRIPTION: Shows how to use `argparse.RawDescriptionHelpFormatter` to prevent `ArgumentParser` from line-wrapping the description and epilog, preserving the exact formatting provided. This is useful for pre-formatted text.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_9

LANGUAGE: Python
CODE:
```
>>> parser = argparse.ArgumentParser(
...     prog='PROG',
...     formatter_class=argparse.RawDescriptionHelpFormatter,
...     description=textwrap.dedent('''\
...         Please do not mess up this text!
...         --------------------------------
...             I have indented it
...             exactly the way
...             I want it
...         '''))
>>> parser.print_help()
usage: PROG [-h]

Please do not mess up this text!
--------------------------------
   I have indented it
   exactly the way
   I want it

options:
 -h, --help  show this help message and exit
```

----------------------------------------

TITLE: Dispatching on Different Types with singledispatch
DESCRIPTION: Shows how a generic function dispatches to the appropriate implementation based on the type of the first argument. It demonstrates the function calls with various types and verbose flags.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
>>> fun("Hello, world.")
Hello, world.
>>> fun("test.", verbose=True)
Let me just say, test.
>>> fun(42, verbose=True)
Strength in numbers, eh? 42
>>> fun(['spam', 'spam', 'eggs', 'spam'], verbose=True)
Enumerate this:
0 spam
1 spam
2 eggs
3 spam
>>> fun(None)
Nothing.
>>> fun(1.23)
0.615
```

----------------------------------------

TITLE: Creating Custom Abstract Base Class
DESCRIPTION: Shows how to create a custom Drawable ABC with abstract and concrete methods using the abc module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
from abc import ABCMeta, abstractmethod

class Drawable():
    __metaclass__ = ABCMeta

    @abstractmethod
    def draw(self, x, y, scale=1.0):
        pass

    def draw_doubled(self, x, y):
        self.draw(x, y, scale=2.0)


class Square(Drawable):
    def draw(self, x, y, scale):
        ...
```

----------------------------------------

TITLE: Executing a Python module using run_module function
DESCRIPTION: The run_module function executes the code of a specified module and returns the resulting module's globals dictionary. It locates the module using the standard import mechanism and executes it in a fresh namespace.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/runpy.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
run_module(mod_name, init_globals=None, run_name=None, alter_sys=False)
```

----------------------------------------

TITLE: Implementing pass Statement in Python
DESCRIPTION: This snippet shows how to use the pass statement as a placeholder in loops, classes, and functions when no action is required.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
>>> while True:
...     pass  # Busy-wait for keyboard interrupt (Ctrl+C)
...

>>> class MyEmptyClass:
...     pass
...

>>> def initlog(*args):
...     pass   # Remember to implement this!
...
```

----------------------------------------

TITLE: Convert set types into sorted lists before sorting
DESCRIPTION: This snippet demonstrates converting set types into sorted lists before sorting. The `map` function applies the `sorted` function to each set in the input data, converting them to lists with deterministic order, which are then sorted. This is necessary because the order of elements in a set is not guaranteed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/sorting.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```

>>> data = [{'a', 'b', 'c'}, {'b', 'c', 'd'}]
>>> sorted(map(sorted, data))
[['a', 'b', 'c'], ['b', 'c', 'd']]

```

----------------------------------------

TITLE: Mocking Generator Method in Python
DESCRIPTION: Demonstrates how to create a mock for a generator method and configure its return values
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
>>> class Foo:
...     def iter(self):
...         for i in [1, 2, 3]:
...             yield i
...
>>> foo = Foo()
>>> list(foo.iter())
[1, 2, 3]

>>> mock_foo = MagicMock()
>>> mock_foo.iter.return_value = iter([1, 2, 3])
>>> list(mock_foo.iter())
[1, 2, 3]
```

----------------------------------------

TITLE: Performing Arithmetic Operations on IPv4 Addresses
DESCRIPTION: Shows how to perform addition and subtraction operations on IPv4 address objects with integers.  Requires the `ipaddress` module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ipaddress.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> IPv4Address('127.0.0.2') + 3
IPv4Address('127.0.0.5')
>>> IPv4Address('127.0.0.2') - 3
IPv4Address('126.255.255.255')
>>> IPv4Address('255.255.255.255') + 1
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ipaddress.AddressValueError: 4294967296 (>= 2**32) is not permitted as an IPv4 address
```

----------------------------------------

TITLE: Logger Customization in Python
DESCRIPTION: This snippet illustrates obtaining and using a named logger other than the root logger. It explains the use of the `getLogger(name)` function, which returns a logger for the specified name, creating it if it does not already exist. The code shows logging of informational and critical messages using the returned logger.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.3.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
log = logging.getLogger('server')
 ...
log.info('Listening on port %i', port)
 ...
log.critical('Disk full')
 ...
```

----------------------------------------

TITLE: Defining TypedDict with total=False
DESCRIPTION: Demonstrates how to define a `TypedDict` where all keys are non-required by default using the `total=False` argument. Both class-based and alternative dictionary syntax are shown.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_155

LANGUAGE: python
CODE:
```
class Point2D(TypedDict, total=False):
    x: int
    y: int
```

LANGUAGE: python
CODE:
```
Point2D = TypedDict('Point2D', {'x': int, 'y': int}, total=False)
```

----------------------------------------

TITLE: Creating Spooled Temporary Files in Python
DESCRIPTION: Creates a file-like object that spools data in memory until a size threshold is reached, then writes to disk. Offers a rollover method to force writing to disk. Supports both binary and text modes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tempfile.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
SpooledTemporaryFile(max_size=0, mode='w+b', buffering=-1, encoding=None, newline=None, suffix=None, prefix=None, dir=None, *, errors=None)
```

----------------------------------------

TITLE: Decimal Precision Control Example
DESCRIPTION: This example shows how to control the precision of decimal arithmetic using `getcontext().prec`. This enables you to specify the number of significant digits for calculations, ensuring accurate results for high-precision requirements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib2.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
>>> getcontext().prec = 36
>>> Decimal(1) / Decimal(7)
Decimal('0.142857142857142857142857142857142857')
```

----------------------------------------

TITLE: Demonstrating Positional Arguments in Python
DESCRIPTION: Example showing two ways to pass positional arguments to the complex() function using both direct values and tuple unpacking.
SOURCE: https://github.com/python/cpython/blob/main/Doc/glossary.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
complex(3, 5)
complex(*(3, 5))
```

----------------------------------------

TITLE: Parsing into an Existing Object with argparse (Python)
DESCRIPTION: Demonstrates how to use the namespace keyword argument in ArgumentParser.parse_args to populate the attributes of an already existing object instead of creating a new Namespace object. This allows integrating parsed arguments into custom class instances.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_74

LANGUAGE: python
CODE:
```
class C:
    pass

c = C()
parser = argparse.ArgumentParser()
parser.add_argument('--foo')
parser.parse_args(args=['--foo', 'BAR'], namespace=c)
c.foo
```

----------------------------------------

TITLE: Logging Output Format Example
DESCRIPTION: Shows the formatted output of a log message with custom attributes including timestamp, client IP, username and message.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.rst#2025-04-21_snippet_3

LANGUAGE: none
CODE:
```
2006-02-08 22:20:02,165 192.168.0.1 fbloggs  Protocol problem: connection reset
```

----------------------------------------

TITLE: Nested Repetition in Regular Expressions
DESCRIPTION: Example of how to nest repetition operators in regular expressions using parentheses to avoid ambiguity with non-greedy modifiers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
(?:a{6})*  # Matches any multiple of six 'a' characters
```

----------------------------------------

TITLE: Basic Logging Functionality in Python - Python
DESCRIPTION: This snippet demonstrates basic logging functionality using the `logging` module in Python. It shows how to log messages at different severity levels, including debug, info, warning, error, and critical.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.3.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
import logging

logging.debug('Debugging information')
logging.info('Informational message')
logging.warning('Warning:config file %s not found', 'server.conf')
logging.error('Error occurred')
logging.critical('Critical error -- shutting down')
```

----------------------------------------

TITLE: Python Encoding Declaration with Shebang
DESCRIPTION: Example of declaring encoding in a Python file that starts with a UNIX shebang line.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/interpreter.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
#!/usr/bin/env python3
# -*- coding: cp1252 -*-
```

----------------------------------------

TITLE: Creating a Simple Attribute-Setting Decorator in Python
DESCRIPTION: Defines a simple decorator function that sets an attribute on the decorated function. This demonstrates how decorators can modify or add to the function object they decorate.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
>>> def deco(func):
...    func.attr = 'decorated'
...    return func
...
>>> @deco
... def f(): pass
...
>>> f
<function f at 0x402ef0d4>
>>> f.attr
'decorated'
>>>
```

----------------------------------------

TITLE: Implementing a Database Transaction Context Manager in Python
DESCRIPTION: This snippet demonstrates how to implement a context manager for database transactions using a class with __enter__ and __exit__ methods. It handles committing or rolling back the transaction based on whether an exception occurred.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_15

LANGUAGE: Python
CODE:
```
class DatabaseConnection:
    ...
    def __exit__ (self, type, value, tb):
        if tb is None:
            # No exception, so commit
            self.commit()
        else:
            # Exception occurred, so rollback.
            self.rollback()
            # return False
```

----------------------------------------

TITLE: Hashing with BLAKE2b
DESCRIPTION: This example demonstrates the basic usage of the BLAKE2b hash function. It initializes a BLAKE2b object, updates it with data, and retrieves the hexadecimal representation of the hash.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/hashlib.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> from hashlib import blake2b
>>> h = blake2b()
>>> h.update(b'Hello world')
>>> h.hexdigest()
'6ff843ba685842aa82031d3f53c48b66326df7639a63d128974c5c14f31a0f33343a8c65551134ed1ae0f2b0dd2bb495dc81039e3eeb0aa1bb0388bbeac29183'

```

----------------------------------------

TITLE: New socket.sendfile() method in Python
DESCRIPTION: Adds a new socket.sendfile() method allowing a file to be sent over a socket using high-performance os.sendfile() on UNIX systems. This is a performance optimization for sending files through sockets.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.5.0a1.rst#2025-04-21_snippet_5



----------------------------------------

TITLE: Function Definition for reload Module in Python
DESCRIPTION: Facilitates reloading a pre-imported module, useful for testing changes without restarting the interpreter. While it recompiles module code, it preserves original module properties unless redefined in updated code. It's advised against reloading built-in or dynamically loaded modules due to potential instability.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
.. function:: reload(module)

   Reload a previously imported *module*.  The argument must be a module object,
   so it must have been successfully imported before.
```

----------------------------------------

TITLE: Setting File Descriptor Blocking Mode (Python)
DESCRIPTION: The set_blocking() function sets the blocking mode of a specified file descriptor. It sets the O_NONBLOCK flag if blocking is False, and clears it otherwise. This function is available on Unix and Windows (limited to pipes on Windows).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
set_blocking(fd, blocking, /)
```

----------------------------------------

TITLE: Using SSLContext with urllib.request.urlopen()
DESCRIPTION: The urlopen() function in urllib.request now accepts an ssl.SSLContext object as a context parameter, which will be used for HTTPS connections. This provides more control over SSL/TLS settings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_34

LANGUAGE: python
CODE:
```
import ssl
import urllib.request

context = ssl.create_default_context()
response = urllib.request.urlopen(url, context=context)
```

----------------------------------------

TITLE: Nanosecond Resolution Time Functions in Python
DESCRIPTION: The time module gains six new functions that provide nanosecond resolution. These functions enable precise time measurements using various system clocks and performance counters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
time
----

:pep:`564` adds six new functions with nanosecond resolution to the
:mod:`time` module:

* :func:`time.clock_gettime_ns`
* :func:`time.clock_settime_ns`
* :func:`time.monotonic_ns`
* :func:`time.perf_counter_ns`
* :func:`time.process_time_ns`
* :func:`time.time_ns`
```

----------------------------------------

TITLE: Deprecated Parameter in shutil.rmtree (Python)
DESCRIPTION: The 'onerror' parameter of the shutil.rmtree function is deprecated in Python 3.12. Users should use the 'onexc' parameter instead for handling exceptions during the removal process.
SOURCE: https://github.com/python/cpython/blob/main/Doc/deprecations/pending-removal-in-future.rst#_snippet_12

LANGUAGE: Python
CODE:
```
shutil.rmtree
```

----------------------------------------

TITLE: Arithmetic with Context Precision and Rounding in Python Decimal
DESCRIPTION: Illustrates how the context's precision and rounding settings apply during arithmetic operations between `Decimal` instances, affecting the result, while the initial `Decimal` creation retains full input precision.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_3

LANGUAGE: python
CODE:
```
>>> getcontext().prec = 6
>>> Decimal('3.0')
Decimal('3.0')
>>> Decimal('3.1415926535')
Decimal('3.1415926535')
>>> Decimal('3.1415926535') + Decimal('2.7182818285')
Decimal('5.85987')
>>> getcontext().rounding = ROUND_UP
>>> Decimal('3.1415926535') + Decimal('2.7182818285')
Decimal('5.85988')
```

----------------------------------------

TITLE: Creating a Listener and Sending Data in Python
DESCRIPTION: This snippet demonstrates creating a listener, accepting a connection, and sending various data types to the client. It uses the multiprocessing.connection module and requires an authentication key.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_42

LANGUAGE: python
CODE:
```
from multiprocessing.connection import Listener
from array import array

address = ('localhost', 6000)     # family is deduced to be 'AF_INET'

with Listener(address, authkey=b'secret password') as listener:
    with listener.accept() as conn:
        print('connection accepted from', listener.last_accepted)

        conn.send([2.25, None, 'junk', float])

        conn.send_bytes(b'hello')

        conn.send_bytes(array('i', [42, 1729]))
```

----------------------------------------

TITLE: Setting Breakpoint Condition - Pdb - Python
DESCRIPTION: Sets or removes a condition for a breakpoint. The condition is a Python expression that must evaluate to true for the breakpoint to be honored. If the condition is absent, any existing condition is removed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_14



----------------------------------------

TITLE: Example usage of namely module
DESCRIPTION: This script demonstrates how to use the `print_user_name` function from the `namely` module. It imports the necessary modules and defines a `main` function that attempts to call `print_user_name`. A try-except block catches the ValueError raised if `my_name` is not defined, returning the error message. The script then exits with a status code based on whether an error occurred.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/__main__.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
import sys

from namely import print_user_name

# my_name = \"Dinsdale\"

def main():
    try:
        print_user_name()
    except ValueError as ve:
        return str(ve)

if __name__ == "__main__":
    sys.exit(main())
```

----------------------------------------

TITLE: Multiple Inheritance Implementation in Python
DESCRIPTION: Shows how to implement multiple inheritance by deriving a class from multiple base classes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/classes.rst#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
class DerivedClassName(Base1, Base2, Base3):
    <statement-1>
    .
    .
    .
    <statement-N>
```

----------------------------------------

TITLE: Clearing Context Flags and Checking Results (Python)
DESCRIPTION: Demonstrates how to clear exception flags on the current context using `clear_flags()` before performing a calculation. After the calculation, `getcontext()` is used to show that flags like `Inexact` and `Rounded` have been set due to the operation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_11

LANGUAGE: python
CODE:
```
setcontext(ExtendedContext)
getcontext().clear_flags()
Decimal(355) / Decimal(113)
getcontext()
```

----------------------------------------

TITLE: Accessing Command Line Flags with sys.flags
DESCRIPTION: The sys.flags named tuple provides access to the status of various command line flags used when starting the Python interpreter. Each flag is accessible as an attribute of the flags object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sys.rst#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
sys.flags.debug
sys.flags.inspect
sys.flags.interactive
# ... (other flag attributes)
```

----------------------------------------

TITLE: TempDir Class Implementation
DESCRIPTION: Example class implementing temporary directory management using __del__ method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/weakref.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
class TempDir:
    def __init__(self):
        self.name = tempfile.mkdtemp()

    def remove(self):
        if self.name is not None:
            shutil.rmtree(self.name)
            self.name = None

    @property
    def removed(self):
        return self.name is None

    def __del__(self):
```

----------------------------------------

TITLE: Formatting Percentage Values in Python
DESCRIPTION: Shows how to format a floating-point number as a percentage string using the %.2f format specifier within str.format(), specifying two decimal places. Requires a numerical input representing the fraction.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/string.rst#_snippet_11

LANGUAGE: Python
CODE:
```
>>> points = 19
>>> total = 22
>>> 'Correct answers: {:.2%}'.format(points/total)
'Correct answers: 86.36%'
```

----------------------------------------

TITLE: Reentrant Context Manager Example
DESCRIPTION: Demonstrates a reentrant context manager using redirect_stdout, which can be nested and used multiple times
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextlib.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
from contextlib import redirect_stdout
from io import StringIO

stream = StringIO()
write_to_stream = redirect_stdout(stream)

with write_to_stream:
    print("This is written to the stream rather than stdout")
    with write_to_stream:
        print("This is also written to the stream")
```

----------------------------------------

TITLE: Creating a Custom Filter in Python Logging
DESCRIPTION: This Python function generates a filter that allows only log records at or below the specified severity level to be processed. It's useful for controlling the output of loggers based on severity levels.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
def filter_maker(level):
    level = getattr(logging, level)

    def filter(record):
        return record.levelno <= level

    return filter
```

----------------------------------------

TITLE: Translating bytes with deletion in Python
DESCRIPTION: Demonstrates using the translate() method with the delete parameter to remove specific characters from a bytes object. In this example, all vowels are removed from the text.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_45

LANGUAGE: python
CODE:
```
>>> b'read this short text'.translate(None, b'aeiou')
b'rd ths shrt txt'
```

----------------------------------------

TITLE: Setting Unix Script Permissions
DESCRIPTION: Shell command to make a Python script executable on Unix-like systems using chmod.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/appendix.rst#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
$ chmod +x myscript.py
```

----------------------------------------

TITLE: File Open Function Definition
DESCRIPTION: Function to open a file with specified flags and mode. Returns a file descriptor. Supports directory descriptor relative paths and binary mode on Windows.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_20

LANGUAGE: Python
CODE:
```
open(path, flags, mode=0o777, *, dir_fd=None)
```

----------------------------------------

TITLE: quote_from_bytes Function Definition
DESCRIPTION: The quote_from_bytes function takes a bytes object and replaces special characters using %{xx} escape.  It is similar to quote, but operates on bytes objects instead of strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.parse.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
.. function:: quote_from_bytes(bytes, safe='/')

```

----------------------------------------

TITLE: Using a Custom Iterator in Python
DESCRIPTION: This example demonstrates how to use the custom Reverse iterator class to iterate over a string in reverse order.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/classes.rst#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
>>> rev = Reverse('spam')
>>> iter(rev)
<__main__.Reverse object at 0x00A1DB50>
>>> for char in rev:
...     print(char)
...
m
a
p
s
```

----------------------------------------

TITLE: Casting memoryview from bytes to characters
DESCRIPTION: Example showing how to cast a memoryview from unsigned bytes format to character format, enabling character-based modifications.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_81

LANGUAGE: python
CODE:
```
b = bytearray(b'zyz')
x = memoryview(b)
x[0] = b'a'
Traceback (most recent call last):
  ...
TypeError: memoryview: invalid type for format 'B'
y = x.cast('c')
y[0] = b'a'
b
bytearray(b'ayz')
```

----------------------------------------

TITLE: Creating Diff-Like Utility with Difflib
DESCRIPTION: Example implementation of a command-line diff utility using Python's difflib module to compare text files or sequences
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/difflib.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
../includes/diff.py
```

----------------------------------------

TITLE: Adding Literal to typing Module
DESCRIPTION: Implementation of PEP 586 by adding Literal to the typing module for specifying literal types.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0b1.rst#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
Literal
```

----------------------------------------

TITLE: Using textwrap.dedent() in Python
DESCRIPTION: Shows how to use the textwrap.dedent() function to remove common leading whitespace from every line in a text string.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/textwrap.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def test():
    # end first line with \ to avoid the empty line!
    s = '''\
    hello
      world
    '''
    print(repr(s))          # prints '    hello\n      world\n    '
    print(repr(dedent(s)))  # prints 'hello\n  world\n'
```

----------------------------------------

TITLE: Pushing Item onto Heap - Python
DESCRIPTION: The `heappush` function adds an item to the heap, maintaining the heap invariant. It is essential for ensuring the structure of the heap is valid after adding a new element.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/heapq.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
def heappush(heap, item):
    """
    Push the value *item* onto the *heap*, maintaining the heap invariant.
    """
```

----------------------------------------

TITLE: Flag Class Implementation in Python
DESCRIPTION: Shows Flag class usage with auto-value generation and bitwise operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
>>> from enum import Flag, auto
>>> class Color(Flag):
...     RED = auto()
...     BLUE = auto()
...     GREEN = auto()
...
>>> Color.RED & Color.GREEN
<Color: 0>
>>> bool(Color.RED & Color.GREEN)
False
```

----------------------------------------

TITLE: Using Context Manager with DOM Parsing
DESCRIPTION: Demonstrates using a with statement for automatic unlinking of DOM objects when they are no longer needed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.dom.minidom.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
with xml.dom.minidom.parse(datasource) as dom:
    ... # Work with dom.
```

----------------------------------------

TITLE: Customizing Subclass Creation with __init_subclass__
DESCRIPTION: Demonstrates PEP 487's feature for customizing subclass creation without using metaclasses by implementing the __init_subclass__ classmethod, which is called whenever a new subclass is created.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.6.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
class PluginBase:
    subclasses = []

    def __init_subclass__(cls, **kwargs):
        super().__init_subclass__(**kwargs)
        cls.subclasses.append(cls)

class Plugin1(PluginBase):
    pass

class Plugin2(PluginBase):
    pass
```

----------------------------------------

TITLE: Address Exclusion in Networks with ip_network in Python
DESCRIPTION: Illustrates the `address_exclude()` method for computing networks by removing a specified network from a larger one using `ip_network`. Dependencies: `ip_network` from the `ipaddress` module. It returns an iterator of network objects and raises a `ValueError` if the network is not fully contained in the larger network. Inputs: Two networks, one larger and one to be excluded. Outputs: Remaining networks after exclusion.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ipaddress.rst#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
n1 = ip_network('192.0.2.0/28')
n2 = ip_network('192.0.2.1/32')
list(n1.address_exclude(n2))  #doctest: +NORMALIZE_WHITESPACE
[IPv4Network('192.0.2.8/29'), IPv4Network('192.0.2.4/30'),
 IPv4Network('192.0.2.2/31'), IPv4Network('192.0.2.0/32')]
```

----------------------------------------

TITLE: Adding warnings to UTC-related datetime methods
DESCRIPTION: Adds warnings to datetime.utctimetuple(), datetime.utcnow(), and datetime.utcfromtimestamp() methods.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.9.0a1.rst#2025-04-21_snippet_49

LANGUAGE: Python
CODE:
```
datetime.utctimetuple()
```

LANGUAGE: Python
CODE:
```
datetime.utcnow()
```

LANGUAGE: Python
CODE:
```
datetime.utcfromtimestamp()
```

----------------------------------------

TITLE: Defining Comprehension Syntax in Python
DESCRIPTION: This snippet defines the syntax for comprehensions in Python, including the general structure and the syntax for 'for' and 'if' clauses within comprehensions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/expressions.rst#2025-04-21_snippet_2

LANGUAGE: bnf
CODE:
```
comprehension: assignment_expression comp_for
comp_for: ["async"] "for" target_list "in" or_test [comp_iter]
comp_iter: comp_for | comp_if
comp_if: "if" or_test [comp_iter]
```

----------------------------------------

TITLE: Annotating Simple Generator as Iterator
DESCRIPTION: Annotates a simple Python generator function that only yields values as an `Iterator[YieldType]`, which is a valid alternative when `SendType` and `ReturnType` are not relevant.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_22

LANGUAGE: python
CODE:
```
def infinite_stream(start: int) -> Iterator[int]:
    while True:
        yield start
        start += 1
```

----------------------------------------

TITLE: Unpacking Type Aliases
DESCRIPTION: Demonstrates using the star unpacking syntax (*Alias) with type aliases, showing that it is equivalent to using Unpack[Alias] and how it appears in the evaluated value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_133

LANGUAGE: python
CODE:
```
>>> type Alias = tuple[int, str]
>>> type Unpacked = tuple[bool, *Alias]
>>> Unpacked.__value__
tuple[bool, typing.Unpack[Alias]]
```

----------------------------------------

TITLE: Accurate Floating-Point Sum in Python
DESCRIPTION: This function returns an accurate sum of values from an iterable by tracking intermediate partial sums to avoid loss of precision, critical in financial and scientific calculations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/math.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
.. function:: fsum(iterable)

   Return an accurate floating-point sum of values in the iterable.  Avoids
   loss of precision by tracking multiple intermediate partial sums.
```

----------------------------------------

TITLE: Demonstrating Left-to-Right Assignment in Python
DESCRIPTION: This snippet illustrates the left-to-right evaluation order in a tuple assignment where the target list contains variables that depend on each other. The assignment updates variables sequentially from left to right using the latest values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/simple_stmts.rst#_snippet_1

LANGUAGE: Python
CODE:
```
x = [0, 1]
i = 0
i, x[i] = 1, 2         # i is updated, then x[i] is updated
print(x)
```

----------------------------------------

TITLE: Mock Wrapping and Instance Creation - Python
DESCRIPTION: Explains that creating an instance from a mock that wraps an object will return the real instance of the wrapped object. Any required arguments for the wrapped object must be provided.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_67

LANGUAGE: python
CODE:
```
>>> order_mock_instance = order_mock()
>>> isinstance(order_mock_instance, Order)
True
>>> order_mock_instance.get_value()
'third'

>>> order_mock.get_value.return_value = DEFAULT
>>> order_mock.get_value()
'third'

>>> order_mock.get_value.return_value = "second"
>>> order_mock.get_value()
'second'
```

----------------------------------------

TITLE: String zfill() Method Usage in Python
DESCRIPTION: Shows the usage of the new zfill() string method, which pads a numeric string with zeros on the left until it reaches the specified width.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.3.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
>>> '45'.zfill(4)
'0045'
>>> '12345'.zfill(4)
'12345'
>>> 'goofy'.zfill(6)
'0goofy'
```

----------------------------------------

TITLE: Defining Custom Methods in Python Enum
DESCRIPTION: Shows how to define custom methods and special methods in an Enum class, including instance methods, string representation, and class methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
>>> class Mood(Enum):
...     FUNKY = 1
...     HAPPY = 3
...
...     def describe(self):
...         # self is the member here
...         return self.name, self.value
...
...     def __str__(self):
...         return 'my custom str! {0}'.format(self.value)
...
...     @classmethod
...     def favorite_mood(cls):
...         # cls here is the enumeration
...         return cls.HAPPY
...

>>> Mood.favorite_mood()
<Mood.HAPPY: 3>
>>> Mood.HAPPY.describe()
('HAPPY', 3)
>>> str(Mood.FUNKY)
'my custom str! 1'
```

----------------------------------------

TITLE: Itertools Recipe: quantify function
DESCRIPTION: Function that counts the number of True results from applying a predicate to each item in an iterable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_35

LANGUAGE: python
CODE:
```
def quantify(iterable, predicate=bool):
    "Given a predicate that returns True or False, count the True results."
    return sum(map(predicate, iterable))
```

----------------------------------------

TITLE: Checking File Equivalence with pathlib
DESCRIPTION: The Path.samefile method checks if two paths refer to the same file. This snippet demonstrates its use with pathlib.Path objects and string paths. Ensure to have the pathlib module available.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_23

LANGUAGE: Python
CODE:
```
>>> import pathlib
>>> p1 = pathlib.Path('/etc/hosts')
>>> p2 = pathlib.Path('/etc/../etc/hosts')
>>> p1.samefile(p2)
True
```

----------------------------------------

TITLE: Use Literal Type Alias (Valid) Python
DESCRIPTION: Provides an example of calling a function that accepts a `Literal` type alias, demonstrating a call with a value that conforms to the defined literals.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_70

LANGUAGE: Python
CODE:
```
open_helper('/some/path', 'r')
```

----------------------------------------

TITLE: Registering Fork Callbacks with os.register_at_fork in Python
DESCRIPTION: Registers callables to be executed at different points during process forking: before the fork, after the fork in the parent process, and after the fork in the child process.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_73

LANGUAGE: python
CODE:
```
register_at_fork(*, before=None, after_in_parent=None, after_in_child=None)
```

----------------------------------------

TITLE: Implementing math.comb Function in Python
DESCRIPTION: Implements the math.comb function to calculate binomial coefficients, computing the number of ways to choose k items from n items without repetition and order.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0b1.rst#2025-04-21_snippet_15

LANGUAGE: Python
CODE:
```
math.comb(n, k)
```

----------------------------------------

TITLE: Basic Usage of RobotFileParser Class in Python
DESCRIPTION: This example demonstrates the basic use of the RobotFileParser class from urllib.robotparser to read a robots.txt file, check request rate limits, crawl delay, and determine which URLs can be fetched by a specific user agent.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.robotparser.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> import urllib.robotparser
>>> rp = urllib.robotparser.RobotFileParser()
>>> rp.set_url("http://www.musi-cal.com/robots.txt")
>>> rp.read()
>>> rrate = rp.request_rate("*")
>>> rrate.requests
3
>>> rrate.seconds
20
>>> rp.crawl_delay("*")
6
>>> rp.can_fetch("*", "http://www.musi-cal.com/cgi-bin/search?city=San+Francisco")
False
>>> rp.can_fetch("*", "http://www.musi-cal.com/")
True
```

----------------------------------------

TITLE: Creating Iterators with itertools.count
DESCRIPTION: Examples of using itertools.count() to create infinite sequences of numbers with optional start and step parameters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
itertools.count() =>
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ...
itertools.count(10) =>
  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, ...
itertools.count(10, 5) =>
  10, 15, 20, 25, 30, 35, 40, 45, 50, 55, ...
```

----------------------------------------

TITLE: Adding Cleanup Function in Python unittest
DESCRIPTION: Method to add a cleanup function to be called after tearDown. Functions are called in reverse order (LIFO) and can include arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_28

LANGUAGE: python
CODE:
```
addCleanup(function, /, *args, **kwargs)
```

----------------------------------------

TITLE: Using title() Method with Regular Expression
DESCRIPTION: Demonstrates a more sophisticated title case conversion using regular expressions to handle apostrophes correctly.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_63

LANGUAGE: python
CODE:
```
>>> import re
>>> def titlecase(s):
...     return re.sub(rb"[A-Za-z]+('[A-Za-z]+)?",
...                   lambda mo: mo.group(0)[0:1].upper() +
...                              mo.group(0)[1:].lower(),
...                   s)
...
>>> titlecase(b"they're bill's friends.")
b"They're Bill's Friends."
```

----------------------------------------

TITLE: Using Custom Function as Type Converter in Python argparse
DESCRIPTION: Demonstrates defining a custom function (`hyphenated`) that takes a string and returns a modified string, and then using this function as the `type` argument for an argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_51

LANGUAGE: Python
CODE:
```
>>> def hyphenated(string):
...     return '-'.join([word[:4] for word in string.casefold().split()])
...
>>> parser = argparse.ArgumentParser()
>>> _ = parser.add_argument('short_title', type=hyphenated)
>>> parser.parse_args(['"The Tale of Two Cities"'])
Namespace(short_title='"the-tale-of-two-citi')
```

----------------------------------------

TITLE: Demonstrating Frame Handling without Memory Leaks in Python
DESCRIPTION: This snippet shows how to properly handle frame objects to avoid reference cycles and potential memory leaks when working with the inspect module's currentframe() function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/inspect.rst#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
def handle_stackframe_without_leak():
    frame = inspect.currentframe()
    try:
        # do something with the frame
    finally:
        del frame
```

----------------------------------------

TITLE: Itertools Recipe: unique_everseen function
DESCRIPTION: Function that yields unique elements from an iterable in order, remembering all elements ever seen, with an optional key function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_39

LANGUAGE: python
CODE:
```
def unique_everseen(iterable, key=None):
    "Yield unique elements, preserving order. Remember all elements ever seen."
    # unique_everseen('AAAABBBCCDAABBB') → A B C D
    # unique_everseen('ABBcCAD', str.casefold) → A B c D
    seen = set()
    if key is None:
        for element in filterfalse(seen.__contains__, iterable):
            seen.add(element)
            yield element
    else:
        for element in iterable:
            k = key(element)
            if k not in seen:
                seen.add(k)
                yield element
```

----------------------------------------

TITLE: Filtering Elements with Takewhile
DESCRIPTION: This function filters elements from an iterable based on a predicate, returning elements until the predicate fails.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
.. function:: takewhile(predicate, iterable)

   Make an iterator that returns elements from the *iterable* as long as
   the *predicate* is true.
```

----------------------------------------

TITLE: Defining a Regular Package Structure in Python
DESCRIPTION: This code snippet illustrates the file system layout for a regular package named 'parent' with three subpackages. It demonstrates how Python organizes packages hierarchically using directories and __init__.py files.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/import.rst#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
parent/
    __init__.py
    one/
        __init__.py
    two/
        __init__.py
    three/
        __init__.py
```

----------------------------------------

TITLE: Creating IP Network Objects in Python
DESCRIPTION: Shows how to create IP network objects using CIDR notation and handle network definitions with host bits. Includes examples of strict and non-strict network creation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/ipaddress.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> ipaddress.ip_network('192.0.2.0/24')
IPv4Network('192.0.2.0/24')
>>> ipaddress.ip_network('2001:db8::0/96')
IPv6Network('2001:db8::/96')
>>> ipaddress.ip_network('192.0.2.1/24', strict=False)
IPv4Network('192.0.2.0/24')
```

----------------------------------------

TITLE: Implementing a Custom __repr__ Method for Evaluated String Representation in Python
DESCRIPTION: Shows how to define a custom __repr__ method in a class to provide a string representation that can be evaluated. This enables creating new instances of the same class with the same state.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
class Person:
   def __init__(self, name, age):
      self.name = name
      self.age = age

   def __repr__(self):
      return f"Person('{self.name}', {self.age})"
```

----------------------------------------

TITLE: Function Watcher Callback Type
DESCRIPTION: Defines the type `PyFunction_WatchCallback` of a function watcher callback function. It receives the event, the function object, and the new value (if applicable) as arguments. The callback can inspect but must not modify the function object. It should return 0 on success or -1 if an exception is set.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/function.rst#2025-04-21_snippet_18

LANGUAGE: c
CODE:
```
".. c:type:: int (*PyFunction_WatchCallback)(PyFunction_WatchEvent event, PyFunctionObject *func, PyObject *new_value)

   Type of a function watcher callback function.

   If *event* is ``PyFunction_EVENT_CREATE`` or ``PyFunction_EVENT_DESTROY``
   then *new_value* will be ``NULL``. Otherwise, *new_value* will hold a
   :term:`borrowed reference` to the new value that is about to be stored in
   *func* for the attribute that is being modified.

   The callback may inspect but must not modify *func*; doing so could have
   unpredictable effects, including infinite recursion.

   If *event* is ``PyFunction_EVENT_CREATE``, then the callback is invoked
   after `func` has been fully initialized. Otherwise, the callback is invoked
   before the modification to *func* takes place, so the prior state of *func*
   can be inspected. The runtime is permitted to optimize away the creation of
   function objects when possible. In such cases no event will be emitted.
   Although this creates the possibility of an observable difference of
   runtime behavior depending on optimization decisions, it does not change
   the semantics of the Python code being executed.

   If *event* is ``PyFunction_EVENT_DESTROY``,  Taking a reference in the
   callback to the about-to-be-destroyed function will resurrect it, preventing
   it from being freed at this time. When the resurrected object is destroyed
   later, any watcher callbacks active at that time will be called again.

   If the callback sets an exception, it must return ``-1``; this exception will
   be printed as an unraisable exception using :c:func:`PyErr_WriteUnraisable`.
   Otherwise it should return ``0``.

   There may already be a pending exception set on entry to the callback. In
   this case, the callback should return ``0`` with the same exception still
   set. This means the callback may not call any other API that can set an
   exception unless it saves and clears the exception state first, and restores
   it before returning.

   .. versionadded:: 3.12"
```

----------------------------------------

TITLE: Defining GetSet Property Descriptors for Python Type
DESCRIPTION: Creates property descriptors for controlling attribute access. This structure associates getter and setter functions with the 'first' and 'last' attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/newtypes_tutorial.rst#2025-04-21_snippet_14

LANGUAGE: c
CODE:
```
static PyGetSetDef Custom_getsetters[] = {
    {"first", Custom_getfirst, Custom_setfirst,
     "first name", NULL},
    {"last", Custom_getlast, Custom_setlast,
     "last name", NULL},
    {NULL}  /* Sentinel */
};
```

----------------------------------------

TITLE: File Handling With Context Manager
DESCRIPTION: Shows how to use the with statement for automatic file handling and closure.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
with open('/etc/passwd', 'r') as f:
    for line in f:
        print line
        ... more processing code ...
```

----------------------------------------

TITLE: Reading Binary Data with struct Module in Python
DESCRIPTION: This code snippet demonstrates how to read complex binary data from a file using the struct module. It reads two 2-byte integers and one 4-byte integer in big-endian format.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/library.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import struct

with open(filename, "rb") as f:
    s = f.read(8)
    x, y, z = struct.unpack(">hhl", s)
```

----------------------------------------

TITLE: Setting/Getting Background Color Function (Python)
DESCRIPTION: Demonstrates how to set and retrieve the background color using the derived `bgcolor` function, accepting color strings or RGB tuples.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_114

LANGUAGE: Python
CODE:
```
bgcolor("orange")
bgcolor()
bgcolor(0.5,0,0.5)
bgcolor()
```

----------------------------------------

TITLE: Running an event loop in a separate thread with context manager in Python
DESCRIPTION: Example demonstrating how to create and manage an event loop in a separate thread using a context manager. This allows submission of coroutines from the main thread to the loop running in another thread.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
@contextlib.contextmanager
def loop_in_thread() -> Generator[asyncio.AbstractEventLoop]:
    loop_fut = concurrent.futures.Future[asyncio.AbstractEventLoop]()
    stop_event = asyncio.Event()

    async def main() -> None:
        loop_fut.set_result(asyncio.get_running_loop())
        await stop_event.wait()

    with concurrent.futures.ThreadPoolExecutor(1) as tpe:
        complete_fut = tpe.submit(asyncio.run, main())
        for fut in concurrent.futures.as_completed((loop_fut, complete_fut)):
            if fut is loop_fut:
                loop = loop_fut.result()
                try:
                    yield loop
                finally:
                    loop.call_soon_threadsafe(stop_event.set)
            else:
                fut.result()

# Create a loop in another thread
with loop_in_thread() as loop:
    # Create a coroutine
    coro = asyncio.sleep(1, result=3)

    # Submit the coroutine to a given loop
    future = asyncio.run_coroutine_threadsafe(coro, loop)

    # Wait for the result with an optional timeout argument
    assert future.result(timeout=2) == 3
```

----------------------------------------

TITLE: Defining a Custom Logger Class in Python
DESCRIPTION: Example of creating a custom logger class by inheriting from the current logger class. This pattern allows for extending the logger functionality while preserving customizations already applied by other code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
class MyLogger(logging.getLoggerClass()):
    # ... override behaviour here
```

----------------------------------------

TITLE: Argument Abbreviation (Prefix Matching) in argparse (Python)
DESCRIPTION: Illustrates how argparse allows long options to be abbreviated if the prefix is unambiguous. It shows successful abbreviation for '-bac' and '-bad', and the error that occurs when an abbreviation like '-ba' is ambiguous, matching multiple options ('-bacon', '-badger').
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_71

LANGUAGE: python
CODE:
```
parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('-bacon')
parser.add_argument('-badger')
parser.parse_args('-bac MMM'.split())
parser.parse_args('-bad WOOD'.split())
parser.parse_args('-ba BA'.split())
```

----------------------------------------

TITLE: Demonstrating __class_getitem__ Invocation via Subscription (Python)
DESCRIPTION: This Python interactive console session illustrates that standard library types share 'type' as their metaclass. It then demonstrates that subscribing a class like `list` with a type argument (e.g., `list[int]`) triggers a call to the class's `__class_getitem__` method, as defined for generic type emulation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_17

LANGUAGE: Python
CODE:
```
>>> # list has class "type" as its metaclass, like most classes:
>>> type(list)
<class 'type'>
>>> type(dict) == type(list) == type(tuple) == type(str) == type(bytes)
True
>>> # "list[int]" calls "list.__class_getitem__(int)"
>>> list[int]
```

----------------------------------------

TITLE: Acquiring a Recursive Lock in Python's Multiprocessing Module
DESCRIPTION: This method acquires a recursive lock, either blocking or non-blocking. It supports timeout and allows the same process or thread to acquire it multiple times.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_27

LANGUAGE: python
CODE:
```
def acquire(block=True, timeout=None):
    # Method implementation not shown in the original text
```

----------------------------------------

TITLE: Itertools Recipe: consume function
DESCRIPTION: Function that advances an iterator n steps ahead, or consumes it entirely if n is None, using deque or islice for C-speed operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_33

LANGUAGE: python
CODE:
```
def consume(iterator, n=None):
    "Advance the iterator n-steps ahead. If n is None, consume entirely."
    # Use functions that consume iterators at C speed.
    if n is None:
        deque(iterator, maxlen=0)
    else:
        next(islice(iterator, n, n), None)
```

----------------------------------------

TITLE: Improved IndentationError Messages in Python 3.10
DESCRIPTION: Shows how IndentationError exceptions in Python 3.10 provide more context about the type of block expecting indentation and the location of the statement.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> def foo():
...    if lel:
...    x = 2
  File "<stdin>", line 3
    x = 2
    ^

```

----------------------------------------

TITLE: Using Module __getattr__ for Attribute Customization in Python 3.7
DESCRIPTION: PEP 562 allows defining __getattr__ on modules to handle attribute access when an attribute is not found. This can be useful for implementing module attribute deprecation and lazy loading patterns.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
def __getattr__(name):
    # Called when module attribute is not found
    # Useful for deprecation warnings or lazy loading
    ...

def __dir__():
    # Customize dir() output for the module
    ...
```

----------------------------------------

TITLE: Demonstrating __slots__ Incompatibility with cached_property
DESCRIPTION: Example showing that __slots__ blocks tools like functools.cached_property which require an instance dictionary to function correctly.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
from functools import cached_property

class CP:
    __slots__ = ()                          # Eliminates the instance dict

    @cached_property                        # Requires an instance dict
    def pi(self):
        return 4 * sum((-1.0)**n / (2.0*n + 1.0)
                       for n in reversed(range(100_000)))
```

----------------------------------------

TITLE: Extracting stack trace entries with extract_tb
DESCRIPTION: Returns a StackSummary object containing pre-processed stack trace entries from a traceback object. Useful for custom formatting of stack traces.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
extract_tb(tb, limit=None)
```

----------------------------------------

TITLE: SequenceMatcher Ratio Example
DESCRIPTION: This snippet demonstrates the use of the ratio, quick_ratio, and real_quick_ratio methods of the SequenceMatcher class to compute similarity scores between two strings. It initializes a SequenceMatcher object, then calls each of the ratio methods and prints the results.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/difflib.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> s = SequenceMatcher(None, \"abcd\", \"bcde\")
>>> s.ratio()
0.75
>>> s.quick_ratio()
0.75
>>> s.real_quick_ratio()
1.0
```

----------------------------------------

TITLE: Tokenizing Python Source Code with tokenize() Function
DESCRIPTION: This snippet demonstrates the usage of the tokenize() function to tokenize Python source code. It requires a readline callable and produces 5-tuples containing token information.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tokenize.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
tokenize(readline)
```

----------------------------------------

TITLE: Dictionary Values View Comparison Behavior
DESCRIPTION: Demonstrates that comparing dictionary values views, even with themselves, always returns False. This is an important behavior to note when working with dictionary values views.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_94

LANGUAGE: python
CODE:
```
>>> d = {'a': 1}
>>> d.values() == d.values()
False
```

----------------------------------------

TITLE: Walking Packages using pkgutil
DESCRIPTION: This demonstrates the use of `pkgutil.walk_packages` to recursively yield ModuleInfo objects for all modules on a given path, or all accessible modules if no path is provided. The path should be a list of directories to search within.  An optional `onerror` function can be provided to handle exceptions during package imports.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pkgutil.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
"""# list all modules python can access
walk_packages()

# list all submodules of ctypes
walk_packages(ctypes.__path__, ctypes.__name__ + '.')"""
```

----------------------------------------

TITLE: Deprecating Truth Value Test of xml.etree.ElementTree.Element in Python
DESCRIPTION: Testing the truth value of an xml.etree.ElementTree.Element object now emits a DeprecationWarning. Previously, behavior varied between Python and C implementations. Explicitly check for children or attributes if needed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_38

LANGUAGE: Python
CODE:
```
if element:
```

----------------------------------------

TITLE: Getting Subprocess Return Code from SubprocessTransport in Python
DESCRIPTION: This method returns the subprocess return code as an integer or None if it hasn't returned yet.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
SubprocessTransport.get_returncode()
```

----------------------------------------

TITLE: Creating a Server with Optional Dual-Stack IPv6 (Python)
DESCRIPTION: This snippet demonstrates how to use `socket.create_server` to create a TCP server socket bound to a specific address and port. It includes logic to check for platform support for dual-stack IPv6 using `socket.has_dualstack_ipv6()` and configure the server accordingly. The server is bound to all available interfaces on port 8080.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/socket.rst#_snippet_3

LANGUAGE: python
CODE:
```
import socket

addr = ("", 8080)  # all interfaces, port 8080
if socket.has_dualstack_ipv6():
    s = socket.create_server(addr, family=socket.AF_INET6, dualstack_ipv6=True)
else:
    s = socket.create_server(addr)
```

----------------------------------------

TITLE: Selecting Entry Points by Group (Python)
DESCRIPTION: Demonstrates using the `.select()` method on an `EntryPoints` object. Passing a keyword argument like `group='console_scripts'` filters the collection to return only the entry points belonging to the specified group. This makes it easier to find relevant entry points.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_5

LANGUAGE: Python Console
CODE:
```
>>> scripts = eps.select(group='console_scripts')  # doctest: +SKIP
```

----------------------------------------

TITLE: Compare 's' and 'c' Format Characters in Python struct
DESCRIPTION: Illustrates the difference between the 's' (string) and 'c' (character) format characters when packing byte data using the `struct` module. 'c' packs individual bytes, while 's' packs a sequence of bytes as a single string.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/struct.rst#_snippet_5

LANGUAGE: Python
CODE:
```
pack("@ccc", b'1', b'2', b'3')
b'123'
pack("@3s", b'123')
b'123'
```

----------------------------------------

TITLE: Demonstrating Trigonometric Functions with Special Values in Python
DESCRIPTION: This snippet shows how trigonometric functions (sin, cos, tan, asin, acos, atan) behave with infinity and NaN values.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/mathdata/ieee754.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
sin(INF)
sin(NINF)
sin(NAN)
cos(INF)
cos(NINF)
cos(NAN)
tan(INF)
tan(NINF)
tan(NAN)
tan(PI/2) > 1E10
-tan(-PI/2) > 1E10
tan(PI) < 1E-15
asin(NAN), acos(NAN), atan(NAN)
asin(INF), asin(NINF)
acos(INF), acos(NINF)
equal(atan(INF), PI/2), equal(atan(NINF), -PI/2)
```

----------------------------------------

TITLE: Module Unloading Finalizer using Weakref
DESCRIPTION: Demonstrates registering a finalizer for a module to execute cleanup code when the module is unloaded, utilizing weakref.finalize with sys.modules
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/weakref.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
import weakref, sys
def unloading_module():
    # implicit reference to the module globals from the function body
weakref.finalize(sys.modules[__name__], unloading_module)
```

----------------------------------------

TITLE: Basic HTTP Authentication with Python's urllib
DESCRIPTION: Example demonstrating how to use HTTP Basic Authentication with urllib. It creates an OpenerDirector with HTTPBasicAuthHandler to handle authentication for a specific realm and URI, then installs it globally.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_45

LANGUAGE: python
CODE:
```
import urllib.request
# Create an OpenerDirector with support for Basic HTTP Authentication...
auth_handler = urllib.request.HTTPBasicAuthHandler()
auth_handler.add_password(realm='PDQ Application',
                         uri='https://mahler:8092/site-updates.py',
                         user='klem',
                         passwd='kadidd!ehopper')
opener = urllib.request.build_opener(auth_handler)
# ...and install it globally so it can be used with urlopen.
urllib.request.install_opener(opener)
with urllib.request.urlopen('http://www.example.com/login.html') as f:
   print(f.read().decode('utf-8'))
```

----------------------------------------

TITLE: Selecting Specific Entry Point by Group and Name (Via Select Method, Python)
DESCRIPTION: Provides an alternative method to select a specific entry point by group and name. First, get the full `EntryPoints` collection, then use the `.select()` method on it, providing both `group` and `name` keyword arguments to filter down to the desired entry point(s).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_10

LANGUAGE: Python Console
CODE:
```
>>> (wheel,) = entry_points().select(group='console_scripts', name='wheel')  # doctest: +SKIP
```

----------------------------------------

TITLE: Define Annotated Type Python
DESCRIPTION: Shows the basic syntax for using `typing.Annotated` to add context-specific metadata (`x`) to a type annotation (`T`).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_77

LANGUAGE: Python
CODE:
```
Annotated[T, x]
```

----------------------------------------

TITLE: Python with statement and Generator
DESCRIPTION: This text describes how a generator used directly as a context manager would not work correctly and suggests to wrap it as contextlib.closing(generator) to use within a with statement.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/design.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
contextlib.closing(generator)
```

----------------------------------------

TITLE: Sorting by Filename and Printing init Methods
DESCRIPTION: This code sorts the profiling statistics by filename and then prints only the statistics for methods containing '__init__', typically class initialization methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/profile.rst#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
p.sort_stats(SortKey.FILENAME).print_stats('__init__')
```

----------------------------------------

TITLE: Basic GNU gettext API Usage in Python
DESCRIPTION: Demonstrates typical usage of the GNU gettext API for text translation, including binding a text domain, setting the domain, and creating a translation function alias.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/gettext.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import gettext
gettext.bindtextdomain('myapplication', '/path/to/my/language/directory')
gettext.textdomain('myapplication')
_ = gettext.gettext
# ...
print(_('This is a translatable string.'))
```

----------------------------------------

TITLE: Building XML Documents with SubElement in Python
DESCRIPTION: Demonstrates how to create nested XML elements using the SubElement function from ElementTree. This snippet shows the creation of a simple XML structure with parent and child elements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
>>> a = ET.Element('a')
>>> b = ET.SubElement(a, 'b')
>>> c = ET.SubElement(a, 'c')
>>> d = ET.SubElement(c, 'd')
>>> ET.dump(a)
<a><b /><c><d /></c></a>
```

----------------------------------------

TITLE: Define concatenate function with constrained TypeVar (Python)
DESCRIPTION: Defines a generic Python function `concatenate` using a constrained type variable `A` which can be either `str` or `bytes`. It adds two objects of type `A` together. This function demonstrates the behavior of constrained type variables.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_103

LANGUAGE: Python
CODE:
```
def concatenate[A: (str, bytes)](x: A, y: A) -> A:
    """Add two strings or bytes objects together."""
    return x + y
```

----------------------------------------

TITLE: Defining Module Structure for Python C Extension
DESCRIPTION: This snippet shows how to define the module structure for a Python C extension. It includes the module name, documentation, state size, and method table.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/extending.rst#2025-04-21_snippet_6

LANGUAGE: C
CODE:
```
static struct PyModuleDef spammodule = {
    PyModuleDef_HEAD_INIT,
    "spam",   /* name of module */
    spam_doc, /* module documentation, may be NULL */
    -1,       /* size of per-interpreter state of the module,
                 or -1 if the module keeps state in global variables. */
    SpamMethods
};
```

----------------------------------------

TITLE: Creating Unix Server with asyncio in Python
DESCRIPTION: This method creates a Unix server, similar to create_server but works with the AF_UNIX socket family. It supports various parameters including SSL options and socket cleanup. The path parameter is required unless a sock argument is provided.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
loop.create_unix_server(protocol_factory, path=None, \
                 *, sock=None, backlog=100, ssl=None, \
                 ssl_handshake_timeout=None, \
                 ssl_shutdown_timeout=None, \
                 start_serving=True, cleanup_socket=True)
```

----------------------------------------

TITLE: Creating Heap-Allocated Types in CPython C-API
DESCRIPTION: The function `PyType_FromMetaclass` creates and returns a heap type based on a specification. It utilizes a metaclass to construct the resulting type object and allows optional base classes and module associations. Similar alternative functions like `PyType_FromModuleAndSpec`, `PyType_FromSpecWithBases`, and `PyType_FromSpec` offer variations with different default behaviors, including automatic metaclass derivation and slot initialization.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/type.rst#2025-04-21_snippet_28

LANGUAGE: C
CODE:
```
.. c:function:: PyObject* PyType_FromMetaclass(PyTypeObject *metaclass, PyObject *module, PyType_Spec *spec, PyObject *bases)

   Create and return a :ref:`heap type <heap-types>` from the *spec*
   (see :c:macro:`Py_TPFLAGS_HEAPTYPE`).

   The metaclass *metaclass* is used to construct the resulting type object.
   When *metaclass* is ``NULL``, the metaclass is derived from *bases*
   (or *Py_tp_base[s]* slots if *bases* is ``NULL``, see below).
```

LANGUAGE: C
CODE:
```
.. c:function:: PyObject* PyType_FromModuleAndSpec(PyObject *module, PyType_Spec *spec, PyObject *bases)

   Equivalent to ``PyType_FromMetaclass(NULL, module, spec, bases)``.
```

LANGUAGE: C
CODE:
```
.. c:function:: PyObject* PyType_FromSpecWithBases(PyType_Spec *spec, PyObject *bases)

   Equivalent to ``PyType_FromMetaclass(NULL, NULL, spec, bases)``.
```

LANGUAGE: C
CODE:
```
.. c:function:: PyObject* PyType_FromSpec(PyType_Spec *spec)

   Equivalent to ``PyType_FromMetaclass(NULL, NULL, spec, NULL)``.
```

----------------------------------------

TITLE: Adding statistics.quantiles function in Python
DESCRIPTION: A new quantiles() function has been added to the statistics module to calculate quantiles of a dataset.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0a4.rst#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
from statistics import quantiles

data = [1, 2, 3, 4, 5]
result = quantiles(data)
```

----------------------------------------

TITLE: Implementing chain.from_iterable function in Python
DESCRIPTION: Equivalent implementation of the chain.from_iterable method that creates an iterator from a single iterable of iterables, yielding elements from each nested iterable in sequence.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
def from_iterable(iterables):
    # chain.from_iterable(['ABC', 'DEF']) → A B C D E F
    for iterable in iterables:
        yield from iterable
```

----------------------------------------

TITLE: Inspecting Function Arguments with inspect.getcallargs in Python
DESCRIPTION: This snippet demonstrates how to use the `inspect.getcallargs` function to determine how arguments are mapped to a function's parameters. It takes a callable and its arguments as input and returns a dictionary mapping parameter names to their corresponding values. This function is useful for introspection and understanding function argument binding.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.7.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```

    >>> from inspect import getcallargs
    >>> def f(a, b=1, *pos, **named):
    ...     pass
    ...
    >>> getcallargs(f, 1, 2, 3)
    {'a': 1, 'b': 2, 'pos': (3,), 'named': {}}
    >>> getcallargs(f, a=2, x=4)
    {'a': 2, 'b': 1, 'pos': (), 'named': {'x': 4}}
    >>> getcallargs(f)
    Traceback (most recent call last):
    ...
    TypeError: f() takes at least 1 argument (0 given)

```

----------------------------------------

TITLE: Setting up Import System Finders in Python
DESCRIPTION: Demonstrates how to configure meta path finder and path entry finder using importlib.machinery. Shows initialization of loader details and proper placement in sys.meta_path and sys.path_hooks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.rst#2025-04-21_snippet_34

LANGUAGE: python
CODE:
```
SpamMetaPathFinder = importlib.machinery.PathFinder
SpamPathEntryFinder = importlib.machinery.FileFinder
loader_details = (importlib.machinery.SourceFileLoader,
                  importlib.machinery.SOURCE_SUFFIXES)

# Setting up a meta path finder.
# Make sure to put the finder in the proper location in the list in terms of
# priority.
sys.meta_path.append(SpamMetaPathFinder)

# Setting up a path entry finder.
# Make sure to put the path hook in the proper location in the list in terms
# of priority.
sys.path_hooks.append(SpamPathEntryFinder.path_hook(loader_details))
```

----------------------------------------

TITLE: Customizing LogRecord Creation with Factory Method in Python
DESCRIPTION: Example showing how to inject custom attributes into LogRecord objects by setting a custom record factory. The pattern demonstrates preserving the original factory functionality while adding custom attributes to each created record.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
old_factory = logging.getLogRecordFactory()

def record_factory(*args, **kwargs):
    record = old_factory(*args, **kwargs)
    record.custom_attribute = 0xdecafbad
    return record

logging.setLogRecordFactory(record_factory)
```

----------------------------------------

TITLE: Setting MagicMock Spec to Async Function
DESCRIPTION: Shows how setting the spec of a MagicMock to an async function results in a coroutine object being returned after calling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
>>> async def async_func(): pass
...
>>> mock = MagicMock(async_func)
>>> mock
<MagicMock spec='function' id='...'>
>>> mock()  # doctest: +SKIP
<coroutine object AsyncMockMixin._mock_call at ...>
```

----------------------------------------

TITLE: Enabling Warnings for Test Runners
DESCRIPTION: Code to ensure all warnings are displayed during testing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/warnings.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
import sys

if not sys.warnoptions:
    import os, warnings
    warnings.simplefilter("default") # Change the filter in this process
    os.environ["PYTHONWARNINGS"] = "default" # Also affect subprocesses
```

----------------------------------------

TITLE: Get Default Value for Argument - Python argparse
DESCRIPTION: Shows how to retrieve the default value for a specific argument destination using the get_default method. The default can be set via add_argument or set_defaults.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_93

LANGUAGE: python
CODE:
```
parser = argparse.ArgumentParser()
parser.add_argument('--foo', default='badger')
parser.get_default('foo')
```

----------------------------------------

TITLE: Incremental Compression with LZMA
DESCRIPTION: This example shows how to incrementally compress data in multiple steps, returning the concatenated result, which is useful for handling large datasets or streaming data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/lzma.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
import lzma
lzc = lzma.LZMACompressor()
out1 = lzc.compress(b"Some data\n")
out2 = lzc.compress(b"Another piece of data\n")
out3 = lzc.compress(b"Even more data\n")
out4 = lzc.flush()
# Concatenate all the partial results:
result = b"".join([out1, out2, out3, out4])
```

----------------------------------------

TITLE: Creating CookieJar Class in Python
DESCRIPTION: The CookieJar class manages HTTP cookies by extracting them from HTTP requests and returning them in responses. It auto-expiries cookies when necessary and requires a CookiePolicy object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.cookiejar.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
class CookieJar:
    def __init__(self, policy=None):
        self.policy = policy
```

----------------------------------------

TITLE: Creating a Shared ctypes Array in Python's Multiprocessing Module
DESCRIPTION: This function creates a ctypes array in shared memory. It supports various types, initialization options, and optional locking for process-safety.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_30

LANGUAGE: python
CODE:
```
def Array(typecode_or_type, size_or_initializer, *, lock=True):
    # Function implementation not shown in the original text
```

----------------------------------------

TITLE: Recording Performance Data with Perf - Shell
DESCRIPTION: This command runs the 'perf' profiler to record CPU stack traces while executing a specified Python script, capturing performance data at a specified frequency.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/perf_profiling.rst#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
$ perf record -F 9999 -g -o perf.data python my_script.py
```

----------------------------------------

TITLE: Using itertools.islice with slice Objects in Python
DESCRIPTION: Shows how the itertools.islice function can now accept None for start and step arguments, making it compatible with slice object attributes for more flexible slicing of iterables.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_29

LANGUAGE: python
CODE:
```
s = slice(5)     # Create slice object
itertools.islice(iterable, s.start, s.stop, s.step)
```

----------------------------------------

TITLE: Complex Math Module Functions
DESCRIPTION: Introduces new functions in the cmath module for handling complex number operations, including polar conversions, phase detection, and special value checks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_32

LANGUAGE: python
CODE:
```
import cmath
z = complex(3, 4)
polar_form = cmath.polar(z)
rect_form = cmath.rect(5, 0.927)  # From polar coordinates
```

----------------------------------------

TITLE: Explicit Type Registration with singledispatch
DESCRIPTION: Shows how to explicitly register an implementation for a specific type without using type annotations. This is useful for code that doesn't use type hints or when registering pre-existing functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
>>> @fun.register(complex)
... def _(arg, verbose=False):
...     if verbose:
...         print("Better than complicated.", end=" ")
...     print(arg.real, arg.imag)
...
```

----------------------------------------

TITLE: Defining Color Enum with Order Attribute in Python
DESCRIPTION: This snippet demonstrates how to define an Enum class with an _order_ attribute to specify the order of enum members. It also shows how an error is raised if the actual order doesn't match the specified order.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
class Color(Enum):
    _order_ = 'RED GREEN BLUE'
    RED = 1
    BLUE = 3
    GREEN = 2
```

----------------------------------------

TITLE: Waiting for Socket Data with AsyncIO Streams
DESCRIPTION: Demonstrates how to register an open socket to wait for data using asyncio.open_connection. This example creates a pair of connected sockets, registers one to wait for data, then simulates data reception.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-stream.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
import asyncio
import socket

async def wait_for_data():
    # Get a reference to the current event loop because
    # we want to access low-level APIs.
    loop = asyncio.get_running_loop()

    # Create a pair of connected sockets.
    rsock, wsock = socket.socketpair()

    # Register the open socket to wait for data.
    reader, writer = await asyncio.open_connection(sock=rsock)

    # Simulate the reception of data from the network
    loop.call_soon(wsock.send, 'abc'.encode())

    # Wait for data
    data = await reader.read(100)

    # Got data, we are done: close the socket
    print("Received:", data.decode())
    writer.close()
    await writer.wait_closed()

    # Close the second socket
    wsock.close()

asyncio.run(wait_for_data())
```

----------------------------------------

TITLE: Dataclass Transform with Custom Decorators - Python
DESCRIPTION: Demonstrates using dataclass_transform to indicate that a custom decorator like create_model provides dataclass-like behavior. This requires Python 3.11 or later. Decorators apply transformation magic to classes, inferred by type checkers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.11.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
# The create_model decorator is defined by a library.
@typing.dataclass_transform()
def create_model(cls: Type[T]) -> Type[T]:
    cls.__init__ = ...
    cls.__eq__ = ...
    cls.__ne__ = ...
    return cls

# The create_model decorator can now be used to create new model classes:
@create_model
class CustomerModel:
    id: int
    name: str

c = CustomerModel(id=327, name="Eric Idle")
```

----------------------------------------

TITLE: Disabling Argparse Long Option Abbreviation (Python)
DESCRIPTION: Explains how to disable the default behavior of `argparse` that allows abbreviation of long options by setting `allow_abbrev=False` in the `ArgumentParser` constructor. Shows an example where an abbreviated option `--foon` is not recognized when abbreviation is disabled.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_16

LANGUAGE: python
CODE:
```
>>> import argparse
>>> parser = argparse.ArgumentParser(prog='PROG', allow_abbrev=False)
>>> parser.add_argument('--foobar', action='store_true')
>>> parser.add_argument('--foonley', action='store_false')
>>> parser.parse_args(['--foon'])
usage: PROG [-h] [--foobar] [--foonley]
PROG: error: unrecognized arguments: --foon
```

----------------------------------------

TITLE: Select Any 3.x Runtime Tag (Command Prompt)
DESCRIPTION: Demonstrates using the -V: argument of the py launcher to select any installed Python runtime whose tag starts with '3'. This allows selection based on version tags across different providers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/windows.rst#_snippet_24

LANGUAGE: Batch
CODE:
```
# Select any '3.*' tagged runtime
py -V:3
```

----------------------------------------

TITLE: Using ConfigParser with Mapping Protocol API
DESCRIPTION: Example of using the new mapping protocol API in ConfigParser to read and modify configuration settings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_70

LANGUAGE: python
CODE:
```
>>> parser = ConfigParser()
>>> parser.read_string("""
... [DEFAULT]
... location = upper left
... visible = yes
... editable = no
... color = blue
...
... [main]
... title = Main Menu
... color = green
...
... [options]
... title = Options
... """)
>>> parser['main']['color']
'green'
>>> parser['main']['editable']
'no'
>>> section = parser['options']
>>> section['title']
'Options'
>>> section['title'] = 'Options (editable: %(editable)s)'
>>> section['title']
'Options (editable: no)'
```

----------------------------------------

TITLE: Resolving Names to Objects using pkgutil
DESCRIPTION: This shows how to resolve a string name to a Python object within a package using `pkgutil.resolve_name`. The name can be a dotted path to an object or a colon-separated package and object path. It handles importing the necessary packages and traversing object hierarchies to return the desired object. The function can raise ValueError, ImportError, or AttributeError if it encounters issues.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pkgutil.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
"""W(.W)*
W(.W)*:(W(.W)*)?"""
```

----------------------------------------

TITLE: Encode String with 'xmlcharrefreplace' Error Handling in Python
DESCRIPTION: Demonstrates encoding a string containing non-ASCII characters ('ß', '♬') into 'ascii' using the 'xmlcharrefreplace' error handler. This handler replaces characters that cannot be encoded with XML character references (e.g., &#223;, &#9836;).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/codecs.rst#_snippet_9

LANGUAGE: Python
CODE:
```
'German ß, ♬'.encode(encoding='ascii', errors='xmlcharrefreplace')
```

----------------------------------------

TITLE: Adding shlex.join Function in Python
DESCRIPTION: Adds shlex.join as the inverse operation of shlex.split to join shell command arguments into a single string.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0b1.rst#2025-04-21_snippet_17

LANGUAGE: Python
CODE:
```
shlex.join(args)
```

----------------------------------------

TITLE: Creating Class with Default Attributes for Autospeccing
DESCRIPTION: Demonstrates a recommended approach to define class attributes that can be used with autospec
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_60

LANGUAGE: python
CODE:
```
class Something:
    a = 33
```

----------------------------------------

TITLE: Writing a Tokenizer with Regular Expressions in Python
DESCRIPTION: This snippet demonstrates how to write a tokenizer using regular expressions in Python. It defines token types, uses re.finditer() to match patterns, and yields Token objects for each match. This is useful for lexical analysis in compilers or interpreters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_33

LANGUAGE: python
CODE:
```
from typing import NamedTuple
import re

class Token(NamedTuple):
    type: str
    value: str
    line: int
    column: int

def tokenize(code):
    keywords = {'IF', 'THEN', 'ENDIF', 'FOR', 'NEXT', 'GOSUB', 'RETURN'}
    token_specification = [
        ('NUMBER',   r'\d+(\.\d*)?'),  # Integer or decimal number
        ('ASSIGN',   r':='),           # Assignment operator
        ('END',      r';'),            # Statement terminator
        ('ID',       r'[A-Za-z]+'),    # Identifiers
        ('OP',       r'[+\-*/]'),      # Arithmetic operators
        ('NEWLINE',  r'\n'),           # Line endings
        ('SKIP',     r'[ \t]+'),       # Skip over spaces and tabs
        ('MISMATCH', r'.'),            # Any other character
    ]
    tok_regex = '|'.join('(?P<%s>%s)' % pair for pair in token_specification)
    line_num = 1
    line_start = 0
    for mo in re.finditer(tok_regex, code):
        kind = mo.lastgroup
        value = mo.group()
        column = mo.start() - line_start
        if kind == 'NUMBER':
            value = float(value) if '.' in value else int(value)
        elif kind == 'ID' and value in keywords:
            kind = value
        elif kind == 'NEWLINE':
            line_start = mo.end()
            line_num += 1
            continue
        elif kind == 'SKIP':
            continue
        elif kind == 'MISMATCH':
            raise RuntimeError(f'{value!r} unexpected on line {line_num}')
        yield Token(kind, value, line_num, column)

statements = '''
    IF quantity THEN
        total := total + price * quantity;
        tax := price * 0.05;
    ENDIF;
'''

for token in tokenize(statements):
    print(token)
```

----------------------------------------

TITLE: Demonstrating pprint Module with sort_dicts Parameter in Python
DESCRIPTION: This snippet shows the usage of the new sort_dicts parameter in the pprint module and introduces the new pp() function that defaults to sort_dicts=False, preserving dictionary insertion order for easier debugging.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
>>> from pprint import pprint, pp
>>> d = dict(source='input.txt', operation='filter', destination='output.txt')
>>> pp(d, width=40)                  # Original order
{'source': 'input.txt',
 'operation': 'filter',
 'destination': 'output.txt'}
>>> pprint(d, width=40)              # Keys sorted alphabetically
{'destination': 'output.txt',
 'operation': 'filter',
 'source': 'input.txt'}
```

----------------------------------------

TITLE: Thread-Based Multi-Process Logging in Python
DESCRIPTION: Alternative implementation of multi-process logging that keeps logging in the main process using a separate thread. Uses a Queue for inter-process communication and supports multiple loggers and log levels.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
import logging
import logging.config
import logging.handlers
from multiprocessing import Process, Queue
import random
import threading
import time

def logger_thread(q):
    while True:
        record = q.get()
        if record is None:
            break
        logger = logging.getLogger(record.name)
        logger.handle(record)

def worker_process(q):
    qh = logging.handlers.QueueHandler(q)
    root = logging.getLogger()
    root.setLevel(logging.DEBUG)
    root.addHandler(qh)
    levels = [logging.DEBUG, logging.INFO, logging.WARNING, logging.ERROR,
              logging.CRITICAL]
    loggers = ['foo', 'foo.bar', 'foo.bar.baz',
               'spam', 'spam.ham', 'spam.ham.eggs']
    for i in range(100):
        lvl = random.choice(levels)
        logger = logging.getLogger(random.choice(loggers))
        logger.log(lvl, 'Message no. %d', i)
```

----------------------------------------

TITLE: Functools Cached Property Example - Python
DESCRIPTION: Shows usage of the new functools.cached_property decorator for creating computed properties that are cached for the life of an instance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
import functools
import statistics

class Dataset:
   def __init__(self, sequence_of_numbers):
      self.data = sequence_of_numbers

   @functools.cached_property
   def variance(self):
      return statistics.variance(self.data)
```

----------------------------------------

TITLE: Definition of the AnyStr Type Variable in Python
DESCRIPTION: This is the definition of the `AnyStr` type alias. It is defined as a `TypeVar` constrained to be either `str` or `bytes`. This definition explains why `AnyStr` behaves as it does in type checking scenarios.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_50

LANGUAGE: python
CODE:
```
AnyStr = TypeVar('AnyStr', str, bytes)
```

----------------------------------------

TITLE: Selecting Specific Entry Point by Group and Name (Direct Call, Python)
DESCRIPTION: Shows how to select a specific entry point by providing both the `group` ('console_scripts') and `name` ('wheel') keyword arguments directly to the `entry_points()` function. This efficiently retrieves only the entry point(s) matching both criteria, returning them as a sequence (here, unpacked into `wheel`).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_9

LANGUAGE: Python Console
CODE:
```
>>> (wheel,) = entry_points(group='console_scripts', name='wheel')  # doctest: +SKIP
```

----------------------------------------

TITLE: Cancelling a future threadsafe
DESCRIPTION: This code shows how to cancel a future object from a different thread using `loop.call_soon_threadsafe`.  This is necessary because most asyncio objects are not thread-safe, and direct manipulation from other threads can lead to errors or unexpected behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-dev.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
loop.call_soon_threadsafe(fut.cancel)
```

----------------------------------------

TITLE: Python Concatenate and ParamSpec Decorator Example
DESCRIPTION: Demonstrates how to use `Concatenate` and `ParamSpec` to type-annotate a higher-order function (a decorator) that modifies the parameter signature of the wrapped callable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_65

LANGUAGE: python
CODE:
```
from collections.abc import Callable
from threading import Lock
from typing import Concatenate

# Use this lock to ensure that only one thread is executing a function
# at any time.
my_lock = Lock()

def with_lock[**P, R](f: Callable[Concatenate[Lock, P], R]) -> Callable[P, R]:
    '''A type-safe decorator which provides a lock.'''
    def inner(*args: P.args, **kwargs: P.kwargs) -> R:
        # Provide the lock as the first argument.
        return f(my_lock, *args, **kwargs)
    return inner

@with_lock
def sum_threadsafe(lock: Lock, numbers: list[float]) -> float:
    ...
```

----------------------------------------

TITLE: Using getattr_static in Python's inspect module
DESCRIPTION: Demonstrates the new getattr_static function for performing true read-only attribute lookups without activating dynamic attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_63

LANGUAGE: python
CODE:
```
>>> class A:
...     @property
...     def f(self):
...         print('Running')
...         return 10
...
>>> a = A()
>>> getattr(a, 'f')
Running
10
>>> inspect.getattr_static(a, 'f')
<property object at 0x1022bd788>
```

----------------------------------------

TITLE: Removing Tab from Notebook in Python
DESCRIPTION: Method to remove a specified tab from a ttk.Notebook widget and unmanage its associated window.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
def forget(tab_id):
    Removes the tab specified by *tab_id*, unmaps and unmanages the
    associated window.
```

----------------------------------------

TITLE: Initializing the spam module with C API
DESCRIPTION: Initializes the spam module by creating a PyCapsule for the C API functions, ensuring the functions are accessible from Python. It uses PyCapsule_New to encapsulate C function pointers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/extending.rst#2025-04-21_snippet_22

LANGUAGE: C
CODE:
```
PyMODINIT_FUNC
PyInit_spam(void)
{
    PyObject *m;
    static void *PySpam_API[PySpam_API_pointers];
    PyObject *c_api_object;

    m = PyModule_Create(&spammodule);
    if (m == NULL)
        return NULL;

    /* Initialize the C API pointer array */
    PySpam_API[PySpam_System_NUM] = (void *)PySpam_System;

    /* Create a Capsule containing the API pointer array's address */
    c_api_object = PyCapsule_New((void *)PySpam_API, "spam._C_API", NULL);

    if (PyModule_Add(m, "_C_API", c_api_object) < 0) {
        Py_DECREF(m);
        return NULL;
    }

    return m;
}
```

----------------------------------------

TITLE: Advanced String Formatting with .format()
DESCRIPTION: Illustrates the use of the .format() method for advanced string formatting in Python 2.6. Examples demonstrate substituting positional and keyword arguments, escaping curly brackets, and using compound field names to access attributes and dictionary keys.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
>>> # Substitute positional argument 0 into the string.
>>> "User ID: {0}".format("root")
'User ID: root'
>>> # Use the named keyword arguments
>>> "User ID: {uid}   Last seen: {last_login}".format(
...    uid="root",
...    last_login = "5 Mar 2008 07:20")
'User ID: root   Last seen: 5 Mar 2008 07:20'

```

LANGUAGE: python
CODE:
```
>>> "Empty dict: {{}}".format()
"Empty dict: {}"
```

LANGUAGE: python
CODE:
```
>>> import sys
>>> print 'Platform: {0.platform}\nPython version: {0.version}'.format(sys)
Platform: darwin
Python version: 2.6a1+ (trunk:61261M, Mar  5 2008, 20:29:41)
[GCC 4.0.1 (Apple Computer, Inc. build 5367)]'
```

LANGUAGE: python
CODE:
```
>>> import mimetypes
>>> 'Content-type: {0[.mp4]}'.format(mimetypes.types_map)
'Content-type: video/mp4'
```

----------------------------------------

TITLE: Getting Clock Time in Nanoseconds
DESCRIPTION: Returns the time of specified clock clk_id in nanoseconds as an integer. Provides higher precision than clock_gettime.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/time.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
clock_gettime_ns(clk_id) -> int
```

----------------------------------------

TITLE: Implementing Context Manager Entry in Python
DESCRIPTION: This method is called when entering a runtime context, typically via a `with` statement. It establishes the context and its return value is bound to the target variable(s) in the `as` clause, if present.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_30

LANGUAGE: Python
CODE:
```
object.__enter__(self)
```

----------------------------------------

TITLE: Defining Custom Format Method for Classes in Python
DESCRIPTION: Shows how to define a __format__ method for custom classes to control their string representation when formatted. The method handles both unicode and str format specifiers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
def __format__(self, format_spec):
    if isinstance(format_spec, unicode):
        return unicode(str(self))
    else:
        return str(self)
```

----------------------------------------

TITLE: Demonstrating Warning Control Options in Python
DESCRIPTION: Examples of using the -W option to control Python's warning behavior. This includes options for different warning actions and patterns for filtering warnings based on message, category, module, and line number.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/cmdline.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
-Wdefault  # Warn once per call location
-Werror    # Convert to exceptions
-Walways   # Warn every time
-Wall      # Same as -Walways
-Wmodule   # Warn once per calling module
-Wonce     # Warn once per Python process
-Wignore   # Never warn
```

LANGUAGE: python
CODE:
```
action:message:category:module:lineno
```

LANGUAGE: python
CODE:
```
-W ignore::DeprecationWarning
```

----------------------------------------

TITLE: Creating Unix Connection with asyncio in Python
DESCRIPTION: This method creates a Unix connection using asyncio. It returns a tuple of (transport, protocol) on success. The socket family is AF_UNIX and the socket type is SOCK_STREAM. It supports various parameters including SSL options.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
loop.create_unix_connection(protocol_factory, \
               path=None, *, ssl=None, sock=None, \
               server_hostname=None, ssl_handshake_timeout=None, \
               ssl_shutdown_timeout=None)
```

----------------------------------------

TITLE: Apply 'data' Extraction Filter with Fallback in tarfile - Python
DESCRIPTION: This code sets the `extraction_filter` to the 'data' filter (`tarfile.data_filter`) if available (Python 3.12+). If the 'data_filter' attribute does not exist (older Python versions), it falls back to the 'fully_trusted' filter using a lambda function, ensuring compatibility.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_19

LANGUAGE: Python
CODE:
```
my_tarfile.extraction_filter = getattr(tarfile, 'data_filter',
                                           (lambda member, path: member))
my_tarfile.extractall()
```

----------------------------------------

TITLE: Installing pip Using Command-Line Interface in Python
DESCRIPTION: Demonstrates how to use the ensurepip module's command-line interface to install pip. It shows basic usage and options for upgrading, specifying installation location, and controlling script installation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ensurepip.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
python -m ensurepip
```

LANGUAGE: python
CODE:
```
python -m ensurepip --upgrade
```

----------------------------------------

TITLE: Using urlsafe_b64encode in Python
DESCRIPTION: Encodes bytes-like objects using URL- and filesystem-safe Base64 alphabet, substituting '-' for '+' and '_' for '/' from the standard alphabet.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/base64.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
urlsafe_b64encode(s)
```

----------------------------------------

TITLE: Implementing interact Function in Python
DESCRIPTION: A convenience function that runs a read-eval-print loop by creating an instance of InteractiveConsole. It sets a custom reading function, local namespace, and can include a banner and exit message for the interactive session.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/code.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
def interact(banner=None, readfunc=None, local=None, exitmsg=None, local_exit=False):
    """
    Convenience function to run a read-eval-print loop.  This creates a new
    instance of :class:`InteractiveConsole` and sets *readfunc* to be used as
    the :meth:`InteractiveConsole.raw_input` method, if provided.  If *local* is
    provided, it is passed to the :class:`InteractiveConsole` constructor for
    use as the default namespace for the interpreter loop.  If *local_exit* is
    provided, it is passed to the :class:`InteractiveConsole` constructor.  The
    :meth:`~InteractiveConsole.interact`
    method of the instance is then run with *banner* and *exitmsg* passed as the
    banner and exit message to use, if provided.  The console object is discarded
    after use.
    """

```

----------------------------------------

TITLE: Strict Mode for Base64 Decoding in Python
DESCRIPTION: Introduces a new strict_mode parameter to binascii.a2b_base64 for accepting only valid base64 content when set to True.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a1.rst#2025-04-21_snippet_41

LANGUAGE: Python
CODE:
```
binascii.a2b_base64(data, strict_mode=True)
```

----------------------------------------

TITLE: Collapsing addresses in ipaddress
DESCRIPTION: This code demonstrates how to collapse a list of IPv4Network or IPv6Network objects into a minimal set of larger network objects using the collapse_addresses function. It takes an iterable of network objects and returns an iterator that yields the collapsed network objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ipaddress.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
>>> [ipaddr for ipaddr in
... ipaddress.collapse_addresses([ipaddress.IPv4Network('192.0.2.0/25'),
... ipaddress.IPv4Network('192.0.2.128/25')])]
[IPv4Network('192.0.2.0/24')]

```

----------------------------------------

TITLE: Creating a Custom Message Logger Using LoggerAdapter
DESCRIPTION: This snippet defines a custom LoggerAdapter to format log messages using a message class, enabling customizable logging outputs while maintaining standard logging features.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_27

LANGUAGE: Python
CODE:
```
import logging

class Message:
    def __init__(self, fmt, args):
        self.fmt = fmt
        self.args = args

    def __str__(self):
        return self.fmt.format(*self.args)

class StyleAdapter(logging.LoggerAdapter):
    def log(self, level, msg, /, *args, stacklevel=1, **kwargs):
        if self.isEnabledFor(level):
            msg, kwargs = self.process(msg, kwargs)
            self.logger.log(level, Message(msg, args), **kwargs,
                            stacklevel=stacklevel+1)

logger = StyleAdapter(logging.getLogger(__name__))

def main():
    logger.debug('Hello, {}', 'world!')

if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG)
    main()
```

----------------------------------------

TITLE: Processing HTML Email with Alternative Content in Python
DESCRIPTION: Demonstrates how to process and extract content from an HTML email with alternative representations using Python's email module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.examples.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
# ../includes/email-read-alternative.py
```

----------------------------------------

TITLE: Using PropertyMock in Python for Mocking Class Properties
DESCRIPTION: Demonstrates how to use PropertyMock to mock a property on a class. PropertyMock provides __get__ and __set__ methods to specify return values when properties are accessed and to track when they are set.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
>>> class Foo:
...     @property
...     def foo(self):
...         return 'something'
...     @foo.setter
...     def foo(self, value):
...         pass
...
>>> with patch('__main__.Foo.foo', new_callable=PropertyMock) as mock_foo:
...     mock_foo.return_value = 'mockity-mock'
...     this_foo = Foo()
...     print(this_foo.foo)
...     this_foo.foo = 6
...
mockity-mock
>>> mock_foo.mock_calls
[call(), call(6)]
```

----------------------------------------

TITLE: Using cpu_count function in os module
DESCRIPTION: New function cpu_count reports the number of CPUs available on the platform on which Python is running (or None if the count can't be determined).
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.4.rst#2025-04-21_snippet_14

LANGUAGE: Python
CODE:
```
import os

cpu_count = os.cpu_count()
```

----------------------------------------

TITLE: ConfigParser with No-Value Options Example
DESCRIPTION: Demonstrates configuration parsing with allow_no_value parameter to support options without values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
>>> import configparser

>>> sample_config = """
... [mysqld]
...   user = mysql
...   pid-file = /var/run/mysqld/mysqld.pid
...   skip-external-locking
...   old_passwords = 1
...   skip-bdb
...   # we don't need ACID today
...   skip-innodb
... """
>>> config = configparser.ConfigParser(allow_no_value=True)
>>> config.read_string(sample_config)
```

----------------------------------------

TITLE: Finding Common Sub-Paths with os.path
DESCRIPTION: The commonpath function computes the longest common sub-path of the given paths, raising an exception for incompatible formats. It's capable of handling path-like objects since version 3.6 and any iterable since version 3.13.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
def commonpath(paths):
    return longest_common_sub_path(paths)
```

----------------------------------------

TITLE: Asynchronous DNS Resolution Methods in asyncio - Python
DESCRIPTION: These methods provide asynchronous versions of socket address resolution functions. They utilize the loop's default thread pool executor, which might lead to delays if saturated. Adjusting the executor can improve performance for high-load scenarios.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
.. method:: loop.getaddrinfo(host, port, *, family=0, \
               type=0, proto=0, flags=0)
   :async:

   Asynchronous version of :meth:`socket.getaddrinfo`.

.. method:: loop.getnameinfo(sockaddr, flags=0)
   :async:

   Asynchronous version of :meth:`socket.getnameinfo`.

.. note::
   Both *getaddrinfo* and *getnameinfo* internally utilize their synchronous
   versions through the loop's default thread pool executor.
   When this executor is saturated, these methods may experience delays,
   which higher-level networking libraries may report as increased timeouts.
   To mitigate this, consider using a custom executor for other user tasks,
   or setting a default executor with a larger number of workers.

.. versionchanged:: 3.7
   Both *getaddrinfo* and *getnameinfo* methods were always documented
   to return a coroutine, but prior to Python 3.7 they were, in fact,
   returning :class:`asyncio.Future` objects.  Starting with Python 3.7
   both methods are coroutines.
```

----------------------------------------

TITLE: Suppressing Attribute with argparse.SUPPRESS Default in Python argparse
DESCRIPTION: Shows how setting the `default` to `argparse.SUPPRESS` prevents the corresponding attribute from being added to the parsed namespace if the argument is not provided on the command line.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_49

LANGUAGE: Python
CODE:
```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo', default=argparse.SUPPRESS)
>>> parser.parse_args([])
Namespace()
>>> parser.parse_args(['--foo', '1'])
Namespace(foo='1')
```

----------------------------------------

TITLE: Defining Floating-Point Numbers in Scientific Notation (Python)
DESCRIPTION: This snippet demonstrates various ways to represent floating-point numbers using scientific notation in Python. It includes examples of positive and negative numbers with different exponents and mantissas.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/mathdata/floating_points.txt#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
0E0
-0E0
1E0
15E-1
125E-2
1125E-3
10625E-4
103125E-5
1015625E-6
10078125E-7
100390625E-8
1001953125E-9
10009765625E-10
100048828125E-11
1000244140625E-12
10001220703125E-13
100006103515625E-14
1000030517578125E-15
10000152587890625E-16
+8E153
-1E153
+9E306
-2E153
+7E-304
-3E-49
+7E-303
-6E-49
+9E43
-9E44
+8E303
-1E303
+7E-287
-2E-204
+2E-205
-9E-47
+34E195
-68E195
+85E194
-67E97
+93E-234
-19E-87
+38E-87
-38E-88
-69E220
+18E43
-36E43
+61E-99
-43E-92
+86E-92
-51E-74
+283E85
-566E85
+589E187
-839E143
-744E-234
+930E-235
-186E-234
+604E175
-302E175
+755E174
-151E175
+662E-213
-408E-74
+510E-75
+6782E55
-2309E92
+7963E34
-3391E55
+7903E-96
-7611E-226
+4907E-196
-5547E-311
+5311E241
-5311E243
+5311E242
+9269E-45
-8559E-289
+8699E-276
-8085E-64
+74819E201
-82081E41
+51881E37
-55061E157
+77402E-215
-33891E-92
+38701E-215
-82139E-76
+75859E25
+89509E140
-57533E287
+46073E-32
-92146E-32
+83771E-74
-34796E-276
+584169E229
+164162E41
-328324E41
+209901E-11
-419802E-11
+940189E-112
-892771E-213
+757803E120
-252601E120
+252601E121
-505202E120
+970811E-264
-654839E-60
+289767E-178
-579534E-178
-8823691E130
+9346704E229
-1168338E229
-6063369E-136
+3865421E-225
-5783893E-127
+2572231E223
-5144462E223
+1817623E109
+6431543E-97
-5444097E-21
+8076999E-121
-9997649E-270
+50609263E157
+70589528E130
-88236910E129
+87575437E-310
-23135572E-127
+85900881E177
-84863171E113
+68761586E232
-50464069E286
+27869147E-248
-55738294E-248
+70176353E-53
-80555086E-32
-491080654E121
+526250918E287
-245540327E121
-175150874E-310
+350301748E-310
-437877185E-311
+458117166E52
-916234332E52
+229058583E52
-525789935E98
+282926897E-227
-565853794E-227
+667284113E-240
-971212611E-126
+9981396317E-182
-5035231965E-156
+8336960483E-153
-8056371144E-155
+6418488827E79
-3981006983E252
+7962013966E252
-4713898551E261
+8715380633E-58
-9078555839E-109
+9712126110E-127
+42333842451E201
-84667684902E201
+23792120709E-315
-78564021519E-227
+71812054883E-188
-30311163631E-116
+71803914657E292
+36314223356E-109
+18157111678E-109
-45392779195E-110
+778380362293E218
-685763015669E280
+952918668151E70
-548357443505E32
+384865004907E-285
-769730009814E-285
+697015418417E-93
-915654049301E-28
+178548656339E169
-742522891517E259
+742522891517E258
-357097312678E169
-3113521449172E218
+3891901811465E217
-1556760724586E218
+9997878507563E-195
-7247563029154E-319
+3623781514577E-319
-3092446298323E-200
+6363857920591E145
-8233559360849E94
+2689845954547E49
-5379691909094E49
+5560322501926E-301
-7812878489261E-179
+8439398533053E-256
-2780161250963E-301
-87605699161665E155
-17521139832333E156
-88218101363513E-170
+38639244311627E-115
+35593959807306E261
-53390939710959E260
+71187919614612E261
-88984899518265E260
+77003665618895E-73
-15400733123779E-72
+61602932495116E-72
-30801466247558E-72
+834735494917063E-300
-589795149206434E-151
+475603213226859E-42
-294897574603217E-151
+850813008001913E93
-203449172043339E185
+406898344086678E185
-813796688173356E185
+6045338514609393E244
-5145963778954906E142
+2572981889477453E142
-6965949469487146E74
+6182410494241627E-119
-8510309498186985E-277
+6647704637273331E-212
-2215901545757777E-212
+3771476185376383E276
-3729901848043846E212
+3771476185376383E277
-9977830465649166E119
+8439928496349319E-142
-8204230082070882E-59
+8853686434843997E-244
-5553274272288559E-104
+36149023611096162E144
-36149023611096162E147
+18074511805548081E146
-18074511805548081E147
+97338774138954421E-290
-88133809804950961E-308
+94080055902682397E-243
-24691002732654881E-115
+52306490527514614E49
-26153245263757307E49
+55188692254193604E165
-68985865317742005E164
+27176258005319167E-261
-73169230107256116E-248
+91461537634070145E-249
-54352516010638334E-261
+586144289638535878E280
-601117006785295431E245
+293072144819267939E280
-953184713238516652E272
+902042358290366539E-281
-557035730189854663E-294
+902042358290366539E-280
-354944100507554393E-238
+272104041512242479E199
-816312124536727437E199
+544208083024484958E199
-792644927852378159E78
-679406450132979175E-263
+543525160106383340E-262
+7400253695682920196E215
-1850063423920730049E215
+3700126847841460098E215
-9250317119603650245E214
+8396094300569779681E-252
-3507665085003296281E-75
+7015330170006592562E-75
-7015330170006592562E-74
+7185620434951919351E205
-1360520207561212395E198
+2178999185345151731E-184
-8691089486201567102E-218
+4345544743100783551E-218
-4357998370690303462E-184
+59825267349106892461E177
-62259110684423957791E47
+58380168477038565599E265
-62259110684423957791E48
-33584377202279118724E-252
-57484963479615354808E205
+71856204349519193510E204
-14371240869903838702E205
+36992084760177624177E-318
-73984169520355248354E-318
+99257763227713890244E-115
-87336362425182547697E-280
+7E289
-3E153
+6E153
-5E243
+7E-161
-7E-172
+8E-63
-7E-113
+8E126
-4E126
+5E125
-1E126
+8E-163
-1E-163
+2E-163
-4E-163
+51E195
-37E46
+74E46
-56E289
+69E-145
-70E-162
+56E-161
-21E-303
+34E-276
-68E-276
+85E-277
-87E-274
+829E102
-623E100
+723E-162
-457E-102
+914E-102
-323E-135
+151E176
-302E176
+921E90
-604E176
+823E-206
-463E-114
+348E-274
+9968E100
-6230E99
+1246E100
+6676E-296
-8345E-297
+1669E-296
-3338E-296
+3257E58
-6514E58
+2416E176
+8085E-63
-3234E-62
+1617E-62
-6468E-62
+53418E111
-60513E160
+26709E111
-99447E166
+12549E48
-25098E48
+50196E48
-62745E47
+83771E-73
-97451E-167
+86637E-203
-75569E-254
+473806E83
-947612E83
+292369E76
-584738E76
+933587E-140
-720919E-14
+535001E-149
-890521E-235
+548057E81
-706181E88
+820997E106
-320681E63
+928609E-261
-302276E-254
+151138E-254
+4691773E45
-9383546E45
+3059949E-243
-6119898E-243
+5356626E-213
-4877378E-199
+7716693E223
-5452869E109
+4590831E156
-9181662E156
-3714436E-261
+4643045E-262
-7428872E-261
+52942146E130
-27966061E145
+26471073E130
-55932122E145
+95412548E-99
-47706274E-99
+23853137E-99
-78493654E-301
+65346417E29
-51083099E167
+89396333E264
-84863171E114
+59540836E-251
-74426045E-252
+14885209E-251
-29770418E-251
+982161308E122
-245540327E122
+491080654E122
+525452622E-310
-771837113E-134
+820858081E-150
-262726311E-310
+923091487E209
-653777767E273
+842116236E-53
-741111169E-202
+839507247E-284
-951487269E-264
-9821613080E121
+6677856011E-31
-3573796826E-266
+7147593652E-266
-9981396317E-181
+3268888835E272
-2615111068E273
+1307555534E273
+2990671154E-190
-1495335577E-190
+5981342308E-190
-7476677885E-191
+82259684194E-202
-93227267727E-49
+41129842097E-202
-47584241418E-314
-79360293406E92
+57332259349E225
-57202326162E111
+86860597053E-206
-53827010643E-200
+53587107423E-61
+635007636765E200
+508006109412E201
-254003054706E201
+561029718715E-72
-897647549944E-71
+112205943743E-71
-873947086081E-236
+809184709177E116
-573112917422E81
+286556458711E81
+952805821491E-259
-132189992873E-44
-173696038493E-144
+1831132757599E-107
-9155663787995E-108
+7324531030396E-107
-9277338894969E-200
+8188292423973E287
-5672557437938E59
+2836278718969E59
-9995153153494E54
+9224786422069E-291
-3142213164987E-294
+6284426329974E-294
-8340483752889E-301
+67039371486466E89
-62150786615239E197
+33519685743233E89
-52563419496999E156
+32599460466991E-65
-41010988798007E-133
+65198920933982E-65
-82021977596014E-133
+80527976643809E61
-74712611505209E158
+53390939710959E261
-69277302659155E225
+46202199371337E-72
-23438635467783E-179
+41921560615349E-67
-92404398742674E-72
+738545606647197E124
-972708181182949E117
-837992143580825E87
+609610927149051E-255
-475603213226859E-41
+563002800671023E-177
-951206426453718E-41
+805416432656519E202
-530658674694337E159
+946574173863918E208
-318329953318553E113
-462021993713370E-73
+369617594970696E-72
+3666156212014994E233
-1833078106007497E233
+8301790508624232E174
-1037723813578029E174
+7297662880581139E-286
-5106185698912191E-276
+7487252720986826E-165
-3743626360493413E-165
+3773057430100257E230
-7546114860200514E230
+4321222892463822E58
-7793560217139653E51
+26525993941010681E112
-53051987882021362E112
+72844871414247907E77
-88839359596763261E105
+18718131802467065E-166
-14974505441973652E-165
+73429396004640239E106
-58483921078398283E57
+41391519190645203E165
-82783038381290406E165
+58767043776702677E-163
-90506231831231999E-129
+64409240769861689E-159
-77305427432277771E-190
+476592356619258326E273
-953184713238516652E273
+899810892172646163E283
-929167076892018333E187
+647761278967534239E-312
-644290479820542942E-180
+926145344610700019E-225
-958507931896511964E-246
+272104041512242479E200
-792644927852378159E79
+544208083024484958E200
-929963218616126365E290
+305574339166810102E-219
-152787169583405051E-219
+611148678333620204E-219
-763935847917025255E-220
+7439550220920798612E158
-3719775110460399306E158
+9299437776150998265E157
-7120190517612959703E120
+3507665085003296281E-73
-7015330170006592562E-73
-6684428762278255956E-294
-1088416166048969916E200
-8707329328391759328E200
+4439021781608558002E-65
-8878043563217116004E-65
+2219510890804279001E-65
+33051223951904955802E55
-56961524140903677624E120
+71201905176129597030E119
+14030660340013185124E-73
-17538325425016481405E-74
+67536228609141569109E-133
-35620497849450218807E-306
+66550376797582521751E-126
-71240995698900437614E-306
+3E24
-6E24
+6E26
-7E25
+1E-14
-2E-14
+4E-14
-8E-14
+5E26
-8E27
+1E27
-4E27
+9E-13
-7E-20
+56E25
-70E24
+51E26
+71E-17
-31E-5
+62E-5
-94E-8
+67E27
-81E24
+54E23
-54E25
+63E-22
-63E-23
+43E-4
-86E-4
+942E26
-471E25
+803E24
-471E26
-409E-21
+818E-21
-867E-8
+538E27
-857E24
+269E27
-403E26
+959E-7
-959E-6
+373E-27
-746E-27
+4069E24
-4069E23
-8138E24
+8294E-15
-4147E-14
+4147E-15
-8294E-14
+538E27
-2690E26
+269E27
-2152E27
+1721E-17
-7979E-27
+6884E-17
-8605E-18
+82854E27
-55684E24
+27842E24
-48959E25
+81921E-17
-76207E-8
+4147E-15
-41470E-16
+89309E24
+75859E26
-75859E25
+14257E-23
-28514E-23
+57028E-23
-71285E-24
+344863E27
-951735E27
+200677E23
-401354E24
+839604E-11
-209901E-11
+419802E-11
-537734E-24
+910308E26
-227577E26
+455154E26
-531013E25
+963019E-21
-519827E-13
+623402E-27
-311701E-27
+9613651E26
-9191316E23
+4595658E23
-2297829E23
-1679208E-11
+3379223E27
```

----------------------------------------

TITLE: Searching Messages in IMAP Mailbox with Python
DESCRIPTION: This snippet demonstrates how to search for messages in an IMAP mailbox using the search() method. It shows two equivalent approaches for searching messages from a specific sender, returning message numbers that match the criteria.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/imaplib.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
# M is a connected IMAP4 instance...
typ, msgnums = M.search(None, 'FROM', '"LDJ"')

# or:
typ, msgnums = M.search(None, '(FROM "LDJ")')
```

----------------------------------------

TITLE: Deprecated Constants in calendar (Python)
DESCRIPTION: The calendar module constants calendar.January and calendar.February are deprecated. Users should use the new constants calendar.JANUARY and calendar.FEBRUARY instead.
SOURCE: https://github.com/python/cpython/blob/main/Doc/deprecations/pending-removal-in-future.rst#_snippet_2

LANGUAGE: Python
CODE:
```
calendar.January
```

LANGUAGE: Python
CODE:
```
calendar.February
```

----------------------------------------

TITLE: Using the New sorted() Function in Python 2.4
DESCRIPTION: Demonstrates the new built-in sorted() function which works like list.sort() but can be used in expressions, works with any iterable, and returns a new sorted list instead of modifying the original.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
>>> L = [9,7,8,3,2,4,1,6,5]
>>> [10+i for i in sorted(L)]       # usable in a list comprehension
[11, 12, 13, 14, 15, 16, 17, 18, 19]
>>> L                               # original is left unchanged
[9,7,8,3,2,4,1,6,5]
>>> sorted('Monty Python')          # any iterable may be an input
[' ', 'M', 'P', 'h', 'n', 'n', 'o', 'o', 't', 't', 'y', 'y']
```

----------------------------------------

TITLE: Implementing a Recursive repr Method with recursive_repr Decorator in Python
DESCRIPTION: Demonstrates the use of the recursive_repr decorator to handle recursive references in custom __repr__ methods. The example creates a MyList class that displays list contents with custom formatting while avoiding infinite recursion.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/reprlib.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> from reprlib import recursive_repr
>>> class MyList(list):
...     @recursive_repr()
...     def __repr__(self):
...         return '<' + '|'.join(map(repr, self)) + '>'
...
>>> m = MyList('abc')
>>> m.append(m)
>>> m.append('x')
>>> print(m)
<'a'|'b'|'c'|...|'x'>
```

----------------------------------------

TITLE: Reading Argparse Arguments from File (Python)
DESCRIPTION: Shows how to configure `ArgumentParser` to read arguments from a file by specifying a `fromfile_prefix_chars`. Arguments starting with the specified character (e.g., `@`) are replaced by the contents of the referenced file, treating each line as a separate argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_14

LANGUAGE: python
CODE:
```
>>> import sys
>>> import argparse
>>> with open('args.txt', 'w', encoding=sys.getfilesystemencoding()) as fp:
...     fp.write('-f\nbar')
... 
>>> parser = argparse.ArgumentParser(fromfile_prefix_chars='@')
>>> parser.add_argument('-f')
>>> parser.parse_args(['-f', 'foo', '@args.txt'])
Namespace(f='bar')
```

----------------------------------------

TITLE: Implementing Color IntFlag with Bit Values in Python
DESCRIPTION: This example shows how to create a Color enum using IntFlag, assigning specific bit values to each color and demonstrating various operations and properties of IntFlag.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
class Color(IntFlag):
    BLACK = 0
    RED = 1
    GREEN = 2
    BLUE = 4
    PURPLE = RED | BLUE
    WHITE = RED | GREEN | BLUE

list(Color.WHITE)
~Color.BLUE
(Color.RED | Color.GREEN).name
Color.RED | Color.BLUE
Color(7)  # or Color(-1)
Color(0)
Color.BLACK in Color.WHITE
Color.PURPLE in Color.WHITE
Color.GREEN in Color.PURPLE
```

----------------------------------------

TITLE: Runtime Name Resolution for Free Variables in Python
DESCRIPTION: Illustrates how name resolution of free variables in Python happens at runtime, not compile time. When a variable's value is changed after function definition but before execution, the function uses the latest value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/executionmodel.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
i = 10
def f():
    print(i)
i = 42
f()
```

----------------------------------------

TITLE: Comprehensive shelve Module Usage Example in Python
DESCRIPTION: Complete example demonstrating the shelve module interface, including opening a shelf, storing/retrieving data, deleting entries, checking for keys, and handling mutable objects. Shows the differences between using writeback=True and not using it.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/shelve.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import shelve

d = shelve.open(filename)  # open -- file may get suffix added by low-level
                          # library

d[key] = data              # store data at key (overwrites old data if
                          # using an existing key)
data = d[key]              # retrieve a COPY of data at key (raise KeyError
                          # if no such key)
del d[key]                 # delete data stored at key (raises KeyError
                          # if no such key)

flag = key in d            # true if the key exists
klist = list(d.keys())     # a list of all existing keys (slow!)

# as d was opened WITHOUT writeback=True, beware:
d['xx'] = [0, 1, 2]        # this works as expected, but...
d['xx'].append(3)          # *this doesn't!* -- d['xx'] is STILL [0, 1, 2]!

# having opened d without writeback=True, you need to code carefully:
temp = d['xx']             # extracts the copy
temp.append(5)             # mutates the copy
d['xx'] = temp             # stores the copy right back, to persist it

# or, d=shelve.open(filename,writeback=True) would let you just code
# d['xx'].append(5) and have it work as expected, BUT it would also
# consume more memory and make the d.close() operation slower.

d.close()                  # close it
```

----------------------------------------

TITLE: Leap Year Check - Python
DESCRIPTION: This function checks if a specified year is a leap year, providing a boolean response indicating leap year status.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/calendar.rst#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
.. function:: isleap(year)
```

----------------------------------------

TITLE: Customizing Enum Initialization - Python
DESCRIPTION: This snippet shows how to customize the initialization of Enum members by passing multiple values, which are then unpacked in the Enum's __init__ method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/enum.rst#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
>>> from enum import Enum
>>> class Weekday(Enum):
...     MONDAY = 1, 'Mon'

``Weekday.__init__()`` would be called as ``Weekday.__init__(self, 1, 'Mon')``
```

----------------------------------------

TITLE: Data Compression with zlib in Python
DESCRIPTION: Shows how to compress and decompress data using the zlib module, including calculating CRC32 checksums.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
>>> import zlib
>>> s = b'witch which has which witches wrist watch'
>>> len(s)
41
>>> t = zlib.compress(s)
>>> len(t)
37
>>> zlib.decompress(t)
b'witch which has which witches wrist watch'
>>> zlib.crc32(s)
226805979
```

----------------------------------------

TITLE: Specializing JSON Object Decoding in Python
DESCRIPTION: Demonstrates custom JSON decoding by providing specialized hooks for object transformation (complex numbers) and number parsing (using decimal.Decimal for precision).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/json.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> import json
>>> def as_complex(dct):
...     if '__complex__' in dct:
...         return complex(dct['real'], dct['imag'])
...     return dct
...
>>> json.loads('{"__complex__": true, "real": 1, "imag": 2}',
...     object_hook=as_complex)
(1+2j)
>>> import decimal
>>> json.loads('1.1', parse_float=decimal.Decimal)
Decimal('1.1')
```

----------------------------------------

TITLE: Itertools Recipe: unique function
DESCRIPTION: Function that yields unique elements in sorted order, supporting unhashable inputs, with optional key function and reverse parameter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_40

LANGUAGE: python
CODE:
```
def unique(iterable, key=None, reverse=False):
   "Yield unique elements in sorted order. Supports unhashable inputs."
   # unique([[1, 2], [3, 4], [1, 2]]) → [1, 2] [3, 4]
   sequenced = sorted(iterable, key=key, reverse=reverse)
   return unique_justseen(sequenced, key=key)
```

----------------------------------------

TITLE: Annotated with Generic Type Aliases
DESCRIPTION: Demonstrates using `Annotated` with generic type aliases (`type Vec[T] = ...`). Type checkers will treat an instance of the alias (`V`) as the underlying annotated type.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_82

LANGUAGE: Python
CODE:
```
@dataclass
class MaxLen:
    value: int

type Vec[T] = Annotated[list[tuple[T, T]], MaxLen(10)]

# When used in a type annotation, a type checker will treat "V" the same as
# ``Annotated[list[tuple[int, int]], MaxLen(10)]``:
type V = Vec[int]
```

----------------------------------------

TITLE: Converting Wait Status to Exit Code in Python
DESCRIPTION: The waitstatus_to_exitcode() function converts a wait status to an exit code, handling both normal process exits and termination by signals on Unix systems.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_80

LANGUAGE: python
CODE:
```
def waitstatus_to_exitcode(status):
    # Function implementation
```

----------------------------------------

TITLE: Creating FrameSummary Objects
DESCRIPTION: Instantiates a FrameSummary object representing a single frame in a traceback or stack. Provides options for controlling source code lookup and including local variable information for debugging.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
FrameSummary(filename, lineno, name, *, lookup_line=True, locals=None, line=None, end_lineno=None, colno=None, end_colno=None)
```

----------------------------------------

TITLE: Custom File Handler with Ownership in Python
DESCRIPTION: This snippet defines a function `owned_file_handler` that creates a `logging.FileHandler` and sets the file ownership using `shutil.chown`. It first checks if the file exists and creates it if it doesn't, then changes the ownership. The function takes filename, mode, encoding, and owner as arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_40

LANGUAGE: python
CODE:
```
def owned_file_handler(filename, mode='a', encoding=None, owner=None):
    if owner:
        if not os.path.exists(filename):
            open(filename, 'a').close()
        shutil.chown(filename, *owner)
    return logging.FileHandler(filename, mode, encoding)
```

----------------------------------------

TITLE: Configuring Decimal Context Precision in Python
DESCRIPTION: Demonstrates accessing the default global context for the `decimal` module using `getcontext()` and subsequently modifying its precision setting (`prec`) for subsequent arithmetic operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_0

LANGUAGE: python
CODE:
```
>>> from decimal import *
>>> getcontext()
Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999,
        capitals=1, clamp=0, flags=[], traps=[Overflow, DivisionByZero,
        InvalidOperation])

>>> getcontext().prec = 7       # Set a new precision
```

----------------------------------------

TITLE: Creating Custom Elements with Images in ttk
DESCRIPTION: Example showing how to create a custom button element using images for different states (normal, pressed, active) with the Style.element_create method, including border and positioning options.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_48

LANGUAGE: python
CODE:
```
img1 = tkinter.PhotoImage(master=root, file='button.png')
img1 = tkinter.PhotoImage(master=root, file='button-pressed.png')
img1 = tkinter.PhotoImage(master=root, file='button-active.png')
style = ttk.Style(root)
style.element_create('Button.button', 'image',
                     img1, ('pressed', img2), ('active', img3),
                     border=(2, 4), sticky='we')
```

----------------------------------------

TITLE: Customizing Boolean States in Python ConfigParser
DESCRIPTION: Demonstrates how to override the default Boolean states in ConfigParser to use custom string representations for True and False values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
>>> custom = configparser.ConfigParser()
>>> custom['section1'] = {'funky': 'nope'}
>>> custom['section1'].getboolean('funky')
Traceback (most recent call last):
...
ValueError: Not a boolean: nope
>>> custom.BOOLEAN_STATES = {'sure': True, 'nope': False}
>>> custom['section1'].getboolean('funky')
False
```

----------------------------------------

TITLE: Implementing SimpleNamespace in Python
DESCRIPTION: A code example showing the rough equivalent implementation of the SimpleNamespace class. It demonstrates the __init__, __repr__, and __eq__ methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/types.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
class SimpleNamespace:
    def __init__(self, mapping_or_iterable=(), /, **kwargs):
        self.__dict__.update(mapping_or_iterable)
        self.__dict__.update(kwargs)

    def __repr__(self):
        items = (f"{k}={v!r}" for k, v in self.__dict__.items())
        return "{}({})".format(type(self).__name__, ", ".join(items))

    def __eq__(self, other):
        if isinstance(self, SimpleNamespace) and isinstance(other, SimpleNamespace):
           return self.__dict__ == other.__dict__
        return NotImplemented
```

----------------------------------------

TITLE: Creating SSL Server Socket (Python)
DESCRIPTION: Example of creating an SSL server socket listening on localhost IPv4. It loads a certificate chain and private key, then accepts connections.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
context.load_cert_chain('/path/to/certchain.pem', '/path/to/private.key')

with socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) as sock:
    sock.bind(('127.0.0.1', 8443))
    sock.listen(5)
    with context.wrap_socket(sock, server_side=True) as ssock:
        conn, addr = ssock.accept()
        ...
```

----------------------------------------

TITLE: Handling Exceptions in Enter Method with ExitStack
DESCRIPTION: This code demonstrates how to handle exceptions thrown by __enter__ methods while using ExitStack to ensure resource management is performed correctly, separating context management protocols.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextlib.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
stack = ExitStack()\ntry:\n    x = stack.enter_context(cm)\nexcept Exception:\n    # handle __enter__ exception\nelse:\n    with stack:\n        # Handle normal case
```

----------------------------------------

TITLE: Sending a POST Request with a Dictionary in Python
DESCRIPTION: This function is designed to send a POST request using a URL and a body. The body is expected to be a dictionary that maps string keys to integer values. The function uses type annotations to ensure the correct structure of the input.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_97

LANGUAGE: python
CODE:
```
def send_post_request(url: str, body: dict[str, int]) -> None:
    ...
```

----------------------------------------

TITLE: Running Python Code Snippets in C with PyRun_SimpleString
DESCRIPTION: Shows how to execute simple Python statements from C code using the PyRun_SimpleString function. This function executes Python code in the context of the __main__ module and returns 0 for success or -1 when an exception occurs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/extending.rst#2025-04-21_snippet_0

LANGUAGE: c
CODE:
```
PyRun_SimpleString
```

----------------------------------------

TITLE: Connecting Accepted Socket in asyncio
DESCRIPTION: This method wraps an already accepted connection into a transport/protocol pair. It's designed for servers that accept connections outside of asyncio but want to handle them using asyncio's capabilities. It returns a tuple containing the transport and protocol objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```

.. method:: loop.connect_accepted_socket(protocol_factory, \
               sock, *, ssl=None, ssl_handshake_timeout=None, \
               ssl_shutdown_timeout=None)
   :async:

   Wrap an already accepted connection into a transport/protocol pair.

   This method can be used by servers that accept connections outside
   of asyncio but that use asyncio to handle them.

   Parameters:

   * *protocol_factory* must be a callable returning a
     :ref:`protocol <asyncio-protocol>` implementation.

   * *sock* is a preexisting socket object returned from
     :meth:`socket.accept <socket.socket.accept>`.

     .. note::

        The *sock* argument transfers ownership of the socket to the
        transport created. To close the socket, call the transport's
        :meth:`~asyncio.BaseTransport.close` method.

   * *ssl* can be set to an :class:`~ssl.SSLContext` to enable SSL over
     the accepted connections.

   * *ssl_handshake_timeout* is (for an SSL connection) the time in seconds to
     wait for the SSL handshake to complete before aborting the connection.
     ``60.0`` seconds if ``None`` (default).

   * *ssl_shutdown_timeout* is the time in seconds to wait for the SSL shutdown
     to complete before aborting the connection. ``30.0`` seconds if ``None``
     (default).

   Returns a ``(transport, protocol)`` pair.

```

----------------------------------------

TITLE: Defining SSL/TLS Options in Python
DESCRIPTION: These constants define various SSL/TLS options, including workarounds for bugs, protocol version restrictions, and performance optimizations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
OP_ALL
OP_NO_SSLv2
OP_NO_SSLv3
OP_NO_TLSv1
OP_NO_TLSv1_1
OP_NO_TLSv1_2
OP_NO_TLSv1_3
OP_NO_RENEGOTIATION
OP_CIPHER_SERVER_PREFERENCE
OP_SINGLE_DH_USE
OP_SINGLE_ECDH_USE
OP_ENABLE_MIDDLEBOX_COMPAT
OP_NO_COMPRESSION
OP_NO_TICKET
OP_IGNORE_UNEXPECTED_EOF
OP_ENABLE_KTLS
OP_LEGACY_SERVER_CONNECT
```

----------------------------------------

TITLE: Heapsort Implementation - Python
DESCRIPTION: The `heapsort` function implements the heapsort algorithm using the heapq module. It involves creating a heap from the input iterable and progressively popping the smallest elements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/heapq.rst#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
def heapsort(iterable):
    h = []
    for value in iterable:
        heappush(h, value)
    return [heappop(h) for i in range(len(h))]
```

----------------------------------------

TITLE: Demonstrating Integer String Conversion Limit in Python
DESCRIPTION: Shows how Python limits the conversion between large integers and strings to prevent denial of service attacks. The limit applies to decimal conversions but not to hexadecimal, octal, or binary conversions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_105

LANGUAGE: python
CODE:
```
>>> import sys
>>> sys.set_int_max_str_digits(4300)  # Illustrative, this is the default.
>>> _ = int('2' * 5432)
Traceback (most recent call last):
...
ValueError: Exceeds the limit (4300 digits) for integer string conversion: value has 5432 digits; use sys.set_int_max_str_digits() to increase the limit
>>> i = int('2' * 4300)
>>> len(str(i))
4300
>>> i_squared = i*i
>>> len(str(i_squared))
Traceback (most recent call last):
...
ValueError: Exceeds the limit (4300 digits) for integer string conversion; use sys.set_int_max_str_digits() to increase the limit
>>> len(hex(i_squared))
7144
>>> assert int(hex(i_squared), base=16) == i*i  # Hexadecimal is unlimited.
```

----------------------------------------

TITLE: Loading SQLite Extensions Example
DESCRIPTION: Example showing how to load and use SQLite extensions, specifically demonstrating the full-text search extension. Includes table creation and query examples.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
con.enable_load_extension(True)

# Load the fulltext search extension
con.execute("select load_extension('./fts3.so')")

# alternatively you can load the extension using an API call:
# con.load_extension("./fts3.so")

# disable extension loading again
con.enable_load_extension(False)

# example from SQLite wiki
con.execute("CREATE VIRTUAL TABLE recipe USING fts3(name, ingredients)")
con.executescript("""
    INSERT INTO recipe (name, ingredients) VALUES('broccoli stew', 'broccoli peppers cheese tomatoes');
    INSERT INTO recipe (name, ingredients) VALUES('pumpkin stew', 'pumpkin onions garlic celery');
    INSERT INTO recipe (name, ingredients) VALUES('broccoli pie', 'broccoli cheese onions flour');
    INSERT INTO recipe (name, ingredients) VALUES('pumpkin pie', 'pumpkin sugar flour butter');
    """)
for row in con.execute("SELECT rowid, name, ingredients FROM recipe WHERE name MATCH 'pie'")
    print(row)
```

----------------------------------------

TITLE: Common Warning Filter Examples
DESCRIPTION: Examples of commonly used warning filter configurations for different scenarios.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/warnings.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
default                      # Show all warnings (even those ignored by default)
ignore                       # Ignore all warnings
error                        # Convert all warnings to errors
error::ResourceWarning       # Treat ResourceWarning messages as errors
default::DeprecationWarning  # Show DeprecationWarning messages
ignore,default:::mymodule    # Only report warnings triggered by "mymodule"
error:::mymodule             # Convert warnings to errors in "mymodule"
```

----------------------------------------

TITLE: Switching Languages Dynamically in Python with gettext
DESCRIPTION: This code shows how to support multiple languages simultaneously by creating separate translation instances and switching between them on demand. It creates translation objects for English, French, and German that can be installed as needed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/gettext.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
import gettext

lang1 = gettext.translation('myapplication', languages=['en'])
lang2 = gettext.translation('myapplication', languages=['fr'])
lang3 = gettext.translation('myapplication', languages=['de'])

# start by using language1
lang1.install()

# ... time goes by, user selects language 2
lang2.install()

# ... more time goes by, user selects language 3
lang3.install()
```

----------------------------------------

TITLE: Revealing Inferred Type with typing.reveal_type (Python)
DESCRIPTION: New function typing.reveal_type() is used to ask a type checker what type it has inferred for a given expression. At runtime it prints the type of the received value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.11.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
typing.reveal_type()
```

----------------------------------------

TITLE: Custom Enum Implementation with __new__
DESCRIPTION: Shows how to create a custom Enum class with additional attributes using __new__.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
>>> class Coordinate(bytes, Enum):
...     """
...     Coordinate with binary codes that can be indexed by the int code.
...     """
...     def __new__(cls, value, label, unit):
...         obj = bytes.__new__(cls, [value])
...         obj._value_ = value
...         obj.label = label
...         obj.unit = unit
...         return obj
...     PX = (0, 'P.X', 'km')
...     PY = (1, 'P.Y', 'km')
...     VX = (2, 'V.X', 'km/s')
...     VY = (3, 'V.Y', 'km/s')
```

----------------------------------------

TITLE: Implementing Basic Read-Eval-Print Loop in Python
DESCRIPTION: This example demonstrates a simple implementation of a read-eval-print loop using the traceback module for exception handling. It continuously prompts for user input, executes the code, and prints any exceptions that occur.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
import sys, traceback

def run_user_code(envdir):
    source = input(">>> ")
    try:
        exec(source, envdir)
    except Exception:
        print("Exception in user code:")
        print("-"*60)
        traceback.print_exc(file=sys.stdout)
        print("-"*60)

envdir = {}
while True:
    run_user_code(envdir)
```

----------------------------------------

TITLE: TypedDict Inheritance Rules
DESCRIPTION: Demonstrates valid and invalid inheritance scenarios for `TypedDict`. A `TypedDict` can inherit from other `TypedDict` classes but not from regular non-`TypedDict` classes (except `Generic`).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_158

LANGUAGE: python
CODE:
```
class X(TypedDict):
    x: int

class Y(TypedDict):
    y: int

class Z(object): pass  # A non-TypedDict class

class XY(X, Y): pass  # OK

class XZ(X, Z): pass  # raises TypeError
```

----------------------------------------

TITLE: Converting Time with asctime()
DESCRIPTION: Converts a tuple or struct_time to a formatted time string. Returns time in format 'Sun Jun 20 23:21:05 1993' with space-padded day field. Does not add trailing newline.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/time.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
asctime([t])
```

----------------------------------------

TITLE: Simulating Type Metaclass for Member Management
DESCRIPTION: This snippet defines the Type metaclass that adds member descriptors for attribute slots during class creation. It emulates C behavior by initializing member objects based on a mapping of slot names.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_33

LANGUAGE: Python
CODE:
```
class Type(type):
    'Simulate how the type metaclass adds member objects for slots'

    def __new__(mcls, clsname, bases, mapping, **kwargs):
        'Emulate type_new() in Objects/typeobject.c'
        # type_new() calls PyTypeReady() which calls add_methods()
        slot_names = mapping.get('slot_names', [])
        for offset, name in enumerate(slot_names):
            mapping[name] = Member(name, clsname, offset)
        return type.__new__(mcls, clsname, bases, mapping, **kwargs)
```

----------------------------------------

TITLE: Identifying Treeview Element in Python
DESCRIPTION: Returns the element of the Treeview at the specified coordinates (x, y).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_34

LANGUAGE: python
CODE:
```
identify_element(x, y)
```

----------------------------------------

TITLE: Using Fallback Values with ConfigParser in Python
DESCRIPTION: Demonstrates how to provide fallback values when reading configuration options that might not exist, using both section-level and parser-level methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> topsecret.get('Port')
'50022'
>>> topsecret.get('CompressionLevel')
'9'
>>> topsecret.get('Cipher')
>>> topsecret.get('Cipher', '3des-cbc')
'3des-cbc'
>>> topsecret.get('CompressionLevel', '3')
'9'
>>> config.get('forge.example', 'monster',
...            fallback='No such things as monsters')
'No such things as monsters'
>>> 'BatchMode' in topsecret
False
>>> topsecret.getboolean('BatchMode', fallback=True)
True
>>> config['DEFAULT']['BatchMode'] = 'no'
>>> topsecret.getboolean('BatchMode', fallback=True)
False
```

----------------------------------------

TITLE: Dataclass Support in Python Enum
DESCRIPTION: Shows how to use dataclasses with Enum, demonstrating how the __repr__ method is modified to omit the inherited class name.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
>>> from dataclasses import dataclass, field
>>> @dataclass
... class CreatureDataMixin:
...     size: str
...     legs: int
...     tail: bool = field(repr=False, default=True)
...
>>> class Creature(CreatureDataMixin, Enum):
...     BEETLE = 'small', 6
...     DOG = 'medium', 4
...
>>> Creature.DOG
<Creature.DOG: size='medium', legs=4>
```

----------------------------------------

TITLE: Defining MultipartInvariantViolationDefect exception
DESCRIPTION: The MultipartInvariantViolationDefect exception indicates that a message claimed to be a multipart, but no subparts were found within it. When a message has this defect, its is_multipart method might return False, even if its content type suggests otherwise.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.errors.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```

.. exception:: MultipartInvariantViolationDefect

   A message claimed to be a :mimetype:`multipart`, but no subparts were found.
   Note that when a message has this defect, its
   :meth:`~email.message.Message.is_multipart` method may return ``False``
   even though its content type claims to be :mimetype:`multipart`.

```

----------------------------------------

TITLE: Continuing Until Line - Pdb - Python
DESCRIPTION: Without arguments, continues execution until a line number greater than the current one is reached. With a line number argument, continues execution until that specific line number or a line greater than it is reached.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_18



----------------------------------------

TITLE: Defining MultipartConversionError exception
DESCRIPTION: The MultipartConversionError exception is raised when the attach method is called on an instance of a class derived from MIMENonMultipart (e.g., MIMEImage). It multiply inherits from MessageError and the built-in TypeError.  It indicates an attempt to attach content to a non-multipart message part.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.errors.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```

.. exception:: MultipartConversionError()

   Raised if the :meth:`~email.message.Message.attach` method is called
   on an instance of a class derived from
   :class:`~email.mime.nonmultipart.MIMENonMultipart` (e.g.
   :class:`~email.mime.image.MIMEImage`).
   :exc:`MultipartConversionError` multiply
   inherits from :exc:`MessageError` and the built-in :exc:`TypeError`.

```

----------------------------------------

TITLE: Handling ProtocolError in XML-RPC Communication
DESCRIPTION: This example demonstrates how to handle ProtocolError in XML-RPC by intentionally providing an invalid URI and catching the resulting error.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xmlrpc.client.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
import xmlrpc.client

# create a ServerProxy with a URI that doesn't respond to XMLRPC requests
proxy = xmlrpc.client.ServerProxy("http://google.com/")

try:
    proxy.some_method()
except xmlrpc.client.ProtocolError as err:
    print("A protocol error occurred")
    print("URL: %s" % err.url)
    print("HTTP/HTTPS headers: %s" % err.headers)
    print("Error code: %d" % err.errcode)
    print("Error message: %s" % err.errmsg)
```

----------------------------------------

TITLE: Testing Python Descriptor Invocation with super()
DESCRIPTION: Uses doctest examples to verify how Python invokes descriptors during attribute access, particularly demonstrating the equivalence between accessing a base class descriptor via `super(A, a).x` and directly calling the descriptor's `__get__` method from the base class's dictionary. Relies on the class definitions provided in the preceding hidden test code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_10

LANGUAGE: python
CODE:
```
>>> a = A()
>>> a.__class__.__mro__.index(B) > a.__class__.__mro__.index(A)
True
>>> super(A, a).x == B.__dict__['x'].__get__(a, A)
True
>>> a.m()
True
```

----------------------------------------

TITLE: Python WeakRef and __del__ Usage Implications
DESCRIPTION: Demonstrates the conceptual usage of __del__ methods and weak references in Python, highlighting potential memory leak scenarios when weak references interact with cyclic data structures.
SOURCE: https://github.com/python/cpython/blob/main/Modules/gc_weakref.txt#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
__del__
```

----------------------------------------

TITLE: Single Worker ThreadPoolExecutor Deadlock Example
DESCRIPTION: Shows how deadlocks can occur with a single worker thread waiting on its own future.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/concurrent.futures.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
def wait_on_future():
    f = executor.submit(pow, 5, 2)
    # This will never complete because there is only one worker thread and
    # it is executing this function.
    print(f.result())

executor = ThreadPoolExecutor(max_workers=1)
executor.submit(wait_on_future)
```

----------------------------------------

TITLE: Retrieving Package Metadata Object (Python)
DESCRIPTION: Demonstrates using the `metadata()` function from `importlib.metadata`. When called with a distribution package name ('wheel'), it returns a `PackageMetadata` object containing all the core metadata fields for that installed package.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_13

LANGUAGE: Python Console
CODE:
```
>>> wheel_metadata = metadata('wheel')  # doctest: +SKIP
```

----------------------------------------

TITLE: Extracting Unique Adjacent Elements with Unique_justseen Function in Python
DESCRIPTION: Illustrates the use of unique_justseen to extract unique, adjacent elements from a sequence. Examines case folding and lazy consumption.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_84

LANGUAGE: Python
CODE:
```
>>> list(unique_justseen('AAAABBBCCDAABBB'))
['A', 'B', 'C', 'D', 'A', 'B']
>>> list(unique_justseen('ABBCcAD', str.casefold))
['A', 'B', 'C', 'A', 'D']
>>> list(unique_justseen('ABBcCAD', str.casefold))
['A', 'B', 'c', 'A', 'D']
>>> # Verify that the input is consumed lazily
>>> input_iterator = iter('AAAABBBCCDAABBB')
>>> output_iterator = unique_justseen(input_iterator)
>>> next(output_iterator)
'A'
>>> ''.join(input_iterator)
'AAABBBCCDAABBB'
```

----------------------------------------

TITLE: Extended Interactive Console with History Support
DESCRIPTION: Extends the code.InteractiveConsole class to add history support with tab completion. Implements history file management with automatic save/restore and a 1000 entry limit.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/readline.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
import atexit
import code
import os
import readline

class HistoryConsole(code.InteractiveConsole):
    def __init__(self, locals=None, filename="<console>",
                 histfile=os.path.expanduser("~/.console-history")):
        code.InteractiveConsole.__init__(self, locals, filename)
        self.init_history(histfile)

    def init_history(self, histfile):
        readline.parse_and_bind("tab: complete")
        if hasattr(readline, "read_history_file"):
            try:
                readline.read_history_file(histfile)
            except FileNotFoundError:
                pass
            atexit.register(self.save_history, histfile)

    def save_history(self, histfile):
        readline.set_history_length(1000)
        readline.write_history_file(histfile)
```

----------------------------------------

TITLE: Executing Python Code with the exec Function
DESCRIPTION: The exec function executes a provided string or code object. It's suitable for dynamic execution of code but bears security risks when using untrusted input. The global and local variables are defined by the provided globals and locals mappings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_9



----------------------------------------

TITLE: Programmatic Usage of Python trace Module
DESCRIPTION: Shows how to use the trace module programmatically to create a Trace object, run a command, and generate a coverage report. It demonstrates setting up ignored directories and configuring tracing options.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/trace.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import sys
import trace

# create a Trace object, telling it what to ignore, and whether to
# do tracing or line-counting or both.
tracer = trace.Trace(
    ignoredirs=[sys.prefix, sys.exec_prefix],
    trace=0,
    count=1)

# run the new command using the given tracer
tracer.run('main()')

# make a report, placing output in the current directory
r = tracer.results()
r.write_results(show_missing=True, coverdir=".")
```

----------------------------------------

TITLE: Debugging Interactive Python Session Example
DESCRIPTION: Demonstrates debugging a doctest example using pdb.set_trace() with a simple function that performs multiplication and printing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/doctest.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
"""\n>>> def f(x):\n...     g(x*2)\n>>> def g(x):\n...     print(x+3)\n...     import pdb; pdb.set_trace()\n>>> f(3)\n9\n"""
```

----------------------------------------

TITLE: Adding TLS Version Control to SSLContext
DESCRIPTION: TLSVersion constants and SSLContext.maximum_version / minimum_version attributes have been added. This new API wraps OpenSSL 1.1 features for TLS version control.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.7.0b2.rst#2025-04-21_snippet_34



----------------------------------------

TITLE: Get Object Length (C API)
DESCRIPTION: Returns the length of object `o`. If `o` supports the sequence or mapping protocols, the sequence length is returned. Returns -1 on error. This is the C API equivalent of the Python expression `len(o)`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/object.rst#_snippet_39

LANGUAGE: c
CODE:
```
Py_ssize_t PyObject_Size(PyObject *o)
```

LANGUAGE: c
CODE:
```
Py_ssize_t PyObject_Length(PyObject *o)
```

----------------------------------------

TITLE: TypedDict Class Syntax Limitation (Invalid Keys)
DESCRIPTION: Provides an example of how the class-based `TypedDict` syntax fails with a `SyntaxError` when attempting to use keys that are not valid Python identifiers, such as keywords or names with hyphens.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_149

LANGUAGE: python
CODE:
```
# raises SyntaxError
class Point2D(TypedDict):
    in: int  # 'in' is a keyword
    x-y: int  # name with hyphens
```

----------------------------------------

TITLE: Using Assignment Expressions with Regular Expressions in Python
DESCRIPTION: This snippet shows how to utilize the walrus operator to assign and use match objects from a regular expression search without needing to call the search function multiple times.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
if (mo := re.search(r'(\d+)% discount', advertisement)):
    discount = float(mo.group(1)) / 100.0
```

----------------------------------------

TITLE: Implementing a LogRecord Socket Receiver Server in Python
DESCRIPTION: Provides a complete implementation of a TCP server that receives and processes log records sent over a network. The server uses socketserver, handles multiple concurrent connections, and processes pickled LogRecord objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
import pickle
import logging
import logging.handlers
import socketserver
import struct


class LogRecordStreamHandler(socketserver.StreamRequestHandler):
    """Handler for a streaming logging request.

    This basically logs the record using whatever logging policy is
    configured locally.
    """

    def handle(self):
        """
        Handle multiple requests - each expected to be a 4-byte length,
        followed by the LogRecord in pickle format. Logs the record
        according to whatever policy is configured locally.
        """
        while True:
            chunk = self.connection.recv(4)
            if len(chunk) < 4:
                break
            slen = struct.unpack('>L', chunk)[0]
            chunk = self.connection.recv(slen)
            while len(chunk) < slen:
                chunk = chunk + self.connection.recv(slen - len(chunk))
            obj = self.unPickle(chunk)
            record = logging.makeLogRecord(obj)
            self.handleLogRecord(record)

    def unPickle(self, data):
        return pickle.loads(data)

    def handleLogRecord(self, record):
        # if a name is specified, we use the named logger rather than the one
        # implied by the record.
        if self.server.logname is not None:
            name = self.server.logname
        else:
            name = record.name
        logger = logging.getLogger(name)
        # N.B. EVERY record gets logged. This is because Logger.handle
        # is normally called AFTER logger-level filtering. If you want
        # to do filtering, do it at the client end to save wasting
        # cycles and network bandwidth!
        logger.handle(record)

class LogRecordSocketReceiver(socketserver.ThreadingTCPServer):
    """
    Simple TCP socket-based logging receiver suitable for testing.
    """

    allow_reuse_address = True

    def __init__(self, host='localhost',
                 port=logging.handlers.DEFAULT_TCP_LOGGING_PORT,
                 handler=LogRecordStreamHandler):
        socketserver.ThreadingTCPServer.__init__(self, (host, port), handler)
        self.abort = 0
        self.timeout = 1
        self.logname = None

    def serve_until_stopped(self):
        import select
        abort = 0
        while not abort:
            rd, wr, ex = select.select([self.socket.fileno()],
                                      [], [],
                                      self.timeout)
            if rd:
                self.handle_request()
            abort = self.abort

def main():
    logging.basicConfig(
        format='%(relativeCreated)5d %(name)-15s %(levelname)-8s %(message)s')
    tcpserver = LogRecordSocketReceiver()
    print('About to start TCP server...')
    tcpserver.serve_until_stopped()

if __name__ == '__main__':
    main()
```

----------------------------------------

TITLE: Waiting for Specific Child Process in Python
DESCRIPTION: The waitpid() function waits for completion of a specific child process given by its process id. It returns a tuple containing the process id and exit status. The behavior differs slightly between Unix and Windows platforms.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_77

LANGUAGE: python
CODE:
```
def waitpid(pid, options, /):
    # Function implementation
```

----------------------------------------

TITLE: Getting Filesystem Encoding in Python
DESCRIPTION: Returns the filesystem encoding used to convert between Unicode and bytes filenames. Works in conjunction with the filesystem error handler.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sys.rst#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
getfilesystemencoding()
```

----------------------------------------

TITLE: Using the Standard BasicContext for Error Trapping (Python)
DESCRIPTION: Sets the active context to `BasicContext`, which has various traps enabled by default. Performing division by zero under this context raises a `DivisionByZero` exception, demonstrating its suitability for debugging.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_10

LANGUAGE: python
CODE:
```
setcontext(BasicContext)
Decimal(42) / Decimal(0)
```

----------------------------------------

TITLE: Using itertools.tee for Iterator Replication
DESCRIPTION: Demonstration of itertools.tee function which creates multiple independent iterators from a single iterator.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
>>> L = [1,2,3]
>>> i1, i2 = itertools.tee(L)
>>> i1,i2
(<itertools.tee object at 0x402c2080>, <itertools.tee object at 0x402c2090>)
>>> list(i1)               # Run the first iterator to exhaustion
[1, 2, 3]
>>> list(i2)               # Run the second iterator to exhaustion
[1, 2, 3]
```

----------------------------------------

TITLE: Creating FileCookieJar Class in Python
DESCRIPTION: The FileCookieJar class extends CookieJar to allow loading and saving cookies to a disk file. It requires a filename and policy object, where cookies are not loaded until load or revert methods are called.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.cookiejar.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
class FileCookieJar(CookieJar):
    def __init__(self, filename=None, delayload=None, policy=None):
        super().__init__(policy)
        self.filename = filename
```

----------------------------------------

TITLE: Demonstrating Segmentation Fault with faulthandler (shell-session)
DESCRIPTION: This snippet demonstrates the difference in output when a segmentation fault occurs in a Python script, first without the faulthandler enabled (showing only 'Segmentation fault'), and then with the faulthandler enabled using the '-X faulthandler' command line option, which outputs a detailed fatal error message and Python traceback.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/faulthandler.rst#_snippet_0

LANGUAGE: shell-session
CODE:
```
$ python -c "import ctypes; ctypes.string_at(0)"
Segmentation fault

$ python -q -X faulthandler
>>> import ctypes
>>> ctypes.string_at(0)
Fatal Python error: Segmentation fault

Current thread 0x00007fb899f39700 (most recent call first):
  File "/home/python/cpython/Lib/ctypes/__init__.py", line 486 in string_at
  File "<stdin>", line 1 in <module>
Segmentation fault
```

----------------------------------------

TITLE: Parsing Function Definition in Python AST
DESCRIPTION: This example parses a complex function definition including decorators, various argument types (positional, keyword-only, vararg, kwarg), default values, and a return annotation. The `ast.dump` output details the structure of the `FunctionDef` node, its `arguments` node, and related `arg`, `Constant`, and `Name` nodes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_53

LANGUAGE: python
CODE:
```
>>> print(ast.dump(ast.parse("""
... @decorator1
... @decorator2
... def f(a: 'annotation', b=1, c=2, *d, e, f=3, **g) -> 'return annotation':
...     pass
... """, indent=4))
Module(
    body=[
        FunctionDef(
            name='f',
            args=arguments(
                args=[
                    arg(
                        arg='a',
                        annotation=Constant(value='annotation')),
                    arg(arg='b'),
                    arg(arg='c')],
                vararg=arg(arg='d'),
                kwonlyargs=[
                    arg(arg='e'),
                    arg(arg='f')],
                kw_defaults=[
                    None,
                    Constant(value=3)],
                kwarg=arg(arg='g'),
                defaults=[
                    Constant(value=1),
                    Constant(value=2)]),
            body=[
                Pass()],
            decorator_list=[
                Name(id='decorator1', ctx=Load()),
                Name(id='decorator2', ctx=Load())],
            returns=Constant(value='return annotation'))])
```

----------------------------------------

TITLE: Using namedtuple with module argument in Python
DESCRIPTION: Example showing how to use the collections.namedtuple() function with the new optional module keyword argument for customizing the __module__ attribute of the returned named tuple class.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.6.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
>>> from enum import Enum, auto
>>> class Color(Enum):
...     red = auto()
...     blue = auto()
...     green = auto()
...
>>> list(Color)
[<Color.red: 1>, <Color.blue: 2>, <Color.green: 3>]
```

----------------------------------------

TITLE: End Allowing Threads (Acquire GIL) C Macro
DESCRIPTION: This macro expands to C code that restores the previously saved thread state and reacquires the Global Interpreter Lock (GIL). It is used to resume execution of Python code after a section that was allowed to run without the GIL. It must be paired with a preceding `Py_BEGIN_ALLOW_THREADS` macro.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/init.rst#_snippet_29

LANGUAGE: C
CODE:
```
PyEval_RestoreThread(_save); }
```

----------------------------------------

TITLE: Tarfile Extraction Filter Example
DESCRIPTION: New filter parameter added to tarfile extraction methods and shutil.unpack_archive to limit potentially dangerous tar features. Will show DeprecationWarning in Python 3.12 if used without filter argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_29

LANGUAGE: python
CODE:
```
tarfile.extraction_methods(filter='data')
shutil.unpack_archive(..., filter='data')
```

----------------------------------------

TITLE: Creating a Basic Formatter with Style Parameter
DESCRIPTION: Example of creating a Formatter with a style parameter. This shows an incorrect usage that would raise a ValueError since the format string uses '%' style but the style parameter specifies '{' style.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
logging.Formatter('%(asctime)s - %(message)s', style='{')
```

----------------------------------------

TITLE: Basic Topological Sort Example in Python
DESCRIPTION: Demonstrates basic usage of TopologicalSorter to sort a simple directed acyclic graph.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/graphlib.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
graph = {"D": {"B", "C"}, "C": {"A"}, "B": {"A"}}
ts = TopologicalSorter(graph)
tuple(ts.static_order())
```

----------------------------------------

TITLE: Generating Kernel Density Estimation in Python
DESCRIPTION: This snippet demonstrates how to use the kde function to generate a probability density function estimated from a small sample. It creates sample data, applies kde, and generates x and y values for plotting.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> sample = [-2.1, -1.3, -0.4, 1.9, 5.1, 6.2]
>>> f_hat = kde(sample, h=1.5)
>>> xarr = [i/100 for i in range(-750, 1100)]
>>> yarr = [f_hat(x) for x in xarr]
```

----------------------------------------

TITLE: Implementing Asynchronous Context Management with AsyncExitStack
DESCRIPTION: This snippet showcases the use of AsyncExitStack for managing asynchronous context managers and coroutines, emphasizing proper resource cleanup with awaitables.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextlib.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
async with AsyncExitStack() as stack:\n    connections = [await stack.enter_async_context(get_connection()) for i in range(5)]\n    # All opened connections will automatically be released at the end of\n    # the async with statement, even if attempts to open a connection\n    # later in the list raise an exception.
```

----------------------------------------

TITLE: Using splitlines() Method in Python Bytes
DESCRIPTION: Shows how to split a bytes sequence into lines at ASCII line boundaries with optional line endings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_61

LANGUAGE: python
CODE:
```
>>> b'ab c\n\nde fg\rkl\r\n'.splitlines()
[b'ab c', b'', b'de fg', b'kl']
>>> b'ab c\n\nde fg\rkl\r\n'.splitlines(keepends=True)
[b'ab c\n', b'\n', b'de fg\r', b'kl\r\n']
```

----------------------------------------

TITLE: Calculating Euclidean Distance in Python
DESCRIPTION: This function computes the Euclidean distance between two points p and q, useful in geometry and various mathematical applications involving distance calculations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/math.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
.. function:: dist(p, q)

   Return the Euclidean distance between two points *p* and *q*, each
   given as a sequence (or iterable) of coordinates.  The two points
   must have the same dimension.
```

----------------------------------------

TITLE: Pattern Matching with Named Constants
DESCRIPTION: Demonstrates pattern matching using enum constants. Shows how to match against specific enum values using dotted names.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
from enum import Enum
class Color(Enum):
    RED = 0
    GREEN = 1
    BLUE = 2

color = Color.GREEN
match color:
    case Color.RED:
        print("I see red!")
    case Color.GREEN:
        print("Grass is green")
    case Color.BLUE:
        print("I'm feeling the blues :(")
```

----------------------------------------

TITLE: Reconstructing Floating-Point Values from Hexadecimal in Python
DESCRIPTION: Shows how to exactly recreate a floating-point value from its hexadecimal representation, useful for cross-platform and cross-language value exchange.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/floatingpoint.rst#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
>>> x == float.fromhex('0x1.921f9f01b866ep+1')
True
```

----------------------------------------

TITLE: Forking a child process in Python
DESCRIPTION: The `fork()` function creates a child process. It returns 0 in the child process and the child's process ID in the parent process. An OSError is raised if an error occurs. There are limitations and warnings associated with using fork in multithreaded applications.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_63

LANGUAGE: python
CODE:
```
.. function:: fork()

   Fork a child process.  Return ``0`` in the child and the child's process id in the
   parent.  If an error occurs :exc:`OSError` is raised.

   Note that some platforms including FreeBSD <= 6.3 and Cygwin have
   known issues when using ``fork()`` from a thread.

   .. audit-event:: os.fork "" os.fork

   .. warning::

      If you use TLS sockets in an application calling ``fork()``, see
      the warning in the :mod:`ssl` documentation.

   .. warning::

      On macOS the use of this function is unsafe when mixed with using
      higher-level system APIs, and that includes using :mod:`urllib.request`.

   .. versionchanged:: 3.8
      Calling ``fork()`` in a subinterpreter is no longer supported
      (:exc:`RuntimeError` is raised).

   .. versionchanged:: 3.12
      If Python is able to detect that your process has multiple
      threads, :func:`os.fork` now raises a :exc:`DeprecationWarning`.

      We chose to surface this as a warning, when detectable, to better
      inform developers of a design problem that the POSIX platform
      specifically notes as not supported. Even in code that
      *appears* to work, it has never been safe to mix threading with
      :func:`os.fork` on POSIX platforms. The CPython runtime itself has
      always made API calls that are not safe for use in the child
      process when threads existed in the parent (such as ``malloc`` and
      ``free``).

      Users of macOS or users of libc or malloc implementations other
      than those typically found in glibc to date are among those
      already more likely to experience deadlocks running such code.

      See `this discussion on fork being incompatible with threads
      <https://discuss.python.org/t/33555>`_
      for technical details of why we're surfacing this longstanding
      platform compatibility problem to developers.

   .. availability:: POSIX, not WASI, not Android, not iOS.

```

----------------------------------------

TITLE: Working with time objects and custom time zones in Python
DESCRIPTION: Comprehensive example showing how to create and use custom tzinfo classes with time objects. Demonstrates initialization, formatting, and accessing timezone information from time objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_25

LANGUAGE: python
CODE:
```
>>> from datetime import time, tzinfo, timedelta
>>> class TZ1(tzinfo):
...     def utcoffset(self, dt):
...         return timedelta(hours=1)
...     def dst(self, dt):
...         return timedelta(0)
...     def tzname(self,dt):
...         return "+01:00"
...     def  __repr__(self):
...         return f"{self.__class__.__name__}()"
...
>>> t = time(12, 10, 30, tzinfo=TZ1())
>>> t
datetime.time(12, 10, 30, tzinfo=TZ1())
>>> t.isoformat()
'12:10:30+01:00'
>>> t.dst()
datetime.timedelta(0)
>>> t.tzname()
'+01:00'
>>> t.strftime("%H:%M:%S %Z")
'12:10:30 +01:00'
>>> 'The {} is {:%H:%M}.'.format("time", t)
'The time is 12:10.'
```

----------------------------------------

TITLE: Custom Python Test Suite Construction
DESCRIPTION: Demonstrates manual construction of a test suite with specific test case selection.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
def suite():
    suite = unittest.TestSuite()
    suite.addTest(WidgetTestCase('test_default_widget_size'))
    suite.addTest(WidgetTestCase('test_widget_resize'))
    return suite

if __name__ == '__main__':
    runner = unittest.TextTestRunner()
    runner.run(suite())
```

----------------------------------------

TITLE: Running perf with JIT Support in Shell
DESCRIPTION: This snippet demonstrates how to use the perf tool with JIT support to profile a Python script. Dependencies include Python and a compatible version of perf (v6.8 or higher). Key commands involve recording the profile data, injecting JIT information, and generating a report. The inputs are Python script names, while the outputs include profile data and reports. Ensure correct stack size configuration for accurate profiling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/perf_profiling.rst#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
$ perf record -F 9999 -g -k 1 --call-graph dwarf -o perf.data python -Xperf_jit my_script.py
$ perf inject -i perf.data --jit --output perf.jit.data
$ perf report -g -i perf.jit.data
```

----------------------------------------

TITLE: Using Callable Ellipsis for Any Parameters in Python
DESCRIPTION: Shows how to use the ellipsis (`...`) in the argument list of `Callable` to signify that the callable accepts any number and type of arguments, while still specifying the return type.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_11

LANGUAGE: Python
CODE:
```
def concat(x: str, y: str) -> str:
    return x + y

x: Callable[..., str]
x = str     # OK
x = concat  # Also OK
```

----------------------------------------

TITLE: Using print_tb to display stack trace from traceback object
DESCRIPTION: Prints up to a specified number of stack trace entries from a traceback object. The limit parameter controls how many entries to show, and output can be directed to a specific file.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
print_tb(tb, limit=None, file=None)
```

----------------------------------------

TITLE: Dumping AST for Class Definition (Python)
DESCRIPTION: This snippet demonstrates parsing a Python class definition string into an Abstract Syntax Tree (AST) and then printing the generated AST structure using `ast.dump` with indentation for readability. It shows how decorators, bases, keywords (like `metaclass`), and the class body are represented in the AST. Requires the `ast` module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_59

LANGUAGE: python
CODE:
```
print(ast.dump(ast.parse("""\
@decorator1\
@decorator2\
class Foo(base1, base2, metaclass=meta):\
    pass\
"""), indent=4))
```

----------------------------------------

TITLE: Creating a PrettyPrinter instance - Python
DESCRIPTION: The PrettyPrinter class can be instantiated with custom parameters for indent, width, depth, and stream. It consolidates formatting capabilities for printing complex data structures.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pprint.rst#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
class PrettyPrinter:
    def __init__(self, indent=1, width=80, depth=None, stream=None, *, compact=False, sort_dicts=True, underscore_numbers=False):
        Construct a :class:`PrettyPrinter` instance.
```

----------------------------------------

TITLE: Importing Modules Programmatically in Python
DESCRIPTION: Demonstrates how to use importlib.import_module() to programmatically import a module. This example imports the 'itertools' module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
import importlib

itertools = importlib.import_module('itertools')
```

----------------------------------------

TITLE: Transforming List into Heap - Python
DESCRIPTION: The `heapify` function transforms a list into a heap in-place, operating in linear time. This is crucial for converting arbitrary lists into a valid heap structure.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/heapq.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
def heapify(x):
    """
    Transform list *x* into a heap, in-place, in linear time.
    """
```

----------------------------------------

TITLE: Stack Trace Management in Python Debugger
DESCRIPTION: Methods to retrieve and format stack trace information, including getting a list of frames and line numbers, and formatting stack entries with filename, function name, arguments, return value, and code line.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/bdb.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
get_stack(f, t)
format_stack_entry(frame_lineno, lprefix=': ')
```

----------------------------------------

TITLE: Autospec with Alternative Object - Python
DESCRIPTION: Illustrates how to use an alternative object (a subclass with defaults) as the spec for autospec to avoid modifying production classes. The `patch` function is used to replace the original class with a mock that adheres to the specified spec, preserving the expected API.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_62

LANGUAGE: python
CODE:
```
>>> class Something:
...   def __init__(self):
...     self.a = 33
...
>>> class SomethingForTest(Something):
...   a = 33
...
>>> p = patch('__main__.Something', autospec=SomethingForTest)
>>> mock = p.start()
>>> mock.a
<NonCallableMagicMock name='Something.a' spec='int' id='...'>
```

----------------------------------------

TITLE: Inspecting IP Objects in Python
DESCRIPTION: Shows various methods for inspecting IP address, network, and interface objects including version checking, network extraction, and address counting.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/ipaddress.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> addr4 = ipaddress.ip_address('192.0.2.1')
>>> addr6 = ipaddress.ip_address('2001:db8::1')
>>> addr6.version
6
>>> net4 = ipaddress.ip_network('192.0.2.0/24')
>>> net4.num_addresses
256
```

----------------------------------------

TITLE: Creating an Internationalized Email Header with Python
DESCRIPTION: This snippet demonstrates how to include non-ASCII characters in an email header using the Header class from the email.header module, specifying the character set for encoding. It ensures the header is properly encoded following RFC 2047 standards for MIME-aware readers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.header.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from email.message import Message
from email.header import Header
msg = Message()
h = Header('p\xf6stal', 'iso-8859-1')
msg['Subject'] = h
msg.as_string()  # Output: 'Subject: =?iso-8859-1?q?p=F6stal?=\n\n'
```

----------------------------------------

TITLE: Writing XML Output with ElementTree
DESCRIPTION: Examples of writing XML output to a file using ElementTree.write() method. Demonstrates both default ASCII encoding and specifying UTF-8 encoding with file objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_37

LANGUAGE: python
CODE:
```
# Encoding is US-ASCII
tree.write('output.xml')

# Encoding is UTF-8
f = open('output.xml', 'w')
tree.write(f, encoding='utf-8')
```

----------------------------------------

TITLE: Locating Absolute File Path with PackagePath - Python
DESCRIPTION: Explains how to use the `locate()` method on a `PackagePath` object to obtain the absolute path to the file on the filesystem as a `pathlib.Path` instance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_20

LANGUAGE: python
CODE:
```
>>> util.locate()  # doctest: +SKIP
PosixPath('/home/gustav/example/lib/site-packages/wheel/util.py')
```

----------------------------------------

TITLE: Formatting Only the Exception Part of a Traceback
DESCRIPTION: Formats just the exception message and notes without the full traceback. When show_group is True and the exception is a BaseExceptionGroup, it includes nested exceptions with indentation based on nesting depth.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
TracebackException.format_exception_only(*, show_group=False)
```

----------------------------------------

TITLE: Handling Ambiguous Arguments with Argparse in Python
DESCRIPTION: The snippet shows how to resolve argument ambiguity in argparse, especially when distinguishing between optional and positional arguments. The use of '--' specifies that any subsequent arguments are positional. No dependencies other than argparse are required.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/argparse.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('-n', nargs='+')
parser.add_argument('args', nargs='*')
# ambiguous, so parse_args assumes it's an option
parser.parse_args(['-f'])
# specify positional args with -- prefix
parser.parse_args(['--', '-f'])
# the -n option greedily accepts arguments
parser.parse_args(['-n', '1', '2', '3'])
parser.parse_args(['-n', '1', '--', '2', '3'])
```

----------------------------------------

TITLE: Apply 'data' Extraction Filter with Warning Fallback in tarfile - Python
DESCRIPTION: This snippet checks for the existence of `tarfile.data_filter` using `hasattr`. If found, it uses the 'data' filter name string with `extractall`. Otherwise, it executes the extraction without a modern filter (falling back to older, less safe behavior) and issues a warning to the user.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_22

LANGUAGE: Python
CODE:
```
if hasattr(tarfile, 'data_filter'):
       my_tarfile.extractall(filter='data')
   else:
       # remove this when no longer needed
       warn_the_user('Extracting may be unsafe; consider updating Python')
       my_tarfile.extractall()
```

----------------------------------------

TITLE: Demonstrating isinstance Check Behavior with Runtime-Checkable Protocols (Python)
DESCRIPTION: This snippet demonstrates how `isinstance` checks against runtime-checkable protocols behave when attributes are added to an object instance versus the protocol class itself. It shows that adding an attribute to the instance makes the check return True, while adding an attribute to the protocol class does not affect existing instances.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_21

LANGUAGE: Python
CODE:
```
>>> isinstance(f, HasX)
False
>>> f.x = 1
>>> isinstance(f, HasX)
True
>>> HasX.y = 2
>>> isinstance(f, HasX)  # unchanged, even though HasX now also has a "y" attribute
True
```

----------------------------------------

TITLE: Configuring QueueHandler with QueueListener - YAML Configuration - Python
DESCRIPTION: This YAML snippet illustrates how to configure a QueueHandler alongside a QueueListener. It details the structure for the dictionary schema necessary for the configuration, allowing the QueueHandler to utilize a QueueListener, with optional attributes like queue and listener.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.config.rst#2025-04-21_snippet_10

LANGUAGE: YAML
CODE:
```
handlers:
  qhand:
    class: logging.handlers.QueueHandler
    queue: my.module.queue_factory
    listener: my.package.CustomListener
    handlers:
      - hand_name_1
      - hand_name_2
      ...
```

----------------------------------------

TITLE: Checking for Specific Entry Point Name (Python)
DESCRIPTION: After selecting a subset of entry points (e.g., by group), this snippet shows how to access the `.names` attribute of the resulting `EntryPoints` object, which provides a collection of names. The `in` operator is used to check if a specific entry point name ('wheel') exists within this filtered set.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_7

LANGUAGE: Python Console
CODE:
```
>>> 'wheel' in scripts.names  # doctest: +SKIP
True
```

----------------------------------------

TITLE: Querying Session Statistics with SSLContext
DESCRIPTION: This snippet demonstrates how to retrieve SSL session statistics (hits and misses) from an `SSLContext` object. The `session_stats()` method returns a dictionary containing the numeric values associated with each piece of information related to session management.  This can be useful for monitoring and tuning SSL/TLS performance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```

      >>> stats = context.session_stats()
      >>> stats['hits'], stats['misses']
      (0, 0)

```

----------------------------------------

TITLE: Implementing the 'backslashreplace' Codec Error Handling in Python
DESCRIPTION: Implements the 'backslashreplace' error handling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/codecs.rst#_snippet_15

LANGUAGE: Python
CODE:
```
backslashreplace_errors(exception)
```

----------------------------------------

TITLE: Itertools Recipe: roundrobin function
DESCRIPTION: Function that visits input iterables in a cycle until each is exhausted, rotating through the active iterators.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_43

LANGUAGE: python
CODE:
```
def roundrobin(*iterables):
    "Visit input iterables in a cycle until each is exhausted."
    # roundrobin('ABC', 'D', 'EF') → A D E B F C
    # Algorithm credited to George Sakkis
    iterators = map(iter, iterables)
    for num_active in range(len(iterables), 0, -1):
        iterators = cycle(islice(iterators, num_active))
        yield from map(next, iterators)
```

----------------------------------------

TITLE: Using shutil.which() in Python
DESCRIPTION: Demonstrates the usage of shutil.which() function to locate an executable on the system path. The function returns the path to the executable if found, or None if not found.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/shutil.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> shutil.which("C:\\Python33\\python")
'C:\\Python33\\python.EXE'
```

----------------------------------------

TITLE: Generic Type Alias Example
DESCRIPTION: Code example showing usage of Type annotations with parentheses omitted but required
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.9.0b1.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
Type[(str, int, *other)]
```

----------------------------------------

TITLE: Defining Python C API Exception: PyExc_ModuleNotFoundError
DESCRIPTION: This code snippet defines the C API exception `PyExc_ModuleNotFoundError` and maps it to the Python `ModuleNotFoundError` class.  This allows C code involved in module loading to signal that a module was not found.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/exceptions.rst#2025-04-21_snippet_72

LANGUAGE: c
CODE:
```
":c:data:`PyExc_ModuleNotFoundError`     | :exc:`ModuleNotFoundError`      |          "
```

----------------------------------------

TITLE: Comparing Proxy Objects in Multiprocessing
DESCRIPTION: Shows how proxy objects don't support value-based comparison with regular Python objects. Demonstrates that direct equality comparison with equivalent non-proxy objects returns False.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_39

LANGUAGE: python
CODE:
```
>>> manager.list([1,2,3]) == [1,2,3]
False
```

----------------------------------------

TITLE: Using Parameterized User-Defined Generic Class
DESCRIPTION: Demonstrates how to use a user-defined generic class with a specific type parameter (e.g., `LoggedVar[int]`) in type annotations for functions or variables.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_29

LANGUAGE: python
CODE:
```
from collections.abc import Iterable

def zero_all_vars(vars: Iterable[LoggedVar[int]]) -> None:
    for var in vars:
        var.set(0)
```

----------------------------------------

TITLE: Illustrating Exception Handling with Isolated Modules in Python
DESCRIPTION: This Python code demonstrates that exceptions defined in different isolated module objects are not the same. It calls a function from one module object and attempts to catch an exception from another, which fails, highlighting the independence of the module objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/isolating-extensions.rst#2025-04-21_snippet_1

LANGUAGE: pycon
CODE:
```

   >>> old_binascii.Error == binascii.Error
   False
   >>> try:
   ...     old_binascii.unhexlify(b'qwertyuiop')
   ... except binascii.Error:
   ...     print('boo')
   ...
   Traceback (most recent call last):
     File "<stdin>", line 2, in <module>
   binascii.Error: Non-hexadecimal digit found

```

----------------------------------------

TITLE: SequenceMatcher Junk Example
DESCRIPTION: This example shows how to use a SequenceMatcher with a custom junk function to ignore whitespace when comparing strings. It defines a lambda function that identifies spaces as junk, initializes a SequenceMatcher with this function and two strings, and then calculates and prints the similarity ratio.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/difflib.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
>>> s = SequenceMatcher(lambda x: x == \" \",
...                     \"private Thread currentThread;\",
...                     \"private volatile Thread currentThread;\")
```

----------------------------------------

TITLE: New Garbage Collection API Implementation
DESCRIPTION: Introduces gc.freeze() API that moves tracked objects to a permanent generation to prevent future collection, improving copy-on-write stability during fork() operations.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.7.0a2.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
gc.freeze()
```

----------------------------------------

TITLE: Enhanced re.error Information
DESCRIPTION: This snippet exemplifies the improved context information provided by re.error exceptions, such as specific error messages and pattern details, to aid debugging regular expression issues.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_26

LANGUAGE: Python
CODE:
```
>>> re.compile("""
...     (?x)
...     .++
... """)
Traceback (most recent call last):
   ...
sre_constants.error: multiple repeat at position 16 (line 3, column 7)
```

----------------------------------------

TITLE: Calculating and Using Memory-Limited Precision for Decimals (Python)
DESCRIPTION: Provides an example of how to dynamically calculate a practical maximum precision based on available RAM for handling large, potentially inexact decimal numbers and demonstrates how the `Inexact` trap can be used to detect operations that exceed this precision.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_45

LANGUAGE: Python
CODE:
```
import sys

# Maximum number of digits for a single operand using 500MB in 8-byte words
# with 19 digits per word (4-byte and 9 digits for the 32-bit build):
maxdigits = 19 * ((500 * 1024**2) // 8)

# Check that this works:
c = Context(prec=maxdigits, Emax=MAX_EMAX, Emin=MIN_EMIN)
c.traps[Inexact] = True
setcontext(c)

# Fill the available precision with nines:
x = Decimal(0).logical_invert() * 9
sys.getsizeof(x)
x + 2
```

----------------------------------------

TITLE: Defining SMTPHandler Class for Email Logging in Python
DESCRIPTION: Implementation of the SMTPHandler class for sending logging messages via email using SMTP. Supports authentication, secure connections (TLS), and configurable timeout for SMTP server communication.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
class SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None, secure=None, timeout=1.0):
   """
   Returns a new instance of the SMTPHandler class. The instance is
   initialized with the from and to addresses and subject line of the email. The
   *toaddrs* should be a list of strings. To specify a non-standard SMTP port, use
   the (host, port) tuple format for the *mailhost* argument. If you use a string,
   the standard SMTP port is used. If your SMTP server requires authentication, you
   can specify a (username, password) tuple for the *credentials* argument.

   To specify the use of a secure protocol (TLS), pass in a tuple to the
   *secure* argument. This will only be used when authentication credentials are
   supplied. The tuple should be either an empty tuple, or a single-value tuple
   with the name of a keyfile, or a 2-value tuple with the names of the keyfile
   and certificate file. (This tuple is passed to the
   smtplib.SMTP.starttls method.)

   A timeout can be specified for communication with the SMTP server using the
   *timeout* argument.
   """
```

----------------------------------------

TITLE: Compressing Data with LZMA
DESCRIPTION: The compress method is utilized to compress a bytes object, returning compressed data as a bytes object. The method allows for various settings like format, integrity check, compression level, and filter options.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/lzma.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
def compress(data, format=FORMAT_XZ, check=-1, preset=None, filters=None):
    Compress *data* (a :class:`bytes` object), returning the compressed data as a
    :class:`bytes` object.

    See :class:`LZMACompressor` above for a description of the *format*, *check*,
    *preset* and *filters* arguments.
```

----------------------------------------

TITLE: Programmatically Extracting Python Configuration Values with sysconfig
DESCRIPTION: Python code example demonstrating how to use the sysconfig module to programmatically retrieve compilation and linking configuration values that might be needed when embedding Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/embedding.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> import sysconfig
>>> sysconfig.get_config_var('LIBS')
'-lpthread -ldl  -lutil'
>>> sysconfig.get_config_var('LINKFORSHARED')
'-Xlinker -export-dynamic'
```

----------------------------------------

TITLE: Creating TarInfo from Buffer in Python
DESCRIPTION: A class method that creates and returns a `TarInfo` object by parsing metadata from a string buffer `buf`. It uses the specified `encoding` and `errors` handling. This method is used internally or for parsing raw tar headers from a buffer. It raises `HeaderError` for invalid buffers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_10

LANGUAGE: python
CODE:
```
TarInfo.frombuf(buf, encoding, errors)
```

----------------------------------------

TITLE: Compiling DLL with Dependencies (C/C++)
DESCRIPTION: This command compiles a DLL named 'ni' that depends on functions from 'spam' and the Python executable, demonstrating linking with multiple libraries.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/windows.rst#2025-04-21_snippet_1

LANGUAGE: Shell
CODE:
```
cl /LD /I/python/include ni.c spam.lib
```

----------------------------------------

TITLE: ConfigParser Dictionary Operations Example
DESCRIPTION: Shows how to use dictionary operations with ConfigParser including section ordering and key access.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
>>> parser = configparser.ConfigParser()
>>> parser.read_dict({'section1': {'key1': 'value1',
...                                'key2': 'value2',
...                                'key3': 'value3'},
...                   'section2': {'keyA': 'valueA',
...                                'keyB': 'valueB',
...                                'keyC': 'valueC'},
...                   'section3': {'foo': 'x',
...                                'bar': 'y',
...                                'baz': 'z'}
... })
>>> parser.sections()
['section1', 'section2', 'section3']
>>> [option for option in parser['section3']]
['foo', 'bar', 'baz']
```

----------------------------------------

TITLE: Change Help Option Prefix Characters in argparse
DESCRIPTION: Shows how to change the characters used to prefix options, including the help option, by setting `prefix_chars`. The default '-' is replaced by '+' and '/' in this example, affecting how the help option is displayed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_20

LANGUAGE: Python
CODE:
```
import argparse

parser = argparse.ArgumentParser(prog='PROG', prefix_chars='+/')
parser.print_help()
```

----------------------------------------

TITLE: Enum Verification with EnumCheck in Python
DESCRIPTION: Illustrates using the verify decorator with different enum constraint checks like UNIQUE, CONTINUOUS, and NAMED_FLAGS
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/enum.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
from enum import Enum, verify, UNIQUE, CONTINUOUS, NAMED_FLAGS

@verify(UNIQUE)
class Color(Enum):
    RED = 1
    GREEN = 2
    BLUE = 3
    CRIMSON = 1  # This will raise a ValueError
```

----------------------------------------

TITLE: Customizing LogRecord Creation in Python Logging
DESCRIPTION: This snippet explains how to customize the creation of LogRecord instances in Python's logging framework by defining a custom factory that can extend and modify the standard LogRecord behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_28

LANGUAGE: Python
CODE:
```
old_factory = logging.getLogRecordFactory()

def record_factory(*args, **kwargs):
    record = old_factory(*args, **kwargs)
    record.custom_attribute = 0xdecafbad
    return record

logging.setLogRecordFactory(record_factory)
```

----------------------------------------

TITLE: Extracting TarFile Member in Python
DESCRIPTION: Extracts a single member from the archive to the specified path (defaulting to the current working directory). The `member` can be a filename or `TarInfo` object. File attributes are set unless `set_attrs` is false, and `numeric_owner` and `filter` control ownership handling and extraction policy. Note that this method doesn't handle all extraction issues and `extractall` is often preferred.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_0

LANGUAGE: python
CODE:
```
TarFile.extract(member, path="", set_attrs=True, *, numeric_owner=False, filter=None)
```

----------------------------------------

TITLE: Correlation Calculation - Pearson and Spearman
DESCRIPTION: Example of calculating both Pearson and Spearman correlation coefficients using astronomical data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
>>> orbital_period = [88, 225, 365, 687, 4331, 10_756, 30_687, 60_190]    # days
>>> dist_from_sun = [58, 108, 150, 228, 778, 1_400, 2_900, 4_500] # million km

>>> correlation(orbital_period, dist_from_sun, method='ranked')
1.0

>>> round(correlation(orbital_period, dist_from_sun), 4)
0.9882

>>> period_squared = [p * p for p in orbital_period]
>>> dist_cubed = [d * d * d for d in dist_from_sun]
>>> round(correlation(period_squared, dist_cubed), 4)
1.0
```

----------------------------------------

TITLE: New sys.breakpointhook Function in Python
DESCRIPTION: The new sys.breakpointhook function is introduced as a hook function. This hook is called by the built-in breakpoint function, allowing customization of breakpoint behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
sys
---

The new :func:`sys.breakpointhook` hook function is called by the
built-in :func:`breakpoint`.
(Contributed by Barry Warsaw in :issue:`31353`.)
```

----------------------------------------

TITLE: Reading into Buffer from File Descriptor (Python)
DESCRIPTION: The readinto() function reads from a file descriptor fd into a mutable bytes-like buffer object. It returns the number of bytes read, which may be less than the buffer size. This function is intended for low-level I/O on file descriptors returned by os.open() or os.pipe().
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
readinto(fd, buffer, /)
```

----------------------------------------

TITLE: Implementing compress function in Python
DESCRIPTION: Equivalent implementation of the compress function that filters elements from data returning only those where the corresponding element in selectors is true. Stops when either data or selectors is exhausted.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
def compress(data, selectors):
    # compress('ABCDEF', [1,0,1,0,1,1]) → A C E F
    return (datum for datum, selector in zip(data, selectors) if selector)
```

----------------------------------------

TITLE: Making an extension type generic in C
DESCRIPTION: This code snippet shows how to add the `__class_getitem__` method to an extension type using `Py_GenericAlias`. This allows the extension type to support generic type hints (e.g., `MyType[int]`). The method definition uses `METH_O|METH_CLASS` to indicate it's a class method that takes one argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/typehints.rst#2025-04-21_snippet_1

LANGUAGE: c
CODE:
```
 "...\nstatic PyMethodDef my_obj_methods[] = {\n    // Other methods.\n    ...\n    {\"__class_getitem__\", Py_GenericAlias, METH_O|METH_CLASS, \"See PEP 585\"}\n    ...\n}"
```

----------------------------------------

TITLE: Using TracebackException Class in Python
DESCRIPTION: This example showcases the usage of the TracebackException class for more advanced exception handling. It demonstrates features like limiting traceback depth, capturing local variables, and controlling the display of chained exceptions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
import sys
from traceback import TracebackException

def lumberjack():
    bright_side_of_life()

def bright_side_of_life():
    t = "bright", "side", "of", "life"
    return t[5]

try:
    lumberjack()
except IndexError as e:
    exc = e

try:
    try:
        lumberjack()
    except:
        1/0
except Exception as e:
    chained_exc = e

# limit works as with the module-level functions
TracebackException.from_exception(exc, limit=-2).print()

# capture_locals adds local variables in frames
TracebackException.from_exception(exc, limit=-2, capture_locals=True).print()

# The *chain* kwarg to print() controls whether chained
# exceptions are displayed
TracebackException.from_exception(chained_exc).print()

TracebackException.from_exception(chained_exc).print(chain=False)
```

----------------------------------------

TITLE: Coroutine Origin Tracking API in Python
DESCRIPTION: The sys module introduces new functions for coroutine origin tracking.  The get_coroutine_origin_tracking_depth function returns the tracking depth, which can be set using set_coroutine_origin_tracking_depth. The asyncio module has been updated to use this API.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
The new :func:`sys.get_coroutine_origin_tracking_depth` function returns
the current coroutine origin tracking depth, as set by
the new :func:`sys.set_coroutine_origin_tracking_depth`.  :mod:`asyncio`
has been converted to use this new API instead of
the deprecated :func:`sys.set_coroutine_wrapper`.
(Contributed by Nathaniel J. Smith in :issue:`32591`.)
```

----------------------------------------

TITLE: Accessing CPython Audit Events with sys.audit
DESCRIPTION: Reference to the sys.audit function which can be used to raise audit events in Python code. This function was introduced in Python 3.8 as part of PEP 578 to allow for security event notifications.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/audit_events.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
sys.audit
```

----------------------------------------

TITLE: Opening Files with Custom Directory Handler in Python
DESCRIPTION: Example showing how to use a custom opener function with open() to handle files in specific directories. Uses os.open() with dir_fd parameter for relative path operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
>>> import os
>>> dir_fd = os.open('somedir', os.O_RDONLY)
>>> def opener(path, flags):
...     return os.open(path, flags, dir_fd=dir_fd)
...
>>> with open('spamspam.txt', 'w', opener=opener) as f:
...     print('This will be written to somedir/spamspam.txt', file=f)
...
>>> os.close(dir_fd)  # don't leak a file descriptor
```

----------------------------------------

TITLE: Accessing Exact Floating-Point Representation with as_integer_ratio in Python
DESCRIPTION: Demonstrates how to get the exact fractional representation of a floating-point number using the as_integer_ratio method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/floatingpoint.rst#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> x = 3.14159
>>> x.as_integer_ratio()
(3537115888337719, 1125899906842624)
```

----------------------------------------

TITLE: Converting IPv4/IPv6 Addresses to String and Integer
DESCRIPTION: Demonstrates how to convert IPv4 and IPv6 addresses to strings and integers using the `str()` and `int()` functions.  Requires the `ipaddress` module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ipaddress.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
>>> str(ipaddress.IPv4Address('192.168.0.1'))
'192.168.0.1'
>>> int(ipaddress.IPv4Address('192.168.0.1'))
3232235521
>>> str(ipaddress.IPv6Address('::1'))
'::1'
>>> int(ipaddress.IPv6Address('::1'))
1
```

----------------------------------------

TITLE: Adding fromisocalendar methods to datetime.date and datetime.datetime in Python
DESCRIPTION: New alternate constructors fromisocalendar() have been added to datetime.date and datetime.datetime to create date objects from ISO calendar representations.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0a4.rst#2025-04-23_snippet_5

LANGUAGE: Python
CODE:
```
from datetime import date, datetime

d = date.fromisocalendar(2019, 1, 1)
dt = datetime.fromisocalendar(2019, 1, 1)
```

----------------------------------------

TITLE: Supporting Nullable Arguments in PyArg_ParseTuple C API
DESCRIPTION: Support added for nullable arguments in PyArg_ParseTuple and similar functions. Adding '?' after a format unit allows 'None' to be accepted as a valid value for that argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_44

LANGUAGE: C
CODE:
```
PyArg_ParseTuple
```

----------------------------------------

TITLE: TypedDict with NotRequired (Functional Syntax)
DESCRIPTION: Illustrates how to use the `NotRequired` type hint within the functional syntax for `TypedDict` to specify that a particular key is optional.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_154

LANGUAGE: python
CODE:
```
Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': NotRequired[str]})
```

----------------------------------------

TITLE: Demonstrating Faulthandler Module for Segmentation Fault in Python
DESCRIPTION: This example shows how to use the new faulthandler module to get Python tracebacks on segmentation faults. It demonstrates enabling faulthandler via command line option and then triggering a segmentation fault using ctypes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.3.rst#2025-04-21_snippet_9

LANGUAGE: shell
CODE:
```
$ python -q -X faulthandler
>>> import ctypes
>>> ctypes.string_at(0)
Fatal Python error: Segmentation fault

Current thread 0x00007fb899f39700:
  File "/home/python/cpython/Lib/ctypes/__init__.py", line 486 in string_at
  File "<stdin>", line 1 in <module>
Segmentation fault
```

----------------------------------------

TITLE: Implementing tp_new for Python Type Objects in C
DESCRIPTION: Signature for the instance creation function. This function creates new instances of the type and is responsible for allocation and initial setup of immutable objects. It is inherited by subtypes except for certain static types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/typeobj.rst#2025-04-21_snippet_41

LANGUAGE: c
CODE:
```
PyObject *tp_new(PyTypeObject *subtype, PyObject *args, PyObject *kwds);
```

----------------------------------------

TITLE: Using NormalDist Class from statistics Module in Python
DESCRIPTION: This snippet demonstrates the new NormalDist class in the statistics module, showing how to create normal distributions from samples, calculate probabilities, combine distributions, and generate random samples.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
>>> temperature_feb = NormalDist.from_samples([4, 12, -3, 2, 7, 14])
>>> temperature_feb.mean
6.0
>>> temperature_feb.stdev
6.356099432828281

>>> temperature_feb.cdf(3)            # Chance of being under 3 degrees
0.3184678262814532
>>> # Relative chance of being 7 degrees versus 10 degrees
>>> temperature_feb.pdf(7) / temperature_feb.pdf(10)
1.2039930378537762

>>> el_niño = NormalDist(4, 2.5)
>>> temperature_feb += el_niño        # Add in a climate effect
>>> temperature_feb
NormalDist(mu=10.0, sigma=6.830080526611674)

>>> temperature_feb * (9/5) + 32      # Convert to Fahrenheit
NormalDist(mu=50.0, sigma=12.294144947901014)
>>> temperature_feb.samples(3)        # Generate random samples
[7.672102882379219, 12.000027119750287, 4.647488369766392]
```

----------------------------------------

TITLE: Itertools Recipe: iter_index function
DESCRIPTION: Function that returns indices where a value occurs in a sequence or iterable, optimizing for sequences with an index method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_45

LANGUAGE: python
CODE:
```
def iter_index(iterable, value, start=0, stop=None):
    "Return indices where a value occurs in a sequence or iterable."
    # iter_index('AABCADEAF', 'A') → 0 1 4 7
    seq_index = getattr(iterable, 'index', None)
    if seq_index is None:
        iterator = islice(iterable, start, stop)
        for i, element in enumerate(iterator, start):
            if element is value or element == value:
                yield i
    else:
        stop = len(iterable) if stop is None else stop
        i = start
        with suppress(ValueError):
            while True:
                yield (i := seq_index(value, i, stop))
```

----------------------------------------

TITLE: Multi-Value Enum Implementation
DESCRIPTION: Custom Enum implementation that supports multiple values per enum member
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_30

LANGUAGE: python
CODE:
```
class MultiValueEnum(Enum):
    def __new__(cls, value, *values):
        self = object.__new__(cls)
        self._value_ = value
        for v in values:
            self._add_value_alias_(v)
        return self
```

----------------------------------------

TITLE: Quantiles Calculation with Custom Intervals
DESCRIPTION: Example of using quantiles() function to divide data into deciles with equal probability intervals.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
>>> data = [105, 129, 87, 86, 111, 111, 89, 81, 108, 92, 110,
...         100, 75, 105, 103, 109, 76, 119, 99, 91, 103, 129,
...         106, 101, 84, 111, 74, 87, 86, 103, 103, 106, 86,
...         111, 75, 87, 102, 121, 111, 88, 89, 101, 106, 95,
...         103, 107, 101, 81, 109, 104]
>>> [round(q, 1) for q in quantiles(data, n=10)]
[81.0, 86.2, 89.0, 99.4, 102.5, 103.6, 106.0, 109.8, 111.0]
```

----------------------------------------

TITLE: Creating a PyZipFile and filtering Python files during archive creation
DESCRIPTION: This snippet demonstrates creating a PyZipFile and using the writepy method with a filter function to selectively add Python files to the archive. The example excludes test directories and files that start with 'test_'.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/zipfile.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> zf = PyZipFile('myprog.zip')
>>> def notests(s):
...     fn = os.path.basename(s)
...     return (not (fn == 'test' or fn.startswith('test_')))
...
>>> zf.writepy('myprog', filterfunc=notests)
```

----------------------------------------

TITLE: Extended Custom Formatter Configuration
DESCRIPTION: Configuration dictionary showing custom formatter with additional attribute settings using the '.' special key.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.config.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
{
  '()' : 'my.package.customFormatterFactory',
  'bar' : 'baz',
  'spam' : 99.9,
  'answer' : 42,
  '.' {
    'foo': 'bar',
    'baz': 'bozz'
  }
}
```

----------------------------------------

TITLE: Demonstrating Octal and Binary Integer Literals in Python
DESCRIPTION: Shows the new syntax for octal (0o) and binary (0b) integer literals introduced in Python 2.6, along with the oct() and bin() builtin functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
>>> 0o21, 2*8 + 1
(17, 17)
>>> 0b101111
47

>>> oct(42)
'052'
>>> future_builtins.oct(42)
'0o52'
>>> bin(173)
'0b10101101'

>>> int ('0o52', 0)
42
>>> int('1101', 2)
13
>>> int('0b1101', 2)
13
>>> int('0b1101', 0)
13
```

----------------------------------------

TITLE: Creating Hello World GUI Application with Tkinter in Python
DESCRIPTION: A basic Tkinter application that creates a window with a greeting label and quit button. Demonstrates core concepts like widget creation, layout management, and event loops.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from tkinter import *
from tkinter import ttk
root = Tk()
frm = ttk.Frame(root, padding=10)
frm.grid()
ttk.Label(frm, text="Hello World!").grid(column=0, row=0)
ttk.Button(frm, text="Quit", command=root.destroy).grid(column=1, row=0)
root.mainloop()
```

----------------------------------------

TITLE: Receiving IP Header Fields in Python Socket Programming
DESCRIPTION: Demonstrates how to receive the type of service (ToS), differentiated services (DS), differentiated services code point (DSCP), and explicit congestion notification (ECN) IP header fields using socket.IP_RECVTOS in Python.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a1.rst#2025-04-21_snippet_36

LANGUAGE: Python
CODE:
```
socket.IP_RECVTOS
```

----------------------------------------

TITLE: Importing reload function from importlib in Python
DESCRIPTION: The reload function has been moved from the deprecated imp module to importlib as part of the imp module deprecation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.4.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
from importlib import reload
```

----------------------------------------

TITLE: Determining Common Prefix with os.path
DESCRIPTION: The commonprefix function determines the longest character- by-character prefix from a list of paths. It may not return valid paths, and has supported path-like objects since version 3.6.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
def commonprefix(list):
    return longest_common_prefix(list)
```

----------------------------------------

TITLE: Printing Keyword-Only Arguments in Python
DESCRIPTION: This snippet demonstrates how to use the inspect.signature function to iterate through function parameters and print all keyword-only arguments without default values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/inspect.rst#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
def foo(a, b, *, c, d=10):
    pass

sig = signature(foo)
for param in sig.parameters.values():
    if (param.kind == param.KEYWORD_ONLY and
                       param.default is param.empty):
        print('Parameter:', param)
```

----------------------------------------

TITLE: Using catch_unraisable_exception Context Manager in Python Tests
DESCRIPTION: Example usage of the catch_unraisable_exception context manager which captures unraisable exceptions using sys.unraisablehook. The context manager provides access to the unraisable exception and handles reference cycles.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/test.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
with support.catch_unraisable_exception() as cm:
    # code creating an "unraisable exception"
    ...

    # check the unraisable exception: use cm.unraisable
    ...

# cm.unraisable attribute no longer exists at this point
# (to break a reference cycle)
```

----------------------------------------

TITLE: Printing extracted traceback with print_list
DESCRIPTION: Prints a list of extracted traceback entries (from extract_tb or extract_stack) as a formatted stack trace.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
print_list(extracted_list, file=None)
```

----------------------------------------

TITLE: FTP Class with Context Manager Support Example
DESCRIPTION: Demonstrates using the FTP class with Python's context manager (with statement) to automatically handle connection setup and cleanup. This example connects to an FTP server, logs in, and lists directory contents.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ftplib.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> from ftplib import FTP
>>> with FTP("ftp1.at.proftpd.org") as ftp:
...     ftp.login()
...     ftp.dir()
... # doctest: +SKIP
'230 Anonymous login ok, restrictions apply.'
dr-xr-xr-x   9 ftp      ftp           154 May  6 10:43 .
dr-xr-xr-x   9 ftp      ftp           154 May  6 10:43 ..
dr-xr-xr-x   5 ftp      ftp          4096 May  6 10:43 CentOS
dr-xr-xr-x   3 ftp      ftp            18 Jul 10  2008 Fedora
>>>
```

----------------------------------------

TITLE: Accessing Implementation-Specific Command-Line Options in Python
DESCRIPTION: Example of how to access options passed through the -X command-line flag in Python. The _xoptions dictionary maps option names to their values (if provided) or to True. This is specific to CPython and might not be available in other implementations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sys.rst#2025-04-23_snippet_34

LANGUAGE: shell
CODE:
```
$ ./python -Xa=b -Xc
Python 3.2a3+ (py3k, Oct 16 2010, 20:14:50)
[GCC 4.4.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import sys
>>> sys._xoptions
{'a': 'b', 'c': True}
```

----------------------------------------

TITLE: Inserting Data into Movies Table with SQLite
DESCRIPTION: This snippet allows for the insertion of multiple records into the 'Movies' table using the 'executemany' method, leveraging a structured dataset called 'movie_data'.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_15

LANGUAGE: Python
CODE:
```
conn.executemany('INSERT INTO Movies VALUES (?, ?, ?);', movie_data)
```

----------------------------------------

TITLE: Mock Side Effect Reset to None - Python
DESCRIPTION: Demonstrates that setting side_effect back to None will make the mock use return_value if it is set. If return_value is also not set, it uses the wrapped object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_65

LANGUAGE: python
CODE:
```
>>> order_mock.get_value.side_effect = None
>>> order_mock.get_value()
'second'
```

----------------------------------------

TITLE: Differ Text Comparison Setup
DESCRIPTION: This code snippet sets up two lists of strings, `text1` and `text2`, representing two versions of a text. The `splitlines(keepends=True)` method is used to split a multi-line string into a list of strings, preserving the newline characters at the end of each line.  The example also demonstrates how to verify the length of the list and the presence of a newline character at the end of a string element.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/difflib.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
>>> text1 = '''  1. Beautiful is better than ugly.\n...   2. Explicit is better than implicit.\n...   3. Simple is better than complex.\n...   4. Complex is better than complicated.\n... '''.splitlines(keepends=True)
>>> len(text1)
4
>>> text1[0][-1]
'\n'
>>> text2 = '''  1. Beautiful is better than ugly.\n...   3.   Simple is better than complex.\n...   4. Complicated is better than complex.\n...   5. Flat is better than nested.\n... '''.splitlines(keepends=True)
```

----------------------------------------

TITLE: TypedDict Functional Syntax (Handling Invalid Keys)
DESCRIPTION: Illustrates how the functional syntax for `TypedDict` can successfully define keys that are not valid Python identifiers, such as keywords or names with hyphens, by using string literals for keys in the dictionary argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_151

LANGUAGE: python
CODE:
```
Point2D = TypedDict('Point2D', {'in': int, 'x-y': int})
```

----------------------------------------

TITLE: Registering Collection Types with Item Type Hints
DESCRIPTION: Demonstrates how to register an implementation for a collection type while providing type hints for the collection's items. The dispatch happens on the collection type regardless of the contained items.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
>>> @fun.register(list)
... def _(arg: list[int], verbose=False):
...     if verbose:
...         print("Enumerate this:")
...     for i, elem in enumerate(arg):
...         print(i, elem)
```

----------------------------------------

TITLE: TarInfo Size Attribute in Python
DESCRIPTION: An integer attribute representing the size of the archive member's data in bytes. For file-like members, this indicates the payload size. For directories or links, it might be zero or have a different meaning depending on the tar format.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_14

LANGUAGE: python
CODE:
```
TarInfo.size
```

----------------------------------------

TITLE: Defining Class Pattern Syntax in Python Grammar
DESCRIPTION: Specifies the syntax for class patterns that represent a class with its positional and keyword arguments. Used to match instances of specific classes with attribute checks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_18

LANGUAGE: grammar
CODE:
```
class_pattern: `name_or_attr` "(" [`pattern_arguments` ","?] ")"
pattern_arguments: `positional_patterns` ["," `keyword_patterns`]
                   : | `keyword_patterns`
positional_patterns: ",".`pattern`+
keyword_patterns: ",".`keyword_pattern`+
keyword_pattern: NAME "=" `pattern`
```

----------------------------------------

TITLE: Creating a Compressed File with LZMA
DESCRIPTION: This snippet illustrates how to create and write compressed data to a new file using the lzma module, highlighting the ease of data management during file operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/lzma.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
import lzma
data = b"Insert Data Here"
with lzma.open("file.xz", "w") as f:
    f.write(data)
```

----------------------------------------

TITLE: Defining MIMEText Class in Python
DESCRIPTION: This snippet defines the MIMEText class, a subclass of MIMENonMultipart. It is used to create MIME objects of major type 'text'. The class constructor accepts parameters for text content, subtype, charset, and policy.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.mime.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
class MIMEText(_text, _subtype='plain', _charset=None, *, policy=compat32):
```

----------------------------------------

TITLE: Finding Close Matches
DESCRIPTION: This code demonstrates the usage of the `get_close_matches` function to find the best 'good enough' matches for a given word from a list of possibilities. It shows examples of finding close matches for 'appel' in a list of strings, 'wheel' and 'pineapple' in the `keyword.kwlist` list, and 'accept' also in the `keyword.kwlist` list. The results are lists of the closest matches, sorted by similarity.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/difflib.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
"      >>> get_close_matches('appel', ['ape', 'apple', 'peach', 'puppy'])
      ['apple', 'ape']
      >>> import keyword
      >>> get_close_matches('wheel', keyword.kwlist)
      ['while']
      >>> get_close_matches('pineapple', keyword.kwlist)
      []
      >>> get_close_matches('accept', keyword.kwlist)
      ['except']
"
```

----------------------------------------

TITLE: Creating Decimal Instances in Python
DESCRIPTION: Demonstrates multiple ways of creating Decimal objects from different input types, including integers, strings, and tuples with sign, mantissa, and exponent
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
import decimal
decimal.Decimal(1972)
decimal.Decimal("1.1")
decimal.Decimal((1, (1, 4, 7, 5), -2))
```

----------------------------------------

TITLE: Comparing functools.reduce with sum() in Python
DESCRIPTION: This snippet compares the use of functools.reduce with operator.add to the built-in sum() function for adding up elements of an iterable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_25

LANGUAGE: python
CODE:
```
>>> import functools, operator
>>> functools.reduce(operator.add, [1, 2, 3, 4], 0)
10
>>> sum([1, 2, 3, 4])
10
>>> sum([])
0
```

----------------------------------------

TITLE: Sending Directory Contents as Email Attachment in Python
DESCRIPTION: Shows how to package and send the entire contents of a directory as an email message using Python's email module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.examples.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
# ../includes/email-dir.py
```

----------------------------------------

TITLE: Demonstrating Inheritance Conflict in Python
DESCRIPTION: This code example demonstrates a case where a linearization cannot be created due to conflicting method resolution orders between parent classes A and B, which have incompatible inheritance orders for classes X and Y.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/mro.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> O = object
>>> class X(O): pass
>>> class Y(O): pass
>>> class A(X,Y): pass
>>> class B(Y,X): pass
```

----------------------------------------

TITLE: Deprecation Warning for sqlite3 Named Placeholders
DESCRIPTION: This snippet describes a DeprecationWarning that is emitted when named placeholders are used with a sequence instead of a dict in `sqlite3.Cursor.execute`. Starting from Python 3.14, a ProgrammingError will be raised in such cases. The patch was contributed by Erlend E. Aasland.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.12.0a6.rst#2025-04-21_snippet_0



----------------------------------------

TITLE: Emulating Built-in Functions with Positional-Only Parameters
DESCRIPTION: This code example illustrates how to define a function that emulates built-in functions, using the new positional-only parameters feature to maintain compatibility with C functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
def divmod(a, b, /):
    "Emulate the built in divmod() function"
    return (a // b, a % b)
```

----------------------------------------

TITLE: Getting Package Requirements with importlib.metadata - Python
DESCRIPTION: Illustrates how to use the `requires()` function to retrieve a list of dependency specifiers declared by a distribution package.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_21

LANGUAGE: python
CODE:
```
>>> requires('wheel')  # doctest: +SKIP
["pytest (>=3.0.0) ; extra == 'test'", "pytest-cov ; extra == 'test'"]
```

----------------------------------------

TITLE: One-shot Decompression Function in Python's bz2 Module
DESCRIPTION: The decompress() function allows decompression of bzip2-compressed data in a single operation. It takes compressed data as input and returns the decompressed result.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/bz2.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
decompress(data)
```

----------------------------------------

TITLE: Converting Float to Decimal with Context Rounding in Python
DESCRIPTION: This doctest example demonstrates using `Context.create_decimal_from_float` to convert a float value to a `Decimal` instance. The conversion is performed respecting the context's specified precision and rounding mode, as shown by converting `math.pi` with precision 5 and `ROUND_DOWN`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_33

LANGUAGE: python
CODE:
```
context = Context(prec=5, rounding=ROUND_DOWN)
>>> context.create_decimal_from_float(math.pi)
Decimal('3.1415')
```

----------------------------------------

TITLE: Replacing _PyUnicodeWriter_WriteStr with PyUnicodeWriter_WriteStr in C
DESCRIPTION: Example showing how to replace the deprecated _PyUnicodeWriter_WriteStr() function with the new PyUnicodeWriter_WriteStr() function. The new function takes the writer object directly instead of a pointer to it.
SOURCE: https://github.com/python/cpython/blob/main/Doc/deprecations/c-api-pending-removal-in-3.18.rst#2025-04-21_snippet_4

LANGUAGE: c
CODE:
```
_PyUnicodeWriter_WriteStr(&writer, str)
```

LANGUAGE: c
CODE:
```
PyUnicodeWriter_WriteStr(writer, str)
```

----------------------------------------

TITLE: Calculating Natural Logarithm of One Plus x in Python
DESCRIPTION: This function returns the natural logarithm of 1+x, providing high accuracy for values of x near zero.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/math.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
.. function:: log1p(x)

   Return the natural logarithm of *1+x* (base *e*). The
   result is calculated in a way which is accurate for *x* near zero.
```

----------------------------------------

TITLE: mmap write method
DESCRIPTION: The `write(bytes)` method writes the bytes in *bytes* into memory at the current position of the file pointer and returns the number of bytes written. The file position is updated, and a ValueError is raised if the write fails or a TypeError if the mmap was created with ACCESS_READ.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/mmap.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
".. method:: write(bytes)\n\n   Write the bytes in *bytes* into memory at the current position of the\n   file pointer and return the number of bytes written (never less than\n   ``len(bytes)``, since if the write fails, a :exc:`ValueError` will be\n   raised).  The file position is updated to point after the bytes that\n   were written.  If the mmap was created with :const:`ACCESS_READ`, then\n   writing to it will raise a :exc:`TypeError` exception.\n\n   .. versionchanged:: 3.5\n      Writable :term:`bytes-like object` is now accepted.\n\n   .. versionchanged:: 3.6\n      The number of bytes written is now returned."
```

----------------------------------------

TITLE: Accessing Namespace Attributes with vars() in argparse (Python)
DESCRIPTION: Shows how to use the built-in Python function vars() to get a dictionary-like view of the attributes stored in the Namespace object returned by ArgumentParser.parse_args. This provides an alternative way to access parsed arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_73

LANGUAGE: python
CODE:
```
parser = argparse.ArgumentParser()
parser.add_argument('--foo')
args = parser.parse_args(['--foo', 'BAR'])
vars(args)
```

----------------------------------------

TITLE: Using a85encode in Python
DESCRIPTION: Encodes bytes-like objects using Ascii85 encoding and returns the encoded bytes. Supports options for handling spaces, line wrapping, padding, and Adobe-style framing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/base64.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
a85encode(b, *, foldspaces=False, wrapcol=0, pad=False, adobe=False)
```

----------------------------------------

TITLE: HTTP Tunneling Through a Proxy with HTTPSConnection in Python
DESCRIPTION: This example shows how to set up HTTP Connect Tunnelling through a local proxy server running on port 8080. It demonstrates creating a connection to the proxy and then tunneling to the target website.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.client.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> import http.client
>>> conn = http.client.HTTPSConnection("localhost", 8080)
>>> conn.set_tunnel("www.python.org")
>>> conn.request("HEAD","/index.html")
```

----------------------------------------

TITLE: Merging Sorted Iterables with heapq in Python
DESCRIPTION: Demonstrates using heapq.merge() to merge sorted iterables, with optional key and reverse parameters. Shows merging lists of strings sorted by length.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
>>> a = ['9', '777', '55555']
>>> b = ['88', '6666']
>>> list(heapq.merge(a, b, key=len))
['9', '88', '777', '6666', '55555']
>>> list(heapq.merge(reversed(a), reversed(b), key=len, reverse=True))
['55555', '6666', '777', '88', '9']
```

----------------------------------------

TITLE: Using TypeAlias with Forward References in Python
DESCRIPTION: Demonstrates how `TypeAlias` is particularly useful on older Python versions (before 3.12) for annotating aliases that involve forward references, guiding type checkers to correctly interpret the declaration.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_57

LANGUAGE: python
CODE:
```
from typing import Generic, TypeAlias, TypeVar

T = TypeVar("T")

# "Box" does not exist yet,
# so we have to use quotes for the forward reference on Python <3.12.
# Using ``TypeAlias`` tells the type checker that this is a type alias declaration,
```

----------------------------------------

TITLE: Dumping AST for Async Function with Await (Python)
DESCRIPTION: This snippet shows how to parse an asynchronous Python function definition containing an `await` expression into an AST and print its structure using `ast.dump`. It illustrates the AST representation of `async def` functions and `await` expressions. Requires the `ast` module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_60

LANGUAGE: python
CODE:
```
print(ast.dump(ast.parse("""\
async def f():\
    await other_func()\
"""), indent=4))
```

----------------------------------------

TITLE: Defining TypedDict using Functional Syntax
DESCRIPTION: Demonstrates the alternative functional syntax for creating a `TypedDict`, providing the type name as a string and the key-type mapping as a dictionary literal. This syntax is useful for keys that are not valid identifiers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_148

LANGUAGE: python
CODE:
```
Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': str})
```

----------------------------------------

TITLE: Convert String to Number with Locale Settings in Python
DESCRIPTION: Transforms a string to a number using the specified function (defaulting to float) and current LC_NUMERIC settings, effectively delocalizing the string first.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/locale.rst#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
.. function:: atof(string, func=float)

   Converts a string to a number, following the :const:`LC_NUMERIC` settings,
   by calling *func* on the result of calling :func:`delocalize` on *string*.
```

----------------------------------------

TITLE: Understanding Qualified Names in Python
DESCRIPTION: Showcases how to retrieve qualified names of classes and methods using Python's __qualname__ attribute, as outlined in PEP 3155. This is useful for debugging and introspection of nested classes and functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/glossary.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
class C:
    class D:
        def meth(self):
            pass

C.__qualname__
C.D.__qualname__
C.D.meth.__qualname__
```

----------------------------------------

TITLE: Configuring Logging Filters using dictConfig in Python
DESCRIPTION: Illustrates setting up a custom log filter through dictConfig using a callable, with the MyFilter class example. The filter alters log messages based on a parameter to modify or prevent the logging of messages containing certain substrings. The sample configuration shows setting up filters, handlers, and incorporating them in Python's logging configuration. The main constraint is integration within a Python-based logging configuration dictionary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_45

LANGUAGE: Python
CODE:
```
import logging
import logging.config
import sys

class MyFilter(logging.Filter):
    def __init__(self, param=None):
        self.param = param

    def filter(self, record):
        if self.param is None:
            allow = True
        else:
            allow = self.param not in record.msg
        if allow:
            record.msg = 'changed: ' + record.msg
        return allow

LOGGING = {
    'version': 1,
    'filters': {
        'myfilter': {
            '()': MyFilter,
            'param': 'noshow',
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'filters': ['myfilter']
        }
    },
    'root': {
        'level': 'DEBUG',
        'handlers': ['console']
    },
}

if __name__ == '__main__':
    logging.config.dictConfig(LOGGING)
    logging.debug('hello')
    logging.debug('hello - noshow')
```

----------------------------------------

TITLE: Context Diff Example
DESCRIPTION: This code demonstrates the usage of the `context_diff` function to generate a context diff between two lists of strings. It imports the `sys` and `difflib` modules and then defines two lists, `s1` and `s2`. The `context_diff` function is called with these lists, along with filenames, and the resulting diff is printed to standard output using `sys.stdout.writelines`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/difflib.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"      >>> import sys
      >>> from difflib import *
      >>> s1 = ['bacon\n', 'eggs\n', 'ham\n', 'guido\n']
      >>> s2 = ['python\n', 'eggy\n', 'hamster\n', 'guido\n']
      >>> sys.stdout.writelines(context_diff(s1, s2, fromfile='before.py',
      ...                        tofile='after.py'))
      *** before.py
      --- after.py
      ***************
      *** 1,4 ****
      ! bacon
      ! eggs
      ! ham
        guido
      --- 1,4 ----
      ! python
      ! eggy
      ! hamster
        guido
"
```

----------------------------------------

TITLE: Creating WeakMethod Reference Example
DESCRIPTION: Demonstrates how to create and use a WeakMethod reference to a bound method, showing how it survives until the object or function is garbage collected.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/weakref.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> class C:
...     def method(self):
...         print("method called!")
...
>>> c = C()
>>> r = weakref.ref(c.method)
>>> r()
>>> r = weakref.WeakMethod(c.method)
>>> r()
<bound method C.method of <__main__.C object at 0x7fc859830220>>
>>> r()()
method called!
>>> del c
>>> gc.collect()
0
>>> r()
>>>
```

----------------------------------------

TITLE: Creating TracebackException Objects in Python
DESCRIPTION: Instantiates a TracebackException object from an exception to capture data for later printing. It offers configuration options for limiting traceback depth, looking up source lines, capturing local variables, and formatting exception groups.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
TracebackException(exc_type, exc_value, exc_traceback, *, limit=None, lookup_lines=True, capture_locals=False, compact=False, max_group_width=15, max_group_depth=10)
```

----------------------------------------

TITLE: Tokenizing f-strings with tokenize module - Python
DESCRIPTION: Illustrates the change in output from the `tokenize.tokenize` and `tokenize.generate_tokens` functions due to PEP 701. Previously, f-strings were emitted as a single `STRING` token; now, they are broken down into `FSTRING_START`, `FSTRING_MIDDLE`, `OP`, and `FSTRING_END` tokens.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_46

LANGUAGE: Output (Old)
CODE:
```
    1,0-1,18:           STRING         'f"start {1+1} end"'
```

LANGUAGE: Output (New)
CODE:
```
    1,0-1,2:            FSTRING_START  'f\"'\n    1,2-1,8:            FSTRING_MIDDLE 'start '\n    1,8-1,9:            OP             '{'\n    1,9-1,10:           NUMBER         '1'\n    1,10-1,11:          OP             '+'\n    1,11-1,12:          NUMBER         '1'\n    1,12-1,13:          OP             '}'\n    1,13-1,17:          FSTRING_MIDDLE ' end'\n    1,17-1,18:          FSTRING_END    '\"'
```

----------------------------------------

TITLE: File Seeking in Python
DESCRIPTION: The lseek() function sets the current position of a file descriptor. It supports various seek modes including SEEK_SET, SEEK_CUR, SEEK_END, SEEK_HOLE, and SEEK_DATA.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
def lseek(fd, pos, whence, /):
    """Set the current position of file descriptor fd to position pos, modified
    by whence, and return the new position in bytes relative to
    the start of the file.
    """
```

----------------------------------------

TITLE: Retrieving Python Linking Flags in Unix Shell
DESCRIPTION: Shell command example showing how to get the recommended linker flags for embedding Python by using the python-config script with the --ldflags and --embed options.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/embedding.rst#2025-04-21_snippet_6

LANGUAGE: shell
CODE:
```
$ /opt/bin/python3.11-config --ldflags --embed
-L/opt/lib/python3.11/config-3.11-x86_64-linux-gnu -L/opt/lib -lpython3.11 -lpthread -ldl  -lutil -lm
```

----------------------------------------

TITLE: Using else Clause with for Loop to Find Prime Numbers in Python
DESCRIPTION: This example demonstrates how to use an else clause with a for loop to identify prime numbers within a given range.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> for n in range(2, 10):
...     for x in range(2, n):
...         if n % x == 0:
...             print(n, 'equals', x, '*', n//x)
...             break
...     else:
...         # loop fell through without finding a factor
...         print(n, 'is a prime number')
...
2 is a prime number
3 is a prime number
4 equals 2 * 2
5 is a prime number
6 equals 2 * 3
7 is a prime number
8 equals 2 * 4
9 equals 3 * 3
```

----------------------------------------

TITLE: Implementing Custom_init in C
DESCRIPTION: Implementation of tp_init handler for object initialization with argument parsing and safe attribute assignment.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/newtypes_tutorial.rst#2025-04-21_snippet_4

LANGUAGE: C
CODE:
```
static int
Custom_init(PyObject *op, PyObject *args, PyObject *kwds)
{
    CustomObject *self = (CustomObject *) op;
    static char *kwlist[] = {"first", "last", "number", NULL};
    PyObject *first = NULL, *last = NULL, *tmp;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "|OOi", kwlist,
                                    &first, &last,
                                    &self->number))
        return -1;

    if (first) {
        tmp = self->first;
        Py_INCREF(first);
        self->first = first;
        Py_XDECREF(tmp);
    }
    if (last) {
        tmp = self->last;
        Py_INCREF(last);
        self->last = last;
        Py_XDECREF(tmp);
    }
    return 0;
}
```

----------------------------------------

TITLE: Asyncio Barrier Wait Method with Position-based Task Selection
DESCRIPTION: This snippet shows how to use the wait() method of the Barrier class with a position-based task selection. It demonstrates how to perform special actions based on the task's position in the barrier.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-sync.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
async with barrier as position:
   if position == 0:
      # Only one task prints this
      print('End of *draining phase*')
```

----------------------------------------

TITLE: Querying Direct Subclasses in Python
DESCRIPTION: This snippet defines two simple Python classes, `A` and `B`, where `B` inherits from `A`. It then calls the `__subclasses__` method on class `A` to demonstrate how to retrieve a list of its immediate subclasses that are still alive, showing `B` in the output.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_7

LANGUAGE: Python
CODE:
```
class A: pass\nclass B(A): pass\nA.__subclasses__()
```

----------------------------------------

TITLE: Using Blob Objects with SQLite in Python
DESCRIPTION: Example demonstrating how to use the Blob class as a file-like object to read and write data in an SQLite BLOB column. The code shows creating a table with a blob column, writing data with two operations, modifying specific bytes, and then reading the contents.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
con = sqlite3.connect(":memory:")
con.execute("CREATE TABLE test(blob_col blob)")
con.execute("INSERT INTO test(blob_col) VALUES(zeroblob(13))")

# Write to our blob, using two write operations:
with con.blobopen("test", "blob_col", 1) as blob:
    blob.write(b"hello, ")
    blob.write(b"world.")
    # Modify the first and last bytes of our blob
    blob[0] = ord("H")
    blob[-1] = ord("!")

# Read the contents of our blob
with con.blobopen("test", "blob_col", 1) as blob:
    greeting = blob.read()

print(greeting)  # outputs "b'Hello, world!'"
con.close()
```

----------------------------------------

TITLE: Using get_type_hints with Annotated
DESCRIPTION: Shows how `typing.get_type_hints` behaves with `Annotated` types. By default, metadata is stripped, but passing `include_extras=True` preserves the `Annotated` type with its metadata.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_83

LANGUAGE: Python
CODE:
```
>>> from typing import Annotated, get_type_hints
>>> def func(x: Annotated[int, "metadata"]) -> None: pass
...
>>> get_type_hints(func)
{'x': <class 'int'>, 'return': <class 'NoneType'>}
>>> get_type_hints(func, include_extras=True)
{'x': typing.Annotated[int, 'metadata'], 'return': <class 'NoneType'>}
```

----------------------------------------

TITLE: Timer Class Usage - Python
DESCRIPTION: Demonstrates using the Timer class for more control over timing operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/timeit.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> import timeit
>>> t = timeit.Timer('char in text', setup='text = "sample string"; char = "g"')
>>> t.timeit()
>>> t.repeat()
```

----------------------------------------

TITLE: Using Attribute Swapping in Python Testing
DESCRIPTION: Example showing how to use the swap_attr context manager to temporarily replace object attributes during testing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/test.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
with swap_attr(obj, "attr", 5):
    ...
```

----------------------------------------

TITLE: Mapping Addition Operator to Function in Python
DESCRIPTION: This entry maps the addition operation 'a + b' to the corresponding function 'add(a, b)' from the operator module. It provides a clear reference for understanding how basic mathematical operations are abstracted in Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/operator.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
``add(a, b)``
```

----------------------------------------

TITLE: Assigning Module Attributes - Python
DESCRIPTION: Illustrates assigning a value (`1`) to an attribute (`x`) on a module object (`m`). This operation updates the module's namespace dictionary and is equivalent to assigning the value directly to the item in `m.__dict__`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_5

LANGUAGE: python
CODE:
```
m.x = 1
```

LANGUAGE: python
CODE:
```
m.__dict__["x"] = 1
```

----------------------------------------

TITLE: Demonstrating Python Syntax Error
DESCRIPTION: This example shows the format of a Python syntax error that occurs when parsing code with invalid syntax. It displays how Python pinpoints the location of the error with arrows.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/errors.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> while True print('Hello world')
  File "<stdin>", line 1
    while True print('Hello world')
                 ^^^^^
SyntaxError: invalid syntax
```

----------------------------------------

TITLE: Handling election results with barrier synchronization in Python
DESCRIPTION: This snippet demonstrates using a barrier to enforce a rule for handling election results. If some sites don't finish before midnight, the barrier times out and ballots are sealed for later handling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_32

LANGUAGE: python
CODE:
```
try:
    all_polls_closed.wait(timeout=midnight - time.now())
except BrokenBarrierError:
    lockbox = seal_ballots(ballots)
    queue.put(lockbox)
else:
    totals = summarize(ballots)
    publish(site, totals)
```

----------------------------------------

TITLE: Parser Defaults Override Argument Defaults - Python argparse
DESCRIPTION: Illustrates that defaults set at the parser level using set_defaults take precedence over defaults set for individual arguments using the default keyword in add_argument. Parses an empty list to show default application.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_92

LANGUAGE: python
CODE:
```
parser = argparse.ArgumentParser()
parser.add_argument('--foo', default='bar')
parser.set_defaults(foo='spam')
parser.parse_args([])
```

----------------------------------------

TITLE: Opening PAX Format Tarfile in Python
DESCRIPTION: Demonstrates how to open a tarfile using the POSIX.1-2001 (PAX) format instead of the default GNU tar format.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_39

LANGUAGE: python
CODE:
```
tar = tarfile.open("output.tar", "w",
                   format=tarfile.PAX_FORMAT)
```

----------------------------------------

TITLE: Using window.refresh() Method in Python Curses
DESCRIPTION: Updates the display immediately to sync the actual screen with previous drawing/deleting methods. When used with a pad, requires additional parameters to specify which part of the pad and screen are involved.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_92

LANGUAGE: python
CODE:
```
window.refresh([pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol])
```

----------------------------------------

TITLE: List Operations in C
DESCRIPTION: Functions for extending, clearing, sorting, and reversing list objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/list.rst#2025-04-21_snippet_8

LANGUAGE: c
CODE:
```
int PyList_Extend(PyObject *list, PyObject *iterable)

int PyList_Clear(PyObject *list)

int PyList_Sort(PyObject *list)

int PyList_Reverse(PyObject *list)
```

----------------------------------------

TITLE: Executing unittest discovery from command line in Python
DESCRIPTION: Demonstrates how to use the unittest module's new test discovery feature from the command line, specifying a directory to search, a pattern to match test files, and a top-level directory.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_57

LANGUAGE: shell
CODE:
```
$ python -m unittest discover -s my_proj_dir -p _test.py
```

----------------------------------------

TITLE: Enabling C Stack Traces with faulthandler.enable
DESCRIPTION: This code demonstrates how to enable the printing of C stack traces using the `faulthandler.enable` function. The `c_stack` argument is set to True, which activates the functionality to print C stack traces along with Python stack traces when an error occurs.  This requires the faulthandler module to be available.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/next/Library/2024-12-21-13-31-55.gh-issue-127604.etL5mf.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
faulthandler.enable(c_stack=True)
```

----------------------------------------

TITLE: One-shot Compression Function in Python's bz2 Module
DESCRIPTION: The compress() function provides a simple way to compress data in a single operation using the bzip2 algorithm. It accepts optional compression levels.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/bz2.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
compress(data, compresslevel=9)
```

----------------------------------------

TITLE: Creating a CopyingMock Subclass in Python for Deep Copying Arguments
DESCRIPTION: Implementation of a MagicMock subclass that automatically deep copies arguments, preventing test failures when arguments are mutated after the mock call.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
>>> from copy import deepcopy
>>> class CopyingMock(MagicMock):
...     def __call__(self, /, *args, **kwargs):
...         args = deepcopy(args)
...         kwargs = deepcopy(kwargs)
...         return super().__call__(*args, **kwargs)
...
>>> c = CopyingMock(return_value=None)
>>> arg = set()
>>> c(arg)
>>> arg.add(1)
>>> c.assert_called_with(set())
>>> c.assert_called_with(arg)
Traceback (most recent call last):
    ...
AssertionError: expected call not found.
Expected: mock({1})
Actual: mock(set())
>>> c.foo
<CopyingMock name='mock.foo' id='...'>
```

----------------------------------------

TITLE: Initializing WatchedFileHandler in Python
DESCRIPTION: Creates a new instance of WatchedFileHandler class. This handler watches the file it's logging to and reopens it if changed, useful for log rotation scenarios.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
WatchedFileHandler(filename, mode='a', encoding=None, delay=False, errors=None)
```

----------------------------------------

TITLE: Sending Datagram via DatagramTransport in Python
DESCRIPTION: This method sends data bytes to a remote peer. If addr is None, data is sent to the target address given on transport creation. It buffers the data for asynchronous sending.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
DatagramTransport.sendto(data, addr=None)
```

----------------------------------------

TITLE: Incremental Compression Using BZ2Compressor in Python
DESCRIPTION: This snippet illustrates the use of the BZ2Compressor class for performing incremental compression of data in chunks. It demonstrates gathering data in a loop and flushing the compressor to finalize the compression process.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/bz2.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> import bz2
>>> def gen_data(chunks=10, chunksize=1000):
...     """Yield incremental blocks of chunksize bytes."""
...     for _ in range(chunks):
...         yield b"z" * chunksize
...
>>> comp = bz2.BZ2Compressor()
>>> out = b""
>>> for chunk in gen_data():
...     # Provide data to the compressor object
...     out = out + comp.compress(chunk)
...
>>> # Finish the compression process.  Call this once you have
>>> # finished providing data to the compressor.
>>> out = out + comp.flush()
```

----------------------------------------

TITLE: Getting List Size in C
DESCRIPTION: Functions to get the length of a list object, with and without error checking.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/list.rst#2025-04-21_snippet_4

LANGUAGE: c
CODE:
```
Py_ssize_t PyList_Size(PyObject *list)

Py_ssize_t PyList_GET_SIZE(PyObject *list)
```

----------------------------------------

TITLE: Getting Subprocess PID from SubprocessTransport in Python
DESCRIPTION: This method returns the subprocess process id as an integer.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
SubprocessTransport.get_pid()
```

----------------------------------------

TITLE: Customizing Option Name Transformation in Python ConfigParser
DESCRIPTION: Shows how to customize the option name transformation function in ConfigParser to preserve case sensitivity of option names.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
>>> config = """
... [Section1]
... Key = Value
...
... [Section2]
... AnotherKey = Value
... """
>>> typical = configparser.ConfigParser()
>>> typical.read_string(config)
>>> list(typical['Section1'].keys())
['key']
>>> list(typical['Section2'].keys())
['anotherkey']
>>> custom = configparser.RawConfigParser()
>>> custom.optionxform = lambda option: option
>>> custom.read_string(config)
>>> list(custom['Section1'].keys())
['Key']
>>> list(custom['Section2'].keys())
['AnotherKey']
```

----------------------------------------

TITLE: XML Example with Namespaces
DESCRIPTION: Provides an XML example that incorporates two namespaces, one with the prefix 'fictional' and another serving as the default namespace. This snippet demonstrates the structure of XML with namespace declarations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_14

LANGUAGE: xml
CODE:
```
<?xml version="1.0"?>
<actors xmlns:fictional="http://characters.example.com"
        xmlns="http://people.example.com">
    <actor>
        <name>John Cleese</name>
        <fictional:character>Lancelot</fictional:character>
        <fictional:character>Archie Leach</fictional:character>
    </actor>
    <actor>
        <name>Eric Idle</name>
        <fictional:character>Sir Robin</fictional:character>
        <fictional:character>Gunther</fictional:character>
        <fictional:character>Commander Clement</fictional:character>
    </actor>
</actors>
```

----------------------------------------

TITLE: Attribute Getter Implementation
DESCRIPTION: Defines a function that dynamically fetches attributes from an object based on a provided attribute string, which can include nested attributes (e.g., 'name.first'). It returns a callable object that, when called with an object, returns the attribute value(s). This function is used internally by attrgetter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/operator.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
def attrgetter(*items):
    if any(not isinstance(item, str) for item in items):
        raise TypeError('attribute name must be a string')
    if len(items) == 1:
        attr = items[0]
        def g(obj):
            return resolve_attr(obj, attr)
    else:
        def g(obj):
            return tuple(resolve_attr(obj, attr) for attr in items)
    return g

def resolve_attr(obj, attr):
    for name in attr.split("."):
        obj = getattr(obj, name)
    return obj
```

----------------------------------------

TITLE: Accessing the Last Match of Multiple Group Matches in Python
DESCRIPTION: Shows that when a capturing group matches multiple times in a string, only the last match is accessible through the group() method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
>>> m = re.match(r"(..)+", "a1b2c3")  # Matches 3 times.
>>> m.group(1)                        # Returns only the last match.
'c3'
```

----------------------------------------

TITLE: Accessing Annotated Metadata at Runtime
DESCRIPTION: Explains how to access the metadata associated with an `Annotated` type at runtime using the `__metadata__` attribute.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_84

LANGUAGE: Python
CODE:
```
>>> from typing import Annotated
>>> X = Annotated[int, "very", "important", "metadata"]
>>> X
typing.Annotated[int, 'very', 'important', 'metadata']
>>> X.__metadata__
('very', 'important', 'metadata')
```

----------------------------------------

TITLE: Creating Subnets with ip_network in Python
DESCRIPTION: Shows usage of the `subnets()` method for splitting a network into smaller parts. Either `prefixlen_diff` or `new_prefix` is required. Dependencies: `ip_network` from the `ipaddress` module. Outputs: An iterator of network objects or raises a `ValueError` for invalid prefix lengths. Inputs: Network object and either a prefix length difference or a new prefix.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ipaddress.rst#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
list(ip_network('192.0.2.0/24').subnets())
[IPv4Network('192.0.2.0/25'), IPv4Network('192.0.2.128/25')]
```

----------------------------------------

TITLE: Sample INI Configuration File Structure
DESCRIPTION: Illustrates the structure of a valid INI file with examples of simple values, various data types, and multiline values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_5

LANGUAGE: ini
CODE:
```
[Simple Values]
key=value
spaces in keys=allowed
spaces in values=allowed as well
spaces around the delimiter = obviously
you can also use : to delimit keys from values

[All Values Are Strings]
values like this: 1000000
or this: 3.14159265359
are they treated as numbers? : no
integers, floats and booleans are held as: strings
can use the API to get converted values directly: true

[Multiline Values]
```

----------------------------------------

TITLE: Implementing HTTPBasicAuthHandler for Remote Host Authentication in Python
DESCRIPTION: HTTPBasicAuthHandler handles authentication with the remote host using a compatible password manager. It raises ValueError for incorrect authentication schemes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
class HTTPBasicAuthHandler(password_mgr=None):
```

----------------------------------------

TITLE: Handling HTTPError with Urllib in Python
DESCRIPTION: Demonstrates how to handle HTTPError exceptions using urllib in Python. It shows how to capture HTTP error codes and read error pages when an HTTPError exception is thrown.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/urllib2.rst#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
>>> req = urllib.request.Request('http://www.python.org/fish.html')
>>> try:
...     urllib.request.urlopen(req)
... except urllib.error.HTTPError as e:
...     print(e.code)
...     print(e.read())  #doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
...
404
b'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\n\n\n<html
  ...
  <title>Page Not Found</title>\n
  ...
'
```

----------------------------------------

TITLE: Setting ALPN Protocols in Python SSL Context
DESCRIPTION: Specifies which protocols the socket should advertise during the SSL/TLS handshake for Application-Layer Protocol Negotiation (ALPN). It takes a list of ASCII strings ordered by preference and follows RFC 7301.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
SSLContext.set_alpn_protocols(protocols)
```

----------------------------------------

TITLE: Add ssl.SSLContext.security_level attribute
DESCRIPTION: This entry introduces a read-only `ssl.SSLContext.security_level` attribute to retrieve the context's security level. This attribute provides a convenient way to access the security level configuration of an SSL context.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a1.rst#2025-04-21_snippet_31



----------------------------------------

TITLE: Setting Signal Handler in Python
DESCRIPTION: The signal function sets the handler for a specific signal. It can only be called from the main thread of the main interpreter when threads are enabled.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/signal.rst#2025-04-21_snippet_14

LANGUAGE: Python
CODE:
```
def signal(signalnum, handler):
    """Set the handler for signal signalnum to the function handler.  handler can
    be a callable Python object taking two arguments (see below), or one of the
    special values signal.SIG_IGN or signal.SIG_DFL.  The previous
    signal handler will be returned."""
```

----------------------------------------

TITLE: Calling Functions Using Strings in Python
DESCRIPTION: Illustrates various techniques for calling functions or methods using strings in Python, including dictionary mapping, getattr(), and locals().
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_30

LANGUAGE: python
CODE:
```
def a():
    pass

def b():
    pass

dispatch = {'go': a, 'stop': b}  # Note lack of parens for funcs

dispatch[get_input()]()  # Note trailing parens to call function

import foo
getattr(foo, 'bar')()

class Foo:
    def do_foo(self):
        ...

    def do_bar(self):
        ...

f = getattr(foo_instance, 'do_' + opname)
f()

def myFunc():
    print("hello")

fname = "myFunc"

f = locals()[fname]
f()
```

----------------------------------------

TITLE: ParseResult Class Definition
DESCRIPTION: ParseResult is a concrete class for urlparse results containing string data. It provides an encode method that returns a ParseResultBytes instance. This class is used when operating on string objects and represents the result of parsing a URL.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.parse.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
.. class:: ParseResult(scheme, netloc, path, params, query, fragment)

   Concrete class for :func:`urlparse` results containing :class:`str`
   data. The :meth:`encode` method returns a :class:`ParseResultBytes`
   instance.

```

----------------------------------------

TITLE: SplitResult Class Definition
DESCRIPTION: SplitResult is a concrete class for urlsplit results containing string data. It provides an encode method that returns a SplitResultBytes instance. This class is used when operating on string objects and represents the result of splitting a URL.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.parse.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
.. class:: SplitResult(scheme, netloc, path, query, fragment)

   Concrete class for :func:`urlsplit` results containing :class:`str`
   data. The :meth:`encode` method returns a :class:`SplitResultBytes`
   instance.

```

----------------------------------------

TITLE: Add sys.orig_argv attribute
DESCRIPTION: This entry introduces a new attribute, `sys.orig_argv`, which holds the list of the original command-line arguments passed to the Python executable. This provides access to the raw command-line arguments as they were initially provided.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a1.rst#2025-04-21_snippet_55



----------------------------------------

TITLE: Accessing Specific Metadata Field (JSON Format, Python)
DESCRIPTION: Demonstrates accessing package metadata fields through the `.json` attribute of a `PackageMetadata` object. This attribute provides the metadata in a PEP 566 JSON-compatible dictionary format, allowing access to fields using their lowercase names ('requires_python').
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_15

LANGUAGE: Python Console
CODE:
```
>>> wheel_metadata.json['requires_python']
'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'
```

----------------------------------------

TITLE: Joining Multiple Short Options in Python argparse
DESCRIPTION: Illustrates how multiple short options can be combined into a single command-line argument, provided only the last option (or none) requires a value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_65

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser(prog='PROG')
>>> parser.add_argument('-x', action='store_true')
>>> parser.add_argument('-y', action='store_true')
>>> parser.add_argument('-z')
>>> parser.parse_args(['-xyzZ'])
Namespace(x=True, y=True, z='Z')
```

----------------------------------------

TITLE: Summing Sequence Items (New Reference) - CPython C API
DESCRIPTION: This C function computes the sum of integer items in a Python sequence using `PySequence_GetItem`. `PySequence_GetItem` returns a new reference, which the caller owns. The function must call `Py_DECREF` on the returned item after use. It checks for non-sequence input or retrieval errors and handles non-integer items by simply decrementing their reference count.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/intro.rst#_snippet_14

LANGUAGE: C
CODE:
```
long
sum_sequence(PyObject *sequence)
{
    Py_ssize_t i, n;
    long total = 0, value;
    PyObject *item;
    n = PySequence_Length(sequence);
    if (n < 0)
        return -1; /* Has no length */
    for (i = 0; i < n; i++) {
        item = PySequence_GetItem(sequence, i);
        if (item == NULL)
            return -1; /* Not a sequence, or other failure */
        if (PyLong_Check(item)) {
            value = PyLong_AsLong(item);
            Py_DECREF(item);
            if (value == -1 && PyErr_Occurred())
                /* Integer too big to fit in a C long, bail out */
                return -1;
            total += value;
        }
        else {
            Py_DECREF(item); /* Discard reference ownership */
        }
    }
    return total;
}
```

----------------------------------------

TITLE: Creating a Compressed File using a Custom Filter Chain
DESCRIPTION: This example demonstrates the use of custom filter chains to compress data, showcasing how to specify various compression parameters and options tailored to specific needs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/lzma.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
import lzma
my_filters = [
    {"id": lzma.FILTER_DELTA, "dist": 5},
    {"id": lzma.FILTER_LZMA2, "preset": 7 | lzma.PRESET_EXTREME},
]
with lzma.open("file.xz", "w", filters=my_filters) as f:
    f.write(b"blah blah blah")
```

----------------------------------------

TITLE: Replacing Shebang in Existing Archive
DESCRIPTION: Demonstrates how to update the interpreter shebang line in an existing archive using create_archive
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/zipapp.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> import zipapp
>>> zipapp.create_archive('old_archive.pyz', 'new_archive.pyz', '/usr/bin/python3')
```

----------------------------------------

TITLE: Registering Pre-existing Functions with singledispatch
DESCRIPTION: Shows how to use the register attribute in functional form to register lambdas or pre-existing functions with a singledispatch generic function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
>>> def nothing(arg, verbose=False):
...     print("Nothing.")
...
>>> fun.register(type(None), nothing)
```

----------------------------------------

TITLE: Parsing and Dumping Expression AST (Python)
DESCRIPTION: Parses a Python source string representing a single expression (`"eval"` mode) into an AST using `ast.parse` and then prints a formatted string representation of the resulting AST tree using `ast.dump` with indentation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_3

LANGUAGE: python
CODE:
```
print(ast.dump(ast.parse('123', mode='eval'), indent=4))
```

----------------------------------------

TITLE: Implementing Random Selection Recipes from Itertools in Python
DESCRIPTION: This code provides recipes for efficient random selections from combinatoric iterators in the itertools module. It includes functions for random product, permutation, combination, and combination with replacement.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/random.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
import random

def random_product(*args, repeat=1):
    "Random selection from itertools.product(*args, **kwds)"
    pools = [tuple(pool) for pool in args] * repeat
    return tuple(map(random.choice, pools))

def random_permutation(iterable, r=None):
    "Random selection from itertools.permutations(iterable, r)"
    pool = tuple(iterable)
    r = len(pool) if r is None else r
    return tuple(random.sample(pool, r))

def random_combination(iterable, r):
    "Random selection from itertools.combinations(iterable, r)"
    pool = tuple(iterable)
    n = len(pool)
    indices = sorted(random.sample(range(n), r))
    return tuple(pool[i] for i in indices)

def random_combination_with_replacement(iterable, r):
    "Choose r elements with replacement.  Order the result to match the iterable."
    # Result will be in set(itertools.combinations_with_replacement(iterable, r)).
    pool = tuple(iterable)
    n = len(pool)
    indices = sorted(random.choices(range(n), k=r))
    return tuple(pool[i] for i in indices)
```

----------------------------------------

TITLE: Local Process Access to Remote Queue in Python
DESCRIPTION: Example demonstrating how local processes can access a remote queue using a worker process. Shows integration of Process class with manager functionality.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_35

LANGUAGE: python
CODE:
```
>>> from multiprocessing import Process, Queue
>>> from multiprocessing.managers import BaseManager
>>> class Worker(Process):
...     def __init__(self, q):
...         self.q = q
...         super().__init__()
...     def run(self):
...         self.q.put('local hello')
...
>>> queue = Queue()
>>> w = Worker(queue)
>>> w.start()
>>> class QueueManager(BaseManager): pass
...
>>> QueueManager.register('get_queue', callable=lambda: queue)
>>> m = QueueManager(address=('', 50000), authkey=b'abracadabra')
>>> s = m.get_server()
>>> s.serve_forever()
```

----------------------------------------

TITLE: Creating read-only memoryview with toreadonly method
DESCRIPTION: Example showing how toreadonly() creates a read-only view of the memoryview, preventing modification while still reflecting changes in the original buffer.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_77

LANGUAGE: python
CODE:
```
m = memoryview(bytearray(b'abc'))
mm = m.toreadonly()
mm.tolist()
[97, 98, 99]
mm[0] = 42
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: cannot modify read-only memory
m[0] = 43
mm.tolist()
[43, 98, 99]
```

----------------------------------------

TITLE: Spawning Processes with PATH Lookup Using os.posix_spawnp in Python
DESCRIPTION: Similar to posix_spawn but searches for the executable in the directories specified by PATH environment variable, similar to execvp behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_72

LANGUAGE: python
CODE:
```
posix_spawnp(path, argv, env, *, file_actions=None, setpgroup=None, resetids=False, setsid=False, setsigmask=(), setsigdef=(), scheduler=None)
```

----------------------------------------

TITLE: Python Match Statement Or-Pattern
DESCRIPTION: Demonstrates Python's `match` statement using an "or-pattern" with the `|` operator. The example shows a single `case` clause that matches if the subject matches either the first subpattern (`[x]`) or the second subpattern (`(y)`). This syntax is parsed into a `MatchOr` AST node.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_46

LANGUAGE: Python
CODE:
```
match x:
    case [x] | (y):
        ...
```

----------------------------------------

TITLE: Importing Python Source File Directly
DESCRIPTION: Provides a function to import a Python source file directly from a file path. This should be used with caution as it bypasses normal import mechanisms.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
import importlib.util
import sys


def import_from_path(module_name, file_path):
    spec = importlib.util.spec_from_file_location(module_name, file_path)
    module = importlib.util.module_from_spec(spec)
    sys.modules[module_name] = module
    spec.loader.exec_module(module)
    return module


# For illustrative purposes only (use of `json` is arbitrary).
import json
file_path = json.__file__
module_name = json.__name__

# Similar outcome as `import json`.
json = import_from_path(module_name, file_path)
```

----------------------------------------

TITLE: Execute Python Script via PY Launcher
DESCRIPTION: This command demonstrates how to execute a Python script named `hello.py` using the `py` launcher from the Windows command line. The launcher reads the script's shebang line (or uses defaults/environment variables) to determine which Python interpreter to use.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/windows.rst#_snippet_29

LANGUAGE: sh
CODE:
```
py hello.py
```

----------------------------------------

TITLE: Add __final__ attribute to @typing.final (Python)
DESCRIPTION: The `@typing.final` decorator now sets the `__final__` attribute on the decorated object. This allows for runtime introspection to determine if a class, method, or variable has been declared as final.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a4.rst#2025-04-21_snippet_40



----------------------------------------

TITLE: Defining Custom IntEnum in Python
DESCRIPTION: This snippet shows how to create a custom enumeration by inheriting from IntEnum, allowing for more control over the behavior of string representation and formatting in enumerations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/enum.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
>>> from enum import Enum
>>> class MyIntEnum(int, Enum):
...     pass
```

----------------------------------------

TITLE: Ordered Enum Implementation
DESCRIPTION: Implementation of an ordered enumeration that maintains normal Enum invariants while supporting comparison operations
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_28

LANGUAGE: python
CODE:
```
class OrderedEnum(Enum):
    def __ge__(self, other):
        if self.__class__ is other.__class__:
            return self.value >= other.value
        return NotImplemented
    def __gt__(self, other):
        if self.__class__ is other.__class__:
            return self.value > other.value
        return NotImplemented
    def __le__(self, other):
        if self.__class__ is other.__class__:
            return self.value <= other.value
        return NotImplemented
    def __lt__(self, other):
        if self.__class__ is other.__class__:
            return self.value < other.value
        return NotImplemented
```

----------------------------------------

TITLE: Recursive Directory Comparison using Python filecmp
DESCRIPTION: Example demonstrating how to recursively compare two directories using the dircmp class's subdirs attribute to find and print differences between files in common directories.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/filecmp.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> from filecmp import dircmp
>>> def print_diff_files(dcmp):
...     for name in dcmp.diff_files:
...         print("diff_file %s found in %s and %s" % (name, dcmp.left,
...               dcmp.right))
...     for sub_dcmp in dcmp.subdirs.values():
...         print_diff_files(sub_dcmp)
...
>>> dcmp = dircmp('dir1', 'dir2') # doctest: +SKIP
>>> print_diff_files(dcmp) # doctest: +SKIP
```

----------------------------------------

TITLE: Closing File Descriptors in Python
DESCRIPTION: The close() function closes a file descriptor. It's intended for low-level I/O and should be used with file descriptors returned by os.open() or pipe(), not with file objects from open(), popen(), or fdopen().
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
def close(fd):
    """Close file descriptor fd."""
```

----------------------------------------

TITLE: LiteralString Type for Static Argument Enforcement - Python
DESCRIPTION: This code demonstrates the use of LiteralString to enforce static SQL queries, preventing injection attacks. It is best used in functions where literal strings should only be accepted, assisting type checkers to flag potential issues.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.11.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
def run_query(sql: LiteralString) -> ...
    ...

def caller(
    arbitrary_string: str,
    query_string: LiteralString,
    table_name: LiteralString,
) -> None:
    run_query("SELECT * FROM students")       # ok
    run_query(query_string)                   # ok
    run_query("SELECT * FROM " + table_name)  # ok
    run_query(arbitrary_string)               # type checker error
    run_query(                                # type checker error
        f"SELECT * FROM students WHERE name = {arbitrary_string}"
    )
```

----------------------------------------

TITLE: Opening a Registry Key using OpenKey/OpenKeyEx in winreg (Python)
DESCRIPTION: Opens the specified registry key, returning a handle object. It allows specifying the key, subkey, reserved value, and access rights. The key can be either an already opened key or one of the predefined HKEY_* constants. If the function fails, an OSError is raised.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/winreg.rst#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```

.. function:: OpenKey(key, sub_key, reserved=0, access=KEY_READ)
              OpenKeyEx(key, sub_key, reserved=0, access=KEY_READ)

   Opens the specified key, returning a :ref:`handle object <handle-object>`.

   *key* is an already open key, or one of the predefined
   :ref:`HKEY_* constants <hkey-constants>`.

   *sub_key* is a string that identifies the sub_key to open.

   *reserved* is a reserved integer, and must be zero.  The default is zero.

   *access* is an integer that specifies an access mask that describes the desired
   security access for the key.  Default is :const:`KEY_READ`.  See :ref:`Access
   Rights <access-rights>` for other allowed values.

   The result is a new handle to the specified key.

   If the function fails, :exc:`OSError` is raised.

   .. audit-event:: winreg.OpenKey key,sub_key,access winreg.OpenKey

   .. audit-event:: winreg.OpenKey/result key winreg.OpenKey

   .. versionchanged:: 3.2
      Allow the use of named arguments.

   .. versionchanged:: 3.3
      See :ref:`above <exception-changed>`.

```

----------------------------------------

TITLE: Formatting Traceback in Python using tracemalloc
DESCRIPTION: Demonstrates how to format and print a traceback using the tracemalloc module. It iterates through the traceback lines and prints them, similar to the traceback.format_tb function but without newlines.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tracemalloc.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
print("Traceback (most recent call first):")
for line in traceback:
    print(line)
```

----------------------------------------

TITLE: Using Pass in Class Definition - Python
DESCRIPTION: This example shows the use of the `pass` statement as a placeholder within a class definition. It fulfills the syntactic requirement for a statement when the class has no methods or attributes defined yet.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/simple_stmts.rst#_snippet_5

LANGUAGE: python
CODE:
```
class C: pass       # a class with no methods (yet)
```

----------------------------------------

TITLE: Python Member Assignment Ambiguity
DESCRIPTION: This describes that `total = total + 1` in Python can be ambiguous due to dynamic typing. In Python, it is impossible to know in advance which attribute will be referenced at runtime: a local one, a global one, or a member attribute.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/design.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
       total = total + 1   # obj.total = obj.total + 1
```

----------------------------------------

TITLE: Parsing Python Set Comprehension AST with ast.dump
DESCRIPTION: This snippet generates and prints the AST for a set comprehension ('{x for x in numbers}') using `ast.parse` and `ast.dump`. The output demonstrates the `SetComp` node, its `elt` (the expression evaluated for each item), and a list of `generators`, each representing a `for` clause.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_28

LANGUAGE: python
CODE:
```
print(ast.dump(
    ast.parse('{x for x in numbers}', mode='eval'),
    indent=4,
))
```

----------------------------------------

TITLE: Dictionary setdefault Method Example - Python
DESCRIPTION: This code snippet demonstrates the usage of the dictionary's setdefault method in Python. The setdefault method returns the value of the key if it exists. If the key is missing, it inserts the key with the specified default value and returns the default value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.0.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
"if dict.has_key( key ): return dict[key]
   else:
       dict[key] = []
       return dict[key]"
```

----------------------------------------

TITLE: Customizing Combobox Theme Settings in Tkinter ttk
DESCRIPTION: Shows how to modify the appearance of a Combobox widget by changing theme settings for the default theme. This example demonstrates customizing padding, background, fieldbackground, and foreground colors based on different states.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_51

LANGUAGE: python
CODE:
```
from tkinter import ttk
import tkinter

root = tkinter.Tk()

style = ttk.Style()
style.theme_settings("default", {
   "TCombobox": {
       "configure": {"padding": 5},
       "map": {
           "background": [("active", "green2"),
                          ("!disabled", "green4")],
           "fieldbackground": [("!disabled", "green3")],
           "foreground": [("focus", "OliveDrab1"),
                          ("!disabled", "OliveDrab2")]
       }
   }
})

combo = ttk.Combobox().pack()

root.mainloop()
```

----------------------------------------

TITLE: Integer Division Operator (//) Behavior Difference (Python)
DESCRIPTION: Compares the behavior of the integer division (`//`) operator between standard Python integers and `Decimal` objects. It demonstrates that `Decimal` integer division truncates towards zero to preserve the identity `x == (x // y) * y + x % y`, unlike standard integer division which floors.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_15

LANGUAGE: python
CODE:
```
-7 // 4
Decimal(-7) // Decimal(4)
```

----------------------------------------

TITLE: Implementing the 'strict' Codec Error Handling in Python
DESCRIPTION: Implements the 'strict' error handling. Each encoding or decoding error raises a UnicodeError.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/codecs.rst#_snippet_12

LANGUAGE: Python
CODE:
```
strict_errors(exception)
```

----------------------------------------

TITLE: Unescaping HTML Character References in Python
DESCRIPTION: This function converts all named and numeric HTML character references in the input string to their corresponding Unicode characters, according to the HTML 5 standards for valid and invalid references.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/html.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def unescape(s):
    """Convert all named and numeric character references (e.g. ``&gt;``, ``&#62;``, ``&#x3e;``)
    in the string *s* to the corresponding Unicode characters.  This function uses the rules
    defined by the HTML 5 standard for both valid and invalid character references, and the
    :data:`list of HTML 5 named character references <html.entities.html5>`."
    pass  # Implementation code goes here
```

----------------------------------------

TITLE: Override convert_arg_line_to_args - Python argparse
DESCRIPTION: Provides an example of subclassing ArgumentParser and overriding the convert_arg_line_to_args method to customize how arguments are parsed from lines in a file. The example splits each line by spaces.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_95

LANGUAGE: python
CODE:
```
class MyArgumentParser(argparse.ArgumentParser):
    def convert_arg_line_to_args(self, arg_line):
        return arg_line.split()
```

----------------------------------------

TITLE: Defining an Invalid Generic Class (Python)
DESCRIPTION: Shows an example of an invalid generic class definition where the same type variable is used multiple times in the parameter list without being distinct.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_32

LANGUAGE: Python
CODE:
```
class Pair(Generic[T, T]):
    ...
```

----------------------------------------

TITLE: File Dialog Classes for Loading and Saving Files in Tkinter - Python
DESCRIPTION: The `Open` and `SaveAs` classes provide native dialog windows for loading and saving files, respectively. They allow customization through keyword arguments and are part of the `tkinter.filedialog` module, enabling developers to implement file selection functionalities in applications.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dialog.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
.. class:: Open(master=None, **options)
           SaveAs(master=None, **options)

```

----------------------------------------

TITLE: Using Annotated with Custom Metadata Class
DESCRIPTION: Demonstrates how to use `typing.Annotated` with a custom dataclass (`ValueRange`) as metadata to provide additional context for a type, such as range constraints.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_78

LANGUAGE: Python
CODE:
```
@dataclass
class ValueRange:
    lo: int
    hi: int

T1 = Annotated[int, ValueRange(-10, 5)]
T2 = Annotated[T1, ValueRange(-20, 3)]
```

----------------------------------------

TITLE: Base CGI Handler Class Definition
DESCRIPTION: This class is similar to CGIHandler but allows specifying the CGI environment and I/O streams explicitly. The *multithread* and *multiprocess* parameters are used to configure the wsgi.multithread and wsgi.multiprocess flags for any application run by the handler instance. This class is a subclass of SimpleHandler, designed for use with gateway protocol implementations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/wsgiref.rst#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
".. class:: BaseCGIHandler(stdin, stdout, stderr, environ, multithread=True, multiprocess=False)\n\n   Similar to :class:`CGIHandler`, but instead of using the :mod:`sys` and\n   :mod:`os` modules, the CGI environment and I/O streams are specified explicitly.\n   The *multithread* and *multiprocess* values are used to set the\n   ``wsgi.multithread`` and ``wsgi.multiprocess`` flags for any applications run by\n   the handler instance.\n\n   This class is a subclass of :class:`SimpleHandler` intended for use with\n   software other than HTTP \"origin servers\".  If you are writing a gateway\n   protocol implementation (such as CGI, FastCGI, SCGI, etc.) that uses a\n   ``Status:`` header to send an HTTP status, you probably want to subclass this\n   instead of :class:`SimpleHandler`."
```

----------------------------------------

TITLE: Adding File to TarFile Archive in Python
DESCRIPTION: Adds a file or directory specified by `name` to the archive. `arcname` provides an alternative name within the archive. Directories are added recursively by default unless `recursive` is False. A `filter` function can modify the `TarInfo` object or exclude the member by returning `None`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_4

LANGUAGE: python
CODE:
```
TarFile.add(name, arcname=None, recursive=True, *, filter=None)
```

----------------------------------------

TITLE: Custom Logger Adapter Implementation in Python
DESCRIPTION: Demonstrates a custom LoggerAdapter implementation that prepends connection ID to log messages.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
class CustomAdapter(logging.LoggerAdapter):
    """
    This example adapter expects the passed in dict-like object to have a
    'connid' key, whose value in brackets is prepended to the log message.
    """
    def process(self, msg, kwargs):
        return '[%s] %s' % (self.extra['connid'], msg), kwargs
```

----------------------------------------

TITLE: Creating Rounded Decimals with Context.create_decimal (Python)
DESCRIPTION: Demonstrates using the `Context.create_decimal` method to create a `Decimal` object from a string, applying a specific precision and rounding mode during the creation process.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_42

LANGUAGE: Python
CODE:
```
Context(prec=5, rounding=ROUND_DOWN).create_decimal('1.2345678')
```

----------------------------------------

TITLE: Checking Warnings in Python Tests
DESCRIPTION: This example shows how to use the check_warnings context manager to verify that specific warnings are raised and to inspect their properties. It demonstrates catching, asserting, and resetting warnings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/test.rst#2025-04-21_snippet_17

LANGUAGE: Python
CODE:
```
with check_warnings(quiet=True) as w:
    warnings.warn("foo")
    assert str(w.args[0]) == "foo"
    warnings.warn("bar")
    assert str(w.args[0]) == "bar"
    assert str(w.warnings[0].args[0]) == "foo"
    assert str(w.warnings[1].args[0]) == "bar"
    w.reset()
    assert len(w.warnings) == 0
```

----------------------------------------

TITLE: Setting Cookie Policy in Python
DESCRIPTION: This method sets a specified CookiePolicy instance for the CookieJar, allowing for dynamic changes in cookie handling rules.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.cookiejar.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
def set_policy(self, policy):
    self.policy = policy
```

----------------------------------------

TITLE: Adding Type Introspection Helpers to typing Module
DESCRIPTION: Addition of get_origin() and get_args() introspection helper functions to the typing module for examining type annotations.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0b1.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
get_origin()
get_args()
```

----------------------------------------

TITLE: Itertools Recipe: all_equal function
DESCRIPTION: Function that checks if all elements in an iterable are equal to each other, with an optional key function for comparison.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_37

LANGUAGE: python
CODE:
```
def all_equal(iterable, key=None):
    "Returns True if all the elements are equal to each other."
    # all_equal('4٤௪౪໔', key=int) → True
    return len(take(2, groupby(iterable, key))) <= 1
```

----------------------------------------

TITLE: Automatic Descriptor Initialization with __set_name__ Python
DESCRIPTION: This example shows how the `__set_name__` method on a descriptor (`C` in this conceptual example) is automatically called by the Python interpreter when an instance of the descriptor is assigned directly as a class variable during the class creation process.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_13

LANGUAGE: Python
CODE:
```
class A:
    x = C()  # Automatically calls: x.__set_name__(A, 'x')
```

----------------------------------------

TITLE: Detecting CSV Dialect with Sniffer in Python
DESCRIPTION: Using the Sniffer class from Python's csv module, this snippet deduces the format of a CSV file. The dialect is determined by analyzing the first 1024 bytes of the file. Key parameters include the sample size for sniffing, and the snippet is typically followed by processing the file based on the identified dialect.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/csv.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
with open('example.csv', newline='') as csvfile:
    dialect = csv.Sniffer().sniff(csvfile.read(1024))
    csvfile.seek(0)
    reader = csv.reader(csvfile, dialect)
    # ... process CSV file contents here ...

```

----------------------------------------

TITLE: Add os.get_blocking() and os.set_blocking() in Python
DESCRIPTION: Adds os.get_blocking() and os.set_blocking() functions to get and set the blocking mode of a file descriptor. Returns False if the O_NONBLOCK flag is set, True otherwise. These functions are not available on Windows.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.5.0a1.rst#2025-04-21_snippet_4



----------------------------------------

TITLE: Manipulating Class Variables Without Dataclasses - Python
DESCRIPTION: This snippet demonstrates how class variables behave in Python when instances share a mutable list. The `add` method adds elements to the shared list across instances of class C, showcasing that `o1.x` and `o2.x` reference the same list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dataclasses.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
class C:
    x = []
    def add(self, element):
        self.x.append(element)

o1 = C()
o2 = C()
o1.add(1)
o2.add(2)
assert o1.x == [1, 2]
assert o1.x is o2.x
```

----------------------------------------

TITLE: Implementing cycle function in Python
DESCRIPTION: Equivalent implementation of the cycle function that creates an infinite iterator that returns elements from the iterable and saves a copy of each. When the iterable is exhausted, it starts returning elements from the saved copy.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
def cycle(iterable):
    # cycle('ABCD') → A B C D A B C D A B C D ...

    saved = []
    for element in iterable:
        yield element
        saved.append(element)

    while saved:
        for element in saved:
            yield element
```

----------------------------------------

TITLE: Example of IsolatedAsyncioTestCase in unittest Module
DESCRIPTION: This snippet demonstrates the new IsolatedAsyncioTestCase class in the unittest module which provides support for coroutines as test cases, including async setup and teardown methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
import unittest


class TestRequest(unittest.IsolatedAsyncioTestCase):

    async def asyncSetUp(self):
        self.connection = await AsyncConnection()

    async def test_get(self):
        response = await self.connection.get("https://example.com")
        self.assertEqual(response.status_code, 200)

    async def asyncTearDown(self):
        await self.connection.close()


if __name__ == "__main__":
    unittest.main()
```

----------------------------------------

TITLE: Implementing UDP Echo Client Protocol in Python
DESCRIPTION: Defines an EchoClientProtocol class that implements a simple UDP echo client. It sends a datagram to the server, receives the echo, and closes the transport.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
import asyncio


class EchoClientProtocol:
    def __init__(self, message, on_con_lost):
        self.message = message
        self.on_con_lost = on_con_lost
        self.transport = None

    def connection_made(self, transport):
        self.transport = transport
        print('Send:', self.message)
        self.transport.sendto(self.message.encode())

    def datagram_received(self, data, addr):
        print("Received:", data.decode())

        print("Close the socket")
        self.transport.close()

    def error_received(self, exc):
        print('Error received:', exc)

    def connection_lost(self, exc):
        print("Connection closed")
        self.on_con_lost.set_result(True)


async def main():
    # Get a reference to the event loop as we plan to use
    # low-level APIs.
    loop = asyncio.get_running_loop()

    on_con_lost = loop.create_future()
    message = "Hello World!"

    transport, protocol = await loop.create_datagram_endpoint(
        lambda: EchoClientProtocol(message, on_con_lost),
        remote_addr=('127.0.0.1', 9999))

    try:
        await on_con_lost
    finally:
        transport.close()


asyncio.run(main())
```

----------------------------------------

TITLE: Using FileInput Class as Context Manager in Python
DESCRIPTION: Demonstrates how to directly use the FileInput class as a context manager for processing input files. This approach provides more explicit control over the file input sequence.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/fileinput.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
with FileInput(files=('spam.txt', 'eggs.txt')) as input:
    process(input)
```

----------------------------------------

TITLE: Basic Window Methods in Python Curses
DESCRIPTION: Core window object methods for manipulating terminal display including addch(), addnstr(), addstr(), and border() functions. Methods support character/string writing and border drawing with customizable attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_41

LANGUAGE: python
CODE:
```
window.addch(ch[, attr])
window.addch(y, x, ch[, attr])

window.addnstr(str, n[, attr])
window.addnstr(y, x, str, n[, attr])

window.addstr(str[, attr])
window.addstr(y, x, str[, attr])

window.border([ls[, rs[, ts[, bs[, tl[, tr[, bl[, br]]]]]]])
```

----------------------------------------

TITLE: Using NNTP with context manager in Python
DESCRIPTION: Demonstrates using the NNTP class as a context manager to automatically handle connection closure and exception handling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.3.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
>>> from nntplib import NNTP
>>> with NNTP('news.gmane.org') as n:
...     n.group('gmane.comp.python.committers')
...
('211 1755 1 1755 gmane.comp.python.committers', 1755, 1, 1755, 'gmane.comp.python.committers')
>>>
```

----------------------------------------

TITLE: Formatting exception information with format_exception_only
DESCRIPTION: Formats just the exception part of a traceback. Returns a list of strings containing the exception message and any notes attached to the exception.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
format_exception_only(exc, /[, value], *, show_group=False)
```

----------------------------------------

TITLE: Setting and Getting Pencolor and Fillcolor Simultaneously in Python Turtle
DESCRIPTION: Illustrates how to use the `turtle.color()` function to set both the pen color and fill color at once, using various input formats (single color string/tuple for both, or two color specifications for pen and fill respectively). Also shows how to retrieve both colors as a pair.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_55

LANGUAGE: python
CODE:
```
>>> turtle.color("red", "green")
>>> turtle.color()
('red', 'green')
>>> color("#285078", "#a0c8f0")
>>> color()
((40.0, 80.0, 120.0), (160.0, 200.0, 240.0))
```

----------------------------------------

TITLE: Using b16decode in Python
DESCRIPTION: Decodes Base16 (hexadecimal) encoded bytes-like objects or ASCII strings and returns the decoded bytes. Optional casefold parameter determines if lowercase letters are accepted in input.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/base64.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
b16decode(s, casefold=False)
```

----------------------------------------

TITLE: Creating Widget with Variable Binding in Tkinter
DESCRIPTION: Example of creating a Tkinter application with an Entry widget.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
import tkinter as tk

class App(tk.Frame):
    def __init__(self, master):
        super().__init__(master)
        self.pack()

        self.entrythingy = tk.Entry()
```

----------------------------------------

TITLE: Directory Content Listing Functions
DESCRIPTION: Functions to list directory contents and system drives on Windows. Returns file and directory names in arbitrary order.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_38

LANGUAGE: python
CODE:
```
listdir(path='.')
```

LANGUAGE: python
CODE:
```
listdrives()
```

LANGUAGE: python
CODE:
```
listmounts(volume)
```

LANGUAGE: python
CODE:
```
listvolumes()
```

----------------------------------------

TITLE: Implementing Type Conversion Methods in Python
DESCRIPTION: These methods implement the built-in type conversion functions `complex()`, `int()`, and `float()`. They should return a value of the appropriate type (complex, integer, or float, respectively) based on the object's value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_27

LANGUAGE: Python
CODE:
```
object.__complex__(self)
object.__int__(self)
object.__float__(self)
```

----------------------------------------

TITLE: Entering Class Context Manager in Python unittest
DESCRIPTION: Class method to enter a context manager and add its __exit__ method as a class cleanup function. It returns the result of the context manager's __enter__ method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
enterClassContext(cm)
```

----------------------------------------

TITLE: Extract tar Archive to Specific Directory via tarfile CLI - Shell
DESCRIPTION: This command uses the `tarfile` module's command-line interface (`-m tarfile`) and the extract option (`-e`) to extract the contents of the specified tar archive (`monty.tar`) into a different, specified directory (`other-dir/`).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_28

LANGUAGE: Shell
CODE:
```
$ python -m tarfile -e monty.tar  other-dir/
```

----------------------------------------

TITLE: Comparing Decimals by Representation with compare_total (Python)
DESCRIPTION: Illustrates the `compare_total()` method, which compares `Decimal` objects based on their exact representation, not just their numerical value. This shows that '12.0' and '12' are considered unequal by this method due to differing trailing zeros.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_17

LANGUAGE: python
CODE:
```
Decimal('12.0').compare_total(Decimal('12'))
```

----------------------------------------

TITLE: Defining BufferedRandom Class in Python
DESCRIPTION: BufferedRandom provides higher-level access to a seekable RawIOBase binary stream. It inherits from BufferedReader and BufferedWriter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/io.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
class BufferedRandom(raw, buffer_size=DEFAULT_BUFFER_SIZE):
    # Inherits from BufferedReader and BufferedWriter
    pass
```

----------------------------------------

TITLE: Replacing deprecated random.choose with random.choice in Python test
DESCRIPTION: Updates test_pkg_import.py to use the current random.choice method instead of the deprecated random.choose method.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.9.0a1.rst#2025-04-21_snippet_55

LANGUAGE: Python
CODE:
```
# Old code
random.choose()

# New code
random.choice()
```

----------------------------------------

TITLE: Python ResourceWarning Example
DESCRIPTION: Shows ResourceWarning in action when dealing with unclosed file objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_20

LANGUAGE: shell
CODE:
```
$ python -q -Wdefault
>>> f = open("foo", "wb")
>>> del f
__main__:1: ResourceWarning: unclosed file <_io.BufferedWriter name='foo'>
```

----------------------------------------

TITLE: Implementing TCP Echo Client Protocol in Python
DESCRIPTION: Defines an EchoClientProtocol class that implements a simple TCP echo client. It sends a message to the server, receives the echo, and closes the connection.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
import asyncio


class EchoClientProtocol(asyncio.Protocol):
    def __init__(self, message, on_con_lost):
        self.message = message
        self.on_con_lost = on_con_lost

    def connection_made(self, transport):
        transport.write(self.message.encode())
        print('Data sent: {!r}'.format(self.message))

    def data_received(self, data):
        print('Data received: {!r}'.format(data.decode()))

    def connection_lost(self, exc):
        print('The server closed the connection')
        self.on_con_lost.set_result(True)


async def main():
    # Get a reference to the event loop as we plan to use
    # low-level APIs.
    loop = asyncio.get_running_loop()

    on_con_lost = loop.create_future()
    message = 'Hello World!'

    transport, protocol = await loop.create_connection(
        lambda: EchoClientProtocol(message, on_con_lost),
        '127.0.0.1', 8888)

    # Wait until the protocol signals that the connection
    # is lost and close the transport.
    try:
        await on_con_lost
    finally:
        transport.close()


asyncio.run(main())
```

----------------------------------------

TITLE: LZMADecompressor Class for Incremental Data Decompression in Python
DESCRIPTION: The LZMADecompressor class creates a decompressor object for incremental data decompression. It supports various formats and allows setting a memory limit for decompression operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/lzma.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
LZMADecompressor(format=FORMAT_AUTO, memlimit=None, filters=None)
```

----------------------------------------

TITLE: Signal Exception Definition in Python
DESCRIPTION: Definition of ItimerError exception class that's raised for errors in setitimer or getitimer implementations. Inherits from OSError and indicates invalid interval timer or negative time errors.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/signal.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
class ItimerError(OSError):
    # Raised for setitimer or getitimer implementation errors
    pass
```

----------------------------------------

TITLE: Finding Line Starts in Code Objects with findlinestarts() in Python
DESCRIPTION: A generator function that uses the co_lines method of a code object to find the offsets which are starts of lines in the source code. Returns (offset, lineno) pairs indicating where source lines begin in the bytecode.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dis.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
findlinestarts(code)
```

----------------------------------------

TITLE: Implementing Weakref Finalizer for Temporary Directory
DESCRIPTION: Creates a robust resource cleanup mechanism for temporary directories using weakref.finalize, ensuring safe removal of temporary files even if garbage collection is delayed
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/weakref.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
class TempDir:
    def __init__(self):
        self.name = tempfile.mkdtemp()
        self._finalizer = weakref.finalize(self, shutil.rmtree, self.name)

    def remove(self):
        self._finalizer()

    @property
    def removed(self):
        return not self._finalizer.alive
```

----------------------------------------

TITLE: Context Manager Usage with ContextVar
DESCRIPTION: Shows how to use a context variable with the context manager protocol.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextvars.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
var = ContextVar('var', default='default value')

with var.set('new value'):
    assert var.get() == 'new value'

assert var.get() == 'default value'
```

----------------------------------------

TITLE: Override exit Method - Python argparse
DESCRIPTION: Shows how to subclass ArgumentParser and override the exit method to handle program termination differently, such as raising an exception on error instead of calling sys.exit.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_96

LANGUAGE: python
CODE:
```
class ErrorCatchingArgumentParser(argparse.ArgumentParser):
    def exit(self, status=0, message=None):
        if status:
            raise Exception(f'Exiting because of an error: {message}')
        exit(status)
```

----------------------------------------

TITLE: Using isupper() Method in Python Bytes
DESCRIPTION: Shows how to verify if a bytes sequence contains only uppercase ASCII characters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_59

LANGUAGE: python
CODE:
```
>>> b'HELLO WORLD'.isupper()
True
>>> b'Hello world'.isupper()
False
```

----------------------------------------

TITLE: Walking Through Email Parts Example
DESCRIPTION: Example showing how to iterate through all parts of a multipart email message and print their MIME types using the walk() method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.message.rst#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> for part in msg.walk():
...     print(part.get_content_type())
multipart/report
text/plain
message/delivery-status
text/plain
text/plain
message/rfc822
text/plain
```

----------------------------------------

TITLE: Approximating Binomial Distribution Using Normal Distribution in Python
DESCRIPTION: This snippet illustrates the approximation of binomial distribution using normal distribution for a scenario involving conference attendees. It computes the cumulative normal distribution and contrasts it with the exact binomial distribution solution and a simulation-based approximation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_26

LANGUAGE: Python
CODE:
```
>>> n = 750             # Sample size
>>> p = 0.65            # Preference for Python
>>> q = 1.0 - p         # Preference for Ruby
>>> k = 500             # Room capacity

>>> # Approximation using the cumulative normal distribution
>>> from math import sqrt
>>> round(NormalDist(mu=n*p, sigma=sqrt(n*p*q)).cdf(k + 0.5), 4)
0.8402

>>> # Exact solution using the cumulative binomial distribution
>>> from math import comb, fsum
>>> round(fsum(comb(n, r) * p**r * q**(n-r) for r in range(k+1)), 4)
0.8402

>>> # Approximation using a simulation
>>> from random import seed, binomialvariate
>>> seed(8675309)
>>> mean(binomialvariate(n, p) <= k for i in range(10_000))
0.8406
```

----------------------------------------

TITLE: Using pprint.pp() with Depth Limitation in Python
DESCRIPTION: This example shows how to use pprint.pp() with a depth parameter to limit the output to a certain level of nested structures. It uses ellipsis (...) to indicate deeper contents that are not displayed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pprint.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
>>> pprint.pp(project_info, depth=1)
{'author': 'The Python Packaging Authority',
 'author_email': 'pypa-dev@googlegroups.com',
 'bugtrack_url': None,
 'classifiers': [...],
 'description': 'A sample Python project\n'
               '=======================\n'
               '\n'
               'This is the description file for the project.\n'
               '\n'
               'The file should use UTF-8 encoding and be written using '
               'ReStructured Text. It\n'
               'will be used to generate the project webpage on PyPI, and '
               'should be written for\n'
               'that purpose.\n'
               '\n'
               'Typical contents for this file would include an overview of '
               'the project, basic\n'
               'usage examples, etc. Generally, including the project '
               'changelog in here is not\n'
               'a good idea, although a simple "What\'s New" section for the '
               'most recent version\n'
               'may be appropriate.',
 'description_content_type': None,
 'docs_url': None,
 'download_url': 'UNKNOWN',
 'downloads': {...},
 'home_page': 'https://github.com/pypa/sampleproject',
 'keywords': 'sample setuptools development',
 'license': 'MIT',
 'maintainer': None,
 'maintainer_email': None,
 'name': 'sampleproject',
 'package_url': 'https://pypi.org/project/sampleproject/',
 'platform': 'UNKNOWN',
 'project_url': 'https://pypi.org/project/sampleproject/',
 'project_urls': {...},
 'release_url': 'https://pypi.org/project/sampleproject/1.2.0/',
 'requires_dist': None,
 'requires_python': None,
 'summary': 'A sample Python project',
 'version': '1.2.0'}
```

----------------------------------------

TITLE: SequenceMatcher Matching Blocks Printing Example
DESCRIPTION: This example shows how to print the matching blocks found by the SequenceMatcher.  It iterates through each block and prints the starting indices in sequences `a` and `b` along with the number of matching elements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/difflib.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
>>> for block in s.get_matching_blocks():
...     print(\"a[%d] and b[%d] match for %d elements\" % block)
```

----------------------------------------

TITLE: Parsing and Dumping Interactive AST (Python)
DESCRIPTION: Parses a Python source string representing interactive input (`"single"` mode) into an AST using `ast.parse` and then prints a formatted string representation of the resulting AST tree using `ast.dump` with indentation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_4

LANGUAGE: python
CODE:
```
print(ast.dump(ast.parse('x = 1; y = 2', mode='single'), indent=4))
```

----------------------------------------

TITLE: Marking a Subcommand as Deprecated in argparse
DESCRIPTION: This snippet demonstrates how to mark a subparser as deprecated using the `deprecated=True` argument in `add_parser`. This is useful for indicating that a command is no longer recommended for use, potentially prompting warnings or different behavior depending on the argparse version or configuration.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_79

LANGUAGE: python
CODE:
```
import argparse
parser = argparse.ArgumentParser(prog='chicken.py')
subparsers = parser.add_subparsers()
run = subparsers.add_parser('run')
fly = subparsers.add_parser('fly', deprecated=True)
```

----------------------------------------

TITLE: Creating Python Objects with Py_BuildValue
DESCRIPTION: Shows a more concise and recommended way to create Python objects like tuples and lists from C values using the `Py_BuildValue` function. It takes a format string specifying the desired object structure and types. `Py_BuildValue` returns a *new* reference to the created object, making the caller responsible for calling `Py_DECREF` when done. This approach also simplifies error handling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/intro.rst#_snippet_11

LANGUAGE: C
CODE:
```
PyObject *tuple, *list;

tuple = Py_BuildValue("(iis)", 1, 2, "three");
list = Py_BuildValue("[iis]", 1, 2, "three");
```

----------------------------------------

TITLE: Abbreviated Display of Large Containers using reprlib in Python
DESCRIPTION: Demonstrates how to use the reprlib module to create abbreviated displays of large or deeply nested containers. This is useful for creating more readable representations of complex data structures.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib2.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> import reprlib
>>> reprlib.repr(set('supercalifragilisticexpialidocious'))
"{'a', 'c', 'd', 'e', 'f', 'g', ...}"
```

----------------------------------------

TITLE: Standard Exit Codes in Python
DESCRIPTION: These data objects define standard exit codes for use with the `_exit` function. These codes represent various error conditions, such as incorrect usage, data errors, or unavailability of resources.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_62

LANGUAGE: python
CODE:
```
The following exit codes are defined and can be used with :func:`_exit`,
although they are not required.  These are typically used for system programs
written in Python, such as a mail server's external command delivery program.

.. note::

   Some of these may not be available on all Unix platforms, since there is some
   variation.  These constants are defined where they are defined by the underlying
   platform.


.. data:: EX_OK

   Exit code that means no error occurred. May be taken from the defined value of
   ``EXIT_SUCCESS`` on some platforms. Generally has a value of zero.

   .. availability:: Unix, Windows.


.. data:: EX_USAGE

   Exit code that means the command was used incorrectly, such as when the wrong
   number of arguments are given.

   .. availability:: Unix, not WASI.


.. data:: EX_DATAERR

   Exit code that means the input data was incorrect.

   .. availability:: Unix, not WASI.


.. data:: EX_NOINPUT

   Exit code that means an input file did not exist or was not readable.

   .. availability:: Unix, not WASI.


.. data:: EX_NOUSER

   Exit code that means a specified user did not exist.

   .. availability:: Unix, not WASI.


.. data:: EX_NOHOST

   Exit code that means a specified host did not exist.

   .. availability:: Unix, not WASI.


.. data:: EX_UNAVAILABLE

   Exit code that means that a required service is unavailable.

   .. availability:: Unix, not WASI.


.. data:: EX_SOFTWARE

   Exit code that means an internal software error was detected.

   .. availability:: Unix, not WASI.


.. data:: EX_OSERR

   Exit code that means an operating system error was detected, such as the
   inability to fork or create a pipe.

   .. availability:: Unix, not WASI.


.. data:: EX_OSFILE

   Exit code that means some system file did not exist, could not be opened, or had
   some other kind of error.

   .. availability:: Unix, not WASI.


.. data:: EX_CANTCREAT

   Exit code that means a user specified output file could not be created.

   .. availability:: Unix, not WASI.


.. data:: EX_IOERR

   Exit code that means that an error occurred while doing I/O on some file.

   .. availability:: Unix, not WASI.


.. data:: EX_TEMPFAIL

   Exit code that means a temporary failure occurred.  This indicates something
   that may not really be an error, such as a network connection that couldn't be
   made during a retryable operation.

   .. availability:: Unix, not WASI.


.. data:: EX_PROTOCOL

   Exit code that means that a protocol exchange was illegal, invalid, or not
   understood.

   .. availability:: Unix, not WASI.


.. data:: EX_NOPERM

   Exit code that means that there were insufficient permissions to perform the
   operation (but not intended for file system problems).

   .. availability:: Unix, not WASI.


.. data:: EX_CONFIG

   Exit code that means that some kind of configuration error occurred.

   .. availability:: Unix, not WASI.


.. data:: EX_NOTFOUND

   Exit code that means something like "an entry was not found".

   .. availability:: Unix, not WASI.

```

----------------------------------------

TITLE: Formatting Numbers with Locale-Specific Grouping in Python
DESCRIPTION: Shows how to use the locale module to format numbers with culture-specific group separators. This is useful for presenting numbers in a format familiar to users in different regions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib2.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> import locale
>>> locale.setlocale(locale.LC_ALL, 'English_United States.1252')
'English_United States.1252'
>>> conv = locale.localeconv()          # get a mapping of conventions
>>> x = 1234567.8
>>> locale.format_string("%d", x, grouping=True)
'1,234,567'
>>> locale.format_string("%s%.*f", (conv['currency_symbol'],
...                      conv['frac_digits'], x), grouping=True)
'$1,234,567.80'
```

----------------------------------------

TITLE: Creating Custom Repr Enum in Python
DESCRIPTION: Example of implementing a custom __repr__ method for an Enum class to control how enum members are displayed
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_24

LANGUAGE: python
CODE:
```
class Color(Enum):
    RED = object()
    GREEN = object()
    BLUE = object()
    def __repr__(self):
        return "<%s.%s>" % (self.__class__.__name__, self._name_)
```

----------------------------------------

TITLE: Creating Dynamic Directory Size Descriptor in Python
DESCRIPTION: Descriptor that dynamically computes directory size by counting files. Shows how descriptors can perform computations on demand.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import os

class DirectorySize:
    def __get__(self, obj, objtype=None):
        return len(os.listdir(obj.dirname))

class Directory:
    size = DirectorySize()              # Descriptor instance
    def __init__(self, dirname):
        self.dirname = dirname          # Regular instance attribute
```

----------------------------------------

TITLE: Adding Map Strict Parameter
DESCRIPTION: Adds a new keyword-only strict parameter to the map() built-in function to verify equal length of input iterables, similar to zip().
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.14.0a2.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
map(func, *iterables, strict=True)
```

----------------------------------------

TITLE: Printing Parameter Kind Descriptions in Python
DESCRIPTION: This code snippet shows how to use the inspect.signature function to iterate through function parameters and print the description of each parameter's kind.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/inspect.rst#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
def foo(a, b, *, c, d=10):
    pass

sig = signature(foo)
for param in sig.parameters.values():
    print(param.kind.description)
```

----------------------------------------

TITLE: Accessing Special Attributes of GenericAlias
DESCRIPTION: This snippet illustrates how to access special attributes of a GenericAlias object in Python. Attributes such as __origin__, __args__, and __parameters__ provide insights into the structure and generic relationships of the types involved.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_100

LANGUAGE: python
CODE:
```
>>> list[int].__origin__
<class 'list'>
>>> dict[str, list[int]].__args__
(<class 'str'>, list[int])
```

----------------------------------------

TITLE: Demonstrating NaN Behavior in Python
DESCRIPTION: This snippet illustrates the behavior of NaN in various operations and comparisons in Python.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/mathdata/ieee754.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
NAN == NAN
NAN < 0
NAN >= 0
1 + NAN
1 * NAN
0 * NAN
1 ** NAN
NAN ** 0
0 ** NAN
(1.0 + FI.epsilon) * NAN
```

----------------------------------------

TITLE: Using fmean() function with optional weighting in Python
DESCRIPTION: Examples of using the fmean() function to calculate the arithmetic mean with floating point conversion. The second example demonstrates weighted mean calculation using weights parameter, as in calculating a final grade from component scores.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> fmean([3.5, 4.0, 5.25])
4.25

>>> grades = [85, 92, 83, 91]
>>> weights = [0.20, 0.20, 0.30, 0.30]
>>> fmean(grades, weights)
87.6
```

----------------------------------------

TITLE: Path.move() Implementation
DESCRIPTION: New method added to pathlib.Path for moving files or directory trees.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.14.0a1.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
from pathlib import Path
path = Path('source')
path.move('destination')
```

----------------------------------------

TITLE: Using expandtabs Method in Python bytes Objects
DESCRIPTION: Shows how to replace tab characters with spaces in bytes objects using the expandtabs() method. The tabsize parameter determines how many spaces replace each tab.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_53

LANGUAGE: python
CODE:
```
>>> b'01\t012\t0123\t01234'.expandtabs()
b'01      012     0123    01234'
>>> b'01\t012\t0123\t01234'.expandtabs(4)
b'01  012 0123    01234'
```

----------------------------------------

TITLE: Parsing Python If-Else Expression AST with ast.dump
DESCRIPTION: This snippet demonstrates parsing a simple Python if-else expression ('a if b else c') into its Abstract Syntax Tree (AST) representation using `ast.parse` and then printing the structure using `ast.dump` with indentation. It shows the structure of the `IfExp` node and its `test`, `body`, and `orelse` fields.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_21

LANGUAGE: python
CODE:
```
print(ast.dump(ast.parse('a if b else c', mode='eval'), indent=4))
```

----------------------------------------

TITLE: Adding fnmatch.filterfalse Function for Pattern Exclusion
DESCRIPTION: Adds a new fnmatch.filterfalse function that returns names NOT matching a pattern, complementing the existing fnmatch.filter function which returns names that DO match a pattern. This provides a convenient way to exclude items based on patterns.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.14.0a7.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
fnmatch.filterfalse(names, pattern)
```

----------------------------------------

TITLE: Linear Regression Example with Monty Python Films
DESCRIPTION: Demonstrates using linear regression to predict the cumulative number of Monty Python films based on historical data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
>>> year = [1971, 1975, 1979, 1982, 1983]
>>> films_total = [1, 2, 3, 4, 5]
>>> slope, intercept = linear_regression(year, films_total)
>>> round(slope * 2019 + intercept)
16
```

----------------------------------------

TITLE: Using the Datetime Fold Attribute for Time Disambiguation
DESCRIPTION: Shows how to use the new fold attribute introduced in PEP 495 to differentiate between ambiguous times during daylight saving time transitions, where the same local time occurs twice.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.6.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
>>> u0 = datetime(2016, 11, 6, 4, tzinfo=timezone.utc)
>>> for i in range(4):
...     u = u0 + i*HOUR
...     t = u.astimezone(Eastern)
...     print(u.time(), 'UTC =', t.time(), t.tzname(), t.fold)
...
04:00:00 UTC = 00:00:00 EDT 0
05:00:00 UTC = 01:00:00 EDT 0
06:00:00 UTC = 01:00:00 EST 1
07:00:00 UTC = 02:00:00 EST 0
```

----------------------------------------

TITLE: Accessing Specific Entry Point by Name (Python)
DESCRIPTION: Demonstrates how to retrieve a specific `EntryPoint` instance from a filtered `EntryPoints` collection. By using dictionary-style subscripting (`[]`) with the entry point's name ('wheel'), you can access the individual `EntryPoint` object for further inspection or loading.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_8

LANGUAGE: Python Console
CODE:
```
>>> wheel = scripts['wheel']  # doctest: +SKIP
```

----------------------------------------

TITLE: Testing Warning Generation
DESCRIPTION: Example of testing code that generates warnings using catch_warnings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/warnings.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
import warnings

def fxn():
    warnings.warn("deprecated", DeprecationWarning)

with warnings.catch_warnings(record=True) as w:
    # Cause all warnings to always be triggered.
    warnings.simplefilter("always")
    # Trigger a warning.
    fxn()
    # Verify some things
    assert len(w) == 1
    assert issubclass(w[-1].category, DeprecationWarning)
    assert "deprecated" in str(w[-1].message)
```

----------------------------------------

TITLE: Adding TarInfo Object to TarFile Archive in Python
DESCRIPTION: Adds a pre-created `TarInfo` object to the archive. If `tarinfo` represents a regular file with a non-zero size, the `fileobj` (a binary file object) must be provided to supply the data; `tarinfo.size` bytes are read from it. `TarInfo` objects can be created directly or via `gettarinfo`. In Python 3.13+, `fileobj` must be given for non-zero-sized regular files.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_5

LANGUAGE: python
CODE:
```
TarFile.addfile(tarinfo, fileobj=None)
```

----------------------------------------

TITLE: Cycling Through Elements with itertools.cycle
DESCRIPTION: Demonstrates itertools.cycle() which creates an infinite iterator by repeatedly cycling through elements of an iterable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
itertools.cycle([1, 2, 3, 4, 5]) =>
  1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...
```

----------------------------------------

TITLE: Sealing Mocks - Python
DESCRIPTION: Demonstrates how to prevent automatic creation of mocks when accessing attributes of a sealed mock. This example shows how to seal a mock object and how assigning named mocks prevents sealing of particular attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_63

LANGUAGE: python
CODE:
```
>>> mock = Mock()
>>> mock.submock.attribute1 = 2
>>> mock.not_submock = mock.Mock(name="sample_name")
>>> seal(mock)
>>> mock.new_attribute  # This will raise AttributeError.
>>> mock.submock.attribute2  # This will raise AttributeError.
>>> mock.not_submock.attribute2  # This won't raise.
```

----------------------------------------

TITLE: Date Parsing with strptime
DESCRIPTION: Example of handling leap year dates when parsing date strings without year information
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> from datetime import date
>>> date_string = "02/29"
>>> when = date.strptime(f"{date_string};1984", "%m/%d;%Y")  # Avoids leap year bug.
>>> when.strftime("%B %d")  # doctest: +SKIP
'February 29'
```

----------------------------------------

TITLE: WeakValueDictionary Example
DESCRIPTION: This snippet demonstrates the usage of `weakref.WeakValueDictionary`.  It creates a weak reference to an object stored in the dictionary. When the original reference is deleted and garbage collection runs, the entry is automatically removed from the dictionary.  This avoids memory leaks by allowing the dictionary to hold values without preventing them from being garbage collected.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib2.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
>>> import weakref, gc
>>> class A:
...     def __init__(self, value):
...         self.value = value
...     def __repr__(self):
...         return str(self.value)
... 
>>> a = A(10)                   # create a reference
>>> d = weakref.WeakValueDictionary()
>>> d['primary'] = a            # does not create a reference
>>> d['primary']                # fetch the object if it is still alive
10
>>> del a                       # remove the one reference
>>> gc.collect()                # run garbage collection right away
0
>>> d['primary']                # entry was automatically removed
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    d['primary']                # entry was automatically removed
  File "C:/python314/lib/weakref.py", line 46, in __getitem__
    o = self.data[key]()
KeyError: 'primary'
```

----------------------------------------

TITLE: Exact Decimal Conversion from Float in Python
DESCRIPTION: Demonstrates creating a decimal object from a binary float using the decimal module. The conversion is precise, showing the true binary fraction representation which may have surprising extra digits, as binary cannot perfectly represent every decimal fraction.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.1.rst#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
Decimal.from_float(1.1)
Decimal('1.100000000000000088817841970012523233890533447265625')
```

----------------------------------------

TITLE: Popping Smallest Item from Heap - Python
DESCRIPTION: The `heappop` function removes and returns the smallest item from the heap while maintaining the heap invariant. An `IndexError` is raised if the heap is empty.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/heapq.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
def heappop(heap):
    """
    Pop and return the smallest item from the *heap*, maintaining the heap
    invariant. If the heap is empty, :exc:`IndexError` is raised. To access the
    smallest item without popping it, use ``heap[0]``.
    """
```

----------------------------------------

TITLE: Using unittest.main at end of test script
DESCRIPTION: Simple example of using unittest.main() to make a test module executable as a script. This pattern allows test modules to be run directly from the command line.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_39

LANGUAGE: python
CODE:
```
if __name__ == '__main__':
    unittest.main()
```

----------------------------------------

TITLE: Removing special values before sorting using filterfalse
DESCRIPTION: This snippet demonstrates how to remove special values, specifically `NaN` (Not a Number), from a list before sorting using `filterfalse` and `isnan` from the `math` module. This is necessary because NaN values are unordered and can cause unexpected behavior during sorting.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/sorting.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```

>>> from math import isnan
>>> from itertools import filterfalse
>>> data = [3.3, float('nan'), 1.1, 2.2]
>>> sorted(filterfalse(isnan, data))
[1.1, 2.2, 3.3]

```

----------------------------------------

TITLE: Modifying Data Through Memory Views in Python
DESCRIPTION: Demonstrates how to use a memoryview to modify the underlying data object through assignments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_69

LANGUAGE: python
CODE:
```
>>> data = bytearray(b'abcefg')
>>> v = memoryview(data)
>>> v.readonly
False
>>> v[0] = ord(b'z')
>>> data
bytearray(b'zbcefg')
>>> v[1:4] = b'123'
>>> data
bytearray(b'z123fg')
>>> v[2:3] = b'spam'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: memoryview assignment: lvalue and rvalue have different structures
>>> v[2:6] = b'spam'
>>> data
bytearray(b'z1spam')
```

----------------------------------------

TITLE: Defining Descriptor and Inheritance for Testing (Python)
DESCRIPTION: Sets up classes `Desc`, `B`, and `A` to demonstrate descriptor behavior, inheritance, and `super` calls for subsequent tests. Defines a simple descriptor `__get__` and shows attribute overriding in the subclass `A`. This snippet is used as setup for the doctest examples that follow.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_9

LANGUAGE: python
CODE:
```
class Desc:
    def __get__(*args):
        return args

class B:

    x = Desc()

class A(B):

    x = 999

    def m(self):
        'Demonstrate these two descriptor invocations are equivalent'
        result1 = super(A, self).x
        result2 = B.__dict__['x'].__get__(self, A)
        return result1 == result2
```

----------------------------------------

TITLE: Python Relative Import Examples
DESCRIPTION: Demonstrates relative import syntax using leading periods to import from different package levels.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from .string import name1, name2
from . import string

from . import D                 # Imports A.B.D
from .. import E                # Imports A.E
from ..F import G               # Imports A.F.G
```

----------------------------------------

TITLE: Using Argparse to Parse a Command String in Python
DESCRIPTION: This snippet shows how to use the defined `argparse` parser to parse a command string and access the parsed arguments. It splits a command string into a list of arguments and passes it to `parser.parse_args()`. The code then accesses the values of the parsed arguments: `action`, `targets`, and `user`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> cmd = 'deploy sneezy.example.com sleepy.example.com -u skycaptain'
>>> result = parser.parse_args(cmd.split())
>>> result.action
'deploy'
>>> result.targets
['sneezy.example.com', 'sleepy.example.com']
>>> result.user
'skycaptain'
```

----------------------------------------

TITLE: Converting Colors Between RGB and HSV in Python
DESCRIPTION: This snippet demonstrates the usage of the colorsys module to convert colors between RGB and HSV color spaces. It shows how to import the module and use the rgb_to_hsv and hsv_to_rgb functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/colorsys.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> import colorsys
>>> colorsys.rgb_to_hsv(0.2, 0.4, 0.4)
(0.5, 0.5, 0.4)
>>> colorsys.hsv_to_rgb(0.5, 0.5, 0.4)
(0.2, 0.4, 0.4)
```

----------------------------------------

TITLE: Date Replacement Example
DESCRIPTION: Demonstration of using the date.replace() method to create a new date with modified values
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
>>> from datetime import date
>>> d = date(2002, 12, 31)
>>> d.replace(day=26)
datetime.date(2002, 12, 26)
```

----------------------------------------

TITLE: Applying Type Conversion to String Defaults in Python argparse
DESCRIPTION: Illustrates that the `type` converter is applied to a string `default` value ('10' converted to int 10) but not to a non-string `default` value (10.5 remains float 10.5) when parsing arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_47

LANGUAGE: Python
CODE:
```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--length', default='10', type=int)
>>> parser.add_argument('--width', default=10.5, type=int)
>>> parser.parse_args()
Namespace(length=10, width=10.5)
```

----------------------------------------

TITLE: Creating an IPv4 address
DESCRIPTION: Creates an IPv4Address object from a string, integer, or bytes representation. It demonstrates creating IPv4 addresses using different input formats.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ipaddress.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> ipaddress.IPv4Address('192.168.0.1')
IPv4Address('192.168.0.1')
>>> ipaddress.IPv4Address(3232235521)
IPv4Address('192.168.0.1')
>>> ipaddress.IPv4Address(b'\xC0\xA8\x00\x01')
IPv4Address('192.168.0.1')
```

----------------------------------------

TITLE: Using Immutable Type Subclasses in Python
DESCRIPTION: Examples of how to use custom immutable class implementations, showing the automatic transformations applied to input values based on the overridden __new__ methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_61

LANGUAGE: python
CODE:
```
>>> FirstOfMonthDate(2012, 2, 14)
FirstOfMonthDate(2012, 2, 1)
>>> NamedInt('ten')
10
>>> NamedInt(20)
20
>>> TitleStr('Blog: Why Python Rocks')
'blog-why-python-rocks'
```

----------------------------------------

TITLE: Setting Multiple Widget Options Using config() in Tkinter
DESCRIPTION: Demonstrates using the config() method to update multiple widget attributes after creation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
fred.config(fg="red", bg="blue")
```

----------------------------------------

TITLE: operator.is_not_none Equivalent (Python)
DESCRIPTION: Shows the equivalence between the new `operator.is_not_none()` function and the standard `is not None` comparison. This function provides a callable alternative for checking if an object is not `None`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_25

LANGUAGE: Python
CODE:
```
operator.is_not_none(obj)
```

LANGUAGE: Python
CODE:
```
obj is not None
```

----------------------------------------

TITLE: Handling HTML Parser Start and End Tags in Python
DESCRIPTION: This code snippet provides the implementation details for handling start tags and end tags within the HTMLParser class. It shows how to capture the tag name and attributes and can be overridden by subclasses to customize behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/html.parser.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
.. method:: HTMLParser.handle_starttag(tag, attrs)

   This method is called to handle the start tag of an element (e.g. ``<div id="main">``).

   The *tag* argument is the name of the tag converted to lower case. The *attrs*
   argument is a list of ``(name, value)`` pairs containing the attributes found
   inside the tag's ``<>`` brackets...
```

----------------------------------------

TITLE: Exiting a Process with _exit in Python
DESCRIPTION: The `_exit(n)` function exits the process with the given status *n* without calling cleanup handlers or flushing stdio buffers. It is generally used in the child process after a fork. The standard way to exit is `sys.exit(n)`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_61

LANGUAGE: python
CODE:
```
.. function:: _exit(n)

   Exit the process with status *n*, without calling cleanup handlers, flushing
   stdio buffers, etc.

   .. note::

      The standard way to exit is :func:`sys.exit(n) <sys.exit>`.  :func:`!_exit` should
      normally only be used in the child process after a :func:`fork`.

```

----------------------------------------

TITLE: Multi-line F-string Expressions with Comments in Python 3.12
DESCRIPTION: Demonstrates the ability in Python 3.12 (PEP 701) to define f-string expressions that span multiple lines and include inline comments, improving code readability.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_8

LANGUAGE: python
CODE:
```
f"This is the playlist: {", ".join([
    'Take me back to Eden',  # My, my, those eyes like fire
    'Alkaline',              # Not acid nor alkaline
    'Ascensionism'           # Take to the broken skies at last
])}"
```

----------------------------------------

TITLE: Defining Class with Explicit Nominal Subtyping in Python
DESCRIPTION: This example shows how to define a class (`Bucket`) that explicitly inherits from abstract base classes (`Sized`, `Iterable`) to conform to nominal subtyping rules as defined in PEP 484. This approach requires the class definition to list all base classes it intends to implement.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_46

LANGUAGE: python
CODE:
```
from collections.abc import Sized, Iterable, Iterator

class Bucket(Sized, Iterable[int]):
    ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
```

----------------------------------------

TITLE: Finding Classes During Unpickling in Python
DESCRIPTION: Method that imports a module if necessary and returns the named object from it. Used by the unpickler to locate classes and functions referenced in the pickle data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pickle.rst#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
find_class(module, name)
```

----------------------------------------

TITLE: Python Syntax Error Suggestions
DESCRIPTION: This snippet demonstrates Python's improved syntax error messages. It shows how the interpreter suggests the correct keyword for common misspellings like 'whille', 'asynch', 'awaid', and 'raisee', helping programmers quickly fix typing mistakes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_8

LANGUAGE: python
CODE:
```
>>> whille True:
...     pass
Traceback (most recent call last):
  File "<stdin>", line 1
    whille True:
    ^^^^^^
SyntaxError: invalid syntax. Did you mean 'while'?

>>> asynch def fetch_data():
...     pass
Traceback (most recent call last):
  File "<stdin>", line 1
    asynch def fetch_data():
    ^^^^^^
SyntaxError: invalid syntax. Did you mean 'async'?

>>> async def foo():
...     awaid fetch_data()
Traceback (most recent call last):
  File "<stdin>", line 2
    awaid fetch_data()
    ^^^^^
SyntaxError: invalid syntax. Did you mean 'await'?

>>> raisee ValueError("Error")
Traceback (most recent call last):
  File "<stdin>", line 1
    raisee ValueError("Error")
    ^^^^^^
SyntaxError: invalid syntax. Did you mean 'raise'?
```

----------------------------------------

TITLE: Creating MyEnum Class with Custom Value Interpretation in Python
DESCRIPTION: This example shows how to create an Enum class that subclasses IntEnum and passes additional arguments to the integer constructor for custom value interpretation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
class MyEnum(IntEnum):      # help(int) -> int(x, base=10) -> integer
    example = '11', 16      # so x='11' and base=16

MyEnum.example.value        # and hex(11) is...
```

----------------------------------------

TITLE: Using an HTTP Proxy with urllib.request
DESCRIPTION: This example shows how to use an explicitly specified HTTP proxy with urllib.request, overriding any environment settings. A ProxyHandler is created with the proxy details, and a custom opener is built using build_opener. The opener is then used to open the target URL, and the response content is read and decoded.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_51

LANGUAGE: python
CODE:
```
>>> import urllib.request
>>> proxies = {'http': 'http://proxy.example.com:8080/'}
>>> opener = urllib.request.build_opener(urllib.request.ProxyHandler(proxies))
>>> with opener.open("http://www.python.org") as f:
...     f.read().decode('utf-8')
... 
```

----------------------------------------

TITLE: Filtering Package Files with importlib.metadata - Python
DESCRIPTION: Shows how to use the `files()` function to get a list of `PackagePath` objects representing the files installed by a package, and then filter this list to find a specific file.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_17

LANGUAGE: python
CODE:
```
>>> util = [p for p in files('wheel') if 'util.py' in str(p)][0]  # doctest: +SKIP
```

----------------------------------------

TITLE: Adding Objects to Module in C Extension
DESCRIPTION: Example of adding an object to a Python module using PyModule_AddObjectRef with error handling and reference management
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/module.rst#2025-04-21_snippet_3

LANGUAGE: C
CODE:
```
static int
add_spam(PyObject *module, int value)
{
    PyObject *obj = PyLong_FromLong(value);
    if (obj == NULL) {
        return -1;
    }
    int res = PyModule_AddObjectRef(module, "spam", obj);
    Py_DECREF(obj);
    return res;
}
```

----------------------------------------

TITLE: Extracting current stack frame information with extract_stack
DESCRIPTION: Extracts stacktrace information from the current execution stack, returning data in the same format as extract_tb.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
extract_stack(f=None, limit=None)
```

----------------------------------------

TITLE: Processing Subclass Keyword Arguments using __init_subclass__ Python
DESCRIPTION: This snippet demonstrates how to define and process custom keyword arguments when a class is subclassed. The `__init_subclass__` class method in the base class captures specific arguments (like `default_name`) and passes the rest (`**kwargs`) to the parent `__init_subclass__`, allowing subclasses to influence their own creation based on arguments provided in their definition.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_12

LANGUAGE: Python
CODE:
```
class Philosopher:
    def __init_subclass__(cls, /, default_name, **kwargs):
        super().__init_subclass__(**kwargs)
        cls.default_name = default_name

class AustralianPhilosopher(Philosopher, default_name="Bruce"):
    pass
```

----------------------------------------

TITLE: Multiple Inheritance Diamond Pattern Example
DESCRIPTION: Illustrates the classic diamond inheritance pattern and how new-style classes handle method resolution.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.2.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
class A:
    def save(self): ...

class B(A):
    pass

class C(A):
    def save(self): ...

class D(B,C):
    def save(self):
        # Call superclass .save()
        super(D, self).save()
        # Save D's private information here
        ...
```

----------------------------------------

TITLE: Creating IP Interface Objects in Python
DESCRIPTION: Demonstrates creation of IP interface objects that associate an address with a particular network using CIDR notation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/ipaddress.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> ipaddress.ip_interface('192.0.2.1/24')
IPv4Interface('192.0.2.1/24')
>>> ipaddress.ip_interface('2001:db8::1/96')
IPv6Interface('2001:db8::1/96')
```

----------------------------------------

TITLE: Setting Window Properties with Tkinter's Window Manager in Python
DESCRIPTION: This snippet illustrates how to interact with the window manager utility in Tkinter to set window properties such as title and maximum size. It shows initialization of a Tkinter Frame subclass and includes method calls to set window management options. This code relies on the tkinter module and assumes familiarity with Python and Tkinter syntax.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
import tkinter as tk

class App(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.pack()

# create the application
myapp = App()

#
# here are method calls to the window manager class
#
myapp.master.title("My Do-Nothing Application")
myapp.master.maxsize(1000, 400)

# start the program
myapp.mainloop()
```

----------------------------------------

TITLE: Generating Pairwise Elements
DESCRIPTION: The pairwise function generates successive overlapping pairs from an input iterable, returning a sequence of 2-tuples.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
.. function:: pairwise(iterable)

   Return successive overlapping pairs taken from the input *iterable*.

   The number of 2-tuples in the output iterator will be one fewer than the
   number of inputs.  It will be empty if the input iterable has fewer than
   two values.
```

----------------------------------------

TITLE: TypeVarTuple Usage in Class Definition
DESCRIPTION: Shows how TypeVarTuple can be used in class definitions, including method signatures and return types, to create variadic generic classes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_116

LANGUAGE: python
CODE:
```
class Array[*Shape]:
    def __getitem__(self, key: tuple[*Shape]) -> float: ...
    def __abs__(self) -> "Array[*Shape]": ...
    def get_shape(self) -> tuple[*Shape]: ...
```

----------------------------------------

TITLE: Copying Data Between File Descriptors (Python)
DESCRIPTION: The sendfile() function copies count bytes from file descriptor in_fd to out_fd starting at offset. It returns the number of bytes sent. This function supports different behaviors on various Unix platforms, including handling headers and trailers on macOS and FreeBSD.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
sendfile(out_fd, in_fd, offset, count)
sendfile(out_fd, in_fd, offset, count, headers=(), trailers=(), flags=0)
```

----------------------------------------

TITLE: Initializing and Using Python sched Scheduler
DESCRIPTION: This snippet demonstrates how to import the sched module, create a scheduler instance, define event functions, and schedule various events using different methods like enter() and enterabs(). It showcases the scheduler's ability to handle different priorities and absolute/relative timing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sched.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> import sched, time
>>> s = sched.scheduler(time.time, time.sleep)
>>> def print_time(a='default'):
...     print("From print_time", time.time(), a)
...
>>> def print_some_times():
...     print(time.time())
...     s.enter(10, 1, print_time)
...     s.enter(5, 2, print_time, argument=('positional',))
...     # despite having higher priority, 'keyword' runs after 'positional' as enter() is relative
...     s.enter(5, 1, print_time, kwargs={'a': 'keyword'})
...     s.enterabs(1_650_000_000, 10, print_time, argument=("first enterabs",))
...     s.enterabs(1_650_000_000, 5, print_time, argument=("second enterabs",))
...     s.run()
...     print(time.time())
...
>>> print_some_times()
1652342830.3640375
From print_time 1652342830.3642538 second enterabs
From print_time 1652342830.3643398 first enterabs
From print_time 1652342835.3694863 positional
From print_time 1652342835.3696074 keyword
From print_time 1652342840.369612 default
1652342840.3697174
```

----------------------------------------

TITLE: Handling Argparse Conflict (Resolve) (Python)
DESCRIPTION: Shows how to use `conflict_handler='resolve'` in `ArgumentParser` to allow overriding existing arguments with the same option string. When a conflict occurs, the new argument replaces the old one for the conflicting option strings, while non-conflicting option strings from the old argument are retained.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_18

LANGUAGE: python
CODE:
```
>>> import argparse
>>> parser = argparse.ArgumentParser(prog='PROG', conflict_handler='resolve')
>>> parser.add_argument('-f', '--foo', help='old foo help')
>>> parser.add_argument('--foo', help='new foo help')
>>> parser.print_help()
usage: PROG [-h] [-f FOO] [--foo FOO]

options:
 -h, --help  show this help message and exit
 -f FOO      old foo help
 --foo FOO   new foo help
```

----------------------------------------

TITLE: TypedDict Functional Syntax (Handling Private Names)
DESCRIPTION: Demonstrates that the functional syntax for `TypedDict` does not apply private name mangling to keys starting with double underscores, preserving the exact string key name.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_152

LANGUAGE: python
CODE:
```
Definition = TypedDict('Definition', {'__schema': str})  # not mangled
```

----------------------------------------

TITLE: Defining TraversableResources Abstract Base Class in Python
DESCRIPTION: An abstract base class extending ResourceReader, providing an interface for accessing package resources through a files() method
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.resources.abc.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
class TraversableResources(ResourceReader):
    def files(self):
        # Abstract method to return Traversable object for package
        pass
```

----------------------------------------

TITLE: Using In-place Union Operator (|=) with multiprocessing DictProxy (Python)
DESCRIPTION: Illustrates the addition of the in-place dictionary union operator (`|=`) for multiprocessing proxy objects. This allows updating a dictionary proxy with key-value pairs from another mapping or iterable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_23

LANGUAGE: Python
CODE:
```
d |= {'b': 2}
```

----------------------------------------

TITLE: Adding Module and Class Cleanup to unittest
DESCRIPTION: Adds addModuleCleanup and addClassCleanup methods to unittest to support cleanups for setUpModule and setUpClass. This allows for proper cleanup of resources initialized in module and class setup methods.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0a1.rst#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
unittest.addModuleCleanup()
unittest.TestCase.addClassCleanup()
```

----------------------------------------

TITLE: Creating TarInfo Object in Python
DESCRIPTION: Creates a `TarInfo` object, which represents a single member within a tar archive. It stores metadata like file type, size, modification time, permissions, and ownership. It does not contain the file data itself. Objects can be initialized with an optional `name`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_9

LANGUAGE: python
CODE:
```
TarInfo(name="")
```

----------------------------------------

TITLE: Implementing LoggerAdapter Debug Method in Python
DESCRIPTION: Shows the implementation of the debug method in LoggerAdapter class that delegates logging calls while adding contextual information.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
def debug(self, msg, /, *args, **kwargs):
    """
    Delegate a debug call to the underlying logger, after adding
    contextual information from this adapter instance.
    """
    msg, kwargs = self.process(msg, kwargs)
    self.logger.debug(msg, *args, **kwargs)
```

----------------------------------------

TITLE: Using FTP with Context Manager in Python
DESCRIPTION: Demonstrates how to use the ftplib.FTP class with a context manager to automatically handle socket errors and close the connection when done.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_47

LANGUAGE: python
CODE:
```
>>> from ftplib import FTP
>>> with FTP("ftp1.at.proftpd.org") as ftp:
         ftp.login()
         ftp.dir()

'230 Anonymous login ok, restrictions apply.'
dr-xr-xr-x   9 ftp      ftp           154 May  6 10:43 .
dr-xr-xr-x   9 ftp      ftp           154 May  6 10:43 ..
dr-xr-xr-x   5 ftp      ftp          4096 May  6 10:43 CentOS
dr-xr-xr-x   3 ftp      ftp            18 Jul 10  2008 Fedora
```

----------------------------------------

TITLE: Using getpreferredencoding Function in Python
DESCRIPTION: Returns the locale encoding used for text data based on user preferences. Can optionally skip setlocale call with do_setlocale=False parameter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/locale.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
getpreferredencoding(do_setlocale=True)
```

----------------------------------------

TITLE: TypeVarTuple Usage Example 3 (Multiple Element Tuple)
DESCRIPTION: An example demonstrating the function parameterized by a TypeVarTuple when the tuple argument has multiple elements, binding the TypeVarTuple to multiple types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_111

LANGUAGE: python
CODE:
```
# T is bound to int, Ts is bound to (str, float)
# Return value is ('spam', 3.0, 1), which has type tuple[str, float, int]
move_first_element_to_last(tup=(1, 'spam', 3.0))
```

----------------------------------------

TITLE: Using copy_sign Method in Python Decimal
DESCRIPTION: Demonstrates how the `copy_sign` method copies the sign from one Decimal object to another, returning a new Decimal with the first operand's value and the second operand's sign.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_18

LANGUAGE: Python
CODE:
```
Decimal('2.3').copy_sign(Decimal('-1.5'))
Decimal('-2.3')
```

----------------------------------------

TITLE: Printing last exception with print_last
DESCRIPTION: Prints the last exception that reached an interactive prompt, accessed through sys.last_exc.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
print_last(limit=None, file=None, chain=True)
```

----------------------------------------

TITLE: Accessing the Registry of a singledispatch Function
DESCRIPTION: Demonstrates how to access the registry attribute to view all registered implementations and their associated types. This can be useful for debugging and introspection.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
>>> fun.registry.keys()
dict_keys([<class 'NoneType'>, <class 'int'>, <class 'object'>,
          <class 'decimal.Decimal'>, <class 'list'>,
          <class 'float'>])
>>> fun.registry[float]
<function fun_num at 0x1035a2840>
>>> fun.registry[object]
<function fun at 0x103fe0000>
```

----------------------------------------

TITLE: Demonstrating Double String Quoting with Stringized Annotations
DESCRIPTION: This example shows how string annotations get double-quoted when using 'from __future__ import annotations'. The string annotation is quoted twice in the resulting annotations dictionary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/annotations.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from __future__ import annotations
def foo(a: "str"): pass

print(foo.__annotations__)
```

----------------------------------------

TITLE: Attaching JPEG Image in MIME Email
DESCRIPTION: This snippet shows how to attach a JPEG image in a MIME email. It includes headers for Content-Id, Content-Type, Content-Disposition, and Content-Transfer-Encoding, followed by the base64-encoded image data.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/test_email/data/msg_22.txt#2025-04-21_snippet_2

LANGUAGE: mime
CODE:
```
--============_-1208892523==_============
Content-Id: <a05001902b7f1c33773e9@[134.84.183.138].0.0>
Content-Type: image/jpeg; name="wibble.JPG"
 ; x-mac-type="4A504547"
 ; x-mac-creator="474B4F4E"
Content-Disposition: attachment; filename="wibble.JPG"
Content-Transfer-Encoding: base64

/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/wAALCAXABIEBAREA
g6bCjjw/pIZSjO6FWFpldjySOmCNrO7DBZibUXhTwtCixw+GtAijVdqxxaPp0aKvmGXa
qrbBQvms0mAMeYS/3iTV1dG0hHaRNK01XblnWxtVdjkHLMIgTyqnk9VB7CrP2KzIINpa
4O7I+zxYO9WV8jZg71Zlb+8rMDkEirAVQFAUAKAFAAAUAYAUDgADgY6DjpRtXj5RxjHA
4wQRj0wQCMdCAewpaKKK/9k=
```

----------------------------------------

TITLE: Checking for Message-ID Header in Python Email Message
DESCRIPTION: This snippet demonstrates how to check if a 'message-id' header exists in an EmailMessage object and print its value if present. It showcases the use of the __contains__ and __getitem__ methods of the EmailMessage class.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.message.rst#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
if 'message-id' in myMessage:
    print('Message-ID:', myMessage['message-id'])
```

----------------------------------------

TITLE: Adding Socket Timeout to SysLogHandler
DESCRIPTION: Introduces a timeout parameter to the SysLogHandler class in the logging module to control socket connection timeouts.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.14.0a5.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
Add a socket *timeout* keyword argument to
:class:`logging.handlers.SysLogHandler`.
```

----------------------------------------

TITLE: Optimizing re module functions in Python
DESCRIPTION: Optimizes re.search, re.split, re.findall, re.finditer and re.sub for regular expressions starting with \A or ^. This improves performance for these common regex operations.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a7.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
Optimize re.search, re.split, re.findall, re.finditer and re.sub
```

----------------------------------------

TITLE: Creating a Memory-mapped File in Python
DESCRIPTION: This snippet demonstrates how to create and use a memory-mapped file in Python, including writing to and reading from the file using a mmap object. It shows basic file operations and memory mapping techniques, suitable for contexts where file I/O performance is critical.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/mmap.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import mmap

# write a simple example file
with open("hello.txt", "wb") as f:
    f.write(b"Hello Python!\n")

with open("hello.txt", "r+b") as f:
    # memory-map the file, size 0 means whole file
    mm = mmap.mmap(f.fileno(), 0)
    # read content via standard file methods
    print(mm.readline())  # prints b"Hello Python!\n"
    # read content via slice notation
    print(mm[:5])  # prints b"Hello"
    # update content using slice notation;
    # note that new content must have same size
    mm[6:] = b" world!\n"
    # ... and read again using standard file methods
    mm.seek(0)
    print(mm.readline())  # prints b"Hello  world!\n"
    # close the map
    mm.close()
```

LANGUAGE: python
CODE:
```
import mmap

with mmap.mmap(-1, 13) as mm:
    mm.write(b"Hello world!")
```

----------------------------------------

TITLE: Signature Replacement Example in Python
DESCRIPTION: Shows how to create a new Signature instance by replacing the return annotation of an existing signature using the replace() method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/inspect.rst#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> def test(a, b):
...     pass
...
>>> sig = signature(test)
>>> new_sig = sig.replace(return_annotation="new return anno")
>>> str(new_sig)
"(a, b) -> 'new return anno'"
```

----------------------------------------

TITLE: Decoding Locale-Encoded String - CPython C API
DESCRIPTION: Decodes a null-terminated C string (`str`) of a given `length` from the current locale encoding (or UTF-8 on specific platforms). Supports "strict" and "surrogateescape" error handlers. Returns a new Unicode object or NULL on error. Ignores Python UTF-8 mode. Added in version 3.3.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/unicode.rst#_snippet_55

LANGUAGE: c
CODE:
```
PyObject* PyUnicode_DecodeLocaleAndSize(const char *str, Py_ssize_t length, const char *errors)
```

----------------------------------------

TITLE: Demonstrating ResourceWarning with tracemalloc in Python
DESCRIPTION: Example showing how the tracemalloc module is used to retrieve the traceback where a destroyed object was allocated when a ResourceWarning is logged. The script shows a file being opened but not properly closed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.6.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
import warnings

def func():
    return open(__file__)

f = func()
f = None
```

----------------------------------------

TITLE: TarFile Error Level Attribute in Python
DESCRIPTION: An integer attribute controlling how errors are handled during extraction. `0` ignores errors (logging if debug > 0), `1` (default) raises fatal errors (`OSError`, `FilterError`), and `2` raises all errors (`TarError`). Note that some errors (argument types, data corruption) are always raised regardless of this setting.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_2

LANGUAGE: python
CODE:
```
TarFile.errorlevel
```

----------------------------------------

TITLE: Assigning UTF-8 Encoded String in Python
DESCRIPTION: Assigns a UTF-8 encoded string to variable 'x'. This snippet demonstrates handling of non-ASCII characters in Python strings.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/tokenizedata/tokenize_tests-utf8-coding-cookie-and-no-utf8-bom-sig.txt#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
x = 'ЉЊЈЁЂ'
```

----------------------------------------

TITLE: Using BoundArguments to Invoke Functions in Python
DESCRIPTION: This example demonstrates how to use the args and kwargs properties of BoundArguments to invoke functions with bound arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/inspect.rst#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
def test(a, *, b):
    ...

sig = signature(test)
ba = sig.bind(10, b=20)
test(*ba.args, **ba.kwargs)
```

----------------------------------------

TITLE: Using Alternative Formatting Styles in Logging
DESCRIPTION: This snippet illustrates how to configure logging in Python to accept different formatting styles such as string.Template and str.format. It shows how to set up a logger with a custom formatter using these styles and provides an interactive console session as an example.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
import logging
root = logging.getLogger()
root.setLevel(logging.DEBUG)
handler = logging.StreamHandler()
bf = logging.Formatter('{asctime} {name} {levelname:8s} {message}',
                       style='{')
handler.setFormatter(bf)
root.addHandler(handler)
logger = logging.getLogger('foo.bar')
logger.debug('This is a DEBUG message')
```

----------------------------------------

TITLE: Initializing a Python Unpickler
DESCRIPTION: Constructor for the Unpickler class that deserializes pickled objects. Takes parameters for Python 2 compatibility and handling out-of-band buffers. The file argument must support the BufferedIOBase interface.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pickle.rst#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
Unpickler(file, *, fix_imports=True, encoding="ASCII", errors="strict", buffers=None)
```

----------------------------------------

TITLE: Defining a NamedTuple using collections.namedtuple
DESCRIPTION: Illustrates the equivalent definition of a named tuple class using the functional syntax from the `collections` module. This is the underlying mechanism for `NamedTuple`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_135

LANGUAGE: python
CODE:
```
Employee = collections.namedtuple('Employee', ['name', 'id'])
```

----------------------------------------

TITLE: Using a85decode in Python
DESCRIPTION: Decodes Ascii85 encoded bytes-like objects or ASCII strings and returns the decoded bytes. Supports options for handling spaces, Adobe-style framing, and characters to ignore.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/base64.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
a85decode(b, *, foldspaces=False, adobe=False, ignorechars=b' \t\n\r\v')
```

----------------------------------------

TITLE: BytecodeTestCase Class for Testing Bytecode in Python
DESCRIPTION: A custom TestCase class with methods for inspecting and asserting about Python bytecode. It provides utilities for disassembling code objects and checking for specific opcodes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/test.rst#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
class BytecodeTestCase(unittest.TestCase):
    def get_disassembly_as_string(co):
        # Implementation not shown

    def assertInBytecode(x, opname, argval=_UNSPECIFIED):
        # Implementation not shown

    def assertNotInBytecode(x, opname, argval=_UNSPECIFIED):
        # Implementation not shown
```

----------------------------------------

TITLE: Example SSL Certificate Information Structure in Python
DESCRIPTION: A real-world example showing the dictionary structure returned by getpeercert() method of an SSL socket. This illustrates the format of certificate information including issuer, subject, validity dates, and Subject Alternative Name extension data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
{'issuer': ((('countryName', 'IL'),),
          (('organizationName', 'StartCom Ltd.'),),
          (('organizationalUnitName',
            'Secure Digital Certificate Signing'),),
          (('commonName',
            'StartCom Class 2 Primary Intermediate Server CA'),)),
 'notAfter': 'Nov 22 08:15:19 2013 GMT',
 'notBefore': 'Nov 21 03:09:52 2011 GMT',
 'serialNumber': '95F0',
 'subject': ((('description', '571208-SLe257oHY9fVQ07Z'),),
           (('countryName', 'US'),),
           (('stateOrProvinceName', 'California'),),
           (('localityName', 'San Francisco'),),
           (('organizationName', 'Electronic Frontier Foundation, Inc.'),),
           (('commonName', '*.eff.org'),),
           (('emailAddress', 'hostmaster@eff.org'),)),
 'subjectAltName': (('DNS', '*.eff.org'), ('DNS', 'eff.org')),
 'version': 3}
```

----------------------------------------

TITLE: Demonstrating Python memoryview with Arrays
DESCRIPTION: Example showing how to use memoryview with array objects to inspect element size and access array elements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_87

LANGUAGE: python
CODE:
```
>>> import array, struct
>>> m = memoryview(array.array('H', [32000, 32001, 32002]))
>>> m.itemsize
2
>>> m[0]
32000
>>> struct.calcsize('H') == m.itemsize
True
```

----------------------------------------

TITLE: Mock Side Effect with DEFAULT Value - Python
DESCRIPTION: Shows that a side_effect containing DEFAULT will cause the mock to fall back to using return_value or the wrapped object, if return_value is also DEFAULT.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_66

LANGUAGE: python
CODE:
```
>>> from unittest.mock import DEFAULT
>>> order_mock.get_value.side_effect = [DEFAULT]
>>> order_mock.get_value()
'second'
```

----------------------------------------

TITLE: Computing Dot Product with Dotproduct Function in Python
DESCRIPTION: Contains the implementation of a simple dot product calculation between two vectors using the sum and map functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_90

LANGUAGE: Python
CODE:
```
def dotproduct(vec1, vec2):
    return sum(map(operator.mul, vec1, vec2))
```

----------------------------------------

TITLE: Handling Deferred Translations in Python with Dummy Function
DESCRIPTION: This example demonstrates how to mark strings for translation but defer the actual translation until later. It creates a temporary dummy '_' function to mark translatable strings in a list, then removes it to use the actual translation function at runtime.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/gettext.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
def _(message): return message

animals = [_('mollusk'),
          _('albatross'),
          _('rat'),
          _('penguin'),
          _('python'), ]

del _

# ...
for a in animals:
    print(_(a))
```

----------------------------------------

TITLE: Using unicodedata for Character Lookup and Property Access in Python
DESCRIPTION: This example demonstrates basic usage of the unicodedata module, including character lookup by name, retrieving character names, decimal values, categories, and bidirectional properties. It also shows error handling when an operation fails.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unicodedata.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> import unicodedata
>>> unicodedata.lookup('LEFT CURLY BRACKET')
'{'
>>> unicodedata.name('/')
'SOLIDUS'
>>> unicodedata.decimal('9')
9
>>> unicodedata.decimal('a')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: not a decimal
>>> unicodedata.category('A')  # 'L'etter, 'u'ppercase
'Lu'
>>> unicodedata.bidirectional('\u0660') # 'A'rabic, 'N'umber
'AN'
```

----------------------------------------

TITLE: Getting Subparser Name with argparse dest (Python)
DESCRIPTION: Demonstrates using the `dest` keyword argument with `add_subparsers` to store the name of the invoked subparser in the parsed arguments object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_82

LANGUAGE: Python
CODE:
```
parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(dest='subparser_name')
subparser1 = subparsers.add_parser('1')
subparser1.add_argument('-x')
subparser2 = subparsers.add_parser('2')
subparser2.add_argument('y')
parser.parse_args(['2', 'frobble'])
```

----------------------------------------

TITLE: Attaching PropertyMock to Mock Type Objects
DESCRIPTION: Shows how to attach a PropertyMock to a mock type object since it cannot be directly attached to a mock object due to how mock attributes are stored.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
>>> m = MagicMock()
>>> p = PropertyMock(return_value=3)
>>> type(m).foo = p
>>> m.foo
3
>>> p.assert_called_once_with()
```

----------------------------------------

TITLE: Using Named Tuples with urllib.parse.urldefrag
DESCRIPTION: Demonstration of the urldefrag function now returning a named tuple for easier access to URL components.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_73

LANGUAGE: python
CODE:
```
>>> r = urllib.parse.urldefrag('http://python.org/about/#target')
>>> r
DefragResult(url='http://python.org/about/', fragment='target')
>>> r[0]
'http://python.org/about/'
>>> r.fragment
'target'
```

----------------------------------------

TITLE: Creating MIMEApplication Objects in Python
DESCRIPTION: Creates MIME objects for application data (e.g., PDFs, ZIPs). Takes raw application data, specifies a subtype (defaults to octet-stream), and uses base64 encoding by default.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.mime.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
MIMEApplication(_data, _subtype='octet-stream', \
                           _encoder=email.encoders.encode_base64, \
                           *, policy=compat32, **_params)
```

----------------------------------------

TITLE: Using the bit_length Method for Integer Types
DESCRIPTION: Example of the new bit_length method for int and long types that returns the number of bits necessary to represent the integer in binary form.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.7.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
>>> n = 37
>>> bin(n)
'0b100101'
>>> n.bit_length()
6
>>> n = 2**123-1
>>> n.bit_length()
123
>>> (n+1).bit_length()
124
```

----------------------------------------

TITLE: Implementing Iterator Exception Handling in Python
DESCRIPTION: The iter_except function converts a call-until-exception interface to an iterator interface. It yields results from the given function until the specified exception is raised.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_46

LANGUAGE: python
CODE:
```
def iter_except(function, exception, first=None):
    "Convert a call-until-exception interface to an iterator interface."
    # iter_except(d.popitem, KeyError) → non-blocking dictionary iterator
    with suppress(exception):
        if first is not None:
            yield first()
        while True:
            yield function()
```

----------------------------------------

TITLE: TypeVarTuple Invalid Unpacked Annotation
DESCRIPTION: Illustrates an incorrect way to use a TypeVarTuple annotation without unpacking it within a tuple type hint.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_113

LANGUAGE: python
CODE:
```
x: Ts          # Not valid
```

----------------------------------------

TITLE: Using SequenceMatcher in Python
DESCRIPTION: Shows how to use the SequenceMatcher class to find the longest matching substring between two sequences. It demonstrates creating a SequenceMatcher object and using the find_longest_match method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/difflib.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> s = SequenceMatcher(None, " abcd", "abcd abcd")
>>> s.find_longest_match(0, 5, 0, 9)
Match(a=0, b=4, size=5)
```

LANGUAGE: python
CODE:
```
>>> s = SequenceMatcher(lambda x: x==" ", " abcd", "abcd abcd")
>>> s.find_longest_match(0, 5, 0, 9)
Match(a=1, b=0, size=4)
```

----------------------------------------

TITLE: Handling SIGALRM for Timeout in File Opening (Python)
DESCRIPTION: This example demonstrates how to use the alarm function to limit the time spent waiting to open a file. It sets a 5-second alarm before opening the file and raises an OSError if the operation takes too long.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/signal.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
import signal, os

def handler(signum, frame):
    signame = signal.Signals(signum).name
    print(f'Signal handler called with signal {signame} ({signum})')
    raise OSError("Couldn't open device!")

# Set the signal handler and a 5-second alarm
signal.signal(signal.SIGALRM, handler)
signal.alarm(5)

# This open() may hang indefinitely
fd = os.open('/dev/ttyS0', os.O_RDWR)

signal.alarm(0)          # Disable the alarm
```

----------------------------------------

TITLE: Checking Reserved Paths - pathlib Python
DESCRIPTION: The `is_reserved` method is shown, highlighting reserved path conditions for `PureWindowsPath`, including paths containing colons or ending in dots or spaces. With `PurePosixPath`, the method always returns false.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```

```

----------------------------------------

TITLE: Converting IPv4 integer to packed bytes in ipaddress
DESCRIPTION: This example demonstrates how to convert an IPv4 address represented as an integer to its packed byte representation using the v4_int_to_packed function. It first converts the integer 3221225985 to an IPv4Address and then converts the same integer to a packed byte sequence.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ipaddress.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
>>> ipaddress.ip_address(3221225985)
IPv4Address('192.0.2.1')
>>> ipaddress.v4_int_to_packed(3221225985)
b'\xc0\x00\x02\x01'

```

----------------------------------------

TITLE: Using Registry Handle Objects with Context Manager in Python
DESCRIPTION: Demonstrates how to use a registry handle object with Python's context manager protocol. This ensures the handle is automatically closed when exiting the 'with' block.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/winreg.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
with OpenKey(HKEY_LOCAL_MACHINE, "foo") as key:
    ...  # work with key
```

----------------------------------------

TITLE: Using b16encode in Python
DESCRIPTION: Encodes bytes-like objects using Base16 (hexadecimal) encoding and returns the encoded bytes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/base64.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
b16encode(s)
```

----------------------------------------

TITLE: Using IMAP4 IDLE Command with Context Manager in Python
DESCRIPTION: This snippet demonstrates how to use the IMAP4.idle() method with a context manager to listen for server events like new messages. It shows iterating through server responses within the idle context and handling EXISTS and RECENT notifications.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/imaplib.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> with M.idle(duration=29 * 60) as idler:
...     for typ, data in idler:
...         print(typ, data)
...
EXISTS [b'1']
RECENT [b'1']
```

----------------------------------------

TITLE: TypedDict Class Syntax Limitation (Private Names)
DESCRIPTION: Shows how class-based `TypedDict` syntax applies Python's private name mangling to keys starting with double underscores, which might not be desired for dictionary keys.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_150

LANGUAGE: python
CODE:
```
class Definition(TypedDict):
    __schema: str  # mangled to `_Definition__schema`
```

----------------------------------------

TITLE: Skipping Doctest Example in Python
DESCRIPTION: Demonstrates the use of the +SKIP directive to bypass doctest execution. The example shows incorrect arithmetic (2+2=5) that would normally fail, but is marked to be skipped during testing.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/test_doctest/test_doctest_skip.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> 2 + 2  # doctest: +SKIP
5
```

----------------------------------------

TITLE: Remainder Operator (%) Behavior Difference (Python)
DESCRIPTION: Compares the behavior of the modulo (`%`) operator between standard Python integers and `Decimal` objects. It shows that the sign of the result for `Decimal` is the sign of the dividend, unlike integer modulo in Python 3 where it's the sign of the divisor.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_14

LANGUAGE: python
CODE:
```
(-7) % 4
Decimal(-7) % Decimal(4)
```

----------------------------------------

TITLE: Set Error from Errno in C
DESCRIPTION: PyErr_SetFromErrno(PyObject *type) raises an exception when a C library function returns an error, using the current errno value for details.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/exceptions.rst#2025-04-21_snippet_13

LANGUAGE: C
CODE:
```
PyObject* PyErr_SetFromErrno(PyObject *type)
```

----------------------------------------

TITLE: Delocalizing Numeric Strings in Python
DESCRIPTION: Demonstrates using the new locale.delocalize() function to convert localized numeric strings to normalized number strings based on LC_NUMERIC settings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
>>> import locale
>>> locale.setlocale(locale.LC_NUMERIC, 'de_DE.UTF-8')
'de_DE.UTF-8'
>>> locale.delocalize('1.234,56')
'1234.56'
>>> locale.setlocale(locale.LC_NUMERIC, 'en_US.UTF-8')
'en_US.UTF-8'
>>> locale.delocalize('1,234.56')
'1234.56'
```

----------------------------------------

TITLE: Formatting traceback entries with format_list
DESCRIPTION: Converts a list of traceback entries (as returned by extract_tb or extract_stack) into formatted strings ready for printing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
format_list(extracted_list)
```

----------------------------------------

TITLE: Counter Equality Comparison in Python
DESCRIPTION: Equivalent implementation of assertCountEqual using Counter objects to compare sequences regardless of order.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
assertEqual(Counter(list(first)), Counter(list(second)))
```

----------------------------------------

TITLE: Single-Use Context Manager Example
DESCRIPTION: Illustrates a single-use context manager created with contextmanager decorator that can only be used once
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextlib.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
from contextlib import contextmanager

@contextmanager
def singleuse():
    print("Before")
    yield
    print("After")
```

----------------------------------------

TITLE: Initializing Generator for Text Email Serialization
DESCRIPTION: Creates a Generator instance to write email messages to a file-like object that accepts string data, with options for message formatting and policy settings
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.generator.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
Generator(outfp, mangle_from_=None, maxheaderlen=None, *, policy=None)
```

----------------------------------------

TITLE: Using itertools.compress to Filter Data in Python
DESCRIPTION: The `itertools.compress` function filters elements from a data iterator based on corresponding boolean values in a selectors iterator. This example showcases how it returns elements from 'ABCDEF' where the selector list [1,0,1,0,1,1] is true, resulting in 'A', 'C', 'E', and 'F'. It requires the itertools module and iterables as input.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.7.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
itertools.compress('ABCDEF', [1,0,1,0,1,1]) =>
      A, C, E, F
```

----------------------------------------

TITLE: Accessing Origin URL via Distribution Instance - Python
DESCRIPTION: Shows how to access the `origin` property of a `Distribution` instance (if present, typically for editable installs) to get PEP 610 metadata like the installation URL.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_26

LANGUAGE: python
CODE:
```
>>> dist.origin.url
'file:///path/to/wheel-0.32.3.editable-py3-none-any.whl'
```

----------------------------------------

TITLE: Calculating Exponential for Base 2 in Python
DESCRIPTION: This function returns 2 raised to the power of x, useful in binary calculations and scenarios where base 2 exponentiation is required.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/math.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
.. function:: exp2(x)

   Return *2* raised to the power *x*.
```

----------------------------------------

TITLE: Demonstrating ImportError Suggestion for Module Names in Python
DESCRIPTION: This example highlights the improved `ImportError` message in Python 3.12, which suggests the correct name to import from a module when the specified name is not found but a similar one exists (e.g., 'ChainMap' instead of 'chainmap'). The traceback shows the suggestion.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_17

LANGUAGE: Python
CODE:
```
from collections import chainmap
```

----------------------------------------

TITLE: Aborting DatagramTransport in Python
DESCRIPTION: This method closes the transport immediately without waiting for pending operations. Buffered data is lost and no more data will be received. The protocol's connection_lost() method will be called with None as its argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
DatagramTransport.abort()
```

----------------------------------------

TITLE: Handling Connection Lost in BaseProtocol for Python
DESCRIPTION: This method is called when the connection is lost or closed. The argument is either an exception object or None, indicating a regular EOF or connection abort.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
BaseProtocol.connection_lost(exc)
```

----------------------------------------

TITLE: Create tar Archive from Directory via tarfile CLI - Shell
DESCRIPTION: This command uses the `tarfile` module's command-line interface (`-m tarfile`) with the create option (`-c`) to archive an entire directory (`life-of-brian_1979/`) into a new tar file (`monty.tar`).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_26

LANGUAGE: Shell
CODE:
```
$ python -m tarfile -c monty.tar life-of-brian_1979/
```

----------------------------------------

TITLE: Using HTTPSServer from http.server Module
DESCRIPTION: Adds built-in HTTPS server support via the http.server.HTTPSServer class. Command-line interface exposes this functionality through new TLS-related options for certificate, key, and password file.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.14.0a7.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
python -m http.server --tls-cert cert.pem --tls-key key.pem --tls-password-file pwd.txt
```

----------------------------------------

TITLE: Suppressing Help Messages with argparse Python
DESCRIPTION: Demonstrates how to prevent an argument from appearing in the help message by setting its `help` parameter to `argparse.SUPPRESS`. It shows the output of `print_help()` when an argument is suppressed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_56

LANGUAGE: Python
CODE:
```
>>> parser = argparse.ArgumentParser(prog='frobble')
>>> parser.add_argument('--foo', help=argparse.SUPPRESS)
>>> parser.print_help()
usage: frobble [-h]

options:
  -h, --help  show this help message and exit
```

----------------------------------------

TITLE: Basic implementation of __setattr__ in Python
DESCRIPTION: Shows the basic implementation of the __setattr__ method in Python, which is used to control attribute assignment in a class.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_50

LANGUAGE: python
CODE:
```
class X:
    ...
    def __setattr__(self, name, value):
        self.__dict__[name] = value
    ...
```

----------------------------------------

TITLE: Using TextWrapper.wrap() Method in Python
DESCRIPTION: The wrap() method takes a string of text and wraps it to a specified width (defined in the TextWrapper instance attributes). It returns a list of output lines without final newlines. If the wrapped output has no content, an empty list is returned.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/textwrap.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
wrap(text)
```

----------------------------------------

TITLE: Configuring metavar with a Tuple in Python argparse
DESCRIPTION: Demonstrates how providing a tuple to the 'metavar' keyword argument in argparse.add_argument allows specifying different display names for each expected value of an argument with nargs > 1 in the help message.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_59

LANGUAGE: python
CODE:
```
parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('-x', nargs=2)
parser.add_argument('--foo', nargs=2, metavar=('bar', 'baz'))
parser.print_help()
```

----------------------------------------

TITLE: Adding File Descriptor Writer with asyncio
DESCRIPTION: This method starts monitoring a file descriptor for write availability and invokes a callback when the file descriptor is ready for writing. Any existing callback registered for the file descriptor is cancelled and replaced by the new one.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
.. method:: loop.add_writer(fd, callback, *args)

   Start monitoring the *fd* file descriptor for write availability and
   invoke *callback* with the specified arguments once *fd* is available for
   writing.

   Any preexisting callback registered for *fd* is cancelled and replaced by
   *callback.

   Use :func:`functools.partial` :ref:`to pass keyword arguments
   <asyncio-pass-keywords>` to *callback.

```

----------------------------------------

TITLE: Using monotonic_ns Function in Python
DESCRIPTION: Similar to monotonic(), but returns time in nanoseconds as an integer rather than fractional seconds as a float, avoiding precision loss caused by the float type.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/time.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
monotonic_ns() -> int
```

----------------------------------------

TITLE: Converting file URLs to local paths in Python
DESCRIPTION: This function converts a file URL to a local file path. It uses urllib.parse.unquote to decode the URL and can optionally require the 'file:' scheme prefix.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
url2pathname(url, *, require_scheme=False)
```

----------------------------------------

TITLE: Installing Python3 on FreeBSD (Shell)
DESCRIPTION: Command to install Python 3 on FreeBSD using the pkg package manager.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/unix.rst#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
pkg install python3
```

----------------------------------------

TITLE: Parsing Python Subscript with Tuple Slice AST with ast.dump
DESCRIPTION: This snippet demonstrates the AST representation of a subscript operation involving a tuple slice ('l[1:2, 3]'). It uses `ast.parse` and `ast.dump` to show the structure. The output reveals a `Subscript` node with its `value`, and a `slice` which is a `Tuple` containing `Slice` and `Constant` nodes, and the operation context (`ctx`).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_24

LANGUAGE: python
CODE:
```
print(ast.dump(ast.parse('l[1:2, 3]', mode='eval'), indent=4))
```

----------------------------------------

TITLE: Runtime Behavior of NewType in Python
DESCRIPTION: Illustrates that at runtime, a variable created with `NewType` behaves like its base type, and operations on it return the base type.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_7

LANGUAGE: Python
CODE:
```
# 'output' is of type 'int', not 'UserId'
output = UserId(23413) + UserId(54341)
```

----------------------------------------

TITLE: Configuring Comment Prefixes in Python ConfigParser
DESCRIPTION: Shows how to handle comment prefixes in configuration files, including inline comments and escaping comment characters in multiline values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
>>> from configparser import ConfigParser, ExtendedInterpolation
>>> parser = ConfigParser(interpolation=ExtendedInterpolation())
>>> # the default BasicInterpolation could be used as well
>>> parser.read_string("""
... [DEFAULT]
... hash = #
...
... [hashes]
... shebang =
...   ${hash}!/usr/bin/env python
...   ${hash} -*- coding: utf-8 -*-
...
... extensions =
...   enabled_extension
...   another_extension
...   #disabled_by_comment
...   yet_another_extension
...
... interpolation not necessary = if # is not at line start
... even in multiline values = line #1
...   line #2
...   line #3
... """)
>>> print(parser['hashes']['shebang'])
<BLANKLINE>
#!/usr/bin/env python
# -*- coding: utf-8 -*-
>>> print(parser['hashes']['extensions'])
<BLANKLINE>
enabled_extension
another_extension
yet_another_extension
>>> print(parser['hashes']['interpolation not necessary'])
if # is not at line start
>>> print(parser['hashes']['even in multiline values'])
line #1
line #2
line #3
```

----------------------------------------

TITLE: Implementing SQLite Window Function in Python
DESCRIPTION: Example implementation of a custom window aggregate function that maintains a running sum. Shows how to create and use a window function class with step, value, inverse, and finalize methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
class WindowSumInt:
    def __init__(self):
        self.count = 0

    def step(self, value):
        """Add a row to the current window."""
        self.count += value

    def value(self):
        """Return the current value of the aggregate."""
        return self.count

    def inverse(self, value):
        """Remove a row from the current window."""
        self.count -= value

    def finalize(self):
        """Return the final value of the aggregate.

        Any clean-up actions should be placed here.
        """
        return self.count

con = sqlite3.connect(":memory:")
cur = con.execute("CREATE TABLE test(x, y)")
values = [
    ("a", 4),
    ("b", 5),
    ("c", 3),
    ("d", 8),
    ("e", 1),
]
cur.executemany("INSERT INTO test VALUES(?, ?)", values)
con.create_window_function("sumint", 1, WindowSumInt)
cur.execute("""
    SELECT x, sumint(y) OVER (
        ORDER BY x ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING
    ) AS sum_y
    FROM test ORDER BY x
""")
print(cur.fetchall())
con.close()
```

----------------------------------------

TITLE: Creating a Required Mutually Exclusive Group
DESCRIPTION: Shows how to make a mutually exclusive group required by passing `required=True` to `add_mutually_exclusive_group`. Demonstrates parsing an empty command line, which results in an error because one of the arguments is required.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_89

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser(prog='PROG')
>>> group = parser.add_mutually_exclusive_group(required=True)
>>> group.add_argument('--foo', action='store_true')
>>> group.add_argument('--bar', action='store_false')
>>> parser.parse_args([])
usage: PROG [-h] (--foo | --bar)
PROG: error: one of the arguments --foo --bar is required
```

----------------------------------------

TITLE: MultiHitLRUCache Implementation
DESCRIPTION: Advanced LRU cache that only caches results after they've been requested multiple times, preventing cache pollution from one-time requests.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
class MultiHitLRUCache:
    def __init__(self, func, maxsize=128, maxrequests=4096, cache_after=1):
        self.requests = OrderedDict()   # { uncached_key : request_count }
        self.cache = OrderedDict()      # { cached_key : function_result }
        self.func = func
        self.maxrequests = maxrequests  # max number of uncached requests
        self.maxsize = maxsize          # max number of stored return values
        self.cache_after = cache_after

    def __call__(self, *args):
        if args in self.cache:
            self.cache.move_to_end(args)
            return self.cache[args]
        result = self.func(*args)
        self.requests[args] = self.requests.get(args, 0) + 1
        if self.requests[args] <= self.cache_after:
            self.requests.move_to_end(args)
            if len(self.requests) > self.maxrequests:
                self.requests.popitem(last=False)
        else:
            self.requests.pop(args, None)
            self.cache[args] = result
            if len(self.cache) > self.maxsize:
                self.cache.popitem(last=False)
        return result
```

----------------------------------------

TITLE: Using ConfigParser without Interpolation
DESCRIPTION: Example showing how to initialize ConfigParser without value interpolation functionality
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
ConfigParser(interpolation=None)
```

----------------------------------------

TITLE: Getting an Object Attribute via PyMemberDef in C Extension
DESCRIPTION: Retrieves an attribute from an object based on a PyMemberDef structure. The function takes a pointer to the object and the member definition describing the attribute to access.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/structures.rst#2025-04-23_snippet_10

LANGUAGE: C
CODE:
```
PyObject* PyMember_GetOne(const char *obj_addr, struct PyMemberDef *m)
```

----------------------------------------

TITLE: Configuring Integer String Digit Limit via Environment Variable
DESCRIPTION: This snippet demonstrates how to set the limit for integer string digits using an environment variable before starting Python. The provided examples show how to configure the limit and disable it.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_107

LANGUAGE: python
CODE:
```
PYTHONINTMAXSTRDIGITS=640 python3
PYTHONINTMAXSTRDIGITS=0 python3
```

----------------------------------------

TITLE: Fork-Safe Cache Implementation in Python
DESCRIPTION: Implementation of a fork-safe cache property that handles process forking by tracking the process ID and resetting the cache when the PID changes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_47

LANGUAGE: python
CODE:
```
@property
def cache(self):
    pid = os.getpid()
    if pid != self._pid:
        self._pid = pid
        self._cache = []
    return self._cache
```

----------------------------------------

TITLE: Checking Lock Status in Python's Multiprocessing Module
DESCRIPTION: This method returns a boolean indicating whether the lock object is currently locked. Added in Python 3.14.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_26

LANGUAGE: python
CODE:
```
def locked():
    # Method implementation not shown in the original text
```

----------------------------------------

TITLE: Handling Locale Settings with locale Module in Python
DESCRIPTION: The snippet demonstrates using the setlocale function of the locale module to modify locale settings. The function takes a category and an optional locale string, changing the locale for the specified category or returning it if no locale is provided. Dependencies include the locale module and potential multithreading issues as the function is not thread-safe on most systems.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/locale.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
import locale
locale.setlocale(locale.LC_ALL, '')
```

----------------------------------------

TITLE: Using Unbound Methods for List Sorting in Python
DESCRIPTION: Shows how to simplify sorting operations by using unbound methods instead of lambda expressions. This technique provides a cleaner syntax when the key function is a single method call.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
>>> L.sort(key=str.lower)
>>> L
['A', 'b', 'c', 'D']
```

----------------------------------------

TITLE: Casting memoryview between dimensions and data types
DESCRIPTION: Example showing complex casting between different dimensions and data types, demonstrating 1D->3D->1D transformations with different integer formats.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_82

LANGUAGE: python
CODE:
```
import struct
buf = struct.pack("i"*12, *list(range(12)))
x = memoryview(buf)
y = x.cast('i', shape=[2,2,3])
y.tolist()
[[[0, 1, 2], [3, 4, 5]], [[6, 7, 8], [9, 10, 11]]]
y.format
'i'
y.itemsize
4
len(y)
2
y.nbytes
48
z = y.cast('b')
z.format
'b'
z.itemsize
1
len(z)
48
z.nbytes
48
```

----------------------------------------

TITLE: Finding First True Element with First_true Function in Python
DESCRIPTION: This snippet demonstrates finding the first element in an iterable that satisfies a given predicate using first_true. Also showcases the lazy consumption of iterables.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_87

LANGUAGE: Python
CODE:
```
>>> first_true('ABC0DEF1', '9', str.isdigit)
'0'
>>> # Verify that inputs are consumed lazily
>>> it = iter('ABC0DEF1')
>>> first_true(it, predicate=str.isdigit)
'0'
>>> ''.join(it)
'DEF1'
```

----------------------------------------

TITLE: Customizing Class Pattern Matching Arguments in Python
DESCRIPTION: This class variable, a tuple of strings, is used to map positional arguments in class patterns to keyword arguments. For example, if `__match_args__` is `("left", "center")`, `case MyClass(x, y)` is equivalent to `case MyClass(left=x, center=y)`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_32

LANGUAGE: Python
CODE:
```
object.__match_args__
```

----------------------------------------

TITLE: Customizing Breakpoint Behavior in Python
DESCRIPTION: Hook function called by the built-in breakpoint(). Can be customized to use different debuggers or implement custom debugging behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sys.rst#2025-04-23_snippet_7

LANGUAGE: Python
CODE:
```
sys.breakpointhook()
```

----------------------------------------

TITLE: Using Bisect with Structured Data and Key Functions in Python
DESCRIPTION: Example demonstrating how bisect and insort functions work with lists of tuples/namedtuples, using key functions to sort and search based on specific record fields.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/bisect.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> from collections import namedtuple
>>> from operator import attrgetter
>>> from bisect import bisect, insort
>>> from pprint import pprint

>>> Movie = namedtuple('Movie', ('name', 'released', 'director'))

>>> movies = [
...     Movie('Jaws', 1975, 'Spielberg'),
...     Movie('Titanic', 1997, 'Cameron'),
...     Movie('The Birds', 1963, 'Hitchcock'),
...     Movie('Aliens', 1986, 'Cameron')
... ]

>>> # Find the first movie released after 1960
>>> by_year = attrgetter('released')
>>> movies.sort(key=by_year)
>>> movies[bisect(movies, 1960, key=by_year)]
Movie(name='The Birds', released=1963, director='Hitchcock')

>>> # Insert a movie while maintaining sort order
>>> romance = Movie('Love Story', 1970, 'Hiller')
>>> insort(movies, romance, key=by_year)
>>> pprint(movies)
[Movie(name='The Birds', released=1963, director='Hitchcock'),
 Movie(name='Love Story', released=1970, director='Hiller'),
 Movie(name='Jaws', released=1975, director='Spielberg'),
 Movie(name='Aliens', released=1986, director='Cameron'),
 Movie(name='Titanic', released=1997, director='Cameron')]
```

----------------------------------------

TITLE: Default Division by Zero in ExtendedContext (Python)
DESCRIPTION: Sets the context to `ExtendedContext` and performs division by zero. This snippet shows the default behavior of `ExtendedContext` where division by zero results in `Decimal('Infinity')` rather than raising an exception.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_12

LANGUAGE: python
CODE:
```
setcontext(ExtendedContext)
Decimal(1) / Decimal(0)
```

----------------------------------------

TITLE: Computing Modular Inverse in Python
DESCRIPTION: Example demonstrating how to compute the modular multiplicative inverse using pow() function with negative exponent and mod parameter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
>>> pow(38, -1, mod=97)
23
>>> 23 * 38 % 97 == 1
True
```

----------------------------------------

TITLE: Covariance Calculation
DESCRIPTION: Example of calculating covariance between two variables using covariance() function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
>>> x = [1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> y = [1, 2, 3, 1, 2, 3, 1, 2, 3]
>>> covariance(x, y)
0.75
>>> z = [9, 8, 7, 6, 5, 4, 3, 2, 1]
>>> covariance(x, z)
-7.5
>>> covariance(z, x)
-7.5
```

----------------------------------------

TITLE: Iterating Over Multipart Message Structure in Python
DESCRIPTION: This snippet demonstrates how to use the walk() method of a Message object to iterate over all parts of a multipart email message, printing the content type of each part. It showcases the ability to traverse nested multipart structures.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.compat32-message.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
>>> for part in msg.walk():
...     print(part.get_content_type())
multipart/report
text/plain
message/delivery-status
text/plain
text/plain
message/rfc822
text/plain
```

----------------------------------------

TITLE: Using BytesIO.getbuffer for in-place editing in Python
DESCRIPTION: This snippet demonstrates the new getbuffer method of io.BytesIO, which provides an editable view of the data without making a copy, suitable for in-place editing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_37

LANGUAGE: python
CODE:
```
>>> REC_LEN, LOC_START, LOC_LEN = 34, 7, 11

>>> def change_location(buffer, record_number, location):
...     start = record_number * REC_LEN + LOC_START
...     buffer[start: start+LOC_LEN] = location

>>> import io

>>> byte_stream = io.BytesIO(
...     b'G3805  storeroom  Main chassis    '
...     b'X7899  shipping   Reserve cog     '
...     b'L6988  receiving  Primary sprocket'
... )
>>> buffer = byte_stream.getbuffer()
>>> change_location(buffer, 1, b'warehouse  ')
>>> change_location(buffer, 0, b'showroom   ')
>>> print(byte_stream.getvalue())
b'G3805  showroom   Main chassis    '
b'X7899  warehouse  Reserve cog     '
b'L6988  receiving  Primary sprocket'
```

----------------------------------------

TITLE: Py_None Object
DESCRIPTION: The Python ``None`` object, denoting lack of value. This object is a singleton, has no methods, and is immortal. Testing for object identity (using ``==`` in C) is sufficient. It represents the absence of a value in Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/none.rst#2025-04-21_snippet_0

LANGUAGE: C
CODE:
```
"PyObject* Py_None"
```

----------------------------------------

TITLE: Formatting Fraction Instances in Python
DESCRIPTION: Demonstrates various formatting options for Fraction instances using the __format__ method and f-strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/fractions.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> from fractions import Fraction
>>> format(Fraction(103993, 33102), '_')
'103_993/33_102'
>>> format(Fraction(1, 7), '.^+10')
'...+1/7...'
>>> format(Fraction(3, 1), '')
'3'
>>> format(Fraction(3, 1), '#')
'3/1'
>>> format(Fraction(1, 7), '.40g')
'0.1428571428571428571428571428571428571429'
>>> format(Fraction('1234567.855'), '_.2f')
'1_234_567.86'
>>> f"{Fraction(355, 113):*>20.6e}"
'********3.141593e+00'
>>> old_price, new_price = 499, 672
>>> "{:.2%} price increase".format(Fraction(new_price, old_price) - 1)
'34.67% price increase'
```

----------------------------------------

TITLE: Adding Euclidean Distance Function to math Module
DESCRIPTION: Introduces a new function math.dist() to compute the Euclidean distance between two points. This addition provides a convenient way to calculate distances in mathematical operations.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0a1.rst#2025-04-21_snippet_17

LANGUAGE: Python
CODE:
```
math.dist(point1, point2)
```

----------------------------------------

TITLE: Platform-independent AIX platform detection
DESCRIPTION: Example showing the recommended way to check for AIX platform using sys.platform in a compatible way across Python versions. Previous versions included the major version number, but Python 3.8 standardizes to just 'aix'.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_33

LANGUAGE: python
CODE:
```
sys.platform.startswith('aix')
```

----------------------------------------

TITLE: Mapping Function Arguments with itertools.starmap
DESCRIPTION: Example of using itertools.starmap() to apply a function to tuples of arguments from an iterator.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
itertools.starmap(os.path.join,
                  [('/bin', 'python'), ('/usr', 'bin', 'java'),
                   ('/usr', 'bin', 'perl'), ('/usr', 'bin', 'ruby')])
=>
  /bin/python, /usr/bin/java, /usr/bin/perl, /usr/bin/ruby
```

----------------------------------------

TITLE: Performing Integer Division with divmod in Python
DESCRIPTION: The divmod function takes two numbers and returns a tuple of quotient and remainder using integer division. The numbers can be integers or floats, with the output formatted accordingly. It follows Python's binary arithmetic operator rules for mixed operand types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_6



----------------------------------------

TITLE: operator.is_none Equivalent (Python)
DESCRIPTION: Shows the equivalence between the new `operator.is_none()` function and the standard `is None` comparison. This function provides a callable alternative for checking if an object is `None`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_24

LANGUAGE: Python
CODE:
```
operator.is_none(obj)
```

LANGUAGE: Python
CODE:
```
obj is None
```

----------------------------------------

TITLE: Removing Unsafe Characters from URLs in Python 3.10
DESCRIPTION: This code snippet introduces a new module-level variable in urllib.parse that controls the removal of unsafe characters (newline, carriage return, and tab) from URLs to prevent certain forms of attacks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_24

LANGUAGE: python
CODE:
```
urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE
```

----------------------------------------

TITLE: Custom Reduction Override Example in Python
DESCRIPTION: Example demonstrating how to customize pickling using reducer_override method by subclassing Pickler to handle a custom class.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pickle.rst#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
import io
import pickle

class MyClass:
    my_attribute = 1

class MyPickler(pickle.Pickler):
    def reducer_override(self, obj):
        """Custom reducer for MyClass."""
        if getattr(obj, "__name__", None) == "MyClass":
            return type, (obj.__name__, obj.__bases__,
                         {'my_attribute': obj.my_attribute})
        else:
            # For any other object, fallback to usual reduction
            return NotImplemented

f = io.BytesIO()
p = MyPickler(f)
p.dump(MyClass)

del MyClass

unpickled_class = pickle.loads(f.getvalue())

assert isinstance(unpickled_class, type)
assert unpickled_class.__name__ == "MyClass"
assert unpickled_class.my_attribute == 1
```

----------------------------------------

TITLE: Defining Generic Protocol (Python 3.11 or older)
DESCRIPTION: Shows the older syntax for defining a generic protocol, requiring a separate `TypeVar` definition and applying it in square brackets `[]` to the `Protocol` base class.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_144

LANGUAGE: python
CODE:
```
T = TypeVar("T")

class GenProto(Protocol[T]):
    def meth(self) -> T:
        ...
```

----------------------------------------

TITLE: Opening bzip2-compressed Files in Python
DESCRIPTION: The open() function allows reading or writing bzip2-compressed files in binary or text mode. It returns a file object and supports various modes and compression levels.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/bz2.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
open(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None)
```

----------------------------------------

TITLE: Customizing Section Header Parsing in Python ConfigParser
DESCRIPTION: Demonstrates how to customize the regular expression used for parsing section headers in ConfigParser to handle whitespace differently.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
>>> import re
>>> config = """
... [Section 1]
... option = value
...
... [  Section 2  ]
... another = val
... """
>>> typical = configparser.ConfigParser()
>>> typical.read_string(config)
>>> typical.sections()
['Section 1', '  Section 2  ']
>>> custom = configparser.ConfigParser()
>>> custom.SECTCRE = re.compile(r"\[ *(?P<header>[^]]+?) *\]")
>>> custom.read_string(config)
>>> custom.sections()
['Section 1', 'Section 2']
```

----------------------------------------

TITLE: Certificate File Format in PEM Encoding
DESCRIPTION: Shows the standard format for PEM-encoded certificates, which consist of a base64-encoded certificate wrapped with BEGIN and END delimiter lines.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_25

LANGUAGE: text
CODE:
```
-----BEGIN CERTIFICATE-----
... (certificate in base64 PEM encoding) ...
-----END CERTIFICATE-----
```

----------------------------------------

TITLE: Extended Interpolation Configuration Example
DESCRIPTION: Demonstrates extended interpolation syntax using ${section:option} format for cross-section value references.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_10

LANGUAGE: ini
CODE:
```
[Paths]
home_dir: /Users
my_dir: ${home_dir}/lumberjack
my_pictures: ${my_dir}/Pictures

[Escape]
# use a $$ to escape the $ sign ($ is the only character that needs to be escaped):
cost: $$80
```

LANGUAGE: ini
CODE:
```
[Common]
home_dir: /Users
library_dir: /Library
system_dir: /System
macports_dir: /opt/local

[Frameworks]
Python: 3.2
path: ${Common:system_dir}/Library/Frameworks/

[Arthur]
nickname: Two Sheds
last_name: Jackson
my_dir: ${Common:home_dir}/twosheds
my_pictures: ${my_dir}/Pictures
python_dir: ${Frameworks:path}/Python/Versions/${Frameworks:Python}
```

----------------------------------------

TITLE: Implementing File-Serving WSGI Application in Python
DESCRIPTION: A more complex WSGI application that serves files from a specified directory. It includes MIME type detection, basic error handling, and command-line configuration options for directory and port.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/wsgiref.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
def app(environ, respond):
    # Get the file name and MIME type
    fn = os.path.join(path, environ["PATH_INFO"][1:])
    if "." not in fn.split(os.path.sep)[-1]:
        fn = os.path.join(fn, "index.html")
    mime_type = mimetypes.guess_file_type(fn)[0]

    # Return 200 OK if file exists, otherwise 404 Not Found
    if os.path.exists(fn):
        respond("200 OK", [("Content-Type", mime_type)])
        return util.FileWrapper(open(fn, "rb"))
    else:
        respond("404 Not Found", [("Content-Type", "text/plain")])
        return [b"not found"]


if __name__ == "__main__":
    # Get the path and port from command-line arguments
    path = sys.argv[1] if len(sys.argv) > 1 else os.getcwd()
    port = int(sys.argv[2]) if len(sys.argv) > 2 else 8000

    # Make and start the server until control-c
    httpd = simple_server.make_server("", port, app)
    print(f"Serving {path} on port {port}, control-C to stop")
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("Shutting down.")
        httpd.server_close()
```

----------------------------------------

TITLE: Optimizing Bisect Performance with Precomputed Keys in Python
DESCRIPTION: Technique for improving performance when using bisect with expensive key functions by precomputing a list of keys to search, thus avoiding repeated function calls.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/bisect.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> data = [('red', 5), ('blue', 1), ('yellow', 8), ('black', 0)]
>>> data.sort(key=lambda r: r[1])       # Or use operator.itemgetter(1).
>>> keys = [r[1] for r in data]         # Precompute a list of keys.
>>> data[bisect_left(keys, 0)]
('black', 0)
>>> data[bisect_left(keys, 1)]
('blue', 1)
>>> data[bisect_left(keys, 5)]
('red', 5)
>>> data[bisect_left(keys, 8)]
('yellow', 8)
```

----------------------------------------

TITLE: Partitioning Elements with Predicate Using Partition in Python
DESCRIPTION: This function partitions an input iterable into two lists based on a predicate: one where the predicate is false and one where it's true, allowing more complex filtering scenarios.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_95

LANGUAGE: Python
CODE:
```
def partition(predicate, iterable):
    """Partition entries into false entries and true entries.

    If *predicate* is slow, consider wrapping it with functools.lru_cache().
    """
    # partition(is_odd, range(10)) → 0 2 4 6 8   and  1 3 5 7 9
    t1, t2 = tee(iterable)
    return filterfalse(predicate, t1), filter(predicate, t2)
```

----------------------------------------

TITLE: Disassembling Pickle Files with Enhanced Options - Python
DESCRIPTION: The command-line interface allows users to disassemble pickle files and inspect their content or execute various options like annotation or output redirection. This tool is safer for examining pickles from untrusted sources.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pickletools.rst#2025-04-21_snippet_0

LANGUAGE: shell-session
CODE:
```
$ python -m pickle x.pickle
(1, 2)

$ python -m pickletools x.pickle
    0: \x80 PROTO      3
    2: K    BININT1    1
    4: K    BININT1    2
    6: \x86 TUPLE2
    7: q    BINPUT     0
    9: .    STOP
highest protocol among opcodes = 2
```

----------------------------------------

TITLE: Implementing Base Validator Descriptor Class in Python
DESCRIPTION: Abstract base class that implements the descriptor protocol for attribute validation. Provides core functionality for storing, retrieving and validating attribute values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
from abc import ABC, abstractmethod

class Validator(ABC):

    def __set_name__(self, owner, name):
        self.private_name = '_' + name

    def __get__(self, obj, objtype=None):
        return getattr(obj, self.private_name)

    def __set__(self, obj, value):
        self.validate(value)
        setattr(obj, self.private_name, value)

    @abstractmethod
    def validate(self, value):
        pass
```

----------------------------------------

TITLE: Adding Curses Terminal Control Functions
DESCRIPTION: New functions for getting and setting terminal escape delay and tab size in the curses module, providing more control over terminal behavior.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.9.0a1.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
curses.get_escdelay()
curses.set_escdelay()
curses.get_tabsize()
curses.set_tabsize()
```

----------------------------------------

TITLE: SequenceMatcher Opcodes Example
DESCRIPTION: This example shows how to use SequenceMatcher to generate opcodes describing the differences between two strings. It initializes a SequenceMatcher object, calls the get_opcodes method to get a list of 5-tuples representing edit operations, and then iterates through the opcodes to print the tag, indices, and affected substrings from both input strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/difflib.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> a = \"qabxcd\"\n>>> b = \"abycdf\"\n>>> s = SequenceMatcher(None, a, b)\n>>> for tag, i1, i2, j1, j2 in s.get_opcodes():
...     print('{:7}   a[{}:{}] --> b[{}:{}] {!r:>8} --> {!r}'.format(
...         tag, i1, i2, j1, j2, a[i1:i2], b[j1:j2]))
```

----------------------------------------

TITLE: Exception Groups for Multiple Errors
DESCRIPTION: Shows how to use ExceptionGroup to raise and handle multiple unrelated exceptions together.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/errors.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
def f():
    excs = [OSError('error 1'), SystemError('error 2')]
    raise ExceptionGroup('there were problems', excs)
```

----------------------------------------

TITLE: Enabling HTTPS with a TLS Certificate in Python's HTTP Server
DESCRIPTION: This option, introduced in Python 3.14, specifies a TLS certificate chain file for establishing HTTPS connections using python -m http.server. It necessitates accompanying private key and optionally a password file for a secured setup.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.server.rst#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
python -m http.server --tls-cert fullchain.pem
```

----------------------------------------

TITLE: Creating BytesParser for Complete Email Message Parsing in Python
DESCRIPTION: Creates a BytesParser instance for parsing complete email messages available in bytes-like objects or files. The _class and policy parameters control the message creation and parsing behavior respectively.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.parser.rst#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
BytesParser(_class=None, *, policy=policy.compat32)
```

----------------------------------------

TITLE: Using namedtuple with rename Parameter in Python Collections Module
DESCRIPTION: Shows how to use the new rename parameter in the namedtuple class from the collections module. This allows automatic renaming of invalid field names to legal Python identifiers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.7.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
>>> from collections import namedtuple
>>> T = namedtuple('T', ['field1', '$illegal', 'for', 'field2'], rename=True)
>>> T._fields
('field1', '_1', '_2', 'field2')
```

----------------------------------------

TITLE: Creating a Shared ctypes Object in Python's Multiprocessing Module
DESCRIPTION: This function creates a ctypes object in shared memory. It supports various types and optional locking for process-safety.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_29

LANGUAGE: python
CODE:
```
def Value(typecode_or_type, *args, lock=True):
    # Function implementation not shown in the original text
```

----------------------------------------

TITLE: Deprecated Attribute in codeobject (Python)
DESCRIPTION: The codeobject attribute co_lnotab is deprecated. Users should migrate to using the co_lines method for retrieving line number information.
SOURCE: https://github.com/python/cpython/blob/main/Doc/deprecations/pending-removal-in-future.rst#_snippet_4

LANGUAGE: Python
CODE:
```
codeobject.co_lnotab
```

----------------------------------------

TITLE: Adding gettrace and getprofile functions to threading module in Python
DESCRIPTION: Adds gettrace() and getprofile() functions to the threading module to retrieve the functions set by settrace() and setprofile() respectively.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
Add threading.gettrace() and threading.getprofile() to retrieve the functions set by threading.settrace() and threading.setprofile() respectively.
```

----------------------------------------

TITLE: Base Handler Setup Environment Method
DESCRIPTION: This method sets the environ attribute to a fully populated WSGI environment. It combines various methods and attributes to construct the environment, including get_stdin, get_stderr, add_cgi_vars, and wsgi_file_wrapper. It also ensures the SERVER_SOFTWARE key is present if the origin_server and server_software attributes are set.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/wsgiref.rst#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
"   .. method:: BaseHandler.setup_environ()\n\n      Set the :attr:`environ` attribute to a fully populated WSGI environment.  The\n      default implementation uses all of the above methods and attributes, plus the\n      :meth:`get_stdin`, :meth:`get_stderr`, and :meth:`add_cgi_vars` methods and the\n      :attr:`wsgi_file_wrapper` attribute.  It also inserts a ``SERVER_SOFTWARE`` key\n      if not present, as long as the :attr:`origin_server` attribute is a true value\n      and the :attr:`server_software` attribute is set."
```

----------------------------------------

TITLE: Adding Extraction Filter to tarfile Module in Python 3.8.17
DESCRIPTION: Introduces a new 'filter' argument to extraction methods in tarfile module and shutil.unpack_archive() to limit potentially dangerous tar features. This change aims to enhance security when extracting tar files.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_41

LANGUAGE: Python
CODE:
```
tarfile.open('archive.tar').extractall(filter='data')
```

----------------------------------------

TITLE: Using Formatter with Default Values Example
DESCRIPTION: Example showing how to create a Formatter with default values for custom fields. The formatter will use the 'ip' field in the format string, with a default value of None if not provided in the log record.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
logging.Formatter('%(ip)s %(message)s', defaults={"ip": None})
```

----------------------------------------

TITLE: Handling Non-Unicode Codecs
DESCRIPTION: Shows the use of `codecs.encode` and `codecs.decode` for binary data encoding with non-Unicode codecs, demonstrating the restoration of convenience aliases for such codecs in Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.4.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> from codecs import encode, decode
>>> encode(b"hello", "hex")
b'68656c6c6f'
>>> decode(b"68656c6c6f", "hex")
b'hello'
```

----------------------------------------

TITLE: argparse 'append_const' Action Example (Python)
DESCRIPTION: Demonstrates using the 'append_const' action to append predefined constant values (like types) to a list associated with a destination. Useful for collecting multiple constant flags into one list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_34

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--str', dest='types', action='append_const', const=str)
>>> parser.add_argument('--int', dest='types', action='append_const', const=int)
>>> parser.parse_args('--str --int'.split())
Namespace(types=[<class 'str'>, <class 'int'>])
```

----------------------------------------

TITLE: Handling Non-Blocking I/O in hashlib.file_digest
DESCRIPTION: Modification of file_digest method to raise BlockingIOError when no data is available during non-blocking I/O operations, preventing addition of spurious null bytes to the digest
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/next/Library/2024-07-23-17-08-41.gh-issue-122179.0jZm9h.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
hashlib.file_digest()
```

----------------------------------------

TITLE: Defining a Generic NamedTuple (Python 3.11+)
DESCRIPTION: Illustrates the modern syntax for creating generic `NamedTuple` classes using type variables directly in the class definition, available from Python 3.11 onwards.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_138

LANGUAGE: python
CODE:
```
class Group[T](NamedTuple):
    key: T
    group: list[T]
```

----------------------------------------

TITLE: Calculating Exponential Minus One in Python
DESCRIPTION: This function calculates e raised to the power of x minus 1, which helps avoid precision loss when dealing with small float values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/math.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
.. function:: expm1(x)

   Return *e* raised to the power *x*, minus 1.  Here *e* is the base of natural
   logarithms.  For small floats *x*, the subtraction in ``exp(x) - 1``
   can result in a `significant loss of precision
   <https://en.wikipedia.org/wiki/Loss_of_significance>`_; the :func:`expm1`
   function provides a way to compute this quantity to full precision:
```

----------------------------------------

TITLE: Accessing Named Groups by Index in Python Regular Expressions
DESCRIPTION: Demonstrates that named groups can also be accessed by their numeric index, just like unnamed capturing groups.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
>>> m.group(1)
'Malcolm'
>>> m.group(2)
'Reynolds'
```

----------------------------------------

TITLE: Setting Wakeup File Descriptor in Python
DESCRIPTION: The set_wakeup_fd function sets the wakeup file descriptor for signal handling. It can be used to wake up a poll or select call when a signal is received.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/signal.rst#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
def set_wakeup_fd(fd, *, warn_on_full_buffer=True):
    """Set the wakeup file descriptor to fd.  When a signal your program has
    registered a signal handler for is received, the signal number is written as
    a single byte into the fd."""
```

----------------------------------------

TITLE: Defining NOFLAG Constant for Default Regular Expression Behavior in Python
DESCRIPTION: Shows how to use the NOFLAG constant as a default value for a function argument, indicating no flags are applied to the regular expression.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
def myfunc(text, flag=re.NOFLAG):
    return re.match(text, flag)
```

----------------------------------------

TITLE: Creating and Displaying a Pad in Curses
DESCRIPTION: This code shows how to create a pad (a window that can be larger than the screen) and display a portion of it on the screen.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/curses.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
pad = curses.newpad(100, 100)
# These loops fill the pad with letters; addch() is
# explained in the next section
for y in range(0, 99):
    for x in range(0, 99):
        pad.addch(y,x, ord('a') + (x*x+y*y) % 26)

# Displays a section of the pad in the middle of the screen.
# (0,0) : coordinate of upper-left corner of pad area to display.
# (5,5) : coordinate of upper-left corner of window area to be filled
#         with pad content.
```

----------------------------------------

TITLE: Using geometric_mean() function in Python's statistics module
DESCRIPTION: Example of using the geometric_mean() function to calculate the geometric mean of data. This function converts data to floats and computes the central tendency using the product of values rather than their sum.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> round(geometric_mean([54, 24, 36]), 1)
36.0
```

----------------------------------------

TITLE: Listing Entry Point Groups (Python)
DESCRIPTION: After obtaining an `EntryPoints` object representing all entry points, this snippet demonstrates accessing its `.groups` attribute to get a sorted list of all unique entry point group names found within the collection. Groups typically categorize entry points by type (e.g., 'console_scripts').
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_4

LANGUAGE: Python Console
CODE:
```
>>> sorted(eps.groups)  # doctest: +SKIP
['console_scripts', 'distutils.commands', 'distutils.setup_keywords', 'egg_info.writers', 'setuptools.installation']
```

----------------------------------------

TITLE: Executing Terminal Capability with Curses in Python
DESCRIPTION: The `putp` function executes a specific terminfo capability, sending its output to standard output. It's equivalent to a `tputs` call with a given capability string.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_26

LANGUAGE: Python
CODE:
```
.. function:: putp(str)

   Equivalent to ``tputs(str, 1, putchar)``; emit the value of a specified
   terminfo capability for the current terminal.  Note that the output of :func:`putp`
   always goes to standard output.
```

----------------------------------------

TITLE: Pickling Python Enum Members
DESCRIPTION: Demonstrates how to pickle and unpickle Enum members, and how to modify the pickling behavior using __reduce_ex__.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
>>> from test.test_enum import Fruit
>>> from pickle import dumps, loads
>>> Fruit.TOMATO is loads(dumps(Fruit.TOMATO))
True

>>> import enum
>>> class MyEnum(enum.Enum):
...     __reduce_ex__ = enum.pickle_by_enum_name
```

----------------------------------------

TITLE: Implementing XML Depth Counter with XMLParser in Python
DESCRIPTION: Example showing how to use XMLParser with a custom target class to count the maximum depth of an XML document structure. The MaxDepth class implements callback methods to track element nesting levels.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_28

LANGUAGE: python
CODE:
```
>>> from xml.etree.ElementTree import XMLParser
>>> class MaxDepth:                     # The target object of the parser
...     maxDepth = 0
...     depth = 0
...     def start(self, tag, attrib):   # Called for each opening tag.
...         self.depth += 1
...         if self.depth > self.maxDepth:
...             self.maxDepth = self.depth
...     def end(self, tag):             # Called for each closing tag.
...         self.depth -= 1
...     def data(self, data):
...         pass            # We do not need to do anything with data.
...     def close(self):    # Called when all data has been parsed.
...         return self.maxDepth
...
>>> target = MaxDepth()
>>> parser = XMLParser(target=target)
>>> exampleXml = """
... <a>
...   <b>
...   </b>
...   <b>
...     <c>
...       <d>
...       </d>
...     </c>
...   </b>
... </a>"""
>>> parser.feed(exampleXml)
>>> parser.close()
4
```

----------------------------------------

TITLE: Configuring Warning Skips for Package-Level Warnings in Python
DESCRIPTION: This code snippet shows how to configure warning skips to attribute warnings to callers outside of the current package. It demonstrates setting up skip_file_prefixes and using it in a warning call within a function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/warnings.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
# example/lower.py
_warn_skips = (os.path.dirname(__file__),)

def one_way(r_luxury_yacht=None, t_wobbler_mangrove=None):
    if r_luxury_yacht:
        warnings.warn("Please migrate to t_wobbler_mangrove=.",
                      skip_file_prefixes=_warn_skips)

# example/higher.py
from . import lower

def another_way(**kw):
    lower.one_way(**kw)
```

----------------------------------------

TITLE: Packing short integer with big-endian byte order in Python struct
DESCRIPTION: Demonstrates using the Python `struct` module to pack a short integer (1023) into bytes using big-endian byte order, indicated by the '>' format character prefix. The output shows the resulting bytes in big-endian format.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/struct.rst#_snippet_1

LANGUAGE: Python
CODE:
```
import struct
struct.pack('>h', 1023)
# Output: b'\x03\xff'
```

----------------------------------------

TITLE: Using collections.namedtuple with Rename Option in Python
DESCRIPTION: Shows how to create a namedtuple with automatic renaming of invalid field names to positional names using the rename keyword. Useful when field names are derived from external data sources that might contain invalid characters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.1.rst#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
query = input()
SELECT region, dept, count(*) FROM main GROUPBY region, dept

cursor.execute(query)
query_fields = [desc[0] for desc in cursor.description]
UserQuery = namedtuple('UserQuery', query_fields, rename=True)
pprint.pprint([UserQuery(*row) for row in cursor])
[UserQuery(region='South', dept='Shipping', _2=185),
 UserQuery(region='North', dept='Accounting', _2=37),
 UserQuery(region='West', dept='Sales', _2=419)]
```

----------------------------------------

TITLE: Defining Valid Identifiers in Python
DESCRIPTION: This code block outlines the grammar rules for valid identifiers in Python, specifying the character categories that can constitute identifier names.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/lexical_analysis.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
.. productionlist:: python-grammar
   identifier: `xid_start` `xid_continue`*
   id_start: <all characters in general categories Lu, Ll, Lt, Lm, Lo, Nl, the underscore, and characters with the Other_ID_Start property>
   id_continue: <all characters in `id_start`, plus characters in the categories Mn, Mc, Nd, Pc and others with the Other_ID_Continue property>
   xid_start: <all characters in `id_start` whose NFKC normalization is in "id_start xid_continue*">
   xid_continue: <all characters in `id_continue` whose NFKC normalization is in "id_continue*">
```

----------------------------------------

TITLE: Launching Specific Python Versions with py -V: (Windows CMD)
DESCRIPTION: Demonstrates how to launch a specific Python version installed via the Python Install Manager using the `py -V:` option. Examples show selecting by version tag (e.g., `3.14`, `3-arm64`) and by distributor/tag (e.g., `Distributor\1.0`, `distrib/`). The `...` placeholder indicates additional arguments passed to the interpreter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/windows.rst#_snippet_1

LANGUAGE: cmd
CODE:
```
$> py -V:3.14 ...
$> py -V:3-arm64 ...
```

LANGUAGE: cmd
CODE:
```
$> py -V:Distributor\1.0 ...
$> py -V:distrib/ ...
```

----------------------------------------

TITLE: IPv6 Network Initialization and Manipulation
DESCRIPTION: Explains initializing an IPv6 network with the `IPv6Network` class. The address can be represented in various forms: string, integer, bytes, or a two-tuple. Raises `AddressValueError` for invalid addresses. Initialize with `strict` to ensure host bits are clear or masked. Outputs: An `IPv6Network` object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ipaddress.rst#2025-04-21_snippet_13

LANGUAGE: Python
CODE:
```
IPv6Network('2001:db00::0/24', strict=True)
```

----------------------------------------

TITLE: Differ Result Output to Standard Output
DESCRIPTION: This example shows how to output the result of a Differ comparison to standard output using the sys module. The sys.stdout.writelines method is used to write the list of strings (the diff) to the console.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/difflib.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
>>> import sys
>>> sys.stdout.writelines(result)
```

----------------------------------------

TITLE: Pattern Matching with Guard Clause
DESCRIPTION: Shows how to use a guard clause in pattern matching to add additional conditions. The example matches Point objects and checks if x equals y.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
match point:
    case Point(x, y) if x == y:
        print(f"The point is located on the diagonal Y=X at {x}.")
    case Point(x, y):
        print(f"Point is not on the diagonal.")
```

----------------------------------------

TITLE: Function Definition for invalidate_caches in Python
DESCRIPTION: Supports invalidating caches across sys.meta_path finders. Useful when dynamic module creation might have occurred so that all finders detect new modules upon subsequent imports. It ensures finders recognize changes in sys.meta_path.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
.. function:: invalidate_caches()

   Invalidate the internal caches of finders stored at
   :data:`sys.meta_path`. If a finder implements ``invalidate_caches()`` then it
   will be called to perform the invalidation.
```

----------------------------------------

TITLE: Using Index-like Objects as Group Indices in Python 3.6
DESCRIPTION: Match objects now support index-like objects as group indices, allowing more flexible ways to access match groups.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.6.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
# Example usage not provided in the original text
```

----------------------------------------

TITLE: Creating WSGI Server in Python
DESCRIPTION: Example of creating and running a WSGI server using make_server function to serve a demo application on port 8000
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/wsgiref.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from wsgiref.simple_server import make_server, demo_app

with make_server('', 8000, demo_app) as httpd:
    print("Serving HTTP on port 8000...")

    # Respond to requests until process is killed
    httpd.serve_forever()

    # Alternative: serve one request, then exit
    httpd.handle_request()
```

----------------------------------------

TITLE: Example PYTHONWARNINGS usage
DESCRIPTION: This code snippet demonstrates how to set the PYTHONWARNINGS environment variable to control how Python handles warnings. Different values can be used to trigger different warning behaviors such as converting warnings to exceptions or suppressing them entirely.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/cmdline.rst#2025-04-21_snippet_5

LANGUAGE: text
CODE:
```
"PYTHONWARNINGS=default  # Warn once per call location
PYTHONWARNINGS=error    # Convert to exceptions
PYTHONWARNINGS=always   # Warn every time
PYTHONWARNINGS=all      # Same as PYTHONWARNINGS=always
PYTHONWARNINGS=module   # Warn once per calling module
PYTHONWARNINGS=once     # Warn once per Python process
PYTHONWARNINGS=ignore   # Never warn"
```

----------------------------------------

TITLE: Python Threading Barrier Return Value Housekeeping
DESCRIPTION: Demonstrates how to use the integer return value from `Barrier.wait` to select one thread (the one receiving 0) to perform a specific task, like printing a message, after all threads have successfully passed the barrier.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/threading.rst#_snippet_8

LANGUAGE: python
CODE:
```
i = barrier.wait()
if i == 0:
    # Only one thread needs to print this
    print("passed the barrier")
```

----------------------------------------

TITLE: Example of string output and control characters - Python
DESCRIPTION: This snippet demonstrates how to create a string containing various control characters in Python and explains the output when it is printed. It illustrates how the length and displayed representation can vary depending on the environment.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/idle.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
s = 'a\tb\a<\x02><\r>\bc\nd'  # Enter 22 chars.
>>> len(s)
14
>>> s  # Display repr(s)
'a\tb\x07<\x02><\r>\x08c\nd'
>>> print(s, end='')  # Display s as is.
```

----------------------------------------

TITLE: Inspecting singledispatch Registry and Dispatch Resolution
DESCRIPTION: Shows how to check which implementation will be chosen for a given type using the dispatch() attribute, and how to access all registered implementations using the registry attribute.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
>>> fun.dispatch(float)
<function fun_num at 0x1035a2840>
>>> fun.dispatch(dict)    # note: default implementation
<function fun at 0x103fe0000>
```

----------------------------------------

TITLE: Demonstrating Unpacking in Function Calls with Python
DESCRIPTION: This code demonstrates how unpacking with the * operator is processed before keyword arguments in Python function calls, which can lead to unexpected behavior when both are used together.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/expressions.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
>>> def f(a, b):
...     print(a, b)
...
>>> f(b=1, *(2,))
2 1
>>> f(a=1, *(2,))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: f() got multiple values for keyword argument 'a'
>>> f(1, *(2,))
1 2
```

----------------------------------------

TITLE: Adding AttrDict to JSON Module for Object Hook Usage
DESCRIPTION: This update adds an AttrDict class to the JSON module for use with the object_hook parameter in JSON parsing.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.12.0a1.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
json.loads(data, object_hook=AttrDict)  # Uses new AttrDict for parsing
```

----------------------------------------

TITLE: Creating Custom Skip Decorators in Python unittest
DESCRIPTION: Shows how to create a custom skip decorator that conditionally skips tests based on object attributes. This allows for more flexible and reusable test skipping logic.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
def skipUnlessHasattr(obj, attr):
    if hasattr(obj, attr):
        return lambda func: func
    return unittest.skip("{!r} doesn't have {!r}".format(obj, attr))
```

----------------------------------------

TITLE: Thread-Specific CPU Time Measurements in Python
DESCRIPTION: The time module introduces thread_time and thread_time_ns functions for getting per-thread CPU time measurements. These functions allow developers to profile CPU usage at the thread level with nanosecond precision.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
The new :func:`time.thread_time` and :func:`time.thread_time_ns` functions
can be used to get per-thread CPU time measurements.
(Contributed by Antoine Pitrou in :issue:`32025`.)
```

----------------------------------------

TITLE: Checking Awaitable Object Detection in Python
DESCRIPTION: Example demonstrating how to use isawaitable() to distinguish between regular generators and generator-based coroutines.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/inspect.rst#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
import types

def gen():
    yield
@types.coroutine
def gen_coro():
    yield

assert not isawaitable(gen())
assert isawaitable(gen_coro())
```

----------------------------------------

TITLE: DeepChainMap Implementation
DESCRIPTION: Custom implementation of ChainMap that allows deep updates and deletions in nested mappings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
class DeepChainMap(ChainMap):
    'Variant of ChainMap that allows direct updates to inner scopes'

    def __setitem__(self, key, value):
        for mapping in self.maps:
            if key in mapping:
                mapping[key] = value
                return
        self.maps[0][key] = value

    def __delitem__(self, key):
        for mapping in self.maps:
            if key in mapping:
                del mapping[key]
                return
        raise KeyError(key)
```

----------------------------------------

TITLE: Using Same Quotes in Python 3.12 F-string Expressions
DESCRIPTION: Demonstrates the new capability in Python 3.12 (PEP 701) allowing the reuse of the same quote type within an f-string expression as the enclosing f-string, which previously raised a SyntaxError.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_5

LANGUAGE: python
CODE:
```
songs = ['Take me back to Eden', 'Alkaline', 'Ascensionism']
f"This is the playlist: {", ".join(songs)}"
```

----------------------------------------

TITLE: Using the Standard ExtendedContext (Python)
DESCRIPTION: Shows the default configuration of the `ExtendedContext`, sets it as the active context, and demonstrates calculations including division by zero, which results in `Decimal('Infinity')` under this context.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_9

LANGUAGE: python
CODE:
```
ExtendedContext
setcontext(ExtendedContext)
Decimal(1) / Decimal(7)
Decimal(42) / Decimal(0)
```

----------------------------------------

TITLE: Opening Database Function - Python
DESCRIPTION: This function opens a database file and returns the corresponding database object. It takes parameters for the file, access flags, and file mode. Supports context management for automatic closing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dbm.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def open(file, flag='r', mode=0o666):
    """
    Open a database and return the corresponding database object.

    :param file:
        The database file to open.

        If the database file already exists, the :func:`whichdb` function is used to
        determine its type and the appropriate module is used; if it does not exist,
        the first submodule listed above that can be imported is used.
    :type file: :term:`path-like object`

    :param str flag:
        * ``'r'`` (default): |flag_r|
        * ``'w'``: |flag_w|
        * ``'c'``: |flag_c|
        * ``'n'``: |flag_n|

    :param int mode:
        |mode_param_doc|
    """
    # implementation goes here
```

----------------------------------------

TITLE: mmap write_byte method
DESCRIPTION: The `write_byte(byte)` method writes the integer *byte* into memory at the current position of the file pointer, advancing the file position by 1.  A TypeError is raised if the mmap was created with ACCESS_READ.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/mmap.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
".. method:: write_byte(byte)\n\n   Write the integer *byte* into memory at the current\n   position of the file pointer; the file position is advanced by ``1``. If\n   the mmap was created with :const:`ACCESS_READ`, then writing to it will\n   raise a :exc:`TypeError` exception."
```

----------------------------------------

TITLE: TypeVarTuple Correct Unpacked Annotation
DESCRIPTION: Demonstrates the correct way to use a TypeVarTuple annotation by unpacking it within a tuple type hint using the asterisk operator.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_115

LANGUAGE: python
CODE:
```
x: tuple[*Ts]  # The correct way to do it
```

----------------------------------------

TITLE: Creating a poll object in Python
DESCRIPTION: This snippet shows how to create a polling object, which supports registering and unregistering file descriptors, and then polling them for I/O events.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/select.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
poll()
```

----------------------------------------

TITLE: Get URL Method
DESCRIPTION: The geturl() method returns a re-combined version of the original URL as a string. It may differ from the original URL by normalizing the scheme to lowercase and dropping empty components such as parameters, queries, and fragment identifiers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.parse.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```

      >>> from urllib.parse import urlsplit
      >>> url = 'HTTP://www.Python.org/doc/#'
      >>> r1 = urlsplit(url)
      >>> r1.geturl()
      'http://www.Python.org/doc/'
      >>> r2 = urlsplit(r1.geturl())
      >>> r2.geturl()
      'http://www.Python.org/doc/'

```

----------------------------------------

TITLE: Itertools Recipe: subslices function
DESCRIPTION: Function that returns all contiguous non-empty subslices of a sequence using combinations to generate slice indices.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_44

LANGUAGE: python
CODE:
```
def subslices(seq):
    "Return all contiguous non-empty subslices of a sequence."
    # subslices('ABCD') → A AB ABC ABCD B BC BCD C CD D
    slices = starmap(slice, combinations(range(len(seq) + 1), 2))
    return map(getitem, repeat(seq), slices)
```

----------------------------------------

TITLE: Using Partial Function Application with functools
DESCRIPTION: Examples of using the new partial function application feature via functools.partial to create specialized versions of functions with pre-filled arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
import functools

def log (message, subsystem):
    "Write the contents of 'message' to the specified subsystem."
    print '%s: %s' % (subsystem, message)
    ...

server_log = functools.partial(log, subsystem='server')
server_log('Unable to open socket')
```

LANGUAGE: python
CODE:
```
class Application:
    def open_item(self, path):
       ...
    def init (self):
        open_func = functools.partial(self.open_item, item_path)
        popup_menu.append( ("Open", open_func, 1) )
```

LANGUAGE: python
CODE:
```
def my_decorator(f):
    def wrapper(*args, **kwds):
        print 'Calling decorated function'
        return f(*args, **kwds)
    functools.update_wrapper(wrapper, f)
    return wrapper
```

LANGUAGE: python
CODE:
```
def my_decorator(f):
    @functools.wraps(f)
    def wrapper(*args, **kwds):
        print 'Calling decorated function'
        return f(*args, **kwds)
    return wrapper
```

----------------------------------------

TITLE: Handling Negative Values in timedelta Normalization in Python
DESCRIPTION: Shows how negative values are normalized in timedelta objects, demonstrating that a negative microsecond value is converted to an equivalent representation using days, seconds, and microseconds.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> from datetime import timedelta
>>> d = timedelta(microseconds=-1)
>>> (d.days, d.seconds, d.microseconds)
(-1, 86399, 999999)
```

----------------------------------------

TITLE: Creating Sequence Iterator
DESCRIPTION: Function to create a new iterator for a general sequence object, with iteration terminating on IndexError
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/iterator.rst#2025-04-21_snippet_2

LANGUAGE: c
CODE:
```
PyObject* PySeqIter_New(PyObject *seq)
```

----------------------------------------

TITLE: Parsing Starred Assignment into AST (Python)
DESCRIPTION: Illustrates the AST representation of starred assignment (sequence unpacking with a catch-all). The snippet parses `a, *b = it` into an `Assign` node, showing the targets as a `Tuple` containing a regular `Name` and a `Starred` node for `*b`, both with a `Store` context.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_14

LANGUAGE: python
CODE:
```
print(ast.dump(ast.parse('a, *b = it'), indent=4))
```

----------------------------------------

TITLE: Adding Custom Frame Formatting in Traceback (Python)
DESCRIPTION: New method traceback.StackSummary.format_frame_summary() allows users to override which frames appear in the traceback and how they are formatted.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.11.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
traceback.StackSummary.format_frame_summary()
```

----------------------------------------

TITLE: Using TextWrapper.fill() Method in Python
DESCRIPTION: The fill() method wraps a single paragraph of text according to the TextWrapper instance's configuration and returns a single string containing the wrapped paragraph.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/textwrap.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
fill(text)
```

----------------------------------------

TITLE: Creating and Modifying Parameter Objects in Python
DESCRIPTION: This example demonstrates how to create a Parameter object and use the replace method to create modified copies of it, including removing default values and adding annotations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/inspect.rst#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from inspect import Parameter
param = Parameter('foo', Parameter.KEYWORD_ONLY, default=42)
str(param)

str(param.replace()) # Will create a shallow copy of 'param'

str(param.replace(default=Parameter.empty, annotation='spam'))
```

----------------------------------------

TITLE: Implementing Integer Bit Length Method in Python
DESCRIPTION: This code snippet provides an equivalent implementation of the bit_length() method for integers in Python. It demonstrates how to calculate the number of bits needed to represent an integer in binary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
def bit_length(self):
    s = bin(self)       # binary representation:  bin(-37) --> '-0b100101'
```

----------------------------------------

TITLE: Getting Module Search Path C-API (Deprecated)
DESCRIPTION: Returns the default module search path as a single string with directory names separated by a platform-dependent delimiter (':' or ';'). This path is computed based on the program name and environment variables and is used to initialize `sys.path`. The returned string is static storage and must not be modified. It returns `NULL` if called before `Py_Initialize`. It is deprecated; use `PyConfig_Get("module_search_paths")` instead. This function was deprecated in 3.13 and removed in 3.15.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/init.rst#_snippet_22

LANGUAGE: C
CODE:
```
wchar_t* Py_GetPath()
```

----------------------------------------

TITLE: Configuring and Creating a New Isolated Sub-Interpreter (C)
DESCRIPTION: This snippet demonstrates how to configure and create a new Python sub-interpreter using the Py_NewInterpreterFromConfig C-API function. It sets various configuration options to achieve isolation, such as using separate obmalloc, disallowing fork/exec, and assigning an owned GIL. It checks the status of the interpreter creation and exits on failure.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/init.rst#_snippet_51

LANGUAGE: C
CODE:
```
PyInterpreterConfig config = {
    .use_main_obmalloc = 0,
    .allow_fork = 0,
    .allow_exec = 0,
    .allow_threads = 1,
    .allow_daemon_threads = 0,
    .check_multi_interp_extensions = 1,
    .gil = PyInterpreterConfig_OWN_GIL,
};
PyThreadState *tstate = NULL;
PyStatus status = Py_NewInterpreterFromConfig(&tstate, &config);
if (PyStatus_Exception(status)) {
    Py_ExitStatusException(status);
}
```

----------------------------------------

TITLE: Inspecting CPython GC Generations and Collection (Python)
DESCRIPTION: Illustrates how to create objects, trigger garbage collection for specific generations using `gc.collect(generation=NUM)`, and inspect the objects residing in different generations using `gc.get_objects(generation=NUM)`. It shows how an object can move from the young generation to older generations after collections.
SOURCE: https://github.com/python/cpython/blob/main/InternalDocs/garbage_collector.md#_snippet_8

LANGUAGE: pycon
CODE:
```
>>> import gc
>>> class MyObj:
...     pass
...
>>> # Move everything to the old generation so it's easier to inspect
>>> # the young generation.
>>> gc.collect()
0
>>> # Create a reference cycle.
>>> x = MyObj()
>>> x.self = x
>>> 
>>> # Initially the object is in the young generation.
>>> gc.get_objects(generation=0)
[..., <__main__.MyObj object at 0x7fbcc12a3400>, ...]
>>> 
>>> # After a collection of the youngest generation the object
>>> # moves to the old generation.
>>> gc.collect(generation=0)
0
>>> gc.get_objects(generation=0)
[]
>>> gc.get_objects(generation=1)
[]
>>> gc.get_objects(generation=2)
[..., <__main__.MyObj object at 0x7fbcc12a3400>, ...]
```

----------------------------------------

TITLE: Multiprocessing Factorial Example
DESCRIPTION: Demonstrates using the multiprocessing package to calculate a factorial in a separate process and return the result using a Queue. The factorial function includes a delay to simulate longer computation times, and the main process creates a Process, starts it, waits for completion using join, and retrieves the result from the queue.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
import time
from multiprocessing import Process, Queue


def factorial(queue, N):
    "Compute a factorial."
    # If N is a multiple of 4, this function will take much longer.
    if (N % 4) == 0:
        time.sleep(.05 * N/4)

    # Calculate the result
    fact = 1L
    for i in range(1, N+1):
        fact = fact * i

    # Put the result on the queue
    queue.put(fact)

if __name__ == '__main__':
    queue = Queue()

    N = 5

    p = Process(target=factorial, args=(queue, N))
    p.start()
    p.join()

    result = queue.get()
    print 'Factorial', N, '=', result
```

----------------------------------------

TITLE: Demonstrating Class Method Introspection in Python
DESCRIPTION: This code demonstrates how to access the name and qualified name of a class method using introspection. It showcases both bound and non-bound methods within nested classes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.3.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
>>> class C:
...     def meth(self):
...         pass
...
>>> C.meth.__name__
'meth'
>>> C.meth.__qualname__
'C.meth'
```

LANGUAGE: Python
CODE:
```
>>> class C:
...     class D:
...         def meth(self):
...             pass
...
>>> C.D.__name__
'D'
>>> C.D.__qualname__
'C.D'
>>> C.D.meth.__name__
'meth'
>>> C.D.meth.__qualname__
'C.D.meth'
```

LANGUAGE: Python
CODE:
```
>>> def outer():
...     def inner():
...         pass
...     return inner
...
>>> outer().__name__
'inner'
>>> outer().__qualname__
'outer.<locals>.inner'
```

----------------------------------------

TITLE: Demonstrating Shell-Like Parsing with shlex
DESCRIPTION: Example showing how shlex parses shell-like command strings differently with and without punctuation_chars enabled.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/shlex.rst#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> import shlex
>>> text = "a && b; c && d || e; f >'abc'; (def \"ghi\")"
>>> s = shlex.shlex(text, posix=True)
>>> s.whitespace_split = True
>>> list(s)
['a', '&&', 'b;', 'c', '&&', 'd', '||', 'e;', 'f', '>abc;', '(def', 'ghi)']
>>> s = shlex.shlex(text, posix=True, punctuation_chars=True)
>>> s.whitespace_split = True
>>> list(s)
['a', '&&', 'b', ';', 'c', '&&', 'd', '||', 'e', ';', 'f', '>', 'abc', ';', '(', 'def', 'ghi', ')']
```

----------------------------------------

TITLE: Creating StackSummary from List
DESCRIPTION: Constructs a StackSummary object from a list of FrameSummary objects or old-style tuples. Each tuple should contain filename, lineno, name, and line information.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
StackSummary.from_list(a_list)
```

----------------------------------------

TITLE: Disabling Proxies with urllib.request
DESCRIPTION: This example demonstrates how to disable the use of proxies with urllib.request by providing an empty dictionary to the ProxyHandler. A custom opener is built, which overrides any environment settings for proxies. The opener is then used to open the target URL, and the response content is read and decoded.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_52

LANGUAGE: python
CODE:
```
>>> import urllib.request
>>> opener = urllib.request.build_opener(urllib.request.ProxyHandler({}))
>>> with opener.open("http://www.python.org/") as f:
...     f.read().decode('utf-8')
... 
```

----------------------------------------

TITLE: Reshaping 2D Matrix in Python
DESCRIPTION: The reshape function transforms a 2D matrix to have a given number of columns. It uses chain.from_iterable and batched to restructure the matrix.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_50

LANGUAGE: python
CODE:
```
def reshape(matrix, columns):
    "Reshape a 2-D matrix to have a given number of columns."
    # reshape([(0, 1), (2, 3), (4, 5)], 3) →  (0, 1, 2), (3, 4, 5)
    return batched(chain.from_iterable(matrix), columns, strict=True)
```

----------------------------------------

TITLE: Converting Numbers to float or complex in Python
DESCRIPTION: Introduces new class methods `float.from_number` and `complex.from_number` for converting numeric types to `float` or `complex`, raising an error if the input is a string.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_17

LANGUAGE: Python
CODE:
```
float.from_number
```

LANGUAGE: Python
CODE:
```
complex.from_number
```

LANGUAGE: Python
CODE:
```
float
```

LANGUAGE: Python
CODE:
```
complex
```

----------------------------------------

TITLE: Converting Floating-Point Numbers to Hexadecimal Strings in Python
DESCRIPTION: Demonstrates the hex() method for floating-point numbers and the float.fromhex() method that convert floats to and from hexadecimal string representation without introducing rounding errors from decimal-binary conversion.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
>>> a = 3.75
>>> a.hex()
'0x1.e000000000000p+1'
>>> float.fromhex('0x1.e000000000000p+1')
3.75
>>> b=1./3
>>> b.hex()
'0x1.5555555555555p-2'
```

----------------------------------------

TITLE: Functools Single Dispatch Method Example - Python
DESCRIPTION: Shows how to use the new functools.singledispatchmethod decorator to create methods that use single dispatch generic functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
from functools import singledispatchmethod
from contextlib import suppress

class TaskManager:

    def __init__(self, tasks):
        self.tasks = list(tasks)

    @singledispatchmethod
    def discard(self, value):
        with suppress(ValueError):
            self.tasks.remove(value)

    @discard.register(list)
    def _(self, tasks):
        targets = set(tasks)
        self.tasks = [x for x in self.tasks if x not in targets]
```

----------------------------------------

TITLE: SAT Score Distribution Analysis
DESCRIPTION: Calculates percentage and quantiles for SAT scores using NormalDist.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
>>> sat = NormalDist(1060, 195)
>>> fraction = sat.cdf(1200 + 0.5) - sat.cdf(1100 - 0.5)
>>> round(fraction * 100.0, 1)
18.4

>>> list(map(round, sat.quantiles()))
[928, 1060, 1192]
>>> list(map(round, sat.quantiles(n=10)))
[810, 896, 958, 1011, 1060, 1109, 1162, 1224, 1310]
```

----------------------------------------

TITLE: Reading into Multiple Buffers (Python)
DESCRIPTION: The readv() function reads from a file descriptor fd into multiple mutable bytes-like objects specified in buffers. It fills each buffer sequentially and returns the total number of bytes read. The system may limit the number of buffers that can be used.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_28

LANGUAGE: python
CODE:
```
readv(fd, buffers, /)
```

----------------------------------------

TITLE: Creating a Message Dialog Box in Python with tkinter.messagebox
DESCRIPTION: Example of creating a Message dialog window with specified options. This class allows customization of message content, buttons, icons, and behavior with various options like command, default, detail, icon, message, parent, title, and type.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.messagebox.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
class Message(master=None, **options):

   Create a message window with an application-specified message, an icon
   and a set of buttons.
   Each of the buttons in the message window is identified by a unique symbolic name (see the *type* options).
```

----------------------------------------

TITLE: Using window.vline() Method in Python Curses
DESCRIPTION: Displays a vertical line starting at a specified position with a given length, using the specified character and attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_108

LANGUAGE: python
CODE:
```
window.vline(ch, n[, attr])
window.vline(y, x, ch, n[, attr])
```

----------------------------------------

TITLE: Month Range and Number of Days - Python
DESCRIPTION: This function provides the day of the week for the first day of the specified month along with the total number of days, streamlining calendar functionalities.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/calendar.rst#2025-04-21_snippet_14

LANGUAGE: Python
CODE:
```
.. function:: monthrange(year, month)
```

----------------------------------------

TITLE: SQLite3 Window Function Example
DESCRIPTION: Demonstration of the new SQLite3 window function creation capability.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.11.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
connection.create_window_function("window_func_name", num_params, WindowClass)
```

----------------------------------------

TITLE: WSGI Validator Implementation Example
DESCRIPTION: Example demonstrating the usage of WSGI validator wrapper around a simple application to check protocol conformance
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/wsgiref.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
from wsgiref.validate import validator
from wsgiref.simple_server import make_server

# Our callable object which is intentionally not compliant to the
# standard, so the validator is going to break
def simple_app(environ, start_response):
    status = '200 OK'  # HTTP Status
    headers = [('Content-type', 'text/plain')]  # HTTP Headers
    start_response(status, headers)

    # This is going to break because we need to return a list, and
    # the validator is going to inform us
    return b"Hello World"

# This is the application wrapped in a validator
validator_app = validator(simple_app)

with make_server('', 8000, validator_app) as httpd:
    print("Listening on port 8000....")
    httpd.serve_forever()
```

----------------------------------------

TITLE: Itertools Recipe: repeatfunc function
DESCRIPTION: Function that repeats calls to a function with specified arguments, optionally limited to a specific number of times.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_28

LANGUAGE: python
CODE:
```
def repeatfunc(function, times=None, *args):
    "Repeat calls to a function with specified arguments."
    if times is None:
        return starmap(function, repeat(args))
    return starmap(function, repeat(args, times))
```

----------------------------------------

TITLE: Defining Functions for Performance Profiling - Python
DESCRIPTION: This snippet illustrates the definition of three nested functions (foo, bar, and baz) that will be profiled using 'perf'. The main function calls 'baz' with a high number of iterations to demonstrate profiling capabilities.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/perf_profiling.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
def foo(n):
        result = 0
        for _ in range(n):
            result += 1
        return result

def bar(n):
        foo(n)

def baz(n):
        bar(n)

if __name__ == "__main__":
    baz(1000000)
```

----------------------------------------

TITLE: SequenceMatcher Ratio Printing Example
DESCRIPTION: This example prints the ratio of similarity between two strings, rounded to three decimal places, after applying the SequenceMatcher on the two strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/difflib.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
>>> print(round(s.ratio(), 3))
0.866
```

----------------------------------------

TITLE: Converting Certificate Time to Seconds in Python
DESCRIPTION: This function converts a certificate time string to seconds since the Epoch. It accepts a cert_time string in the format '%b %d %H:%M:%S %Y %Z' and returns the corresponding timestamp.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> import ssl
>>> timestamp = ssl.cert_time_to_seconds("Jan  5 09:34:43 2018 GMT")
>>> timestamp  # doctest: +SKIP
1515144883
>>> from datetime import datetime
>>> print(datetime.utcfromtimestamp(timestamp))  # doctest: +SKIP
2018-01-05 09:34:43
```

----------------------------------------

TITLE: Parsing Arguments Starting with Hyphen (Negative Options Present) in Python argparse
DESCRIPTION: Shows how `parse_args` interprets arguments starting with a hyphen as options when options resembling negative numbers are defined, potentially leading to 'no such option' errors if the argument doesn't match a defined option.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_68

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser(prog='PROG')
>>> parser.add_argument('-1', dest='one')
>>> parser.add_argument('foo', nargs='?')

>>> # negative number options present, so -1 is an option
>>> parser.parse_args(['-1', 'X'])
Namespace(foo=None, one='X')

>>> # negative number options present, so -2 is an option
>>> parser.parse_args(['-2'])
usage: PROG [-h] [-1 ONE] [foo]
PROG: error: no such option: -2
```

----------------------------------------

TITLE: Doctest Runner Implementation
DESCRIPTION: Demonstrates how to run doctests using the new DocTestRunner class.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
runner = doctest.DocTestRunner()
for t in tests:
    tried, failed = runner.run(t)

runner.summarize(verbose=1)
```

----------------------------------------

TITLE: Extracting Cookies from Response in Python
DESCRIPTION: This method extracts cookies from an HTTP response and stores them in the CookieJar according to the defined policy. It checks for appropriate Set-Cookie headers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.cookiejar.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
def extract_cookies(self, response, request):
    pass
```

----------------------------------------

TITLE: Adding integer is_integer() method in Python
DESCRIPTION: Adds a new is_integer() method to the int class to improve duck type compatibility between int and float classes.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.12.0a4.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
int.is_integer()
```

----------------------------------------

TITLE: Supporting Top-Level Await in compile()
DESCRIPTION: Enable compilation of sources with top-level async constructs using a new compile flag
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0b1.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
compile(source, '<string>', 'exec', flags=ast.PyCF_ALLOW_TOP_LEVEL_AWAIT)
```

----------------------------------------

TITLE: Workaround for WeakKeyDictionary Key Replacement in Python
DESCRIPTION: This snippet demonstrates a workaround for the key replacement issue in WeakKeyDictionary. By removing the key before reassignment, the desired behavior is achieved when deleting references to keys.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/weakref.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> class T(str): pass
...
>>> k1, k2 = T(), T()
>>> d = weakref.WeakKeyDictionary()
>>> d[k1] = 1   # d = {k1: 1}
>>> del d[k1]
>>> d[k2] = 2   # d = {k2: 2}
>>> del k1      # d = {k2: 2}
```

----------------------------------------

TITLE: Demonstrating Round-Trip Compression Using BZ2 in Python
DESCRIPTION: This snippet demonstrates the basic usage of the BZ2 module to compress and decompress a byte string, checking that the original data is equal to the decompressed data. It shows the calculation of data compression ratio as well.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/bz2.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
>>> import bz2
>>> data = b"""
... Donec rhoncus quis sapien sit amet molestie. Fusce scelerisque vel augue
... nec ullamcorper. Nam rutrum pretium placerat. Aliquam vel tristique lorem,
... sit amet cursus ante. In interdum laoreet mi, sit amet ultrices purus
... pulvinar a. Nam gravida euismod magna, non varius justo tincidunt feugiat.
... Aliquam pharetra lacus non risus vehicula rutrum. Maecenas aliquam leo
... felis. Pellentesque semper nunc sit amet nibh ullamcorper, ac elementum
... dolor luctus. Curabitur lacinia mi ornare consectetur vestibulum."""
>>> c = bz2.compress(data)
>>> len(data) / len(c)  # Data compression ratio
1.513595166163142
>>> d = bz2.decompress(c)
>>> data == d  # Check equality to original object after round-trip
True
```

----------------------------------------

TITLE: Adding Asynchronous Cleanup in Python unittest
DESCRIPTION: Method to add an asynchronous cleanup function in IsolatedAsyncioTestCase.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_34

LANGUAGE: python
CODE:
```
addAsyncCleanup(function, /, *args, **kwargs)
```

----------------------------------------

TITLE: Using Python Future Statements
DESCRIPTION: Shows the syntax for the `from __future__ import` statement, used to enable features from future Python releases in the current version. Includes a specific example for the `annotations` feature. Future statements must appear near the top of a module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/simple_stmts.rst#_snippet_10

LANGUAGE: python
CODE:
```
from __future__ import feature
```

LANGUAGE: python
CODE:
```
from __future__ import annotations
```

----------------------------------------

TITLE: Logger Stream Wrapper Implementation
DESCRIPTION: Implementation of a file-like object wrapper for logger objects, allowing logging system to be used as an output stream. Includes both basic and buffered implementations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_60

LANGUAGE: python
CODE:
```
class LoggerWriter:
    def __init__(self, logger, level):
        self.logger = logger
        self.level = level

    def write(self, message):
        if message != '\n':  # avoid printing bare newlines, if you like
            self.logger.log(self.level, message)

    def flush(self):
        pass

    def close(self):
        pass

class BufferingLoggerWriter(LoggerWriter):
    def __init__(self, logger, level):
        super().__init__(logger, level)
        self.buffer = ''

    def write(self, message):
        if '\n' not in message:
            self.buffer += message
        else:
            parts = message.split('\n')
            if self.buffer:
                s = self.buffer + parts.pop(0)
                self.logger.log(self.level, s)
            self.buffer = parts.pop()
            for part in parts:
                self.logger.log(self.level, part)
```

----------------------------------------

TITLE: Getting Object Size in Python
DESCRIPTION: Returns the size of any Python object in bytes. Works accurately for built-in objects but may vary for third-party extensions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sys.rst#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
getsizeof(object[, default])
```

----------------------------------------

TITLE: Curses mvderwin Method Definition
DESCRIPTION: The mvderwin method moves the derived window inside its parent window without changing the screen-relative parameters. It's used to display different parts of the parent window at the same physical position on the screen.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_82

LANGUAGE: python
CODE:
```
.. method:: window.mvderwin(y, x)

   Move the window inside its parent window.  The screen-relative parameters of
   the window are not changed.  This routine is used to display different parts of
   the parent window at the same physical position on the screen.
```

----------------------------------------

TITLE: Calculating Day of Year for Python datetime timetuple
DESCRIPTION: This code snippet demonstrates how to calculate the day of the year (yday) for use in the timetuple method of the datetime class.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1
```

----------------------------------------

TITLE: Running perf with JIT Support via Environment Variable in Shell
DESCRIPTION: This snippet shows how to configure and use the perf profiler with JIT support through an environment variable. It requires a compatible version of the perf tool. Perform profiling by setting the PYTHON_PERF_JIT_SUPPORT variable. The command inputs are environment variables and a Python script, while outputs are profile data files and reports. Adjust stack dump size for accuracy.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/perf_profiling.rst#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
$ PYTHON_PERF_JIT_SUPPORT=1 perf record -F 9999 -g --call-graph dwarf -o perf.data python my_script.py
$ perf inject -i perf.data --jit --output perf.jit.data
$ perf report -g -i perf.jit.data
```

----------------------------------------

TITLE: Defining an Enum class with custom metaclass (Python)
DESCRIPTION: This code defines a simple `Enum` class named `Menu`. The text highlights that `Enum` classes have a custom metaclass (`enum.EnumMeta`). This custom metaclass defines its own `__getitem__`, which takes precedence over `__class_getitem__` when the class is subscribed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_19

LANGUAGE: Python
CODE:
```
from enum import Enum
class Menu(Enum):
    """A breakfast menu"""
    SPAM = 'spam'
    BACON = 'bacon'
```

----------------------------------------

TITLE: Initializing a Struct Object in Python
DESCRIPTION: This snippet demonstrates how to create a compiled struct object using a format string. The format string 'i' specifies a standard integer.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/struct.rst#_snippet_8

LANGUAGE: python
CODE:
```
Struct('i')
```

----------------------------------------

TITLE: Basic Doctest Example with Comments and Control Flow
DESCRIPTION: Shows a basic doctest example demonstrating comment handling, variable assignment, and control flow with indented blocks. The example includes expected output formatting.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/doctest.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> # comments are ignored
>>> x = 12
>>> x
12
>>> if x == 13:
...     print("yes")
... else:
...     print("no")
...     print("NO")
...     print("NO!!!")
...
no
NO
NO!!!
```

----------------------------------------

TITLE: Transforming AST Names with NodeTransformer (Python)
DESCRIPTION: This Python snippet demonstrates how to create a custom `NodeTransformer` subclass to modify specific node types in an Abstract Syntax Tree (AST). The example shows how to replace `ast.Name` nodes with `ast.Subscript` nodes, changing variable lookups like `foo` into dictionary lookups like `data['foo']`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_61

LANGUAGE: python
CODE:
```
class RewriteName(NodeTransformer):

    def visit_Name(self, node):
        return Subscript(
            value=Name(id='data', ctx=Load()),
            slice=Constant(value=node.id),
            ctx=node.ctx
        )
```

----------------------------------------

TITLE: Automatic String Literal Concatenation in Python
DESCRIPTION: This snippet demonstrates Python's feature of automatically concatenating adjacent string literals.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/introduction.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
>>> 'Py' 'thon'
'Python'
>>> text = ('Put several strings within parentheses '
...         'to have them joined together.')
>>> text
'Put several strings within parentheses to have them joined together.'
```

----------------------------------------

TITLE: Performing Exact Arbitrary-Precision Decimal Calculation (Python)
DESCRIPTION: Shows how to configure the `decimal` context for handling exact arbitrary-precision arithmetic with very large numbers by setting precision and exponents to their maximum values, demonstrating a successful exact calculation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_43

LANGUAGE: Python
CODE:
```
setcontext(Context(prec=MAX_PREC, Emax=MAX_EMAX, Emin=MIN_EMIN))
x = Decimal(2) ** 256
x / 128
```

----------------------------------------

TITLE: Evaluating Expressions with Python's eval Function
DESCRIPTION: The eval function processes a string or code object as a Python expression in a specified or default global and local namespace context. The function allows dynamic execution of expressions with inherent security risks if handling user input. It can handle both strings and compiled code objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> x = 1
>>> eval('x+1')
2
```

----------------------------------------

TITLE: Handling Missing Enum Values - Python
DESCRIPTION: This snippet illustrates how to implement a custom lookup for missing Enum values using the _missing_ class method, enabling case-insensitive matching.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/enum.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
>>> from enum import StrEnum
>>> class Build(StrEnum):
...     DEBUG = auto()
...     OPTIMIZED = auto()
...     @classmethod
...     def _missing_(cls, value):
...         value = value.lower()
...         for member in cls:
...             if member.value == value:
...                 return member
...         return None
...
>>> Build.DEBUG.value
'debug'
>>> Build('deBUG')
<Build.DEBUG: 'debug'>
```

----------------------------------------

TITLE: Creating SQLite Database Connection and Table
DESCRIPTION: Example of creating a SQLite database connection and table using the sqlite3 module. Shows connecting to a file-based database and executing SQL to create a table schema.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_39

LANGUAGE: python
CODE:
```
conn = sqlite3.connect('/tmp/example')

c = conn.cursor()

# Create table
c.execute('''create table stocks
(date text, trans text, symbol text,
 qty real, price real)''')

# Insert a row of data
c.execute("""insert into stocks
         values ('2006-01-05','BUY','RHAT',100,35.14)""")
```

----------------------------------------

TITLE: Statistical Bootstrapping Example with Python's Random Module
DESCRIPTION: Demonstrates statistical bootstrapping using resampling with replacement to estimate a confidence interval for the mean of a sample data set.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/random.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
# https://www.thoughtco.com/example-of-bootstrapping-3126155
from statistics import fmean as mean
from random import choices

data = [41, 50, 29, 37, 81, 30, 73, 63, 20, 35, 68, 22, 60, 31, 95]
means = sorted(mean(choices(data, k=len(data))) for i in range(100))
```

----------------------------------------

TITLE: Parsing Invalid HTML Structure
DESCRIPTION: Illustrates the parser's ability to handle non-standard HTML with unquoted attributes and improperly nested tags
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/html.parser.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
parser.feed('<p><a class=link href=#main>tag soup</p ></a>')
```

----------------------------------------

TITLE: Creating Formatted Bytes Objects in C
DESCRIPTION: Functions to create Python bytes objects using printf-style formatting. These functions calculate the required size and format the values into a new bytes object. They support various format specifiers for different C types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/bytes.rst#2025-04-23_snippet_2

LANGUAGE: c
CODE:
```
PyObject* PyBytes_FromFormat(const char *format, ...)
```

LANGUAGE: c
CODE:
```
PyObject* PyBytes_FromFormatV(const char *format, va_list vargs)
```

----------------------------------------

TITLE: Generating prime numbers with sieve function in Python
DESCRIPTION: Demonstrates the sieve function which implements the Sieve of Eratosthenes algorithm to generate prime numbers up to a given limit. It's verified against known prime counts and known non-prime Carmichael numbers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_70

LANGUAGE: python
CODE:
```
>>> list(sieve(30))
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
>>> small_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
>>> all(list(sieve(n)) == [p for p in small_primes if p < n] for n in range(101))
True
>>> len(list(sieve(100)))
25
>>> len(list(sieve(1_000)))
168
>>> len(list(sieve(10_000)))
1229
>>> len(list(sieve(100_000)))
9592
>>> len(list(sieve(1_000_000)))
78498
>>> carmichael = {561, 1105, 1729, 2465, 2821, 6601, 8911}  # https://oeis.org/A002997
>>> set(sieve(10_000)).isdisjoint(carmichael)
True
```

----------------------------------------

TITLE: Enabling DeprecationWarnings in __main__
DESCRIPTION: Adds a default warning filter to show deprecation warnings in single-file scripts and at the interactive prompt.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.7.0a4.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"default::DeprecationWarning:__main__"
```

----------------------------------------

TITLE: Updating Collections ABC Usage
DESCRIPTION: ByteString from collections.abc is being deprecated in favor of using Sequence, Buffer, or explicit type unions for typing purposes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/deprecations/pending-removal-in-3.14.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
# Instead of collections.abc.ByteString
from collections.abc import Sequence, Buffer
# For typing
from typing import Union
bytes_type = Union[bytes, bytearray]  # or use bytes | bytearray in Python 3.10+
```

----------------------------------------

TITLE: Custom Formatter Configuration Dictionary
DESCRIPTION: Python dictionary showing custom formatter configuration with factory callable and parameters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.config.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
{
  '()' : 'my.package.customFormatterFactory',
  'bar' : 'baz',
  'spam' : 99.9,
  'answer' : 42
}
```

----------------------------------------

TITLE: Calculating Powerset of a List with Powerset Function in Python
DESCRIPTION: Shows the process of creating a powerset from a given list using the powerset function. Validates each subset generated with the known properties of powersets.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_82

LANGUAGE: Python
CODE:
```
>>> list(powerset([1,2,3]))
[(), (1,), (2,), (3,), (1, 2), (1, 3), (2, 3), (1, 2, 3)]
>>> all(len(list(powerset(range(n)))) == 2**n for n in range(18))
True
>>> list(powerset('abcde')) == sorted(sorted(set(powerset('abcde'))), key=len)
True
```

----------------------------------------

TITLE: Context Variable Reset Example in Python
DESCRIPTION: Demonstrates how to set and reset a context variable using tokens.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/contextvars.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
var = ContextVar('var')

token = var.set('new value')
# code that uses 'var'; var.get() returns 'new value'.
var.reset(token)
```

----------------------------------------

TITLE: Demonstrating Immutability with __slots__ and Properties
DESCRIPTION: Shows the AttributeError raised when trying to modify a read-only property or add a new attribute to an object with __slots__. This enforces immutability.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
>>> mark = Immutable('Botany', 'Mark Watney')
>>> mark.dept
'Botany'
>>> mark.dept = 'Space Pirate'
Traceback (most recent call last):
    ...
AttributeError: property 'dept' of 'Immutable' object has no setter
>>> mark.location = 'Mars'
Traceback (most recent call last):
    ...
AttributeError: 'Immutable' object has no attribute 'location'
```

----------------------------------------

TITLE: Using the Last Printed Expression in Python Interactive Mode
DESCRIPTION: This snippet demonstrates how to use the _ variable, which stores the last printed expression in Python's interactive mode.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/introduction.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
>>> tax = 12.5 / 100
>>> price = 100.50
>>> price * tax
12.5625
>>> price + _
113.0625
>>> round(_, 2)
113.06
```

----------------------------------------

TITLE: Validating Keyword Argument Keys: PyArg_ValidateKeywordArguments C API
DESCRIPTION: Ensures that all keys within the keyword arguments dictionary (a PyObject*) are valid string objects. This check is automatically performed by PyArg_ParseTupleAndKeywords, so this function is typically only needed if you handle keyword arguments manually.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/arg.rst#_snippet_21

LANGUAGE: C
CODE:
```
int PyArg_ValidateKeywordArguments(PyObject *)
```

----------------------------------------

TITLE: Improved hasattr Exception Handling in Python
DESCRIPTION: Demonstrates how hasattr now only catches AttributeError exceptions instead of masking all exceptions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
>>> class A:
...     @property
...     def f(self):
...         return 1 // 0
...
>>> a = A()
>>> hasattr(a, 'f')
Traceback (most recent call last):
  ...
ZeroDivisionError: integer division or modulo by zero
```

----------------------------------------

TITLE: Launching Python webbrowser from Command Line - Bash
DESCRIPTION: This snippet shows how to use the `webbrowser` module as a command-line script. The command executes the module with a specified URL and options, causing the system's default web browser to open the URL in a new tab.
Requires a Python installation with the `webbrowser` module available.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/webbrowser.rst#_snippet_0

LANGUAGE: bash
CODE:
```
python -m webbrowser -t "https://www.python.org"
```

----------------------------------------

TITLE: Using get_origin on Annotated Type
DESCRIPTION: Clarifies that calling `typing.get_origin` on an `Annotated` type itself returns `typing.Annotated`, not the wrapped type.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_86

LANGUAGE: Python
CODE:
```
>>> get_origin(Password)
typing.Annotated
```

----------------------------------------

TITLE: Locale-Specific Currency Formatting in Python
DESCRIPTION: Formats a numerical value according to the LC_MONETARY settings, optionally including the currency symbol, grouping, and international symbols if indicated. Requires setting the locale using setlocale first.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/locale.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
.. function:: currency(val, symbol=True, grouping=False, international=False)

   Formats a number *val* according to the current :const:`LC_MONETARY` settings.

   The returned string includes the currency symbol if *symbol* is true, which is
   the default. If *grouping* is ``True`` (which is not the default), grouping is done
   with the value. If *international* is ``True`` (which is not the default), the
   international currency symbol is used.

   .. note::

     This function will not work with the 'C' locale, so you have to set a
     locale via :func:`setlocale` first.
```

----------------------------------------

TITLE: Getattr Hook Implementation - Python
DESCRIPTION: This function emulates Python's slot_tp_getattr_hook(), handling attribute lookups by directly calling __getattribute__ and falling back on __getattr__ if an AttributeError is raised.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
def getattr_hook(obj, name):
    "Emulate slot_tp_getattr_hook() in Objects/typeobject.c"
    try:
        return obj.__getattribute__(name)
    except AttributeError:
        if not hasattr(type(obj), '__getattr__'):
            raise
    return type(obj).__getattr__(obj, name)             # __getattr__
```

----------------------------------------

TITLE: Adding Multiple Decimals with Low Precision (Python)
DESCRIPTION: Further illustrates decimal addition with a limited precision context. It reinforces that intermediate calculations and inputs are treated exactly, and only the final sum is rounded according to the set precision.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_40

LANGUAGE: Python
CODE:
```
getcontext().prec = 3
Decimal('3.104') + Decimal('0.000') + Decimal('2.104')
```

----------------------------------------

TITLE: Prime Factorization in Python
DESCRIPTION: The factor function computes the prime factors of a given number. It uses the sieve function to generate prime numbers efficiently.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_58

LANGUAGE: python
CODE:
```
def factor(n):
    "Prime factors of n."
    # factor(99) → 3 3 11
    # factor(1_000_000_000_000_007) → 47 59 360620266859
    # factor(1_000_000_000_000_403) → 1000000000000403
    for prime in sieve(isqrt(n) + 1):
        while not n % prime:
            yield prime
            n //= prime
            if n == 1:
                return
    if n > 1:
        yield n
```

----------------------------------------

TITLE: Performing Basic Arithmetic in Python
DESCRIPTION: This snippet demonstrates how to use Python as a simple calculator, performing basic arithmetic operations like addition, subtraction, multiplication, and division.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/introduction.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> 2 + 2
4
>>> 50 - 5*6
20
>>> (50 - 5*6) / 4
5.0
>>> 8 / 5  # division always returns a floating-point number
1.6
```

----------------------------------------

TITLE: Checking Platform for SunOS in Python
DESCRIPTION: Demonstrates how to safely check if the current platform is SunOS using sys.platform. This idiom is recommended over checking for specific version numbers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sys.rst#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
if sys.platform.startswith('sunos'):
    # SunOS-specific code here...
```

----------------------------------------

TITLE: Verifying Correct Lambda Behavior with Default Arguments
DESCRIPTION: This snippet shows that lambdas with default arguments correctly capture the value of the loop variable at definition time, returning different results based on their position in the list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
>>> squares[2]()
4
>>> squares[4]()
16
```

----------------------------------------

TITLE: Querying Python Configuration Variables using sysconfig (Python)
DESCRIPTION: This snippet demonstrates how to use the `sysconfig` module's `get_config_var` and `get_config_vars` functions to retrieve configuration variables. `get_config_var` fetches a single variable's value, while `get_config_vars` fetches values for multiple specified variables.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sysconfig.rst#_snippet_0

LANGUAGE: python
CODE:
```
import sysconfig
>>> sysconfig.get_config_var('Py_ENABLE_SHARED')
0
>>> sysconfig.get_config_var('LIBDIR')
'/usr/local/lib'
>>> sysconfig.get_config_vars('AR', 'CXX')
['ar', 'g++']
```

----------------------------------------

TITLE: Removing File Descriptor Reader with asyncio
DESCRIPTION: This method stops monitoring a file descriptor for read availability.  It returns True if the file descriptor was previously being monitored for reads.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
.. method:: loop.remove_reader(fd)

   Stop monitoring the *fd* file descriptor for read availability. Returns
   ``True`` if *fd* was previously being monitored for reads.

```

----------------------------------------

TITLE: Command-Line Interface for Compiling - Python
DESCRIPTION: The module can be invoked directly from the command line to compile a list of specified source files into bytecode format, with support for quiet mode to suppress error messages.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/py_compile.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
python -m py_compile

<file> ... <fileN>
    -  Positional arguments are files to compile.  If ``-`` is the only
    parameter, the list of files is taken from standard input.

-q, --quiet
    Suppress errors output.
```

----------------------------------------

TITLE: Implementing Custom Open Function Using Python Builtins
DESCRIPTION: Demonstrates how to create a custom open function that wraps Python's built-in open function while maintaining access to the original. The example shows a wrapper that converts file output to uppercase.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/builtins.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import builtins

def open(path):
    f = builtins.open(path, 'r')
    return UpperCaser(f)

class UpperCaser:
    '''Wrapper around a file that converts output to uppercase.'''

    def __init__(self, f):
        self._f = f

    def read(self, count=-1):
        return self._f.read(count).upper()

    # ...
```

----------------------------------------

TITLE: Multiprocessing Pool Example
DESCRIPTION: Illustrates using a Pool to distribute factorial calculations across multiple worker processes. The Pool creates a fixed number of worker processes, and the map method distributes the requests to the workers. The results are then printed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
from multiprocessing import Pool


def factorial(N, dictionary):
    "Compute a factorial."
    ...
p = Pool(5)
result = p.map(factorial, range(1, 1000, 10))
for v in result:
    print v
```

----------------------------------------

TITLE: Creating Custom Manager Class in Python
DESCRIPTION: Example showing how to create a custom manager by subclassing BaseManager and registering new types. Demonstrates creating a MathsClass with add and multiply operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_32

LANGUAGE: python
CODE:
```
from multiprocessing.managers import BaseManager

class MathsClass:
    def add(self, x, y):
        return x + y
    def mul(self, x, y):
        return x * y

class MyManager(BaseManager):
    pass

MyManager.register('Maths', MathsClass)

if __name__ == '__main__':
    with MyManager() as manager:
        maths = manager.Maths()
        print(maths.add(4, 3))         # prints 7
        print(maths.mul(7, 8))         # prints 56
```

----------------------------------------

TITLE: Defining Member Descriptor for Slot Management in Python
DESCRIPTION: This snippet defines the Member class, which emulates member management in a C-like structure within Python. It provides methods to get, set, and delete attributes and ensures proper attribute handling through emulation of C functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_32

LANGUAGE: Python
CODE:
```
null = object()

class Member:

    def __init__(self, name, clsname, offset):
        'Emulate PyMemberDef in Include/structmember.h'
        # Also see descr_new() in Objects/descrobject.c
        self.name = name
        self.clsname = clsname
        self.offset = offset

    def __get__(self, obj, objtype=None):
        'Emulate member_get() in Objects/descrobject.c'
        # Also see PyMember_GetOne() in Python/structmember.c
        if obj is None:
            return self
        value = obj._slotvalues[self.offset]
        if value is null:
            raise AttributeError(self.name)
        return value

    def __set__(self, obj, value):
        'Emulate member_set() in Objects/descrobject.c'
        obj._slotvalues[self.offset] = value

    def __delete__(self, obj):
        'Emulate member_delete() in Objects/descrobject.c'
        value = obj._slotvalues[self.offset]
        if value is null:
            raise AttributeError(self.name)
        obj._slotvalues[self.offset] = null

    def __repr__(self):
        'Emulate member_repr() in Objects/descrobject.c'
        return f'<Member {self.name!r} of {self.clsname!r}>'
```

----------------------------------------

TITLE: Accessing Package Resources using pkgutil
DESCRIPTION: This demonstrates how to retrieve a resource from a package using `pkgutil.get_data`. The function takes the package name and the resource path as input, returning the resource's content as a binary string. This is a wrapper for the loader's get_data API. The resource argument should be in the form of a relative filename, using `/` as the path separator.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pkgutil.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
"""d = os.path.dirname(sys.modules[package].__file__)
data = open(os.path.join(d, resource), 'rb').read()"""
```

----------------------------------------

TITLE: Decoding Data with Python codecs.decode
DESCRIPTION: Decodes an object using the codec registered for the specified encoding. The 'errors' parameter controls error handling, defaulting to 'strict'.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/codecs.rst#_snippet_1

LANGUAGE: Python
CODE:
```
import codecs

decoded_string = codecs.decode(b"hello world", "utf-8")
# decoded_string is 'hello world'

# Example with errors
try:
    codecs.decode(b"\xff", "utf-8", errors="strict")
except ValueError as e:
    print(f"Decoding error: {e}")
```

----------------------------------------

TITLE: Dictionary Mutation in Python Function
DESCRIPTION: Demonstrates dictionary modification within a function to update multiple values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
def func3(args):
    args['a'] = 'new-value'     # args is a mutable dictionary
    args['b'] = args['b'] + 1   # change it in-place
```

----------------------------------------

TITLE: Creating Template String in Python
DESCRIPTION: Demonstrates the basic usage of the new template string literal (t-string) introduced in PEP 750. It shows how to define a t-string using the 't' prefix and how it evaluates to a new 'string.templatelib.Template' type, allowing for later processing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_0

LANGUAGE: python
CODE:
```
from string.templatelib import Template

name = "World"
template: Template = t"Hello {name}"
```

----------------------------------------

TITLE: Retrieving Resource Usage Example in Python
DESCRIPTION: A simple example demonstrating how to use the getrusage() function to measure resource consumption before and after different types of tasks - one non-CPU-bound (sleep) and one CPU-bound (loop).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/resource.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from resource import *
import time

# a non CPU-bound task
time.sleep(3)
print(getrusage(RUSAGE_SELF))

# a CPU-bound task
for i in range(10 ** 8):
   _ = 1 + 1
print(getrusage(RUSAGE_SELF))
```

----------------------------------------

TITLE: Using show_code function in Python's dis module
DESCRIPTION: Demonstrates the new show_code function for displaying detailed code object information for a given function or method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_65

LANGUAGE: python
CODE:
```
>>> import dis, random
>>> dis.show_code(random.choice)
Name:              choice
Filename:          /Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/random.py
Argument count:    2
Kw-only arguments: 0
Number of locals:  3
Stack size:        11
Flags:             OPTIMIZED, NEWLOCALS, NOFREE
Constants:
   0: 'Choose a random element from a non-empty sequence.'
   1: 'Cannot choose from an empty sequence'
Names:
   0: _randbelow
   1: len
   2: ValueError
   3: IndexError
Variable names:
   0: self
   1: seq
   2: i
```

----------------------------------------

TITLE: Creating Special Float Values (NaN and Infinity) in Python
DESCRIPTION: This snippet demonstrates how to create NaN (Not a Number) and infinity values in Python using the float() function.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/mathdata/ieee754.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
INF = float('inf')
NINF = float('-inf')
NAN = float('nan')
```

----------------------------------------

TITLE: Naive Bayesian Classifier for Gender Prediction Using Normal Distribution in Python
DESCRIPTION: This snippet demonstrates the use of a Naive Bayesian classifier to predict gender based on measurements of normally distributed features. It summarizes training data and computes posterior probabilities to classify an individual based on their feature measurements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_27

LANGUAGE: Python
CODE:
```
>>> height_male = NormalDist.from_samples([6, 5.92, 5.58, 5.92])
>>> height_female = NormalDist.from_samples([5, 5.5, 5.42, 5.75])
>>> weight_male = NormalDist.from_samples([180, 190, 170, 165])
>>> weight_female = NormalDist.from_samples([100, 150, 130, 150])
>>> foot_size_male = NormalDist.from_samples([12, 11, 12, 10])
>>> foot_size_female = NormalDist.from_samples([6, 8, 7, 9])

>>> ht = 6.0        # height
>>> wt = 130        # weight
>>> fs = 8          # foot size

>>> prior_male = 0.5
>>> prior_female = 0.5
>>> posterior_male = (prior_male * height_male.pdf(ht) *
...                   weight_male.pdf(wt) * foot_size_male.pdf(fs))

>>> posterior_female = (prior_female * height_female.pdf(ht) *
...                     weight_female.pdf(wt) * foot_size_female.pdf(fs))

>>> 'male' if posterior_male > posterior_female else 'female'
'female'
```

----------------------------------------

TITLE: Setting Breakpoints in Python Debugger
DESCRIPTION: Method to set a breakpoint at a specific line in a file. Parameters include filename, line number, optional temporary flag, condition, and function name. Returns an error message if the line doesn't exist.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/bdb.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
set_break(filename, lineno, temporary=False, cond=None, funcname=None)
```

----------------------------------------

TITLE: Using ConfigParser with Interpolation in Python
DESCRIPTION: Shows how to use ConfigParser with interpolation, including raw and vars arguments for customized interpolation behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
import configparser

cfg = configparser.ConfigParser()
cfg.read('example.cfg')

# Set the optional *raw* argument of get() to True if you wish to disable
# interpolation in a single get operation.
print(cfg.get('Section1', 'foo', raw=False))  # -> "Python is fun!"
print(cfg.get('Section1', 'foo', raw=True))   # -> "%(bar)s is %(baz)s!"

# The optional *vars* argument is a dict with members that will take
# precedence in interpolation.
print(cfg.get('Section1', 'foo', vars={'bar': 'Documentation',
                                      'baz': 'evil'}))

# The optional *fallback* argument can be used to provide a fallback value
print(cfg.get('Section1', 'foo'))
      # -> "Python is fun!"

print(cfg.get('Section1', 'foo', fallback='Monty is not.'))
      # -> "Python is fun!"

print(cfg.get('Section1', 'monster', fallback='No such things as monsters.'))
      # -> "No such things as monsters."

# A bare print(cfg.get('Section1', 'monster')) would raise NoOptionError
# but we can also use:

print(cfg.get('Section1', 'monster', fallback=None))
      # -> None
```

----------------------------------------

TITLE: Walking stack frames with walk_stack
DESCRIPTION: Iterates through stack frames starting from a given frame, yielding each frame and line number. Useful for custom stack inspection.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
walk_stack(f)
```

----------------------------------------

TITLE: Demonstrating IP Address Validation Errors
DESCRIPTION: Examples showing the difference in error messages between using the factory function ip_address() and direct IPv4Address constructor for invalid IP addresses.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/ipaddress.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> ipaddress.ip_address("192.168.0.256")
Traceback (most recent call last):
  ...
ValueError: '192.168.0.256' does not appear to be an IPv4 or IPv6 address
>>> ipaddress.IPv4Address("192.168.0.256")
Traceback (most recent call last):
  ...
ipaddress.AddressValueError: Octet 256 (> 255) not permitted in '192.168.0.256'
```

----------------------------------------

TITLE: Using itruediv for In-place Division in Python
DESCRIPTION: The itruediv function performs in-place true division, modifying the first operand. It is equivalent to using the /= operator in Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/operator.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
a = itruediv(a, b)
```

LANGUAGE: python
CODE:
```
a /= b
```

----------------------------------------

TITLE: WeakValueDictionary Example
DESCRIPTION: Demonstrates using WeakValueDictionary to store object references by ID without preventing garbage collection.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/weakref.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
import weakref

_id2obj_dict = weakref.WeakValueDictionary()

def remember(obj):
    oid = id(obj)
    _id2obj_dict[oid] = obj
    return oid

def id2obj(oid):
    return _id2obj_dict[oid]
```

----------------------------------------

TITLE: BaseHandler HTTP Error Handler Method Pattern
DESCRIPTION: Method pattern for handling specific HTTP error codes. Subclasses should implement this pattern to handle specific HTTP error codes, with the same arguments and return values as http_error_default.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
def http_error_<nnn>(req, fp, code, msg, hdrs):
    """Method pattern for handling specific HTTP error codes.
    Should be implemented by subclasses."""
```

----------------------------------------

TITLE: Using memoryview with context management
DESCRIPTION: Example showing how to use a memoryview with the 'with' statement to automatically release resources when exiting the context.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_79

LANGUAGE: python
CODE:
```
with memoryview(b'abc') as m:
    m[0]

97
m[0]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: operation forbidden on released memoryview object
```

----------------------------------------

TITLE: Working with Binary Data using struct in Python
DESCRIPTION: Demonstrates how to use the struct module to work with binary data record layouts. This example shows how to read header information from a ZIP file without using the zipfile module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib2.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
import struct

with open('myfile.zip', 'rb') as f:
    data = f.read()

start = 0
for i in range(3):                      # show the first 3 file headers
    start += 14
    fields = struct.unpack('<IIIHH', data[start:start+16])
    crc32, comp_size, uncomp_size, filenamesize, extra_size = fields

    start += 16
    filename = data[start:start+filenamesize]
    start += filenamesize
    extra = data[start:start+extra_size]
    print(filename, hex(crc32), comp_size, uncomp_size)

    start += extra_size + comp_size     # skip to the next header
```

----------------------------------------

TITLE: Python Memoization Pattern
DESCRIPTION: Demonstrates how to implement memoization using a mutable default parameter to cache expensive function results.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
def expensive(arg1, arg2, *, _cache={}):
    if (arg1, arg2) in _cache:
        return _cache[(arg1, arg2)]

    # Calculate the value
    result = ... expensive computation ...
    _cache[(arg1, arg2)] = result           # Store result in the cache
    return result
```

----------------------------------------

TITLE: ParseResultBytes Class Definition
DESCRIPTION: ParseResultBytes is a concrete class for urlparse results containing bytes data. It provides a decode method that returns a ParseResult instance. This class is used when operating on bytes or bytearray objects and represents the result of parsing a URL.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.parse.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
.. class:: ParseResultBytes(scheme, netloc, path, params, query, fragment)

   Concrete class for :func:`urlparse` results containing :class:`bytes`
   data. The :meth:`decode` method returns a :class:`ParseResult`
   instance.

   .. versionadded:: 3.2

```

----------------------------------------

TITLE: Defining Module Structure - Python C API (C)
DESCRIPTION: This C snippet defines the PyModuleDef structure for an extension module named 'spam'. This structure holds essential metadata required by the Python interpreter when loading the module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/intro.rst#_snippet_1

LANGUAGE: c
CODE:
```
static struct PyModuleDef spam_module = {
    PyModuleDef_HEAD_INIT,
    .m_name = "spam",
    ...
};
```

----------------------------------------

TITLE: Finding Name in Class MRO - Python
DESCRIPTION: This snippet defines a function to find a name in a class's method resolution order (MRO) and returns the corresponding attribute or a default if the name is not found. It helps emulate Python's attribute access mechanics within class hierarchies.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
for base in cls.__mro__:
    if name in vars(base):
        return vars(base)[name]
return default
```

----------------------------------------

TITLE: FTP_TLS Class Usage Example
DESCRIPTION: This code demonstrates how to create an FTP_TLS object, log in to an FTP server, enable secure data protection, and list files.  It showcases the basic steps for establishing a secure FTP connection and performing common operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ftplib.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```

      >>> ftps = FTP_TLS('ftp.pureftpd.org')
      >>> ftps.login()
      '230 Anonymous user logged in'
      >>> ftps.prot_p()
      '200 Data protection level set to "private"'
      >>> ftps.nlst()
      ['6jack', 'OpenBSD', 'antilink', 'blogbench', 'bsdcam', 'clockspeed', 'djbdns-jedi', 'docs', 'eaccelerator-jedi', 'favicon.ico', 'francotone', 'fugu', 'ignore', 'libpuzzle', 'metalog', 'minidentd', 'misc', 'mysql-udf-global-user-variables', 'php-jenkins-hash', 'php-skein-hash', 'php-webdav', 'phpaudit', 'phpbench', 'pincaster', 'ping', 'posto', 'pub', 'public', 'public_keys', 'pure-ftpd', 'qscan', 'qtc', 'sharedance', 'skycache', 'sound', 'tmp', 'ucarp']

```

----------------------------------------

TITLE: Implementing PEP 613 TypeAlias in Python
DESCRIPTION: Implements PEP 613, introducing the typing.TypeAlias annotation for type aliases.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a2.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
typing.TypeAlias
```

----------------------------------------

TITLE: Implementing XML-RPC Server and Client in Python
DESCRIPTION: This example demonstrates how to create a simple XML-RPC server that checks if a number is even, and a corresponding client that calls the server's method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xmlrpc.client.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from xmlrpc.server import SimpleXMLRPCServer

def is_even(n):
    return n % 2 == 0

server = SimpleXMLRPCServer(("localhost", 8000))
print("Listening on port 8000...")
server.register_function(is_even, "is_even")
server.serve_forever()
```

LANGUAGE: python
CODE:
```
import xmlrpc.client

with xmlrpc.client.ServerProxy("http://localhost:8000/") as proxy:
    print("3 is even: %s" % str(proxy.is_even(3)))
    print("100 is even: %s" % str(proxy.is_even(100)))
```

----------------------------------------

TITLE: Comparing Special Method Calls on Instance vs. Type Object
DESCRIPTION: This example shows that calling a special method directly on an instance works as expected, but attempting to call it unbound on the type object using standard lookup (`int.__hash__()`) results in a `TypeError`. This highlights why standard lookup isn't used for implicit special method invocation on types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_34

LANGUAGE: python
CODE:
```
1 .__hash__() == hash(1)
int.__hash__() == hash(int)
```

----------------------------------------

TITLE: Implicit Any Function Signature (Python)
DESCRIPTION: Shows the equivalent type-hinted signature that a static type checker infers for a function without explicit type hints, using `Any` for both parameters and return type.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_44

LANGUAGE: Python
CODE:
```
def legacy_parser(text: Any) -> Any:
    ...
    return data
```

----------------------------------------

TITLE: Implementing Basic Constant Descriptor in Python
DESCRIPTION: Simple descriptor class that always returns the constant value 10 when accessed. Demonstrates basic descriptor usage with __get__ method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
class Ten:
    def __get__(self, obj, objtype=None):
        return 10

class A:
    x = 5                       # Regular class attribute
    y = Ten()                   # Descriptor instance
```

----------------------------------------

TITLE: Implementing Password Input without Echo using termios in Python
DESCRIPTION: This function prompts for a password with echoing turned off. It uses tcgetattr to get current terminal attributes, modifies them to disable echo, sets the new attributes, prompts for input, and then restores the original attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/termios.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
def getpass(prompt="Password: "):
    import termios, sys
    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    new = termios.tcgetattr(fd)
    new[3] = new[3] & ~termios.ECHO          # lflags
    try:
        termios.tcsetattr(fd, termios.TCSADRAIN, new)
        passwd = input(prompt)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)
    return passwd
```

----------------------------------------

TITLE: Warning Categories Table Structure
DESCRIPTION: Table structure defining the built-in warning categories in Python, showing the class hierarchy and purpose of each warning type
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/warnings.rst#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
Warning                    - Base class of all warning categories (subclass of Exception)
UserWarning               - Default category for warn()
DeprecationWarning        - For deprecated features (developer-focused)
SyntaxWarning             - For dubious syntactic features
RuntimeWarning            - For dubious runtime features
FutureWarning             - For deprecated features (end-user focused)
PendingDeprecationWarning - For features to be deprecated in future
ImportWarning             - For import-related warnings
UnicodeWarning            - For Unicode-related warnings
BytesWarning              - For bytes/bytearray-related warnings
ResourceWarning           - For resource usage warnings
```

----------------------------------------

TITLE: Printing Callees and Adding Statistics
DESCRIPTION: These are example calls to demonstrate more pstats functionality. p.print_callees() prints the functions called by each of the listed functions. p.add('restats') adds the statistics from 'restats' file to the current statistics.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/profile.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
p.print_callees()
p.add('restats')
```

----------------------------------------

TITLE: XML Parser Handler Implementation Example
DESCRIPTION: Shows implementation of three basic XML parsing handlers: start element, end element, and character data handlers. Includes complete example with parser creation and execution.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pyexpat.rst#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
import xml.parsers.expat

# 3 handler functions
def start_element(name, attrs):
    print('Start element:', name, attrs)
def end_element(name):
    print('End element:', name)
def char_data(data):
    print('Character data:', repr(data))

p = xml.parsers.expat.ParserCreate()

p.StartElementHandler = start_element
p.EndElementHandler = end_element
p.CharacterDataHandler = char_data

p.Parse("""<?xml version=\"1.0\"?>
<parent id=\"top\"><child1 name=\"paul\">Text goes here</child1>
<child2 name=\"fred\">More text</child2>
</parent>""", 1)
```

----------------------------------------

TITLE: Using Nanosecond Resolution Time Functions in Python 3.7
DESCRIPTION: PEP 564 adds six new nanosecond variants of existing timer functions to the time module. These functions return the number of nanoseconds as an integer value, providing better precision than the floating-point versions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
import time

# New nanosecond resolution functions
time.clock_gettime_ns()
time.clock_settime_ns()
time.monotonic_ns()
time.perf_counter_ns()
time.process_time_ns()
time.time_ns()
```

----------------------------------------

TITLE: Using turtle.setx in Python
DESCRIPTION: Illustrates how to use `turtle.setx` to change only the x-coordinate of the turtle's position while keeping the y-coordinate unchanged. Verifies the position before and after the change using `turtle.position()`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_25

LANGUAGE: Python
CODE:
```
>>> turtle.position()
(0.00,240.00)
>>> turtle.setx(10)
>>> turtle.position()
(10.00,240.00)
```

----------------------------------------

TITLE: Listing Metacharacters in Python Regular Expressions
DESCRIPTION: This snippet shows the complete list of metacharacters used in Python regular expressions. These special characters have specific meanings and behaviors in regex patterns.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_0

LANGUAGE: none
CODE:
```
. ^ $ * + ? { } [ ] \ | ( )
```

----------------------------------------

TITLE: Registering a File Descriptor with Epoll Object in Python
DESCRIPTION: Method to register a file descriptor with an epoll object. An optional event mask can be specified to determine which events to monitor.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/select.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
epoll.register(fd[, eventmask])
```

----------------------------------------

TITLE: Invalid Leap Year Parsing Example in Python datetime.strptime
DESCRIPTION: Example showing problematic datetime parsing that will fail due to 1900 not being a leap year. This is included as a footnote to demonstrate what not to do.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_32

LANGUAGE: python
CODE:
```
datetime.strptime('Feb 29', '%b %d')
```

----------------------------------------

TITLE: Setting Interval Timer in Python
DESCRIPTION: The setitimer function sets an interval timer to fire after a specified number of seconds and optionally repeat at an interval. It's only available on Unix systems and returns the old timer values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/signal.rst#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
def setitimer(which, seconds, interval=0.0):
    """Sets given interval timer (one of signal.ITIMER_REAL,
    signal.ITIMER_VIRTUAL or signal.ITIMER_PROF) specified
    by which to fire after seconds (float is accepted, different from
    alarm) and after that every interval seconds (if interval
    is non-zero)."""
```

----------------------------------------

TITLE: Process Status Check Functions
DESCRIPTION: A collection of functions for checking process status codes returned by system(), wait() or waitpid(). These functions help determine the disposition of a process including exit status, signal status, and core dump status.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_81

LANGUAGE: Python
CODE:
```
def WCOREDUMP(status): return bool
def WIFCONTINUED(status): return bool
def WIFSTOPPED(status): return bool
def WIFSIGNALED(status): return bool
def WIFEXITED(status): return bool
def WEXITSTATUS(status): return int
def WSTOPSIG(status): return int
def WTERMSIG(status): return int
```

----------------------------------------

TITLE: Increment Reference Count Python C API C
DESCRIPTION: Increments the strong reference count of a Python object, indicating it is in use. This prevents the object from being destroyed. This function has no effect on immortal objects. It is typically used to convert a borrowed reference to a strong one. Use Py_DECREF when done. The object must not be NULL; use Py_XINCREF if it might be NULL.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/refcounting.rst#_snippet_2

LANGUAGE: C
CODE:
```
void Py_INCREF(PyObject *o)
```

----------------------------------------

TITLE: Checking if a Type is a Protocol with is_protocol in Python
DESCRIPTION: Demonstrates the `is_protocol` function, which checks if a given type object is a `Protocol` class. It returns `True` for a defined protocol and `False` for other types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_180

LANGUAGE: python
CODE:
```
class P(Protocol):
    def a(self) -> str: ...
    b: int

is_protocol(P)    # => True
is_protocol(int)  # => False
```

----------------------------------------

TITLE: Demonstrating ZoneInfo String Representation in Python
DESCRIPTION: This snippet shows how ZoneInfo objects are represented as strings, using both direct string conversion and formatted string interpolation with a datetime object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/zoneinfo.rst#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> zone = ZoneInfo("Pacific/Kwajalein")
>>> str(zone)
'Pacific/Kwajalein'

>>> dt = datetime(2020, 4, 1, 3, 15, tzinfo=zone)
>>> f"{dt.isoformat()} [{dt.tzinfo}]"
'2020-04-01T03:15:00+12:00 [Pacific/Kwajalein]'
```

----------------------------------------

TITLE: Implementing IMAP4 in Python
DESCRIPTION: The IMAP4 class establishes a connection to an IMAP4 server and determines the protocol version. It supports optional host and port parameters, with defaults for the local host and standard IMAP4 port. The timeout parameter specifies connection timeouts, defaulting to global settings if undefined. This class supports the 'with' statement for automatic logout.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/imaplib.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
class IMAP4(host='', port=IMAP4_PORT, timeout=None):
    # IMAP4 class implementation
```

----------------------------------------

TITLE: Parsing XML Document with SAX in Python
DESCRIPTION: Parses an XML document using a SAX parser. It takes a filename or file object, a ContentHandler instance, and an optional ErrorHandler instance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.sax.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
parse(filename_or_stream, handler, error_handler=handler.ErrorHandler())
```

----------------------------------------

TITLE: Unquoting URL-encoded strings with plus sign replacement in Python
DESCRIPTION: The unquote_plus function is similar to unquote, but also replaces plus signs with spaces. This is useful for unquoting HTML form values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.parse.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
unquote_plus('/El+Ni%C3%B1o/')
```

----------------------------------------

TITLE: Accessing Match Object Groups in Python 3.6
DESCRIPTION: Match object groups can now be accessed using __getitem__, which is equivalent to the group() method. This allows using square bracket notation to access named groups.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.6.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
mo['name']  # Equivalent to mo.group('name')
```

----------------------------------------

TITLE: Manipulating XML Element Attributes in Python DOM
DESCRIPTION: Demonstrates methods for working with XML element attributes, including checking for existence, getting values, removing attributes, and setting new values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.dom.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
element.hasAttribute(name)
element.hasAttributeNS(namespaceURI, localName)
element.getAttribute(name)
element.getAttributeNode(attrname)
element.getAttributeNS(namespaceURI, localName)
element.getAttributeNodeNS(namespaceURI, localName)
element.removeAttribute(name)
element.removeAttributeNode(oldAttr)
element.removeAttributeNS(namespaceURI, localName)
element.setAttribute(name, value)
element.setAttributeNode(newAttr)
element.setAttributeNodeNS(newAttr)
element.setAttributeNS(namespaceURI, qname, value)
```

----------------------------------------

TITLE: Using new cache_from_source and source_from_cache functions in importlib.util
DESCRIPTION: New importlib.util functions cache_from_source and source_from_cache replace the same-named functions in the deprecated imp module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.4.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
from importlib.util import cache_from_source, source_from_cache
```

----------------------------------------

TITLE: Simulating Multiserver Queue Arrival Times and Service Deliveries in Python
DESCRIPTION: This snippet simulates arrival times and service deliveries for a multiserver queue using the heapq, random, and statistics modules. It calculates mean wait time, max wait time, and wait time quartiles.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/random.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
from heapq import heapify, heapreplace
from random import expovariate, gauss
from statistics import mean, quantiles

average_arrival_interval = 5.6
average_service_time = 15.0
stdev_service_time = 3.5
num_servers = 3

waits = []
arrival_time = 0.0
servers = [0.0] * num_servers  # time when each server becomes available
heapify(servers)
for i in range(1_000_000):
    arrival_time += expovariate(1.0 / average_arrival_interval)
    next_server_available = servers[0]
    wait = max(0.0, next_server_available - arrival_time)
    waits.append(wait)
    service_duration = max(0.0, gauss(average_service_time, stdev_service_time))
    service_completed = arrival_time + wait + service_duration
    heapreplace(servers, service_completed)

print(f'Mean wait: {mean(waits):.1f}   Max wait: {max(waits):.1f}')
print('Quartiles:', [round(q, 1) for q in quantiles(waits)])
```

----------------------------------------

TITLE: String Template Substitution Examples
DESCRIPTION: Shows the new string.Template class for simpler string substitutions, providing an alternative to % operator formatting.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> '%(page)i: %(title)s' % {'page':2, 'title': 'The Best of Times'}
'2: The Best of Times'

>>> import string
>>> t = string.Template('$page: $title')
>>> t.substitute({'page':2, 'title': 'The Best of Times'})
'2: The Best of Times'

>>> t = string.Template('$page: $title')
>>> t.safe_substitute({'page':3})
'3: $title'
```

----------------------------------------

TITLE: Email Pattern Matching Example
DESCRIPTION: Demonstrates using start() and end() methods to manipulate matched substrings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
>>> email = "tony@tiremove_thisger.net"
>>> m = re.search("remove_this", email)
>>> email[:m.start()] + email[m.end():]
'tony@tiger.net'
```

----------------------------------------

TITLE: Demonstrating AttributeError Suggestions in Python
DESCRIPTION: This snippet shows how Python now offers suggestions for similar attribute names when an AttributeError occurs. It uses the collections module as an example.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> collections.namedtoplo
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'collections' has no attribute 'namedtoplo'. Did you mean: namedtuple?
```

----------------------------------------

TITLE: Checking Symbolic Links with os.path
DESCRIPTION: The islink function determines if a path represents an existing symbolic link, providing False where unsupported. Since version 3.6, it accepts path-like objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
def islink(path):
    return os.path.islink(path)
```

----------------------------------------

TITLE: HTTPPasswordMgr Authentication Methods
DESCRIPTION: Methods for managing HTTP authentication credentials, allowing addition of username/password pairs for specific realms and URIs, and retrieval of credentials when authentication is required.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_36

LANGUAGE: python
CODE:
```
def add_password(realm, uri, user, passwd):
    """Add authentication credentials for a realm and URI(s)."""

def find_user_password(realm, authuri):
    """Get user/password for given realm and URI.
    Returns (None, None) if no matching credentials."""
```

----------------------------------------

TITLE: Evaluating Polynomial at Specific Value in Python
DESCRIPTION: The polynomial_eval function evaluates a polynomial at a specific value. It uses a method with better numeric stability than Horner's method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_55

LANGUAGE: python
CODE:
```
def polynomial_eval(coefficients, x):
    """Evaluate a polynomial at a specific value.

    Computes with better numeric stability than Horner's method.
    """
    # Evaluate x³ -4x² -17x + 60 at x = 5
    # polynomial_eval([1, -4, -17, 60], x=5) → 0
    n = len(coefficients)
    if not n:
        return type(x)(0)
    powers = map(pow, repeat(x), reversed(range(n)))
    return sumprod(coefficients, powers)
```

----------------------------------------

TITLE: Creating Executable Archive Using Command Line
DESCRIPTION: Example showing how to create and run an executable archive from a directory using the zipapp command-line interface
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/zipapp.rst#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
$ python -m zipapp myapp -m "myapp:main"
$ python myapp.pyz
<output from myapp>
```

----------------------------------------

TITLE: Logging Warning Messages with Format Strings in Python
DESCRIPTION: This snippet demonstrates how to log a warning message using formatting. The logging message incorporates variable data into the format string, which is important for creating dynamic logs. This approach utilizes the old, %-style string formatting, maintained for backward compatibility.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
import logging
logging.warning('%s before you %s', 'Look', 'leap!')
```

----------------------------------------

TITLE: Deprecated Options and Protocols in ssl (Python)
DESCRIPTION: Various options and protocols within the ssl module are deprecated. This includes creating SSLContext without a protocol argument, the set_npn_protocols and selected_npn_protocol methods (favoring ALPN), specific OP_NO_SSL/TLS options, older PROTOCOL_SSLv3/TLS versions, and corresponding TLSVersion enum members.
SOURCE: https://github.com/python/cpython/blob/main/Doc/deprecations/pending-removal-in-future.rst#_snippet_13

LANGUAGE: Python
CODE:
```
ssl.SSLContext
```

LANGUAGE: Python
CODE:
```
ssl.SSLContext.set_npn_protocols
```

LANGUAGE: Python
CODE:
```
ssl.SSLContext.selected_npn_protocol
```

LANGUAGE: Python
CODE:
```
ssl.OP_NO_SSL*
```

LANGUAGE: Python
CODE:
```
ssl.OP_NO_TLS*
```

LANGUAGE: Python
CODE:
```
ssl.PROTOCOL_SSLv3
```

LANGUAGE: Python
CODE:
```
ssl.PROTOCOL_TLS
```

LANGUAGE: Python
CODE:
```
ssl.PROTOCOL_TLSv1
```

LANGUAGE: Python
CODE:
```
ssl.PROTOCOL_TLSv1_1
```

LANGUAGE: Python
CODE:
```
ssl.PROTOCOL_TLSv1_2
```

LANGUAGE: Python
CODE:
```
ssl.TLSVersion.SSLv3
```

LANGUAGE: Python
CODE:
```
ssl.TLSVersion.TLSv1
```

LANGUAGE: Python
CODE:
```
ssl.TLSVersion.TLSv1_1
```

----------------------------------------

TITLE: Executing simple statement in Pdb (! command)
DESCRIPTION: Demonstrates executing a simple assignment statement `n=42` within the current stack frame using the `!` command in the Pdb debugger, showing the Pdb prompt before and after.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_24

LANGUAGE: none
CODE:
```
(Pdb) ! n=42
(Pdb)
```

----------------------------------------

TITLE: AST Parsing and Dumping in Python
DESCRIPTION: Example showing how to parse Python code into an Abstract Syntax Tree and dump its representation using the ast module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_45

LANGUAGE: python
CODE:
```
import ast

t = ast.parse("""
d = {}
for i in 'abcdefghijklm':
    d[i + i] = ord(i) - ord('a') + 1
print d
""")
print ast.dump(t)
```

----------------------------------------

TITLE: Custom Template Subclass for Batch File Renaming in Python
DESCRIPTION: Shows how to create a custom Template subclass for a batch file renaming utility. This example demonstrates how to use custom delimiters and apply templates to file renaming operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib2.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> import time, os.path
>>> photofiles = ['img_1074.jpg', 'img_1076.jpg', 'img_1077.jpg']
>>> class BatchRename(Template):
...     delimiter = '%'
...
>>> fmt = input('Enter rename style (%d-date %n-seqnum %f-format):  ')
Enter rename style (%d-date %n-seqnum %f-format):  Ashley_%n%f

>>> t = BatchRename(fmt)
>>> date = time.strftime('%d%b%y')
>>> for i, filename in enumerate(photofiles):
...     base, ext = os.path.splitext(filename)
...     newname = t.substitute(d=date, n=i, f=ext)
...     print('{0} --> {1}'.format(filename, newname))

img_1074.jpg --> Ashley_0.jpg
img_1076.jpg --> Ashley_1.jpg
img_1077.jpg --> Ashley_2.jpg
```

----------------------------------------

TITLE: Function Definition with Variable Arguments in Python
DESCRIPTION: Shows the syntax for defining functions that accept variable positional and keyword arguments using *args and **kw notation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.0.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
def f(*args, **kw):
    # args is a tuple of positional args,
    # kw is a dictionary of keyword args
    ...
```

----------------------------------------

TITLE: Pdb Display Command Interaction (Mutable Fix)
DESCRIPTION: Illustrates how to correctly use the `display` command with mutable objects in pdb by displaying a copy (e.g., `lst[:]`). This allows the debugger to detect changes made to the original object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_21

LANGUAGE: text
CODE:
```
> example.py(3)<module>()
-> pass
(Pdb) display lst[:]
display lst[:]: []
(Pdb) n
> example.py(4)<module>()
-> lst.append(1)
(Pdb) n
> example.py(5)<module>()
-> print(lst)
display lst[:]: [1]  [old: []]
(Pdb)
```

----------------------------------------

TITLE: Demonstrating SyntaxError Suggestion for Incorrect Import Syntax in Python
DESCRIPTION: This snippet shows the improved `SyntaxError` message in Python 3.12 that helps users correct the syntax when they mistakenly use `import x from y` instead of `from y import x`. The traceback includes the helpful suggestion.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_16

LANGUAGE: Python
CODE:
```
import a.y.z from b.y.z
```

----------------------------------------

TITLE: Accessing Nested Elements by Index in Python
DESCRIPTION: Example of how to access nested elements in an XML tree by using indexing to navigate the hierarchy.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> root[0][1].text
'2008'
```

----------------------------------------

TITLE: Demonstrating Reference Counting with sys.getrefcount (Python)
DESCRIPTION: Shows how the reference count of an object changes when new references are created (assignment) and removed (`del`). It highlights that `sys.getrefcount` itself adds a temporary reference.
SOURCE: https://github.com/python/cpython/blob/main/InternalDocs/garbage_collector.md#_snippet_0

LANGUAGE: pycon
CODE:
```
>>> x = object()
>>> sys.getrefcount(x)
2
>>> y = x
>>> sys.getrefcount(x)
3
>>> del y
>>> sys.getrefcount(x)
2
```

----------------------------------------

TITLE: Example JSON Output
DESCRIPTION: This is the expected output from the previous code snippet, showing the structured message with JSON serialization.  The output demonstrates how the key-value pairs passed to the logging.info call are formatted into a JSON string.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_37

LANGUAGE: none
CODE:
```
message 1 >>> {"fnum": 123.456, "num": 123, "bar": "baz", "foo": "bar"}
```

----------------------------------------

TITLE: Creating a New Window in Curses
DESCRIPTION: This snippet demonstrates how to create a new window using curses.newwin(), specifying its size and position on the screen.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/curses.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
begin_x = 20; begin_y = 7
height = 5; width = 40
win = curses.newwin(height, width, begin_y, begin_x)
```

----------------------------------------

TITLE: Using ixor for In-place Bitwise XOR in Python
DESCRIPTION: The ixor function (also accessible as __ixor__) performs in-place bitwise XOR, modifying the first operand. It is equivalent to using the ^= operator in Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/operator.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
a = ixor(a, b)
```

LANGUAGE: python
CODE:
```
a ^= b
```

----------------------------------------

TITLE: Decorator Stacking with singledispatch in Python
DESCRIPTION: Demonstrates how to stack multiple type registrations for a single implementation, showing that register returns the undecorated function which enables decorator stacking and independent testing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
>>> @fun.register(float)
... @fun.register(Decimal)
... def fun_num(arg, verbose=False):
...     if verbose:
...         print("Half of your number:", end=" ")
...     print(arg / 2)
...
>>> fun_num is fun
False
```

----------------------------------------

TITLE: TextIO Stream Reconfiguration
DESCRIPTION: Example showing usage of the new reconfigure() method to modify text stream settings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_15

LANGUAGE: Python
CODE:
```
TextIOWrapper.reconfigure()
```

----------------------------------------

TITLE: Demonstrating Literal Type Behavior in Python 3.10
DESCRIPTION: This code snippet demonstrates the updated behavior of the typing.Literal type in Python 3.10, including de-duplication, order-independent equality, and type-respecting comparisons. It also shows how Literal now raises TypeError for unhashable parameters during equality comparisons.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
>>> from typing import Literal
>>> Literal[{0}]
>>> Literal[{0}] == Literal[{False}]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'set'
```

----------------------------------------

TITLE: Primality Test in Python
DESCRIPTION: The is_prime function checks if a given number is prime. It uses the factor function to efficiently determine primality.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_59

LANGUAGE: python
CODE:
```
def is_prime(n):
    "Return True if n is prime."
    # is_prime(1_000_000_000_000_403) → True
    return n > 1 and next(factor(n)) == n
```

----------------------------------------

TITLE: Adding DLL Directory to Windows Search Path
DESCRIPTION: Enables better DLL resolution on Windows by using safe DLL search paths and adding a new os.add_dll_directory function.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0a4.rst#2025-04-23_snippet_8

LANGUAGE: Python
CODE:
```
import os
os.add_dll_directory('path/to/dll/directory')
```

----------------------------------------

TITLE: String Template Identifiers Example
DESCRIPTION: Using new Template methods to get placeholders and validate templates.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.11.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
template.get_identifiers()  # Returns all valid placeholders
template.is_valid()  # Checks if template has invalid placeholders
```

----------------------------------------

TITLE: Initializing cProfile with Custom Timer Function
DESCRIPTION: Shows how to create a Profile instance with a custom timer function that measures time in thousands of seconds. The second argument (0.001) specifies the real duration of one time unit for scaling purposes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/profile.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
pr = cProfile.Profile(your_integer_time_func, 0.001)
```

----------------------------------------

TITLE: Getting File System Representation in Python
DESCRIPTION: Returns the file system representation of a given path with proper handling of different input types. Ensures compatibility with both string and bytes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
.. function:: fspath(path)

   Return the file system representation of the path.

   If :class:`str` or :class:`bytes` is passed in, it is returned unchanged.
   Otherwise :meth:`~os.PathLike.__fspath__` is called and its value is
   returned as long as it is a :class:`str` or :class:`bytes` object.
   In all other cases, :exc:`TypeError` is raised.

   .. versionadded:: 3.6
```

----------------------------------------

TITLE: Implementing Custom Logging Handler for Multiprocessing in Python
DESCRIPTION: This code defines a custom MyHandler class that handles logging events in the listener process. It dispatches events to loggers based on the name in the received record, which are then sent to configured handlers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_32

LANGUAGE: python
CODE:
```
class MyHandler:
    """
    A simple handler for logging events. It runs in the listener process and
    dispatches events to loggers based on the name in the received record,
    which then get dispatched, by the logging system, to the handlers
    configured for those loggers.
    """

    def handle(self, record):
        if record.name == "root":
            logger = logging.getLogger()
        else:
            logger = logging.getLogger(record.name)

        if logger.isEnabledFor(record.levelno):
            # The process name is transformed just to show that it's the listener
            # doing the logging to files and console
            record.processName = '%s (for %s)' % (current_process().name, record.processName)
            logger.handle(record)
```

----------------------------------------

TITLE: Pure Python Implementation of classmethod Descriptor
DESCRIPTION: A custom implementation of the classmethod descriptor using Python's descriptor protocol. This shows how classmethod is implemented internally using MethodType and functools.update_wrapper.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
import functools

class ClassMethod:
    "Emulate PyClassMethod_Type() in Objects/funcobject.c"

    def __init__(self, f):
        self.f = f
        functools.update_wrapper(self, f)

    def __get__(self, obj, cls=None):
        if cls is None:
            cls = type(obj)
        return MethodType(self.f, cls)
```

----------------------------------------

TITLE: Implementing Two Type Parameters for ContextManager Classes
DESCRIPTION: Addition of an optional second type parameter to typing.ContextManager and typing.AsyncContextManager to represent the return types of __exit__ and __aexit__ methods respectively.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.13.0b1.rst#2025-04-21_snippet_4

LANGUAGE: rst
CODE:
```
.. date: 2024-05-06-18-13-02
.. gh-issue: 118660
.. nonce: n01Vb7
.. section: Library

Add an optional second type parameter to :class:`typing.ContextManager` and
:class:`typing.AsyncContextManager`, representing the return types of
:meth:`~object.__exit__` and :meth:`~object.__aexit__` respectively. This
parameter defaults to ``bool | None``.
```

----------------------------------------

TITLE: Python Match Statement As-Pattern and Wildcard
DESCRIPTION: Demonstrates Python's `match` statement using "as-patterns" and the wildcard pattern (`_`). The example shows binding a name (`y`) to a subpattern (`[x]`) using `as y`, and using the simple wildcard (`_`) which always matches. This syntax is parsed into `MatchAs` AST nodes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_45

LANGUAGE: Python
CODE:
```
match x:
    case [x] as y:
        ...
    case _:
        ...
```

----------------------------------------

TITLE: Using HTTPPasswordMgrWithPriorAuth class for handling HTTP authentication
DESCRIPTION: The new HTTPPasswordMgrWithPriorAuth class in urllib.request allows managing HTTP Basic Authentication credentials to avoid unnecessary 401 responses or to send credentials on the first request for servers that return 404 instead of 401.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_32

LANGUAGE: python
CODE:
```
from urllib.request import HTTPPasswordMgrWithPriorAuth
```

----------------------------------------

TITLE: Keyword-Only Parameters Inheritance
DESCRIPTION: Example showing how keyword-only parameters are reordered in inherited dataclasses to maintain Python's parameter ordering requirements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dataclasses.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
@dataclass
class Base:
    x: Any = 15.0
    _: KW_ONLY
    y: int = 0
    w: int = 1

@dataclass
class D(Base):
    z: int = 10
    t: int = field(kw_only=True, default=0)
```

----------------------------------------

TITLE: Allocating I/O Buffer Using PyMem_Malloc in C
DESCRIPTION: This snippet demonstrates allocating an I/O buffer from the Python heap using PyMem_Malloc. It shows proper error handling, buffer usage, and memory deallocation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/memory.rst#2025-04-21_snippet_10

LANGUAGE: c
CODE:
```
PyObject *res;
char *buf = (char *) PyMem_Malloc(BUFSIZ); /* for I/O */

if (buf == NULL)
    return PyErr_NoMemory();
/* ...Do some I/O operation involving buf... */
res = PyBytes_FromString(buf);
PyMem_Free(buf); /* allocated with PyMem_Malloc */
return res;
```

----------------------------------------

TITLE: Replacing Existing Headers
DESCRIPTION: Shows how to replace an existing header while maintaining original order and case
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.compat32-message.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
del msg['subject']
msg['subject'] = 'Python roolz!'
```

----------------------------------------

TITLE: Pack and Unpack Integers with struct in Python
DESCRIPTION: Demonstrates packing and unpacking integers of different sizes using big-endian byte order with the `struct` module. Also shows how to calculate the size of the packed data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/struct.rst#_snippet_3

LANGUAGE: Python
CODE:
```
from struct import *
pack(">bhl", 1, 2, 3)
b'\x01\x00\x02\x00\x00\x00\x03'
unpack('>bhl', b'\x01\x00\x02\x00\x00\x00\x03')
(1, 2, 3)
calcsize('>bhl')
7
```

----------------------------------------

TITLE: Python Installer Options in unattend.xml (XML)
DESCRIPTION: Provides an example of an unattend.xml file used to configure the Python Windows installer. It sets options for per-user installation, simplified UI with a custom message, and exclusion of the launcher and test suite, demonstrating how command-line options can be translated to XML attributes or element text.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/windows.rst#_snippet_18

LANGUAGE: XML
CODE:
```
<Options>
    <Option Name="InstallAllUsers" Value="no" />
    <Option Name="Include_launcher" Value="0" />
    <Option Name="Include_test" Value="no" />
    <Option Name="SimpleInstall" Value="yes" />
    <Option Name="SimpleInstallDescription">Just for me, no test suite</Option>
</Options>
```

----------------------------------------

TITLE: Demonstrating NameError Suggestions in Python
DESCRIPTION: This snippet demonstrates how Python now offers suggestions for similar variable names when a NameError is raised by the interpreter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> schwarzschild_black_hole = None
>>> schwarschild_black_hole
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'schwarschild_black_hole' is not defined. Did you mean: schwarzschild_black_hole?
```

----------------------------------------

TITLE: Checking Unicode String Prefix/Suffix - Python C API - C
DESCRIPTION: Check if a substring matches the beginning (prefix) or end (suffix) of a slice of a Unicode string. The start and end parameters define the slice, and the direction parameter (-1 for prefix, 1 for suffix) determines the check. Returns 1 for a match, 0 for no match, and -1 on error.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/unicode.rst#_snippet_90

LANGUAGE: C
CODE:
```
Py_ssize_t PyUnicode_Tailmatch(PyObject *unicode, PyObject *substr, \
                        Py_ssize_t start, Py_ssize_t end, int direction)
```

----------------------------------------

TITLE: Setting Tab Size with Curses in Python
DESCRIPTION: The `set_tabsize` function specifies the number of columns that represent a tab character when converting to spaces. This setting impacts how tabs appear in terminal windows from Python 3.9 onward.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_38

LANGUAGE: Python
CODE:
```
.. function:: set_tabsize(size)

   Sets the number of columns used by the curses library when converting a tab
   character to spaces as it adds the tab to a window.

   .. versionadded:: 3.9
```

----------------------------------------

TITLE: Removing Duplicates from a List by Sorting in Python
DESCRIPTION: Shows a technique for removing duplicates from a list by sorting it first, then scanning from the end and removing duplicate elements while preserving the original ordering.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_36

LANGUAGE: python
CODE:
```
if mylist:
    mylist.sort()
    last = mylist[-1]
    for i in range(len(mylist)-2, -1, -1):
        if last == mylist[i]:
            del mylist[i]
        else:
            last = mylist[i]
```

----------------------------------------

TITLE: Implementing Immediate Debugger Entry for breakpoint() and pdb.set_trace()
DESCRIPTION: Behavior change where breakpoint() and pdb.set_trace() now enter the debugger immediately after the call rather than before the next line is executed, providing more intuitive debugging.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.13.0b1.rst#2025-04-21_snippet_6

LANGUAGE: rst
CODE:
```
.. date: 2024-05-04-18-40-43
.. gh-issue: 111744
.. nonce: nuCtwN
.. section: Library

``breakpoint()`` and ``pdb.set_trace()`` now enter the debugger immediately
after the call rather than before the next line is executed.
```

----------------------------------------

TITLE: Socket Configuration Example
DESCRIPTION: Example syntax for socket configuration checks. Shows usage of getblocking() method to check socket blocking mode.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
socket.getblocking()
```

----------------------------------------

TITLE: Demonstrating Backslash Line Continuation in Python Strings
DESCRIPTION: Example showing how a backslash can be used at the end of a line to ignore the newline in a string literal. The backslash and newline characters are removed from the final string.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/lexical_analysis.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> 'This string will not include \
... backslashes or newline characters.'
'This string will not include backslashes or newline characters.'
```

----------------------------------------

TITLE: Method Caller Implementation
DESCRIPTION: Defines a function that dynamically calls a method on an object. It returns a callable object that, when called with an object, calls the specified method with any provided arguments and keyword arguments. This function is useful for creating callable objects that invoke methods on other objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/operator.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
def methodcaller(name, /, *args, **kwargs):
    def caller(obj):
        return getattr(obj, name)(*args, **kwargs)
    return caller
```

----------------------------------------

TITLE: Itertools Recipe: prepend function
DESCRIPTION: Function that prepends a single value in front of an iterable using chain.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
def prepend(value, iterable):
    "Prepend a single value in front of an iterable."
    # prepend(1, [2, 3, 4]) → 1 2 3 4
    return chain([value], iterable)
```

----------------------------------------

TITLE: RFC822 Message Format Example
DESCRIPTION: Example showing the structure of an RFC822 message with main headers and an enclosed message containing its own subject and body. Demonstrates nested message formatting with Content-Type and MIME-Version headers.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/test_email/data/msg_11.txt#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
Content-Type: message/rfc822
MIME-Version: 1.0
Subject: The enclosing message

Subject: An enclosed message

Here is the body of the message.
```

----------------------------------------

TITLE: Curses deleteln Method Definition
DESCRIPTION: The deleteln method deletes the line under the cursor and moves all subsequent lines up by one line. This effectively removes the current line from the window.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_51

LANGUAGE: python
CODE:
```
.. method:: window.deleteln()

   Delete the line under the cursor. All following lines are moved up by one line.
```

----------------------------------------

TITLE: Importing gettext and using translation object
DESCRIPTION: This code snippet demonstrates how to import the gettext module, create a translation object, and use it to translate strings within a module. It ensures that the translated strings are only available within the module's global namespace.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/gettext.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
import gettext
         t = gettext.translation('mymodule', ...)
         _ = t.gettext
```

----------------------------------------

TITLE: Handling ambiguous times with fold attribute in ZoneInfo
DESCRIPTION: Shows how to use the fold attribute from PEP 495 to handle ambiguous times during daylight saving transitions. Demonstrates both explicit setting of fold and automatic fold handling during timezone conversion.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/zoneinfo.rst#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> dt = datetime(2020, 11, 1, 1, tzinfo=ZoneInfo("America/Los_Angeles"))
>>> print(dt)
2020-11-01 01:00:00-07:00

>>> print(dt.replace(fold=1))
2020-11-01 01:00:00-08:00
```

----------------------------------------

TITLE: Implementing Basic Object Pickling in Python
DESCRIPTION: Default implementation showing how pickle saves and restores object instances by preserving class and attributes. The save function returns a tuple of the object's class and dictionary, while restore creates a new uninitialized instance and updates its dictionary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pickle.rst#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
def save(obj):
    return (obj.__class__, obj.__dict__)

def restore(cls, attributes):
    obj = cls.__new__(cls)
    obj.__dict__.update(attributes)
    return obj
```

----------------------------------------

TITLE: Using hook_compressed with FileInput in Python
DESCRIPTION: Shows how to use the hook_compressed function as an openhook parameter to the FileInput constructor. This allows transparent handling of compressed files with extensions .gz and .bz2 using UTF-8 encoding.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/fileinput.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
fi = fileinput.FileInput(openhook=fileinput.hook_compressed, encoding="utf-8")
```

----------------------------------------

TITLE: Calculating Exponential with Decimal.exp in Python
DESCRIPTION: Shows how to use the `exp` method to calculate the natural exponential of a Decimal number, demonstrating the result for a simple integer.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_19

LANGUAGE: Python
CODE:
```
Decimal(1).exp()
Decimal('2.718281828459045235360287471')
```

----------------------------------------

TITLE: Shutil Chown Extension
DESCRIPTION: Enhancement to shutil.chown to support dir_fd and follow_symlinks keyword arguments
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.13.0b1.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
shutil.chown now supports dir_fd and follow_symlinks keyword arguments.
```

----------------------------------------

TITLE: TimeBoundedLRU Cache Implementation
DESCRIPTION: LRU Cache implementation that invalidates and refreshes old entries based on time constraints, using OrderedDict as the underlying storage.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
from collections import OrderedDict
from time import time

class TimeBoundedLRU:
    "LRU Cache that invalidates and refreshes old entries."

    def __init__(self, func, maxsize=128, maxage=30):
        self.cache = OrderedDict()      # { args : (timestamp, result)}
        self.func = func
        self.maxsize = maxsize
        self.maxage = maxage

    def __call__(self, *args):
        if args in self.cache:
            self.cache.move_to_end(args)
            timestamp, result = self.cache[args]
            if time() - timestamp <= self.maxage:
                return result
        result = self.func(*args)
        self.cache[args] = time(), result
        if len(self.cache) > self.maxsize:
            self.cache.popitem(last=False)
        return result
```

----------------------------------------

TITLE: Setting Breakpoint Ignore Count - Pdb - Python
DESCRIPTION: Sets the number of times a breakpoint should be ignored before it becomes active. If the count is omitted, it defaults to 0. The count is decremented each time the breakpoint is reached and active.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_13



----------------------------------------

TITLE: Creating SSLObject with Memory BIO in Python
DESCRIPTION: Demonstrates creating an SSLObject instance using the new wrap_bio() method of SSLContext. This provides SSL protocol support without network I/O capabilities.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_27

LANGUAGE: Python
CODE:
```
SSLContext.wrap_bio()
```

----------------------------------------

TITLE: Adding Spearman's Correlation Coefficient to statistics Module
DESCRIPTION: This update adds support for computing Spearman's correlation coefficient to the existing statistics.correlation() function.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.12.0a1.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
statistics.correlation(x, y, method='spearman')  # Computes Spearman's correlation
```

----------------------------------------

TITLE: Creating a Retry/Cancel Dialog with tkinter.messagebox
DESCRIPTION: The askretrycancel function creates a dialog asking if an operation should be retried. It displays RETRY and CANCEL buttons and returns True if RETRY is clicked, False otherwise.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.messagebox.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
def askretrycancel(title=None, message=None, **options):

   Ask if operation should be retried. Shows buttons :data:`RETRY` and :data:`CANCEL`.
   Return ``True`` if the answer is yes and ``False`` otherwise.
```

----------------------------------------

TITLE: ZeroMQ Integration with Python Logging
DESCRIPTION: This snippet shows how to create a logging handler that integrates with ZeroMQ by subclassing QueueHandler, allowing log messages to be sent through ZeroMQ sockets for asynchronous logging.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_29

LANGUAGE: Python
CODE:
```
import zmq   # using pyzmq, the Python binding for ZeroMQ
import json  # for serializing records portably

class ZeroMQSocketHandler(QueueHandler):
    def enqueue(self, record):
        self.queue.send_json(record.__dict__)

handler = ZeroMQSocketHandler(sock)
```

----------------------------------------

TITLE: Demonstrating Server Class Inheritance Hierarchy in Python
DESCRIPTION: A visual representation of the inheritance relationships between the socketserver module's base classes. It shows how TCPServer and UDPServer inherit from BaseServer, and how Unix-specific server classes inherit from their IP counterparts.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/socketserver.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
+------------+
| BaseServer |
+------------+
      |
      v
+-----------+        +------------------+
| TCPServer |------->| UnixStreamServer |
+-----------+        +------------------+
      |
      v
+-----------+        +--------------------+
| UDPServer |------->| UnixDatagramServer |
+-----------+        +--------------------+
```

----------------------------------------

TITLE: Mapping Imports to Distributions with importlib.metadata - Python
DESCRIPTION: Demonstrates the `packages_distributions()` function, which returns a dictionary mapping top-level import names to a list of distribution package names that provide them.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_22

LANGUAGE: python
CODE:
```
>>> packages_distributions()
{'importlib_metadata': ['importlib-metadata'], 'yaml': ['PyYAML'], 'jaraco': ['jaraco.classes', 'jaraco.functools'], ...}
```

----------------------------------------

TITLE: Parsing a Plist File with plistlib in Python
DESCRIPTION: This code snippet demonstrates how to parse a plist file using the plistlib module in Python. The plist data is provided as a bytes object, and the loads function is used to convert it into a Python dictionary. The example illustrates accessing a value from the parsed plist data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/plistlib.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
import plistlib

plist = b"""<plist version=\"1.0\">
<dict>
    <key>foo</key>
    <string>bar</string>
</dict>
</plist>"""
pl = plistlib.loads(plist)
print(pl["foo"])
```

----------------------------------------

TITLE: Itertools Recipe: ncycles function
DESCRIPTION: Function that returns sequence elements repeated n times using chain and repeat.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
def ncycles(iterable, n):
    "Returns the sequence elements n times."
    return chain.from_iterable(repeat(tuple(iterable), n))
```

----------------------------------------

TITLE: Custom Value Generation for Enum Members in Python
DESCRIPTION: Demonstrates how to override the _generate_next_value_ method to customize the automatic value generation for enum members. In this example, the member names are used as values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/enum.rst#2025-04-23_snippet_6

LANGUAGE: Python
CODE:
```
class AutoName(Enum):
    @staticmethod
    def _generate_next_value_(name, start, count, last_values):
        return name

class Ordinal(AutoName):
    NORTH = auto()
    SOUTH = auto()
    EAST = auto()
    WEST = auto()
```

----------------------------------------

TITLE: Using os.kill to Send Signals to Processes in Python
DESCRIPTION: Sends a signal to a process identified by its PID. On Unix systems, this sends standard signals, while on Windows it can send special console signals or terminate processes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_65

LANGUAGE: python
CODE:
```
kill(pid, sig, /)
```

----------------------------------------

TITLE: Deprecating sys.last_traceback in Python
DESCRIPTION: The sys.last_traceback field, which held the traceback of the last uncaught exception, is deprecated. Use sys.last_exc instead to access the last exception object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_33

LANGUAGE: Python
CODE:
```
sys.last_traceback
```

----------------------------------------

TITLE: Adding Optional Subparsers in argparse - Python
DESCRIPTION: Shows how to make subparsers optional in argparse using the new required parameter. This restores Python 2 behavior where subparsers were required by default.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.7.0a2.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
add_subparsers(required=False)
```

----------------------------------------

TITLE: Creating BytesHeaderParser for Header-Only Parsing in Python
DESCRIPTION: Creates a BytesHeaderParser instance, which is identical to BytesParser except that the headersonly parameter defaults to True, making it more efficient when only headers are needed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.parser.rst#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
BytesHeaderParser(_class=None, *, policy=policy.compat32)
```

----------------------------------------

TITLE: Comparing Styling in Tkinter vs ttk in Python
DESCRIPTION: Shows the difference between styling in standard Tkinter and ttk. Traditional Tkinter uses direct styling attributes, while ttk uses a Style class for better theming support.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
l1 = tkinter.Label(text="Test", fg="black", bg="white")
l2 = tkinter.Label(text="Test", fg="black", bg="white")
```

----------------------------------------

TITLE: Initializing a Pickle Serializer in Python
DESCRIPTION: Constructor for the Pickler class that handles serializing objects to a binary file. Takes parameters for protocol version, Python 2 compatibility, and buffer handling. The protocol parameter specifies which pickle protocol to use.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pickle.rst#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
Pickler(file, protocol=None, *, fix_imports=True, buffer_callback=None)
```

----------------------------------------

TITLE: Visualizing Inheritance Graph with Object Base Class
DESCRIPTION: ASCII art representation of an inheritance graph showing classes A and B with conflicting inheritance orders, making it impossible to create a valid subclass that inherits from both.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/mro.rst#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
          -----------
         |           |
         |    O      |
         |  /   \    |
          - X    Y  /
            |  / | /
            | /  |/
            A    B
            \   /
              ?
```

----------------------------------------

TITLE: Using str.expandtabs() Method in Python
DESCRIPTION: This method returns a copy of the string where all tab characters are replaced by spaces based on the specified tab size. It demonstrates how tab characters are expanded to align with tab positions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
'01\t012\t0123\t01234'.expandtabs()
'01      012     0123    01234'
'01\t012\t0123\t01234'.expandtabs(4)
'01  012 0123    01234'
```

----------------------------------------

TITLE: Implementing dst() Method for Fixed-Offset Time Zone in Python
DESCRIPTION: This snippet shows a simple implementation of the dst() method for a fixed-offset time zone that doesn't account for daylight saving time. It always returns a timedelta of 0.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_26

LANGUAGE: python
CODE:
```
def dst(self, dt):
    # a fixed-offset class:  doesn't account for DST
    return timedelta(0)
```

----------------------------------------

TITLE: Symbolic Link Resolution with readlink() in Python
DESCRIPTION: Returns the path that a symbolic link points to. Supports both absolute and relative paths, with special handling for Windows symbolic links and directory junctions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_43

LANGUAGE: python
CODE:
```
readlink(path, *, dir_fd=None)
```

----------------------------------------

TITLE: Querying Terminal Size in Python
DESCRIPTION: This function returns the size of the terminal window as a tuple of (columns, lines). It can query a specific file descriptor, defaulting to standard output. If the file descriptor is not connected to a terminal, it raises an OSError.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
def get_terminal_size(fd=STDOUT_FILENO, /):
    """Return the size of the terminal window as (columns, lines),
    tuple of type terminal_size.
    """
```

----------------------------------------

TITLE: File Descriptor Properties and Locking in Python
DESCRIPTION: Functions like get_blocking(), isatty(), and lockf() query or modify file descriptor properties. get_blocking() checks the blocking mode, isatty() checks if it's a tty device, and lockf() applies POSIX locks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
def get_blocking(fd, /):
    """Get the blocking mode of the file descriptor: False if the
    O_NONBLOCK flag is set, True if the flag is cleared.
    """
```

LANGUAGE: python
CODE:
```
def isatty(fd, /):
    """Return True if the file descriptor fd is open and connected to a
    tty(-like) device, else False.
    """
```

LANGUAGE: python
CODE:
```
def lockf(fd, cmd, len, /):
    """Apply, test or remove a POSIX lock on an open file descriptor.
    fd is an open file descriptor.
    cmd specifies the command to use - one of F_LOCK, F_TLOCK,
    F_ULOCK or F_TEST.
    len specifies the section of the file to lock.
    """
```

----------------------------------------

TITLE: Implementing abstract property setter in subclass
DESCRIPTION: This code snippet demonstrates how to implement the setter of an abstract property in a subclass.  Only the abstract components of the property must be implemented in subclasses, allowing for partial implementation of abstract properties.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/abc.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
class D(C):
    @C.x.setter
    def x(self, val):
        ...

```

----------------------------------------

TITLE: Inspect Entry Point Attributes (Python)
DESCRIPTION: Once an `EntryPoint` object is obtained, this snippet demonstrates accessing its key attributes: `.name`, `.value`, and `.group`, which define the entry point. It also shows accessing parsed components of the `.value` like `.module`, `.attr`, and `.extras`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_11

LANGUAGE: Python Console
CODE:
```
>>> wheel  # doctest: +SKIP
EntryPoint(name='wheel', value='wheel.cli:main', group='console_scripts')
>>> wheel.module  # doctest: +SKIP
'wheel.cli'
>>> wheel.attr  # doctest: +SKIP
'main'
>>> wheel.extras  # doctest: +SKIP
[]
```

----------------------------------------

TITLE: Asynchronous Teardown in Python unittest
DESCRIPTION: Asynchronous method called immediately after the test method in IsolatedAsyncioTestCase. It runs before tearDown, even if the test method raised an exception.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_33

LANGUAGE: python
CODE:
```
async def asyncTearDown()
```

----------------------------------------

TITLE: Parsing HTML Comments
DESCRIPTION: Illustrates parsing different types of HTML comments, including standard comments and IE-specific conditional comments
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/html.parser.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
parser.feed('<!-- a comment -->' '<!--[if IE 9]>IE-specific content<![endif]-->');
```

----------------------------------------

TITLE: Using ttk.Style for Widget Styling in Python
DESCRIPTION: Demonstrates how to use the ttk.Style class to configure widget appearance. This approach allows for consistent styling across multiple widgets.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
style = ttk.Style()
style.configure("BW.TLabel", foreground="black", background="white")

l1 = ttk.Label(text="Test", style="BW.TLabel")
l2 = ttk.Label(text="Test", style="BW.TLabel")
```

----------------------------------------

TITLE: Converting memoryview to bytes with tobytes method
DESCRIPTION: Example showing how to convert a memoryview object to a bytes object using both the tobytes() method and the bytes() constructor.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_74

LANGUAGE: python
CODE:
```
m = memoryview(b"abc")
m.tobytes()
b'abc'
bytes(m)
b'abc'
```

----------------------------------------

TITLE: Defining MIME Email Structure with Multiple Content Parts
DESCRIPTION: Shows the structure of a MIME multipart email including header fields and multiple content sections with different character encodings. The message uses 'BOUNDARY' as delimiter between content parts.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/test_email/data/msg_08.txt#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
MIME-Version: 1.0
From: Barry Warsaw <barry@python.org>
To: Dingus Lovers <cravindogs@cravindogs.com>
Subject: Lyrics
Date: Fri, 20 Apr 2001 19:35:02 -0400
Content-Type: multipart/mixed; boundary="BOUNDARY"

--BOUNDARY
Content-Type: text/plain; charset="us-ascii"


--BOUNDARY
Content-Type: text/html; charset="iso-8859-1"


--BOUNDARY
Content-Type: text/plain; charset="iso-8859-2"


--BOUNDARY
Content-Type: text/plain; charset="koi8-r"


--BOUNDARY--
```

----------------------------------------

TITLE: Implementing chain function in Python
DESCRIPTION: Equivalent implementation of the chain function that creates an iterator returning elements from multiple iterables in sequence, exhausting each iterable before moving to the next one.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
def chain(*iterables):
    # chain('ABC', 'DEF') → A B C D E F
    for iterable in iterables:
        yield from iterable
```

----------------------------------------

TITLE: Annotating Python Generator with Explicit None Types
DESCRIPTION: Annotates a Python generator function explicitly specifying `None` for `SendType` and `ReturnType` using `Generator[YieldType, None, None]`, which is equivalent to the default.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_21

LANGUAGE: python
CODE:
```
def infinite_stream(start: int) -> Generator[int, None, None]:
    while True:
        yield start
        start += 1
```

----------------------------------------

TITLE: Creating an Information Message Box with tkinter.messagebox
DESCRIPTION: The showinfo function creates and displays an information message box with the specified title and message. It's a convenience function for creating a message box with an information icon.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.messagebox.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
def showinfo(title=None, message=None, **options):

   Creates and displays an information message box with the specified title
   and message.
```

----------------------------------------

TITLE: Mock Return Value Set to None - Python
DESCRIPTION: Shows that assigning None to return_value will explicitly make the mock return None, overriding the wrapped object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_68

LANGUAGE: python
CODE:
```
>>> order_mock.get_value.return_value = None
>>> order_mock.get_value() is None
True
```

----------------------------------------

TITLE: Creating Decimal from Various Numbers Using from_number Class Method in Python
DESCRIPTION: Illustrates using the `from_number` class method to construct Decimal objects from integer, float, and existing Decimal inputs. This method accepts a broader range of numeric types than the standard constructor.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_22

LANGUAGE: Python
CODE:
```
Decimal.from_number(314)
Decimal('314')
Decimal.from_number(0.1)
Decimal('0.1000000000000000055511151231257827021181583404541015625')
Decimal.from_number(Decimal('3.14'))
Decimal('3.14')
```

----------------------------------------

TITLE: Overriding Basic Tk Widgets with ttk Equivalents in Python
DESCRIPTION: Demonstrates how to import ttk to override the basic Tk widgets. This approach replaces several standard widgets with their themed equivalents automatically.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from tkinter import *
from tkinter.ttk import *
```

----------------------------------------

TITLE: Demonstrating Callable Objects in Python
DESCRIPTION: This snippet shows the syntax for calling a callable object in Python. It illustrates that functions, methods, and instances of classes implementing the __call__ method are all callable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/glossary.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
callable(argument1, argument2, argumentN)
```

----------------------------------------

TITLE: Alternative to static methods using module-level functions in Python
DESCRIPTION: Shows an alternative approach to static methods by using simple module-level functions that access class attributes directly.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_56

LANGUAGE: python
CODE:
```
def getcount():
    return C.count
```

----------------------------------------

TITLE: Printing formatted representation of an object (pp function) - Python
DESCRIPTION: The function pp prints the formatted representation of an object to a specified stream. Parameters allow control over indentation, width, depth, and whether to sort dictionaries. If no stream is specified, output is directed to sys.stdout.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pprint.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
def pp(object, stream=None, indent=1, width=80, depth=None, *, compact=False, sort_dicts=False, underscore_numbers=False):
    Prints the formatted representation of *object*, followed by a newline.
    This function may be used in the interactive interpreter instead of the :func:`print` function for inspecting values.
    Tip: you can reassign ``print = pprint.pp`` for use within a scope.
```

----------------------------------------

TITLE: Calculating Permutations in Python
DESCRIPTION: The perm(n, k) function returns the number of ways to choose k items from n items without repetition and with order. It evaluates to n! / (n - k)! when k <= n and 0 when k > n. If k is not specified, it defaults to n and returns n!. Raises TypeError for non-integer arguments and ValueError for negative arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/math.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
perm(n, k=None)
```

----------------------------------------

TITLE: Implementing asynchronous generators in Python
DESCRIPTION: Implements PEP 525 to add support for asynchronous generators, allowing the use of 'async for' in generator functions.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.6.0b1.rst#2025-04-21_snippet_1



----------------------------------------

TITLE: Creating MIMEAudio Objects in Python
DESCRIPTION: Creates MIME objects for audio data. Can automatically detect common audio formats (au, wav, aiff, aifc) or accepts an explicit subtype. Uses base64 encoding by default.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.mime.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
MIMEAudio(_audiodata, _subtype=None, \
                     _encoder=email.encoders.encode_base64, \
                     *, policy=compat32, **_params)
```

----------------------------------------

TITLE: Using if __name__ guard pattern with pydoc
DESCRIPTION: A note about using a guard pattern in modules to be documented by pydoc. Since pydoc imports modules to document them, this pattern prevents code execution during documentation generation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pydoc.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
if __name__ == '__main__':
```

----------------------------------------

TITLE: Demonstrating Attribute Error with __slots__
DESCRIPTION: Shows the AttributeError raised when trying to assign to an attribute not defined in __slots__. This helps catch bugs due to misspelled attribute names.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
>>> auto = Vehicle()
>>> auto.id_nubmer = 'VYE483814LQEX'
Traceback (most recent call last):
    ...
AttributeError: 'Vehicle' object has no attribute 'id_nubmer'
```

----------------------------------------

TITLE: Using getuser() Function to Retrieve User Login Name in Python
DESCRIPTION: The getuser() function returns the login name of the current user by checking environment variables LOGNAME, USER, LNAME, and USERNAME in order. If none are set, it uses the pwd module to get the login name from the password database or raises an OSError.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/getpass.rst#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
getuser()
```

----------------------------------------

TITLE: Extending EnvBuilder for Custom Virtual Environment Creation in Python
DESCRIPTION: This class extends the EnvBuilder to create a virtual environment with setuptools and pip pre-installed. It includes methods for installing scripts, handling progress reporting, and setting up the environment.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/venv.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
import os
import os.path
from subprocess import Popen, PIPE
import sys
from threading import Thread
from urllib.parse import urlparse
from urllib.request import urlretrieve
import venv

class ExtendedEnvBuilder(venv.EnvBuilder):
    """
    This builder installs setuptools and pip so that you can pip or
    easy_install other packages into the created virtual environment.

    :param nodist: If true, setuptools and pip are not installed into the
                   created virtual environment.
    :param nopip: If true, pip is not installed into the created
                  virtual environment.
    :param progress: If setuptools or pip are installed, the progress of the
                     installation can be monitored by passing a progress
                     callable. If specified, it is called with two
                     arguments: a string indicating some progress, and a
                     context indicating where the string is coming from.
                     The context argument can have one of three values:
                     'main', indicating that it is called from virtualize()
                     itself, and 'stdout' and 'stderr', which are obtained
                     by reading lines from the output streams of a subprocess
                     which is used to install the app.

                     If a callable is not specified, default progress
                     information is output to sys.stderr.
    """

    def __init__(self, *args, **kwargs):
        self.nodist = kwargs.pop('nodist', False)
        self.nopip = kwargs.pop('nopip', False)
        self.progress = kwargs.pop('progress', None)
        self.verbose = kwargs.pop('verbose', False)
        super().__init__(*args, **kwargs)

    def post_setup(self, context):
        """
        Set up any packages which need to be pre-installed into the
        virtual environment being created.

        :param context: The information for the virtual environment
                        creation request being processed.
        """
        os.environ['VIRTUAL_ENV'] = context.env_dir
        if not self.nodist:
            self.install_setuptools(context)
        # Can't install pip without setuptools
        if not self.nopip and not self.nodist:
            self.install_pip(context)

    def reader(self, stream, context):
        """
        Read lines from a subprocess' output stream and either pass to a progress
        callable (if specified) or write progress information to sys.stderr.
        """
        progress = self.progress
        while True:
            s = stream.readline()
            if not s:
                break
            if progress is not None:
                progress(s, context)
            else:
                if not self.verbose:
                    sys.stderr.write('.')
                else:
                    sys.stderr.write(s.decode('utf-8'))
                sys.stderr.flush()
        stream.close()

    def install_script(self, context, name, url):
        _, _, path, _, _, _ = urlparse(url)
        fn = os.path.split(path)[-1]
        binpath = context.bin_path
        distpath = os.path.join(binpath, fn)
        # Download script into the virtual environment's binaries folder
        urlretrieve(url, distpath)
        progress = self.progress
        if self.verbose:
            term = '\n'
        else:
            term = ''
        if progress is not None:
            progress('Installing %s ...%s' % (name, term), 'main')
        else:
            sys.stderr.write('Installing %s ...%s' % (name, term))
            sys.stderr.flush()
        # Install in the virtual environment
        args = [context.env_exe, fn]
        p = Popen(args, stdout=PIPE, stderr=PIPE, cwd=binpath)
        t1 = Thread(target=self.reader, args=(p.stdout, 'stdout'))
        t1.start()
        t2 = Thread(target=self.reader, args=(p.stderr, 'stderr'))
        t2.start()
        p.wait()
        t1.join()
        t2.join()
        if progress is not None:
            progress('done.', 'main')
        else:
            sys.stderr.write('done.\n')
        # Clean up - no longer needed
        os.unlink(distpath)

    def install_setuptools(self, context):
        """
        Install setuptools in the virtual environment.

        :param context: The information for the virtual environment
                        creation request being processed.
        """
        url = "https://bootstrap.pypa.io/ez_setup.py"
        self.install_script(context, 'setuptools', url)
        # clear up the setuptools archive which gets downloaded
        pred = lambda o: o.startswith('setuptools-') and o.endswith('.tar.gz')
        files = filter(pred, os.listdir(context.bin_path))
        for f in files:
            f = os.path.join(context.bin_path, f)
            os.unlink(f)

    def install_pip(self, context):
        """
        Install pip in the virtual environment.

        :param context: The information for the virtual environment
                        creation request being processed.
        """
        url = 'https://bootstrap.pypa.io/get-pip.py'
        self.install_script(context, 'pip', url)
```

----------------------------------------

TITLE: Apply 'data' Extraction Filter Using extraction_filter Attribute - Python
DESCRIPTION: This code sets the `extraction_filter` attribute of the `TarFile` object to the 'data' filter object (`tarfile.data_filter`). Similar to passing it via the `filter` parameter in `extractall`, this will raise an AttributeError if `tarfile.data_filter` is not available.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_21

LANGUAGE: Python
CODE:
```
my_tarfile.extraction_filter = tarfile.data_filter
my_tarfile.extractall()
```

----------------------------------------

TITLE: Declaring Signal Enums in Python
DESCRIPTION: Definition of three fundamental enum classes for signal handling: Signals (SIG* constants), Handlers (signal handling constants), and Sigmasks (signal mask constants). These enums provide type-safe signal-related constants.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/signal.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
class Signals(enum.IntEnum):
    # Collection of SIG* constants and CTRL_* constants
    pass

class Handlers(enum.IntEnum):
    # Collection of SIG_DFL and SIG_IGN constants
    pass

class Sigmasks(enum.IntEnum):
    # Collection of SIG_BLOCK, SIG_UNBLOCK and SIG_SETMASK constants
    pass
```

----------------------------------------

TITLE: Parsing Variable Assignment (Store) into AST (Python)
DESCRIPTION: Illustrates how variable assignment is represented in the AST. It parses `a = 1` into a `Module` with an `Assign` node, showing the target variable (`a`) as a `Name` node with a `Store` context and the assigned value (`1`) as a `Constant`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_12

LANGUAGE: python
CODE:
```
print(ast.dump(ast.parse('a = 1'), indent=4))
```

----------------------------------------

TITLE: Accessing Unicode Properties in Python
DESCRIPTION: This snippet demonstrates how to use the `unicodedata` module to access information about Unicode characters, such as their category and name, and to get the numeric value of characters.  It loops through a string, printing the character's index, hexadecimal representation, category, and name, and then retrieves the numeric value of a specific character.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/unicode.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
import unicodedata

u = chr(233) + chr(0x0bf2) + chr(3972) + chr(6000) + chr(13231)

for i, c in enumerate(u):
    print(i, '%04x' % ord(c), unicodedata.category(c), end=" ")
    print(unicodedata.name(c))

# Get numeric value of second character
print(unicodedata.numeric(u[1]))
```

----------------------------------------

TITLE: Defining CancelledError Exception in Python
DESCRIPTION: Defines the CancelledError exception, which is raised when an asyncio Task is cancelled, and notes its change in version 3.8.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-exceptions.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
.. exception:: CancelledError

   The operation has been cancelled.

   This exception can be caught to perform custom operations
   when asyncio Tasks are cancelled.  In almost all situations the
   exception must be re-raised.

   .. versionchanged:: 3.8

      :exc:`CancelledError` is now a subclass of :class:`BaseException` rather than :class:`Exception`.
```

----------------------------------------

TITLE: Accessing Path Drive Information - pathlib Python
DESCRIPTION: The code snippet demonstrates how to access the drive component of a Windows path using `PureWindowsPath` from the pathlib module. The path is initialized with a UNC share string, which upon querying the `drive` attribute, returns the host and share information.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> PureWindowsPath('//host/share/foo.txt').drive
'\\host\share'
```

----------------------------------------

TITLE: Adding Type Parameter Defaults to Generator Classes
DESCRIPTION: Enhancement that adds type parameter defaults to typing.Generator and typing.AsyncGenerator classes to simplify type annotations.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.13.0b1.rst#2025-04-21_snippet_5

LANGUAGE: rst
CODE:
```
.. date: 2024-05-06-08-23-01
.. gh-issue: 118648
.. nonce: OVA3jJ
.. section: Library

Add type parameter defaults to :class:`typing.Generator` and
:class:`typing.AsyncGenerator`.
```

----------------------------------------

TITLE: Generating Tokens from Unicode Strings with generate_tokens()
DESCRIPTION: This function tokenizes a source by reading unicode strings instead of bytes. It expects a readline callable returning str objects and yields named tuples with token information.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tokenize.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
generate_tokens(readline)
```

----------------------------------------

TITLE: Updated __aiter__ Protocol Implementation
DESCRIPTION: Modified the asynchronous iterator protocol to return the iterator directly instead of an awaitable that resolves to an iterator. The old behavior now triggers a PendingDeprecationWarning.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.6.0a2.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
__aiter__
```

----------------------------------------

TITLE: Setting Message Flags for mboxMessage in Python
DESCRIPTION: Sets the flags specified in the flags parameter and unsets all others. The flags parameter should be a concatenation of zero or more occurrences of 'R', 'O', 'D', 'F', and 'A' in any order.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/mailbox.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
set_flags(flags)
```

----------------------------------------

TITLE: Setting From Line for mboxMessage in Python
DESCRIPTION: Sets the "From " line for an mboxMessage. The from_ parameter should be specified without leading "From " or trailing newline. Optionally, time_ can be provided to format and append a timestamp.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/mailbox.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
set_from(from_, time_=None)
```

----------------------------------------

TITLE: Defining BaseHandler Class for HTTP Request Handling in Python
DESCRIPTION: BaseHandler is the base class for all registered handlers, handling the basic mechanics of registration.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
class BaseHandler():
```

----------------------------------------

TITLE: Block Threads (Acquire GIL) C Macro Equivalent
DESCRIPTION: This macro expands to C code that restores the previously saved thread state and reacquires the Global Interpreter Lock (GIL). It is functionally equivalent to the `PyEval_RestoreThread(_save);` part of `Py_END_ALLOW_THREADS` but without the closing brace. It is used in more complex scenarios where the block structure is handled externally.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/init.rst#_snippet_30

LANGUAGE: C
CODE:
```
PyEval_RestoreThread(_save);
```

----------------------------------------

TITLE: Decimal Mathematical Operations
DESCRIPTION: Demonstrates basic mathematical operations with Decimal objects, including addition, subtraction, multiplication, division, and exponentiation
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
a = decimal.Decimal('35.72')
b = decimal.Decimal('1.73')
a+b
a-b
a*b
a/b
a ** 2
```

----------------------------------------

TITLE: Automatic Field Numbering in String Formatting in Python
DESCRIPTION: Demonstrates the new feature of automatic field numbering in format strings, eliminating the need for explicit numbering.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.1.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> 'Sir {} of {}'.format('Gallahad', 'Camelot')
'Sir Gallahad of Camelot'
```

----------------------------------------

TITLE: Decrement Reference Count Python C API C
DESCRIPTION: Decrements the strong reference count of a Python object, indicating the reference is no longer used. If the count reaches 0, the object's deallocation function is called. This function has no effect on immortal objects. The object must not be NULL; use Py_XDECREF if it might be NULL. Be cautious of side effects from deallocation functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/refcounting.rst#_snippet_7

LANGUAGE: C
CODE:
```
void Py_DECREF(PyObject *o)
```

----------------------------------------

TITLE: Using format_string Function in Python
DESCRIPTION: Formats a number according to current LC_NUMERIC locale settings. Supports floating-point formatting and optional grouping.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/locale.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
format_string(format, val, grouping=False, monetary=False)
```

----------------------------------------

TITLE: Deprecated NamedTuple Creation - Python
DESCRIPTION: Example of deprecated keyword argument syntax for creating NamedTuple classes, which will be removed in Python 3.15. Developers should use class-based syntax or functional syntax instead.
SOURCE: https://github.com/python/cpython/blob/main/Doc/deprecations/pending-removal-in-3.15.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
Point = NamedTuple("Point", x=int, y=int)
```

----------------------------------------

TITLE: Defining abstract staticmethod in ABC
DESCRIPTION: This code snippet demonstrates how to define an abstract staticmethod within an abstract base class (ABC) in Python. The @staticmethod decorator is used in conjunction with @abstractmethod to enforce that subclasses implement the staticmethod.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/abc.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
class C(ABC):
    @staticmethod
    @abstractmethod
    def my_abstract_staticmethod(arg):
        ...

```

----------------------------------------

TITLE: Printf-style Bytes Formatting in Python
DESCRIPTION: Shows how to use printf-style formatting with bytes objects using the % operator and dictionary mapping.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_66

LANGUAGE: python
CODE:
```
>>> print(b'%(language)s has %(number)03d quote types.' %
...       {b'language': b"Python", b"number": 2})
b'Python has 002 quote types.'
```

----------------------------------------

TITLE: Defining Iterator Protocol Functions in C for CPython
DESCRIPTION: The code snippet provides the type function declarations for iterator support in CPython C extensions, defining handlers that correspond to Python's `__iter__` and `__next__` methods. These functions should ensure to return new references and manage exceptions appropriately, without dependencies. Only one parameter representing the instance is required, and the functions are expected to return either an iterator or next element reference.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/newtypes.rst#2025-04-21_snippet_15

LANGUAGE: C
CODE:
```
/* Iterators */
getiterfunc tp_iter;
iternextfunc tp_iternext;
```

----------------------------------------

TITLE: Examples Using Combined TypeVar and TypeVarTuple
DESCRIPTION: Provides concrete examples of instantiating a class defined with both a normal TypeVar and a TypeVarTuple, showing how type arguments are applied.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_119

LANGUAGE: python
CODE:
```
class Height: ...
class Width: ...

float_array_1d: Array[float, Height] = Array()     # Totally fine
int_array_2d: Array[int, Height, Width] = Array()  # Yup, fine too
```

----------------------------------------

TITLE: Defining InvalidStateError Exception in Python
DESCRIPTION: Defines the InvalidStateError exception that may be raised to indicate an invalid internal state of Task or Future in asyncio.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-exceptions.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
.. exception:: InvalidStateError

   Invalid internal state of :class:`Task` or :class:`Future`.

   Can be raised in situations like setting a result value for a
   *Future* object that already has a result value set.
```

----------------------------------------

TITLE: Managing Process IDs and Group IDs in Python
DESCRIPTION: Functions to retrieve process-related IDs such as effective user, group IDs, and parent process ID, which are essential for managing processes in Unix environments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
.. function:: getegid()

   Return the effective group id of the current process.  This corresponds to the
   "set id" bit on the file being executed in the current process.

   .. availability:: Unix, not WASI.
```

LANGUAGE: Python
CODE:
```
.. function:: geteuid()

   .. index:: single: user; effective id

   Return the current process's effective user id.

   .. availability:: Unix, not WASI.
```

LANGUAGE: Python
CODE:
```
.. function:: getgid()

   .. index:: single: process; group

   Return the real group id of the current process.

   .. availability:: Unix.

      The function is a stub on WASI, see :ref:`wasm-availability` for more
      information.
```

LANGUAGE: Python
CODE:
```
.. function:: getpid()

   .. index:: single: process; id

   Return the current process id.

   The function is a stub on WASI, see :ref:`wasm-availability` for more
   information.
```

LANGUAGE: Python
CODE:
```
.. function:: getppid()

   .. index:: single: process; id of parent

   Return the parent's process id.  When the parent process has exited, on Unix
   the id returned is the one of the init process (1), on Windows it is still
   the same id, which may be already reused by another process.

   .. availability:: Unix, Windows, not WASI.

   .. versionchanged:: 3.2
      Added support for Windows.
```

LANGUAGE: Python
CODE:
```
.. function:: getgroups()

   Return list of supplemental group ids associated with the current process.

   .. availability:: Unix, not WASI.
```

----------------------------------------

TITLE: Deprecating Setting __cached__ on Modules in Python
DESCRIPTION: Setting the __cached__ attribute directly on a module is deprecated. The import system will cease to set or consider this attribute in Python 3.14.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_42

LANGUAGE: Python
CODE:
```
module.__cached__ = 'path/to/cache.pyc'
```

----------------------------------------

TITLE: Combining singledispatchmethod with classmethod in Python
DESCRIPTION: Demonstrates how to nest @singledispatchmethod with other decorators like @classmethod. The single dispatch decorator must be the outermost decorator for the register functionality to work correctly.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
class Negator:
    @singledispatchmethod
    @classmethod
    def neg(cls, arg):
        raise NotImplementedError("Cannot negate a")

    @neg.register
    @classmethod
    def _(cls, arg: int):
        return -arg

    @neg.register
    @classmethod
    def _(cls, arg: bool):
        return not arg
```

----------------------------------------

TITLE: Implementing dst() Method with DST Transition Logic in Python
DESCRIPTION: This snippet demonstrates a more complex implementation of the dst() method that accounts for daylight saving time transitions. It checks if the given datetime falls within the DST period and returns the appropriate offset.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_27

LANGUAGE: python
CODE:
```
def dst(self, dt):
    # Code to set dston and dstoff to the time zone's DST
    # transition times based on the input dt.year, and expressed
    # in standard local time.

    if dston <= dt.replace(tzinfo=None) < dstoff:
        return timedelta(hours=1)
    else:
        return timedelta(0)
```

----------------------------------------

TITLE: Importing a Pointer from a PyCapsule
DESCRIPTION: Imports a pointer to a C object from the specified capsule attribute in a module, returning the encapsulated pointer on success.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/capsule.rst#2025-04-21_snippet_4

LANGUAGE: C
CODE:
```
.. c:function:: void* PyCapsule_Import(const char *name, int no_block)

   Import a pointer to a C object from a capsule attribute in a module.  The
   *name* parameter should specify the full name to the attribute, as in
   ``module.attribute``.  The *name* stored in the capsule must match this
   string exactly.

   Return the capsule's internal *pointer* on success.  On failure, set an
   exception and return ``NULL``.

   .. versionchanged:: 3.3
      *no_block* has no effect anymore.
```

----------------------------------------

TITLE: PY_SSIZE_T_CLEAN Macro Requirement in C API
DESCRIPTION: The `PY_SSIZE_T_CLEAN` macro must now be defined to use `PyArg_ParseTuple` and `Py_BuildValue` formats that use `#` (e.g., `es#`, `s#`, `u#`). This is required for correct handling of sized strings with the `Py_ssize_t` type, improving argument parsing safety and consistency.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a1.rst#2025-04-21_snippet_76

LANGUAGE: c
CODE:
```
"The ``PY_SSIZE_T_CLEAN`` macro must now be defined to use
:c:func:`PyArg_ParseTuple` and :c:func:`Py_BuildValue` formats which use
``#``: ``es#``, ``et#``, ``s#``, ``u#``, ``y#``, ``z#``, ``U#`` and ``Z#``. See
:ref:`Parsing arguments and building values <arg-parsing>` and the
:pep:`353`."
```

----------------------------------------

TITLE: Enabling Hostname Checking with SSLContext
DESCRIPTION: This code snippet illustrates how to enable hostname checking within an `SSLContext`. Hostname checking ensures that the hostname in the server's certificate matches the hostname used to connect, preventing man-in-the-middle attacks. The `check_hostname` attribute is set to `True`, and the `verify_mode` is set to `ssl.CERT_REQUIRED` to enforce certificate verification.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
import socket, ssl

context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
context.verify_mode = ssl.CERT_REQUIRED
context.check_hostname = True
context.load_default_certs()

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
ssl_sock = context.wrap_socket(s, server_hostname='www.verisign.com')
ssl_sock.connect(('www.verisign.com', 443))

```

----------------------------------------

TITLE: Adding dataclass parameter syntax
DESCRIPTION: Example of dataclass decorator usage with the new match_args parameter for controlling __match_args__ generation.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0b1.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
@dataclass(match_args=False)
class Example:
    field1: str
    field2: int
```

----------------------------------------

TITLE: Accessing Error Code String Names in Python
DESCRIPTION: Demonstrates how to use the errorcode dictionary to map an errno value to its string name. This is useful for translating numeric error codes to human-readable names.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/errno.rst#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
errno.errorcode[errno.EPERM]
```

----------------------------------------

TITLE: Creating a UnaryOp AST Node (Python)
DESCRIPTION: Shows how to manually instantiate an `ast.UnaryOp` node by providing its required child nodes (`ast.USub`, `ast.Constant`) and optional position attributes (`lineno`, `col_offset`). This illustrates the direct constructor usage for building ASTs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_1

LANGUAGE: python
CODE:
```
node = ast.UnaryOp(ast.USub(), ast.Constant(5, lineno=0, col_offset=0),
                         lineno=0, col_offset=0)
```

----------------------------------------

TITLE: Decimal Module Mathematical Functions
DESCRIPTION: Demonstrates new mathematical functions in the decimal module, including exponential, natural logarithm, and base-10 logarithm operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_33

LANGUAGE: python
CODE:
```
from decimal import Decimal
print(Decimal(1).exp())
print(Decimal("2.7182818").ln())
print(Decimal(1000).log10())
```

----------------------------------------

TITLE: Monthly Calendar as a Matrix - Python
DESCRIPTION: This function returns a matrix representation of a month's calendar where weeks are represented as rows, facilitating easier manipulations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/calendar.rst#2025-04-21_snippet_15

LANGUAGE: Python
CODE:
```
.. function:: monthcalendar(year, month)
```

----------------------------------------

TITLE: Setting File Descriptor to Cbreak Mode in Python
DESCRIPTION: The setcbreak function changes the mode of a file descriptor to cbreak. It clears ECHO and ICANON flags and sets minimum input to 1 byte with no delay.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tty.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
def setcbreak(fd, when=termios.TCSAFLUSH):
```

----------------------------------------

TITLE: Handling Raw Strings with Odd Number of Backslashes in Python
DESCRIPTION: Shows workarounds for ending a raw string with an odd number of backslashes in Python, which normally causes a SyntaxError.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_32

LANGUAGE: python
CODE:
```
>>> 'C:\\this\\will\\work\\'
'C:\\this\\will\\work\\'

>>> r'C:\this\will\work' '\\'
'C:\\this\\will\\work\\'

>>> os.path.join(r'C:\this\will\work', '')
'C:\\this\\will\\work\\'
```

----------------------------------------

TITLE: Handling Ambiguous Negative Numbers with argparse (Python)
DESCRIPTION: Demonstrates how argparse interprets arguments that look like negative numbers when negative number options are present, resulting in an error when they are not recognized as options. The example shows the command line input and the resulting usage message and error.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_69

LANGUAGE: python
CODE:
```
parser.parse_args(['-1', '-1'])
```

----------------------------------------

TITLE: Sending Configuration to Logging Socket Server in Python
DESCRIPTION: This code snippet demonstrates how to send a configuration to a socket server started by the listen() function. It involves reading a configuration file and sending it as bytes preceded by a length string.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.config.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
struct.pack('>L', n)
```

----------------------------------------

TITLE: Constructing URL from Tuple with urlunparse Function in Python
DESCRIPTION: The urlunparse function constructs a URL from a tuple returned by urlparse(). It accepts a six-item iterable as an argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.parse.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
urlunparse(parts)
```

----------------------------------------

TITLE: Use Stateful Extraction Filter with tarfile.extractall - Python
DESCRIPTION: This example demonstrates how to use a custom stateful filter (represented by the `StatefulFilter` class) with `tarfile.extractall`. The filter is used within a `with` statement, relying on the filter object's `__enter__` method to return the callable used by `extractall`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_23

LANGUAGE: Python
CODE:
```
with StatefulFilter() as filter_func:
        tar.extractall(path, filter=filter_func)
```

----------------------------------------

TITLE: Initializing Fraction Instances in Python
DESCRIPTION: Demonstrates various ways to create Fraction instances using different constructor forms and input types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/fractions.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> from fractions import Fraction
>>> Fraction(16, -10)
Fraction(-8, 5)
>>> Fraction(123)
Fraction(123, 1)
>>> Fraction()
Fraction(0, 1)
>>> Fraction('3/7')
Fraction(3, 7)
>>> Fraction(' -3/7 ')
Fraction(-3, 7)
>>> Fraction('1.414213 \t\n')
Fraction(1414213, 1000000)
>>> Fraction('-.125')
Fraction(-1, 8)
>>> Fraction('7e-6')
Fraction(7, 1000000)
>>> Fraction(2.25)
Fraction(9, 4)
>>> Fraction(1.1)
Fraction(2476979795053773, 2251799813685248)
>>> from decimal import Decimal
>>> Fraction(Decimal('1.1'))
Fraction(11, 10)
```

----------------------------------------

TITLE: Ensuring Treeview Item Visibility in Python
DESCRIPTION: Ensures that the specified item is visible in the Treeview by scrolling if necessary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_43

LANGUAGE: python
CODE:
```
see(item)
```

----------------------------------------

TITLE: Curses insertln Method Definition
DESCRIPTION: The insertln method inserts a blank line under the cursor, shifting all subsequent lines down by one line. This creates a new, empty line at the cursor's position.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_73

LANGUAGE: python
CODE:
```
.. method:: window.insertln()

   Insert a blank line under the cursor. All following lines are moved down by one
   line.
```

----------------------------------------

TITLE: Extended Weak Reference Implementation
DESCRIPTION: Implementation of a custom weak reference class that adds a counter and additional annotations to the basic ref functionality.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/weakref.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
import weakref

class ExtendedRef(weakref.ref):
    def __init__(self, ob, callback=None, /, **annotations):
        super().__init__(ob, callback)
        self.__counter = 0
        for k, v in annotations.items():
            setattr(self, k, v)

    def __call__(self):
        """Return a pair containing the referent and the number of
        times the reference has been called.
        """
        ob = super().__call__()
        if ob is not None:
            self.__counter += 1
            ob = (ob, self.__counter)
        return ob
```

----------------------------------------

TITLE: Retrieving Level Names Mapping in Python Logging
DESCRIPTION: Returns a mapping from level names to their corresponding logging levels. The mapping is copied from an internal mapping on each call to this function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
def getLevelNamesMapping():
```

----------------------------------------

TITLE: Verifying Floating-Point Representation with Integer Ratio in Python
DESCRIPTION: Shows how to recreate the original floating-point value from its integer ratio representation, confirming the exactness of the representation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/floatingpoint.rst#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
>>> x == 3537115888337719 / 1125899906842624
True
```

----------------------------------------

TITLE: Setting OSError with Multiple Filename Objects in C
DESCRIPTION: This function sets an OSError with two filename attributes. It extends `PyErr_SetExcFromWindowsErrWithFilenameObject` by accepting two filename objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/exceptions.rst#2025-04-21_snippet_21

LANGUAGE: C
CODE:
```
"PyObject* PyErr_SetExcFromWindowsErrWithFilenameObjects(PyObject *type, int ierr, PyObject *filename, PyObject *filename2)"
```

----------------------------------------

TITLE: Loading and Inspecting Entry Point Target (Python)
DESCRIPTION: Shows how to use the `.load()` method on an `EntryPoint` object. This method imports the module and retrieves the callable target (function or class) specified by the entry point's `.value`. The snippet then shows the loaded target object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_12

LANGUAGE: Python Console
CODE:
```
>>> main = wheel.load()  # doctest: +SKIP
>>> main  # doctest: +SKIP
<function main at 0x103528488>
```

----------------------------------------

TITLE: Defining a Basic Custom Type in C for Python
DESCRIPTION: This snippet shows the minimal implementation of a custom type 'Custom' in a C extension module. It defines the object structure, type object, and module initialization function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/newtypes_tutorial.rst#2025-04-21_snippet_0

LANGUAGE: C
CODE:
```
typedef struct {
    PyObject_HEAD
} CustomObject;

static PyTypeObject CustomType = {
    .ob_base = PyVarObject_HEAD_INIT(NULL, 0)
    .tp_name = "custom.Custom",
    .tp_doc = PyDoc_STR("Custom objects"),
    .tp_basicsize = sizeof(CustomObject),
    .tp_itemsize = 0,
    .tp_flags = Py_TPFLAGS_DEFAULT,
    .tp_new = PyType_GenericNew,
};

PyMODINIT_FUNC
PyInit_custom(void)
{
    PyObject *m;
    m = PyModule_Create(&custommodule);
    if (m == NULL)
        return NULL;

    if (PyType_Ready(&CustomType) < 0)
        return NULL;

    if (PyModule_AddObjectRef(m, "Custom", (PyObject *) &CustomType) < 0) {
        Py_DECREF(m);
        return NULL;
    }

    return m;
}
```

----------------------------------------

TITLE: Creating a Delta Object in C
DESCRIPTION: This function returns a datetime.timedelta object representing the given number of days, seconds and microseconds. Normalization is performed so that the resulting number of microseconds and seconds lie in the ranges documented for datetime.timedelta objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/datetime.rst#2025-04-21_snippet_26

LANGUAGE: c
CODE:
```
"PyObject* PyDelta_FromDSU(int days, int seconds, int useconds)"
```

----------------------------------------

TITLE: Defining Class with Implicit Structural Subtyping in Python
DESCRIPTION: This snippet demonstrates structural subtyping (static duck-typing) introduced in PEP 544. The `Bucket` class implements the methods required by `Iterable` but does not explicitly inherit from it. A type checker recognizes `Bucket` as a valid subtype of `Iterable` based on its structure (the presence of `__iter__`).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_47

LANGUAGE: python
CODE:
```
from collections.abc import Iterator, Iterable

class Bucket:  # Note: no base classes
    ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[int]: ...

def collect(items: Iterable[int]) -> int: ...
result = collect(Bucket())  # Passes type check
```

----------------------------------------

TITLE: Implementing Prime Number Checking with Concurrent Execution in Python
DESCRIPTION: This code snippet demonstrates how to use concurrent.futures.ProcessPoolExecutor to check if a list of numbers are prime. It defines an is_prime() function and uses a process pool to execute it concurrently for multiple numbers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/concurrent.futures.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
def is_prime(n):
    if n < 2:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False

    sqrt_n = int(math.floor(math.sqrt(n)))
    for i in range(3, sqrt_n + 1, 2):
        if n % i == 0:
            return False
    return True

def main():
    with concurrent.futures.ProcessPoolExecutor() as executor:
        for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)):
            print('%d is prime: %s' % (number, prime))

if __name__ == '__main__':
    main()
```

----------------------------------------

TITLE: TCP Echo Client with Asyncio Streams
DESCRIPTION: This code snippet demonstrates a simple TCP echo client using asyncio streams. It establishes a connection to a server, sends a message, receives the echoed message, and then closes the connection. The example showcases the use of `asyncio.open_connection`, `writer.write`, `writer.drain`, `reader.read`, `writer.close`, and `writer.wait_closed`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-stream.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import asyncio

async def tcp_echo_client(message):
    reader, writer = await asyncio.open_connection(
        '127.0.0.1', 8888)

    print(f'Send: {message!r}')
    writer.write(message.encode())
    await writer.drain()

    data = await reader.read(100)
    print(f'Received: {data.decode()!r}')

    print('Close the connection')
    writer.close()
    await writer.wait_closed()

asyncio.run(tcp_echo_client('Hello World!'))
```

----------------------------------------

TITLE: Creating MIMEImage Objects in Python
DESCRIPTION: Creates MIME objects for image data. Can automatically detect common image formats (jpeg, png, gif, etc.) or accepts an explicit subtype. Uses base64 encoding by default.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.mime.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
MIMEImage(_imagedata, _subtype=None, \
                     _encoder=email.encoders.encode_base64, \
                    *, policy=compat32, **_params)
```

----------------------------------------

TITLE: Parsing Character References
DESCRIPTION: Shows parsing of named and numeric character references, converting them to equivalent characters
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/html.parser.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
parser.feed('&gt;&#62;&#x3E;')
```

----------------------------------------

TITLE: Getting Test Case Names in Python (unittest)
DESCRIPTION: The method 'getTestCaseNames' returns a sorted sequence of method names found in a specified test case class, which must be a subclass of 'TestCase'. This allows dynamic retrieval of test methods for execution.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_37

LANGUAGE: Python
CODE:
```
.. method:: getTestCaseNames(testCaseClass)

   Return a sorted sequence of method names found within *testCaseClass*;
   this should be a subclass of :class:`TestCase`.
```

----------------------------------------

TITLE: Sending Logging Configuration to Server in Python
DESCRIPTION: This Python script sends a logging configuration file to a logging server. It reads the file and transmits it over a socket connection to the server listening on port 9999.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
#!/usr/bin/env python
import socket, sys, struct

with open(sys.argv[1], 'rb') as f:
    data_to_send = f.read()

HOST = 'localhost'
PORT = 9999
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print('connecting...')
s.connect((HOST, PORT))
print('sending config...')
s.send(struct.pack('>L', len(data_to_send)))
s.send(data_to_send)
s.close()
print('complete')
```

----------------------------------------

TITLE: String Formatting with # Specifier in Python
DESCRIPTION: Shows new string formatting capabilities using the # format specifier for various numeric types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
format(20, '#o')
'0o24'
format(12.34, '#5.0f')
'  12.'
```

----------------------------------------

TITLE: Spawning Terminal Session Recording Script
DESCRIPTION: A comprehensive example demonstrating how to use the pty module to record a terminal session, with options for appending to file and selecting shell/interpreter
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pty.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import argparse
import os
import pty
import sys
import time

parser = argparse.ArgumentParser()
parser.add_argument('-a', dest='append', action='store_true')
parser.add_argument('-p', dest='use_python', action='store_true')
parser.add_argument('filename', nargs='?', default='typescript')
options = parser.parse_args()

shell = sys.executable if options.use_python else os.environ.get('SHELL', 'sh')
filename = options.filename
mode = 'ab' if options.append else 'wb'

with open(filename, mode) as script:
    def read(fd):
        data = os.read(fd, 1024)
        script.write(data)
        return data

    print('Script started, file is', filename)
    script.write(('Script started on %s\n' % time.asctime()).encode())

    pty.spawn(shell, read)

    script.write(('Script done on %s\n' % time.asctime()).encode())
    print('Script done, file is', filename)
```

----------------------------------------

TITLE: Simple Arithmetic Expression Parser with Python AST Generation
DESCRIPTION: A similar grammar to the previous example, but targeting Python AST objects instead of C-based AST. This shows how to write grammar actions for generating Python AST nodes.
SOURCE: https://github.com/python/cpython/blob/main/InternalDocs/parser.md#2025-04-23_snippet_11

LANGUAGE: PEG
CODE:
```
start[ast.Module]: a=expr_stmt* ENDMARKER { ast.Module(body=a or [] }
expr_stmt: a=expr NEWLINE { ast.Expr(value=a, EXTRA) }

expr:
    | l=expr '+' r=term { ast.BinOp(left=l, op=ast.Add(), right=r, EXTRA) }
    | l=expr '-' r=term { ast.BinOp(left=l, op=ast.Sub(), right=r, EXTRA) }
    | term

term:
    | l=term '*' r=factor { ast.BinOp(left=l, op=ast.Mult(), right=r, EXTRA) }
    | l=term '/' r=factor { ast.BinOp(left=l, op=ast.Div(), right=r, EXTRA) }
    | factor

factor:
    | '(' e=expr ')' { e }
    | atom

atom:
    | NAME
    | NUMBER
```

----------------------------------------

TITLE: Finding Process Base Address (Windows) - Python
DESCRIPTION: This snippet represents a function call used on Windows to find the base address of the Python process's main executable or DLL module. It likely involves enumerating process modules using Windows API functions (CreateToolhelp32Snapshot, Module32First/Next) and searching for a module whose name contains 'python3'. The base address is required to locate the PyRuntime structure.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/remote_debugging.rst#_snippet_3

LANGUAGE: Python
CODE:
```
find_process_base_address(
    pid, name_contains="python3"
)
```

----------------------------------------

TITLE: Implementing SysLogHandler with BOM in Python
DESCRIPTION: This snippet explains how to implement a SysLogHandler that inserts a UTF-8 Byte Order Mark (BOM) into messages, following RFC 5424 requirements. It involves attaching a Formatter with a specific format string to the SysLogHandler.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_35

LANGUAGE: python
CODE:
```
# Attach a Formatter instance to your SysLogHandler instance, with a format string such as:
'ASCII section\ufeffUnicode section'

# The Unicode code point U+FEFF, when encoded using UTF-8, will be
# encoded as a UTF-8 BOM -- the byte-string b'\xef\xbb\xbf'.
```

----------------------------------------

TITLE: Py_TPFLAGS_HAVE_GC Macro
DESCRIPTION: This macro indicates that the object supports garbage collection. If set, instances must be created using PyObject_GC_New and destroyed using PyObject_GC_Del.  It also implies the presence of tp_traverse and tp_clear fields.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/typeobj.rst#2025-04-21_snippet_17

LANGUAGE: C
CODE:
```
".. c:macro:: Py_TPFLAGS_HAVE_GC\n\n      This bit is set when the object supports garbage collection.  If this bit\n      is set, instances must be created using :c:macro:`PyObject_GC_New` and\n      destroyed using :c:func:`PyObject_GC_Del`.  More information in section\n      :ref:`supporting-cycle-detection`.  This bit also implies that the\n      GC-related fields :c:member:`~PyTypeObject.tp_traverse` and :c:member:`~PyTypeObject.tp_clear` are present in\n      the type object.\n\n      **Inheritance:**\n\n      Group: :c:macro:`Py_TPFLAGS_HAVE_GC`, :c:member:`~PyTypeObject.tp_traverse`, :c:member:`~PyTypeObject.tp_clear`\n\n      The :c:macro:`Py_TPFLAGS_HAVE_GC` flag bit is inherited\n      together with the :c:member:`~PyTypeObject.tp_traverse` and :c:member:`~PyTypeObject.tp_clear`\n      fields, i.e.  if the :c:macro:`Py_TPFLAGS_HAVE_GC` flag bit is\n      clear in the subtype and the :c:member:`~PyTypeObject.tp_traverse` and\n      :c:member:`~PyTypeObject.tp_clear` fields in the subtype exist and have ``NULL``\n      values."
```

----------------------------------------

TITLE: Using ContextVar.name attribute in Python contextvars
DESCRIPTION: Implementation of the name attribute for contextvars.ContextVar objects. This provides access to the name that was given when creating the context variable.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0a1.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
import contextvars

# Create a context variable with a name
my_var = contextvars.ContextVar('my_variable_name')

# Now you can access the name
print(my_var.name)  # Outputs: my_variable_name
```

----------------------------------------

TITLE: Encode String with 'backslashreplace' Error Handling in Python
DESCRIPTION: Demonstrates encoding a string containing non-ASCII characters ('ß', '♬') into 'ascii' using the 'backslashreplace' error handler. This handler replaces characters that cannot be encoded with backslashed escape sequences (e.g., \xdf, \u266c).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/codecs.rst#_snippet_8

LANGUAGE: Python
CODE:
```
'German ß, ♬'.encode(encoding='ascii', errors='backslashreplace')
```

----------------------------------------

TITLE: Printing user name from __main__
DESCRIPTION: This function attempts to print the value of the `my_name` variable from the `__main__` module. It first checks if the variable is defined using the `did_user_define_their_name()` function. If `my_name` is not defined, it raises a ValueError exception. Otherwise, it prints the value of `__main__.my_name`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/__main__.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def print_user_name():
    if not did_user_define_their_name():
        raise ValueError('Define the variable `my_name`!')

    print(__main__.my_name)
```

----------------------------------------

TITLE: Using dataclass_transform on a Base Class (Python)
DESCRIPTION: This snippet shows how applying `@dataclass_transform` to a base class `ModelBase` affects its subclasses. Type checkers will infer dataclass-like behavior for classes inheriting from `ModelBase`, such as `CustomerModel`, including the presence of an `__init__` method derived from the attribute type hints.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_170

LANGUAGE: Python
CODE:
```
@dataclass_transform()
class ModelBase: ...

class CustomerModel(ModelBase):
    id: int
    name: str
```

----------------------------------------

TITLE: Creating a subprocess with asyncio and reading its output in Python
DESCRIPTION: This example demonstrates how to create a subprocess using asyncio.create_subprocess_exec, redirect its standard output to a pipe, read from that pipe, and wait for the subprocess to exit. The code runs a Python interpreter to get the current datetime.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-subprocess.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
import asyncio
import sys

async def get_date():
    code = 'import datetime; print(datetime.datetime.now())'

    # Create the subprocess; redirect the standard output
    # into a pipe.
    proc = await asyncio.create_subprocess_exec(
        sys.executable, '-c', code,
        stdout=asyncio.subprocess.PIPE)

    # Read one line of output.
    data = await proc.stdout.readline()
    line = data.decode('ascii').rstrip()

    # Wait for the subprocess exit.
    await proc.wait()
    return line

date = asyncio.run(get_date())
print(f"Current date: {date}")
```

----------------------------------------

TITLE: Getting Content-Type Parameter Value in Python
DESCRIPTION: This function returns the value of a specified parameter from the Content-Type header. It supports RFC 2231 encoding and unquotes the result by default, offering a refined approach to retrieve parameter values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.compat32-message.rst#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
".. method:: get_param(param, failobj=None, header='content-type', unquote=True)\n\n      Return the value of the :mailheader:`Content-Type` header\'s parameter\n      *param* as a string."
```

----------------------------------------

TITLE: Compute Object Hash (C API)
DESCRIPTION: Computes and returns the hash value of a Python object `o`. Returns -1 on failure. This is the C API equivalent of the Python `hash(o)` expression. The return type `Py_hash_t` is a signed integer the same size as `Py_ssize_t`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/object.rst#_snippet_33

LANGUAGE: c
CODE:
```
Py_hash_t PyObject_Hash(PyObject *o)
```

----------------------------------------

TITLE: Example script for ModuleFinder usage - Python
DESCRIPTION: An example script demonstrating how to utilize the ModuleFinder class to analyze a script named 'bacon.py' and report the loaded and missing modules.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/modulefinder.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
from modulefinder import ModuleFinder

finder = ModuleFinder()
finder.run_script('bacon.py')

print('Loaded modules:')
for name, mod in finder.modules.items():
    print('%s: ' % name, end='')
    print(','.join(list(mod.globalnames.keys())[:3]))

print('-'*50)
print('Modules not imported:')
print('\n'.join(finder.badmodules.keys()))
```

----------------------------------------

TITLE: Defining xmlcharrefreplace_errors Function Python
DESCRIPTION: Implements the 'xmlcharrefreplace' error handling for text encoding. This function replaces unencodable characters with an appropriate XML/HTML numeric character reference (decimal form of Unicode code point, e.g., &#num;).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/codecs.rst#_snippet_16

LANGUAGE: Python
CODE:
```
xmlcharrefreplace_errors(exception)
```

----------------------------------------

TITLE: Checking readability of formatted representation (isreadable function) - Python
DESCRIPTION: The isreadable function determines if the formatted representation of an object can be reconstructed using eval. It always returns False for recursive objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pprint.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
def isreadable(object):
    Determine if the formatted representation of *object* is 'readable', or can be used to reconstruct the value using :func:`eval`.
```

----------------------------------------

TITLE: Handling Keyboard Interruption in Asyncio - Python
DESCRIPTION: This section describes how the asyncio module handles keyboard interruptions when the SIGINT signal is raised. It explains the process of canceling the main task upon receiving Ctrl-C and the associated cleanup mechanisms, ensuring graceful termination of async operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-runner.rst#2025-04-21_snippet_2



----------------------------------------

TITLE: Replace _PyUnicodeWriter_WriteASCIIString with PyUnicodeWriter_WriteUTF8 (C)
DESCRIPTION: The private C API function _PyUnicodeWriter_WriteASCIIString is deprecated. Use the public PyUnicodeWriter_WriteUTF8 function instead for writing ASCII strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_65

LANGUAGE: C
CODE:
```
_PyUnicodeWriter_WriteASCIIString(&writer, str)
```

LANGUAGE: C
CODE:
```
PyUnicodeWriter_WriteUTF8(writer, str)
```

----------------------------------------

TITLE: Extend Type Instance Layout - PyType_Type - C
DESCRIPTION: The type object for types themselves. This variable-sized type can now be safely extended using opaque instance memory and the new API (PEP 697).
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_59

LANGUAGE: C
CODE:
```
PyType_Type
```

----------------------------------------

TITLE: Converting PyLongObject to void pointer in C
DESCRIPTION: The 'PyLong_AsVoidPtr' function converts a python integer PyLongObject to a C void pointer, unsuitable if not created with PyLong_FromVoidPtr, returning NULL on error.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/long.rst#2025-04-21_snippet_11

LANGUAGE: C
CODE:
```
void* PyLong_AsVoidPtr(PyObject *pylong)
```

----------------------------------------

TITLE: Using cmp_to_key for Sorting in Python
DESCRIPTION: Example showing how to use cmp_to_key to convert a comparison function for use with sorting functions like sorted().
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
sorted(iterable, key=cmp_to_key(locale.strcoll))  # locale-aware sort order
```

----------------------------------------

TITLE: Adding a New Header to Python EmailMessage
DESCRIPTION: This code snippet shows how to add a new header to an EmailMessage object after first deleting any existing headers with the same name. It ensures that the new header is the only one present with the given field name.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.message.rst#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
del msg['subject']
msg['subject'] = 'Message Two'
```

----------------------------------------

TITLE: Mapping Concatenation Operator to Function in Python
DESCRIPTION: This snippet relates the concatenation of sequences 'seq1 + seq2' to the function 'concat(seq1, seq2)', demonstrating how sequence operations correspond to functions in Python's operator module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/operator.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
``concat(seq1, seq2)``
```

----------------------------------------

TITLE: From Import Statement Translation
DESCRIPTION: Shows how 'from module import names' statements are translated to __import__() calls
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_33

LANGUAGE: python
CODE:
```
_temp = __import__('spam.ham', globals(), locals(), ['eggs', 'sausage'], 0)
eggs = _temp.eggs
saus = _temp.sausage
```

----------------------------------------

TITLE: Deque with Maximum Length in Collections Module
DESCRIPTION: Demonstrates the new maxlen parameter for deque, which restricts the size of the deque and automatically discards old items when the maximum length is reached.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
from collections import deque
dq = deque(maxlen=3)
dq.append(1); dq.append(2); dq.append(3)
dq.append(4)  # Discards first item (1)
```

----------------------------------------

TITLE: Decoding Email Header in Python using decode_header Function
DESCRIPTION: This example showcases the use of the decode_header function to decode a MIME-encoded email header without charset conversion. It returns a list of tuples where each contains a decoded string segment and its charset.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.header.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from email.header import decode_header
decode_header('=?iso-8859-1?q?p=F6stal?=')  # Output: [(b'p\xf6stal', 'iso-8859-1')]
```

----------------------------------------

TITLE: Defining DocTestParser Class in Python doctest Module
DESCRIPTION: DocTestParser is a class that extracts interactive examples from strings and creates DocTest objects. It parses docstrings to identify code examples and expected outputs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/doctest.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
class DocTestParser()
```

----------------------------------------

TITLE: Retrieving Mouse Events in Python curses
DESCRIPTION: Function to retrieve mouse event details after a KEY_MOUSE event. Returns a 5-tuple containing device ID, x/y/z coordinates, and button state flags.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
id, x, y, z, bstate = getmouse()
```

----------------------------------------

TITLE: Defining DISABLE Constant in sys.monitoring Python
DESCRIPTION: A special value intended to be returned by a monitoring callback function. Returning this value from a callback signals to the monitoring system that events should be temporarily disabled for the specific code location (instruction) where the event occurred. This is useful for performance optimization in monitoring tools.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sys.monitoring.rst#_snippet_10

LANGUAGE: Python
CODE:
```
DISABLE
```

----------------------------------------

TITLE: Mapping Containment Test Operator to Function in Python
DESCRIPTION: This mapping shows how to test for containment using 'obj in seq' which corresponds to the function 'contains(seq, obj)'. It illustrates how membership testing is represented in Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/operator.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
``contains(seq, obj)``
```

----------------------------------------

TITLE: Dictionary-based Format String in Python
DESCRIPTION: This code snippet explains how to use dictionary-based format strings in Python. It highlights the inclusion of mapping keys for variable substitution in strings using printf-style percent notation, where keys fetch corresponding values from a dictionary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_37

LANGUAGE: Python
CODE:
```
>>> print('%(language)s has %(number)03d quote types.' %
... {'language': "Python", "number": 2})
Python has 002 quote types.
```

----------------------------------------

TITLE: Using Memory-mapped File with Forked Processes
DESCRIPTION: This example demonstrates how to create an anonymous memory-mapped file and exchange data between parent and child processes in Python. It shows how to use mmap in a multiprocessing context to share information.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/mmap.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import mmap
import os

mm = mmap.mmap(-1, 13)
mm.write(b"Hello world!")

pid = os.fork()

if pid == 0:  # In a child process
    mm.seek(0)
    print(mm.readline())
    
    mm.close()
```

----------------------------------------

TITLE: Unpacking MIME Email Message to Files in Python
DESCRIPTION: Demonstrates how to extract and save the contents of a MIME message to a directory of files using Python's email module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.examples.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
# ../includes/email-unpack.py
```

----------------------------------------

TITLE: Using upper() Method in Python Bytes
DESCRIPTION: Shows how to convert all lowercase ASCII characters in a bytes sequence to uppercase.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_64

LANGUAGE: python
CODE:
```
>>> b'Hello World'.upper()
b'HELLO WORLD'
```

----------------------------------------

TITLE: Retrieving Treeview Children in Python
DESCRIPTION: Returns a list of children belonging to a specified item in the Treeview. If no item is specified, it returns the root children.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
get_children(item=None)
```

----------------------------------------

TITLE: Disable Default Help Option in argparse
DESCRIPTION: Demonstrates how to disable the default '-h/--help' option when initializing an ArgumentParser by setting `add_help=False`. Shows the resulting help output which omits the help option.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_19

LANGUAGE: Python
CODE:
```
import argparse

parser = argparse.ArgumentParser(prog='PROG', add_help=False)
parser.add_argument('--foo', help='foo help')
parser.print_help()
```

----------------------------------------

TITLE: Getting Buffer in BufferedProtocol for Python
DESCRIPTION: This method is called to allocate a new receive buffer. The sizehint parameter is the recommended minimum size for the returned buffer.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
BufferedProtocol.get_buffer(sizehint)
```

----------------------------------------

TITLE: Clearing Email Content in Python
DESCRIPTION: Two methods for clearing email content: clear() removes the payload and all headers, while clear_content() removes the payload and Content- headers only.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.message.rst#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
.. method:: clear()

   Remove the payload and all of the headers.


.. method:: clear_content()

   Remove the payload and all of the :mailheader:`!Content-` headers, leaving
   all other headers intact and in their original order.
```

----------------------------------------

TITLE: BZ2Decompressor Class for Incremental Decompression in Python
DESCRIPTION: The BZ2Decompressor class enables incremental decompression of bzip2-compressed data. It provides methods to decompress data in chunks and handles end-of-stream conditions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/bz2.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
BZ2Decompressor()
```

----------------------------------------

TITLE: Sorting by Time and Cumulative Time, Filtering, and Printing
DESCRIPTION: This code snippet sorts the profiling statistics primarily by time and secondarily by cumulative time, then filters the list down to 50% of its original size, and further filters it to only include lines containing 'init', and finally prints the resulting sub-sub-list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/profile.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
p.sort_stats(SortKey.TIME, SortKey.CUMULATIVE).print_stats(.5, 'init')
```

----------------------------------------

TITLE: mmap read method
DESCRIPTION: The `read([n])` method returns a bytes object containing up to *n* bytes from the current file position within the memory map. If *n* is omitted, None, or negative, it reads all bytes from the current position to the end of the mapping, updating the file position accordingly. The argument can be omitted or None since version 3.3
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/mmap.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
".. method:: read([n])\n\n   Return a :class:`bytes` containing up to *n* bytes starting from the\n   current file position. If the argument is omitted, ``None`` or negative,\n   return all bytes from the current file position to the end of the\n   mapping. The file position is updated to point after the bytes that were\n   returned.\n\n   .. versionchanged:: 3.3\n      Argument can be omitted or ``None``."
```

----------------------------------------

TITLE: SourceFileLoader Methods for Loading Source-based Modules
DESCRIPTION: Implementation of methods for loading Python source modules, including is_package, path_stats, set_data, and the deprecated load_module methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
is_package(fullname)

path_stats(path)

set_data(path, data)

load_module(name=None)
```

----------------------------------------

TITLE: Modifying a Registered File Descriptor in Poll Object in Python
DESCRIPTION: Method to modify the event mask of an already registered file descriptor in a polling object. Raises OSError with errno ENOENT if the file descriptor was never registered.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/select.rst#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
poll.modify(fd, eventmask)
```

----------------------------------------

TITLE: Using isalpha Method in Python bytes Objects
DESCRIPTION: Shows the isalpha() method which checks if all bytes in the sequence are alphabetical ASCII characters and the sequence is not empty.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_55

LANGUAGE: python
CODE:
```
>>> b'ABCabc'.isalpha()
True
>>> b'ABCabc1'.isalpha()
False
```

----------------------------------------

TITLE: Creating and Manipulating XML Elements in Python DOM
DESCRIPTION: Shows methods for creating and manipulating XML elements using the Document object, including createElement, createElementNS, createTextNode, createComment, and createProcessingInstruction.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.dom.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
doc.createElement(tagName)
doc.createElementNS(namespaceURI, tagName)
doc.createTextNode(data)
doc.createComment(data)
doc.createProcessingInstruction(target, data)
doc.createAttribute(name)
doc.createAttributeNS(namespaceURI, qualifiedName)
doc.getElementsByTagName(tagName)
doc.getElementsByTagNameNS(namespaceURI, localName)
```

----------------------------------------

TITLE: Reordering XML Element Attributes in ElementTree
DESCRIPTION: Function to reorder attributes in an ElementTree structure. It traverses all elements in the tree and sorts their attributes alphabetically, which is useful for creating deterministic XML output when canonical serialization isn't applicable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
def reorder_attributes(root):
    for el in root.iter():
        attrib = el.attrib
        if len(attrib) > 1:
            # adjust attribute order, e.g. by sorting
            attribs = sorted(attrib.items())
            attrib.clear()
            attrib.update(attribs)
```

----------------------------------------

TITLE: Base Dialog Class for Custom Dialogs in Tkinter - Python
DESCRIPTION: The `Dialog` class serves as a base for creating custom dialog windows. Users can override methods like `body` to construct the dialog interface and `buttonbox` for custom button layouts. This class is essential for extending dialog functionality in the `tkinter` framework.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dialog.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
.. class:: Dialog(parent, title=None)
   .. method:: body(master)
      Override to construct the dialog's interface and return the widget that
      should have initial focus.
   .. method:: buttonbox()
      Default behaviour adds OK and Cancel buttons. Override for custom button
      layouts.

```

----------------------------------------

TITLE: Quantizing Decimal Values Python
DESCRIPTION: Demonstrates using the `quantize` method to round a Decimal number to the exponent of another Decimal. The example shows rounding `Decimal('1.41421356')` to the scale of `Decimal('1.000')`, resulting in `Decimal('1.414')`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_25

LANGUAGE: python
CODE:
```
Decimal('1.41421356').quantize(Decimal('1.000'))
```

----------------------------------------

TITLE: Adding __parameters__ and __getitem__ to types.Union in Python
DESCRIPTION: Adds __parameters__ attribute and __getitem__ operator to the types.Union class to improve its functionality.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a1.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
# No code snippet provided, implementation details not shown
```

----------------------------------------

TITLE: Email Message Parsing and Address Access in Python
DESCRIPTION: Demonstrates how to parse email messages and access group and individual address information using the addresses and groups attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.3.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
>>> m2 = message_from_string(str(m))
>>> m2['to']
'Éric <foo@example.com>'
>>> m2['cc'].addresses
(Address(display_name='Bob', username='bob', domain='example.com'), Address(display_name='Sally', username='sally', domain='example.com'), Address(display_name='Bonzo', username='bonz', domain='laugh.com'))
```

----------------------------------------

TITLE: Defining a Generic NamedTuple (Backward Compatible)
DESCRIPTION: Provides the syntax for defining a generic `NamedTuple` that is compatible with Python versions prior to 3.11, requiring explicit use of `TypeVar` and inheriting from `Generic`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_139

LANGUAGE: python
CODE:
```
# For creating a generic NamedTuple on Python 3.11
T = TypeVar("T")

class Group(NamedTuple, Generic[T]):
    key: T
    group: list[T]
```

----------------------------------------

TITLE: Initializing BytesGenerator for Email Serialization
DESCRIPTION: Creates a BytesGenerator instance to write email messages to a file-like object, with options for handling message formatting and policy settings
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.generator.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
BytesGenerator(outfp, mangle_from_=None, maxheaderlen=None, *, policy=None)
```

----------------------------------------

TITLE: Setting Up an XMLRPC Server in Python
DESCRIPTION: This snippet sets up a basic XML-RPC server and client interaction using the xmlrpc.client and server modules. It shows how to invoke server methods and handle errors.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xmlrpc.server.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
server = ServerProxy(\"http://localhost:8000\")\n\ntry:\n    print(server.currentTime.getCurrentTime())\nexcept Error as v:\n    print(\"ERROR\", v)\n\nmulti = MultiCall(server)\nmulti.getData()\nmulti.pow(2,9)\nmulti.add(1,2)\ntry:\n    for response in multi():\n        print(response)\nexcept Error as v:\n    print(\"ERROR\", v)
```

----------------------------------------

TITLE: XML Pull Parsing with Price Filter - Python
DESCRIPTION: Example demonstrating how to use pulldom to parse an XML file, filter items by price, and expand matching nodes to access their full content.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.dom.pulldom.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from xml.dom import pulldom

doc = pulldom.parse('sales_items.xml')
for event, node in doc:
    if event == pulldom.START_ELEMENT and node.tagName == 'item':
        if int(node.getAttribute('price')) > 50:
            doc.expandNode(node)
            print(node.toxml())
```

----------------------------------------

TITLE: Mapping Division Operators to Functions in Python
DESCRIPTION: This entry documents the division operations, mapping 'a / b' to 'truediv(a, b)' and 'a // b' to 'floordiv(a, b)'. It clarifies the distinction between true division and floor division in operator function mapping.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/operator.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
``truediv(a, b)``
```

LANGUAGE: python
CODE:
```
``floordiv(a, b)``
```

----------------------------------------

TITLE: Registering Audit Hooks in Python
DESCRIPTION: Reference to the sys.addaudithook function which allows registering a callable to receive audit events when they're raised. This is the Python API for intercepting and handling audit events.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/audit_events.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
sys.addaudithook
```

----------------------------------------

TITLE: Using XMLPullParser for Incremental Parsing in Python
DESCRIPTION: Demonstrates how to use XMLPullParser for non-blocking, incremental parsing of XML data. This approach allows processing XML data as it becomes available.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
>>> parser = ET.XMLPullParser(['start', 'end'])
>>> parser.feed('<mytag>sometext')
>>> list(parser.read_events())
[('start', <Element 'mytag' at 0x7fa66db2be58>)]
>>> parser.feed(' more text</mytag>')
>>> for event, elem in parser.read_events():
...     print(event)
...     print(elem.tag, 'text=', elem.text)
...
end
mytag text= sometext more text
```

----------------------------------------

TITLE: Creating a New Pad with Curses in Python
DESCRIPTION: The `newpad` function creates a new pad data structure, returning it as a window object. Pads are similar to windows but can exceed screen size and require manual refreshes for changes to appear onscreen.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_16

LANGUAGE: Python
CODE:
```
.. function:: newpad(nlines, ncols)

   Create and return a pointer to a new pad data structure with the given number
   of lines and columns.  Return a pad as a window object.

   A pad is like a window, except that it is not restricted by the screen size, and
   is not necessarily associated with a particular part of the screen.  Pads can be
   used when a large window is needed, and only a part of the window will be on the
   screen at one time.  Automatic refreshes of pads (such as from scrolling or
   echoing of input) do not occur.  The :meth:`~window.refresh` and :meth:`~window.noutrefresh`
   methods of a pad require 6 arguments to specify the part of the pad to be
   displayed and the location on the screen to be used for the display. The
   arguments are *pminrow*, *pmincol*, *sminrow*, *smincol*, *smaxrow*, *smaxcol*; the *p*
   arguments refer to the upper left corner of the pad region to be displayed and
   the *s* arguments define a clipping box on the screen within which the pad region
   is to be displayed.
```

----------------------------------------

TITLE: Implementing Full Random Number Generation in Python
DESCRIPTION: This snippet defines a FullRandom class that extends Python's Random class to generate random floats with full precision. It uses bitwise operations and the math.ldexp function to create a more fine-grained distribution of floats.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/random.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
from random import Random
from math import ldexp

class FullRandom(Random):

    def random(self):
        mantissa = 0x10_0000_0000_0000 | self.getrandbits(52)
        exponent = -53
        x = 0
        while not x:
            x = self.getrandbits(32)
            exponent += x.bit_length() - 32
        return ldexp(mantissa, exponent)
```

----------------------------------------

TITLE: Getting Protocol Members with get_protocol_members in Python
DESCRIPTION: Illustrates how to use `get_protocol_members` to obtain a set of member names (methods and attributes) defined within a `Protocol` class. Raises `TypeError` if the input is not a Protocol.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_179

LANGUAGE: python
CODE:
```
from typing import Protocol, get_protocol_members
class P(Protocol):
    def a(self) -> str: ...
    b: int
>>> get_protocol_members(P) == frozenset({'a', 'b'})
True
```

----------------------------------------

TITLE: Using turtle.stamp in Python
DESCRIPTION: Demonstrates how to use the `turtle.stamp()` function to leave a copy of the turtle's shape at the current position and retrieve a stamp ID for later deletion. The turtle's color is set to blue before stamping.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_31

LANGUAGE: python
CODE:
```
turtle.color("blue")
stamp_id = turtle.stamp()
turtle.fd(50)
```

----------------------------------------

TITLE: Creating HTTPRedirectHandler Class for Handling Redirections in Python
DESCRIPTION: HTTPRedirectHandler is a class specifically designed to handle HTTP redirections.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
class HTTPRedirectHandler():
```

----------------------------------------

TITLE: Deleting Item by Key in C
DESCRIPTION: This function deletes an item from a mapping object given a key. It is an alias of PyObject_DelItem.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/mapping.rst#2025-04-21_snippet_6

LANGUAGE: c
CODE:
```
"int PyMapping_DelItem(PyObject *o, PyObject *key)"
```

----------------------------------------

TITLE: Parsing Variable Reference (Load) into AST (Python)
DESCRIPTION: Shows the AST representation of a simple variable reference used for loading its value. The snippet parses `a` into a `Module` containing an `Expr` node wrapping a `Name` node with a `Load` context.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_11

LANGUAGE: python
CODE:
```
print(ast.dump(ast.parse('a'), indent=4))
```

----------------------------------------

TITLE: Instantiate Differ Object
DESCRIPTION: This snippet shows how to instantiate a Differ object from the difflib module in Python. The Differ object is used to compare sequences of lines and generate a human-readable diff.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/difflib.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
>>> d = Differ()
```

----------------------------------------

TITLE: Processing XInclude Directives with ElementInclude
DESCRIPTION: Python code demonstrating how to process an XML document containing XInclude directives. This code loads an XML document, gets its root element, and processes all XInclude directives using the ElementInclude module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
from xml.etree import ElementTree, ElementInclude

tree = ElementTree.parse("document.xml")
root = tree.getroot()

ElementInclude.include(root)
```

----------------------------------------

TITLE: Introducing Asynchronous Generators in Python 3.6
DESCRIPTION: PEP 525 introduced asynchronous generators which enhance asynchronous programming capabilities, allowing the definition of generators that can yield values asynchronously.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.6.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
# Example of an asynchronous generator
async def async_gen():
    yield 1
    yield 2
    yield 3
```

----------------------------------------

TITLE: LZMAFile Class for Handling LZMA-compressed Files in Python
DESCRIPTION: The LZMAFile class opens LZMA-compressed files in binary mode. It can wrap an existing file object or operate on a named file, supporting various modes and compression parameters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/lzma.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
LZMAFile(filename=None, mode="r", *, format=None, check=-1, preset=None, filters=None)
```

----------------------------------------

TITLE: XML ContentHandler Document Methods
DESCRIPTION: Methods for handling document start and end events during XML parsing
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.sax.handler.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
ContentHandler.startDocument()
ContentHandler.endDocument()
```

----------------------------------------

TITLE: BaseHandler.default_open Method Definition
DESCRIPTION: This method should be implemented by BaseHandler subclasses to catch all URLs. It's called by the parent OpenerDirector and should return a file-like object or None, raising URLError for most exceptions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
def default_open(req):
    """Should be implemented by BaseHandler subclasses to catch all URLs.
    Returns a file-like object or raises URLError."""
```

----------------------------------------

TITLE: Reversing an Iterator Using list() and reversed() in Python
DESCRIPTION: Shows how to reverse an iterator by first converting it to a list. This is necessary because reversed() only works on sequences, not arbitrary iterators.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
>>> input = open('/etc/passwd', 'r')
>>> for line in reversed(list(input)):
...   print line
...
root:*:0:0:System Administrator:/var/root:/bin/tcsh
  ...
```

----------------------------------------

TITLE: Accessing Enum member via __getitem__ (Python)
DESCRIPTION: This demonstrates accessing an `Enum` member by subscribing the *class* (`Menu['SPAM']`). Because `enum.EnumMeta` defines `__getitem__`, that method is called on the class, returning the specific `Enum` member instance (`<Menu.SPAM: 'spam'>`), not a `GenericAlias` object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_21

LANGUAGE: Python
CODE:
```
# EnumMeta defines __getitem__,
# so __class_getitem__ is not called,
# and the result is not a GenericAlias object:
Menu['SPAM']
```

----------------------------------------

TITLE: Setting a Slice in a Sequence in C
DESCRIPTION: Assigns a sequence object to a specified slice in another sequence. Mirrors the Python expression `o[i1:i2] = v`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/sequence.rst#2025-04-21_snippet_10

LANGUAGE: C
CODE:
```
.. c:function:: int PySequence_SetSlice(PyObject *o, Py_ssize_t i1, Py_ssize_t i2, PyObject *v)

   Assign the sequence object *v* to the slice in sequence object *o* from *i1* to
   *i2*.  This is the equivalent of the Python statement ``o[i1:i2] = v``.
```

----------------------------------------

TITLE: ABI Version Tag Access in Python
DESCRIPTION: Demonstrates how to access ABI version tags and file extensions using the sysconfig module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
import sysconfig
sysconfig.get_config_var('SOABI')       # find the version tag
'cpython-32mu'
sysconfig.get_config_var('EXT_SUFFIX')  # find the full filename extension
'.cpython-32mu.so'
```

----------------------------------------

TITLE: Listing contents of a tar archive with Python in Shell
DESCRIPTION: This shell command demonstrates how to list the contents of the created tar archive using Python's tarfile module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/shutil.rst#2025-04-21_snippet_9

LANGUAGE: shell
CODE:
```
$ python -m tarfile -l /Users/tarek/myarchive.tar
structure/content/
structure/content/please_add.txt
```

----------------------------------------

TITLE: Creating Mutually Recursive Type Aliases in Python
DESCRIPTION: Demonstrates how lazy evaluation enables creation of mutually recursive type aliases, where type definitions can reference each other in a circular manner. This example defines expression types that refer to each other.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/executionmodel.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from typing import Literal

type SimpleExpr = int | Parenthesized
type Parenthesized = tuple[Literal["("], Expr, Literal[")"]]
type Expr = SimpleExpr | tuple[SimpleExpr, Literal["+", "-"], Expr]
```

----------------------------------------

TITLE: Parsing Chunked HTML Content
DESCRIPTION: Demonstrates feeding incomplete HTML chunks to the parser, showing how multiple data calls can occur when processing fragmented input
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/html.parser.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
for chunk in ['<sp', 'an>buff', 'ered ', 'text</s', 'pan>']:
    parser.feed(chunk)
```

----------------------------------------

TITLE: Iterating Over SQLite Query Results
DESCRIPTION: Example showing how to iterate over query results using a cursor as an iterator. Demonstrates retrieving and printing rows from a SELECT query on a stocks table.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_41

LANGUAGE: python
CODE:
```
>>> c = conn.cursor()
>>> c.execute('select * from stocks order by price')
>>> for row in c:
...    print row
...
(u'2006-01-05', u'BUY', u'RHAT', 100, 35.140000000000001)
(u'2006-03-28', u'BUY', u'IBM', 1000, 45.0)
(u'2006-04-06', u'SELL', u'IBM', 500, 53.0)
(u'2006-04-05', u'BUY', u'MSOFT', 1000, 72.0)
>>>
```

----------------------------------------

TITLE: Initializing Tkinter Font Class
DESCRIPTION: Constructor for the Font class that creates and manages named fonts in Tkinter. It allows specification of font properties including family, size, weight, slant, underline, and overstrike options.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.font.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
Font(root=None, font=None, name=None, exists=False, **options)
```

----------------------------------------

TITLE: TarFile Extraction Filter Attribute in Python
DESCRIPTION: A callable attribute used as the default for the `filter` argument in `extract` and `extractall`. It should be a function accepting a `TarInfo` object and returning the modified object or `None` to exclude. If `None` (default), the built-in 'data' filter is used, which disallows certain dangerous features.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_3

LANGUAGE: python
CODE:
```
TarFile.extraction_filter
```

----------------------------------------

TITLE: Defining Python C API Exception: PyExc_NotImplementedError
DESCRIPTION: This code snippet defines the C API exception `PyExc_NotImplementedError` and maps it to the Python `NotImplementedError` class. This mapping ensures that unimplemented methods or functionalities in C code can be signaled as Python exceptions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/exceptions.rst#2025-04-21_snippet_75

LANGUAGE: c
CODE:
```
":c:data:`PyExc_NotImplementedError`     | :exc:`NotImplementedError`      |          "
```

----------------------------------------

TITLE: Curses leaveok Method Definition
DESCRIPTION: The leaveok method controls the cursor's behavior after updating the window. If flag is True, the cursor is left at its current position after the update. If flag is False, the cursor is always placed at the "cursor position" after an update.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_80

LANGUAGE: python
CODE:
```
.. method:: window.leaveok(flag)

   If *flag* is ``True``, cursor is left where it is on update, instead of being at "cursor
   position."  This reduces cursor movement where possible. If possible the cursor
   will be made invisible.

   If *flag* is ``False``, cursor will always be at "cursor position" after an update.
```

----------------------------------------

TITLE: Progressbar Step Method
DESCRIPTION: Method to increment a ttk.Progressbar widget's value by a specified amount. Default increment is 1.0.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
def step(amount=None):
```

----------------------------------------

TITLE: Keeping Turtle Window Open - Python Turtle
DESCRIPTION: Explains that when using turtle graphics in a script, calling `turtle.mainloop()` (or `t.mainloop()` if using an alias) is necessary at the end to prevent the graphics window from closing immediately after the script finishes execution.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_15

LANGUAGE: Python
CODE:
```
t.mainloop()
```

----------------------------------------

TITLE: Setting Custom Logger Class in Python Logging
DESCRIPTION: Tells the logging system to use the specified class when instantiating a logger. The class should define __init__ to accept only a name argument and call Logger.__init__. This is typically called before any loggers are instantiated.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
def setLoggerClass(klass):
```

----------------------------------------

TITLE: Using istitle() Method in Python Bytes
DESCRIPTION: Demonstrates how to check if a bytes sequence is in title case using the istitle() method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_58

LANGUAGE: python
CODE:
```
>>> b'Hello World'.istitle()
True
>>> b'Hello world'.istitle()
False
```

----------------------------------------

TITLE: Calculating Low and High Median in Python
DESCRIPTION: These snippets show how to use median_low and median_high functions to calculate the low and high median values respectively. They demonstrate the behavior for both odd and even numbers of data points.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> median_low([1, 3, 5])
3
>>> median_low([1, 3, 5, 7])
3
>>> median_high([1, 3, 5])
3
>>> median_high([1, 3, 5, 7])
5
```

----------------------------------------

TITLE: Creating Enum with Custom Start Value in Python
DESCRIPTION: Shows how to create an Enum with a custom start value for automatic numbering of enum members.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
>>> Animal = enum.Enum('Animal', 'cat dog', start=10)
>>> Animal.cat
<Animal.cat: 10>
>>> Animal.dog
<Animal.dog: 11>
```

----------------------------------------

TITLE: Doctest Multi-line Exception Detail
DESCRIPTION: Demonstrates testing exceptions with multi-line error messages and shows best practices for handling traceback information.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/doctest.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
>>> raise ValueError('multi\n    line\ndetail')
Traceback (most recent call last):
    ...
ValueError: multi
    line
detail
```

----------------------------------------

TITLE: Enhanced Itertools Argument Handling in Python
DESCRIPTION: itertools.islice now supports integer-like objects with __index__ method for start, stop, and slice arguments, improving flexibility in slice operations.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.7.0a1.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
import itertools
```

----------------------------------------

TITLE: Directly Using the Profile Class for Result Formatting
DESCRIPTION: This demonstrates directly using the Profile class to format profile results without saving to a file. It imports cProfile, pstats, and io, then also imports SortKey from pstats.  This is the start of code using the Profile class but the snippet is incomplete.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/profile.rst#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
import cProfile, pstats, io
from pstats import SortKey
```

----------------------------------------

TITLE: Initializing netrc Class - Python
DESCRIPTION: Constructor for the netrc class that parses .netrc files. Takes an optional file parameter and handles file parsing, security checks, and error handling. Implements POSIX-compliant security behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/netrc.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
netrc([file])
```

----------------------------------------

TITLE: Waiting for Child Process with Specific Options in Python
DESCRIPTION: The waitid() function waits for the completion of a child process with more granular control. It takes idtype, id, and options parameters, and returns an object with process information.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_76

LANGUAGE: python
CODE:
```
def waitid(idtype, id, options, /):
    # Function implementation
```

----------------------------------------

TITLE: Accessing List Items in C
DESCRIPTION: Functions to get items from a list by index, with different reference handling and error checking.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/list.rst#2025-04-21_snippet_5

LANGUAGE: c
CODE:
```
PyObject* PyList_GetItemRef(PyObject *list, Py_ssize_t index)

PyObject* PyList_GetItem(PyObject *list, Py_ssize_t index)

PyObject* PyList_GET_ITEM(PyObject *list, Py_ssize_t i)
```

----------------------------------------

TITLE: NotImplemented Singleton (C Variable)
DESCRIPTION: The `NotImplemented` singleton, used to signal that an operation is not implemented for the given type combination.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/object.rst#_snippet_12

LANGUAGE: c
CODE:
```
PyObject* Py_NotImplemented
```

----------------------------------------

TITLE: Example foo.pth Configuration File for Python Site Packages
DESCRIPTION: This snippet shows the content of a sample path configuration file (foo.pth) that would be placed in a site-packages directory. It adds the 'foo', 'bar', and 'bletch' directories to sys.path during Python initialization.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/site.rst#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
# foo package configuration

foo
bar
bletch
```

----------------------------------------

TITLE: Retrieving Line Kill Character with Curses in Python
DESCRIPTION: The `killchar` function retrieves the current line kill character, returning it as a one-byte bytes object. The character is determined by the controlling terminal's settings under Unix-based systems.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
.. function:: killchar()

   Return the user's current line kill character as a one-byte bytes object. Under Unix operating systems
   this is a property of the controlling tty of the curses program, and is not set
   by the curses library itself.
```

----------------------------------------

TITLE: Using the bit_length() Method for Integers in Python
DESCRIPTION: Shows how to use the new bit_length() method for integers, which returns the number of bits necessary to represent the integer in binary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.1.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
>>> n = 37
>>> bin(37)
'0b100101'
>>> n.bit_length()
6
>>> n = 2**123-1
>>> n.bit_length()
123
>>> (n+1).bit_length()
124
```

----------------------------------------

TITLE: Using getlocale Function in Python
DESCRIPTION: Returns current locale settings for given category as (language code, encoding). Category defaults to LC_CTYPE if not specified.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/locale.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
getlocale(category=LC_CTYPE)
```

----------------------------------------

TITLE: Running DTrace script for Python function tracing
DESCRIPTION: Command to run the DTrace script for tracing Python function calls.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/instrumentation.rst#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
$ sudo dtrace -q -s call_stack.d -c "python3.6 script.py"
```

----------------------------------------

TITLE: Configuring STARTUPINFO Flags in Python Subprocess
DESCRIPTION: Demonstrates how to set dwFlags in a STARTUPINFO object to use standard handles and control window visibility when creating a process. Uses both STARTF_USESTDHANDLES and STARTF_USESHOWWINDOW flags.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/subprocess.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
si = subprocess.STARTUPINFO()
si.dwFlags = subprocess.STARTF_USESTDHANDLES | subprocess.STARTF_USESHOWWINDOW
```

----------------------------------------

TITLE: Updating importlib.resources to Accept Modules as Anchors - Python
DESCRIPTION: This update allows `importlib.resources.files` to accept a module as an anchor, enabling resource resolution adjacent to that module. The parameter name was changed from `package` to `anchor` and is now optional, defaulting to the caller's module.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.12.0a4.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
importlib.resources.files(module)
```

----------------------------------------

TITLE: Math Module Power Function Example
DESCRIPTION: Demonstrating the change in math.pow behavior for corner cases with zero and infinity, now matching IEEE 754 specification.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.11.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
math.pow(0.0, -math.inf)  # Now returns inf
math.pow(-0.0, -math.inf)  # Now returns inf
```

----------------------------------------

TITLE: Compiling Command in Python
DESCRIPTION: This function emulates the main loop of the Python interpreter, determining if user input is complete or requires more text to be valid. It returns a code object if complete or raises an exception for errors.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/code.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
def compile_command(source, filename="<input>", symbol="single"):
    """
    This function is useful for programs that want to emulate Python's interpreter
    main loop (a.k.a. the read-eval-print loop).  The tricky part is to determine
    when the user has entered an incomplete command that can be completed by
    entering more text (as opposed to a complete command or a syntax error).  This
    function *almost* always makes the same decision as the real interpreter main
    loop.

    *source* is the source string; *filename* is the optional filename from which
    source was read, defaulting to ``'<input>'``; and *symbol* is the optional
    grammar start symbol, which should be ``'single'`` (the default), ``'eval'``
    or ``'exec'``.

    Returns a code object (the same as ``compile(source, filename, symbol)``) if the
    command is complete and valid; ``None`` if the command is incomplete; raises
    :exc:`SyntaxError` if the command is complete and contains a syntax error, or
    raises :exc:`OverflowError` or :exc:`ValueError` if the command contains an
    invalid literal.
    """

```

----------------------------------------

TITLE: Queue Listener Implementation Methods
DESCRIPTION: Core methods of QueueListener class including dequeue, prepare, handle, start, stop, and enqueue_sentinel for processing logged messages from a queue.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_39

LANGUAGE: python
CODE:
```
def dequeue(block):
    # Dequeues and returns a record

def prepare(record):
    # Prepares record for handling
    return record

def handle(record):
    # Handles the record through handlers

def start(self):
    # Starts the listener thread

def stop(self):
    # Stops the listener thread

def enqueue_sentinel(self):
    # Writes sentinel to queue
```

----------------------------------------

TITLE: Using Placeholder with Partial for Flexible Argument Binding in Python
DESCRIPTION: Illustrates the use of Placeholder sentinels with partial to create functions with flexible argument binding. This allows pre-filling any positional argument, not just leading ones.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> say_to_world = partial(print, Placeholder, Placeholder, "world!")
>>> say_to_world('Hello', 'dear')
Hello dear world!
```

----------------------------------------

TITLE: Replacing cmp() function in Python 3 sorting operations
DESCRIPTION: Example of how to replace the removed cmp() function when performing comparisons in Python 3, using the expression (a > b) - (a < b) as an equivalent.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.0.rst#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
(a > b) - (a < b)
```

----------------------------------------

TITLE: Creating a Custom SQL Aggregate Function in SQLite3
DESCRIPTION: This example shows how to implement a custom SQL aggregate function in SQLite3. It defines a 'MySum' class with step() and finalize() methods to calculate the sum of values, and demonstrates how to register and use it in SQL queries.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
class MySum:
    def __init__(self):
        self.count = 0

    def step(self, value):
        self.count += value

    def finalize(self):
        return self.count

con = sqlite3.connect(":memory:")
con.create_aggregate("mysum", 1, MySum)
cur = con.execute("CREATE TABLE test(i)")
cur.execute("INSERT INTO test(i) VALUES(1)")
cur.execute("INSERT INTO test(i) VALUES(2)")
cur.execute("SELECT mysum(i) FROM test")
print(cur.fetchone()[0])

con.close()
```

----------------------------------------

TITLE: Doctest Example with UTF-8 Characters
DESCRIPTION: This doctest shows string literals containing non-ASCII characters. The expected output shows the UTF-8 representation of these characters. This example demonstrates the importance of handling encodings correctly when comparing strings with special characters in doctests.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/test_doctest/test_doctest4.txt#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> 'föö'
'f\xf6\xf6'

>>> 'bąr'
'b\u0105r'
```

----------------------------------------

TITLE: Getting Selected ALPN Protocol in Python SSL
DESCRIPTION: Demonstrates retrieving the protocol selected during the TLS handshake using the new selected_alpn_protocol() method of SSLSocket.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_29

LANGUAGE: Python
CODE:
```
SSLSocket.selected_alpn_protocol()
```

----------------------------------------

TITLE: Creating Decimal from Float Using from_float Class Method in Python
DESCRIPTION: Demonstrates using the `from_float` class method to construct Decimal objects from various float inputs, including standard numbers, NaN, and infinities. Note that direct float representation in binary can lead to unexpected decimal values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_21

LANGUAGE: Python
CODE:
```
Decimal.from_float(0.1)
Decimal('0.1000000000000000055511151231257827021181583404541015625')
Decimal.from_float(float('nan'))
Decimal('NaN')
Decimal.from_float(float('inf'))
Decimal('Infinity')
Decimal.from_float(float('-inf'))
Decimal('-Infinity')
```

----------------------------------------

TITLE: Example usage of print_capitalized with bounded TypeVar (Python)
DESCRIPTION: Demonstrates how a bounded type variable (like `T` in `print_capitalized`) resolves to the most specific type possible, including subclasses. It shows that calling with `str` results in `str`, with a `StringSubclass` results in `StringSubclass`, and with an incompatible type like `int` results in a type error.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_104

LANGUAGE: Python
CODE:
```
x = print_capitalized('a string')
reveal_type(x)  # revealed type is str

class StringSubclass(str):
    pass

y = print_capitalized(StringSubclass('another string'))
reveal_type(y)  # revealed type is StringSubclass

z = print_capitalized(45)  # error: int is not a subtype of str
```

----------------------------------------

TITLE: Syncing DBM Database with dbm.dumb
DESCRIPTION: Synchronizes the on-disk directory and data files for the dumbdbm database. This method ensures that all changes made to the database are written to disk.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dbm.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
.. method:: dumbdbm.sync()

      Synchronize the on-disk directory and data files.  This method is called
      by the :meth:`shelve.Shelf.sync` method.
```

----------------------------------------

TITLE: Example of using ngettext for pluralization
DESCRIPTION: This code snippet shows how to use the ngettext method for pluralization in the GNUTranslations class. It demonstrates how to choose the correct plural form based on a number and format the output message with the number.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/gettext.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
n = len(os.listdir('.'))
         cat = GNUTranslations(somefile)
         message = cat.ngettext(
             'There is %(num)d file in this directory',
             'There are %(num)d files in this directory',
             n) % {'num': n}
```

----------------------------------------

TITLE: Identifying Free-Threaded Python Build
DESCRIPTION: Methods to check if the current Python interpreter supports free threading, including version information and runtime checks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/free-threading-python.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
import sys

# Check if free-threading is supported
print('Free-threading build' in sys.version)

# Check if GIL is enabled
is_gil_enabled = sys._is_gil_enabled()

# Check build configuration
is_free_threaded = sysconfig.get_config_var("Py_GIL_DISABLED") == 1
```

----------------------------------------

TITLE: Handling read-only bytes-like with y# format - C API
DESCRIPTION: Similar to `s#`, but accepts only read-only Python bytes-like objects (not Unicode). Provides a borrowed buffer with pointer (`const char *`) and length (`Py_ssize_t`). The buffer may contain embedded null bytes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/arg.rst#_snippet_8

LANGUAGE: c
CODE:
```
"y#" [const char *, Py_ssize_t]
```

----------------------------------------

TITLE: Improved Exception Handling in concurrent.futures
DESCRIPTION: Update to concurrent.futures to catch exceptions in executor manager thread when adding items to call queue. Also handles RuntimeError during Python finalization.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.13.0a1.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
try:
    # Add item to call queue
except RuntimeError:
    terminate_broken()
```

----------------------------------------

TITLE: Setting ALPN Protocols in Python SSL
DESCRIPTION: Shows how to specify protocols for Application-Layer Protocol Negotiation during the TLS handshake using the new set_alpn_protocols() method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_28

LANGUAGE: Python
CODE:
```
SSLContext.set_alpn_protocols()
```

----------------------------------------

TITLE: Array String Representation
DESCRIPTION: Demonstrates the string representation of Python array objects, which includes the typecode and initializer. The initializer is omitted if the array is empty. The representation is designed to be reversible using `eval` after importing the `array` module. Special attention is given to Unicode strings for 'u' or 'w' typecodes and numerical lists for other types. 'inf' and 'nan' variables must be defined when floating-point values are present.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/array.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
"array('l')\narray('w', 'hello \u2641')\narray('l', [1, 2, 3, 4, 5])\narray('d', [1.0, 2.0, 3.14, -inf, nan])"
```

----------------------------------------

TITLE: Defining BufferedRWPair Class in Python
DESCRIPTION: BufferedRWPair provides higher-level access to two non-seekable RawIOBase streams - one readable, one writable. It inherits from BufferedIOBase.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/io.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
class BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE, /):
    # Inherits from BufferedIOBase
    pass
```

----------------------------------------

TITLE: Checking Namespace Loader in Python
DESCRIPTION: This snippet demonstrates how to check if a namespace's __loader__ attribute is an instance of importlib.abc.Loader.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
>>> import importlib.abc
>>> isinstance(my_namespace.__loader__, importlib.abc.Loader)
True
```

----------------------------------------

TITLE: In-Place Numeric Modification Functions
DESCRIPTION: C functions that perform numeric operations directly on the first object when possible, equivalent to Python's in-place operators like +=, -=, *=, etc. Returns modified object or NULL on failure.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/number.rst#2025-04-21_snippet_2

LANGUAGE: c
CODE:
```
PyObject* PyNumber_InPlaceAdd(PyObject *o1, PyObject *o2)
```

LANGUAGE: c
CODE:
```
PyObject* PyNumber_InPlaceSubtract(PyObject *o1, PyObject *o2)
```

LANGUAGE: c
CODE:
```
PyObject* PyNumber_InPlaceMultiply(PyObject *o1, PyObject *o2)
```

----------------------------------------

TITLE: Accessing Current asyncio Task in PDB (Python)
DESCRIPTION: Introduces the new `$_asynctask` variable available within the `pdb` debugger session. This variable provides access to the current `asyncio` task when debugging asynchronous code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_26

LANGUAGE: Python
CODE:
```
$_asynctask
```

----------------------------------------

TITLE: Bootstrapping pip Using ensurepip API in Python
DESCRIPTION: Demonstrates the usage of the bootstrap() function from the ensurepip module to programmatically install pip. It includes various parameters for customizing the installation process.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ensurepip.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
ensurepip.bootstrap(root=None, upgrade=False, user=False, altinstall=False, default_pip=False, verbosity=0)
```

----------------------------------------

TITLE: Receiving Data into Multiple Buffers via recvmsg_into Python
DESCRIPTION: Demonstrates the usage of `socket.recvmsg_into` to receive data and scatter it into multiple user-provided writable buffers. It shows setting up buffers (bytearray, memoryview slice), sending data, calling `recvmsg_into`, and inspecting the resulting content of the buffers. Requires the `socket` module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/socket.rst#_snippet_6

LANGUAGE: python
CODE:
```
>>> import socket
>>> s1, s2 = socket.socketpair()
>>> b1 = bytearray(b'----')
>>> b2 = bytearray(b'0123456789')
>>> b3 = bytearray(b'--------------')
>>> s1.send(b'Mary had a little lamb')
22
>>> s2.recvmsg_into([b1, memoryview(b2)[2:9], b3])
(22, [], 0, None)
>>> [b1, b2, b3]
[bytearray(b'Mary'), bytearray(b'01 had a 9'), bytearray(b'little lamb---')]
```

----------------------------------------

TITLE: Accessing Type Alias Name
DESCRIPTION: Illustrates how to retrieve the name of a type alias using the __name__ attribute.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_128

LANGUAGE: python
CODE:
```
>>> type Alias = int
>>> Alias.__name__
'Alias'
```

----------------------------------------

TITLE: Pdb alias to print instance variables (pi)
DESCRIPTION: Defines a Pdb alias `pi` that takes one argument (%1) and prints the instance variables of the object passed as the argument by iterating through its __dict__.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_22

LANGUAGE: none
CODE:
```
alias pi for k in %1.__dict__.keys(): print(f"%1.{k} = {%1.__dict__[k]}")
```

----------------------------------------

TITLE: Defining Enum with __new__ Method - Python
DESCRIPTION: This snippet illustrates how to use the __new__ method to manipulate the construction of Enum members, specifically, to create instances of int subtypes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/enum.rst#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
>>> from enum import Enum
>>> class MyIntEnum(int, Enum):
...     TWENTYSIX = '1a', 16

results in the call ``int('1a', 16)`` and a value of ``26`` for the member.
```

----------------------------------------

TITLE: Pausing Process Until Signal Receipt in Python
DESCRIPTION: The pause function causes the process to sleep until a signal is received. It then calls the appropriate handler. This function is only available on Unix systems.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/signal.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
def pause():
    """Cause the process to sleep until a signal is received; the appropriate handler
    will then be called.  Returns nothing."""
```

----------------------------------------

TITLE: Retrieving Filename from Content-Disposition
DESCRIPTION: This method attempts to retrieve the filename parameter from the Content-Disposition header. If not available, it checks the Content-Type header's name parameter, ensuring a fallback strategy for filenames.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.compat32-message.rst#2025-04-21_snippet_15

LANGUAGE: Python
CODE:
```
".. method:: get_filename(failobj=None)\n\n      Return the value of the filename parameter of the :mailheader:`Content-Disposition` \n      header of the message."
```

----------------------------------------

TITLE: Creating an mboxMessage Instance in Python
DESCRIPTION: Constructor for creating an mboxMessage object. The message parameter has the same meaning as with the Message constructor, allowing creation from another message object or from scratch.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/mailbox.rst#2025-04-21_snippet_32

LANGUAGE: python
CODE:
```
mboxMessage(message=None)
```

----------------------------------------

TITLE: Handling Logger Contexts in Python
DESCRIPTION: Describes the handler framework within Python’s logging system. The snippet explains that the Handler class is a base class for logging handlers and outlines its initialization, methods to acquire/release locks, and level/filter management. Subclasses of Handler must implement specific methods such as emit for actual logging.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.rst#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
.. class:: Handler

   .. method:: Handler.__init__(level=NOTSET)

      Initializes the :class:`Handler` instance by setting its level, setting the list
      of filters to the empty list and creating a lock (using :meth:`createLock`) for
      serializing access to an I/O mechanism.


   .. method:: Handler.createLock()

      Initializes a thread lock which can be used to serialize access to underlying
      I/O functionality which may not be threadsafe.


   .. method:: Handler.acquire()

      Acquires the thread lock created with :meth:`createLock`.


   .. method:: Handler.release()

      Releases the thread lock acquired with :meth:`acquire`.


   .. method:: Handler.setLevel(level)

      Sets the threshold for this handler to *level*. Logging messages which are
      less severe than *level* will be ignored. When a handler is created, the
      level is set to :const:`NOTSET` (which causes all messages to be
      processed).

      See :ref:`levels` for a list of levels.

      .. versionchanged:: 3.2
         The *level* parameter now accepts a string representation of the
         level such as 'INFO' as an alternative to the integer constants
         such as :const:`INFO`.


   .. method:: Handler.setFormatter(fmt)

      Sets the formatter for this handler to *fmt*.
      The *fmt* argument must be a :class:`Formatter` instance or ``None``.


   .. method:: Handler.addFilter(filter)

      Adds the specified filter *filter* to this handler.


   .. method:: Handler.removeFilter(filter)

      Removes the specified filter *filter* from this handler.


   .. method:: Handler.filter(record)

      Apply this handler's filters to the record and return ``True`` if the
      record is to be processed. The filters are consulted in turn, until one of
      them returns a false value. If none of them return a false value, the record
      will be emitted. If one returns a false value, the handler will not emit the
      record.


   .. method:: Handler.flush()

      Ensure all logging output has been flushed. This version does nothing and is
      intended to be implemented by subclasses.


   .. method:: Handler.close()

      Tidy up any resources used by the handler. This version does no output
      but removes the handler from an internal map of handlers, which is used
      for handler lookup by name.

      Subclasses should ensure that this gets called from overridden :meth:`close`
      methods.


   .. method:: Handler.handle(record)

      Conditionally emits the specified logging record, depending on filters which may
      have been added to the handler. Wraps the actual emission of the record with
      acquisition/release of the I/O thread lock.


   .. method:: Handler.handleError(record)

      This method should be called from handlers when an exception is encountered
      during an :meth:`emit` call. If the module-level attribute
      :data:`raiseExceptions` is ``False``, exceptions get silently ignored. This is
      what is mostly wanted for a logging system - most users will not care about
      errors in the logging system, they are more interested in application
      errors. You could, however, replace this with a custom handler if you wish.
      The specified record is the one which was being processed when the exception
      occurred. (The default value of :data:`raiseExceptions` is ``True``, as that is
      more useful during development).


   .. method:: Handler.format(record)

      Do formatting for a record - if a formatter is set, use it. Otherwise, use the
      default formatter for the module.


   .. method:: Handler.emit(record)

      Do whatever it takes to actually log the specified logging record. This version
      is intended to be implemented by subclasses and so raises a
      :exc:`NotImplementedError`.

      .. warning:: This method is called after a handler-level lock is acquired, which
         is released after this method returns. When you override this method, note
         that you should be careful when calling anything that invokes other parts of
         the logging API which might do locking, because that might result in a
         deadlock. Specifically:

         * Logging configuration APIs acquire the module-level lock, and then
           individual handler-level locks as those handlers are configured.

         * Many logging APIs lock the module-level lock. If such an API is called
           from this method, it could cause a deadlock if a configuration call is
           made on another thread, because that thread will try to acquire the
           module-level lock *before* the handler-level lock, whereas this thread
           tries to acquire the module-level lock *after* the handler-level lock
           (because in this method, the handler-level lock has already been acquired).
```

----------------------------------------

TITLE: Combining TypeVarTuple with Normal TypeVar (Suffix)
DESCRIPTION: An example showing that a TypeVarTuple can also be combined with a normal TypeVar in a type parameter list, with the normal TypeVar appearing last.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_118

LANGUAGE: python
CODE:
```
class Array2[*Shape, DType]:  # This would also be fine
    pass
```

----------------------------------------

TITLE: Defining ProxyDigestAuthHandler for Proxy Authentication in Python
DESCRIPTION: ProxyDigestAuthHandler handles digest authentication with the proxy using a compatible password manager.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
class ProxyDigestAuthHandler(password_mgr=None):
```

----------------------------------------

TITLE: Getting Frame Variables in C
DESCRIPTION: The `PyFrame_GetVar` function retrieves a specified variable from a frame, returning a strong reference or raising `NameError` if non-existent. The `name` parameter must be a `str`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/frame.rst#2025-04-21_snippet_9

LANGUAGE: c
CODE:
```
PyObject* PyFrame_GetVar(PyFrameObject *frame, PyObject *name)
```

----------------------------------------

TITLE: Invalid Function Call with Keyword Argument for Positional-Only Parameter
DESCRIPTION: This snippet shows an example of an invalid function call where a positional-only parameter is incorrectly passed as a keyword argument, which raises an error according to the new syntax rules.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
f(10, b=20, c=30, d=40, e=50, f=60)   # Raises an error
```

----------------------------------------

TITLE: Using Union Operator (|) with multiprocessing DictProxy (Python)
DESCRIPTION: Shows the new support for the dictionary union operator (`|`) with multiprocessing proxy objects for dictionaries. This allows creating a new dictionary proxy containing keys from both operands.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_22

LANGUAGE: Python
CODE:
```
d | {}
```

LANGUAGE: Python
CODE:
```
{} | d
```

----------------------------------------

TITLE: Font Measurement Methods
DESCRIPTION: Methods for measuring text dimensions and font metrics including measure() for text width calculation and metrics() for font-specific measurements like ascent, descent, linespace, and fixed-width status.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.font.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
measure(text, displayof=None)
metrics(*options, **kw)
```

----------------------------------------

TITLE: Reserved Classes of Identifiers in Python
DESCRIPTION: This snippet categorizes various reserved classes of identifiers in Python, including their specific meanings and contexts, providing clarity on their usage.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/lexical_analysis.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
Certain classes of identifiers (besides keywords) have special meanings.  These classes are identified by the patterns of leading and trailing underscore characters:

``_*``
   Not imported by ``from module import *``.

``_``
   In a ``case`` pattern within a :keyword:`match` statement, ``_`` is a
   :ref:`soft keyword <soft-keywords>` that denotes a
   :ref:`wildcard <wildcard-patterns>`.
```

----------------------------------------

TITLE: Formatting objects in PrettyPrinter (format method) - Python
DESCRIPTION: The format method in the PrettyPrinter class formats an object and returns its string representation along with flags indicating readability and recursion detection.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pprint.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
def format(self, object, context, maxlevels, level):
    Returns three values: the formatted version of *object* as a string, a flag indicating whether the result is readable, and a flag indicating whether recursion was detected.
```

----------------------------------------

TITLE: Implementing strptime method analog for time objects
DESCRIPTION: Example of how the time.strptime() class method parses a string according to a format. Shows the implementation equivalent that leverages the standard time.strptime() function to create a time object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
time(*(time.strptime(date_string, format)[3:6]))
```

----------------------------------------

TITLE: Extended Attribute Management - getxattr
DESCRIPTION: Function to retrieve the value of an extended filesystem attribute for a given path. Supports both string and bytes attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_54

LANGUAGE: python
CODE:
```
getxattr(path, attribute, *, follow_symlinks=True)
```

----------------------------------------

TITLE: Defining and Initializing Custom Exception in Python C Extension
DESCRIPTION: This snippet demonstrates how to declare a static exception object and initialize it in the module's initialization function. It creates a new exception class and adds it to the module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/extending.rst#2025-04-21_snippet_3

LANGUAGE: C
CODE:
```
static PyObject *SpamError;

PyMODINIT_FUNC
PyInit_spam(void)
{
    PyObject *m;

    m = PyModule_Create(&spammodule);
    if (m == NULL)
        return NULL;

    SpamError = PyErr_NewException("spam.error", NULL, NULL);
    if (PyModule_AddObjectRef(m, "error", SpamError) < 0) {
        Py_CLEAR(SpamError);
        Py_DECREF(m);
        return NULL;
    }

    return m;
}
```

----------------------------------------

TITLE: Initializing Perf Map Support - C
DESCRIPTION: This function opens the perf map file and creates a lock to ensure thread-safe writes. It auto-initializes when PyUnstable_WritePerfMapEntry is called. Returns 0 on success, -1 if it fails to open the file, and -2 if it fails to create a lock.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/perfmaps.rst#2025-04-21_snippet_0

LANGUAGE: C
CODE:
```
int PyUnstable_PerfMapState_Init(void)

Open the "/tmp/perf-$pid.map" file, unless it's already opened, and create
a lock to ensure thread-safe writes to the file (provided the writes are
done through PyUnstable_WritePerfMapEntry). Normally, there's no need
to call this explicitly; just use PyUnstable_WritePerfMapEntry
and it will initialize the state on first call.

Returns 0 on success, -1 on failure to create/open the perf map file,
or -2 on failure to create a lock. Check errno for more information
about the cause of a failure.
```

----------------------------------------

TITLE: Conceptual Type Alias Implementation (Python)
DESCRIPTION: This snippet provides a conceptual representation of how the `type` statement might be implemented internally in Python. It shows the use of an `annotation-def` (representing an annotation scope) to hold the type value and the `typing.TypeAliasType` class to create the alias, illustrating the lazy evaluation concept. This is not standard executable Python code but a model.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/simple_stmts.rst#_snippet_13

LANGUAGE: Python
CODE:
```
annotation-def VALUE_OF_Point():
    return tuple[float, float]
Point = typing.TypeAliasType("Point", VALUE_OF_Point())
```

----------------------------------------

TITLE: Pickling Record Data
DESCRIPTION: This method pickles the record's attribute dictionary in binary format with a length prefix, preparing it for transmission across a socket.  It's equivalent to pickling the record attributes, determining the length, packing the length as a big-endian unsigned long, and prepending it to the pickled data. It's important to be aware of the security implications when using `pickle`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
	  data = pickle.dumps(record_attr_dict, 1)
          datalen = struct.pack('>L', len(data))
          return datalen + data
```

----------------------------------------

TITLE: Handling incomplete groups with grouper in Python
DESCRIPTION: Shows how grouper handles incomplete groups with either 'strict' mode (raising an error) or 'ignore' mode (skipping the incomplete group).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_77

LANGUAGE: python
CODE:
```
>>> it = grouper('abcdefg', 3, incomplete='strict')
>>> next(it)
('a', 'b', 'c')
>>> next(it)
('d', 'e', 'f')
>>> next(it)
Traceback (most recent call last):
  ...
ValueError: zip() argument 2 is shorter than argument 1

>>> list(grouper('abcdefg', n=3, incomplete='ignore'))
[('a', 'b', 'c'), ('d', 'e', 'f')]
```

----------------------------------------

TITLE: Creating a Mutually Exclusive Group
DESCRIPTION: Illustrates the creation of a basic mutually exclusive group using `add_mutually_exclusive_group`. It adds two arguments (`--foo`, `--bar`) and demonstrates parsing command lines where only one or neither is present, and the error when both are provided.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_88

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser(prog='PROG')
>>> group = parser.add_mutually_exclusive_group()
>>> group.add_argument('--foo', action='store_true')
>>> group.add_argument('--bar', action='store_false')
>>> parser.parse_args(['--foo'])
Namespace(bar=True, foo=True)
>>> parser.parse_args(['--bar'])
Namespace(bar=False, foo=False)
>>> parser.parse_args(['--foo', '--bar'])
usage: PROG [-h] [--foo | --bar]
PROG: error: argument --bar: not allowed with argument --foo
```

----------------------------------------

TITLE: Regular Expression Pattern Generation from Glob Pattern
DESCRIPTION: Example demonstrating the translate function which converts glob patterns to regular expressions for use with re.match
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/glob.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> import glob, re
>>>
>>> regex = glob.translate('**/*.txt', recursive=True, include_hidden=True)
>>> regex
'(?s:(?:.+/)?[^/]*\\.txt)\\Z'
>>> reobj = re.compile(regex)
>>> reobj.match('foo/bar/baz.txt')
<re.Match object; span=(0, 15), match='foo/bar/baz.txt'>
```

----------------------------------------

TITLE: Counting Occurrences in a Sequence in C
DESCRIPTION: Counts how many times a specific value appears in a sequence, returning -1 on failure. This is the equivalent of calling `o.count(value)` in Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/sequence.rst#2025-04-21_snippet_12

LANGUAGE: C
CODE:
```
.. c:function:: Py_ssize_t PySequence_Count(PyObject *o, PyObject *value)

   Return the number of occurrences of *value* in *o*, that is, return the number
   of keys for which ``o[key] == value``.  On failure, return ``-1``.  This is
   equivalent to the Python expression ``o.count(value)``.
```

----------------------------------------

TITLE: Parsing Import Statements in CPython
DESCRIPTION: Rule function for parsing a simple named import statement (e.g., 'import sys') in CPython. This function tokenizes the input, matches it against the grammar rule, and generates an AST node for the import statement.
SOURCE: https://github.com/python/cpython/blob/main/InternalDocs/compiler.md#2025-04-21_snippet_2

LANGUAGE: C
CODE:
```
static stmt_ty
import_name_rule(Parser *p)
{
    ...
    stmt_ty _res = NULL;
    { // 'import' dotted_as_names
        ...
        Token * _keyword;
        asdl_alias_seq* a;
        // The tokenizing steps.
        if (
            (_keyword = _PyPegen_expect_token(p, 513))  // token='import'
            &&
            (a = dotted_as_names_rule(p))  // dotted_as_names
        )
        {
            ...
            // Generate an AST for the import statement.
            _res = _PyAST_Import ( a , ...);
            ...
            goto done;
        }
        ...
    }
    _res = NULL;
  done:
    ...
    return _res;
}
```

----------------------------------------

TITLE: Creating Method Descriptor in C
DESCRIPTION: Function declaration for creating a new method descriptor from a PyMethodDef structure.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/descriptor.rst#2025-04-21_snippet_3

LANGUAGE: c
CODE:
```
PyObject* PyDescr_NewMethod(PyTypeObject *type, struct PyMethodDef *meth)
```

----------------------------------------

TITLE: Using b32encode in Python
DESCRIPTION: Encodes bytes-like objects using Base32 encoding and returns the encoded bytes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/base64.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
b32encode(s)
```

----------------------------------------

TITLE: Adding Character Set Aliases in Python
DESCRIPTION: The add_alias function registers a new character set alias to map common names to their canonical character set names, aiding in standardizing charset usage.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.charset.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
def add_alias(alias, canonical):
    """
    Add a character set alias.
    """
```

----------------------------------------

TITLE: Getting Color Pair Number with Curses in Python
DESCRIPTION: The `pair_number` function identifies the color pair number set by a specified attribute `attr`. This assists in managing color attributes programmatically.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_25

LANGUAGE: Python
CODE:
```
.. function:: pair_number(attr)

   Return the number of the color-pair set by the attribute value *attr*.
   :func:`color_pair` is the counterpart to this function.
```

----------------------------------------

TITLE: Executing sysconfig module - Shell
DESCRIPTION: Demonstrates how to run the `sysconfig` module directly from the command line using the `-m` option. This executes the module as a script, printing configuration details such as platform, Python version, current scheme, installation paths, and configuration variables to the standard output.

Prerequisites: A Python installation with the `sysconfig` module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sysconfig.rst#_snippet_1

LANGUAGE: Shell
CODE:
```
$ python -m sysconfig
```

----------------------------------------

TITLE: HTTPRedirectHandler HTTP Error Handlers
DESCRIPTION: Methods for handling different HTTP redirect codes (301, 302, 303, 307, 308). Each redirects to the Location or URI URL, with 307 and 308 maintaining the original request method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_34

LANGUAGE: python
CODE:
```
def http_error_301(req, fp, code, msg, hdrs):
    """Handle HTTP 'moved permanently' responses."""

def http_error_302(req, fp, code, msg, hdrs):
    """Handle HTTP 'found' responses."""

def http_error_303(req, fp, code, msg, hdrs):
    """Handle HTTP 'see other' responses."""

def http_error_307(req, fp, code, msg, hdrs):
    """Handle HTTP 'temporary redirect' responses.
    Does not allow changing request method from POST to GET."""

def http_error_308(req, fp, code, msg, hdrs):
    """Handle HTTP 'permanent redirect' responses.
    Does not allow changing request method from POST to GET."""
```

----------------------------------------

TITLE: Defining DefaultCookiePolicy Class in Python
DESCRIPTION: The DefaultCookiePolicy class implements standard cookie acceptance rules. It allows configuration of allowed and blocked domains and secure protocols for cookie management.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.cookiejar.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
class DefaultCookiePolicy(CookiePolicy):
    def __init__(self, blocked_domains=None, allowed_domains=None, netscape=True):
        self.blocked_domains = blocked_domains
        self.allowed_domains = allowed_domains
```

----------------------------------------

TITLE: Mapping HTTP Response Codes
DESCRIPTION: This snippet defines a dictionary mapping HTTP response codes to their respective short and long messages. The mapping follows the definitions in RFC 2616, making it useful for interpreting HTTP responses.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/urllib2.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
# Table mapping response codes to messages; entries have the
# form {code: (shortmessage, longmessage)}.
responses = {
    100: ('Continue', 'Request received, please continue'),
    101: ('Switching Protocols', 'Switching to new protocol; obey Upgrade header'),

    200: ('OK', 'Request fulfilled, document follows'),
    201: ('Created', 'Document created, URL follows'),
    202: ('Accepted', 'Request accepted, processing continues off-line'),
    203: ('Non-Authoritative Information', 'Request fulfilled from cache'),
    204: ('No Content', 'Request fulfilled, nothing follows'),
    205: ('Reset Content', 'Clear input form for further input.'),
    206: ('Partial Content', 'Partial content follows.'),

    300: ('Multiple Choices', 'Object has several resources -- see URI list'),
    301: ('Moved Permanently', 'Object moved permanently -- see URI list'),
    302: ('Found', 'Object moved temporarily -- see URI list'),
    303: ('See Other', 'Object moved -- see Method and URL list'),
    304: ('Not Modified', 'Document has not changed since given time'),
    305: ('Use Proxy', 'You must use proxy specified in Location to access this resource.'),
    307: ('Temporary Redirect', 'Object moved temporarily -- see URI list'),

    400: ('Bad Request', 'Bad request syntax or unsupported method'),
    401: ('Unauthorized', 'No permission -- see authorization schemes'),
    402: ('Payment Required', 'No payment -- see charging schemes'),
    403: ('Forbidden', 'Request forbidden -- authorization will not help'),
    404: ('Not Found', 'Nothing matches the given URI'),
    405: ('Method Not Allowed', 'Specified method is invalid for this server.'),
    406: ('Not Acceptable', 'URI not available in preferred format.'),
    407: ('Proxy Authentication Required', 'You must authenticate with this proxy before proceeding.'),
    408: ('Request Timeout', 'Request timed out; try again later.'),
    409: ('Conflict', 'Request conflict.'),
    410: ('Gone', 'URI no longer exists and has been permanently removed.'),
    411: ('Length Required', 'Client must specify Content-Length.'),
    412: ('Precondition Failed', 'Precondition in headers is false.'),
    413: ('Request Entity Too Large', 'Entity is too large.'),
    414: ('Request-URI Too Long', 'URI is too long.'),
    415: ('Unsupported Media Type', 'Entity body in unsupported format.'),
    416: ('Requested Range Not Satisfiable', 'Cannot satisfy request range.'),
    417: ('Expectation Failed', 'Expect condition could not be satisfied.'),

    500: ('Internal Server Error', 'Server got itself in trouble'),
    501: ('Not Implemented', 'Server does not support this operation'),
    502: ('Bad Gateway', 'Invalid responses from another server/proxy.'),
    503: ('Service Unavailable', 'The server cannot process the request due to a high load'),
    504: ('Gateway Timeout', 'The gateway server did not receive a timely response'),
    505: ('HTTP Version Not Supported', 'Cannot fulfill request.'),
}

```

----------------------------------------

TITLE: Setting PDB Trace with Header - Python
DESCRIPTION: Example of using the new header parameter with pdb.set_trace() to print a message before entering the debugger.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.7.0a2.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
pdb.set_trace(header="Custom debug message")
```

----------------------------------------

TITLE: Using HTTP/1.1 with Python's HTTP Server
DESCRIPTION: This command runs a Python HTTP server compliant with HTTP/1.1 by default. Users can specify the protocol version using the --protocol option, introduced in Python 3.11.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.server.rst#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
python -m http.server --protocol HTTP/1.1
```

----------------------------------------

TITLE: TypeVarTuple Invalid Multiple Unpacked Annotations
DESCRIPTION: Illustrates that it is invalid to use multiple unpacked TypeVarTuples within a single tuple type annotation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_120

LANGUAGE: python
CODE:
```
x: tuple[*Ts, *Ts]            # Not valid
```

----------------------------------------

TITLE: Retrieving Current Thread Frames in Python
DESCRIPTION: Returns a dictionary mapping thread identifiers to their topmost stack frames. Useful for debugging deadlocks and examining thread states.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sys.rst#2025-04-23_snippet_5

LANGUAGE: Python
CODE:
```
sys._current_frames()
```

----------------------------------------

TITLE: Counting Leap Years - Python
DESCRIPTION: This function calculates the number of leap years within a specified range of years, thus enhancing calendar accuracy.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/calendar.rst#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
.. function:: leapdays(y1, y2)
```

----------------------------------------

TITLE: Setting Cookie Attributes and Paths
DESCRIPTION: Demonstrates setting additional attributes like path for a cookie and generating cookie output with specific headers
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.cookies.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
C = cookies.SimpleCookie()
C["rocky"] = "road"
C["rocky"]["path"] = "/cookie"
print(C.output(header="Cookie:"))
```

----------------------------------------

TITLE: mmap readline method
DESCRIPTION: The `readline()` method reads a single line from the current file position up to the next newline character and updates the file position to after the read bytes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/mmap.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
".. method:: readline()\n\n   Returns a single line, starting at the current file position and up to the\n   next newline. The file position is updated to point after the bytes that were\n   returned."
```

----------------------------------------

TITLE: Using datetime.strptime Equivalent Implementation in Python
DESCRIPTION: Shows the equivalent implementation of datetime.strptime using time.strptime. This demonstrates how datetime.strptime works under the hood, though the actual implementation handles sub-second components and time zone information that time.strptime discards.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_30

LANGUAGE: python
CODE:
```
datetime(*(time.strptime(date_string, format)[0:6]))
```

----------------------------------------

TITLE: Optimized Traverse Function with Py_VISIT
DESCRIPTION: A more concise version of the traverse function using the Py_VISIT macro to handle reference traversal for garbage collection.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/newtypes_tutorial.rst#2025-04-21_snippet_19

LANGUAGE: c
CODE:
```
static int
Custom_traverse(PyObject *op, visitproc visit, void *arg)
{
    CustomObject *self = (CustomObject *) op;
    Py_VISIT(self->first);
    Py_VISIT(self->last);
    return 0;
}
```

----------------------------------------

TITLE: Identifying Treeview Row in Python
DESCRIPTION: Returns the item ID of the Treeview item at the specified y-coordinate.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
identify_row(y)
```

----------------------------------------

TITLE: Getting Second from Time Object in C
DESCRIPTION: This macro returns the second, as an int from 0 through 59, from a PyDateTime_Time object. The argument must be an instance of PyDateTime_Time, including subclasses. The argument must not be NULL, and the type is not checked.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/datetime.rst#2025-04-21_snippet_40

LANGUAGE: c
CODE:
```
"int PyDateTime_TIME_GET_SECOND(PyDateTime_Time *o)"
```

----------------------------------------

TITLE: Creating Parser for String-based Complete Email Message Parsing in Python
DESCRIPTION: Creates a Parser instance for parsing string-based email messages. This class is parallel to BytesParser but handles string input instead of bytes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.parser.rst#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
Parser(_class=None, *, policy=policy.compat32)
```

----------------------------------------

TITLE: DatagramHandler makeSocket override
DESCRIPTION: This method overrides the :class:`SocketHandler`'s factory method to create a UDP socket (:const:`socket.SOCK_DGRAM`). This ensures that the handler uses UDP for sending log messages.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
   .. method:: makeSocket()

      The factory method of :class:`SocketHandler` is here overridden to create
      a UDP socket (:const:`socket.SOCK_DGRAM`).
```

----------------------------------------

TITLE: Annotated Nested Flattening
DESCRIPTION: Shows that nested `Annotated` types are flattened, with the metadata elements ordered starting from the innermost annotation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_80

LANGUAGE: Python
CODE:
```
assert Annotated[Annotated[int, ValueRange(3, 10)], ctype("char")] == Annotated[
    int, ValueRange(3, 10), ctype("char")
]
```

----------------------------------------

TITLE: Extending ElementTree Elements in Python
DESCRIPTION: Demonstrates how to use the new extend() method to move children from one ElementTree Element to another. This allows for easy rearrangement of XML structure.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.7.rst#2025-04-21_snippet_27

LANGUAGE: Python
CODE:
```
from xml.etree import ElementTree as ET

t = ET.XML("""<list>
  <item>1</item> <item>2</item>  <item>3</item>
</list>""")
new = ET.XML('<root/>')
new.extend(t)

# Outputs <root><item>1</item>...</root>
print ET.tostring(new)
```

----------------------------------------

TITLE: Mapping Bitwise Operators to Functions in Python
DESCRIPTION: This snippet shows the mapping of bitwise operations to their corresponding functions, including 'and_(a, b)' for 'a & b' and 'or_(a, b)' for 'a | b', essential for understanding low-level operations in Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/operator.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
``and_(a, b)``
```

LANGUAGE: python
CODE:
```
``or_(a, b)``
```

----------------------------------------

TITLE: Getting Year from Date Object in C
DESCRIPTION: This macro returns the year, as a positive int, from a PyDateTime_Date object. The argument must be an instance of PyDateTime_Date, including subclasses (such as PyDateTime_DateTime). The argument must not be NULL, and the type is not checked.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/datetime.rst#2025-04-21_snippet_29

LANGUAGE: c
CODE:
```
"int PyDateTime_GET_YEAR(PyDateTime_Date *o)"
```

----------------------------------------

TITLE: Getting Minute from Time Object in C
DESCRIPTION: This macro returns the minute, as an int from 0 through 59, from a PyDateTime_Time object. The argument must be an instance of PyDateTime_Time, including subclasses. The argument must not be NULL, and the type is not checked.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/datetime.rst#2025-04-21_snippet_39

LANGUAGE: c
CODE:
```
"int PyDateTime_TIME_GET_MINUTE(PyDateTime_Time *o)"
```

----------------------------------------

TITLE: Normalizing Timedelta Components Example
DESCRIPTION: Demonstrates how different timedelta components can normalize to the same duration, showing equality comparison and total seconds calculation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> from datetime import timedelta
>>> year = timedelta(days=365)
>>> another_year = timedelta(weeks=40, days=84, hours=23,
...                          minutes=50, seconds=600)
>>> year == another_year
True
>>> year.total_seconds()
31536000.0
```

----------------------------------------

TITLE: Calculating Population Variance with Decimal and Fraction Types
DESCRIPTION: Examples of using pvariance() function with Decimal and Fraction number types to calculate population variance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
>>> from decimal import Decimal as D
>>> pvariance([D("27.5"), D("30.25"), D("30.25"), D("34.5"), D("41.75")])
Decimal('24.815')

>>> from fractions import Fraction as F
>>> pvariance([F(1, 4), F(5, 4), F(1, 2)])
Fraction(13, 72)
```

----------------------------------------

TITLE: Retrieving Message Flags from mboxMessage in Python
DESCRIPTION: Returns a string containing the flags currently set on the message. For conventional format messages, returns a concatenation of zero or one occurrence of each of 'R', 'O', 'D', 'F', and 'A'.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/mailbox.rst#2025-04-21_snippet_28

LANGUAGE: python
CODE:
```
get_flags()
```

----------------------------------------

TITLE: Basic Weak Reference Usage
DESCRIPTION: Shows basic usage of weak references with object creation, reference checking, and garbage collection behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/weakref.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> import weakref
>>> class Object:
...     pass
...
>>> o = Object()
>>> r = weakref.ref(o)
>>> o2 = r()
>>> o is o2
True
>>> del o, o2
>>> print(r())
None
```

----------------------------------------

TITLE: Setting Spinbox Value in Python
DESCRIPTION: Method to set the value of a ttk.Spinbox widget to a specified value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
def set(value):
    Sets the value of the spinbox to *value*.
```

----------------------------------------

TITLE: Complex Phase Calculation
DESCRIPTION: Shows how the phase() function calculates the argument of a complex number, demonstrating the behavior along the negative real axis branch cut.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/cmath.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> phase(-1+0j)
3.141592653589793
>>> phase(-1-0j)
-3.141592653589793
```

----------------------------------------

TITLE: Watching File Descriptor for Read Events in Python asyncio
DESCRIPTION: This example demonstrates how to use loop.add_reader to wait for data on a file descriptor, read the data when available, and then close the event loop.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_37

LANGUAGE: python
CODE:
```
import asyncio
from socket import socketpair

# Create a pair of connected file descriptors
rsock, wsock = socketpair()

loop = asyncio.new_event_loop()

def reader():
    data = rsock.recv(100)
    print("Received:", data.decode())

    # We are done: unregister the file descriptor
    loop.remove_reader(rsock)

    # Stop the event loop
    loop.stop()

# Register the file descriptor for read event
loop.add_reader(rsock, reader)

# Simulate the reception of data from the network
loop.call_soon(wsock.send, 'abc'.encode())

try:
    # Run the event loop
    loop.run_forever()
finally:
    # We are done. Close sockets and the event loop.
    rsock.close()
    wsock.close()
    loop.close()
```

----------------------------------------

TITLE: Writing Configuration with Legacy API in Python
DESCRIPTION: Example of writing configuration data to a file using RawConfigParser's legacy API. Shows how to set various data types and write to example.cfg.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
import configparser

config = configparser.RawConfigParser()

# Please note that using RawConfigParser's set functions, you can assign
# non-string values to keys internally, but will receive an error when
# attempting to write to a file or when you get it in non-raw mode. Setting
# values using the mapping protocol or ConfigParser's set() does not allow
# such assignments to take place.
config.add_section('Section1')
config.set('Section1', 'an_int', '15')
config.set('Section1', 'a_bool', 'true')
config.set('Section1', 'a_float', '3.1415')
config.set('Section1', 'baz', 'fun')
config.set('Section1', 'bar', 'Python')
config.set('Section1', 'foo', '%(bar)s is %(baz)s!')

# Writing our configuration file to 'example.cfg'
with open('example.cfg', 'w') as configfile:
    config.write(configfile)
```

----------------------------------------

TITLE: Using as_completed() with plain iteration in Python
DESCRIPTION: Example showing how to use asyncio.as_completed() with plain iteration, which is compatible with Python versions older than 3.13. Each iteration yields a new coroutine that returns the result of the next completed awaitable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
ipv4_connect = create_task(open_connection("127.0.0.1", 80))
ipv6_connect = create_task(open_connection("::1", 80))
tasks = [ipv4_connect, ipv6_connect]

for next_connect in as_completed(tasks):
    # next_connect is not one of the original task objects. It must be
    # awaited to obtain the result value or raise the exception of the
    # awaitable that finishes next.
    reader, writer = await next_connect
```

----------------------------------------

TITLE: Using Proxy Servers with Authentication in Python
DESCRIPTION: Example showing how to use custom proxy servers with authentication in Python's urllib. It creates custom ProxyHandler and ProxyBasicAuthHandler objects, then builds an opener with them for direct use instead of global installation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_46

LANGUAGE: python
CODE:
```
proxy_handler = urllib.request.ProxyHandler({'http': 'http://www.example.com:3128/'})
proxy_auth_handler = urllib.request.ProxyBasicAuthHandler()
proxy_auth_handler.add_password('realm', 'host', 'username', 'password')

opener = urllib.request.build_opener(proxy_handler, proxy_auth_handler)
# This time, rather than install the OpenerDirector, we use it directly:
with opener.open('http://www.example.com/login.html') as f:
  print(f.read().decode('utf-8'))
```

----------------------------------------

TITLE: Reverse Pointer Lookup
DESCRIPTION: Demonstrates how to retrieve the reverse DNS PTR record name for an IP address. The reverse_pointer attribute provides the name used for performing a PTR lookup, not the resolved hostname.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ipaddress.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> ipaddress.ip_address("127.0.0.1").reverse_pointer
'1.0.0.127.in-addr.arpa'
>>> ipaddress.ip_address("2001:db8::1").reverse_pointer
'1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa'
```

----------------------------------------

TITLE: Using sys.exception in except clause in Python
DESCRIPTION: This snippet demonstrates how to access the current exception using the sys.exception() function in an except block. It showcases nested try-except blocks and the behavior of sys.exception throughout the execution. There are no additional dependencies required, and it operates solely with built-in Python libraries.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
>>> print(sys.exception())
None
>>> try:
...     raise TypeError
... except:
...     print(repr(sys.exception()))
...     try:
...          raise ValueError
...     except:
...         print(repr(sys.exception()))
...     print(repr(sys.exception()))
...
TypeError()
ValueError()
TypeError()
>>> print(sys.exception())
None
```

----------------------------------------

TITLE: Decimal Floating-Point Arithmetic Example
DESCRIPTION: This example showcases the `decimal` module for precise decimal arithmetic. It demonstrates how `Decimal` handles rounding and significant digits differently from the built-in `float` type, which uses binary floating-point representation.  This module is especially suited to financial calculations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib2.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
>>> from decimal import *
>>> round(Decimal('0.70') * Decimal('1.05'), 2)
Decimal('0.74')
>>> round(.70 * 1.05, 2)
0.73
```

----------------------------------------

TITLE: Configuring DeprecationWarnings in Interactive Shells
DESCRIPTION: Code to make DeprecationWarning messages visible in interactive shells.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/warnings.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
import warnings
warnings.filterwarnings("default", category=DeprecationWarning,
                                   module=user_ns.get("__name__"))
```

----------------------------------------

TITLE: Add string.Template methods: is_valid and get_identifiers (Python)
DESCRIPTION: Adds the `is_valid` and `get_identifiers` methods to the `string.Template` class. These methods enhance the functionality of templates by allowing users to validate templates and extract identifiers.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a4.rst#2025-04-21_snippet_42



----------------------------------------

TITLE: Async Generator asend Method
DESCRIPTION: Describes the functionality of the `asend` method of an asynchronous generator.  This method is used to send a value into the asynchronous generator function, and the *value* argument becomes the result of the current yield expression.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/expressions.rst#2025-04-21_snippet_6



----------------------------------------

TITLE: Using NORMALIZE_WHITESPACE Directive in Doctests - Python
DESCRIPTION: This snippet demonstrates how the NORMALIZE_WHITESPACE directive can be used to treat all sequences of whitespace as equal in the expected output, allowing for more flexible matching of output formats.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/doctest.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
>>> print(list(range(20)))  # doctest: +NORMALIZE_WHITESPACE\n[0,   1,  2,  3,  4,  5,  6,  7,  8,  9,\n10,  11, 12, 13, 14, 15, 16, 17, 18, 19]
```

----------------------------------------

TITLE: Testing Blank Line Output in Python Doctest
DESCRIPTION: Shows how to test multiple print statements including a blank line, using the special <BLANKLINE> notation to match empty lines in output.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/test_doctest/test_doctest.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> if 1:
...    print('a')
...    print()
...    print('b')
a
<BLANKLINE>
b
```

----------------------------------------

TITLE: Enable Color in argparse Help Messages (Attribute)
DESCRIPTION: Demonstrates how to enable color output for help messages by setting the `color` attribute on the `ArgumentParser` instance after initialization. This method provides an alternative for enabling the feature, potentially for compatibility.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_25

LANGUAGE: Python
CODE:
```
import argparse

parser = argparse.ArgumentParser(description='Process some integers.')
parser.color = True
```

----------------------------------------

TITLE: Create tar Archive from Files via tarfile CLI - Shell
DESCRIPTION: This command uses the `tarfile` module's command-line interface (`-m tarfile`) to create a new tar archive (`-c monty.tar`) from a list of specified files (`spam.txt`, `eggs.txt`).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_25

LANGUAGE: Shell
CODE:
```
$ python -m tarfile -c monty.tar  spam.txt eggs.txt
```

----------------------------------------

TITLE: Comparing Unicode to UTF-8 Buffer (Sized) - Python C API - C
DESCRIPTION: Compare a Unicode object with a C char buffer interpreted as UTF-8 or ASCII, given its size. Returns 1 if they are equal, 0 otherwise. This function does not raise exceptions and returns false if the Unicode object contains surrogates or the C string is invalid UTF-8.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/unicode.rst#_snippet_97

LANGUAGE: C
CODE:
```
int PyUnicode_EqualToUTF8AndSize(PyObject *unicode, const char *string, Py_ssize_t size)
```

----------------------------------------

TITLE: Using ListProxy and DictProxy for Interprocess Communication in Python
DESCRIPTION: Demonstrates how proxy objects enable data sharing between processes. Shows basic operations with ListProxy objects including how changes to one proxy are reflected in another.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_36

LANGUAGE: python
CODE:
```
>>> print(a, b)
[<ListProxy object, typeid 'list' at ...>] []
>>> b.append('hello')
>>> print(a[0], b)
['hello'] ['hello']
```

----------------------------------------

TITLE: Using os.killpg to Send Signals to Process Groups in Python
DESCRIPTION: Sends a signal to an entire process group identified by the process group ID. This is useful for signaling multiple related processes at once.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_66

LANGUAGE: python
CODE:
```
killpg(pgid, sig, /)
```

----------------------------------------

TITLE: Distutils Package Registration in Python
DESCRIPTION: This snippet provides an example of using the Distutils `setup.py` for registering a package with metadata and classifiers. It demonstrates how to conditionally include classifiers for package distribution during setup, utilizing the Distutils library.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.3.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
from distutils import core
kw = {'name': "Quixote",
      'version': "0.5.1",
      'description': "A highly Pythonic Web application framework",
      # ...
      }

if (hasattr(core, 'setup_keywords') and
    'classifiers' in core.setup_keywords):
    kw['classifiers'] = \
        ['Topic :: Internet :: WWW/HTTP :: Dynamic Content',
         'Environment :: No Input/Output (Daemon)',
         'Intended Audience :: Developers'],

core.setup(**kw)
```

----------------------------------------

TITLE: Interacting with InteractiveConsole
DESCRIPTION: Emulates the interactive Python console, supporting prompts and displaying exit messages. It enhances user interaction in the console environment.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/code.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
def InteractiveConsole.interact(banner=None, exitmsg=None):
    """
    Closely emulate the interactive Python console. The optional *banner* argument
    specify the banner to print before the first interaction; by default it prints a
    banner similar to the one printed by the standard Python interpreter, followed
    by the class name of the console object in parentheses (so as not to confuse
    this with the real interpreter -- since it's so close!).

    The optional *exitmsg* argument specifies an exit message printed when exiting.
    Pass the empty string to suppress the exit message. If *exitmsg* is not given or
    ``None``, a default message is printed.
    """

```

----------------------------------------

TITLE: Defining Member Types for PyMemberDef in C
DESCRIPTION: This snippet lists the available macros for PyMemberDef.type, corresponding to various C types and their Python equivalents. These macros are used to define the type of attributes in CPython extension modules.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/structures.rst#2025-04-23_snippet_13

LANGUAGE: C
CODE:
```
Py_T_BYTE           char                 int
Py_T_SHORT          short                int
Py_T_INT            int                  int
Py_T_LONG           long                 int
Py_T_LONGLONG       long long            int
Py_T_UBYTE          unsigned char        int
Py_T_UINT           unsigned int         int
Py_T_USHORT         unsigned short       int
Py_T_ULONG          unsigned long        int
Py_T_ULONGLONG      unsigned long long   int
Py_T_PYSSIZET       Py_ssize_t           int
Py_T_FLOAT          float                float
Py_T_DOUBLE         double               float
Py_T_BOOL           char                 bool
Py_T_STRING         const char *         str (RO)
Py_T_STRING_INPLACE const char[]         str (RO)
Py_T_CHAR           char (0-127)         str
Py_T_OBJECT_EX      PyObject *           object (D)
```

----------------------------------------

TITLE: Converting memoryview to hexadecimal representation
DESCRIPTION: Example demonstrating the hex() method which returns a string containing two hexadecimal digits for each byte in the buffer.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_75

LANGUAGE: python
CODE:
```
m = memoryview(b"abc")
m.hex()
'616263'
```

----------------------------------------

TITLE: Encoding Data with Python codecs.encode
DESCRIPTION: Encodes an object using the codec registered for the specified encoding. The 'errors' parameter controls error handling, defaulting to 'strict'.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/codecs.rst#_snippet_0

LANGUAGE: Python
CODE:
```
import codecs

encoded_bytes = codecs.encode("hello world", "utf-8")
# encoded_bytes is b'hello world'

# Example with errors
try:
    codecs.encode("\udcff", "ascii", errors="strict")
except ValueError as e:
    print(f"Encoding error: {e}")
```

----------------------------------------

TITLE: Encoding Unicode with Code Page - Python C API - C (Windows)
DESCRIPTION: Encode a Unicode object into a Python bytes object using the specified Windows code page. Returns NULL if an exception occurs during encoding. Using the CP_ACP macro for the code_page parameter provides the behavior equivalent to the MBCS encoder.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/unicode.rst#_snippet_82

LANGUAGE: C
CODE:
```
PyObject* PyUnicode_EncodeCodePage(int code_page, PyObject *unicode, const char *errors)
```

----------------------------------------

TITLE: Rounding Decimal Numbers with Built-in Round Python
DESCRIPTION: Demonstrates using Python's built-in `round` function with `Decimal` objects. It shows how `round` handles rounding to the nearest integer (ignoring context), rounding ties to even, and rounding to a specific number of decimal places or a multiple of 10^n when the `ndigits` argument is provided (respecting context rounding).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_29

LANGUAGE: python
CODE:
```
from decimal import Decimal, getcontext, ROUND_DOWN
getcontext().rounding = ROUND_DOWN
round(Decimal('3.75'))     # context rounding ignored
round(Decimal('3.5'))      # round-ties-to-even
round(Decimal('3.75'), 0)  # uses the context rounding
round(Decimal('3.75'), 1)
round(Decimal('3.75'), -1)
```

----------------------------------------

TITLE: Adding math.sumprod() function in Python
DESCRIPTION: Introduces a new math.sumprod() function to compute the sum of products efficiently.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.12.0a4.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
math.sumprod()
```

----------------------------------------

TITLE: Showing Traceback in InteractiveInterpreter
DESCRIPTION: Displays the most recent exception traceback from the interpreter, helping in debugging and understanding errors during execution.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/code.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
def InteractiveInterpreter.showtraceback():
    """
    Display the exception that just occurred.  We remove the first stack item
    because it is within the interpreter object implementation. The output is
    written by the :meth:`write` method.

    .. versionchanged:: 3.5 The full chained traceback is displayed instead
      of just the primary traceback.
    """

```

----------------------------------------

TITLE: Using MultiCall Objects for Batch XML-RPC Requests
DESCRIPTION: This example shows how to use MultiCall objects to send multiple XML-RPC requests in a single call, with a server providing arithmetic functions and a client using MultiCall to perform multiple operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xmlrpc.client.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
from xmlrpc.server import SimpleXMLRPCServer

def add(x, y):
    return x + y

def subtract(x, y):
    return x - y

def multiply(x, y):
    return x * y

def divide(x, y):
    return x // y

# A simple server with simple arithmetic functions
server = SimpleXMLRPCServer(("localhost", 8000))
print("Listening on port 8000...")
server.register_multicall_functions()
server.register_function(add, 'add')
server.register_function(subtract, 'subtract')
server.register_function(multiply, 'multiply')
server.register_function(divide, 'divide')
server.serve_forever()
```

LANGUAGE: python
CODE:
```
import xmlrpc.client

proxy = xmlrpc.client.ServerProxy("http://localhost:8000/")
multicall = xmlrpc.client.MultiCall(proxy)
multicall.add(7, 3)
multicall.subtract(7, 3)
multicall.multiply(7, 3)
multicall.divide(7, 3)
result = multicall()

print("7+3=%d, 7-3=%d, 7*3=%d, 7//3=%d" % tuple(result))
```

----------------------------------------

TITLE: Creating Basic File and Directory Dialogs - Python
DESCRIPTION: The `Directory` and `FileDialog` classes facilitate the creation of prompts for users to select files or directories while providing customization options. The `FileDialog` class includes event handling methods for user interactions, such as double-click and selection events.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dialog.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
.. class:: Directory(master=None, **options)
   .. class:: FileDialog(master, title=None)
   .. method:: cancel_command(event=None)
      Trigger the termination of the dialog window.
   .. method:: get_selection()
      Retrieve the currently selected item.

```

----------------------------------------

TITLE: Creating a GenericAlias object in C
DESCRIPTION: This snippet demonstrates the use of the `Py_GenericAlias` function to create a `GenericAlias` object.  It requires an origin (a PyTypeObject*) and arguments (a PyTupleObject* or any PyObject*).  The origin becomes the `__origin__` attribute, and the arguments become the `__args__` attribute of the `GenericAlias` object. It is equivalent to calling `types.GenericAlias` in Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/typehints.rst#2025-04-21_snippet_0

LANGUAGE: c
CODE:
```
"PyObject* Py_GenericAlias(PyObject *origin, PyObject *args)"
```

----------------------------------------

TITLE: Basic History File Management in Python Interactive Sessions
DESCRIPTION: Demonstrates basic readline history management by loading and saving history to a .python_history file in the user's home directory. Includes automatic loading on startup and saving on exit with a 1000 entry limit.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/readline.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import atexit
import os
import readline

histfile = os.path.join(os.path.expanduser("~"), ".python_history")
try:
    readline.read_history_file(histfile)
    # default history len is -1 (infinite), which may grow unruly
    readline.set_history_length(1000)
except FileNotFoundError:
    pass

atexit.register(readline.write_history_file, histfile)
```

----------------------------------------

TITLE: Using new math functions in Python
DESCRIPTION: This snippet demonstrates the usage of new math functions added in Python 3.2, including isfinite, expm1, erf, erfc, gamma, and lgamma.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_35

LANGUAGE: python
CODE:
```
>>> from math import isfinite
>>> [isfinite(x) for x in (123, 4.56, float('Nan'), float('Inf'))]
[True, True, False, False]

>>> from math import expm1
>>> expm1(0.013671875)   # more accurate way to compute e**x-1 for a small x
0.013765762467652909

>>> from math import erf, erfc, sqrt
>>> erf(1.0/sqrt(2.0))   # portion of normal distribution within 1 standard deviation
0.682689492137086
>>> erfc(1.0/sqrt(2.0))  # portion of normal distribution outside 1 standard deviation
0.31731050786291404
>>> erf(1.0/sqrt(2.0)) + erfc(1.0/sqrt(2.0))
1.0

>>> from math import gamma, lgamma
>>> gamma(7.0)           # six factorial
720.0
>>> lgamma(801.0)        # log(800 factorial)
4551.950730698041
```

----------------------------------------

TITLE: Defining __all__ for Module Exports (Python)
DESCRIPTION: This example illustrates how to use the `__all__` attribute in a Python module to control which names are imported when using `from module import *`. By defining a list of public names, developers can prevent unwanted names (e.g., imported modules like `sys` or `string`) from being added to the importing module's namespace.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.1.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
"# List public names
__all__ = ['Database', 'open']"
```

----------------------------------------

TITLE: Fix ExceptionGroup split and subgroup methods (C)
DESCRIPTION: Addresses a bug where the `split` and `subgroup` methods of the `ExceptionGroup` class were not copying the exception group's `__note__` field to the resulting parts. This fix ensures that notes are properly propagated when splitting or creating subgroups of exceptions.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a4.rst#2025-04-21_snippet_20



----------------------------------------

TITLE: Quoted-Printable Encoding in Email
DESCRIPTION: Encodes the payload of an email message into quoted-printable format. Sets the Content-Transfer-Encoding header to 'quoted-printable'. Useful when the payload contains mostly printable characters with a few unprintable ones.  Encodes all tabs and space characters in the data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.encoders.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
".. function:: encode_quopri(msg)\n\n   Encodes the payload into quoted-printable form and sets the\n   :mailheader:`Content-Transfer-Encoding` header to ``quoted-printable`` [#]_.\n   This is a good encoding to use when most of your payload is normal printable\n   data, but contains a few unprintable characters."
```

----------------------------------------

TITLE: Multi-line Timing Direct Usage - Python
DESCRIPTION: Demonstrates timing multi-line code blocks using direct timeit module usage in Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/timeit.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> import timeit
>>> s = """
... try:
...     str.__bool__
... except AttributeError:
...     pass
... """
>>> timeit.timeit(stmt=s, number=100000)
>>> s = "if hasattr(str, '__bool__'): pass"
>>> timeit.timeit(stmt=s, number=100000)
```

----------------------------------------

TITLE: Executing Code Remotely in Another Python Process using sys.remote_exec
DESCRIPTION: Shows how to use `sys.remote_exec` to run a Python script in a target process specified by its PID. It creates a temporary script, writes code to it, executes it remotely, and cleans up the temporary file.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_4

LANGUAGE: python
CODE:
```
import os
import sys
import tempfile

# Create a temporary script
with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
    script_path = f.name
    f.write(f"import my_debugger; my_debugger.connect({os.getpid()})")
try:
    # Execute in process with PID 1234
    print("Behold! An offering:")
    sys.remote_exec(1234, script_path)
finally:
    os.unlink(script_path)
```

----------------------------------------

TITLE: Decoding URL Content with UTF-8 in Python
DESCRIPTION: Example demonstrating how to decode the bytes returned from urlopen() using UTF-8 encoding. This is necessary because urlopen() returns raw bytes that need to be decoded to a string using the appropriate encoding.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_40

LANGUAGE: python
CODE:
```
>>> with urllib.request.urlopen('http://www.python.org/') as f:
...     print(f.read(100).decode('utf-8'))
...
<!doctype html>
<!--[if lt IE 7]>   <html class="no-js ie6 lt-ie7 lt-ie8 lt-ie9">   <![endif]-->
<!-
```

----------------------------------------

TITLE: Showing Help for Argparse Subparsers in Shell
DESCRIPTION: This snippet shows how to use the command line to display help messages for a script that utilizes argparse subparsers. It showcases the general help, help for 'launch' options, and example command executions setting parameters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_4

LANGUAGE: shell-session
CODE:
```
$ ./helm.py --help                         # top level help (launch and move)
$ ./helm.py launch --help                  # help for launch options
$ ./helm.py launch --missiles              # set missiles=True and torpedos=False
$ ./helm.py steer --course 180 --speed 5   # set movement parameters
```

----------------------------------------

TITLE: Implementing Partial Methods for a Cell Class in Python
DESCRIPTION: Example of using partialmethod to create method definitions with pre-filled arguments. This demonstrates how to create specialized methods (set_alive and set_dead) based on a more general method (set_state).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
>>> class Cell:
...     def __init__(self):
...         self._alive = False
...     @property
...     def alive(self):
...         return self._alive
...     def set_state(self, state):
...         self._alive = bool(state)
...     set_alive = partialmethod(set_state, True)
...     set_dead = partialmethod(set_state, False)
...
>>> c = Cell()
>>> c.alive
False
>>> c.set_alive()
>>> c.alive
True
```

----------------------------------------

TITLE: Opening URL in New Tab using webbrowser (Python)
DESCRIPTION: Demonstrates how to use the module-level `webbrowser.open_new_tab()` function in Python. This function attempts to open the specified `url` in a new browser tab if a browser window is already open, providing a convenient way to navigate without leaving the current application context. Requires the `webbrowser` module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/webbrowser.rst#_snippet_1

LANGUAGE: python
CODE:
```
webbrowser.open_new_tab(url)
```

----------------------------------------

TITLE: Differ Text Comparison Example
DESCRIPTION: This example demonstrates how to use the Differ class to compare two sequences of lines and generate a delta. It instantiates a Differ object, calls its compare method with two lists of strings representing the texts to compare, and then converts the resulting generator to a list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/difflib.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
>>> result = list(d.compare(text1, text2))
```

----------------------------------------

TITLE: SplitResultBytes Class Definition
DESCRIPTION: SplitResultBytes is a concrete class for urlsplit results containing bytes data. It provides a decode method that returns a SplitResult instance. This class is used when operating on bytes or bytearray objects and represents the result of splitting a URL.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.parse.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
.. class:: SplitResultBytes(scheme, netloc, path, query, fragment)

   Concrete class for :func:`urlsplit` results containing :class:`bytes`
   data. The :meth:`decode` method returns a :class:`SplitResult`
   instance.

   .. versionadded:: 3.2

```

----------------------------------------

TITLE: Deque Module Example
DESCRIPTION: This snippet demonstrates the use of `collections.deque` for queue operations.  Elements are appended to the right and removed from the left. This provides efficient appends and pops from both ends, making it suitable for implementing queues.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib2.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
>>> from collections import deque
>>> d = deque(["task1", "task2", "task3"])
>>> d.append("task4")
>>> print("Handling", d.popleft())
Handling task1
```

----------------------------------------

TITLE: Generating Unified Diff in Python
DESCRIPTION: Demonstrates using the unified_diff function to create a unified diff format output. It compares two lists of strings and generates a compact diff showing changes with context lines.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/difflib.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> s1 = ['bacon\n', 'eggs\n', 'ham\n', 'guido\n']
>>> s2 = ['python\n', 'eggy\n', 'hamster\n', 'guido\n']
>>> sys.stdout.writelines(unified_diff(s1, s2, fromfile='before.py', tofile='after.py'))
--- before.py
+++ after.py
@@ -1,4 +1,4 @@
-bacon
-eggs
-ham
+python
+eggy
+hamster
 guido
```

----------------------------------------

TITLE: Registering Function with Arguments using Atexit
DESCRIPTION: Shows how to register an exit handler function with both positional and keyword arguments that will be passed when the function is called during program termination.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/atexit.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def goodbye(name, adjective):
    print('Goodbye %s, it was %s to meet you.' % (name, adjective))

import atexit

atexit.register(goodbye, 'Donny', 'nice')
# or:
atexit.register(goodbye, adjective='nice', name='Donny')
```

----------------------------------------

TITLE: Creating Python Callable with Minimal Parameters in C Extension
DESCRIPTION: A simplified version to create a Python callable object from a method definition with only the method and self parameter. Equivalent to PyCMethod_New with NULL for both module and cls parameters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/structures.rst#2025-04-23_snippet_9

LANGUAGE: C
CODE:
```
PyObject * PyCFunction_New(PyMethodDef *ml, PyObject *self)
```

----------------------------------------

TITLE: Creating Calendar Object - Python
DESCRIPTION: Creates a Calendar object with configurable first weekday. MONDAY is 0 (default) and SUNDAY is 6. The object provides methods for calendar data preparation without formatting.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/calendar.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
Calendar(firstweekday=0)
```

----------------------------------------

TITLE: Using isdigit Method in Python bytes Objects
DESCRIPTION: Demonstrates the isdigit() method which checks if all bytes in the sequence are ASCII decimal digits and the sequence is not empty.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_56

LANGUAGE: python
CODE:
```
>>> b'1234'.isdigit()
True
>>> b'1.23'.isdigit()
False
```

----------------------------------------

TITLE: Bytearray Resize Operation
DESCRIPTION: Demonstrates the resize method for bytearray objects, showing how to shrink and grow byte sequences
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_42

LANGUAGE: python
CODE:
```
shrink = bytearray(b'abc')
strink.resize(1)
```

LANGUAGE: python
CODE:
```
grow = bytearray(b'abc')
grow.resize(5)
```

----------------------------------------

TITLE: Using ExtendedInterpolation in ConfigParser
DESCRIPTION: Demonstration of the ExtendedInterpolation feature in ConfigParser which allows referring to values from different sections.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_71

LANGUAGE: python
CODE:
```
>>> parser = ConfigParser(interpolation=ExtendedInterpolation())
>>> parser.read_dict({'buildout': {'directory': '/home/ambv/zope9'},
...                   'custom': {'prefix': '/usr/local'}})
>>> parser.read_string("""
... [buildout]
... parts =
...   zope9
...   instance
... find-links =
...   ${buildout:directory}/downloads/dist
...
... [zope9]
... recipe = plone.recipe.zope9install
... location = /opt/zope
...
... [instance]
... recipe = plone.recipe.zope9instance
... zope9-location = ${zope9:location}
... zope-conf = ${custom:prefix}/etc/zope.conf
... """)
>>> parser['buildout']['find-links']
'\n/home/ambv/zope9/downloads/dist'
>>> parser['instance']['zope-conf']
'/usr/local/etc/zope.conf'
>>> instance = parser['instance']
>>> instance['zope-conf']
'/usr/local/etc/zope.conf'
>>> instance['zope9-location']
'/opt/zope'
```

----------------------------------------

TITLE: Sorting by Time and Printing Top 10
DESCRIPTION: This code sorts profiling data by the time spent within each function, excluding subfunction calls, and prints the top 10 functions. It's useful for finding functions that are looping and taking a lot of time.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/profile.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
p.sort_stats(SortKey.TIME).print_stats(10)
```

----------------------------------------

TITLE: Registering an Existing Class as a Virtual Subclass of Sequence ABC in Python
DESCRIPTION: Example demonstrating how to register an existing class as a virtual subclass of Sequence ABC. The class must implement all required methods without inheriting from the ABC directly.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.abc.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
class D:                                 # No inheritance
    def __init__(self): ...              # Extra method not required by the ABC
    def __getitem__(self, index):  ...   # Abstract method
    def __len__(self):  ...              # Abstract method
    def count(self, value): ...          # Mixin method
    def index(self, value): ...          # Mixin method

Sequence.register(D)                     # Register instead of inherit
```

----------------------------------------

TITLE: URL Opening without Context Manager in Python
DESCRIPTION: Example showing how to open and read a URL without using the context manager (with statement) approach. This demonstrates manual resource management with try-finally to ensure proper closing of the connection.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_41

LANGUAGE: python
CODE:
```
>>> import urllib.request
>>> f = urllib.request.urlopen('http://www.python.org/')
>>> try:
...     print(f.read(100).decode('utf-8'))
... finally:
...     f.close()
...
<!doctype html>
<!--[if lt IE 7]>   <html class="no-js ie6 lt-ie7 lt-ie8 lt-ie9">   <![endif]-->
<!--
```

----------------------------------------

TITLE: Copy Data Between Python Buffer Objects
DESCRIPTION: The function 'PyObject_CopyData' transfers data from a source to a destination buffer object, handling conversion between C and Fortran style buffers. It returns 0 on success or -1 on error.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/buffer.rst#2025-04-21_snippet_9

LANGUAGE: C
CODE:
```
int PyObject_CopyData(PyObject *dest, PyObject *src)
```

----------------------------------------

TITLE: Sleeping in Lock Tests
DESCRIPTION: This snippet shows the use of `time.sleep` within the `_wait` function in `lock_tests.py`. This is likely used to introduce a small delay in a test case, possibly to simulate a slow operation or to allow other threads to run.  The sleep duration is 0.01 seconds.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/gdb_helpers.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
time.sleep(0.01)
```

----------------------------------------

TITLE: Implementing Persistent IDs in Python Pickler
DESCRIPTION: Method that can be overridden in Pickler subclasses to implement persistent object references. Returns None by default, but any other value becomes a persistent ID for the object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pickle.rst#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
persistent_id(obj)
```

----------------------------------------

TITLE: Registering Tool ID in sys.monitoring Python
DESCRIPTION: This function registers a tool identifier and associates it with a name, making the ID available for use by the tool. The `tool_id` must be an integer between 0 and 5. Calling this function is required before the tool ID can be used to register events or callbacks. It raises `ValueError` if the specified `tool_id` is already registered.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sys.monitoring.rst#_snippet_1

LANGUAGE: Python
CODE:
```
use_tool_id(tool_id: int, name: str, /) -> None
```

----------------------------------------

TITLE: SequenceMatcher Matching Blocks Example
DESCRIPTION: This snippet demonstrates how to use SequenceMatcher to find matching blocks between two strings. It initializes a SequenceMatcher object with two strings and then calls the get_matching_blocks method to obtain a list of matching blocks represented as Match objects. The output shows the starting indices and sizes of the matching blocks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/difflib.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
">>> s = SequenceMatcher(None, \"abxcd\", \"abcd\")\n>>> s.get_matching_blocks()\n[Match(a=0, b=0, size=2), Match(a=3, b=2, size=2), Match(a=5, b=4, size=0)]"
```

----------------------------------------

TITLE: Preserving Order in collections.ChainMap
DESCRIPTION: collections.ChainMap() now preserves the order of the underlying mappings. This change improves consistency with other ordered mappings in Python.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.7.0b2.rst#2025-04-21_snippet_25



----------------------------------------

TITLE: Creating a Server with asyncio in Python
DESCRIPTION: This snippet demonstrates how to create an asyncio server that handles client connections. It uses the serve_forever method to continuously accept connections until cancelled.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_33

LANGUAGE: python
CODE:
```
async def client_connected(reader, writer):
    # Communicate with the client with
    # reader/writer streams.  For example:
    await reader.readline()

async def main(host, port):
    srv = await asyncio.start_server(
        client_connected, host, port)
    await srv.serve_forever()

asyncio.run(main('127.0.0.1', 0))
```

----------------------------------------

TITLE: Demonstrating NameError Suggestion for Instance Attributes in Python
DESCRIPTION: This example illustrates the enhanced `NameError` message in Python 3.12, which suggests using `self.<attribute_name>` when an undefined name within a method matches an attribute of the instance. The traceback shows the suggested fix.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_15

LANGUAGE: Python
CODE:
```
class A:
   def __init__(self):
       self.blech = 1

   def foo(self):
       somethin = blech

A().foo()
```

----------------------------------------

TITLE: Integer Import/Export C API
DESCRIPTION: A new API added for importing and exporting Python integer objects (PyLong) efficiently, as described in PEP 757. This provides structured access to the internal representation of large integers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_37

LANGUAGE: C
CODE:
```
PyLong_GetNativeLayout
```

LANGUAGE: C
CODE:
```
PyLong_Export
```

LANGUAGE: C
CODE:
```
PyLong_FreeExport
```

LANGUAGE: C
CODE:
```
PyLongWriter_Create
```

LANGUAGE: C
CODE:
```
PyLongWriter_Finish
```

LANGUAGE: C
CODE:
```
PyLongWriter_Discard
```

----------------------------------------

TITLE: Fixing potential deadlock in `concurrent.futures`
DESCRIPTION: This change addresses a potential deadlock that could occur at shutdown of forked children when using the `concurrent.futures` module.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a1.rst#2025-04-21_snippet_18



----------------------------------------

TITLE: Removing _Py_CheckRecursionLimit variable in C API
DESCRIPTION: The `_Py_CheckRecursionLimit` variable has been removed from the C API. It has been replaced by `ceval.recursion_limit` of the `PyInterpreterState` structure.  This change simplifies recursion limit management.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a1.rst#2025-04-21_snippet_62

LANGUAGE: c
CODE:
```
"Remove the ``_Py_CheckRecursionLimit`` variable: it has been replaced by
``ceval.recursion_limit`` of the :c:type:`PyInterpreterState` structure.
Patch by Victor Stinner."
```

----------------------------------------

TITLE: SysLogHandler initialization
DESCRIPTION: Returns a new instance of the :class:`SysLogHandler` class intended to communicate with a remote Unix machine whose address is given by *address* in the form of a ``(host, port)`` tuple. If *address* is not specified, ``('localhost', 514)`` is used.  The type of socket opened depends on the *socktype* argument, which defaults to :const:`socket.SOCK_DGRAM` and thus opens a UDP socket.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
.. class:: SysLogHandler(address=('localhost', SYSLOG_UDP_PORT), facility=LOG_USER, socktype=socket.SOCK_DGRAM, timeout=None)

   Returns a new instance of the :class:`SysLogHandler` class intended to
   communicate with a remote Unix machine whose address is given by *address* in
   the form of a ``(host, port)`` tuple.  If *address* is not specified,
   ``('localhost', 514)`` is used.  The address is used to open a socket.  An
   alternative to providing a ``(host, port)`` tuple is providing an address as a
   string, for example '/dev/log'. In this case, a Unix domain socket is used to
   send the message to the syslog. If *facility* is not specified,
   :const:`LOG_USER` is used. The type of socket opened depends on the
   *socktype* argument, which defaults to :const:`socket.SOCK_DGRAM` and thus
   opens a UDP socket. To open a TCP socket (for use with the newer syslog
   daemons such as rsyslog), specify a value of :const:`socket.SOCK_STREAM`.
   If *timeout* is specified, it sets a timeout (in seconds) for the socket operations.
   This can help prevent the program from hanging indefinitely if the syslog server is
   unreachable. By default, *timeout* is ``None``, meaning no timeout is applied.
```

----------------------------------------

TITLE: Using Roundrobin Function for Interleaving Sequences in Python
DESCRIPTION: Utilizes the roundrobin function to interleave elements from multiple sequences. Demonstrates the output and validates lazy consumption by comparing the result with expected combinations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_80

LANGUAGE: Python
CODE:
```
>>> list(roundrobin('abc', 'd', 'ef'))
['a', 'd', 'e', 'b', 'f', 'c']
>>> ranges = [range(5, 1000), range(4, 3000), range(0), range(3, 2000), range(2, 5000), range(1, 3500)]
>>> collections.Counter(roundrobin(*ranges)) == collections.Counter(chain(*ranges))
True
>>> # Verify that the inputs are consumed lazily
>>> input_iterators = list(map(iter, ['abcd', 'ef', '', 'ghijk', 'l', 'mnopqr']))
>>> output_iterator = roundrobin(*input_iterators)
>>> ''.join(islice(output_iterator, 10))
'aeglmbfhnc'
>>> ''.join(chain(*input_iterators))
'dijkopqr'
```

----------------------------------------

TITLE: Fractions Module Usage Example
DESCRIPTION: Shows how to use the new Fraction class from the fractions module for representing rational numbers exactly.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
>>> from fractions import Fraction
>>> a = Fraction(2, 3)
>>> b = Fraction(2, 5)
>>> float(a), float(b)
(0.66666666666666663, 0.40000000000000002)
>>> a+b
Fraction(16, 15)
>>> a/b
Fraction(5, 3)

>>> (2.5) .as_integer_ratio()
(5, 2)
>>> (3.1415) .as_integer_ratio()
(7074029114692207L, 2251799813685248L)
>>> (1./3) .as_integer_ratio()
(6004799503160661L, 18014398509481984L)
```

----------------------------------------

TITLE: Demonstrating Python Indentation vs C-style Braces
DESCRIPTION: Example showing how C-style code can be visually misleading due to indentation not matching logical flow, which Python's indentation-based syntax prevents.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/design.rst#2025-04-21_snippet_0

LANGUAGE: c
CODE:
```
if (x <= y)
        x++;
        y--;
z++;
```

----------------------------------------

TITLE: Terminating a Task Group in Python
DESCRIPTION: Demonstrates how to forcefully terminate a task group by adding an exception-raising task and ignoring the raised exception. This approach allows for controlled termination of task groups.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
import asyncio
from asyncio import TaskGroup

class TerminateTaskGroup(Exception):
    """Exception raised to terminate a task group."""

async def force_terminate_task_group():
    """Used to force termination of a task group."""
    raise TerminateTaskGroup()

async def job(task_id, sleep_time):
    print(f'Task {task_id}: start')
    await asyncio.sleep(sleep_time)
    print(f'Task {task_id}: done')

async def main():
    try:
        async with TaskGroup() as group:
            # spawn some tasks
            group.create_task(job(1, 0.5))
            group.create_task(job(2, 1.5))
            # sleep for 1 second
            await asyncio.sleep(1)
            # add an exception-raising task to force the group to terminate
            group.create_task(force_terminate_task_group())
    except* TerminateTaskGroup:
        pass

asyncio.run(main())
```

----------------------------------------

TITLE: Deleting Content-Type Parameter in Python
DESCRIPTION: This function completely removes a specified parameter from the Content-Type header, rewriting the header without that parameter. It maintains the quoting of remaining parameters, contributing to header management.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.compat32-message.rst#2025-04-21_snippet_13

LANGUAGE: Python
CODE:
```
".. method:: del_param(param, header='content-type', requote=True)\n\n      Remove the given parameter completely from the :mailheader:`Content-Type`\n      header."
```

----------------------------------------

TITLE: Using TracebackException's compact parameter in unittest
DESCRIPTION: Utilizes the new 'compact' parameter of TracebackException in unittest.TestResult to reduce time and memory consumption during traceback formatting.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a5.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from traceback import TracebackException
from unittest import TestResult

# Example usage in TestResult
TestResult._exc_info_to_string(self, err, test):
    # ...
    return ''.join(TracebackException(*err, compact=True).format())
```

----------------------------------------

TITLE: Implementing filterfalse function in Python
DESCRIPTION: Equivalent implementation of the filterfalse function that creates an iterator filtering elements from the iterable, returning only those for which the predicate returns a false value. If predicate is None, it returns items that evaluate to false.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
def filterfalse(predicate, iterable):
    # filterfalse(lambda x: x<5, [1,4,6,3,8]) → 6 8

    if predicate is None:
        predicate = bool

    for x in iterable:
        if not predicate(x):
            yield x
```

----------------------------------------

TITLE: Setting Widget Options at Creation in Tkinter
DESCRIPTION: Demonstrates how to set widget options when creating a new button using keyword arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
fred = Button(self, fg="red", bg="blue")
```

----------------------------------------

TITLE: Using fill Context Manager - Python Turtle
DESCRIPTION: Demonstrates the use of the `fill` context manager (available from Python 3.14) as an alternative to `begin_fill()` and `end_fill()` for automatically handling shape filling operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_12

LANGUAGE: Python
CODE:
```
with fill():
    for i in range(4):
        forward(100)
        right(90)

forward(200)
```

----------------------------------------

TITLE: Get Length of Unicode String in C
DESCRIPTION: Returns the length of a Python Unicode string in code points. The input PyObject pointer must refer to a Unicode object in its 'canonical' representation (this is not checked).
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/unicode.rst#_snippet_6

LANGUAGE: c
CODE:
```
Py_ssize_t PyUnicode_GET_LENGTH(PyObject *unicode)
```

----------------------------------------

TITLE: Defining a Custom Deallocator in C Extensions
DESCRIPTION: This snippet demonstrates how to define and implement a custom deallocator in a Python C extension. It employs the PyObject_GC_UnTrack function to manage garbage collection and releases the object memory using tp_free.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/newtypes_tutorial.rst#2025-04-21_snippet_21

LANGUAGE: C
CODE:
```
static void
Custom_dealloc(PyObject *op)
{
    PyObject_GC_UnTrack(op);
    (void)Custom_clear(op);
    Py_TYPE(op)->tp_free(op);
}
```

----------------------------------------

TITLE: Detecting Source File Encoding with detect_encoding()
DESCRIPTION: This function detects the encoding of a Python source file. It requires a readline callable and returns the detected encoding and any read lines.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tokenize.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
detect_encoding(readline)
```

----------------------------------------

TITLE: Terminating Subprocess via SubprocessTransport in Python
DESCRIPTION: This method stops the subprocess. On POSIX, it sends SIGTERM. On Windows, it calls TerminateProcess() API function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
SubprocessTransport.terminate()
```

----------------------------------------

TITLE: Printing Async Call Graph - Python
DESCRIPTION: The function print_call_graph is designed to visualize the async call graph for a given task or future. It takes parameters such as a future, file to print to, depth to limit stack frames, and a limit to control the number of displayed stack entries.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-graph.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import asyncio

async def test():
    asyncio.print_call_graph()

async def main():
    async with asyncio.TaskGroup() as g:
        g.create_task(test(), name='test')

asyncio.run(main())
```

----------------------------------------

TITLE: Entering Context Manager in Python unittest
DESCRIPTION: Method to enter a context manager and add its __exit__ method as a cleanup function. It returns the result of the context manager's __enter__ method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
enterContext(cm)
```

----------------------------------------

TITLE: Setting Delete Flag on Messages using IMAP4 in Python
DESCRIPTION: This snippet demonstrates how to set the delete flag on all messages in a mailbox using the IMAP4 store method. It first searches for all messages, then iterates through them to set the delete flag, and finally expunges the mailbox.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/imaplib.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
typ, data = M.search(None, 'ALL')
for num in data[0].split():
   M.store(num, '+FLAGS', '\\Deleted')
M.expunge()
```

----------------------------------------

TITLE: Implementing Custom CookiePolicy by Subclassing DefaultCookiePolicy
DESCRIPTION: Example of creating a custom cookie policy by extending the DefaultCookiePolicy class. This implementation calls the parent class's set_ok method first, then applies additional custom validation logic to decide whether to accept a cookie.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.cookiejar.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
import http.cookiejar
class MyCookiePolicy(http.cookiejar.DefaultCookiePolicy):
    def set_ok(self, cookie, request):
        if not http.cookiejar.DefaultCookiePolicy.set_ok(self, cookie, request):
            return False
        if i_dont_want_to_store_this_cookie(cookie):
            return False
        return True
```

----------------------------------------

TITLE: Registering Implementations for Abstract Base Classes
DESCRIPTION: Demonstrates how implementations registered to abstract base classes will be used for virtual subclasses that inherit from those ABCs, following Python's method resolution order.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
>>> from collections.abc import Mapping
>>> @fun.register
... def _(arg: Mapping, verbose=False):
...     if verbose:
...         print("Keys & Values")
...     for key, value in arg.items():
...         print(key, "=>", value)
...
>>> fun({"a": "b"})
a => b
```

----------------------------------------

TITLE: Getting CPython GC Thresholds (Python)
DESCRIPTION: Demonstrates how to use the `gc.get_threshold()` function from the `gc` module to retrieve the current garbage collection thresholds configured in CPython.
SOURCE: https://github.com/python/cpython/blob/main/InternalDocs/garbage_collector.md#_snippet_7

LANGUAGE: pycon
CODE:
```
>>> import gc
>>> gc.get_threshold()
(700, 10, 10)
```

----------------------------------------

TITLE: Calculating Remainder Near for Decimal Python
DESCRIPTION: Shows the `remainder_near` method calculating the remainder from division. This method chooses the remainder sign to minimize its absolute value. The example `Decimal(35).remainder_near(Decimal(10))` results in `Decimal('-5')`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_28

LANGUAGE: python
CODE:
```
Decimal(35).remainder_near(Decimal(10))
```

----------------------------------------

TITLE: Using ASCII-encoded Byte Strings with urllib.parse
DESCRIPTION: Demonstration of urllib.parse functions accepting ASCII-encoded byte strings and returning byte string results.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_75

LANGUAGE: python
CODE:
```
>>> urllib.parse.urlparse(b'http://www.python.org:80/about/') # doctest: +NORMALIZE_WHITESPACE
ParseResultBytes(scheme=b'http', netloc=b'www.python.org:80',
                 path=b'/about/', params=b'', query=b'', fragment=b'')
```

----------------------------------------

TITLE: Overriding Default Value in Python argparse
DESCRIPTION: Demonstrates how a default value set during argument definition is overridden when a value for the same argument is provided in the `namespace` argument of `parse_args`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_46

LANGUAGE: Python
CODE:
```
>>> parser.add_argument('--foo', default=42)
>>> parser.parse_args([], namespace=argparse.Namespace(foo=101))
Namespace(foo=101)
```

----------------------------------------

TITLE: Define ReadOnly TypedDict Item Python
DESCRIPTION: Shows how to use `typing.ReadOnly` within a `TypedDict` definition to indicate that a specific key's value should not be modified after the dictionary is created, enforced by type checkers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_76

LANGUAGE: Python
CODE:
```
class Movie(TypedDict):
    title: ReadOnly[str]
    year: int

def mutate_movie(m: Movie) -> None:
    m["year"] = 1999  # allowed
    m["title"] = "The Matrix"  # typechecker error
```

----------------------------------------

TITLE: Base Handler Exception Handling Methods
DESCRIPTION: These methods and attributes facilitate customizing exception handling within a BaseHandler subclass. They enable logging exceptions and generating error pages. The log_exception method allows subclasses to override the format and destination of traceback information, while the error_output method provides a way to dynamically produce error pages.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/wsgiref.rst#2025-04-21_snippet_13

LANGUAGE: Python
CODE:
```
"   Methods and attributes for customizing exception handling:\n\n\n   .. method:: BaseHandler.log_exception(exc_info)\n\n      Log the *exc_info* tuple in the server log.  *exc_info* is a ``(type, value,\n      traceback)`` tuple.  The default implementation simply writes the traceback to\n      the request's ``wsgi.errors`` stream and flushes it.  Subclasses can override\n      this method to change the format or retarget the output, mail the traceback to\n      an administrator, or whatever other action may be deemed suitable.\n\n\n   .. attribute:: BaseHandler.traceback_limit\n\n      The maximum number of frames to include in tracebacks output by the default\n      :meth:`log_exception` method.  If ``None``, all frames are included.\n\n\n   .. method:: BaseHandler.error_output(environ, start_response)\n\n      This method is a WSGI application to generate an error page for the user.  It is\n      only invoked if an error occurs before headers are sent to the client.\n\n      This method can access the current error using ``sys.exception()``,\n      and should pass that information to *start_response* when calling it (as\n      described in the \"Error Handling\" section of :pep:`3333`). In particular,\n      the *start_response* callable should follow the :class:`.StartResponse`\n      protocol.\n\n      The default implementation just uses the :attr:`error_status`,\n      :attr:`error_headers`, and :attr:`error_body` attributes to generate an output\n      page.  Subclasses can override this to produce more dynamic error output.\n\n      Note, however, that it's not recommended from a security perspective to spit out\n      diagnostics to any old user; ideally, you should have to do something special to\n      enable diagnostic output, which is why the default implementation doesn't\n      include any."
```

----------------------------------------

TITLE: Using body_line_iterator to Process Email Message Content in Python
DESCRIPTION: This function iterates over all payloads in message subparts, returning string payloads line-by-line while skipping headers and non-string payloads. The optional decode parameter is passed to Message.get_payload() for potential decoding.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.iterators.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
body_line_iterator(msg, decode=False)
```

----------------------------------------

TITLE: Using quoteattr for XML Attribute Generation in Python
DESCRIPTION: Demonstrates using the quoteattr function to safely encode attribute values for XML/HTML/SGML documents. The function handles both single and double quotes appropriately.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.sax.utils.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> print("<element attr=%s>" % quoteattr("ab ' cd \" ef"))
<element attr="ab ' cd &quot; ef">
```

----------------------------------------

TITLE: Releasing Python Buffer in C
DESCRIPTION: The function 'PyBuffer_Release' is used to release a buffer obtained via 'PyObject_GetBuffer'. It decrements the reference count for the buffer's supporting object to prevent memory leaks. This function should not be called on buffers not obtained via 'PyObject_GetBuffer'.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/buffer.rst#2025-04-21_snippet_3

LANGUAGE: C
CODE:
```
void PyBuffer_Release(Py_buffer *view)
```

----------------------------------------

TITLE: Configuring Argparse Prefix Characters (Python)
DESCRIPTION: Demonstrates using the `prefix_chars` argument in `ArgumentParser` to specify characters that should be treated as option prefixes, allowing options like `+f` or `++bar` instead of just `-` or `--`. Shows parsing arguments with custom prefixes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_13

LANGUAGE: python
CODE:
```
>>> parser.add_argument('++bar')
>>> parser.parse_args('+f X ++bar Y'.split())
Namespace(bar='Y', f='X')
```

----------------------------------------

TITLE: Specifying Custom Prefix Characters for ArgumentParser in Python
DESCRIPTION: Illustrates how to use the `prefix_chars` argument when creating an `ArgumentParser` to allow options to start with characters other than the default hyphen (`-`), such as `+`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_12

LANGUAGE: Python
CODE:
```
>>> parser = argparse.ArgumentParser(prog='PROG', prefix_chars='-+')
>>> parser.add_argument('+f')
```

----------------------------------------

TITLE: Creating or Opening Registry Key with Access Control in Python
DESCRIPTION: Creates or opens a registry key with specified access rights. Returns a handle object. Allows setting access mask for desired security access.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/winreg.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
CreateKeyEx(key, sub_key, reserved=0, access=KEY_WRITE)
```

----------------------------------------

TITLE: Initializing Color Pair for Text Display
DESCRIPTION: This code snippet demonstrates how to initialize a color pair to change the attributes for text display, allowing for color customization in terminal applications using Python's curses library.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/curses.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
curses.init_pair(1, curses.COLOR_RED, curses.COLOR_WHITE)
```

----------------------------------------

TITLE: HTMLParser Feed and Close Methods in Python
DESCRIPTION: This code snippet outlines the implementation of feed and close methods in the HTMLParser class. The feed method processes the input data, while the close method finalizes any remaining buffered data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/html.parser.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
.. method:: HTMLParser.feed(data)

   Feed some text to the parser.  It is processed insofar as it consists of
   complete elements; incomplete data is buffered until more data is fed or
   :meth:`close` is called.  *data* must be :class:`str`.

.. method:: HTMLParser.close()

   Force processing of all buffered data as if it were followed by an end-of-file
   mark.  This method may be redefined by a derived class to define additional
   processing at the end of the input, but the redefined version should always call
   the :class:`HTMLParser` base class method :meth:`close`.
```

----------------------------------------

TITLE: Updating Default Pickle Protocol in shelve Module
DESCRIPTION: Updates the shelve module to use pickle.DEFAULT_PROTOCOL by default instead of pickle protocol 3 for serialization.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a2.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
shelve.open(protocol=pickle.DEFAULT_PROTOCOL)
```

----------------------------------------

TITLE: Formatting Numbers with 'e' Code in Python
DESCRIPTION: Illustrates the use of Python's 'e' code for scientific notation formatting, highlighting the impact of precision and alternate forms on output. Requires knowledge of number representation in exponential form.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/mathdata/formatfloat_testcases.txt#2025-04-21_snippet_1

LANGUAGE: Text
CODE:
```
-- \'e\' code formatting with explicit precision (>= 0). Output should
-- always have exactly the number of places after the point that were
-- requested.

-- zeros
%.0e 0 -> 0e+00
%.1e 0 -> 0.0e+00
%.2e 0 -> 0.00e+00
%.10e 0 -> 0.0000000000e+00
%.50e 0 -> 0.00000000000000000000000000000000000000000000000000e+00

-- precision 0.  no decimal point in the output
%.0e 0.01 -> 1e-02
%.0e 0.1 -> 1e-01
%.0e 1 -> 1e+00
%.0e 10 -> 1e+01
%.0e 100 -> 1e+02
%.0e 0.012 -> 1e-02
%.0e 0.12 -> 1e-01
%.0e 1.2 -> 1e+00
%.0e 12 -> 1e+01
%.0e 120 -> 1e+02
%.0e 123.456 -> 1e+02
%.0e 0.000123456 -> 1e-04
%.0e 123456000 -> 1e+08
%.0e 0.5 -> 5e-01
%.0e 1.4 -> 1e+00
%.0e 1.5 -> 2e+00
%.0e 1.6 -> 2e+00
%.0e 2.4999999 -> 2e+00
%.0e 2.5 -> 2e+00
%.0e 2.5000001 -> 3e+00
%.0e 3.499999999999 -> 3e+00
%.0e 3.5 -> 4e+00
%.0e 4.5 -> 4e+00
%.0e 5.5 -> 6e+00
%.0e 6.5 -> 6e+00
%.0e 7.5 -> 8e+00
%.0e 8.5 -> 8e+00
%.0e 9.4999 -> 9e+00
%.0e 9.5 -> 1e+01
%.0e 10.5 -> 1e+01
%.0e 14.999 -> 1e+01
%.0e 15 -> 2e+01

-- precision 1
%.1e 0.0001 -> 1.0e-04
%.1e 0.001 -> 1.0e-03
%.1e 0.01 -> 1.0e-02
%.1e 0.1 -> 1.0e-01
%.1e 1 -> 1.0e+00
%.1e 10 -> 1.0e+01
%.1e 100 -> 1.0e+02
%.1e 120 -> 1.2e+02
%.1e 123 -> 1.2e+02
%.1e 123.4 -> 1.2e+02

-- precision 2
%.2e 0.00013 -> 1.30e-04
%.2e 0.000135 -> 1.35e-04
%.2e 0.0001357 -> 1.36e-04
%.2e 0.0001 -> 1.00e-04
%.2e 0.001 -> 1.00e-03
%.2e 0.01 -> 1.00e-02
%.2e 0.1 -> 1.00e-01
%.2e 1 -> 1.00e+00
%.2e 10 -> 1.00e+01
%.2e 100 -> 1.00e+02
%.2e 1000 -> 1.00e+03
%.2e 1500 -> 1.50e+03
%.2e 1590 -> 1.59e+03
%.2e 1598 -> 1.60e+03
%.2e 1598.7 -> 1.60e+03
%.2e 1598.76 -> 1.60e+03
%.2e 9999 -> 1.00e+04

-- omitted precision defaults to 6
%e 0 -> 0.000000e+00
%e 165 -> 1.650000e+02
%e 1234567 -> 1.234567e+06
%e 12345678 -> 1.234568e+07
%e 1.1 -> 1.100000e+00

-- alternate form always contains a decimal point.  This only makes
-- a difference when precision is 0.

%#.0e 0.01 -> 1.e-02
%#.0e 0.1 -> 1.e-01
%#.0e 1 -> 1.e+00
%#.0e 10 -> 1.e+01
%#.0e 100 -> 1.e+02
%#.0e 0.012 -> 1.e-02
%#.0e 0.12 -> 1.e-01
%#.0e 1.2 -> 1.e+00
%#.0e 12 -> 1.e+01
%#.0e 120 -> 1.e+02
%#.0e 123.456 -> 1.e+02
%#.0e 0.000123456 -> 1.e-04
%#.0e 123456000 -> 1.e+08
%#.0e 0.5 -> 5.e-01
%#.0e 1.4 -> 1.e+00
%#.0e 1.5 -> 2.e+00
%#.0e 1.6 -> 2.e+00
%#.0e 2.4999999 -> 2.e+00
%#.0e 2.5 -> 2.e+00
%#.0e 2.5000001 -> 3.e+00
%#.0e 3.499999999999 -> 3.e+00
%#.0e 3.5 -> 4.e+00
%#.0e 4.5 -> 4.e+00
%#.0e 5.5 -> 6.e+00
%#.0e 6.5 -> 6.e+00
%#.0e 7.5 -> 8.e+00
%#.0e 8.5 -> 8.e+00
%#.0e 9.4999 -> 9.e+00
%#.0e 9.5 -> 1.e+01
%#.0e 10.5 -> 1.e+01
%#.0e 14.999 -> 1.e+01
%#.0e 15 -> 2.e+01
%#.1e 123.4 -> 1.2e+02
%#.2e 0.0001357 -> 1.36e-04

```

----------------------------------------

TITLE: Getting Default String Encoding in Python
DESCRIPTION: Returns 'utf-8' as the name of the default string encoding used in string encoding methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sys.rst#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
getdefaultencoding()
```

----------------------------------------

TITLE: Raising Asynchronous Exception in Thread CPython C
DESCRIPTION: Asynchronously raises the specified exception object `exc` in the thread identified by `id`. This function requires an attached thread state and is intended for use within C extensions to prevent naive misuse. It returns the number of thread states modified (usually 1 or 0).
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/init.rst#_snippet_36

LANGUAGE: C
CODE:
```
int PyThreadState_SetAsyncExc(unsigned long id, PyObject *exc)
```

----------------------------------------

TITLE: ParamSpec Generic Instantiation Equivalency (Python)
DESCRIPTION: Illustrates that a generic class with a single `ParamSpec` can be instantiated using either `X[[Type1, ...]]` or `X[Type1, ...]`, with the latter being converted internally.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_41

LANGUAGE: Python
CODE:
```
class X[**P]: ...
...
X[int, str]
__main__.X[[int, str]]
X[[int, str]]
__main__.X[[int, str]]
```

----------------------------------------

TITLE: Using Object-Oriented Turtle - Python
DESCRIPTION: Demonstrates the object-oriented approach to turtle graphics by creating a `Turtle` instance (`t = Turtle()`) and calling methods on the object (e.g., `t.right()`, `t.fd()`). This approach is more powerful for managing multiple turtles or complex interactions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_16

LANGUAGE: Python
CODE:
```
from turtle import Turtle
from random import random

t = Turtle()
for i in range(100):
    steps = int(random() * 100)
    angle = int(random() * 360)
    t.right(angle)
    t.fd(steps)
```

----------------------------------------

TITLE: Generating Next Value in Enum - Python
DESCRIPTION: This snippet demonstrates the static method _generate_next_value_ within an Enum class, illustrating how to dynamically generate values based on the count of existing Enum members.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/enum.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
>>> from enum import auto
>>> class PowersOfThree(Enum):
...     @staticmethod
...     def _generate_next_value_(name, start, count, last_values):
...         return 3 ** (count + 1)
...     FIRST = auto()
...     SECOND = auto()
...
>>> PowersOfThree.SECOND.value
9
```

----------------------------------------

TITLE: Using getdefaultlocale Function in Python
DESCRIPTION: Function that determines default locale settings, returning a tuple of (language code, encoding). Tests environment variables like LANG, LC_ALL, LC_CTYPE in GNU gettext search path order.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/locale.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
getdefaultlocale([envvars])
```

----------------------------------------

TITLE: Configuring HTTPS with a Private Key in Python's HTTP Server
DESCRIPTION: This command specifies the private key file for enabling HTTPS connections in python -m http.server. It requires the --tls-cert option to be concurrently specified, and was introduced in Python 3.14.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.server.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
python -m http.server --tls-key key.pem
```

----------------------------------------

TITLE: Debugging Tests with the Debug Method in Python unittest
DESCRIPTION: The debug method allows executing tests without collecting results, thereby propagating exceptions to the caller. It is beneficial for debugging tests by running them under a debugger.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_13

LANGUAGE: Python
CODE:
```
.. method:: debug()

   Run the test without collecting the result.  This allows exceptions raised
   by the test to be propagated to the caller, and can be used to support
   running tests under a debugger.

```

----------------------------------------

TITLE: Initializing Basic Unit Test Structure in Python
DESCRIPTION: Demonstrates the basic boilerplate structure for writing unit tests using Python's unittest module. Includes setup and teardown methods, test methods, and conditional main execution.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/test.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import unittest
from test import support

class MyTestCase1(unittest.TestCase):

    # Only use setUp() and tearDown() if necessary

    def setUp(self):
        ... code to execute in preparation for tests ...

    def tearDown(self):
        ... code to execute to clean up after tests ...

    def test_feature_one(self):
        # Test feature one.
        ... testing code ...

    def test_feature_two(self):
        # Test feature two.
        ... testing code ...

    ... more test methods ...

class MyTestCase2(unittest.TestCase):
    ... same structure as MyTestCase1 ...

... more test classes ...

if __name__ == '__main__':
    unittest.main()
```

----------------------------------------

TITLE: Implementing Collection Mapping in Python
DESCRIPTION: Example showing how to implement a Storage class that inherits from collections.MutableMapping ABC.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
import collections

class Storage(collections.MutableMapping):
    ...
```

----------------------------------------

TITLE: Namedtuple Default Values
DESCRIPTION: Support for default values in collections.namedtuple() implementation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
collections.namedtuple()
```

----------------------------------------

TITLE: Creating Unicode Substring - CPython C API
DESCRIPTION: Returns a new Unicode object representing a substring of the input `unicode` from `start` (inclusive) to `end` (exclusive). Negative indices are not supported. Returns NULL and sets an exception on error. Added in version 3.3.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/unicode.rst#_snippet_52

LANGUAGE: c
CODE:
```
PyObject* PyUnicode_Substring(PyObject *unicode, Py_ssize_t start, Py_ssize_t end)
```

----------------------------------------

TITLE: Custom HTML Calendar Class - Python
DESCRIPTION: This snippet demonstrates how to create a subclass of `HTMLCalendar` which allows for custom CSS classes to be defined for different elements within the calendar.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/calendar.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
class CustomHTMLCal(calendar.HTMLCalendar):
```

LANGUAGE: Python
CODE:
```
    cssclasses = [style + " text-nowrap" for style in calendar.HTMLCalendar.cssclasses]
```

LANGUAGE: Python
CODE:
```
    cssclass_month_head = "text-center month-head"
```

LANGUAGE: Python
CODE:
```
    cssclass_month = "text-center month"
```

LANGUAGE: Python
CODE:
```
    cssclass_year = "text-italic lead"
```

----------------------------------------

TITLE: Adding TLS 1.3 Middlebox Compatibility Option in Python SSL
DESCRIPTION: OP_ENABLE_MIDDLEBOX_COMPAT has been added with a test workaround for TLSv1.3 for future compatibility with OpenSSL 1.1.1. This enhances SSL/TLS compatibility in Python.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.7.0b2.rst#2025-04-21_snippet_11



----------------------------------------

TITLE: String Replacement Update - Python Core
DESCRIPTION: Changed behavior of empty string replacement in str.replace() method to return the replacement string instead of empty string for non-zero counts. Similar changes applied to bytes and bytearray objects.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.9.0a1.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"".replace("", s, n)  # Now returns s instead of "" for non-zero n
```

----------------------------------------

TITLE: Implementing load_tests Protocol for Package Tests in Python
DESCRIPTION: Example of implementing the unittest load_tests protocol in a test package's __init__.py file using the load_package_tests utility function. This simplifies test discovery and loading within a package structure.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/test.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
import os
from test.support import load_package_tests

def load_tests(*args):
    return load_package_tests(os.path.dirname(__file__), *args)
```

----------------------------------------

TITLE: Compiling Python Code with compile_command
DESCRIPTION: The compile_command function compiles a string of Python code and returns a code object if the source is valid. It can determine if the code is a statement, sequence of statements, or an expression. It raises a SyntaxError for invalid syntax, and OverflowError or ValueError for invalid literals.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/codeop.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```

.. function:: compile_command(source, filename="<input>", symbol="single")

   Tries to compile *source*, which should be a string of Python code and return a
   code object if *source* is valid Python code.  In that case, the filename
   attribute of the code object will be *filename*, which defaults to
   ``'<input>'``.  Returns ``None`` if *source* is *not* valid Python code, but is a
   prefix of valid Python code.

   If there is a problem with *source*, an exception will be raised.
   :exc:`SyntaxError` is raised if there is invalid Python syntax, and
   :exc:`OverflowError` or :exc:`ValueError` if there is an invalid literal.

   The *symbol* argument determines whether *source* is compiled as a statement
   (``'single'``, the default), as a sequence of :term:`statement` (``'exec'``) or
   as an :term:`expression` (``'eval'``).  Any other value will
   cause :exc:`ValueError` to be raised.

   .. note::

      It is possible (but not likely) that the parser stops parsing with a
      successful outcome before reaching the end of the source; in this case,
      trailing symbols may be ignored instead of causing an error.  For example,
      a backslash followed by two newlines may be followed by arbitrary garbage.
      This will be fixed once the API for the parser is better.

```

----------------------------------------

TITLE: Using Decimal as_integer_ratio in Python
DESCRIPTION: Demonstrates the new Decimal.as_integer_ratio() method that returns a pair of integers representing the Decimal instance as a fraction in lowest terms with a positive denominator.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.6.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
>>> Decimal('-3.14').as_integer_ratio()
(-157, 50)
```

----------------------------------------

TITLE: Resolving Builtin Descriptor Types in Python
DESCRIPTION: This code snippet demonstrates how to handle various types of descriptors when using getattr_static. It defines a class with a slot, identifies different descriptor types, and shows how to resolve them.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/inspect.rst#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
# example code for resolving the builtin descriptor types
class _foo:
    __slots__ = ['foo']

slot_descriptor = type(_foo.foo)
getset_descriptor = type(type(open(__file__)).name)
wrapper_descriptor = type(str.__dict__['__add__'])
descriptor_types = (slot_descriptor, getset_descriptor, wrapper_descriptor)

result = getattr_static(some_object, 'foo')
if type(result) in descriptor_types:
    try:
        result = result.__get__()
    except AttributeError:
        # descriptors can raise AttributeError to
        # indicate there is no underlying value
        # in which case the descriptor itself will
        # have to do
        pass
```

----------------------------------------

TITLE: Adding Tab to Notebook in Python
DESCRIPTION: Method to add a new tab to a ttk.Notebook widget. Accepts various options for configuring the tab.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
def add(child, **kw):
    Adds a new tab to the notebook.

    If window is currently managed by the notebook but hidden, it is
    restored to its previous position.

    See `Tab Options` for the list of available options.
```

----------------------------------------

TITLE: Setting PYTHONPATH Environment Variable
DESCRIPTION: Example of setting the PYTHONPATH environment variable for Python module search paths.
SOURCE: https://github.com/python/cpython/blob/main/PC/readme.txt#2025-04-21_snippet_1

LANGUAGE: batch
CODE:
```
set PYTHONPATH=.;d:\python\lib;d:\python\lib\win;d:\python\lib\dos-8x3
```

----------------------------------------

TITLE: Demonstrating Integer Bit Length in Python
DESCRIPTION: This code snippet demonstrates the use of the bit_length() method on integers in Python. It shows how to determine the number of bits required to represent an integer in binary, excluding the sign and leading zeros.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> n = -37
>>> bin(n)
'-0b100101'
>>> n.bit_length()
6
```

----------------------------------------

TITLE: Getting Code Object from Function
DESCRIPTION: The function `PyFunction_GetCode` retrieves the code object associated with a given function object. It returns a pointer to the code object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/function.rst#2025-04-21_snippet_5

LANGUAGE: c
CODE:
```
".. c:function:: PyObject* PyFunction_GetCode(PyObject *op)

   Return the code object associated with the function object *op*."
```

----------------------------------------

TITLE: Performing Resampling Permutation Test for Drug Efficacy in Python
DESCRIPTION: This code performs a resampling permutation test to determine the statistical significance of the difference between a drug and placebo effect. It uses the statistics and random modules to calculate the p-value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/random.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
# Example from "Statistics is Easy" by Dennis Shasha and Manda Wilson
from statistics import fmean as mean
from random import shuffle

drug = [54, 73, 53, 70, 73, 68, 52, 65, 65]
placebo = [54, 51, 58, 44, 55, 52, 42, 47, 58, 46]
observed_diff = mean(drug) - mean(placebo)

n = 10_000
count = 0
combined = drug + placebo
for i in range(n):
    shuffle(combined)
    new_diff = mean(combined[:len(drug)]) - mean(combined[len(drug):])
    count += (new_diff >= observed_diff)

print(f'{n} label reshufflings produced only {count} instances with a difference')
print(f'at least as extreme as the observed difference of {observed_diff:.1f}.')
print(f'The one-sided p-value of {count / n:.4f} leads us to reject the null')
print(f'hypothesis that there is no difference between the drug and the placebo.')
```

----------------------------------------

TITLE: Demonstrating Basic Usage of rlcompleter with readline in Python
DESCRIPTION: This example shows how to import and configure the rlcompleter module with readline. It sets up tab completion and demonstrates available methods in the readline module that can be accessed via tab completion.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/rlcompleter.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> import rlcompleter
>>> import readline
>>> readline.parse_and_bind("tab: complete")
>>> readline. <TAB PRESSED>
readline.__doc__          readline.get_line_buffer(  readline.read_init_file(
readline.__file__         readline.insert_text(      readline.set_completer(
readline.__name__         readline.parse_and_bind(
>>> readline.
```

----------------------------------------

TITLE: Creating Weak-Referenceable Dictionary Subclass in Python
DESCRIPTION: This snippet demonstrates how to create a subclass of dict that supports weak references. By default, built-in types like dict do not support weak references, but subclassing allows this functionality.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/weakref.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
class Dict(dict):
    pass

obj = Dict(red=1, green=2, blue=3)   # this object is weak referenceable
```

----------------------------------------

TITLE: Retrieving Locale Conventions using localeconv in Python
DESCRIPTION: This snippet provides a function to return a dictionary of locale conventions with keys defining numeric and monetary formatting details like decimal points or currency symbols. It depends on the locale module and alters the LC_CTYPE locale temporarily if non-ASCII strings are involved. The function's behavior changed in Python 3.7.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/locale.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
localeconv()
```

----------------------------------------

TITLE: UserList Class Definition
DESCRIPTION: The UserList class acts as a wrapper around list objects, allowing the user to access the underlying list via the `data` attribute. It is a base class for list-like classes. The instance's contents are initially set to a copy of *list*, defaulting to the empty list ``[]``.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```

.. class:: UserList([list])

    Class that simulates a list.  The instance's contents are kept in a regular
    list, which is accessible via the :attr:`data` attribute of :class:`UserList`
    instances.  The instance's contents are initially set to a copy of *list*,
    defaulting to the empty list ``[]``.  *list* can be any iterable, for
    example a real Python list or a :class:`UserList` object.

    In addition to supporting the methods and operations of mutable sequences,
    :class:`UserList` instances provide the following attribute:

    .. attribute:: data

        A real :class:`list` object used to store the contents of the
        :class:`UserList` class.

```

----------------------------------------

TITLE: Automatically Recognized Simple Interface in Python
DESCRIPTION: Example showing how simple interfaces can be automatically recognized by Python's isinstance/issubclass through the presence of required methods, without explicit inheritance or registration.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/collections.abc.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
class E:
    def __iter__(self): ...
    def __next__(self): ...
```

----------------------------------------

TITLE: Concatenation of Drive and Root - pathlib Python
DESCRIPTION: The code demonstrates how to access the `anchor` attribute, which concatenates the drive and the root of a path, using both `PureWindowsPath` and `PurePosixPath`. This shows the anchor representation for different types of paths.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
>>> PureWindowsPath('c:/Program Files/').anchor
'c:\\'
>>> PureWindowsPath('c:Program Files/').anchor
'c:'
>>> PurePosixPath('/etc').anchor
'/'
>>> PureWindowsPath('//host/share').anchor
'\\host\share\\'
```

----------------------------------------

TITLE: Implementing HTTPDefaultErrorHandler for HTTP Error Responses in Python
DESCRIPTION: HTTPDefaultErrorHandler defines a default handler for HTTP error responses, converting all responses into HTTPError exceptions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
class HTTPDefaultErrorHandler():
```

----------------------------------------

TITLE: Registering and Using Pickle Functions with copyreg in Python
DESCRIPTION: This example demonstrates how to register a pickle function for a custom class using copyreg, and how it's used during copying and pickling operations. It shows the creation of a custom class, definition of a pickle function, registration with copyreg, and subsequent use in copy and pickle operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/copyreg.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> import copyreg, copy, pickle
>>> class C:
...     def __init__(self, a):
...         self.a = a
...
>>> def pickle_c(c):
...     print("pickling a C instance...")
...     return C, (c.a,)
...
>>> copyreg.pickle(C, pickle_c)
>>> c = C(1)
>>> d = copy.copy(c)  # doctest: +SKIP
pickling a C instance...
>>> p = pickle.dumps(c)  # doctest: +SKIP
pickling a C instance...
```

----------------------------------------

TITLE: Demonstrating ZoneInfo Pickle Serialization in Python
DESCRIPTION: This snippet illustrates the pickling behavior of ZoneInfo objects constructed with different methods, showing how object identity is preserved or not depending on the construction method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/zoneinfo.rst#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> a = ZoneInfo("Europe/Berlin")
>>> b = pickle.loads(europe_berlin_pkl)
>>> a is b
True

>>> a = ZoneInfo("Europe/Berlin")
>>> b = pickle.loads(europe_berlin_pkl_nc)
>>> a is b
False
```

----------------------------------------

TITLE: Introducing `operator.call` function
DESCRIPTION: A new function `operator.call` has been added, which allows calling an object `obj` with arguments in a way that `operator.call(obj, *args, **kwargs) == obj(*args, **kwargs)`.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a1.rst#2025-04-21_snippet_26



----------------------------------------

TITLE: Defining open_resource Method in Abstract Resource Reader
DESCRIPTION: The `open_resource` method is an abstract method that should return an opened, file-like object for binary reading of a specified resource. If the resource cannot be found, it raises a FileNotFoundError.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
.. method:: open_resource(resource)
   :abstractmethod:

    Returns an opened, :term:`file-like object` for binary reading
    of the *resource*.

    If the resource cannot be found, :exc:`FileNotFoundError` is
    raised.

```

----------------------------------------

TITLE: Basic Path Matching with Pattern - pathlib Python
DESCRIPTION: The `match` method performs a non-recursive pattern match on a path, showing how to handle pattern parameter using path-like objects and addressing case sensitivity. It differs from `full_match` in handling empty patterns and relative matching.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
>>> PurePath('a/b.py').match('*.py')
True
>>> PurePath('/a/b/c.py').match('b/*.py')
True
>>> PurePath('/a/b/c.py').match('a/*.py')
False
```

----------------------------------------

TITLE: C Function Signature for Set Attribute Function
DESCRIPTION: This code snippet defines the function signature for the set-attribute function, which is used to set or delete an attribute of an object. The function takes a PyObject pointer (self), a PyObject pointer representing the attribute name (attr), and a PyObject pointer representing the attribute value (value) as input. Setting *value* to NULL deletes the attribute. It returns an integer indicating success (0) or failure (-1).
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/typeobj.rst#2025-04-21_snippet_13

LANGUAGE: C
CODE:
```
"int tp_setattro(PyObject *self, PyObject *attr, PyObject *value);"
```

----------------------------------------

TITLE: Checking Async Generator Function in Python
DESCRIPTION: Example showing how to define an async generator function and verify it using isasyncgenfunction().
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/inspect.rst#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
async def agen():
    yield 1

inspect.isasyncgenfunction(agen)
```

----------------------------------------

TITLE: Parsing Deprecated Command with argparse (Python)
DESCRIPTION: Demonstrates parsing arguments that trigger a deprecated command warning, showing the expected output including the warning message.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_80

LANGUAGE: Python
CODE:
```
parser.parse_args(['fly'])  # doctest: +SKIP
```

----------------------------------------

TITLE: Getting Pipe Transport from SubprocessTransport in Python
DESCRIPTION: This method returns the transport for a communication pipe corresponding to a file descriptor. It handles stdin, stdout, stderr, and other file descriptors.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
SubprocessTransport.get_pipe_transport(fd)
```

----------------------------------------

TITLE: Defining MIMEPart Class in Python
DESCRIPTION: Definition of the MIMEPart class, which represents a subpart of a MIME message. It is identical to EmailMessage but doesn't add MIME-Version headers when set_content is called.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.message.rst#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
.. class:: MIMEPart(policy=default)

    This class represents a subpart of a MIME message.  It is identical to
    :class:`EmailMessage`, except that no :mailheader:`MIME-Version` headers are
    added when :meth:`~EmailMessage.set_content` is called, since sub-parts do
    not need their own :mailheader:`MIME-Version` headers.
```

----------------------------------------

TITLE: Email Handler YAML Configuration
DESCRIPTION: Example YAML configuration for an SMTP email handler showing handler properties and array usage.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.config.rst#2025-04-21_snippet_9

LANGUAGE: yaml
CODE:
```
handlers:
  email:
    class: logging.handlers.SMTPHandler
    mailhost: localhost
    fromaddr: my_app@domain.tld
    toaddrs:
      - support_team@domain.tld
      - dev_team@domain.tld
    subject: Houston, we have a problem.
```

----------------------------------------

TITLE: Create Float from Double (PyFloat_FromDouble)
DESCRIPTION: Creates a new PyFloatObject from a C double value 'v'. Returns a new reference to the float object on success, or NULL on failure with an exception set.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/float.rst#_snippet_5

LANGUAGE: C
CODE:
```
PyObject* PyFloat_FromDouble(double v)
```

----------------------------------------

TITLE: Defining Type Object Method Tables in Python C API
DESCRIPTION: Shows the structure for defining method tables in Python C API types. These tables declare methods, member attributes, and getters/setters for a custom type.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/newtypes.rst#2025-04-21_snippet_5

LANGUAGE: c
CODE:
```
struct PyMethodDef *tp_methods;
struct PyMemberDef *tp_members;
struct PyGetSetDef *tp_getset;
```

----------------------------------------

TITLE: Using SimpleQueue.get_nowait method in Python
DESCRIPTION: A method to immediately remove and return an item from the queue without blocking. This is equivalent to get(False) and will raise Empty if no item is available.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/queue.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
SimpleQueue.get_nowait()
```

----------------------------------------

TITLE: Importing Fresh Module in Python
DESCRIPTION: This code snippet demonstrates how to use the import_fresh_module function to import fresh copies of modules for testing purposes. It shows how to block certain modules and import different implementations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/test.rst#2025-04-21_snippet_14

LANGUAGE: Python
CODE:
```
py_warnings = import_fresh_module('warnings', blocked=['_warnings'])
c_warnings = import_fresh_module('warnings', fresh=['_warnings'])
```

----------------------------------------

TITLE: Using textwrap Module Example in Python
DESCRIPTION: Demonstrates usage of the textwrap module's wrap() and fill() functions for formatting text paragraphs to specific widths.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.3.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
>>> import textwrap
>>> paragraph = "Not a whit, we defy augury: ... more text ..."
>>> textwrap.wrap(paragraph, 60)
["Not a whit, we defy augury: there's a special providence in",
 "the fall of a sparrow. If it be now, 'tis not to come; if it",
 ...]
>>> print textwrap.fill(paragraph, 35)
Not a whit, we defy augury: there's
a special providence in the fall of
a sparrow. If it be now, 'tis not
to come; if it be not to come, it
will be now; if it be not now, yet
it will come: the readiness is all.
>>>
```

----------------------------------------

TITLE: Creating AbstractBasicAuthHandler Mixin Class in Python
DESCRIPTION: AbstractBasicAuthHandler is a mixin class that assists with HTTP authentication to both remote hosts and proxies. It can use an optional password manager.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
class AbstractBasicAuthHandler(password_mgr=None):
```

----------------------------------------

TITLE: Defining ProxyBasicAuthHandler for Proxy Authentication in Python
DESCRIPTION: ProxyBasicAuthHandler handles authentication with the proxy using a compatible password manager.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
class ProxyBasicAuthHandler(password_mgr=None):
```

----------------------------------------

TITLE: Signal Alarm Function Implementation
DESCRIPTION: Implementation of the alarm() function that schedules a SIGALRM signal to be sent after a specified time interval. Returns the time remaining for any previously scheduled alarm.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/signal.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
def alarm(time):
    # If time is non-zero, schedule SIGALRM signal
    # Returns time remaining for previous alarm
    # If time is zero, cancel any scheduled alarm
    pass
```

----------------------------------------

TITLE: Getting Global Events in sys.monitoring Python
DESCRIPTION: Returns an integer bitmask representing all the global events currently activated for the specified `tool_id`. The returned integer is the bitwise OR of the constant values for each active event. Requires a registered `tool_id`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sys.monitoring.rst#_snippet_6

LANGUAGE: Python
CODE:
```
get_events(tool_id: int, /) -> int
```

----------------------------------------

TITLE: Adding Complex Headers with Non-ASCII Characters
DESCRIPTION: Shows how to add headers with non-ASCII characters using the add_header method with charset encoding
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.compat32-message.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
msg.add_header('Content-Disposition', 'attachment',
                filename=('iso-8859-1', '', 'Fußballer.ppt'))
```

----------------------------------------

TITLE: Using ctypes to Interface with C Libraries
DESCRIPTION: Examples demonstrating how to use ctypes to call C library functions and handle different data types including strings and numbers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_33

LANGUAGE: python
CODE:
```
import ctypes

libc = ctypes.CDLL('libc.so.6')
result = libc.printf("Line of output\n")

s = "this is a string"
buf = ctypes.create_string_buffer(s)
libc.strfry(buf)
```

----------------------------------------

TITLE: Attaching Base64-Encoded GIF in MIME Email
DESCRIPTION: This snippet shows how to attach a base64-encoded GIF image in a MIME email, including content type, transfer encoding, and disposition headers.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/test_email/data/msg_07.txt#2025-04-21_snippet_2

LANGUAGE: plain text
CODE:
```
--BOUNDARY
Content-Type: image/gif; name="dingusfish.gif"
Content-Transfer-Encoding: base64
content-disposition: attachment; filename="dingusfish.gif"

R0lGODdhAAEAAfAAAP///wAAACwAAAAAAAEAAQAC/oSPqcvtD6OctNqLs968+w+G4kiW5omm6sq2
7gvH8kzX9o3n+s73/g8MCofEovGITGICTKbyCV0FDNOo9SqpQqpOrJfXzTQj2vD3TGtqL+NtGQ2f
qTXmxzuOd7WXdcc9DyjU53ewFni4s0fGhdiYaEhGBelICTNoV1j5NUnFcrmUqemjNifJVWpaOqaI
oFq3SspZsSraE7sHq3jr1MZqWvi662vxV4tD+pvKW6aLDOCLyur8PDwbanyDeq0N3DctbQYeLDvR
RY6t95m6UB0d3mwIrV7e2VGNvjjffukeJp4w7F65KecGFsTHQGAygOrgrWs1jt28Rc88KESYcGLA
...
```

----------------------------------------

TITLE: Dynamic MRO Resolution with types.resolve_bases
DESCRIPTION: The types module introduces the resolve_bases function. It dynamically resolves MRO entries as specified by PEP 560, allowing for more flexible class inheritance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
The new :func:`types.resolve_bases` function resolves MRO entries
dynamically as specified by :pep:`560`.
(Contributed by Ivan Levkivskyi in :issue:`32717`.)
```

----------------------------------------

TITLE: Disassembling Code Objects with disassemble() and disco() in Python
DESCRIPTION: These functions disassemble a code object, showing instruction details such as source location, operation code, parameters, and their interpretation. The output includes various columns of information and can be customized with parameters for file output, cache display, and position information.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dis.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
disassemble(code, lasti=-1, *, file=None, show_caches=False, adaptive=False, show_offsets=False, show_positions=False)
disco(code, lasti=-1, *, file=None, show_caches=False, adaptive=False, show_offsets=False, show_positions=False)
```

----------------------------------------

TITLE: Implementing a Callback Setter Function in C for Python
DESCRIPTION: Shows a C function that sets a Python callback, including error checking, reference counting, and returning None to Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/extending.rst#2025-04-21_snippet_11

LANGUAGE: C
CODE:
```
static PyObject *my_callback = NULL;

static PyObject *
my_set_callback(PyObject *dummy, PyObject *args)
{
    PyObject *result = NULL;
    PyObject *temp;

    if (PyArg_ParseTuple(args, "O:set_callback", &temp)) {
        if (!PyCallable_Check(temp)) {
            PyErr_SetString(PyExc_TypeError, "parameter must be callable");
            return NULL;
        }
        Py_XINCREF(temp);         /* Add a reference to new callback */
        Py_XDECREF(my_callback);  /* Dispose of previous callback */
        my_callback = temp;       /* Remember new callback */
        /* Boilerplate to return "None" */
        Py_INCREF(Py_None);
        result = Py_None;
    }
    return result;
}
```

----------------------------------------

TITLE: Creating a DateTime Object in C
DESCRIPTION: This function returns a datetime.datetime object with the specified year, month, day, hour, minute, second and microsecond.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/datetime.rst#2025-04-21_snippet_22

LANGUAGE: c
CODE:
```
"PyObject* PyDateTime_FromDateAndTime(int year, int month, int day, int hour, int minute, int second, int usecond)"
```

----------------------------------------

TITLE: Fast Sequence Object Handling in C
DESCRIPTION: Enables faster operations on sequence objects by converting them into an internal representation usable by other sequence functions. Returns NULL on failure.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/sequence.rst#2025-04-21_snippet_17

LANGUAGE: C
CODE:
```
.. c:function:: PyObject* PySequence_Fast(PyObject *o, const char *m)

   Return the sequence or iterable *o* as an object usable by the other
   ``PySequence_Fast*`` family of functions. If the object is not a sequence or
   iterable, raises :exc:`TypeError` with *m* as the message text. Returns
   ``NULL`` on failure.

   The ``PySequence_Fast*`` functions are thus named because they assume *o* is a
   :c:type:`PyTupleObject` or a :c:type:`PyListObject` and access
   the data fields of *o* directly.

   As a CPython implementation detail, if *o* is already a sequence or list, it
   will be returned.
```

----------------------------------------

TITLE: Implementing HTTPCookieProcessor for HTTP Cookie Handling in Python
DESCRIPTION: HTTPCookieProcessor is a class designed to handle HTTP Cookies. It can be initialized with an optional cookiejar parameter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
class HTTPCookieProcessor(cookiejar=None):
```

----------------------------------------

TITLE: Named Tuples for Version Information in Python
DESCRIPTION: The sys.version_info tuple is enhanced to be a named tuple, providing more readable attribute access for version components like major, minor, micro, etc.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.1.rst#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
sys.version_info
sys.version_info(major=3, minor=1, micro=0, releaselevel='alpha', serial=2)
```

----------------------------------------

TITLE: Counting Allocated Memory Blocks with sys.getallocatedblocks()
DESCRIPTION: sys.getallocatedblocks() returns the number of memory blocks currently allocated by the interpreter. It's useful for tracking and debugging memory leaks, but the result can vary between calls.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sys.rst#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
sys.getallocatedblocks()
```

----------------------------------------

TITLE: Extracting ZIP Archive via Command Line
DESCRIPTION: Example showing how to extract a ZIP archive to a target directory using the command line interface.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/zipfile.rst#2025-04-21_snippet_9

LANGUAGE: shell
CODE:
```
$ python -m zipfile -e monty.zip target-dir/
```

----------------------------------------

TITLE: Adding PyErr_GetRaisedException and PyErr_SetRaisedException
DESCRIPTION: New C API functions PyErr_GetRaisedException and PyErr_SetRaisedException have been added for saving and restoring the current exception. These functions work with a single exception object instead of the triple arguments of the deprecated PyErr_Fetch and PyErr_Restore, which is safer and more efficient. The functions PyException_GetArgs and PyException_SetArgs are also introduced for getting and setting the args of an exception.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.12.0a6.rst#2025-04-21_snippet_27



----------------------------------------

TITLE: Handling Connection Made in BaseProtocol for Python
DESCRIPTION: This method is called when a connection is made. The transport argument represents the connection, and the protocol should store the reference to its transport.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
BaseProtocol.connection_made(transport)
```

----------------------------------------

TITLE: Verifying NuGet Installed Python Version (CMD)
DESCRIPTION: Provides command-line examples demonstrating how to execute the Python interpreter installed via `nuget.exe` from the command prompt and check its version. It illustrates the resulting installation paths with and without the `-ExcludeVersion` flag.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/windows.rst#_snippet_15

LANGUAGE: cmd
CODE:
```
# Without -ExcludeVersion
> .\python.3.5.2\tools\python.exe -V
Python 3.5.2

# With -ExcludeVersion
> .\python\tools\python.exe -V
Python 3.5.2
```

----------------------------------------

TITLE: Using Module Namespace in Script - Python Turtle
DESCRIPTION: Illustrates how to import the `turtle` module using an alias (`import turtle as t`) and call its functions using the alias (e.g., `t.fd()`) when writing turtle graphics code within a Python script to avoid name conflicts.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_14

LANGUAGE: Python
CODE:
```
import turtle as t
from random import random

for i in range(100):
    steps = int(random() * 100)
    angle = int(random() * 360)
    t.right(angle)
    t.fd(steps)
```

----------------------------------------

TITLE: XML-RPC Client for Calling Server Methods in Python
DESCRIPTION: This code snippet shows how to create an XML-RPC client that connects to the server and calls the registered methods. It also demonstrates how to list available methods on the server.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xmlrpc.server.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import xmlrpc.client

s = xmlrpc.client.ServerProxy('http://localhost:8000')
print(s.pow(2,3))  # Returns 2**3 = 8
print(s.add(2,3))  # Returns 5
print(s.mul(5,2))  # Returns 5*2 = 10

# Print list of available methods
print(s.system.listMethods())
```

----------------------------------------

TITLE: Creating a TimeZone Object from Offset and Name in C
DESCRIPTION: This function returns a datetime.timezone object with a fixed offset represented by the *offset* argument and with tzname *name*. This function was added in version 3.7.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/datetime.rst#2025-04-21_snippet_28

LANGUAGE: c
CODE:
```
"PyObject* PyTimeZone_FromOffsetAndName(PyObject *offset, PyObject *name)"
```

----------------------------------------

TITLE: Using canonicalize function for XML normalization in Python
DESCRIPTION: Demonstrates how to use the canonicalize function to normalize XML data. This function converts XML to a canonical form for byte-by-byte comparisons and digital signatures, with options for handling comments, whitespace, and namespace prefixes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
xml_data = "<root>...</root>"
print(canonicalize(xml_data))

with open("c14n_output.xml", mode='w', encoding='utf-8') as out_file:
    canonicalize(xml_data, out=out_file)

with open("c14n_output.xml", mode='w', encoding='utf-8') as out_file:
    canonicalize(from_file="inputfile.xml", out=out_file)
```

----------------------------------------

TITLE: Enumerating Registry Subkeys in Python
DESCRIPTION: Enumerates subkeys of an open registry key, returning a string. Typically called repeatedly until an OSError is raised, indicating no more values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/winreg.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
EnumKey(key, index)
```

----------------------------------------

TITLE: Using quote_via parameter with urllib.parse.urlencode()
DESCRIPTION: The urlencode() function in urllib.parse now accepts a quote_via parameter that provides control over how query parts are encoded. This allows customizing the quoting behavior for URL parameters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_33

LANGUAGE: python
CODE:
```
urllib.parse.urlencode(query_parameters, quote_via=custom_quote_function)
```

----------------------------------------

TITLE: SequenceMatcher Opcodes Printing Example
DESCRIPTION: This snippet demonstrates how to retrieve and print the opcodes generated by SequenceMatcher, which describe the operations needed to transform one sequence into another. It iterates through the opcodes and prints each operation's tag, start and end indices in both sequences a and b.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/difflib.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
>>> for opcode in s.get_opcodes():
...     print("%6s a[%d:%d] b[%d:%d]" % opcode)
```

----------------------------------------

TITLE: PEP 538: Legacy C Locale Coercion in Python 3.7
DESCRIPTION: This entry describes PEP 538 which updates the default interpreter command-line interface to automatically use UTF-8 instead of ASCII for locale settings. It explains the implications for encoding text and how it affects locale-aware C extensions and child processes, along with configuration options for applying this change.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_1



----------------------------------------

TITLE: DateHeader Example
DESCRIPTION: Shows how to set the `Date` header using a datetime object. The first example creates a naive datetime, while the second example uses `email.utils.localtime` to include the current timezone offset.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.headerregistry.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
       msg['Date'] = datetime(2011, 7, 15, 21)
```

LANGUAGE: python
CODE:
```
       msg['Date'] = utils.localtime()
```

----------------------------------------

TITLE: Executing a new program using exec functions in Python
DESCRIPTION: These functions execute a new program, replacing the current process. They differ in how command-line arguments are passed (list vs. variable arguments) and whether they use the PATH environment variable. Errors are reported as OSError exceptions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_60

LANGUAGE: python
CODE:
```

.. function:: execl(path, arg0, arg1, ...)
              execle(path, arg0, arg1, ..., env)
              execlp(file, arg0, arg1, ...)
              execlpe(file, arg0, arg1, ..., env)
              execv(path, args)
              execve(path, args, env)
              execvp(file, args)
              execvpe(file, args, env)

   These functions all execute a new program, replacing the current process; they
   do not return.  On Unix, the new executable is loaded into the current process,
   and will have the same process id as the caller.  Errors will be reported as
   :exc:`OSError` exceptions.

   The current process is replaced immediately. Open file objects and
   descriptors are not flushed, so if there may be data buffered
   on these open files, you should flush them using
   :func:`sys.stdout.flush` or :func:`os.fsync` before calling an
   :func:`exec\* <execl>` function.

   The "l" and "v" variants of the :func:`exec\* <execl>` functions differ in how
   command-line arguments are passed.  The "l" variants are perhaps the easiest
   to work with if the number of parameters is fixed when the code is written; the
   individual parameters simply become additional parameters to the :func:`!execl\*`
   functions.  The "v" variants are good when the number of parameters is
   variable, with the arguments being passed in a list or tuple as the *args*
   parameter.  In either case, the arguments to the child process should start with
   the name of the command being run, but this is not enforced.

   The variants which include a "p" near the end (:func:`execlp`,
   :func:`execlpe`, :func:`execvp`, and :func:`execvpe`) will use the
   :envvar:`PATH` environment variable to locate the program *file*.  When the
   environment is being replaced (using one of the :func:`exec\*e <execl>` variants,
   discussed in the next paragraph), the new environment is used as the source of
   the :envvar:`PATH` variable. The other variants, :func:`execl`, :func:`execle`,
   :func:`execv`, and :func:`execve`, will not use the :envvar:`PATH` variable to
   locate the executable; *path* must contain an appropriate absolute or relative
   path. Relative paths must include at least one slash, even on Windows, as
   plain names will not be resolved.

   For :func:`execle`, :func:`execlpe`, :func:`execve`, and :func:`execvpe` (note
   that these all end in "e"), the *env* parameter must be a mapping which is
   used to define the environment variables for the new process (these are used
   instead of the current process' environment); the functions :func:`execl`,
   :func:`execlp`, :func:`execv`, and :func:`execvp` all cause the new process to
   inherit the environment of the current process.

   For :func:`execve` on some platforms, *path* may also be specified as an open
   file descriptor.  This functionality may not be supported on your platform;
   you can check whether or not it is available using :data:`os.supports_fd`. 
   If it is unavailable, using it will raise a :exc:`NotImplementedError`.

   .. audit-event:: os.exec path,args,env os.execl

   .. availability:: Unix, Windows, not WASI, not Android, not iOS.

   .. versionchanged:: 3.3
      Added support for specifying *path* as an open file descriptor
      for :func:`execve`.

   .. versionchanged:: 3.6
      Accepts a :term:`path-like object`.

```

----------------------------------------

TITLE: Deprecation Warning in ElementTree Module
DESCRIPTION: The :mod:`xml.etree.ElementTree` module has been updated to emit a :exc:`DeprecationWarning` when testing the truth value of an :class:`xml.etree.ElementTree.Element`, marking a significant change from emitting a :exc:`FutureWarning` previously.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.12.0a5.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
The :mod:`xml.etree.ElementTree` module now emits :exc:`DeprecationWarning` when testing the truth value of an :class:`xml.etree.ElementTree.Element`.
```

----------------------------------------

TITLE: Adding New Method to Logger Class in Python logging Module
DESCRIPTION: This update adds a new getChildren() method to the Logger class in the logging module to retrieve immediate child loggers.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.12.0a1.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
logger.getChildren()  # Returns immediate child loggers of a logger
```

----------------------------------------

TITLE: Itertools Recipe: tabulate function
DESCRIPTION: Function that returns an iterator applying a function to a count sequence, starting from a specified value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
def tabulate(function, start=0):
    "Return function(0), function(1), ..."
    return map(function, count(start))
```

----------------------------------------

TITLE: Accessing XML Attribute Properties in Python DOM
DESCRIPTION: Shows how to access various properties of an Attr object in the XML DOM, including name, localName, prefix, and value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.dom.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
attr.name  # Full attribute name
attr.localName  # Local part of the name (after colon)
attr.prefix  # Namespace prefix (before colon)
attr.value  # Text value of the attribute
```

----------------------------------------

TITLE: Getting TarInfo for File in Python
DESCRIPTION: Creates a `TarInfo` object based on the file specified by `name` or `fileobj`. `arcname` sets the name within the archive, defaulting to the file's name. The resulting `TarInfo` object reflects the file's metadata and can be modified before being added to an archive using `addfile`. Special handling might be needed for non-ordinary file objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_6

LANGUAGE: python
CODE:
```
TarFile.gettarinfo(name=None, arcname=None, fileobj=None)
```

----------------------------------------

TITLE: Header File for spammodule Exporting API
DESCRIPTION: The spammodule.h header file provides the structure for exporting C API for the spam module. It defines macros and function prototypes necessary for both exporting and importing C functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/extending.rst#2025-04-21_snippet_23

LANGUAGE: C
CODE:
```
#ifndef Py_SPAMMODULE_H
#define Py_SPAMMODULE_H
#ifdef __cplusplus
extern "C" {
#endif

/* Header file for spammodule */

/* C API functions */
#define PySpam_System_NUM 0
#define PySpam_System_RETURN int
#define PySpam_System_PROTO (const char *command)

/* Total number of C API pointers */
#define PySpam_API_pointers 1

#ifdef SPAM_MODULE
/* This section is used when compiling spammodule.c */

static PySpam_System_RETURN PySpam_System PySpam_System_PROTO;

#else
/* This section is used in modules that use spammodule's API */

static void **PySpam_API;

#define PySpam_System \
 (*(PySpam_System_RETURN (*)PySpam_System_PROTO) PySpam_API[PySpam_System_NUM])

/* Return -1 on error, 0 on success.
 * PyCapsule_Import will set an exception if there's an error.
 */
static int
import_spam(void)
{
    PySpam_API = (void **)PyCapsule_Import("spam._C_API", 0);
    return (PySpam_API != NULL) ? 0 : -1;
}

#endif

#ifdef __cplusplus
}
#endif

#endif /* !defined(Py_SPAMMODULE_H) */
```

----------------------------------------

TITLE: Getting Socket Information from Transport in Asyncio
DESCRIPTION: This code snippet demonstrates how to retrieve the underlying socket object from an asyncio transport using the `get_extra_info` method. It attempts to obtain the socket and then uses it to call `getsockopt` to get socket options.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"""
sock = transport.get_extra_info('socket')
if sock is not None:
    print(sock.getsockopt(...))
"""
```

----------------------------------------

TITLE: Using a Password File for TLS Private Keys in Python's HTTP Server
DESCRIPTION: This configuration demonstrates specifying a password file for password-protected private keys when enabling HTTPS. Introduced in Python 3.14, it requires both --tls-cert and --tls-key options to be used.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.server.rst#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
python -m http.server \
             --tls-cert cert.pem \
             --tls-key key.pem \
             --tls-password-file password.txt
```

----------------------------------------

TITLE: Add Components to Compound Shape (Python Turtle)
DESCRIPTION: Illustrates how to create a "compound" Shape object and add polygon components to it using addcomponent(). Each component is defined by a list of vertices and specified fill and outline colors. Requires the turtle module and Shape class.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_82

LANGUAGE: python
CODE:
```
s = Shape("compound")
poly1 = ((0,0),(10,-5),(0,10),(-10,-5))
s.addcomponent(poly1, "red", "blue")
poly2 = ((0,0),(10,-5),(-10,-5))
s.addcomponent(poly2, "blue", "red")
```

----------------------------------------

TITLE: Defining a Python Function with UTF-8 Characters in Docstring
DESCRIPTION: This snippet defines a function 'y' with a docstring containing UTF-8 encoded Cyrillic characters. It showcases how Python handles non-ASCII characters in function documentation.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/tokenizedata/tokenize_tests-latin1-coding-cookie-and-utf8-bom-sig.txt#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
def y():
    """
    And again in a comment.  ЉЊЈЁЂ
    """
    pass
```

----------------------------------------

TITLE: Disabling Echo Mode with Curses in Python
DESCRIPTION: The `noecho` function disables the echoing of user input characters on the terminal. This is typically done to maintain user privacy or input integrity during sensitive operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_20

LANGUAGE: Python
CODE:
```
.. function:: noecho()

   Leave echo mode.  Echoing of input characters is turned off.
```

----------------------------------------

TITLE: ASCII Character Testing Functions - Python
DESCRIPTION: Collection of functions to test ASCII character properties such as checking for alphanumeric, alphabetic, control characters, etc. These functions accept either integers or single-character strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.ascii.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
isalnum(c)    # Checks for ASCII alphanumeric character
isalpha(c)    # Checks for ASCII alphabetic character
isascii(c)    # Checks for 7-bit ASCII character
isblank(c)    # Checks for ASCII whitespace (space/tab)
iscntrl(c)    # Checks for ASCII control character
isdigit(c)    # Checks for ASCII decimal digit
isgraph(c)    # Checks for printable ASCII except space
islower(c)    # Checks for ASCII lowercase character
isprint(c)    # Checks for printable ASCII including space
ispunct(c)    # Checks for printable ASCII non-space non-alphanumeric
isspace(c)    # Checks for ASCII whitespace characters
isupper(c)    # Checks for ASCII uppercase letter
isxdigit(c)   # Checks for ASCII hexadecimal digit
isctrl(c)     # Checks for ASCII control character
ismeta(c)     # Checks for non-ASCII character
```

----------------------------------------

TITLE: Resolving Relative Module Names in Python
DESCRIPTION: Example usage of importlib.util.resolve_name() to resolve a relative module name to an absolute one.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.rst#2025-04-21_snippet_28

LANGUAGE: python
CODE:
```
importlib.util.resolve_name('sys', __spec__.parent)
```

----------------------------------------

TITLE: Checking Python Version in Python
DESCRIPTION: This snippet demonstrates how to check if the Python interpreter is at least version 1.5.2 using the sys.hexversion attribute. It compares the hexversion against a hexadecimal representation of the version number.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sys.rst#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
if sys.hexversion >= 0x010502F0:
    # use some advanced feature
    ...
else:
    # use an alternative implementation or warn the user
    ...
```

----------------------------------------

TITLE: Adding Task.get_coro() Method to asyncio
DESCRIPTION: Addition of the get_coro() method to asyncio.Task to publicly expose the task's coroutine object.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0b1.rst#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
asyncio.Task.get_coro()
```

----------------------------------------

TITLE: Implementing mapLogRecord Method in HTTPHandler
DESCRIPTION: Method to convert a logging record into a URL-encoded dictionary for web server transmission. The default implementation returns the record's __dict__ attribute.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_36

LANGUAGE: python
CODE:
```
def mapLogRecord(record):
    return record.__dict__
```

----------------------------------------

TITLE: Module Loading Simulation
DESCRIPTION: This code snippet demonstrates an approximation of the module loading process in Python's import machinery.  It shows how the import system creates a module, sets attributes, executes the module's code using the loader, and handles potential exceptions during loading.  The snippet highlights the roles of `spec.loader`, `create_module`, `exec_module`, and `sys.modules`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/import.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
"""
    module = None
    if spec.loader is not None and hasattr(spec.loader, 'create_module'):
        # It is assumed 'exec_module' will also be defined on the loader.
        module = spec.loader.create_module(spec)
    if module is None:
        module = ModuleType(spec.name)
    # The import-related module attributes get set here:
    _init_module_attrs(spec, module)

    if spec.loader is None:
        # unsupported
        raise ImportError
    if spec.origin is None and spec.submodule_search_locations is not None:
        # namespace package
        sys.modules[spec.name] = module
    elif not hasattr(spec.loader, 'exec_module'):
        module = spec.loader.load_module(spec.name)
    else:
        sys.modules[spec.name] = module
        try:
            spec.loader.exec_module(module)
        except BaseException:
            try:
                del sys.modules[spec.name]
            except KeyError:
                pass
            raise
    return sys.modules[spec.name]
"""
```

----------------------------------------

TITLE: Using Binomial Distribution in Python
DESCRIPTION: Implementation of a binomial distribution function that returns the number of successes for n independent trials with probability p. Mathematically equivalent to summing successful trials.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/random.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
sum(random() < p for i in range(n))
```

----------------------------------------

TITLE: Using textwrap.shorten() in Python
DESCRIPTION: Demonstrates the usage of the textwrap.shorten() function to collapse and truncate text to fit within a specified width.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/textwrap.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
>>> textwrap.shorten("Hello  world!", width=12)
'Hello world!'
>>> textwrap.shorten("Hello  world!", width=11)
'Hello [...]'
>>> textwrap.shorten("Hello world", width=10, placeholder="...")
'Hello...'
```

----------------------------------------

TITLE: Modifying Tab Options in Notebook in Python
DESCRIPTION: Method to query or modify options of a specific tab in a ttk.Notebook widget.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_15

LANGUAGE: Python
CODE:
```
def tab(tab_id, option=None, **kw):
    Query or modify the options of the specific *tab_id*.

    If *kw* is not given, returns a dictionary of the tab option values. If
    *option* is specified, returns the value of that *option*. Otherwise,
    sets the options to the corresponding values.
```

----------------------------------------

TITLE: Defining read-only abstract property
DESCRIPTION: This code snippet demonstrates how to define a read-only abstract property within an abstract base class (ABC) in Python. The @property decorator is used in conjunction with @abstractmethod to enforce that subclasses implement the property's getter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/abc.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
class C(ABC):
    @property
    @abstractmethod
    def my_abstract_property(self):
        ...

```

----------------------------------------

TITLE: Release GIL for Blocking I/O - C
DESCRIPTION: This C code snippet uses macros to temporarily release the Global Interpreter Lock (GIL) and detach the thread state, allowing other Python threads to execute. It is typically used around blocking operations, such as I/O, in native extension code to prevent the current thread from blocking the entire Python interpreter. Py_BEGIN_ALLOW_THREADS releases the lock, and Py_END_ALLOW_THREADS reacquires it.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/init.rst#_snippet_25

LANGUAGE: C
CODE:
```
Py_BEGIN_ALLOW_THREADS
... Do some blocking I/O operation ...
Py_END_ALLOW_THREADS
```

----------------------------------------

TITLE: Reading Data from File Descriptor (Python)
DESCRIPTION: The read() function reads at most n bytes from a file descriptor fd. It returns a bytestring containing the bytes read, or an empty bytes object if the end of file is reached. This function is intended for low-level I/O on file descriptors returned by os.open() or pipe().
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
read(fd, n, /)
```

----------------------------------------

TITLE: Warning Filter Format Example
DESCRIPTION: Shows the basic format for specifying warning filters using colon-separated fields.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/warnings.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
action:message:category:module:line
```

----------------------------------------

TITLE: Creating HTTPPasswordMgr Class for Credential Management in Python
DESCRIPTION: HTTPPasswordMgr maintains a database of (realm, uri) -> (user, password) mappings for HTTP authentication.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
class HTTPPasswordMgr():
```

----------------------------------------

TITLE: Normalizing Decimal Values Using normalize Method in Python
DESCRIPTION: Demonstrates how the `normalize` method removes trailing zeros and simplifies the representation of a Decimal number, showing multiple equivalent inputs resulting in the same normalized output.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_24

LANGUAGE: Python
CODE:
```
Decimal('32.100').normalize()
Decimal('32.1')
Decimal('0.321000e+2').normalize()
Decimal('32.1')
```

----------------------------------------

TITLE: Using Metaclass Syntax in Python 3
DESCRIPTION: Demonstrates the new metaclass syntax in Python 3.0 (PEP 3115), which replaces the old __metaclass__ assignment with a keyword argument in the class definition.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.0.rst#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
class C(metaclass=M):
    ...
```

----------------------------------------

TITLE: Using MetavarTypeHelpFormatter in ArgumentParser in Python
DESCRIPTION: Shows how `argparse.MetavarTypeHelpFormatter` changes the display name for argument values in the help message to the name of the argument's type (e.g., `int`, `float`) instead of the destination variable name.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_11

LANGUAGE: Python
CODE:
```
>>> parser = argparse.ArgumentParser(
...     prog='PROG',
...     formatter_class=argparse.MetavarTypeHelpFormatter)
>>> parser.add_argument('--foo', type=int)
>>> parser.add_argument('bar', type=float)
>>> parser.print_help()
usage: PROG [-h] [--foo int] float

positional arguments:
  float

options:
  -h, --help  show this help message and exit
  --foo int
```

----------------------------------------

TITLE: Accessing Module State from Functions in C
DESCRIPTION: This C code demonstrates how to access per-module state from a module-level function using `PyModule_GetState`. It retrieves a pointer to a custom structure `my_struct` associated with the module and checks for a `NULL` pointer indicating missing state.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/isolating-extensions.rst#2025-04-21_snippet_3

LANGUAGE: c
CODE:
```

   static PyObject *
   func(PyObject *module, PyObject *args)
   {
       my_struct *state = (my_struct*)PyModule_GetState(module);
       if (state == NULL) {
           return NULL;
       }
       // ... rest of logic
   }

```

----------------------------------------

TITLE: Handling StopIteration in Generators after PEP 479
DESCRIPTION: This snippet explains the new behavior introduced by PEP 479 regarding how StopIteration exceptions are handled within generator functions. It shows the necessity of a future import to enable the new behavior that replaces StopIteration with RuntimeError for easier debugging.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
>>> from __future__ import generator_stop

>>> def gen():
...     next(iter([]))
...     yield
...
>>> next(gen())
Traceback (most recent call last):
  File "<stdin>", line 2, in gen
StopIteration

# The above exception was the direct cause of the following exception:
```

----------------------------------------

TITLE: Using importlib.import_module for importing modules
DESCRIPTION: Example demonstrating the usage of import_module function from the new importlib module for both standard absolute imports and relative imports.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.7.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
>>> from importlib import import_module
>>> anydbm = import_module('anydbm')  # Standard absolute import
>>> anydbm
<module 'anydbm' from '/p/python/Lib/anydbm.py'>
>>> # Relative import
>>> file_util = import_module('..file_util', 'distutils.command')
>>> file_util
<module 'distutils.file_util' from '/python/Lib/distutils/file_util.pyc'>
```

----------------------------------------

TITLE: Calculating Exponential Values in Python
DESCRIPTION: This function returns e raised to the power of x, providing a more accurate alternative to math.e ** x or pow(math.e, x). It is useful for calculating exponentials in mathematical applications.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/math.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
.. function:: exp(x)

   Return *e* raised to the power *x*, where *e* = 2.718281... is the base
   of natural logarithms.  This is usually more accurate than ``math.e ** x``
   or ``pow(math.e, x)``.
```

----------------------------------------

TITLE: Generating HTML Attributes with html in Python
DESCRIPTION: Shows another application of the 'html' function with template strings: generating HTML attributes from a dictionary. The example demonstrates how a dictionary of attributes can be interpolated into a t-string and rendered as HTML attributes by the 'html' function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_2

LANGUAGE: python
CODE:
```
attributes = {"src": "shrubbery.jpg", "alt": "looks nice"}
template = t"<img {attributes} />"
assert html(template) == '<img src="shrubbery.jpg" alt="looks nice" class="looks-nice" />'
```

----------------------------------------

TITLE: Deprecating Direct ABC Usage from collections Module
DESCRIPTION: A DeprecationWarning is now emitted when using or importing an ABC directly from collections rather than from collections.abc. This encourages the use of the more specific collections.abc module.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.7.0b2.rst#2025-04-21_snippet_16



----------------------------------------

TITLE: Importing the tkinter.ttk Module in Python
DESCRIPTION: Shows how to import the ttk module to access Tk themed widgets. This is the basic approach for using ttk widgets alongside standard tkinter widgets.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from tkinter import ttk
```

----------------------------------------

TITLE: Deprecating sys.last_type in Python
DESCRIPTION: The sys.last_type field, which held the type of the last uncaught exception, is deprecated. Use sys.last_exc instead to access the last exception object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_31

LANGUAGE: Python
CODE:
```
sys.last_type
```

----------------------------------------

TITLE: Testing rect() Function Edge Cases
DESCRIPTION: Comprehensive test cases for rectangular coordinate conversion function, testing special values including infinity, NaN, positive/negative zero, and various combinations of these values.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/mathdata/cmath_testcases.txt#2025-04-21_snippet_31

LANGUAGE: text
CODE:
```
rect1000 rect 0.0 0.0 -> 0.0 0.0
rect1001 rect 0.0 inf -> 0.0 0.0        ignore-real-sign ignore-imag-sign
rect1002 rect 2.3 inf -> nan nan        invalid
rect1003 rect inf inf -> inf nan        invalid ignore-real-sign
[...truncated for brevity...]
rect1052 rect -inf -7.0 -> -inf inf
```

----------------------------------------

TITLE: Defining Python C API Exception: PyExc_TypeError
DESCRIPTION: This code snippet defines the C API exception `PyExc_TypeError` and maps it to the Python `TypeError` class. This allows C code to signal type-related errors (e.g., passing an argument of the wrong type to a function) within the Python environment.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/exceptions.rst#2025-04-21_snippet_91

LANGUAGE: c
CODE:
```
":c:data:`PyExc_TypeError`               | :exc:`TypeError`                |          "
```

----------------------------------------

TITLE: Performing Fused Multiply-Add Operation in Python
DESCRIPTION: The fma(x, y, z) function performs a fused multiply-add operation, returning (x * y) + z computed with infinite precision and range, followed by a single round to float format. It often provides better accuracy than the direct expression (x * y) + z. Follows IEEE 754 standard specification.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/math.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
fma(x, y, z)
```

----------------------------------------

TITLE: Day Names Data - Python
DESCRIPTION: This data attribute holds the names of the days of the week in the current locale, helpful for localizing calendar displays.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/calendar.rst#2025-04-21_snippet_21

LANGUAGE: Python
CODE:
```
.. data:: day_name
```

----------------------------------------

TITLE: Enabling CGI with Python's HTTP Server
DESCRIPTION: This option enables the CGIHTTPRequestHandler in python -m http.server using the --cgi flag. It's deprecated as of Python 3.13 and will be removed in 3.15, therefore it should be avoided in new implementations. No additional dependencies are required.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.server.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
python -m http.server --cgi
```

----------------------------------------

TITLE: Creating and Binding a Tkinter Entry Widget in Python
DESCRIPTION: This snippet demonstrates setting up a simple Tkinter application with an entry widget that binds to a return key event in Python. It shows how to pack the widget, associate a text variable, and set up a callback function when the user presses the return key. The application starts a main event loop to keep the GUI active. Requires the tkinter module. Expected output is a print statement showing the entry content.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
self.entrythingy.pack()

# Create the application variable.
self.contents = tk.StringVar()
# Set it to some value.
self.contents.set("this is a variable")
# Tell the entry widget to watch this variable.
self.entrythingy["textvariable"] = self.contents

# Define a callback for when the user hits return.
# It prints the current value of the variable.
self.entrythingy.bind('<Key-Return>',
                     self.print_contents)

def print_contents(self, event):
    print("Hi. The current entry content is:",
          self.contents.get())

root = tk.Tk()
myapp = App(root)
myapp.mainloop()
```

----------------------------------------

TITLE: Parsing Python Attribute Access AST with ast.dump
DESCRIPTION: This snippet shows how attribute access ('snake.colour') is represented in the Abstract Syntax Tree (AST). It uses `ast.parse` to generate the AST and `ast.dump` to print it. The output demonstrates the `Attribute` node, its `value` (a `Name` node), the attribute name (`attr`), and the context (`ctx`).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_22

LANGUAGE: python
CODE:
```
print(ast.dump(ast.parse('snake.colour', mode='eval'), indent=4))
```

----------------------------------------

TITLE: Generating Combinatorics with itertools in Python
DESCRIPTION: Illustrates the use of itertools combinations_with_replacement and compress for generating combinations and filtering sequences respectively. The count function can now increment with custom steps, accepting fractions and decimal types for more flexible counting.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.1.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
[p+q for p,q in combinations_with_replacement('LOVE', 2)]
['LL', 'LO', 'LV', 'LE', 'OO', 'OV', 'OE', 'VV', 'VE', 'EE']

list(compress(data=range(10), selectors=[0,0,1,1,0,1,0,1,0,0]))
[2, 3, 5, 7]

c = count(start=Fraction(1,2), step=Fraction(1,6))
[next(c), next(c), next(c), next(c)]
[Fraction(1, 2), Fraction(2, 3), Fraction(5, 6), Fraction(1, 1)]
```

----------------------------------------

TITLE: Accessing PackagePath Attributes - Python
DESCRIPTION: Illustrates how to access the extended attributes (`size`, `dist`, `hash`) available on a `PackagePath` object, which provides metadata about an installed file.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_18

LANGUAGE: python
CODE:
```
>>> util  # doctest: +SKIP
PackagePath('wheel/util.py')
>>> util.size  # doctest: +SKIP
859
>>> util.dist  # doctest: +SKIP
<importlib.metadata._hooks.PathDistribution object at 0x101e0cef0>
>>> util.hash  # doctest: +SKIP
<FileHash mode: sha256 value: bYkw5oMccfazVCoYQwKkkemoVyMAFoR34mmKBx8R1NI>
```

----------------------------------------

TITLE: Setting Patch Test Prefix in Python Mock
DESCRIPTION: Demonstrates how to set a custom test prefix for patches and apply it to class methods. Shows how the patch affects method calls while preserving the original value.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_48

LANGUAGE: python
CODE:
```
>>> patch.TEST_PREFIX = 'foo'
>>> value = 3
>>>
>>> @patch('__main__.value', 'not three')
... class Thing:
...     def foo_one(self):
...         print(value)
...     def foo_two(self):
...         print(value)
...
>>>
>>> Thing().foo_one()
not three
>>> Thing().foo_two()
not three
>>> value
3
```

----------------------------------------

TITLE: Showing Syntax Error in InteractiveInterpreter
DESCRIPTION: Displays the syntax error message when a syntax error occurs in the input provided to the interpreter, allowing developers to manage error outputs more effectively.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/code.rst#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
def InteractiveInterpreter.showsyntaxerror(filename=None):
    """
    Display the syntax error that just occurred.  This does not display a stack
    trace because there isn't one for syntax errors. If *filename* is given, it is
    stuffed into the exception instead of the default filename provided by Python's
    parser, because it always uses ``'<string>'`` when reading from a string. The
    output is written by the :meth:`write` method.
    """

```

----------------------------------------

TITLE: Example Usage of mimetypes Module (Python)
DESCRIPTION: This snippet demonstrates basic usage of the `mimetypes` module in a Python interactive session. It shows how to import the module, initialize its internal data structures, and access the underlying dictionaries that store mappings between extensions, encodings, and MIME types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/mimetypes.rst#_snippet_0

LANGUAGE: python
CODE:
```
>>> import mimetypes
>>> mimetypes.init()
>>> mimetypes.knownfiles
['/etc/mime.types', '/etc/httpd/mime.types', ... ]
>>> mimetypes.suffix_map['.tgz']
'.tar.gz'
>>> mimetypes.encodings_map['.gz']
'gzip'
>>> mimetypes.types_map['.tgz']
'application/x-tar-gz'
```

----------------------------------------

TITLE: Handling ISO-8601 24:00 Time Format in Python's datetime Module
DESCRIPTION: Added support for the ISO-8601 24:00 alternative to midnight of the next day in datetime.datetime.fromisoformat() and datetime.time.fromisoformat() methods.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.14.0a1.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
datetime.datetime.fromisoformat()
datetime.time.fromisoformat()
```

----------------------------------------

TITLE: Implementing a Custom CPython Call Function in C
DESCRIPTION: This snippet demonstrates how to implement a custom call function in CPython that creates a formatted Unicode string from provided arguments. It depends on the correct usage of the PyArg_ParseTuple and PyUnicode_FromFormat functions, and requires the input PyObject pointers as arguments. The code expects three string arguments and returns a formatted string encapsulating those arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/newtypes.rst#2025-04-21_snippet_14

LANGUAGE: C
CODE:
```
static PyObject *
newdatatype_call(PyObject *op, PyObject *args, PyObject *kwds)
{
    newdatatypeobject *self = (newdatatypeobject *) op;
    PyObject *result;
    const char *arg1;
    const char *arg2;
    const char *arg3;

    if (!PyArg_ParseTuple(args, "sss:call", &arg1, &arg2, &arg3)) {
        return NULL;
    }
    result = PyUnicode_FromFormat(
        "Returning -- value: [%d] arg1: [%s] arg2: [%s] arg3: [%s]\n",
        self->obj_UnderlyingDatatypePtr->size,
        arg1, arg2, arg3);
    return result;
}
```

----------------------------------------

TITLE: Defining Request Object Attributes in Python
DESCRIPTION: This snippet defines several attributes of the Request object, including full_url, type, host, origin_req_host, selector, data, unverifiable, and method. These attributes provide information about the URL and request details.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
.. attribute:: Request.full_url

.. attribute:: Request.type

.. attribute:: Request.host

.. attribute:: Request.origin_req_host

.. attribute:: Request.selector

.. attribute:: Request.data

.. attribute:: Request.unverifiable

.. attribute:: Request.method
```

----------------------------------------

TITLE: Implementing Dictionary Missing Key Handling in Python
DESCRIPTION: Demonstrates various approaches to handle missing dictionary keys using __missing__ method and custom dictionary subclasses.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
>>> import shelve
>>> d = shelve.open('tmp.shl')
>>> 'The {project_name} status is {status} as of {date}'.format_map(d)
'The testing project status is green as of February 15, 2011'

>>> class LowerCasedDict(dict):
...     def __getitem__(self, key):
...         return dict.__getitem__(self, key.lower())
...
>>> lcd = LowerCasedDict(part='widgets', quantity=10)
>>> 'There are {QUANTITY} {Part} in stock'.format_map(lcd)
'There are 10 widgets in stock'

>>> class PlaceholderDict(dict):
...     def __missing__(self, key):
...         return '<{}>'.format(key)
...
>>> 'Hello {name}, welcome to {location}'.format_map(PlaceholderDict())
'Hello <name>, welcome to <location>'
```

----------------------------------------

TITLE: Disabling Newline Mode with Curses in Python
DESCRIPTION: The `nonl` function deactivates the conversion of returns to newlines on input, and vice versa on output. This mode improves execution speed and aids detection of the return key.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_21

LANGUAGE: Python
CODE:
```
.. function:: nonl()

   Leave newline mode.  Disable translation of return into newline on input, and
   disable low-level translation of newline into newline/return on output (but this
   does not change the behavior of ``addch('\n')``, which always does the
   equivalent of return and line feed on the virtual screen).  With translation
   off, curses can sometimes speed up vertical motion a little; also, it will be
   able to detect the return key on input.
```

----------------------------------------

TITLE: Parsing Match statement with Sequence and Guard in Python
DESCRIPTION: Illustrates the AST representation of a Python `match` statement with multiple cases, including a sequence pattern (`MatchSequence`), aliasing (`MatchAs`), and a guard expression (`guard`). The snippet shows the source code and its `ast.dump` output, detailing the `Match` node and its `match_case` children.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_38

LANGUAGE: Python
CODE:
```
match x:
    case [x] if x>0:
        ...
    case tuple():
        ...
```

LANGUAGE: Python
CODE:
```
Module(
    body=[
        Match(
            subject=Name(id='x', ctx=Load()),
            cases=[
                match_case(
                    pattern=MatchSequence(
                        patterns=[
                            MatchAs(name='x')]),
                    guard=Compare(
                        left=Name(id='x', ctx=Load()),
                        ops=[
                            Gt()],
                        comparators=[
                            Constant(value=0)]),n                    body=[
                        Expr(
                            value=Constant(value=Ellipsis))]),
                match_case(
                    pattern=MatchClass(
                        cls=Name(id='tuple', ctx=Load())),
                    body=[
                        Expr(
                            value=Constant(value=Ellipsis))])])])
```

----------------------------------------

TITLE: C Code: Importing Modules in C Extensions
DESCRIPTION: This function, part of the Python C API, is used to import Python modules from C code within C extensions.  It ensures that any installed import hooks are used during the import process, providing a consistent and extensible way to import modules.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.1.rst#2025-04-21_snippet_17

LANGUAGE: c
CODE:
```
":c:func:`PyImport_ImportModule`"
```

----------------------------------------

TITLE: Replacing Py_MEMCPY with memcpy in CPython
DESCRIPTION: This change replaces the custom Py_MEMCPY macro with the standard memcpy() function in the CPython codebase. This is done to allow Visual Studio to properly optimize memory copy operations, potentially improving performance.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.7.0a1.rst#2025-04-21_snippet_6

LANGUAGE: C
CODE:
```
".. bpo: 28126
.. date: 0358
.. nonce: Qf6-uQ
.. section: Core and Builtins

Replace Py_MEMCPY with memcpy(). Visual Studio can properly optimize
memcpy()."
```

----------------------------------------

TITLE: Security improvements in ftplib.FTP for passive data channels
DESCRIPTION: Python 3.6.14 modifies ftplib.FTP to not trust IPv4 addresses from remote servers when setting up passive data channels, reusing the server IP instead. For code requiring the previous behavior, set trust_server_pasv_ipv4_address=True on the FTP instance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.6.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
ftp_instance = ftplib.FTP()
# To use old behavior:
ftp_instance.trust_server_pasv_ipv4_address = True
```

----------------------------------------

TITLE: Node Expansion in XML Pull Parser - Python
DESCRIPTION: Example showing how to expand child nodes when parsing XML using pulldom, demonstrating the difference between unexpanded and expanded node content.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.dom.pulldom.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from xml.dom import pulldom

xml = '<html><title>Foo</title> <p>Some text <div>and more</div></p> </html>'
doc = pulldom.parseString(xml)
for event, node in doc:
    if event == pulldom.START_ELEMENT and node.tagName == 'p':
        # Following statement only prints '<p/>'
        print(node.toxml())
        doc.expandNode(node)
        # Following statement prints node with all its children '<p>Some text <div>and more</div></p>'
        print(node.toxml())
```

----------------------------------------

TITLE: Handle IMAP4 Exceptions in Python
DESCRIPTION: The IMAP4.error and its subclasses, IMAP4.abort and IMAP4.readonly, are defined to handle various IMAP4 client errors. These exceptions provide specific error handling, from general errors to server-specific issues and mailbox permission changes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/imaplib.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
class IMAP4.error(Exception):
    # Exception raised on any errors

class IMAP4.abort(IMAP4.error):
    # Raised on IMAP4 server errors

class IMAP4.readonly(IMAP4.error):
    # Raised when writable mailbox status changes
```

----------------------------------------

TITLE: Creating Immutable Objects with __slots__ and Properties
DESCRIPTION: Example of how to use __slots__ along with property decorators to create immutable objects. This pattern prevents direct attribute access while providing controlled read-only access.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_28

LANGUAGE: python
CODE:
```
class Immutable:

    __slots__ = ('_dept', '_name')          # Replace the instance dictionary

    def __init__(self, dept, name):
        self._dept = dept                   # Store to private attribute
        self._name = name                   # Store to private attribute

    @property                               # Read-only descriptor
    def dept(self):
        return self._dept

    @property
    def name(self):                         # Read-only descriptor
        return self._name
```

----------------------------------------

TITLE: Execute Python String - Interactive Mode
DESCRIPTION: Executes Python source code in interactive mode, reading from a file with user prompts. Returns 0 on success, -1 on exception, or error code on parse error.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/veryhigh.rst#2025-04-21_snippet_2

LANGUAGE: c
CODE:
```
int PyRun_InteractiveOne(FILE *fp, const char *filename)
```

----------------------------------------

TITLE: Specialize CALL_FUNCTION for builtin types (C)
DESCRIPTION: Specializes the `CALL_FUNCTION` instruction for calls to built-in types with a single argument. This optimization speeds up common operations like `range(x)`, `list(x)`, and `type(obj)` by providing more efficient handling of these specific function calls.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a4.rst#2025-04-21_snippet_34



----------------------------------------

TITLE: Demonstrating shlex.quote for Shell-safe String Escaping in Python
DESCRIPTION: The quote function returns a shell-escaped version of a string to protect against command injection vulnerabilities. This example shows how to safely include potentially dangerous filenames in shell commands.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/shlex.rst#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> filename = 'somefile; rm -rf ~'
>>> command = 'ls -l {}'.format(filename)
>>> print(command)  # executed by a shell: boom!
ls -l somefile; rm -rf ~
```

LANGUAGE: python
CODE:
```
>>> from shlex import quote
>>> command = 'ls -l {}'.format(quote(filename))
>>> print(command)
ls -l 'somefile; rm -rf ~'
>>> remote_command = 'ssh home {}'.format(quote(command))
>>> print(remote_command)
ssh home 'ls -l '"'"'somefile; rm -rf ~'"'"''
```

LANGUAGE: python
CODE:
```
>>> from shlex import split
>>> remote_command = split(remote_command)
>>> remote_command
['ssh', 'home', "ls -l 'somefile; rm -rf ~'"]
>>> command = split(remote_command[-1])
>>> command
['ls', '-l', 'somefile; rm -rf ~']
```

----------------------------------------

TITLE: Install Python Per-User with Simplified UI (Command Prompt)
DESCRIPTION: Shows a command to install Python specifically for the current user. It enables the simplified install UI with a custom description and explicitly excludes the launcher and the test suite from the installation. Recommended when a system-wide install already exists.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/windows.rst#_snippet_17

LANGUAGE: Batch
CODE:
```
python-3.9.0.exe InstallAllUsers=0 Include_launcher=0 Include_test=0
        SimpleInstall=1 SimpleInstallDescription="Just for me, no test suite."
```

----------------------------------------

TITLE: Applying the Deprecated Decorator in Python
DESCRIPTION: This snippet illustrates the usage of the @deprecated decorator from the warnings module. It shows how to apply the decorator to a class, a function, and an overloaded function, demonstrating different ways to specify deprecation messages and categories.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/warnings.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
from warnings import deprecated
from typing import overload

@deprecated("Use B instead")
class A:
    pass

@deprecated("Use g instead")
def f():
    pass

@overload
@deprecated("int support is deprecated")
def g(x: int) -> int: ...
@overload
def g(x: str) -> int: ...
```

----------------------------------------

TITLE: Replacing make touch with make regen-all in build process
DESCRIPTION: Changed the build process to use explicit regeneration of generated files instead of relying on file modification time. Replaced 'make touch' command with 'make regen-all' for more explicit control over file regeneration.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.5.4rc1.rst#2025-04-21_snippet_2

LANGUAGE: Shell
CODE:
```
# Old command
$ make touch

# New command
$ make regen-all
```

----------------------------------------

TITLE: Creating and Writing a Configuration File in Python
DESCRIPTION: Demonstrates how to programmatically create a ConfigParser object, add sections and values, and write the resulting configuration to a file.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> import configparser
>>> config = configparser.ConfigParser()
>>> config['DEFAULT'] = {'ServerAliveInterval': '45',
...                      'Compression': 'yes',
...                      'CompressionLevel': '9'}
>>> config['forge.example'] = {}
>>> config['forge.example']['User'] = 'hg'
>>> config['topsecret.server.example'] = {}
>>> topsecret = config['topsecret.server.example']
>>> topsecret['Port'] = '50022'     # mutates the parser
>>> topsecret['ForwardX11'] = 'no'  # same here
>>> config['DEFAULT']['ForwardX11'] = 'yes'
>>> with open('example.ini', 'w') as configfile:
...   config.write(configfile)
...
```

----------------------------------------

TITLE: Dataclass with Default Values (Python)
DESCRIPTION: This snippet demonstrates how to specify default values for fields in a dataclass. In this example, 'a' has no default value, while 'b' is assigned a default value of 0. This affects the generated __init__ method, where 'b' becomes an optional parameter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dataclasses.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
"@dataclass
class C:
    a: int       # 'a' has no default value
    b: int = 0   # assign a default value for 'b'"
```

----------------------------------------

TITLE: XML XInclude Example for Including Text Content
DESCRIPTION: An example XML document that demonstrates how to include a text file using XInclude directives. The example uses the 'parse="text"' attribute to specify that the included content should be treated as plain text.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_22

LANGUAGE: xml
CODE:
```
<?xml version="1.0"?>
<document xmlns:xi="http://www.w3.org/2001/XInclude">
  Copyright (c) <xi:include href="year.txt" parse="text" />.
</document>
```

----------------------------------------

TITLE: Example: Opening a URL with CookieJar in Python
DESCRIPTION: Demonstrates the basic usage of CookieJar for managing cookies while opening a URL. Requires http.cookiejar and urllib.request to be imported. The example shows how to create an opener with an HTTPCookieProcessor and open a URL with it.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.cookiejar.rst#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
import http.cookiejar, urllib.request
cj = http.cookiejar.CookieJar()
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
r = opener.open("http://example.com/")
```

----------------------------------------

TITLE: Creating and Setting a Custom Decimal Context (Python)
DESCRIPTION: Demonstrates creating a new `Context` object with specific precision and rounding rules, setting it as the active context using `setcontext`, and then performing a division using `Decimal` objects under that context. The result shows the effect of the set precision.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_8

LANGUAGE: python
CODE:
```
myothercontext = Context(prec=60, rounding=ROUND_HALF_DOWN)
setcontext(myothercontext)
Decimal(1) / Decimal(7)
```

----------------------------------------

TITLE: Create New Unicode Object in C
DESCRIPTION: Creates a new Python Unicode object (string) of a specified size (in code points) and hints the maximum character value it will contain. This allows the CPython runtime to allocate the appropriate internal representation (UCS1, UCS2, or UCS4). Returns a new reference to the Unicode object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/unicode.rst#_snippet_38

LANGUAGE: c
CODE:
```
PyObject* PyUnicode_New(Py_ssize_t size, Py_UCS4 maxchar)
```

----------------------------------------

TITLE: Writing Multiple Data Items to WriteTransport in Python
DESCRIPTION: This method writes a list or iterable of data bytes to the transport. It's functionally equivalent to calling write() on each element, but may be implemented more efficiently.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
WriteTransport.writelines(list_of_data)
```

----------------------------------------

TITLE: Running pydoc web server with auto-browser launch in Python
DESCRIPTION: Shows how to use the new -b option with pydoc to automatically open a browser window displaying the pydoc web server interface.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_64

LANGUAGE: shell
CODE:
```
$ pydoc3.2 -b
```

----------------------------------------

TITLE: Comparing Strings with ndiff in Python
DESCRIPTION: Demonstrates using the ndiff function to compare two strings and generate a diff output. The function splits the strings into lines and compares them, showing additions, deletions, and changes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/difflib.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> diff = ndiff('one\ntwo\nthree\n'.splitlines(keepends=True),
...              'ore\ntree\nemu\n'.splitlines(keepends=True))
>>> print(''.join(diff), end="")
- one
?  ^
+ ore
?  ^
- two
- three
?  -
+ tree
+ emu
```

----------------------------------------

TITLE: Curses move Method Definition
DESCRIPTION: The move method moves the cursor to a new position specified by new_y and new_x coordinates within the window.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_81

LANGUAGE: python
CODE:
```
.. method:: window.move(new_y, new_x)

   Move cursor to ``(new_y, new_x)``.
```

----------------------------------------

TITLE: Looking up Default Widget Style Properties in ttk
DESCRIPTION: Example showing how to retrieve the default value of a widget style property using the Style.lookup method, specifically checking what font a Button uses by default.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_46

LANGUAGE: python
CODE:
```
from tkinter import ttk

print(ttk.Style().lookup("TButton", "font"))
```

----------------------------------------

TITLE: Getting Valid Signal Numbers in Python
DESCRIPTION: The valid_signals function returns a set of valid signal numbers on the current platform. This may be less than the range from 1 to NSIG if some signals are reserved by the system.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/signal.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
def valid_signals():
    """Return the set of valid signal numbers on this platform.  This can be
    less than range(1, NSIG) if some signals are reserved by the system
    for internal use."""
```

----------------------------------------

TITLE: Sending Datagram to Address from Socket with asyncio
DESCRIPTION: This method sends a datagram from a socket to an address. Asynchronous version of socket.sendto(). It returns the number of bytes sent. The socket must be a non-blocking socket.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
.. method:: loop.sock_sendto(sock, data, address)
   :async:

   Send a datagram from *sock* to *address*.
   Asynchronous version of
   :meth:`socket.sendto() <socket.socket.sendto>`.

   Return the number of bytes sent.

   *sock* must be a non-blocking socket.

```

----------------------------------------

TITLE: Initializing OpenerDirector Class for URL Opening in Python
DESCRIPTION: The OpenerDirector class is responsible for opening URLs using chained BaseHandlers. It manages handler chaining and error recovery.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
class OpenerDirector():
```

----------------------------------------

TITLE: Recording Polygon Vertices with Turtle in Python
DESCRIPTION: Demonstrates using the `with turtle.poly():` context manager to record the vertices of a shape drawn within the block. The first and last vertices are automatically connected to form a closed polygon. Requires Python 3.14 or later and the `_tkinter` module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_75

LANGUAGE: python
CODE:
```
with turtle.poly():
    turtle.forward(100)
    turtle.right(60)
    turtle.forward(100)
```

----------------------------------------

TITLE: Copying Unicode to UCS4 Buffer - CPython C API
DESCRIPTION: Copies the content of a Unicode string into a provided UCS4 buffer. Includes a null terminator if `copy_null` is non-zero. Returns the buffer pointer on success or NULL on error (e.g., buffer too small). Added in version 3.3.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/unicode.rst#_snippet_53

LANGUAGE: c
CODE:
```
Py_UCS4* PyUnicode_AsUCS4(PyObject *unicode, Py_UCS4 *buffer, Py_ssize_t buflen, int copy_null)
```

----------------------------------------

TITLE: Set VIRTUAL_ENV_PROMPT environment variable
DESCRIPTION: This entry introduces the setting of the environment variable `VIRTUAL_ENV_PROMPT` during venv activation. This enhancement provides a mechanism for customizing the command prompt within virtual environments, making it easier to distinguish them from the base system environment.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a1.rst#2025-04-21_snippet_19



----------------------------------------

TITLE: Fix reading non-ASCII ZIP files after writing
DESCRIPTION: This entry fixes an issue related to reading files with non-ASCII names from a ZIP archive immediately after writing them. The fix ensures that the ZIP module correctly handles non-ASCII filenames in this scenario, resolving potential encoding or decoding issues.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a1.rst#2025-04-21_snippet_39



----------------------------------------

TITLE: Using Queues for Inter-Process Communication in Python
DESCRIPTION: Demonstrates how to use the Queue class from multiprocessing for communication between processes. It creates a process that puts data into a queue and shows how the main process can retrieve that data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from multiprocessing import Process, Queue

def f(q):
    q.put([42, None, 'hello'])

if __name__ == '__main__':
    q = Queue()
    p = Process(target=f, args=(q,))
    p.start()
    print(q.get())    # prints "[42, None, 'hello']"
    p.join()
```

----------------------------------------

TITLE: Get Maximum Character Value Hint in C
DESCRIPTION: Returns an approximation of the maximum code point value present in the Unicode string. This hint is suitable for determining the required encoding kind for a new string based on the content of the original, offering better performance than iterating.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/unicode.rst#_snippet_14

LANGUAGE: c
CODE:
```
Py_UCS4 PyUnicode_MAX_CHAR_VALUE(PyObject *unicode)
```

----------------------------------------

TITLE: Getting Turtle Shape Polygon Coordinates in Python
DESCRIPTION: Shows how to set a turtle's shape, apply a specific transformation matrix using `shapetransform()`, and then retrieve the coordinates of the transformed shape's polygon vertices as a tuple of pairs using `get_shapepoly()`. Requires the `_tkinter` module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_71

LANGUAGE: python
CODE:
```
turtle.shape("square")
turtle.shapetransform(4, -1, 0, 2)
turtle.get_shapepoly()
```

----------------------------------------

TITLE: Implementing count function in Python
DESCRIPTION: Equivalent implementation of the count function that creates an infinite iterator returning evenly spaced values beginning with start and incrementing by step. Useful with map or zip to generate sequences.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
def count(start=0, step=1):
    # count(10) → 10 11 12 13 14 ...
    # count(2.5, 0.5) → 2.5 3.0 3.5 ...
    n = start
    while True:
        yield n
        n += step
```

----------------------------------------

TITLE: Encountering MemoryError with Inexact Calculation at MAX_PREC (Python)
DESCRIPTION: Illustrates that setting `prec` to `MAX_PREC` is only suitable for exact calculations. Attempting to compute an inexact result like 1/3 requires excessive memory allocation for potentially infinite digits, resulting in a `MemoryError`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_44

LANGUAGE: Python
CODE:
```
Decimal(1) / 3
```

----------------------------------------

TITLE: Fix std dev and variance functions in statistics module
DESCRIPTION: This entry fixes an issue in the standard deviation and variance functions within the statistics module.  The functions were incorrectly ignoring their mu and xbar arguments. This ensures the arguments are processed correctly and the result is calculated accurately.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a1.rst#2025-04-21_snippet_53



----------------------------------------

TITLE: Custom Command Mapping in Launcher INI
DESCRIPTION: This INI file snippet shows how to define a custom command mapping in the launcher's configuration file (`py.ini`). It maps the virtual command `/bin/xpython` (used in a shebang line) to a specific Python executable path `C:\Program Files\XPython\python.exe`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/windows.rst#_snippet_31

LANGUAGE: ini
CODE:
```
[commands]
/bin/xpython=C:\\Program Files\\XPython\\python.exe
```

----------------------------------------

TITLE: Using Makefile Command for Out-of-Source Builds
DESCRIPTION: The 'make regen-all' command now produces consistent output when run from directories outside the source tree, improving out-of-source builds. This allows for better separation between source code and build artifacts.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a3.rst#2025-04-21_snippet_0

LANGUAGE: Makefile
CODE:
```
make regen-all
```

----------------------------------------

TITLE: Updating Non-Proxy Objects in Proxy Containers
DESCRIPTION: Demonstrates the process of updating non-proxy mutable objects contained within proxy containers. Shows how reassigning the modified value to the container is necessary to synchronize changes across processes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_38

LANGUAGE: python
CODE:
```
# create a list proxy and append a mutable object (a dictionary)
lproxy = manager.list()
lproxy.append({})
# now mutate the dictionary
d = lproxy[0]
d['a'] = 1
d['b'] = 2
# at this point, the changes to d are not yet synced, but by
# updating the dictionary, the proxy is notified of the change
lproxy[0] = d
```

----------------------------------------

TITLE: Define GC Visit Objects Function Type in C
DESCRIPTION: Defines the type `gcvisitobjects_t` as a function pointer in C. This function type is used as a callback to visit objects during garbage collection. It takes a `PyObject` pointer and a `void` pointer as arguments and returns an integer to indicate whether to continue or stop the iteration.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/gcsupport.rst#2025-04-21_snippet_4

LANGUAGE: C
CODE:
```
".. c:type:: int (*gcvisitobjects_t)(PyObject *object, void *arg)"
```

----------------------------------------

TITLE: Defining Python C API Exception: PyExc_NotADirectoryError
DESCRIPTION: This code snippet defines the C API exception `PyExc_NotADirectoryError` and maps it to the Python `NotADirectoryError` class. This enables C code to raise "not a directory" errors when a file is unexpectedly encountered instead of a directory.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/exceptions.rst#2025-04-21_snippet_74

LANGUAGE: c
CODE:
```
":c:data:`PyExc_NotADirectoryError`      | :exc:`NotADirectoryError`       |          "
```

----------------------------------------

TITLE: Using b64encode in Python
DESCRIPTION: Encodes bytes-like objects using Base64 encoding and returns encoded bytes. Optional altchars parameter allows specifying alternative characters for '+' and '/' to create URL or filesystem safe Base64 strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/base64.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
b64encode(s, altchars=None)
```

----------------------------------------

TITLE: Statically allocate main interpreter and thread state (C)
DESCRIPTION: The main interpreter in `_PyRuntimeState.interpreters` and the initial thread state of each interpreter are now statically allocated as part of `_PyRuntime`. This reduces allocation during runtime initialization and improves memory locality for these key state objects.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a4.rst#2025-04-21_snippet_36



----------------------------------------

TITLE: Updating thread initialization order in C for Python's new GIL implementation
DESCRIPTION: Due to changes in the Global Interpreter Lock (GIL) implementation, the C function PyEval_InitThreads can no longer be called before Py_Initialize. This affects the order of thread initialization in C code interfacing with Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_81

LANGUAGE: c
CODE:
```
Py_Initialize();
PyEval_InitThreads();  // Must now be called after Py_Initialize
```

----------------------------------------

TITLE: Defining Python C API Exception: PyExc_IsADirectoryError
DESCRIPTION: This code snippet defines the C API exception `PyExc_IsADirectoryError` and maps it to the Python `IsADirectoryError` class. This enables C code to raise "is a directory" errors when a directory is unexpectedly encountered instead of a file.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/exceptions.rst#2025-04-21_snippet_67

LANGUAGE: c
CODE:
```
":c:data:`PyExc_IsADirectoryError`       | :exc:`IsADirectoryError`        |          "
```

----------------------------------------

TITLE: Creating Custom SQLite Collation in Python
DESCRIPTION: Implementation of a custom collation function for SQLite that provides reverse string sorting. Shows how to register and use a custom collation in SQL queries.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
def collate_reverse(string1, string2):
    if string1 == string2:
        return 0
    elif string1 < string2:
        return 1
    else:
        return -1

con = sqlite3.connect(":memory:")
con.create_collation("reverse", collate_reverse)

cur = con.execute("CREATE TABLE test(x)")
cur.executemany("INSERT INTO test(x) VALUES(?)", [("a",), ("b",)])
cur.execute("SELECT x FROM test ORDER BY x COLLATE reverse")
for row in cur:
    print(row)
con.close()
```

----------------------------------------

TITLE: Adding splice function to os module in Python
DESCRIPTION: Adds the splice() function to the os module, allowing data movement between two file descriptors without copying between kernel and user address spaces, where one descriptor must refer to a pipe.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
Add os.splice() that allows to move data between two file descriptors without copying between kernel address space and user address space, where one of the file descriptors must refer to a pipe.
```

----------------------------------------

TITLE: Fetching Error Indicator in C
DESCRIPTION: Deprecated. Retrieves the error indicator into three variables: type, value, and traceback. If the error indicator is not set, all three variables are set to NULL. The caller owns a reference to each object retrieved if the error indicator is set.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/exceptions.rst#2025-04-21_snippet_39

LANGUAGE: C
CODE:
```
"void PyErr_Fetch(PyObject **ptype, PyObject **pvalue, PyObject **ptraceback)"
```

----------------------------------------

TITLE: Adding PyDict_Pop and PyDict_PopString Functions (C API)
DESCRIPTION: Adds new C API functions PyDict_Pop and PyDict_PopString to remove a key from a dictionary and optionally return the removed value, similar to dict.pop in Python but without raising KeyError if the key is missing.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.13.0a2.rst#2025-04-21_snippet_2

LANGUAGE: C
CODE:
```
PyObject* PyDict_Pop(PyObject* dict, PyObject* key, PyObject* default_value);
PyObject* PyDict_PopString(PyObject* dict, const char* key, PyObject* default_value);
```

----------------------------------------

TITLE: Utility Functions for IMAP4 Client
DESCRIPTION: The module provides utility functions such as Internaldate2tuple for parsing IMAP internal dates, Int2AP for integer conversion, ParseFlags for flag parsing, and Time2Internaldate for date conversion.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/imaplib.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
def Internaldate2tuple(datestr):
    # Parse IMAP INTERNALDATE string to local time

def Int2AP(num):
    # Convert integer to bytes representation

def ParseFlags(flagstr):
    # Convert FLAGS response to tuple

def Time2Internaldate(date_time):
    # Convert date_time to IMAP INTERNALDATE format
```

----------------------------------------

TITLE: Iterating Resource Files using files() and joinpath() in Python
DESCRIPTION: This code snippet demonstrates how to iterate over resource files using the 'files()' function and 'joinpath()' method. It yields the names of resources found in the specified path. This approach is deprecated as of Python 3.11.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.resources.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
for resource in files(anchor).joinpath(*path_names).iterdir():
    yield resource.name
```

----------------------------------------

TITLE: Checking for Keypress Non-Blocking with msvcrt in Python
DESCRIPTION: This snippet describes the use of the msvcrt module in Python to check for keyboard input without blocking execution. It highlights the functions kbhit() and getch(), indicating their importance for handling keyboard events in Windows environments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/windows.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
import msvcrt

if msvcrt.kbhit():
    char = msvcrt.getch()
```

----------------------------------------

TITLE: Entering Raw Mode with Curses in Python
DESCRIPTION: The `raw` function enables raw mode in the terminal, turning off standard input processing. In this mode, input is handled byte by byte without special character processing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_28

LANGUAGE: Python
CODE:
```
.. function:: raw()

   Enter raw mode.  In raw mode, normal line buffering and  processing of
   interrupt, quit, suspend, and flow control keys are turned off; characters are
   presented to curses input functions one by one.
```

----------------------------------------

TITLE: Defining Python C API Exception: PyExc_TimeoutError
DESCRIPTION: This code snippet defines the C API exception `PyExc_TimeoutError` and maps it to the Python `TimeoutError` class. This allows C code to signal timeout errors within the Python environment.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/exceptions.rst#2025-04-21_snippet_90

LANGUAGE: c
CODE:
```
":c:data:`PyExc_TimeoutError`            | :exc:`TimeoutError`             |          "
```

----------------------------------------

TITLE: Basic ConfigParser Example with Unnamed Sections
DESCRIPTION: Demonstrates how to use ConfigParser with unnamed sections and retrieve values using the UNNAMED_SECTION attribute.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
>>> config = """
... option = value
...
... [  Section 2  ]
... another = val
... """
>>> unnamed = configparser.ConfigParser(allow_unnamed_section=True)
>>> unnamed.read_string(config)
>>> unnamed.get(configparser.UNNAMED_SECTION, 'option')
'value'
```

----------------------------------------

TITLE: Creating Directories in ZIP Archives (Python)
DESCRIPTION: New method ZipFile.mkdir() allows creating new directories inside ZIP archives.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.11.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
ZipFile.mkdir()
```

----------------------------------------

TITLE: Writing Files to a ZIP Archive in Python
DESCRIPTION: The `ZipFile.write` method adds files to a ZIP archive from a given filename, with options to specify archive name, compression type, and level. Archive must be open in write, exclusive, or append mode, and there are limitations on filename encodings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/zipfile.rst#2025-04-21_snippet_4



----------------------------------------

TITLE: Not-a-Number Comparison Example
DESCRIPTION: Demonstrates the special behavior of NaN (Not-a-Number) values in Python where NaN is not equal to itself and comparisons with other numbers are always false.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/expressions.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
x = float('NaN')
3 < x  # False
x < 3  # False
x == x  # False
x != x  # True
```

----------------------------------------

TITLE: Converting Floating Point to Decimal
DESCRIPTION: Shows techniques for converting floating point numbers to Decimal objects with specific precision using string conversion
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
f = 1.1
decimal.Decimal(str(f))
decimal.Decimal('%.12f' % f)
```

----------------------------------------

TITLE: Implementing combinations_with_replacement function in Python
DESCRIPTION: Equivalent implementation of the combinations_with_replacement function that returns r-length subsequences allowing elements to be repeated. The combinations are emitted in lexicographic order based on the input iterable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
def combinations_with_replacement(iterable, r):
    # combinations_with_replacement('ABC', 2) → AA AB AC BB BC CC

    pool = tuple(iterable)
    n = len(pool)
    if not n and r:
        return
    indices = [0] * r

    yield tuple(pool[i] for i in indices)
    while True:
        for i in reversed(range(r)):
            if indices[i] != n - 1:
                break
        else:
            return
        indices[i:] = [indices[i] + 1] * (r - i)
        yield tuple(pool[i] for i in indices)
```

----------------------------------------

TITLE: Querying Registry Reflection State with QueryReflectionKey in winreg (Python)
DESCRIPTION: Determines the reflection state for the specified registry key. It takes an already open key as input. It returns True if reflection is disabled.  Will generally raise NotImplementedError if executed on a 32-bit operating system.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/winreg.rst#2025-04-21_snippet_21

LANGUAGE: Python
CODE:
```

.. function:: QueryReflectionKey(key)

   Determines the reflection state for the specified key.

   *key* is an already open key, or one of the predefined
   :ref:`HKEY_* constants <hkey-constants>`.

   Returns ``True`` if reflection is disabled.

   Will generally raise :exc:`NotImplementedError` if executed on a 32-bit
   operating system.

   .. audit-event:: winreg.QueryReflectionKey key winreg.QueryReflectionKey

```

----------------------------------------

TITLE: Defining ResourceReader Abstract Base Class in Python
DESCRIPTION: An abstract base class that provides methods for reading resources from packages, supporting different storage mechanisms like file systems and zip files
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.resources.abc.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
class ResourceReader:
    def open_resource(self, resource):
        # Abstract method for opening resources
        pass

    def resource_path(self, resource):
        # Abstract method for getting file system path
        pass

    def is_resource(self, name):
        # Abstract method for checking resource existence
        pass

    def contents(self):
        # Abstract method for listing package contents
        pass
```

----------------------------------------

TITLE: Getting Help for py Commands (Windows CMD)
DESCRIPTION: Illustrates how to access help information for the `py` command and its subcommands using the `help` subcommand or the `/`? flag. Examples include displaying general help for `py`, getting help for the `install` subcommand, and using the Windows-style help flag.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/windows.rst#_snippet_2

LANGUAGE: cmd
CODE:
```
$> py help
$> py help install
$> py install /?
```

----------------------------------------

TITLE: Configuring Integer to String Conversion Limit in Python 3.8.14
DESCRIPTION: Implements a limit on the number of digits when converting between int and str in non-standard bases to mitigate potential denial of service attacks. The limit can be configured or disabled via environment variable, command line flag, or sys APIs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_40

LANGUAGE: Python
CODE:
```
sys.set_int_max_str_digits(4300)  # Default limit
```

----------------------------------------

TITLE: Creating TarInfo from TarFile Member in Python
DESCRIPTION: A class method that reads the header for the next member from a `TarFile` object and returns it as a `TarInfo` object. This is typically used during iteration or sequential reading of archive members. It effectively reads the next entry's metadata from the archive stream.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_11

LANGUAGE: python
CODE:
```
TarInfo.fromtarfile(tarfile)
```

----------------------------------------

TITLE: Generating a Self-Signed Certificate with OpenSSL
DESCRIPTION: Demonstrates using OpenSSL to create a self-signed certificate for SSL-encrypted connections. The command generates both the private key and certificate in one operation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_28

LANGUAGE: bash
CODE:
```
% openssl req -new -x509 -days 365 -nodes -out cert.pem -keyout cert.pem
Generating a 1024 bit RSA private key
.......++++++
.............................++++++
writing new private key to 'cert.pem'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:US
State or Province Name (full name) [Some-State]:MyState
Locality Name (eg, city) []:Some City
Organization Name (eg, company) [Internet Widgits Pty Ltd]:My Organization, Inc.
Organizational Unit Name (eg, section) []:My Group
Common Name (eg, YOUR name) []:myserver.mygroup.myorganization.com
Email Address []:ops@myserver.mygroup.myorganization.com
%
```

----------------------------------------

TITLE: Text Wrapping with Preserved Whitespace in Python
DESCRIPTION: Example showing the textwrap module's fill function with drop_whitespace parameter to preserve existing whitespace.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_42

LANGUAGE: python
CODE:
```
>>> S = """This  sentence  has a bunch   of
...   extra   whitespace."""
>>> print textwrap.fill(S, width=15)
This  sentence
has a bunch
of    extra
whitespace.
>>> print textwrap.fill(S, drop_whitespace=False, width=15)
This  sentence
  has a bunch
   of    extra
   whitespace.
>>>
```

----------------------------------------

TITLE: SystemTap script for tracing Python function calls
DESCRIPTION: A SystemTap script that shows the call/return hierarchy of a Python script using static markers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/instrumentation.rst#2025-04-21_snippet_6

LANGUAGE: systemtap
CODE:
```
probe process("python").mark("function__entry") {
     filename = user_string($arg1);
     funcname = user_string($arg2);
     lineno = $arg3;

     printf("%s => %s in %s:%d\n",
            thread_indent(1), funcname, filename, lineno);
}

probe process("python").mark("function__return") {
    filename = user_string($arg1);
    funcname = user_string($arg2);
    lineno = $arg3;

    printf("%s <= %s in %s:%d\n",
           thread_indent(-1), funcname, filename, lineno);
}
```

----------------------------------------

TITLE: Using window.subwin() Method in Python Curses
DESCRIPTION: Returns a sub-window within a window. The sub-window has its upper-left corner at the specified coordinates and can have a defined width and height. By default, extends to the lower right corner of the parent window.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_100

LANGUAGE: python
CODE:
```
window.subwin(begin_y, begin_x)
window.subwin(nlines, ncols, begin_y, begin_x)
```

----------------------------------------

TITLE: Writing Compressed Data to an Open File
DESCRIPTION: This code snippet explains how to write compressed data to an already opened file in Python, enabling the inline compression of specific data segments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/lzma.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
import lzma
with open("file.xz", "wb") as f:
    f.write(b"This data will not be compressed\n")
    with lzma.open(f, "w") as lzf:
        lzf.write(b"This *will* be compressed\n")
    f.write(b"Not compressed\n")
```

----------------------------------------

TITLE: Locking Dictionary Iterations with Critical Sections in C
DESCRIPTION: Demonstrates using critical sections to synchronize dictionary access in a free-threaded build. Py_BEGIN_CRITICAL_SECTION and Py_END_CRITICAL_SECTION are used to ensure thread safety during dictionary iteration.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/dict.rst#2025-04-21_snippet_3

LANGUAGE: C
CODE:
```
Py_BEGIN_CRITICAL_SECTION(self->dict);
while (PyDict_Next(self->dict, &pos, &key, &value)) {
    ...
}
Py_END_CRITICAL_SECTION();
```

----------------------------------------

TITLE: Basic Command-Line Usage of Python trace Module
DESCRIPTION: Demonstrates how to use the trace module from the command line to execute a Python script and generate annotated listings of imported modules.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/trace.rst#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
python -m trace --count -C . somefile.py ...
```

----------------------------------------

TITLE: Fetching an Encoder for Encoding in C
DESCRIPTION: Looks up and returns an encoder function for the given encoding. The search is case-insensitive and returns NULL setting a KeyError if no codec is found.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/codec.rst#2025-04-21_snippet_5

LANGUAGE: C
CODE:
```
PyObject* PyCodec_Encoder(const char *encoding)
```

----------------------------------------

TITLE: Using heapq Module for Heap Operations in Python
DESCRIPTION: Demonstrates the usage of the new heapq module for implementing a heap queue algorithm. Shows how to push and pop items while maintaining the heap property.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.3.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
>>> import heapq
>>> heap = []
>>> for item in [3, 7, 5, 11, 1]:
...    heapq.heappush(heap, item)
...
>>> heap
[1, 3, 5, 11, 7]
>>> heapq.heappop(heap)
1
>>> heapq.heappop(heap)
3
>>> heap
[5, 7, 11]
```

----------------------------------------

TITLE: Getting Hour from DateTime Object in C
DESCRIPTION: This macro returns the hour, as an int from 0 through 23, from a PyDateTime_DateTime object. The argument must be an instance of PyDateTime_DateTime, including subclasses. The argument must not be NULL, and the type is not checked.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/datetime.rst#2025-04-21_snippet_32

LANGUAGE: c
CODE:
```
"int PyDateTime_DATE_GET_HOUR(PyDateTime_DateTime *o)"
```

----------------------------------------

TITLE: Initializing NullHandler in Python
DESCRIPTION: Creates a new instance of NullHandler class. This handler does not perform any formatting or output, useful for library developers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
NullHandler()
```

----------------------------------------

TITLE: Assessing Mount Points with os.path
DESCRIPTION: The ismount function checks if a given pathname is a mount point on Unix by comparing parent device specs or inode numbers. Path-like objects are supported since version 3.6.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
def ismount(path):
    return os.path.ismount(path)
```

----------------------------------------

TITLE: Combined Private Key and Certificate Format
DESCRIPTION: Shows how to format a file containing both a private key and certificate. The private key should appear before the certificate when they're combined in a single file.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_27

LANGUAGE: text
CODE:
```
-----BEGIN RSA PRIVATE KEY-----
... (private key in base64 encoding) ...
-----END RSA PRIVATE KEY-----
-----BEGIN CERTIFICATE-----
... (certificate in base64 PEM encoding) ...
-----END CERTIFICATE-----
```

----------------------------------------

TITLE: Transforming Float Literals to Decimal Objects
DESCRIPTION: This example demonstrates a script rewriter that transforms float literals into Decimal objects using the tokenize module. It tokenizes the input, replaces NUMBER tokens containing decimals, and untokenizes the result.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tokenize.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
from tokenize import tokenize, untokenize, NUMBER, STRING, NAME, OP
from io import BytesIO

def decistmt(s):
    """Substitute Decimals for floats in a string of statements.

    >>> from decimal import Decimal
    >>> s = 'print(+21.3e-5*-.1234/81.7)'
    >>> decistmt(s)
    "print (+Decimal ('21.3e-5')*-Decimal ('.1234')/Decimal ('81.7'))"

    The format of the exponent is inherited from the platform C library.
    Known cases are "e-007" (Windows) and "e-07" (not Windows).  Since
    we're only showing 12 digits, and the 13th isn't close to 5, the
    rest of the output should be platform-independent.

    >>> exec(s)  #doctest: +ELLIPSIS
    -3.21716034272e-0...7

    Output from calculations with Decimal should be identical across all
    platforms.

    >>> exec(decistmt(s))
    -3.217160342717258261933904529E-7
    """
    result = []
    g = tokenize(BytesIO(s.encode('utf-8')).readline)  # tokenize the string
    for toknum, tokval, _, _, _ in g:
        if toknum == NUMBER and '.' in tokval:  # replace NUMBER tokens
            result.extend([
                (NAME, 'Decimal'),
                (OP, '('),
                (STRING, repr(tokval)),
                (OP, ')')
            ])
        else:
            result.append((toknum, tokval))
    return untokenize(result).decode('utf-8')
```

----------------------------------------

TITLE: Custom Punctuation Characters in shlex
DESCRIPTION: Example demonstrating how to use custom punctuation characters for token splitting in shlex.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/shlex.rst#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> import shlex
>>> s = shlex.shlex("a && b || c", punctuation_chars="|")
>>> list(s)
['a', '&', '&', 'b', '||', 'c']
```

----------------------------------------

TITLE: Creating DOM Documents Programmatically
DESCRIPTION: Shows how to create a new DOM document using getDOMImplementation(), add elements and text nodes to build an XML structure.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.dom.minidom.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from xml.dom.minidom import getDOMImplementation

impl = getDOMImplementation()

newdoc = impl.createDocument(None, "some_tag", None)
top_element = newdoc.documentElement
text = newdoc.createTextNode('Some textual content.')
top_element.appendChild(text)
```

----------------------------------------

TITLE: Curses nodelay Method Definition
DESCRIPTION: The nodelay method sets the blocking behavior of getch. If flag is True, getch will be non-blocking, returning immediately even if there's no input.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_84

LANGUAGE: python
CODE:
```
.. method:: window.nodelay(flag)

   If *flag* is ``True``, :meth:`getch` will be non-blocking.
```

----------------------------------------

TITLE: Testing Global Variable Access in Python Doctest
DESCRIPTION: Demonstrates accessing a pre-defined global variable in a doctest. Shows how to verify the value of 'favorite_color' is 'blue'.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/test_doctest/test_doctest.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> favorite_color
'blue'
```

----------------------------------------

TITLE: Removing Message Flag from mboxMessage in Python
DESCRIPTION: Unsets the flag(s) specified by the flag parameter without changing other flags. To remove multiple flags at once, flag can be a string of more than one character.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/mailbox.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
remove_flag(flag)
```

----------------------------------------

TITLE: Parsing Month/Day with Leap Year in Python datetime.strptime
DESCRIPTION: Demonstrates the correct way to parse a month/day string that lacks a year by explicitly including a leap year in the format. This prevents the leap day parsing bug that occurs every four years.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_31

LANGUAGE: python
CODE:
```
month_day = "02/29"
datetime.strptime(f"{month_day};1984", "%m/%d;%Y")
```

----------------------------------------

TITLE: Adding slice and negative indexing support to PurePath.parents in Python
DESCRIPTION: Adds support for slice operations and negative indexing to the parents attribute of PurePath objects in the pathlib module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
Add slice support to PurePath.parents.
```

LANGUAGE: python
CODE:
```
Add negative indexing support to PurePath.parents.
```

----------------------------------------

TITLE: Modifying sys.path[0] Initialization in Python Interpreter
DESCRIPTION: Changes to the initialization of sys.path[0] to ensure consistent behavior when executing __main__ from zipfiles, directories, or other import locations. The fix prevents adding parent directories of import locations to sys.path and protects against unintended modifications of other sys.path entries.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.6.1.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
sys.path[0]
```

----------------------------------------

TITLE: Improved File Check in http.server for Index Pages - Python
DESCRIPTION: Updated `http.server` to verify that an index page is a regular file before attempting to serve it, preventing errors from directories named 'index.html'.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.12.0a4.rst#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
http.server.some_method()
```

----------------------------------------

TITLE: Testing Module's __all__ Variable Example
DESCRIPTION: Example showing how to use the check__all__() function to verify a module's public API through its __all__ variable. Demonstrates testing both direct and imported API elements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/test.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
import bar
import foo
import unittest
from test import support

class MiscTestCase(unittest.TestCase):
    def test__all__(self):
        support.check__all__(self, foo)

class OtherTestCase(unittest.TestCase):
    def test__all__(self):
        extra = {'BAR_CONST', 'FOO_CONST'}
        not_exported = {'baz'}  # Undocumented name.
        # bar imports part of its API from _bar.
        support.check__all__(self, bar, ('bar', '_bar'),
                               extra=extra, not_exported=not_exported)
```

----------------------------------------

TITLE: Demonstrating 32-bit integer UTF-32 byte representation of a string
DESCRIPTION: A visualization of how the string "Python" might be represented in memory using 32-bit integers as code units. This shows the inefficiency of this approach with 4 bytes per character.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/unicode.rst#2025-04-21_snippet_1

LANGUAGE: none
CODE:
```
   P           y           t           h           o           n
0x50 00 00 00 79 00 00 00 74 00 00 00 68 00 00 00 6f 00 00 00 6e 00 00 00
   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
```

----------------------------------------

TITLE: Getting Codec Incremental Encoder Factory with Python codecs.getincrementalencoder
DESCRIPTION: Looks up the codec for the given encoding and returns its incremental encoder class or factory function. Raises LookupError if the encoding is not found or lacks an incremental encoder.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/codecs.rst#_snippet_6

LANGUAGE: Python
CODE:
```
import codecs

try:
    IncrementalEncoderFactory = codecs.getincrementalencoder("utf-8")
    encoder = IncrementalEncoderFactory()
    part1 = encoder.encode("hello ")
    part2 = encoder.encode("world", final=True)
    print(f"Incremental encode result: {part1 + part2}")
except LookupError as e:
    print(f"Incremental encoder not found: {e}")
```

----------------------------------------

TITLE: Adding Module Reference in C
DESCRIPTION: This function returns the module object corresponding to a module name. It first checks the modules dictionary, and if not found, creates a new one and inserts it. The function returns a strong reference to the module on success or NULL with an exception set on failure. The module name is decoded from UTF-8.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/import.rst#2025-04-21_snippet_7

LANGUAGE: c
CODE:
```
"PyObject* PyImport_AddModuleRef(const char *name)"
```

----------------------------------------

TITLE: Using Popen as a Context Manager in Python
DESCRIPTION: Demonstrates how to use Popen as a context manager with the with statement. When used this way, standard file descriptors are automatically closed, and the process is waited for upon exiting the context block.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/subprocess.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
with Popen(["ifconfig"], stdout=PIPE) as proc:
    log.write(proc.stdout.read())
```

----------------------------------------

TITLE: Fixing LOAD_ATTR opcode cache for descriptors
DESCRIPTION: Corrects a bug in the LOAD_ATTR opcode cache that didn't respect monkey-patching a class-level attribute to make it a descriptor. This ensures correct behavior when dynamically modifying class attributes.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a3.rst#2025-04-21_snippet_16

LANGUAGE: Python
CODE:
```
class MyClass:
    x = 1

MyClass.x = property(lambda self: 2)
obj = MyClass()
assert obj.x == 2 # Now correctly uses the property
```

----------------------------------------

TITLE: Implementing Nested Scopes in Python 2.1
DESCRIPTION: Demonstrates a nested function definition that would fail in Python 2.0 but works in 2.1 with nested scopes enabled. Shows how inner functions can access variables from enclosing scopes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.1.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
def f():
    ...
    def g(value):
        ...
        return g(value-1) + 1
    ...
```

----------------------------------------

TITLE: Demonstrating Tab Completion in Python Interactive Interpreter
DESCRIPTION: This snippet illustrates how tab completion works in the Python interpreter. It shows that for dotted expressions like 'string.a', the interpreter evaluates up to the final dot and suggests completions from the resulting object's attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/interactive.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
string.a<Tab>
```

----------------------------------------

TITLE: Formatting Output with str.format() Method in Python
DESCRIPTION: Shows how to use the str.format() method to format variables with specific layout requirements. This example pads the number of votes with spaces and formats a percentage with 2 decimal places.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/inputoutput.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> yes_votes = 42_572_654
>>> total_votes = 85_705_149
>>> percentage = yes_votes / total_votes
>>> '{:-9} YES votes  {:2.2%}'.format(yes_votes, percentage)
' 42572654 YES votes  49.67%'
```

----------------------------------------

TITLE: Adding Code Object Watcher API (C)
DESCRIPTION: Adds PyCode_AddWatcher and PyCode_ClearWatcher APIs to register callbacks for notifications on creation and destruction of code objects. This allows optimizing interpreters and JIT compilers to invalidate internal metadata when functions are modified.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.12.0a3.rst#2025-04-21_snippet_1

LANGUAGE: C
CODE:
```
PyCode_AddWatcher
PyCode_ClearWatcher
```

----------------------------------------

TITLE: Disassembling Pickle Data in Python - Function dis()
DESCRIPTION: The 'dis' function outputs a symbolic disassembly of a pickle to a specified file-like object. It accepts parameters for the output stream, memoization of objects, indentation level, and annotation display.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pickletools.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def dis(pickle, out=None, memo=None, indentlevel=4, annotate=0):
    # Outputs symbolic disassembly of pickled data
    pass
```

----------------------------------------

TITLE: Finding n Largest Items - Python
DESCRIPTION: The `nlargest` function returns a list of the n largest elements from an iterable, allowing for custom sorting via a key function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/heapq.rst#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
def nlargest(n, iterable, key=None):
    """
    Return a list with the *n* largest elements from the dataset defined by
    *iterable*. *key*, if provided, specifies a function of one argument that is
    used to extract a comparison key from each element in *iterable*.
    """
```

----------------------------------------

TITLE: Importing the Deprecated Crypt Module in Python
DESCRIPTION: This snippet shows how to import the crypt module, which was used for Unix password checking. It includes a warning about the module's deprecation and removal from the Python standard library.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/crypt.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
.. module:: crypt
   :synopsis: Removed in 3.13.
   :deprecated:
```

----------------------------------------

TITLE: Refactor _PyErr_Display for better error handling (C)
DESCRIPTION: The code called from `_PyErr_Display` has been refactored to improve error handling. It now exits immediately upon encountering an unrecoverable error, ensuring more robust error reporting and handling.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a4.rst#2025-04-21_snippet_24



----------------------------------------

TITLE: Using literal_eval for Safe Expression Evaluation
DESCRIPTION: Demonstrates using ast.literal_eval to safely evaluate string literals containing Python expressions, without the security risks of eval()
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_46

LANGUAGE: python
CODE:
```
>>> literal = '("a", "b", {2:4, 3:8, 1:2})'
>>> print ast.literal_eval(literal)
('a', 'b', {1: 2, 2: 4, 3: 8})
>>> print ast.literal_eval('"a" + "b"')
Traceback (most recent call last):
  ...
ValueError: malformed string
```

----------------------------------------

TITLE: Join Surrogate Pair to Code Point in C
DESCRIPTION: Combines a high surrogate and a low surrogate code point to form a single Py_UCS4 value representing the astral plane character. The high surrogate must be in [U+D800, U+DBFF] and the low surrogate in [U+DC00, U+DFFF].
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/unicode.rst#_snippet_37

LANGUAGE: c
CODE:
```
Py_UCS4 Py_UNICODE_JOIN_SURROGATES(Py_UCS4 high, Py_UCS4 low)
```

----------------------------------------

TITLE: Incorrect Usage of Self in Python
DESCRIPTION: Illustrates a scenario where `Self` should not be used as a return annotation: when a method always returns an instance of the base class, even when called on a subclass instance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_55

LANGUAGE: python
CODE:
```
class Eggs:
    # Self would be an incorrect return annotation here,
    # as the object returned is always an instance of Eggs,
    # even in subclasses
    def returns_eggs(self) -> "Eggs":
        return Eggs()
```

----------------------------------------

TITLE: Implementing exec_module Method in Import Loaders
DESCRIPTION: The `exec_module` method is a concrete implementation for executing a specified module within the import system. This method is introduced in version 3.4 and provides the core functionality needed to run a module's code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
.. method:: exec_module(module)

   Concrete implementation of :meth:`Loader.exec_module`.

   .. versionadded:: 3.4

```

----------------------------------------

TITLE: Defining Python C API Exception: PyExc_BufferError
DESCRIPTION: This code snippet defines the C API exception `PyExc_BufferError` and maps it to the Python `BufferError` class.  This mapping provides a mechanism for C code to report errors related to buffer operations as Python exceptions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/exceptions.rst#2025-04-21_snippet_52

LANGUAGE: c
CODE:
```
":c:data:`PyExc_BufferError`             | :exc:`BufferError`              |          "
```

----------------------------------------

TITLE: Using Py_UNREACHABLE macro to mark unreachable code paths in C API
DESCRIPTION: The Py_UNREACHABLE macro helps mark code paths that should never be reached during normal execution, improving code clarity and enabling compiler optimizations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_44

LANGUAGE: c
CODE:
```
if (cond1) {
    // handle case 1
} else if (cond2) {
    // handle case 2
} else {
    // We know by this point either cond1 or cond2 must be true
    Py_UNREACHABLE();
}
```

----------------------------------------

TITLE: Using CleanImport Context Manager in Python
DESCRIPTION: This example shows how to use the CleanImport context manager to force import to return a new module reference. This is useful for testing module-level behaviors like deprecation warnings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/test.rst#2025-04-21_snippet_15

LANGUAGE: Python
CODE:
```
with CleanImport('foo'):
    importlib.import_module('foo')  # New reference.
```

----------------------------------------

TITLE: Using distb() Function for Traceback Disassembly in Python
DESCRIPTION: The distb() function disassembles the top-of-stack function of a traceback, highlighting the instruction causing the exception. It accepts parameters for file output, cache display, adaptive behavior, and position display.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dis.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
distb(tb=None, *, file=None, show_caches=False, adaptive=False, show_offset=False, show_positions=False)
```

----------------------------------------

TITLE: Defining Python C API Exception: PyExc_KeyboardInterrupt
DESCRIPTION: This code snippet defines the C API exception `PyExc_KeyboardInterrupt` and maps it to the Python `KeyboardInterrupt` class. This mapping allows C code to properly signal a keyboard interrupt (e.g., Ctrl+C) as a Python exception.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/exceptions.rst#2025-04-21_snippet_69

LANGUAGE: c
CODE:
```
":c:data:`PyExc_KeyboardInterrupt`       | :exc:`KeyboardInterrupt`        |          "
```

----------------------------------------

TITLE: Input Hooks Not Called in Subinterpreters in CPython C API
DESCRIPTION: The global input hooks "PyOS_InputHook" and "PyOS_ReadlineFunctionPointer" are no longer invoked within subinterpreters to prevent reliance on process-wide global state and avoid issues with extensions not loaded in the subinterpreter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_90

LANGUAGE: C
CODE:
```
PyOS_InputHook, PyOS_ReadlineFunctionPointer
```

----------------------------------------

TITLE: Modifying PyAPI_FUNC Macro for Core Module Build
DESCRIPTION: Changes the PyAPI_FUNC, PyAPI_DATA, and PyMODINIT_FUNC macros in pyport.h when Py_BUILD_CORE_MODULE is defined, to support building C extensions as dynamic libraries accessing Python internals.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0a4.rst#2025-04-23_snippet_7

LANGUAGE: C
CODE:
```
#ifdef Py_BUILD_CORE_MODULE
#define PyAPI_FUNC(type) type
#define PyAPI_DATA(type) extern type
#define PyMODINIT_FUNC __declspec(dllexport) PyObject*
#endif
```

----------------------------------------

TITLE: Parsing String Objects with Parser in Python
DESCRIPTION: Similar to parse() but takes a string object instead of a file-like object. Equivalent to wrapping the text in a StringIO instance and calling parse(). The headersonly parameter determines whether to parse only headers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.parser.rst#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
parsestr(text, headersonly=False)
```

----------------------------------------

TITLE: Using new start methods in multiprocessing on Unix
DESCRIPTION: On Unix, two new start methods 'spawn' and 'forkserver' have been added for starting processes using multiprocessing. These make mixing processes with threads more robust.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.4.rst#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
import multiprocessing

multiprocessing.set_start_method('spawn')
# or
multiprocessing.set_start_method('forkserver')
```

----------------------------------------

TITLE: Handling non-ASCII bytes in redirect URLs in urllib.request
DESCRIPTION: The urllib.request module now percent-encodes non-ASCII bytes found in redirect target URLs to handle servers that send Location headers with non-ASCII bytes.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.5.2rc1.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
# Example usage (not provided in original text):
from urllib import request

req = request.Request('http://example.com/redirect')
response = request.urlopen(req)
# Non-ASCII bytes in redirect URL will be percent-encoded
```

----------------------------------------

TITLE: Using Side Effect for Inline Argument Checking in Python Mocks
DESCRIPTION: A simple approach to check mock arguments at the point they are called using a side_effect function, useful for single-use mocks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
>>> def side_effect(arg):
...     assert arg == {6}
...
>>> mock = Mock(side_effect=side_effect)
>>> mock({6})
>>> mock(set())
Traceback (most recent call last):
    ...
AssertionError
```

----------------------------------------

TITLE: Customizing _freeze_module Path in Makefiles
DESCRIPTION: Demonstrates how to override the _freeze_module program path on the command line when using make. This allows developers to use a different freeze module binary than the default one.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a3.rst#2025-04-21_snippet_1

LANGUAGE: Makefile
CODE:
```
make FREEZE_MODULE=../x86_64/Program/_freeze_module
```

----------------------------------------

TITLE: HTTPRedirectHandler.redirect_request Method
DESCRIPTION: Method to handle redirects by returning a new Request object or raising an HTTPError. Default implementation follows browser behavior of converting POST to GET for 301/302 responses.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_33

LANGUAGE: python
CODE:
```
def redirect_request(req, fp, code, msg, hdrs, newurl):
    """Return a Request or None in response to a redirect.
    Called by http_error_30* methods when a redirection is received."""
```

----------------------------------------

TITLE: Implementing a Deprecated API Warning in Python
DESCRIPTION: This snippet demonstrates how to create a deprecated_api function that uses the warnings module to issue a DeprecationWarning. The stacklevel parameter is set to 2 to make the warning refer to the caller of deprecated_api rather than the function itself.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/warnings.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
def deprecated_api(message):
    warnings.warn(message, DeprecationWarning, stacklevel=2)
```

----------------------------------------

TITLE: Setting Start Method for Multiprocessing in Python
DESCRIPTION: Demonstrates how to set the start method for multiprocessing using set_start_method(). It creates a simple function that puts a message in a queue and shows how to use the 'spawn' start method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
import multiprocessing as mp

def foo(q):
    q.put('hello')

if __name__ == '__main__':
    mp.set_start_method('spawn')
    q = mp.Queue()
    p = mp.Process(target=foo, args=(q,))
    p.start()
    print(q.get())
    p.join()
```

----------------------------------------

TITLE: Implementing a Counter Generator with Value Sending in Python
DESCRIPTION: This snippet demonstrates how to create a generator that acts as a counter, allowing external modification of its internal state through the send() method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/functional.rst#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
def counter(maximum):
    i = 0
    while i < maximum:
        val = (yield i)
        # If value provided, change counter
        if val is not None:
            i = val
        else:
            i += 1
```

----------------------------------------

TITLE: Using b85encode in Python
DESCRIPTION: Encodes bytes-like objects using base85 (as used in git-style binary diffs) and returns the encoded bytes. Optional pad parameter controls input padding to multiples of 4 bytes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/base64.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
b85encode(b, pad=False)
```

----------------------------------------

TITLE: Setting PYTHONPYCACHEPREFIX environment variable
DESCRIPTION: New functionality to set an alternate root directory for writing module bytecode cache files using the PYTHONPYCACHEPREFIX environment variable or -X pycache_prefix command-line option.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0a1.rst#2025-04-21_snippet_6

LANGUAGE: Bash
CODE:
```
# Setting via environment variable
PYTHONPYCACHEPREFIX=/custom/cache/path python script.py

# Or using command line option
python -X pycache_prefix=/custom/cache/path script.py
```

----------------------------------------

TITLE: Annotating and Using Python Coroutine
DESCRIPTION: Demonstrates annotating a coroutine using `Coroutine[YieldType, SendType, ReturnType]` and shows how type checkers can infer types when sending values or awaiting the coroutine.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_26

LANGUAGE: python
CODE:
```
from collections.abc import Coroutine
c: Coroutine[list[str], str, int]  # Some coroutine defined elsewhere
x = c.send('hi')                   # Inferred type of 'x' is list[str]
async def bar() -> None:
    y = await c                    # Inferred type of 'y' is int
```

----------------------------------------

TITLE: Spawn Process Example with spawnlp and spawnvpe
DESCRIPTION: Example showing equivalent ways to spawn a process using spawnlp and spawnvpe functions. The first uses direct argument passing while the second uses a list of arguments and environment variables.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_74

LANGUAGE: python
CODE:
```
import os
os.spawnlp(os.P_WAIT, 'cp', 'cp', 'index.html', '/dev/null')

L = ['cp', 'index.html', '/dev/null']
os.spawnvpe(os.P_WAIT, 'cp', L, os.environ)
```

----------------------------------------

TITLE: Configuring Syslog Options in Python
DESCRIPTION: Shows how to set specific log options using openlog, including adding the process ID to messages and directing output to the mail logging facility. It then sends a message using the configured options.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/syslog.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
syslog.openlog(logoption=syslog.LOG_PID, facility=syslog.LOG_MAIL)
syslog.syslog('E-mail processing initiated...')
```

----------------------------------------

TITLE: Adding a Function Watcher
DESCRIPTION: The function `PyFunction_AddWatcher` registers a callback function as a function watcher for the current interpreter. It returns an ID that can be passed to `PyFunction_ClearWatcher`. On error, it returns -1 and sets an exception.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/function.rst#2025-04-21_snippet_15

LANGUAGE: c
CODE:
```
".. c:function:: int PyFunction_AddWatcher(PyFunction_WatchCallback callback)

   Register *callback* as a function watcher for the current interpreter.
   Return an ID which may be passed to :c:func:`PyFunction_ClearWatcher`.
   In case of error (e.g. no more watcher IDs available),
   return ``-1`` and set an exception.

   .. versionadded:: 3.12"
```

----------------------------------------

TITLE: Mock Call Assertions and Tracking
DESCRIPTION: Illustrates various techniques for tracking and asserting method calls using mock's assertion methods
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
>>> mock = Mock()
>>> mock.foo_bar.return_value = None
>>> mock.foo_bar('baz', spam='eggs')
>>> mock.foo_bar.assert_called_with('baz', spam='eggs')

>>> mock = Mock(return_value=None)
>>> mock(1, 2, 3)
>>> mock(4, 5, 6)
>>> mock()
>>> mock.call_args_list
[call(1, 2, 3), call(4, 5, 6), call()]
```

----------------------------------------

TITLE: Using multiprocessing context in Python
DESCRIPTION: Multiprocessing now has the concept of a context, which determines how child processes are created. The get_context function returns a context that uses a specified start method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.4.rst#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
import multiprocessing

ctx = multiprocessing.get_context('spawn')
pool = ctx.Pool()
```

----------------------------------------

TITLE: Defining Windows Reparse Tag Constants in Python
DESCRIPTION: Constants for Windows reparse tags used with os.lstat() to identify symbolic links, mount points, and application execution links. These tags are returned in the st_reparse_tag member of stat results.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stat.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
IO_REPARSE_TAG_SYMLINK
IO_REPARSE_TAG_MOUNT_POINT
IO_REPARSE_TAG_APPEXECLINK
```

----------------------------------------

TITLE: Pure Python Implementation of staticmethod Descriptor
DESCRIPTION: A custom implementation of the staticmethod descriptor using Python's descriptor protocol. This shows how staticmethod is implemented internally, using functools.update_wrapper to preserve function metadata.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
import functools

class StaticMethod:
    "Emulate PyStaticMethod_Type() in Objects/funcobject.c"

    def __init__(self, f):
        self.f = f
        functools.update_wrapper(self, f)

    def __get__(self, obj, objtype=None):
        return self.f

    def __call__(self, *args, **kwds):
        return self.f(*args, **kwds)

    @property
    def __annotations__(self):
        return self.f.__annotations__
```

----------------------------------------

TITLE: Creating SSL Client Socket with Default Context (Python)
DESCRIPTION: Example of creating an SSL client socket using the default context and IPv4/IPv6 dual stack. It connects to www.python.org and prints the SSL version.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import socket
import ssl

hostname = 'www.python.org'
context = ssl.create_default_context()

with socket.create_connection((hostname, 443)) as sock:
    with context.wrap_socket(sock, server_hostname=hostname) as ssock:
        print(ssock.version())
```

----------------------------------------

TITLE: Counting Substring Occurrences - Python C API - C
DESCRIPTION: Count the number of non-overlapping occurrences of a substring within a specified slice of a Unicode string. This function is equivalent to the str.count() method in Python. Returns the count or -1 if an error occurred.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/unicode.rst#_snippet_93

LANGUAGE: C
CODE:
```
Py_ssize_t PyUnicode_Count(PyObject *unicode, PyObject *substr, \
                               Py_ssize_t start, Py_ssize_t end)
```

----------------------------------------

TITLE: Introduce Unstable API - PyUnstable_Eval_RequestCodeExtraIndex - C
DESCRIPTION: Part of the new Unstable C API tier (PEP 697) for low-level tools, specifically for extra storage in code objects (PEP 523). This function is a renamed version of the previous _PyEval_RequestCodeExtraIndex.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_49

LANGUAGE: C
CODE:
```
PyUnstable_Eval_RequestCodeExtraIndex
```

----------------------------------------

TITLE: Demonstrating Class Inheritance of Annotations in Python 3.9 and Earlier
DESCRIPTION: This snippet illustrates how in Python 3.9 and earlier, a derived class could inadvertently return a base class's annotations when '__annotations__' is accessed. This behavior was changed in Python 3.10.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/annotations.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
class Base:
    a: int = 3
    b: str = 'abc'

class Derived(Base):
    pass

print(Derived.__annotations__)
```

----------------------------------------

TITLE: Using Generator Expressions in Python
DESCRIPTION: These examples showcase various uses of generator expressions for concise and memory-efficient operations on sequences.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/classes.rst#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
>>> sum(i*i for i in range(10))                 # sum of squares
285

>>> xvec = [10, 20, 30]
>>> yvec = [7, 5, 3]
>>> sum(x*y for x,y in zip(xvec, yvec))         # dot product
260

>>> unique_words = set(word for line in page  for word in line.split())

>>> valedictorian = max((student.gpa, student.name) for student in graduates)

>>> data = 'golf'
>>> list(data[i] for i in range(len(data)-1, -1, -1))
['f', 'l', 'o', 'g']
```

----------------------------------------

TITLE: Optimizing constant subexpressions in named expressions
DESCRIPTION: Extends the AST optimizer to descend into named expressions, allowing for optimization of constant subexpressions within assignment expressions. This improves the efficiency of code using the walrus operator.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a3.rst#2025-04-21_snippet_15

LANGUAGE: Python
CODE:
```
x = (y := 1 + 2) # The '1 + 2' subexpression can now be optimized
```

----------------------------------------

TITLE: Create Contiguous Copy of Buffer Data
DESCRIPTION: The function 'PyBuffer_ToContiguous' copies 'len' bytes from a source buffer to a contiguous representation in the destination buffer, supporting various orderings. Returns 0 on success or -1 on failure if lengths do not match.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/buffer.rst#2025-04-21_snippet_8

LANGUAGE: C
CODE:
```
int PyBuffer_ToContiguous(void *buf, const Py_buffer *src, Py_ssize_t len, char order)
```

----------------------------------------

TITLE: Basic Python API Archive Creation
DESCRIPTION: Creates an archive using the zipapp Python API with create_archive function
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/zipapp.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> import zipapp
>>> zipapp.create_archive('myapp', 'myapp.pyz')
```

----------------------------------------

TITLE: Initializing a Repr Instance with Custom Parameters in Python
DESCRIPTION: Creates a reprlib.Repr instance with a custom maximum recursion level of 3. This demonstrates two equivalent approaches for setting Repr attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/reprlib.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
aRepr = reprlib.Repr(maxlevel=3)
```

LANGUAGE: python
CODE:
```
aRepr = reprlib.Repr()
aRepr.maxlevel = 3
```

----------------------------------------

TITLE: New C Function: PyObject_CallNoArgs
DESCRIPTION: New C API function for calling Python callable objects without arguments. More efficient than PyObject_CallFunctionObjArgs(func, NULL), using less stack space on x86-64 architectures (624 bytes vs 960 bytes per call).
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.9.0a1.rst#2025-04-21_snippet_62

LANGUAGE: C
CODE:
```
PyObject_CallNoArgs(func)
```

----------------------------------------

TITLE: Filling a Shape using with turtle.fill() in Python Turtle
DESCRIPTION: Shows the recommended context manager syntax `with turtle.fill():` for drawing and automatically filling a shape. The code drawn within the block will be filled using the current fill color.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_57

LANGUAGE: python
CODE:
```
>>> turtle.color("black", "red")
>>> with turtle.fill():
...     turtle.circle(80)
```

----------------------------------------

TITLE: Executing Doctest Commands in Shell
DESCRIPTION: These shell commands execute Python scripts using doctest module to check the correctness of embedded examples. They print outputs only if an error occurs unless a verbose flag is passed. No additional dependencies are required beyond Python and doctest.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/doctest.rst#2025-04-21_snippet_1

LANGUAGE: Shell
CODE:
```
$ python example.py

```

LANGUAGE: Shell
CODE:
```
$ python example.py -v
Trying:
    factorial(5)
Expecting:
    120
ok
Trying:
    [factorial(n) for n in range(6)]
Expecting:
    [1, 1, 2, 6, 24, 120]
ok

```

----------------------------------------

TITLE: Print Object (C)
DESCRIPTION: Print an object *o* on file *fp*. Returns -1 on error. The flags argument enables printing options; currently only Py_PRINT_RAW is supported, which uses the `str` instead of the `repr`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/object.rst#_snippet_15

LANGUAGE: c
CODE:
```
int PyObject_Print(PyObject *o, FILE *fp, int flags)
```

----------------------------------------

TITLE: Checking the type of an Enum class (Python)
DESCRIPTION: This snippet shows the result of checking the type of the `Menu` class defined previously. It confirms that the class uses the `enum.EnumMeta` metaclass, which is the key reason why `Menu['SPAM']` behaves differently than `list[int]`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_20

LANGUAGE: Python
CODE:
```
type(Menu)
```

----------------------------------------

TITLE: Pretty-Print Function Alias (pprint) - Python
DESCRIPTION: The pprint function is an alias for pp but defaults sort_dicts parameter to True. This is to ensure that the keys of dictionaries are sorted by default during formatting.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pprint.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
def pprint(object, stream=None, indent=1, width=80, depth=None, *, compact=False, sort_dicts=True, underscore_numbers=False):
    Alias for :func:`~pprint.pp` with *sort_dicts* set to ``True`` by default.
```

----------------------------------------

TITLE: Convert IDNA Label to ASCII (Python)
DESCRIPTION: Converts a Unicode domain label to its ASCII Compatible Encoding (ACE) form as specified in RFC 3490. This function assumes that `UseSTD3ASCIIRules` is false during the conversion process.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/codecs.rst#_snippet_24

LANGUAGE: Python
CODE:
```
ToASCII(label)
```

----------------------------------------

TITLE: Personalizing BLAKE2 Hashes
DESCRIPTION: This snippet shows how to personalize BLAKE2 hashes by using the 'person' argument to create different digests for the same input intended for different uses.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/hashlib.rst#2025-04-21_snippet_15

LANGUAGE: Python
CODE:
```
>>> from hashlib import blake2b\n>>> FILES_HASH_PERSON = b'MyApp Files Hash'\n>>> BLOCK_HASH_PERSON = b'MyApp Block Hash'\n>>> h = blake2b(digest_size=32, person=FILES_HASH_PERSON)\n>>> h.update(b'the same content')\n>>> h.hexdigest()\n'20d9cd024d4fb086aae819a1432dd2466de12947831b75c5a30cf2676095d3b4'\n>>> h = blake2b(digest_size=32, person=BLOCK_HASH_PERSON)\n>>> h.update(b'the same content')\n>>> h.hexdigest()\n'cf68fb5761b9c44e7878bfb2c4c9aea52264a80b75005e65619778de59f383a3'
```

----------------------------------------

TITLE: Debugging Execution Methods in Python Debugger
DESCRIPTION: Methods to debug statements, expressions, or function calls. These methods allow using the debugger to execute and debug code provided as strings or function calls.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/bdb.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
run(cmd, globals=None, locals=None)
runeval(expr, globals=None, locals=None)
runctx(cmd, globals, locals)
runcall(func, /, *args, **kwds)
```

----------------------------------------

TITLE: Parsing Try/Except/Else/Finally block AST in Python
DESCRIPTION: Demonstrates the Abstract Syntax Tree (AST) representation for a Python `try` statement including `except`, `else`, and `finally` clauses. It shows the source code input to `ast.parse` and the corresponding `ast.dump` output, illustrating the `Try` node structure with lists for body, handlers (containing `ExceptHandler` nodes), orelse, and finalbody.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_34

LANGUAGE: Python
CODE:
```
try:
   ...
except Exception:
   ...
except OtherException as e:
   ...
else:
   ...
finally:
   ...
```

LANGUAGE: Python
CODE:
```
Module(
    body=[
        Try(
            body=[
                Expr(
                    value=Constant(value=Ellipsis))],
            handlers=[
                ExceptHandler(
                    type=Name(id='Exception', ctx=Load()),
                    body=[
                        Expr(
                            value=Constant(value=Ellipsis))]),
                ExceptHandler(
                    type=Name(id='OtherException', ctx=Load()),
                    name='e',
                    body=[
                        Expr(
                            value=Constant(value=Ellipsis))])],
            orelse=[
                Expr(
                    value=Constant(value=Ellipsis))],n            finalbody=[
                Expr(
                    value=Constant(value=Ellipsis))])])
```

----------------------------------------

TITLE: Getting Module State from Module Definition - C
DESCRIPTION: This snippet demonstrates how to access the module state from the module definition using the `PyType_GetModuleByDef` and `PyModule_GetState` functions. It captures the state of the module and handles null checks to ensure safety.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/isolating-extensions.rst#2025-04-21_snippet_9

LANGUAGE: C
CODE:
```
    PyObject *module = PyType_GetModuleByDef(Py_TYPE(self), &module_def);
    my_struct *state = (my_struct*)PyModule_GetState(module);
    if (state == NULL) {
        return NULL;
    }
```

----------------------------------------

TITLE: Getting Windows Version Information in Python
DESCRIPTION: Returns a named tuple containing detailed Windows version information including major, minor, build numbers, service pack details, and platform information.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sys.rst#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
getwindowsversion()
```

----------------------------------------

TITLE: Defining the Charset Class in Python
DESCRIPTION: The Charset class maps character sets to their email properties, providing methods for encoding and conversions essential for RFC-compliant email messages.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.charset.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
class Charset(input_charset=DEFAULT_CHARSET):
    """
    Map character sets to their email properties.
    """
```

----------------------------------------

TITLE: Binding Mouse Click and Release Events to Turtle in Python (OOP)
DESCRIPTION: Illustrates binding methods of a custom `MyTurtle` class (`glow` and `unglow`) to mouse click and release events respectively using `onclick()` and `onrelease()`. Clicking changes the fill color to red, and releasing makes it transparent. Requires the `_tkinter` module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_73

LANGUAGE: python
CODE:
```
class MyTurtle(Turtle):
    def glow(self,x,y):
        self.fillcolor("red")
    def unglow(self,x,y):
        self.fillcolor("")

turtle = MyTurtle()
turtle.onclick(turtle.glow)     # clicking on turtle turns fillcolor red,
turtle.onrelease(turtle.unglow) # releasing turns it to transparent.
```

----------------------------------------

TITLE: Parsing Unary 'not' Operation into AST (Python)
DESCRIPTION: Illustrates the AST representation of the unary `not` operator. Parsing `not x` results in a `UnaryOp` node with the `Not` operator and the operand (`x`).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_16

LANGUAGE: python
CODE:
```
print(ast.dump(ast.parse('not x', mode='eval'), indent=4))
```

----------------------------------------

TITLE: Email Policy Register Defect Implementation
DESCRIPTION: Method to register defects on email objects by appending them to the object's defects attribute.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.policy.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
def register_defect(obj, defect):
    # Register a *defect* on *obj*
    # defect will always be a subclass of MessageDefect
```

----------------------------------------

TITLE: Displaying Message Structure Using _structure() in Python
DESCRIPTION: This snippet uses the _structure() debug helper function to display the hierarchical structure of a multipart email message. It shows how message parts can contain subparts even when they are not multipart themselves.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.compat32-message.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
>>> _structure(msg)
multipart/report
    text/plain
    message/delivery-status
        text/plain
        text/plain
    message/rfc822
        text/plain
```

----------------------------------------

TITLE: Python Statement in Conditional Expression Error
DESCRIPTION: This example demonstrates the syntax error when a statement (like `pass`, `continue`, or `break`) is used in a context requiring an expression within a conditional expression (`... if ... else ...`). The error message highlights the location where the expression is expected.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_11

LANGUAGE: pycon
CODE:
```
>>> x = 1 if True else pass
Traceback (most recent call last):
  File "<string>", line 1
    x = 1 if True else pass
                       ^^^^
SyntaxError: expected expression after 'else', but statement is given

>>> x = continue if True else break
Traceback (most recent call last):
  File "<string>", line 1
    x = continue if True else break
        ^^^^^^^^
SyntaxError: expected expression before 'if', but statement is given
```

----------------------------------------

TITLE: Applying Default Values to BoundArguments in Python
DESCRIPTION: This snippet shows how to use the BoundArguments.apply_defaults() method to set default values for missing arguments in a function call.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/inspect.rst#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
def foo(a, b='ham', *args): pass
ba = inspect.signature(foo).bind('spam')
ba.apply_defaults()
ba.arguments
```

----------------------------------------

TITLE: Basic Garbage Collector Usage in Python
DESCRIPTION: Example showing basic object tracking behavior of Python's garbage collector with different types of objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/gc.rst#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> gc.is_tracked(0)
False
>>> gc.is_tracked("a")
False
>>> gc.is_tracked([])
True
>>> gc.is_tracked({})
False
>>> gc.is_tracked({"a": 1})
True
```

----------------------------------------

TITLE: mmap rfind method
DESCRIPTION: The `rfind(sub[, start[, end]])` method returns the highest index where the subsequence *sub* is found within the range [*start*, *end*]. The start and end arguments are interpreted as in slice notation. Returns -1 on failure.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/mmap.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
".. method:: rfind(sub[, start[, end]])\n\n   Returns the highest index in the object where the subsequence *sub* is\n   found, such that *sub* is contained in the range [*start*, *end*].\n   Optional arguments *start* and *end* are interpreted as in slice notation.\n   Returns ``-1`` on failure.\n\n   .. versionchanged:: 3.5\n      Writable :term:`bytes-like object` is now accepted."
```

----------------------------------------

TITLE: Demonstrating nul byte issue with ShareableList
DESCRIPTION: This example demonstrates a known issue where trailing nul bytes are silently stripped when fetching bytes or string values from a ShareableList by index, and how to work around it.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.shared_memory.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> from multiprocessing import shared_memory
>>> nul_bug_demo = shared_memory.ShareableList(['?\x00', b'\x03\x02\x01\x00\x00\x00'])
>>> nul_bug_demo[0]
'?'
>>> nul_bug_demo[1]
b'\x03\x02\x01'
>>> nul_bug_demo.shm.unlink()
>>> padded = shared_memory.ShareableList(['?\x00\x07', b'\x03\x02\x01\x00\x00\x00\x07'])
>>> padded[0][:-1]
'?\x00'
>>> padded[1][:-1]
b'\x03\x02\x01\x00\x00\x00'
>>> padded.shm.unlink()
```

----------------------------------------

TITLE: Differ Result Pretty Printing
DESCRIPTION: This example demonstrates how to pretty-print the result of a Differ comparison using the pprint module.  The pprint function formats the list of strings (the diff) for easier readability.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/difflib.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
>>> from pprint import pprint
>>> pprint(result)
```

----------------------------------------

TITLE: Convert String to Integer Using Locale in Python
DESCRIPTION: Converts a string to an integer while taking into account the locale-specific numeric conventions as indicated by LC_NUMERIC settings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/locale.rst#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
.. function:: atoi(string)

   Converts a string to an integer, following the :const:`LC_NUMERIC` conventions.
```

----------------------------------------

TITLE: Using window.timeout() Method in Python Curses
DESCRIPTION: Sets blocking or non-blocking read behavior for the window. Negative delay creates blocking read, zero delay creates non-blocking read, and positive delay blocks for the specified milliseconds.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_104

LANGUAGE: python
CODE:
```
window.timeout(delay)
```

----------------------------------------

TITLE: Using unwrap function in inspect module
DESCRIPTION: The new unwrap function in the inspect module makes it easy to unravel wrapper function chains created by functools.wraps and similar APIs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.4.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
from inspect import unwrap
```

----------------------------------------

TITLE: Comparing Module __name__ and __spec__.name Interaction - Python
DESCRIPTION: Demonstrates the relationship and difference between accessing and assigning the `__name__` attribute directly on a module object (typing) and accessing/assigning the `name` attribute on its `__spec__`. Modifying one does not automatically update the other.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_6

LANGUAGE: python
CODE:
```
>>> import typing
>>> typing.__name__, typing.__spec__.name
('typing', 'typing')
>>> typing.__spec__.name = 'spelling'
>>> typing.__name__, typing.__spec__.name
('typing', 'spelling')
>>> typing.__name__ = 'keyboard_smashing'
>>> typing.__name__, typing.__spec__.name
('keyboard_smashing', 'spelling')
```

----------------------------------------

TITLE: Iterating with Exceptions Using Iter_except Function in Python
DESCRIPTION: Illustrates iteration over dictionary items using iter_except, where iteration stops upon encountering a specified exception.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_86

LANGUAGE: Python
CODE:
```
>>> d = dict(a=1, b=2, c=3)
>>> it = iter_except(d.popitem, KeyError)
>>> d['d'] = 4
>>> next(it)
('d', 4)
>>> next(it)
('c', 3)
>>> next(it)
('b', 2)
>>> d['e'] = 5
>>> next(it)
('e', 5)
>>> next(it)
('a', 1)
>>> next(it, 'empty')
'empty'
```

----------------------------------------

TITLE: Defining SSL/TLS Feature Availability Flags in Python
DESCRIPTION: These constants indicate the availability of various SSL/TLS features in the OpenSSL library, such as ALPN, SNI, and ECDH support.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
HAS_ALPN
HAS_NEVER_CHECK_COMMON_NAME
HAS_ECDH
HAS_SNI
HAS_NPN
```

----------------------------------------

TITLE: Using localcontext with Keywords for Precision in Python
DESCRIPTION: Shows the alternative syntax (available since Python 3.11) for `localcontext` that allows setting context attributes directly using keyword arguments when entering the context manager. This provides a more concise way to temporarily modify specific context settings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_31

LANGUAGE: python
CODE:
```
from decimal import localcontext

with localcontext(prec=42) as ctx:
    s = calculate_something()
s = +s
```

----------------------------------------

TITLE: AbstractBasicAuthHandler.http_error_auth_reqed Method
DESCRIPTION: Method to handle authentication requests by obtaining user/password credentials and retrying the request. This is the core method for implementing HTTP Basic Authentication.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_38

LANGUAGE: python
CODE:
```
def http_error_auth_reqed(authreq, host, req, headers):
    """Handle authentication request by getting credentials and retrying.
    authreq is the header name, host is the URL/authority,
    req is the failed Request, headers are the error headers."""
```

----------------------------------------

TITLE: Curses keypad Method Definition
DESCRIPTION: The keypad method enables or disables the interpretation of escape sequences generated by keys such as keypad and function keys. When flag is True, curses interprets these sequences; when False, they are left as is in the input stream.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_79

LANGUAGE: python
CODE:
```
.. method:: window.keypad(flag)

   If *flag* is ``True``, escape sequences generated by some keys (keypad,  function keys)
   will be interpreted by :mod:`curses`. If *flag* is ``False``, escape sequences will be
   left as is in the input stream.
```

----------------------------------------

TITLE: Defining MIME Message Part for Plain Text Content in MIME
DESCRIPTION: This snippet demonstrates how to define a plain text content part in a MIME message. It includes the Content-Type header specifying the charset and format.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/test_email/data/msg_22.txt#2025-04-21_snippet_1

LANGUAGE: mime
CODE:
```
--============_-1208892523==_============
Content-Type: text/plain; charset="us-ascii" ; format="flowed"

Text text text.
```

----------------------------------------

TITLE: Tracking and Untracking GC Objects in C
DESCRIPTION: Functions for adding and removing objects from the set tracked by the garbage collector. These should be called in constructors and deallocators.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/gcsupport.rst#2025-04-21_snippet_1

LANGUAGE: C
CODE:
```
void PyObject_GC_Track(PyObject *op)
```

LANGUAGE: C
CODE:
```
void PyObject_GC_UnTrack(void *op)
```

----------------------------------------

TITLE: Dumping C Stack with faulthandler.dump_c_stack
DESCRIPTION: This code shows how to explicitly dump the C stack trace using `faulthandler.dump_c_stack`. This function prints the current C stack to stderr. It is useful for debugging C-level problems in Python extensions or the interpreter itself. The faulthandler module must be imported.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/next/Library/2024-12-21-13-31-55.gh-issue-127604.etL5mf.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
faulthandler.dump_c_stack()
```

----------------------------------------

TITLE: Enabling DivisionByZero Trap in Context (Python)
DESCRIPTION: Shows how to explicitly enable the `DivisionByZero` trap on the current context's `traps` dictionary. After enabling the trap, performing division by zero now raises a `DivisionByZero` exception instead of returning infinity.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_13

LANGUAGE: python
CODE:
```
getcontext().traps[DivisionByZero] = 1
Decimal(1) / Decimal(0)
```

----------------------------------------

TITLE: Property-based Attribute Access
DESCRIPTION: Shows how to use the property decorator to implement computed attributes with getter and setter methods.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.2.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
class C(object):
    def get_size(self):
        result = ... computation ...
        return result
    def set_size(self, size):
        ... compute something based on the size
        and set internal state appropriately ...

    # Define a property.  The 'delete this attribute'
    # method is defined as None, so the attribute
    # can't be deleted.
    size = property(get_size, set_size,
                    None,
                    "Storage size of this instance")
```

----------------------------------------

TITLE: Adding HTTP Status Category Properties to HTTPStatus Enum
DESCRIPTION: This update adds properties to the HTTPStatus enum to indicate the HTTP status category, such as is_success for 2xx statuses.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.12.0a1.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
HTTPStatus.OK.is_success  # Returns True for 2xx status codes
```

----------------------------------------

TITLE: LZMACompressor Class for Incremental Data Compression in Python
DESCRIPTION: The LZMACompressor class creates a compressor object for incremental data compression. It supports various formats, integrity checks, and compression settings through presets or custom filter chains.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/lzma.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
LZMACompressor(format=FORMAT_XZ, check=-1, preset=None, filters=None)
```

----------------------------------------

TITLE: Defining and Using PyTime_t Type in C
DESCRIPTION: This snippet introduces the PyTime_t type, implemented as a signed 64-bit integer to represent timestamps or durations in nanoseconds. The reference for timestamps is dependent on the clock used, and the range supported mirrors the UNIX epoch.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/time.rst#2025-04-21_snippet_0

LANGUAGE: c
CODE:
```
.. c:type:: PyTime_t

   A timestamp or duration in nanoseconds, represented as a signed 64-bit
   integer.

   The reference point for timestamps depends on the clock used. For example,
   :c:func:`PyTime_Time` returns timestamps relative to the UNIX epoch.

   The supported range is around [-292.3 years; +292.3 years].
   Using the Unix epoch (January 1st, 1970) as reference, the supported date
   range is around [1677-09-21; 2262-04-11].
   The exact limits are exposed as constants:

.. c:var:: PyTime_t PyTime_MIN

   Minimum value of :c:type:`PyTime_t`.

.. c:var:: PyTime_t PyTime_MAX

   Maximum value of :c:type:`PyTime_t`.

```

----------------------------------------

TITLE: Adding Isolated Mode Option to Python Command Line - Python
DESCRIPTION: The `-I` option for the Python command line enables isolated mode, preventing access to user environments and modifying `sys.path`. This is useful for executing system scripts without interference.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.4.rst#2025-04-21_snippet_20

LANGUAGE: Python
CODE:
```
* The :ref:`python <using-on-cmdline>` command has a new :ref:`option <using-on-misc-options>`, ``-I``, which causes it to run in "isolated mode", which means that :data:`sys.path` contains neither the script's directory nor the user's ``site-packages`` directory, and all :envvar:`!PYTHON*` environment variables are ignored (it implies both ``-s`` and ``-E``).
```

----------------------------------------

TITLE: Using subprocess.Popen repr for Better Debugging
DESCRIPTION: Added a string representation for subprocess.Popen objects to make debugging subprocess calls easier and more informative.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.9.0a1.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
repr(subprocess.Popen)
```

----------------------------------------

TITLE: BaseHandler.http_error_default Method Definition
DESCRIPTION: Method to be overridden by subclasses to provide catch-all handling for unhandled HTTP errors. Takes request, response, code, message, and headers as parameters and should return values like urlopen().
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
def http_error_default(req, fp, code, msg, hdrs):
    """Should be overridden by BaseHandler subclasses to provide
    catch-all handling for unhandled HTTP errors."""
```

----------------------------------------

TITLE: Returning False - Py_RETURN_FALSE Macro
DESCRIPTION: This macro allows returning the Py_False object from a function, facilitating the use of boolean false values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/bool.rst#2025-04-21_snippet_4

LANGUAGE: C
CODE:
```
.. c:macro:: Py_RETURN_FALSE

   Return :c:data:`Py_False` from a function.
```

----------------------------------------

TITLE: Encode Unicode Object to Raw-Unicode-Escape Bytes - Python C API - C
DESCRIPTION: Encodes a Python Unicode object into a Python bytes object using the Raw-Unicode-Escape encoding. Error handling is 'strict', meaning encoding errors raise an exception. Returns NULL if an exception was raised.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/unicode.rst#_snippet_70

LANGUAGE: C
CODE:
```
PyObject* PyUnicode_AsRawUnicodeEscapeString(PyObject *unicode)
```

----------------------------------------

TITLE: Installing Free-threaded Python via Command Line on macOS
DESCRIPTION: Shell script to download and install a free-threaded Python build using the macOS command line installer utility. It demonstrates how to customize the installation options programmatically.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/mac.rst#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
RELEASE="python-3.13.0b2-macos11.pkg"

# download installer pkg
curl -O https://www.python.org/ftp/python/3.13.0/${RELEASE}

# create installer choicechanges to customize the install:
#    enable the PythonTFramework-3.13 package
#    while accepting the other defaults (install all other packages)
cat > ./choicechanges.plist <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
        <dict>
                <key>attributeSetting</key>
                <integer>1</integer>
                <key>choiceAttribute</key>
                <string>selected</string>
                <key>choiceIdentifier</key>
                <string>org.python.Python.PythonTFramework-3.13</string>
        </dict>
</array>
</plist>
EOF

sudo installer -pkg ./${RELEASE} -applyChoiceChangesXML ./choicechanges.plist -target /
```

----------------------------------------

TITLE: Removing Fragment Identifier from URL with urldefrag Function in Python
DESCRIPTION: The urldefrag function removes the fragment identifier from a URL if present, returning a modified version of the URL.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.parse.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
urldefrag(url)
```

----------------------------------------

TITLE: XML Parser Error Attributes in Python
DESCRIPTION: Documentation of XML parser error attributes including 'code' for numeric error codes from expat parser and 'position' returning a tuple of line and column numbers where an error occurred. Also includes specifications for valid XML encoding strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
class XMLParserError:
    code: int       # numeric error code from expat parser
    position: tuple # (line, column) tuple indicating error location
```

----------------------------------------

TITLE: Implementing tp_getattr Handler for Custom Attribute Lookup
DESCRIPTION: Demonstrates how to implement a tp_getattr handler function that handles attribute lookup for a custom type. This example returns the 'data' attribute and raises an AttributeError for unknown attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/newtypes.rst#2025-04-21_snippet_8

LANGUAGE: c
CODE:
```
static PyObject *
newdatatype_getattr(PyObject *op, char *name)
{
    newdatatypeobject *self = (newdatatypeobject *) op;
    if (strcmp(name, "data") == 0) {
        return PyLong_FromLong(self->data);
    }

    PyErr_Format(PyExc_AttributeError,
                 "'%.100s' object has no attribute '%.400s'",
                 Py_TYPE(self)->tp_name, name);
    return NULL;
}
```

----------------------------------------

TITLE: Defining TextIOBase Class in Python
DESCRIPTION: TextIOBase is the base class for text streams, providing character and line-based interface to stream I/O. It inherits from IOBase.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/io.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
class TextIOBase:
    encoding = None  # Name of the encoding used
    errors = None    # Error setting of decoder/encoder
    newlines = None  # Newlines translated so far
    buffer = None    # Underlying binary buffer

    def detach():
        # Separate underlying binary buffer and return it
        pass

    def read(size=-1, /):
        # Read and return characters from the stream
        pass

    def readline(size=-1, /):
        # Read until newline or EOF and return a string
        pass

    def seek(offset, whence=SEEK_SET, /):
        # Change stream position
        pass

    def tell():
        # Return current stream position
        pass

    def write(s, /):
        # Write string s to the stream
        pass
```

----------------------------------------

TITLE: Using Pack Geometry Manager in Tkinter
DESCRIPTION: Examples of using the pack() method with different options to control widget placement.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
fred.pack()                     # defaults to side = "top"
fred.pack(side="left")
fred.pack(expand=1)
```

----------------------------------------

TITLE: Retrieving Bytecode Instructions with get_instructions() in Python
DESCRIPTION: Returns an iterator over instructions in the supplied function, method, source code string, or code object. Each iteration yields an Instruction named tuple with details of bytecode operations. Supports parameters for line number reporting, cache showing, and adaptive behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dis.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
get_instructions(x, *, first_line=None, show_caches=False, adaptive=False)
```

----------------------------------------

TITLE: TypeVarTuple Invalid Tuple Annotation
DESCRIPTION: Shows another incorrect way to use a TypeVarTuple annotation by wrapping it in a tuple type hint without unpacking.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_114

LANGUAGE: python
CODE:
```
x: tuple[Ts]   # Not valid
```

----------------------------------------

TITLE: Importing and Verifying Module Variable in Python Doctest
DESCRIPTION: This snippet demonstrates importing a module in a doctest and verifying that the 'sillySetup' variable is True. This is shown as an example of basic doctest functionality in a text file.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/test_doctest/test_doctest2.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> import test.test_doctest.test_doctest
>>> test.test_doctest.test_doctest.sillySetup
True
```

----------------------------------------

TITLE: Poker Hand Pattern Matching
DESCRIPTION: Examples of validating poker hands using regex patterns.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
>>> valid = re.compile(r"^[a2-9tjqk]{5}$")
>>> displaymatch(valid.match("akt5q"))  # Valid.
"<Match: 'akt5q', groups=()>"
>>> displaymatch(valid.match("akt5e"))  # Invalid.
>>> displaymatch(valid.match("akt"))    # Invalid.
>>> displaymatch(valid.match("727ak"))  # Valid.
"<Match: '727ak', groups=()>"
```

----------------------------------------

TITLE: Sending Data to a CGI Script with Python
DESCRIPTION: Example demonstrating how to send data to a CGI script via HTTP POST using urllib.request.Request. The data is passed to the stdin of the CGI script and the response is read back. This example requires SSL support.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_42

LANGUAGE: python
CODE:
```
>>> import urllib.request
>>> req = urllib.request.Request(url='https://localhost/cgi-bin/test.cgi',
...                       data=b'This data is passed to stdin of the CGI')
>>> with urllib.request.urlopen(req) as f:
...     print(f.read().decode('utf-8'))
...
Got Data: "This data is passed to stdin of the CGI"
```

----------------------------------------

TITLE: Parsing Arguments Starting with Hyphen (No Negative Options) in Python argparse
DESCRIPTION: Explains and demonstrates how `parse_args` interprets arguments starting with a hyphen as positional arguments when no options resembling negative numbers are defined in the parser.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_67

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser(prog='PROG')
>>> parser.add_argument('-x')
>>> parser.add_argument('foo', nargs='?')

>>> # no negative number options, so -1 is a positional argument
>>> parser.parse_args(['-x', '-1'])
Namespace(foo=None, x='-1')

>>> # no negative number options, so -1 and -5 are positional arguments
>>> parser.parse_args(['-x', '-1', '-5'])
Namespace(foo='-5', x='-1')
```

----------------------------------------

TITLE: Curses echochar Method Definition
DESCRIPTION: The echochar method adds a character with a specified attribute to the window and immediately calls refresh to display the change.  This method provides a way to update the window and display the character in a single step.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_53

LANGUAGE: python
CODE:
```
.. method:: window.echochar(ch[, attr])

   Add character *ch* with attribute *attr*, and immediately  call :meth:`refresh`
   on the window.
```

----------------------------------------

TITLE: Compiling Source to Byte-Code - Python
DESCRIPTION: The compile function compiles the specified Python source file into byte-code and saves it in the appropriate cache directory. It takes several optional parameters to customize the compilation process, including error handling and optimization level adjustments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/py_compile.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
def compile(file, cfile=None, dfile=None, doraise=False, optimize=-1, invalidation_mode=PycInvalidationMode.TIMESTAMP, quiet=0):
    """
    Compile a source file to byte-code and write out the byte-code cache file.
    The source code is loaded from the file named *file*.  The byte-code is
    written to *cfile*, which defaults to the :pep:`3147`/:pep:`488` path, ending
    in ``.pyc``.
    For example, if *file* is ``/foo/bar/baz.py`` *cfile* will default to
    ``/foo/bar/__pycache__/baz.cpython-32.pyc`` for Python 3.2.  If *dfile* is
    specified, it is used instead of *file* as the name of the source file from
    which source lines are obtained for display in exception tracebacks.
    If *doraise* is true, a :exc:`PyCompileError` is raised
    when an error is encountered while compiling *file*. If *doraise* is false
    (the default), an error string is written to ``sys.stderr``, but no exception
    is raised.  This function returns the path to byte-compiled file, i.e.
    whatever *cfile* value was used.
    """
```

----------------------------------------

TITLE: Sending Signal to Specific Thread in Python
DESCRIPTION: The pthread_kill function sends a signal to a specific thread in the same process. It's only available on Unix systems and can be used to interrupt system calls in Python threads.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/signal.rst#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
def pthread_kill(thread_id, signalnum):
    """Send the signal signalnum to the thread thread_id, another thread in the
    same process as the caller.  The target thread can be executing any code
    (Python or not).  However, if the target thread is executing the Python
    interpreter, the Python signal handlers will be executed by the main
    thread of the main interpreter."""
```

----------------------------------------

TITLE: Calculating Multiple Modes in Python
DESCRIPTION: This snippet demonstrates the use of the multimode function to find multiple modes in a dataset. It returns a list of the most frequently occurring values in the order they were first encountered.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
>>> multimode('aabbbbccddddeeffffgg')
['b', 'd', 'f']
>>> multimode('')
[]
```

----------------------------------------

TITLE: Example usage of concatenate with constrained TypeVar (Python)
DESCRIPTION: Illustrates the behavior of a constrained type variable (`A` in `concatenate`). It shows that the type variable must resolve to exactly one of the constraints (`str` or `bytes`), even when a subclass is passed, and that mixing types from different constraints results in a type error.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_105

LANGUAGE: Python
CODE:
```
a = concatenate('one', 'two')
reveal_type(a)  # revealed type is str

b = concatenate(StringSubclass('one'), StringSubclass('two'))
reveal_type(b)  # revealed type is str, despite StringSubclass being passed in

c = concatenate('one', b'two')  # error: type variable 'A' can be either str or bytes in a function call, but not both
```

----------------------------------------

TITLE: Demonstrating splitroot() Function in Python
DESCRIPTION: Shows how to split a network path into server share and remaining path components. Returns a tuple containing the server share, separator, and remaining path.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
>>> splitroot('//Server/Share/Users/Sam')
('//Server/Share', '/', 'Users/Sam')
```

----------------------------------------

TITLE: Registering Existing Classes with ABC
DESCRIPTION: Demonstrates how to register an existing class with a MutableMapping ABC without inheritance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
import collections

class Storage:
    ...

collections.MutableMapping.register(Storage)
```

----------------------------------------

TITLE: Check if Object is Float or Subtype (PyFloat_Check)
DESCRIPTION: Checks if the given PyObject pointer 'p' is a PyFloatObject or an instance of a subtype of PyFloatObject. Returns true (non-zero) if it is, false (zero) otherwise. This function always succeeds.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/float.rst#_snippet_2

LANGUAGE: C
CODE:
```
int PyFloat_Check(PyObject *p)
```

----------------------------------------

TITLE: Installing Python Extension Modules
DESCRIPTION: Shell command to install the custom C extensions using pip in development mode.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/newtypes_tutorial.rst#2025-04-21_snippet_11

LANGUAGE: shell
CODE:
```
$ python -m pip install .
```

----------------------------------------

TITLE: Preserving Extra Fields in zipfile
DESCRIPTION: This fixes an issue where "extra" fields in zipfile archives were not correctly preserved, especially when their ordering was relative to a zip64 "extra". This ensures data integrity when working with complex zip archives.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.12.0a6.rst#2025-04-21_snippet_14



----------------------------------------

TITLE: Adding cache_parameters Method to functools.lru_cache
DESCRIPTION: New method for functools.lru_cache() that returns parameters used to create the cache, improving support for pickling cached functions.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.9.0a1.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
cache_parameters()
```

----------------------------------------

TITLE: Expanding Environment Variables in Registry Strings in Python
DESCRIPTION: Expands environment variable placeholders (%NAME%) in strings like REG_EXPAND_SZ.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/winreg.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
ExpandEnvironmentStrings('%windir%')
```

----------------------------------------

TITLE: Removing File Descriptor Writer with asyncio
DESCRIPTION: This method stops monitoring a file descriptor for write availability. It returns True if the file descriptor was previously being monitored for writes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-eventloop.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
.. method:: loop.remove_writer(fd)

   Stop monitoring the *fd* file descriptor for write availability. Returns
   ``True`` if *fd* was previously being monitored for writes.

```

----------------------------------------

TITLE: Creating UDPLITE Socket Python
DESCRIPTION: Demonstrates how to create a socket specifically for the UDPLITE protocol using the `socket` function. This requires specifying the address family (IPv4 or IPv6), the socket type (SOCK_DGRAM), and the IPPROTO_UDPLITE protocol.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/socket.rst#_snippet_1

LANGUAGE: Python
CODE:
```
socket(AF_INET, SOCK_DGRAM, IPPROTO_UDPLITE)
```

LANGUAGE: Python
CODE:
```
socket(AF_INET6, SOCK_DGRAM, IPPROTO_UDPLITE)
```

----------------------------------------

TITLE: Creating Slots in Python Object Instances
DESCRIPTION: This snippet defines a custom Object class that allocates memory for user-defined slots instead of using a typical dictionary for instance attributes. It initializes a private list for slot values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_34

LANGUAGE: Python
CODE:
```
class Object:
    'Simulate how object.__new__() allocates memory for __slots__'

    def __new__(cls, *args, **kwargs):
        'Emulate object_new() in Objects/typeobject.c'
        inst = super().__new__(cls)
        if hasattr(cls, 'slot_names'):
            empty_slots = [null] * len(cls.slot_names)
            object.__setattr__(inst, '_slotvalues', empty_slots)
        return inst

    def __setattr__(self, name, value):
        'Emulate _PyObject_GenericSetAttrWithDict() Objects/object.c'
        cls = type(self)
        if hasattr(cls, 'slot_names') and name not in cls.slot_names:
            raise AttributeError(
                f'{cls.__name__!r} object has no attribute {name!r}'
            )
        super().__setattr__(name, value)

    def __delattr__(self, name):
        'Emulate _PyObject_GenericSetAttrWithDict() Objects/object.c'
        cls = type(self)
        if hasattr(cls, 'slot_names') and name not in cls.slot_names:
            raise AttributeError(
                f'{cls.__name__!r} object has no attribute {name!r}'
            )
        super().__delattr__(name)
```

----------------------------------------

TITLE: Implementing fromutc() Method for tzinfo Subclass in Python
DESCRIPTION: This snippet shows the default implementation of the fromutc() method for tzinfo subclasses. It handles the conversion from UTC to local time, accounting for standard offset and daylight saving time.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_28

LANGUAGE: python
CODE:
```
def fromutc(self, dt):
    # raise ValueError error if dt.tzinfo is not self
    dtoff = dt.utcoffset()
    dtdst = dt.dst()
    # raise ValueError if dtoff is None or dtdst is None
    delta = dtoff - dtdst  # this is self's standard offset
    if delta:
        dt += delta   # convert to standard local time
        dtdst = dt.dst()
        # raise ValueError if dtdst is None
    if dtdst:
        return dt + dtdst
    else:
        return dt
```

----------------------------------------

TITLE: ISO Calendar Date Examples
DESCRIPTION: Examples showing how isocalendar() handles dates at the start of an ISO year
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/datetime.rst#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
>>> from datetime import date
>>> date(2003, 12, 29).isocalendar()
datetime.IsoCalendarDate(year=2004, week=1, weekday=1)
>>> date(2004, 1, 4).isocalendar()
datetime.IsoCalendarDate(year=2004, week=1, weekday=7)
```

----------------------------------------

TITLE: Enabling Newline Mode with Curses in Python
DESCRIPTION: The `nl` function alters the return key input to newline and modifies output newline to return and line-feed. Newline mode is enabled by default in this configuration.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_18

LANGUAGE: Python
CODE:
```
.. function:: nl()

   Enter newline mode.  This mode translates the return key into newline on input,
   and translates newline into return and line-feed on output. Newline mode is
   initially on.
```

----------------------------------------

TITLE: Loading Pickled Objects from File in Python
DESCRIPTION: Function to read a pickled representation of an object from a file object and return the reconstituted object hierarchy. The protocol version is detected automatically. Takes parameters for controlling compatibility with Python 2 pickles.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pickle.rst#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
load(file, *, fix_imports=True, encoding="ASCII", errors="strict", buffers=None)
```

----------------------------------------

TITLE: Fatal Error Handler in C
DESCRIPTION: Function to print fatal error message and terminate process when dangerous conditions are detected. Calls abort() on Unix systems to generate core file. Automatically logs function name unless Py_LIMITED_API is defined.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/sys.rst#2025-04-21_snippet_18

LANGUAGE: c
CODE:
```
void Py_FatalError(const char *message)
```

----------------------------------------

TITLE: Specifying Breakpoint Commands - Pdb - Python
DESCRIPTION: Associates a list of Pdb commands to be executed automatically when a specific breakpoint is hit. Commands are entered on subsequent lines and terminated by a line containing only 'end'. Resuming execution commands terminate the list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_15

LANGUAGE: Python
CODE:
```
(Pdb) commands 1
(com) p some_variable
(com) end
(Pdb)
```

----------------------------------------

TITLE: Macro Removal and Replacement for Python Math Operations
DESCRIPTION: Removal of math-related macros that used the errno variable, specifically Py_ADJUST_ERANGE1, Py_ADJUST_ERANGE2, Py_OVERFLOWED, Py_SET_ERANGE_IF_OVERFLOW, and Py_SET_ERRNO_ON_MATH_ERROR.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a2.rst#2025-04-21_snippet_0

LANGUAGE: C
CODE:
```
// Removed macros:
Py_ADJUST_ERANGE1()
Py_ADJUST_ERANGE2()
Py_OVERFLOWED()
Py_SET_ERANGE_IF_OVERFLOW()
Py_SET_ERRNO_ON_MATH_ERROR()
```

----------------------------------------

TITLE: Setting Interpreter Frame Evaluation Function CPython C
DESCRIPTION: Sets the frame evaluation function for the specified interpreter state. This function is part of the PEP 523 API, allowing customization of frame execution by providing a function of the `_PyFrameEvalFunction` type.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/init.rst#_snippet_34

LANGUAGE: C
CODE:
```
void _PyInterpreterState_SetEvalFrameFunc(PyInterpreterState *interp, _PyFrameEvalFunction eval_frame)
```

----------------------------------------

TITLE: Checking Turtle Pen Status Python
DESCRIPTION: Demonstrates using `turtle.isdown()` to check if the pen is currently down (drawing) or up (not drawing) after calling `turtle.penup()` and `turtle.pendown()`. Returns `True` if down, `False` if up.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_51

LANGUAGE: python
CODE:
```
>>> turtle.penup()
>>> turtle.isdown()
False
>>> turtle.pendown()
>>> turtle.isdown()
True
```

----------------------------------------

TITLE: Accessing Frame Objects in Python 3.11
DESCRIPTION: In Python 3.11, frame objects are created only when explicitly requested by debuggers or introspection functions like sys._getframe() and inspect.currentframe(), improving performance for most user code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.11.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
import sys
import inspect

# These functions now create frame objects only when called
frame = sys._getframe()
current_frame = inspect.currentframe()
```

----------------------------------------

TITLE: Using CALL_KW Opcode in Python
DESCRIPTION: Calls a callable object with positional and named arguments. The stack includes the callable, self or NULL, positional args, named args, and a tuple of keyword argument names. Added in Python 3.13.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dis.rst#2025-04-21_snippet_45

LANGUAGE: python
CODE:
```
CALL_KW (argc)
```

----------------------------------------

TITLE: Using getmembers() Function in Python Inspection
DESCRIPTION: The getmembers() function returns all members of an object as a list of (name, value) pairs sorted by name. An optional predicate parameter can be provided to filter the results based on the value object of each member.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/inspect.rst#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
getmembers(object[, predicate])
```

----------------------------------------

TITLE: Replacing _PyUnicodeWriter_Init with PyUnicodeWriter_Create in C
DESCRIPTION: Example showing how to replace the deprecated _PyUnicodeWriter_Init() function with the new PyUnicodeWriter_Create() function. The new function returns a writer object directly rather than initializing through a pointer.
SOURCE: https://github.com/python/cpython/blob/main/Doc/deprecations/c-api-pending-removal-in-3.18.rst#2025-04-21_snippet_0

LANGUAGE: c
CODE:
```
_PyUnicodeWriter_Init(&writer)
```

LANGUAGE: c
CODE:
```
writer = PyUnicodeWriter_Create(0)
```

----------------------------------------

TITLE: Tracking All Calls to a Mock in Python
DESCRIPTION: Shows how to track all calls to a mock and its child attributes using mock_calls. This is useful for verifying the sequence and structure of calls made to a complex mock object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
mock = MagicMock()
mock.method()
mock.attribute.method(10, x=53)
mock.mock_calls
```

----------------------------------------

TITLE: Using Boolean Flags in Argparse
DESCRIPTION: Shows how to create a boolean flag option using the store_true action. This changes --verbose from an option that requires a value to one that just needs to be present to be activated.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/argparse.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("--verbose", help="increase output verbosity",
                   action="store_true")
args = parser.parse_args()
if args.verbose:
    print("verbosity turned on")
```

----------------------------------------

TITLE: Refreshing a Pad in Curses
DESCRIPTION: This code snippet demonstrates how to refresh a specific section of a pad to display it on the screen. It specifies coordinates for the rectangular area to be filled with pad content and ensures efficient screen updates.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/curses.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
pad.refresh( 0,0, 5,5, 20,75)
```

----------------------------------------

TITLE: Getting Codec Decoder Function with Python codecs.getdecoder
DESCRIPTION: Looks up the codec for the given encoding and returns its stateless decoder function. Raises LookupError if the encoding is not found.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/codecs.rst#_snippet_5

LANGUAGE: Python
CODE:
```
import codecs

try:
    decoder_func = codecs.getdecoder("utf-8")
    decoded_data = decoder_func(b"decoded test")[0] # [0] gets the string object
    print(f"Decoded data: {decoded_data}")
except LookupError as e:
    print(f"Decoder not found: {e}")
```

----------------------------------------

TITLE: Localize a Numeric String in Python
DESCRIPTION: Transforms a normalized numeric string into a locale-specific formatted string with optional grouping and monetary formatting, as per LC_NUMERIC settings. Introduced in version 3.10.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/locale.rst#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
.. function:: localize(string, grouping=False, monetary=False)

    Converts a normalized number string into a formatted string following the
    :const:`LC_NUMERIC` settings.

    .. versionadded:: 3.10
```

----------------------------------------

TITLE: Modifying URL Parsing Behavior in Python 3.8.10
DESCRIPTION: Introduces a new module level variable in urllib.parse to control the removal of unsafe characters (newline, carriage return, tab) from URLs to prevent certain forms of attacks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_39

LANGUAGE: Python
CODE:
```
urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE
```

----------------------------------------

TITLE: PyUnicode_FSDecoder Input Type Change in CPython C API
DESCRIPTION: The "PyUnicode_FSDecoder" function now strictly requires the exact "bytes" type for bytes-like paths and no longer accepts other bytes-like types such as "bytearray" or "memoryview".
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_82

LANGUAGE: C
CODE:
```
PyUnicode_FSDecoder
```

----------------------------------------

TITLE: Using Backreferences in Replacement Strings in Python
DESCRIPTION: Shows how to reference captured groups in the replacement string using backreferences. The example changes 'section{...}' to 'subsection{...}' while preserving the content inside the braces.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/regex.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
>>> p = re.compile('section{ ( [^}]* ) }', re.VERBOSE)
>>> p.sub(r'subsection{\1}','section{First} section{second}')
'subsection{First} subsection{second}'
```

----------------------------------------

TITLE: Assume CodeType always has co_lines (Python)
DESCRIPTION: This entry notes an assumption that `types.CodeType` always has a `co_lines` attribute. Details about this assumption and its implications are not included in the provided context.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a4.rst#2025-04-21_snippet_43



----------------------------------------

TITLE: Function Signature Introspection with inspect.signature
DESCRIPTION: PEP 362 adds a new function inspect.signature for easy introspection of Python callables, including functions and classes. It provides detailed information about function signatures, including parameters and their attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.3.rst#2025-04-21_snippet_5



----------------------------------------

TITLE: Handling Namespace-Aware Attributes in Python SAX Parser
DESCRIPTION: Methods specific to AttributesNS objects for working with namespace-aware attributes in SAX parsing. These methods allow retrieving values, names, and qualified names using namespace information.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.sax.reader.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
.. method:: AttributesNS.getValueByQName(name)

   Return the value for a qualified name.
```

LANGUAGE: python
CODE:
```
.. method:: AttributesNS.getNameByQName(name)

   Return the ``(namespace, localname)`` pair for a qualified *name*.
```

LANGUAGE: python
CODE:
```
.. method:: AttributesNS.getQNameByName(name)

   Return the qualified name for a ``(namespace, localname)`` pair.
```

LANGUAGE: python
CODE:
```
.. method:: AttributesNS.getQNames()

   Return the qualified names of all attributes.
```

----------------------------------------

TITLE: Setting LogRecord Factory in Python Logging
DESCRIPTION: Sets a callable which is used to create a LogRecord. This function allows developers more control over how the LogRecord representing a logging event is constructed. The factory must have a specific signature.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
def setLogRecordFactory(factory):
```

----------------------------------------

TITLE: Tokenizing Python Files Using tokenize
DESCRIPTION: Example showing how to tokenize a Python file using tokenize.tokenize() which reads bytes directly. Opens the file in binary mode and iterates through the generated tokens.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tokenize.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
import tokenize

with open('hello.py', 'rb') as f:
    tokens = tokenize.tokenize(f.readline)
    for token in tokens:
        print(token)
```

----------------------------------------

TITLE: Configuring logging with different string formatting styles in Python
DESCRIPTION: This snippet demonstrates how to use the new style argument in logging.basicConfig to support different string formatting styles for log messages.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_39

LANGUAGE: python
CODE:
```
>>> from logging import basicConfig
>>> basicConfig(style='%', format="%(name)s -> %(levelname)s: %(message)s")
>>> basicConfig(style='{', format="{name} -> {levelname} {message}")
>>> basicConfig(style='$', format="$name -> $levelname: $message")
```

----------------------------------------

TITLE: Accessing Python Recursion Depth from Thread State in C
DESCRIPTION: Represents accessing the counter (`py_recursion_remaining`) that tracks the remaining allowed depth for Python function calls for the current thread. This is accessed as a member of the thread state structure (`tstate`).
SOURCE: https://github.com/python/cpython/blob/main/Python/vm-state.md#_snippet_7

LANGUAGE: C
CODE:
```
tstate->py_recursion_remaining
```

----------------------------------------

TITLE: Filtering Elements from an Iterable in Python
DESCRIPTION: The filter function constructs an iterator from elements of an iterable for which a given function returns true. It's equivalent to a generator expression and can be used with None to filter out falsy values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
filter(function, iterable)
```

----------------------------------------

TITLE: Type-specific behavior in iter_index for different sequence types in Python
DESCRIPTION: Demonstrates that iter_index respects the behavior of type-specific index() methods, such as the continuous subsequence matching in strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_69

LANGUAGE: python
CODE:
```
>>> # Verify faithfulness to type specific index() method behaviors.
>>> # For example, bytes and str perform continuous-subsequence searches
>>> # that do not match the general behavior specified
>>> # in collections.abc.Sequence.index().
>>> seq = 'abracadabra'
>>> target = 'ab'
>>> list(iter_index(seq, target))
[0, 7]
```

----------------------------------------

TITLE: Get Built-in Objects for Current Frame in C
DESCRIPTION: Returns a dictionary of built-ins specifically for the current execution frame or falls back to the thread state interpreter. Added in Python 3.13 and requires compatibility with this version.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/reflection.rst#2025-04-21_snippet_4

LANGUAGE: c
CODE:
```
PyObject* PyEval_GetFrameBuiltins(void)
```

----------------------------------------

TITLE: Replacing _PyUnicodeWriter_Dealloc with PyUnicodeWriter_Discard in C
DESCRIPTION: Example showing how to replace the deprecated _PyUnicodeWriter_Dealloc() function with the new PyUnicodeWriter_Discard() function. The new function takes the writer object directly instead of a pointer to it.
SOURCE: https://github.com/python/cpython/blob/main/Doc/deprecations/c-api-pending-removal-in-3.18.rst#2025-04-21_snippet_2

LANGUAGE: c
CODE:
```
_PyUnicodeWriter_Dealloc(&writer)
```

LANGUAGE: c
CODE:
```
PyUnicodeWriter_Discard(writer)
```

----------------------------------------

TITLE: Using site Module Functions
DESCRIPTION: Examples of using site module functions to retrieve site-packages directories, user base directories, and user-specific site-packages paths.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_67

LANGUAGE: python
CODE:
```
>>> import site
>>> site.getsitepackages()
['/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/site-packages',
 '/Library/Frameworks/Python.framework/Versions/3.2/lib/site-python',
 '/Library/Python/3.2/site-packages']
>>> site.getuserbase()
'/Users/raymondhettinger/Library/Python/3.2'
>>> site.getusersitepackages()
'/Users/raymondhettinger/Library/Python/3.2/lib/python/site-packages'
```

----------------------------------------

TITLE: PathFinder.invalidate_caches Method for Clearing Import Cache
DESCRIPTION: This class method invalidates the import system's internal caches by calling the invalidate_caches method on all path entry finders in sys.path_importer_cache. Entries set to None are deleted.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
invalidate_caches()
```

----------------------------------------

TITLE: Class Method Detection Example in Python
DESCRIPTION: Example showing how to detect methods in a class using the symtable module's get_methods() function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/symtable.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> import symtable
>>> st = symtable.symtable('''
... def outer(): pass
...
... class A:
...    def f():
...        def w(): pass
...
...    def g(self): pass
...
...    @classmethod
...    async def h(cls): pass
...
...    global outer
...    def outer(self): pass
... ''', 'test', 'exec')
>>> class_A = st.get_children()[2]
>>> class_A.get_methods()
('f', 'g', 'h')
```

----------------------------------------

TITLE: Iterating Over a List Using for Loop in Python
DESCRIPTION: This example demonstrates how to use a for loop to iterate over a list of words and print each word along with its length.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> # Measure some strings:
>>> words = ['cat', 'window', 'defenestrate']
>>> for w in words:
...     print(w, len(w))
...
cat 3
window 6
defenestrate 12
```

----------------------------------------

TITLE: Creating a Static Method Using the @staticmethod Decorator in Python
DESCRIPTION: Demonstrates how to create a static method in a class using the @staticmethod decorator. Static methods don't receive an implicit first argument and can be called on either the class or an instance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
class C:
    @staticmethod
    def f(arg1, arg2, argN): ...
```

----------------------------------------

TITLE: Changes in Import Mechanism and New APIs in importlib
DESCRIPTION: The content describes various enhancements in the import machinery provided by importlib, including the exposure of finder and loader classes along with changes in ImportError attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.3.rst#2025-04-21_snippet_8



----------------------------------------

TITLE: Exception Context Suppression
DESCRIPTION: Introduces the 'from None' syntax to suppress exception context, allowing cleaner error messages when converting between exception types
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.3.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
class D:
    def __init__(self, extra):
        self._extra_attributes = extra
    def __getattr__(self, attr):
        try:
            return self._extra_attributes[attr]
        except KeyError:
            raise AttributeError(attr) from None
```

----------------------------------------

TITLE: Formatting TracebackException Objects
DESCRIPTION: Returns a generator of formatted exception lines. When chain is True, it also formats the __cause__ and __context__ exceptions if present. Each returned string ends with a newline.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
TracebackException.format(*, chain=True)
```

----------------------------------------

TITLE: Generating XKCD-style Passphrase with Python secrets Module
DESCRIPTION: This snippet shows how to generate an XKCD-style passphrase by selecting random words from a dictionary file using secrets.choice().
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/secrets.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
import secrets
# On standard Linux systems, use a convenient dictionary file.
# Other platforms may need to provide their own word-list.
with open('/usr/share/dict/words') as f:
    words = [word.strip() for word in f]
    password = ' '.join(secrets.choice(words) for i in range(4))
```

----------------------------------------

TITLE: Fixing Windows signal handling regression
DESCRIPTION: Corrects a regression in Windows signal handling that prevented programs from being interrupted with CTRL+C. The fix allows signal handlers to run in threads different from the Python thread.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a3.rst#2025-04-21_snippet_13

LANGUAGE: C
CODE:
```
if (PyThread_get_thread_ident() != main_thread) {
    // Allow signal handling in non-main threads
}
```

----------------------------------------

TITLE: Converting tty Attributes to Cbreak Mode in Python
DESCRIPTION: The cfmakecbreak function converts a tty attribute list to cbreak mode. It clears the ECHO and ICANON flags, and sets the minimum input to 1 byte with no delay.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tty.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def cfmakecbreak(mode):
```

----------------------------------------

TITLE: Setting Syntax Error Location Object in C
DESCRIPTION: This function sets the file, line, and column offset information for the current exception. It is used to provide location details for SyntaxError exceptions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/exceptions.rst#2025-04-21_snippet_25

LANGUAGE: C
CODE:
```
"void PyErr_SyntaxLocationObject(PyObject *filename, int lineno, int col_offset)"
```

----------------------------------------

TITLE: Creating a Read-Only Property Using Decorator Syntax in Python
DESCRIPTION: Shows how to create a read-only property using the @property decorator. This example defines a voltage property in a Parrot class with a custom docstring.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
class Parrot:
    def __init__(self):
        self._voltage = 100000

    @property
    def voltage(self):
        """Get the current voltage."""
        return self._voltage
```

----------------------------------------

TITLE: Indicate Object Not Hashable (C API)
DESCRIPTION: Sets a `TypeError` indicating that the type of object `o` is not hashable and returns -1. This function is used in the `tp_hash` slot of a type object to explicitly mark a type as non-hashable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/object.rst#_snippet_34

LANGUAGE: c
CODE:
```
Py_hash_t PyObject_HashNotImplemented(PyObject *o)
```

----------------------------------------

TITLE: Using wsgiref.util.FileWrapper with a StringIO Object
DESCRIPTION: Shows how to use the FileWrapper class to convert a file-like object (in this case, a StringIO buffer) into an iterable. The wrapper reads the file-like object in chunks of specified size.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/wsgiref.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from io import StringIO
from wsgiref.util import FileWrapper

# We're using a StringIO-buffer for as the file-like object
filelike = StringIO("This is an example file-like object"*10)
wrapper = FileWrapper(filelike, blksize=5)

for chunk in wrapper:
    print(chunk)
```

----------------------------------------

TITLE: Delocalize a Numeric String in Python
DESCRIPTION: Converts a formatted numeric string into a normalized format based on current LC_NUMERIC settings. Introduced in version 3.5.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/locale.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
.. function:: delocalize(string)

    Converts a string into a normalized number string, following the
    :const:`LC_NUMERIC` settings.

    .. versionadded:: 3.5
```

----------------------------------------

TITLE: Binding Python HTTP Server to Specific Address
DESCRIPTION: This command runs a Python HTTP server bound to a specific IPv4 or IPv6 address, instead of all interfaces. It supports version 3.8 and later, with IPv6 support added in version 3.8. Users can specify the address using the --bind option.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.server.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
python -m http.server --bind 127.0.0.1
```

----------------------------------------

TITLE: mmap read_byte method
DESCRIPTION: The `read_byte()` method reads a single byte at the current file position as an integer and increments the file position by 1.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/mmap.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
".. method:: read_byte()\n\n   Returns a byte at the current file position as an integer, and advances\n   the file position by 1."
```

----------------------------------------

TITLE: Defining PyTypeObject Slot Inheritance Behavior in C
DESCRIPTION: This code snippet illustrates the inheritance behavior of PyTypeObject slots using a custom notation. It explains how PyType_Ready sets or inherits slot values based on different conditions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/typeobj.rst#2025-04-21_snippet_1

LANGUAGE: c
CODE:
```
X - PyType_Ready sets this value if it is NULL
~ - PyType_Ready always sets this value (it should be NULL)
? - PyType_Ready may set this value depending on other slots

Also see the inheritance column ("I").
```

----------------------------------------

TITLE: Set Membership Testing Optimization Example
DESCRIPTION: Example showing optimized set membership testing using set notation, which is now optimized by Python's peephole optimizer by recasting the set as a frozenset.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_77

LANGUAGE: python
CODE:
```
extension = name.rpartition('.')[2]
if extension in {'xml', 'html', 'xhtml', 'css'}:
    handle(name)
```

----------------------------------------

TITLE: Customizing Widget Layout in ttk
DESCRIPTION: Example demonstrating how to define a custom widget layout for a ttk Menubutton using the Style.layout method. This specifies the hierarchical structure of elements making up the widget.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_47

LANGUAGE: python
CODE:
```
from tkinter import ttk
import tkinter

root = tkinter.Tk()

style = ttk.Style()
style.layout("TMenubutton", [
   ("Menubutton.background", None),
   ("Menubutton.button", {"children":
       [("Menubutton.focus", {"children":
           [("Menubutton.padding", {"children":
               [("Menubutton.label", {"side": "left", "expand": 1})]
           })]
       })]
   }),
])

mbtn = ttk.Menubutton(text='Text')
mbtn.pack()
root.mainloop()
```

----------------------------------------

TITLE: Checking Boolean Type - PyBool_Check Function
DESCRIPTION: The PyBool_Check function checks if a given PyObject is of the type PyBool_Type, returning true for valid boolean objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/bool.rst#2025-04-21_snippet_1

LANGUAGE: C
CODE:
```
.. c:function:: int PyBool_Check(PyObject *o)

   Return true if *o* is of type :c:data:`PyBool_Type`.  This function always
   succeeds.
```

----------------------------------------

TITLE: Improving CSV Sniffer for Quoted Fields
DESCRIPTION: The csv.Sniffer.sniff() method has been improved to correctly guess quote and delimiter when only the last field is quoted. This enhances CSV parsing capabilities.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.7.0b2.rst#2025-04-21_snippet_24



----------------------------------------

TITLE: Implementing EntityResolver Method for SAX XML Parsing in Python
DESCRIPTION: Defines the resolveEntity method for the EntityResolver class to handle entity resolution during XML parsing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.sax.handler.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
def resolveEntity(publicId, systemId):
    """Resolve the system identifier of an entity and return either the system
    identifier to read from as a string, or an InputSource to read from. The default
    implementation returns *systemId*.
    """
    pass
```

----------------------------------------

TITLE: Getting Virtual Screen Cursor Position
DESCRIPTION: Function to get the current coordinates of the virtual screen cursor, returning a tuple of y,x coordinates or (-1,-1) if leaveok is True.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
y, x = getsyx()
```

----------------------------------------

TITLE: Walking Through Message Parts
DESCRIPTION: The walk method iterates over all message parts and subparts in a depth-first manner. This recursive approach is useful for thorough traversal and manipulation of message parts.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.compat32-message.rst#2025-04-21_snippet_21

LANGUAGE: Python
CODE:
```
".. method:: walk()\n\n      The :meth:`walk` method is an all-purpose generator which can be used to\n      iterate over all the parts and subparts of a message object tree."
```

----------------------------------------

TITLE: Getting User Site-Packages Directory
DESCRIPTION: Python code to locate the user's site-packages directory for customization module placement.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/appendix.rst#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> import site
>>> site.getusersitepackages()
'/home/user/.local/lib/python3.x/site-packages'
```

----------------------------------------

TITLE: Removing Macros from Limited C API
DESCRIPTION: The macros PySequence_Fast_GET_SIZE, PySequence_Fast_GET_ITEM, and PySequence_Fast_ITEMS have been removed from the limited C API because they never worked correctly in that context. PySequence_Fast remains available.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_52

LANGUAGE: C
CODE:
```
PySequence_Fast_GET_SIZE
```

LANGUAGE: C
CODE:
```
PySequence_Fast_GET_ITEM
```

LANGUAGE: C
CODE:
```
PySequence_Fast_ITEMS
```

----------------------------------------

TITLE: Retrieving Password Database Entry by UID with pwd Module in Python
DESCRIPTION: The `getpwuid` function from the `pwd` module returns the password database entry for a given numerical user ID. This function requires a UID as input and outputs the corresponding user's password database entry as a tuple-like object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pwd.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
getpwuid(uid)
```

----------------------------------------

TITLE: Return Month Calendar as String - Python
DESCRIPTION: This function converts a month's calendar into a multi-line string, making it suitable for text output or logging purposes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/calendar.rst#2025-04-21_snippet_17

LANGUAGE: Python
CODE:
```
.. function:: month(theyear, themonth, w=0, l=0)
```

----------------------------------------

TITLE: DateTime Type Definition in C
DESCRIPTION: This is the C type definition for a Python datetime object. It is a subtype of PyObject and represents a date and time with year, month, day, hour, minute, second, and microsecond attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/datetime.rst#2025-04-21_snippet_2

LANGUAGE: c
CODE:
```
"typedef struct {\n    PyObject_HEAD\n    /* Type-specific fields go here. */\n} PyDateTime_DateTime;"
```

----------------------------------------

TITLE: Using the Py_DEPRECATED Macro with MSVC in C Extensions
DESCRIPTION: Example showing proper syntax for marking C functions as deprecated in Python extensions using the Py_DEPRECATED macro, which is now implemented for Microsoft Visual C++ compiler.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_36

LANGUAGE: c
CODE:
```
Py_DEPRECATED(3.8) PyAPI_FUNC(int) Py_OldFunction(void);
```

----------------------------------------

TITLE: Using __index__ for k/K Formats in PyArg_ParseTuple C API
DESCRIPTION: The 'k' and 'K' formats in PyArg_ParseTuple and similar functions now use the object.__index__ method if available, aligning their behavior with other integer formats.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_45

LANGUAGE: C
CODE:
```
PyArg_ParseTuple
```

----------------------------------------

TITLE: Displaying Full Python Grammar Specification using PEG Notation
DESCRIPTION: This code snippet includes the entire Python grammar specification using a mixture of EBNF and PEG notation. It is sourced directly from the Grammar/python.gram file used in CPython parser generation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/grammar.rst#2025-04-21_snippet_0

LANGUAGE: peg
CODE:
```
.. literalinclude:: ../../Grammar/python.gram
  :language: peg
```

----------------------------------------

TITLE: Hidden File Pattern Matching in Python
DESCRIPTION: Example showing how glob handles hidden files (those starting with a dot). By default, hidden files are only matched by patterns that explicitly start with a dot.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/glob.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> import glob
>>> glob.glob('*.gif')
['card.gif']
>>> glob.glob('.c*')
['.card.gif']
```

----------------------------------------

TITLE: Email Address Group Creation in Python
DESCRIPTION: Shows how to create email address groups and manage multiple recipients with display names and domain information.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.3.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
>>> m['cc'] = [Group('pals', [Address('Bob', 'bob', 'example.com'),
...                           Address('Sally', 'sally', 'example.com')]),
...            Address('Bonzo', addr_spec='bonz@laugh.com')]
```

----------------------------------------

TITLE: Defining a Constrained TypeVar (New Syntax)
DESCRIPTION: Shows the modern syntax for defining a type variable constrained to specific types using the `:` syntax with a tuple within a generic class definition.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_98

LANGUAGE: python
CODE:
```
class StrOrBytesSequence[A: (str, bytes)]:  # A is a TypeVar constrained to str or bytes
    ...
```

----------------------------------------

TITLE: Extend Type Instance Layout - Py_RELATIVE_OFFSET - C
DESCRIPTION: A new macro added to allow defining members (PyMemberDef) in terms of a subclass-specific struct when extending types with opaque instance memory (PEP 697).
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_57

LANGUAGE: C
CODE:
```
Py_RELATIVE_OFFSET
```

----------------------------------------

TITLE: Modifying PyIter_Check to Function in C API
DESCRIPTION: Changes PyIter_Check from a macro to a function in the C API. This modification hides implementation details, specifically the direct access to PyTypeObject.tp_iternext.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a6.rst#2025-04-21_snippet_3

LANGUAGE: C
CODE:
```
PyIter_Check is now always declared as a function, in order to hide implementation details. The macro accessed PyTypeObject.tp_iternext directly.
```

----------------------------------------

TITLE: Example of Multiple Inheritance Hierarchy in Python
DESCRIPTION: Code example defining a multi-level inheritance hierarchy with classes A through F, used to demonstrate how the C3 method resolution order works with complex inheritance relationships.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/mro.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> O = object
>>> class F(O): pass
>>> class E(O): pass
>>> class D(O): pass
>>> class C(D,F): pass
>>> class B(D,E): pass
>>> class A(B,C): pass
```

----------------------------------------

TITLE: Configuring and Building Python on Unix-like Systems
DESCRIPTION: Instructions for configuring, building, testing, and installing Python on Unix, Linux, BSD, macOS, and Cygwin systems. This process installs Python as 'python3'.
SOURCE: https://github.com/python/cpython/blob/main/README.rst#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```
./configure
make
make test
sudo make install
```

----------------------------------------

TITLE: Iterator Next Item Retrieval in C
DESCRIPTION: Function to get the next value from an iterator with strong reference semantics. Returns 1 on success, 0 when exhausted, and -1 on error. Added in Python 3.14.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/iter.rst#2025-04-21_snippet_2

LANGUAGE: c
CODE:
```
int PyIter_NextItem(PyObject *iter, PyObject **item)
```

----------------------------------------

TITLE: Safely Accessing Annotations in Python 3.9 and Earlier
DESCRIPTION: A code pattern for safely accessing the '__annotations__' attribute on any object in Python 3.9 and earlier. This handles the special case for class objects to prevent inheriting annotations from base classes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/annotations.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
if isinstance(o, type):
    ann = o.__dict__.get('__annotations__', None)
else:
    ann = getattr(o, '__annotations__', None)
```

----------------------------------------

TITLE: Getting Last Access Time with os.path
DESCRIPTION: The getatime function returns the last access time of the specified path in seconds since the epoch. It raises OSError for non-existent or inaccessible files.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
def getatime(path):
    return os.path.getatime(path)
```

----------------------------------------

TITLE: Itertools Advanced Functionality
DESCRIPTION: Showcases new itertools functions for generating combinations, permutations, and Cartesian products with flexible iteration strategies.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_34

LANGUAGE: python
CODE:
```
import itertools
print(list(itertools.combinations('123', 2)))
print(list(itertools.product([1,2], [3,4])))
print(list(itertools.izip_longest([1,2,3], [1,2,3,4,5])))
```

----------------------------------------

TITLE: Defining PyTypeObject Slot Inheritance Types in C
DESCRIPTION: This code snippet defines different types of inheritance for PyTypeObject slots. It explains how slots are inherited or set by PyType_Ready under various conditions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/typeobj.rst#2025-04-21_snippet_2

LANGUAGE: c
CODE:
```
X - type slot is inherited via *PyType_Ready* if defined with a *NULL* value
% - the slots of the sub-struct are inherited individually
G - inherited, but only in combination with other slots; see the slot's description
? - it's complicated; see the slot's description
```

----------------------------------------

TITLE: Retrieving Content Disposition Header
DESCRIPTION: This function returns the lowercase value of the Content-Disposition header without parameters. It checks for `inline`, `attachment`, or follows RFC 2183 and aids in managing attachments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.compat32-message.rst#2025-04-21_snippet_20

LANGUAGE: Python
CODE:
```
".. method:: get_content_disposition()\n\n      Return the lowercased value (without parameters) of the message\'s\n      :mailheader:`Content-Disposition` header."
```

----------------------------------------

TITLE: Updating Valgrind Suppression List in Python Core
DESCRIPTION: The Valgrind suppression list has been updated to reflect the rename of 'Py_ADDRESS_IN_RANG' to 'address_in_range'. This change ensures proper memory leak detection when using Valgrind.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.7.0b2.rst#2025-04-21_snippet_1



----------------------------------------

TITLE: Removing Unsupported TCP Flags on Older Windows Versions
DESCRIPTION: TCP_FASTOPEN, TCP_KEEPCNT, TCP_KEEPIDLE, and TCP_KEEPINTVL flags are now removed on older Windows versions during runtime. This improves compatibility with different Windows versions.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.7.0b2.rst#2025-04-21_snippet_22



----------------------------------------

TITLE: Creating Argument Groups with argparse (Python)
DESCRIPTION: Demonstrates creating custom argument groups using `ArgumentParser.add_argument_group` to organize arguments in help messages, overriding the default "positional" and "options" grouping.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_85

LANGUAGE: Python
CODE:
```
parser = argparse.ArgumentParser(prog='PROG', add_help=False)
group = parser.add_argument_group('group')
group.add_argument('--foo', help='foo help')
```

----------------------------------------

TITLE: Handling Optional Arguments with getopt in Python
DESCRIPTION: Example showing how to specify and handle optional arguments with getopt using :: and =? syntax
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/getopt.rst#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> s = '-Con -C --color=off --color a1 a2'
>>> args = s.split()
>>> args
['-Con', '-C', '--color=off', '--color', 'a1', 'a2']
>>> optlist, args = getopt.getopt(args, 'C::', ['color=?'])
>>> optlist
[('-C', 'on'), ('-C', ''), ('--color', 'off'), ('--color', '')]
>>> args
['a1', 'a2']
```

----------------------------------------

TITLE: DefragResult Class Definition
DESCRIPTION: DefragResult is a concrete class for urldefrag results containing string data. It provides an encode method that returns a DefragResultBytes instance. This class is used when operating on string objects and represents the result of defragmenting a URL.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.parse.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
.. class:: DefragResult(url, fragment)

   Concrete class for :func:`urldefrag` results containing :class:`str`
   data. The :meth:`encode` method returns a :class:`DefragResultBytes`
   instance.

   .. versionadded:: 3.2

```

----------------------------------------

TITLE: Parsing Long Command Line Options with getopt in Python
DESCRIPTION: Example demonstrating parsing of long format command line options using getopt
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/getopt.rst#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> s = '--condition=foo --testing --output-file abc.def -x a1 a2'
>>> args = s.split()
>>> args
['--condition=foo', '--testing', '--output-file', 'abc.def', '-x', 'a1', 'a2']
>>> optlist, args = getopt.getopt(args, 'x', [
...     'condition=', 'output-file=', 'testing'])
>>> optlist
[('--condition', 'foo'), ('--testing', ''), ('--output-file', 'abc.def'), ('-x', '')]
>>> args
['a1', 'a2']
```

----------------------------------------

TITLE: Monte Carlo Simulation Input Generation
DESCRIPTION: Shows how to generate input samples for Monte Carlo simulation using NormalDist.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
>>> def model(x, y, z):
...     return (3*x + 7*x*y - 5*y) / (11 * z)
...
>>> n = 100_000
>>> X = NormalDist(10, 2.5).samples(n, seed=3652260728)
>>> Y = NormalDist(15, 1.75).samples(n, seed=4582495471)
>>> Z = NormalDist(50, 1.25).samples(n, seed=6582483453)
```

----------------------------------------

TITLE: Removed C API Functions from pyarena.h
DESCRIPTION: List of undocumented C API functions that were removed from pyarena.h header file. These functions were only used internally by the compiler and were excluded from the limited C API.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_28

LANGUAGE: c
CODE:
```
PyArena_New()
PyArena_Free()
PyArena_Malloc()
PyArena_AddPyObject()
```

----------------------------------------

TITLE: Extend Type Instance Layout - PyType_GetTypeDataSize - C
DESCRIPTION: A new function added to allow access to the size of subclass-specific instance data when extending types with opaque instance memory (PEP 697).
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_54

LANGUAGE: C
CODE:
```
PyType_GetTypeDataSize
```

----------------------------------------

TITLE: Converting Py_TYPE and Py_SIZE Back to Macros in C API
DESCRIPTION: Py_TYPE and Py_SIZE are converted back to macros to allow using them as l-values, enabling third-party extensions to set object type and size directly.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a3.rst#2025-04-21_snippet_23

LANGUAGE: C
CODE:
```
Py_TYPE(obj) = type;
Py_SIZE(obj) = size;
```

----------------------------------------

TITLE: Implementing Old Sum of Products with Old_sumprod_recipe in Python
DESCRIPTION: Provides an implementation for computing the sum of products of elements from two vectors using a zip and starmap approach.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_89

LANGUAGE: Python
CODE:
```
def old_sumprod_recipe(vec1, vec2):
    "Compute a sum of products."
    return sum(starmap(operator.mul, zip(vec1, vec2, strict=True)))
```

----------------------------------------

TITLE: SSL Client Data Processing Function in Python
DESCRIPTION: Defines a function to handle client data reception and processing in a server context.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_36

LANGUAGE: python
CODE:
```
def deal_with_client(connstream):
    data = connstream.recv(1024)
    # empty data means the client is finished with us
    while data:
        if not do_something(connstream, data):
            # we'll assume do_something returns False
            # when we're finished with client
            break
        data = connstream.recv(1024)
```

----------------------------------------

TITLE: Using isalnum Method in Python bytes Objects
DESCRIPTION: Demonstrates the isalnum() method which checks if all bytes in the sequence are alphabetical ASCII characters or ASCII decimal digits and the sequence is not empty.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_54

LANGUAGE: python
CODE:
```
>>> b'ABCabc1'.isalnum()
True
>>> b'ABC abc1'.isalnum()
False
```

----------------------------------------

TITLE: Implementing Class Method in Python Using Decorator
DESCRIPTION: Example showing how to define and use a class method using the @classmethod decorator. Class methods prepend the class reference to the argument list before calling the function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
class F:
    @classmethod
    def f(cls, x):
        return cls.__name__, x
```

----------------------------------------

TITLE: Descriptor Get Function Signature in C
DESCRIPTION: Defines the function signature for the tp_descr_get member of the PyTypeObject structure, which is used for descriptor get operations. It takes self, obj, and type as arguments and returns a PyObject.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/typeobj.rst#2025-04-21_snippet_37

LANGUAGE: C
CODE:
```
"PyObject * tp_descr_get(PyObject *self, PyObject *obj, PyObject *type);"
```

----------------------------------------

TITLE: Convert Float to Double Without Error Check (PyFloat_AS_DOUBLE)
DESCRIPTION: Returns a C double representation of the contents of the PyObject 'pyfloat'. This is a macro that performs the conversion without error checking. Use with caution.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/float.rst#_snippet_7

LANGUAGE: C
CODE:
```
double PyFloat_AS_DOUBLE(PyObject *pyfloat)
```

----------------------------------------

TITLE: Declaring Platform Incompatibility in reStructuredText
DESCRIPTION: A reStructuredText directive that specifies module unavailability on Android, iOS and WASI platforms. Includes references to mobile and WebAssembly platform documentation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/includes/wasm-mobile-notavail.rst#2025-04-21_snippet_0

LANGUAGE: rst
CODE:
```
.. availability:: not Android, not iOS, not WASI.

   This module is not supported on :ref:`mobile platforms <mobile-availability>`
   or :ref:`WebAssembly platforms <wasm-availability>`.
```

----------------------------------------

TITLE: FlagBoundary Modes in Python Enums
DESCRIPTION: Demonstrates different boundary handling modes for Flag classes including STRICT, CONFORM, EJECT, and KEEP
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/enum.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
from enum import Flag, STRICT, CONFORM, EJECT, KEEP, auto

class StrictFlag(Flag, boundary=STRICT):
    RED = auto()
    GREEN = auto()
    BLUE = auto()

class ConformFlag(Flag, boundary=CONFORM):
    RED = auto()
    GREEN = auto()
    BLUE = auto()
```

----------------------------------------

TITLE: Setting PYTHONMALLOCSTATS environment variable in Python
DESCRIPTION: The PYTHONMALLOCSTATS environment variable can now be used to get memory allocation statistics, even when Python is compiled in release mode. It has no effect if set to an empty string.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.6.0a1.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
PYTHONMALLOCSTATS=1
```

----------------------------------------

TITLE: Calculating Sum of Squares in Python
DESCRIPTION: The sum_of_squares function computes the sum of the squares of input values. It uses the sumprod function and tee from itertools to efficiently calculate the result.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_49

LANGUAGE: python
CODE:
```
def sum_of_squares(iterable):
    "Add up the squares of the input values."
    # sum_of_squares([10, 20, 30]) → 1400
    return sumprod(*tee(iterable))
```

----------------------------------------

TITLE: Tracking Await Count with AsyncMock
DESCRIPTION: Demonstrates how the await_count attribute of AsyncMock keeps track of how many times the mock object has been awaited.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_34

LANGUAGE: python
CODE:
```
>>> mock = AsyncMock()
>>> async def main():
...     await mock()
...
>>> asyncio.run(main())
>>> mock.await_count
1
>>> asyncio.run(main())
>>> mock.await_count
2
```

----------------------------------------

TITLE: Checking Type of __file__ Attribute in Python
DESCRIPTION: This snippet demonstrates how to verify that the __file__ attribute exists and is a string type in Python. The __file__ attribute typically contains the path to the current Python module file.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/test_doctest/test_doctest3.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> type(__file__)
<class 'str'>
```

----------------------------------------

TITLE: Defining PathEntryFinder Abstract Base Class in Python
DESCRIPTION: An abstract base class for path entry finders in Python's import system. It defines methods for finding module specs and invalidating caches.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
class PathEntryFinder:
    def find_spec(fullname, target=None):
        pass

    def invalidate_caches():
        pass
```

----------------------------------------

TITLE: Using window.subpad() Method in Python Curses
DESCRIPTION: Returns a sub-pad within a pad window. The sub-pad has its upper-left corner at the specified coordinates and can have a defined width and height.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_99

LANGUAGE: python
CODE:
```
window.subpad(begin_y, begin_x)
window.subpad(nlines, ncols, begin_y, begin_x)
```

----------------------------------------

TITLE: Check if Object is Unicode or Subtype in C
DESCRIPTION: Checks if a given PyObject is a Python Unicode object or an instance of a Unicode subtype. This function is always successful and returns true (non-zero) if the object is a Unicode type, false (zero) otherwise.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/unicode.rst#_snippet_4

LANGUAGE: c
CODE:
```
int PyUnicode_Check(PyObject *obj)
```

----------------------------------------

TITLE: In-Memory Archive Update
DESCRIPTION: Shows how to update an archive file in-place using BytesIO buffer for temporary storage
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/zipapp.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> import zipapp
>>> import io
>>> temp = io.BytesIO()
>>> zipapp.create_archive('myapp.pyz', temp, '/usr/bin/python2')
>>> with open('myapp.pyz', 'wb') as f:
>>>     f.write(temp.getvalue())
```

----------------------------------------

TITLE: Adding newline Parameter to Path.write_text() in Python
DESCRIPTION: Adds a newline parameter to the pathlib.Path.write_text() method for controlling line endings when writing text files.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a2.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
pathlib.Path.write_text()
```

----------------------------------------

TITLE: Using b32hexdecode in Python
DESCRIPTION: Similar to b32decode but uses the Extended Hex Alphabet as defined in RFC 4648. Does not allow digit-to-letter mappings as all characters are part of the Extended Hex Alphabet.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/base64.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
b32hexdecode(s, casefold=False)
```

----------------------------------------

TITLE: Accessing XML-RPC Server Through HTTP Proxy in Python
DESCRIPTION: Example showing how to access an XML-RPC server through an HTTP proxy by defining a custom transport class. The ProxiedTransport class extends xmlrpc.client.Transport to enable connections through proxy servers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xmlrpc.client.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
import http.client
import xmlrpc.client

class ProxiedTransport(xmlrpc.client.Transport):

    def set_proxy(self, host, port=None, headers=None):
        self.proxy = host, port
        self.proxy_headers = headers

    def make_connection(self, host):
        connection = http.client.HTTPConnection(*self.proxy)
        connection.set_tunnel(host, headers=self.proxy_headers)
        self._connection = host, connection
        return connection

transport = ProxiedTransport()
transport.set_proxy('proxy-server', 8080)
server = xmlrpc.client.ServerProxy('http://betty.userland.com', transport=transport)
print(server.examples.getStateName(41))
```

----------------------------------------

TITLE: Using Slice Objects Directly
DESCRIPTION: Demonstrates how to pass slice objects to the __getitem__ method of sequences or use them directly in subscripts for extended slicing operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.3.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
>>> range(10).__getitem__(slice(0, 5, 2))
[0, 2, 4]

>>> range(10)[slice(0, 5, 2)]
[0, 2, 4]
```

----------------------------------------

TITLE: Custom Path Class in Python with Session ID
DESCRIPTION: Demonstrates how to create a custom path class that inherits from PurePosixPath and maintains a session ID across path operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
from pathlib import PurePosixPath

class MyPath(PurePosixPath):
    def __init__(self, *pathsegments, session_id):
        super().__init__(*pathsegments)
        self.session_id = session_id

    def with_segments(self, *pathsegments):
        return type(self)(*pathsegments, session_id=self.session_id)

etc = MyPath('/etc', session_id=42)
hosts = etc / 'hosts'
print(hosts.session_id)  # 42
```

----------------------------------------

TITLE: Adding PyType_GetName Function to C API
DESCRIPTION: Introduces a new function PyType_GetName to get a type's short name. This allows retrieving a type name without accessing internal structure fields directly.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a1.rst#2025-04-21_snippet_43

LANGUAGE: C
CODE:
```
PyType_GetName
```

----------------------------------------

TITLE: Pausing Writing in BaseProtocol for Python
DESCRIPTION: This method is called when the transport's buffer goes over the high watermark, indicating that writing should be paused.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
BaseProtocol.pause_writing()
```

----------------------------------------

TITLE: Handle struct.error for Out-of-Range Integer Packing in Python
DESCRIPTION: Shows how the `struct` module raises a `struct.error` when attempting to pack an integer value that is outside the valid range for the specified format character ('h' in this case).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/struct.rst#_snippet_4

LANGUAGE: Python
CODE:
```
pack(">h", 99999)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
struct.error: 'h' format requires -32768 <= number <= 32767
```

----------------------------------------

TITLE: Macros for ByteArray Operations in C
DESCRIPTION: Macros designed for speed over safety, providing similar functionality to functions but without null-checking. `PyByteArray_AS_STRING` and `PyByteArray_GET_SIZE` do not perform any error checking, offering faster performance.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/bytearray.rst#2025-04-21_snippet_3

LANGUAGE: c
CODE:
```
char* PyByteArray_AS_STRING(PyObject *bytearray)
```

LANGUAGE: c
CODE:
```
Py_ssize_t PyByteArray_GET_SIZE(PyObject *bytearray)
```

----------------------------------------

TITLE: Accessing DOM Document Elements
DESCRIPTION: Example of accessing document elements and their properties after parsing XML content.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.dom.minidom.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
dom3 = parseString("<myxml>Some data</myxml>")
assert dom3.documentElement.tagName == "myxml"
```

----------------------------------------

TITLE: Enable Argument Suggestion on Error in argparse (Attribute)
DESCRIPTION: Demonstrates how to enable the `suggest_on_error` feature by setting the attribute on the `ArgumentParser` instance after initialization. This method is useful for maintaining compatibility with older Python versions where the keyword argument might not be available.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_23

LANGUAGE: Python
CODE:
```
import argparse

parser = argparse.ArgumentParser(description='Process some integers.')
parser.suggest_on_error = True
```

----------------------------------------

TITLE: Creating HTMLCalendar Object - Python
DESCRIPTION: Creates an HTMLCalendar object for generating HTML formatted calendars. Accepts firstweekday parameter to set the starting day of the week (0=Monday, 6=Sunday).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/calendar.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
HTMLCalendar(firstweekday=0)
```

----------------------------------------

TITLE: Python Unpacking Assignment Error Message
DESCRIPTION: This example illustrates the enhanced error message for unpacking assignment failures. When the number of values doesn't match the number of variables, the error now clearly states the expected and received counts.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_9

LANGUAGE: python
CODE:
```
>>> x, y, z = 1, 2, 3, 4
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    x, y, z = 1, 2, 3, 4
    ^^^^^^^
ValueError: too many values to unpack (expected 3, got 4)
```

----------------------------------------

TITLE: Pending Deprecation of the imp Module - Python
DESCRIPTION: The `imp` module is set for deprecation, with no current schedule for removal, but users are advised to migrate to the importlib module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.4.rst#2025-04-21_snippet_30

LANGUAGE: Python
CODE:
```
* The :mod:`!imp` module is pending deprecation.
```

----------------------------------------

TITLE: Improve HTTPResponse.read performance
DESCRIPTION: This entry describes an improvement to the performance of `HTTPResponse.read` when reading a specific amount of data. This optimization enhances the efficiency of reading from HTTP responses, leading to faster data retrieval.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a1.rst#2025-04-21_snippet_48



----------------------------------------

TITLE: Setting Program Name C-API (Deprecated)
DESCRIPTION: Sets the interpreter's program name, which is typically the value of `argv[0]`. This function should be called before `Py_Initialize` and points to static storage that won't change. It is used by other path-finding functions but is deprecated; use the `PyConfig.program_name` member instead. This function was deprecated in 3.11 and removed in 3.15.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/init.rst#_snippet_17

LANGUAGE: C
CODE:
```
void Py_SetProgramName(const wchar_t *name)
```

----------------------------------------

TITLE: Enhancing email date parsing robustness
DESCRIPTION: An enhancement to email date parsing has been implemented to better handle malformed input, such as whitespace-only `Date:` headers.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a1.rst#2025-04-21_snippet_21



----------------------------------------

TITLE: Purging All Managed Runtimes with py Command Line
DESCRIPTION: Demonstrates using the `py uninstall` command with the `--purge` option. This command removes all Python runtimes managed by the install manager and cleans up associated system entries like Start menu shortcuts, registry keys, and download caches.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/windows.rst#_snippet_10

LANGUAGE: Shell
CODE:
```
$> py uninstall [-y|--yes] --purge
```

----------------------------------------

TITLE: Handling EOF Received in Protocol for Python
DESCRIPTION: This method is called when the other end signals it won't send any more data. It may return a false value to close the transport, or a true value to keep it open, depending on the protocol used.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
Protocol.eof_received()
```

----------------------------------------

TITLE: Using urllib.parse with IPv6 Addresses
DESCRIPTION: Example of using the urlparse function to parse URLs containing IPv6 addresses according to RFC 2732.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_72

LANGUAGE: python
CODE:
```
>>> import urllib.parse
>>> urllib.parse.urlparse('http://[dead:beef:cafe:5417:affe:8FA3:deaf:feed]/foo/') # doctest: +NORMALIZE_WHITESPACE
ParseResult(scheme='http',
            netloc='[dead:beef:cafe:5417:affe:8FA3:deaf:feed]',
            path='/foo/',
            params='',
            query='',
            fragment='')
```

----------------------------------------

TITLE: List Contents of tar Archive via tarfile CLI - Shell
DESCRIPTION: This command uses the `tarfile` module's command-line interface (`-m tarfile`) with the list option (`-l`) to display a list of the files contained within the specified tar archive (`monty.tar`).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_29

LANGUAGE: Shell
CODE:
```
$ python -m tarfile -l monty.tar
```

----------------------------------------

TITLE: Generalized Iterable Unpacking in Yield/Return
DESCRIPTION: Demonstrates the new syntax for generalized iterable unpacking in yield and return statements without requiring enclosing parentheses.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
>>> def parse(family):
...     lastname, *members = family.split()
...     return lastname.upper(), *members
...
>>> parse('simpsons homer marge bart lisa maggie')
('SIMPSONS', 'homer', 'marge', 'bart', 'lisa', 'maggie')
```

----------------------------------------

TITLE: XML XInclude Example for Including XML Documents
DESCRIPTION: An example XML document that demonstrates how to include another XML file using XInclude directives. The example uses the 'parse="xml"' attribute to specify that the included content should be parsed as XML.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.etree.elementtree.rst#2025-04-21_snippet_19

LANGUAGE: xml
CODE:
```
<?xml version="1.0"?>
<document xmlns:xi="http://www.w3.org/2001/XInclude">
  <xi:include href="source.xml" parse="xml" />
</document>
```

----------------------------------------

TITLE: Getting a Single Character Input with Curses
DESCRIPTION: The loop continuously fetches user input via the getch() method of the stdscr object, allowing the user to trigger different actions based on the key pressed. This method handles special keys by checking their integer values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/curses.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
while True:
    c = stdscr.getch()
    if c == ord('p'):
        PrintDocument()
    elif c == ord('q'):
        break  # Exit the while loop
    elif c == curses.KEY_HOME:
        x = y = 0
```

----------------------------------------

TITLE: Defining IncrementalEncoder Class Constructor Python
DESCRIPTION: Constructor for an IncrementalEncoder instance, used for encoding input in multiple steps. It accepts an optional 'errors' keyword argument for error handling, which is stored as an attribute.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/codecs.rst#_snippet_21

LANGUAGE: Python
CODE:
```
class IncrementalEncoder(errors='strict'):
```

----------------------------------------

TITLE: Using turtle.circle in Python
DESCRIPTION: Demonstrates drawing a full circle and a semicircle using `turtle.circle`. Shows drawing a circle with radius 50 and then a semicircle with radius 120 and extent 180 degrees, verifying the turtle's position and heading after each drawing operation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_29

LANGUAGE: Python
CODE:
```
>>> turtle.home()
>>> turtle.position()
(0.00,0.00)
>>> turtle.heading()
0.0
>>> turtle.circle(50)
>>> turtle.position()
(-0.00,0.00)
>>> turtle.heading()
0.0
>>> turtle.circle(120, 180)  # draw a semicircle
>>> turtle.position()
(0.00,240.00)
>>> turtle.heading()
180.0
```

----------------------------------------

TITLE: Yielding Current Key and Group
DESCRIPTION: This snippet yields the current key and its associated group of elements, and checks if the current key matches a target key to perform operations on its group elements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
          yield curr_key, curr_group
          if curr_key == target_key:
              for _ in curr_group:
                  pass
```

----------------------------------------

TITLE: Creating SocketHandler Class - Python
DESCRIPTION: SocketHandler is designed to send logging output to a network socket, supporting TCP connections. This class connects to a specified host and port for log transmission.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
class SocketHandler(host, port):
    Returns a new instance of the :class:`SocketHandler` class intended to
    communicate with a remote machine whose address is given by *host* and *port*.
```

----------------------------------------

TITLE: Begin Allowing Threads (Release GIL) C Macro
DESCRIPTION: This macro expands to C code that saves the current thread state and releases the Global Interpreter Lock (GIL), allowing other threads to run Python code. It is typically used around operations that might block or take a long time, ensuring CPU-bound native code doesn't hold up other Python threads. It must be paired with `Py_END_ALLOW_THREADS`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/init.rst#_snippet_28

LANGUAGE: C
CODE:
```
{ PyThreadState *_save; _save = PyEval_SaveThread();
```

----------------------------------------

TITLE: Inferring dest for Positional Arguments in Python argparse
DESCRIPTION: Illustrates how the 'dest' attribute name for a positional argument is typically inferred directly from the argument name provided to argparse.add_argument when parsing command-line arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_60

LANGUAGE: python
CODE:
```
parser = argparse.ArgumentParser()
parser.add_argument('bar')
parser.parse_args(['XXX'])
```

----------------------------------------

TITLE: Customizing Turtle Screen - Python
DESCRIPTION: Illustrates how to access and customize the graphics screen associated with a `Turtle` object in the object-oriented approach. Examples include setting the window title and background color using methods like `t.screen.title()` and `t.screen.bgcolor()`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_18

LANGUAGE: Python
CODE:
```
t.screen.title('Object-oriented turtle demo')
t.screen.bgcolor("orange")
```

----------------------------------------

TITLE: Parsing Lambda Expression in Python AST
DESCRIPTION: This snippet demonstrates how a simple lambda expression is represented in the AST. The `ast.dump` output shows a `Module` containing an `Expr` node whose value is a `Lambda` node, capturing the arguments and the body.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_52

LANGUAGE: python
CODE:
```
>>> print(ast.dump(ast.parse('lambda x,y: ...'), indent=4))
Module(
    body=[
        Expr(
            value=Lambda(
                args=arguments(
                    args=[
                        arg(arg='x'),
                        arg(arg='y')]),
                body=Constant(value=Ellipsis)))])
```

----------------------------------------

TITLE: Convert IDNA Label to Unicode (Python)
DESCRIPTION: Converts an ASCII Compatible Encoding (ACE) domain label back into its original Unicode representation. This conversion follows the specifications outlined in RFC 3490.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/codecs.rst#_snippet_25

LANGUAGE: Python
CODE:
```
ToUnicode(label)
```

----------------------------------------

TITLE: Check if Integer is Positive in C
DESCRIPTION: This function checks if a Python integer object is positive. It returns 1 if the object is positive, 0 if it is non-positive, and -1 with an exception set if the object is not a PyLongObject or its subtype.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/long.rst#2025-04-21_snippet_14

LANGUAGE: C
CODE:
```
".. c:function:: int PyLong_IsPositive(PyObject *obj)

   Check if the integer object *obj* is positive (``obj > 0``).

   If *obj* is an instance of :c:type:`PyLongObject` or its subtype,
   return ``1`` when it's positive and ``0`` otherwise.  Else set an
   exception and return ``-1``.

   .. versionadded:: 3.14"
```

----------------------------------------

TITLE: Setting Default Content Type in Python
DESCRIPTION: This method sets the default content type to either text/plain or message/rfc822. It does not enforce constraints but allows for a specified default type, providing flexibility in message handling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.compat32-message.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
".. method:: set_default_type(ctype)\n\n      Set the default content type.  *ctype* should either be\n      :mimetype:`text/plain` or :mimetype:`message/rfc822`, although this is not\n      enforced."
```

----------------------------------------

TITLE: Check Object Attribute String with Error (C)
DESCRIPTION: Same as PyObject_HasAttrWithError, but *attr_name* is a `const char*` UTF-8 encoded string instead of a `PyObject*`. Returns 1 if *o* has the attribute *attr_name*, 0 otherwise, and -1 on failure. Added in version 3.13.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/object.rst#_snippet_17

LANGUAGE: c
CODE:
```
int PyObject_HasAttrStringWithError(PyObject *o, const char *attr_name)
```

----------------------------------------

TITLE: Checking for Linux Platform in Python
DESCRIPTION: Code example showing how to correctly check for Linux platform in Python 3.3+. The string 'linux2' was replaced with just 'linux' in Python 3.3.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.3.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
# Old code (pre-Python 3.3)
if sys.platform == 'linux2':
    # Linux-specific code
    pass

# New code (Python 3.3+)
if sys.platform.startswith('linux'):
    # Linux-specific code
    pass

# Or if not supporting older Python versions
if sys.platform == 'linux':
    # Linux-specific code
    pass
```

----------------------------------------

TITLE: Class Generic Over TypeVar and ParamSpec (Python)
DESCRIPTION: Demonstrates defining a class generic over both a `TypeVar` (`T`) and a `ParamSpec` (`P`) and shows how it is instantiated in a console session.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_39

LANGUAGE: Python
CODE:
```
class Z[T, **P]: ...
...
Z[int, [dict, float]]
__main__.Z[int, [dict, float]]
```

----------------------------------------

TITLE: Replace Function Usage - Python
DESCRIPTION: Creates a new object of the same type as the input, replacing specified fields with new values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/copy.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
replace(obj, /, **changes)
```

----------------------------------------

TITLE: Querying Widget Configuration in Tkinter
DESCRIPTION: Example of printing widget configuration information using the config() method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
>>> print(fred.config())
{'relief': ('relief', 'relief', 'Relief', 'raised', 'groove')}
```

----------------------------------------

TITLE: Implementing Reflected Binary Arithmetic Operators in Python
DESCRIPTION: These methods implement binary arithmetic operations with reflected (swapped) operands. They are called if the left operand doesn't support the operation or returns `NotImplemented`, and the operands are of different types. `__rpow__` supports an optional third argument for the three-argument `pow` function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_24

LANGUAGE: Python
CODE:
```
object.__radd__(self, other)
object.__rsub__(self, other)
object.__rmul__(self, other)
object.__rmatmul__(self, other)
object.__rtruediv__(self, other)
object.__rfloordiv__(self, other)
object.__rmod__(self, other)
object.__rdivmod__(self, other)
object.__rpow__(self, other[, modulo])
object.__rlshift__(self, other)
object.__rrshift__(self, other)
object.__rand__(self, other)
object.__rxor__(self, other)
object.__ror__(self, other)
```

----------------------------------------

TITLE: C Function Signature for Call Function
DESCRIPTION: This code snippet defines the function signature for the call function, which is used to call an object. The function takes a PyObject pointer (self), a PyObject pointer for arguments (args), and a PyObject pointer for keyword arguments (kwargs) as input, and returns a PyObject pointer representing the result of the call.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/typeobj.rst#2025-04-21_snippet_10

LANGUAGE: C
CODE:
```
"PyObject *tp_call(PyObject *self, PyObject *args, PyObject *kwargs);"
```

----------------------------------------

TITLE: Defining encode Method on Codec Class Python
DESCRIPTION: Encodes the input object and returns a tuple (output object, length consumed). The 'errors' argument defines the error handling strategy, defaulting to 'strict'. This method must handle zero-length input.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/codecs.rst#_snippet_19

LANGUAGE: Python
CODE:
```
encode(input, errors='strict')
```

----------------------------------------

TITLE: Sending Pickled Data via UDP
DESCRIPTION: This method pickles the record's attribute dictionary and writes it to the socket in binary format. If there's an error with the socket, the packet is silently dropped. To unpickle the record at the receiving end, use the :func:`~logging.makeLogRecord` function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
   .. method:: emit()

      Pickles the record's attribute dictionary and writes it to the socket in
      binary format. If there is an error with the socket, silently drops the
      packet. To unpickle the record at the receiving end into a
      :class:`~logging.LogRecord`, use the :func:`~logging.makeLogRecord`
      function.
```

----------------------------------------

TITLE: Example Python Code for Pdb Display Command
DESCRIPTION: A simple Python script demonstrating the use of the `display` command in pdb. It initializes a list, sets a breakpoint, and then appends an item to the list.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pdb.rst#_snippet_19

LANGUAGE: python
CODE:
```
lst = []
breakpoint()
pass
lst.append(1)
print(lst)
```

----------------------------------------

TITLE: Creating Customized Named Descriptors in Python
DESCRIPTION: Advanced descriptor implementation that uses __set_name__ to customize attribute names and logging for multiple attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
import logging

logging.basicConfig(level=logging.INFO)

class LoggedAccess:
    def __set_name__(self, owner, name):
        self.public_name = name
        self.private_name = '_' + name

    def __get__(self, obj, objtype=None):
        value = getattr(obj, self.private_name)
        logging.info('Accessing %r giving %r', self.public_name, value)
        return value

    def __set__(self, obj, value):
        logging.info('Updating %r to %r', self.public_name, value)
        setattr(obj, self.private_name, value)

class Person:
    name = LoggedAccess()                # First descriptor instance
    age = LoggedAccess()                 # Second descriptor instance

    def __init__(self, name, age):
        self.name = name                 # Calls the first descriptor
        self.age = age                   # Calls the second descriptor

    def birthday(self):
        self.age += 1
```

----------------------------------------

TITLE: Visualizing Complex Inheritance Hierarchy
DESCRIPTION: ASCII art diagram showing the inheritance relationships between classes A through F and object, organized by levels from most specialized (level 0) to most general (level 3).
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/mro.rst#2025-04-21_snippet_3

LANGUAGE: text
CODE:
```
                            6
                           ---
  Level 3                 | O |                  (more general)
                        /  ---  \
                       /    |    \
                      /     |     \
                     /      |      \
                    ---    ---    ---
  Level 2        3 | D | 4| E |  | F | 5
                    ---    ---    ---
                     \  \ _ /       |
                      \    / \ _    |
                       \  /      \  |
                        ---      ---
  Level 1            1 | B |    | C | 2
                        ---      ---
                          \      /
                           \    /
                             ---
  Level 0                 0 | A |                (more specialized)
                             ---
```

----------------------------------------

TITLE: Closing Standard File Descriptors in Python
DESCRIPTION: Demonstrates how to properly close the underlying C file descriptors for stdin, stdout, and stderr using os.close(). This is necessary because sys.stdout.close() only marks the Python-level file object as closed without closing the C descriptor.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/library.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
os.close(stdin.fileno())
os.close(stdout.fileno())
os.close(stderr.fileno())
```

----------------------------------------

TITLE: Python SQLite3 Statement Completion Check Example
DESCRIPTION: Example showing usage of sqlite3.complete_statement() function to verify if an SQL statement is complete
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
>>> sqlite3.complete_statement("SELECT foo FROM bar;")
True
>>> sqlite3.complete_statement("SELECT foo")
False
```

----------------------------------------

TITLE: Junction Detection with os.path
DESCRIPTION: The isjunction function identifies whether a given path is a junction, returning False on platforms without junction support. This feature was added in version 3.12.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.path.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
def isjunction(path):
    return os.path.isjunction(path)
```

----------------------------------------

TITLE: Creating HTTPHandler Class for Opening HTTP URLs in Python
DESCRIPTION: HTTPHandler is a class specifically designed to handle opening of HTTP URLs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/urllib.request.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
class HTTPHandler():
```

----------------------------------------

TITLE: Adding mtime argument to gzip.compress
DESCRIPTION: Enhancement to gzip.compress() to support setting modification time for reproducible output. Important for deterministic builds and testing.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0a1.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
gzip.compress(data, mtime=timestamp) # timestamp controls the modification time in output
```

----------------------------------------

TITLE: Creating Aliases for Python Versions on macOS
DESCRIPTION: Shell commands to create aliases for different Python versions, including both traditional and free-threaded builds. This provides quick access to specific Python interpreters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/mac.rst#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
alias py3.13="/Library/Frameworks/Python.framework/Versions/3.13/bin/python3.13"
alias py3.13t="/Library/Frameworks/PythonT.framework/Versions/3.13/bin/python3.13t"
```

----------------------------------------

TITLE: Alternative Approach for Deferred Translations Using N_ Marker
DESCRIPTION: This code shows another method for marking strings for deferred translation using a different function name (N_) to avoid conflicts. This requires configuring message extraction tools to recognize the N_ marker using appropriate command-line options.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/gettext.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
def N_(message): return message

animals = [N_('mollusk'),
          N_('albatross'),
          N_('rat'),
          N_('penguin'),
          N_('python'), ]

# ...
for a in animals:
    print(_(a))
```

----------------------------------------

TITLE: Using reveal_type at Runtime (Python)
DESCRIPTION: This snippet illustrates the runtime behavior of `reveal_type`. When executed, it prints the runtime type of its argument (an integer literal `1`) to standard error and returns the argument's value, which is then printed by the `print(x)` statement.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_168

LANGUAGE: Python
CODE:
```
x = reveal_type(1)  # prints "Runtime type is int"
print(x)  # prints "1"
```

----------------------------------------

TITLE: Object Finalization Check in Python GC
DESCRIPTION: Demonstrates how to check if an object has been finalized by the garbage collector using a class with a __del__ method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/gc.rst#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> x = None
>>> class Lazarus:
...     def __del__(self):
...         global x
...         x = self
...
>>> lazarus = Lazarus()
>>> gc.is_finalized(lazarus)
False
>>> del lazarus
>>> gc.is_finalized(x)
True
```

----------------------------------------

TITLE: Recursive Generator Function in Python
DESCRIPTION: This snippet demonstrates a recursive generator function named `inorder`, which generates the leaves of a tree in in-order traversal. It highlights how generators can be used with recursive algorithms.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.2.rst#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
# A recursive generator that generates Tree leaves in in-order.
def inorder(t):
    if t:
        for x in inorder(t.left):
            yield x
        yield t.label
        for x in inorder(t.right):
            yield x
```

----------------------------------------

TITLE: Using curses.wrapper for Safe Curses Initialization and Termination
DESCRIPTION: This example shows how to use the curses.wrapper function to safely initialize and terminate curses, handling exceptions and restoring the terminal state.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/curses.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
from curses import wrapper

def main(stdscr):
    # Clear screen
    stdscr.clear()

    # This raises ZeroDivisionError when i == 10.
    for i in range(0, 11):
        v = i-10
        stdscr.addstr(i, 0, '10 divided by {} is {}'.format(v, 10/v))

        stdscr.refresh()
        stdscr.getkey()

wrapper(main)
```

----------------------------------------

TITLE: Retrieving Logger Instance in Python
DESCRIPTION: Demonstrates the recommended method for accessing a logger instance by name using the logging.getLogger() function. This pattern is preferable to passing logger instances as parameters or storing them as class attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_61

LANGUAGE: python
CODE:
```
logging.getLogger(name)
```

----------------------------------------

TITLE: Implementing __slots__ Documentation with inspect.getdoc
DESCRIPTION: Demonstrates using __slots__ with docstrings that can be accessed via inspect.getdoc(). Shows documentation for an AudioClip class with documented bit_rate and duration slots.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
class AudioClip:
    __slots__ = {'bit_rate': 'expressed in kilohertz to one decimal place',
                 'duration': 'in seconds, rounded up to an integer'}
    def __init__(self, bit_rate, duration):
        self.bit_rate = round(bit_rate / 1000.0, 1)
        self.duration = ceil(duration)
```

----------------------------------------

TITLE: Computing polynomial derivatives with polynomial_derivative in Python
DESCRIPTION: Shows the polynomial_derivative function which computes the derivative of a polynomial represented as a list of coefficients.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_66

LANGUAGE: python
CODE:
```
>>> polynomial_derivative([1, -4, -17, 60])
[3, -8, -17]
```

----------------------------------------

TITLE: Create Type - PyType_FromMetaclass - C
DESCRIPTION: A new function added to the limited C API that generalizes PyType_FromModuleAndSpec by allowing an additional metaclass argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_60

LANGUAGE: C
CODE:
```
PyType_FromMetaclass
```

----------------------------------------

TITLE: Opening a WAV file using the wave.open() function
DESCRIPTION: Opens a WAV file by filename or file-like object with specified mode ('rb' for reading, 'wb' for writing). Returns a Wave_read or Wave_write object based on the mode. Can be used in a with statement.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/wave.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
wave.open(file, mode=None)
```

----------------------------------------

TITLE: Using wsgiref.util.setup_testing_defaults in a Simple WSGI Application
DESCRIPTION: Demonstrates how to use setup_testing_defaults to create a dummy WSGI environment for testing. The example creates a simple WSGI application that prints out the environment dictionary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/wsgiref.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from wsgiref.util import setup_testing_defaults
from wsgiref.simple_server import make_server

# A relatively simple WSGI application. It's going to print out the
# environment dictionary after being updated by setup_testing_defaults
def simple_app(environ, start_response):
    setup_testing_defaults(environ)

    status = '200 OK'
    headers = [('Content-type', 'text/plain; charset=utf-8')]

    start_response(status, headers)

    ret = [("%s: %s\n" % (key, value)).encode("utf-8")
           for key, value in environ.items()]
    return ret

with make_server('', 8000, simple_app) as httpd:
    print("Serving on port 8000...")
    httpd.serve_forever()
```

----------------------------------------

TITLE: IMAP4 Context Management
DESCRIPTION: The IMAP4 class now supports context management protocol allowing use with 'with' statement
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.5.0a1.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
from imaplib import IMAP4

with IMAP4('host') as imap:
    imap.login('user', 'pass')
```

----------------------------------------

TITLE: Check if Unicode String is ASCII in C
DESCRIPTION: Checks if a Python Unicode string contains only ASCII characters (code points less than 128). This is functionally equivalent to the Python `str.isascii()` method and returns true (non-zero) if all characters are ASCII, false (zero) otherwise.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/unicode.rst#_snippet_16

LANGUAGE: c
CODE:
```
unsigned int PyUnicode_IS_ASCII(PyObject *unicode)
```

----------------------------------------

TITLE: Getting and Setting Turtle Shape in Python
DESCRIPTION: Illustrates how to use the turtle.shape() function. Calling it without arguments returns the current shape name, and calling it with a string argument changes the turtle's shape.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_64

LANGUAGE: python
CODE:
```
turtle.shape()
turtle.shape("turtle")
turtle.shape()
```

----------------------------------------

TITLE: Complex Number Creation Examples in Python
DESCRIPTION: Examples demonstrating different ways to create complex numbers in Python using the complex() constructor, including string parsing and numeric arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functions.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> complex('+1.23')
(1.23+0j)
>>> complex('-4.5j')
-4.5j
>>> complex('-1.23+4.5j')
(-1.23+4.5j)
>>> complex('\t( -1.23+4.5J )\n')
(-1.23+4.5j)
>>> complex('-Infinity+NaNj')
(-inf+nanj)
>>> complex(1.23)
(1.23+0j)
>>> complex(imag=-4.5)
-4.5j
>>> complex(-1.23, 4.5)
(-1.23+4.5j)
```

----------------------------------------

TITLE: Root Directory Change with chroot()
DESCRIPTION: Function to change the root directory of the current process. Available on Unix systems but not on WASI or Android.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_36

LANGUAGE: python
CODE:
```
chroot(path)
```

----------------------------------------

TITLE: Setting Method Attributes in Python
DESCRIPTION: Illustrates the correct way to set attributes on a method by modifying the underlying function object. Attempting to set attributes directly on the method raises an AttributeError.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_104

LANGUAGE: python
CODE:
```
>>> class C:
...     def method(self):
...         pass
...
>>> c = C()
>>> c.method.whoami = 'my name is method'  # can't set on the method
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'method' object has no attribute 'whoami'
>>> c.method.__func__.whoami = 'my name is method'
>>> c.method.whoami
'my name is method'
```

----------------------------------------

TITLE: Retrieving Certificate Store Statistics in Python
DESCRIPTION: This method returns a dictionary with statistics about loaded X.509 certificates, including counts of CA certificates and certificate revocation lists.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
>>> context.cert_store_stats()
{'crl': 0, 'x509_ca': 1, 'x509': 2}
```

----------------------------------------

TITLE: Accessing Attributes in Python SAX Parser
DESCRIPTION: Methods for working with Attributes objects in SAX parsing. These methods allow retrieving the number of attributes, their names, types, and values. Attributes objects also implement part of the mapping protocol.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.sax.reader.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
.. method:: Attributes.getLength()

   Return the number of attributes.
```

LANGUAGE: python
CODE:
```
.. method:: Attributes.getNames()

   Return the names of the attributes.
```

LANGUAGE: python
CODE:
```
.. method:: Attributes.getType(name)

   Returns the type of the attribute *name*, which is normally ``'CDATA'``.
```

LANGUAGE: python
CODE:
```
.. method:: Attributes.getValue(name)

   Return the value of attribute *name*.
```

----------------------------------------

TITLE: File Status and Configuration in Python
DESCRIPTION: Functions like fstat(), fstatvfs(), and fpathconf() retrieve information about open files and filesystems. fstat() returns a stat_result object, fstatvfs() returns filesystem information, and fpathconf() retrieves system configuration values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
def fstat(fd):
    """Get the status of the file descriptor fd. Return a stat_result object."""
```

LANGUAGE: python
CODE:
```
def fstatvfs(fd, /):
    """Return information about the filesystem containing the file associated with
    file descriptor fd, like statvfs().
    """
```

LANGUAGE: python
CODE:
```
def fpathconf(fd, name, /):
    """Return system configuration information relevant to an open file."""
```

----------------------------------------

TITLE: Formatting Numbers with 'g' Code in Python
DESCRIPTION: Explores the 'g' formatting code in Python, which chooses between exponential or fixed-point representation based on value magnitude and precision. Key factors include alternate form variations and real-world edge cases.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/mathdata/formatfloat_testcases.txt#2025-04-21_snippet_2

LANGUAGE: Text
CODE:
```
-- \'g\' code formatting.

-- zeros
%.0g 0 -> 0
%.1g 0 -> 0
%.2g 0 -> 0
%.3g 0 -> 0
%.4g 0 -> 0
%.10g 0 -> 0
%.50g 0 -> 0
%.100g 0 -> 0

-- precision 0 doesn\'t make a lot of sense for the \'g\' code (what does
-- it mean to have no significant digits?); in practice, it\'s interpreted
-- as identical to precision 1
%.0g 1000 -> 1e+03
%.0g 100 -> 1e+02
%.0g 10 -> 1e+01
%.0g 1 -> 1
%.0g 0.1 -> 0.1
%.0g 0.01 -> 0.01
%.0g 1e-3 -> 0.001
%.0g 1e-4 -> 0.0001
%.0g 1e-5 -> 1e-05
%.0g 1e-6 -> 1e-06
%.0g 12 -> 1e+01
%.0g 120 -> 1e+02
%.0g 1.2 -> 1
%.0g 0.12 -> 0.1
%.0g 0.012 -> 0.01
%.0g 0.0012 -> 0.001
%.0g 0.00012 -> 0.0001
%.0g 0.000012 -> 1e-05
%.0g 0.0000012 -> 1e-06

-- precision 1 identical to precision 0
%.1g 1000 -> 1e+03
%.1g 100 -> 1e+02
%.1g 10 -> 1e+01
%.1g 1 -> 1
%.1g 0.1 -> 0.1
%.1g 0.01 -> 0.01
%.1g 1e-3 -> 0.001
%.1g 1e-4 -> 0.0001
%.1g 1e-5 -> 1e-05
%.1g 1e-6 -> 1e-06
%.1g 12 -> 1e+01
%.1g 120 -> 1e+02
%.1g 1.2 -> 1
%.1g 0.12 -> 0.1
%.1g 0.012 -> 0.01
%.1g 0.0012 -> 0.001
%.1g 0.00012 -> 0.0001
%.1g 0.000012 -> 1e-05
%.1g 0.0000012 -> 1e-06

-- precision 2
%.2g 1000 -> 1e+03
%.2g 100 -> 1e+02
%.2g 10 -> 10
%.2g 1 -> 1
%.2g 0.1 -> 0.1
%.2g 0.01 -> 0.01
%.2g 0.001 -> 0.001
%.2g 1e-4 -> 0.0001
%.2g 1e-5 -> 1e-05
%.2g 1e-6 -> 1e-06
%.2g 1234 -> 1.2e+03
%.2g 123 -> 1.2e+02
%.2g 12.3 -> 12
%.2g 1.23 -> 1.2
%.2g 0.123 -> 0.12
%.2g 0.0123 -> 0.012
%.2g 0.00123 -> 0.0012
%.2g 0.000123 -> 0.00012
%.2g 0.0000123 -> 1.2e-05

-- bad cases from http://bugs.python.org/issue9980
%.12g 38210.0 -> 38210
%.12g 37210.0 -> 37210
%.12g 36210.0 -> 36210

-- alternate g formatting:  always include decimal point and
-- exactly <precision> significant digits.
%#.0g 0 -> 0.
%#.1g 0 -> 0.
%#.2g 0 -> 0.0
%#.3g 0 -> 0.00
%#.4g 0 -> 0.000

%#.0g 0.2 -> 0.2
%#.1g 0.2 -> 0.2
%#.2g 0.2 -> 0.20
%#.3g 0.2 -> 0.200
%#.4g 0.2 -> 0.2000
%#.10g 0.2 -> 0.2000000000

%#.0g 2 -> 2.
%#.1g 2 -> 2.
%#.2g 2 -> 2.0
%#.3g 2 -> 2.00
%#.4g 2 -> 2.000

%#.0g 20 -> 2.e+01
%#.1g 20 -> 2.e+01
%#.2g 20 -> 20.
%#.3g 20 -> 20.0
%#.4g 20 -> 20.00

%#.0g 234.56 -> 2.e+02
%#.1g 234.56 -> 2.e+02
%#.2g 234.56 -> 2.3e+02
%#.3g 234.56 -> 235.
%#.4g 234.56 -> 234.6
%#.5g 234.56 -> 234.56
%#.6g 234.56 -> 234.560

```

----------------------------------------

TITLE: Setting Base URI for XML Parsing in Python
DESCRIPTION: Sets the base to be used for resolving relative URIs in system identifiers in declarations. This value is passed to various handler functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pyexpat.rst#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
xmlparser.SetBase(base)
```

----------------------------------------

TITLE: Installing Runtimes with py Command Line (General)
DESCRIPTION: Provides the general command structure and common options for installing Python runtimes using `py install`. Options include specifying a source URL, forcing installation, updating existing installs, and performing a dry run before making changes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/windows.rst#_snippet_5

LANGUAGE: Shell
CODE:
```
$> py install [-s=|--source=<URL>] [-f|--force] [-u|--update] [--dry-run] [<TAG>...]
```

----------------------------------------

TITLE: Comparing memoryviews with equality operator
DESCRIPTION: Examples demonstrating equality comparison between memoryview objects and array objects with different numeric types that have equivalent values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_72

LANGUAGE: python
CODE:
```
import array
a = array.array('I', [1, 2, 3, 4, 5])
b = array.array('d', [1.0, 2.0, 3.0, 4.0, 5.0])
c = array.array('b', [5, 3, 1])
x = memoryview(a)
y = memoryview(b)
x == a == y == b
True
x.tolist() == a.tolist() == y.tolist() == b.tolist()
True
z = y[::-2]
z == c
True
z.tolist() == c.tolist()
True
```

----------------------------------------

TITLE: Converting Object to Ssize_t with Exception Handling
DESCRIPTION: Converts a Python object to a Py_ssize_t value with robust error handling. Supports specifying the type of exception to raise on overflow, with optional value clipping.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/number.rst#2025-04-21_snippet_5

LANGUAGE: c
CODE:
```
Py_ssize_t PyNumber_AsSsize_t(PyObject *o, PyObject *exc)
```

----------------------------------------

TITLE: Returning Sub-Content Type in Python
DESCRIPTION: This method provides the sub-content type of a message, offering further classification within the main content type. This is important for determining the specific media type used.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.compat32-message.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
".. method:: get_content_subtype()\n\n      Return the message\'s sub-content type.  This is the :mimetype:`subtype`\n      part of the string returned by :meth:`get_content_type`."
```

----------------------------------------

TITLE: Using ConfigParser with allow_no_value Parameter in Python
DESCRIPTION: Demonstrates the usage of the new allow_no_value parameter in ConfigParser constructors. This allows parsing configuration files that have options without values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.7.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
>>> import ConfigParser, StringIO
>>> sample_config = """
... [mysqld]
... user = mysql
... pid-file = /var/run/mysqld/mysqld.pid
... skip-bdb
... """
>>> config = ConfigParser.RawConfigParser(allow_no_value=True)
>>> config.readfp(StringIO.StringIO(sample_config))
>>> config.get('mysqld', 'user')
'mysql'
>>> print config.get('mysqld', 'skip-bdb')
None
>>> print config.get('mysqld', 'unknown')
Traceback (most recent call last):
  ...
NoOptionError: No option 'unknown' in section: 'mysqld'
```

----------------------------------------

TITLE: Looking Up a Registered Codec Error Handler in Python
DESCRIPTION: Return the error handler previously registered under the name *name*. Raises a LookupError in case the handler cannot be found.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/codecs.rst#_snippet_11

LANGUAGE: Python
CODE:
```
lookup_error(name, /)
```

----------------------------------------

TITLE: Parsing Python Dictionary Comprehension AST with ast.dump
DESCRIPTION: This snippet illustrates the AST structure for a dictionary comprehension ('{x: x**2 for x in numbers}') using `ast.parse` and `ast.dump`. The output shows the `DictComp` node with its `key`, `value`, and a list of `generators`, detailing how the key-value pair and the iteration are represented.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_27

LANGUAGE: python
CODE:
```
print(ast.dump(
    ast.parse('{x: x**2 for x in numbers}', mode='eval'),
    indent=4,
))
```

----------------------------------------

TITLE: Converting Between File Encodings Using StreamRecoder
DESCRIPTION: This snippet demonstrates the use of codecs.StreamRecoder to convert between file encodings in Python. It takes an input stream in Latin-1 encoding and provides a stream behaving as if it returns data in UTF-8 encoding.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/unicode.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
new_f = codecs.StreamRecoder(f,
    # en/decoder: used by read() to encode its results and
    # by write() to decode its input.
    codecs.getencoder('utf-8'), codecs.getdecoder('utf-8'),

    # reader/writer: used to read and write to the stream.
    codecs.getreader('latin-1'), codecs.getwriter('latin-1') )
```

----------------------------------------

TITLE: Using Automatic Numbering with str.format Method
DESCRIPTION: Example of the new automatic numbering feature in the str.format method which allows for simpler formatting syntax without specifying field numbers explicitly.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.7.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
>>> '{}:{}:{}'.format(2009, 04, 'Sunday')
'2009:4:Sunday'
>>> '{}:{}:{day}'.format(2009, 4, day='Sunday')
'2009:4:Sunday'
```

----------------------------------------

TITLE: Retrieving Current Process Object in Python
DESCRIPTION: Returns the Process object corresponding to the current process. This is analogous to threading.current_thread().
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/multiprocessing.rst#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
current_process()
```

----------------------------------------

TITLE: Qt Window Event Handlers and Logging Implementation
DESCRIPTION: Qt window class implementation with signal slots for handling logging events and UI updates. Includes methods for status updates, manual logging, and display clearing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_57

LANGUAGE: python
CODE:
```
if self.worker_thread.isRunning():
    self.kill_thread()

@Slot(str, logging.LogRecord)
def update_status(self, status, record):
    color = self.COLORS.get(record.levelno, 'black')
    s = '<pre><font color="%s">%s</font></pre>' % (color, status)
    self.textedit.appendHtml(s)

@Slot()
def manual_update(self):
    level = random.choice(LEVELS)
    extra = {'qThreadName': ctname() }
    logger.log(level, 'Manually logged!', extra=extra)

@Slot()
def clear_display(self):
    self.textedit.clear()
```

----------------------------------------

TITLE: Implementing emit() Method for SMTPHandler in Python
DESCRIPTION: Method for sending formatted log records to specified email addresses. Formats the log record and sends it to the configured email recipients.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
def emit(self, record):
   """
   Formats the record and sends it to the specified addressees.
   """
```

----------------------------------------

TITLE: Parsing Function Call into AST Nodes (Python)
DESCRIPTION: Illustrates the AST representation of a complex function call including positional arguments, keyword arguments (`b=c`), starred arguments (`*d`), and double-starred arguments (`**e`). The code parses the call into a `Call` node, detailing how arguments are stored in the `args` and `keywords` lists.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_20

LANGUAGE: python
CODE:
```
print(ast.dump(ast.parse('func(a, b=c, *d, **e)', mode='eval'), indent=4))
```

----------------------------------------

TITLE: Installing Python via NuGet (CMD)
DESCRIPTION: Shows the `nuget.exe install` commands used to download and install the latest 64-bit and 32-bit Python packages from nuget.org for use in build or continuous integration environments. The `-ExcludeVersion` flag simplifies the output directory name.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/windows.rst#_snippet_14

LANGUAGE: cmd
CODE:
```
nuget.exe install python -ExcludeVersion -OutputDirectory .
```

LANGUAGE: cmd
CODE:
```
nuget.exe install pythonx86 -ExcludeVersion -OutputDirectory .
```

----------------------------------------

TITLE: Overriding _get_child_mock Method to Control Attribute Types in Python Mocks
DESCRIPTION: A technique to prevent a Mock subclass from being used for attributes by overriding the _get_child_mock method, useful when custom behavior causes issues with attribute mocks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_39

LANGUAGE: python
CODE:
```
>>> class Subclass(MagicMock):
...     def _get_child_mock(self, /, **kwargs):
```

----------------------------------------

TITLE: Iterating Over ElementTree Text in Python
DESCRIPTION: Shows usage of the new itertext() method to yield all text chunks that are descendants of an ElementTree Element. This is useful for extracting all text content from an XML structure.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.7.rst#2025-04-21_snippet_28

LANGUAGE: Python
CODE:
```
t = ET.XML("""<list>
  <item>1</item> <item>2</item>  <item>3</item>
</list>""")

# Outputs ['
  ', '1', ' ', '2', '  ', '3', '
']
print list(t.itertext())
```

----------------------------------------

TITLE: Defining base class for exceptions raised by the Parser class
DESCRIPTION: The MessageParseError exception is the base class for exceptions raised by the email.parser.Parser class. It is derived from MessageError and is also used internally by the parser used by email.headerregistry. It provides a base exception for handling parsing-related errors.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.errors.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```

.. exception:: MessageParseError()

   This is the base class for exceptions raised by the
   :class:`~email.parser.Parser` class.  It is derived from
   :exc:`MessageError`.  This class is also used internally by the parser used
   by :mod:`~email.headerregistry`.

```

----------------------------------------

TITLE: Cleaning up SQLite test files with Python
DESCRIPTION: This snippet removes test database files and associated dump files, cleaning up the testing environment. It relies on the os module for file removal. This is executed after tests to provide a clean slate for subsequent test runs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst#2025-04-21_snippet_34

LANGUAGE: python
CODE:
```
"""
import os
os.remove("backup.db")
os.remove("dump.sql")
os.remove("example.db")
os.remove("tutorial.db")
"""
```

----------------------------------------

TITLE: Implementing ContentHandler Methods for SAX XML Parsing in Python
DESCRIPTION: Defines methods for the ContentHandler class to handle various XML parsing events, including element start/end, character data, and processing instructions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.sax.handler.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
def endElementNS(name, qname):
    """Signals the end of an element in namespace mode.

    The *name* parameter contains the name of the element type, just as with the
    :meth:`startElementNS` method, likewise the *qname* parameter.
    """
    pass

def characters(content):
    """Receive notification of character data.

    The Parser will call this method to report each chunk of character data. SAX
    parsers may return all contiguous character data in a single chunk, or they may
    split it into several chunks; however, all of the characters in any single event
    must come from the same external entity so that the Locator provides useful
    information.

    *content* may be a string or bytes instance; the ``expat`` reader module
    always produces strings.
    """
    pass

def ignorableWhitespace(whitespace):
    """Receive notification of ignorable whitespace in element content.

    Validating Parsers must use this method to report each chunk of ignorable
    whitespace (see the W3C XML 1.0 recommendation, section 2.10): non-validating
    parsers may also use this method if they are capable of parsing and using
    content models.
    """
    pass

def processingInstruction(target, data):
    """Receive notification of a processing instruction.

    The Parser will invoke this method once for each processing instruction found:
    note that processing instructions may occur before or after the main document
    element.
    """
    pass

def skippedEntity(name):
    """Receive notification of a skipped entity.

    The Parser will invoke this method once for each entity skipped. Non-validating
    processors may skip entities if they have not seen the declarations (because,
    for example, the entity was declared in an external DTD subset). All processors
    may skip external entities, depending on the values of the
    ``feature_external_ges`` and the ``feature_external_pes`` properties.
    """
    pass
```

----------------------------------------

TITLE: Implementing getEventCategory() Method for NTEventLogHandler in Python
DESCRIPTION: Method that returns the event category for a log record. This implementation returns 0 as the default category, but can be overridden to specify custom categories.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
def getEventCategory(self, record):
   """
   Returns the event category for the record. Override this if you want to
   specify your own categories. This version returns 0.
   """
```

----------------------------------------

TITLE: Retrieving OpenSSL Version Information as a Tuple in Python
DESCRIPTION: Example of accessing the OpenSSL version information as a tuple of five integers using ssl.OPENSSL_VERSION_INFO. This provides a structured way to check version components.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
>>> ssl.OPENSSL_VERSION_INFO
(1, 0, 2, 11, 15)
```

----------------------------------------

TITLE: Support for Complex Types in Struct Module
DESCRIPTION: Added support for float complex and double complex C types in the struct module when C11 complex arithmetic is available.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.14.0a1.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
import struct
# Now supports float complex and double complex types
```

----------------------------------------

TITLE: Resuming Writing in BaseProtocol for Python
DESCRIPTION: This method is called when the transport's buffer drains below the low watermark, indicating that writing can be resumed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
BaseProtocol.resume_writing()
```

----------------------------------------

TITLE: Launch Latest Python 2 Version (Command Prompt)
DESCRIPTION: Shows how to use the py launcher to execute the latest installed version of Python 2. This is useful when both Python 2 and Python 3 versions are installed on the system.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/windows.rst#_snippet_22

LANGUAGE: Batch
CODE:
```
py -2
```

----------------------------------------

TITLE: Using Unpack with TypeVarTuple (Modern Syntax Equivalent)
DESCRIPTION: Illustrates how the `Unpack` operator is conceptually equivalent to using the `*` operator with a `TypeVarTuple` in type annotations for tuples.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_90

LANGUAGE: python
CODE:
```
Ts = TypeVarTuple('Ts')
tup: tuple[*Ts]
# Effectively does:
tup: tuple[Unpack[Ts]]
```

----------------------------------------

TITLE: Implementing Custom_dealloc in C
DESCRIPTION: Example of a deallocation function for a custom type that properly handles reference counting and memory management.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/newtypes_tutorial.rst#2025-04-21_snippet_2

LANGUAGE: C
CODE:
```
Custom_dealloc(CustomObject *self)
{
    Py_XDECREF(self->first);
    Py_XDECREF(self->last);
    Py_TYPE(self)->tp_free((PyObject *) self);
}
```

----------------------------------------

TITLE: Saving and Modifying Turtle Pen State Python
DESCRIPTION: Shows how to save the current pen state dictionary, change other attributes like color and pen position using `turtle.color()` and `turtle.penup()`, and then retrieve a portion of the modified state to show the changes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_49

LANGUAGE: python
CODE:
```
>>> penstate=turtle.pen()
>>> turtle.color("yellow", "")
>>> turtle.penup()
>>> sorted(turtle.pen().items())[:3]
[('fillcolor', ''), ('outline', 1), ('pencolor', 'yellow')]
```

----------------------------------------

TITLE: Using System Zoneinfo Database in Python
DESCRIPTION: Example demonstrating how to use system's zoneinfo database for timezone specification using the TZ environment variable with predefined timezone names.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/time.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
>>> os.environ['TZ'] = 'US/Eastern'
>>> time.tzset()
>>> time.tzname
('EST', 'EDT')
>>> os.environ['TZ'] = 'Egypt'
>>> time.tzset()
>>> time.tzname
('EET', 'EEST')
```

----------------------------------------

TITLE: Specifying XML Parser Encoding in Python ElementTree
DESCRIPTION: Demonstrates how to create an XMLParser instance with a specific encoding and use it when parsing XML content.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.7.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
p = ET.XMLParser(encoding='utf-8')
t = ET.XML("""<root/>""", parser=p)
```

----------------------------------------

TITLE: Specifying Command Line Options for Inspect Module
DESCRIPTION: Describes the command line interface for the inspect module, including its default behavior and the --details option for printing object information instead of source code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/inspect.rst#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
.. program:: inspect

.. option:: --details
```

----------------------------------------

TITLE: Generating Random Hexadecimal String with Python secrets Module
DESCRIPTION: This snippet shows how to use the token_hex() function from the secrets module to generate a random hexadecimal string representing 16 random bytes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/secrets.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
>>> token_hex(16)  #doctest:+SKIP
'f9bf78b9a18ce6d46a0cd2b0b86df9da'
```

----------------------------------------

TITLE: Base64 Encoding in Email
DESCRIPTION: Encodes the payload of an email message into base64 format. Sets the Content-Transfer-Encoding header to 'base64'. Ideal for payloads with predominantly unprintable data, as it provides a more compact representation than quoted-printable. The resulting text is not human-readable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.encoders.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
".. function:: encode_base64(msg)\n\n   Encodes the payload into base64 form and sets the\n   :mailheader:`Content-Transfer-Encoding` header to ``base64``.  This is a good\n   encoding to use when most of your payload is unprintable data since it is a more\n   compact form than quoted-printable.  The drawback of base64 encoding is that it\n   renders the text non-human readable."
```

----------------------------------------

TITLE: Checking the Type of a Type Alias
DESCRIPTION: Shows that a type alias created using the 'type' statement is an instance of the TypeAliasType class.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_127

LANGUAGE: python
CODE:
```
>>> type Alias = int
>>> type(Alias)
<class 'typing.TypeAliasType'>
```

----------------------------------------

TITLE: Creating a New Interpreter with Own GIL in C (Python 3.12)
DESCRIPTION: Provides a C code example demonstrating how to use the new `Py_NewInterpreterFromConfig` function introduced in Python 3.12 (PEP 684) to create a sub-interpreter with its own Global Interpreter Lock (GIL), enabling better multi-core utilization via the C-API.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_13

LANGUAGE: c
CODE:
```
PyInterpreterConfig config = {
    .check_multi_interp_extensions = 1,
    .gil = PyInterpreterConfig_OWN_GIL,
};
PyThreadState *tstate = NULL;
PyStatus status = Py_NewInterpreterFromConfig(&tstate, &config);
if (PyStatus_Exception(status)) {
    return -1;
}
/* The new interpreter is now active in the current thread. */
```

----------------------------------------

TITLE: Improved SyntaxError Messages for Unclosed Brackets in Python
DESCRIPTION: Demonstrates the improved error messages in Python 3.10 for unclosed brackets or parentheses, showing both the old and new error output.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.10.rst#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
expected = {9: 1, 18: 2, 19: 2, 27: 3, 28: 3, 29: 3, 36: 4, 37: 4,
            38: 4, 39: 4, 45: 5, 46: 5, 47: 5, 48: 5, 49: 5, 54: 6,
some_other_code = foo()
```

----------------------------------------

TITLE: Using Request with Custom HTTP Method in urllib
DESCRIPTION: Example of using the urllib.request.Request class with a custom 'method' argument to send a HEAD request to a website. This demonstrates the new capability in Python 3.3 to specify HTTP methods beyond the default.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.3.rst#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
>>> urlopen(Request('https://www.python.org', method='HEAD'))
```

----------------------------------------

TITLE: Adding remote_exec Function to sys Module
DESCRIPTION: Implementation of PEP 768 (Safe external debugger interface) adds sys.remote_exec function that schedules execution of a Python file in a separate process, enabling safer external debugging.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.14.0a7.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
sys.remote_exec(filename)
```

----------------------------------------

TITLE: Drawing a Triangle with Turtle - Python
DESCRIPTION: Draws a simple equilateral triangle by repeatedly moving forward and turning left. Demonstrates combining basic movement and turning commands.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_3

LANGUAGE: Python
CODE:
```
forward(100)
left(120)
forward(100)
```

----------------------------------------

TITLE: Accessing OpenSSL Version Information in Python
DESCRIPTION: Example of accessing the OpenSSL version string using the ssl.OPENSSL_VERSION constant. This returns a human-readable string showing the OpenSSL version used by the Python interpreter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
>>> ssl.OPENSSL_VERSION
'OpenSSL 1.0.2k  26 Jan 2017'
```

----------------------------------------

TITLE: Parsing XML Data with Expat in Python
DESCRIPTION: Parses the contents of the string data, calling appropriate handler functions to process the parsed data. The isfinal parameter indicates if this is the final call to the method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pyexpat.rst#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
xmlparser.Parse(data[, isfinal])
```

----------------------------------------

TITLE: Enhancing inspect.signature Support for functools.partial in Python
DESCRIPTION: Improves inspect.signature to better support functools.partial. This change addresses the specific implementation of functools.partial, where positional-or-keyword arguments passed as keyword arguments become keyword-only.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.5.0a1.rst#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
inspect.signature
functools.partial
```

----------------------------------------

TITLE: Registering atexit Callback C-API
DESCRIPTION: Registers an atexit callback function for a specific interpreter state. This function is similar to `Py_AtExit` but allows specifying the target interpreter and passing arbitrary data to the callback. It requires that the target interpreter (`interp`) has an attached thread state.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/init.rst#_snippet_16

LANGUAGE: C
CODE:
```
int PyUnstable_AtExit(PyInterpreterState *interp, void (*func)(void *), void *data)
```

----------------------------------------

TITLE: Retrieving Linux Distribution Information with freedesktop_os_release in Python
DESCRIPTION: Example function demonstrating how to use platform.freedesktop_os_release() to determine Linux distribution information, focusing on getting the primary distribution ID and related/compatible distributions from ID_LIKE field.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/platform.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def get_like_distro():
    info = platform.freedesktop_os_release()
    ids = [info["ID"]]
    if "ID_LIKE" in info:
        # ids are space separated and ordered by precedence
        ids.extend(info["ID_LIKE"].split())
    return ids
```

----------------------------------------

TITLE: Generating a Supernet with ip_network in Python
DESCRIPTION: Provides examples of using the `supernet()` method to create a larger network containing an initial network. Arguments include `prefixlen_diff` or `new_prefix`, one of which must be specified. Dependencies: `ip_network` from the `ipaddress` module. Outputs: A single, larger network object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ipaddress.rst#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
ip_network('192.0.2.0/24').supernet(prefixlen_diff=2)
IPv4Network('192.0.0.0/22')
```

----------------------------------------

TITLE: Defining Python C API Exception: PyExc_FileNotFoundError
DESCRIPTION: This code snippet defines the C API exception `PyExc_FileNotFoundError` and maps it to the Python `FileNotFoundError` class. This allows C code to signal "file not found" errors within the Python environment.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/exceptions.rst#2025-04-21_snippet_60

LANGUAGE: c
CODE:
```
":c:data:`PyExc_FileNotFoundError`       | :exc:`FileNotFoundError`        |          "
```

----------------------------------------

TITLE: Structure for Built-in Module Entry
DESCRIPTION: This structure stores the name and the initialization function for a built-in module, which can be used to manage modules embedded within a Python interpreter. The characteristics of the module are defined by this two-member structure.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/import.rst#2025-04-21_snippet_24

LANGUAGE: C
CODE:
```
.. c:struct:: _inittab

   Structure describing a single entry in the list of built-in modules.
   Programs which
   embed Python may use an array of these structures in conjunction with
   :c:func:`PyImport_ExtendInittab` to provide additional built-in modules.
   The structure consists of two members:

   .. c:member:: const char *name

      The module name, as an ASCII encoded string.

   .. c:member:: PyObject* (*initfunc)(void)

      Initialization function for a module built into the interpreter.
```

----------------------------------------

TITLE: Adding Character Sets to Registry in Python
DESCRIPTION: The add_charset function allows the registration of new character set properties in the global character set registry, specifying header and body encodings as well as output character sets.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.charset.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
def add_charset(charset, header_enc=None, body_enc=None, output_charset=None):
    """
    Add character properties to the global registry.
    """
```

----------------------------------------

TITLE: Appending to the Built-in Module Table
DESCRIPTION: This function appends a single new module to the built-in module list using its name and an initialization function. It must be called before initializing the Python interpreter to ensure the new module is recognized on import.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/import.rst#2025-04-21_snippet_23

LANGUAGE: C
CODE:
```
.. c:function:: int PyImport_AppendInittab(const char *name, PyObject* (*initfunc)(void))

   Add a single module to the existing table of built-in modules.  This is a
   convenience wrapper around :c:func:`PyImport_ExtendInittab`, returning ``-1`` if
   the table could not be extended.  The new module can be imported by the name
   *name*, and uses the function *initfunc* as the initialization function called
   on the first attempted import.  This should be called before
   :c:func:`Py_Initialize`.
```

----------------------------------------

TITLE: Defining Python C API Exception: PyExc_GeneratorExit
DESCRIPTION: This code snippet defines the C API exception `PyExc_GeneratorExit` and maps it to the Python `GeneratorExit` class.  This mapping allows C code involved in generator implementation to signal a generator exit condition to Python.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/exceptions.rst#2025-04-21_snippet_62

LANGUAGE: c
CODE:
```
":c:data:`PyExc_GeneratorExit`           | :exc:`GeneratorExit`            |          "
```

----------------------------------------

TITLE: Python Warning Controls via Environment Variable
DESCRIPTION: Demonstrates controlling Python warnings using PYTHONWARNINGS environment variable.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_19

LANGUAGE: shell
CODE:
```
$ export PYTHONWARNINGS='ignore::RuntimeWarning::,once::UnicodeWarning::'
```

----------------------------------------

TITLE: Defining a Destructor for Python Objects in C
DESCRIPTION: This code snippet illustrates how to implement a destructor function for custom Python objects in C. It demonstrates how to untrack the object from the garbage collector, clear references, and properly free memory associated with the instance. The destructor is called when the reference count drops to zero.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/typeobj.rst#2025-04-21_snippet_7

LANGUAGE: c
CODE:
```
static void
foo_dealloc(PyObject *op)
{
    foo_object *self = (foo_object *) op;
    PyObject_GC_UnTrack(self);
    Py_CLEAR(self->ref);
    Py_TYPE(self)->tp_free(self);
}
```

----------------------------------------

TITLE: Filling a Shape using begin_fill() and end_fill() in Python Turtle
DESCRIPTION: Demonstrates the explicit use of `turtle.begin_fill()` and `turtle.end_fill()` to define the boundaries of a shape to be filled. This is equivalent to the `with turtle.fill():` syntax.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_58

LANGUAGE: python
CODE:
```
>>> turtle.color("black", "red")
>>> turtle.begin_fill()
>>> turtle.circle(80)
>>> turtle.end_fill()
```

----------------------------------------

TITLE: Initializing Message Object
DESCRIPTION: This snippet describes the `Message` class constructor, which is a subclass of `email.message.Message`.  It initializes a new message object, optionally copying the contents from an existing `email.message.Message` instance, a `Message` instance, a string, a byte string, or a file containing an RFC 2822-compliant message.  The file should be opened in binary mode, but text mode files are accepted for backward compatibility.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/mailbox.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
".. class:: Message(message=None)

   A subclass of the :mod:`email.message` module's
   :class:`~email.message.Message`. Subclasses of :class:`!mailbox.Message` add
   mailbox-format-specific state and behavior.

   If *message* is omitted, the new instance is created in a default, empty state.
   If *message* is an :class:`email.message.Message` instance, its contents are
   copied; furthermore, any format-specific information is converted insofar as
   possible if *message* is a :class:`!Message` instance. If *message* is a string,
   a byte string,
   or a file, it should contain an :rfc:`2822`\ -compliant message, which is read
   and parsed.  Files should be open in binary mode, but text mode files
   are accepted for backward compatibility."
```

----------------------------------------

TITLE: Using typed_subpart_iterator to Filter Email Message Parts by MIME Type in Python
DESCRIPTION: This function iterates over all subparts of a message, returning only those that match the specified MIME type. Both maintype and subtype are optional, with maintype defaulting to 'text' and subtype allowing any value when omitted.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.iterators.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
typed_subpart_iterator(msg, maintype='text', subtype=None)
```

----------------------------------------

TITLE: Disabling POSIX Spawn in Subprocess
DESCRIPTION: Configuration to disable posix_spawn usage in subprocess module on Linux
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/subprocess.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
subprocess._USE_POSIX_SPAWN = False  # See CPython issue gh-NNNNNN.
```

----------------------------------------

TITLE: Python Windows-1252 Encoding Declaration
DESCRIPTION: Specific example of declaring Windows-1252 encoding in a Python source file.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/interpreter.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
# -*- coding: cp1252 -*-
```

----------------------------------------

TITLE: Using select() function in Python
DESCRIPTION: This snippet demonstrates the usage of the select() function, which is a straightforward interface to the Unix select system call. It allows waiting for I/O events on multiple file descriptors.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/select.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
select(rlist, wlist, xlist[, timeout])
```

----------------------------------------

TITLE: Introspecting TypedDict Totality (__total__)
DESCRIPTION: Provides examples using `doctest` syntax to show how the `__total__` attribute can be used to check the value of the `total` argument passed when defining a `TypedDict` class.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_161

LANGUAGE: python
CODE:
```
>>> from typing import TypedDict
>>> class Point2D(TypedDict): pass
>>> Point2D.__total__
True
>>> class Point2D(TypedDict, total=False): pass
>>> Point2D.__total__
False
>>> class Point3D(Point2D): pass
>>> Point3D.__total__
True
```

----------------------------------------

TITLE: Setting XML Parser Handlers in Python
DESCRIPTION: Demonstrates how to set a handler on an xmlparser object. The handlername must be from the list of available handlers, and func must be a callable object accepting the correct number of arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pyexpat.rst#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
o.handlername = func
```

----------------------------------------

TITLE: Setting Turtle Colors - Python
DESCRIPTION: Sets the color for drawing lines (`color`) and the color for filling shapes (`fillcolor`). Colors can be specified by name (string) or as RGB tuples.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_8

LANGUAGE: Python
CODE:
```
color('red')
fillcolor('yellow')
```

----------------------------------------

TITLE: Defining HeaderParseError exception for RFC 5322 header parsing
DESCRIPTION: The HeaderParseError exception is raised under specific error conditions during the parsing of RFC 5322 headers. It is derived from MessageParseError.  It can be raised by the setEmailMessage.set_boundary method when the content type is unknown, by Header for certain base64 decoding errors, or when a header appears to contain an embedded header.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.errors.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```

.. exception:: HeaderParseError()

   Raised under some error conditions when parsing the :rfc:`5322` headers of a
   message, this class is derived from :exc:`MessageParseError`.  The
   :meth:`~email.message.EmailMessage.set_boundary` method will raise this
   error if the content type is unknown when the method is called.
   :class:`~email.header.Header` may raise this error for certain base64
   decoding errors, and when an attempt is made to create a header that appears
   to contain an embedded header (that is, there is what is supposed to be a
   continuation line that has no leading whitespace and looks like a header).

```

----------------------------------------

TITLE: Enumerating Registry Values in Python
DESCRIPTION: Enumerates values of an open registry key, returning a tuple containing the value name, data, and type. Called repeatedly until an OSError is raised.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/winreg.rst#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
EnumValue(key, index)
```

----------------------------------------

TITLE: Defining namereplace_errors Function Python
DESCRIPTION: Implements the 'namereplace' error handling for text encoding. It replaces unencodable characters with a \N{...} escape sequence, using the Name property from the Unicode Character Database.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/codecs.rst#_snippet_17

LANGUAGE: Python
CODE:
```
namereplace_errors(exception)
```

----------------------------------------

TITLE: Setting Default TCP_NODELAY for HTTPConnection in Python
DESCRIPTION: Updates HTTPConnection to default to TCP_NODELAY=1 upon establishment. Removes the use of hard-coded MSS as it's no longer needed with Nagle disabled. This change improves network performance for HTTP connections.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.5.0a1.rst#2025-04-21_snippet_22

LANGUAGE: Python
CODE:
```
HTTPConnection
TCP_NODELAY
```

----------------------------------------

TITLE: Abbreviated Month Names Data - Python
DESCRIPTION: This data attribute holds the abbreviated names of the months, useful for compact calendar displays.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/calendar.rst#2025-04-21_snippet_24

LANGUAGE: Python
CODE:
```
.. data:: month_abbr
```

----------------------------------------

TITLE: Python Deferred Annotation Inspection with annotationlib
DESCRIPTION: Illustrates how the new 'annotationlib.get_annotations' function can be used to inspect deferred annotations in different formats ('VALUE', 'FORWARDREF', 'STRING'). It shows how 'VALUE' format attempts evaluation (leading to NameError), while 'FORWARDREF' and 'STRING' provide alternative representations for undefined names.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_7

LANGUAGE: python
CODE:
```
>>> from annotationlib import get_annotations, Format
>>> def func(arg: Undefined):
...     pass
>>> get_annotations(func, format=Format.VALUE)
>>> get_annotations(func, format=Format.FORWARDREF)
>>> get_annotations(func, format=Format.STRING)
```

----------------------------------------

TITLE: Formatting StackSummary Objects
DESCRIPTION: Returns a list of strings ready for printing, where each string represents a frame in the stack. Long sequences of repeated frames are abbreviated for better readability.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
StackSummary.format()
```

----------------------------------------

TITLE: Using swapcase() Method in Python Bytes
DESCRIPTION: Shows how to swap the case of ASCII characters in a bytes sequence.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_62

LANGUAGE: python
CODE:
```
>>> b'Hello World'.swapcase()
b'hELLO wORLD'
```

----------------------------------------

TITLE: Operator Call Function Example
DESCRIPTION: Example of the new operator.call function that provides a functional way to call objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.11.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
operator.call(obj, *args, **kwargs)
```

----------------------------------------

TITLE: Mapping Dynamic State-Based Styling in ttk
DESCRIPTION: Example of using the Style.map method to define dynamic styling based on widget states. Sets different foreground and background colors for pressed and active states of a button.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_45

LANGUAGE: python
CODE:
```
import tkinter
from tkinter import ttk

root = tkinter.Tk()

style = ttk.Style()
style.map("C.TButton",
    foreground=[('pressed', 'red'), ('active', 'blue')],
    background=[('pressed', '!disabled', 'black'), ('active', 'white')]
    )

colored_btn = ttk.Button(text="Test", style="C.TButton").pack()

root.mainloop()
```

----------------------------------------

TITLE: TypeVarTuple Usage Example 2 (Single Element Tuple)
DESCRIPTION: An example showing the function parameterized by a TypeVarTuple when the tuple argument has two elements, binding the TypeVarTuple to a single type.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_110

LANGUAGE: python
CODE:
```
# T is bound to int, Ts is bound to (str,)
# Return value is ('spam', 1), which has type tuple[str, int]
move_first_element_to_last(tup=(1, 'spam'))
```

----------------------------------------

TITLE: Extending NamedTuple and TypedDict constructor keyword arguments
DESCRIPTION: Allows NamedTuple and TypedDict constructors to accept arbitrary keyword argument names, including previously reserved names.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.9.0a1.rst#2025-04-21_snippet_27

LANGUAGE: Python
CODE:
```
typing.NamedTuple
```

LANGUAGE: Python
CODE:
```
typing.TypedDict
```

----------------------------------------

TITLE: Mailing List Sorter
DESCRIPTION: Complex example demonstrating safe concurrent mailbox handling, sorting messages from different mailing lists into separate mailboxes while handling errors and maintaining data integrity.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/mailbox.rst#2025-04-21_snippet_38

LANGUAGE: python
CODE:
```
import mailbox
import email.errors

list_names = ('python-list', 'python-dev', 'python-bugs')

boxes = {name: mailbox.mbox('~/email/%s' % name) for name in list_names}
inbox = mailbox.Maildir('~/Maildir', factory=None)

for key in inbox.iterkeys():
    try:
        message = inbox[key]
    except email.errors.MessageParseError:
        continue                # The message is malformed. Just leave it.

    for name in list_names:
        list_id = message['list-id']
        if list_id and name in list_id:
            # Get mailbox to use
            box = boxes[name]

            # Write copy to disk before removing original.
            # If there's a crash, you might duplicate a message, but
            # that's better than losing a message completely.
            box.lock()
            box.add(message)
            box.flush()
            box.unlock()

            # Remove original message
            inbox.lock()
            inbox.discard(key)
            inbox.flush()
            inbox.unlock()
            break               # Found destination, so stop looking.

for box in boxes.itervalues():
    box.close()
```

----------------------------------------

TITLE: Error When Using cached_property with __slots__
DESCRIPTION: Shows the TypeError raised when trying to use cached_property with a class that has __slots__ but no __dict__ attribute to store the cached values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
>>> CP().pi
Traceback (most recent call last):
  ...
TypeError: No '__dict__' attribute on 'CP' instance to cache 'pi' property.
```

----------------------------------------

TITLE: Parsing and Dumping FunctionType AST (Python)
DESCRIPTION: Parses a Python source string representing an old-style function type comment (`"func_type"` mode) into an AST using `ast.parse` and then prints a formatted string representation of the resulting AST tree using `ast.dump` with indentation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_5

LANGUAGE: python
CODE:
```
print(ast.dump(ast.parse('(int, str) -> List[int]', mode='func_type'), indent=4))
```

----------------------------------------

TITLE: Defining SendfileNotAvailableError Exception in Python
DESCRIPTION: Defines the SendfileNotAvailableError exception indicating that the sendfile syscall is not available for a given socket or file type.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-exceptions.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
.. exception:: SendfileNotAvailableError

   The "sendfile" syscall is not available for the given
   socket or file type.

   A subclass of :exc:`RuntimeError`.
```

----------------------------------------

TITLE: Creating Long Integer Objects from Primitive Types
DESCRIPTION: Set of functions to convert various C numeric types to Python long integer objects, supporting signed and unsigned integers of different sizes
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/long.rst#2025-04-21_snippet_1

LANGUAGE: c
CODE:
```
PyObject* PyLong_FromLong(long v)
```

LANGUAGE: c
CODE:
```
PyObject* PyLong_FromUnsignedLong(unsigned long v)
```

LANGUAGE: c
CODE:
```
PyObject* PyLong_FromInt32(int32_t value)
```

----------------------------------------

TITLE: Polling for Events in Poll Object in Python
DESCRIPTION: Method to poll the set of registered file descriptors and return a list of (fd, event) tuples for descriptors with events or errors. Takes an optional timeout parameter in milliseconds.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/select.rst#2025-04-21_snippet_14

LANGUAGE: Python
CODE:
```
poll.poll([timeout])
```

----------------------------------------

TITLE: Implementing close() Method for MemoryHandler in Python
DESCRIPTION: Method for closing the MemoryHandler. Flushes the buffer, sets the target to None, and clears the buffer. The flushing behavior can be controlled with the flushOnClose parameter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
def close(self):
   """
   Calls flush(), sets the target to ``None`` and clears the
   buffer.
   """
```

----------------------------------------

TITLE: Using xmlrpc.server.SimpleXMLRPCDispatcher.register_function as a decorator
DESCRIPTION: In Python 3.7, SimpleXMLRPCDispatcher.register_function can now be used as a decorator to register functions with an XML-RPC server more conveniently.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_42

LANGUAGE: python
CODE:
```
# Example usage as a decorator
@dispatcher.register_function
def some_function():
    # function implementation
    pass
```

----------------------------------------

TITLE: Identifying recursive objects (isrecursive function) - Python
DESCRIPTION: The isrecursive function checks whether an object requires a recursive representation, potentially raising a RecursionError if it fails to detect recursion.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pprint.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
def isrecursive(object):
    Determine if *object* requires a recursive representation.
```

----------------------------------------

TITLE: Enabling Perf Profiling Support - Python
DESCRIPTION: This snippet demonstrates how to enable perf profiling support in Python dynamically using the sys module. It shows the activation and deactivation of stack trampolines around code that needs to be profiled.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/perf_profiling.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
import sys

sys.activate_stack_trampoline("perf")
do_profiled_stuff()
sys.deactivate_stack_trampoline()
```

----------------------------------------

TITLE: Parsing Python List Comprehension AST with ast.dump
DESCRIPTION: This snippet generates and prints the AST for a simple list comprehension ('[x for x in numbers]') using `ast.parse` and `ast.dump`. The output demonstrates the `ListComp` node, its `elt` (the expression evaluated for each item), and a list of `generators`, each representing a `for` clause in the comprehension.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_26

LANGUAGE: python
CODE:
```
print(ast.dump(
    ast.parse('[x for x in numbers]', mode='eval'),
    indent=4,
))
```

----------------------------------------

TITLE: Invalid Generic Class Definition (Duplicate Type Variables)
DESCRIPTION: Illustrates an invalid generic class definition where the same type variable name is used multiple times in the parameter list, which results in a `SyntaxError`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_31

LANGUAGE: python
CODE:
```
from typing import TypeVar, Generic
...

class Pair[M, M]:  # SyntaxError
    ...
```

----------------------------------------

TITLE: Retrieving Available Error Codes in Python
DESCRIPTION: Shows how to get a list of all available error code symbols on the current platform using the keys of the errorcode dictionary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/errno.rst#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
errno.errorcode.keys()
```

----------------------------------------

TITLE: mmap resize method
DESCRIPTION: The `resize(newsize)` method resizes the memory map and the underlying file (if any). Resizing is not allowed for maps created with ACCESS_READ or ACCESS_COPY, or with trackfd set to False, and will raise a TypeError or ValueError respectively. On Windows, resizing a mapped file will raise an OSError if other maps exist, while resizing an anonymous map creates a new map with the original data copied.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/mmap.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
".. method:: resize(newsize)\n\n   Resizes the map and the underlying file, if any.\n\n   Resizing a map created with *access* of :const:`ACCESS_READ` or\n   :const:`ACCESS_COPY`, will raise a :exc:`TypeError` exception.\n   Resizing a map created with with *trackfd* set to ``False``,\n   will raise a :exc:`ValueError` exception.\n\n   **On Windows**: Resizing the map will raise an :exc:`OSError` if there are other\n   maps against the same named file. Resizing an anonymous map (ie against the\n   pagefile) will silently create a new map with the original data copied over\n   up to the length of the new size.\n\n   .. versionchanged:: 3.11\n      Correctly fails if attempting to resize when another map is held\n      Allows resize against an anonymous map on Windows"
```

----------------------------------------

TITLE: Registering Audit Hooks in C
DESCRIPTION: Reference to the PySys_AddAuditHook C API function which allows registering a callback function to receive audit events when they're raised. This is the C API for intercepting audit events.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/audit_events.rst#2025-04-21_snippet_3

LANGUAGE: c
CODE:
```
PySys_AddAuditHook
```

----------------------------------------

TITLE: Sorting Profiling Statistics by Name
DESCRIPTION: This snippet sorts the profiling statistics by function name using SortKey.NAME and then prints the results using p.print_stats().
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/profile.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
p.sort_stats(SortKey.NAME)
p.print_stats()
```

----------------------------------------

TITLE: Generating Message String Representation
DESCRIPTION: This snippet demonstrates how to generate a string representation of an email message using the `email.generator.Generator` class. It shows how to customize the formatting process, such as mangling lines that begin with 'From', and specifies the maximum header length.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.compat32-message.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"from io import StringIO
from email.generator import Generator
fp = StringIO()
g = Generator(fp, mangle_from_=True, maxheaderlen=60)
g.flatten(msg)
text = fp.getvalue()"
```

----------------------------------------

TITLE: Parsing Python Named Expression (Walrus) AST with ast.dump
DESCRIPTION: This snippet illustrates the AST structure for a named expression using the assignment operator ('(x := 4)'). It utilizes `ast.parse` to generate the AST and `ast.dump` to display it. The output highlights the `NamedExpr` node with its `target` (a `Name` node) and `value` (a `Constant` node). Requires Python 3.8+.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_23

LANGUAGE: python
CODE:
```
print(ast.dump(ast.parse('(x := 4)', mode='eval'), indent=4))
```

----------------------------------------

TITLE: Illustrating Python Attribute Assignment Behavior
DESCRIPTION: This snippet demonstrates how attribute assignment behaves when a class variable exists with the same name as an instance attribute being assigned. The assignment reads the class variable on the right side (if no instance attribute exists yet) but creates/updates the instance attribute on the left side.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/simple_stmts.rst#_snippet_0

LANGUAGE: Python
CODE:
```
class Cls:
    x = 3             # class variable
inst = Cls()
inst.x = inst.x + 1   # writes inst.x as 4 leaving Cls.x as 3
```

----------------------------------------

TITLE: New Types Module Classes in Python
DESCRIPTION: The types module gains new classes: WrapperDescriptorType, MethodWrapperType, MethodDescriptorType, and ClassMethodDescriptorType. These classes enhance type introspection and provide more precise type representations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_30

LANGUAGE: python
CODE:
```
types
-----

The new :class:`~types.WrapperDescriptorType`,
:class:`~types.MethodWrapperType`, :class:`~types.MethodDescriptorType`,
and :class:`~types.ClassMethodDescriptorType` classes are now available.
(Contributed by Manuel Krebber and Guido van Rossum in :issue:`29377`,
and Serhiy Storchaka in :issue:`32265`.)
```

----------------------------------------

TITLE: Class Attribute Pickling Example in Python
DESCRIPTION: Demonstrates that class attributes are not pickled along with class instances. Shows a class definition with a class attribute that won't be preserved when pickled.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pickle.rst#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
class Foo:
    attr = 'A class attribute'

picklestring = pickle.dumps(Foo)
```

----------------------------------------

TITLE: Closing SubprocessTransport in Python
DESCRIPTION: This method kills the subprocess by calling the kill() method and closes transports of stdin, stdout, and stderr pipes if the subprocess hasn't returned yet.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-protocol.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
SubprocessTransport.close()
```

----------------------------------------

TITLE: Using ElementPath predicate for comparing text in XML element with find()
DESCRIPTION: In Python 3.7, ElementPath predicates in find() methods can now compare the text of the current node using [. = "text"] syntax, not just text in children. Spaces are also allowed for better readability.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_41

LANGUAGE: python
CODE:
```
[. = "text"]
```

----------------------------------------

TITLE: Executing Python Site Module from Command Line
DESCRIPTION: Demonstrates how to use the site module from the command line to retrieve the user-specific site-packages directory. This command prints the path to the user's site-packages directory.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/site.rst#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
$ python -m site --user-site
/home/user/.local/lib/python3.11/site-packages
```

----------------------------------------

TITLE: BZ2File Class for Handling bzip2-compressed Files in Python
DESCRIPTION: The BZ2File class provides methods for reading, writing, and manipulating bzip2-compressed files in binary mode. It supports various file operations and compression levels.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/bz2.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
BZ2File(filename, mode='r', *, compresslevel=9)
```

----------------------------------------

TITLE: Initializing Python with PyConfig - C API
DESCRIPTION: This snippet demonstrates the approximate sequence of C API calls used internally by `Py_Main` to initialize the Python interpreter using the modern `PyConfig` structure. It shows how to initialize a config object, set command-line arguments, initialize Python from that config, clear the config, and then run the main interpreter loop.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/init.rst#_snippet_15

LANGUAGE: C
CODE:
```
PyConfig config;
PyConfig_InitPythonConfig(&config);
PyConfig_SetArgv(&config, argc, argv);
Py_InitializeFromConfig(&config);
PyConfig_Clear(&config);

Py_RunMain();
```

----------------------------------------

TITLE: Parsing Comparison Chain into AST (Python)
DESCRIPTION: Shows how a chained comparison (`1 <= a < 10`) is represented in the AST. It results in a `Compare` node with the first operand (`1`), a list of operators (`LtE`, `Lt`), and a list of subsequent comparators (`a`, `10`).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_19

LANGUAGE: python
CODE:
```
print(ast.dump(ast.parse('1 <= a < 10', mode='eval'), indent=4))
```

----------------------------------------

TITLE: Implementing tp_hash Handler for Object Hashing
DESCRIPTION: Demonstrates how to implement a tp_hash handler for a custom type. This example creates a hash value from internal object data while ensuring it never returns -1 (which indicates an error).
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/newtypes.rst#2025-04-21_snippet_12

LANGUAGE: c
CODE:
```
static Py_hash_t
newdatatype_hash(PyObject *op)
{
    newdatatypeobject *self = (newdatatypeobject *) op;
    Py_hash_t result;
    result = self->some_size + 32767 * self->some_number;
    if (result == -1) {
        result = -2;
    }
    return result;
}
```

----------------------------------------

TITLE: Parsing XML File with Expat in Python
DESCRIPTION: Parses XML data by reading from a file-like object. The file object only needs to provide the read(nbytes) method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pyexpat.rst#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
xmlparser.ParseFile(file)
```

----------------------------------------

TITLE: Writing Text with Python Turtle
DESCRIPTION: This snippet demonstrates how to use the Python turtle module to reset turtles, move to specific coordinates, and write text on the drawing canvas using different fonts. It shows basic setup and text rendering functionality.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_119

LANGUAGE: Python
CODE:
```
for turtle in turtles():
     turtle.reset()
turtle.penup()
turtle.goto(-200,25)
turtle.pendown()
turtle.write("No one expects the Spanish Inquisition!",
     font=("Arial", 20, "normal"))
turtle.penup()
turtle.goto(-100,-50)
turtle.pendown()
turtle.write("Our two chief Turtles are...",
     font=("Arial", 16, "normal"))
turtle.penup()
turtle.goto(-450,-75)
turtle.write(str(turtles()))
```

----------------------------------------

TITLE: Using Unicode characters in Python identifiers
DESCRIPTION: Python code showing how Python 3 supports using Unicode characters in variable names and identifiers, displaying a practical example with a French variable name.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/unicode.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
répertoire = "/tmp/records.log"
with open(répertoire, "w") as f:
    f.write("test\n")
```

----------------------------------------

TITLE: Querying Group Database Entry by Name - Python grp Module
DESCRIPTION: Function that returns a group database entry for a given group name. Raises KeyError if the requested entry cannot be found.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/grp.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
getgrnam(name)
```

----------------------------------------

TITLE: unittest.mock.seal Function for Mock Instance Sealing
DESCRIPTION: The new seal function in unittest.mock allows sealing Mock instances. Sealing prevents further creation of attribute mocks, providing a way to finalize the structure of a mock object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.7.rst#2025-04-21_snippet_35

LANGUAGE: python
CODE:
```
The new :func:`~unittest.mock.seal` function allows sealing
:class:`~unittest.mock.Mock` instances, which will disallow further creation
of attribute mocks.  The seal is applied recursively to all attributes that
are themselves mocks.
(Contributed by Mario Corchero in :issue:`30541`.)
```

----------------------------------------

TITLE: Python Type Ignore Comment
DESCRIPTION: Demonstrates a Python line with a `# type: ignore` comment. When parsed into an AST using `ast.parse` with `type_comments=True`, this comment is represented by a `TypeIgnore` node, including the line number and the optional tag (empty string in this case).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_47

LANGUAGE: Python
CODE:
```
x = 1 # type: ignore
```

----------------------------------------

TITLE: Structuring a MIME Multipart Message with Boundary Separators
DESCRIPTION: This example shows how a MIME multipart message is structured with headers, boundary declarations, and multiple content parts. The message uses the "multipart/mixed" content type with a defined boundary string that separates different parts of the message.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/test_email/data/msg_21.txt#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
From: aperson@dom.ain
To: bperson@dom.ain
Subject: Test
Content-Type: multipart/mixed; boundary="BOUNDARY"

MIME message
--BOUNDARY
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit

One
--BOUNDARY
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit

Two
--BOUNDARY--
End of MIME message
```

----------------------------------------

TITLE: Creating ParamSpec Object using Older Syntax (Python)
DESCRIPTION: Shows the older syntax (Python 3.11 and earlier) for creating a `ParamSpec` object. This method is provided for compatibility.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_124

LANGUAGE: python
CODE:
```
P = ParamSpec('P')
```

----------------------------------------

TITLE: Deprecating pty.slave_open in Python
DESCRIPTION: The pty.slave_open() function is deprecated since Python 2 and will be removed in Python 3.14. A DeprecationWarning is emitted in Python 3.12.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_24

LANGUAGE: Python
CODE:
```
pty.slave_open()
```

----------------------------------------

TITLE: Annotated Metadata Order Matters
DESCRIPTION: Illustrates that the order of multiple metadata elements provided to `Annotated` is preserved and affects equality checks between `Annotated` types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_79

LANGUAGE: Python
CODE:
```
@dataclass
class ctype:
    kind: str

a1 = Annotated[int, ValueRange(3, 10), ctype("char")]
a2 = Annotated[int, ctype("char"), ValueRange(3, 10)]

assert a1 != a2  # Order matters
```

----------------------------------------

TITLE: New Dictionary Methods for Multiprocessing Proxy Objects in Python
DESCRIPTION: Added new methods to multiprocessing proxy objects for dictionaries, including fromkeys(), reversed(), dictionary union (|), and in-place union (|=).
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.14.0a1.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
d.fromkeys()
reversed(d)
d | {}
{} | d
d |= {'b': 2}
```

----------------------------------------

TITLE: File Synchronization and Truncation in Python
DESCRIPTION: Functions fsync(), fdatasync(), and ftruncate() perform file synchronization and truncation operations. fsync() forces write to disk, fdatasync() does the same without metadata, and ftruncate() changes file size.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
def fsync(fd):
    """Force write of file with filedescriptor fd to disk."""
```

LANGUAGE: python
CODE:
```
def fdatasync(fd):
    """Force write of file with filedescriptor fd to disk. Does not force update of
    metadata.
    """
```

LANGUAGE: python
CODE:
```
def ftruncate(fd, length, /):
    """Truncate the file corresponding to file descriptor fd, so that it is at
    most length bytes in size.
    """
```

----------------------------------------

TITLE: Updating AsyncMock and MagicMock method return types
DESCRIPTION: Changes AsyncMock to return MagicMock for synchronous magic methods and MagicMock to return AsyncMock for asynchronous magic methods.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.9.0a1.rst#2025-04-21_snippet_21



----------------------------------------

TITLE: Profile Event Types in Trace Functions
DESCRIPTION: String constants used as event types in profile functions, representing different call states.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sys.rst#2025-04-23_snippet_27

LANGUAGE: python
CODE:
```
'call'
'return'
'c_call'
'c_return'
'c_exception'
```

----------------------------------------

TITLE: Retrieving Handler by Name in Python Logging
DESCRIPTION: Returns a handler with the specified name, or None if there is no handler with that name. This function was added in Python 3.12.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
def getHandlerByName(name):
```

----------------------------------------

TITLE: Returning Turtle to Home - Python
DESCRIPTION: Moves the turtle back to its starting position (0, 0) at the center of the screen. The turtle's orientation remains unchanged. Useful for resetting the turtle's location.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_4

LANGUAGE: Python
CODE:
```
home()
```

----------------------------------------

TITLE: Using IMAP4 IDLE Burst Method for Batch Processing Responses
DESCRIPTION: This snippet shows how to use the burst() method of an Idler object to efficiently process batches of IMAP server responses that occur in quick succession. The example demonstrates collecting multiple EXPUNGE and RECENT responses that occur within a short time interval.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/imaplib.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
>>> with M.idle() as idler:
...     # get a response and any others following by < 0.1 seconds
...     batch = list(idler.burst())
...     print(f'processing {len(batch)} responses...')
...     print(batch)
...
processing 3 responses...
[('EXPUNGE', [b'2']), ('EXPUNGE', [b'1']), ('RECENT', [b'0'])]
```

----------------------------------------

TITLE: Getting All Handler Names in Python Logging
DESCRIPTION: Returns an immutable set of all known handler names. This function was added in Python 3.12.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
def getHandlerNames():
```

----------------------------------------

TITLE: Creating Paths from URIs in Python
DESCRIPTION: Demonstrates the use of Path.from_uri() to create path objects from 'file' URIs, including handling of Windows-specific paths.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pathlib.rst#2025-04-21_snippet_27

LANGUAGE: python
CODE:
```
>>> p = Path.from_uri('file:///etc/hosts')
PosixPath('/etc/hosts')
>>> p = Path.from_uri('file:///c:/windows')
WindowsPath('c:/windows')
>>> p = Path.from_uri('file://server/share')
WindowsPath('//server/share')
```

----------------------------------------

TITLE: Setting Treeview Children in Python
DESCRIPTION: Replaces the children of a specified item with new children. Existing children not in the new list are detached from the tree. No new children can be ancestors of the item.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
set_children(item, *newchildren)
```

----------------------------------------

TITLE: Add is_integer Method to fractions.Fraction - Python
DESCRIPTION: Introduced an `is_integer` method to the `fractions.Fraction` class to determine if a fraction is an integer, enhancing compatibility with `float` and `int` types.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.12.0a4.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
fraction.is_integer()
```

----------------------------------------

TITLE: Print Monthly Calendar - Python
DESCRIPTION: This function prints a month's calendar in a user-friendly format, utilizing prior function definitions for localized display.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/calendar.rst#2025-04-21_snippet_16

LANGUAGE: Python
CODE:
```
.. function:: prmonth(theyear, themonth, w=0, l=0)
```

----------------------------------------

TITLE: Creating a Raw Stream with open
DESCRIPTION: This code demonstrates how to create a raw stream in binary mode while disabling buffering, primarily used as a low-level interface.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/io.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
f = open("myfile.jpg", "rb", buffering=0)
```

----------------------------------------

TITLE: Using getgeneratorstate in Python's inspect module
DESCRIPTION: Shows how to use the new getgeneratorstate function to identify the current state of a generator-iterator.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_62

LANGUAGE: python
CODE:
```
>>> from inspect import getgeneratorstate
>>> def gen():
...     yield 'demo'
...
>>> g = gen()
>>> getgeneratorstate(g)
'GEN_CREATED'
>>> next(g)
'demo'
>>> getgeneratorstate(g)
'GEN_SUSPENDED'
>>> next(g, None)
>>> getgeneratorstate(g)
'GEN_CLOSED'
```

----------------------------------------

TITLE: Encode Bytes to Base64
DESCRIPTION: Function for encoding bytes-like objects to base64, inserting newlines every 76 bytes and ensuring a trailing newline
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/base64.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
def encodebytes(s):\n    Encode bytes-like object to base64 with newline insertions
```

----------------------------------------

TITLE: Shell session demonstrating error
DESCRIPTION: This shell session demonstrates the program's behavior when `my_name` is not defined. The program exits with an error message and a status code of 1.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/__main__.rst#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
$ python start.py
Define the variable `my_name`!
```

----------------------------------------

TITLE: Support Managed Attributes - Py_TPFLAGS_MANAGED_DICT - C
DESCRIPTION: A new type flag added to allow extension classes to support object __dict__ with less bookkeeping, using less memory and with faster access.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_67

LANGUAGE: C
CODE:
```
Py_TPFLAGS_MANAGED_DICT
```

----------------------------------------

TITLE: Adding Loop Factory Parameter to asyncio.run() (Python)
DESCRIPTION: Adds a loop_factory parameter to asyncio.run() to allow specifying a custom event loop factory. This provides more flexibility in configuring the event loop used by asyncio.run().
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.12.0a3.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
asyncio.run(loop_factory=custom_factory)
```

----------------------------------------

TITLE: Parsing XML with ElementTree
DESCRIPTION: Examples of parsing XML files and strings using ElementTree's parse and XML functions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_35

LANGUAGE: python
CODE:
```
from xml.etree import ElementTree as ET

tree = ET.parse('ex-1.xml')

feed = urllib.urlopen(
         'http://planet.python.org/rss10.xml')
tree = ET.parse(feed)

svg = ET.XML("""<svg width="10px" version="1.0">
            </svg>""")
svg.set('height', '320px')
svg.append(elem1)
```

----------------------------------------

TITLE: Displaying directory structure in Shell
DESCRIPTION: This shell command displays the directory structure for an example used in the make_archive function demonstration with base_dir parameter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/shutil.rst#2025-04-21_snippet_7

LANGUAGE: shell
CODE:
```
$ tree tmp
tmp
└── root
    └── structure
        ├── content
            └── please_add.txt
        └── do_not_add.txt
```

----------------------------------------

TITLE: Regenerating Limited ABI Definition
DESCRIPTION: Executes the `make regen-limited-abi` target to regenerate the definition files related to the limited ABI. This is relevant for building extensions compatible with a stable ABI.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/configure.rst#_snippet_2

LANGUAGE: sh
CODE:
```
make regen-limited-abi
```

----------------------------------------

TITLE: Using process_time_ns Function in Python
DESCRIPTION: Similar to process_time(), but returns time in nanoseconds as an integer rather than fractional seconds as a float, avoiding precision loss caused by the float type.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/time.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
process_time_ns() -> int
```

----------------------------------------

TITLE: Adding COMPARE_AND_BRANCH Opcode in CPython Core (Python)
DESCRIPTION: Introduces a new COMPARE_AND_BRANCH instruction for more efficient comparison and branching operations, aligning with PEP 659's intent for local instruction specializations.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.12.0a5.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
COMPARE_AND_BRANCH
```

----------------------------------------

TITLE: Restricting Attributes with __slots__
DESCRIPTION: Demonstrates using __slots__ to restrict which attributes can be added to class instances.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.2.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
>>> class C(object):
...     __slots__ = ('template', 'name')
...
>>> obj = C()
>>> print obj.template
None
>>> obj.template = 'Test'
>>> print obj.template
Test
>>> obj.newattr = None
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
AttributeError: 'C' object has no attribute 'newattr'
```

----------------------------------------

TITLE: Parsing Script Tag with JavaScript
DESCRIPTION: Demonstrates parsing a script tag with type attribute and JavaScript content, showing how the parser handles script elements with embedded content
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/html.parser.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
parser.feed('&lt;script type="text\/javascript"&gt;alert("&lt;strong&gt;hello!&lt;/strong&gt;");&lt;\/script&gt;')
```

----------------------------------------

TITLE: Converting Varint to Signed Integer in Python
DESCRIPTION: A Python function to convert a varint-encoded unsigned integer back to a signed integer. This is used to interpret signed values in the code object's location table.
SOURCE: https://github.com/python/cpython/blob/main/InternalDocs/code_objects.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
def varint_to_svarint(uval):
    return -(uval >> 1) if uval & 1 else (uval >> 1)
```

----------------------------------------

TITLE: Memory Sanitizer Build Optimization
DESCRIPTION: Memory Sanitizer build instrumentation added to handle false positives from various modules including posix, socket, time, test_io and test_faulthandler.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0a1.rst#2025-04-21_snippet_0



----------------------------------------

TITLE: Copying Unicode to New UCS4 Buffer - CPython C API
DESCRIPTION: Copies the content of a Unicode string into a new UCS4 buffer that is allocated using `PyMem_Malloc`. The returned buffer is always null-terminated. Returns the new buffer on success or NULL with a `MemoryError` set on failure. Added in version 3.3.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/unicode.rst#_snippet_54

LANGUAGE: c
CODE:
```
Py_UCS4* PyUnicode_AsUCS4Copy(PyObject *unicode)
```

----------------------------------------

TITLE: Testing for SSL Support in Python
DESCRIPTION: Shows the recommended idiom for checking if SSL support is available in a Python installation before attempting to use SSL functionality.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ssl.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
try:
    import ssl
except ImportError:
    pass
else:
    ...  # do something that requires SSL support
```

----------------------------------------

TITLE: Fixes for Building with Clang on Windows
DESCRIPTION: Minor fixes have been implemented to allow building with ``PlatformToolset=ClangCL`` on Windows, resolving compatibility issues and improving build stability.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.12.0a5.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
Minor fixes to allow building with ``PlatformToolset=ClangCL`` on Windows.
```

----------------------------------------

TITLE: File Ownership Change with chown()
DESCRIPTION: Function to change file owner and group IDs. Supports file descriptors, directory descriptors, and symlink following. Takes numeric uid and gid values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_35

LANGUAGE: python
CODE:
```
chown(path, uid, gid, *, dir_fd=None, follow_symlinks=True)
```

----------------------------------------

TITLE: Activating Stack Trampoline Backend in Python
DESCRIPTION: Function to activate the stack profiler trampoline backend. Currently only supports 'perf' as a backend option. Only available on Linux systems.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sys.rst#2025-04-23_snippet_29

LANGUAGE: python
CODE:
```
activate_stack_trampoline(backend, /)
```

----------------------------------------

TITLE: Regular Expression Unicode Name Escapes
DESCRIPTION: Shows the usage of \N{name} escapes in regular expressions for matching Unicode characters by their names.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
>>> notice = 'Copyright © 2019'
>>> copyright_year_pattern = re.compile(r'\N{copyright sign}\s*(\d{4})')
>>> int(copyright_year_pattern.search(notice).group(1))
2019
```

----------------------------------------

TITLE: Using lru_cache Decorator for Function Memoization in Python
DESCRIPTION: Example showing how to use @lru_cache decorator to cache function results and improve performance for repeated calls.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/functools.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
@lru_cache
def count_vowels(sentence):
    return sum(sentence.count(vowel) for vowel in 'AEIOUaeiou')
```

----------------------------------------

TITLE: Accessing Version via Distribution Instance - Python
DESCRIPTION: Shows how to access the version of a package directly from a `Distribution` instance, providing an alternative to the module-level `version()` function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.metadata.rst#_snippet_24

LANGUAGE: python
CODE:
```
>>> dist.version  # doctest: +SKIP
'0.32.3'
```

----------------------------------------

TITLE: Implementing asynchronous comprehensions in Python
DESCRIPTION: Implements PEP 530 to add support for asynchronous comprehensions, allowing the use of 'async for' in list, set, and dict comprehensions.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.6.0b1.rst#2025-04-21_snippet_6



----------------------------------------

TITLE: Using Enhanced urlencode Function in urllib.parse
DESCRIPTION: Example of the enhanced urlencode function supporting string input with encoding parameters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_74

LANGUAGE: python
CODE:
```
>>> urllib.parse.urlencode([
...      ('type', 'telenovela'),
...      ('name', '¿Dónde Está Elisa?')],
...      encoding='latin-1')
'type=telenovela&name=%BFD%F3nde+Est%E1+Elisa%3F'
```

----------------------------------------

TITLE: Deprecated RLock Usage - Python
DESCRIPTION: RLock instantiation with arguments will be removed in Python 3.15. The Python version does not permit arguments, while the C version ignores all arguments.
SOURCE: https://github.com/python/cpython/blob/main/Doc/deprecations/pending-removal-in-3.15.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
threading.RLock()
```

----------------------------------------

TITLE: Defining PY_CALL_TRAMPOLINE Macro for WebAssembly
DESCRIPTION: Enables call trampolines to mitigate issues with bad function pointer casts in WebAssembly. Define PY_CALL_TRAMPOLINE to enable this feature.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a7.rst#2025-04-21_snippet_0

LANGUAGE: C
CODE:
```
#define PY_CALL_TRAMPOLINE
```

----------------------------------------

TITLE: Defining Codec Class Python
DESCRIPTION: The base class that defines the interfaces for stateless encoding and decoding. Instances of this class should not store state. Use StreamWriter/StreamReader for stateful operations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/codecs.rst#_snippet_18

LANGUAGE: Python
CODE:
```
class Codec:
```

----------------------------------------

TITLE: Handling read-only bytes-like with y format - C API
DESCRIPTION: Converts a read-only Python bytes-like object to a borrowed C character string pointer (`const char *`). Does not accept Unicode objects. The bytes buffer must not contain embedded null bytes; otherwise, a `ValueError` is raised.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/arg.rst#_snippet_6

LANGUAGE: c
CODE:
```
"y" [const char *]
```

----------------------------------------

TITLE: Defining Python C API Exception: PyExc_BrokenPipeError
DESCRIPTION: This code snippet defines the C API exception `PyExc_BrokenPipeError` and maps it to the Python `BrokenPipeError` class.  This mapping ensures that broken pipe errors encountered in C code are correctly propagated as Python exceptions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/exceptions.rst#2025-04-21_snippet_51

LANGUAGE: c
CODE:
```
":c:data:`PyExc_BrokenPipeError`         | :exc:`BrokenPipeError`          |          "
```

----------------------------------------

TITLE: Accessing Codec Details via Python CodecInfo Object
DESCRIPTION: The CodecInfo object, returned by codecs.lookup(), holds details about a codec, including its name, stateless encode/decode functions, and factory functions/classes for incremental and stream codecs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/codecs.rst#_snippet_3

LANGUAGE: Python
CODE:
```
import codecs

try:
    codec_info = codecs.lookup("utf-8")

    print(f"Name: {codec_info.name}")

    # Get stateless encode/decode functions
    stateless_encode = codec_info.encode
    stateless_decode = codec_info.decode

    # Get incremental encoder/decoder factories (if available)
    inc_encoder_factory = codec_info.incrementalencoder
    inc_decoder_factory = codec_info.incrementaldecoder

    # Get stream writer/reader factories (if available)
    stream_writer_factory = codec_info.streamwriter
    stream_reader_factory = codec_info.streamreader

    # Example usage of a stateless function
    encoded = stateless_encode("test string")[0] # [0] gets the bytes object
    print(f"Stateless encode result: {encoded}")

except LookupError:
    print("Codec not found.")
```

----------------------------------------

TITLE: Fixing OverflowError in Unicode Escape Codec
DESCRIPTION: Resolves OverflowError in the 'unicode-escape' codec and codecs.escape_decode() when decoding an escaped non-ascii byte.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.6.4rc1.rst#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
codecs.escape_decode(b'\xff')  # No longer raises OverflowError
```

----------------------------------------

TITLE: Adding Help Text to Positional Arguments
DESCRIPTION: Enhances the previous example by adding a help text to the positional argument. This makes the command-line help more informative for users.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/argparse.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("echo", help="echo the string you use here")
args = parser.parse_args()
print(args.echo)
```

----------------------------------------

TITLE: Getting Codec Incremental Decoder Factory with Python codecs.getincrementaldecoder
DESCRIPTION: Looks up the codec for the given encoding and returns its incremental decoder class or factory function. Raises LookupError if the encoding is not found or lacks an incremental decoder.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/codecs.rst#_snippet_7

LANGUAGE: Python
CODE:
```
import codecs

try:
    IncrementalDecoderFactory = codecs.getincrementaldecoder("utf-8")
    decoder = IncrementalDecoderFactory()
    part1 = decoder.decode(b"hello ")
    part2 = decoder.decode(b"world", final=True)
    print(f"Incremental decode result: {part1 + part2}")
except LookupError as e:
    print(f"Incremental decoder not found: {e}")
```

----------------------------------------

TITLE: Querying dictionary view mapping in Python
DESCRIPTION: Adds a 'mapping' attribute to dictionary views that provides a MappingProxyType wrapping of the original dictionary.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a1.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
view = some_dict.keys()
mapping_proxy = view.mapping
```

----------------------------------------

TITLE: Parsing Bytes Objects with BytesParser in Python
DESCRIPTION: Similar to parse() but takes a bytes-like object instead of a file-like object. Equivalent to wrapping the bytes in a BytesIO instance and calling parse(). The headersonly parameter determines whether to parse only headers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.parser.rst#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
parsebytes(bytes, headersonly=False)
```

----------------------------------------

TITLE: Checking Module Object Type in C
DESCRIPTION: Utility functions to verify if a PyObject is a module or module type object, used for type checking and validation in CPython extensions
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/module.rst#2025-04-21_snippet_0

LANGUAGE: c
CODE:
```
int PyModule_Check(PyObject *p)
```

LANGUAGE: c
CODE:
```
int PyModule_CheckExact(PyObject *p)
```

----------------------------------------

TITLE: Parsing Global Statement in Python AST
DESCRIPTION: This example shows the AST structure for a `global` statement declaring multiple names. The `ast.dump` output displays the `Module` containing a `Global` node, with its `names` attribute being a list of the declared variable names as strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_57

LANGUAGE: python
CODE:
```
>>> print(ast.dump(ast.parse('global x,y,z'), indent=4))
Module(
    body=[
        Global(
            names=[
                'x',
                'y',
                'z'])])
```

----------------------------------------

TITLE: Iterator Type Checking in C
DESCRIPTION: Function to check if an object can be safely used as an iterator with PyIter_NextItem. Returns non-zero for valid iterators and 0 otherwise.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/iter.rst#2025-04-21_snippet_0

LANGUAGE: c
CODE:
```
int PyIter_Check(PyObject *o)
```

----------------------------------------

TITLE: Using Fused Multiply-Add with Decimal.fma in Python
DESCRIPTION: Shows how the `fma` method performs a fused multiply-add operation (self * other + third) without intermediate rounding of the product, demonstrating a basic calculation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/decimal.rst#_snippet_23

LANGUAGE: Python
CODE:
```
Decimal(2).fma(3, 5)
Decimal('11')
```

----------------------------------------

TITLE: BZ2Compressor Class for Incremental Compression in Python
DESCRIPTION: The BZ2Compressor class allows incremental compression of data using the bzip2 algorithm. It provides methods to compress data in chunks and finalize the compression process.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/bz2.rst#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
BZ2Compressor(compresslevel=9)
```

----------------------------------------

TITLE: Using Run Function with Subprocess
DESCRIPTION: Example of using the run() function to capture return code from a subprocess execution. Demonstrates modern approach to subprocess execution with return code checking.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/subprocess.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
run(...).returncode
```

----------------------------------------

TITLE: Hashing Memory Views in Python
DESCRIPTION: Shows how hashable (read-only) memoryviews with certain formats can be used in hash-based collections.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_70

LANGUAGE: python
CODE:
```
>>> v = memoryview(b'abcefg')
>>> hash(v) == hash(b'abcefg')
True
>>> hash(v[2:4]) == hash(b'ce')
True
```

----------------------------------------

TITLE: Argument Unpacking with * and ** Operators
DESCRIPTION: Demonstrates how to unpack arguments from lists and dictionaries when calling functions
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/controlflow.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
args = [3, 6]
list(range(*args))

d = {"voltage": "four million", "state": "bleedin' demised", "action": "VOOM"}
parrot(**d)
```

----------------------------------------

TITLE: Warning Filter Actions Table
DESCRIPTION: Table defining the possible actions for warning filters and their effects on warning handling
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/warnings.rst#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
"default" - print first occurrence per location
"error"   - turn warnings into exceptions
"ignore"  - never print warnings
"always"  - always print warnings
"all"     - alias to "always"
"module"  - print first occurrence per module
"once"    - print only first occurrence
```

----------------------------------------

TITLE: Parsing XML String with SAX in Python
DESCRIPTION: Similar to parse(), but parses from a string buffer instead of a file. The string must be a str instance or a bytes-like object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.sax.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
parseString(string, handler, error_handler=handler.ErrorHandler())
```

----------------------------------------

TITLE: Adding Test Boilerplate to IDLE Module (Python)
DESCRIPTION: Code to add at the end of an IDLE module (abc.py) to enable running its tests directly.
SOURCE: https://github.com/python/cpython/blob/main/Lib/idlelib/idle_test/README.txt#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
if __name__ == "__main__":
    from unittest import main
    main('idlelib.idle_test.test_abc', verbosity=2, exit=False)
```

----------------------------------------

TITLE: Backward Compatible Generic Type Alias (Python)
DESCRIPTION: Shows the older method of creating a generic type alias using assignment with a `TypeVar`, provided for backward compatibility.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_38

LANGUAGE: Python
CODE:
```
from collections.abc import Iterable
from typing import TypeVar

S = TypeVar("S")
Response = Iterable[S] | int
```

----------------------------------------

TITLE: Default dest and metavar in argparse Python
DESCRIPTION: Demonstrates the default behavior of the `dest` and `metavar` parameters in `argparse`. `dest` defaults to the argument name with hyphens replaced by underscores, and `metavar` defaults to the upper-cased name.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/argparse.rst#_snippet_30

LANGUAGE: python
CODE:
```
>>> parser = argparse.ArgumentParser(prog='PROG')
>>> parser.add_argument('--foo-bar')
>>> parser.parse_args(['--foo-bar', 'FOO-BAR'])
Namespace(foo_bar='FOO-BAR')
>>> parser.print_help()
usage:  [-h] [--foo-bar FOO-BAR]

optional arguments:
  -h, --help  show this help message and exit
  --foo-bar FOO-BAR
```

----------------------------------------

TITLE: File Path References in CPython JIT
DESCRIPTION: Core file paths referenced in the JIT implementation, including the optimizer, executor cases, and bytecode definitions.
SOURCE: https://github.com/python/cpython/blob/main/InternalDocs/jit.md#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
Python/optimizer.c
Python/optimizer_analysis.c
Python/executor_cases.c.h
Python/bytecodes.c
Tools/jit/template.c
jit_stencils.h
```

----------------------------------------

TITLE: Adding Key Function to bisect Module in Python
DESCRIPTION: Adds a key function parameter to the bisect module for custom sorting criteria in binary search operations.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a2.rst#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
bisect.bisect(key=key_func)
```

----------------------------------------

TITLE: PyVectorcall_Function Function
DESCRIPTION: This function returns the vectorcall function pointer from an object if the object supports the vectorcall protocol. It returns NULL if the object does not support vectorcall.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/call.rst#2025-04-21_snippet_4

LANGUAGE: c
CODE:
```
"vectorcallfunc PyVectorcall_Function(PyObject *op)"
```

----------------------------------------

TITLE: Recording Hits in Specialized Instructions
DESCRIPTION: This snippet demonstrates how to record a hit in the statistics after all guards have passed in a specialized instruction.
SOURCE: https://github.com/python/cpython/blob/main/InternalDocs/interpreter.md#2025-04-21_snippet_8

LANGUAGE: c
CODE:
```
STAT_INC(BASE_INSTRUCTION, hit)
```

----------------------------------------

TITLE: Calendar Module Exceptions - Python
DESCRIPTION: This section defines exceptions that are specific to the calendar module, facilitating error handling for invalid month and weekday inputs.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/calendar.rst#2025-04-21_snippet_25

LANGUAGE: Python
CODE:
```
.. exception:: IllegalMonthError(month)
```

LANGUAGE: Python
CODE:
```
.. exception:: IllegalWeekdayError(weekday)
```

----------------------------------------

TITLE: Setting PowerShell Execution Policy for Virtual Environments
DESCRIPTION: This PowerShell command sets the execution policy to allow running activation scripts for virtual environments on Windows.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/venv.rst#2025-04-21_snippet_2

LANGUAGE: powershell
CODE:
```
PS C:\> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
```

----------------------------------------

TITLE: Fixing f-string Parsing in Python
DESCRIPTION: Code snippets demonstrating f-string parsing fixes, including handling of backslashes and newlines in f-strings.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.6.2rc1.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
eval("f'\\n'") # Now works correctly
eval("f'\\r'") # Now works correctly
```

----------------------------------------

TITLE: Using window.scroll() Method in Python Curses
DESCRIPTION: Scrolls the screen or scrolling region upward by a specified number of lines. By default, it scrolls up one line if no parameter is provided.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_94

LANGUAGE: python
CODE:
```
window.scroll([lines=1])
```

----------------------------------------

TITLE: Demonstrating memoryview hash value comparison
DESCRIPTION: Example showing that hashing a memoryview slice is consistent with hashing the equivalent bytes object slice.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_71

LANGUAGE: python
CODE:
```
hash(v[::-2]) == hash(b'abcefg'[::-2])
```

----------------------------------------

TITLE: Mock Chained Calls
DESCRIPTION: Demonstrates how to mock and test chained method calls using return_value configuration.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock-examples.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
>>> mock = Mock()
>>> mock().foo(a=2, b=3)
<Mock name='mock().foo()' id='...'>
>>> mock.return_value.foo.assert_called_with(a=2, b=3)
```

----------------------------------------

TITLE: Listing DTrace probes for Python on macOS
DESCRIPTION: Commands to list available DTrace probes for a running Python process on macOS.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/instrumentation.rst#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
$ python3.6 -q &
$ sudo dtrace -l -P python$!  # or: dtrace -l -m python3.6
```

----------------------------------------

TITLE: Namedtuple Access Optimization
DESCRIPTION: Performance improvement for namedtuple attribute access using C fast-path for name descriptors, resulting in 1.6x speedup.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0a1.rst#2025-04-21_snippet_2



----------------------------------------

TITLE: Convert Unicode Character to Decimal Integer in C
DESCRIPTION: Converts a Unicode code point representing a decimal digit to its corresponding positive integer value. Returns the integer value or -1 if the character is not a decimal digit. This function does not raise exceptions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/unicode.rst#_snippet_31

LANGUAGE: c
CODE:
```
int Py_UNICODE_TODECIMAL(Py_UCS4 ch)
```

----------------------------------------

TITLE: Creating Python File Object from File Descriptor in C
DESCRIPTION: Creates a Python file object from an already opened file descriptor. It takes various parameters to configure the file object, with some arguments allowing NULL for default values. Returns NULL on failure.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/file.rst#2025-04-21_snippet_0

LANGUAGE: C
CODE:
```
PyObject* PyFile_FromFd(int fd, const char *name, const char *mode, int buffering, const char *encoding, const char *errors, const char *newline, int closefd)
```

----------------------------------------

TITLE: Importing Modules from ZIP Archives - Python
DESCRIPTION: This snippet demonstrates how to add a ZIP archive to the Python module search path using `sys.path` and how to import a module from that ZIP file. It shows the necessary steps to import a module stored within a ZIP file without needing explicit imports of `zipimport`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.3.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> import sys
>>> sys.path.insert(0, '/tmp/example.zip')  # Add .zip file to front of path
>>> import jwzthreading
>>> jwzthreading.__file__
'/tmp/example.zip/jwzthreading.py'
```

----------------------------------------

TITLE: Register array.array as MutableSequence
DESCRIPTION: This entry registers `array.array` as a `~collections.abc.MutableSequence`.  This aligns the `array.array` type with the MutableSequence abstract base class, providing consistent behavior and interfaces for sequence operations.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a1.rst#2025-04-21_snippet_28



----------------------------------------

TITLE: Parsing File-like Objects with BytesParser in Python
DESCRIPTION: Reads data from a binary file-like object, parses the bytes, and returns the message object. The file object must support both readline and read methods. The headersonly parameter determines whether to parse only headers (False by default).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.parser.rst#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
parse(fp, headersonly=False)
```

----------------------------------------

TITLE: Using math.perm and math.comb Functions
DESCRIPTION: Shows usage of the new combinatoric functions math.perm() and math.comb() for calculating permutations and combinations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
>>> math.perm(10, 3)    # Permutations of 10 things taken 3 at a time
720
>>> math.comb(10, 3)    # Combinations of 10 things taken 3 at a time
120
```

----------------------------------------

TITLE: Converting Maildir to Mbox Format Using Python's Mailbox Module
DESCRIPTION: This snippet demonstrates how to convert a maildir-format mailbox to an mbox-format mailbox using the rewritten mailbox module. It iterates through messages in the source maildir and adds them to the destination mbox file.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.5.rst#2025-04-23_snippet_30

LANGUAGE: python
CODE:
```
import mailbox

# 'factory=None' uses email.Message.Message as the class representing
# individual messages.
src = mailbox.Maildir('maildir', factory=None)
dest = mailbox.mbox('/tmp/mbox')

for msg in src:
    dest.add(msg)
```

----------------------------------------

TITLE: Curses getkey Method Definition
DESCRIPTION: The getkey method reads a character from the window and returns it as a string.  Function keys, keypad keys, and other special keys return a multibyte string containing the key name.  In no-delay mode, it raises an exception if there is no input.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_61

LANGUAGE: python
CODE:
```
.. method:: window.getkey([y, x])

   Get a character, returning a string instead of an integer, as :meth:`getch`
   does. Function keys, keypad keys and other special keys return a multibyte
   string containing the key name.  In no-delay mode, raise an exception if
   there is no input.
```

----------------------------------------

TITLE: Check if Integer is Zero in C
DESCRIPTION: This function checks if a Python integer object is zero. It returns 1 if the object is zero, 0 if it is non-zero, and -1 with an exception set if the object is not a PyLongObject or its subtype.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/long.rst#2025-04-21_snippet_16

LANGUAGE: C
CODE:
```
".. c:function:: int PyLong_IsZero(PyObject *obj)

   Check if the integer object *obj* is zero.

   If *obj* is an instance of :c:type:`PyLongObject` or its subtype,
   return ``1`` when it's zero and ``0`` otherwise.  Else set an
   exception and return ``-1``.

   .. versionadded:: 3.14"
```

----------------------------------------

TITLE: Adding MIME Headers in Python WSGI
DESCRIPTION: Example of adding a Content-Disposition header with MIME parameters using the Headers.add_header method
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/wsgiref.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
h.add_header('content-disposition', 'attachment', filename='bud.gif')
```

----------------------------------------

TITLE: Python API Deprecation Example - Object Formatting
DESCRIPTION: Example of the deprecated object.__format__ behavior change that now raises TypeError for non-empty format strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.4.rst#2025-04-21_snippet_31

LANGUAGE: python
CODE:
```
object.__format__('s')  # Now raises TypeError
```

----------------------------------------

TITLE: Setting up a SocketHandler for Network Logging in Python
DESCRIPTION: Demonstrates how to configure a logging system to send log events over a network using SocketHandler. This setup attaches a SocketHandler to the root logger and creates additional loggers for different application areas.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
import logging, logging.handlers

rootLogger = logging.getLogger('')
rootLogger.setLevel(logging.DEBUG)
socketHandler = logging.handlers.SocketHandler('localhost',
                   logging.handlers.DEFAULT_TCP_LOGGING_PORT)
# don't bother with a formatter, since a socket handler sends the event as
# an unformatted pickle
rootLogger.addHandler(socketHandler)

# Now, we can log to the root logger, or any other logger. First the root...
logging.info('Jackdaws love my big sphinx of quartz.')

# Now, define a couple of other loggers which might represent areas in your
# application:

logger1 = logging.getLogger('myapp.area1')
logger2 = logging.getLogger('myapp.area2')

logger1.debug('Quick zephyrs blow, vexing daft Jim.')
logger1.info('How quickly daft jumping zebras vex.')
logger2.warning('Jail zesty vixen who grabbed pay from quack.')
logger2.error('The five boxing wizards jump quickly.')
```

----------------------------------------

TITLE: Changing function parameter annotations representation
DESCRIPTION: Updates the internal representation of function parameter annotations to use a tuple of strings. This change improves annotation handling and compatibility.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a3.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
def func(x: int, y: str) -> bool:
    pass

assert isinstance(func.__annotations__, tuple)
```

----------------------------------------

TITLE: Iterator Next Function Signature in C
DESCRIPTION: Defines the function signature for the tp_iternext member of the PyTypeObject structure, used to retrieve the next item in an iterator. It corresponds to PyIter_Next, and its presence indicates that instances are iterators. A NULL return signals exhaustion or an error, possibly with StopIteration.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/typeobj.rst#2025-04-21_snippet_36

LANGUAGE: C
CODE:
```
"PyObject *tp_iternext(PyObject *self);"
```

----------------------------------------

TITLE: Extracting Subslices with Subslices Function in Python
DESCRIPTION: Illustrates the use of the subslices function to generate all contiguous slices of a string. Each subslice is generated as a substring starting at each position of the input.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_81

LANGUAGE: Python
CODE:
```
>>> list(subslices('ABCD'))
['A', 'AB', 'ABC', 'ABCD', 'B', 'BC', 'BCD', 'C', 'CD', 'D']
```

----------------------------------------

TITLE: Initiating IMAP4 Connections via Subprocess in Python
DESCRIPTION: The IMAP4_stream class is designed for IMAP4 connections via a subprocess. It leverages the command parameter with subprocess.Popen to configure connections through stdin/stdout.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/imaplib.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
class IMAP4_stream(command):
    # IMAP4_stream class implementation for subprocess connections
```

----------------------------------------

TITLE: Using TestCase without arguments in Python's unittest
DESCRIPTION: Shows how to instantiate unittest.TestCase without arguments for easier experimentation at the interactive prompt, allowing direct assertion calls.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_58

LANGUAGE: python
CODE:
```
>>> from unittest import TestCase
>>> TestCase().assertEqual(pow(2, 3), 8)
```

----------------------------------------

TITLE: Creating an Eager Task Factory - Python
DESCRIPTION: This function creates an eager task factory that uses a custom task constructor to create new tasks. The custom constructor must be callable and match the signature of the default Task initializer. The resulting factory can be used to set the task factory for an event loop.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/asyncio-task.rst#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
def create_eager_task_factory(custom_task_constructor):
    """
    Create an eager task factory, similar to :func:`eager_task_factory`,
    using the provided *custom_task_constructor* when creating a new task instead
    of the default :class:`Task`.

    *custom_task_constructor* must be a *callable* with the signature matching
    the signature of :class:`Task.__init__ <Task>`.
    The callable must return a :class:`asyncio.Task`-compatible object.

    This function returns a *callable* intended to be used as a task factory of an
    event loop via :meth:`loop.set_task_factory(factory) <loop.set_task_factory>`).

    .. versionadded:: 3.12
    """

```

----------------------------------------

TITLE: Getting Frame Globals in C
DESCRIPTION: The `PyFrame_GetGlobals` function retrieves a frame's globals attribute, ensuring a strong reference that is non-`NULL`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/frame.rst#2025-04-21_snippet_7

LANGUAGE: c
CODE:
```
PyObject* PyFrame_GetGlobals(PyFrameObject *frame)
```

----------------------------------------

TITLE: Calling Function with Tracing Enabled in Python
DESCRIPTION: Calls a function with tracing enabled, saving and restoring the tracing state. Useful for debugging or profiling code from a checkpoint.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sys.rst#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
sys.call_tracing(func, args)
```

----------------------------------------

TITLE: Decrement Reference Count Null-Safe Python C API C
DESCRIPTION: Similar to Py_DECREF, but safely handles a NULL object pointer by doing nothing. Use this when the object pointer might be NULL.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/refcounting.rst#_snippet_8

LANGUAGE: C
CODE:
```
void Py_XDECREF(PyObject *o)
```

----------------------------------------

TITLE: Hashing a Minimal Tree with BLAKE2b
DESCRIPTION: This snippet demonstrates how to hash a minimal binary tree using BLAKE2b in Python. It uses parameters like fanout, depth, and leaf sizes for tree structure hashing.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/hashlib.rst#2025-04-21_snippet_16

LANGUAGE: Python
CODE:
```
>>> from hashlib import blake2b\n>>> FANOUT = 2\n>>> DEPTH = 2\n>>> LEAF_SIZE = 4096\n>>> INNER_SIZE = 64\n>>> buf = bytearray(6000)\n>>> # Left leaf\n... h00 = blake2b(buf[0:LEAF_SIZE], fanout=FANOUT, depth=DEPTH,\n...               leaf_size=LEAF_SIZE, inner_size=INNER_SIZE,\n...               node_offset=0, node_depth=0, last_node=False)\n>>> # Right leaf\n... h01 = blake2b(buf[LEAF_SIZE:], fanout=FANOUT, depth=DEPTH,\n...               leaf_size=LEAF_SIZE, inner_size=INNER_SIZE,\n...               node_offset=1, node_depth=0, last_node=True)\n>>> # Root node\n... h10 = blake2b(digest_size=32, fanout=FANOUT, depth=DEPTH,\n...               leaf_size=LEAF_SIZE, inner_size=INNER_SIZE,\n...               node_offset=0, node_depth=1, last_node=True)\n>>> h10.update(h00.digest())\n>>> h10.update(h01.digest())\n>>> h10.hexdigest()\n'3ad2a9b37c6070e374c7a8c508fe20ca86b6ed54e286e93a0318e95e881db5aa'
```

----------------------------------------

TITLE: Modular Multiplicative Inverse with Pow Function
DESCRIPTION: Illustrates the enhanced three-argument pow() function supporting negative exponents for computing modular multiplicative inverses.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.8.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
>>> pow(38, -1, 137)
119
>>> 119 * 38 % 137
1

>>> x = 369 * pow(4258, -1, 147) % 147
>>> y = (4258 * x - 369) // -147
>>> 4258 * x + 147 * y
369
```

----------------------------------------

TITLE: Handling Different Data Types in Cookies
DESCRIPTION: Shows automatic type conversion when setting cookie values, converting numbers and strings to string representations
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.cookies.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
C = cookies.SimpleCookie()
C["number"] = 7  # equivalent to C["number"] = str(7)
C["string"] = "seven"
print(C["number"].value)  # '7'
print(C["string"].value)  # 'seven'
```

----------------------------------------

TITLE: Handling PyStatus Exit or Error in CPython C API
DESCRIPTION: This snippet demonstrates handling a PyStatus object. It first clears a PyConfig structure, then checks if the status indicates an exit, returning the exit code if so. Otherwise, it calls Py_ExitStatusException to display the error message and exit the process with a non-zero status.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/init_config.rst#_snippet_2

LANGUAGE: C
CODE:
```
PyConfig_Clear(&config);
if (PyStatus_IsExit(status)) {
    return status.exitcode;
}
/* Display the error message and exit the process with
   non-zero exit code */
Py_ExitStatusException(status);
```

----------------------------------------

TITLE: Defining FTP All Errors Set in Python
DESCRIPTION: Creates a set of all possible exceptions that FTP methods may raise due to connection problems. This includes the custom exceptions defined earlier, as well as OSError and EOFError.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ftplib.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
all_errors = (error_reply, error_temp, error_perm, error_proto, OSError, EOFError)
```

----------------------------------------

TITLE: Checking String Key Existence with Error Handling in C
DESCRIPTION: This function checks if a mapping object has a specific UTF-8 encoded string key, returning 1 if it exists and 0 otherwise. On failure, it returns -1.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/mapping.rst#2025-04-21_snippet_9

LANGUAGE: c
CODE:
```
"int PyMapping_HasKeyStringWithError(PyObject *o, const char *key)"
```

----------------------------------------

TITLE: Formatting Enum with f-strings - Python
DESCRIPTION: This snippet demonstrates how to use the __format__ method to customize the behavior of f-strings when formatting Enum members.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/enum.rst#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
>>> class OtherStyle(Enum):
...     ALTERNATE = auto()
...     OTHER = auto()
...     SOMETHING_ELSE = auto()
...     def __format__(self, spec):
...         return f'{self.name}'
...
>>> OtherStyle.ALTERNATE, str(OtherStyle.ALTERNATE), f"{OtherStyle.ALTERNATE}"
(<OtherStyle.ALTERNATE: 1>, 'OtherStyle.ALTERNATE', 'ALTERNATE')
```

----------------------------------------

TITLE: Defining Keyword Arguments in C for Python
DESCRIPTION: This code snippet demonstrates how to define a C function that utilizes keyword arguments in Python. The `keywdarg_parrot` function takes multiple optional parameters and parses them using `PyArg_ParseTupleAndKeywords`. It showcases how to handle default values and print output based on input parameters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/extending.rst#2025-04-21_snippet_15

LANGUAGE: C
CODE:
```
#define PY_SSIZE_T_CLEAN
#include <Python.h>

static PyObject *
keywdarg_parrot(PyObject *self, PyObject *args, PyObject *keywds)
{
    int voltage;
    const char *state = "a stiff";
    const char *action = "voom";
    const char *type = "Norwegian Blue";

    static char *kwlist[] = {"voltage", "state", "action", "type", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, keywds, "i|sss", kwlist,
                                     &voltage, &state, &action, &type))
        return NULL;

    printf("-- This parrot wouldn't %s if you put %i Volts through it.\n", action, voltage);
    printf("-- Lovely plumage, the %s -- It's %s!\n", type, state);

    Py_RETURN_NONE;
}

static PyMethodDef keywdarg_methods[] = {
    {"parrot", (PyCFunction)(void(*)(void))keywdarg_parrot, METH_VARARGS | METH_KEYWORDS,
     "Print a lovely skit to standard output."},
    {NULL, NULL, 0, NULL}   /* sentinel */
};

static struct PyModuleDef keywdargmodule = {
    PyModuleDef_HEAD_INIT,
    "keywdarg",
    NULL,
    -1,
    keywdarg_methods
};

PyMODINIT_FUNC
PyInit_keywdarg(void)
{
    return PyModule_Create(&keywdargmodule);
}
```

----------------------------------------

TITLE: Doctest Raw String Backslash Handling
DESCRIPTION: Demonstrates proper handling of backslashes in doctest examples using raw strings. Shows how backslashes are interpreted differently in raw vs regular docstrings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/doctest.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> def f(x):
...     r'''Backslashes in a raw docstring: m\n'''
...
>>> print(f.__doc__)
Backslashes in a raw docstring: m\n
```

----------------------------------------

TITLE: Adding option to drop frames from traceback
DESCRIPTION: Introduced the possibility to completely drop frames from a traceback by returning `None` from an override of the `traceback.StackSummary.format_frame` method.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a1.rst#2025-04-21_snippet_16



----------------------------------------

TITLE: Using harmonic_mean() function with optional weighting in Python
DESCRIPTION: Examples of using the harmonic_mean() function to calculate the harmonic mean of data. The examples show its application for calculating average speeds, both with equal weighting and with weighted values.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/statistics.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> harmonic_mean([40, 60])
48.0

>>> harmonic_mean([40, 60], weights=[5, 30])
56.0
```

----------------------------------------

TITLE: Setting Process Priority with os.nice in Python
DESCRIPTION: Adjusts the priority ("niceness") of the current process by adding the specified increment to its current nice value. Returns the new niceness value after adjustment.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_67

LANGUAGE: python
CODE:
```
nice(increment, /)
```

----------------------------------------

TITLE: Parent-Child Mock Relationships
DESCRIPTION: Shows how to create and manage parent-child relationships between mock objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.mock.rst#2025-04-21_snippet_41

LANGUAGE: python
CODE:
```
parent = MagicMock()
child1 = MagicMock(return_value=None)
child2 = MagicMock(return_value=None)
parent.child1 = child1
parent.child2 = child2
child1(1)
child2(2)
parent.mock_calls
# Returns [call.child1(1), call.child2(2)]
```

----------------------------------------

TITLE: Setting dlopen Flags in Python
DESCRIPTION: Shows how to use sys.setdlopenflags() to set flags for dlopen calls, enabling lazy symbol resolution when importing modules. Also demonstrates how to share symbols across extension modules.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/sys.rst#2025-04-23_snippet_24

LANGUAGE: python
CODE:
```
sys.setdlopenflags(0)
```

----------------------------------------

TITLE: Base Handler Get Scheme Method
DESCRIPTION: This method returns the URL scheme being used for the current request. The default implementation utilizes the guess_scheme function from wsgiref.util to determine whether the scheme should be 'http' or 'https', based on the request's environ variables.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/wsgiref.rst#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
"   .. method:: BaseHandler.get_scheme()\n\n      Return the URL scheme being used for the current request.  The default\n      implementation uses the :func:`guess_scheme` function from :mod:`wsgiref.util`\n      to guess whether the scheme should be \"http\" or \"https\", based on the current\n      request's :attr:`environ` variables."
```

----------------------------------------

TITLE: Cross-Version Compatible Trashcan Macros for C Extensions
DESCRIPTION: Definition of cross-version compatible macros for the trashcan mechanism. These macros support both older Python versions using the SAFE macros and newer versions using the newer syntax.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.11.rst#2025-04-21_snippet_21

LANGUAGE: c
CODE:
```
#if PY_VERSION_HEX >= 0x03080000
#  define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_BEGIN(op, dealloc)
#  define CPy_TRASHCAN_END(op) Py_TRASHCAN_END
#else
#  define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_SAFE_BEGIN(op)
#  define CPy_TRASHCAN_END(op) Py_TRASHCAN_SAFE_END(op)
#endif
```

----------------------------------------

TITLE: Creating an OK/Cancel Question Dialog with tkinter.messagebox
DESCRIPTION: The askokcancel function creates a dialog asking if an operation should proceed. It shows OK and CANCEL buttons and returns True if OK is clicked, False otherwise.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.messagebox.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
def askokcancel(title=None, message=None, **options):

   Ask if operation should proceed. Shows buttons :data:`OK` and :data:`CANCEL`.
   Returns ``True`` if the answer is ok and ``False`` otherwise.
```

----------------------------------------

TITLE: Process Abort Function - abort
DESCRIPTION: Function to generate a SIGABRT signal to the current process. Results in core dump on Unix and exit code 3 on Windows.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_58

LANGUAGE: python
CODE:
```
abort()
```

----------------------------------------

TITLE: Generating a Plist File with plistlib in Python
DESCRIPTION: This code snippet demonstrates how to generate a plist file using the plistlib module in Python. A dictionary containing various data types is created, and the dumps function is used to serialize it into a plist-formatted bytes object. The output is a plist representation of the data, which can be printed or written to a file.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/plistlib.rst#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
import datetime
import plistlib

pl = dict(
    aString = "Doodah",
    aList = ["A", "B", 12, 32.1, [1, 2, 3]],
    aFloat = 0.1,
    anInt = 728,
    aDict = dict(
        anotherString = "<hello & hi there!>",
        aThirdString = "M\xe4ssig, Ma\xdf",
        aTrueValue = True,
        aFalseValue = False,
    ),
    someData = b"<binary gunk>",
    someMoreData = b"<lots of binary gunk>" * 10,
    aDate = datetime.datetime.now()
)
print(plistlib.dumps(pl).decode())
```

----------------------------------------

TITLE: Setting Syntax Error Location Extended in C
DESCRIPTION: This function is similar to `PyErr_SyntaxLocationObject`, but the filename is provided as a byte string decoded from the filesystem encoding.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/exceptions.rst#2025-04-21_snippet_26

LANGUAGE: C
CODE:
```
"void PyErr_SyntaxLocationEx(const char *filename, int lineno, int col_offset)"
```

----------------------------------------

TITLE: Python Range Object Methods
DESCRIPTION: Demonstrates new index and count methods for range objects along with slicing capabilities.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
>>> range(0, 100, 2).count(10)
1
>>> range(0, 100, 2).index(10)
5
>>> range(0, 100, 2)[5]
10
>>> range(0, 100, 2)[0:5]
range(0, 10, 2)
```

----------------------------------------

TITLE: Creating XML Parser in Python
DESCRIPTION: Creates and returns a new xmlparser object. The encoding and namespace_separator parameters can be specified to control the parser's behavior.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/pyexpat.rst#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
ParserCreate(encoding=None, namespace_separator=None)
```

----------------------------------------

TITLE: Extracting Stack Frames with StackSummary
DESCRIPTION: Class method to construct a StackSummary object from a frame generator. Provides options to limit the number of frames, control line lookup behavior, and capture local variables for debugging.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
StackSummary.extract(frame_gen, *, limit=None, lookup_lines=True, capture_locals=False)
```

----------------------------------------

TITLE: Waiting for Child Process with Resource Usage in Python
DESCRIPTION: The wait3() function is similar to waitpid(), but returns a 3-element tuple including resource usage information. It takes only the options parameter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_78

LANGUAGE: python
CODE:
```
def wait3(options):
    # Function implementation
```

----------------------------------------

TITLE: Get Original Bases Example in Python
DESCRIPTION: Example demonstrating the get_original_bases() function usage with different class types including Generic, NamedTuple, and TypedDict classes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/types.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from typing import TypeVar, Generic, NamedTuple, TypedDict

T = TypeVar("T")
class Foo(Generic[T]): ...
class Bar(Foo[int], float): ...
class Baz(list[str]): ...
Eggs = NamedTuple("Eggs", [("a", int), ("b", str)])
Spam = TypedDict("Spam", {"a": int, "b": str})

assert Bar.__bases__ == (Foo, float)
assert get_original_bases(Bar) == (Foo[int], float)

assert Baz.__bases__ == (list,)
assert get_original_bases(Baz) == (list[str],)

assert Eggs.__bases__ == (tuple,)
assert get_original_bases(Eggs) == (NamedTuple,)

assert Spam.__bases__ == (dict,)
assert get_original_bases(Spam) == (TypedDict,)

assert int.__bases__ == (object,)
assert get_original_bases(int) == (object,)
```

----------------------------------------

TITLE: Retrieving All Group Database Entries - Python grp Module
DESCRIPTION: Function that returns a list of all available group entries in the system in arbitrary order.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/grp.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
getgrall()
```

----------------------------------------

TITLE: Getting Boundary Value from Content-Type
DESCRIPTION: This function retrieves the boundary parameter value from the Content-Type header, facilitating the handling of multipart messages. It uses a fallback object if the boundary is absent.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.compat32-message.rst#2025-04-21_snippet_16

LANGUAGE: Python
CODE:
```
".. method:: get_boundary(failobj=None)\n\n      Return the value of the boundary parameter of the :mailheader:`Content-Type` \n      header of the message, or *failobj*."
```

----------------------------------------

TITLE: Creating a Subprocess Using subprocess.Popen in Python
DESCRIPTION: Demonstrates the creation of a subprocess using the Popen class from the new subprocess module. This class provides a unified interface for creating and interacting with subprocesses.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.4.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
class Popen(args, bufsize=0, executable=None,
           stdin=None, stdout=None, stderr=None,
           preexec_fn=None, close_fds=False, shell=False,
           cwd=None, env=None, universal_newlines=False,
           startupinfo=None, creationflags=0):
```

----------------------------------------

TITLE: Convolution operation with the convolve function in Python
DESCRIPTION: Demonstrates the convolve function which applies a convolution operation between a signal and kernel, useful for filtering and signal processing. The function consumes the signal lazily and the kernel greedily.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_63

LANGUAGE: python
CODE:
```
>>> list(convolve([1, -1, -20], [1, -3])) == [1, -4, -17, 60]
True
>>> data = [20, 40, 24, 32, 20, 28, 16]
>>> list(convolve(data, [0.25, 0.25, 0.25, 0.25]))
[5.0, 15.0, 21.0, 29.0, 29.0, 26.0, 24.0, 16.0, 11.0, 4.0]
>>> list(convolve(data, [1, -1]))
[20, 20, -16, 8, -12, 8, -12, -16]
>>> list(convolve(data, [1, -2, 1]))
[20, 0, -36, 24, -20, 20, -20, -4, 16]
>>> # Verify signal is consumed lazily and the kernel greedily
>>> signal_iterator = iter([10, 20, 30, 40, 50])
>>> kernel_iterator = iter([1, 2, 3])
>>> output_iterator = convolve(signal_iterator, kernel_iterator)
>>> list(kernel_iterator)
[]
>>> next(output_iterator)
10
>>> next(output_iterator)
40
>>> list(signal_iterator)
[30, 40, 50]
```

----------------------------------------

TITLE: Annotating Async Generator as AsyncIterator
DESCRIPTION: Annotates a simple Python asynchronous generator function that only yields values as an `AsyncIterator[YieldType]`, similar to the synchronous case.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_25

LANGUAGE: python
CODE:
```
async def infinite_stream(start: int) -> AsyncIterator[int]:
    while True:
        yield start
        start = await increment(start)
```

----------------------------------------

TITLE: Implementing Name Lookup for Python Objects
DESCRIPTION: Function that emulates Python's internal name lookup mechanism in pure Python code, demonstrating how attribute resolution works in the method resolution order (MRO).
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/descriptor.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
def find_name_in_mro(cls, name, default):
    "Emulate _PyType_Lookup() in Objects/typeobject.c"
```

----------------------------------------

TITLE: Clearing frame locals with clear_frames
DESCRIPTION: Clears local variables from all stack frames in a traceback by calling the clear method on each frame object. Helps with memory management.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/traceback.rst#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
clear_frames(tb)
```

----------------------------------------

TITLE: Selecting nth Combination with Nth_combination in Python
DESCRIPTION: Provides a method to find the nth combination of a given iterable's elements. The function is based on mathematical combinatorics.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_93

LANGUAGE: Python
CODE:
```
def nth_combination(iterable, r, index):
    "Equivalent to list(combinations(iterable, r))[index]"
    pool = tuple(iterable)
    n = len(pool)
    c = math.comb(n, r)
    if index < 0:
        index += c
    if index < 0 or index >= c:
        raise IndexError
    result = []
    while r:
        c, n, r = c*r//n, n-1, r-1
        while index >= c:
            index -= c
            c, n = c*(n-r)//n, n-1
        result.append(pool[-1-n])
    return tuple(result)
```

----------------------------------------

TITLE: Extracting TarFile Member as File Object in Python
DESCRIPTION: Extracts a member from the archive and returns it as a file object (`io.BufferedReader` for regular files/links). Returns `None` for other member types and raises `KeyError` if the member isn't found. The returned file object provides read access to the member's data.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_1

LANGUAGE: python
CODE:
```
TarFile.extractfile(member)
```

----------------------------------------

TITLE: Replacing _PyUnicodeWriter_WriteASCIIString with PyUnicodeWriter_WriteUTF8 in C
DESCRIPTION: Example showing how to replace the deprecated _PyUnicodeWriter_WriteASCIIString() function with the new PyUnicodeWriter_WriteUTF8() function. The new function takes the writer object directly instead of a pointer to it and handles UTF-8 encoding.
SOURCE: https://github.com/python/cpython/blob/main/Doc/deprecations/c-api-pending-removal-in-3.18.rst#2025-04-21_snippet_6

LANGUAGE: c
CODE:
```
_PyUnicodeWriter_WriteASCIIString(&writer, str)
```

LANGUAGE: c
CODE:
```
PyUnicodeWriter_WriteUTF8(writer, str)
```

----------------------------------------

TITLE: Accessing HTML5 Named Character References Dictionary in Python
DESCRIPTION: This snippet demonstrates how to use the html5 dictionary from the html.entities module. It maps HTML5 named character references to their equivalent Unicode characters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/html.entities.rst#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
html5['gt;'] == '>'
```

----------------------------------------

TITLE: Calculating Euclidean Norm in Python
DESCRIPTION: This function computes the Euclidean norm of the given coordinates, helping to find the length of vectors in mathematical and physics applications.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/math.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
.. function:: hypot(*coordinates)

   Return the Euclidean norm, ``sqrt(sum(x**2 for x in coordinates))``.
   This is the length of the vector from the origin to the point
   given by the coordinates.
```

----------------------------------------

TITLE: Configuring Treeview Column Headings in Python
DESCRIPTION: Queries or modifies heading options for a specified column. Options include text, image, anchor, and command. The tree column heading is configured using column="#0".
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
heading(column, option=None, **kw)
```

----------------------------------------

TITLE: Adding Cookie Header in Python
DESCRIPTION: This method adds the appropriate Cookie header to an HTTP request, ensuring that the cookies managed by the CookieJar are sent back to the server as necessary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/http.cookiejar.rst#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
def add_cookie_header(self, request):
    pass
```

----------------------------------------

TITLE: Curses derwin Method Definition
DESCRIPTION: The derwin method creates a derived window, which is similar to a subwindow, but the coordinates are relative to the origin of the parent window. It returns a window object representing the derived window, allowing for focused manipulation of a portion of the parent window.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_52

LANGUAGE: python
CODE:
```
.. method:: window.derwin(begin_y, begin_x)
            window.derwin(nlines, ncols, begin_y, begin_x)

   An abbreviation for "derive window", :meth:`derwin` is the same as calling
   :meth:`subwin`, except that *begin_y* and *begin_x* are relative to the origin
   of the window, rather than relative to the entire screen.  Return a window
   object for the derived window.
```

----------------------------------------

TITLE: Register Type Watcher - PyType_AddWatcher - C
DESCRIPTION: A new C API function allowing registration of callbacks via related APIs (like PyType_Watch) that are invoked whenever a type is modified.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_78

LANGUAGE: C
CODE:
```
PyType_AddWatcher
```

----------------------------------------

TITLE: Get Object Async Iterator (aiter) - CPython C API
DESCRIPTION: This is the equivalent to the Python expression `aiter(o)`. Takes an AsyncIterable object and returns an AsyncIterator for it. This is typically a new iterator but if the argument is an AsyncIterator, this returns itself. Raises TypeError and returns NULL if the object cannot be iterated.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/object.rst#_snippet_48

LANGUAGE: C
CODE:
```
PyObject* PyObject_GetAIter(PyObject *o)
```

----------------------------------------

TITLE: Importing C Extension Modules in Python
DESCRIPTION: Demonstrates usage of PyImport_Inittab, PyImport_AppendInittab, and PyImport_ExtendInittab for importing C extension modules. These should not be used after Py_Initialize is called.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.12.0a2.rst#2025-04-21_snippet_0

LANGUAGE: C
CODE:
```
PyImport_Inittab
PyImport_AppendInittab()
PyImport_ExtendInittab()
Py_Initialize()
```

----------------------------------------

TITLE: Creating IPv4 Networks from Address and Netmask in Python
DESCRIPTION: Demonstrates creating IPv4Network objects using tuples containing IP address and netmask. Shows both integer and string netmask representations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
>>> import ipaddress
>>> ipaddress.IPv4Network(('127.0.0.0', 8))
IPv4Network('127.0.0.0/8')
>>> ipaddress.IPv4Network(('127.0.0.0', '255.0.0.0'))
IPv4Network('127.0.0.0/8')
```

----------------------------------------

TITLE: Parsing Nonlocal Statement in Python AST
DESCRIPTION: This snippet demonstrates the AST structure for a `nonlocal` statement declaring multiple names. The `ast.dump` output presents the `Module` containing a `Nonlocal` node, with its `names` attribute being a list of the declared variable names as strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_58

LANGUAGE: python
CODE:
```
>>> print(ast.dump(ast.parse('nonlocal x,y,z'), indent=4))
Module(
    body=[
        Nonlocal(
            names=[
                'x',
                'y',
                'z'])])
```

----------------------------------------

TITLE: Example of Message Structure Display with _structure Function in Python
DESCRIPTION: This example demonstrates the output of the _structure function when applied to an email message. It shows the nested MIME structure with indentation representing the hierarchy of message parts.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.iterators.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
>>> msg = email.message_from_file(somefile)
>>> _structure(msg)
multipart/mixed
    text/plain
    text/plain
    multipart/digest
        message/rfc822
            text/plain
        message/rfc822
            text/plain
        message/rfc822
            text/plain
        message/rfc822
            text/plain
        message/rfc822
            text/plain
    text/plain
```

----------------------------------------

TITLE: Checking for Known Encoding in C
DESCRIPTION: Determines if there is a registered codec for the specified encoding, returning 1 or 0. This function always succeeds, meaning no exceptions are raised.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/codec.rst#2025-04-21_snippet_2

LANGUAGE: C
CODE:
```
int PyCodec_KnownEncoding(const char *encoding)
```

----------------------------------------

TITLE: MIME Email Message Structure
DESCRIPTION: Shows the structure of a multipart MIME email message including headers, content-type specification with boundary declaration, and a text/plain message part enclosed within boundary delimiters.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/test_email/data/msg_23.txt#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
From: aperson@dom.ain
Content-Type: multipart/mixed; boundary="BOUNDARY"

--BOUNDARY
Content-Type: text/plain

A message part
--BOUNDARY--
```

----------------------------------------

TITLE: Unicode Writer API Deprecation Replacements
DESCRIPTION: Shows replacement patterns for deprecated Unicode writer functions that will be removed in Python 3.18.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.14.0a6.rst#2025-04-21_snippet_3

LANGUAGE: C
CODE:
```
_PyUnicodeWriter_Init(&writer) -> writer = PyUnicodeWriter_Create(0)
_PyUnicodeWriter_Finish(&writer) -> PyUnicodeWriter_Finish(writer)
_PyUnicodeWriter_Dealloc(&writer) -> PyUnicodeWriter_Discard(writer)
_PyUnicodeWriter_WriteChar(&writer, ch) -> PyUnicodeWriter_WriteChar(writer, ch)
_PyUnicodeWriter_WriteStr(&writer, str) -> PyUnicodeWriter_WriteStr(writer, str)
_PyUnicodeWriter_WriteSubstring(&writer, str, start, end) -> PyUnicodeWriter_WriteSubstring(writer, str, start, end)
_PyUnicodeWriter_WriteASCIIString(&writer, str) -> PyUnicodeWriter_WriteUTF8(writer, str)
_PyUnicodeWriter_WriteLatin1String(&writer, str) -> PyUnicodeWriter_WriteUTF8(writer, str)
```

----------------------------------------

TITLE: Simple Python Script Execution in Shell
DESCRIPTION: Demonstrates the most common use case: executing a Python script by passing the script filename as an argument to the Python interpreter.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/cmdline.rst#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
python myscript.py
```

----------------------------------------

TITLE: Detecting __debug__ Assignment with -O in Python
DESCRIPTION: Shows that writes to the `__debug__` built-in constant are now detected as a `SyntaxError` even when code is optimized with the `-O` command-line option.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_16

LANGUAGE: Shell
CODE:
```
python -O -c 'assert (__debug__ := 1)'
```

LANGUAGE: Python
CODE:
```
__debug__
```

LANGUAGE: Python
CODE:
```
SyntaxError
```

----------------------------------------

TITLE: Demonstrating Independent Module Objects in Python
DESCRIPTION: This Python code demonstrates how multiple independent module objects can be created from a single shared library. It imports the 'binascii' module, removes it from sys.modules, and then imports it again, creating a new module object. The comparison shows that the two modules are distinct.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/isolating-extensions.rst#2025-04-21_snippet_0

LANGUAGE: pycon
CODE:
```

   >>> import sys
   >>> import binascii
   >>> old_binascii = binascii
   >>> del sys.modules['binascii']
   >>> import binascii  # create a new module object
   >>> old_binascii == binascii
   False

```

----------------------------------------

TITLE: Completing Parsing with BytesFeedParser in Python
DESCRIPTION: Completes the parsing process of all previously fed data and returns the root message object. The behavior is undefined if feed() is called after this method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.parser.rst#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
close()
```

----------------------------------------

TITLE: Curses immedok Method Definition
DESCRIPTION: The immedok method sets a flag that, when True, causes any change in the window image to automatically refresh the window. This eliminates the need to manually call refresh, but can degrade performance due to repeated refreshes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_69

LANGUAGE: python
CODE:
```
.. method:: window.immedok(flag)

   If *flag* is ``True``, any change in the window image automatically causes the
   window to be refreshed; you no longer have to call :meth:`refresh` yourself.
   However, it may degrade performance considerably, due to repeated calls to
   wrefresh.  This option is disabled by default.
```

----------------------------------------

TITLE: Sorting with functools.cmp_to_key in Python
DESCRIPTION: functools.cmp_to_key converts comparison functions from Python 2 to Python 3 style sort keys. This aids in transitioning to the key-function paradigm essential for sorting operations, enabling compatibility with locale-aware sort orders or custom comparison logic.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
>>> sorted(iterable, key=cmp_to_key(locale.strcoll)) # doctest: +SKIP
```

----------------------------------------

TITLE: Manual Descriptor Initialization After Class Creation using __set_name__ Python
DESCRIPTION: This snippet illustrates that if a descriptor instance is assigned to a class attribute *after* the class has been created, the `__set_name__` method is *not* automatically invoked. It shows how to manually call `__set_name__` on the descriptor instance, passing the owning class and the attribute name.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_14

LANGUAGE: Python
CODE:
```
class A:
   pass

c = C()
A.x = c                  # The hook is not called
c.__set_name__(A, 'x')   # Manually invoke the hook
```

----------------------------------------

TITLE: Check if Unicode Character is Uppercase in C
DESCRIPTION: Checks if a given Unicode code point is an uppercase character. Returns 1 if it is uppercase, 0 otherwise.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/unicode.rst#_snippet_19

LANGUAGE: c
CODE:
```
int Py_UNICODE_ISUPPER(Py_UCS4 ch)
```

----------------------------------------

TITLE: Checking if an Object is a Type Object
DESCRIPTION: This function checks if a given object is a type object or an instance of a type derived from the standard type object. It returns a non-zero value if it is, and 0 otherwise. It always succeeds.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/type.rst#2025-04-21_snippet_2

LANGUAGE: c
CODE:
```
".. c:function:: int PyType_Check(PyObject *o)\n\n   Return non-zero if the object *o* is a type object, including instances of\n   types derived from the standard type object.  Return 0 in all other cases.\n   This function always succeeds."
```

----------------------------------------

TITLE: Listing Online Runtimes with py Command Line
DESCRIPTION: Shows how to use the `py list` command with the `--online` option to find a specific Python version (3.14) available in the online index. This command helps identify which runtimes are available for installation from the default source.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/windows.rst#_snippet_4

LANGUAGE: Shell
CODE:
```
$> py list --online 3.14
```

----------------------------------------

TITLE: Instantiating MIMENonMultipart in Python
DESCRIPTION: Creates a base class for non-multipart MIME messages. This prevents the use of the attach method, which doesn't make sense for non-multipart messages.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.mime.rst#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
MIMENonMultipart()
```

----------------------------------------

TITLE: Using z85decode in Python
DESCRIPTION: Decodes Z85-encoded bytes-like objects or ASCII strings and returns the decoded bytes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/base64.rst#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
z85decode(s)
```

----------------------------------------

TITLE: Silently Install Python System-Wide (Command Prompt)
DESCRIPTION: Demonstrates a command for performing a silent, system-wide installation of Python. It installs for all users, adds Python to the system's PATH, but excludes the standard library test suite. Requires elevated command prompt privileges.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/windows.rst#_snippet_16

LANGUAGE: Batch
CODE:
```
python-3.9.0.exe /quiet InstallAllUsers=1 PrependPath=1 Include_test=0
```

----------------------------------------

TITLE: Subclassing Repr to Add Support for Custom Object Types in Python
DESCRIPTION: Example of extending the Repr class to customize representation of specific types. This code adds special handling for file objects by creating a MyRepr class with a custom repr_TextIOWrapper method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/reprlib.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
import reprlib
import sys

class MyRepr(reprlib.Repr):

    def repr_TextIOWrapper(self, obj, level):
        if obj.name in {'<stdin>', '<stdout>', '<stderr>'}:
            return obj.name
        return repr(obj)

aRepr = MyRepr()
print(aRepr.repr(sys.stdin))         # prints '<stdin>'
```

----------------------------------------

TITLE: Simple Handler Class Definition
DESCRIPTION: This class is similar to BaseCGIHandler but is designed for use with HTTP origin servers. If you are writing an HTTP server implementation, you will probably want to subclass this instead of :class:`BaseCGIHandler`. It overrides several methods to support explicitly setting the environment and streams via the constructor.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/wsgiref.rst#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
".. class:: SimpleHandler(stdin, stdout, stderr, environ, multithread=True, multiprocess=False)\n\n   Similar to :class:`BaseCGIHandler`, but designed for use with HTTP origin\n   servers.  If you are writing an HTTP server implementation, you will probably\n   want to subclass this instead of :class:`BaseCGIHandler`.\n\n   This class is a subclass of :class:`BaseHandler`.  It overrides the\n   :meth:`!__init__`, :meth:`~BaseHandler.get_stdin`,\n   :meth:`~BaseHandler.get_stderr`, :meth:`~BaseHandler.add_cgi_vars`,\n   :meth:`~BaseHandler._write`, and :meth:`~BaseHandler._flush` methods to\n   support explicitly setting the\n   environment and streams via the constructor.  The supplied environment and\n   streams are stored in the :attr:`stdin`, :attr:`stdout`, :attr:`stderr`, and\n   :attr:`environ` attributes.\n\n   The :meth:`~io.BufferedIOBase.write` method of *stdout* should write\n   each chunk in full, like :class:`io.BufferedIOBase`."
```

----------------------------------------

TITLE: Hiding Tab in Notebook in Python
DESCRIPTION: Method to hide a specified tab in a ttk.Notebook widget while keeping its configuration.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
def hide(tab_id):
    Hides the tab specified by *tab_id*.

    The tab will not be displayed, but the associated window remains
    managed by the notebook and its configuration remembered. Hidden tabs
    may be restored with the :meth:`add` command.
```

----------------------------------------

TITLE: Configuring Extension Module Build in Modules/Setup.local
DESCRIPTION: Shows how to add a line to the Modules/Setup.local file to include a new extension module in the Python build process.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/extending.rst#2025-04-21_snippet_9

LANGUAGE: sh
CODE:
```
spam spammodule.o
```

----------------------------------------

TITLE: Executing Code Module with Pathnames (PyObject) in C
DESCRIPTION: This function is similar to PyImport_ExecCodeModuleEx, but the __cached__ attribute of the module object is set to cpathname if it is non-NULL.  Of the three functions, this is the preferred one to use. The name, co, pathname and cpathname are PyObject*.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/import.rst#2025-04-21_snippet_12

LANGUAGE: c
CODE:
```
"PyObject* PyImport_ExecCodeModuleObject(PyObject *name, PyObject *co, PyObject *pathname, PyObject *cpathname)"
```

----------------------------------------

TITLE: Importing Turtle Module - Python
DESCRIPTION: Imports all objects (functions, classes, etc.) from the `turtle` module into the current namespace, allowing direct use of turtle commands without the `turtle.` prefix. Requires the `turtle` module to be installed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from turtle import *
```

----------------------------------------

TITLE: Parsing Boolean 'or' Operation into AST (Python)
DESCRIPTION: Illustrates the AST representation of a boolean 'or' operation. Parsing `x or y` results in a `BoolOp` node with the `Or` operator and a list of values (`x`, `y`).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/ast.rst#_snippet_18

LANGUAGE: python
CODE:
```
print(ast.dump(ast.parse('x or y', mode='eval'), indent=4))
```

----------------------------------------

TITLE: Queue Handler Implementation Methods
DESCRIPTION: Core methods of QueueHandler class including emit, prepare, and enqueue for handling log records in a queue-based system.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_38

LANGUAGE: python
CODE:
```
def emit(record):
    # Enqueues prepared LogRecord

def prepare(record):
    # Prepares record for queuing

def enqueue(record):
    # Enqueues record using put_nowait()
```

----------------------------------------

TITLE: Adding Protocol and runtime_checkable to typing Module
DESCRIPTION: Implementation of PEP 544 by adding Protocol and @runtime_checkable to the typing module for structural subtyping.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.8.0b1.rst#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
Protocol
@runtime_checkable
```

----------------------------------------

TITLE: Progressbar Start Method
DESCRIPTION: Method to begin autoincrement mode for a ttk.Progressbar widget. Sets up a recurring timer to call step() at specified intervals.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
def start(interval=None):
```

----------------------------------------

TITLE: Defining BufferedWriter Class in Python
DESCRIPTION: BufferedWriter is a buffered binary stream for writing to a non-seekable RawIOBase object. It buffers data and writes it under certain conditions.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/io.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
class BufferedWriter(raw, buffer_size=DEFAULT_BUFFER_SIZE):
    # ... method definitions ...

    def flush():
        # Force bytes held in the buffer into the raw stream
        pass

    def write(b, /):
        # Write bytes-like object b and return number of bytes written
        pass
```

----------------------------------------

TITLE: Updating Panel Stack with update_panels() in Python Curses
DESCRIPTION: Updates the virtual screen after changes in the panel stack. Requires manual calling of curses.doupdate() afterward.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.panel.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
update_panels()
```

----------------------------------------

TITLE: Using Custom Timer in Python Profiler
DESCRIPTION: Shows how to use a custom timing function with the Profile class constructor. This allows for customization of how current time is determined during profiling, such as using wall-clock time or elapsed process time.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/profile.rst#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
pr = profile.Profile(your_time_func)
```

----------------------------------------

TITLE: Basic Python TestCase Implementation
DESCRIPTION: Shows a simple TestCase subclass implementation with a single test method checking widget size.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
import unittest

class DefaultWidgetSizeTestCase(unittest.TestCase):
    def test_default_widget_size(self):
        widget = Widget('The widget')
        self.assertEqual(widget.size(), (50, 50))
```

----------------------------------------

TITLE: Pair Finding in Poker Hands
DESCRIPTION: Using backreferences to find pairs in poker hands and extract the paired card.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/re.rst#2025-04-21_snippet_26

LANGUAGE: python
CODE:
```
>>> pair = re.compile(r".*(.).*\1")
>>> pair.match("717ak").group(1)
'7'
>>> pair.match("354aa").group(1)
'a'
```

----------------------------------------

TITLE: Implementing a Generator Function in Python
DESCRIPTION: This snippet shows how to create a simple generator function that yields elements of a sequence in reverse order.
SOURCE: https://github.com/python/cpython/blob/main/Doc/tutorial/classes.rst#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
def reverse(data):
    for index in range(len(data)-1, -1, -1):
        yield data[index]
```

----------------------------------------

TITLE: Running Python Script from Terminal in macOS
DESCRIPTION: Example command showing how to execute a Python script file from the macOS terminal using Python 3.13
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/mac.rst#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
python3.13 myscript.py
```

----------------------------------------

TITLE: Checking for Immortal Objects C API
DESCRIPTION: An unstable function added for determining whether an object is immortal, intended primarily for debugging purposes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.14.rst#_snippet_47

LANGUAGE: C
CODE:
```
PyUnstable_IsImmortal
```

----------------------------------------

TITLE: Deprecating `webbrowser.MacOSX` class
DESCRIPTION: The `webbrowser.MacOSX` class is now deprecated and will be removed in a future version of Python. It is untested and undocumented.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a1.rst#2025-04-21_snippet_27



----------------------------------------

TITLE: Support Vectorcall Protocol - PyVectorcall_Call - C
DESCRIPTION: A function added to the Limited API for performing calls using the vectorcall protocol.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.12.rst#_snippet_63

LANGUAGE: C
CODE:
```
PyVectorcall_Call
```

----------------------------------------

TITLE: Implementing GC Methods for types.Union in Python
DESCRIPTION: Implements garbage collection methods for types.Union to break reference cycles and prevent memory leaks.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a1.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
# No code snippet provided, implementation details not shown
```

----------------------------------------

TITLE: Using unittest.main interactively without sys.exit
DESCRIPTION: Example of using unittest.main() in an interactive Python session by setting exit=False. This prevents the function from calling sys.exit() and displays results on standard output instead.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_41

LANGUAGE: python
CODE:
```
>>> from unittest import main
>>> main(module='test_module', exit=False)
```

----------------------------------------

TITLE: Defining Python C API Exception: PyExc_OSError
DESCRIPTION: This code snippet defines the C API exception `PyExc_OSError` and maps it to the Python `OSError` class. This allows C code to signal operating system-related errors within the Python environment. The note '[1]_' likely refers to a footnote providing additional context or details.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/exceptions.rst#2025-04-21_snippet_76

LANGUAGE: c
CODE:
```
":c:data:`PyExc_OSError`                 | :exc:`OSError`                  | [1]_     "
```

----------------------------------------

TITLE: Working with NamedNodeMap in Python XML DOM
DESCRIPTION: Demonstrates how to use the NamedNodeMap object to access attributes by index in the XML DOM.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.dom.rst#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
nodemap.length  # Number of attributes
nodemap.item(index)  # Get attribute node by index
```

----------------------------------------

TITLE: Accessing Type Slots in CPython C API
DESCRIPTION: PyType_GetSlot() function can now accept static types, expanding its usefulness for type introspection and manipulation in C extensions.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a3.rst#2025-04-21_snippet_29

LANGUAGE: C
CODE:
```
PyType_GetSlot(staticType, slotId);
```

----------------------------------------

TITLE: Check if Unicode Character is Titlecase in C
DESCRIPTION: Checks if a given Unicode code point is a titlecase character. Returns 1 if it is titlecase, 0 otherwise.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/unicode.rst#_snippet_20

LANGUAGE: c
CODE:
```
int Py_UNICODE_ISTITLE(Py_UCS4 ch)
```

----------------------------------------

TITLE: Creating Bytes Objects with Different Methods
DESCRIPTION: Shows multiple ways to create bytes objects using various constructors and initialization techniques
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_39

LANGUAGE: python
CODE:
```
bytes(10)
```

LANGUAGE: python
CODE:
```
bytes(range(20))
```

LANGUAGE: python
CODE:
```
bytes(obj)
```

----------------------------------------

TITLE: Check if Unicode Character is Lowercase in C
DESCRIPTION: Checks if a given Unicode code point is a lowercase character. Returns 1 if it is lowercase, 0 otherwise.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/unicode.rst#_snippet_18

LANGUAGE: c
CODE:
```
int Py_UNICODE_ISLOWER(Py_UCS4 ch)
```

----------------------------------------

TITLE: Adding __all__ to datetime module
DESCRIPTION: Adds the __all__ attribute to the datetime module to explicitly define its public API.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.9.0a1.rst#2025-04-21_snippet_28

LANGUAGE: Python
CODE:
```
datetime.__all__
```

----------------------------------------

TITLE: Using mktime Function in Python
DESCRIPTION: Converts a struct_time or 9-tuple in local time to a floating-point timestamp. This is the inverse of localtime() function. If the input is invalid, it raises OverflowError or ValueError.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/time.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
mktime(t)
```

----------------------------------------

TITLE: Defining Python C API Exception: PyExc_KeyError
DESCRIPTION: This code snippet defines the C API exception `PyExc_KeyError` and maps it to the Python `KeyError` class.  This allows C code to signal key-related errors (e.g., accessing a non-existent key in a dictionary) within the Python environment.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/exceptions.rst#2025-04-21_snippet_68

LANGUAGE: c
CODE:
```
":c:data:`PyExc_KeyError`                | :exc:`KeyError`                 |          "
```

----------------------------------------

TITLE: Accessing Comment and Text Node Content in Python XML DOM
DESCRIPTION: Shows how to access the content of Comment and Text/CDATASection nodes in the XML DOM.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xml.dom.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
comment.data  # Content of the comment
text.data  # Content of the text or CDATA section
```

----------------------------------------

TITLE: Abstract Base Class MetaPathFinder in importlib.abc
DESCRIPTION: An abstraction representing meta path finders, crucial for crafting custom modules in Python's import system. It offers functions like find_spec to locate module specifications, utilizing path hints independently. Often extended to build specific meta path finders.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
.. class:: MetaPathFinder

   An abstract base class representing a :term:`meta path finder`.

   .. method:: find_spec(fullname, path, target=None)

      An abstract method for finding a :term:`spec <module spec>` for
      the specified module.
```

----------------------------------------

TITLE: Implementing getSubject() Method for SMTPHandler in Python
DESCRIPTION: Method for determining the email subject line for log messages. Can be overridden to implement record-dependent subject lines for email notifications.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_25

LANGUAGE: python
CODE:
```
def getSubject(self, record):
   """
   If you want to specify a subject line which is record-dependent, override
   this method.
   """
```

----------------------------------------

TITLE: IEEE 754 Remainder Implementation
DESCRIPTION: Added math.remainder() operation implementing IEEE 754 floating-point remainder calculation.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.7.0a1.rst#2025-04-21_snippet_8



----------------------------------------

TITLE: Installing GDB Debug Tools on Fedora
DESCRIPTION: Shell commands to install GDB and Python debug information packages on Fedora Linux
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/gdb_helpers.rst#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
sudo dnf install gdb
sudo dnf debuginfo-install python3
```

----------------------------------------

TITLE: Saving Terminal Settings with Curses in Python
DESCRIPTION: The `savetty` function saves the current terminal settings to be reloaded later using `resetty`. This allows for session restoration following significant terminal configuration changes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_34

LANGUAGE: Python
CODE:
```
.. function:: savetty()

   Save the current state of the terminal modes in a buffer, usable by
   :func:`resetty`.
```

----------------------------------------

TITLE: Checking Numeric Object Compatibility in C
DESCRIPTION: Determines if a PyObject supports numeric protocols. Returns 1 if the object provides numeric operations, and 0 otherwise. Compatible with index integers since Python 3.8.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/number.rst#2025-04-21_snippet_0

LANGUAGE: c
CODE:
```
int PyNumber_Check(PyObject *o)
```

----------------------------------------

TITLE: Using zfill() Method in Python Bytes
DESCRIPTION: Demonstrates zero-filling a bytes sequence to a specified width while handling sign prefixes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_65

LANGUAGE: python
CODE:
```
>>> b"42".zfill(5)
b'00042'
>>> b"-42".zfill(5)
b'-0042'
```

----------------------------------------

TITLE: Adding 'all' Action Support for Warning Filters in Python
DESCRIPTION: Enhancement to warnings module to support 'all' as a valid action parameter for simplefilter and filterwarnings functions.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.14.0a1.rst#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
warnings.simplefilter(action='all')
warnings.filterwarnings(action='all')
```

----------------------------------------

TITLE: Getting Number Input with Dialog in Python Turtle
DESCRIPTION: This example shows how to use `screen.numinput()` to get numerical input from the user via a dialog. It allows specifying a title, prompt, optional default value, and optional minimum/maximum values for validation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_97

LANGUAGE: python
CODE:
```
>>> screen.numinput("Poker", "Your stakes:", 1000, minval=10, maxval=10000)
```

----------------------------------------

TITLE: Creating PyLong and Managing Dictionary Items in C
DESCRIPTION: Illustrates creating a PyLong object and adding it to a dictionary, with error handling for failed operations in C. Dependencies include relevant Python C-API headers. It involves managing PyObjects and requires using Py_DECREF to prevent memory leaks.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/dict.rst#2025-04-21_snippet_2

LANGUAGE: C
CODE:
```
PyObject *o = PyLong_FromLong(i + 1);
if (o == NULL)
    return -1;
if (PyDict_SetItem(self->dict, key, o) < 0) {
    Py_DECREF(o);
    return -1;
}
Py_DECREF(o);
```

----------------------------------------

TITLE: Creating a DateTime Object with Fold in C
DESCRIPTION: This function returns a datetime.datetime object with the specified year, month, day, hour, minute, second, microsecond and fold. This function was added in version 3.6.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/datetime.rst#2025-04-21_snippet_23

LANGUAGE: c
CODE:
```
"PyObject* PyDateTime_FromDateAndTimeAndFold(int year, int month, int day, int hour, int minute, int second, int usecond, int fold)"
```

----------------------------------------

TITLE: Progressbar Stop Method
DESCRIPTION: Method to stop autoincrement mode by canceling any recurring timer events started by the start() method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
def stop():
```

----------------------------------------

TITLE: Enabling Keyboard Traversal for Notebook in Python
DESCRIPTION: Method to enable keyboard traversal for a toplevel window containing a ttk.Notebook widget.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_17

LANGUAGE: Python
CODE:
```
def enable_traversal():
    Enable keyboard traversal for a toplevel window containing this notebook.

    This will extend the bindings for the toplevel window containing the
    notebook as follows:

    * :kbd:`Control-Tab`: selects the tab following the currently selected one.
    * :kbd:`Shift-Control-Tab`: selects the tab preceding the currently selected one.
    * :kbd:`Alt-K`: where *K* is the mnemonic (underlined) character of any tab, will
      select that tab.

    Multiple notebooks in a single toplevel may be enabled for traversal,
    including nested notebooks. However, notebook traversal only works
    properly if all panes have the notebook they are in as master.
```

----------------------------------------

TITLE: Deprecated Usage in os (Python)
DESCRIPTION: Calling the os.register_at_fork function within a multi-threaded process is deprecated due to potential issues.
SOURCE: https://github.com/python/cpython/blob/main/Doc/deprecations/pending-removal-in-future.rst#_snippet_9

LANGUAGE: Python
CODE:
```
os.register_at_fork
```

----------------------------------------

TITLE: Ignoring Non-ASCII Characters in encodings.normalize_encoding() in Python
DESCRIPTION: Updates encodings.normalize_encoding() to ignore non-ASCII characters when normalizing encoding names.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.10.0a2.rst#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
encodings.normalize_encoding()
```

----------------------------------------

TITLE: Flag for Writable Buffer in C
DESCRIPTION: This macro is used as a flag to request a writable buffer when dealing with memoryview objects.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/memoryview.rst#2025-04-21_snippet_2

LANGUAGE: c
CODE:
```
PyBUF_WRITE
```

----------------------------------------

TITLE: Adding Simple Headers
DESCRIPTION: Demonstrates adding a basic header with filename parameter
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.compat32-message.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
msg.add_header('Content-Disposition', 'attachment', filename='bud.gif')
```

----------------------------------------

TITLE: Accessing Type Alias Type Parameters
DESCRIPTION: Demonstrates how to access the type parameters of a generic type alias using the __type_params__ attribute. Shows an empty tuple for non-generic aliases.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_130

LANGUAGE: python
CODE:
```
>>> type ListOrSet[T] = list[T] | set[T]
>>> ListOrSet.__type_params__
(T,)
>>> type NotGeneric = int
>>> NotGeneric.__type_params__
()
```

----------------------------------------

TITLE: Register and Use Compound Shape (Python Turtle)
DESCRIPTION: Shows how to register a previously created compound Shape object (s) with a name ("myshape") using register_shape(). The turtle's shape is then set to this new compound shape using shape(). Requires the turtle module and a defined Shape object.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_83

LANGUAGE: python
CODE:
```
register_shape("myshape", s)
shape("myshape")
```

----------------------------------------

TITLE: Creating Infinite Sequence with Pad_none in Python
DESCRIPTION: Function pad_none returns elements of an iterable and then continues with None indefinitely, emulating the behavior of the built-in map function.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_91

LANGUAGE: Python
CODE:
```
def pad_none(iterable):
    """Returns the sequence elements and then returns None indefinitely.

    Useful for emulating the behavior of the built-in map() function.
    """
    return chain(iterable, repeat(None))
```

----------------------------------------

TITLE: Modifying Module Dictionary in Python
DESCRIPTION: Demonstrates how to modify a module's symbol table by accessing its __dict__ attribute. Direct assignment to __dict__ is not possible, but individual keys can be modified.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_103

LANGUAGE: python
CODE:
```
m.__dict__['a'] = 1
```

----------------------------------------

TITLE: Configuring Python Logging with RotatingFileHandler
DESCRIPTION: This Python snippet demonstrates how to configure the logging module to use a rotating file handler that rotates logs upon reaching 1MB. It highlights the setup of different log handlers and managing logs for both network and system activities. Requires Python's logging module. Key parameters include file path, log level, and max file size. Outputs logs to specified files and rotates them as configured.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.7.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
import logging
import logging.config

configdict = {
 'version': 1,    # Configuration schema in use; must be 1 for now
 'formatters': {
     'standard': {
         'format': ('%(asctime)s %(name)-15s '
                    '%(levelname)-8s %(message)s')}},

 'handlers': {'netlog': {'backupCount': 10,
                     'class': 'logging.handlers.RotatingFileHandler',
                     'filename': '/logs/network.log',
                     'formatter': 'standard',
                     'level': 'INFO',
                     'maxBytes': 1000000},
              'syslog': {'class': 'logging.handlers.SysLogHandler',
                         'formatter': 'standard',
                         'level': 'ERROR'}},

 'loggers': {
             'network': {
                         'handlers': ['netlog']
             }
 },

 'root': {
          'handlers': ['syslog']
 },
}

logging.config.dictConfig(configdict)

logger = logging.getLogger('/')
logger.error('Database not found')

netlogger = logging.getLogger('network')
netlogger.error('Connection failed')
```

----------------------------------------

TITLE: Getting Fold from DateTime Object in C
DESCRIPTION: This macro returns the fold, as an int from 0 through 1, from a PyDateTime_DateTime object. The argument must be an instance of PyDateTime_DateTime, including subclasses. The argument must not be NULL, and the type is not checked. This function was added in version 3.6.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/datetime.rst#2025-04-21_snippet_36

LANGUAGE: c
CODE:
```
"int PyDateTime_DATE_GET_FOLD(PyDateTime_DateTime *o)"
```

----------------------------------------

TITLE: Waiting for Specific Child with Resource Usage in Python
DESCRIPTION: The wait4() function combines features of waitpid() and wait3(), allowing to wait for a specific child process and retrieve resource usage information.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/os.rst#2025-04-21_snippet_79

LANGUAGE: python
CODE:
```
def wait4(pid, options):
    # Function implementation
```

----------------------------------------

TITLE: Using window.touchline() Method in Python Curses
DESCRIPTION: Pretends a specified number of lines have been changed, starting with a given line. An optional changed parameter specifies whether the lines are marked as changed or unchanged.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_105

LANGUAGE: python
CODE:
```
window.touchline(start, count[, changed])
```

----------------------------------------

TITLE: Converting PyLongObject to size_t in C
DESCRIPTION: The function 'PyLong_AsSize_t' converts a Python PyLongObject to a C size_t representation. It raises an OverflowError if the value is out of range and returns (size_t)-1 on error. The PyErr_Occurred function can be used to check for errors.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/long.rst#2025-04-21_snippet_4

LANGUAGE: C
CODE:
```
size_t PyLong_AsSize_t(PyObject *pylong)
```

----------------------------------------

TITLE: Getting Underlying Array of Fast Sequence in C
DESCRIPTION: Returns a pointer to the underlying array of PyObject pointers from a fast sequence representation, allowing direct access to the elements.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/sequence.rst#2025-04-21_snippet_20

LANGUAGE: C
CODE:
```
.. c:function:: PyObject** PySequence_Fast_ITEMS(PyObject *o)

   Return the underlying array of PyObject pointers.  Assumes that *o* was returned
   by :c:func:`PySequence_Fast` and *o* is not ``NULL``.

   Note, if a list gets resized, the reallocation may relocate the items array.
   So, only use the underlying array pointer in contexts where the sequence
   cannot change.
```

----------------------------------------

TITLE: Using Turtle Colormode and Pencolor
DESCRIPTION: Demonstrates how the colormode setting affects color interpretation for methods like pencolor. Shows an error when using 255-based colors with colormode(1) and success after changing colormode to 255.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_99

LANGUAGE: Python
CODE:
```
>>> screen.colormode(1)
>>> turtle.pencolor(240, 160, 80)
Traceback (most recent call last):
     ...
TurtleGraphicsError: bad color sequence: (240, 160, 80)
>>> screen.colormode()
1.0
>>> screen.colormode(255)
>>> screen.colormode()
255
>>> turtle.pencolor(240,160,80)
```

----------------------------------------

TITLE: Printing Tracebacks in C
DESCRIPTION: PyErr_PrintEx(int set_sys_last_vars) prints a standard traceback to sys.stderr and clears the error indicator. On SystemExit exceptions, it terminates the Python process without printing a traceback. Set `set_sys_last_vars` to nonzero to update sys.last_* variables.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/exceptions.rst#2025-04-21_snippet_1

LANGUAGE: C
CODE:
```
void PyErr_PrintEx(int set_sys_last_vars)
```

----------------------------------------

TITLE: Checking List Type in C
DESCRIPTION: Defines functions to check if an object is a list or an instance of a list subtype.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/list.rst#2025-04-21_snippet_2

LANGUAGE: c
CODE:
```
int PyList_Check(PyObject *p)

int PyList_CheckExact(PyObject *p)
```

----------------------------------------

TITLE: Configuring Integer String Digit Limit via Command Line Option
DESCRIPTION: This snippet illustrates how to configure the integer maximum string digit limit by using a command line option when invoking Python. The example given shows how to set the limit to a specific number.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_108

LANGUAGE: python
CODE:
```
python3 -X int_max_str_digits=640
```

----------------------------------------

TITLE: Implementing dictConfig Function in Python
DESCRIPTION: This snippet shows the implementation of the dictConfig function, which takes a logging configuration from a dictionary and applies it using the DictConfigurator class.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.config.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
def dictConfig(config):
    dictConfigClass(config).configure()
```

----------------------------------------

TITLE: Define PyFloatObject Type
DESCRIPTION: This C type represents a Python floating-point object. It is a subtype of PyObject.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/float.rst#_snippet_0

LANGUAGE: C
CODE:
```
PyFloatObject
```

----------------------------------------

TITLE: Using recursive_repr decorator for custom containers in Python
DESCRIPTION: This snippet shows how to use the new recursive_repr decorator from the reprlib module to handle self-referential representations in custom container classes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_38

LANGUAGE: python
CODE:
```
>>> class MyList(list):
...     @recursive_repr()
...     def __repr__(self):
...         return '<' + '|'.join(map(repr, self)) + '>'
...
>>> m = MyList('abc')
>>> m.append(m)
>>> m.append('x')
>>> print(m)
<'a'|'b'|'c'|...|'x'>
```

----------------------------------------

TITLE: Creating .pyc Files Programmatically
DESCRIPTION: Shows how to manually compile Python modules using py_compile module in interactive mode.
SOURCE: https://github.com/python/cpython/blob/main/Doc/faq/programming.rst#2025-04-23_snippet_64

LANGUAGE: python
CODE:
```
>>> import py_compile
>>> py_compile.compile('foo.py')                 # doctest: +SKIP
```

----------------------------------------

TITLE: Accessing ParamSpecArgs and ParamSpecKwargs Origin
DESCRIPTION: Demonstrates how to access the original ParamSpec object from its .args and .kwargs attributes using get_origin, showing that they point back to the parent ParamSpec.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_126

LANGUAGE: python
CODE:
```
>>> from typing import ParamSpec, get_origin
>>> P = ParamSpec("P")
>>> get_origin(P.args) is P
True
>>> get_origin(P.kwargs) is P
True
```

----------------------------------------

TITLE: Implementing minimal load_tests function for test packages
DESCRIPTION: A minimal 'do nothing' implementation of the load_tests protocol for a test package. This function would be placed in a package's __init__.py to control test discovery within that package.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/unittest.rst#2025-04-21_snippet_43

LANGUAGE: python
CODE:
```
def load_tests(loader, standard_tests, pattern):
```

----------------------------------------

TITLE: Custom Setter for Python Object Attribute
DESCRIPTION: Implementation of a setter function that enforces type constraints on the 'first' attribute. It rejects deletion attempts and ensures the attribute is always a string.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/newtypes_tutorial.rst#2025-04-21_snippet_13

LANGUAGE: c
CODE:
```
static int
Custom_setfirst(PyObject *op, PyObject *value, void *closure)
{
    CustomObject *self = (CustomObject *) op;
    PyObject *tmp;
    if (value == NULL) {
        PyErr_SetString(PyExc_TypeError, "Cannot delete the first attribute");
        return -1;
    }
    if (!PyUnicode_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "The first attribute value must be a string");
        return -1;
    }
    tmp = self->first;
    Py_INCREF(value);
    self->first = value;
    Py_DECREF(tmp);
    return 0;
}
```

----------------------------------------

TITLE: Writing and Reading UTF-8 Encoded Unicode Strings in Python
DESCRIPTION: Example showing how to write a Unicode string to a file with UTF-8 encoding and read it back using the codecs module. Demonstrates stream writer and reader usage.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.0.rst#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
import codecs

unistr = u'\u0660\u2000ab ...'

(UTF8_encode, UTF8_decode,
 UTF8_streamreader, UTF8_streamwriter) = codecs.lookup('UTF-8')

output = UTF8_streamwriter( open( '/tmp/output', 'wb') )
output.write( unistr )
output.close()

input = UTF8_streamreader( open( '/tmp/output', 'rb') )
print repr(input.read())
input.close()
```

----------------------------------------

TITLE: Storing Data in Registry Value Field using SetValueEx in winreg (Python)
DESCRIPTION: Stores data in the value field of an open registry key and also sets additional value and type information. It takes an open key, the value name, a reserved value (usually zero), the data type, and the value to store. The key must have been opened with KEY_SET_VALUE access.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/winreg.rst#2025-04-21_snippet_18

LANGUAGE: Python
CODE:
```

.. function:: SetValueEx(key, value_name, reserved, type, value)

   Stores data in the value field of an open registry key.

   *key* is an already open key, or one of the predefined
   :ref:`HKEY_* constants <hkey-constants>`.

   *value_name* is a string that names the subkey with which the value is
   associated.

   *reserved* can be anything -- zero is always passed to the API.

   *type* is an integer that specifies the type of the data. See
   :ref:`Value Types <value-types>` for the available types.

   *value* is a string that specifies the new value.

   This method can also set additional value and type information for the specified
   key.  The key identified by the key parameter must have been opened with
   :const:`KEY_SET_VALUE` access.

   To open the key, use the :func:`CreateKey` or :func:`OpenKey` methods.

   Value lengths are limited by available memory. Long values (more than 2048
   bytes) should be stored as files with the filenames stored in the configuration
   registry.  This helps the registry perform efficiently.

   .. audit-event:: winreg.SetValue key,sub_key,type,value winreg.SetValueEx

```

----------------------------------------

TITLE: mmap seek method
DESCRIPTION: The `seek(pos[, whence])` method sets the file's current position within the memory map. The whence argument is optional and defaults to os.SEEK_SET (absolute positioning), with other options being os.SEEK_CUR (relative to the current position) and os.SEEK_END (relative to the end of the file). Returns the new absolute position since version 3.13.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/mmap.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
".. method:: seek(pos[, whence])\n\n   Set the file's current position.  *whence* argument is optional and\n   defaults to ``os.SEEK_SET`` or ``0`` (absolute file positioning); other\n   values are ``os.SEEK_CUR`` or ``1`` (seek relative to the current\n   position) and ``os.SEEK_END`` or ``2`` (seek relative to the file's end).\n\n   .. versionchanged:: 3.13\n      Return the new absolute position instead of ``None``."
```

----------------------------------------

TITLE: Using OrderedDict in Python
DESCRIPTION: Demonstrates basic usage of OrderedDict including initialization, modification, and comparison operations. Shows how OrderedDict maintains insertion order of keys unlike regular dictionaries.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.7.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
>>> from collections import OrderedDict
>>> d = OrderedDict([('first', 1),
...                  ('second', 2),
...                  ('third', 3)])
>>> d.items()
[('first', 1), ('second', 2), ('third', 3)]
```

----------------------------------------

TITLE: Getting and Setting Turtle Pensize Python
DESCRIPTION: Shows how to retrieve the current pen size using `turtle.pensize()` with no arguments and how to set a new pen size by providing a positive number argument.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_47

LANGUAGE: python
CODE:
```
>>> turtle.pensize()
1
>>> turtle.pensize(10)   # from here on lines of width 10 are drawn
```

----------------------------------------

TITLE: Python Union Order Independence
DESCRIPTION: Shows that the order of type arguments in a `Union` does not affect its equivalence to another `Union` with the same types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/typing.rst#_snippet_62

LANGUAGE: python
CODE:
```
Union[int, str] == Union[str, int]
```

----------------------------------------

TITLE: Checking Exact Time Type in C
DESCRIPTION: This function returns true if *ob* is of type PyDateTime_TimeType. *ob* must not be NULL. The function always succeeds.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/datetime.rst#2025-04-21_snippet_16

LANGUAGE: c
CODE:
```
"int PyTime_CheckExact(PyObject *ob)"
```

----------------------------------------

TITLE: Changes to `unittest.TestResult` methods
DESCRIPTION: Methods `addFailure`, `addError`, `addSkip`, and `addSubTest` of `unittest.TestResult` are now called immediately after an exception is raised in a test or after finishing a subtest, rather than waiting until the test cleanup has completed.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a1.rst#2025-04-21_snippet_10



----------------------------------------

TITLE: Cache Header Support
DESCRIPTION: Added support for If-Modified-Since HTTP header for browser caching.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.7.0a1.rst#2025-04-21_snippet_10



----------------------------------------

TITLE: Modifying Thread Signal Mask in Python
DESCRIPTION: The pthread_sigmask function fetches and/or changes the signal mask of the calling thread. It's only available on Unix systems and returns the old signal mask as a set of signals.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/signal.rst#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
def pthread_sigmask(how, mask):
    """Fetch and/or change the signal mask of the calling thread.  The signal mask
    is the set of signals whose delivery is currently blocked for the caller.
    Return the old signal mask as a set of signals."""
```

----------------------------------------

TITLE: Defining Address Class for Email Addresses in Python
DESCRIPTION: The Address class represents an email address with display name, username, and domain components. It provides methods for parsing and formatting email addresses according to RFC 5322.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.headerregistry.rst#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
class Address(display_name='', username='', domain='', addr_spec=None):
    # Class implementation details...
```

----------------------------------------

TITLE: Constructing Log Messages with Custom Classes in Python
DESCRIPTION: Demonstrates classes BraceMessage and DollarMessage for {}- and $-formatting in Python logging. These classes enable formatting log messages dynamically using either Python's str.format method or string.Template. The logs replace the standard format strings like %(message)s. Key parameters include fmt for message format and args/kwargs for substitution values. The purpose is to simplify making dynamic log messages that integrate directly into Python's logging framework.
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/logging-cookbook.rst#2025-04-21_snippet_44

LANGUAGE: Python
CODE:
```
class BraceMessage:
    def __init__(self, fmt, /, *args, **kwargs):
        self.fmt = fmt
        self.args = args
        self.kwargs = kwargs

    def __str__(self):
        return self.fmt.format(*self.args, **self.kwargs)


class DollarMessage:
    def __init__(self, fmt, /, **kwargs):
        self.fmt = fmt
        self.kwargs = kwargs

    def __str__(self):
        from string import Template
        return Template(self.fmt).substitute(**self.kwargs)
```

LANGUAGE: Python
CODE:
```
>>> __ = BraceMessage
>>> print(__('Message with {0} {1}', 2, 'placeholders'))
Message with 2 placeholders
>>> class Point: pass
...
>>> p = Point()
>>> p.x = 0.5
>>> p.y = 0.5
>>> print(__('Message with coordinates: ({point.x:.2f}, {point.y:.2f})', point=p))
Message with coordinates: (0.50, 0.50)

>>> __ = DollarMessage
>>> print(__('Message with $num $what', num=2, what='placeholders'))
Message with 2 placeholders
```

----------------------------------------

TITLE: Fix regressions in subinterpreters and Unicode (C)
DESCRIPTION: Addresses several regressions related to subinterpreters and Unicode handling. These include fixing issues when a type method like `__init__()` is modified in a subinterpreter, correcting a regression in `_PyUnicode_EqualToASCIIId()`, fixing type `update_slot()`, and reverting a change that made the Unicode dictionary of interned strings compatible with subinterpreters.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a4.rst#2025-04-21_snippet_9



----------------------------------------

TITLE: Ensure ._pth files work on all platforms (C)
DESCRIPTION: Ensures that `._pth` files, which are used to specify additional search paths for modules, function as intended on platforms other than Windows. This fix enhances the portability of Python applications that rely on `._pth` files.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.11.0a4.rst#2025-04-21_snippet_27



----------------------------------------

TITLE: Parsing Positional Arguments: PyArg_ParseTuple C API
DESCRIPTION: Parses positional arguments from a Python tuple into C variables based on a format string. This function is typically used for C extension functions declared with the METH_VARARGS or METH_KEYWORDS calling convention. It returns true on success and false on failure, raising an appropriate exception.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/arg.rst#_snippet_17

LANGUAGE: C
CODE:
```
int PyArg_ParseTuple(PyObject *args, const char *format, ...)
```

----------------------------------------

TITLE: Using ELLIPSIS Directive in Doctests - Python
DESCRIPTION: This snippet shows how to use the ELLIPSIS directive to allow for ellipses in expected output, which can match any substring in the actual output. It highlights the simplicity and limitations of using this directive by providing examples.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/doctest.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
>>> print(list(range(20)))  # doctest: +ELLIPSIS\n[0, 1, ..., 18, 19]
```

----------------------------------------

TITLE: Order-Dependent Topological Sort Example in Python
DESCRIPTION: Illustrates how insertion order can affect the final topological sort result when nodes are at the same level.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/graphlib.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
ts = TopologicalSorter()
ts.add(3, 2, 1)
ts.add(1, 0)
print([*ts.static_order()])

ts2 = TopologicalSorter()
ts2.add(1, 0)
ts2.add(3, 2, 1)
print([*ts2.static_order()])
```

----------------------------------------

TITLE: Implementing shouldFlush() Method for MemoryHandler in Python
DESCRIPTION: Method that determines if the buffer should be flushed. Returns True if the buffer is full or a record at the configured flushLevel or higher is processed.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_34

LANGUAGE: python
CODE:
```
def shouldFlush(self, record):
   """
   Checks for buffer full or a record at the *flushLevel* or higher.
   """
```

----------------------------------------

TITLE: Accessing Guaranteed and Available Hashing Algorithms in hashlib
DESCRIPTION: This snippet demonstrates how to use the `hashlib` module to access the sets of guaranteed and available hashing algorithms in a Python implementation. It shows how to import the module and access the `algorithms_guaranteed` and `algorithms_available` attributes.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_52

LANGUAGE: python
CODE:
```
>>> import hashlib

>>> hashlib.algorithms_guaranteed
{'sha1', 'sha224', 'sha384', 'sha256', 'sha512', 'md5'}

>>> hashlib.algorithms_available
{'md2', 'SHA256', 'SHA512', 'dsaWithSHA', 'mdc2', 'SHA224', 'MD4', 'sha256',
'sha512', 'ripemd160', 'SHA1', 'MDC2', 'SHA', 'SHA384', 'MD2',
'ecdsa-with-SHA1','md4', 'md5', 'sha1', 'DSA-SHA', 'sha224',
'dsaEncryption', 'DSA', 'RIPEMD160', 'sha', 'MD5', 'sha384'}
```

----------------------------------------

TITLE: Calculating Multinomial Coefficient in Python
DESCRIPTION: The multinomial function calculates the number of distinct arrangements of a multiset. It uses the accumulate and comb functions to compute the result.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_47

LANGUAGE: python
CODE:
```
def multinomial(*counts):
    "Number of distinct arrangements of a multiset."
    # Counter('abracadabra').values() → 5 2 2 1 1
    # multinomial(5, 2, 2, 1, 1) → 83160
    return prod(map(comb, accumulate(counts), counts))
```

----------------------------------------

TITLE: Binding Key Release Event on TurtleScreen (Python)
DESCRIPTION: Shows how to bind a function to a key release event on the TurtleScreen using onkey. It also includes the necessary call to listen() to give the screen focus for receiving key events.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_91

LANGUAGE: Python
CODE:
```
def f():
    fd(50)
    lt(60)
screen.onkey(f, "Up")
screen.listen()
```

----------------------------------------

TITLE: Custom Type Initialization with Type Checking
DESCRIPTION: Implementation of tp_init for a custom type that ensures attributes are of the correct type. This version uses PyArg_ParseTupleAndKeywords with 'U' format to accept only Unicode strings.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/newtypes_tutorial.rst#2025-04-21_snippet_17

LANGUAGE: c
CODE:
```
static int
Custom_init(PyObject *op, PyObject *args, PyObject *kwds)
{
    CustomObject *self = (CustomObject *) op;
    static char *kwlist[] = {"first", "last", "number", NULL};
    PyObject *first = NULL, *last = NULL, *tmp;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "|UUi", kwlist,
                                     &first, &last,
                                     &self->number))
        return -1;

    if (first) {
        tmp = self->first;
        Py_INCREF(first);
        self->first = first;
        Py_DECREF(tmp);
    }
    if (last) {
        tmp = self->last;
        Py_INCREF(last);
        self->last = last;
        Py_DECREF(tmp);
    }
    return 0;
}
```

----------------------------------------

TITLE: Printing Callers of Functions
DESCRIPTION: This code prints a list of functions that call the functions filtered in the previous step (50% of the original size, containing 'init'). 'p' is assumed to be already sorted based on the previous criteria.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/profile.rst#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
p.print_callers(.5, 'init')
```

----------------------------------------

TITLE: Set Signal Handler in C
DESCRIPTION: This function sets the signal handler for a given signal number to a specified handler function. It returns the old signal handler. This is a wrapper around either `sigaction` or `signal`. Direct calls to those functions are discouraged.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/sys.rst#2025-04-21_snippet_9

LANGUAGE: c
CODE:
```
"PyOS_sighandler_t PyOS_setsig(int i, PyOS_sighandler_t h)"
```

----------------------------------------

TITLE: Python Struct Pack Bytes Usage
DESCRIPTION: Example demonstrating the correct way to use bytes instead of strings with struct.pack() after the change to only accept bytes for the 's' format code.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.2.rst#2025-04-21_snippet_79

LANGUAGE: Python
CODE:
```
struct.pack('<6sHHBBB', b'GIF87a', x, y)
```

----------------------------------------

TITLE: Opcode: CALL_INTRINSIC_2
DESCRIPTION: The CALL_INTRINSIC_2 opcode calls an intrinsic function with two arguments. It pops two arguments from the stack, calls the intrinsic function with them, and pushes the result back onto the stack. It is used to implement functionality that is not performance critical.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/dis.rst#2025-04-21_snippet_61

LANGUAGE: Python
CODE:
```
"arg2 = STACK.pop()\narg1 = STACK.pop()\nresult = intrinsic2(arg1, arg2)\nSTACK.append(result)"
```

----------------------------------------

TITLE: Implementing Binary Arithmetic Operators in Python
DESCRIPTION: These methods are called to implement standard binary arithmetic operations (like +, -, *, /) for objects. The specific method is invoked on the left operand's type. If the operation is not supported, the method should return `NotImplemented`.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst#_snippet_23

LANGUAGE: Python
CODE:
```
object.__lshift__(self, other)
object.__rshift__(self, other)
object.__and__(self, other)
object.__xor__(self, other)
object.__or__(self, other)
```

----------------------------------------

TITLE: Iterating Over Dictionary Items in C
DESCRIPTION: Demonstrates how to iterate through all key-value pairs in a Python dictionary using the PyDict_Next() function. Shows safe iteration techniques and error handling.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/dict.rst#2025-04-21_snippet_0

LANGUAGE: c
CODE:
```
PyObject *key, *value;
Py_ssize_t pos = 0;

while (PyDict_Next(self->dict, &pos, &key, &value)) {
    /* do something interesting with the values... */
    ...
}
```

----------------------------------------

TITLE: Adding Percent Formatting Support for Bytes and Bytearray in Python
DESCRIPTION: This snippet illustrates how PEP 461 introduces percent formatting support for bytes and bytearrays, expanding the formatting language typically used for strings to binary data. It highlights both correct usages of the formatting operator and limitations regarding data types.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.5.rst#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
>>> b'Hello %b!' % b'World'
b'Hello World!'

>>> b'x=%i y=%f' % (1, 2.5)
b'x=1 y=2.500000'

>>> b'Hello %b!' % 'World'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: %b requires bytes, or an object that implements __bytes__, not 'str'

>>> b'price: %a' % '10€'
b"price: '10\u20ac'"
```

----------------------------------------

TITLE: Time Module Clock Functions
DESCRIPTION: New clock-related functions added to provide monotonic time and performance counters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.3.rst#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
time.get_clock_info()
time.monotonic()
time.perf_counter()
```

----------------------------------------

TITLE: Building Python from Source (Shell)
DESCRIPTION: Standard commands for configuring, building, and installing Python from source code on Unix systems. It's recommended to use 'make altinstall' instead of 'make install' to avoid overwriting the system Python binary.
SOURCE: https://github.com/python/cpython/blob/main/Doc/using/unix.rst#2025-04-21_snippet_6

LANGUAGE: sh
CODE:
```
./configure
make
make install
```

----------------------------------------

TITLE: Installing GDB Debug Tools on Ubuntu
DESCRIPTION: Shell commands to install GDB and Python debug information packages on Ubuntu Linux
SOURCE: https://github.com/python/cpython/blob/main/Doc/howto/gdb_helpers.rst#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
sudo apt install gdb python3-dbg
```

----------------------------------------

TITLE: Matrix Multiplication in Python
DESCRIPTION: The matmul function performs matrix multiplication. It uses starmap, product, and sumprod to compute the result efficiently.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/itertools.rst#2025-04-21_snippet_52

LANGUAGE: python
CODE:
```
def matmul(m1, m2):
    "Multiply two matrices."
    # matmul([(7, 5), (3, 5)], [(2, 5), (7, 9)]) → (49, 80), (41, 60)
    n = len(m2[0])
    return batched(starmap(sumprod, product(m1, transpose(m2))), n)
```

----------------------------------------

TITLE: Initializing XML-RPC ServerProxy in Python
DESCRIPTION: Creates a ServerProxy instance to manage communication with a remote XML-RPC server. Supports configuration of transport, encoding, authentication, and SSL settings. The proxy object enables making remote procedure calls and supports introspection if available on the server.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/xmlrpc.client.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
ServerProxy(uri, transport=None, encoding=None, verbose=False, \
               allow_none=False, use_datetime=False, \
               use_builtin_types=False, *, headers=(), context=None)
```

----------------------------------------

TITLE: URL Reading with Closing Context Manager
DESCRIPTION: Example of using the closing() function from contextlib for resource management.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/2.6.rst#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
import urllib, sys
from contextlib import closing

with closing(urllib.urlopen('http://www.yahoo.com')) as f:
    for line in f:
        sys.stdout.write(line)
```

----------------------------------------

TITLE: Defining Value Pattern Syntax in Python Grammar
DESCRIPTION: Specifies the syntax for value patterns that represent a named value in Python. The pattern looks up the dotted name and succeeds if it matches the subject value using equality comparison.
SOURCE: https://github.com/python/cpython/blob/main/Doc/reference/compound_stmts.rst#2025-04-21_snippet_14

LANGUAGE: grammar
CODE:
```
value_pattern: `attr`
attr: `name_or_attr` "." NAME
name_or_attr: `attr` | NAME
```

----------------------------------------

TITLE: Defining Python C API Exception: PyExc_ZeroDivisionError
DESCRIPTION: This code snippet defines the C API exception `PyExc_ZeroDivisionError` and maps it to the Python `ZeroDivisionError` class. This allows C code to signal division-by-zero errors within the Python environment.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/exceptions.rst#2025-04-21_snippet_98

LANGUAGE: c
CODE:
```
":c:data:`PyExc_ZeroDivisionError`       | :exc:`ZeroDivisionError`      |          "
```

----------------------------------------

TITLE: Adding interrupt() Function to multiprocessing.Process in Python
DESCRIPTION: Proposal to add a new interrupt() function to the multiprocessing.Process class, alongside existing terminate() and kill() functions. This addition aims to provide more granular control over child process termination in Python's multiprocessing module.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/next/Library/2025-04-12-19-42-51.gh-issue-131913.twOx7K.rst#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
multiprocessing.Process.interrupt()
```

----------------------------------------

TITLE: Module Import System Changes - Python
DESCRIPTION: Changes to module attribute setting behavior where __cached__ and __package__ must be set through __spec__ properties instead of directly on the module.
SOURCE: https://github.com/python/cpython/blob/main/Doc/deprecations/pending-removal-in-3.15.rst#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
module.__cached__ = cache_path  # Deprecated
__spec__.cached = cache_path  # Correct usage

module.__package__ = package_name  # Deprecated
__spec__.parent = package_name  # Correct usage
```

----------------------------------------

TITLE: Registering New Option Flags in Doctests - Python
DESCRIPTION: This snippet illustrates how to create a new option flag for doctests via the function register_optionflag. It shows the idiomatic use case for properly creating and leveraging custom option flags.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/doctest.rst#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
MY_FLAG = register_optionflag('MY_FLAG')
```

----------------------------------------

TITLE: Demonstrating Complex Number Arithmetic in Python
DESCRIPTION: Shows how arithmetic operations work with complex numbers in Python, specifically demonstrating addition and multiplication between real and complex numbers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
x + complex(u, v) = complex(x + u, v)
x * complex(u, v) = complex(x * u, x * v)
```

----------------------------------------

TITLE: Identifying Treeview Region in Python
DESCRIPTION: Returns the region of the Treeview at the specified coordinates (x, y). Possible regions are heading, separator, tree, and cell.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.ttk.rst#2025-04-21_snippet_33

LANGUAGE: python
CODE:
```
identify_region(x, y)
```

----------------------------------------

TITLE: Creating a Question Dialog with tkinter.messagebox
DESCRIPTION: The askquestion function creates a question dialog box with the specified title and message. By default, it shows YES and NO buttons and returns the symbolic name of the selected button.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tkinter.messagebox.rst#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
def askquestion(title=None, message=None, *, type=YESNO, **options):

   Ask a question. By default shows buttons :data:`YES` and :data:`NO`.
   Returns the symbolic name of the selected button.
```

----------------------------------------

TITLE: Defining MissingHeaderBodySeparatorDefect exception
DESCRIPTION: The MissingHeaderBodySeparatorDefect exception indicates that a line was found while parsing headers that lacked leading whitespace and didn't contain a colon (:). The parser assumes such a line represents the first line of the body, marking a potential defect in header formatting.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/email.errors.rst#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```

.. exception:: MissingHeaderBodySeparatorDefect

   A line was found while parsing headers that had no leading white space but
   contained no ':'.  Parsing continues assuming that the line represents the
   first line of the body.

   .. versionadded:: 3.3

```

----------------------------------------

TITLE: Setting Meta Mode with Curses in Python
DESCRIPTION: The `meta` function toggles 8-bit character input based on the boolean `flag`. Enabling meta mode allows input beyond standard 7-bit ASCII characters.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
.. function:: meta(flag)

   If *flag* is ``True``, allow 8-bit characters to be input.  If
   *flag* is ``False``,  allow only 7-bit chars.
```

----------------------------------------

TITLE: Handling Queue Flush with Curses in Python
DESCRIPTION: The `noqiflush` function prevents default queue flush actions when control characters like INTR, QUIT, and SUSP are encountered. This can be useful for handling signals more flexibly.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/curses.rst#2025-04-21_snippet_22

LANGUAGE: Python
CODE:
```
.. function:: noqiflush()

   When the :func:`!noqiflush` routine is used, normal flush of input and output queues
   associated with the ``INTR``, ``QUIT`` and ``SUSP`` characters will not be done.  You may
   want to call :func:`!noqiflush` in a signal handler if you want output to
   continue as though the interrupt had not occurred, after the handler exits.
```

----------------------------------------

TITLE: Defining SourceLoader Abstract Base Class in Python
DESCRIPTION: An abstract base class for implementing source (and optionally bytecode) file loading. It inherits from ResourceLoader and ExecutionLoader, requiring the implementation of get_data method.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/importlib.rst#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
class SourceLoader(ResourceLoader, ExecutionLoader):
    pass
```

----------------------------------------

TITLE: Calculating Memory Address in N-Dimensional C Arrays
DESCRIPTION: This C code snippet calculates a memory address in an n-dimensional C array using buffer strides and indices. The calculation also adjusts addresses based on the strides and indices provided, allowing access to specific elements within the buffer. Prerequisites include understanding C memory management and n-dimensional array structures. This code requires valid stride and index inputs and returns a pointer to the requested memory location.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/buffer.rst#2025-04-21_snippet_0

LANGUAGE: c
CODE:
```
ptr = (char *)buf + indices[0] * strides[0] + ... + indices[n-1] * strides[n-1];
item = *((typeof(item) *)ptr);
```

----------------------------------------

TITLE: SysLogHandler emit method
DESCRIPTION: The record is formatted, and then sent to the syslog server. If exception information is present, it is *not* sent to the server. Configurable attributes such as `append_nul` and `ident` influence the formatting of the message.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/logging.handlers.rst#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
   .. method:: emit(record)

      The record is formatted, and then sent to the syslog server. If exception
      information is present, it is *not* sent to the server.

      .. versionchanged:: 3.2.1
         (See: :issue:`12168`.) In earlier versions, the message sent to the
         syslog daemons was always terminated with a NUL byte, because early
         versions of these daemons expected a NUL terminated message - even
         though it's not in the relevant specification (:rfc:`5424`). More recent
         versions of these daemons don't expect the NUL byte but strip it off
         if it's there, and even more recent daemons (which adhere more closely
         to RFC 5424) pass the NUL byte on as part of the message.

         To enable easier handling of syslog messages in the face of all these
         differing daemon behaviours, the appending of the NUL byte has been
         made configurable, through the use of a class-level attribute,
         ``append_nul``. This defaults to ``True`` (preserving the existing
         behaviour) but can be set to ``False`` on a ``SysLogHandler`` instance
         in order for that instance to *not* append the NUL terminator.

      .. versionchanged:: 3.3
         (See: :issue:`12419`.) In earlier versions, there was no facility for
         an "ident" or "tag" prefix to identify the source of the message. This
         can now be specified using a class-level attribute, defaulting to
         ``""`` to preserve existing behaviour, but which can be overridden on
         a ``SysLogHandler`` instance in order for that instance to prepend
         the ident to every message handled. Note that the provided ident must
         be text, not bytes, and is prepended to the message exactly as is.
```

----------------------------------------

TITLE: Formatting Numbers with 'r' Code in Python
DESCRIPTION: Showcases the 'r' code for formatting in Python which ensures representation includes a decimal point and is particularly used for very large or small numbers that require scientific notation.
SOURCE: https://github.com/python/cpython/blob/main/Lib/test/mathdata/formatfloat_testcases.txt#2025-04-21_snippet_3

LANGUAGE: Text
CODE:
```
-- repr formatting.  Result always includes decimal point and at
-- least one digit after the point, or an exponent.
%r 0 -> 0.0
%r 1 -> 1.0

%r 0.01 -> 0.01
%r 0.02 -> 0.02
%r 0.03 -> 0.03
%r 0.04 -> 0.04
%r 0.05 -> 0.05

-- values >= 1e16 get an exponent
%r 10 -> 10.0
%r 100 -> 100.0
%r 1e15 -> 1000000000000000.0
%r 9.999e15 -> 9999000000000000.0
%r 9999999999999998 -> 9999999999999998.0
%r 9999999999999999 -> 1e+16
%r 1e16 -> 1e+16
%r 1e17 -> 1e+17

-- as do values < 1e-4
%r 1e-3 -> 0.001
%r 1.001e-4 -> 0.0001001
%r 1.0000000000000001e-4 -> 0.0001
%r 1.000000000000001e-4 -> 0.0001000000000000001
%r 1.00000000001e-4 -> 0.000100000000001
%r 1.0000000001e-4 -> 0.00010000000001
%r 1e-4 -> 0.0001
%r 0.99999999999999999e-4 -> 0.0001
%r 0.9999999999999999e-4 -> 9.999999999999999e-05
%r 0.999999999999e-4 -> 9.99999999999e-05
%r 0.999e-4 -> 9.99e-05
%r 1e-5 -> 1e-05

```

----------------------------------------

TITLE: Basic Interpolation Configuration Example
DESCRIPTION: Shows configuration file format using BasicInterpolation for value references within sections using %(var)s syntax.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/configparser.rst#2025-04-23_snippet_9

LANGUAGE: ini
CODE:
```
[Paths]
home_dir: /Users
my_dir: %(home_dir)s/lumberjack
my_pictures: %(my_dir)s/Pictures

[Escape]
# use a %% to escape the % sign (% is the only character that needs to be escaped):
gain: 80%%
```

----------------------------------------

TITLE: Getting TZInfo from DateTime Object in C
DESCRIPTION: This macro returns the tzinfo (which may be None) from a PyDateTime_DateTime object.  The argument must be an instance of PyDateTime_DateTime, including subclasses. The argument must not be NULL, and the type is not checked. This function was added in version 3.10.
SOURCE: https://github.com/python/cpython/blob/main/Doc/c-api/datetime.rst#2025-04-21_snippet_37

LANGUAGE: c
CODE:
```
"PyObject* PyDateTime_DATE_GET_TZINFO(PyDateTime_DateTime *o)"
```

----------------------------------------

TITLE: Iterating over bytecode instructions using dis.Bytecode in Python
DESCRIPTION: Demonstrates how to use the dis.Bytecode class to inspect and iterate over bytecode instructions of a Python function. The example shows creating a Bytecode object, iterating over instructions, and using the dis() method to get a formatted representation.
SOURCE: https://github.com/python/cpython/blob/main/Doc/whatsnew/3.4.rst#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
>>> bytecode = dis.Bytecode(lambda x: x + 1, current_offset=3)
>>> for instr in bytecode:
...     print('{} ({})'.format(instr.opname, instr.opcode))
LOAD_FAST (124)
LOAD_CONST (100)
BINARY_ADD (23)
RETURN_VALUE (83)
>>> bytecode.dis().splitlines()       # doctest: +NORMALIZE_WHITESPACE
['  1           0 LOAD_FAST                0 (x)',
 '      -->     3 LOAD_CONST               1 (1)',
 '              6 BINARY_ADD',
 '              7 RETURN_VALUE']
```

----------------------------------------

TITLE: Initializing Python C Extension Module
DESCRIPTION: This snippet demonstrates the initialization function for a Python C extension module. It creates and returns the module object using the module definition structure.
SOURCE: https://github.com/python/cpython/blob/main/Doc/extending/extending.rst#2025-04-21_snippet_7

LANGUAGE: C
CODE:
```
PyMODINIT_FUNC
PyInit_spam(void)
{
    return PyModule_Create(&spammodule);
}
```

----------------------------------------

TITLE: Keeping Object-Oriented Turtle Window Open - Python
DESCRIPTION: Shows how to keep the graphics window open when using the object-oriented turtle approach by calling the `mainloop()` method on the screen instance associated with the turtle object (`t.screen.mainloop()`).
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/turtle.rst#_snippet_17

LANGUAGE: Python
CODE:
```
t.screen.mainloop()
```

----------------------------------------

TITLE: Abbreviated Day Names Data - Python
DESCRIPTION: This data attribute contains the abbreviated names of the days of the week, aiding in concise calendar representations.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/calendar.rst#2025-04-21_snippet_22

LANGUAGE: Python
CODE:
```
.. data:: day_abbr
```

----------------------------------------

TITLE: TarFile Pax Headers Attribute in Python
DESCRIPTION: A dictionary containing the key-value pairs of global PAX headers associated with the archive. PAX headers provide extended attributes for archive members. This attribute allows inspection of these headers.
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst#_snippet_8

LANGUAGE: python
CODE:
```
TarFile.pax_headers
```

----------------------------------------

TITLE: Supporting path-like objects in http.server.SimpleHTTPRequestHandler
DESCRIPTION: Allows passing a path-like object as the 'directory' argument to the http.server.SimpleHTTPRequestHandler class.
SOURCE: https://github.com/python/cpython/blob/main/Misc/NEWS.d/3.9.0a1.rst#2025-04-21_snippet_50

LANGUAGE: Python
CODE:
```
http.server.SimpleHTTPRequestHandler
```

----------------------------------------

TITLE: Preserving Order with gnu_getopt in Python
DESCRIPTION: Example demonstrating how gnu_getopt preserves the order of options and non-option arguments in the command line
SOURCE: https://github.com/python/cpython/blob/main/Doc/library/getopt.rst#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> s = 'a1 -x a2 a3 a4 --long a5 a6'
>>> args = s.split()
>>> args
['a1', '-x', 'a2', 'a3', 'a4', '--long', 'a5', 'a6']
>>> optlist, args = getopt.gnu_getopt(args, '-x:', ['long='])
>>> optlist
[(None, ['a1']), ('-x', 'a2'), (None, ['a3', 'a4']), ('--long', 'a5')]
>>> args
['a6']
```