TITLE: Initial Search Request with Sort for search_after Pagination in Elasticsearch
DESCRIPTION: This example shows the initial search request required for search_after pagination. The results are sorted by date and a tie_breaker_id field in ascending order, which is necessary for consistent pagination.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/paginate-search-results.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET twitter/_search
{
    "query": {
        "match": {
            "title": "elasticsearch"
        }
    },
    "sort": [
        {"date": "asc"},
        {"tie_breaker_id": "asc"}      <1>
    ]
}
```

----------------------------------------

TITLE: Filtering with Boolean Query in Elasticsearch
DESCRIPTION: Demonstrates using a bool query with filter clauses to find red Gucci shirts.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/filter-search-results.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
GET /shirts/_search
{
  "query": {
    "bool": {
      "filter": [
        { "term": { "color": "red"   }},
        { "term": { "brand": "gucci" }}
      ]
    }
  }
}
```

----------------------------------------

TITLE: Basic Match Phrase Query in Elasticsearch
DESCRIPTION: Demonstrates a simple match phrase query searching for an exact phrase in the message field
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-match-query-phrase.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "match_phrase": {
      "message": "this is a test"
    }
  }
}
```

----------------------------------------

TITLE: Hybrid Search with Sparse, Standard, and KNN using RRF Retriever (Console/JSON)
DESCRIPTION: This advanced hybrid search example utilizes the RRF retriever to combine results from three different sub-retrievers. It includes a `standard` retriever performing a sparse vector search (likely using ELSER), another `standard` retriever with a multi-match lexical query, and a `knn` retriever for dense vector similarity. The RRF retriever applies reciprocal rank fusion to merge and re-rank the results from all three child retrievers into a single result set.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrievers.md#_snippet_3

LANGUAGE: console
CODE:
```
GET movies/_search
{
  "retriever": {
    "rrf": {
      "retrievers": [
        {
          "standard": {
            "query": {
              "sparse_vector": {
                "field": "plot_embedding",
                "inference_id": "my-elser-model",
                "query": "films that explore psychological depths"
              }
            }
          }
        },
        {
          "standard": {
            "query": {
              "multi_match": {
                "query": "crime",
                "fields": [
                  "plot",
                  "title"
                ]
              }
            }
          }
        },
        {
          "knn": {
            "field": "vector",
            "query_vector": [10, 22, 77],
            "k": 10,
            "num_candidates": 10
          }
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Executing a Basic Match Query
DESCRIPTION: This snippet demonstrates how to perform a basic match query to find documents that contain the phrase 'this is a test' in the 'message' field. It is useful for full-text search functionalities in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-match-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "match": {
      "message": {
        "query": "this is a test"
      }
    }
  }
}
```

----------------------------------------

TITLE: Paginating Search Results Using from and size Parameters in Elasticsearch
DESCRIPTION: This example demonstrates how to use the from and size parameters to paginate search results in Elasticsearch. The from parameter defines how many hits to skip (starting at position 5), while size specifies the maximum number of results to return (20).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/paginate-search-results.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "from": 5,
  "size": 20,
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  }
}
```

----------------------------------------

TITLE: Searching Multiple Specific Indices in Elasticsearch
DESCRIPTION: This snippet demonstrates how to search multiple specific indices by providing them as comma-separated values in the search API's request path. It searches for documents with user.id matching 'kimchy' across two indices.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-multiple-data-streams-indices.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /my-index-000001,my-index-000002/_search
{
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  }
}
```

----------------------------------------

TITLE: Configuring HTTP Basic Authentication in Elasticsearch
DESCRIPTION: YAML configuration for enabling HTTP basic authentication in Elasticsearch. This sets up the basic authentication realm with user authentication through the internal 'file' realm.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/watcher/licenses/failureaccess-NOTICE.txt#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
xpack.security.http.authentication.type: basic
xpack.security.http.authentication.realm: file
```

----------------------------------------

TITLE: Boolean Query Example in Elasticsearch
DESCRIPTION: This code snippet demonstrates a basic boolean query in Elasticsearch. It combines `must`, `filter`, `must_not`, and `should` clauses to filter and score documents based on multiple criteria. The `minimum_should_match` parameter specifies the minimum number of `should` clauses that must match.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-bool-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _search
{
  "query": {
    "bool" : {
      "must" : {
        "term" : { "user.id" : "kimchy" }
      },
      "filter": {
        "term" : { "tags" : "production" }
      },
      "must_not" : {
        "range" : {
          "age" : { "gte" : 10, "lte" : 20 }
        }
      },
      "should" : [
        { "term" : { "tags" : "env1" } },
        { "term" : { "tags" : "deployed" } }
      ],
      "minimum_should_match" : 1,
      "boost" : 1.0
    }
  }
}
```

----------------------------------------

TITLE: Hybrid Semantic and Lexical Search Query
DESCRIPTION: Demonstrates combining a lexical match query with a semantic query using a boolean should clause, with different boost levels to blend search results
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-semantic-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST my-index/_search
{
  "size" : 3,
  "query": {
    "bool": {
      "should": [
        {
          "match": {
            "title": {
              "query": "mountain lake",
              "boost": 1
            }
          }
        },
        {
          "semantic": {
            "field": "title_semantic",
            "query": "mountain lake",
            "boost": 2
          }
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Combine Rule Retriever with RRF in Elasticsearch Search
DESCRIPTION: Performs a search on the `movies` index combining the `rule` retriever with the `rrf` (Reciprocal Rank Fusion) retriever. The `rule` retriever is the outermost, applying rules to the results first reranked by RRF based on two different standard queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrievers.md#_snippet_13

LANGUAGE: console
CODE:
```
GET movies/_search
{
  "retriever": {
    "rule": { 
      "match_criteria": {
        "query_string": "harry potter"
      },
      "ruleset_ids": [
        "my-ruleset"
      ],
      "retriever": {
        "rrf": { 
          "retrievers": [
            {
              "standard": {
                "query": {
                  "query_string": {
                    "query": "sorcerer's stone"
                  }
                }
              }
            },
            {
              "standard": {
                "query": {
                  "query_string": {
                    "query": "chamber of secrets"
                  }
                }
              }
            }
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Performing kNN Search in Elasticsearch
DESCRIPTION: Executes a kNN search query to find the nearest vectors within an indexed dataset in Elasticsearch. Key parameters include the 'field' for search, 'query_vector' for matching, and 'k', the number nearest neighbors per shard. The function combines shard results for top global matches, and outputs the query results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-knn-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST my-image-index/_search
{
  "size" : 3,
  "query" : {
    "knn": {
      "field": "image-vector",
      "query_vector": [-5, 9, -12],
      "k": 10
    }
  }
}

```

----------------------------------------

TITLE: Expanding Collapsed Results with Inner Hits
DESCRIPTION: Shows how to expand collapsed search results using inner hits, allowing you to retrieve additional documents that share the same collapse key value. This example retrieves the 5 most recent documents for each user.id.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/collapse-search-results.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search
{
  "query": {
    "match": {
      "message": "GET /search"
    }
  },
  "collapse": {
    "field": "user.id",                       <1>
    "inner_hits": {
      "name": "most_recent",                  <2>
      "size": 5,                              <3>
      "sort": [ { "@timestamp": "desc" } ]    <4>
    },
    "max_concurrent_group_searches": 4        <5>
  },
  "sort": [
    {
      "http.response.bytes": {
        "order": "desc"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Handling Short Timezone Abbreviations in Elasticsearch Pipeline (JSON)
DESCRIPTION: This comprehensive pipeline example demonstrates a method for safely handling input dates with ambiguous short timezone abbreviations. It combines `grok` for initial parsing, a `script` processor to map abbreviations to full IANA timezone names (e.g., "PST" to "America/Los_Angeles") using a lookup map, the `date` processor using the resolved full timezone, and a `remove` processor to clean up intermediate fields. This ensures correct timezone interpretation before parsing the date.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/date-processor.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "description" : "...",
  "processors": [
    {
      "grok": {
        "field": "message",
        "patterns": ["%{DATESTAMP_EVENTLOG:local_date_time} %{TZ:short_tz} %{GREEDYDATA:payload}"],
        "pattern_definitions": {
          "TZ": "[A-Z]{3}"
        }
      }
    },
    {
      "script": {
        "source": "ctx['full_tz'] = params['tz_map'][ctx['short_tz']]",
        "params": {
          "tz_map": {
            "PST": "America/Los_Angeles",
            "CET": "Europe/Amsterdam",
            "JST": "Asia/Tokyo"
          }
        }
      }
    },
    {
      "date": {
        "field": "local_date_time",
        "formats": ["yyyyMMddHHmmss"],
        "timezone": "{{{full_tz}}}"
      }
    },
    {
      "remove": {
        "field": ["message", "local_date_time", "short_tz", "full_tz"]
      }
    }
  ]
}
```

----------------------------------------

TITLE: Example Request for Reindexing Data Stream (console)
DESCRIPTION: This example demonstrates how to call the Reindex Data Stream API, specifying the target data stream (`my-data-stream`) and the required `upgrade` mode in the request body. Calling this endpoint starts a background task to perform the reindexing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reindex-data-stream.md#_snippet_1

LANGUAGE: console
CODE:
```
POST _migration/reindex
{
    "source": {
        "index": "my-data-stream"
    },
    "mode": "upgrade"
}
```

----------------------------------------

TITLE: Counting All Rows with COUNT(*) in Elasticsearch SQL
DESCRIPTION: This example uses `COUNT(*)` to count all documents (rows) in the 'emp' index, including those with NULL or missing values in any field. The total count is aliased as 'count'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_4

LANGUAGE: SQL
CODE:
```
SELECT COUNT(*) AS count FROM emp;
```

----------------------------------------

TITLE: Filtering with LIKE Operator in ESQL
DESCRIPTION: This code snippet demonstrates how to filter a dataset of employees using the LIKE operator in ESQL. The LIKE operator supports wildcards like '*' for zero or more characters and '?' for a single character. In this example, it filters for employees whose first name matches the pattern '?b*'. The snippet requires an ESQL environment with access to the 'employees' dataset and outputs the 'first_name' and 'last_name' fields for matching entries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/operators/like.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| WHERE first_name LIKE """?b*"""
| KEEP first_name, last_name
```

----------------------------------------

TITLE: Performing LOOKUP JOIN in ESQL
DESCRIPTION: This ESQL query retrieves data from the 'app_logs' table and performs a lookup join with the 'service_owners' table using the 'service_id' field as the join condition. The LOOKUP JOIN is typically used for efficiency when joining with smaller, dimension-like tables.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs-lookup-join.csv-spec/lookupJoinServiceId.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM app_logs
| LOOKUP JOIN service_owners ON service_id
```

----------------------------------------

TITLE: Executing an RRF Search with Standard and kNN Retrievers in Elasticsearch
DESCRIPTION: Performs a search using the Reciprocal Rank Fusion (RRF) retriever, combining a standard BM25 text query and a kNN vector search, with additional terms aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reciprocal-rank-fusion.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET example-index/_search
{
    "retriever": {
        "rrf": {
            "retrievers": [
                {
                    "standard": {
                        "query": {
                            "term": {
                                "text": "rrf"
                            }
                        }
                    }
                },
                {
                    "knn": {
                        "field": "vector",
                        "query_vector": [3],
                        "k": 5,
                        "num_candidates": 5
                    }
                }
            ],
            "rank_window_size": 5,
            "rank_constant": 1
        }
    },
    "size": 3,
    "aggs": {
        "int_count": {
            "terms": {
                "field": "integer"
            }
        }
    }
}
```

----------------------------------------

TITLE: Querying Indexed Fields in Elasticsearch using Exists - Console
DESCRIPTION: This code snippet demonstrates how to use the 'exists' query to retrieve documents that have an indexed value for the 'user' field in an Elasticsearch index. The snippet requires a running Elasticsearch instance and presupposes the existence of indices containing the 'user' field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-exists-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "exists": {
      "field": "user"
    }
  }
}
```

----------------------------------------

TITLE: Fetching a Specific Hockey Player by ID
DESCRIPTION: Search query to retrieve the source data for a hockey player with ID 1.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/brief-painless-walkthrough.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET hockey/_search
{
  "query": {
    "term": {
      "_id": 1
    }
  }
}
```

----------------------------------------

TITLE: Creating a Multi-Field Mapping for Text Fields in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create a mapping with both a text field for full-text searches and a keyword field for aggregations. This is the recommended approach instead of enabling fielddata on text fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/text.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "my_field": { 
        "type": "text",
        "fields": {
          "keyword": { 
            "type": "keyword"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Filtering Terms Aggregation with Exact Values in Elasticsearch
DESCRIPTION: This example shows how to use exact string matching for including and excluding values in a terms aggregation. It creates two aggregations: one for Japanese car manufacturers and another for active car manufacturers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-terms-aggregation.md#2025-04-21_snippet_13

LANGUAGE: json
CODE:
```
GET /_search
{
  "aggs": {
    "JapaneseCars": {
      "terms": {
        "field": "make",
        "include": [ "mazda", "honda" ]
      }
    },
    "ActiveCarManufacturers": {
      "terms": {
        "field": "make",
        "exclude": [ "rover", "jensen" ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Mixing Three Value Sources in Elasticsearch Aggregation
DESCRIPTION: Shows how to combine three different value sources (terms and date_histogram) in a composite aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_13

LANGUAGE: console
CODE:
```
GET /_search
{
  "size": 0,
  "aggs": {
    "my_buckets": {
      "composite": {
        "sources": [
          { "shop": { "terms": { "field": "shop" } } },
          { "product": { "terms": { "field": "product" } } },
          { "date": { "date_histogram": { "field": "timestamp", "calendar_interval": "1d" } } }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating API Key for Connector via Elasticsearch API - Console
DESCRIPTION: This snippet demonstrates how to use the Elasticsearch Security API to generate an API key specifically for a connector. The key is configured with roles granting necessary cluster (monitor, manage_connector) and index (all privileges on connector-related indices) permissions for the connector to operate.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-postgresql.md#_snippet_1

LANGUAGE: console
CODE:
```
POST /_security/api_key
{
  "name": "connector_name-connector-api-key",
  "role_descriptors": {
    "connector_name-connector-role": {
      "cluster": [
        "monitor",
        "manage_connector"
      ],
      "indices": [
        {
          "names": [
            "index_name",
            ".search-acl-filter-index_name",
            ".elastic-connectors*"
          ],
          "privileges": [
            "all"
          ],
          "allow_restricted_indices": false
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Match Query on Text Field Example (Console)
DESCRIPTION: Executes a `match` query search on the `full_text` field of the `my-index-000001` index. This example contrasts with the `term` query example by showing how `match` analyzes the search term and correctly finds the document containing the analyzed tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-term-query.md#_snippet_4

LANGUAGE: console
CODE:
```
GET my-index-000001/_search?pretty
{
  "query": {
    "match": {
      "full_text": "Quick Brown Foxes!"
    }
  }
}
```

----------------------------------------

TITLE: Converting String to INTEGER using SQL CONVERT
DESCRIPTION: Example showing how to use the Elasticsearch SQL `CONVERT` function to convert a string literal ('123') into the standard `INTEGER` data type. Includes the query and the expected output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-type-conversion.md#_snippet_6

LANGUAGE: SQL
CODE:
```
SELECT CONVERT('123', INTEGER) AS int;

      int
---------------
123
```

----------------------------------------

TITLE: Nested Categorize Text Aggregation Console
DESCRIPTION: This example shows how to use `categorize_text` as a sub-aggregation within a `date_histogram` aggregation. It groups log messages by day and then categorizes the messages within each daily bucket, also including a `top_hits` aggregation to sample a representative message per category.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-categorize-text-aggregation.md#_snippet_3

LANGUAGE: console
CODE:
```
POST log-messages/_search?filter_path=aggregations
{
  "aggs": {
    "daily": {
      "date_histogram": {
        "field": "time",
        "fixed_interval": "1d"
      },
      "aggs": {
        "categories": {
          "categorize_text": {
            "field": "message",
            "categorization_filters": ["\\w+\_\\d{3}"]
          },
          "aggs": {
            "hit": {
              "top_hits": {
                "size": 1,
                "sort": ["time"],
                "_source": "message"
              }
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Monthly Sales Stats Bucket Aggregation Example
DESCRIPTION: Demonstrates a complete example of stats bucket aggregation calculating statistics across monthly sales data. Uses date_histogram and sum aggregations with stats_bucket to compute statistics over the monthly sales values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-stats-bucket-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "size": 0,
  "aggs": {
    "sales_per_month": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "sales": {
          "sum": {
            "field": "price"
          }
        }
      }
    },
    "stats_monthly_sales": {
      "stats_bucket": {
        "buckets_path": "sales_per_month>sales"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Snowball Token Filter in Elasticsearch Index Settings
DESCRIPTION: This snippet demonstrates how to configure a custom analyzer with a Snowball token filter for an Elasticsearch index. It sets up an analyzer named 'my_analyzer' that uses the standard tokenizer, lowercase filter, and a custom Snowball filter for English language stemming.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-snowball-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "standard",
          "filter": [ "lowercase", "my_snow" ]
        }
      },
      "filter": {
        "my_snow": {
          "type": "snowball",
          "language": "English"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Executing Terms Aggregation in Elasticsearch
DESCRIPTION: This snippet demonstrates how to perform a Terms aggregation on the 'genre' field in Elasticsearch. It returns buckets for unique values in the specified field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-terms-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "aggs": {
    "genres": {
      "terms": { "field": "genre" }
    }
  }
}
```

----------------------------------------

TITLE: Indexing and Querying Documents by _id Field in Elasticsearch
DESCRIPTION: This example demonstrates how to create documents with specific IDs and then query them using the _id field with the terms query. The snippet shows creating two documents with IDs 1 and 2, then retrieving them in a search query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-id-field.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
# Example documents
PUT my-index-000001/_doc/1
{
  "text": "Document with ID 1"
}

PUT my-index-000001/_doc/2?refresh=true
{
  "text": "Document with ID 2"
}

GET my-index-000001/_search
{
  "query": {
    "terms": {
      "_id": [ "1", "2" ] <1>
    }
  }
}
```

----------------------------------------

TITLE: Setting Up Rollover Policy with Phase Transition Control in Elasticsearch
DESCRIPTION: This example creates an ILM policy that deletes an index one day after it rolls over, not one day after creation. It demonstrates how rollover conditions block phase transitions until the rollover succeeds, which happens when the index reaches 50GB.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-rollover.md#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
PUT /_ilm/policy/rollover_policy
{
  "policy": {
    "phases": {
      "hot": {
        "actions": {
          "rollover": {
            "max_size": "50gb"
          }
        }
      },
      "delete": {
        "min_age": "1d",
        "actions": {
          "delete": {}
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Computing Conditional Average Salaries by Gender using ESQL
DESCRIPTION: ESQL query that computes two conditional averages of salaries: one for employees born before 1960 (avg50s) and another for those born from 1960 onwards (avg60s). Results are grouped by gender and sorted alphabetically. The averages are cast to LONG type for precise numerical representation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/stats.csv-spec/aggFiltering.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS avg50s = AVG(salary)::LONG WHERE birth_date < "1960-01-01",
        avg60s = AVG(salary)::LONG WHERE birth_date >= "1960-01-01"
        BY gender
| SORT gender
```

----------------------------------------

TITLE: Multi-match Phrase Prefix Type Query in Elasticsearch
DESCRIPTION: Presents an example of the 'phrase_prefix' multi-match type. This type executes a match_phrase_prefix query against each specified field, matching documents where the query string is a phrase prefix in any target field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-multi-match-query.md#_snippet_8

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "multi_match" : {
      "query":      "quick brown f",
      "type":       "phrase_prefix",
      "fields":     [ "subject", "message" ]
    }
  }
}
```

----------------------------------------

TITLE: Elasticsearch Query with Terms Set and Minimum Should Match Script
DESCRIPTION: Example Elasticsearch query demonstrating how to use terms_set with a minimum_should_match_script to find documents matching at least two actors from a list of three specified actors.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-min-should-match-context.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET seats/_search
{
  "query": {
    "terms_set": {
      "actors": {
        "terms": [
          "smith",
          "earns",
          "black"
        ],
        "minimum_should_match_script": {
          "source": "Math.min(params['num_terms'], params['min_actors_to_see'])",
          "params": {
            "min_actors_to_see": 2
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Create Elasticsearch API Key with DLS
DESCRIPTION: This console command creates an Elasticsearch API key with document-level security (DLS) and workflow restrictions. It uses the Create API Key API to restrict queries to a specific search application and to documents the user has access to based on the access control information. The API key will only allow querying documents that contain 'john@example.co' or 'Engineering Members' in the `_allow_access_control` field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-dls-e2e-guide.md#2025-04-21_snippet_1

LANGUAGE: Console
CODE:
```
POST /_security/api_key
{
  "name": "john-api-key",
  "expiration": "1d",
  "role_descriptors": {
    "sharepoint-online-role": {
      "index": [
        {
          "names": [
            "sharepoint-search-application"
          ],
          "privileges": [
            "read"
          ],
          "query": {
            "template": {
              "params": {
                "access_control": [
                  "john@example.co",
                  "Engineering Members"
                  ]
              },
              "source": """
              {
                "bool": {
                  "should": [
                    {
                      "bool": {
                        "must_not": {
                          "exists": {
                            "field": "_allow_access_control"
                          }
                        }
                      }
                    },
                    {
                      "terms": {
                        "_allow_access_control.enum": {{#toJson}}access_control{{/toJson}}
                      }
                    }
                  ]
                }
              }
              """
            }
          }
        }
      ],
      "restriction": {
        "workflows": [
          "search_application_query"
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Using Runtime Fields with MAD Aggregation
DESCRIPTION: Shows how to use runtime fields to modify the scale of ratings before calculating median absolute deviation, including field transformation using a script.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-median-absolute-deviation-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET reviews/_search?filter_path=aggregations
{
  "size": 0,
  "runtime_mappings": {
    "rating.out_of_ten": {
      "type": "long",
      "script": {
        "source": "emit(doc['rating'].value * params.scaleFactor)",
        "params": {
          "scaleFactor": 2
        }
      }
    }
  },
  "aggs": {
    "review_average": {
      "avg": {
        "field": "rating.out_of_ten"
      }
    },
    "review_variability": {
      "median_absolute_deviation": {
        "field": "rating.out_of_ten"
      }
    }
  }
}
```

----------------------------------------

TITLE: Performing Multi-Field MATCH Query with Boosting SQL
DESCRIPTION: Shows how to use the MATCH predicate with multiple fields specified as a comma-separated string, including optional per-field boosting using the caret ('^') syntax. This leverages the underlying Elasticsearch `multi_match` query and demonstrates selecting the SCORE() to see relevance based on boosts.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-search.md#_snippet_2

LANGUAGE: SQL
CODE:
```
SELECT author, name, SCORE() FROM library WHERE MATCH('author^2,name^5', 'frank dune');
```

----------------------------------------

TITLE: Mapping Dense Vector Field with Int8 Quantization for HNSW Index in Elasticsearch (console)
DESCRIPTION: This snippet shows how to create an Elasticsearch index mapping where a `dense_vector` field is configured to use `int8` quantization for its HNSW index structure. This reduces the memory footprint of the index by quantizing each vector dimension to a 1-byte integer, potentially sacrificing some accuracy for storage efficiency.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/dense-vector.md#_snippet_3

LANGUAGE: console
CODE:
```
PUT my-byte-quantized-index
{
  "mappings": {
    "properties": {
      "my_vector": {
        "type": "dense_vector",
        "dims": 3,
        "index": true,
        "index_options": {
          "type": "int8_hnsw"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Preferred Painless Script Accessing Field using Shortcut API (js)
DESCRIPTION: This snippet presents an alternative recommended method for accessing field values in Painless scripts using the shortcut `$()` API (`$('foo.bar.baz', null)`). Like the `field` API, it is `_source` mode agnostic and prioritizes using docvalues for efficiency, reducing the cost of synthetic `_source` reconstruction. This script is part of a larger search or update request payload.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-source-field.md#_snippet_11

LANGUAGE: js
CODE:
```
"script": { "source": """  emit($('foo.bar.baz', null))   """ }
```

----------------------------------------

TITLE: Searching with Text Similarity Reranker using Cohere Endpoint | Elasticsearch Console
DESCRIPTION: Executes a search using the `text_similarity_reranker` with a Cohere Rerank inference endpoint. It uses a child `standard` retriever and re-ranks the top documents based on text similarity between the document's `field` ("text") and the `inference_text` ("Most famous landmark in Paris"), using the specified `inference_id` ("my-cohere-rerank-model"). Requires a Cohere Rerank inference endpoint to be configured in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrievers.md#_snippet_7

LANGUAGE: console
CODE:
```
GET /index/_search
{
   "retriever": {
      "text_similarity_reranker": {
         "retriever": {
            "standard": {
               "query": {
                  "match_phrase": {
                     "text": "landmark in Paris"
                  }
               }
            }
         },
         "field": "text",
         "inference_id": "my-cohere-rerank-model",
         "inference_text": "Most famous landmark in Paris",
         "rank_window_size": 100,
         "min_score": 0.5
      }
   }
}
```

----------------------------------------

TITLE: Creating and Using Nested Field Mapping
DESCRIPTION: Complete example showing how to create an index with nested field mapping, index data, and perform nested queries that correctly maintain object independence. Demonstrates both matching and non-matching queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/nested.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "user": {
        "type": "nested" 
      }
    }
  }
}

PUT my-index-000001/_doc/1
{
  "group" : "fans",
  "user" : [
    {
      "first" : "John",
      "last" :  "Smith"
    },
    {
      "first" : "Alice",
      "last" :  "White"
    }
  ]
}

GET my-index-000001/_search
{
  "query": {
    "nested": {
      "path": "user",
      "query": {
        "bool": {
          "must": [
            { "match": { "user.first": "Alice" }},
            { "match": { "user.last":  "Smith" }} 
          ]
        }
      }
    }
  }
}

GET my-index-000001/_search
{
  "query": {
    "nested": {
      "path": "user",
      "query": {
        "bool": {
          "must": [
            { "match": { "user.first": "Alice" }},
            { "match": { "user.last":  "White" }} 
          ]
        }
      },
      "inner_hits": { 
        "highlight": {
          "fields": {
            "user.first": {}
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Parsing Date String to Date Object in ESQL
DESCRIPTION: This snippet demonstrates how to use the DATE_PARSE function in ESQL to convert a string representation of a date into a date object. It takes two arguments: the date format string and the date string to be parsed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/date_parse.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW date_string = "2022-05-06"
| EVAL date = DATE_PARSE("yyyy-MM-dd", date_string)
```

----------------------------------------

TITLE: Searching Using Index Patterns in Elasticsearch
DESCRIPTION: This snippet shows how to use an index pattern to search across multiple indices that match a specific pattern. It searches any data streams or indices that start with 'my-index-'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-multiple-data-streams-indices.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /my-index-*/_search
{
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  }
}
```

----------------------------------------

TITLE: Elasticsearch Query with Custom Script Fields
DESCRIPTION: This query demonstrates how to use custom Painless scripts to compute and return the day of the week and number of actors for each document in the search results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-field-context.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "size": 2,
  "query": {
    "match_all": {}
  },
  "script_fields": {
    "day-of-week": {
      "script": {
        "source": "doc['datetime'].value.getDayOfWeekEnum().getDisplayName(TextStyle.FULL, Locale.ENGLISH)"
      }
    },
    "number-of-actors": {
      "script": {
        "source": "doc['actors'].size()"
      }
    }
  }
}
```

----------------------------------------

TITLE: Using SUBSTRING, MV_SORT and VALUES in ESQL for Name Grouping
DESCRIPTION: This ESQL query extracts the first letter from employee names, groups names by their first letter, sorts them within each group using MV_SORT with VALUES function, and finally sorts the results by the first letter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/values.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| EVAL first_letter = SUBSTRING(first_name, 0, 1)
| STATS first_name = MV_SORT(VALUES(first_name)) BY first_letter
| SORT first_letter
```

----------------------------------------

TITLE: Filtering Documents by Matching Values in YAML
DESCRIPTION: This example shows how to use KQL to filter documents that match specific values, such as a number, text, date, or boolean, including considerations for searching all fields or text fields with mapping settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/kql.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
http.request.method: GET
```

LANGUAGE: yaml
CODE:
```
Hello
```

LANGUAGE: yaml
CODE:
```
http.request.body.content: null pointer
```

LANGUAGE: yaml
CODE:
```
http.request.body.content: "null pointer"
```

LANGUAGE: yaml
CODE:
```
http.request.referrer: "https://example.com"
http.request.referrer: https\://example.com
```

----------------------------------------

TITLE: Basic Terms Query in Elasticsearch
DESCRIPTION: Demonstrates a basic terms query searching for specific user IDs with an optional boost parameter to adjust relevance scoring
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-terms-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "terms": {
      "user.id": [ "kimchy", "elkbee" ],
      "boost": 1.0
    }
  }
}
```

----------------------------------------

TITLE: Creating an Index with Multi-field Mapping in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create an index with a multi-field mapping for the 'city' field. The field is indexed as both 'text' for full-text search and 'keyword' for sorting and aggregations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/multi-fields.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "city": {
        "type": "text",
        "fields": {
          "raw": {
            "type":  "keyword"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Ordering Terms Aggregation by Key in Elasticsearch
DESCRIPTION: This snippet shows how to order the buckets in a Terms aggregation by their term values in ascending order using the 'order' parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-terms-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /_search
{
  "aggs": {
    "genres": {
      "terms": {
        "field": "genre",
        "order": { "_key": "asc" }
      }
    }
  }
}
```

----------------------------------------

TITLE: Search with Text Similarity Rerank Retriever in Elasticsearch
DESCRIPTION: Performs a search on the `movies` index using the `text_similarity_reranker`. It first uses a standard `match` query for initial results and then re-ranks them based on the semantic similarity of the `plot` field to the `inference_text` using the specified inference endpoint.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrievers.md#_snippet_11

LANGUAGE: console
CODE:
```
POST movies/_search
{
  "retriever": {
    "text_similarity_reranker": {
      "retriever": {
        "standard": {
          "query": {
            "match": {
              "genre": "drama"
            }
          }
        }
      },
      "field": "plot",
      "inference_id": "my-msmarco-minilm-model",
      "inference_text": "films that explore psychological depths"
    }
  }
}
```

----------------------------------------

TITLE: Preferred Painless Script Accessing Field using Field API (js)
DESCRIPTION: This snippet shows the recommended method for accessing field values in Painless scripts, using the `field` API (`field('foo.bar.baz').get(null)`). This approach is preferable as it works regardless of whether `_source` is synthetic or stored, and it efficiently uses docvalues if available, reducing the need to synthesize `_source`. This script is part of a larger search or update request payload.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-source-field.md#_snippet_10

LANGUAGE: js
CODE:
```
"script": { "source": """  emit(field('foo.bar.baz').get(null))   """ }
```

----------------------------------------

TITLE: Performing Lookup Join on Firewall Logs with Threat List in ESQL
DESCRIPTION: This ESQL query retrieves data from firewall_logs and performs a lookup join with a threat_list table using the source IP as the join key. This allows for enriching firewall log data with threat intelligence information.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs-lookup-join.csv-spec/lookupJoinSourceIp.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM firewall_logs
| LOOKUP JOIN threat_list ON source.IP
```

----------------------------------------

TITLE: Configuring Custom Analyzer with Edge NGram for Autocomplete in Elasticsearch
DESCRIPTION: Example demonstrating how to set up a custom autocomplete analyzer using edge_ngram tokenizer with different analyzers for index and search time. The configuration includes creating a custom filter, defining an autocomplete analyzer, and setting up field mapping with separate index and search analyzers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/search-analyzer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "analysis": {
      "filter": {
        "autocomplete_filter": {
          "type": "edge_ngram",
          "min_gram": 1,
          "max_gram": 20
        }
      },
      "analyzer": {
        "autocomplete": {
          "type": "custom",
          "tokenizer": "standard",
          "filter": [
            "lowercase",
            "autocomplete_filter"
          ]
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "text": {
        "type": "text",
        "analyzer": "autocomplete",
        "search_analyzer": "standard"
      }
    }
  }
}

PUT my-index-000001/_doc/1
{
  "text": "Quick Brown Fox"
}

GET my-index-000001/_search
{
  "query": {
    "match": {
      "text": {
        "query": "Quick Br",
        "operator": "and"
      }
    }
  }
}
```

----------------------------------------

TITLE: Subsequent Search Request with search_after Parameter in Elasticsearch
DESCRIPTION: This example demonstrates how to use the search_after parameter to retrieve the next page of results. The sort values from the last hit of the previous page are used as the search_after value to continue pagination.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/paginate-search-results.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET twitter/_search
{
    "query": {
        "match": {
            "title": "elasticsearch"
        }
    },
    "search_after": [1463538857, "654323"],
    "sort": [
        {"date": "asc"},
        {"tie_breaker_id": "asc"}
    ]
}
```

----------------------------------------

TITLE: Configure ILM Policy with Searchable Snapshot and Replication (Console)
DESCRIPTION: This policy configuration for `my_policy` includes a `hot` phase with `rollover` and `searchable_snapshot` actions, and a `delete` phase. In the `hot` phase, it rolls over indices based on size and then creates a searchable snapshot using `backing_repo`, keeping a single replica for 14 days via `replicate_for`. The index proceeds to the `delete` phase after 28 days, where it is deleted. Requires a configured snapshot repository and ILM enabled.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-searchable-snapshot.md#_snippet_1

LANGUAGE: Console
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "hot": {
        "actions": {
          "rollover" : {
            "max_primary_shard_size": "50gb"
          },
          "searchable_snapshot" : {
            "snapshot_repository" : "backing_repo",
            "replicate_for": "14d"
          }
        }
      },
      "delete": {
        "min_age": "28d",
        "actions": {
          "delete" : { }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Mapping Dense Vector Field with Specific Similarity Metric in Elasticsearch (console)
DESCRIPTION: This snippet creates an index mapping for an Elasticsearch index, defining a `dense_vector` field named `my_vector`. It specifies that the vector has 3 dimensions and explicitly sets the similarity metric to `dot_product` for use in kNN search, overriding the default `cosine` similarity. Indexing is enabled by default.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/dense-vector.md#_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-2
{
  "mappings": {
    "properties": {
      "my_vector": {
        "type": "dense_vector",
        "dims": 3,
        "similarity": "dot_product"
      }
    }
  }
}
```

----------------------------------------

TITLE: Sorting Documents by Field Length Using Painless Script in Elasticsearch
DESCRIPTION: This example demonstrates how to use a Painless script to sort search results based on the length of the 'theatre' field multiplied by a factor. It uses the _script sort option with a custom Painless script.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-sort-context.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "query": {
    "term": {
      "sold": "true"
    }
  },
  "sort": {
    "_script": {
      "type": "number",
      "script": {
        "lang": "painless",
        "source": "doc['theatre'].value.length() * params.factor",
        "params": {
          "factor": 1.1
        }
      },
      "order": "asc"
    }
  }
}
```

----------------------------------------

TITLE: Bulk Index Data Using cURL
DESCRIPTION: Uses the bulk API to index security event data from a JSON file into the data stream.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-ex-threat-detection.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
curl -H "Content-Type: application/json" -XPOST "localhost:9200/my-data-stream/_bulk?pretty&refresh" --data-binary "@normalized-T1117-AtomicRed-regsvr32.json"
```

----------------------------------------

TITLE: Searching a Data Stream using Python
DESCRIPTION: This Python code snippet demonstrates how to search a data stream using the Elasticsearch Python client. It performs a simple match query on the 'message' field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/ml/licenses/ojalgo-NOTICE.txt#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
from elasticsearch import Elasticsearch

es = Elasticsearch()

response = es.search(
    index="my-data-stream",
    body={
        "query": {
            "match": {
                "message": "test"
            }
        }
    }
)
```

----------------------------------------

TITLE: Initializing Elasticsearch Client in Java
DESCRIPTION: Creates an Elasticsearch client instance with custom configuration options.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/ml/src/main/resources/org/elasticsearch/xpack/ml/inference.nlp.tokenizers/spm_precompiled_normalizer.txt#2025-04-21_snippet_0

LANGUAGE: Java
CODE:
```
RestClient restClient = RestClient.builder(
    new HttpHost("localhost", 9200, "http"),
    new HttpHost("localhost", 9201, "http"))
    .setRequestConfigCallback(requestConfigBuilder -> requestConfigBuilder
        .setConnectTimeout(5000)
        .setSocketTimeout(60000))
    .setMaxRetryTimeoutMillis(60000)
    .build();
```

----------------------------------------

TITLE: Creating Documents Without Refresh in Elasticsearch
DESCRIPTION: Examples of creating documents without forcing a refresh, either by omitting the refresh parameter or explicitly setting it to false. Changes will be visible after the next automatic refresh.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/refresh-parameter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /test/_doc/3
{"test": "test"}
PUT /test/_doc/4?refresh=false
{"test": "test"}
```

----------------------------------------

TITLE: Querying Elasticsearch: Date Range Query with Date Math (Console)
DESCRIPTION: This snippet illustrates how to use the range query on a date field (`timestamp`) in Elasticsearch. It utilizes date math to define the range, filtering documents with timestamps between yesterday (rounded down to the start of the day) and today (rounded down to the start of the day). This requires the field to be mapped as a date type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-range-query.md#_snippet_1

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "range": {
      "timestamp": {
        "gte": "now-1d/d",
        "lte": "now/d"
      }
    }
  }
}
```

----------------------------------------

TITLE: Calculating Message Age with Elasticsearch Script Field in Console
DESCRIPTION: This snippet demonstrates how to use Elasticsearch script fields to calculate the age of a message as the time elapsed from when the message was received to the current time. The computed age includes years, months, days, hours, minutes, and seconds. It uses the Painless scripting language and expects an Elasticsearch index with a datetime field. The 'now' parameter must be provided in milliseconds since epoch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_31

LANGUAGE: console
CODE:
```
GET /_search?pretty=true
{
  "query": {
    "match_all": {}
  },
  "script_fields": {
    "message_age": {
      "script": {
        "source": "ZonedDateTime now = ZonedDateTime.ofInstant(Instant.ofEpochMilli(params[\"now\"]), ZoneId.of(\"Z\")); ZonedDateTime mdt = doc[\"datetime\"].value; String age; long years = mdt.until(now, ChronoUnit.YEARS); age = years + \"Y \"; mdt = mdt.plusYears(years); long months = mdt.until(now, ChronoUnit.MONTHS); age += months + \"M \"; mdt = mdt.plusMonths(months); long days = mdt.until(now, ChronoUnit.DAYS); age += days + \"D \"; mdt = mdt.plusDays(days); long hours = mdt.until(now, ChronoUnit.HOURS); age += hours + \"h \"; mdt = mdt.plusHours(hours); long minutes = mdt.until(now, ChronoUnit.MINUTES); age += minutes + \"m \"; mdt = mdt.plusMinutes(minutes); long seconds = mdt.until(now, ChronoUnit.SECONDS); age += hours + \"s\"; return age;",
        "params": {
          "now": 1574005645830
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Searching Data in ElasticSearch with JavaScript
DESCRIPTION: This snippet performs a search query in ElasticSearch to retrieve documents matching a specific keyword, such as '制限スピード'. It uses the JavaScript client to execute the search and outputs the results, suitable for analysis or display.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/plugins/analysis-kuromoji/src/test/resources/org/elasticsearch/plugin/analysis/kuromoji/user_dict.txt#_snippet_3

LANGUAGE: JavaScript
CODE:
```
async function searchDocuments(indexName, queryText) {
  try {
    const result = await client.search({
      index: indexName,
      body: {
        query: {
          match: { test_name: queryText }
        }
      }
    });
    console.log('Search results:', result.body.hits.hits);
  } catch (error) {
    console.error('Search error:', error);
  }
}

// Example usage:
// searchDocuments('test_index', '制限スピード');
```

----------------------------------------

TITLE: Creating Index with Join Field in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create an Elasticsearch index with a `join` field mapping to establish a parent-child relationship between documents. The `my-join-field` is defined with the `parent` and `child` relations, which is a prerequisite for using the `has_child` query. This index setup is necessary for the query to correctly identify and retrieve parent documents based on their child documents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-has-child-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "mappings": {
    "properties": {
      "my-join-field": {
        "type": "join",
        "relations": {
          "parent": "child"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating a Data Stream in Elasticsearch using JSON
DESCRIPTION: This snippet demonstrates how to create a data stream named 'my-data-stream' using a JSON request to the Elasticsearch API. It specifies the index template and its priority.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/ml/licenses/ojalgo-NOTICE.txt#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
PUT _index_template/my-data-stream-template
{
  "index_patterns": ["my-data-stream*"],
  "data_stream": { },
  "priority": 500
}
```

----------------------------------------

TITLE: Implementing Query and Filter Contexts in Elasticsearch Search API
DESCRIPTION: This example demonstrates how to use both query and filter contexts in an Elasticsearch search request. The query combines scored clauses (matching 'Search' in title and 'Elasticsearch' in content) with filter clauses (checking for 'published' status and dates after 2015-01-01) for efficient, relevant search results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-filter-context.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": { <1>
    "bool": { <2>
      "must": [
        { "match": { "title":   "Search"        }},
        { "match": { "content": "Elasticsearch" }}
      ],
      "filter": [ <3>
        { "term":  { "status": "published" }},
        { "range": { "publish_date": { "gte": "2015-01-01" }}}
      ]
    }
  }
}
```

----------------------------------------

TITLE: Field Collapse Example with Top Hits in Elasticsearch
DESCRIPTION: This example shows how to implement field collapsing or result grouping using a terms aggregator with a top_hits sub-aggregator. It groups webpages by domain and orders results by relevancy.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-top-hits-aggregation.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "query": {
    "match": {
      "body": "elections"
    }
  },
  "aggs": {
    "top_sites": {
      "terms": {
        "field": "domain",
        "order": {
          "top_hit": "desc"
        }
      },
      "aggs": {
        "top_tags_hits": {
          "top_hits": {}
        },
        "top_hit" : {
          "max": {
            "script": {
              "source": "_score"
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Casting String to Timestamp and Extracting Year in SQL
DESCRIPTION: Example demonstrating the Elasticsearch SQL `CAST` function used to convert a date string ('2018-05-19T11:23:45Z') to a `TIMESTAMP` type, followed by using the `YEAR` function to extract the year. Includes the query and the expected output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-type-conversion.md#_snippet_3

LANGUAGE: SQL
CODE:
```
SELECT YEAR(CAST('2018-05-19T11:23:45Z' AS TIMESTAMP)) AS year;

     year
---------------
2018
```

----------------------------------------

TITLE: Creating a Point in Time (PIT) for Consistent Search Results in Elasticsearch
DESCRIPTION: This example shows how to create a Point in Time (PIT) with a 1-minute retention period. PITs preserve the current index state across multiple searches, ensuring consistent pagination results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/paginate-search-results.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /my-index-000001/_pit?keep_alive=1m
```

----------------------------------------

TITLE: Updating Low Disk Watermark Cluster Setting (Elasticsearch API)
DESCRIPTION: Demonstrates how to dynamically update the `cluster.routing.allocation.disk.watermark.low` setting using the Elasticsearch Cluster Settings API. This setting defines the disk usage threshold above which Elasticsearch will not allocate new shards to a node. The example sets the low watermark to 80% disk usage using a transient setting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/cluster-level-shard-allocation-routing-settings.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "transient": {
    "cluster.routing.allocation.disk.watermark.low": "80%"
  }
}
```

----------------------------------------

TITLE: Searching Elasticsearch: Retrieve Specific Fields (console)
DESCRIPTION: Performs an Elasticsearch search query matching `user.id`. It uses the `fields` parameter to retrieve `user.id`, all fields matching `http.response.*`, and `@timestamp` with a specific format (`epoch_millis`). The `_source` is explicitly excluded.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_0

LANGUAGE: console
CODE:
```
POST my-index-000001/_search
{
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  },
  "fields": [
    "user.id",
    "http.response.*",
    {
      "field": "@timestamp",
      "format": "epoch_millis"
    }
  ],
  "_source": false
}
```

----------------------------------------

TITLE: Mapping Index with Multifields (comment, comment.english) using Standard and English Analyzers - Elasticsearch DSL
DESCRIPTION: Creates an index named `index1` with a `comment` field analyzed by the `standard` analyzer. It includes a sub-field `comment.english` analyzed by the `english` analyzer, demonstrating the setup for highlighting across related fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_9

LANGUAGE: Elasticsearch DSL
CODE:
```
PUT index1
{
  "mappings": {
    "properties": {
      "comment": {
        "type": "text",
        "analyzer": "standard",
        "fields": {
          "english": {
            "type": "text",
            "analyzer": "english"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Executing Scripted Metric Aggregation in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the scripted metric aggregation to compute the total profit from sale and cost transactions. It includes init, map, combine, and reduce scripts.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-scripted-metric-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST ledger/_search?size=0
{
  "query": {
    "match_all": {}
  },
  "aggs": {
    "profit": {
      "scripted_metric": {
        "init_script": "state.transactions = []",
        "map_script": "state.transactions.add(doc.type.value == 'sale' ? doc.amount.value : -1 * doc.amount.value)",
        "combine_script": "double profit = 0; for (t in state.transactions) { profit += t } return profit",
        "reduce_script": "double profit = 0; for (a in states) { profit += a } return profit"
      }
    }
  }
}
```

----------------------------------------

TITLE: Basic Date Range Aggregation in Elasticsearch
DESCRIPTION: Creates a date range aggregation with two buckets - one for documents older than 10 months ago and another for documents since then. It uses date math expressions and formats the response dates in MM-yyyy format.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-daterange-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "range": {
      "date_range": {
        "field": "date",
        "format": "MM-yyyy",
        "ranges": [
          { "to": "now-10M/M" },  <1>
          { "from": "now-10M/M" } <2>
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Term Vectors with Search and Highlight in Elasticsearch
DESCRIPTION: Demonstrates setting up an index with term vector configuration, indexing a document, and performing a search with highlighting. The example shows how to enable position and offset storage for the fast vector highlighter using term_vector setting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/term-vector.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "text": {
        "type":        "text",
        "term_vector": "with_positions_offsets"
      }
    }
  }
}

PUT my-index-000001/_doc/1
{
  "text": "Quick brown fox"
}

GET my-index-000001/_search
{
  "query": {
    "match": {
      "text": "brown fox"
    }
  },
  "highlight": {
    "fields": {
      "text": {}
    }
  }
}
```

----------------------------------------

TITLE: Geo-distance query with lat/lon as properties in Elasticsearch
DESCRIPTION: This snippet demonstrates the use of the `geo_distance` filter with latitude and longitude specified as separate properties within the `pin.location` field. The query searches for documents within a 12km radius of the specified coordinates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-distance-query.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET /my_locations/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_distance": {
          "distance": "12km",
          "pin.location": {
            "lat": 40,
            "lon": -70
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing Suggestions with Geo Location Context in Elasticsearch
DESCRIPTION: This snippet shows how to index suggestions with geo location contexts in Elasticsearch. It demonstrates associating multiple geo points with a single suggestion, which allows for location-based filtering and boosting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_24

LANGUAGE: console
CODE:
```
PUT place/_doc/1
{
  "suggest": {
    "input": "timmy's",
    "contexts": {
      "location": [
        {
          "lat": 43.6624803,
          "lon": -79.3863353
        },
        {
          "lat": 43.6624718,
          "lon": -79.3873227
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Implementing Custom Polish Analyzer in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create a custom analyzer called 'rebuilt_stempel' that reimplements the functionality of the built-in Polish analyzer. The analyzer uses a standard tokenizer followed by lowercase filter, Polish stop words filter, and Polish stemming filter. This approach allows for more flexibility in customizing the analyzer configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/_reimplementing_and_extending_the_analyzers_2.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /stempel_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "rebuilt_stempel": {
          "tokenizer":  "standard",
          "filter": [
            "lowercase",
            "polish_stop",
            "polish_stem"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Using FIRST_VALUE with SUBSTRING and Ordering
DESCRIPTION: This query demonstrates using FIRST_VALUE with a function (SUBSTRING) applied to the target field ('first_name'), while still ordering by 'birth_date' within each 'gender' group.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_19

LANGUAGE: SQL
CODE:
```
SELECT gender, FIRST_VALUE(SUBSTRING(first_name, 2, 6), birth_date) AS "first" FROM emp GROUP BY gender ORDER BY gender;
```

----------------------------------------

TITLE: Creating Mappings for the Seats Index in Elasticsearch
DESCRIPTION: Creates mappings for the 'seats' index with properties for theatre, play, actors, date, time, cost, row, number, sold status, and datetime fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-context-examples.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /seats
{
  "mappings": {
    "properties": {
      "theatre":  { "type": "keyword" },
      "play":     { "type": "keyword" },
      "actors":   { "type": "keyword" },
      "date":     { "type": "keyword" },
      "time":     { "type": "keyword" },
      "cost":     { "type": "double"  },
      "row":      { "type": "integer" },
      "number":   { "type": "integer" },
      "sold":     { "type": "boolean" },
      "datetime": { "type": "date"    }
    }
  }
}
```

----------------------------------------

TITLE: Syntax for AVG Function in Elasticsearch SQL
DESCRIPTION: This snippet shows the basic syntax for the AVG function, which computes the average of numeric values in a specified field. It requires a numeric field as input and returns a double.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_0

LANGUAGE: SQL
CODE:
```
AVG(numeric_field) <1>
```

----------------------------------------

TITLE: Querying with bool_prefix Multi-Match in Console
DESCRIPTION: This snippet demonstrates a basic Elasticsearch `_search` query using the `multi_match` query with `type` set to `bool_prefix`. It searches for the query string "quick brown f" across the "subject" and "message" fields, treating the last term ("f") as a prefix and the preceding terms ("quick", "brown") as exact matches, similar to a `match_bool_prefix` query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-multi-match-query.md#_snippet_14

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "multi_match" : {
      "query":      "quick brown f",
      "type":       "bool_prefix",
      "fields":     [ "subject", "message" ]
    }
  }
}
```

----------------------------------------

TITLE: Creating Nested Mapping and Indexing Document in Elasticsearch
DESCRIPTION: Demonstrates creating a mapping with a nested field and indexing a document with nested objects in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-inner-hits.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT test
{
  "mappings": {
    "properties": {
      "comments": {
        "type": "nested"
      }
    }
  }
}

PUT test/_doc/1?refresh
{
  "title": "Test title",
  "comments": [
    {
      "author": "kimchy",
      "number": 1
    },
    {
      "author": "nik9000",
      "number": 2
    }
  ]
}
```

----------------------------------------

TITLE: Indexing Documents with Arrays and Searching in Elasticsearch Console
DESCRIPTION: This snippet demonstrates indexing two documents into an Elasticsearch index. The first document contains fields with arrays of strings and objects, dynamically mapping the fields. The second document uses the same fields but with single values. It then shows a search query targeting the 'tags' field, which successfully matches both documents, illustrating how searches handle multi-value fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/array.md#_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1
{
  "message": "some arrays in this document...",
  "tags":  [ "elasticsearch", "wow" ],
  "lists": [
    {
      "name": "prog_list",
      "description": "programming list"
    },
    {
      "name": "cool_list",
      "description": "cool stuff list"
    }
  ]
}

PUT my-index-000001/_doc/2
{
  "message": "no arrays in this document...",
  "tags":  "elasticsearch",
  "lists": {
    "name": "prog_list",
    "description": "programming list"
  }
}

GET my-index-000001/_search
{
  "query": {
    "match": {
      "tags": "elasticsearch"
    }
  }
}
```

----------------------------------------

TITLE: Creating Custom Normalizer and Querying Index
DESCRIPTION: Shows how to create an index with a custom normalizer that applies lowercase and ASCII folding filters. Demonstrates indexing documents and querying them using term and match queries to show normalization effects.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/normalizer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT index
{
  "settings": {
    "analysis": {
      "normalizer": {
        "my_normalizer": {
          "type": "custom",
          "char_filter": [],
          "filter": ["lowercase", "asciifolding"]
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "foo": {
        "type": "keyword",
        "normalizer": "my_normalizer"
      }
    }
  }
}

PUT index/_doc/1
{
  "foo": "BÀR"
}

PUT index/_doc/2
{
  "foo": "bar"
}

PUT index/_doc/3
{
  "foo": "baz"
}

POST index/_refresh

GET index/_search
{
  "query": {
    "term": {
      "foo": "BAR"
    }
  }
}

GET index/_search
{
  "query": {
    "match": {
      "foo": "BAR"
    }
  }
}
```

----------------------------------------

TITLE: Query String Search Request in JSON
DESCRIPTION: This code snippet shows the JSON body of a search request using the `query_string` query in Elasticsearch. It specifies the query to search for as well as the default field to search in if none is specified within the query itself.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "query": {
    "query_string": {
      "query": "(new york city) OR (big apple)",
      "default_field": "content"
    }
  }
}
```

----------------------------------------

TITLE: Implementing Brazilian Analyzer as Custom Analyzer in Elasticsearch
DESCRIPTION: Creates a custom analyzer that replicates the functionality of the built-in Brazilian Portuguese analyzer, demonstrating the configuration of Brazilian-specific stopwords, keyword marking for stem exclusion, and stemming filters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
PUT /brazilian_example
{
  "settings": {
    "analysis": {
      "filter": {
        "brazilian_stop": {
          "type":       "stop",
          "stopwords":  "_brazilian_" 
        },
        "brazilian_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["exemplo"] 
        },
        "brazilian_stemmer": {
          "type":       "stemmer",
          "language":   "brazilian"
        }
      },
      "analyzer": {
        "rebuilt_brazilian": {
          "tokenizer":  "standard",
          "filter": [
            "lowercase",
            "brazilian_stop",
            "brazilian_keywords",
            "brazilian_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Index with Default Semantic Text Field - Elasticsearch API
DESCRIPTION: This snippet demonstrates how to define a field of type `semantic_text` within an index mapping. When no specific inference ID is provided, it defaults to using the `.elser-2-elasticsearch` endpoint for generating embeddings. This requires an Elasticsearch instance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/semantic-text.md#_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "inference_field": {
        "type": "semantic_text"
      }
    }
  }
}
```

----------------------------------------

TITLE: Rollover Based on Index Age
DESCRIPTION: ILM policy configuration that triggers rollover when the index is 7 days old.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-rollover.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "hot": {
        "actions": {
          "rollover" : {
            "max_age": "7d"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Search with PIT and Explicit _shard_doc Tiebreaker in Elasticsearch
DESCRIPTION: This example shows a search using a PIT with an explicit _shard_doc tiebreaker in descending order. The _shard_doc tiebreaker ensures consistent ordering when documents have the same timestamp value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/paginate-search-results.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET /_search
{
  "size": 10000,
  "query": {
    "match" : {
      "user.id" : "elkbee"
    }
  },
  "pit": {
    "id":  "46ToAwMDaWR5BXV1aWQyKwZub2RlXzMAAAAAAAAAACoBYwADaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQADaWR5BXV1aWQyKgZub2RlXzIAAAAAAAAAAAwBYgACBXV1aWQyAAAFdXVpZDEAAQltYXRjaF9hbGw_gAAAAA==", <1>
    "keep_alive": "1m"
  },
  "sort": [ <2>
    {"@timestamp": {"order": "asc", "format": "strict_date_optional_time_nanos"}},
    {"_shard_doc": "desc"}
  ]
}
```

----------------------------------------

TITLE: Range Queries in Elasticsearch
DESCRIPTION: Demonstrates various range query syntaxes for date, numeric, and string fields using inclusive and exclusive range specifications
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_7

LANGUAGE: elasticsearch
CODE:
```
date:[2012-01-01 TO 2012-12-31]
```

LANGUAGE: elasticsearch
CODE:
```
count:[1 TO 5]
```

LANGUAGE: elasticsearch
CODE:
```
tag:{alpha TO omega}
```

LANGUAGE: elasticsearch
CODE:
```
count:[10 TO *]
```

LANGUAGE: elasticsearch
CODE:
```
age:>10
```

----------------------------------------

TITLE: Querying Multi-level Nested Documents
DESCRIPTION: The code demonstrates a multi-level nested query on a 'drivers' index, matching documents based on nested fields 'make' and 'model' of vehicles.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-nested-query.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET /drivers/_search
{
  "query": {
    "nested": {
      "path": "driver",
      "query": {
        "nested": {
          "path": "driver.vehicle",
          "query": {
            "bool": {
              "must": [
                { "match": { "driver.vehicle.make": "Powell Motors" } },
                { "match": { "driver.vehicle.model": "Canyonero" } }
              ]
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Querying All Documents with match_all in Elasticsearch
DESCRIPTION: This code snippet demonstrates how to perform a match_all query in Elasticsearch, which retrieves all documents with a default score of 1.0. It showcases the basic structure of an Elasticsearch query using the '_search' endpoint.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-match-all-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
    "query": {
        "match_all": {}
    }
}
```

----------------------------------------

TITLE: Configuring Date Processor with Templated Parameters (JSON)
DESCRIPTION: This example illustrates how to use templated values for the `timezone` and `locale` parameters of the date processor. Instead of hardcoding these values, they are extracted from the `my_timezone` and `my_locale` fields present in the document being processed using mustache templating `{{{...}}}`. This allows the processor behavior to be dynamic based on document content.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/date-processor.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "description" : "...",
  "processors" : [
    {
      "date" : {
        "field" : "initial_date",
        "target_field" : "timestamp",
        "formats" : ["ISO8601"],
        "timezone" : "{{{my_timezone}}}",
        "locale" : "{{{my_locale}}}"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Calculating T-Shirt Sales Percentage Using Bucket Script Aggregation
DESCRIPTION: Demonstrates a complex query using date_histogram, sum, filter, and bucket_script aggregations to calculate the percentage of t-shirt sales compared to total sales for each month. It showcases how to use nested aggregations and bucket paths.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-bucket-script-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "size": 0,
  "aggs": {
    "sales_per_month": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "total_sales": {
          "sum": {
            "field": "price"
          }
        },
        "t-shirts": {
          "filter": {
            "term": {
              "type": "t-shirt"
            }
          },
          "aggs": {
            "sales": {
              "sum": {
                "field": "price"
              }
            }
          }
        },
        "t-shirt-percentage": {
          "bucket_script": {
            "buckets_path": {
              "tShirtSales": "t-shirts>sales",
              "totalSales": "total_sales"
            },
            "script": "params.tShirtSales / params.totalSales * 100"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Access Control Document Example in Elasticsearch DLS
DESCRIPTION: This code snippet provides an example of an access control document used in Elasticsearch's Document Level Security (DLS). It defines the identity of a user and their access control policy using a query template and parameters. The `_id` typically represents a unique identifier like email or username, and the `query` specifies the conditions for access based on the provided parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-dls-overview.md#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
```js
{
  "_id": "example.user@example.com",
  "identity": {
      "username": "example username",
      "email": "example.user@example.com"
   },
   "query": {
        "template": {
            "params": {
                "access_control": [
                    "example.user@example.com",
                    "example group",
                    "example username"]
            }
        },
        "source": "..."
    }
}
```
```

----------------------------------------

TITLE: Rollover Based on Document Count
DESCRIPTION: ILM policy configuration that triggers rollover when the index contains 100 million documents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-rollover.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "hot": {
        "actions": {
          "rollover" : {
            "max_docs": 100000000
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining Index Mapping with Numeric Fields - Console
DESCRIPTION: This snippet demonstrates how to create or update an Elasticsearch index mapping using a PUT request. It defines three fields: `number_of_bytes` as an `integer`, `time_in_seconds` as a `float`, and `price` as a `scaled_float` with a `scaling_factor` of 100. This shows how to specify different numeric types and configure type-specific parameters like `scaling_factor` within a mapping definition.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/number.md#_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "number_of_bytes": {
        "type": "integer"
      },
      "time_in_seconds": {
        "type": "float"
      },
      "price": {
        "type": "scaled_float",
        "scaling_factor": 100
      }
    }
  }
}
```

----------------------------------------

TITLE: Computing Minimum Price Using Min Aggregation in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the min aggregation to compute the minimum price across all documents in an index. It shows the query structure and the expected response format.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-min-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "min_price": { "min": { "field": "price" } }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  ...

  "aggregations": {
    "min_price": {
      "value": 10.0
    }
  }
}
```

----------------------------------------

TITLE: Analyzing Text with Lowercase Filter in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the analyze API with the lowercase filter to convert a given text to lowercase tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lowercase-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET _analyze
{
  "tokenizer" : "standard",
  "filter" : ["lowercase"],
  "text" : "THE Quick FoX JUMPs"
}
```

----------------------------------------

TITLE: ORDER BY with LIMIT Example
DESCRIPTION: Demonstrates sorting results by page_count in descending order with a LIMIT of 5 records.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_24

LANGUAGE: sql
CODE:
```
SELECT * FROM library ORDER BY page_count DESC LIMIT 5;
```

----------------------------------------

TITLE: Configuring Simple Date Processor in Elasticsearch Pipeline (JSON)
DESCRIPTION: This snippet shows a basic configuration for the Elasticsearch date ingest processor. It specifies the input `field` as "initial_date", the output `target_field` as "timestamp", the expected `formats` for parsing the date, and the `timezone` to interpret the input date string if it lacks timezone information and to convert the output to before formatting (unless output is epoch). It is used within an ingest pipeline definition.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/date-processor.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "description" : "...",
  "processors" : [
    {
      "date" : {
        "field" : "initial_date",
        "target_field" : "timestamp",
        "formats" : ["dd/MM/yyyy HH:mm:ss"],
        "timezone" : "Europe/Amsterdam"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Configuring Date Histogram with Fixed Interval in Elasticsearch
DESCRIPTION: This example shows how to configure a date histogram aggregation with a fixed interval of 30 days in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-datehistogram-aggregation.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "sales_over_time": {
      "date_histogram": {
        "field": "date",
        "fixed_interval": "30d"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Read Only ILM Policy in Elasticsearch
DESCRIPTION: Example of creating an ILM policy that sets an index to read-only during its warm phase. The policy uses the readonly action which requires no additional configuration options. This action prevents any write operations to the index once activated.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-readonly.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "warm": {
        "actions": {
          "readonly" : { }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Finding Documents Missing Indexed Values with Not Exists - Console
DESCRIPTION: This code snippet demonstrates using a combination of the 'must_not' boolean query and the 'exists' query in Elasticsearch to find documents that do not have an indexed value for the 'user.id' field. Dependencies include a running Elasticsearch instance and indices where the 'user.id' field is relevant.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-exists-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "bool": {
      "must_not": {
        "exists": {
          "field": "user.id"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Combining Multiple Decay Functions in Elasticsearch Function Score Query
DESCRIPTION: This complete query example demonstrates how to combine both price and location decay functions using the multiply score mode. It searches for properties with balconies and adjusts scores based on both price and distance from town center.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-function-score-query.md#2025-04-21_snippet_11

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "function_score": {
      "functions": [
        {
          "gauss": {
            "price": {
              "origin": "0",
              "scale": "20"
            }
          }
        },
        {
          "gauss": {
            "location": {
              "origin": "11, 12",
              "scale": "2km"
            }
          }
        }
      ],
      "query": {
        "match": {
          "properties": "balcony"
        }
      },
      "score_mode": "multiply"
    }
  }
}
```

----------------------------------------

TITLE: Securing DocumentBuilderFactory Instantiation
DESCRIPTION: Warns against direct usage of DocumentBuilderFactory and recommends using SamlUtils#getHardenedDocumentBuilder() method for secure XML document parsing
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/forbidden/xml-signatures.txt#2025-04-21_snippet_0

LANGUAGE: java
CODE:
```
javax.xml.parsers.DocumentBuilderFactory#newInstance()
```

LANGUAGE: java
CODE:
```
javax.xml.parsers.DocumentBuilderFactory#newInstance(java.lang.String, java.lang.ClassLoader)
```

----------------------------------------

TITLE: Using Runtime Fields for Complex Stats Aggregation in Elasticsearch
DESCRIPTION: This example demonstrates how to use a runtime field to perform stats aggregation on a complex calculation. It computes weighted grades by multiplying the grade with a weight factor.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-stats-aggregation.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
POST /exams/_search
{
  "size": 0,
  "runtime_mappings": {
    "grade.weighted": {
      "type": "double",
      "script": """
        emit(doc['grade'].value * doc['weight'].value)
      """
    }
  },
  "aggs": {
    "grades_stats": {
      "stats": {
        "field": "grade.weighted"
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Index with Properties Mapping in Elasticsearch
DESCRIPTION: Demonstrates how to create an index with explicit property mappings for both object and nested fields. The example includes a manager object field and a nested employees field, each with age and name properties.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/properties.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "manager": {
        "properties": {
          "age":  { "type": "integer" },
          "name": { "type": "text"  }
        }
      },
      "employees": {
        "type": "nested",
        "properties": {
          "age":  { "type": "integer" },
          "name": { "type": "text"  }
        }
      }
    }
  }
}

PUT my-index-000001/_doc/1
{
  "region": "US",
  "manager": {
    "name": "Alice White",
    "age": 30
  },
  "employees": [
    {
      "name": "John Smith",
      "age": 34
    },
    {
      "name": "Peter Brown",
      "age": 26
    }
  ]
}
```

----------------------------------------

TITLE: Using CASE Function in ESQL Query
DESCRIPTION: Example demonstrating how to use the CASE function to categorize employees based on the number of languages they speak. The function evaluates conditions in order and returns the value corresponding to the first true condition. If no conditions match and no default is provided, returns null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/case.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| EVAL type = CASE(
    languages <= 1, "monolingual",
    languages <= 2, "bilingual",
     "polyglot")
| KEEP emp_no, languages, type
```

----------------------------------------

TITLE: Using COUNT_DISTINCT in ESQL Aggregation
DESCRIPTION: Demonstrates how to use COUNT_DISTINCT function to calculate the approximate number of distinct values across multiple IP address columns. The query performs aggregation on 'ip0' and 'ip1' columns from the 'hosts' table.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/count_distinct.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM hosts
| STATS COUNT_DISTINCT(ip0), COUNT_DISTINCT(ip1)
```

----------------------------------------

TITLE: Describing TO_DATETIME Function in ESQL
DESCRIPTION: This markdown snippet describes the TO_DATETIME function in ESQL. It explains that the function converts input values to date values, specifies the accepted date format, and notes the behavior when converting from nanosecond to millisecond resolution.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/to_datetime.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
**Description**

Converts an input value to a date value. A string will only be successfully converted if it's respecting the format `yyyy-MM-dd'T'HH:mm:ss.SSS'Z'`. To convert dates in other formats, use [`DATE_PARSE`](/reference/query-languages/esql/functions-operators/date-time-functions.md#esql-date_parse).

::::{note}
Note that when converting from nanosecond resolution to millisecond resolution with this function, the nanosecond date is truncated, not rounded.
::::
```

----------------------------------------

TITLE: Searching Multiple Daily Indices with Date Math (Console)
DESCRIPTION: This console command performs a search request across multiple daily Logstash indices for the past three days using date math expressions in the index path. The index names are URI encoded.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/api-conventions.md#_snippet_11

LANGUAGE: console
CODE:
```
GET /%3Clogstash-%7Bnow%2Fd-2d%7D%3E%2C%3Clogstash-%7Bnow%2Fd-1d%7D%3E%2C%3Clogstash-%7Bd%7D%3E/_search
{
  "query" : {
    "match": {
      "test": "data"
    }
  }
}
```

----------------------------------------

TITLE: Requesting Default Highlighting in Elasticsearch Console
DESCRIPTION: This snippet demonstrates how to perform a basic search query using the `_search` endpoint and include a `highlight` object to request highlighted snippets for the `content` field. The default highlighter for the field type will be used automatically.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "match": { "content": "kimchy" }
  },
  "highlight": {
    "fields": {
      "content": {}
    }
  }
}
```

----------------------------------------

TITLE: Heap Size Configuration
DESCRIPTION: Configuration example for setting both minimum and maximum heap size to 2GB using a JVM options file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/jvm-settings.md#2025-04-21_snippet_3

LANGUAGE: text
CODE:
```
-Xms2g
-Xmx2g
```

----------------------------------------

TITLE: Indexing a Document in Elasticsearch using Java API Client
DESCRIPTION: This code demonstrates how to index a document in Elasticsearch using the Java API Client. It creates a product object and indexes it using the client's index method.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/ent-search/licenses/slf4j-api-NOTICE.txt#2025-04-22_snippet_1

LANGUAGE: Java
CODE:
```
Product product = new Product("bk-1", "City bike", 123.0);

IndexResponse response = client.index(i -> i
    .index("products")
    .id(product.getSku())
    .document(product)
);
```

----------------------------------------

TITLE: Creating Dutch Custom Analyzer in Elasticsearch
DESCRIPTION: This snippet presents how to implement a custom analyzer for the Dutch language in Elasticsearch. It features a combination of filters for stop words, keyword markers, and an optional stemming override for better text analysis results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_10

LANGUAGE: json
CODE:
```
PUT /dutch_example
{
  "settings": {
    "analysis": {
      "filter": {
        "dutch_stop": {
          "type":       "stop",
          "stopwords":  "_dutch_" <1>
        },
        "dutch_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["voorbeeld"] <2>
        },
        "dutch_stemmer": {
          "type":       "stemmer",
          "language":   "dutch"
        },
        "dutch_override": {
          "type":       "stemmer_override",
          "rules": [
            "fiets=>fiets",
            "bromfiets=>bromfiets",
            "ei=>eier",
            "kind=>kinder"
          ]
        }
      },
      "analyzer": {
        "rebuilt_dutch": {
          "tokenizer":  "standard",
          "filter": [
            "lowercase",
            "dutch_stop",
            "dutch_keywords",
            "dutch_override",
            "dutch_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Aggregating and Enriching Windows Event Logs with ESQL
DESCRIPTION: This query aggregates Windows event logs, enriches them with event descriptions, and sorts the results. It filters, groups, and transforms the data to provide a summary of event occurrences by host and event code.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-examples.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM logs-*
| WHERE event.code IS NOT NULL
| STATS event_code_count = COUNT(event.code) BY event.code,host.name
| ENRICH win_events ON event.code WITH event_description
| WHERE event_description IS NOT NULL and host.name IS NOT NULL
| RENAME event_description AS event.description
| SORT event_code_count DESC
| KEEP event_code_count,event.code,host.name,event.description
```

----------------------------------------

TITLE: Using Single-Dimensional Painless Arrays
DESCRIPTION: This snippet demonstrates declaring, initializing, and accessing elements in single-dimensional arrays in Painless. It shows declaring arrays with specific types or using `def`, allocating with a size using the `new` operator, and assigning/accessing elements by index using the array access operator.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-types.md#_snippet_9

LANGUAGE: Painless
CODE:
```
int[] x;
float[] y = new float[10];
def z = new float[5];
y[9] = 1.0F;
z[0] = y[9];
```

----------------------------------------

TITLE: Histogram Value Source with Runtime Field Example
DESCRIPTION: Demonstrates using a runtime field with the histogram value source. This example creates a discounted price field that applies an 80% discount to the 'mad max' product.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
GET /_search
{
  "runtime_mappings": {
    "price.discounted": {
      "type": "double",
      "script": """
        double price = doc['price'].value;
        if (doc['product'].value == 'mad max') {
          price *= 0.8;
        }
        emit(price);
      """
    }
  },
  "size": 0,
  "aggs": {
    "my_buckets": {
      "composite": {
        "sources": [
          {
            "price": {
              "histogram": {
                "interval": 5,
                "field": "price.discounted"
              }
            }
          }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Updating Seat Prices with Painless Script in Elasticsearch Update by Query
DESCRIPTION: This snippet demonstrates an update by query operation that finds unsold seats in specific rows and reduces their price by a parameterized discount amount. It uses a Painless script to modify the 'cost' field of matching documents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-update-by-query-context.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
POST /seats/_update_by_query
{
  "query": {
    "bool": {
      "filter": [
        {
          "range": {
            "row": {
              "lte": 3
            }
          }
        },
        {
          "match": {
            "sold": false
          }
        }
      ]
    }
  },
  "script": {
    "source": "ctx._source.cost -= params.discount",
    "lang": "painless",
    "params": {
      "discount": 2
    }
  }
}
```

----------------------------------------

TITLE: Creating Index Mapping for Sorting in Elasticsearch
DESCRIPTION: Defines an index mapping with various field types to demonstrate sorting capabilities. Includes date, keyword, and integer fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/sort-search-results.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "mappings": {
    "properties": {
      "post_date": { "type": "date" },
      "user": {
        "type": "keyword"
      },
      "name": {
        "type": "keyword"
      },
      "age": { "type": "integer" }
    }
  }
}
```

----------------------------------------

TITLE: Performing Stats Aggregation on Exam Grades in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the stats aggregation to compute statistics on exam grades. It calculates min, max, sum, count, and average of the 'grade' field across all documents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-stats-aggregation.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
POST /exams/_search?size=0
{
  "aggs": {
    "grades_stats": { "stats": { "field": "grade" } }
  }
}
```

----------------------------------------

TITLE: Basic Value Count Aggregation in Elasticsearch
DESCRIPTION: Demonstrates a simple value count aggregation on the 'type' field in the 'sales' index. The aggregation counts the number of values in the specified field across all matching documents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-valuecount-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs" : {
    "types_count" : { "value_count" : { "field" : "type" } }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "types_count": {
      "value": 7
    }
  }
}
```

----------------------------------------

TITLE: Rollover with Multiple Conditions
DESCRIPTION: ILM policy configuration that combines multiple conditions: rolls over when index is 7 days old or 100GB in size, but only if it contains at least 1000 documents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-rollover.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "hot": {
        "actions": {
          "rollover" : {
            "max_age": "7d",
            "max_size": "100gb",
            "min_docs": 1000
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Updating a Field with Painless
DESCRIPTION: Updates a player's last name using Painless and the _update API with parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/brief-painless-walkthrough.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
POST hockey/_update/1
{
  "script": {
    "lang": "painless",
    "source": "ctx._source.last = params.last",
    "params": {
      "last": "hockey"
    }
  }
}
```

----------------------------------------

TITLE: Ordering by Single Value Sub-aggregation in Elasticsearch
DESCRIPTION: Example showing how to order buckets by a single value metrics sub-aggregation using the max play count of genres.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-terms-aggregation.md#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
GET /_search
{
  "aggs": {
    "genres": {
      "terms": {
        "field": "genre",
        "order": { "max_play_count": "desc" }
      },
      "aggs": {
        "max_play_count": { "max": { "field": "play_count" } }
      }
    }
  }
}
```

----------------------------------------

TITLE: Querying with cross_fields Multi-Match in Console
DESCRIPTION: This snippet shows a basic Elasticsearch `_search` query using the `multi_match` query with `type` set to `cross_fields`. It searches for the query string "Will Smith" across the "first_name" and "last_name" fields, requiring all terms ("Will", "Smith") to be present in at least one of the specified fields (`"operator": "and"`).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-multi-match-query.md#_snippet_10

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "multi_match" : {
      "query":      "Will Smith",
      "type":       "cross_fields",
      "fields":     [ "first_name", "last_name" ],
      "operator":   "and"
    }
  }
}
```

----------------------------------------

TITLE: Configuring Elasticsearch Cluster Settings in YAML
DESCRIPTION: Defines cluster-wide settings for an Elasticsearch deployment.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/ml/src/main/resources/org/elasticsearch/xpack/ml/inference.nlp.tokenizers/spm_precompiled_normalizer.txt#2025-04-21_snippet_2

LANGUAGE: YAML
CODE:
```
cluster:
  name: my-application
  routing:
    allocation:
      disk:
        threshold_enabled: true
        watermark:
          low: 85%
          high: 90%
          flood_stage: 95%

node:
  name: node-1
  master: true
  data: true
  ingest: true

path:
  data: /var/lib/elasticsearch
  logs: /var/log/elasticsearch
```

----------------------------------------

TITLE: Importing Certificates into Opposite Keystores in Elasticsearch
DESCRIPTION: These commands import the client certificate into the server keystore and the server certificate into the client keystore. This step is crucial for mutual authentication between server and client in a secure Elasticsearch setup.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/sql-client/src/test/resources/ssl/readme.txt#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
$ keytool -v -importcert -alias client -file client.crt -keystore server.keystore -storepass password
```

LANGUAGE: bash
CODE:
```
$ keytool -v -importcert -alias server -file server.crt -keystore client.keystore -storepass password
```

----------------------------------------

TITLE: Defining Double Index Mapping - Elasticsearch Console
DESCRIPTION: Defines an Elasticsearch index mapping for 'my-index-000001' with a nested object 'measures' containing a 'voltage' field of type 'double'. It also includes '@timestamp' (date) and 'model_number' (keyword) fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_10

LANGUAGE: Console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "@timestamp": {
        "type": "date"
      },
      "model_number": {
        "type": "keyword"
      },
      "measures": {
        "properties": {
          "voltage": {
            "type": "double"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Script-based Terms Aggregation with Runtime Fields
DESCRIPTION: Example showing how to use runtime fields and scripting to customize term generation based on multiple fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-terms-aggregation.md#2025-04-21_snippet_11

LANGUAGE: json
CODE:
```
GET /_search
{
  "size": 0,
  "runtime_mappings": {
    "normalized_genre": {
      "type": "keyword",
      "script": """
        String genre = doc['genre'].value;
        if (doc['product'].value.startsWith('Anthology')) {
          emit(genre + ' anthology');
        } else {
          emit(genre);
        }
      """
    }
  },
  "aggs": {
    "genres": {
      "terms": {
        "field": "normalized_genre"
      }
    }
  }
}
```

----------------------------------------

TITLE: Setting Translog Durability in Elasticsearch YAML
DESCRIPTION: Configures whether to fsync and commit the translog after every request or asynchronously. 'request' ensures all acknowledged writes are committed to disk, while 'async' commits in the background every sync_interval.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/translog.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
index.translog.durability: request
```

----------------------------------------

TITLE: Setting up Parent/Child Relationships with Join Field Type in Elasticsearch
DESCRIPTION: This example shows how to configure a parent/child relationship using the join field type in Elasticsearch. It defines a relation between 'my_parent' and 'my_child', indexes both a parent and child document with proper routing, and demonstrates querying parent documents that have matching children.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-inner-hits.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
PUT test
{
  "mappings": {
    "properties": {
      "my_join_field": {
        "type": "join",
        "relations": {
          "my_parent": "my_child"
        }
      }
    }
  }
}

PUT test/_doc/1?refresh
{
  "number": 1,
  "my_join_field": "my_parent"
}

PUT test/_doc/2?routing=1&refresh
{
  "number": 1,
  "my_join_field": {
    "name": "my_child",
    "parent": "1"
  }
}

POST test/_search
{
  "query": {
    "has_child": {
      "type": "my_child",
      "query": {
        "match": {
          "number": 1
        }
      },
      "inner_hits": {}    <1>
    }
  }
}
```

----------------------------------------

TITLE: Indexing Documents into a Data Stream using Java
DESCRIPTION: This Java code snippet shows how to index documents into a data stream using the Elasticsearch Java client. It creates an IndexRequest and sets the required @timestamp field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/ml/licenses/ojalgo-NOTICE.txt#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
IndexRequest request = new IndexRequest("my-data-stream");
request.source(jsonBuilder()
    .startObject()
        .field("@timestamp", new Date())
        .field("message", "test message")
    .endObject()
);
IndexResponse indexResponse = client.index(request, RequestOptions.DEFAULT);
```

----------------------------------------

TITLE: Install Elasticsearch Mapper Size Plugin (Shell)
DESCRIPTION: This command installs the `mapper-size` plugin using the Elasticsearch plugin manager. It requires superuser privileges (`sudo`). The plugin must be installed on every node in the cluster, and each node must be restarted after installation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/mapper-size.md#_snippet_0

LANGUAGE: Shell
CODE:
```
sudo bin/elasticsearch-plugin install mapper-size
```

----------------------------------------

TITLE: Create the Elasticsearch keystore with password prompt
DESCRIPTION: Creates a new, password-protected Elasticsearch keystore. The command prompts for a password and generates the keystore file alongside elasticsearch.yml.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/elasticsearch-keystore.md#_snippet_0

LANGUAGE: Shell
CODE:
```
bin/elasticsearch-keystore create -p
```

----------------------------------------

TITLE: Creating Document with Wait-For Refresh in Elasticsearch
DESCRIPTION: Example of creating a document with refresh=wait_for, which waits for the next refresh to occur before completing the request. This provides a balance between immediate visibility and performance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/refresh-parameter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /test/_doc/4?refresh=wait_for
{"test": "test"}
```

----------------------------------------

TITLE: Creating Ingest Pipeline with Painless Script
DESCRIPTION: A console command to create an Elasticsearch ingest pipeline named 'seats' that uses a Painless script to parse and transform date and time fields in incoming documents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-ingest-processor-context.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /_ingest/pipeline/seats
{
  "description": "update datetime for seats",
  "processors": [
    {
      "script": {
        "source": "String[] dateSplit = ctx.date.splitOnToken('-'); String year = dateSplit[0].trim(); String month = dateSplit[1].trim(); if (month.length() == 1) { month = '0' + month; } String day = dateSplit[2].trim(); if (day.length() == 1) { day = '0' + day; } boolean pm = ctx.time.substring(ctx.time.length() - 2).equals('PM'); String[] timeSplit = ctx.time.substring(0, ctx.time.length() - 2).splitOnToken(':'); int hours = Integer.parseInt(timeSplit[0].trim()); int minutes = Integer.parseInt(timeSplit[1].trim()); if (pm) { hours += 12; } String dts = year + '-' + month + '-' + day + 'T' + (hours < 10 ? '0' + hours : '' + hours) + ':' + (minutes < 10 ? '0' + minutes : '' + minutes) + ':00+08:00'; ZonedDateTime dt = ZonedDateTime.parse(dts, DateTimeFormatter.ISO_OFFSET_DATE_TIME); ctx.datetime = dt.getLong(ChronoField.INSTANT_SECONDS)*1000L;"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Hybrid Search Combining kNN and Lexical Queries in Elasticsearch
DESCRIPTION: Combines kNN and lexical queries to create a hybrid search strategy in Elasticsearch. This example demonstrates using `knn` and `match` queries in a `bool` query, allowing simultaneous vector and text-based search criteria. Dependencies include configured mappings for both vector and text data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-knn-query.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
POST my-image-index/_search
{
  "size" : 3,
  "query": {
    "bool": {
      "should": [
        {
          "match": {
            "title": {
              "query": "mountain lake",
              "boost": 1
            }
          }
        },
        {
          "knn": {
            "field": "image-vector",
            "query_vector": [-5, 9, -12],
            "k": 10,
            "boost": 2
          }
        }
      ]
    }
  }
}

```

----------------------------------------

TITLE: Creating Index and Loading Sample IP Data
DESCRIPTION: Sets up an index with IPv4 and IPv6 fields and loads sample network traffic data using bulk API.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-ipprefix-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT network-traffic
{
    "mappings": {
        "properties": {
            "ipv4": { "type": "ip" },
            "ipv6": { "type": "ip" }
        }
    }
}

POST /network-traffic/_bulk?refresh
{"index":{"_id":0}}
{"ipv4":"192.168.1.10","ipv6":"2001:db8:a4f8:112a:6001:0:12:7f10"}
{"index":{"_id":1}}
{"ipv4":"192.168.1.12","ipv6":"2001:db8:a4f8:112a:6001:0:12:7f12"}
{"index":{"_id":2}}
{ "ipv4":"192.168.1.33","ipv6":"2001:db8:a4f8:112a:6001:0:12:7f33"}
{"index":{"_id":3}}
{"ipv4":"192.168.1.10","ipv6":"2001:db8:a4f8:112a:6001:0:12:7f10"}
{"index":{"_id":4}}
{"ipv4":"192.168.2.41","ipv6":"2001:db8:a4f8:112c:6001:0:12:7f41"}
{"index":{"_id":5}}
{"ipv4":"192.168.2.10","ipv6":"2001:db8:a4f8:112c:6001:0:12:7f10"}
{"index":{"_id":6}}
{"ipv4":"192.168.2.23","ipv6":"2001:db8:a4f8:112c:6001:0:12:7f23"}
{"index":{"_id":7}}
{"ipv4":"192.168.3.201","ipv6":"2001:db8:a4f8:114f:6001:0:12:7201"}
{"index":{"_id":8}}
{"ipv4":"192.168.3.107","ipv6":"2001:db8:a4f8:114f:6001:0:12:7307"}
```

----------------------------------------

TITLE: Defining a Text Field Mapping in Elasticsearch
DESCRIPTION: Example of creating an index with a simple text field mapping for full-text analysis. This defines a field called 'full_name' as type 'text', which will be analyzed using the default analyzer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/text.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "full_name": {
        "type":  "text"
      }
    }
  }
}
```

----------------------------------------

TITLE: Basic Multi-match Query in Elasticsearch
DESCRIPTION: Demonstrates a basic multi_match query in Elasticsearch. It searches for a given query string across a specified list of fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-multi-match-query.md#_snippet_0

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "multi_match" : {
      "query":    "this is a test",
      "fields": [ "subject", "message" ]
    }
  }
}
```

----------------------------------------

TITLE: Combining Multiple Functions with Function Score in Elasticsearch
DESCRIPTION: This snippet shows how to combine multiple scoring functions within a function_score query. It employs filters for specific match conditions and defines weights for scoring, utilizing parameters such as max_boost and score_mode for score combination.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-function-score-query.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "function_score": {
      "query": { "match_all": {} }, <1>
      "boost": "5",
      "functions": [
        {
          "filter": { "match": { "test": "bar" } },
          "random_score": {}, <2>
          "weight": 23
        },
        {
          "filter": { "match": { "test": "cat" } },
          "weight": 42
        }
      ],
      "max_boost": 42,
      "score_mode": "max",
      "boost_mode": "multiply",
      "min_score": 42
    }
  }
}
```

----------------------------------------

TITLE: Creating Time-Based Sorted Index in Elasticsearch
DESCRIPTION: Example of creating an events index sorted by timestamp in descending order for time-series data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/sorting.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT events
{
  "settings": {
    "index": {
      "sort.field": "timestamp",
      "sort.order": "desc"
    }
  },
  "mappings": {
    "properties": {
      "timestamp": {
        "type": "date"
      }
    }
  }
}
```

----------------------------------------

TITLE: Next Page Search with search_after and PIT in Elasticsearch
DESCRIPTION: This example demonstrates how to get subsequent pages of results by using the search_after parameter with sort values from the previous page's last hit. It also shows how to optimize performance by disabling total hit tracking.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/paginate-search-results.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
GET /_search
{
  "size": 10000,
  "query": {
    "match" : {
      "user.id" : "elkbee"
    }
  },
  "pit": {
    "id":  "46ToAwMDaWR5BXV1aWQyKwZub2RlXzMAAAAAAAAAACoBYwADaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQADaWR5BXV1aWQyKgZub2RlXzIAAAAAAAAAAAwBYgACBXV1aWQyAAAFdXVpZDEAAQltYXRjaF9hbGw_gAAAAA==", <1>
    "keep_alive": "1m"
  },
  "sort": [
    {"@timestamp": {"order": "asc", "format": "strict_date_optional_time_nanos"}}
  ],
  "search_after": [                                <2>
    "2021-05-20T05:30:04.832Z",
    4294967298
  ],
  "track_total_hits": false                        <3>
}
```

----------------------------------------

TITLE: Creating Danish Custom Analyzer in Elasticsearch
DESCRIPTION: This code snippet shows how to define a custom analyzer for the Danish language. It incorporates stop words, keyword significance, and stemming to enhance text processing and indexing. The analyzer allows customization of stop words specified in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_9

LANGUAGE: json
CODE:
```
PUT /danish_example
{
  "settings": {
    "analysis": {
      "filter": {
        "danish_stop": {
          "type":       "stop",
          "stopwords":  "_danish_" <1>
        },
        "danish_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["eksempel"] <2>
        },
        "danish_stemmer": {
          "type":       "stemmer",
          "language":   "danish"
        }
      },
      "analyzer": {
        "rebuilt_danish": {
          "tokenizer":  "standard",
          "filter": [
            "lowercase",
            "danish_stop",
            "danish_keywords",
            "danish_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Matrix Stats Aggregation with Missing Values in Elasticsearch
DESCRIPTION: This snippet demonstrates how to handle missing values in a matrix_stats aggregation. It specifies a default value for the income field when it's missing in a document.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-matrix-stats-aggregation.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
GET /_search
{
  "aggs": {
    "matrixstats": {
      "matrix_stats": {
        "fields": [ "poverty", "income" ],
        "missing": { "income": 50000 }
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining and Using Point Type in Elasticsearch
DESCRIPTION: This example demonstrates how to define a mapping with a point field type and five different ways to index points: using GeoJSON format, Well-Known Text (WKT), object with x/y keys, array format, and string format.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/point.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "location": {
        "type": "point"
      }
    }
  }
}

PUT my-index-000001/_doc/1
{
  "text": "Point as an object using GeoJSON format",
  "location": { 
    "type": "Point",
    "coordinates": [-71.34, 41.12]
  }
}

PUT my-index-000001/_doc/2
{
  "text": "Point as a WKT POINT primitive",
  "location" : "POINT (-71.34 41.12)" 
}

PUT my-index-000001/_doc/3
{
  "text": "Point as an object with 'x' and 'y' keys",
  "location": { 
    "x": -71.34,
    "y": 41.12
  }
}

PUT my-index-000001/_doc/4
{
  "text": "Point as an array",
  "location": [ -71.34, 41.12 ] 
}

PUT my-index-000001/_doc/5
{
  "text": "Point as a string",
  "location": "-71.34,41.12" 
}
```

----------------------------------------

TITLE: Multi-level Nested Index Setup
DESCRIPTION: The snippet explains the setup of a multi-level nested index in Elasticsearch, demonstrating the definition of nested fields 'make' and 'model' within the parent 'driver' object.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-nested-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /drivers
{
  "mappings": {
    "properties": {
      "driver": {
        "type": "nested",
        "properties": {
          "last_name": {
            "type": "text"
          },
          "vehicle": {
            "type": "nested",
            "properties": {
              "make": {
                "type": "text"
              },
              "model": {
                "type": "text"
              }
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating a Source Index in Elasticsearch
DESCRIPTION: This snippet demonstrates creating a source index with specific settings and mappings that will be used as a template for other indices. The index has 3 shards, a write block, and defines a text field called 'field1'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/create-index-from-source.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
PUT /my-index
{
  "settings": {
    "index": {
      "number_of_shards": 3,
      "blocks.write": true
    }
  },
  "mappings": {
    "properties": {
        "field1": { "type": "text" }
    }
  }
}
```

----------------------------------------

TITLE: Creating Elasticsearch Lookup Index (threat_list) - Console
DESCRIPTION: Sets up the `threat_list` index, configuring it as a lookup index (`index.mode: "lookup"`) and defining property mappings for relevant fields like `source.ip`, `threat_level`, `threat_type`, and `last_updated`. This index will serve as the source of enrichment data for the `LOOKUP JOIN`. Requires Elasticsearch running.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-lookup-join.md#_snippet_0

LANGUAGE: console
CODE:
```
PUT threat_list
{
  "settings": {
    "index.mode": "lookup" # The lookup index must use this mode
  },
  "mappings": {
    "properties": {
      "source.ip": { "type": "ip" },
      "threat_level": { "type": "keyword" },
      "threat_type": { "type": "keyword" },
      "last_updated": { "type": "date" }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Analyzers with Synonym Graph Token Filters in JSON
DESCRIPTION: Shows how to include the synonym graph token filter within a custom analyzer setup in Elasticsearch, enhancing text analysis by applying stemming and synonym expansion.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-synonym-graph-tokenfilter.md#2025-04-21_snippet_5

LANGUAGE: JSON
CODE:
```
{
  "analyzer": {
    "my_analyzer": {
      "type": "custom",
      "tokenizer": "standard",
      "filter": ["stemmer", "synonym_graph"]
    }
  }
}
```

----------------------------------------

TITLE: Configuring Index Alias for Rollover
DESCRIPTION: Example showing how to configure an index with the required settings and alias for rollover functionality. Includes index lifecycle name and rollover alias settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-rollover.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "index.lifecycle.name": "my_policy",
    "index.lifecycle.rollover_alias": "my_data"
  },
  "aliases": {
    "my_data": {
      "is_write_index": true
    }
  }
}
```

----------------------------------------

TITLE: Define HISTOGRAM Function Syntax
DESCRIPTION: Defines the syntax for the `HISTOGRAM` function in Elasticsearch SQL, showing accepted input types and parameters. It takes a numeric expression and a numeric interval, or a date/time expression and a date/time interval.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-grouping.md#_snippet_0

LANGUAGE: SQL
CODE:
```
HISTOGRAM(
    numeric_exp,        
    numeric_interval)

HISTOGRAM(
    date_exp,           
    date_time_interval)
```

----------------------------------------

TITLE: Calculating Standard Deviation with ESQL
DESCRIPTION: This snippet demonstrates how to use the STD_DEV function in ESQL to calculate the standard deviation of a numeric field (height) from the 'employees' table. The STATS command is used to perform the aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/std_dev.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS STD_DEV(height)
```

----------------------------------------

TITLE: Creating Elasticsearch Index for Highlighting Example
DESCRIPTION: This snippet creates an Elasticsearch index named `test_index`. It defines a mapping for the `content` field as `text` type, using the `english` analyzer. The field is configured without storing offsets or term vectors, demonstrating how the unified highlighter handles fields without this information.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_29

LANGUAGE: Kibana Console
CODE:
```
PUT test_index
{
  "mappings": {
    "properties": {
      "content": {
        "type": "text",
        "analyzer": "english"
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Ingest Pipeline with Inference Processor (Console)
DESCRIPTION: This snippet defines an Elasticsearch ingest pipeline named `query_helper_pipeline`. It uses a script processor to create a prompt containing the natural language query and schema context, and an inference processor to call a pre-configured inference endpoint (`openai_chat_completions`) with a chat completion task type. The processor generates an Elasticsearch query from the prompt and stores it in the `query` field. The `prompt` field is then removed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/inference-processor.md#_snippet_6

LANGUAGE: console
CODE:
```
PUT _ingest/pipeline/query_helper_pipeline
{
  "processors": [
    {
      "script": {
        "source": "ctx.prompt = 'Please generate an elasticsearch search query on index `articles_index` for the following natural language query. Dates are in the field `@timestamp`, document types are in the field `type` (options are `news`, `publication`), categories in the field `category` and can be multiple (options are `medicine`, `pharmaceuticals`, `technology`), and document names are in the field `title` which should use a fuzzy match. Ignore fields which cannot be determined from the natural language query context: ' + ctx.content" 
      }
    },
    {
      "inference": {
        "model_id": "openai_chat_completions", 
        "input_output": {
          "input_field": "prompt",
          "output_field": "query"
        }
      }
    },
    {
      "remove": {
        "field": "prompt"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Parsing Custom Format DateTime
DESCRIPTION: Shows how to parse a custom formatted datetime string using a custom DateTimeFormatter pattern.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_3

LANGUAGE: painless
CODE:
```
String datetime = 'custom y 1983 m 10 d 13 22:15:30 Z';
DateTimeFormatter dtf = DateTimeFormatter.ofPattern(
        "'custom' 'y' yyyy 'm' MM 'd' dd HH:mm:ss VV");
ZonedDateTime zdt = ZonedDateTime.parse(datetime, dtf);
```

----------------------------------------

TITLE: Executing ELSER Query with Pruning Configuration and Rescore in Elasticsearch
DESCRIPTION: This snippet demonstrates how to execute a sparse vector query using an ELSER model with token pruning to improve performance. It includes a rescore function to mitigate shard-level inconsistencies with pruned tokens. The query searches for 'How is the weather in Jamaica?' in a field containing sparse vector tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-sparse-vector-query.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET my-index/_search
{
   "query":{
      "sparse_vector":{
         "field": "ml.tokens",
         "inference_id": "my-elser-model",
         "query":"How is the weather in Jamaica?",
         "prune": true,
         "pruning_config": {
           "tokens_freq_ratio_threshold": 5,
           "tokens_weight_threshold": 0.4,
           "only_score_pruned_tokens": false
         }
      }
   },
   "rescore": {
      "window_size": 100,
      "query": {
         "rescore_query": {
            "sparse_vector": {
               "field": "ml.tokens",
               "inference_id": "my-elser-model",
               "query": "How is the weather in Jamaica?",
               "prune": true,
               "pruning_config": {
                   "tokens_freq_ratio_threshold": 5,
                   "tokens_weight_threshold": 0.4,
                   "only_score_pruned_tokens": true
               }
            }
         }
      }
   }
}
```

----------------------------------------

TITLE: Creating Custom Analyzer with HTML Strip Filter in Elasticsearch
DESCRIPTION: This example shows how to create a custom analyzer that incorporates the HTML strip filter using the create index API.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-htmlstrip-charfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "keyword",
          "char_filter": [
            "html_strip"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Escaping Single Quotes in Strings - SQL
DESCRIPTION: Demonstrates the syntax for escaping a single quote character within a string literal in SQL by repeating the single quote ('').
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-lexical-structure.md#_snippet_7

LANGUAGE: sql
CODE:
```
SELECT 'John''s' AS name
```

----------------------------------------

TITLE: Adding Fields Dynamically to an Elasticsearch Index
DESCRIPTION: This snippet demonstrates adding a document with new fields to an index, causing Elasticsearch to dynamically create mappings for these fields. It shows adding a string field 'username' and an object field 'name' with nested fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/dynamic.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1
{
  "username": "johnsmith",
  "name": { <1>
    "first": "John",
    "last": "Smith"
  }
}

GET my-index-000001/_mapping <2>
```

----------------------------------------

TITLE: Enabling Fielddata on Existing Text Fields in Elasticsearch
DESCRIPTION: This snippet shows how to enable fielddata on an existing text field using the update mapping API. This approach enables aggregations, sorting, and scripting on text fields, but should be used with caution due to memory implications.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/text.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
PUT my-index-000001/_mapping
{
  "properties": {
    "my_field": { 
      "type":     "text",
      "fielddata": true
    }
  }
}
```

----------------------------------------

TITLE: Using Has Child Query in Elasticsearch
DESCRIPTION: This example shows how to use the `has_child` query in Elasticsearch to find parent documents that have child documents matching a specific query. The `type` parameter specifies the child relationship name, and the `query` parameter contains the query to run on the child documents. `max_children`, `min_children`, and `score_mode` are optional parameters that further refine the query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-has-child-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "has_child": {
      "type": "child",
      "query": {
        "match_all": {}
      },
      "max_children": 10,
      "min_children": 2,
      "score_mode": "min"
    }
  }
}
```

----------------------------------------

TITLE: Min Bucket Aggregation Example with Sales Data
DESCRIPTION: Demonstrates how to use min_bucket aggregation to find minimum monthly sales using date histogram and sum aggregations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-min-bucket-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "size": 0,
  "aggs": {
    "sales_per_month": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "sales": {
          "sum": {
            "field": "price"
          }
        }
      }
    },
    "min_monthly_sales": {
      "min_bucket": {
        "buckets_path": "sales_per_month>sales"
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing GeoJSON MultiPolygon in Elasticsearch
DESCRIPTION: Example of indexing a GeoJSON MultiPolygon in Elasticsearch. The example shows two polygons, with the second polygon containing a hole, represented as nested arrays of coordinate pairs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/shape.md#2025-04-21_snippet_14

LANGUAGE: json
CODE:
```
POST /example/_doc
{
  "location" : {
    "type" : "multipolygon",
    "coordinates" : [
      [ [[1002.0, 200.0], [1003.0, 200.0], [1003.0, 300.0], [1002.0, 300.0], [1002.0, 200.0]] ],
      [ [[1000.0, 200.0], [1001.0, 100.0], [1001.0, 100.0], [1000.0, 100.0], [1000.0, 100.0]],
        [[1000.2, 200.2], [1000.8, 100.2], [1000.8, 100.8], [1000.2, 100.8], [1000.2, 100.2]] ]
    ]
  }
}
```

----------------------------------------

TITLE: Configuring custom analyzer with Word Delimiter Graph (Console)
DESCRIPTION: This console command uses the Elasticsearch `_create index API` to define a new index with a custom analyzer. The custom analyzer, named `my_analyzer`, is configured to use the `keyword` tokenizer in conjunction with the `word_delimiter_graph` filter, applying the filter's splitting and normalization rules to documents indexed in this index.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-word-delimiter-graph-tokenfilter.md#_snippet_1

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "keyword",
          "filter": [ "word_delimiter_graph" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Using CURRENT_DATE Keyword in Elasticsearch SQL
DESCRIPTION: This snippet demonstrates fetching the current date using the `CURRENT_DATE` keyword in Elasticsearch SQL. It retrieves the date the query reached the server and aliases it as `result`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_9

LANGUAGE: SQL
CODE:
```
SELECT CURRENT_DATE AS result;
```

----------------------------------------

TITLE: Indexing Document to Demonstrate _source Includes/Excludes - Console
DESCRIPTION: This snippet indexes a document into the `logs` index configured with `_source` includes/excludes. Fields matching the exclude patterns will be removed from the `_source` field before storage, as indicated by comment markers in the original text.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-source-field.md#_snippet_17

LANGUAGE: console
CODE:
```
PUT logs/_doc/1
{
  "requests": {
    "count": 10,
    "foo": "bar"
  },
  "meta": {
    "name": "Some metric",
    "description": "Some metric description",
    "other": {
      "foo": "one",
      "baz": "two"
    }
  }
}
```

----------------------------------------

TITLE: Elvis Operator in Painless
DESCRIPTION: Explains the elvis operator in Painless, used as a shortcut for the conditional operator to handle null checks succinctly. It ensures non-null results by evaluating two expressions and is vital in nullable type operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-reference.md#2025-04-21_snippet_20

LANGUAGE: painless
CODE:
```
List x = new ArrayList();
List y = x ?: new ArrayList();
y = null;
List z = y ?: new ArrayList();
```

----------------------------------------

TITLE: Creating Mapping with Multi-Fields using semantic_text field - Console
DESCRIPTION: This snippet shows an alternative mapping where a `semantic_text` field (`infer_field`) is defined as a sub-field (multi-field) of a standard `text` field (`source_field`). This achieves a similar result to `copy_to`, allowing the `source_field` content to be processed semantically by the `infer_field`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/semantic-text.md#_snippet_6

LANGUAGE: Console
CODE:
```
PUT test-index
{
    "mappings": {
        "properties": {
            "source_field": {
                "type": "text",
                "fields": {
                    "infer_field": {
                        "type": "semantic_text",
                        "inference_id": ".elser-2-elasticsearch"
                    }
                }
            }
        }
    }
}
```

----------------------------------------

TITLE: Applying Filter Aggregation in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use a filter aggregation to calculate the average price of all sales and the average price of T-shirt sales specifically.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-filter-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0&filter_path=aggregations
{
  "aggs": {
    "avg_price": { "avg": { "field": "price" } },
    "t_shirts": {
      "filter": { "term": { "type": "t-shirt" } },
      "aggs": {
        "avg_price": { "avg": { "field": "price" } }
      }
    }
  }
}
```

----------------------------------------

TITLE: Profiling kNN Search in Elasticsearch (Console)
DESCRIPTION: Executes a kNN search query with profiling enabled to analyze the kNN search phase. The query searches for the nearest neighbors to a given vector.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-profile.md#2025-04-21_snippet_16

LANGUAGE: console
CODE:
```
POST my-knn-index/_search
{
  "profile": true,
  "knn": {
    "field": "my-vector",
    "query_vector": [-5, 9, -12],
    "k": 3,
    "num_candidates": 100
  }
}
```

----------------------------------------

TITLE: Viewing ML Inference Response in Elasticsearch
DESCRIPTION: Example response from a direct inference API call using a sentiment analysis model. The response includes the predicted sentiment label, prediction probability, and detailed scores for each possible sentiment.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/repository-gcs/licenses/google-api-services-storage-NOTICE.txt#2025-04-21_snippet_6

LANGUAGE: json
CODE:
```
{
  "inference_results": [
    {
      "predicted_value": "positive",
      "prediction_probability": 0.999626,
      "prediction_score": 0.999626,
      "sentiment_score": {
        "negative": 0.000374,
        "positive": 0.999626
      }
    }
  ]
}
```

----------------------------------------

TITLE: Hourly Error Rate Calculation
DESCRIPTION: Calculates error rates per hour using DATE_TRUNC with conditional logic. Uses CASE expression to identify errors, truncates timestamps to hours, and computes average error rate.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/date_trunc.md#2025-04-21_snippet_2

LANGUAGE: esql
CODE:
```
FROM sample_data
| EVAL error = CASE(message LIKE "*error*", 1, 0)
| EVAL hour = DATE_TRUNC(1 hour, @timestamp)
| STATS error_rate = AVG(error) by hour
| SORT hour
```

----------------------------------------

TITLE: Sum Aggregation with Runtime Field in Elasticsearch
DESCRIPTION: This example shows how to use a runtime field for more complex sum calculations. It applies a discount to promoted items before summing the prices of hats.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-sum-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "runtime_mappings": {
    "price.weighted": {
      "type": "double",
      "script": """
        double price = doc['price'].value;
        if (doc['promoted'].value) {
          price *= 0.8;
        }
        emit(price);
      """
    }
  },
  "query": {
    "constant_score": {
      "filter": {
        "match": { "type": "hat" }
      }
    }
  },
  "aggs": {
    "hat_prices": {
      "sum": {
        "field": "price.weighted"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configure In-Flight Requests Circuit Breaker Settings
DESCRIPTION: Settings for managing memory usage of active incoming requests. Includes memory limit and overhead multiplier for transport and HTTP level requests.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/circuit-breaker-settings.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
network.breaker.inflight_requests.limit: "100%"
network.breaker.inflight_requests.overhead: 2
```

----------------------------------------

TITLE: Counting Rows with Grouping in ESQL
DESCRIPTION: This example shows how to count rows grouped by a column, using COUNT(*) and sorting the results. It demonstrates grouping and sorting operations in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/count.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM employees
| STATS count = COUNT(*) BY languages
| SORT languages DESC
```

----------------------------------------

TITLE: Summing Outbound Traffic for curl.exe Process with ESQL
DESCRIPTION: This query analyzes outbound traffic from the curl.exe process. It sums the bytes sent to each destination address, converts the sum to kilobytes, and returns the top 10 results sorted by traffic volume.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-examples.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM logs-endpoint
| WHERE process.name == "curl.exe"
| STATS bytes = SUM(destination.bytes) BY destination.address
| EVAL kb =  bytes/1024
| SORT kb DESC
| LIMIT 10
| KEEP kb,destination.address
```

----------------------------------------

TITLE: Adding default Length filter to custom analyzer (Console)
DESCRIPTION: This code snippet creates a new Elasticsearch index named `length_example` with a custom analyzer named `standard_length`. The custom analyzer uses the built-in `standard` tokenizer and the default configuration of the `length` token filter, making it available for use during indexing and searching for fields configured with this analyzer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-length-tokenfilter.md#_snippet_1

LANGUAGE: Console
CODE:
```
PUT length_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "standard_length": {
          "tokenizer": "standard",
          "filter": [ "length" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Content Document Example with Access Control Field in Elasticsearch
DESCRIPTION: This code snippet illustrates a content document in Elasticsearch that incorporates an access control field (`_allow_access_control`) for implementing Document Level Security (DLS).  The `_allow_access_control` array lists the identities (users, groups) that have permission to view this document. If a user's identity matches an element in this array, they are granted access to the document.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-dls-overview.md#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
```js
{
  "_id": "some-unique-id",
  "key-1": "value-1",
  "key-2": "value-2",
  "key-3": "value-3",
  "_allow_access_control": [
    "example.user@example.com",
    "example group",
    "example username"
  ]
}
```
```

----------------------------------------

TITLE: Basic ENRICH Policy Example
DESCRIPTION: Example showing basic usage of the ENRICH command with languages_policy, automatically matching on the language_code field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/enrich.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM languages.csv | ENRICH languages_policy
```

----------------------------------------

TITLE: Search Bit Vectors using KNN (Elasticsearch Console)
DESCRIPTION: Shows how to search for similar bit vectors using the `knn` query on the `my_vector` field in the `my-bit-vectors` index. The `query_vector` is provided as a list of byte values, and the results are filtered to show only the hits.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/dense-vector.md#_snippet_8

LANGUAGE: json
CODE:
```
POST /my-bit-vectors/_search?filter_path=hits.hits
{
  "query": {
    "knn": {
      "query_vector": [127, -127, 0, 1, 42],
      "field": "my_vector"
    }
  }
}
```

----------------------------------------

TITLE: Querying Significant Terms with Multi-Set Analysis using Geohash Grid Aggregation (Elasticsearch Console)
DESCRIPTION: Shows how to use the `significant_terms` aggregation within a `geohash_grid` aggregation to find spatially anomalous term distributions. This partitions documents into geographic buckets based on the `location` field and identifies unusually frequent `crime_type` terms within each specific geographic area, compared to the overall index. This is effective for identifying spatial 'hotspots' of unusual activity.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-significantterms-aggregation.md#_snippet_2

LANGUAGE: console
CODE:
```
GET /_search
{
  "aggs": {
    "hotspots": {
      "geohash_grid": {
        "field": "location",
        "precision": 5
      },
      "aggs": {
        "significant_crime_types": {
          "significant_terms": { "field": "crime_type" }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Ingest Pipeline with Convert Processor in Elasticsearch
DESCRIPTION: This example shows how to create an Elasticsearch ingest pipeline that converts the content of an 'id' field from its original type to an integer. The processor is configured without additional options like target_field, ignore_missing, etc., so it will perform an in-place conversion.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/convert-processor.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
PUT _ingest/pipeline/my-pipeline-id
{
  "description": "converts the content of the id field to an integer",
  "processors" : [
    {
      "convert" : {
        "field" : "id",
        "type": "integer"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Multi-level Nested Sorting in Elasticsearch
DESCRIPTION: Shows sorting with multiple levels of nested fields (parent and child) including filters at each nested level.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/sort-search-results.md#2025-04-21_snippet_9

LANGUAGE: console
CODE:
```
POST /_search
{
   "query": {
      "nested": {
         "path": "parent",
         "query": {
            "bool": {
                "must": {"range": {"parent.age": {"gte": 21}}},
                "filter": {
                    "nested": {
                        "path": "parent.child",
                        "query": {"match": {"parent.child.name": "matt"}}
                    }
                }
            }
         }
      }
   },
   "sort" : [
      {
         "parent.child.age" : {
            "mode" :  "min",
            "order" : "asc",
            "nested": {
               "path": "parent",
               "filter": {
                  "range": {"parent.age": {"gte": 21}}
               },
               "nested": {
                  "path": "parent.child",
                  "filter": {
                     "match": {"parent.child.name": "matt"}
                  }
               }
            }
         }
      }
   ]
}
```

----------------------------------------

TITLE: Analyzing Text with Whitespace Tokenizer Using Elasticsearch Console
DESCRIPTION: This snippet shows how to use the 'whitespace' tokenizer to analyze the given text. The tokenizer breaks text into terms whenever it encounters a whitespace character. This operation requires Elasticsearch to be running.

Key parameters:
- tokenizer: Specifies the tokenizer to use ('whitespace').
- text: The input string to be tokenized.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-whitespace-tokenizer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _analyze
{
  "tokenizer": "whitespace",
  "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
}
```

----------------------------------------

TITLE: Creating Connector via Elasticsearch API (Console)
DESCRIPTION: This console snippet shows how to create a new self-managed MySQL connector using the Elasticsearch Create connector API. It requires specifying the target index name, a descriptive name for the connector, and the service type as 'mysql'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-mysql.md#_snippet_0

LANGUAGE: console
CODE:
```
PUT _connector/my-mysql-connector
{
  "index_name": "my-elasticsearch-index",
  "name": "Content synced from MySQL",
  "service_type": "mysql"
}
```

----------------------------------------

TITLE: Configuring Multi-Field Index Sorting in Elasticsearch
DESCRIPTION: Demonstrates how to sort an index by multiple fields with different sort orders. Shows configuration for sorting by username (ascending) and date (descending) with proper field mappings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/sorting.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "index": {
      "sort.field": [ "username", "date" ],
      "sort.order": [ "asc", "desc" ]
    }
  },
  "mappings": {
    "properties": {
      "username": {
        "type": "keyword",
        "doc_values": true
      },
      "date": {
        "type": "date"
      }
    }
  }
}
```

----------------------------------------

TITLE: Multiple Pattern Matching with Grok
DESCRIPTION: Shows how to configure multiple patterns for matching different pet types with trace_match functionality.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/grok-processor.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST _ingest/pipeline/_simulate
{
  "pipeline": {
  "description" : "parse multiple patterns",
  "processors": [
    {
      "grok": {
        "field": "message",
        "patterns": ["%{FAVORITE_DOG:pet}", "%{FAVORITE_CAT:pet}"],
        "pattern_definitions" : {
          "FAVORITE_DOG" : "beagle",
          "FAVORITE_CAT" : "burmese"
        }
      }
    }
  ]
},
"docs":[
  {
    "_source": {
      "message": "I love burmese cats!"
    }
  }
  ]
}
```

----------------------------------------

TITLE: Creating Search-as-you-type Mapping in Elasticsearch
DESCRIPTION: Creates an index with a search_as_you_type field mapping. This configuration automatically creates multiple subfields with different analysis chains for efficient prefix and infix matching.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/search-as-you-type.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "my_field": {
        "type": "search_as_you_type"
      }
    }
  }
}
```

----------------------------------------

TITLE: Grouping Sales by Type with Top Hits in Elasticsearch
DESCRIPTION: This example demonstrates how to group sales by type and show the last sale for each type, including only the date and price fields in the source.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-top-hits-aggregation.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "aggs": {
    "top_tags": {
      "terms": {
        "field": "type",
        "size": 3
      },
      "aggs": {
        "top_sales_hits": {
          "top_hits": {
            "sort": [
              {
                "date": {
                  "order": "desc"
                }
              }
            ],
            "_source": {
              "includes": [ "date", "price" ]
            },
            "size": 1
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Generating Elasticsearch API Key for Multiple Indices with DLS
DESCRIPTION: Node.js script that combines user access control information from multiple indices to create a single Elasticsearch API key. The script retrieves user ACL documents and constructs a combined DLS query for secure access.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-dls-e2e-guide.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
require("dotenv").config();
const axios = require("axios");

// Elasticsearch URL and creds retrieved from environment variables
const ELASTICSEARCH_URL = process.env.ELASTICSEARCH_URL;
const ELASTICSEARCH_USER = process.env.ELASTICSEARCH_USER;
const ELASTICSEARCH_PASSWORD = process.env.ELASTICSEARCH_PASSWORD;

const config = {
  auth: {
    username: ELASTICSEARCH_USER,
    password: ELASTICSEARCH_PASSWORD,
  },
  headers: {
    "Content-Type": "application/json",
  },
};

async function createApiKey({
  searchApplication,
  userId,
  indices = "",
  metadata,
  expiration = "1d"
}) {
  try {
    const indices = indices.split(",");

    let combinedQuery = { bool: { should: [] } };

    for (const index of indices) {
      const aclsIndex = `.search-acl-filter-${index}`;
      const response = await axios.get(
        `${ELASTICSEARCH_URL}/${aclsIndex}/_doc/${userId}`,
        config
      );
      combinedQuery.bool.should.push({
        bool: {
          must: [
            {
              term: {
                "_index": index,
              },
            },
            response.data._source.query.source,
          ],
        },
      });
    }

    if (!metadata || Object.keys(metadata).length === 0) {
      metadata = { created_by: "create-api-key" };
    }

    const apiKeyBody = {
      name: userId,
      expiration,
      role_descriptors: {
        [`${searchApplication}-role`]: {
          index: [
            {
              names: [searchApplication],
              privileges: ["read"],
              query: combinedQuery,
            },
          ],
          restriction: {
            workflows: ["search_application_query"],
          },
        },
      },
      metadata,
    };

    const apiKeyResponse = await axios.post(
      `${ELASTICSEARCH_URL}/_security/api_key`,
      apiKeyBody,
      config
    );

    console.log(apiKeyResponse.data);
    return apiKeyResponse.data.encoded;
  } catch (error) {
    console.log(error)
  }
}

// example usage:
createApiKey({
  searchApplication: "my-search-app",
  userId: "example.user@example.com",
  indices: "source1,source2",
  expiration: "1d",
  metadata: {
    application: "my-search-app",
    namespace: "dev",
    foo: "bar",
  },
}).then((encodedKey) => console.log(encodedKey));
```

----------------------------------------

TITLE: Multi-match Best Fields Type Query with Tie Breaker in Elasticsearch
DESCRIPTION: Presents an example of the 'best_fields' multi-match type, which scores results based primarily on the best matching field. It also includes the tie_breaker parameter to incorporate scores from other matching fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-multi-match-query.md#_snippet_3

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "multi_match" : {
      "query":      "brown fox",
      "type":       "best_fields",
      "fields":     [ "subject", "message" ],
      "tie_breaker": 0.3
    }
  }
}
```

----------------------------------------

TITLE: Explicit Mapping for Nested Objects in Elasticsearch
DESCRIPTION: Demonstrates how to define an explicit mapping for a document with nested objects. The mapping specifies field types for each property, including the nested 'manager' and 'manager.name' objects.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/object.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": { <1>
      "region": {
        "type": "keyword"
      },
      "manager": { <2>
        "properties": {
          "age":  { "type": "integer" },
          "name": { <3>
            "properties": {
              "first": { "type": "text" },
              "last":  { "type": "text" }
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Elasticsearch Index with GeoPoint Mapping
DESCRIPTION: This code snippet demonstrates how to create an Elasticsearch index with a `geo_point` field mapping.  It defines the `location` field as type `geo_point`, enabling geospatial queries on this field. This is a prerequisite for using the `geo_shape` query against `geo_point` fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-shape-query.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT /example_points
{
  "mappings": {
    "properties": {
      "location": {
        "type": "geo_point"
      }
    }
  }
}
```

----------------------------------------

TITLE: Boosting Terms in Query
DESCRIPTION: Shows how to use the boost operator '^' to increase the relevance of specific terms or phrases in a search query
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_8

LANGUAGE: elasticsearch
CODE:
```
quick^2 fox
```

LANGUAGE: elasticsearch
CODE:
```
"john smith"^2   (foo bar)^4
```

----------------------------------------

TITLE: Field Boosting with Tie Breaker in query_string
DESCRIPTION: Example of boosting specific fields during a query_string search across multiple fields. The name field is boosted by a factor of 5 using the ^5 notation, and a tie_breaker of 0 is specified.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_14

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "query_string" : {
      "fields" : ["content", "name^5"],
      "query" : "this AND that OR thus",
      "tie_breaker" : 0
    }
  }
}
```

----------------------------------------

TITLE: Simulating Date Index Name Pipeline in Elasticsearch
DESCRIPTION: Example of using the _simulate API to preview how the date index name processor will transform a document without actually indexing it, useful for testing and debugging.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/date-index-name-processor.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST _ingest/pipeline/_simulate
{
  "pipeline" :
  {
    "description": "monthly date-time index naming",
    "processors" : [
      {
        "date_index_name" : {
          "field" : "date1",
          "index_name_prefix" : "my-index-",
          "date_rounding" : "M"
        }
      }
    ]
  },
  "docs": [
    {
      "_source": {
        "date1": "2016-04-25T12:02:01.789Z"
      }
    }
  ]
}
```

----------------------------------------

TITLE: ILM Allocate Action with Custom Node Attribute Assignment
DESCRIPTION: Demonstrates allocating an index to nodes based on a custom box_type attribute, targeting nodes marked as either hot or warm.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-allocate.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "warm": {
        "actions": {
          "allocate" : {
            "include" : {
              "box_type": "hot,warm"
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: SQL CAST Function Syntax
DESCRIPTION: Shows the general syntax for the Elasticsearch SQL `CAST` function. It takes an expression and a target data type. If the expression is null, the function returns null. If the cast is not possible, the query fails.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-type-conversion.md#_snippet_0

LANGUAGE: SQL
CODE:
```
CAST(
 expression <1>
 AS data_type) <2>
```

----------------------------------------

TITLE: Using Global Aggregation with Sub-aggregations in Elasticsearch
DESCRIPTION: This example demonstrates how to calculate an average price across all products (using global aggregation) while simultaneously calculating the average price for only t-shirts (filtered by query). The global aggregation ignores the query filter and includes all documents in the index.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-global-aggregation.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
POST /sales/_search?size=0
{
  "query": {
    "match": { "type": "t-shirt" }
  },
  "aggs": {
    "all_products": {
      "global": {}, <1>
      "aggs": {     <2>
      "avg_price": { "avg": { "field": "price" } }
      }
    },
    "t_shirts": { "avg": { "field": "price" } }
  }
}
```

----------------------------------------

TITLE: Write Field Manipulation in Elasticsearch Scripts
DESCRIPTION: Comprehensive API for modifying document fields, including setting, appending, removing, and transforming field values
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.update_by_query.txt#2025-04-21_snippet_4

LANGUAGE: java
CODE:
```
class org.elasticsearch.script.field.WriteField {
    String getName()
    boolean exists()
    WriteField move(def)
    WriteField overwrite(def)
    void remove()
    WriteField set(def)
    WriteField append(def)
    boolean isEmpty()
    int size()
    Iterator iterator()
    def get(def)
    def get(int, def)
    boolean hasValue(Predicate)
    WriteField transform(Function)
    WriteField deduplicate()
    WriteField removeValuesIf(Predicate)
    WriteField removeValue(int)
    NestedDocument doc()
    NestedDocument doc(int)
    Iterable docs()
}
```

----------------------------------------

TITLE: Configuring ILM Downsample Policy in Elasticsearch
DESCRIPTION: Example of creating an ILM policy that includes a downsample action with hourly fixed intervals. The policy also includes a rollover action which is required when downsampling in the hot phase. The downsample action will aggregate time series data into hourly summaries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-downsample.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT _ilm/policy/datastream_policy
{
  "policy": {
    "phases": {
      "hot": {
        "actions": {
          "rollover": {
            "max_docs": 1
          },
          "downsample": {
  	          "fixed_interval": "1h"
  	      }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Mapping Dense Vector Field with Indexing Disabled in Elasticsearch (console)
DESCRIPTION: This snippet demonstrates how to create an index mapping in Elasticsearch for a `dense_vector` field, explicitly disabling indexing for kNN search by setting the `index` parameter to `false`. This prevents the field from being indexed into the HNSW data structure, making brute-force search necessary if vector search is required.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/dense-vector.md#_snippet_2

LANGUAGE: console
CODE:
```
PUT my-index-2
{
  "mappings": {
    "properties": {
      "my_vector": {
        "type": "dense_vector",
        "dims": 3,
        "index": false
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Basic Tracing Settings in Elasticsearch YAML
DESCRIPTION: Essential YAML configuration to enable tracing and specify the APM server URL in elasticsearch.yml file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/TRACING.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
telemetry.tracing.enabled: true
telemetry.agent.server_url: https://<your-apm-server>:443
```

----------------------------------------

TITLE: Basic Avg Aggregation in Elasticsearch
DESCRIPTION: Demonstrates how to use the Avg aggregation to compute the average grade over all documents in an index named 'exams'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-avg-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST /exams/_search?size=0
{
  "aggs": {
    "avg_grade": { "avg": { "field": "grade" } }
  }
}
```

----------------------------------------

TITLE: Auto Date Histogram with Custom Date Format in Elasticsearch
DESCRIPTION: Example of an auto date histogram aggregation with a custom date format. The aggregation specifies a format pattern of 'yyyy-MM-dd' for the returned dates, along with a target of 5 buckets.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-autodatehistogram-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "sales_over_time": {
      "auto_date_histogram": {
        "field": "date",
        "buckets": 5,
        "format": "yyyy-MM-dd"
      }
    }
  }
}
```

----------------------------------------

TITLE: Extracting and Converting Type with DISSECT ESQL
DESCRIPTION: Shows how to use `DISSECT` to extract fields and then apply type conversion using `TO_DATETIME` on the extracted `date` field. This changes the data type of the `date` column from keyword string to date.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-process-data-with-dissect-grok.md#_snippet_1

LANGUAGE: ESQL
CODE:
```
ROW a = "2023-01-23T12:15:00.000Z - some text - 127.0.0.1"
| DISSECT a """%{date} - %{msg} - %{ip}"""
| KEEP date, msg, ip
| EVAL date = TO_DATETIME(date)
```

----------------------------------------

TITLE: Defining Runtime Field in Elasticsearch Mapping
DESCRIPTION: Creates an index mapping with a runtime field that extracts the day of the week from a timestamp field. The script uses the emit function to return the calculated day name as a keyword type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/use-painless-scripts-in-runtime-fields.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index/
{
  "mappings": {
    "runtime": {
      "day_of_week": {
        "type": "keyword",
        "script": {
          "source":
          """emit(doc['@timestamp'].value.dayOfWeekEnum
          .getDisplayName(TextStyle.FULL, Locale.ROOT))"""
        }
      }
    },
    "properties": {
      "@timestamp": {"type": "date"}
    }
  }
}
```

----------------------------------------

TITLE: ESQL Query with Explicit Limit
DESCRIPTION: Shows an ESQL query with an explicit LIMIT command, equivalent to the previous query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/common/result-set-size-limitation.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM index | WHERE field = "value" | LIMIT 1000
```

----------------------------------------

TITLE: Creating Index for kNN Search Profiling in Elasticsearch (Console)
DESCRIPTION: Sets up an index with dense vector fields for demonstrating kNN (k-Nearest Neighbors) search profiling.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-profile.md#2025-04-21_snippet_15

LANGUAGE: console
CODE:
```
PUT my-knn-index
{
  "mappings": {
    "properties": {
      "my-vector": {
        "type": "dense_vector",
        "dims": 3,
        "index": true,
        "similarity": "l2_norm"
      }
    }
  }
}

POST my-knn-index/_bulk?refresh=true
{ "index": { "_id": "1" } }
{ "my-vector": [1, 5, -20] }
{ "index": { "_id": "2" } }
{ "my-vector": [42, 8, -15] }
{ "index": { "_id": "3" } }
{ "my-vector": [15, 11, 23] }
```

----------------------------------------

TITLE: Defining QUERY Function Syntax SQL
DESCRIPTION: Defines the general syntax for the QUERY predicate in Elasticsearch SQL. It takes a required constant expression representing the query string and an optional second parameter for additional configuration options.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-search.md#_snippet_4

LANGUAGE: SQL
CODE:
```
QUERY(
    constant_exp <1>
    [, options]) <2>
```

----------------------------------------

TITLE: Using Top-Level Query for Efficient Aggregation in Elasticsearch
DESCRIPTION: This example shows how to use a top-level query to limit all aggregations in a search, which is faster than using a single filter aggregation with sub-aggregations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-filter-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0&filter_path=aggregations
{
  "query": { "term": { "type": "t-shirt" } },
  "aggs": {
    "avg_price": { "avg": { "field": "price" } }
  }
}
```

----------------------------------------

TITLE: COUNT_DISTINCT with Precision Threshold in ESQL
DESCRIPTION: Shows how to use COUNT_DISTINCT with a precision threshold parameter. Different thresholds (80000 and 5) are applied to control the accuracy vs. memory usage trade-off.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/count_distinct.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM hosts
| STATS COUNT_DISTINCT(ip0, 80000), COUNT_DISTINCT(ip1, 5)
```

----------------------------------------

TITLE: Combining Keyword Tokenizer with Lowercase Filter
DESCRIPTION: Shows how to use the keyword tokenizer with a lowercase token filter to normalize structured data like email addresses, converting the entire text to lowercase
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-keyword-tokenizer.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST _analyze
{
  "tokenizer": "keyword",
  "filter": [ "lowercase" ],
  "text": "john.SMITH@example.COM"
}
```

----------------------------------------

TITLE: Executing EQL Sample Query in Elasticsearch
DESCRIPTION: This snippet demonstrates how to perform an EQL sample query on the previously created indices. The query searches for events matching specific criteria using the 'by' keyword and multiple filters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_14

LANGUAGE: console
CODE:
```
GET /my-index*/_eql/search
{
  "query": """
    sample by host
      [any where uptime > 0]
      [any where port > 100]
      [any where bool == true]
  """
}
```

----------------------------------------

TITLE: CORS Configuration in Elasticsearch
DESCRIPTION: Example of configuring Cross-Origin Resource Sharing (CORS) settings including origin patterns and allowed methods.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/networking-settings.md#2025-04-21_snippet_7

LANGUAGE: yaml
CODE:
```
http.cors.enabled: true
http.cors.allow-origin: "/https?:\/\/localhost(:[0-9]+)?/"
http.cors.allow-methods: "OPTIONS, HEAD, GET, POST, PUT, DELETE"
http.cors.allow-headers: "X-Requested-With, Content-Type, Content-Length, Authorization"
```

----------------------------------------

TITLE: Multi-match Bool Prefix Query with Highlighting
DESCRIPTION: Shows how to perform a bool_prefix query across multiple subfields with highlighting configuration. This query type is optimized for search-as-you-type functionality.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/search-as-you-type.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET my-index-000001/_search
{
  "query": {
    "multi_match": {
      "query": "brown f",
      "type": "bool_prefix",
      "fields": [
        "my_field",
        "my_field._2gram",
        "my_field._3gram"
      ]
    }
  },
  "highlight": {
    "fields": {
      "my_field": {
        "matched_fields": ["my_field._index_prefix"]
      }
    }
  }
}
```

----------------------------------------

TITLE: Multi-match Query with Field Boosting in Elasticsearch
DESCRIPTION: Illustrates boosting specific fields within the fields array using the caret (^) notation. This increases the relevance score contribution for matches found in boosted fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-multi-match-query.md#_snippet_2

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "multi_match" : {
      "query" : "this is a test",
      "fields" : [ "subject^3", "message" ]
    }
  }
}
```

----------------------------------------

TITLE: Field Value Factor with Missing Value Handling
DESCRIPTION: Demonstrates how to handle missing field values in field_value_factor implementation using size() check.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-script-score-query.md#2025-04-21_snippet_10

LANGUAGE: js
CODE:
```
"script" : {
    "source" : "Math.log10((doc['field'].size() == 0 ? 1 : doc['field'].value()) * params.factor)",
    "params" : {
        "factor" : 5
    }
}
```

----------------------------------------

TITLE: Executing Painless Script (Score Context) - Console
DESCRIPTION: This snippet executes a Painless script in the `score` context. The script calculates a score by dividing the `rank` value from the provided in-memory document by `max_rank`. It requires an `index` with a compatible mapping and a `document` in the `context_setup`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_4

LANGUAGE: Console
CODE:
```
POST /_scripts/painless/_execute
{
  "script": {
    "source": "doc['rank'].value / params.max_rank",
    "params": {
      "max_rank": 5.0
    }
  },
  "context": "score",
  "context_setup": {
    "index": "my-index-000001",
    "document": {
      "rank": 4
    }
  }
}
```

LANGUAGE: JSON
CODE:
```
{
  "result": 0.8
}
```

----------------------------------------

TITLE: Running MySQL Connector Docker Image - sh
DESCRIPTION: Executes the Docker command to run the Elasticsearch Connector Service image. It mounts the local configuration directory into the container, connects the container to a specified Docker network, runs in TTY mode, and is automatically removed upon exit. This is the final step in deploying the self-managed connector using Docker.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-mysql.md#_snippet_6

LANGUAGE: sh
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Configuring Translog Sync Interval in Elasticsearch YAML
DESCRIPTION: Sets how often the translog is fsync'ed to disk and committed, regardless of write operations. The default is 5 seconds, and values less than 100ms are not allowed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/translog.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
index.translog.sync_interval: 5s
```

----------------------------------------

TITLE: Complete Bucket Selector Aggregation Query Example
DESCRIPTION: A complete Elasticsearch query demonstrating how to use a bucket selector aggregation with a Painless script. It filters theatre buckets based on whether their maximum cost plus a base cost exceeds a threshold.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-bucket-selector-agg-context.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /seats/_search
{
  "size": 0,
  "aggs": {
    "theatres": {
      "terms": {
        "field": "theatre",
        "size": 10
      },
      "aggs": {
        "max_cost": {
          "max": {
            "field": "cost"
          }
        },
        "filtering_agg": {
          "bucket_selector": {
            "buckets_path": { <1>
              "max": "max_cost"
            },
            "script": {
              "params": {
                "base_cost": 5 <2>
              },
              "source": "params.max + params.base_cost > 10"
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Complex Sparse Vector Query with Boolean Clauses
DESCRIPTION: Shows how to combine multiple sparse vector queries with other query types using boolean query clauses and linear boosting
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-sparse-vector-query.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET my-index/_search
{
  "query": {
    "bool": {
      "should": [
        {
          "sparse_vector": {
            "field": "ml.inference.title_expanded.predicted_value",
            "inference_id": "my-elser-model",
            "query": "How is the weather in Jamaica?",
            "boost": 1
          }
        },
        {
          "sparse_vector": {
            "field": "ml.inference.description_expanded.predicted_value",
            "inference_id": "my-elser-model",
            "query": "How is the weather in Jamaica?",
            "boost": 1
          }
        },
        {
          "multi_match": {
            "query": "How is the weather in Jamaica?",
            "fields": [
              "title",
              "description"
            ],
            "boost": 4
          }
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Explicit Type Casting in Elasticsearch Sort
DESCRIPTION: Shows how to explicitly cast whole number fields to floating points using numeric_type parameter to achieve more predictable sorting behavior.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-top-metrics.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
POST /test*/_search?filter_path=aggregations
{
  "aggs": {
    "tm": {
      "top_metrics": {
        "metrics": {"field": "m"},
        "sort": {"s": {"order": "asc", "numeric_type": "double"}}
      }
    }
  }
}
```

LANGUAGE: js
CODE:
```
{
  "aggregations": {
    "tm": {
      "top": [ {"sort": [1.0], "metrics": {"m": 3.1414999961853027 } } ]
    }
  }
}
```

----------------------------------------

TITLE: First Page Search with PIT and Sort in Elasticsearch
DESCRIPTION: This example demonstrates how to get the first page of results using a PIT ID and sorting. The request specifies a custom date format and numeric type to handle mixed date field types across indices.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/paginate-search-results.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET /_search
{
  "size": 10000,
  "query": {
    "match" : {
      "user.id" : "elkbee"
    }
  },
  "pit": {
    "id":  "46ToAwMDaWR5BXV1aWQyKwZub2RlXzMAAAAAAAAAACoBYwADaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQADaWR5BXV1aWQyKgZub2RlXzIAAAAAAAAAAAwBYgACBXV1aWQyAAAFdXVpZDEAAQltYXRjaF9hbGw_gAAAAA==", <1>
    "keep_alive": "1m"
  },
  "sort": [ <2>
    {"@timestamp": {"order": "asc", "format": "strict_date_optional_time_nanos", "numeric_type" : "date_nanos" }}
  ]
}
```

----------------------------------------

TITLE: Elasticsearch IDs Query Example
DESCRIPTION: This snippet demonstrates how to use the Elasticsearch IDs query to retrieve documents with specific IDs. The `values` parameter specifies an array of document IDs to search for. The query is executed against the `_search` endpoint.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-ids-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "ids" : {
      "values" : ["1", "4", "100"]
    }
  }
}
```

----------------------------------------

TITLE: Creating Salesforce Connector via API
DESCRIPTION: API endpoint for creating a new self-managed Salesforce connector in Elasticsearch. Requires specifying index name, connector name, and service type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-salesforce.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT _connector/my-salesforce-connector
{
  "index_name": "my-elasticsearch-index",
  "name": "Content synced from Salesforce",
  "service_type": "salesforce"
}
```

----------------------------------------

TITLE: Configuring Security Domain in Elasticsearch YAML
DESCRIPTION: This snippet shows how to define a custom security domain named `my_domain` within the Elasticsearch security configuration in `elasticsearch.yml`. It specifies the list of authentication realms (`default_native`, `saml1`) that belong to this domain, controlling the authentication process for users associated with it.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/security-settings.md#_snippet_0

LANGUAGE: yaml
CODE:
```
xpack:
  security:
    authc:
      domains:
        my_domain: <1>
          realms: [ 'default_native', 'saml1' ] <2>
```

----------------------------------------

TITLE: Combined Fields Query with Per-Field Boosting
DESCRIPTION: Illustrates how to apply field-level boosting in a combined fields query, giving more weight to the title field when searching for 'distributed consensus'
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-combined-fields-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "combined_fields" : {
      "query" : "distributed consensus",
      "fields" : [ "title^2", "body" ]
    }
  }
}
```

----------------------------------------

TITLE: Sorting Has Child Query Results in Elasticsearch
DESCRIPTION: This snippet demonstrates how to sort the results of a `has_child` query using a `function_score` query, as the standard sort options are not available for `has_child`.  The `script_score` script multiplies the score by the value of the `click_count` field in the child documents. The `score_mode` is set to `max` to use the highest relevance score of all matching child documents for sorting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-has-child-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "has_child": {
      "type": "child",
      "query": {
        "function_score": {
          "script_score": {
            "script": "_score * doc['click_count'].value"
          }
        }
      },
      "score_mode": "max"
    }
  }
}
```

----------------------------------------

TITLE: Day of Week Aggregation Using Runtime Field
DESCRIPTION: Example showing how to aggregate data by day of week using a runtime field and terms aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-datehistogram-aggregation.md#2025-04-21_snippet_16

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "runtime_mappings": {
    "date.day_of_week": {
      "type": "keyword",
      "script": "emit(doc['date'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ENGLISH))"
    }
  },
  "aggs": {
    "day_of_week": {
      "terms": { "field": "date.day_of_week" }
    }
  }
}
```

----------------------------------------

TITLE: Define Elasticsearch String Mapping with Multi-field (JSON)
DESCRIPTION: This mapping defines a string field `first_name` as `text` for full-text search. It includes a `raw` multi-field of type `keyword` to store the exact, unanalyzed value, enabling exact matching, sorting, and aggregations in Elasticsearch SQL. This is a common pattern for string fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-data-types.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "first_name": {
    "type": "text",
    "fields": {
      "raw": {
        "type": "keyword"
      }
    }
  }
}
```

----------------------------------------

TITLE: Sorting and Transforming Employee Data with ESQL
DESCRIPTION: ESQL query that sorts employees by emp_no, selects specific columns (first_name, last_name, height), and converts height measurements from meters to feet using a multiplication factor of 3.281.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/eval.csv-spec/evalReplace.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| SORT emp_no
| KEEP first_name, last_name, height
| EVAL height = height * 3.281
```

----------------------------------------

TITLE: Creating Elasticsearch API Key for Connector
DESCRIPTION: Elasticsearch API call to create an API key with necessary permissions for the connector to access and manage the target index and related system indices.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/api-tutorial.md#2025-04-21_snippet_10

LANGUAGE: json
CODE:
```
POST /_security/api_key
{
  "name": "music-connector",
  "role_descriptors": {
    "music-connector-role": {
      "cluster": [
        "monitor",
        "manage_connector"
      ],
      "indices": [
        {
          "names": [
            "music",
            ".search-acl-filter-music",
            ".elastic-connectors*"
          ],
          "privileges": [
            "all"
          ],
          "allow_restricted_indices": false
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Applying Bucket Sort to Date Histogram Aggregation in Elasticsearch
DESCRIPTION: Shows how to use bucket sort to return the top 3 months with highest total sales in descending order, applied to a date histogram aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-bucket-sort-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "size": 0,
  "aggs": {
    "sales_per_month": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "total_sales": {
          "sum": {
            "field": "price"
          }
        },
        "sales_bucket_sort": {
          "bucket_sort": {
            "sort": [
              { "total_sales": { "order": "desc" } }
            ],
            "size": 3
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Aggregating and Sorting Employee Data with ESQL
DESCRIPTION: This ESQL query counts employees grouped by the first letter of their last name and sorts the results. It uses the COUNT() function for aggregation, the LEFT() function to extract the first letter, and the SORT clause for ordering.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/stats.csv-spec/docsStatsByExpression.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS my_count = COUNT() BY LEFT(last_name, 1)
| SORT `LEFT(last_name, 1)`
```

----------------------------------------

TITLE: Filtering Source with Include/Exclude Patterns in Elasticsearch Console
DESCRIPTION: This console command demonstrates a more granular way to filter the source using an object with `includes` and `excludes` arrays in the `_source` parameter. It returns source fields matching patterns in `includes` but excludes those also matching patterns in `excludes`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_17

LANGUAGE: console
CODE:
```
GET /_search
{
  "_source": {
    "includes": [ "obj1.*", "obj2.*" ],
    "excludes": [ "*.description" ]
  },
  "query": {
    "term": {
      "user.id": "kimchy"
    }
  }
}
```

----------------------------------------

TITLE: Grouping Text Messages with CATEGORIZE in ESQL
DESCRIPTION: Demonstrates how to use the CATEGORIZE function to group messages into categories and count occurrences. The query selects from sample_data, groups by categorized message patterns, and returns the count for each category.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/categorize.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM sample_data
| STATS count=COUNT() BY category=CATEGORIZE(message)
```

----------------------------------------

TITLE: Title Search with MULTI_MATCH and AND Operator in ESQL
DESCRIPTION: Query searching for 'Hobbit Back Again' across title and description fields using AND operator, returning only the title field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/multi_match.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM books
| WHERE MULTI_MATCH("Hobbit Back Again", title, description, {"operator": "AND"})
| KEEP title;
```

----------------------------------------

TITLE: Create Elasticsearch index with date and geo_point fields
DESCRIPTION: This snippet creates an Elasticsearch index named `items` with mappings for `name` (keyword), `production_date` (date), and `location` (geo_point) fields. This index is required to use the distance_feature query with date or geo_point fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-distance-feature-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /items
{
  "mappings": {
    "properties": {
      "name": {
        "type": "keyword"
      },
      "production_date": {
        "type": "date"
      },
      "location": {
        "type": "geo_point"
      }
    }
  }
}
```

----------------------------------------

TITLE: Using SPLIT Function in ESQL to Convert Delimited String to Array
DESCRIPTION: This example demonstrates using the SPLIT function to convert a semicolon-delimited string into an array. The function takes two parameters: the input string and the delimiter character.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/split.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW words="foo;bar;baz;qux;quux;corge"
| EVAL word = SPLIT(words, ";")
```

----------------------------------------

TITLE: Installing ICU Analysis Plugin for Elasticsearch
DESCRIPTION: Example of installing a specific core plugin (ICU analysis plugin) using the elasticsearch-plugin utility. This command automatically matches the plugin version to your Elasticsearch version and displays a progress bar during download.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/installation.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
sudo bin/elasticsearch-plugin install analysis-icu
```

----------------------------------------

TITLE: Create Index with Flat Dense Vector Mapping (Elasticsearch Console)
DESCRIPTION: Shows how to create an Elasticsearch index with a `dense_vector` field using the `flat` index type, which uses raw float32 arrays and brute-force search for KNN queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/dense-vector.md#_snippet_10

LANGUAGE: json
CODE:
```
PUT my-index-000001
{
    "mappings": {
        "properties": {
            "text_embedding": {
                "type": "dense_vector",
                "dims": 384,
                "index_options": {
                    "type": "flat"
                }
            }
        }
    }
}
```

----------------------------------------

TITLE: Implementing Greek Analyzer in Elasticsearch
DESCRIPTION: Custom implementation of the built-in Greek analyzer with Greek-specific lowercase filter, Greek stopwords, keyword marker for exclusions from stemming, and Greek stemming.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_17

LANGUAGE: console
CODE:
```
PUT /greek_example
{
  "settings": {
    "analysis": {
      "filter": {
        "greek_stop": {
          "type":       "stop",
          "stopwords":  "_greek_" <1>
        },
        "greek_lowercase": {
          "type":       "lowercase",
          "language":   "greek"
        },
        "greek_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["παράδειγμα"] <2>
        },
        "greek_stemmer": {
          "type":       "stemmer",
          "language":   "greek"
        }
      },
      "analyzer": {
        "rebuilt_greek": {
          "tokenizer":  "standard",
          "filter": [
            "greek_lowercase",
            "greek_stop",
            "greek_keywords",
            "greek_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Terms Value Source Aggregation Example
DESCRIPTION: Demonstrates how to use the terms value source in a composite aggregation. This example extracts values from a product field to create composite buckets, similar to a simple terms aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
GET /_search
{
  "size": 0,
  "aggs": {
    "my_buckets": {
      "composite": {
        "sources": [
          { "product": { "terms": { "field": "product" } } }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Boolean Operators in Query String
DESCRIPTION: Demonstrates the use of boolean operators like '+', '-', 'AND', 'OR', and 'NOT' to control term requirements in search queries
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_9

LANGUAGE: elasticsearch
CODE:
```
quick brown +fox -news
```

LANGUAGE: elasticsearch
CODE:
```
((quick AND fox) OR (brown AND fox) OR fox) AND NOT news
```

----------------------------------------

TITLE: Mapping and Indexing Documents with Elasticsearch Range Fields
DESCRIPTION: This snippet demonstrates how to define range field types (`integer_range`, `date_range`) within an index mapping and subsequently index a document containing values for these range fields using `gte`, `lt`, and `lte` operators. It shows how to specify formats for `date_range` fields and includes refreshing the index for immediate searchability.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/range.md#_snippet_0

LANGUAGE: Elasticsearch DSL
CODE:
```
PUT range_index
{
  "settings": {
    "number_of_shards": 2
  },
  "mappings": {
    "properties": {
      "expected_attendees": {
        "type": "integer_range"
      },
      "time_frame": {
        "type": "date_range", 
        "format": "yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"
      }
    }
  }
}

PUT range_index/_doc/1?refresh
{
  "expected_attendees" : { 
    "gte" : 10,
    "lt" : 20
  },
  "time_frame" : {
    "gte" : "2015-10-31 12:00:00", 
    "lte" : "2015-11-01"
  }
}
```

----------------------------------------

TITLE: Creating a Custom Analyzer with MinHash and Shingle Filters in Elasticsearch
DESCRIPTION: This code demonstrates how to create a custom index with a MinHash-based analyzer for document similarity search. It configures a shingle filter to create five-word shingles and a MinHash filter to hash these shingles into 512 buckets, then maps the analyzer to a 'fingerprint' field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-minhash-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "filter": {
        "my_shingle_filter": {      <1>
          "type": "shingle",
          "min_shingle_size": 5,
          "max_shingle_size": 5,
          "output_unigrams": false
        },
        "my_minhash_filter": {
          "type": "min_hash",
          "hash_count": 1,          <2>
          "bucket_count": 512,      <3>
          "hash_set_size": 1,       <4>
          "with_rotation": true     <5>
        }
      },
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "standard",
          "filter": [
            "my_shingle_filter",
            "my_minhash_filter"
          ]
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "fingerprint": {
        "type": "text",
        "analyzer": "my_analyzer"
      }
    }
  }
}
```

----------------------------------------

TITLE: Use Simple Fragmenter with Plain Highlighter Elasticsearch Console
DESCRIPTION: Configures the 'plain' highlighter for the 'message' field to use the 'simple' fragmenter. This fragmenter breaks text into snippets based primarily on 'fragment_size', which might result in fragments starting or ending abruptly, potentially mid-sentence or with punctuation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_25

LANGUAGE: console
CODE:
```
GET my-index-000001/_search
{
  "query": {
    "match_phrase": { "message": "number 1" }
  },
  "highlight": {
    "fields": {
      "message": {
        "type": "plain",
        "fragment_size": 15,
        "number_of_fragments": 3,
        "fragmenter": "simple"
      }
    }
  }
}
```

----------------------------------------

TITLE: Extract Day of Year using DAY_OF_YEAR in Elasticsearch SQL
DESCRIPTION: Demonstrates using the DAY_OF_YEAR function to extract the day of the year from a TIMESTAMP literal '2018-02-19T10:23:27Z'. The function returns an integer representing the day of the year (1-366).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_61

LANGUAGE: SQL
CODE:
```
SELECT DAY_OF_YEAR(CAST('2018-02-19T10:23:27Z' AS TIMESTAMP)) AS day;
```

----------------------------------------

TITLE: Text Expansion Query with Pruning and Rescoring in Elasticsearch
DESCRIPTION: Advanced example that implements token pruning to improve query performance by removing non-significant tokens. It also uses a rescore function to mitigate shard-level inconsistencies that might occur with pruned tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-text-expansion-query.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET my-index/_search
{
   "query":{
      "text_expansion":{
         "ml.tokens":{
            "model_id":".elser_model_2",
            "model_text":"How is the weather in Jamaica?",
            "pruning_config": {
               "tokens_freq_ratio_threshold": 5,
               "tokens_weight_threshold": 0.4,
               "only_score_pruned_tokens": false
           }
         }
      }
   },
   "rescore": {
      "window_size": 100,
      "query": {
         "rescore_query": {
            "text_expansion": {
               "ml.tokens": {
                  "model_id": ".elser_model_2",
                  "model_text": "How is the weather in Jamaica?",
                  "pruning_config": {
                     "tokens_freq_ratio_threshold": 5,
                     "tokens_weight_threshold": 0.4,
                     "only_score_pruned_tokens": true
                  }
               }
            }
         }
      }
   }
}
```

----------------------------------------

TITLE: Using Standard Retriever in Search Request - Console
DESCRIPTION: Demonstrates how to use the 'standard' retriever within a search API request to perform a traditional Elasticsearch query. It shows combining 'match' and 'term' clauses using a boolean query within the retriever structure.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrievers.md#_snippet_0

LANGUAGE: console
CODE:
```
GET /restaurants/_search
```

LANGUAGE: json
CODE:
```
{
  "retriever": { 
    "standard": { 
      "query": { 
        "bool": { 
          "should": [ 
            {
              "match": { 
                "region": "Austria"
              }
            }
          ],
          "filter": [ 
            {
              "term": { 
                "year": "2019" 
              }
            }
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Basic Suggester Request with Multiple Suggestions
DESCRIPTION: An example of a search request that includes two different term suggestions. Each suggestion has its own text and target field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _search
{
  "suggest": {
    "my-suggest-1" : {
      "text" : "tring out Elasticsearch",
      "term" : {
        "field" : "message"
      }
    },
    "my-suggest-2" : {
      "text" : "kmichy",
      "term" : {
        "field" : "user.id"
      }
    }
  }
}
```

----------------------------------------

TITLE: Calculating Minimum Value with MIN Function in ESQL
DESCRIPTION: This snippet demonstrates how to use the MIN function in ESQL to find the minimum value of the 'languages' field from the 'employees' table. The STATS command is used to perform the aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/min.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS MIN(languages)
```

----------------------------------------

TITLE: Creating Index with Custom Stemmer (Light German) - Elasticsearch Console
DESCRIPTION: Demonstrates using the Elasticsearch Create Index API to define a custom token filter of type `stemmer` that uses the `light_german` algorithm, and then includes this custom filter in a custom analyzer. Requires a running Elasticsearch instance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stemmer-tokenfilter.md#_snippet_2

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "standard",
          "filter": [
            "lowercase",
            "my_stemmer"
          ]
        }
      },
      "filter": {
        "my_stemmer": {
          "type": "stemmer",
          "language": "light_german"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Implementing Bulgarian Analyzer as Custom Analyzer in Elasticsearch
DESCRIPTION: Creates a custom analyzer that replicates the functionality of the built-in Bulgarian analyzer, showing the configuration of Bulgarian-specific stopwords, keyword marking for stem exclusion, and Bulgarian stemming.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
PUT /bulgarian_example
{
  "settings": {
    "analysis": {
      "filter": {
        "bulgarian_stop": {
          "type":       "stop",
          "stopwords":  "_bulgarian_" 
        },
        "bulgarian_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["пример"] 
        },
        "bulgarian_stemmer": {
          "type":       "stemmer",
          "language":   "bulgarian"
        }
      },
      "analyzer": {
        "rebuilt_bulgarian": {
          "tokenizer":  "standard",
          "filter": [
            "lowercase",
            "bulgarian_stop",
            "bulgarian_keywords",
            "bulgarian_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: LIKE Pattern Matching in ESQL
DESCRIPTION: Examples showing the usage of LIKE operator for pattern matching with wildcards (* and ?).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/where.md#2025-04-21_snippet_2

LANGUAGE: esql
CODE:
```
WHERE field LIKE "pattern"
```

----------------------------------------

TITLE: Creating Index with Custom Date Format in Elasticsearch
DESCRIPTION: Example of creating an Elasticsearch index with a custom date format mapping using the yyyy-MM-dd pattern. This demonstrates how to configure a date field with a specific format in the index mappings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-date-format.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "date": {
        "type":   "date",
        "format": "yyyy-MM-dd"
      }
    }
  }
}
```

----------------------------------------

TITLE: Using Top Metrics Aggregation in Elasticsearch
DESCRIPTION: This example demonstrates how to use the top_metrics aggregation to select the value of the 'm' field from the document with the largest 's' value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-top-metrics.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST /test/_bulk?refresh
{"index": {}}
{"s": 1, "m": 3.1415}
{"index": {}}
{"s": 2, "m": 1.0}
{"index": {}}
{"s": 3, "m": 2.71828}
POST /test/_search?filter_path=aggregations
{
  "aggs": {
    "tm": {
      "top_metrics": {
        "metrics": {"field": "m"},
        "sort": {"s": "desc"}
      }
    }
  }
}
```

----------------------------------------

TITLE: Registering a Query in Percolator
DESCRIPTION: This snippet shows how to register a query in an Elasticsearch index using the percolator field. It involves storing a JSON object query to be used for matching documents against.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-percolate-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /my-index-000001/_doc/1?refresh
{
  "query": {
    "match": {
      "message": "bonsai tree"
    }
  }
}
```

----------------------------------------

TITLE: Escaping Reserved Characters in query_string Query
DESCRIPTION: Example of how to escape special characters in a query_string query. When using JSON for request body, two backslashes are required because backslash is a reserved escaping character in JSON strings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_11

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search
{
  "query" : {
    "query_string" : {
      "query" : "kimchy\\!",
      "fields"  : ["user.id"]
    }
  }
}
```

----------------------------------------

TITLE: Configuring a Custom Analyzer with Uppercase Filter in JSON
DESCRIPTION: This JSON-based configuration sets up a custom analyzer in Elasticsearch that utilizes a whitespace tokenizer combined with the 'uppercase' filter for case normalization purposes. This setup requires the Elasticsearch indices create API. The primary input is the JSON configuration, and the key parameter is 'filter', which specifies the 'uppercase' filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-uppercase-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
PUT uppercase_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "whitespace_uppercase": {
          "tokenizer": "whitespace",
          "filter": [ "uppercase" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining Date/Time Index Mapping - Elasticsearch Console
DESCRIPTION: Defines an Elasticsearch index mapping for 'my-index-000001' focusing on fields relevant for date calculations. It includes 'name', 'author', 'release_date' (date type), and updates 'page_count' to 'long' type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_8

LANGUAGE: Console
CODE:
```
PUT /my-index-000001
{
  "mappings": {
    "properties": {
      "name": {
        "type": "keyword"
      },
      "author": {
        "type": "keyword"
      },
      "release_date": {
        "type": "date"
      },
      "page_count": {
        "type": "long"
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Certificate PEM - cert1 with Elasticsearch Certutil
DESCRIPTION: This snippet generates a certificate PEM file named 'cert1'. It associates the certificate with the first CA, specifies its IP and DNS, and allows for a validity period.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/libs/ssl-config/src/test/resources/certs/README.txt#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
# 4. Create "cert1" PEM

elasticsearch-certutil cert --pem --out cert1.zip --name cert1 --ip 127.0.0.1 --dns localhost --days 9999 --ca-key ca1/ca.key --ca-cert ca1/ca.crt
unzip cert1.zip
```

----------------------------------------

TITLE: Defining Inner Hits in Elasticsearch Query
DESCRIPTION: Shows the basic structure for defining inner hits on a nested, has_child, or has_parent query in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-inner-hits.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
"<query>" : {
    "inner_hits" : {
        <inner_hits_options>
    }
}
```

----------------------------------------

TITLE: Installing Store SMB Plugin (Shell)
DESCRIPTION: This command installs the Store SMB plugin using the Elasticsearch plugin manager. It requires root or administrator privileges and needs to be executed on each node in the cluster. After successful installation, each node must be restarted.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/store-smb.md#_snippet_0

LANGUAGE: sh
CODE:
```
sudo bin/elasticsearch-plugin install store-smb
```

----------------------------------------

TITLE: Handling Missing Values in Terms Aggregation
DESCRIPTION: Demonstrates how to handle documents with missing values in terms aggregation by specifying a default value. Documents without a value in the specified field will be grouped into a bucket with the provided missing value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-terms-aggregation.md#2025-04-21_snippet_17

LANGUAGE: console
CODE:
```
GET /_search
{
  "aggs": {
    "tags": {
      "terms": {
        "field": "tags",
        "missing": "N/A"
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining Custom Normalizer in Elasticsearch Using JSON
DESCRIPTION: This snippet defines a custom normalizer named 'my_normalizer' for an Elasticsearch index. It specifies a character filter for mapping quote characters and uses built-in filters for lowercase conversion and ASCII folding.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/normalizers.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
PUT index
{
  "settings": {
    "analysis": {
      "char_filter": {
        "quote": {
          "type": "mapping",
          "mappings": [
            "« => \"",
            "» => \""
          ]
        }
      },
      "normalizer": {
        "my_normalizer": {
          "type": "custom",
          "char_filter": ["quote"],
          "filter": ["lowercase", "asciifolding"]
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "foo": {
        "type": "keyword",
        "normalizer": "my_normalizer"
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating a GeoIP Pipeline with Country Database
DESCRIPTION: Example of creating an ingest pipeline that uses the country database and specifies a custom target field for the geographical information.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/geoip-processor.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
PUT _ingest/pipeline/geoip
{
  "description" : "Add ip geolocation info",
  "processors" : [
    {
      "geoip" : {
        "field" : "ip",
        "target_field" : "geo",
        "database_file" : "GeoLite2-Country.mmdb"
      }
    }
  ]
}
PUT my-index-000001/_doc/my_id?pipeline=geoip
{
  "ip": "89.160.20.128"
}
GET my-index-000001/_doc/my_id
```

----------------------------------------

TITLE: Querying and Sorting Employee Data with ESQL
DESCRIPTION: This ESQL query retrieves data from the 'employees' table, sorts it by the 'emp_no' field in ascending order, and limits the result to 5 rows. It demonstrates the use of FROM, SORT, and LIMIT clauses in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/limit.csv-spec/basic.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| SORT emp_no ASC
| LIMIT 5
```

----------------------------------------

TITLE: Querying Elasticsearch using Regexp (Console)
DESCRIPTION: This console snippet demonstrates how to execute an Elasticsearch search request using the `regexp` query. It targets the `user.id` field with the regular expression 'k.*y', enabling all optional flags, case-insensitive matching, setting the maximum determinized states, and specifying a rewrite method.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-regexp-query.md#_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "regexp": {
      "user.id": {
        "value": "k.*y",
        "flags": "ALL",
        "case_insensitive": true,
        "max_determinized_states": 10000,
        "rewrite": "constant_score_blended"
      }
    }
  }
}
```

----------------------------------------

TITLE: Scoring Unsold Seats by Row Proximity in Elasticsearch
DESCRIPTION: A function score query that finds all unsold seats and applies a custom scoring formula based on row value. Lower row values receive higher scores using an inverse relationship (1.0 / row value).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-score-context.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /seats/_search
{
  "query": {
    "function_score": {
      "query": {
        "match": {
          "sold": "false"
        }
      },
      "script_score": {
        "script": {
          "source": "1.0 / doc['row'].value"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Geohash Grid Aggregation with Bounding Box in Elasticsearch
DESCRIPTION: This example shows how to use the bounds parameter in a geohash_grid aggregation to restrict the cells considered to those that intersect with the specified bounding box.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-geohashgrid-aggregation.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
POST /museums/_search?size=0
{
  "aggregations": {
    "tiles-in-bounds": {
      "geohash_grid": {
        "field": "location",
        "precision": 8,
        "bounds": {
          "top_left": "POINT (4.21875 53.4375)",
          "bottom_right": "POINT (5.625 52.03125)"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Converting Strings to Booleans with TO_BOOLEAN Function in ESQL
DESCRIPTION: This snippet demonstrates the TO_BOOLEAN function in ESQL that converts string values to booleans. It shows how different string values like "true", "TRuE", "false", "", "yes", and "1" are interpreted when converted to boolean type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_boolean.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW str = ["true", "TRuE", "false", "", "yes", "1"]
| EVAL bool = TO_BOOLEAN(str)
```

----------------------------------------

TITLE: Complex ESQL Query with Metadata Fields
DESCRIPTION: Shows a complex query utilizing metadata fields with multiple operations including WHERE conditions, EVAL for string concatenation, sorting, and field selection.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-metadata-fields.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM ul_logs, apps METADATA _index, _version
| WHERE id IN (13, 14) AND _version == 1
| EVAL key = CONCAT(_index, "_", TO_STR(id))
| SORT id, _index
| KEEP id, _index, _version, key
```

----------------------------------------

TITLE: Filtering Buckets with Boolean Expression in Painless
DESCRIPTION: A simple Painless script that determines whether to retain a bucket by checking if the sum of max value and base_cost exceeds 10. This script is used in a bucket selector aggregation context.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-bucket-selector-agg-context.md#2025-04-21_snippet_0

LANGUAGE: painless
CODE:
```
params.max + params.base_cost > 10
```

----------------------------------------

TITLE: Searching Elasticsearch: Retrieve All Fields with Wildcard (console)
DESCRIPTION: Performs an Elasticsearch search on `my-index-000001`. It uses the `fields` parameter with a wildcard `"*"` to request all fields, explicitly disabling `_source` retrieval. This query is used to show how nested fields are returned when retrieved via `fields`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_4

LANGUAGE: console
CODE:
```
POST my-index-000001/_search
{
  "fields": ["*"],
  "_source": false
}
```

----------------------------------------

TITLE: Add Write Block to Elasticsearch Index (Console)
DESCRIPTION: This console snippet demonstrates how to use the Elasticsearch Add Index Block API to apply a 'write' block to a specific index. This prevents further write operations on the index but allows metadata changes. The API call targets the index `my-index-000001` and the block type `write`. Adding blocks explicitly requires specifying the index name, or allowing wildcards/aliases by setting `action.destructive_requires_name` to `false`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/index-block.md#_snippet_0

LANGUAGE: console
CODE:
```
PUT /my-index-000001/_block/write
```

----------------------------------------

TITLE: Querying and Sorting Date-Time Data in ESQL
DESCRIPTION: This ESQL query filters records based on date_nanos and date fields, then sorts the results. It uses the MV_MIN function for comparison and demonstrates conversion between different date-time formats.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_date_nanos.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM date_nanos
| WHERE MV_MIN(nanos) < TO_DATE_NANOS("2023-10-23T12:27:28.948Z")
    AND millis > "2000-01-01"
| SORT nanos DESC
```

----------------------------------------

TITLE: Updating a Document with Optimistic Concurrency Control in Elasticsearch
DESCRIPTION: This snippet demonstrates how to update a document while ensuring no other changes have been made since retrieval. It uses the if_seq_no and if_primary_term parameters to implement optimistic concurrency control.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/optimistic-concurrency-control.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT products/_doc/1567?if_seq_no=362&if_primary_term=2
{
  "product": "r2d2",
  "details": "A resourceful astromech droid",
  "tags": [ "droid" ]
}
```

----------------------------------------

TITLE: Creating Enrollment Token for Elasticsearch Node
DESCRIPTION: Example command to create an enrollment token for enrolling an Elasticsearch node into a cluster using the node scope.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/create-enrollment-token.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
bin/elasticsearch-create-enrollment-token -s node
```

----------------------------------------

TITLE: Elasticsearch Query with Parameterized Painless Script Filter
DESCRIPTION: This Elasticsearch query uses a Painless script as a filter to find available theatre seats for evening performances under a specified cost. The cost is parameterized for flexibility.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-filter-context.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
GET seats/_search
{
  "query": {
    "bool": {
      "filter": {
        "script": {
          "script": {
            "source": "doc['sold'].value == false && doc['cost'].value < params.cost",
            "params": {
              "cost": 25
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: ORDER BY SCORE with Full-Text Search
DESCRIPTION: Shows how to order results by relevance score in full-text search queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_28

LANGUAGE: sql
CODE:
```
SELECT SCORE(), * FROM library WHERE MATCH(name, 'dune') ORDER BY SCORE() DESC;
```

----------------------------------------

TITLE: Executing Painless Script (Filter Context) - Console
DESCRIPTION: This snippet executes a Painless script in the `filter` context. The script checks if the length of the `field` value in the provided in-memory document is less than or equal to `max_length`. It requires an `index` with a compatible mapping and a `document` in the `context_setup`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_2

LANGUAGE: Console
CODE:
```
POST /_scripts/painless/_execute
{
  "script": {
    "source": "doc['field'].value.length() <= params.max_length",
    "params": {
      "max_length": 4
    }
  },
  "context": "filter",
  "context_setup": {
    "index": "my-index-000001",
    "document": {
      "field": "four"
    }
  }
}
```

LANGUAGE: JSON
CODE:
```
{
  "result": true
}
```

----------------------------------------

TITLE: Setting Default Rollover Configuration
DESCRIPTION: Dynamic cluster setting that defines conditions for data stream rollover. Includes max age, shard size, and document count conditions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/data-stream-lifecycle-settings.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
cluster.lifecycle.default.rollover: "max_age=auto,max_primary_shard_size=50gb,min_docs=1,max_primary_shard_docs=200000000"
```

----------------------------------------

TITLE: Partitioning Terms Aggregation in Elasticsearch
DESCRIPTION: This snippet demonstrates how to partition a terms aggregation for processing large datasets. It filters account IDs into 20 partitions and processes one partition at a time, ordering by the last access date.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-terms-aggregation.md#2025-04-21_snippet_14

LANGUAGE: json
CODE:
```
GET /_search
{
   "size": 0,
   "aggs": {
      "expired_sessions": {
         "terms": {
            "field": "account_id",
            "include": {
               "partition": 0,
               "num_partitions": 20
            },
            "size": 10000,
            "order": {
               "last_access": "asc"
            }
         },
         "aggs": {
            "last_access": {
               "max": {
                  "field": "access_date"
               }
            }
         }
      }
   }
}
```

----------------------------------------

TITLE: Creating and Querying Boolean Fields in Elasticsearch
DESCRIPTION: Shows how to create an index with a boolean field mapping, index a document with a boolean value, and query for documents using boolean values. The example demonstrates both string and native boolean value handling.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/boolean.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "is_published": {
        "type": "boolean"
      }
    }
  }
}

POST my-index-000001/_doc/1?refresh
{
  "is_published": "true"
}

GET my-index-000001/_search
{
  "query": {
    "term": {
      "is_published": true
    }
  }
}
```

----------------------------------------

TITLE: Indexing Documents in Nested Index
DESCRIPTION: This snippet describes how to index documents into a nested Elasticsearch index, with the example of adding 'drivers' with nested 'vehicle' information.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-nested-query.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT /drivers/_doc/1
{
  "driver" : {
        "last_name" : "McQueen",
        "vehicle" : [
            {
                "make" : "Powell Motors",
                "model" : "Canyonero"
            },
            {
                "make" : "Miller-Meteor",
                "model" : "Ecto-1"
            }
        ]
    }
}
```

LANGUAGE: console
CODE:
```
PUT /drivers/_doc/2?refresh
{
  "driver" : {
        "last_name" : "Hudson",
        "vehicle" : [
            {
                "make" : "Mifune",
                "model" : "Mach Five"
            },
            {
                "make" : "Miller-Meteor",
                "model" : "Ecto-1"
            }
        ]
    }
}
```

----------------------------------------

TITLE: Complex Elasticsearch Query Profile Example
DESCRIPTION: Complex query example with term query, scoped aggregation, global aggregation, and post_filter showing how to structure advanced search requests.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-profile.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search
{
  "profile": true,
  "query": {
    "term": {
      "user.id": {
        "value": "elkbee"
      }
    }
  },
  "aggs": {
    "my_scoped_agg": {
      "terms": {
        "field": "http.response.status_code"
      }
    },
    "my_global_agg": {
      "global": {},
      "aggs": {
        "my_level_agg": {
          "terms": {
            "field": "http.response.status_code"
          }
        }
      }
    }
  },
  "post_filter": {
    "match": {
      "message": "search"
    }
  }
}
```

----------------------------------------

TITLE: Checking Elasticsearch Logs
DESCRIPTION: Command to view Elasticsearch logs for troubleshooting. This follows the log file in real-time to monitor Elasticsearch startup and operation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-long.md#2025-04-21_snippet_10

LANGUAGE: sh
CODE:
```
tail -f /var/log/elasticsearch/elasticsearch.log
```

----------------------------------------

TITLE: Updating Indexing Slow Log Settings for a Single Index
DESCRIPTION: This snippet demonstrates how to update indexing slow log settings for a specific index using the Elasticsearch Update Indices Settings API. It sets thresholds for different log levels, configures source logging, and enables user information inclusion.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/slow-log.md#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
PUT /my-index-000001/_settings
{
  "index.indexing.slowlog.threshold.index.warn": "10s",
  "index.indexing.slowlog.threshold.index.info": "5s",
  "index.indexing.slowlog.threshold.index.debug": "2s",
  "index.indexing.slowlog.threshold.index.trace": "500ms",
  "index.indexing.slowlog.source": "1000",
  "index.indexing.slowlog.reformat": true,
  "index.indexing.slowlog.include.user": true
}
```

----------------------------------------

TITLE: Filtering Data within Time Span ESQL
DESCRIPTION: This ESQL query demonstrates using a time span with the subtraction operator (-) to filter data based on a time window. It selects records from 'sample_data' that have a timestamp within the last hour.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-time-spans.md#_snippet_2

LANGUAGE: ESQL
CODE:
```
FROM sample_data
| WHERE @timestamp > NOW() - 1 hour
```

----------------------------------------

TITLE: Scoring with Rank Vectors (Bit) and Float Query - Elasticsearch REST API
DESCRIPTION: This comprehensive snippet first sets up an index `my-rank-vectors-bit` with a `rank_vectors` field of `element_type: "bit"` and populates it using a bulk request with example bit vectors. It then executes a search query using `script_score` to calculate relevance, applying `maxSimDotProduct` between a provided float `query_vector` and the indexed bit vectors, showcasing asymmetric scoring.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/rank-vectors.md#_snippet_4

LANGUAGE: console
CODE:
```
PUT my-rank-vectors-bit
{
  "mappings": {
    "properties": {
      "my_vector": {
        "type": "rank_vectors",
        "element_type": "bit"
      }
    }
  }
}

POST /my-rank-vectors-bit/_bulk?refresh
{"index": {"_id" : "1"}}
{"my_vector": [127, -127, 0, 1, 42]}
{"index": {"_id" : "2"}}
{"my_vector": "8100012a7f"}

GET my-rank-vectors-bit/_search
{
  "query": {
    "script_score": {
      "query": {
        "match_all": {}
      },
      "script": {
        "source": "maxSimDotProduct(params.query_vector, 'my_vector')",
        "params": {
          "query_vector": [
            [0.35, 0.77, 0.95, 0.15, 0.11, 0.08, 0.58, 0.06, 0.44, 0.52, 0.21,
       0.62, 0.65, 0.16, 0.64, 0.39, 0.93, 0.06, 0.93, 0.31, 0.92, 0.0,
       0.66, 0.86, 0.92, 0.03, 0.81, 0.31, 0.2 , 0.92, 0.95, 0.64, 0.19,
       0.26, 0.77, 0.64, 0.78, 0.32, 0.97, 0.84]
           ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Mapping a Completion Field in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create an index mapping with a completion field named 'suggest'. The completion field type is specifically designed for fast completion suggestions in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/completion.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
PUT music
{
  "mappings": {
    "properties": {
      "suggest": {
        "type": "completion"
      }
    }
  }
}
```

----------------------------------------

TITLE: Boolean Filter Query with Match All in Elasticsearch
DESCRIPTION: This example combines a `match_all` query within the `must` clause and a `term` filter in the `filter` clause. This means all documents are matched by `match_all` and then filtered to only include documents where `status` is `active`. The score for all matched documents will be `1.0` due to the `match_all` query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-bool-query.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET _search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "term": {
          "status": "active"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Executing Elasticsearch Wildcard Query via Console
DESCRIPTION: This snippet shows a basic Elasticsearch search request using the `wildcard` query. It targets the `user.id` field, searching for terms matching the pattern `ki*y` and specifying optional parameters like `boost` and `rewrite`. This example illustrates finding terms like `kiy`, `kity`, or `kimchy`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-wildcard-query.md#_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "wildcard": {
      "user.id": {
        "value": "ki*y",
        "boost": 1.0,
        "rewrite": "constant_score_blended"
      }
    }
  }
}
```

----------------------------------------

TITLE: YAML Configuration for elasticsearch-certutil Silent Mode
DESCRIPTION: This YAML configuration defines instances for certificate generation in silent mode. It includes options for specifying instance names, IP addresses, DNS names, and custom filenames.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/certutil.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
instances:
  - name: "node1"
    ip:
      - "192.0.2.1"
    dns:
      - "node1.mydomain.com"
  - name: "node2"
    ip:
      - "192.0.2.2"
      - "198.51.100.1"
  - name: "node3"
  - name: "node4"
    dns:
      - "node4.mydomain.com"
      - "node4.internal"
  - name: "CN=node5,OU=IT,DC=mydomain,DC=com"
    filename: "node5"
```

----------------------------------------

TITLE: Adding Source Document to Elasticsearch Bulk Request
DESCRIPTION: Method to add a document with specified index, type, and ID to the bulk request with source content provided in various formats. This is a convenience method for creating and adding an IndexRequest.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/repository-gcs/licenses/google-http-NOTICE.txt#2025-04-21_snippet_4

LANGUAGE: java
CODE:
```
public BulkRequest add(String index, String type, String id, Object source) {
    return add(new IndexRequest(index, type, id).source(source));
}
```

----------------------------------------

TITLE: Example Elastic Connector config.yml YAML
DESCRIPTION: Provides a comprehensive example of the `config.yml` file structure for running Elastic connectors from source. It includes the top-level `elasticsearch` credentials and demonstrates how to configure multiple connectors with individual or inherited API keys.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-run-from-source.md#_snippet_2

LANGUAGE: yaml
CODE:
```
elasticsearch:
  api_key: <key1> # Used to write data to .elastic-connectors and .elastic-connectors-sync-jobs
                    # Any connectors without a specific `api_key` value will default to using this key
connectors:
  - connector_id: 1234
    api_key: <key2> # Used to write data to the `search-*` index associated with connector 1234
                        # You may have multiple connectors in your config file!
  - connector_id: 5678
    api_key: <key3> # Used to write data to the `search-*` index associated with connector 5678
  - connector_id: abcd # No explicit api key specified, so this connector will use <key1>
```

----------------------------------------

TITLE: Querying Nested Documents with Inner Hits in Elasticsearch
DESCRIPTION: Shows how to query nested documents and retrieve inner hits in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-inner-hits.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST test/_search
{
  "query": {
    "nested": {
      "path": "comments",
      "query": {
        "match": {"comments.number" : 2}
      },
      "inner_hits": {} <1>
    }
  }
}
```

----------------------------------------

TITLE: Enabling Slow Logging for Search Requests in Elasticsearch
DESCRIPTION: This snippet demonstrates how to enable slow logging for search requests using the update indices settings API. It sets the warn threshold to 30 seconds for both fetch and query operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/slow-log.md#2025-04-21_snippet_6

LANGUAGE: json
CODE:
```
PUT /*/_settings
{
  "index.search.slowlog.include.user": true,
  "index.search.slowlog.threshold.fetch.warn": "30s",
  "index.search.slowlog.threshold.query.warn": "30s"
}
```

----------------------------------------

TITLE: Russian Custom Analyzer Implementation
DESCRIPTION: Details the reimplementation of the Russian analyzer with stop words, keyword marking, and stemming capabilities.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_24

LANGUAGE: console
CODE:
```
PUT /russian_example
{
  "settings": {
    "analysis": {
      "filter": {
        "russian_stop": {
          "type":       "stop",
          "stopwords":  "_russian_"
        },
        "russian_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["пример"]
        },
        "russian_stemmer": {
          "type":       "stemmer",
          "language":   "russian"
        }
      },
      "analyzer": {
        "rebuilt_russian": {
          "tokenizer":  "standard",
          "filter": [
            "lowercase",
            "russian_stop",
            "russian_keywords",
            "russian_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Implementing Arabic Analyzer as Custom Analyzer in Elasticsearch
DESCRIPTION: Creates a custom analyzer that replicates the functionality of the built-in Arabic analyzer, demonstrating how to configure stopwords, keyword markers for stem exclusion, and Arabic-specific stemming and normalization filters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /arabic_example
{
  "settings": {
    "analysis": {
      "filter": {
        "arabic_stop": {
          "type":       "stop",
          "stopwords":  "_arabic_" 
        },
        "arabic_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["مثال"] 
        },
        "arabic_stemmer": {
          "type":       "stemmer",
          "language":   "arabic"
        }
      },
      "analyzer": {
        "rebuilt_arabic": {
          "tokenizer":  "standard",
          "filter": [
            "lowercase",
            "decimal_digit",
            "arabic_stop",
            "arabic_normalization",
            "arabic_keywords",
            "arabic_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Execute Painless Script to Extract IP Address from Log Message
DESCRIPTION: This snippet executes a Painless script using the _execute API in the 'ip_field' context. The script utilizes a Grok pattern (%{COMMONAPACHELOG}) to extract the clientip from the 'message' field and emits the extracted IP address if found. It demonstrates processing unstructured log data within a runtime field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_15

LANGUAGE: console
CODE:
```
POST /_scripts/painless/_execute
{
  "script": {
    "source": """
      String clientip=grok('%{COMMONAPACHELOG}').extract(doc["message"].value)?.clientip;
      if (clientip != null) emit(clientip);
    """
  },
  "context": "ip_field",
  "context_setup": {
    "index": "my-index-000001",
    "document": {
      "message": "40.135.0.0 - - [30/Apr/2020:14:30:17 -0500] \"GET /images/hm_bg.jpg HTTP/1.0\" 200 24736"
    }
  }
}
```

----------------------------------------

TITLE: Setting Up Optimized Text Analysis for Percolator
DESCRIPTION: Creates an index with custom analyzer configuration for optimized query time text analysis.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/percolator.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
PUT /test_index
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer" : {
          "tokenizer": "standard",
          "filter" : ["lowercase", "porter_stem"]
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "query" : {
        "type": "percolator"
      },
      "body" : {
        "type": "text",
        "analyzer": "my_analyzer"
      }
    }
  }
}
```

----------------------------------------

TITLE: Basic Rare Terms Aggregation in Elasticsearch
DESCRIPTION: Demonstrates the basic syntax for a rare terms aggregation, showing the required 'field' parameter and optional 'max_doc_count' parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-rare-terms-aggregation.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
{
  "rare_terms": {
    "field": "the_field",
    "max_doc_count": 1
  }
}
```

----------------------------------------

TITLE: Creating Basic Role Descriptor with Monitor and Read Permissions in Elasticsearch
DESCRIPTION: This role descriptor grants cluster monitor permission and read/create index privileges on 'test*' indices with field security and a match_all query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/src/test/resources/org/elasticsearch/xpack/security/audit/logfile/audited_roles.txt#2025-04-22_snippet_1

LANGUAGE: JSON
CODE:
```
{"cluster":["monitor"],"indices":[{"names":["test*"],"privileges":["read","create_index"],"field_security":{"grant":["grantedField1"]},"query":"{\"match_all\":{}}","allow_restricted_indices":true}],"applications":[],"run_as":[]}
```

----------------------------------------

TITLE: Creating an Index with Multiple Analyzers for a Field in Elasticsearch
DESCRIPTION: This snippet shows how to create an index with a text field that uses multiple analyzers. The 'text' field uses the standard analyzer, while 'text.english' uses the English analyzer for stemming.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/multi-fields.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "text": {
        "type": "text",
        "fields": {
          "english": {
            "type":     "text",
            "analyzer": "english"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Performing Division in SQL
DESCRIPTION: Illustrates the use of the division operator (/) to divide one numeric value by another in a SQL query. The result is returned as a column named 'x'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-operators-math.md#_snippet_4

LANGUAGE: sql
CODE:
```
SELECT 6 / 3 AS x;
```

----------------------------------------

TITLE: Searching with Geo-bounding Box Query for Multiple Indices
DESCRIPTION: The snippet enables searching both geo_point and geo_shape data across multiple indices using a geo_bounding_box filter. Necessary prerequisites include multiple indexed mappings in Elasticsearch. The queries return documents from both indices that intersect the specified bounding box.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-bounding-box-query.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET my_locations,my_geoshapes/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_bounding_box": {
          "pin.location": {
            "top_left": {
              "lat": 40.73,
              "lon": -74.1
            },
            "bottom_right": {
              "lat": 40.01,
              "lon": -71.12
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Testing Log Function with Base 10 in ESQL
DESCRIPTION: This SQL query tests the log function with base 10 for various input values. It covers positive numbers, zero, and negative numbers, demonstrating the function's behavior and null handling.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/log.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
SELECT
    log(10, null::LONG) AS null_long,
    log(10, null::DOUBLE) AS null_double,
    log(10, null::INTEGER) AS null_integer,
    log(10, 1) AS one,
    log(10, 10) AS ten,
    log(10, 100) AS hundred,
    log(10, 0.1) AS tenth,
    log(10, 0) AS zero,
    log(10, -1) AS negative;
```

----------------------------------------

TITLE: Executing Elasticsearch Search Query in Java
DESCRIPTION: This code snippet shows how to execute a search query in Elasticsearch using the Java client. It builds a search request, executes it, and retrieves the response. The search query includes a match query for the 'user' field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/inference/licenses/reactive-streams-NOTICE.txt#2025-04-22_snippet_1

LANGUAGE: Java
CODE:
```
SearchRequest searchRequest = new SearchRequest("posts");
SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();
searchSourceBuilder.query(QueryBuilders.matchQuery("user", "kimchy"));
searchRequest.source(searchSourceBuilder);

SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);
```

----------------------------------------

TITLE: Performing KNN Search using Elasticsearch Retriever (Console/JSON)
DESCRIPTION: This snippet demonstrates how to perform a k-nearest neighbor (knn) search within Elasticsearch using the `retriever` structure. It targets the `/restaurants/_search` endpoint, specifying the vector `field`, the `query_vector` for comparison, the desired number of nearest neighbors (`k`), and the size of the candidate set (`num_candidates`). The search returns documents with vectors similar to the `query_vector` based on the specified distance metric (implicit in field mapping).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrievers.md#_snippet_1

LANGUAGE: console
CODE:
```
GET /restaurants/_search
{
  "retriever": {
    "knn": { <1>
      "field": "vector", <2>
      "query_vector": [10, 22, 77], <3>
      "k": 10, <4>
      "num_candidates": 10 <5>
    }
  }
}
```

----------------------------------------

TITLE: Creating Mapping with copy_to using semantic_text field - Console
DESCRIPTION: This snippet demonstrates how to create an index mapping in Elasticsearch where a standard `text` field (`source_field`) automatically copies its content to a `semantic_text` field (`infer_field`) using the `copy_to` parameter. The `semantic_text` field is configured with a specific inference ID.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/semantic-text.md#_snippet_5

LANGUAGE: Console
CODE:
```
PUT test-index
{
    "mappings": {
        "properties": {
            "source_field": {
                "type": "text",
                "copy_to": "infer_field"
            },
            "infer_field": {
                "type": "semantic_text",
                "inference_id": ".elser-2-elasticsearch"
            }
        }
    }
}
```

----------------------------------------

TITLE: Setting Up Search-as-You-Type with Edge N-gram in Elasticsearch
DESCRIPTION: Complete example of setting up a search-as-you-type field using edge_ngram tokenizer for indexing and a different analyzer for searching. Includes creating an index, configuring analyzers, indexing a document, and executing a search.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-edgengram-tokenizer.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "autocomplete": {
          "tokenizer": "autocomplete",
          "filter": [
            "lowercase"
          ]
        },
        "autocomplete_search": {
          "tokenizer": "lowercase"
        }
      },
      "tokenizer": {
        "autocomplete": {
          "type": "edge_ngram",
          "min_gram": 2,
          "max_gram": 10,
          "token_chars": [
            "letter"
          ]
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "title": {
        "type": "text",
        "analyzer": "autocomplete",
        "search_analyzer": "autocomplete_search"
      }
    }
  }
}

PUT my-index-000001/_doc/1
{
  "title": "Quick Foxes"
}

POST my-index-000001/_refresh

GET my-index-000001/_search
{
  "query": {
    "match": {
      "title": {
        "query": "Quick Fo",
        "operator": "and"
      }
    }
  }
}
```

----------------------------------------

TITLE: Querying and Aggregating Elasticsearch Runtime Field (Console)
DESCRIPTION: This snippet demonstrates a console command (likely cURL) for searching the 'seats' index. It sets the size to 0 to only retrieve aggregations. It includes the 'day_of_week' runtime field in the 'fields' list (though not needed for aggregation size 0) and defines a 'terms' aggregation on the 'day_of_week' field. This causes Elasticsearch to execute the runtime field's Painless script for each document to calculate the field's value and then perform the aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-runtime-fields-context.md#_snippet_1

LANGUAGE: console
CODE:
```
GET seats/_search
{
  "size": 0,
  "fields": [
    "time",
    "day_of_week"
    ],
    "aggs": {
      "day_of_week": {
        "terms": {
          "field": "day_of_week",
          "size": 10
        }
      }
    }
}
```

----------------------------------------

TITLE: Creating Index and Indexing Geo-point Data in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create an index with a geo_point field and index sample museum location data using the bulk API.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-geohashgrid-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /museums
{
  "mappings": {
    "properties": {
      "location": {
        "type": "geo_point"
      }
    }
  }
}

POST /museums/_bulk?refresh
{"index":{"_id":1}}
{"location": "POINT (4.912350 52.374081)", "name": "NEMO Science Museum"}
{"index":{"_id":2}}
{"location": "POINT (4.901618 52.369219)", "name": "Museum Het Rembrandthuis"}
{"index":{"_id":3}}
{"location": "POINT (4.914722 52.371667)", "name": "Nederlands Scheepvaartmuseum"}
{"index":{"_id":4}}
{"location": "POINT (4.405200 51.222900)", "name": "Letterenhuis"}
{"index":{"_id":5}}
{"location": "POINT (2.336389 48.861111)", "name": "Musée du Louvre"}
{"index":{"_id":6}}
{"location": "POINT (2.327000 48.860000)", "name": "Musée d'Orsay"}
```

----------------------------------------

TITLE: Basic LIMIT Clause Usage
DESCRIPTION: Shows how to limit result set to a single record.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_29

LANGUAGE: sql
CODE:
```
SELECT first_name, last_name, emp_no FROM emp LIMIT 1;
```

----------------------------------------

TITLE: Filtering Null Values in ESQL Query
DESCRIPTION: An ESQL query that filters employee records where the birth_date field is null. The query returns only employees with null birth dates, showing their first and last names in the result set.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/examples/is_null.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| WHERE birth_date IS NULL
```

----------------------------------------

TITLE: Query String Search Request
DESCRIPTION: This code snippet demonstrates a basic search request using the `query_string` query in Elasticsearch. It searches the `content` field for documents matching the query `(new york city) OR (big apple)`. The query string is split into two parts and analyzed independently.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "query_string": {
      "query": "(new york city) OR (big apple)",
      "default_field": "content"
    }
  }
}
```

----------------------------------------

TITLE: Searching with Rescorer Retriever wrapping RRF | Elasticsearch Console
DESCRIPTION: Demonstrates a search request using the `rescorer` retriever wrapping an `rrf` retriever. It applies a `script_score` rescore query to the top documents returned by the child `rrf` retriever, which combines results from standard text search and kNN vector search. Required dependencies include an index (`movies`), relevant fields (`plot_embedding`, `product-vector_final_stage`, `vector`), and potentially a language model (`my-elser-model`).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrievers.md#_snippet_4

LANGUAGE: console
CODE:
```
GET movies/_search
{
  "size": 10,
  "retriever": {
    "rescorer": {
      "rescore": {
        "window_size": 50,
        "query": {
          "rescore_query": {
            "script_score": {
              "query": {
                "match_all": {}
              },
              "script": {
                "source": "cosineSimilarity(params.queryVector, 'product-vector_final_stage') + 1.0",
                "params": {
                  "queryVector": [-0.5, 90.0, -10, 14.8, -156.0]
                }
              }
            }
          }
        }
      },
      "retriever": {
        "rrf": {
          "rank_window_size": 100,
          "retrievers": [
            {
              "standard": {
                "query": {
                  "sparse_vector": {
                    "field": "plot_embedding",
                    "inference_id": "my-elser-model",
                    "query": "films that explore psychological depths"
                  }
                }
              }
            },
            {
              "standard": {
                "query": {
                  "multi_match": {
                    "query": "crime",
                    "fields": [
                      "plot",
                      "title"
                    ]
                  }
                }
              }
            },
            {
              "knn": {
                "field": "vector",
                "query_vector": [10, 22, 77],
                "k": 10,
                "num_candidates": 10
              }
            }
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Calculating Average Salary using ESQL
DESCRIPTION: This ESQL query computes the average salary from the employees table using the AVG function. It demonstrates the use of the STATS clause for aggregation in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/stats.csv-spec/statsUnnamedColumn.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS AVG(salary)
```

----------------------------------------

TITLE: Indexing Data and Computing Global Geo-centroid Aggregation (Elasticsearch Console)
DESCRIPTION: This snippet demonstrates how to set up an index with a geo_point mapping, bulk index several documents containing 'location' data, and then execute a search request using the geo_centroid aggregation on the 'location' field to calculate the overall centroid of all documents. Requires an Elasticsearch cluster running.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-geocentroid-aggregation.md#_snippet_0

LANGUAGE: Elasticsearch Console
CODE:
```
PUT /museums
{
  "mappings": {
    "properties": {
      "location": {
        "type": "geo_point"
      }
    }
  }
}

POST /museums/_bulk?refresh
{"index":{"_id":1}}
{"location": "POINT (4.912350 52.374081)", "city": "Amsterdam", "name": "NEMO Science Museum"}
{"index":{"_id":2}}
{"location": "POINT (4.901618 52.369219)", "city": "Amsterdam", "name": "Museum Het Rembrandthuis"}
{"index":{"_id":3}}
{"location": "POINT (4.914722 52.371667)", "city": "Amsterdam", "name": "Nederlands Scheepvaartmuseum"}
{"index":{"_id":4}}
{"location": "POINT (4.405200 51.222900)", "city": "Antwerp", "name": "Letterenhuis"}
{"index":{"_id":5}}
{"location": "POINT (2.336389 48.861111)", "city": "Paris", "name": "Musée du Louvre"}
{"index":{"_id":6}}
{"location": "POINT (2.327000 48.860000)", "city": "Paris", "name": "Musée d'Orsay"}

POST /museums/_search?size=0
{
  "aggs": {
    "centroid": {
      "geo_centroid": {
        "field": "location"
      }
    }
  }
}
```

----------------------------------------

TITLE: Format Date with DATETIME_FORMAT - SQL
DESCRIPTION: Example using DATETIME_FORMAT to format a date value into a 'dd/MM/yyyy' string.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_45

LANGUAGE: SQL
CODE:
```
SELECT DATETIME_FORMAT(CAST('2020-04-05' AS DATE), 'dd/MM/yyyy') AS "date";
```

----------------------------------------

TITLE: Pivoting and Ordering Results with LIMIT
DESCRIPTION: This SQL snippet shows how to apply `ORDER BY` and `LIMIT` clauses after performing a pivot operation. This allows for refined control over the output, enabling users to view a specific number of results ordered in descending order based on the `languages` column.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_33

LANGUAGE: sql
CODE:
```
SELECT * FROM (SELECT languages, gender, salary FROM test_emp) PIVOT (AVG(salary) FOR gender IN ('F')) ORDER BY languages DESC LIMIT 4;
```

----------------------------------------

TITLE: Nested Boolean Query in Elasticsearch
DESCRIPTION: This example shows how to nest boolean queries within each other in Elasticsearch. This allows for complex logical combinations of search conditions. The example demonstrates combining `must` and `should` clauses within nested `bool` queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-bool-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "bool": {
      "must": [ <1>
        {
          "bool": {
            "should": [
              { "match": { "user.id": "kimchy" }},
              { "match": { "user.id": "banon" }}
            ]
          }
        },
        { "match": { "tags": "production" }}
      ],
      "should": [ <2>
        {
          "bool": {
            "must": [
              { "match": { "status": "active" }},
              { "match": { "title": "quick brown fox" }}
            ]
          }
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Querying geo_point data with geo_distance filter in Elasticsearch
DESCRIPTION: This snippet shows how to use the `geo_distance` filter to search for `geo_point` values within a specified distance of a given geopoint in Elasticsearch.  It uses a bool query with a `match_all` clause and a `geo_distance` filter to find documents within 200km of latitude 40 and longitude -70.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-distance-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /my_locations/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_distance": {
          "distance": "200km",
          "pin.location": {
            "lat": 40,
            "lon": -70
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Basic Date Truncation with KEEP and EVAL
DESCRIPTION: Shows how to truncate hire dates to year precision while keeping specific columns. Uses KEEP to select columns and EVAL to create a new column with truncated dates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/date_trunc.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP first_name, last_name, hire_date
| EVAL year_hired = DATE_TRUNC(1 year, hire_date)
```

----------------------------------------

TITLE: Calculating Message Age in Painless Script
DESCRIPTION: This Painless script is used within Elasticsearch to calculate and return the age of a message. It determines the elapsed time between 'now' and a message timestamp in years, months, days, hours, minutes, and seconds. The inputs include a parameter for the current time and expect an Elasticsearch document with a 'datetime' field. The script processes each unit of time until it reaches the level of seconds.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_32

LANGUAGE: painless
CODE:
```
ZonedDateTime now = ZonedDateTime.ofInstant(
        Instant.ofEpochMilli(params['now']), ZoneId.of('Z')); <1>
ZonedDateTime mdt = doc['datetime'].value; <2>

String age;

long years = mdt.until(now, ChronoUnit.YEARS); <3>
age = years + 'Y '; <4>
mdt = mdt.plusYears(years); <5>

long months = mdt.until(now, ChronoUnit.MONTHS);
age += months + 'M ';
mdt = mdt.plusMonths(months);

long days = mdt.until(now, ChronoUnit.DAYS);
age += days + 'D ';
mdt = mdt.plusDays(days);

long hours = mdt.until(now, ChronoUnit.HOURS);
age += hours + 'h ';
mdt = mdt.plusHours(hours);

long minutes = mdt.until(now, ChronoUnit.MINUTES);
age += minutes + 'm ';
mdt = mdt.plusMinutes(minutes);

long seconds = mdt.until(now, ChronoUnit.SECONDS);
age += hours + 's';

return age; <6>
```

----------------------------------------

TITLE: Creating Finnish Custom Analyzer in Elasticsearch
DESCRIPTION: This snippet outlines how to create a custom analyzer for Finnish language texts in Elasticsearch. It emphasizes the use of stop words, keywords, and a stemmer to optimize language processing and indexing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_13

LANGUAGE: json
CODE:
```
PUT /finnish_example
{
  "settings": {
    "analysis": {
      "filter": {
        "finnish_stop": {
          "type":       "stop",
          "stopwords":  "_finnish_" <1>
        },
        "finnish_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["esimerkki"] <2>
        },
        "finnish_stemmer": {
          "type":       "stemmer",
          "language":   "finnish"
        }
      },
      "analyzer": {
        "rebuilt_finnish": {
          "tokenizer":  "standard",
          "filter": [
            "lowercase",
            "finnish_stop",
            "finnish_keywords",
            "finnish_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Optimized Composite Aggregation with track_total_hits in Elasticsearch
DESCRIPTION: This example demonstrates how to optimize early termination in composite aggregations by setting track_total_hits to false. This approach is recommended for efficient pagination of results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_21

LANGUAGE: console
CODE:
```
GET /_search
{
  "size": 0,
  "track_total_hits": false,
  "aggs": {
    "my_buckets": {
      "composite": {
        "sources": [
          { "user_name": { "terms": { "field": "user_name" } } },
          { "date": { "date_histogram": { "field": "timestamp", "calendar_interval": "1d", "order": "desc" } } }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Useful OpenSSL Commands for Certificate Management in Elasticsearch
DESCRIPTION: This snippet provides a set of OpenSSL commands useful for certificate management tasks such as checking private keys, reading public and private keys from PKCS12 files, decoding PEM-formatted public keys, and showing certificates from a URL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/build-tools-internal/src/main/resources/run.ssl/readme.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
openssl rsa -in private-ca.key -check # check private key
openssl pkcs12 -info -in private-cert$i.p12 -nodes -nocerts # read private keys from p12
openssl pkcs12 -info -in private-cert$i.p12 -nodes -nokeys # read public keys from p12
openssl x509 -in public-cert$i.pem -text # decode PEM formatted public key
openssl s_client -showcerts -connect localhost:9200 </dev/null # show cert from URL
```

----------------------------------------

TITLE: Using Operator in Match Query
DESCRIPTION: This code snippet illustrates the utilization of the 'operator' parameter set to 'and' in a match query, ensuring that all terms must be present in the searched documents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-match-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "match": {
      "message": {
        "query": "this is a test",
        "operator": "and"
      }
    }
  }
}
```

----------------------------------------

TITLE: Retrieving Only ID and Type with Stored Fields in Elasticsearch Console
DESCRIPTION: This console command shows a specific use case of `stored_fields` where providing an empty array `[]` results in the search hit only returning the `_id` and `_type` for each document, while explicitly ignoring all other stored fields and metadata fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_20

LANGUAGE: console
CODE:
```
GET /_search
{
  "stored_fields" : [],
  "query" : {
    "term" : { "user" : "kimchy" }
  }
}
```

----------------------------------------

TITLE: Querying Elasticsearch Nodes by Filter
DESCRIPTION: Demonstrates how to use various node filters with the Elasticsearch _nodes API endpoint to select specific nodes based on criteria like name, address, role, or custom attributes. Filters are applied sequentially, affecting the resulting set of nodes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/api-conventions.md#_snippet_12

LANGUAGE: sh
CODE:
```
# If no filters are given, the default is to select all nodes
GET /_nodes
# Explicitly select all nodes
GET /_nodes/_all
# Select just the local node
GET /_nodes/_local
# Select the elected master node
GET /_nodes/_master
# Select nodes by name, which can include wildcards
GET /_nodes/node_name_goes_here
GET /_nodes/node_name_goes_*
# Select nodes by address, which can include wildcards
GET /_nodes/10.0.0.3,10.0.0.4
GET /_nodes/10.0.0.*
# Select nodes by role
GET /_nodes/_all,master:false
GET /_nodes/data:true,ingest:true
GET /_nodes/coordinating_only:true
GET /_nodes/master:true,voting_only:false
# Select nodes by custom attribute
# (for example, with something like `node.attr.rack: 2` in the configuration file)
GET /_nodes/rack:2
GET /_nodes/ra*:2
GET /_nodes/ra*:2*
```

----------------------------------------

TITLE: Relative Date Filtering with TODAY and Interval in Elasticsearch SQL
DESCRIPTION: This snippet queries the `emp` table to find employees hired more than 35 years before today's date. It uses the `TODAY()` function (similar to `CURDATE()`) combined with interval subtraction for relative date comparison in the WHERE clause, ordering by first name and limiting results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_12

LANGUAGE: SQL
CODE:
```
SELECT first_name FROM emp WHERE hire_date > TODAY() - INTERVAL 35 YEARS ORDER BY first_name ASC LIMIT 5;
```

----------------------------------------

TITLE: Authenticating with Service Token via Curl - Shell
DESCRIPTION: Provides an example of how to use the generated service account bearer token to authenticate an API request to Elasticsearch using `curl`. It shows setting the HTTP `Authorization` header with the `Bearer` scheme followed by the token value to access a protected endpoint like `_cluster/health`. This demonstrates a common client-side usage pattern for the token.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/service-tokens-command.md#_snippet_3

LANGUAGE: shell
CODE:
```
curl -H "Authorization: Bearer AAEAAWVsYXN0aWM...vZmxlZXQtc2VydmVyL3Rva2VuMTo3TFdaSDZ" http://localhost:9200/_cluster/health
```

----------------------------------------

TITLE: Analyzing Text with Keyword Tokenizer
DESCRIPTION: Demonstrates the basic usage of the keyword tokenizer, which outputs the entire input text as a single term without breaking it into multiple tokens
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-keyword-tokenizer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _analyze
{
  "tokenizer": "keyword",
  "text": "New York"
}
```

----------------------------------------

TITLE: Sorting by Aggregation with LIMIT Elasticsearch SQL
DESCRIPTION: Demonstrates the recommended approach for sorting by an aggregation ('COUNT(*)') when using 'GROUP BY'. Using 'LIMIT' helps manage the results and avoid exceptions when the number of rows exceeds internal limits for client-side sorting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-limitations.md#_snippet_5

LANGUAGE: SQL
CODE:
```
SELECT * FROM test GROUP BY age ORDER BY COUNT(*) LIMIT 100;
```

----------------------------------------

TITLE: Setting index-wide ignore_above in Elasticsearch
DESCRIPTION: This snippet demonstrates how to configure the index.mapping.ignore_above setting when creating a new index. It sets a maximum string length of 256 characters for all applicable fields in the index.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/index-mapping-ignore-above.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "index.mapping.ignore_above": 256
  }
}
```

----------------------------------------

TITLE: Calculating Elapsed Time Using Numeric 'Now' Parameter in Painless
DESCRIPTION: Painless script that uses a numeric representation of the current time passed as a parameter to calculate the elapsed time since a datetime field value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_24

LANGUAGE: painless
CODE:
```
long now = params['now'];
ZonedDateTime inputDateTime = doc['input_datetime'];
long millisDateTime = inputDateTime.toInstant().toEpochMilli();
long elapsedTime = now - millisDateTime;
```

----------------------------------------

TITLE: Multi-match Most Fields Type Query in Elasticsearch
DESCRIPTION: Provides an example of the 'most_fields' multi-match type, which combines scores from all matching fields. This type is often useful for querying fields containing the same text analyzed in different ways.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-multi-match-query.md#_snippet_6

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "multi_match" : {
      "query":      "quick brown fox",
      "type":       "most_fields",
      "fields":     [ "title", "title.original", "title.shingles" ]
    }
  }
}
```

----------------------------------------

TITLE: Format DATE using TO_CHAR in Elasticsearch SQL
DESCRIPTION: Demonstrates formatting a DATE value into a string using the TO_CHAR function with a 'DD/MM/YYYY' pattern. The input is a casted date literal '2020-04-05'. The function returns the date as a formatted string according to PostgreSQL patterns.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_53

LANGUAGE: SQL
CODE:
```
SELECT TO_CHAR(CAST('2020-04-05' AS DATE), 'DD/MM/YYYY') AS "date";
```

----------------------------------------

TITLE: Process Sequence Query Example
DESCRIPTION: Query to match sequence of process events sharing same PID value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_19

LANGUAGE: eql
CODE:
```
sequence by process.pid
  [ process where event.type == "start" and process.name == "cmd.exe" ]
  [ process where file.extension == "exe" ]
```

----------------------------------------

TITLE: Example Term Query Search (Console)
DESCRIPTION: Demonstrates how to use the `term` query to search for documents where the `user.id` field contains the exact value "kimchy". Includes the `boost` parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-term-query.md#_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "term": {
      "user.id": {
        "value": "kimchy",
        "boost": 1.0
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing Doc with Synthetic Source Keyword Default in Elasticsearch Console
DESCRIPTION: Shows how to create an index with synthetic source enabled and a basic 'keyword' field, then index a document with duplicate and unsorted values. Under default synthetic source behavior, multi-value keyword fields are sorted and deduplicated in the synthetic _source representation. Requires an running Elasticsearch instance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/keyword.md#_snippet_1

LANGUAGE: Console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "kwd": { "type": "keyword" }
    }
  }
}
PUT idx/_doc/1
{
  "kwd": ["foo", "foo", "bar", "baz"]
}
```

----------------------------------------

TITLE: Querying Employee Language Stats with ESQL
DESCRIPTION: ESQL query that performs employee count aggregation grouped by number of languages known. Uses COUNT aggregation function with GROUP BY clause and sorts results by the languages field. Includes null handling for employees with no language data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/stats.csv-spec/stats.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS count = COUNT(emp_no) BY languages
| SORT languages
```

----------------------------------------

TITLE: Simple ESQL FROM Query
DESCRIPTION: Demonstrates a basic ESQL query using the FROM command to retrieve data from an 'employees' index.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/from.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM employees
```

----------------------------------------

TITLE: Running Docker Image with Elastic Connector Service
DESCRIPTION: The command runs the Elastic Connector Service within a Docker container, utilizing the specified configuration file. It requires Docker to be installed and the configuration directory to be mapped to the appropriate path. The service connects to the Elasticsearch instance to ingest data as configured.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-gmail.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network \"elastic\" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Querying and Sorting Employee Data with ESQL
DESCRIPTION: This ESQL query retrieves employee data, selects specific columns, and sorts the results. It keeps only the first_name, last_name, and height fields, then sorts the data in descending order by height and ascending order by first name.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/sortTie.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP first_name, last_name, height
| SORT height DESC, first_name ASC
```

----------------------------------------

TITLE: Reciprocal Rank Fusion with Sparse Vector Queries
DESCRIPTION: Demonstrates using Reciprocal Rank Fusion (RRF) to combine multiple retrievers including sparse vector and multi-match queries
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-sparse-vector-query.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET my-index/_search
{
  "retriever": {
    "rrf": {
      "retrievers": [
        {
          "standard": {
            "query": {
              "multi_match": {
                "query": "How is the weather in Jamaica?",
                "fields": [
                  "title",
                  "description"
                ]
              }
            }
          }
        },
        {
          "standard": {
            "query": {
              "sparse_vector": {
                "field": "ml.inference.title_expanded.predicted_value",
                "inference_id": "my-elser-model",
                "query": "How is the weather in Jamaica?",
                "boost": 1
              }
            }
          }
        },
        {
          "standard": {
            "query": {
              "sparse_vector": {
                "field": "ml.inference.description_expanded.predicted_value",
                "inference_id": "my-elser-model",
                "query": "How is the weather in Jamaica?",
                "boost": 1
              }
            }
          }
        }
      ],
      "window_size": 10,
      "rank_constant": 20
    }
  }
}
```

----------------------------------------

TITLE: Case-Sensitive LIKE on Text Field (ESQL)
DESCRIPTION: Illustrates the behavior of the `LIKE` operator on a `text` field in ESQL. Because ESQL treats `text` fields like `keyword` fields unless explicit full-text functions are used, the `LIKE` comparison is case-sensitive and will not match "Elasticsearch query language" if the field value is "Elasticsearch query language".
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/limitations.md#_snippet_2

LANGUAGE: esql
CODE:
```
| WHERE field LIKE "elasticsearch query language"
```

----------------------------------------

TITLE: Creating and Populating Geopoint Index
DESCRIPTION: Example showing different ways to specify geopoints in Elasticsearch, including GeoJSON, WKT, lat/lon objects, arrays, strings, and geohash formats. Also demonstrates a geo_bounding_box query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-point.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "location": {
        "type": "geo_point"
      }
    }
  }
}

PUT my-index-000001/_doc/1
{
  "text": "Geopoint as an object using GeoJSON format",
  "location": {
    "type": "Point",
    "coordinates": [-71.34, 41.12]
  }
}

PUT my-index-000001/_doc/2
{
  "text": "Geopoint as a WKT POINT primitive",
  "location" : "POINT (-71.34 41.12)"
}

PUT my-index-000001/_doc/3
{
  "text": "Geopoint as an object with 'lat' and 'lon' keys",
  "location": {
    "lat": 41.12,
    "lon": -71.34
  }
}

PUT my-index-000001/_doc/4
{
  "text": "Geopoint as an array",
  "location": [ -71.34, 41.12 ]
}

PUT my-index-000001/_doc/5
{
  "text": "Geopoint as a string",
  "location": "41.12,-71.34"
}

PUT my-index-000001/_doc/6
{
  "text": "Geopoint as a geohash",
  "location": "drm3btev3e86"
}

GET my-index-000001/_search
{
  "query": {
    "geo_bounding_box": {
      "location": {
        "top_left": {
          "lat": 42,
          "lon": -72
        },
        "bottom_right": {
          "lat": 40,
          "lon": -74
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Selecting a Column by Name
DESCRIPTION: Example of selecting a specific column from a table, where the column name is used as the output column name.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
SELECT emp_no FROM emp LIMIT 1;
```

----------------------------------------

TITLE: Reciprocal Rank Fusion with Semantic Search
DESCRIPTION: Shows how to use Reciprocal Rank Fusion (RRF) to combine standard term queries with semantic queries for improved result ranking
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-semantic-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET my-index/_search
{
  "retriever": {
    "rrf": {
      "retrievers": [
        {
          "standard": {
            "query": {
              "term": {
                "text": "shoes"
              }
            }
          }
        },
        {
          "standard": {
            "query": {
              "semantic": {
                "field": "semantic_field",
                "query": "shoes"
              }
            }
          }
        }
      ],
      "rank_window_size": 50,
      "rank_constant": 20
    }
  }
}
```

----------------------------------------

TITLE: Multi-Terms Aggregation with Sorting Example
DESCRIPTION: Example of using multi-terms aggregation with sub-aggregations to group products by genre and product name, sorted by total quantity. The query demonstrates how to combine multiple terms aggregations with a sum sub-aggregation to calculate totals.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-multi-terms-aggregation.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
GET /products/_search
{
  "aggs": {
    "genres_and_products": {
      "multi_terms": {
        "terms": [
          {
            "field": "genre"
          },
          {
            "field": "product"
          }
        ],
        "order": {
          "total_quantity": "desc"
        }
      },
      "aggs": {
        "total_quantity": {
          "sum": {
            "field": "quantity"
          }
        }
      }
    }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations" : {
    "genres_and_products" : {
      "doc_count_error_upper_bound" : 0,
      "sum_other_doc_count" : 0,
      "buckets" : [
        {
          "key" : [
            "jazz",
            "Product B"
          ],
          "key_as_string" : "jazz|Product B",
          "doc_count" : 1,
          "total_quantity" : {
            "value" : 10.0
          }
        },
        {
          "key" : [
            "rock",
            "Product A"
          ],
          "key_as_string" : "rock|Product A",
          "doc_count" : 2,
          "total_quantity" : {
            "value" : 9.0
          }
        },
        {
          "key" : [
            "electronic",
            "Product B"
          ],
          "key_as_string" : "electronic|Product B",
          "doc_count" : 1,
          "total_quantity" : {
            "value" : 3.0
          }
        },
        {
          "key" : [
            "rock",
            "Product B"
          ],
          "key_as_string" : "rock|Product B",
          "doc_count" : 1,
          "total_quantity" : {
            "value" : 1.0
          }
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Filtering for NULL Values in ESQL
DESCRIPTION: This query selects employees from the 'employees' index where the birth_date field is NULL. The result shows three employees with their first and last names displayed in the output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/examples/predicates.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| WHERE birth_date IS NULL
```

----------------------------------------

TITLE: Configuring Delete Action in Elasticsearch ILM Policy
DESCRIPTION: This snippet demonstrates how to create an ILM policy that includes a Delete action in the delete phase. The Delete action is configured without any additional options, which means it will use default settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-delete.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "delete": {
        "actions": {
          "delete" : { }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Rollover Policy with Shard Size Conditions in Elasticsearch
DESCRIPTION: This snippet defines an ILM policy that rolls over an index when the primary shard size reaches 50GB or the index is 30 days old, but only if a primary shard is at least 1GB. This prevents creating many small shards for low-volume indices.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-rollover.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "hot": {
        "actions": {
          "rollover" : {
            "max_primary_shard_size": "50gb",
            "max_age": "30d",
            "min_primary_shard_size": "1gb"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Filtering API Response in Elasticsearch
DESCRIPTION: Demonstrates how to use the filter_path parameter to reduce the response returned by Elasticsearch. It shows examples of including specific fields, using wildcards, and combining inclusive and exclusive filters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/common-options.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search?q=kimchy&filter_path=took,hits.hits._id,hits.hits._score
```

LANGUAGE: console
CODE:
```
GET /_cluster/state?filter_path=metadata.indices.*.stat*
```

LANGUAGE: console
CODE:
```
GET /_cluster/state?filter_path=routing_table.indices.**.state
```

LANGUAGE: console
CODE:
```
GET /_count?filter_path=-_shards
```

LANGUAGE: console
CODE:
```
GET /_cluster/state?filter_path=metadata.indices.*.state,-metadata.indices.logstash-*
```

----------------------------------------

TITLE: ESQL LOOKUP JOIN Query for Employee Languages
DESCRIPTION: Performs a lookup join between employees and languages_lookup tables based on language_code. Filters employees with IDs between 10091 and 10094, and maps their language codes to language names.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/lookup-join.csv-spec/filterOnLeftSide.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| EVAL language_code = languages
| WHERE emp_no >= 10091 AND emp_no < 10094
| LOOKUP JOIN languages_lookup ON language_code
```

----------------------------------------

TITLE: Calculate Script Field using doc in Elasticsearch Console
DESCRIPTION: Demonstrates how to use `script_fields` in an Elasticsearch `_search` query to compute custom values for each hit using the `painless` scripting language. It shows accessing field values via `doc['field'].value` and using optional parameters in the script. This method caches field terms for potentially faster access but consumes more memory.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_22

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "match_all": {}
  },
  "script_fields": {
    "test1": {
      "script": {
        "lang": "painless",
        "source": "doc['price'].value * 2"
      }
    },
    "test2": {
      "script": {
        "lang": "painless",
        "source": "doc['price'].value * params.factor",
        "params": {
          "factor": 2.0
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Painless Script for Aggregation
DESCRIPTION: This Painless script is embedded within an aggregation to calculate a custom cost value based on document fields `cost` and `number`.  It calculates the sum based on the product of these two values. This allows for dynamic calculation of a field within the aggregation itself.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-watcher-transform-context.md#2025-04-21_snippet_6

LANGUAGE: painless
CODE:
```
doc.cost.value * doc.number.value
```

----------------------------------------

TITLE: Evaluating Condition in Elasticsearch Watch Configuration
DESCRIPTION: A condition script that checks if the total number of hits in the payload exceeds the minimum threshold defined in metadata.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-watcher-transform-context.md#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
return ctx.payload.hits.total > ctx.metadata.min_hits
```

----------------------------------------

TITLE: Search and Highlight on comment.english Field with FVH and matched_fields (comment) - Elasticsearch DSL
DESCRIPTION: Searches `index2` and highlights the `comment.english` field using the `fvh` highlighter. It uses `matched_fields` to incorporate match information specifically from the `comment` field into the `comment.english` highlighting, showing flexibility in combining matches.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_17

LANGUAGE: Elasticsearch DSL
CODE:
```
GET index2/_search
{
  "query": {
    "query_string": {
      "query": "running with scissors",
      "fields": ["comment", "comment.english"]
    }
  },
  "highlight": {
    "order": "score",
    "fields": {
      "comment.english": {
        "type" : "fvh",
        "matched_fields": ["comment"]
      }
    }
  }
}
```

----------------------------------------

TITLE: Setting HTTP Port in Elasticsearch YAML
DESCRIPTION: Specifies the port to bind for HTTP client communication. Accepts a single value or a range. If a range is given, the node binds to the first available port in the range.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/networking-settings.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
http.port: 9200-9300
```

----------------------------------------

TITLE: Configuring GeoPoint Mapping for IP Location Data
DESCRIPTION: Creates an index mapping that explicitly defines the geoip.location field as a geo_point type to enable geographical queries and aggregations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/geoip-processor.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
PUT my_ip_locations
{
  "mappings": {
    "properties": {
      "geoip": {
        "properties": {
          "location": { "type": "geo_point" }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Foreach Processor Configuration for Object Array
DESCRIPTION: Configuration of the Foreach processor that removes the id field from each object in an array of person objects.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/foreach-processor.md#2025-04-21_snippet_4

LANGUAGE: js
CODE:
```
{
  "foreach" : {
    "field" : "persons",
    "processor" : {
      "remove" : {
        "field" : "_ingest._value.id"
      }
    }
  }
}
```

----------------------------------------

TITLE: String Enclosure in Elasticsearch EQL
DESCRIPTION: Demonstrates the correct way to enclose strings in Elasticsearch EQL using double quotes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_35

LANGUAGE: eql
CODE:
```
process_name == "example"
```

----------------------------------------

TITLE: Creating Index Mapping and Indexing Documents for RRF Example in Elasticsearch
DESCRIPTION: Sets up an Elasticsearch index with text, vector, and integer fields, then indexes five documents with various values to demonstrate Reciprocal Rank Fusion (RRF).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reciprocal-rank-fusion.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT example-index
{
    "mappings": {
        "properties": {
            "text" : {
                "type" : "text"
            },
            "vector": {
                "type": "dense_vector",
                "dims": 1,
                "index": true,
                "similarity": "l2_norm",
                 "index_options": {
                     "type": "hnsw"
                 }
            },
            "integer" : {
                "type" : "integer"
            }
        }
    }
}

PUT example-index/_doc/1
{
    "text" : "rrf",
    "vector" : [5],
    "integer": 1
}

PUT example-index/_doc/2
{
    "text" : "rrf rrf",
    "vector" : [4],
    "integer": 2
}

PUT example-index/_doc/3
{
    "text" : "rrf rrf rrf",
    "vector" : [3],
    "integer": 1
}

PUT example-index/_doc/4
{
    "text" : "rrf rrf rrf rrf",
    "integer": 2
}

PUT example-index/_doc/5
{
    "vector" : [0],
    "integer": 1
}

POST example-index/_refresh
```

----------------------------------------

TITLE: Creating Elasticsearch Shape Mapping
DESCRIPTION: This snippet shows how to create an Elasticsearch index with a mapping that includes a `shape` field. The `shape` type allows storing and querying geographical shapes. This is a prerequisite for using the shape query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-shape-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /example
{
  "mappings": {
    "properties": {
      "geometry": {
        "type": "shape"
      }
    }
  }
}
```

----------------------------------------

TITLE: Using CURRENT_TIMESTAMP Function Default Precision in Elasticsearch SQL
DESCRIPTION: This snippet demonstrates fetching the current date and time using the `CURRENT_TIMESTAMP()` function with default precision (milliseconds) in Elasticsearch SQL. It retrieves the timestamp when the query reached the server and aliases it as `result`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_21

LANGUAGE: SQL
CODE:
```
SELECT CURRENT_TIMESTAMP() AS result;
```

----------------------------------------

TITLE: Range Aggregation with Sub-aggregation in Elasticsearch
DESCRIPTION: Shows how to combine range aggregation with a stats sub-aggregation to compute statistics for each price range.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-range-aggregation.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET sales/_search
{
  "aggs": {
    "price_ranges": {
      "range": {
        "field": "price",
        "ranges": [
          { "to": 100 },
          { "from": 100, "to": 200 },
          { "from": 200 }
        ]
      },
      "aggs": {
        "price_stats": {
          "stats": { "field": "price" }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Example configuration file for self-managed connector
DESCRIPTION: This YAML snippet shows an example configuration file for a self-managed connector.  It configures the Elasticsearch host and API key, as well as the connector ID, service type, and API key for the OneDrive connector.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-onedrive.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
# When connecting to your cloud deployment you should edit the host value
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: onedrive
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA> # Optional. If not provided, the connector will use the elasticsearch.api_key instead
```

----------------------------------------

TITLE: Nested Field Sorting in Elasticsearch
DESCRIPTION: Demonstrates sorting on nested fields using the offer.price field with filtering on offer.color. Includes nested path specification and mode configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/sort-search-results.md#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
POST /_search
{
   "query" : {
      "term" : { "product" : "chocolate" }
   },
   "sort" : [
       {
          "offer.price" : {
             "mode" :  "avg",
             "order" : "asc",
             "nested": {
                "path": "offer",
                "filter": {
                   "term" : { "offer.color" : "blue" }
                }
             }
          }
       }
    ]
}
```

----------------------------------------

TITLE: Defining java.util.Map Methods in Painless
DESCRIPTION: This snippet details the methods available in the java.util.Map interface, which is crucial for key-value pair management in Painless. It includes methods for querying, modifying, and iterating over map entries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.util.txt#2025-04-21_snippet_4

LANGUAGE: java
CODE:
```
class java.util.Map {
  void clear()
  def compute(def,BiFunction)
  def computeIfAbsent(def,Function)
  def computeIfPresent(def,BiFunction)
  boolean containsKey(def)
  boolean containsValue(def)
  Set entrySet()
  boolean equals(Object)
  void forEach(BiConsumer)
  def get(def)
  def getOrDefault(def,def)
  boolean isEmpty()
  Set keySet()
  def merge(def,def,BiFunction)
  def put(def,def)
  void putAll(Map)
  def putIfAbsent(def,def)
  def remove(def)
  boolean remove(def,def)
  def replace(def,def)
  boolean replace(def,def,def)
  void replaceAll(BiFunction)
  int size()
  Collection values()
  Object org.elasticsearch.painless.api.Augmentation getByPath(String)
  Object org.elasticsearch.painless.api.Augmentation getByPath(String, Object)

  # some adaptations of groovy methods
  List org.elasticsearch.painless.api.Augmentation collect(BiFunction)
  def org.elasticsearch.painless.api.Augmentation collect(Collection,BiFunction)
  int org.elasticsearch.painless.api.Augmentation count(BiPredicate)
  def org.elasticsearch.painless.api.Augmentation each(BiConsumer)
  boolean org.elasticsearch.painless.api.Augmentation every(BiPredicate)
  Map.Entry org.elasticsearch.painless.api.Augmentation find(BiPredicate)
  Map org.elasticsearch.painless.api.Augmentation findAll(BiPredicate)
  def org.elasticsearch.painless.api.Augmentation findResult(BiFunction)
  def org.elasticsearch.painless.api.Augmentation findResult(def,BiFunction)
  List org.elasticsearch.painless.api.Augmentation findResults(BiFunction)
  Map org.elasticsearch.painless.api.Augmentation groupBy(BiFunction)
}
```

----------------------------------------

TITLE: Date Range Aggregation with Time Zone in Elasticsearch
DESCRIPTION: Demonstrates how to perform a date range aggregation with time zone conversion in Elasticsearch. The query uses the CET time zone and includes date math expressions for range boundaries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-daterange-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
   "aggs": {
       "range": {
           "date_range": {
               "field": "date",
               "time_zone": "CET",
               "ranges": [
                  { "to": "2016/02/01" },
                  { "from": "2016/02/01", "to" : "now/d" },
                  { "from": "now/d" }
              ]
          }
      }
   }
}
```

----------------------------------------

TITLE: Using Pattern Matching for Table Names
DESCRIPTION: Example of using a pattern with wildcard to match multiple indices as the table name, with the requirement that all resolved tables have the same mapping.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
SELECT emp_no FROM "e*p" LIMIT 1;
```

----------------------------------------

TITLE: Mapping Dense Vector Field with BBQ Quantization for HNSW Index in Elasticsearch (console)
DESCRIPTION: This snippet shows how to create an Elasticsearch index mapping for a `dense_vector` field utilizing BBQ (Better Binary Quantization) for its HNSW index. BBQ offers the highest memory reduction by quantizing dimensions to a single bit but requires vector dimensions greater than 64 and involves a larger accuracy cost, often mitigated by oversampling and reranking.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/dense-vector.md#_snippet_5

LANGUAGE: console
CODE:
```
PUT my-byte-quantized-index
{
  "mappings": {
    "properties": {
      "my_vector": {
        "type": "dense_vector",
        "dims": 64,
        "index": true,
        "index_options": {
          "type": "bbq_hnsw"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Format Time with DATE_FORMAT - SQL
DESCRIPTION: Formats a time value into a string using DATE_FORMAT and a pattern specific to time components.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_41

LANGUAGE: SQL
CODE:
```
SELECT DATE_FORMAT(CAST('23:22:33.987' AS TIME), '%H %i %s.%f') AS "time";
```

----------------------------------------

TITLE: Subtracting Numbers (EQL)
DESCRIPTION: Shows examples of the `subtract` function in EQL for calculating the difference between two numbers. Demonstrates subtraction with integers, floats, field values, and includes examples of how the function handles null inputs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-function-ref.md#_snippet_17

LANGUAGE: eql
CODE:
```
subtract(10, 2)                                          // returns 8
subtract(10.5, 0.5)                                      // returns 10
subtract(1, 0.2)                                         // returns 0.8
subtract(-2, 4)                                          // returns -8
subtract(-2, -4)                                         // returns 8

// process.args_count = 10
subtract(process.args_count, 6)                          // returns 4
subtract(process.args_count, 5)                          // returns 5
subtract(15, process.args_count)                         // returns 5
subtract(process.args_count, 0.5)                        // returns 9.5

// process.parent.args_count = 6
subtract(process.args_count, process.parent.args_count)  // returns 4

// null handling
subtract(null, 2)                                        // returns null
subtract(2, null)                                        // returns null
```

----------------------------------------

TITLE: Running Elasticsearch Connector Docker Image
DESCRIPTION: Executes a Docker command to run the Elasticsearch connectors image. It mounts a local configuration directory, sets network parameters, and specifies the command to initiate the connector service using a predefined configuration file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-confluence.md#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Running Elastic Connectors Docker Image
DESCRIPTION: This command runs the Elastic Connectors Docker image, mounting a local directory containing the configuration file to the /config directory inside the container.  It also sets up networking and specifies the command to start the connector service. The user must replace the placeholder with the absolute path to their configuration directory.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-run-from-docker.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
docker run \
-v "</absolute/path/to>/connectors-config:/config" \# NOTE: you must change this path to match where the config.yml is located
--rm \
--tty -i \
--network host \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Using TOP Function for Salary Analysis in ESQL
DESCRIPTION: Example query showing how to retrieve the top 3 salaries in descending order along with the maximum salary from an employees table. The TOP function returns an array of values while MAX returns a single value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/top.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS top_salaries = TOP(salary, 3, "desc"), top_salary = MAX(salary)
```

----------------------------------------

TITLE: Optimized Term Query for Percolator in Elasticsearch
DESCRIPTION: An optimized version of the wildcard query using a term query against the edge_ngram field. This approach is more efficient for the percolator to process compared to wildcard queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/percolator.md#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
PUT /my_queries1/_doc/1?refresh
{
  "query": {
    "term": {
      "my_field.prefix": "abc"
    }
  }
}
```

----------------------------------------

TITLE: Filtering with Terms Aggregation in Elasticsearch
DESCRIPTION: Shows how to combine filtering with terms aggregation to get popular models of red Gucci shirts.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/filter-search-results.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
GET /shirts/_search
{
  "query": {
    "bool": {
      "filter": [
        { "term": { "color": "red"   }},
        { "term": { "brand": "gucci" }}
      ]
    }
  },
  "aggs": {
    "models": {
      "terms": { "field": "model" }
    }
  }
}
```

----------------------------------------

TITLE: Creating an attachment pipeline and indexing a document
DESCRIPTION: Example showing how to create an attachment processor pipeline and index a document with base64-encoded data, then retrieve the processed document.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/attachment.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT _ingest/pipeline/attachment
{
  "description" : "Extract attachment information",
  "processors" : [
    {
      "attachment" : {
        "field" : "data",
        "remove_binary": true
      }
    }
  ]
}
PUT my-index-000001/_doc/my_id?pipeline=attachment
{
  "data": "e1xydGYxXGFuc2kNCkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0DQpccGFyIH0="
}
GET my-index-000001/_doc/my_id
```

----------------------------------------

TITLE: Querying Elasticsearch GeoPoint with GeoShape
DESCRIPTION: This code snippet shows how to query Elasticsearch `geo_point` fields using a `geo_shape` query with an inline shape definition. It uses the `envelope` GeoJSON extension to define a bounding box and searches for documents whose `geo_point` falls within that box using `intersects` relation. This demonstrates the compatibility of `geo_shape` queries with `geo_point` fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-shape-query.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET /example_points/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_shape": {
          "location": {
            "shape": {
              "type": "envelope",
              "coordinates": [ [ 13.0, 53.0 ], [ 14.0, 52.0 ] ]
            },
            "relation": "intersects"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Multi-Route Search Query in Elasticsearch
DESCRIPTION: Demonstrates a search query using multiple routing values to target specific shards. Uses comma-separated routing values in the query parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-shard-routing.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search?routing=my-routing-value,my-routing-value-2
{
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  }
}
```

----------------------------------------

TITLE: Deleting Service Token with elasticsearch-service-tokens - Shell
DESCRIPTION: Shows the command to delete a specific service account token from the `$ES_HOME/config/service_tokens` file. It targets the token named `my-token` associated with the `elastic/fleet-server` principal, demonstrating the required syntax for the `delete` operation to remove a token entry.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/service-tokens-command.md#_snippet_6

LANGUAGE: shell
CODE:
```
bin/elasticsearch-service-tokens delete elastic/fleet-server my-token
```

----------------------------------------

TITLE: Running elasticsearch-setup-passwords with Custom URL in Shell
DESCRIPTION: Example of using the elasticsearch-setup-passwords command with the auto option and specifying a custom URL for submitting user management API requests.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/setup-passwords.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
bin/elasticsearch-setup-passwords auto -u "http://localhost:9201"
```

----------------------------------------

TITLE: Subtract Quarters from Date with DATE_ADD - SQL
DESCRIPTION: Example showing DATE_ADD with a negative integer and the 'qq' unit to subtract 417 quarters from a date value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_28

LANGUAGE: SQL
CODE:
```
SELECT DATE_ADD('qq', -417, '2019-09-04'::date) AS "-417 quarters";
```

----------------------------------------

TITLE: Analyzing Text with Standard Analyzer in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the standard analyzer to analyze a sample text in Elasticsearch. It shows the API call and the resulting tokenization.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-standard-analyzer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _analyze
{
  "analyzer": "standard",
  "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
}
```

LANGUAGE: text
CODE:
```
[ the, 2, quick, brown, foxes, jumped, over, the, lazy, dog's, bone ]
```

----------------------------------------

TITLE: Mapping Dense Vector Field and Indexing Documents in Elasticsearch (console)
DESCRIPTION: This snippet demonstrates how to define an index mapping in Elasticsearch that includes a `dense_vector` field with 3 dimensions. It then shows how to index two documents into this index, each containing a value for the `my_vector` field and a `my_text` field. The `dense_vector` field stores an array of floating-point numbers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/dense-vector.md#_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index
{
  "mappings": {
    "properties": {
      "my_vector": {
        "type": "dense_vector",
        "dims": 3
      },
      "my_text" : {
        "type" : "keyword"
      }
    }
  }
}

PUT my-index/_doc/1
{
  "my_text" : "text1",
  "my_vector" : [0.5, 10, 6]
}

PUT my-index/_doc/2
{
  "my_text" : "text2",
  "my_vector" : [-0.5, 10, 10]
}
```

----------------------------------------

TITLE: Filtering Recent Logs Using NOW() in ESQL
DESCRIPTION: Demonstrates how to query logs from the last hour by using NOW() function with time arithmetic in a WHERE clause.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/now.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM sample_data
| WHERE @timestamp > NOW() - 1 hour
```

----------------------------------------

TITLE: Counting Distinct Hire Dates with COUNT(DISTINCT) vs. Total Hires
DESCRIPTION: This query compares the count of unique hire dates using `COUNT(DISTINCT hire_date)` against the total count of non-null hire dates using `COUNT(hire_date)`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_9

LANGUAGE: SQL
CODE:
```
SELECT COUNT(DISTINCT hire_date) unique_hires, COUNT(hire_date) AS hires FROM emp;
```

----------------------------------------

TITLE: Wildcard Field Pattern in Query String
DESCRIPTION: Demonstrates specifying wildcard field patterns directly in the query string rather than in the fields parameter. Note that the asterisk needs proper escaping with backslashes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_16

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "query_string" : {
      "query" : "city.\\*:(this AND that OR thus)"
    }
  }
}
```

----------------------------------------

TITLE: Configuring Synonym Sets in Elasticsearch JSON
DESCRIPTION: Demonstrates configuring a synonym set in Elasticsearch using the synonym_graph token filter. This setup can be updated dynamically and involves defining the synonym set name and updating rules.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-synonym-graph-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "filter": {
    "synonyms_filter": {
      "type": "synonym_graph",
      "synonyms_set": "my-synonym-set",
      "updateable": true
    }
  }
}
```

----------------------------------------

TITLE: Converting Various Types to Double in ESQL
DESCRIPTION: This snippet demonstrates the usage of TO_DOUBLE function in ESQL. It shows how to convert a numeric string, a variable containing a numeric string, and an invalid string to double. The function handles different input types, including date conversions to milliseconds and boolean to numeric conversion.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_double.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW str1 = "5.20128E11", str2 = "foo"
| EVAL dbl = TO_DOUBLE("520128000000"), dbl1 = TO_DOUBLE(str1), dbl2 = TO_DOUBLE(str2)
```

----------------------------------------

TITLE: Using Painless to Determine Day of the Week
DESCRIPTION: The snippet demonstrates how to calculate and return the day of the week, given a datetime field in Elasticsearch using Painless scripting. This requires proper mapping of the datetime field to allow for direct access and operation on its values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs-mdx/painless/painless-field-context.mdx#2025-04-21_snippet_0

LANGUAGE: Painless
CODE:
```
doc['datetime'].value.getDayOfWeekEnum().getDisplayName(TextStyle.FULL, Locale.ROOT)
```

----------------------------------------

TITLE: Selecting and Renaming Columns in ESQL Query
DESCRIPTION: ESQL query that selects specific columns from 'employees' table using KEEP clause and renames the 'still_hired' column to 'employed'. This query demonstrates basic column manipulation operations in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/rename.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP first_name, last_name, still_hired
| RENAME  still_hired AS employed
```

----------------------------------------

TITLE: Converting Strings to Double Values using TO_DOUBLE in ESQL
DESCRIPTION: Demonstrates converting string values to double type using TO_DOUBLE function. Shows successful conversions of numeric strings and handling of invalid string conversions that result in null values with warning headers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_double.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW str1 = "5.20128E11", str2 = "foo"
| EVAL dbl = TO_DOUBLE("520128000000"), dbl1 = TO_DOUBLE(str1), dbl2 = TO_DOUBLE(str2)
```

----------------------------------------

TITLE: Indexing and Querying IP Addresses in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create an index with an IP field, index a document with an IP address, and perform a search query using CIDR notation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/ip.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "ip_addr": {
        "type": "ip"
      }
    }
  }
}

PUT my-index-000001/_doc/1
{
  "ip_addr": "192.168.1.1"
}

GET my-index-000001/_search
{
  "query": {
    "term": {
      "ip_addr": "192.168.0.0/16"
    }
  }
}
```

----------------------------------------

TITLE: Executing Elasticsearch Search with Profiling and Aggregations
DESCRIPTION: This snippet demonstrates how to perform a search query in Elasticsearch with profiling enabled, including term query, aggregations, and post-filter. It showcases the use of scoped and global aggregations on the 'http.response.status_code' field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-profile.md#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search
{
  "profile": true,
  "query": {
    "term": {
      "user.id": {
        "value": "elkbee"
      }
    }
  },
  "aggs": {
    "my_scoped_agg": {
      "terms": {
        "field": "http.response.status_code"
      }
    },
    "my_global_agg": {
      "global": {},
      "aggs": {
        "my_level_agg": {
          "terms": {
            "field": "http.response.status_code"
          }
        }
      }
    }
  },
  "post_filter": {
    "match": {
      "message": "search"
    }
  }
}
```

----------------------------------------

TITLE: Field Value Factor Query Example
DESCRIPTION: Example of using field_value_factor function to influence document scores based on a numeric field value, with options for factor multiplication and value modification.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-function-score-query.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "function_score": {
      "field_value_factor": {
        "field": "my-int",
        "factor": 1.2,
        "modifier": "sqrt",
        "missing": 1
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Sequences in EQL
DESCRIPTION: Shows how to create and use sequences in EQL to match an ordered series of events. Includes examples of using 'maxspan' to constrain sequences to a specific timespan.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_12

LANGUAGE: eql
CODE:
```
sequence
  [ file where file.extension == "exe" ]
  [ process where true ]
```

LANGUAGE: eql
CODE:
```
sequence with maxspan=15m
  [ file where file.extension == "exe" ]
  [ process where true ]
```

----------------------------------------

TITLE: Calculating Statistics and Grouping in ESQL
DESCRIPTION: Demonstrates calculating a statistic and grouping by the values of another column using the STATS command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/stats-by.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM employees
STATS
  avg_salary = AVG(salary)
BY department;
```

----------------------------------------

TITLE: ORDER BY with GROUP BY Example
DESCRIPTION: Shows ordering of grouped results by gender in descending order.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_25

LANGUAGE: sql
CODE:
```
SELECT gender AS g, COUNT(*) AS c FROM emp GROUP BY gender ORDER BY g DESC;
```

----------------------------------------

TITLE: Executing Basic Fuzzy Search Elasticsearch Console
DESCRIPTION: Demonstrates a basic fuzzy search query in Elasticsearch, searching for documents with terms similar to 'ki' in the user.id field. No additional parameters are set, making it a simple demonstration of fuzzy queries with default settings. Required to have a 'user.id' field populated in the Elasticsearch index.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-fuzzy-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "fuzzy": {
      "user.id": {
        "value": "ki"
      }
    }
  }
}

```

----------------------------------------

TITLE: Categorizing Employee Language Proficiency with CASE in ESQL
DESCRIPTION: This query uses the CASE function to categorize employees as monolingual, bilingual, or polyglot based on the number of languages they speak. It demonstrates conditional logic in ESQL for data classification.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/case.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| EVAL type = CASE(
    languages <= 1, "monolingual",
    languages <= 2, "bilingual",
     "polyglot")
| KEEP emp_no, languages, type
```

----------------------------------------

TITLE: Excluding Specific Indices from a Pattern Search in Elasticsearch
DESCRIPTION: This example demonstrates how to exclude specific indices from a pattern search using a bool query with must_not clause. It searches all indices starting with 'my-index-' except for 'my-index-01'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-multiple-data-streams-indices.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /my-index-*/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "user.id": "kimchy"
          }
        }
      ],
      "must_not": [
        {
          "terms": {
            "_index": ["my-index-01"]
          }
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Basic Grok Pattern Matching in Elasticsearch Pipeline
DESCRIPTION: Example showing how to use Grok processor to extract IP address, HTTP method, request path, bytes, and duration from a log message.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/grok-processor.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _ingest/pipeline/_simulate
{
  "pipeline": {
    "description" : "...",
    "processors": [
      {
        "grok": {
          "field": "message",
          "patterns": ["%{IP:client} %{WORD:method} %{URIPATHPARAM:request} %{NUMBER:bytes:int} %{NUMBER:duration:double}"]
        }
      }
    ]
  },
  "docs":[
    {
      "_source": {
        "message": "55.3.244.1 GET /index.html 15824 0.043"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Adding More Fields Dynamically to an Existing Elasticsearch Index
DESCRIPTION: This snippet shows adding another document with additional new fields to an existing index. It introduces two new fields: 'email' and 'name.middle', which will be automatically added to the mapping.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/dynamic.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/2
{
  "username": "marywhite",
  "email": "mary@white.com",
  "name": {
    "first": "Mary",
    "middle": "Alice",
    "last": "White"
  }
}

GET my-index-000001/_mapping
```

----------------------------------------

TITLE: Concatenating Name Fields using ESQL CONCAT Function
DESCRIPTION: Demonstrates using the CONCAT function to combine first_name and last_name fields with a space separator into a new fullname field. The example shows how to use KEEP to select specific columns and EVAL to create a new computed column.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/concat.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP first_name, last_name
| EVAL fullname = CONCAT(first_name, " ", last_name)
```

----------------------------------------

TITLE: Configuring Index Options with Highlighting Example in Elasticsearch
DESCRIPTION: Demonstrates setting up an index with custom index_options for text field, indexing a document, and performing a search with highlighting. Shows how to configure offsets for optimized highlighting performance using the unified highlighter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/index-options.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "text": {
        "type": "text",
        "index_options": "offsets"
      }
    }
  }
}

PUT my-index-000001/_doc/1
{
  "text": "Quick brown fox"
}

GET my-index-000001/_search
{
  "query": {
    "match": {
      "text": "brown fox"
    }
  },
  "highlight": {
    "fields": {
      "text": {} <1>
    }
  }
}
```

----------------------------------------

TITLE: Parsing Log Data with GROK in ESQL
DESCRIPTION: This ESQL code uses the GROK function to parse a log-like string, extracting date, IP address, email, and numeric values. It then keeps only the extracted fields in the result.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/basicGrok.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = "2023-01-23T12:15:00.000Z 127.0.0.1 some.email@foo.com 42"
| GROK a """%{TIMESTAMP_ISO8601:date} %{IP:ip} %{EMAILADDRESS:email} %{NUMBER:num}"""
| KEEP date, ip, email, num
```

----------------------------------------

TITLE: Indexing Child (Answer) Documents in Elasticsearch
DESCRIPTION: These snippets demonstrate how to index child documents (answers) with a reference to their parent question and additional metadata.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-children-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT child_example/_doc/2?routing=1
{
  "join": {
    "name": "answer",
    "parent": "1"
  },
  "owner": {
    "location": "Norfolk, United Kingdom",
    "display_name": "Sam",
    "id": 48
  },
  "body": "<p>Unfortunately you're pretty much limited to FTP...",
  "creation_date": "2009-05-04T13:45:37.030"
}

PUT child_example/_doc/3?routing=1&refresh
{
  "join": {
    "name": "answer",
    "parent": "1"
  },
  "owner": {
    "location": "Norfolk, United Kingdom",
    "display_name": "Troll",
    "id": 49
  },
  "body": "<p>Use Linux...",
  "creation_date": "2009-05-05T13:45:37.030"
}
```

----------------------------------------

TITLE: Complete Bucket Script Aggregation Query in Elasticsearch
DESCRIPTION: A complete Elasticsearch query demonstrating how to implement a bucket script aggregation. It calculates the spread between minimum and maximum costs plus a base amount across different theaters, showing how buckets_path maps aggregation results into script parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-bucket-script-agg-context.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
GET /seats/_search
{
  "size": 0,
  "aggs": {
    "theatres": {
      "terms": {
        "field": "theatre",
        "size": 10
      },
      "aggs": {
        "min_cost": {
          "min": {
            "field": "cost"
          }
        },
        "max_cost": {
          "max": {
            "field": "cost"
          }
        },
        "spread_plus_base": {
          "bucket_script": {
            "buckets_path": { <1>
              "min": "min_cost",
              "max": "max_cost"
            },
            "script": {
              "params": {
                "base_cost": 5 <2>
              },
              "source": "(params.max - params.min) + params.base_cost"
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining EQUALS (==) Operator in ESQL
DESCRIPTION: The EQUALS (==) operator checks if two fields are equal. It returns null for multivalued fields and can be optimized for search index queries under certain conditions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/operators/equals.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
### EQUALS `==`
Check if two fields are equal. If either field is [multivalued](https://www.elastic.co/docs/reference/query-languages/esql/esql-multivalued-fields) then the result is `null`.

Note: This is pushed to the underlying search index if one side of the comparison is constant and the other side is a field in the index that has both an [mapping-index](https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/mapping-index) and [doc-values](https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/doc-values).
```

----------------------------------------

TITLE: Using Leftmost Datetime in Date Math (ESQL)
DESCRIPTION: This snippet demonstrates the correct syntax for ESQL date math operations where the datetime expression (like `now()`) must be positioned as the leftmost element. Operations like adding or subtracting time units are then applied sequentially.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/limitations.md#_snippet_6

LANGUAGE: ESQL
CODE:
```
now() + 1 year - 2hour + ...
```

----------------------------------------

TITLE: Geo Distance Sorting in Elasticsearch
DESCRIPTION: Basic example of geo-distance sorting using coordinates with various parameters like unit, mode, and distance_type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/sort-search-results.md#2025-04-21_snippet_12

LANGUAGE: console
CODE:
```
GET /_search
{
  "sort" : [
    {
      "_geo_distance" : {
          "pin.location" : [-70, 40],
          "order" : "asc",
          "unit" : "km",
          "mode" : "min",
          "distance_type" : "arc",
          "ignore_unmapped": true
      }
    }
  ],
  "query" : {
    "term" : { "user" : "kimchy" }
  }
}
```

----------------------------------------

TITLE: Creating Index with Custom Semantic Text Field - Elasticsearch API
DESCRIPTION: This example shows how to configure a `semantic_text` field to use a custom inference endpoint instead of the default. You must specify the `inference_id` of a pre-configured endpoint. This requires an Elasticsearch instance and a custom inference endpoint created via the Create Inference API.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/semantic-text.md#_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000002
{
  "mappings": {
    "properties": {
      "inference_field": {
        "type": "semantic_text",
        "inference_id": "my-openai-endpoint"
      }
    }
  }
}
```

----------------------------------------

TITLE: Monitoring Request Cache Usage by Index in Elasticsearch
DESCRIPTION: This command retrieves request cache statistics for all indices using the indices stats API. The 'human' parameter formats the size values to be human-readable.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/shard-request-cache.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET /_stats/request_cache?human
```

----------------------------------------

TITLE: Installing Elasticsearch Analysis ICU Plugin (Shell)
DESCRIPTION: This command uses the Elasticsearch plugin manager via the command line to install the 'analysis-icu' plugin. It requires root/sudo privileges and should be run from the Elasticsearch installation directory. The plugin must be installed on every node in the cluster, and each node needs to be restarted after installation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-icu.md#_snippet_0

LANGUAGE: Shell
CODE:
```
sudo bin/elasticsearch-plugin install analysis-icu
```

----------------------------------------

TITLE: Running Metric Aggregations on Aggregate Metric Field
DESCRIPTION: Executes a search request on `stats-index` to perform `min`, `max`, `value_count`, `sum`, and `avg` aggregations on the `agg_metric` field. Results are derived from the respective metric sub-fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/aggregate-metric-double.md#_snippet_4

LANGUAGE: console
CODE:
```
POST stats-index/_search?size=0
{
  "aggs": {
    "metric_min": { "min": { "field": "agg_metric" } },
    "metric_max": { "max": { "field": "agg_metric" } },
    "metric_value_count": { "value_count": { "field": "agg_metric" } },
    "metric_sum": { "sum": { "field": "agg_metric" } },
    "metric_avg": { "avg": { "field": "agg_metric" } }
  }
}
```

----------------------------------------

TITLE: Creating a Slack Connector using the API - Console - Elasticsearch
DESCRIPTION: This snippet demonstrates how to create a new Slack connector using the Elasticsearch Create connector API. It specifies the index name, connector name, and service type as part of the request payload.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-slack.md#2025-04-21_snippet_0

LANGUAGE: Console
CODE:
```
PUT _connector/my-slack-connector
{
  "index_name": "my-elasticsearch-index",
  "name": "Content synced from Slack",
  "service_type": "slack"
}
```

----------------------------------------

TITLE: Match Phrase Prefix Query Example
DESCRIPTION: This example demonstrates how to use the `match_phrase_prefix` query to find documents where the `message` field contains phrases starting with `quick brown f`.  It will match phrases like "quick brown fox" but not "the fox is quick and brown".
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-match-query-phrase-prefix.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "match_phrase_prefix": {
      "message": {
        "query": "quick brown f"
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining Data Stream Mapping in Elasticsearch JSON
DESCRIPTION: This JSON structure defines the mapping for a data stream in Elasticsearch. It specifies field types, properties, and metadata for various data fields, including timestamps and specific data attributes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/libs/lz4/licenses/lz4-java-NOTICE.txt#2025-04-22_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "_doc": {
    "_meta": {
      "beat": "metricbeat",
      "type": "doc",
      "version": "7.0.0-alpha1"
    },
    "date_detection": false,
    "dynamic_templates": [
      {
        "strings_as_keyword": {
          "mapping": {
            "ignore_above": 1024,
            "type": "keyword"
          },
          "match_mapping_type": "string"
        }
      }
    ],
    "properties": {
      "@timestamp": {
        "type": "date"
      },
      "data_stream": {
        "properties": {
          "dataset": {
            "type": "constant_keyword"
          },
          "namespace": {
            "type": "constant_keyword"
          },
          "type": {
            "type": "constant_keyword"
          }
        }
      },
      "ecs": {
        "properties": {
          "version": {
            "ignore_above": 1024,
            "type": "keyword"
          }
        }
      },
      "event": {
        "properties": {
          "dataset": {
            "ignore_above": 1024,
            "type": "keyword"
          },
          "module": {
            "ignore_above": 1024,
            "type": "keyword"
          }
        }
      },
      "metricset": {
        "properties": {
          "name": {
            "ignore_above": 1024,
            "type": "keyword"
          },
          "period": {
            "type": "long"
          }
        }
      },
      "source": {
        "properties": {
          "ip": {
            "type": "ip"
          }
        }
      },
      "version": {
        "type": "keyword"
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing a Point Geometry using GeoJSON in Elasticsearch
DESCRIPTION: Adds a document to the 'example' index with a Point geometry specified in GeoJSON format. The coordinates are provided as longitude (-77.03653) and latitude (38.897676).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-shape.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /example/_doc
{
  "location" : {
    "type" : "Point",
    "coordinates" : [-77.03653, 38.897676]
  }
}
```

----------------------------------------

TITLE: Searching Elasticsearch: Retrieve Specific Nested Sub-field (console)
DESCRIPTION: Performs an Elasticsearch search on `my-index-000001`. It requests only the `user.first` field using the `fields` parameter, disabling `_source` retrieval. This demonstrates that even when requesting a sub-field, the nested structure is maintained in the response.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_6

LANGUAGE: console
CODE:
```
POST my-index-000001/_search
{
  "fields": ["user.first"],
  "_source": false
}
```

----------------------------------------

TITLE: Match Phrase Query with Custom Analyzer
DESCRIPTION: Shows how to specify a custom analyzer for text analysis in a match phrase query
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-match-query-phrase.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "match_phrase": {
      "message": {
        "query": "this is a test",
        "analyzer": "my_analyzer"
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating RestClient for Elasticsearch in Java
DESCRIPTION: This snippet demonstrates how to create a RestClient for Elasticsearch using the RestClient.builder() method. It configures the client with multiple hosts and sets various parameters like connection timeout and max retry timeout.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/inference/licenses/reactive-streams-NOTICE.txt#2025-04-22_snippet_0

LANGUAGE: Java
CODE:
```
RestClient restClient = RestClient.builder(
    new HttpHost("localhost", 9200, "http"),
    new HttpHost("localhost", 9201, "http"))
    .setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {
        @Override
        public HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {
            return httpClientBuilder.setDefaultIOReactorConfig(
                IOReactorConfig.custom()
                    .setIoThreadCount(1)
                    .build());
        }
    })
    .setRequestConfigCallback(new RestClientBuilder.RequestConfigCallback() {
        @Override
        public RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder) {
            return requestConfigBuilder.setConnectTimeout(5000)
                .setSocketTimeout(60000);
        }
    })
    .setMaxRetryTimeoutMillis(60000)
    .build();
```

----------------------------------------

TITLE: Basic Field Collapsing in Elasticsearch
DESCRIPTION: Demonstrates how to collapse search results by a field value (user.id) and sort them by another field (http.response.bytes). The collapse parameter selects only the top document per collapse key.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/collapse-search-results.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET my-index-000001/_search
{
  "query": {
    "match": {
      "message": "GET /search"
    }
  },
  "collapse": {
    "field": "user.id"         <1>
  },
  "sort": [
    {
      "http.response.bytes": { <2>
        "order": "desc"
      }
    }
  ],
  "from": 0                    <3>
}
```

----------------------------------------

TITLE: Generating MD5 and SHA256 Hashes with ESQL
DESCRIPTION: An ESQL query that demonstrates using the hash() function to generate both MD5 and SHA256 hashes of messages. The query filters out 'Connection error' messages, computes the hashes, and keeps only the relevant columns.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/hash.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM sample_data
| WHERE message != "Connection error"
| EVAL md5 = hash("md5", message), sha256 = hash("sha256", message)
| KEEP message, md5, sha256
```

----------------------------------------

TITLE: Configuring MongoDB Connector Configuration File
DESCRIPTION: Sample YAML configuration for connecting to Elasticsearch and MongoDB with Docker
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-mongodb.md#2025-04-21_snippet_5

LANGUAGE: yaml
CODE:
```
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: mongodb
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA>
```

----------------------------------------

TITLE: Rollover Based on Primary Shard Size
DESCRIPTION: ILM policy configuration that triggers rollover when the largest primary shard reaches 50GB in size.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-rollover.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "hot": {
        "actions": {
          "rollover" : {
            "max_primary_shard_size": "50gb"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Combining Standard and KNN Search using RRF Retriever (Console/JSON)
DESCRIPTION: This example shows how to perform a hybrid search using the RRF (Reciprocal Rank Fusion) retriever in Elasticsearch. It combines results from a `standard` retriever performing a multi-match query and a `knn` retriever searching for similar vectors. The `rrf` retriever merges and re-ranks the results from its child retrievers (`standard` and `knn`) based on their ranks, using the specified `rank_constant` and `rank_window_size`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrievers.md#_snippet_2

LANGUAGE: console
CODE:
```
GET /restaurants/_search
{
  "retriever": {
    "rrf": { <1>
      "retrievers": [ <2>
        {
          "standard": { <3>
            "query": {
              "multi_match": {
                "query": "Austria",
                "fields": [
                  "city",
                  "region"
                ]
              }
            }
          }
        },
        {
          "knn": { <4>
            "field": "vector",
            "query_vector": [10, 22, 77],
            "k": 10,
            "num_candidates": 10
          }
        }
      ],
      "rank_constant": 1, <5>
      "rank_window_size": 50  <6>
    }
  }
}
```

----------------------------------------

TITLE: kNN Query with Pre-filters in Elasticsearch
DESCRIPTION: Demonstrates how to apply pre-filtering in a kNN query to restrict results to documents with specific characteristics. It shows the use of `knn` query along with a `term` filter which limits matched documents by a specified file type. The inputs are query parameters, and the outputs are filtered query results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-knn-query.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST my-image-index/_search
{
  "size" : 10,
  "query" : {
    "bool" : {
      "must" : {
        "knn": {
          "field": "image-vector",
          "query_vector": [-5, 9, -12],
          "k": 3
        }
      },
      "filter" : {
        "term" : { "file-type" : "png" }
      }
    }
  }
}

```

----------------------------------------

TITLE: Querying Documents Similar to Existing Documents (Elasticsearch Console)
DESCRIPTION: Shows how to use the more_like_this query with an array in the 'like' parameter. This allows finding documents similar to one or more existing documents in the index, specified by their index and ID, potentially combined with additional free-form text. It applies the query to specific fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-mlt-query.md#_snippet_1

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "more_like_this": {
      "fields": [ "title", "description" ],
      "like": [
        {
          "_index": "imdb",
          "_id": "1"
        },
        {
          "_index": "imdb",
          "_id": "2"
        },
        "and potentially some more text here as well"
      ],
      "min_term_freq": 1,
      "max_query_terms": 12
    }
  }
}
```

----------------------------------------

TITLE: Using COALESCE Function in ESQL
DESCRIPTION: This snippet demonstrates the usage of the COALESCE function in ESQL. It creates a row with two columns, 'a' (null) and 'b' ("b"), and then applies the COALESCE function to return the first non-null value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/coalesce.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=null, b="b"
| EVAL COALESCE(a, b)
```

----------------------------------------

TITLE: Querying Elasticsearch Shape with Pre-Indexed Shape
DESCRIPTION: This snippet shows how to query Elasticsearch for documents whose `geometry` field intersects with a pre-indexed shape. It references the shape by its `index`, `id`, and `path`. This allows reusing pre-defined shapes without specifying their coordinates in each query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-shape-query.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET /example/_search
{
  "query": {
    "shape": {
      "geometry": {
        "indexed_shape": {
          "index": "shapes",
          "id": "footprint",
          "path": "geometry"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Extracting Substring from Last Name using ESQL
DESCRIPTION: This ESQL query demonstrates the usage of the SUBSTRING function to extract the first three characters from the 'last_name' field of employees. It keeps only the 'last_name' field and creates a new field 'ln_sub' with the substring result.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/substring.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP last_name
| EVAL ln_sub = SUBSTRING(last_name, 1, 3)
```

----------------------------------------

TITLE: Configuring Multiple Analyzers for Phrase Queries in Elasticsearch
DESCRIPTION: This snippet demonstrates how to set up multiple analyzers in Elasticsearch to handle different analysis needs, including a special analyzer for phrase queries that preserves stop words. It includes index creation, mapping configuration, document indexing, and a sample search query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/analyzer.md#2025-04-22_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
   "settings":{
      "analysis":{
         "analyzer":{
            "my_analyzer":{
               "type":"custom",
               "tokenizer":"standard",
               "filter":[
                  "lowercase"
               ]
            },
            "my_stop_analyzer":{
               "type":"custom",
               "tokenizer":"standard",
               "filter":[
                  "lowercase",
                  "english_stop"
               ]
            }
         },
         "filter":{
            "english_stop":{
               "type":"stop",
               "stopwords":"_english_"
            }
         }
      }
   },
   "mappings":{
       "properties":{
          "title": {
             "type":"text",
             "analyzer":"my_analyzer",
             "search_analyzer":"my_stop_analyzer",
             "search_quote_analyzer":"my_analyzer"
         }
      }
   }
}

PUT my-index-000001/_doc/1
{
   "title":"The Quick Brown Fox"
}

PUT my-index-000001/_doc/2
{
   "title":"A Quick Brown Fox"
}

GET my-index-000001/_search
{
   "query":{
      "query_string":{
         "query":"\"the quick brown fox\""
      }
   }
}
```

----------------------------------------

TITLE: Calculating Connection Success Rate with CASE in ESQL
DESCRIPTION: This query uses the CASE function to determine if a connection was successful based on log messages, then calculates the overall success rate. It shows how to use string matching in CASE conditions and aggregate results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/case.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM sample_data
| EVAL successful = CASE(
    STARTS_WITH(message, "Connected to"), 1,
    message == "Connection error", 0
  )
| STATS success_rate = AVG(successful)
```

----------------------------------------

TITLE: Configuring Join Processor in Elasticsearch
DESCRIPTION: Example configuration for the Join processor that combines array elements into a string using a separator. This processor requires a field containing the array and a separator character, with optional parameters for target field and error handling.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/join-processor.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
{
  "join": {
    "field": "joined_array_field",
    "separator": "-"
  }
}
```

----------------------------------------

TITLE: Zooming into a Specific Geohash in Elasticsearch
DESCRIPTION: This example shows how to zoom into a specific geohash (u17) by using it as both top_left and bottom_right corners in a geo_bounding_box filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-geohashgrid-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /museums/_search?size=0
{
  "aggregations": {
    "zoomed-in": {
      "filter": {
        "geo_bounding_box": {
          "location": {
            "top_left": "u17",
            "bottom_right": "u17"
          }
        }
      },
      "aggregations": {
        "zoom1": {
          "geohash_grid": {
            "field": "location",
            "precision": 8
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Inserting Sample Data into Elasticsearch Indices
DESCRIPTION: This snippet demonstrates how to insert sample data into the three previously created indices using the bulk API. The data includes various event types with different field values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_13

LANGUAGE: console
CODE:
```
POST /my-index-000001/_bulk?refresh
{"index":{"_id":1}}
{"@timestamp":"1234567891","@timestamp_pretty":"12-12-2022","missing_keyword":"test","type_test":"abc","ip":"10.0.0.1","event_type":"alert","host":"doom","uptime":0,"port":1234,"os":"win10","version":"1.0.0","id":11}
{"index":{"_id":2}}
{"@timestamp":"1234567892","@timestamp_pretty":"13-12-2022","event_type":"alert","type_test":"abc","host":"CS","uptime":5,"port":1,"os":"win10","version":"1.2.0","id":12}
{"index":{"_id":3}}
{"@timestamp":"1234567893","@timestamp_pretty":"12-12-2022","event_type":"alert","type_test":"abc","host":"farcry","uptime":1,"port":1234,"bool":false,"os":"win10","version":"2.0.0","id":13}
{"index":{"_id":4}}
{"@timestamp":"1234567894","@timestamp_pretty":"13-12-2022","event_type":"alert","type_test":"abc","host":"GTA","uptime":3,"port":12,"os":"slack","version":"10.0.0","id":14}
{"index":{"_id":5}}
{"@timestamp":"1234567895","@timestamp_pretty":"17-12-2022","event_type":"alert","host":"sniper 3d","uptime":6,"port":1234,"os":"fedora","version":"20.1.0","id":15}
{"index":{"_id":6}}
{"@timestamp":"1234568896","@timestamp_pretty":"17-12-2022","event_type":"alert","host":"doom","port":65123,"bool":true,"os":"redhat","version":"20.10.0","id":16}
{"index":{"_id":7}}
{"@timestamp":"1234567897","@timestamp_pretty":"17-12-2022","missing_keyword":"yyy","event_type":"failure","host":"doom","uptime":15,"port":1234,"bool":true,"os":"redhat","version":"20.2.0","id":17}
{"index":{"_id":8}}
{"@timestamp":"1234567898","@timestamp_pretty":"12-12-2022","missing_keyword":"test","event_type":"success","host":"doom","uptime":16,"port":512,"os":"win10","version":"1.2.3","id":18}
{"index":{"_id":9}}
{"@timestamp":"1234567899","@timestamp_pretty":"15-12-2022","missing_keyword":"test","event_type":"success","host":"GTA","port":12,"bool":true,"os":"win10","version":"1.2.3","id":19}
{"index":{"_id":10}}
{"@timestamp":"1234567893","missing_keyword":null,"ip":"10.0.0.5","event_type":"alert","host":"farcry","uptime":1,"port":1234,"bool":true,"os":"win10","version":"1.2.3","id":110}

POST /my-index-000002/_bulk?refresh
{"index":{"_id":1}}
{"@timestamp":"1234567991","type_test":"abc","ip":"10.0.0.1","event_type":"alert","host":"doom","uptime":0,"port":1234,"op_sys":"win10","id":21}
{"index":{"_id":2}}
{"@timestamp":"1234567992","type_test":"abc","event_type":"alert","host":"CS","uptime":5,"port":1,"op_sys":"win10","id":22}
{"index":{"_id":3}}
{"@timestamp":"1234567993","type_test":"abc","@timestamp_pretty":"2022-12-17","event_type":"alert","host":"farcry","uptime":1,"port":1234,"bool":false,"op_sys":"win10","id":23}
{"index":{"_id":4}}
{"@timestamp":"1234567994","event_type":"alert","host":"GTA","uptime":3,"port":12,"op_sys":"slack","id":24}
{"index":{"_id":5}}
{"@timestamp":"1234567995","event_type":"alert","host":"sniper 3d","uptime":6,"port":1234,"op_sys":"fedora","id":25}
{"index":{"_id":6}}
{"@timestamp":"1234568996","@timestamp_pretty":"2022-12-17","ip":"10.0.0.5","event_type":"alert","host":"doom","port":65123,"bool":true,"op_sys":"redhat","id":26}
{"index":{"_id":7}}
{"@timestamp":"1234567997","@timestamp_pretty":"2022-12-17","event_type":"failure","host":"doom","uptime":15,"port":1234,"bool":true,"op_sys":"redhat","id":27}
{"index":{"_id":8}}
{"@timestamp":"1234567998","ip":"10.0.0.1","event_type":"success","host":"doom","uptime":16,"port":512,"op_sys":"win10","id":28}
{"index":{"_id":9}}
{"@timestamp":"1234567999","ip":"10.0.0.1","event_type":"success","host":"GTA","port":12,"bool":false,"op_sys":"win10","id":29}

POST /my-index-000003/_bulk?refresh
{"index":{"_id":1}}
{"@timestamp":"1334567891","host_ip":"10.0.0.1","event_type":"alert","host":"doom","uptime":0,"port":12,"os":"win10","id":31}
{"index":{"_id":2}}
{"@timestamp":"1334567892","event_type":"alert","host":"CS","os":"win10","id":32}
{"index":{"_id":3}}
{"@timestamp":"1334567893","event_type":"alert","host":"farcry","bool":true,"os":"win10","id":33}
{"index":{"_id":4}}
{"@timestamp":"1334567894","event_type":"alert","host":"GTA","os":"slack","bool":true,"id":34}
{"index":{"_id":5}}
{"@timestamp":"1234567895","event_type":"alert","host":"sniper 3d","os":"fedora","id":35}
{"index":{"_id":6}}
{"@timestamp":"1234578896","host_ip":"10.0.0.1","event_type":"alert","host":"doom","bool":true,"os":"redhat","id":36}
{"index":{"_id":7}}
{"@timestamp":"1234567897","event_type":"failure","missing_keyword":"test","host":"doom","bool":true,"os":"redhat","id":37}
{"index":{"_id":8}}
{"@timestamp":"1234577898","event_type":"success","host":"doom","os":"win10","id":38,"date":"1671235200000"}
{"index":{"_id":9}}
{"@timestamp":"1234577899","host_ip":"10.0.0.5","event_type":"success","host":"GTA","bool":true,"os":"win10","id":39}
```

----------------------------------------

TITLE: Elasticsearch Script Query with Runtime Fields
DESCRIPTION: This snippet shows how to achieve the same result as the previous script query using runtime fields in Elasticsearch. It defines a runtime field 'amount.signed' that calculates a signed amount based on the document's 'amount' and 'type' fields, and then uses a range query to filter documents where 'amount.signed' is less than 10.  The `fields` parameter retrieves the calculated `amount.signed` value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-script-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /_search
{
  "runtime_mappings": {
    "amount.signed": {
      "type": "double",
      "script": """
        double amount = doc['amount'].value;
        if (doc['type'].value == 'expense') {
          amount *= -1;
        }
        emit(amount);
      """
    }
  },
  "query": {
    "bool": {
      "filter": {
        "range": {
          "amount.signed": { "lt": 10 }
        }
      }
    }
  },
  "fields": [{"field": "amount.signed"}]
}
```

----------------------------------------

TITLE: Implementing Basque Analyzer as Custom Analyzer in Elasticsearch
DESCRIPTION: Creates a custom analyzer that replicates the functionality of the built-in Basque analyzer, demonstrating the configuration of Basque-specific stopwords, keyword marking for stem exclusion, and stemming filters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /basque_example
{
  "settings": {
    "analysis": {
      "filter": {
        "basque_stop": {
          "type":       "stop",
          "stopwords":  "_basque_" 
        },
        "basque_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["Adibidez"] 
        },
        "basque_stemmer": {
          "type":       "stemmer",
          "language":   "basque"
        }
      },
      "analyzer": {
        "rebuilt_basque": {
          "tokenizer":  "standard",
          "filter": [
            "lowercase",
            "basque_stop",
            "basque_keywords",
            "basque_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating a Document with Sequence Number in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create a new document in Elasticsearch, which will assign an initial sequence number and primary term. The response includes these values along with other metadata.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/optimistic-concurrency-control.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT products/_doc/1567
{
  "product" : "r2d2",
  "details" : "A resourceful astromech droid"
}
```

LANGUAGE: console-result
CODE:
```
{
  "_shards": {
    "total": 2,
    "failed": 0,
    "successful": 1
  },
  "_index": "products",
  "_id": "1567",
  "_version": 1,
  "_seq_no": 362,
  "_primary_term": 2,
  "result": "created"
}
```

----------------------------------------

TITLE: Creating an Elasticsearch API Key with Multiple Source Access
DESCRIPTION: This snippet demonstrates how to create an Elasticsearch API key that combines access to multiple sources (source1 and source2) with specific read privileges and access control parameters for each source.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-dls-overview.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
POST /_security/api_key
{
  "name": "my-api-key",
  "role_descriptors": {
    "role-source1": {
      "indices": [
        {
          "names": ["source1"],
          "privileges": ["read"],
          "query": {
            "template": {
                "params": {
                    "access_control": [
                        "example.user@example.com",
                        "source1-user-group"]
                }
            },
            "source": "..."
          }
        }
      ]
    },
    "role-source2": {
      "indices": [
        {
          "names": ["source2"],
          "privileges": ["read"],
          "query": {
            "template": {
                "params": {
                    "access_control": [
                        "example.user@example.com",
                        "source2-user-group"]
                }
            },
            "source": "..."
          }
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Relative Datetime Filtering with NOW and Interval in Elasticsearch SQL
DESCRIPTION: This snippet queries the `emp` table to find employees hired more than 100 years before the current date and time. It uses the `NOW()` function (similar to `CURRENT_TIMESTAMP()`) combined with interval subtraction for relative datetime comparison in the WHERE clause, ordering by first name and limiting results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_23

LANGUAGE: SQL
CODE:
```
SELECT first_name FROM emp WHERE hire_date > NOW() - INTERVAL 100 YEARS ORDER BY first_name ASC LIMIT 5;
```

----------------------------------------

TITLE: Grouping Employee Hire Dates Using BUCKET Function in ESQL
DESCRIPTION: This snippet demonstrates the use of the BUCKET function to group employee hire dates into monthly buckets. It filters employees hired in 1985, then uses BUCKET to create monthly groups, and finally sorts the hire dates within each group.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/bucket.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| WHERE hire_date >= "1985-01-01T00:00:00Z" AND hire_date < "1986-01-01T00:00:00Z"
| STATS hire_date = MV_SORT(VALUES(hire_date)) BY month = BUCKET(hire_date, 20, "1985-01-01T00:00:00Z", "1986-01-01T00:00:00Z")
```

----------------------------------------

TITLE: Creating Shirt Mapping and Document in Elasticsearch
DESCRIPTION: Creates an index mapping for shirts with brand, color and model properties, then adds a sample document for a red Gucci slim shirt.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/filter-search-results.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
PUT /shirts
{
  "mappings": {
    "properties": {
      "brand": { "type": "keyword"},
      "color": { "type": "keyword"},
      "model": { "type": "keyword"}
    }
  }
}

PUT /shirts/_doc/1?refresh
{
  "brand": "gucci",
  "color": "red",
  "model": "slim"
}
```

----------------------------------------

TITLE: Converting from Milliseconds
DESCRIPTION: Shows how to convert milliseconds since epoch to a ZonedDateTime object.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_6

LANGUAGE: painless
CODE:
```
long milliSinceEpoch = 434931330000L;
Instant instant = Instant.ofEpochMilli(milliSinceEpoch);
ZonedDateTime zdt = ZonedDateTime.ofInstant(instant, ZoneId.of('Z'));
```

----------------------------------------

TITLE: Defining and Using Rank Feature Fields in Elasticsearch
DESCRIPTION: This example demonstrates how to define rank_feature fields in an index mapping, insert a document with rank feature values, and query using the rank_feature query. It shows both positively and negatively correlated features configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/rank-feature.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "pagerank": {
        "type": "rank_feature" <1>
      },
      "url_length": {
        "type": "rank_feature",
        "positive_score_impact": false <2>
      }
    }
  }
}

PUT my-index-000001/_doc/1
{
  "pagerank": 8,
  "url_length": 22
}

GET my-index-000001/_search
{
  "query": {
    "rank_feature": {
      "field": "pagerank"
    }
  }
}
```

----------------------------------------

TITLE: Cosine Similarity Search Query
DESCRIPTION: Demonstrates how to use cosineSimilarity function in a script score query with filtered results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-script-score-query.md#2025-04-21_snippet_12

LANGUAGE: console
CODE:
```
GET my-index-000001/_search
{
  "query": {
    "script_score": {
      "query" : {
        "bool" : {
          "filter" : {
            "term" : {
              "status" : "published"
            }
          }
        }
      },
      "script": {
        "source": "cosineSimilarity(params.query_vector, 'my_dense_vector') + 1.0",
        "params": {
          "query_vector": [4, 3.4, -0.2]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Analyzing Text with Default Stemmer - Elasticsearch Console
DESCRIPTION: Demonstrates using the Elasticsearch `_analyze` API to test the default `stemmer` token filter. It sends a text string through the `standard` tokenizer and the `stemmer` filter, showing the resulting stemmed tokens. Requires a running Elasticsearch instance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stemmer-tokenfilter.md#_snippet_0

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer": "standard",
  "filter": [ "stemmer" ],
  "text": "the foxes jumping quickly"
}
```

----------------------------------------

TITLE: Setting Elasticsearch API Compatibility Headers
DESCRIPTION: Illustrates the HTTP headers required to signal to an Elasticsearch cluster that the request and response format should be compatible with a previous major version (e.g., 7.x when running 8.x). This helps maintain application compatibility during cluster upgrades.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/api-conventions.md#_snippet_13

LANGUAGE: sh
CODE:
```
Content-Type: application/vnd.elasticsearch+json; compatible-with=7
Accept: application/vnd.elasticsearch+json; compatible-with=7
```

----------------------------------------

TITLE: Downloading Connector Config File with Curl
DESCRIPTION: This command downloads the sample configuration file (config.yml.example) from the specified URL using curl and saves it to a local directory.  The user must replace the placeholder with the absolute path to the desired directory.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-run-from-docker.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
curl https://raw.githubusercontent.com/elastic/connectors/main/config.yml.example --output </absolute/path/to>/connectors-config/config.yml
```

----------------------------------------

TITLE: Attempt Term Query on Text Field (Console)
DESCRIPTION: Executes a `term` query search on the `full_text` field of the `my-index-000001` index. This example demonstrates why the `term` query is not suitable for analyzed `text` fields, as it searches for the exact term which no longer exists after analysis.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-term-query.md#_snippet_3

LANGUAGE: console
CODE:
```
GET my-index-000001/_search?pretty
{
  "query": {
    "term": {
      "full_text": "Quick Brown Foxes!"
    }
  }
}
```

----------------------------------------

TITLE: Counting Values in a Multivalued Column using MV_COUNT in ESQL
DESCRIPTION: This snippet demonstrates the usage of the MV_COUNT function in ESQL. It creates a row with a multivalued column 'a' and then uses MV_COUNT to count the number of values in that column, storing the result in a new column 'count_a'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/mv_count.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=["foo", "zoo", "bar"]
| EVAL count_a = MV_COUNT(a)
```

----------------------------------------

TITLE: Using ESQL ENRICH with Default Match Field
DESCRIPTION: Demonstrates the basic usage of the ENRICH command in ESQL, applying an enrich policy ('languages_policy') to an input row. It assumes the input column name ('language_code') matches the policy's match field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-enrich-data.md#_snippet_0

LANGUAGE: esql
CODE:
```
ROW language_code = "1"\n| ENRICH languages_policy
```

----------------------------------------

TITLE: Parsing User Parameters as Datetime in Painless
DESCRIPTION: This snippet shows how to handle datetime input from user parameters within a Painless script by parsing numeric and string datetimes to complex objects.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_17

LANGUAGE: JSON
CODE:
```
{
  ...
  "script": {
      ...
      "params": {
          "input_datetime": 434931327000
      }
  }
  ...
}
```

LANGUAGE: painless
CODE:
```
long inputDateTime = params['input_datetime'];
Instant instant = Instant.ofEpochMilli(inputDateTime);
ZonedDateTime zdt = ZonedDateTime.ofInstant(instant, ZoneId.of('Z'));
```

LANGUAGE: JSON
CODE:
```
{
  ...
  "script": {
      ...
      "params": {
          "input_datetime": "custom y 1983 m 10 d 13 22:15:30 Z"
      }
  }
  ...
}
```

LANGUAGE: painless
CODE:
```
String datetime = params['input_datetime'];
DateTimeFormatter dtf = DateTimeFormatter.ofPattern(
        "'custom' 'y' yyyy 'm' MM 'd' dd HH:mm:ss VV");
ZonedDateTime zdt = ZonedDateTime.parse(datetime, dtf); <1>
```

----------------------------------------

TITLE: Filtering Source with Multiple Wildcards in Elasticsearch Console
DESCRIPTION: This console command illustrates how to provide an array of wildcard patterns (`obj1.*`, `obj2.*`) in the `_source` parameter. Elasticsearch will return only the source fields that match any of the patterns specified in the array.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_16

LANGUAGE: console
CODE:
```
GET /_search
{
  "_source": [ "obj1.*", "obj2.*" ],
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  }
}
```

----------------------------------------

TITLE: Configuring Elasticsearch Highlighting Global and Field Settings (console)
DESCRIPTION: Demonstrates how to define global highlighting parameters like fragment size and count in an Elasticsearch `_search` request. It shows how to override these settings or define field-specific options such as custom HTML tags or disabling fragments for particular fields within the `highlight.fields` object.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_2

LANGUAGE: console
CODE:
```
GET /_search
{
  "query" : {
    "match": { "user.id": "kimchy" }
  },
  "highlight" : {
    "number_of_fragments" : 3,
    "fragment_size" : 150,
    "fields" : {
      "body" : { "pre_tags" : ["<em>"], "post_tags" : ["</em>"] },
      "blog.title" : { "number_of_fragments" : 0 },
      "blog.author" : { "number_of_fragments" : 0 },
      "blog.comment" : { "number_of_fragments" : 5, "order" : "score" }
    }
  }
}
```

----------------------------------------

TITLE: Computing Weighted Average by Languages using ESQL
DESCRIPTION: Calculates the weighted average of employee salaries weighted by height, grouped by number of languages known. The query rounds the results, keeps only relevant columns, and sorts by the languages column. Returns a table with weighted averages and corresponding language counts.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/weighted_avg.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS w_avg = WEIGHTED_AVG(salary, height) BY languages
| EVAL w_avg = ROUND(w_avg)
| KEEP w_avg, languages
| SORT languages
```

----------------------------------------

TITLE: Querying Elasticsearch: Date Range Query with Time Zone (Console)
DESCRIPTION: This snippet demonstrates the use of the `time_zone` parameter in an Elasticsearch range query on a `timestamp` field. It sets the time zone to `+01:00`, which affects how the static date value `"2020-01-01T00:00:00"` is interpreted and converted to UTC for comparison. The `now` value is unaffected by `time_zone`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-range-query.md#_snippet_2

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "range": {
      "timestamp": {
        "time_zone": "+01:00",
        "gte": "2020-01-01T00:00:00",
        "lte": "now"
      }
    }
  }
}
```

----------------------------------------

TITLE: ELSER-Based Semantic Search Query in Elasticsearch
DESCRIPTION: Example of a text expansion query using the ELSER model for semantic search. It searches for documents semantically matching the query "How is the weather in Jamaica?" using the ml.tokens field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-text-expansion-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET my-index/_search
{
   "query":{
      "text_expansion":{
         "ml.tokens":{
            "model_id":".elser_model_2",
            "model_text":"How is the weather in Jamaica?"
         }
      }
   }
}
```

----------------------------------------

TITLE: Keyword Analyzer in Elasticsearch
DESCRIPTION: No-operation analyzer that outputs the exact input text as a single term without any modifications.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analyzer-reference.md#2025-04-21_snippet_4

LANGUAGE: elasticsearch
CODE:
```
"analyzer": "keyword"
```

----------------------------------------

TITLE: Indexing a Grandchild Document in Elasticsearch Join Field
DESCRIPTION: This snippet shows how to index a grandchild document ('vote') in a multi-level parent-child relationship. It demonstrates the use of routing to ensure proper shard placement and specifying the parent ID.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/parent-join.md#2025-04-21_snippet_10

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/3?routing=1&refresh <1>
{
  "text": "This is a vote",
  "my_join_field": {
    "name": "vote",
    "parent": "2" <2>
  }
}
```

----------------------------------------

TITLE: Indexing a Polygon Geometry using GeoJSON in Elasticsearch
DESCRIPTION: Adds a document to the 'example' index with a Polygon geometry specified in GeoJSON format. The polygon is defined by five points forming a closed shape, with the first and last points being identical.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-shape.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
POST /example/_doc
{
  "location" : {
    "type" : "Polygon",
    "coordinates" : [
      [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]
    ]
  }
}
```

----------------------------------------

TITLE: Displaying Indexing Slow Log Event in JSON Format
DESCRIPTION: This snippet demonstrates an example of an indexing event in the Elasticsearch slow log, formatted as JSON. It includes fields such as timestamp, cluster and index information, and indexing details.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/slow-log.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "@timestamp" : "2024-12-11T22:34:22.613Z",
  "auth.type": "REALM",
  "ecs.version": "1.2.0",
  "elasticsearch.cluster.name" : "41bd111609d849fc9bf9d25b5df9ce96",
  "elasticsearch.cluster.uuid" : "BZTn4I9URXSK26imlia0QA",
  "elasticsearch.index.id" : "3VfGR7wRRRKmMCEn7Ii58g",
  "elasticsearch.index.name": "my-index-000001",
  "elasticsearch.node.id" : "GGiBgg21S3eqPDHzQiCMvQ",
  "elasticsearch.node.name" : "instance-0000000001",
  "elasticsearch.slowlog.id" : "RCHbt5MBT0oSsCOu54AJ",
  "elasticsearch.slowlog.source": "{\"key\":\"value\"}"
  "elasticsearch.slowlog.took" : "0.01ms",
  "event.dataset": "elasticsearch.index_indexing_slowlog",
  "fileset.name" : "slowlog",
  "log.level" : "TRACE",
  "log.logger" : "index.indexing.slowlog.index",
  "service.name" : "ES_ECS",
  "user.name": "elastic",
  "user.realm": "reserved"
}
```

----------------------------------------

TITLE: Basic EQL Query Structure
DESCRIPTION: Demonstrates the basic structure of an EQL query, which requires an event category and a matching condition connected by the 'where' keyword.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_0

LANGUAGE: eql
CODE:
```
event_category where condition
```

----------------------------------------

TITLE: Executing Painless Boolean Script (Date Comparison) - Elasticsearch Console
DESCRIPTION: Executes a Painless script via the `_scripts/painless/_execute` endpoint in the 'boolean_field' context. The script accesses the 'release_date' field's year value and returns true if the year is less than 1972, and false otherwise.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_6

LANGUAGE: Console
CODE:
```
POST /_scripts/painless/_execute
{
  "script": {
    "source": """
      emit(doc['release_date'].value.year < 1972);
    """
  },
  "context": "boolean_field",
  "context_setup": {
    "index": "my-index-000001",
    "document": {
      "name": "Dune",
      "author": "Frank Herbert",
      "release_date": "1965-06-01",
      "page_count": 604
    }
  }
}
```

----------------------------------------

TITLE: Executing Elasticsearch Boosting Query
DESCRIPTION: Demonstrates a boosting query that searches for 'apple' while reducing relevance for documents containing related terms like 'pie', 'tart', 'fruit', 'crumble', and 'tree'
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-boosting-query.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "boosting": {
      "positive": {
        "term": {
          "text": "apple"
        }
      },
      "negative": {
        "term": {
          "text": "pie tart fruit crumble tree"
        }
      },
      "negative_boost": 0.5
    }
  }
}
```

----------------------------------------

TITLE: Internal Representation of Flattened Objects
DESCRIPTION: Shows how Elasticsearch internally flattens object hierarchies into a simple list of field names and values, losing the association between fields in the same object.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/nested.md#2025-04-21_snippet_1

LANGUAGE: js
CODE:
```
{
  "group" :        "fans",
  "user.first" : [ "alice", "john" ],
  "user.last" :  [ "smith", "white" ]
}
```

----------------------------------------

TITLE: Auto Date Histogram with Time Zone Example in Elasticsearch
DESCRIPTION: A complete example demonstrating time zone handling in auto date histogram aggregations. It first indexes three documents with timestamps, then performs an aggregation to bucket them by time.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-autodatehistogram-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1?refresh
{
  "date": "2015-10-01T00:30:00Z"
}

PUT my-index-000001/_doc/2?refresh
{
  "date": "2015-10-01T01:30:00Z"
}

PUT my-index-000001/_doc/3?refresh
{
  "date": "2015-10-01T02:30:00Z"
}

GET my-index-000001/_search?size=0
{
  "aggs": {
    "by_day": {
      "auto_date_histogram": {
        "field":     "date",
        "buckets" : 3
      }
    }
  }
}
```

----------------------------------------

TITLE: Control Highlight Fragment Size and Count Elasticsearch Console
DESCRIPTION: Configures Elasticsearch search highlighting for the 'comment' field, setting the maximum fragment character size ('fragment_size') to 150 and the maximum number of fragments ('number_of_fragments') to return to 3. This overrides the default highlighting behavior for that specific field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_19

LANGUAGE: console
CODE:
```
GET /_search
{
  "query" : {
    "match": { "user.id": "kimchy" }
  },
  "highlight" : {
    "fields" : {
      "comment" : {"fragment_size" : 150, "number_of_fragments" : 3}
    }
  }
}
```

----------------------------------------

TITLE: Initializing Index and Querying Geo-bounds for Geo_shape Fields in Elasticsearch
DESCRIPTION: This snippet demonstrates creating an index with a geo_shape field, inserting sample data including both point and polygon geometries, and performing a geo-bounds aggregation on the geo_shape field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-geobounds-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /places
{
  "mappings": {
    "properties": {
      "geometry": {
        "type": "geo_shape"
      }
    }
  }
}

POST /places/_bulk?refresh
{"index":{"_id":1}}
{"name": "NEMO Science Museum", "geometry": "POINT(4.912350 52.374081)" }
{"index":{"_id":2}}
{"name": "Sportpark De Weeren", "geometry": { "type": "Polygon", "coordinates": [ [ [ 4.965305328369141, 52.39347642069457 ], [ 4.966979026794433, 52.391721758934835 ], [ 4.969425201416015, 52.39238958618537 ], [ 4.967944622039794, 52.39420969150824 ], [ 4.965305328369141, 52.39347642069457 ] ] ] } }

POST /places/_search?size=0
{
  "aggs": {
    "viewport": {
      "geo_bounds": {
        "field": "geometry"
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining OffsetDateTime Class
DESCRIPTION: This code snippet outlines the `java.time.OffsetDateTime` class. The class represents a date and time with an offset from UTC/Greenwich in the ISO-8601 calendar system, such as 2007-12-03T10:15:30+01:00. This code lists its methods, including conversions to other date/time types, comparisons, arithmetic operations for adding/subtracting durations, parsing and formatting and adjusting the date.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.time.txt#2025-04-21_snippet_9

LANGUAGE: Java
CODE:
```
"class java.time.OffsetDateTime {\n  OffsetDateTime MAX\n  OffsetDateTime MIN\n  ZonedDateTime atZoneSameInstant(ZoneId)\n  ZonedDateTime atZoneSimilarLocal(ZoneId)\n  int compareTo(OffsetDateTime)\n  String format(DateTimeFormatter)\n  OffsetDateTime from(TemporalAccessor)\n  int getDayOfMonth()\n  DayOfWeek getDayOfWeek()\n  int getDayOfYear()\n  int getHour()\n  int getMinute()\n  Month getMonth()\n  int getMonthValue()\n  int getNano()\n  ZoneOffset getOffset()\n  int getSecond()\n  int getYear()\n  boolean isAfter(OffsetDateTime)\n  boolean isBefore(OffsetDateTime)\n  boolean isEqual(OffsetDateTime)\n  OffsetDateTime minus(TemporalAmount)\n  OffsetDateTime minus(long,TemporalUnit)\n  OffsetDateTime minusYears(long)\n  OffsetDateTime minusMonths(long)\n  OffsetDateTime minusWeeks(long)\n  OffsetDateTime minusDays(long)\n  OffsetDateTime minusHours(long)\n  OffsetDateTime minusMinutes(long)\n  OffsetDateTime minusSeconds(long)\n  OffsetDateTime minusNanos(long)\n  OffsetDateTime of(LocalDate,LocalTime,ZoneOffset)\n  OffsetDateTime of(LocalDateTime,ZoneOffset)\n  OffsetDateTime of(int,int,int,int,int,int,int,ZoneOffset)\n  OffsetDateTime ofInstant(Instant,ZoneId)\n  OffsetDateTime parse(CharSequence)\n  OffsetDateTime parse(CharSequence,DateTimeFormatter)\n  OffsetDateTime plus(TemporalAmount)\n  OffsetDateTime plus(long,TemporalUnit)\n  OffsetDateTime plusYears(long)\n  OffsetDateTime plusMonths(long)\n  OffsetDateTime plusWeeks(long)\n  OffsetDateTime plusDays(long)\n  OffsetDateTime plusHours(long)\n  OffsetDateTime plusMinutes(long)\n  OffsetDateTime plusSeconds(long)\n  OffsetDateTime plusNanos(long)\n  Comparator timeLineOrder()\n  long toEpochSecond()\n  Instant toInstant()\n  LocalDate toLocalDate()\n  LocalDateTime toLocalDateTime()\n  LocalTime toLocalTime()\n  OffsetTime toOffsetTime()\n  ZonedDateTime toZonedDateTime()\n  OffsetDateTime truncatedTo(TemporalUnit)\n  OffsetDateTime with(TemporalAdjuster)\n  OffsetDateTime with(TemporalField,long)\n  OffsetDateTime withDayOfMonth(int)\n  OffsetDateTime withDayOfYear(int)\n  OffsetDateTime withHour(int)\n  OffsetDateTime withMinute(int)\n  OffsetDateTime withMonth(int)\n  OffsetDateTime withNano(int)\n  OffsetDateTime withSecond(int)\n  OffsetDateTime withYear(int)\n  OffsetDateTime withOffsetSameLocal(ZoneOffset)\n  OffsetDateTime withOffsetSameInstant(ZoneOffset)\n}"
```

----------------------------------------

TITLE: Converting Text to Uppercase with TO_UPPER Function in ESQL
DESCRIPTION: This example demonstrates how to use the TO_UPPER function in ESQL to convert a text string to all uppercase letters. It creates a row with a message field and then uses EVAL with TO_UPPER to create a new field containing the uppercase version of the message.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_upper.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW message = "Some Text"
| EVAL message_upper = TO_UPPER(message)
```

----------------------------------------

TITLE: Converting String to Lowercase using TO_LOWER in ESQL
DESCRIPTION: This snippet demonstrates how to use the TO_LOWER function in ESQL to convert a string to lowercase. It creates a row with a 'message' field and then uses EVAL to create a new field 'message_lower' with the lowercase version of the message.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_lower.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW message = "Some Text"
| EVAL message_lower = TO_LOWER(message)
```

----------------------------------------

TITLE: Mapping a Completion Suggester Field in Elasticsearch
DESCRIPTION: Example showing how to define a completion suggester field in an Elasticsearch mapping. This creates a field named 'suggest' with type 'completion' for fast auto-complete functionality.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_8

LANGUAGE: json
CODE:
```
PUT music
{
  "mappings": {
    "properties": {
      "suggest": {
        "type": "completion"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Multiple Date Formats in Elasticsearch
DESCRIPTION: Example showing how to configure multiple date formats for a date field, separated by || as a delimiter. The formats are tried in order until a matching one is found.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/date.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "date": {
        "type":   "date",
        "format": "yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"
      }
    }
  }
}
```

----------------------------------------

TITLE: Using Phrase Suggester in Elasticsearch Search Query
DESCRIPTION: This snippet shows how to use the phrase suggester in an Elasticsearch search query, including configuration of size, gram size, and highlighting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
POST test/_search
{
  "suggest": {
    "text": "noble prize",
    "simple_phrase": {
      "phrase": {
        "field": "title.trigram",
        "size": 1,
        "gram_size": 3,
        "direct_generator": [ {
          "field": "title.trigram",
          "suggest_mode": "always"
        } ],
        "highlight": {
          "pre_tag": "<em>",
          "post_tag": "</em>"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Complete Serial Differencing Query with Date Histogram
DESCRIPTION: Complete example showing how to embed a serial differencing aggregation within a date histogram aggregation. Includes a sum metric calculation and a 30-day lag difference calculation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-serialdiff-aggregation.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
   "size": 0,
   "aggs": {
      "my_date_histo": {
         "date_histogram": {
            "field": "timestamp",
            "calendar_interval": "day"
         },
         "aggs": {
            "the_sum": {
               "sum": {
                  "field": "lemmings"
               }
            },
            "thirtieth_difference": {
               "serial_diff": {
                  "buckets_path": "the_sum",
                  "lag" : 30
               }
            }
         }
      }
   }
}
```

----------------------------------------

TITLE: Querying Documents Similar to Artificial and Existing Documents (Elasticsearch Console)
DESCRIPTION: Illustrates using the more_like_this query with artificial documents defined inline using the 'doc' structure, alongside references to existing documents. This is useful for finding similarities based on content not yet indexed or available externally. It targets specific fields and includes term selection parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-mlt-query.md#_snippet_2

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "more_like_this": {
      "fields": [ "name.first", "name.last" ],
      "like": [
        {
          "_index": "marvel",
          "doc": {
            "name": {
              "first": "Ben",
              "last": "Grimm"
            },
            "_doc": "You got no idea what I'd... what I'd give to be invisible."
          }
        },
        {
          "_index": "marvel",
          "_id": "2"
        }
      ],
      "min_term_freq": 1,
      "max_query_terms": 12
    }
  }
}
```

----------------------------------------

TITLE: Analyzing Text with Simple Analyzer in Elasticsearch
DESCRIPTION: Demonstrates how to make a POST request to Elasticsearch to analyze text using the simple analyzer. The simple analyzer tokenizes input by removing non-letter characters and converting text to lowercase. Supports processing arbitrary sentences into a list of letter-only tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-simple-analyzer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _analyze
{
  "analyzer": "simple",
  "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
}
```

----------------------------------------

TITLE: Implementing Gaussian Decay Function for Price Scoring in Elasticsearch
DESCRIPTION: This snippet shows how to implement a Gaussian decay function for scoring hotels based on price. It sets the origin at 0 and a scale of 20 Euros, meaning hotels closer to 0 Euros will receive higher scores.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-function-score-query.md#2025-04-21_snippet_9

LANGUAGE: js
CODE:
```
"gauss": { <1>
    "price": {
          "origin": "0",
          "scale": "20"
    }
}
```

----------------------------------------

TITLE: Using Equality Operator in Elasticsearch SQL
DESCRIPTION: Demonstrates the basic equality operator (=) to filter rows where a column's value exactly matches a specified value. The query selects the last name for employees with employee number 10000.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-operators.md#_snippet_0

LANGUAGE: sql
CODE:
```
SELECT last_name l FROM "test_emp" WHERE emp_no = 10000 LIMIT 5;
```

----------------------------------------

TITLE: Configuring and Querying Hierarchical Nested Object Fields with Inner Hits in Elasticsearch
DESCRIPTION: This example demonstrates how to set up a hierarchical nested structure with multiple levels (comments containing votes), index a document with this structure, and query it using nested paths with inner hits. The query targets a specific voter in the nested votes field and returns the matching nested objects.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-inner-hits.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
PUT test
{
  "mappings": {
    "properties": {
      "comments": {
        "type": "nested",
        "properties": {
          "votes": {
            "type": "nested"
          }
        }
      }
    }
  }
}

PUT test/_doc/1?refresh
{
  "title": "Test title",
  "comments": [
    {
      "author": "kimchy",
      "text": "comment text",
      "votes": []
    },
    {
      "author": "nik9000",
      "text": "words words words",
      "votes": [
        {"value": 1 , "voter": "kimchy"},
        {"value": -1, "voter": "other"}
      ]
    }
  ]
}

POST test/_search
{
  "query": {
    "nested": {
      "path": "comments.votes",
        "query": {
          "match": {
            "comments.votes.voter": "kimchy"
          }
        },
        "inner_hits" : {}
    }
  }
}
```

----------------------------------------

TITLE: Initializing ElasticSearch Client in JavaScript
DESCRIPTION: This snippet sets up an ElasticSearch client using the official JavaScript library, configuring connection parameters like node URL and authentication details. It enables subsequent operations such as indexing and searching documents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/plugins/analysis-kuromoji/src/test/resources/org/elasticsearch/plugin/analysis/kuromoji/user_dict.txt#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const { Client } = require('@elastic/elasticsearch');

const client = new Client({
  node: 'http://localhost:9200',
  auth: {
    username: 'user',
    password: 'pass'
  }
});
```

----------------------------------------

TITLE: Searching All Indices in Elasticsearch
DESCRIPTION: This snippet shows three equivalent ways to search across all data streams and indices in a cluster: omitting the target, using _all, or using * wildcard. All methods search for documents with user.id matching 'kimchy'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-multiple-data-streams-indices.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  }
}

GET /_all/_search
{
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  }
}

GET /*/_search
{
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  }
}
```

----------------------------------------

TITLE: Parsing Structured Data with GROK in ESQL
DESCRIPTION: This snippet uses the GROK function in ESQL to parse a string containing timestamp, IP address, email, and number. It extracts these fields and keeps only the parsed values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/grokWithConversionSuffix.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = "2023-01-23T12:15:00.000Z 127.0.0.1 some.email@foo.com 42"
| GROK a """%{TIMESTAMP_ISO8601:date} %{IP:ip} %{EMAILADDRESS:email} %{NUMBER:num:int}"""
| KEEP date, ip, email, num
```

----------------------------------------

TITLE: Creating API Key for Connector - Elasticsearch API
DESCRIPTION: This snippet provides the API call to create an API key necessary for the Microsoft Teams connector. It defines the role descriptors and necessary privileges. The expected output includes the encoded key that should be stored securely for future use.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-teams.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /_security/api_key
{
  "name": "connector_name-connector-api-key",
  "role_descriptors": {
    "connector_name-connector-role": {
      "cluster": [
        "monitor",
        "manage_connector"
      ],
      "indices": [
        {
          "names": [
            "index_name",
            ".search-acl-filter-index_name",
            ".elastic-connectors*"
          ],
          "privileges": [
            "all"
          ],
          "allow_restricted_indices": false
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: RRF Search Query with KNN and Standard Retrievers
DESCRIPTION: Example of combining kNN and standard retrievers using RRF in Elasticsearch. Demonstrates setting rank_window_size and rank_constant parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reciprocal-rank-fusion.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
GET example-index/_search
{
    "retriever": {
        "rrf": {
            "retrievers": [
                {
                    "standard": {
                        "query": {
                            "term": {
                                "text": "shoes"
                            }
                        }
                    }
                },
                {
                    "knn": {
                        "field": "vector",
                        "query_vector": [1.25, 2, 3.5],
                        "k": 50,
                        "num_candidates": 100
                    }
                }
            ],
            "rank_window_size": 50,
            "rank_constant": 20
        }
    }
}
```

----------------------------------------

TITLE: Fuzzy Completion Suggester Query in Elasticsearch
DESCRIPTION: Demonstrates how to use fuzzy matching with completion suggesters to handle typos in search queries, with configurable fuzziness parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_17

LANGUAGE: console
CODE:
```
POST music/_search?pretty
{
  "suggest": {
    "song-suggest": {
      "prefix": "nor",
      "completion": {
        "field": "suggest",
        "fuzzy": {
          "fuzziness": 2
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Querying and Aggregating with Multi-fields in Elasticsearch
DESCRIPTION: This snippet demonstrates how to perform a search query using the text field, while sorting and aggregating results using the keyword field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/multi-fields.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET my-index-000001/_search
{
  "query": {
    "match": {
      "city": "york"
    }
  },
  "sort": {
    "city.raw": "asc"
  },
  "aggs": {
    "Cities": {
      "terms": {
        "field": "city.raw"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Elasticsearch Highlighting Multiple Tags (console)
DESCRIPTION: Demonstrates how to provide an array of tags for both `pre_tags` and `post_tags` in an Elasticsearch `_search` request. This feature is particularly useful with highlighters like the fast vector highlighter, allowing different tags to be applied to highlighted terms potentially based on their relevance or order.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_6

LANGUAGE: console
CODE:
```
GET /_search
{
  "query" : {
    "match": { "user.id": "kimchy" }
  },
  "highlight" : {
    "pre_tags" : ["<tag1>", "<tag2>"],
    "post_tags" : ["</tag1>", "</tag2>"],
    "fields" : {
      "body" : {}
    }
  }
}
```

----------------------------------------

TITLE: Combining _source and filter_path in Elasticsearch Search
DESCRIPTION: Shows how to combine the _source parameter with filter_path to filter specific fields in the search results. This example indexes three documents and then retrieves only the title field, sorted by rating.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/common-options.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /library/_doc?refresh
{"title": "Book #1", "rating": 200.1}
POST /library/_doc?refresh
{"title": "Book #2", "rating": 1.7}
POST /library/_doc?refresh
{"title": "Book #3", "rating": 0.1}
GET /_search?filter_path=hits.hits._source&_source=title&sort=rating:desc
```

----------------------------------------

TITLE: Registering Elasticsearch Snapshot Repository in JSON
DESCRIPTION: Creates a snapshot repository for Elasticsearch using the filesystem type, specifying the location and enabling compression.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/qa/repository-old-versions-compatibility/src/javaRestTest/resources/README.md#2025-04-21_snippet_12

LANGUAGE: json
CODE:
```
PUT /_snapshot/repository
{
  "type": "fs",
  "settings": {
    "location": "/usr/share/elasticsearch/snapshots",
    "compress": true
  }
}
```

----------------------------------------

TITLE: Geo Distance Query in Elasticsearch
DESCRIPTION: Query to find documents with geoshapes or geopoints within a specified distance from a central point. Useful for proximity-based searches and location-aware applications.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/geo-queries.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "query": {
    "geo_distance": {
      "distance": "10km",
      "location": {
        "lat": 40.715,
        "lon": -74.011
      }
    }
  }
}
```

----------------------------------------

TITLE: Executing geohash_grid aggregation in Elasticsearch
DESCRIPTION: This snippet showcases performing a geohash_grid aggregation query in Elasticsearch to group documents by geohash values. It uses the GET HTTP method and specifies the location field with precision for aggregation. Outputs the document count per bucket in the results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-grid-query.md#2025-04-21_snippet_1

LANGUAGE: Elasticsearch
CODE:
```
GET /my_locations/_search
{
  "size" : 0,
  "aggs" : {
     "grouped" : {
        "geohash_grid" : {
           "field" : "location",
           "precision" : 2
        }
     }
  }
}
```

LANGUAGE: Elasticsearch
CODE:
```
{
  "took" : 10,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 3,
      "relation" : "eq"
    },
    "max_score" : null,
    "hits" : [ ]
  },
  "aggregations" : {
    "grouped" : {
      "buckets" : [
        {
          "key" : "u1",
          "doc_count" : 2
        },
        {
          "key" : "u0",
          "doc_count" : 1
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Defining Elasticsearch Runtime Field with Painless Script (Console)
DESCRIPTION: This snippet shows a console command (likely cURL) to update the mapping for the 'seats' index. It adds a runtime field named 'day_of_week' of type 'keyword'. The field's value is calculated dynamically at query time using a Painless script embedded within the 'source' property. The script accesses the 'datetime' field, gets its value, extracts the day of the week enum, converts it to a string, and uses the `emit` function to output the result.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-runtime-fields-context.md#_snippet_0

LANGUAGE: console
CODE:
```
PUT seats/_mapping
{
  "runtime": {
    "day_of_week": {
      "type": "keyword",
      "script": {
        "source": "emit(doc['datetime'].value.getDayOfWeekEnum().toString())"
      }
    }
  }
}
```

----------------------------------------

TITLE: Sorting by Combined Fields in Painless
DESCRIPTION: Illustrates how to sort search results using a Painless script that concatenates first and last names of players.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/brief-painless-walkthrough.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET hockey/_search
{
  "query": {
    "match_all": {}
  },
  "sort": {
    "_script": {
      "type": "string",
      "order": "asc",
      "script": {
        "lang": "painless",
        "source": "doc['first.keyword'].value + ' ' + doc['last.keyword'].value"
      }
    }
  }
}
```

----------------------------------------

TITLE: Missing Bucket Handling in Elasticsearch Aggregation
DESCRIPTION: Demonstrates how to include documents without values in composite aggregation results using missing_bucket parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_15

LANGUAGE: console
CODE:
```
GET /_search
{
  "size": 0,
  "aggs": {
    "my_buckets": {
      "composite": {
        "sources": [{
          "product_name": {
            "terms": {
              "field": "product",
              "missing_bucket": true,
              "missing_order": "last"
            }
          }
        }]
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing Parent Documents with Join Field (Object Notation) in Elasticsearch
DESCRIPTION: Example of creating two parent documents in the 'question' context using the object notation for the join field. This syntax clearly specifies the name of the relation for parent documents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/parent-join.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1?refresh
{
  "my_id": "1",
  "text": "This is a question",
  "my_join_field": {
    "name": "question" <1>
  }
}

PUT my-index-000001/_doc/2?refresh
{
  "my_id": "2",
  "text": "This is another question",
  "my_join_field": {
    "name": "question"
  }
}
```

----------------------------------------

TITLE: Indexing a Document Using Date Index Name Pipeline in Elasticsearch
DESCRIPTION: Example of indexing a document through the date index name pipeline, which will redirect it to a time-based index calculated from the document's date field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/date-index-name-processor.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /my-index/_doc/1?pipeline=monthlyindex
{
  "date1" : "2016-04-25T12:02:01.789Z"
}
```

----------------------------------------

TITLE: Defining Complex Role Descriptor with Index Management and Application Privileges in Elasticsearch
DESCRIPTION: This role descriptor includes manage_ilm privileges on specific indices, all privileges on security indices, and application-specific privileges for 'maps' with various edge cases in naming.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/src/test/resources/org/elasticsearch/xpack/security/audit/logfile/audited_roles.txt#2025-04-22_snippet_2

LANGUAGE: JSON
CODE:
```
{"cluster":[],"indices":[{"names":["na\"me","*"],"privileges":["manage_ilm"],"field_security":{"grant":null,"except":["denied*"]},"query":"{\"match\": {\"category\": \"click\"}}"},{"names":["/@&~(\\.security.*)/"],"privileges":["all","cluster:a_wrong_*_one"]}],"applications":[{"application":"maps","privileges":["coming","up","with","random","names","is","hard"],"resources":["raster:*"]}],"run_as":["impersonated???"]}
```

----------------------------------------

TITLE: Querying and Sorting Employee Data with ESQL
DESCRIPTION: This ESQL query selects the 'first_name', 'last_name', and 'height' columns from the 'employees' table. It then sorts the results by the 'height' column in descending order. This query is useful for retrieving a sorted list of employees based on their height.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/sortDesc.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP first_name, last_name, height
| SORT height DESC
```

----------------------------------------

TITLE: Starting a Full Data Sync Job
DESCRIPTION: Initiates a full sync job for transferring PostgreSQL data into Elasticsearch using a designated API call.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/api-tutorial.md#2025-04-21_snippet_16

LANGUAGE: json
CODE:
```
POST _connector/_sync_job
{
    "id": "my-connector-id",
    "job_type": "full"
}
```

----------------------------------------

TITLE: Field Name Search in Query String
DESCRIPTION: Demonstrates various ways to search specific fields in Elasticsearch query syntax, including exact phrase matching, field wildcards, and field existence checking
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_2

LANGUAGE: elasticsearch
CODE:
```
status:active
```

LANGUAGE: elasticsearch
CODE:
```
title:(quick OR brown)
```

LANGUAGE: elasticsearch
CODE:
```
author:"John Smith"
```

LANGUAGE: elasticsearch
CODE:
```
first\ name:Alice
```

LANGUAGE: elasticsearch
CODE:
```
book.\*:(quick OR brown)
```

LANGUAGE: elasticsearch
CODE:
```
_exists_:title
```

----------------------------------------

TITLE: Setting Up Nested Index in Elasticsearch
DESCRIPTION: This snippet demonstrates how to set up an index with a nested field in Elasticsearch, which is necessary to use nested queries. It includes defining the field type as 'nested' in the index mappings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-nested-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "mappings": {
    "properties": {
      "obj1": {
        "type": "nested"
      }
    }
  }
}
```

----------------------------------------

TITLE: Elasticsearch Pipeline Definition and Document Indexing
DESCRIPTION: Pipeline configuration using foreach processor to iterate over attachments array and process each attachment individually, followed by document indexing command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/attachment.md#2025-04-21_snippet_13

LANGUAGE: console
CODE:
```
PUT _ingest/pipeline/attachment
{
  "description" : "Extract attachment information from arrays",
  "processors" : [
    {
      "foreach": {
        "field": "attachments",
        "processor": {
          "attachment": {
            "target_field": "_ingest._value.attachment",
            "field": "_ingest._value.data",
            "remove_binary": true
          }
        }
      }
    }
  ]
}
PUT my-index-000001/_doc/my_id?pipeline=attachment
{
  "attachments" : [
    {
      "filename" : "ipsum.txt",
      "data" : "dGhpcyBpcwpqdXN0IHNvbWUgdGV4dAo="
    },
    {
      "filename" : "test.txt",
      "data" : "VGhpcyBpcyBhIHRlc3QK"
    }
  ]
}
GET my-index-000001/_doc/my_id
```

----------------------------------------

TITLE: Calculating Cumulative Sales Example
DESCRIPTION: Demonstrates how to calculate cumulative sum of monthly sales using date histogram and sum aggregations. Uses calendar_interval for monthly buckets and tracks running total of the price field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-cumulative-sum-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "size": 0,
  "aggs": {
    "sales_per_month": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "sales": {
          "sum": {
            "field": "price"
          }
        },
        "cumulative_sales": {
          "cumulative_sum": {
            "buckets_path": "sales"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Executing a Terms Set Query with minimum_should_match_field
DESCRIPTION: This snippet demonstrates a terms set query that searches for documents with at least two matching programming languages from a provided list. It uses the minimum_should_match_field parameter to reference the required_matches field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-terms-set-query.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /job-candidates/_search
{
  "query": {
    "terms_set": {
      "programming_languages": {
        "terms": [ "c++", "java", "php" ],
        "minimum_should_match_field": "required_matches"
      }
    }
  }
}
```

----------------------------------------

TITLE: Generating Is Not Null Query in Elasticsearch
DESCRIPTION: This snippet shows how to create a query to check for non-null values in Elasticsearch. It uses an exists query to ensure the pid field is not null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_26

LANGUAGE: eql
CODE:
```
process where pid != null
```

LANGUAGE: json
CODE:
```
"must":[{"term":{"event.category":{"value":"process"}}},{"exists":{"field":"pid","boost":1.0}}]
```

----------------------------------------

TITLE: Create index API request using the stop filter
DESCRIPTION: This snippet demonstrates how to use the `stop` filter to configure a new custom analyzer. The custom analyzer `my_analyzer` uses the `whitespace` tokenizer and the `stop` filter.  This analyzer is then associated with the index `my-index-000001`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "whitespace",
          "filter": [ "stop" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Assigning Variables in Painless
DESCRIPTION: Examples of variable assignment in Painless, including immediate assignment, assignment between variables, and working with reference types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-variables.md#2025-04-21_snippet_1

LANGUAGE: painless
CODE:
```
int i;
i = 10;
```

LANGUAGE: painless
CODE:
```
int i = 10;
double j = 2.0;
```

LANGUAGE: painless
CODE:
```
int i = 10;
int j = i;
```

LANGUAGE: painless
CODE:
```
ArrayList l = new ArrayList();
Map m = new HashMap();
```

LANGUAGE: painless
CODE:
```
List l = new ArrayList();
List k = l;
List m;
m = k;
```

----------------------------------------

TITLE: MATCH Function with AND Operator and KEEP Clause in ESQL
DESCRIPTION: Shows how to use MATCH with the AND operator to search for multiple terms that must all appear in the title field. The KEEP clause retains only the title field in the results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/match.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM books
| WHERE MATCH(title, "Hobbit Back Again", {"operator": "AND"})
| KEEP title;
```

----------------------------------------

TITLE: Configuring Custom DFR Similarity Settings in Elasticsearch
DESCRIPTION: Example showing how to create an index with custom DFR similarity settings. The configuration includes basic model, after effect, and normalization parameters that can be referenced later in field mappings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/similarity.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /index
{
  "settings": {
    "index": {
      "similarity": {
        "my_similarity": {
          "type": "DFR",
          "basic_model": "g",
          "after_effect": "l",
          "normalization": "h2",
          "normalization.h2.c": "3.0"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Formatting Dates with DATE_FORMAT in ESQL
DESCRIPTION: Shows how to select specific columns using KEEP and create a formatted date string using DATE_FORMAT function. The query selects first_name, last_name, and hire_date fields, then creates a new 'hired' field with formatted date.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/date_format.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP first_name, last_name, hire_date
| EVAL hired = DATE_FORMAT("yyyy-MM-dd", hire_date)
```

----------------------------------------

TITLE: Creating a Pipeline with Date Index Name Processor in Elasticsearch
DESCRIPTION: Example of creating an ingest pipeline that uses the date_index_name processor to direct documents to monthly indices with a 'my-index-' prefix based on a date field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/date-index-name-processor.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT _ingest/pipeline/monthlyindex
{
  "description": "monthly date-time index naming",
  "processors" : [
    {
      "date_index_name" : {
        "field" : "date1",
        "index_name_prefix" : "my-index-",
        "date_rounding" : "M"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Moving Max Function Example
DESCRIPTION: Example of using the pre-built max function in a moving function aggregation to find maximum values in the window.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-movfn-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /_search
{
  "size": 0,
  "aggs": {
    "my_date_histo": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "1M"
      },
      "aggs": {
        "the_sum": {
          "sum": { "field": "price" }
        },
        "the_moving_max": {
          "moving_fn": {
            "buckets_path": "the_sum",
            "window": 10,
            "script": "MovingFunctions.max(values)"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Using Comparison Operators (<, <=, >, >=) in Elasticsearch SQL
DESCRIPTION: Demonstrates using standard comparison operators like <, <=, >, and >= to filter rows based on the relationship between a column's value and a specified value. The query selects the last name for employees with employee numbers less than 10003.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-operators.md#_snippet_3

LANGUAGE: sql
CODE:
```
SELECT last_name l FROM "test_emp" WHERE emp_no < 10003 ORDER BY emp_no LIMIT 5;
```

----------------------------------------

TITLE: Whitespace Analyzer in Elasticsearch
DESCRIPTION: Analyzer that splits text into terms on whitespace characters without lowercasing terms.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analyzer-reference.md#2025-04-21_snippet_2

LANGUAGE: elasticsearch
CODE:
```
"analyzer": "whitespace"
```

----------------------------------------

TITLE: Creating English Custom Analyzer in Elasticsearch
DESCRIPTION: This snippet details the creation of a custom analyzer designed for English language texts in Elasticsearch. It includes various filters such as possessive stemming, stop words, and keyword markers for effective text processing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_11

LANGUAGE: json
CODE:
```
PUT /english_example
{
  "settings": {
    "analysis": {
      "filter": {
        "english_stop": {
          "type":       "stop",
          "stopwords":  "_english_" <1>
        },
        "english_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["example"] <2>
        },
        "english_stemmer": {
          "type":       "stemmer",
          "language":   "english"
        },
        "english_possessive_stemmer": {
          "type":       "stemmer",
          "language":   "possessive_english"
        }
      },
      "analyzer": {
        "rebuilt_english": {
          "tokenizer":  "standard",
          "filter": [
            "english_possessive_stemmer",
            "lowercase",
            "english_stop",
            "english_keywords",
            "english_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Service Token with elasticsearch-service-tokens - Shell
DESCRIPTION: Shows an example of using the `elasticsearch-service-tokens` command to create a new service account token. It creates a token named `my-token` for the `elastic/fleet-server` service account principal, demonstrating the required syntax for the `create` operation. Executing this command outputs the newly generated bearer token.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/service-tokens-command.md#_snippet_1

LANGUAGE: shell
CODE:
```
bin/elasticsearch-service-tokens create elastic/fleet-server my-token
```

----------------------------------------

TITLE: Explaining Document Goals Field Using Debug.explain
DESCRIPTION: Demonstrates using Debug.explain to inspect the type and content of the goals field in a script query context.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-debugging.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /hockey/_explain/1
{
  "query": {
    "script": {
      "script": "Debug.explain(doc.goals)"
    }
  }
}
```

----------------------------------------

TITLE: Executing Intervals Query in ElasticSearch
DESCRIPTION: This snippet demonstrates how to use the `intervals` query in ElasticSearch to return documents containing specified terms and sequences with defined order and proximity. The query includes parameters such as `match`, `max_gaps`, and `ordered` to control the sequence and proximity of matches.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-intervals-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _search
{
  "query": {
    "intervals" : {
      "my_text" : {
        "all_of" : {
          "ordered" : true,
          "intervals" : [
            {
              "match" : {
                "query" : "my favorite food",
                "max_gaps" : 0,
                "ordered" : true
              }
            },
            {
              "any_of" : {
                "intervals" : [
                  { "match" : { "query" : "hot water" } },
                  { "match" : { "query" : "cold porridge" } }
                ]
              }
            }
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Retrieving Available Ingest Processors Using Nodes Info API
DESCRIPTION: This API call retrieves a list of all available ingest processors from Elasticsearch nodes, filtering the response to only show processor information. It helps users discover which processors are available in their Elasticsearch installation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/index.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET _nodes/ingest?filter_path=nodes.*.ingest.processors
```

----------------------------------------

TITLE: Executing Top Hits Aggregation with Nested Aggregation in Elasticsearch
DESCRIPTION: This snippet demonstrates a search query that uses a nested aggregation on the 'comments' field, followed by a terms aggregation on 'comments.username', and finally a top_hits aggregation to retrieve nested hits.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-top-hits-aggregation.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "query": {
    "term": { "tags": "car" }
  },
  "aggs": {
    "by_sale": {
      "nested": {
        "path": "comments"
      },
      "aggs": {
        "by_user": {
          "terms": {
            "field": "comments.username",
            "size": 1
          },
          "aggs": {
            "by_nested": {
              "top_hits": {}
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Correct Multi-field Copy_to Configuration in Elasticsearch
DESCRIPTION: This example demonstrates the correct way to copy values from one field to multiple target fields in Elasticsearch. It shows how to directly copy from the source field to multiple destination fields using an array.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/copy-to.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT good_example_index
{
  "mappings": {
    "properties": {
      "field_1": {
        "type": "text",
        "copy_to": ["field_2", "field_3"]
      },
      "field_2": {
        "type": "text"
      },
      "field_3": {
        "type": "text"
      }
    }
  }
}
```

----------------------------------------

TITLE: Create MongoDB Connector using API
DESCRIPTION: This snippet demonstrates how to create a MongoDB connector using the Elasticsearch Create connector API. It sets the index name, connector name, and service type. It requires an API key with specific cluster and index privileges to be created and configured.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-mongodb.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
"PUT _connector/my-mongodb-connector
{
  "index_name": "my-elasticsearch-index",
  "name": "Content synced from MongoDB",
  "service_type": "mongodb"
}"
```

----------------------------------------

TITLE: Downloading GraphQL Connector Configuration File with cURL
DESCRIPTION: This command downloads the sample configuration file for the GraphQL connector using cURL, saving it to the user's home directory in a 'connectors-config' folder.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-graphql.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
curl https://raw.githubusercontent.com/elastic/connectors/main/config.yml.example --output ~/connectors-config/config.yml
```

----------------------------------------

TITLE: Deleting Elasticsearch User
DESCRIPTION: Example showing how to delete the user 'jacknich' from the system.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/users-command.md#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
bin/elasticsearch-users userdel jacknich
```

----------------------------------------

TITLE: Filtering Active Employees with ESQL
DESCRIPTION: ESQL query that selects first name, last name, and employment status from an employees table, filtering to show only currently hired employees. Uses KEEP for column selection and WHERE for filtering active employees.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/whereBoolean.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP first_name, last_name, still_hired
| WHERE still_hired
```

----------------------------------------

TITLE: Basic Subquery Select Operations
DESCRIPTION: Basic SELECT operations using subqueries in Elasticsearch SQL, demonstrating simple field selection and aliasing
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_subqueries_tests.txt#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
SELECT int FROM
    (SELECT int FROM test);
```

----------------------------------------

TITLE: Querying Documents Similar to Text (Elasticsearch Console)
DESCRIPTION: Demonstrates the basic more_like_this query. It searches the specified fields ('title', 'description') for documents similar to the provided text string. It limits term selection with min_term_freq and max_query_terms to control the query's complexity and accuracy.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-mlt-query.md#_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "more_like_this" : {
      "fields" : ["title", "description"],
      "like" : "Once upon a time",
      "min_term_freq" : 1,
      "max_query_terms" : 12
    }
  }
}
```

----------------------------------------

TITLE: Top Metrics Aggregation with Multiple Field Types
DESCRIPTION: This example shows how to use top_metrics aggregation with various field types including date, integer, and keyword fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-top-metrics.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /test
{
  "mappings": {
    "properties": {
      "d": {"type": "date"}
    }
  }
}
POST /test/_bulk?refresh
{"index": {}}
{"s": 1, "m": 3.1415, "i": 1, "d": "2020-01-01T00:12:12Z", "t": "cat"}
{"index": {}}
{"s": 2, "m": 1.0, "i": 6, "d": "2020-01-02T00:12:12Z", "t": "dog"}
{"index": {}}
{"s": 3, "m": 2.71828, "i": -12, "d": "2019-12-31T00:12:12Z", "t": "chicken"}
POST /test/_search?filter_path=aggregations
{
  "aggs": {
    "tm": {
      "top_metrics": {
        "metrics": [
          {"field": "m"},
          {"field": "i"},
          {"field": "d"},
          {"field": "t.keyword"}
        ],
        "sort": {"s": "desc"}
      }
    }
  }
}
```

----------------------------------------

TITLE: Process Sequence with Termination Check
DESCRIPTION: Enhanced query using until keyword to prevent false positives from PID reuse.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_20

LANGUAGE: eql
CODE:
```
sequence by process.pid
  [ process where event.type == "start" and process.name == "cmd.exe" ]
  [ process where file.extension == "exe" ]
until [ process where event.type == "stop" ]
```

----------------------------------------

TITLE: Creating a Custom Analyzer with KStem Filter in Elasticsearch
DESCRIPTION: This example shows how to configure a new custom analyzer that incorporates the KStem filter. It uses the create index API to set up an analyzer named 'my_analyzer' with a whitespace tokenizer, lowercase filter, and KStem filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-kstem-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "whitespace",
          "filter": [
            "lowercase",
            "kstem"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Full String LIKE on Text Field (ESQL)
DESCRIPTION: Demonstrates another behavior of the `LIKE` operator on a `text` field in ESQL. As `text` fields are treated like `keyword` fields, `LIKE` attempts to match the *entire* string value, not individual terms. This example shows it won't match the full value "Elasticsearch query language" with the pattern "Elasticsearch".
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/limitations.md#_snippet_3

LANGUAGE: esql
CODE:
```
| WHERE field LIKE "Elasticsearch"
```

----------------------------------------

TITLE: Using Lambda Expressions and Method References in Painless
DESCRIPTION: This code demonstrates various ways to use lambda expressions and method references in Painless scripting. Examples include removing elements from a list based on a condition, sorting list elements, and using the Integer.compare method reference for comparison operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-lambdas.md#2025-04-21_snippet_0

LANGUAGE: painless
CODE:
```
list.removeIf(item -> item == 2);
list.removeIf((int item) -> item == 2);
list.removeIf((int item) -> { item == 2 });
list.sort((x, y) -> x - y);
list.sort(Integer::compare);
```

----------------------------------------

TITLE: GROUP BY with Aggregate Function
DESCRIPTION: Example of using GROUP BY with the COUNT aggregate function to count employees by gender group.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_16

LANGUAGE: sql
CODE:
```
SELECT gender AS g, COUNT(*) AS c FROM emp GROUP BY gender;
```

----------------------------------------

TITLE: Saving Percolator Queries
DESCRIPTION: Examples of storing percolator queries in Elasticsearch for matching 'brown fox' and 'lazy dog' patterns.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-percolate-query.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
PUT /my-index-000001/_doc/3?refresh
{
  "query": {
    "match": {
      "message": "brown fox"
    }
  }
}
```

LANGUAGE: console
CODE:
```
PUT /my-index-000001/_doc/4?refresh
{
  "query": {
    "match": {
      "message": "lazy dog"
    }
  }
}
```

----------------------------------------

TITLE: ESQL SORT Command Syntax
DESCRIPTION: Basic syntax for the SORT command showing how to sort one or more columns with optional ascending/descending order and null value handling specifications.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/sort.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
SORT column1 [ASC/DESC][NULLS FIRST/NULLS LAST][, ..., columnN [ASC/DESC][NULLS FIRST/NULLS LAST]]
```

----------------------------------------

TITLE: Generating CA Certificate with elasticsearch-certutil
DESCRIPTION: This command generates a CA certificate and private key in PKCS#12 format. It prompts for an output filename and password, which can also be specified using the --out and --pass parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/certutil.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
bin/elasticsearch-certutil ca
```

----------------------------------------

TITLE: Indexing a Document with a Pipeline in Elasticsearch
DESCRIPTION: Indexes a document into 'my-index-000001' while specifying 'pipelineB' to process the document. This will execute both the outer and inner pipelines in sequence.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/pipeline-processor.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT /my-index-000001/_doc/1?pipeline=pipelineB
{
  "field": "value"
}
```

----------------------------------------

TITLE: Monthly Sales to Daily Rate Query
DESCRIPTION: Shows how to calculate total monthly sales and convert them to average daily sales rates using field values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-rate-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET sales/_search
{
  "size": 0,
  "aggs": {
    "by_date": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "avg_price": {
          "rate": {
            "field": "price",
            "unit": "day"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Pattern Tokenizer with Custom Delimiter in Elasticsearch
DESCRIPTION: Example showing how to configure a custom pattern tokenizer that splits text on commas. It creates an index with a custom analyzer using this tokenizer and demonstrates analyzing comma-separated values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pattern-tokenizer.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "my_tokenizer"
        }
      },
      "tokenizer": {
        "my_tokenizer": {
          "type": "pattern",
          "pattern": ","
        }
      }
    }
  }
}

POST my-index-000001/_analyze
{
  "analyzer": "my_analyzer",
  "text": "comma,separated,values"
}
```

LANGUAGE: text
CODE:
```
[ comma, separated, values ]
```

----------------------------------------

TITLE: Initializing Search Application Client with API Key
DESCRIPTION: Code snippet demonstrating how to initialize the Search Application client with the generated API key. This client is used in frontend applications to securely query Elasticsearch Search Applications.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-dls-e2e-guide.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
const client = SearchApplicationClient(applicationName, endpoint, apiKey, params);
```

----------------------------------------

TITLE: Parsing Date and Extracting Year in ESQL
DESCRIPTION: This snippet demonstrates how to parse a date string into a date object and then extract the year from it using ESQL functions. It uses DATE_PARSE to convert a string to a date, and DATE_EXTRACT to get the year component.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/date_extract.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW date = DATE_PARSE("yyyy-MM-dd", "2022-05-06")
| EVAL year = DATE_EXTRACT("year", date)
```

----------------------------------------

TITLE: Rollover Based on Index Size
DESCRIPTION: ILM policy configuration that triggers rollover when the total index size reaches 100GB.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-rollover.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "hot": {
        "actions": {
          "rollover" : {
            "max_size": "100gb"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Initializing Map with Non-Static Values in Painless
DESCRIPTION: Illustrates the initialization of a Map using variables and expressions as keys and values in Painless, demonstrating type conversions and arithmetic operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-reference.md#2025-04-21_snippet_14

LANGUAGE: painless
CODE:
```
byte b = 0;                  
int i = 1;                   
long l = 2L;                 
float f = 3.0F;              
double d = 4.0;              
String s = "5";              
Map map = [b:i, l:f*d, d:s]; 
```

----------------------------------------

TITLE: Creating Elasticsearch Index with Daily Date Math (Console)
DESCRIPTION: This console command demonstrates creating an Elasticsearch index using a date math name (`<my-index-{now/d}>`) in the path. The angle brackets and curly braces are URI encoded.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/api-conventions.md#_snippet_9

LANGUAGE: console
CODE:
```
PUT /%3Cmy-index-%7Bnow%2Fd%7D%3E
```

----------------------------------------

TITLE: Terms Value Source with Runtime Field Example
DESCRIPTION: Shows how to use a runtime field with the terms value source in a composite aggregation. This example creates a day_of_week runtime field that emits the day name from a timestamp field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
GET /_search
{
  "runtime_mappings": {
    "day_of_week": {
      "type": "keyword",
      "script": """
        emit(doc['timestamp'].value.dayOfWeekEnum
          .getDisplayName(TextStyle.FULL, Locale.ENGLISH))
      """
    }
  },
  "size": 0,
  "aggs": {
    "my_buckets": {
      "composite": {
        "sources": [
          {
            "dow": {
              "terms": { "field": "day_of_week" }
            }
          }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Performing a Search in Elasticsearch using Java API Client
DESCRIPTION: This snippet shows how to perform a search operation in Elasticsearch using the Java API Client. It constructs a search query and executes it, then processes the search results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/ent-search/licenses/slf4j-api-NOTICE.txt#2025-04-22_snippet_2

LANGUAGE: Java
CODE:
```
SearchResponse<Product> response = client.search(s -> s
    .index("products")
    .query(q -> q
        .term(t -> t
            .field("name")
            .value(v -> v.stringValue("bike"))
        )
    ),
    Product.class
);

for (Hit<Product> hit: response.hits().hits()) {
    processProduct(hit.source());
}
```

----------------------------------------

TITLE: Creating a GeoIP Pipeline with Default Settings
DESCRIPTION: Example of creating an ingest pipeline that uses the default city database to add geographical information to the 'geoip' field based on the 'ip' field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/geoip-processor.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
PUT _ingest/pipeline/geoip
{
  "description" : "Add ip geolocation info",
  "processors" : [
    {
      "geoip" : {
        "field" : "ip"
      }
    }
  ]
}
PUT my-index-000001/_doc/my_id?pipeline=geoip
{
  "ip": "89.160.20.128"
}
GET my-index-000001/_doc/my_id
```

----------------------------------------

TITLE: Disabling Source Retrieval in Elasticsearch Console
DESCRIPTION: This console command demonstrates how to use the `_source` parameter in a search request body to prevent the original document source from being returned in the search hits. Setting `_source` to `false` is useful when you only need metadata or values retrieved via `fields`, `docvalue_fields`, or `stored_fields`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_14

LANGUAGE: console
CODE:
```
GET /_search
{
  "_source": false,
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  }
}
```

----------------------------------------

TITLE: Range Aggregation with Runtime Field in Elasticsearch
DESCRIPTION: Demonstrates using a runtime field for currency conversion in a range aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-range-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET sales/_search
{
  "runtime_mappings": {
    "price.euros": {
      "type": "double",
      "script": {
        "source": """
          emit(doc['price'].value * params.conversion_rate)
        """,
        "params": {
          "conversion_rate": 0.835526591
        }
      }
    }
  },
  "aggs": {
    "price_ranges": {
      "range": {
        "field": "price.euros",
        "ranges": [
          { "to": 100 },
          { "from": 100, "to": 200 },
          { "from": 200 }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Performing Datetime Comparisons with Painless
DESCRIPTION: This snippet illustrates how to perform greater than, equality, and less than comparisons of numeric and complex ZonedDateTime objects using Painless scripting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_15

LANGUAGE: painless
CODE:
```
long timestamp1 = 434931327000L;
long timestamp2 = 434931330000L;

if (timestamp1 > timestamp2) {
   // handle condition
}
```

LANGUAGE: painless
CODE:
```
ZonedDateTime zdt1 =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 0, ZoneId.of('Z'));
ZonedDateTime zdt2 =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 0, ZoneId.of('Z'));

if (zdt1.equals(zdt2)) {
    // handle condition
}
```

LANGUAGE: painless
CODE:
```
ZonedDateTime zdt1 =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 0, ZoneId.of('Z'));
ZonedDateTime zdt2 =
        ZonedDateTime.of(1983, 10, 17, 22, 15, 35, 0, ZoneId.of('Z'));

if (zdt1.isBefore(zdt2)) {
    // handle condition
}
```

LANGUAGE: painless
CODE:
```
ZonedDateTime zdt1 =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 0, ZoneId.of('Z'));
ZonedDateTime zdt2 =
        ZonedDateTime.of(1983, 10, 17, 22, 15, 35, 0, ZoneId.of('Z'));

if (zdt1.isAfter(zdt2)) {
    // handle condition
}
```

----------------------------------------

TITLE: Case-Insensitive Username Start Filter - Elasticsearch
DESCRIPTION: This query is similar to the previous but enables case-insensitive matching for `user_name` starting with 'A' or 'B'. Employs the `prefix` query with the `case_insensitive` flag set to true.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_6

LANGUAGE: Elasticsearch
CODE:
```
{"bool":{"must":[{"term":{"event.category":{"value":"process"}}},{"bool":{"should":[{"prefix":{"user_name":{"value":"A","case_insensitive":true,"boost":1.0}}},{"prefix":{"user_name":{"value":"B","case_insensitive":true,"boost":1.0}}}],"boost":1.0}}],"boost":1.0}}
```

----------------------------------------

TITLE: Missing Values Handling in Elasticsearch Sort
DESCRIPTION: Example showing how to handle missing values in sort operations using the missing parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/sort-search-results.md#2025-04-21_snippet_10

LANGUAGE: console
CODE:
```
GET /_search
{
  "sort" : [
    { "price" : {"missing" : "_last"} }
  ],
  "query" : {
    "term" : { "product" : "chocolate" }
  }
}
```

----------------------------------------

TITLE: Querying Multiple Fields with Different Analyzers in Elasticsearch
DESCRIPTION: This snippet shows how to perform a multi-match query across fields with different analyzers, combining the scores to improve search relevance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/multi-fields.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET my-index-000001/_search
{
  "query": {
    "multi_match": {
      "query": "quick brown foxes",
      "fields": [
        "text",
        "text.english"
      ],
      "type": "most_fields"
    }
  }
}
```

----------------------------------------

TITLE: Creating and Querying Field Alias in Elasticsearch
DESCRIPTION: Shows how to create an index with a field alias mapping and perform a search query using the alias. The example creates an alias 'route_length_miles' pointing to a 'distance' field of type long.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/field-alias.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT trips
{
  "mappings": {
    "properties": {
      "distance": {
        "type": "long"
      },
      "route_length_miles": {
        "type": "alias",
        "path": "distance"
      },
      "transit_mode": {
        "type": "keyword"
      }
    }
  }
}

GET _search
{
  "query": {
    "range" : {
      "route_length_miles" : {
        "gte" : 39
      }
    }
  }
}
```

----------------------------------------

TITLE: Highlight Entire Field with Zero Fragments Elasticsearch Console
DESCRIPTION: Shows how to return the full content of a field ('blog.title') with highlighting applied, rather than breaking it into fragments. Setting 'number_of_fragments' to '0' disables fragmentation, making it suitable for short fields like titles where the whole text should be highlighted. 'fragment_size' is ignored.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_21

LANGUAGE: console
CODE:
```
GET /_search
{
  "query" : {
    "match": { "user.id": "kimchy" }
  },
  "highlight" : {
    "fields" : {
      "body" : {},
      "blog.title" : {"number_of_fragments" : 0}
    }
  }
}
```

----------------------------------------

TITLE: Creating HTTP Server Certificate for Elasticsearch in Bash
DESCRIPTION: Generates a certificate for the HTTP server signed by the previously created CA. It sets up DNS for localhost and IP addresses for both IPv4 and IPv6 loopback interfaces with a 9999-day validity period.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/qa/saml-rest-tests/src/javaRestTest/resources/ssl/README.txt#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
elasticsearch-certutil cert --name "http" --ca-cert ${PWD}/ca.crt --ca-key ${PWD}/ca.key --days 9999 --dns "localhost" --ip "127.0.0.1" --ip "0:0:0:0:0:0:0:1" --keysize 2048 --out ${PWD}/http.zip --pem 
unzip http.zip
mv http/http.* ./
rmdir http
rm http.zip
```

----------------------------------------

TITLE: Elasticsearch Update Query for Old Documents
DESCRIPTION: Elasticsearch query to remove content from drive items older than 180 days while preserving metadata
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-sharepoint-online.md#2025-04-22_snippet_7

LANGUAGE: console
CODE:
```
POST INDEX_NAME/_update_by_query?conflicts=proceed
{
  "query": {
    "bool": {
      "filter": [
        {
          "match": {
            "object_type": "drive_item"
          }
        },
        {
          "exists": {
            "field": "file"
          }
        },
        {
          "range": {
            "lastModifiedDateTime": {
              "lte": "now-180d"
            }
          }
        }
      ]
    }
  },
  "script": {
    "source": "ctx._source.body = ''",
    "lang": "painless"
  }
}
```

----------------------------------------

TITLE: Setting custom node attribute via command line in Elasticsearch
DESCRIPTION: Shows how to set a custom node attribute when starting an Elasticsearch node using the command line interface.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/shard-allocation.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
./bin/elasticsearch -Enode.attr.size=medium
```

----------------------------------------

TITLE: Italian Custom Analyzer Implementation
DESCRIPTION: Demonstrates how to reimplement the built-in Italian analyzer with custom configurations including elision, stop words, keyword marking, and stemming filters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_22

LANGUAGE: console
CODE:
```
PUT /italian_example
{
  "settings": {
    "analysis": {
      "filter": {
        "italian_elision": {
          "type": "elision",
          "articles": [
                "c", "l", "all", "dall", "dell",
                "nell", "sull", "coll", "pell",
                "gl", "agl", "dagl", "degl", "negl",
                "sugl", "un", "m", "t", "s", "v", "d"
          ],
          "articles_case": true
        },
        "italian_stop": {
          "type":       "stop",
          "stopwords":  "_italian_"
        },
        "italian_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["esempio"]
        },
        "italian_stemmer": {
          "type":       "stemmer",
          "language":   "light_italian"
        }
      },
      "analyzer": {
        "rebuilt_italian": {
          "tokenizer":  "standard",
          "filter": [
            "italian_elision",
            "lowercase",
            "italian_stop",
            "italian_keywords",
            "italian_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Date Histogram Aggregation with Custom Time Zone in Elasticsearch
DESCRIPTION: This example demonstrates how specifying a custom time zone in a date histogram aggregation affects the bucketing of documents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-datehistogram-aggregation.md#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
GET my-index-000001/_search?size=0
{
  "aggs": {
    "by_day": {
      "date_histogram": {
        "field":     "date",
        "calendar_interval":  "day",
        "time_zone": "-01:00"
      }
    }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "by_day": {
      "buckets": [
        {
          "key_as_string": "2015-09-30T00:00:00.000-01:00",
          "key": 1443574800000,
          "doc_count": 1
        },
        {
          "key_as_string": "2015-10-01T00:00:00.000-01:00",
          "key": 1443661200000,
          "doc_count": 1
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: IN Clause Operations
DESCRIPTION: SQL queries using IN clauses with various data types and null handling scenarios.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_10

LANGUAGE: sql
CODE:
```
SELECT * FROM test WHERE keyword IN ('foo', 'bar', 'lala', 'foo', concat('la', 'la'));
```

LANGUAGE: json
CODE:
```
{"terms":{"keyword":["foo","bar","lala"],"boost":1.0}}
```

----------------------------------------

TITLE: Creating a Mapping with Join Field Relation for Parent Aggregation
DESCRIPTION: Creates an index with a join field mapping that establishes a question-answer relationship where question is the parent and answer is the child document type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-parent-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT parent_example
{
  "mappings": {
     "properties": {
       "join": {
         "type": "join",
         "relations": {
           "question": "answer"
         }
       }
     }
  }
}
```

----------------------------------------

TITLE: Elasticsearch Content Document with Access Control
DESCRIPTION: These code snippets provide examples of a content document and illustrate which users have access depending on their permissions. The `_allow_access_control` array determines who can view the document based on matching identities.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-dls-overview.md#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
```js
{
  "_id": "some-unique-id-1",
  "_allow_access_control": [
    "example.user@example.com",
    "example group",
    "example username"
  ]
}
```
```

LANGUAGE: JavaScript
CODE:
```
```js
{
  "_id": "some-unique-id-2",
  "_allow_access_control": [
    "example group"
  ]
}
```
```

LANGUAGE: JavaScript
CODE:
```
```js
{
  "_id": "some-unique-id-3",
  "_allow_access_control": [
    "another.user@example.com"
  ]
}
```
```

LANGUAGE: JavaScript
CODE:
```
```js
{
  "_id": "some-unique-id-4",
  "_allow_access_control": []
}
```
```

----------------------------------------

TITLE: Sorting Buckets by Top Metrics Results
DESCRIPTION: This example shows how to sort buckets in a terms aggregation by the results of a top_metrics aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-top-metrics.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
POST /node/_search?filter_path=aggregations
{
  "aggs": {
    "ip": {
      "terms": {
        "field": "ip",
        "order": {"tm.m": "desc"}
      },
      "aggs": {
        "tm": {
          "top_metrics": {
            "metrics": {"field": "m"},
            "sort": {"date": "desc"}
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Use Span Fragmenter Plain Highlighter Elasticsearch Console
DESCRIPTION: Configures the 'plain' highlighter for the 'message' field to use the 'span' fragmenter. This fragmenter attempts to keep highlighted terms together in contiguous spans, resulting in more grammatically sensible or complete fragments compared to the 'simple' fragmenter, while still respecting 'fragment_size'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_27

LANGUAGE: console
CODE:
```
GET my-index-000001/_search
{
  "query": {
    "match_phrase": { "message": "number 1" }
  },
  "highlight": {
    "fields": {
      "message": {
        "type": "plain",
        "fragment_size": 15,
        "number_of_fragments": 3,
        "fragmenter": "span"
      }
    }
  }
}
```

----------------------------------------

TITLE: Create Index Template for Data Stream
DESCRIPTION: Creates an index template with data stream enabled for storing Windows event logs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-ex-threat-detection.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /_index_template/my-data-stream-template
{
  "index_patterns": [ "my-data-stream*" ],
  "data_stream": { },
  "priority": 500
}
```

----------------------------------------

TITLE: Handling Missing Keys in Painless
DESCRIPTION: Shows how to handle missing fields in Painless scripts by using a conditional check before accessing field values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/brief-painless-walkthrough.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
if (!doc.containsKey('myfield') || doc['myfield'].empty) { return "unavailable" } else { return doc['myfield'].value }
```

----------------------------------------

TITLE: Using ESQL ENRICH with Renamed Enrich Fields
DESCRIPTION: Shows how to rename the columns added from the enrich index using the `WITH new_name=<field>` syntax within the ENRICH command, renaming 'language_name' to 'name'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-enrich-data.md#_snippet_3

LANGUAGE: esql
CODE:
```
ROW a = "1"\n| ENRICH languages_policy ON a WITH name = language_name
```

----------------------------------------

TITLE: Deleting an Extension using cURL in Shell
DESCRIPTION: This shell command demonstrates how to delete an extension using the Elastic Cloud API. It sends a DELETE request to the specific extension ID endpoint with the necessary authentication headers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-plugins-guide.md#2025-04-21_snippet_19

LANGUAGE: sh
CODE:
```
curl -X DELETE \
  https://api.elastic-cloud.com/api/v1/deployments/extensions/EXTENSION_ID \
  -H "Authorization: ApiKey $CLOUD_API_KEY" \
  -H 'Content-Type: application/json'
```

----------------------------------------

TITLE: Avg Aggregation with Missing Value Handling in Elasticsearch
DESCRIPTION: Shows how to specify a default value for documents missing the aggregated field using the 'missing' parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-avg-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /exams/_search?size=0
{
  "aggs": {
    "grade_avg": {
      "avg": {
        "field": "grade",
        "missing": 10     <1>
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring URI Parts Processor in Elasticsearch
DESCRIPTION: Example configuration for the URI parts processor showing key options like field selection, target field, and retention settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/uri-parts-processor.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "description" : "...",
  "processors" : [
    {
      "uri_parts": {
        "field": "input_field",
        "target_field": "url",
        "keep_original": true,
        "remove_if_successful": false
      }
    }
  ]
}
```

----------------------------------------

TITLE: Scoring with Rank Vectors (Float) - Elasticsearch REST API
DESCRIPTION: This query searches the `my-rank-vectors-float` index using a `script_score` to calculate relevance. The script `maxSimDotProduct(params.query_vector, 'my_vector')` computes the maximum similarity between the provided float `query_vector` and each of the float vectors stored in the document's `my_vector` field, using dot product similarity.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/rank-vectors.md#_snippet_3

LANGUAGE: console
CODE:
```
GET my-rank-vectors-float/_search
{
  "query": {
    "script_score": {
      "query": {
        "match_all": {}
      },
      "script": {
        "source": "maxSimDotProduct(params.query_vector, 'my_vector')",
        "params": {
          "query_vector": [[0.5, 10, 6], [-0.5, 10, 10]]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Format Datetime with DATETIME_FORMAT - SQL
DESCRIPTION: Demonstrates DATETIME_FORMAT formatting a datetime value into a string using a java.time.format.DateTimeFormatter pattern.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_46

LANGUAGE: SQL
CODE:
```
SELECT DATETIME_FORMAT(CAST('2020-04-05T11:22:33.987654' AS DATETIME), 'dd/MM/yyyy HH:mm:ss.SS') AS "datetime";
```

----------------------------------------

TITLE: Generating Self-Signed Certificates for Elasticsearch with PEM Format
DESCRIPTION: This script creates a self-signed certificate using elasticsearch-certutil, extracts the certificate files from the resulting zip, and performs cleanup. It generates a signing key with a 9999-day validity period and 2048-bit keysize.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/qa/saml-rest-tests/src/javaRestTest/resources/saml/README.txt#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
elasticsearch-certutil cert --self-signed --pem --out ${PWD}/signing.zip -days 9999 -keysize 2048 -name "signing"
unzip signing.zip
mv signing/signing.* ./
rmdir signing
rm signing.zip
```

----------------------------------------

TITLE: Synopsis for elasticsearch-service-tokens Command - Shell
DESCRIPTION: Provides the general command line syntax for the `elasticsearch-service-tokens` utility. It outlines the three main modes: `create`, `list`, and `delete`, along with their required and optional parameters like service account principal and token name. This serves as a quick reference for command usage.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/service-tokens-command.md#_snippet_0

LANGUAGE: shell
CODE:
```
bin/elasticsearch-service-tokens
([create <service_account_principal> <token_name>]) |
([list] [<service_account_principal>]) |
([delete <service_account_principal> <token_name>])
```

----------------------------------------

TITLE: Using STARTS_WITH Function in ESQL Query
DESCRIPTION: This snippet demonstrates how to use the STARTS_WITH function in an ESQL query. It filters the 'employees' table, keeps only the 'last_name' column, and creates a new column 'ln_S' that indicates whether each last name starts with the letter 'B'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/starts_with.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP last_name
| EVAL ln_S = STARTS_WITH(last_name, "B")
```

----------------------------------------

TITLE: Nested kNN Query in Elasticsearch
DESCRIPTION: Illustrates the use of a kNN query within a nested query structure, allowing vector searches within nested documents. This snippet showcases using the `nested` query and applying `knn` for precise searching on nested vector fields. Limitations include constraints on nested field metadata filtering.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-knn-query.md#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
{
  "query" : {
    "nested" : {
      "path" : "paragraph",
        "query" : {
          "knn": {
            "query_vector": [
                0.45,
                45
            ],
            "field": "paragraph.vector",
            "num_candidates": 2
        }
      }
    }
  }
}

```

----------------------------------------

TITLE: Composite Aggregation with Sub-aggregation in Elasticsearch
DESCRIPTION: This snippet shows how to use sub-aggregations within a composite aggregation. It computes the average price for each composite bucket created by date and product.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_22

LANGUAGE: console
CODE:
```
GET /_search
{
  "size": 0,
  "aggs": {
    "my_buckets": {
      "composite": {
        "sources": [
          { "date": { "date_histogram": { "field": "timestamp", "calendar_interval": "1d", "order": "desc" } } },
          { "product": { "terms": { "field": "product" } } }
        ]
      },
      "aggregations": {
        "the_avg": {
          "avg": { "field": "price" }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining and Using Rank Features Field in Elasticsearch
DESCRIPTION: This snippet demonstrates how to define a rank_features field in an Elasticsearch index mapping, insert documents with rank features, and perform queries using these features. It shows both positive and negative score impact features.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/rank-features.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "topics": {
        "type": "rank_features"
      },
      "negative_reviews" : {
        "type": "rank_features",
        "positive_score_impact": false
      }
    }
  }
}

PUT my-index-000001/_doc/1
{
  "topics": {
    "politics": 20,
    "economics": 50.8
  },
  "negative_reviews": {
    "1star": 10,
    "2star": 100
  }
}

PUT my-index-000001/_doc/2
{
  "topics": {
    "politics": 5.2,
    "sports": 80.1
  },
  "negative_reviews": {
    "1star": 1,
    "2star": 10
  }
}

GET my-index-000001/_search
{
  "query": {
    "rank_feature": {
      "field": "topics.politics"
    }
  }
}

GET my-index-000001/_search
{
  "query": {
    "rank_feature": {
      "field": "negative_reviews.1star"
    }
  }
}

GET my-index-000001/_search
{
  "query": {
    "term": {
      "topics": "economics"
    }
  }
}
```

----------------------------------------

TITLE: Using Function Score to Boost Scores in Elasticsearch Query
DESCRIPTION: This snippet demonstrates how to use the function_score query to boost the scores of documents returned by a match_all query. The parameters include a boost value, a random_score function, and a boost_mode operation for combining scores.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-function-score-query.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "function_score": {
      "query": { "match_all": {} },
      "boost": "5",
      "random_score": {}, <1>
      "boost_mode": "multiply"
    }
  }
}
```

----------------------------------------

TITLE: Configuring Multiple Children per Parent in Elasticsearch Join Field
DESCRIPTION: This snippet shows how to define multiple children ('answer' and 'comment') for a single parent ('question') in an Elasticsearch join field mapping.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/parent-join.md#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "my_join_field": {
        "type": "join",
        "relations": {
          "question": ["answer", "comment"]  <1>
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining Default Community ID Processor Pipeline (JSON)
DESCRIPTION: This snippet defines a simple Elasticsearch ingest pipeline containing the default Community ID processor. It uses the default configuration, expecting network flow data in standard Elastic Common Schema (ECS) fields like source.ip, destination.ip, source.port, destination.port, and network.transport.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/community-id-processor.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "description" : "...",
  "processors" : [
    {
      "community_id": {
      }
    }
  ]
}
```

----------------------------------------

TITLE: Basic HTTP Host Configuration in Elasticsearch
DESCRIPTION: Configuration setting for specifying the HTTP interface binding address. Can accept IP address, hostname, or special network interface values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/networking-settings.md#2025-04-21_snippet_6

LANGUAGE: yaml
CODE:
```
http.host: 0.0.0.0
```

----------------------------------------

TITLE: Monthly to Annual Rate Conversion Query
DESCRIPTION: Demonstrates grouping sales records into monthly buckets and converting to annual rates using date_histogram and rate aggregations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-rate-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET sales/_search
{
  "size": 0,
  "aggs": {
    "by_date": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "my_rate": {
          "rate": {
            "unit": "year"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Executing STATS and SORT Operations in ESQL
DESCRIPTION: This ESQL query initializes a row with scalar and array values, calculates the minimum of 'i' grouped by 'a' and 'b', and then sorts the results. It demonstrates the use of ROW, STATS, and SORT functions in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/stats.csv-spec/multi-mv-group.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW i=1, a=["a", "b"], b=[2, 3] | STATS MIN(i) BY a, b | SORT a ASC, b ASC
```

----------------------------------------

TITLE: Implementing Galician Analyzer in Elasticsearch
DESCRIPTION: Custom implementation of the built-in Galician analyzer with Galician stopwords, keyword marker for exclusions from stemming, and Galician stemming.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_15

LANGUAGE: console
CODE:
```
PUT /galician_example
{
  "settings": {
    "analysis": {
      "filter": {
        "galician_stop": {
          "type":       "stop",
          "stopwords":  "_galician_" <1>
        },
        "galician_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["exemplo"] <2>
        },
        "galician_stemmer": {
          "type":       "stemmer",
          "language":   "galician"
        }
      },
      "analyzer": {
        "rebuilt_galician": {
          "tokenizer":  "standard",
          "filter": [
            "lowercase",
            "galician_stop",
            "galician_keywords",
            "galician_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Basic Auto Date Histogram Aggregation Example in Elasticsearch
DESCRIPTION: A simple example of an auto date histogram aggregation that requests a target of 10 buckets. The aggregation is applied to the 'date' field with a default target of 10 buckets.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-autodatehistogram-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "sales_over_time": {
      "auto_date_histogram": {
        "field": "date",
        "buckets": 10
      }
    }
  }
}
```

----------------------------------------

TITLE: Multi-match Query with Wildcard Fields in Elasticsearch
DESCRIPTION: Shows how to use wildcard patterns within the fields array of a multi_match query. This allows matching multiple fields based on a pattern, such as *_name.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-multi-match-query.md#_snippet_1

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "multi_match" : {
      "query":    "Will Smith",
      "fields": [ "title", "*_name" ]
    }
  }
}
```

----------------------------------------

TITLE: Using Post Filter with Aggregations in Elasticsearch
DESCRIPTION: Demonstrates using post_filter to show all Gucci shirt colors in aggregations while filtering search results to only red shirts.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/filter-search-results.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
GET /shirts/_search
{
  "query": {
    "bool": {
      "filter": {
        "term": { "brand": "gucci" }
      }
    }
  },
  "aggs": {
    "colors": {
      "terms": { "field": "color" }
    },
    "color_red": {
      "filter": {
        "term": { "color": "red" }
      },
      "aggs": {
        "models": {
          "terms": { "field": "model" }
        }
      }
    }
  },
  "post_filter": {
    "term": { "color": "red" }
  }
}
```

----------------------------------------

TITLE: Syntax for RLIKE operator in Elasticsearch SQL
DESCRIPTION: Shows the basic syntax for using the `RLIKE` operator in Elasticsearch SQL. It applies a regular expression pattern (`constant_exp`) to a field or expression (`expression`), offering more complex pattern matching than `LIKE`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-like-rlike-operators.md#_snippet_3

LANGUAGE: SQL
CODE:
```
expression         <1>
RLIKE constant_exp <2>
```

----------------------------------------

TITLE: Converting to Milliseconds
DESCRIPTION: Demonstrates converting a ZonedDateTime object to milliseconds since epoch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_7

LANGUAGE: painless
CODE:
```
ZonedDateTime zdt =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 0, ZoneId.of('Z'));
long milliSinceEpoch = zdt.toInstant().toEpochMilli();
```

----------------------------------------

TITLE: Joining Firewall Logs with Threat Data using ESQL LOOKUP JOIN
DESCRIPTION: Executes an ESQL query that retrieves data from `firewall_logs`, performs a `LOOKUP JOIN` with the `threat_list` index on the `source.ip` field, filters for results where a threat match was found, sorts by timestamp, keeps specific relevant fields, and limits the output to demonstrate the join's effect. Requires both `firewall_logs` and `threat_list` indices populated with data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-lookup-join.md#_snippet_4

LANGUAGE: esql
CODE:
```
FROM firewall_logs # The source index
| LOOKUP JOIN threat_list ON source.ip # The lookup index and join field
| WHERE threat_level IS NOT NULL # Filter for rows non-null threat levels
| SORT timestamp # LOOKUP JOIN does not guarantee output order, so you must explicitly sort the results if needed
| KEEP source.ip, action, threat_type, threat_level # Keep only relevant fields
| LIMIT 10 # Limit the output to 10 rows
```

----------------------------------------

TITLE: Action-Specific Condition with Revenue Threshold Check
DESCRIPTION: Example showing how to implement an action-specific condition that checks if any play has exceeded $10,000 in sales. Uses Java Stream API's anyMatch for efficient boolean evaluation of the aggregation results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-watcher-condition-context.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
POST _watcher/watch/_execute
{
  "watch" : {
    "trigger" : { "schedule" : { "interval" : "24h" } },
    "input" : {
      "search" : {
        "request" : {
          "indices" : [ "seats" ],
          "body" : {
            "query" : {
              "term": { "sold": "true"}
            },
            "size": 0,
            "aggs" : {
              "theatres" : {
                "terms" : { "field" : "play" },
                "aggs" : {
                  "money" : {
                    "sum": {
                      "field" : "cost",
                      "script": {
                       "source": "doc.cost.value * doc.number.value"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "actions" : {
      "my_log" : {
        "condition": {                                                
          "script" :
          """
            return ctx.payload.aggregations.theatres.buckets.stream()
              .anyMatch(theatre -> theatre.money.value > 10000)       
          """
        },
        "logging" : {
          "text" : "At least one play has grossed over $10,000: {{ctx.payload.aggregations.theatres.buckets}}"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Calculate Difference in Minutes with DATEDIFF - SQL
DESCRIPTION: Example using DATEDIFF with the 'minute' unit, showing how sub-minute time components are truncated before calculation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_36

LANGUAGE: SQL
CODE:
```
SELECT DATEDIFF('minute', '2019-11-10T12:10:00.000Z'::datetime, '2019-11-10T12:15:59.999Z'::datetime) AS "diffInMinutes";
```

----------------------------------------

TITLE: Basic Semantic Search Query in Elasticsearch
DESCRIPTION: Demonstrates a simple semantic search query targeting a specific semantic_text field with a query text about surfing places
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-semantic-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET my-index-000001/_search
{
  "query": {
    "semantic": {
      "field": "inference_field",
      "query": "Best surfing places"
    }
  }
}
```

----------------------------------------

TITLE: Using OR operator SQL
DESCRIPTION: Illustrates the use of the OR operator to combine two conditions, returning rows where at least one of the conditions is true. The query selects last names from the 'test_emp' table for employees with emp_no less than 10003 OR equal to 10005, ordered and limited.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-operators-logical.md#_snippet_1

LANGUAGE: sql
CODE:
```
SELECT last_name l FROM "test_emp" WHERE emp_no < 10003 OR emp_no = 10005 ORDER BY emp_no LIMIT 5;
```

----------------------------------------

TITLE: Setting up Mapping for Phrase Suggester in Elasticsearch
DESCRIPTION: This snippet demonstrates how to set up the required mapping for the phrase suggester, including custom analyzers and field configurations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT test
{
  "settings": {
    "index": {
      "number_of_shards": 1,
      "analysis": {
        "analyzer": {
          "trigram": {
            "type": "custom",
            "tokenizer": "standard",
            "filter": ["lowercase","shingle"]
          },
          "reverse": {
            "type": "custom",
            "tokenizer": "standard",
            "filter": ["lowercase","reverse"]
          }
        },
        "filter": {
          "shingle": {
            "type": "shingle",
            "min_shingle_size": 2,
            "max_shingle_size": 3
          }
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "title": {
        "type": "text",
        "fields": {
          "trigram": {
            "type": "text",
            "analyzer": "trigram"
          },
          "reverse": {
            "type": "text",
            "analyzer": "reverse"
          }
        }
      }
    }
  }
}
POST test/_doc?refresh=true
{"title": "noble warriors"}
POST test/_doc?refresh=true
{"title": "nobel prize"}
```

----------------------------------------

TITLE: Creating API Key for S3 Connector - Elasticsearch - Console
DESCRIPTION: This snippet shows how to generate an API key for an Elasticsearch S3 connector, specifying roles and permissions required for the connector operations. Users need 'monitor' and 'manage_connector' privileges.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-s3.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /_security/api_key
{
  "name": "connector_name-connector-api-key",
  "role_descriptors": {
    "connector_name-connector-role": {
      "cluster": [
        "monitor",
        "manage_connector"
      ],
      "indices": [
        {
          "names": [
            "index_name",
            ".search-acl-filter-index_name",
            ".elastic-connectors*"
          ],
          "privileges": [
            "all"
          ],
          "allow_restricted_indices": false
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Basic COUNT_DISTINCT Usage in ESQL
DESCRIPTION: Demonstrates the basic usage of COUNT_DISTINCT function to count unique values in multiple columns from a 'hosts' table.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/count_distinct.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM hosts
| STATS COUNT_DISTINCT(ip0), COUNT_DISTINCT(ip1)
```

----------------------------------------

TITLE: Using MV_MIN Function with Keyword Arrays in ESQL
DESCRIPTION: This snippet shows how MV_MIN works with keyword (string) arrays. It compares strings based on their UTF-8 representation byte by byte and returns the one that sorts first lexicographically.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_min.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
ROW a=["foo", "bar"]
| EVAL min_a = MV_MIN(a)
```

----------------------------------------

TITLE: Using DATE_DIFF with microseconds in ESQL
DESCRIPTION: This example shows how to calculate the difference in microseconds between two datetime values that are 1 millisecond apart, resulting in 1000 microseconds.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/date_diff.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW date1 = TO_DATETIME("2023-12-02T11:00:00.000Z"),
    date2 = TO_DATETIME("2023-12-02T11:00:00.001Z")
| EVAL dd_ms = DATE_DIFF("microseconds", date1, date2)
```

----------------------------------------

TITLE: Basic Rate Aggregation Structure
DESCRIPTION: Shows the basic syntax for a rate aggregation that calculates rates based on a requests field with monthly units.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-rate-aggregation.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "rate": {
    "unit": "month",
    "field": "requests"
  }
}
```

----------------------------------------

TITLE: Defining Solr Format Synonyms in Elasticsearch
DESCRIPTION: Examples of defining synonyms using the Solr format. Includes both equivalent synonyms and explicit synonyms definitions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-synonym-tokenfilter.md#2025-04-21_snippet_4

LANGUAGE: text
CODE:
```
ipod, i-pod, i pod
computer, pc, laptop
```

LANGUAGE: text
CODE:
```
personal computer => pc
sea biscuit, sea biscit => seabiscuit
```

----------------------------------------

TITLE: Date Histogram with COUNT Aggregation
DESCRIPTION: Creates a date histogram showing hire counts per year. Combines DATE_TRUNC with STATS to aggregate employee counts by year, followed by sorting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/date_trunc.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM employees
| EVAL year = DATE_TRUNC(1 year, hire_date)
| STATS hires = COUNT(emp_no) BY year
| SORT year
```

----------------------------------------

TITLE: Configuring Trim Processor in Elasticsearch
DESCRIPTION: Example configuration of a trim processor that removes leading and trailing whitespace from a field named 'foo'. The processor can be configured with various options like target field, error handling, and conditional execution.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/trim-processor.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "trim": {
    "field": "foo"
  }
}
```

----------------------------------------

TITLE: Executing Painless Boolean Script (Author Name Length) - Elasticsearch Console
DESCRIPTION: Executes a Painless script in the 'boolean_field' context to check the length of the author's first name. It finds the index of the first space in the 'author' field and returns true if the space is found at an index greater than 0 and less than 5, indicating a first name length between 1 and 4 characters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_7

LANGUAGE: Console
CODE:
```
POST /_scripts/painless/_execute
{
  "script": {
    "source": """
      int space = doc['author'].value.indexOf(' ');
      emit(space > 0 && space < 5);
    """
  },
  "context": "boolean_field",
  "context_setup": {
    "index": "my-index-000001",
    "document": {
      "name": "Dune",
      "author": "Frank Herbert",
      "release_date": "1965-06-01",
      "page_count": 604
    }
  }
}
```

----------------------------------------

TITLE: Combining Exact and Pattern Fields with Boosting
DESCRIPTION: Example of combining specific field names with wildcard patterns, including field boosting. This searches content field and all name.* fields with name.* fields boosted by a factor of 5.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_17

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "query_string" : {
      "fields" : ["content", "name.*^5"],
      "query" : "this AND that OR thus"
    }
  }
}
```

----------------------------------------

TITLE: Customized Keyed Date Range Aggregation in Elasticsearch
DESCRIPTION: Illustrates a date range aggregation with custom keys for each range in Elasticsearch. The query uses specific date ranges with custom keys and expects a keyed response.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-daterange-aggregation.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "range": {
      "date_range": {
        "field": "date",
        "format": "MM-yyy",
        "ranges": [
          { "from": "01-2015", "to": "03-2015", "key": "quarter_01" },
          { "from": "03-2015", "to": "06-2015", "key": "quarter_02" }
        ],
        "keyed": true
      }
    }
  }
}
```

----------------------------------------

TITLE: Using LEAST Function in ESQL to Find Minimum Value
DESCRIPTION: This snippet demonstrates how to use the LEAST function in ESQL to determine the smallest value between two columns. It creates a row with values a=10 and b=20, then evaluates which one is smaller using LEAST.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/least.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = 10, b = 20
| EVAL l = LEAST(a, b)
```

----------------------------------------

TITLE: Querying Nested Properties using Dot Notation in Elasticsearch
DESCRIPTION: Shows how to query and aggregate nested properties using dot notation. The example includes a match query on manager name and a nested aggregation on employee ages.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/properties.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET my-index-000001/_search
{
  "query": {
    "match": {
      "manager.name": "Alice White"
    }
  },
  "aggs": {
    "Employees": {
      "nested": {
        "path": "employees"
      },
      "aggs": {
        "Employee Ages": {
          "histogram": {
            "field": "employees.age",
            "interval": 5
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Casting String to Integer using SQL CAST
DESCRIPTION: Example showing how to use the Elasticsearch SQL `CAST` function to convert a string literal ('123') into an integer (`INT`) type. Includes the query and the expected output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-type-conversion.md#_snippet_1

LANGUAGE: SQL
CODE:
```
SELECT CAST('123' AS INT) AS int;

      int
---------------
123
```

----------------------------------------

TITLE: Creating a Custom Analyzer with ASCII Folding Filter in Elasticsearch
DESCRIPTION: Example of using the create index API to configure a new custom analyzer that incorporates the asciifolding filter. This creates an index with a standard_asciifolding analyzer that applies ASCII folding to tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-asciifolding-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /asciifold_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "standard_asciifolding": {
          "tokenizer": "standard",
          "filter": [ "asciifolding" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Custom Analyzer with Apostrophe Token Filter - Elasticsearch Console
DESCRIPTION: This snippet illustrates how to create a custom analyzer in Elasticsearch that incorporates the apostrophe token filter. The example shows a PUT request to create an index named 'apostrophe_example' with specified settings to include the custom analyzer. Elasticsearch is required to execute the API call, and the output is the successful creation of the analyzer configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-apostrophe-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /apostrophe_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "standard_apostrophe": {
          "tokenizer": "standard",
          "filter": [ "apostrophe" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Fuzzy Search Query
DESCRIPTION: Illustrates fuzzy searching using the '~' operator to find terms with minimal character differences
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_5

LANGUAGE: elasticsearch
CODE:
```
quikc~ brwn~ foks~
```

LANGUAGE: elasticsearch
CODE:
```
quikc~1
```

----------------------------------------

TITLE: Testing Custom Token Filter with Elasticsearch Analyze API
DESCRIPTION: This Elasticsearch API request demonstrates how to use the _analyze endpoint to test the custom 'hello_world' token filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/extend/example-text-analysis-plugin.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "text": "hello to everyone except the world",
  "tokenizer": "standard",
  "filter":  ["hello_world"]
}
```

----------------------------------------

TITLE: Defining Geo-point Index Mapping - Elasticsearch Console
DESCRIPTION: Defines an Elasticsearch index mapping for 'my-index-000001' specifically designed for geo-point data, using separate 'lat' and 'lon' fields of type 'double'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_12

LANGUAGE: Console
CODE:
```
PUT /my-index-000001/
{
  "mappings": {
    "properties": {
      "lat": {
        "type": "double"
      },
      "lon": {
        "type": "double"
      }
    }
  }
}
```

----------------------------------------

TITLE: Mapping Configuration for Start and End Date Fields
DESCRIPTION: JSON configuration for defining 'start' and 'end' date field mappings in Elasticsearch, which can be used to calculate time differences.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_21

LANGUAGE: JSON
CODE:
```
{
  "mappings": {
    ...
    "properties": {
      ...
      "start": {
        "type": "date"
      },
      "end": {
        "type": "date"
      }
      ...
    }
    ...
  }
}
```

----------------------------------------

TITLE: Simulating Script Processor to Extract Tags from Env Field
DESCRIPTION: This example demonstrates how to use a Painless script in the script processor to extract tags from an 'env' field. It splits the field value, extracts a specific part, and assigns it to a new 'tags' field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/script-processor.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
POST _ingest/pipeline/_simulate
{
  "pipeline": {
    "processors": [
      {
        "script": {
          "description": "Extract 'tags' from 'env' field",
          "lang": "painless",
          "source": """
            String[] envSplit = ctx['env'].splitOnToken(params['delimiter']);
            ArrayList tags = new ArrayList();
            tags.add(envSplit[params['position']].trim());
            ctx['tags'] = tags;
          """,
          "params": {
            "delimiter": "-",
            "position": 1
          }
        }
      }
    ]
  },
  "docs": [
    {
      "_source": {
        "env": "es01-prod"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Monthly Sales Sum Bucket Aggregation Request
DESCRIPTION: Example request showing how to calculate the sum of all total monthly sales buckets using date histogram and sum bucket aggregations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-sum-bucket-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "size": 0,
  "aggs": {
    "sales_per_month": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "sales": {
          "sum": {
            "field": "price"
          }
        }
      }
    },
    "sum_monthly_sales": {
      "sum_bucket": {
        "buckets_path": "sales_per_month>sales"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Dynamic Mapping Settings on Inner Objects in Elasticsearch
DESCRIPTION: This snippet demonstrates how to configure dynamic mapping settings at different levels of a document structure. It shows disabling dynamic mapping at the top level while enabling it for a specific inner object, allowing fine-grained control over mapping behavior.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/dynamic.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "dynamic": false, <1>
    "properties": {
      "user": { <2>
        "properties": {
          "name": {
            "type": "text"
          },
          "social_networks": {
            "dynamic": true, <3>
            "properties": {}
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Querying Elasticsearch with Rank Feature Queries
DESCRIPTION: This snippet provides an Elasticsearch query example that searches for the term '2016' and boosts the relevance scores of results using rank_feature fields like pagerank, url_length, and topics.sports. The query utilizes the bool query type with must and should clauses to refine search results based on additional rank feature criteria.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-rank-feature-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /test/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "content": "2016"
          }
        }
      ],
      "should": [
        {
          "rank_feature": {
            "field": "pagerank"
          }
        },
        {
          "rank_feature": {
            "field": "url_length",
            "boost": 0.1
          }
        },
        {
          "rank_feature": {
            "field": "topics.sports",
            "boost": 0.4
          }
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Geo-distance query with lat/lon as WKT string in Elasticsearch
DESCRIPTION: This snippet demonstrates the use of the `geo_distance` filter with latitude and longitude specified as a Well-Known Text (WKT) string within the `pin.location` field. The query searches for documents within a 12km radius of the specified coordinates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-distance-query.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
GET /my_locations/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_distance": {
          "distance": "12km",
          "pin.location": "POINT (-70 40)"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Executing Painless Date/Time Script - Elasticsearch Console
DESCRIPTION: Executes a Painless script in the 'date_field' context to estimate a book's writing start date. The script calculates an estimated writing time based on page count and an assumed page time (adjusted for specific authors), then subtracts this from the release date (converted to epoch milliseconds) to emit the start date in milliseconds.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_9

LANGUAGE: Console
CODE:
```
POST /_scripts/painless/_execute
{
  "script": {
    "source": """
      String author = doc['author'].value;
      long pageTime = 28800000;  
      if (author == 'Robert A. Heinlein') {
        pageTime /= 2;           
      } else if (author == 'Alastair Reynolds') {
        pageTime *= 2;           
      }
      emit(doc['release_date'].value.toInstant().toEpochMilli() - pageTime * doc['page_count'].value);
    """
  },
  "context": "date_field",
  "context_setup": {
    "index": "my-index-000001",
    "document": {
      "name": "Revelation Space",
      "author": "Alastair Reynolds",
      "release_date": "2000-03-15",
      "page_count": 585
    }
  }
}
```

----------------------------------------

TITLE: Performing Modulo/Remainder in SQL
DESCRIPTION: Shows how to use the modulo or remainder operator (%) to get the remainder of a division between two numeric values in a SQL query. The result is returned as a column named 'x'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-operators-math.md#_snippet_5

LANGUAGE: sql
CODE:
```
SELECT 5 % 2 AS x;
```

----------------------------------------

TITLE: Creating Elasticsearch Snapshot in JSON
DESCRIPTION: Initiates a snapshot of the specified index, ignoring unavailable indices and excluding global state.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/qa/repository-old-versions-compatibility/src/javaRestTest/resources/README.md#2025-04-21_snippet_13

LANGUAGE: json
CODE:
```
PUT /_snapshot/repository/snapshot
{
    "indices": "index",
    "ignore_unavailable": "true",
    "include_global_state": false
}
```

----------------------------------------

TITLE: Processing Dates and Times in Painless Ingest Script
DESCRIPTION: A Painless script that processes date and time strings from a document during ingestion. It parses date and time fields in various formats, converts them to a standard format, and stores the result as milliseconds in a datetime field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-ingest-processor-context.md#2025-04-21_snippet_0

LANGUAGE: painless
CODE:
```
String[] dateSplit = ctx.date.splitOnToken("-");                     <1>
String year = dateSplit[0].trim();
String month = dateSplit[1].trim();

if (month.length() == 1) {                                           <2>
    month = "0" + month;
}

String day = dateSplit[2].trim();

if (day.length() == 1) {                                             <3>
    day = "0" + day;
}

boolean pm = ctx.time.substring(ctx.time.length() - 2).equals("PM"); <4>
String[] timeSplit = ctx.time.substring(0,
        ctx.time.length() - 2).splitOnToken(":");                    <5>
int hours = Integer.parseInt(timeSplit[0].trim());
int minutes = Integer.parseInt(timeSplit[1].trim());

if (pm) {                                                            <6>
    hours += 12;
}

String dts = year + "-" + month + "-" + day + "T" +
        (hours < 10 ? "0" + hours : "" + hours) + ":" +
        (minutes < 10 ? "0" + minutes : "" + minutes) +
        ":00+08:00";                                                 <7>

ZonedDateTime dt = ZonedDateTime.parse(
         dts, DateTimeFormatter.ISO_OFFSET_DATE_TIME);               <8>
ctx.datetime = dt.getLong(ChronoField.INSTANT_SECONDS)*1000L;        <9>
```

----------------------------------------

TITLE: Using Filters Aggregation for Multiple Filters in Elasticsearch
DESCRIPTION: This example demonstrates how to use the filters aggregation to group documents using multiple filters, which is more efficient than using multiple filter aggregations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-filter-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0&filter_path=aggregations
{
  "aggs": {
    "f": {
      "filters": {
        "filters": {
          "hats": { "term": { "type": "hat" } },
          "t_shirts": { "term": { "type": "t-shirt" } }
        }
      },
      "aggs": {
        "avg_price": { "avg": { "field": "price" } }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configure Keyword Mapping for Composite Field Example
DESCRIPTION: This snippet defines an Elasticsearch index mapping with a 'message' field of type 'keyword'. This allows the entire log message string to be stored as a single value, which can then be processed by a runtime script to extract multiple sub-fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_20

LANGUAGE: console
CODE:
```
PUT /my-index-000001/
{
  "mappings": {
    "properties": {
      "message": {
        "type" : "keyword"
      }
    }
  }
}
```

----------------------------------------

TITLE: Copying First and Last Name Fields to Full Name in Elasticsearch
DESCRIPTION: This example shows how to copy values from first_name and last_name fields into a full_name field in Elasticsearch. It demonstrates creating an index with appropriate mappings, indexing a document, and then querying the full_name field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/copy-to.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "first_name": {
        "type": "text",
        "copy_to": "full_name" 
      },
      "last_name": {
        "type": "text",
        "copy_to": "full_name" 
      },
      "full_name": {
        "type": "text"
      }
    }
  }
}

PUT my-index-000001/_doc/1
{
  "first_name": "John",
  "last_name": "Smith"
}

GET my-index-000001/_search
{
  "query": {
    "match": {
      "full_name": { 
        "query": "John Smith",
        "operator": "and"
      }
    }
  }
}
```

----------------------------------------

TITLE: Add files to the Elasticsearch keystore
DESCRIPTION: Stores the binary contents of a file as a secure setting in the keystore, useful for managing certificates or key files. Supports multiple files in a single command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/elasticsearch-keystore.md#_snippet_5

LANGUAGE: Shell
CODE:
```
bin/elasticsearch-keystore add-file the.setting.name.to.set /path/example-file.json
```

----------------------------------------

TITLE: Configuring HTTP API Key Authentication in Elasticsearch
DESCRIPTION: YAML configuration for enabling API key authentication in Elasticsearch. This allows clients to authenticate using API keys instead of usernames and passwords.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/watcher/licenses/failureaccess-NOTICE.txt#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
xpack.security.http.authentication.type: apikey
```

----------------------------------------

TITLE: Configuring CSV Processor in Elasticsearch Ingest Pipeline
DESCRIPTION: This snippet demonstrates how to configure the CSV processor in an Elasticsearch ingest pipeline. It extracts data from 'my_field' and assigns the values to 'field1' and 'field2'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/csv-processor.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
{
  "csv": {
    "field": "my_field",
    "target_fields": ["field1", "field2"]
  }
}
```

----------------------------------------

TITLE: Applying Boost to match_all Query in Elasticsearch
DESCRIPTION: This code snippet illustrates how to modify the default score of documents retrieved by a match_all query using the 'boost' parameter, allowing for customized scoring in Elasticsearch queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-match-all-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "match_all": { "boost" : 1.2 }
  }
}
```

----------------------------------------

TITLE: Configuring Network Host in Elasticsearch YAML
DESCRIPTION: Sets the address for both HTTP and transport traffic. The node binds to this address and uses it as its publish address. Accepts an IP address, hostname, or special value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/networking-settings.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
network.host: _local_
```

----------------------------------------

TITLE: Performing Pivot Operation with SUM on Salary
DESCRIPTION: This snippet demonstrates how to use the `PIVOT` clause to aggregate `salary` data based on distinct values of the `languages` column. It performs a pivot operation that will rotate the rows into columns based on the aggregation function provided.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_30

LANGUAGE: sql
CODE:
```
SELECT * FROM test_emp PIVOT (SUM(salary) FOR languages IN (1, 2)) LIMIT 5;
```

----------------------------------------

TITLE: Syntax for CURRENT_TIME CURTIME Function in Elasticsearch SQL
DESCRIPTION: This snippet presents the valid syntaxes for retrieving the current time when the query reaches the server in Elasticsearch SQL. It can be used as a keyword `CURRENT_TIME` or as functions `CURRENT_TIME()` and `CURTIME()`, optionally accepting a precision argument for fractional seconds.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_13

LANGUAGE: SQL
CODE:
```
CURRENT_TIME\nCURRENT_TIME([precision]) <1>\nCURTIME
```

----------------------------------------

TITLE: Searching with Text Similarity Reranker using Elastic Rerank Endpoint | Elasticsearch Console
DESCRIPTION: Performs a search using the `text_similarity_reranker`. It takes initial results from a `standard` text query and re-ranks the top documents using the specified `inference_id` (`my-elastic-rerank`), comparing the document's `field` ("text") against the `inference_text` ("How often does the moon hide the sun?"). It requires the `my-elastic-rerank` inference endpoint to be created first.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrievers.md#_snippet_6

LANGUAGE: console
CODE:
```
POST _search
{
  "retriever": {
    "text_similarity_reranker": {
      "retriever": {
        "standard": {
          "query": {
            "match": {
              "text": "How often does the moon hide the sun?"
            }
          }
        }
      },
      "field": "text",
      "inference_id": "my-elastic-rerank",
      "inference_text": "How often does the moon hide the sun?",
      "rank_window_size": 100,
      "min_score": 0.5
    }
  }
}
```

----------------------------------------

TITLE: Modifying User Roles
DESCRIPTION: Example demonstrating how to modify user roles by removing 'network' and 'monitoring' roles and adding 'user' role.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/users-command.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
bin/elasticsearch-users roles jacknich -r network,monitoring -a user
```

----------------------------------------

TITLE: Basic EQL Sequence Search in Elasticsearch
DESCRIPTION: Performs a basic EQL sequence search for two ordered events: a process named 'regsvr32.exe' followed by a file operation involving 'scrobj.dll'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /my-data-stream/_eql/search
{
  "query": """
    sequence
      [ process where process.name == "regsvr32.exe" ]
      [ file where stringContains(file.name, "scrobj.dll") ]
  """
}
```

----------------------------------------

TITLE: Analyzing Text Using Whitespace Analyzer in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the `whitespace` analyzer to analyze a given text input. The `POST _analyze` request analyzes the text by breaking it into terms whenever a whitespace character is encountered, producing an output of individual terms.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-whitespace-analyzer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _analyze
{
  "analyzer": "whitespace",
  "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
}
```

----------------------------------------

TITLE: Pagination with After Key in Elasticsearch Aggregation
DESCRIPTION: Shows how to implement pagination in composite aggregations using size parameter and after_key.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_16

LANGUAGE: console
CODE:
```
GET /_search
{
  "size": 0,
  "aggs": {
    "my_buckets": {
      "composite": {
        "size": 2,
        "sources": [
          { "date": { "date_histogram": { "field": "timestamp", "calendar_interval": "1d" } } },
          { "product": { "terms": { "field": "product" } } }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Generating HTTP Certificate with Elasticsearch Certutil
DESCRIPTION: This command creates an HTTP certificate for Elasticsearch using `elasticsearch-certutil`. It outputs a ZIP file containing the certificate and key in PEM format. It sets the validity period, specifies DNS names and IP addresses for the certificate and uses a CA for signing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/reindex/src/test/resources/org/elasticsearch/reindex/README.txt#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
$ES_HOME/bin/elasticsearch-certutil cert --out http.zip --pass "http-password" \
    --days 9999 --pem --name "http" \
    --ca ca.p12 --ca-pass "ca-password" \
    --dns=localhost --dns=localhost.localdomain --dns=localhost4 --dns=localhost4.localdomain4 --dns=localhost6 --dns=localhost6.localdomain6 \
    --ip=127.0.0.1 --ip=0:0:0:0:0:0:0:1
unzip http.zip
rm http.zip
```

----------------------------------------

TITLE: Single-Quoted String Examples
DESCRIPTION: Demonstrates string literals using single quotes with various escape sequences.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-literals.md#2025-04-21_snippet_5

LANGUAGE: painless
CODE:
```
'single-quoted string literal'
'\'single-quoted with escaped single-quotes\' and backslash \\'
'single-quoted with non-escaped "double-quotes"'
```

----------------------------------------

TITLE: Creating Documents with Immediate Refresh in Elasticsearch
DESCRIPTION: Examples of creating documents with immediate refresh by using refresh=true or just refresh parameter. This makes the documents immediately visible in search results but should be used cautiously due to performance implications.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/refresh-parameter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /test/_doc/1?refresh
{"test": "test"}
PUT /test/_doc/2?refresh=true
{"test": "test"}
```

----------------------------------------

TITLE: Creating First CA PEM - ca1 with Elasticsearch Certutil
DESCRIPTION: This snippet creates the first Certificate Authority (CA) PEM file named 'ca1' using the Elasticsearch certutil command. It specifies a validity of 9999 days and a distinguished name.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/libs/ssl-config/src/test/resources/certs/README.txt#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
# 1. Create first CA PEM ("ca1")

elasticsearch-certutil ca --pem --out ca1.zip --days 9999 --ca-dn "CN=Test CA 1"
unzip ca1.zip 
mv ca ca1
```

----------------------------------------

TITLE: Creating API Key for Azure Blob Storage Connector
DESCRIPTION: API call to generate an API key with necessary permissions for the connector to operate.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-azure-blob.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /_security/api_key
{
  "name": "connector_name-connector-api-key",
  "role_descriptors": {
    "connector_name-connector-role": {
      "cluster": [
        "monitor",
        "manage_connector"
      ],
      "indices": [
        {
          "names": [
            "index_name",
            ".search-acl-filter-index_name",
            ".elastic-connectors*"
          ],
          "privileges": [
            "all"
          ],
          "allow_restricted_indices": false
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Defining Mapping for Nested Documents in Elasticsearch
DESCRIPTION: This snippet shows how to define a mapping for an 'issues' index with nested 'comments' in Elasticsearch. It demonstrates the structure for storing tags and nested comments with username and comment fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-reverse-nested-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /issues
{
  "mappings": {
    "properties": {
      "tags": { "type": "keyword" },
      "comments": {                            <1>
        "type": "nested",
        "properties": {
          "username": { "type": "keyword" },
          "comment": { "type": "text" }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Adding New Elasticsearch User
DESCRIPTION: Example showing how to add a new user 'jacknich' with password 'theshining' and assign 'network' and 'monitoring' roles.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/users-command.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
bin/elasticsearch-users useradd jacknich -p theshining -r network,monitoring
```

----------------------------------------

TITLE: Using Filter Rules in Elasticsearch Intervals Query
DESCRIPTION: Example demonstrating how to use a filter rule with an intervals query to find documents where 'hot' and 'porridge' appear within 10 positions without the word 'salty' between them.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-intervals-query.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
POST _search
{
  "query": {
    "intervals" : {
      "my_text" : {
        "match" : {
          "query" : "hot porridge",
          "max_gaps" : 10,
          "filter" : {
            "not_containing" : {
              "match" : {
                "query" : "salty"
              }
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Checking Field Existence in EQL
DESCRIPTION: Demonstrates how to check if a field exists or doesn't exist in EQL queries using comparison with null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_9

LANGUAGE: eql
CODE:
```
?my_field != null
```

LANGUAGE: eql
CODE:
```
?my_field == null
```

----------------------------------------

TITLE: Counting Rows with COUNT Function in ESQL
DESCRIPTION: This snippet demonstrates how to count the number of non-null values in a specific column using the COUNT function in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/count.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS COUNT(height)
```

----------------------------------------

TITLE: Basic SHOW TABLES Example
DESCRIPTION: Demonstrates basic usage of SHOW TABLES command showing catalog, name, type, and kind columns for all available tables.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-show-tables.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
SHOW TABLES;
```

----------------------------------------

TITLE: Implementing Indonesian Analyzer in Elasticsearch
DESCRIPTION: Custom implementation of the built-in Indonesian analyzer with Indonesian stopwords, keyword marker for exclusions from stemming, and Indonesian stemming.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_20

LANGUAGE: console
CODE:
```
PUT /indonesian_example
{
  "settings": {
    "analysis": {
      "filter": {
        "indonesian_stop": {
          "type":       "stop",
          "stopwords":  "_indonesian_" <1>
        },
        "indonesian_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["contoh"] <2>
        },
        "indonesian_stemmer": {
          "type":       "stemmer",
          "language":   "indonesian"
        }
      },
      "analyzer": {
        "rebuilt_indonesian": {
          "tokenizer":  "standard",
          "filter": [
            "lowercase",
            "indonesian_stop",
            "indonesian_keywords",
            "indonesian_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring ILM Policy with Enabled Migration
DESCRIPTION: Example of an ILM policy that combines migration with allocate action to reduce replicas before moving to warm nodes. The migrate action is included explicitly though it's automatically performed by default.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-migrate.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "warm": {
        "actions": {
          "migrate" : {
          },
          "allocate": {
            "number_of_replicas": 1
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Extract Day Name using DAY_NAME in Elasticsearch SQL
DESCRIPTION: Demonstrates using the DAY_NAME function to extract the name of the day of the week from a TIMESTAMP literal '2018-02-19T10:23:27Z'. The function returns a string like 'Monday'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_63

LANGUAGE: SQL
CODE:
```
SELECT DAY_NAME(CAST('2018-02-19T10:23:27Z' AS TIMESTAMP)) AS day;
```

----------------------------------------

TITLE: Performing Sum Aggregation on Sales Data in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the sum aggregation to calculate the total price of all hats in a sales index. It filters documents by type 'hat' and sums the 'price' field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-sum-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "query": {
    "constant_score": {
      "filter": {
        "match": { "type": "hat" }
      }
    }
  },
  "aggs": {
    "hat_prices": { "sum": { "field": "price" } }
  }
}
```

----------------------------------------

TITLE: Searching Elasticsearch: Retrieve Specific Unmapped Fields (console)
DESCRIPTION: Performs an Elasticsearch search on the index with disabled mappings. It requests `user_id` and uses the `fields` parameter with `include_unmapped: true` for the `session_data.object.*` pattern to retrieve unmapped fields within that path, while excluding `_source`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_10

LANGUAGE: console
CODE:
```
POST my-index-000001/_search
{
  "fields": [
    "user_id",
    {
      "field": "session_data.object.*",
      "include_unmapped" : true
    }
  ],
  "_source": false
}
```

----------------------------------------

TITLE: Filtering Airport Data Using ST_DISJOINT in ESQL
DESCRIPTION: Query that filters airport/city data based on geographic boundaries using ST_DISJOINT function. Selects records where the city boundary is disjoint from a specified polygon area, keeping specific fields like airport abbreviation, name, region, city, and location.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/st_disjoint.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airport_city_boundaries
| WHERE ST_DISJOINT(city_boundary, TO_GEOSHAPE("POLYGON((-10 -60, 120 -60, 120 60, -10 60, -10 -60))"))
| KEEP abbrev, airport, region, city, city_location
```

----------------------------------------

TITLE: Indexing Documents in Elasticsearch using JavaScript
DESCRIPTION: Demonstrates how to index documents into Elasticsearch using the JavaScript client.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/ml/src/main/resources/org/elasticsearch/xpack/ml/inference.nlp.tokenizers/spm_precompiled_normalizer.txt#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
const { Client } = require('@elastic/elasticsearch')
const client = new Client({ node: 'http://localhost:9200' })

async function run () {
  await client.index({
    index: 'game-of-thrones',
    id: '1',
    body: {
      character: 'Ned Stark',
      quote: 'Winter is coming.'
    }
  })

  await client.indices.refresh({ index: 'game-of-thrones' })
}

run().catch(console.log)
```

----------------------------------------

TITLE: Updating Elasticsearch Deployment and Plugin Reference in JSON
DESCRIPTION: This JSON snippet shows how to update an Elasticsearch deployment plan to upgrade the Elasticsearch version and update the plugin reference. It includes setting the new Elasticsearch version and updating the user plugin's Elasticsearch version to match exactly.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-plugins-guide.md#2025-04-21_snippet_18

LANGUAGE: json
CODE:
```
{
    "name": "Extensions",
    "prune_orphans": false,
    "resources": {
        "elasticsearch": [
            {
                "region": "gcp-us-central1",
                "ref_id": "main-elasticsearch",
                "plan": {
                    "cluster_topology": [
                      ...
                    ],
                    "elasticsearch": {
                        "version": "8.4.3",
                        "enabled_built_in_plugins": [],
                        "user_plugins": [
                           {
                                "elasticsearch_version": "8.4.3",
                                "name": "custom-plugin",
                                "url": "repo://4226448541"
                            }
                        ]

                    },
                    "deployment_template": {
                        "id": "gcp-storage-optimized-v3"
                    }
                }
            }
        ]
    }
}
```

----------------------------------------

TITLE: Basic ESQL FROM Command Syntax
DESCRIPTION: Defines the basic syntax for the ESQL FROM command, which is used to specify the data source for a query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/from.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM index_pattern [METADATA fields]
```

----------------------------------------

TITLE: Extracting Date Parts in Elasticsearch SQL
DESCRIPTION: This SQL snippet demonstrates various ways to extract different parts of a date using the DATE_PART function in Elasticsearch SQL. It covers extracting year, quarter, month, day, hour, minute, second, and millisecond from date values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/date_extract.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
SELECT
    DATE_PART('year', CAST('2019-09-14T17:45:21.654321Z' AS DATETIME)) AS y,
    DATE_PART('quarter', CAST('2019-09-14T17:45:21.654321Z' AS DATETIME)) AS q,
    DATE_PART('month', CAST('2019-09-14T17:45:21.654321Z' AS DATETIME)) AS mo,
    DATE_PART('day', CAST('2019-09-14T17:45:21.654321Z' AS DATETIME)) AS d,
    DATE_PART('hour', CAST('2019-09-14T17:45:21.654321Z' AS DATETIME)) AS h,
    DATE_PART('minute', CAST('2019-09-14T17:45:21.654321Z' AS DATETIME)) AS mi,
    DATE_PART('second', CAST('2019-09-14T17:45:21.654321Z' AS DATETIME)) AS s,
    DATE_PART('millisecond', CAST('2019-09-14T17:45:21.654321Z' AS DATETIME)) AS ms;
```

----------------------------------------

TITLE: Indexing Document with Dot in Field Name for Synthetic _source Example (console)
DESCRIPTION: This snippet demonstrates indexing a document with a field name that includes dots (`foo.bar.baz`). This is used to illustrate how synthetic `_source`, in conjunction with default dynamic mapping, interprets dots as object paths when reconstructing the source. Requires an Elasticsearch cluster and a client capable of sending PUT requests.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-source-field.md#_snippet_5

LANGUAGE: console
CODE:
```
PUT idx/_doc/1
{
  "foo.bar.baz": 1
}
```

----------------------------------------

TITLE: Basic Diversified Sampler Aggregation with Elasticsearch
DESCRIPTION: Example query using diversified_sampler to analyze tags associated with #elasticsearch on StackOverflow posts while limiting bias from individual authors. The aggregation samples documents and ensures each author contributes at most one document to the sample.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-diversified-sampler-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST /stackoverflow/_search?size=0
{
  "query": {
    "query_string": {
      "query": "tags:elasticsearch"
    }
  },
  "aggs": {
    "my_unbiased_sample": {
      "diversified_sampler": {
        "shard_size": 200,
        "field": "author"
      },
      "aggs": {
        "keywords": {
          "significant_terms": {
            "field": "tags",
            "exclude": [ "elasticsearch" ]
          }
        }
      }
    }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "my_unbiased_sample": {
      "doc_count": 151,           <1>
      "keywords": {               <2>
        "doc_count": 151,
        "bg_count": 650,
        "buckets": [
          {
            "key": "kibana",
            "doc_count": 150,
            "score": 2.213,
            "bg_count": 200
          }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Handling Missing Values in Multi Terms Aggregation
DESCRIPTION: Example showing how to use the missing parameter to handle documents where a field value is missing by providing a default value to use in the aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-multi-terms-aggregation.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET /products/_search
{
  "aggs": {
    "genres_and_products": {
      "multi_terms": {
        "terms": [
          {
            "field": "genre"
          },
          {
            "field": "product",
            "missing": "Product Z"
          }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining Custom Sorani Analyzer in Elasticsearch
DESCRIPTION: This snippet configures a custom analyzer for the Sorani language using Elasticsearch. It employs specific filters for normalization, stemming, and keyword marking. Dependencies include Elasticsearch with necessary plugins. The input is Sorani language text and the output is normalized tokens suitable for search.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_25

LANGUAGE: console
CODE:
```
PUT /sorani_example
{
  "settings": {
    "analysis": {
      "filter": {
        "sorani_stop": {
          "type":       "stop",
          "stopwords":  "_sorani_" <1>
        },
        "sorani_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["mînak"] <2>
        },
        "sorani_stemmer": {
          "type":       "stemmer",
          "language":   "sorani"
        }
      },
      "analyzer": {
        "rebuilt_sorani": {
          "tokenizer":  "standard",
          "filter": [
            "sorani_normalization",
            "lowercase",
            "decimal_digit",
            "sorani_stop",
            "sorani_keywords",
            "sorani_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Generating CA Certificate with Elasticsearch Certutil
DESCRIPTION: This command generates a CA (Certificate Authority) certificate using the `elasticsearch-certutil` tool. It specifies the output file as `ca.p12`, sets a password, and configures the certificate to be valid for 9999 days. The CA certificate is used to sign other certificates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/reindex/src/test/resources/org/elasticsearch/reindex/README.txt#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
$ES_HOME/bin/elasticsearch-certutil ca --out ca.p12 --pass "ca-password" --days 9999
```

----------------------------------------

TITLE: Generating Certificate Signing Requests with elasticsearch-certutil
DESCRIPTION: This command generates certificate signing requests (CSRs) in silent mode using a YAML configuration file. It creates a compressed file containing CSR and private key files for each instance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/certutil.md#2025-04-21_snippet_5

LANGUAGE: sh
CODE:
```
bin/elasticsearch-certutil csr --silent --in instances.yml --out test2.zip --pass testpassword
```

----------------------------------------

TITLE: EQL Sample Query Example
DESCRIPTION: Sample query to find unordered event patterns sharing the same host value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_24

LANGUAGE: eql
CODE:
```
sample by host
  [ file where file.extension == "exe" ]
  [ process where true ]
```

----------------------------------------

TITLE: Using Alias with AS Keyword in SELECT List
DESCRIPTION: Example of using the AS keyword to provide a name for an expression in the SELECT list, making the output more readable.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
SELECT 1 + 1 AS result;
```

----------------------------------------

TITLE: Index Document into Text Field (Console)
DESCRIPTION: Indexes a document into the `my-index-000001` index with the ID `1`. The document contains the phrase "Quick Brown Foxes!" in the `full_text` field, which is a `text` field subject to analysis.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-term-query.md#_snippet_2

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1
{
  "full_text":   "Quick Brown Foxes!"
}
```

----------------------------------------

TITLE: Handling Missing Values in Stats Aggregation for Elasticsearch
DESCRIPTION: This snippet shows how to handle missing values in a stats aggregation. It uses the 'missing' parameter to treat documents without a value in the 'grade' field as if they had a value of 0.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-stats-aggregation.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
POST /exams/_search?size=0
{
  "aggs": {
    "grades_stats": {
      "stats": {
        "field": "grade",
        "missing": 0      <1>
      }
    }
  }
}
```

----------------------------------------

TITLE: Execute Painless Script to Calculate Day of Week from Timestamp
DESCRIPTION: This snippet runs a Painless script using the _execute API in the 'keyword_field' context. The script accesses the '@timestamp' field, gets its value, and uses Painless date functions to determine and emit the full name of the day of the week in English.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_17

LANGUAGE: console
CODE:
```
POST /_scripts/painless/_execute
{
  "script": {
    "source": """
      emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ENGLISH));
    """
  },
  "context": "keyword_field",
  "context_setup": {
    "index": "my-index-000001",
    "document": {
      "@timestamp": "2020-04-30T14:31:43-05:00"
    }
  }
}
```

----------------------------------------

TITLE: Converting Numeric Values to Datetime using TO_DATETIME in ESQL
DESCRIPTION: This example shows how TO_DATETIME function interprets numeric values as milliseconds since the Unix epoch (January 1, 1970). The integer values 0 and 1 are converted to their corresponding datetime representations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_datetime.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
ROW int = [0, 1]
| EVAL dt = TO_DATETIME(int)
```

----------------------------------------

TITLE: Removing Elasticsearch Instances and Disks on GCP
DESCRIPTION: This snippet demonstrates how to delete Elasticsearch instances and their associated disks using gcloud commands. It includes commands for stopping and removing instances, as well as deleting associated boot disks.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-cloning.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
# Stopping and removing instances
gcloud compute instances delete myesnode1 myesnode2 \
       --zone=europe-west1-a

# Consider removing disk as well if you don't need them anymore
gcloud compute disks delete boot-myesnode1 boot-myesnode2  \
       --zone=europe-west1-a
```

----------------------------------------

TITLE: Decay Function for Date Fields
DESCRIPTION: This snippet demonstrates using the `decayDateGauss` function within a script. It uses parameters such as origin, scale, offset, and decay to calculate the score based on date proximity.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-script-score-query.md#2025-04-21_snippet_7

LANGUAGE: js
CODE:
```
"script" : {
    "source" : "decayDateGauss(params.origin, params.scale, params.offset, params.decay, doc['date'].value)",
    "params": {
        "origin": "2008-01-01T01:00:00Z",
        "scale": "1h",
        "offset" : "0",
        "decay" : 0.5
    }
}
```

----------------------------------------

TITLE: Excluding Documents with Nested Queries
DESCRIPTION: This snippet shows how to exclude documents with matching nested query objects using an outer 'must_not' clause in Elasticsearch search, focusing on the 'comments' author field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-nested-query.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
POST my-index/_search
{
  "query": {
    "bool": {
      "must_not": [
        {
          "nested": {
            "path": "comments",
            "query": {
              "term": {
                "comments.author": "nik9000"
              }
            }
          }
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Creating a Custom Analyzer with Common Grams Filter in Elasticsearch
DESCRIPTION: This example shows how to configure a new custom analyzer that uses the common_grams filter with a defined list of common words (a, is, the).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-common-grams-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /common_grams_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "index_grams": {
          "tokenizer": "whitespace",
          "filter": [ "common_grams" ]
        }
      },
      "filter": {
        "common_grams": {
          "type": "common_grams",
          "common_words": [ "a", "is", "the" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Converting WKT String to Geometry in Elasticsearch SQL
DESCRIPTION: Explains the ST_WKTToSQL function which takes a string containing a WKT representation and returns the corresponding geometry object. It notes that a null input results in a null output. The example converts a WKT point string to a geometry and casts it back to a string for display.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-geo.md#_snippet_1

LANGUAGE: SQL
CODE:
```
ST_WKTToSQL(
    string <1>
)
```

LANGUAGE: SQL
CODE:
```
SELECT CAST(ST_WKTToSQL('POINT (10 20)') AS STRING) location;
```

----------------------------------------

TITLE: Demonstrating Post-Increment Operator in Painless
DESCRIPTION: This snippet shows how to use the post-increment operator '++' with different numeric types in Painless. It demonstrates the operator's behavior, including type promotion and implicit casting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_0

LANGUAGE: painless
CODE:
```
short i = 0;
i++;
long j = 1;
long k;
k = j++;
```

----------------------------------------

TITLE: Combining MIN with Inline Functions in ESQL
DESCRIPTION: Shows how to combine the MIN function with the MV_AVG function to calculate the minimum average of a multivalued column. This example first calculates the average of 'salary_change' values for each row, then finds the minimum of those averages.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/min.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM employees
| STATS min_avg_salary_change = MIN(MV_AVG(salary_change))
```

----------------------------------------

TITLE: Handling Missing Values in Elasticsearch Aggregations
DESCRIPTION: This snippet shows how to handle missing values in Elasticsearch aggregations. It uses the 'missing' parameter to specify a default value for documents that don't have the aggregated field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-percentile-aggregation.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
GET latency/_search
{
  "size": 0,
  "aggs": {
    "grade_percentiles": {
      "percentiles": {
        "field": "grade",
        "missing": 10       <1>
      }
    }
  }
}
```

----------------------------------------

TITLE: Generating Client Certificate with Elasticsearch Certutil
DESCRIPTION: This command generates a client certificate for Elasticsearch.  It creates a zipped PKCS#12 file, sets a password, validity period, specifies the CA to use for signing, extracts the zipped certificate, and removes the zip archive.  This certificate will be used by clients to authenticate with the cluster.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/reindex/src/test/resources/org/elasticsearch/reindex/README.txt#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
$ES_HOME/bin/elasticsearch-certutil cert --out client.zip --pass "client-password" \
    --name "client" --days 9999  --pem \
    --ca ca.p12 --ca-pass "ca-password"
unzip client.zip
rm client.zip
```

----------------------------------------

TITLE: Format DATETIME using TO_CHAR in Elasticsearch SQL
DESCRIPTION: Illustrates formatting a DATETIME value into a string using the TO_CHAR function with a 'DD/MM/YYYY HH24:MI:SS.FF2' pattern. The input is a casted datetime literal. The function returns the datetime as a formatted string using 24-hour format and 2 fractional second digits.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_54

LANGUAGE: SQL
CODE:
```
SELECT TO_CHAR(CAST('2020-04-05T11:22:33.987654' AS DATETIME), 'DD/MM/YYYY HH24:MI:SS.FF2') AS "datetime";
```

----------------------------------------

TITLE: Add Minutes to Date with DATE_ADD - SQL
DESCRIPTION: Uses DATE_ADD to add 9235 minutes to a date value, resulting in a datetime output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_29

LANGUAGE: SQL
CODE:
```
SELECT DATE_ADD('minutes', 9235, '2019-09-04'::date) AS "+9235 minutes";
```

----------------------------------------

TITLE: Combining Full-Text Search with Path Hierarchy Filtering in Elasticsearch
DESCRIPTION: This example combines a full-text match query for '16' with a filter on file paths that must be in Alice's directory, demonstrating how to use path hierarchy filtering with other search criteria.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pathhierarchy-tokenizer.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
GET file-path-test/_search
{
  "query": {
    "bool" : {
      "must" : {
        "match" : { "file_path" : "16" }
      },
      "filter": {
        "term" : { "file_path.tree" : "/User/alice" }
      }
    }
  }
}
```

----------------------------------------

TITLE: Initialize Museums Index with Point Data
DESCRIPTION: Creates an Elasticsearch index for museums with a point field and populates it with sample location data for various museums.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-cartesian-centroid-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /museums
{
  "mappings": {
    "properties": {
      "location": {
        "type": "point"
      }
    }
  }
}

POST /museums/_bulk?refresh
{"index":{"_id":1}}
{"location": "POINT (491.2350 5237.4081)", "city": "Amsterdam", "name": "NEMO Science Museum"}
{"index":{"_id":2}}
{"location": "POINT (490.1618 5236.9219)", "city": "Amsterdam", "name": "Museum Het Rembrandthuis"}
{"index":{"_id":3}}
{"location": "POINT (491.4722 5237.1667)", "city": "Amsterdam", "name": "Nederlands Scheepvaartmuseum"}
{"index":{"_id":4}}
{"location": "POINT (440.5200 5122.2900)", "city": "Antwerp", "name": "Letterenhuis"}
{"index":{"_id":5}}
{"location": "POINT (233.6389 4886.1111)", "city": "Paris", "name": "Musée du Louvre"}
{"index":{"_id":6}}
{"location": "POINT (232.7000 4886.0000)", "city": "Paris", "name": "Musée d'Orsay"}
```

----------------------------------------

TITLE: GROUP BY with Column Name
DESCRIPTION: Example of using GROUP BY with a column name to group results by gender, returning distinct gender values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_11

LANGUAGE: sql
CODE:
```
SELECT gender AS g FROM emp GROUP BY gender;
```

----------------------------------------

TITLE: Cron Expression Examples - Daily Triggers - TXT
DESCRIPTION: These examples demonstrate simple cron expressions for scheduling daily tasks. The first triggers at 9:05 AM UTC every day, while the second restricts the trigger to only the year 2020.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/api-conventions.md#_snippet_1

LANGUAGE: txt
CODE:
```
0 5 9 * * ?
0 5 9 * * ? 2020
```

----------------------------------------

TITLE: Retrieving Doc Values in Elasticsearch Console
DESCRIPTION: This console command shows how to use the `docvalue_fields` parameter to retrieve doc values for specified fields. Doc values are optimized for sorting and aggregations and can be more efficient than loading the full `_source` for supported field types. The example includes specifying fields by name, using wildcards, and applying format options.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_18

LANGUAGE: console
CODE:
```
GET my-index-000001/_search
{
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  },
  "docvalue_fields": [
    "user.id",
    "http.response.*", 
    {
      "field": "date",
      "format": "epoch_millis" 
    }
  ]
}
```

----------------------------------------

TITLE: Calculating Daily Cumulative User Cardinality
DESCRIPTION: Example showing how to calculate the cumulative count of unique users per day using date histogram and cardinality aggregations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-cumulative-cardinality-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /user_hits/_search
{
  "size": 0,
  "aggs": {
    "users_per_day": {
      "date_histogram": {
        "field": "timestamp",
        "calendar_interval": "day"
      },
      "aggs": {
        "distinct_users": {
          "cardinality": {
            "field": "user_id"
          }
        },
        "total_new_users": {
          "cumulative_cardinality": {
            "buckets_path": "distinct_users"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Querying Cross-Fields with Multiple Analyzers in Console
DESCRIPTION: This snippet performs a `multi_match` query of `type: cross_fields` for the term "Jon" across four fields. It illustrates how `cross_fields` automatically groups fields with the same analyzer (e.g., "first" and "last" together, and "first.edge" and "last.edge" together), executing the query separately for each group and using the best score.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-multi-match-query.md#_snippet_11

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "multi_match" : {
      "query":      "Jon",
      "type":       "cross_fields",
      "fields":     [
        "first", "first.edge",
        "last",  "last.edge"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Using MAX Aggregation Function in ESQL
DESCRIPTION: Basic example of using MAX to find the maximum value in a column named 'languages'. The query returns the maximum value found in the 'languages' column across all rows in the 'employees' table.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/max.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS MAX(languages)
```

----------------------------------------

TITLE: Using Static Members of Painless Reference Type Objects
DESCRIPTION: This snippet demonstrates accessing static fields and calling static methods directly on the reference type object name without needing an instance. It shows how to retrieve a predefined constant value (`Integer.MAX_VALUE`) and parse a string into a number (`Long.parseLong`).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-types.md#_snippet_4

LANGUAGE: painless
CODE:
```
int i = Integer.MAX_VALUE;
long l = Long.parseLong("123L");
```

----------------------------------------

TITLE: Basic ILM Allocate Action with Replica and Shard Settings
DESCRIPTION: Example showing how to configure an ILM policy with an allocate action that sets the number of replicas to 2 and limits total shards per node to 200.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-allocate.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "warm": {
        "actions": {
          "allocate" : {
            "number_of_replicas" : 2,
            "total_shards_per_node" : 200
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Querying Geo-bounding Box Using Lat Lon Property Format
DESCRIPTION: The following request searches using a geo_bounding_box filter with latitude and longitude defined as properties. This method necessitates latitude and longitude in a key-value format and returns matching documents intersecting the bounding box defined.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-bounding-box-query.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET my_locations/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_bounding_box": {
          "pin.location": {
            "top_left": {
              "lat": 40.73,
              "lon": -74.1
            },
            "bottom_right": {
              "lat": 40.01,
              "lon": -71.12
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Searching Authors with MULTI_MATCH in ESQL
DESCRIPTION: Example query searching for 'Faulkner' across author and description fields, limiting to 5 results and sorting by book_no. Returns book number and author fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/multi_match.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM books
| WHERE MULTI_MATCH("Faulkner", author, description)
| KEEP book_no, author
| SORT book_no
| LIMIT 5
```

----------------------------------------

TITLE: Configuring Pattern Tokenizer to Capture Quoted Text in Elasticsearch
DESCRIPTION: Example configuring a pattern tokenizer to extract text enclosed in double quotes, even with embedded escaped quotes. Uses a complex regex with capture groups to identify and extract the quoted content.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pattern-tokenizer.md#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
"((?:\\"|[^"]{1}|\\")*)"
```

LANGUAGE: text
CODE:
```
\"((?:\\\\\"|[^\"]|\\\\\")+)\"
```

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "my_tokenizer"
        }
      },
      "tokenizer": {
        "my_tokenizer": {
          "type": "pattern",
          "pattern": "\"((?:\\\\\"|[^\"]|\\\\\")+)\"",
          "group": 1
        }
      }
    }
  }
}

POST my-index-000001/_analyze
{
  "analyzer": "my_analyzer",
  "text": "\"value\", \"value with embedded \\\" quote\""
}
```

LANGUAGE: text
CODE:
```
[ value, value with embedded \" quote ]
```

----------------------------------------

TITLE: GeoIP Pipeline Response with City Database
DESCRIPTION: Sample response showing the enriched document with geographical information after processing with the GeoIP processor using the city database.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/geoip-processor.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "found": true,
  "_index": "my-index-000001",
  "_id": "my_id",
  "_version": 1,
  "_seq_no": 55,
  "_primary_term": 1,
  "_source": {
    "ip": "89.160.20.128",
    "geoip": {
      "continent_name": "Europe",
      "country_name": "Sweden",
      "country_iso_code": "SE",
      "city_name" : "Linköping",
      "region_iso_code" : "SE-E",
      "region_name" : "Östergötland County",
      "location": { "lat": 58.4167, "lon": 15.6167 }
    }
  }
}
```

----------------------------------------

TITLE: Creating Role Descriptor with Global Application and Profile Management in Elasticsearch
DESCRIPTION: This role descriptor grants all cluster permissions, global application and profile management with special characters, and role management for specific indices.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/src/test/resources/org/elasticsearch/xpack/security/audit/logfile/audited_roles.txt#2025-04-22_snippet_5

LANGUAGE: JSON
CODE:
```
{"cluster":["all"],"global":{"application":{"manage":{"applications":["\""]}},"profile":{"write":{"applications":["","\""]}},"role":{"manage":{"indices":[{"names":["test*"],"privileges":["read","write"]}]}}},"indices":[],"applications":[],"run_as":["\"[a]/"]}
```

----------------------------------------

TITLE: Adding Numbers and Fields in EQL
DESCRIPTION: Demonstrates various uses of the 'add' function to sum two numeric values, including literals, field values, and null inputs. Shows how it handles integers, floats, and returns null if either addend is null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-function-ref.md#_snippet_0

LANGUAGE: eql
CODE:
```
add(4, 5)                                           // returns 9
add(4, 0.5)                                         // returns 4.5
add(0.5, 0.25)                                      // returns 0.75
add(4, -2)                                          // returns 2
add(-2, -2)                                         // returns -4

// process.args_count = 4
add(process.args_count, 5)                          // returns 9
add(process.args_count, 0.5)                        // returns 4.5

// process.parent.args_count = 2
add(process.args_count, process.parent.args_count)  // returns 6

// null handling
add(null, 4)                                        // returns null
add(4. null)                                        // returns null
add(null, process.args_count)                       // returns null
add(process.args_count null)                        // returns null
```

----------------------------------------

TITLE: Setting Up Mapping for kNN in Elasticsearch
DESCRIPTION: This code snippet demonstrates how to set up an index with a dense_vector field for enabling kNN search. It shows the mapping configuration with a similarity metric specified. Dependencies include Elasticsearch with kNN plugin enabled. Inputs are the field configurations and outputs are the mappings being applied to the index.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-knn-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-image-index
{
  "mappings": {
    "properties": {
       "image-vector": {
        "type": "dense_vector",
        "dims": 3,
        "index": true,
        "similarity": "l2_norm"
      },
      "file-type": {
        "type": "keyword"
      },
      "title": {
        "type": "text"
      }
    }
  }
}

```

----------------------------------------

TITLE: Generating Certificates in Silent Mode with elasticsearch-certutil
DESCRIPTION: This command generates certificates in silent mode using a YAML configuration file. It creates a compressed file containing PKCS#12 files for each instance, including the instance certificate, private key, and CA certificate.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/certutil.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
bin/elasticsearch-certutil cert --silent --in instances.yml --out test1.zip --pass testpassword --ca elastic-stack-ca.p12
```

----------------------------------------

TITLE: Demonstrating List Access with List Type in Painless
DESCRIPTION: Shows how to use the list access operator with a List type in Painless, including adding elements, modifying elements, and accessing elements with both literal and variable indices.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-reference.md#2025-04-21_snippet_9

LANGUAGE: painless
CODE:
```
List list = new ArrayList(); 
list.add(1);                 
list.add(2);                 
list.add(3);                 
list[0] = 2;                 
list[1] = 5;                 
int x = list[0] + list[1];   
int y = 1;                   
int z = list[y];             
```

----------------------------------------

TITLE: Profiling Fetch Phase in Elasticsearch (Console)
DESCRIPTION: Demonstrates how to execute a search query with profiling enabled to analyze the fetch phase. The query searches for documents with a specific user ID and returns the fetch profile information.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-profile.md#2025-04-21_snippet_11

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search?filter_path=profile.shards.fetch
{
  "profile": true,
  "query": {
    "term": {
      "user.id": {
        "value": "elkbee"
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Elasticsearch Connector with cURL
DESCRIPTION: Example cURL command to create a connector using the Elasticsearch Connector API. This includes authentication headers and JSON payload for connector configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/api-tutorial.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
curl -s -X PUT http://localhost:9200/_connector/my-connector-id \
-H "Authorization: APIKey $APIKEY" \
-H "Content-Type: application/json" \
-d '{
  "name": "Music catalog",
  "index_name":  "music",
  "service_type": "postgresql"
}'
```

----------------------------------------

TITLE: Basic Histogram Aggregation in Elasticsearch
DESCRIPTION: This example demonstrates how to use histogram aggregation to bucket products based on their price with an interval of 50. The aggregation dynamically builds fixed size buckets over numeric values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-histogram-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "prices": {
      "histogram": {
        "field": "price",
        "interval": 50
      }
    }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "prices": {
      "buckets": [
        {
          "key": 0.0,
          "doc_count": 1
        },
        {
          "key": 50.0,
          "doc_count": 1
        },
        {
          "key": 100.0,
          "doc_count": 0
        },
        {
          "key": 150.0,
          "doc_count": 2
        },
        {
          "key": 200.0,
          "doc_count": 3
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Customizing Whitespace Analyzer in Elasticsearch
DESCRIPTION: This snippet illustrates how to create a custom analyzer based on the built-in `whitespace` analyzer in Elasticsearch. It sets up a new index with custom settings to modify the behavior of the existing analyzer, specifically by adding token filters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-whitespace-analyzer.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /whitespace_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "rebuilt_whitespace": {
          "tokenizer": "whitespace",
          "filter": [         <1>
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Parsing DateTime from Milliseconds
DESCRIPTION: Demonstrates converting a millisecond string to a ZonedDateTime object via Instant conversion.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_0

LANGUAGE: painless
CODE:
```
String milliSinceEpochString = "434931330000";
long milliSinceEpoch = Long.parseLong(milliSinceEpochString);
Instant instant = Instant.ofEpochMilli(milliSinceEpoch);
ZonedDateTime zdt = ZonedDateTime.ofInstant(instant, ZoneId.of('Z'));
```

----------------------------------------

TITLE: Executing Painless Script (Test Context) - Console
DESCRIPTION: This snippet shows a basic execution of a Painless script using the default `painless_test` context. It calculates a division using parameters provided in the request body and returns the result as a string. No `context` or `context_setup` is explicitly needed for this context.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_0

LANGUAGE: Console
CODE:
```
POST /_scripts/painless/_execute
{
  "script": {
    "source": "params.count / params.total",
    "params": {
      "count": 100.0,
      "total": 1000.0
    }
  }
}
```

LANGUAGE: JSON
CODE:
```
{
  "result": "0.1"
}
```

----------------------------------------

TITLE: Configuring MATCH Query with Optional Parameters SQL
DESCRIPTION: Illustrates how to provide additional configuration options to the MATCH predicate using the optional third parameter, a semicolon-separated string of key=value pairs. This allows controlling underlying `match` or `multi_match` query settings like operator, fuzziness, and minimum_should_match.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-search.md#_snippet_3

LANGUAGE: SQL
CODE:
```
SELECT author, name, SCORE() FROM library WHERE MATCH(name, 'to the star', 'operator=OR;fuzziness=AUTO:1,5;minimum_should_match=1')
ORDER BY SCORE() DESC LIMIT 2;
```

----------------------------------------

TITLE: Computing Hourly Error Rate with CASE in ESQL
DESCRIPTION: This query uses the CASE function to identify error messages, then calculates an hourly error rate as a percentage of total messages. It demonstrates time-based aggregation and sorting in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/case.md#2025-04-21_snippet_2

LANGUAGE: esql
CODE:
```
FROM sample_data
| EVAL error = CASE(message LIKE "*error*", 1, 0)
| EVAL hour = DATE_TRUNC(1 hour, @timestamp)
| STATS error_rate = AVG(error) by hour
| SORT hour
```

----------------------------------------

TITLE: Foreach Processor for Nested Object Fields
DESCRIPTION: Configuration of the Foreach processor that uppercases the display_name field in each nested object within the products field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/foreach-processor.md#2025-04-21_snippet_7

LANGUAGE: js
CODE:
```
{
  "foreach": {
    "field": "products",
    "processor": {
      "uppercase": {
        "field": "_ingest._value.display_name"
      }
    }
  }
}
```

----------------------------------------

TITLE: Setting Index Mode on Creation (Console)
DESCRIPTION: This snippet demonstrates how to create a new Elasticsearch index and explicitly set the static `index.mode` setting using the REST API. The example sets the mode to `standard`, which is the default behavior for most indices. This setting helps control default behaviors and optimizations for specific data types or access patterns.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/index-modules.md#_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "index":{
      "mode":"standard" # This index uses the `standard` index mode
    }
  }
}
```

----------------------------------------

TITLE: Elasticsearch Date Math Index Name Pattern (Text)
DESCRIPTION: This pattern string illustrates the syntax for using date math expressions within Elasticsearch index or index alias names. It includes a static prefix, a dynamic date math expression (potentially with format and time zone), enclosed in angle brackets.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/api-conventions.md#_snippet_8

LANGUAGE: text
CODE:
```
<static_name{date_math_expr{date_format|time_zone}}>
```

----------------------------------------

TITLE: Creating Elasticsearch Index Mappings
DESCRIPTION: This snippet shows how to create index mappings for three different indices (my-index-000001, my-index-000002, my-index-000003) with various field types including IP, date, keyword, and boolean.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_12

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
    "mappings": {
        "properties": {
            "ip": {
                "type":"ip"
            },
            "version": {
                "type": "version"
            },
            "missing_keyword": {
                "type": "keyword"
            },
            "@timestamp": {
              "type": "date"
            },
            "type_test": {
                "type": "keyword"
            },
            "@timestamp_pretty": {
              "type": "date",
              "format": "dd-MM-yyyy"
            },
            "event_type": {
              "type": "keyword"
            },
            "event": {
              "properties": {
                "category": {
                  "type": "alias",
                  "path": "event_type"
                }
              }
            },
            "host": {
              "type": "keyword"
            },
            "os": {
              "type": "keyword"
            },
            "bool": {
              "type": "boolean"
            },
            "uptime" : {
              "type" : "long"
            },
            "port" : {
              "type" : "long"
            }
        }
    }
}

PUT /my-index-000002
{
    "mappings": {
        "properties": {
            "ip": {
                "type":"ip"
            },
            "@timestamp": {
              "type": "date"
            },
            "@timestamp_pretty": {
              "type": "date",
              "format": "yyyy-MM-dd"
            },
            "type_test": {
                "type": "keyword"
            },
            "event_type": {
              "type": "keyword"
            },
            "event": {
              "properties": {
                "category": {
                  "type": "alias",
                  "path": "event_type"
                }
              }
            },
            "host": {
              "type": "keyword"
            },
            "op_sys": {
              "type": "keyword"
            },
            "bool": {
              "type": "boolean"
            },
            "uptime" : {
              "type" : "long"
            },
            "port" : {
              "type" : "long"
            }
        }
    }
}

PUT /my-index-000003
{
    "mappings": {
        "properties": {
            "host_ip": {
                "type":"ip"
            },
            "@timestamp": {
              "type": "date"
            },
            "date": {
              "type": "date"
            },
            "event_type": {
              "type": "keyword"
            },
            "event": {
              "properties": {
                "category": {
                  "type": "alias",
                  "path": "event_type"
                }
              }
            },
            "missing_keyword": {
                "type": "keyword"
            },
            "host": {
              "type": "keyword"
            },
            "os": {
              "type": "keyword"
            },
            "bool": {
              "type": "boolean"
            },
            "uptime" : {
              "type" : "long"
            },
            "port" : {
              "type" : "long"
            }
        }
    }
}
```

----------------------------------------

TITLE: Querying Geo-bounding Box Using Lat Lon String Format
DESCRIPTION: This Elasticsearch query demonstrates a `geo_bounding_box` filter with latitude and longitude represented as strings. The input format required is `latitude,longitude` and the output consists of documents intersecting the bounding box.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-bounding-box-query.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
GET my_locations/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_bounding_box": {
          "pin.location": {
            "top_left": "POINT (-74.1 40.73)",
            "bottom_right": "POINT (-71.12 40.01)"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Advanced Sync Rule for User Service
DESCRIPTION: JSON configuration to filter and index ServiceNow User documents based on activity state
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-servicenow.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
[
  {
    "service": "User",
    "query": "active=False"
  }
]
```

----------------------------------------

TITLE: Performing Addition in SQL
DESCRIPTION: Demonstrates the use of the addition operator (+) to sum two numeric values in a SQL query. The result is returned as a column named 'x'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-operators-math.md#_snippet_0

LANGUAGE: sql
CODE:
```
SELECT 1 + 1 AS x;
```

----------------------------------------

TITLE: Using Regular Expressions with Find Operator in Painless
DESCRIPTION: Updates all hockey players with 'b' in their last name using the find operator (=~) and update_by_query API.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/brief-painless-walkthrough.md#2025-04-21_snippet_9

LANGUAGE: console
CODE:
```
POST hockey/_update_by_query
{
  "script": {
    "lang": "painless",
    "source": """
      if (ctx._source.last =~ /b/) {
        ctx._source.last += "matched";
      } else {
        ctx.op = "noop";
      }
    """
  }
}
```

----------------------------------------

TITLE: Querying, Aggregating, Sorting, and Scripting with _index Field in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the _index field in Elasticsearch for querying, aggregating, sorting, and scripting. It shows indexing documents into different indices and then performing a search that utilizes the _index field in various ways.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-index-field.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT index_1/_doc/1
{
  "text": "Document in index 1"
}

PUT index_2/_doc/2?refresh=true
{
  "text": "Document in index 2"
}

GET index_1,index_2/_search
{
  "query": {
    "terms": {
      "_index": ["index_1", "index_2"]
    }
  },
  "aggs": {
    "indices": {
      "terms": {
        "field": "_index",
        "size": 10
      }
    }
  },
  "sort": [
    {
      "_index": {
        "order": "asc"
      }
    }
  ],
  "script_fields": {
    "index_name": {
      "script": {
        "lang": "painless",
        "source": "doc['_index']"
      }
    }
  }
}
```

----------------------------------------

TITLE: Keeping Only Specific Fields with Remove Processor in Elasticsearch
DESCRIPTION: Configuration example that demonstrates how to use the 'keep' parameter to retain only the 'url' field while removing all other fields from documents during ingest processing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/remove-processor.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "remove": {
    "keep": ["url"]
  }
}
```

----------------------------------------

TITLE: Formatting a DateTime from an Indexed Document in Painless
DESCRIPTION: Painless script that retrieves a datetime value from an indexed document and formats it as an ISO instant string using the Java DateTimeFormatter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_20

LANGUAGE: painless
CODE:
```
ZonedDateTime input = doc['input_datetime'].value;
String output = input.format(DateTimeFormatter.ISO_INSTANT);
```

----------------------------------------

TITLE: Basic Completion Suggester Query in Elasticsearch
DESCRIPTION: Demonstrates how to perform a basic completion suggester query in Elasticsearch. This example searches for suggestions that start with the prefix 'nir' in the 'suggest' field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_12

LANGUAGE: console
CODE:
```
POST music/_search?pretty
{
  "suggest": {
    "song-suggest": {
      "prefix": "nir",        <1>
      "completion": {         <2>
          "field": "suggest"  <3>
      }
    }
  }
}
```

----------------------------------------

TITLE: Explicit Type Casting Query in ESQL
DESCRIPTION: Example query showing explicit type casting using to_datetime() function to convert a string date literal before using it in a date_diff calculation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-implicit-casting.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| EVAL dd_ns1=date_diff("day", to_datetime("2023-12-02T11:00:00.00Z"), birth_date)
| SORT emp_no
| KEEP dd_ns1
| LIMIT 1
```

----------------------------------------

TITLE: Differentiating Single vs Double Quotes - SQL
DESCRIPTION: Uses a SQL query with annotations to explicitly show the correct usage of double quotes (") for identifiers like column and table names and single quotes (') for string literals, highlighting that they are not interchangeable in SQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-lexical-structure.md#_snippet_6

LANGUAGE: sql
CODE:
```
SELECT "first_name" <1>
  FROM "musicians"  <1>
 WHERE "last_name"  <1>
     = 'Carroll'    <2>
```

----------------------------------------

TITLE: RRF Retriever Query with Term Aggregation
DESCRIPTION: Example query using RRF retriever with multiple sub-retrievers and a terms aggregation on termA field. Demonstrates how to combine standard retrievers with different queries and apply aggregations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reciprocal-rank-fusion.md#2025-04-21_snippet_16

LANGUAGE: javascript
CODE:
```
{
    "retriever": {
        "rrf": {
            "retrievers": [
                {
                    "standard": {
                        "query": {
                            "term": {
                                "termB": "bar"
                            }
                        }
                    }
                },
                {
                    "standard": {
                        "query": {
                            "match_all": { }
                        }
                    }
                }
            ],
            "rank_window_size": 1
        }
    },
    "size": 1,
    "aggs": {
        "termA_agg": {
            "terms": {
                "field": "termA"
            }
        }
    }
}
```

----------------------------------------

TITLE: Removing Multiple Elasticsearch Plugins Simultaneously
DESCRIPTION: Command to remove multiple Elasticsearch plugins in a single operation. This allows for efficient batch removal of plugins by specifying multiple plugin names in one command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/listing-removing-updating.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
sudo bin/elasticsearch-plugin remove [pluginname] [pluginname] ... [pluginname]
```

----------------------------------------

TITLE: Calculating Maximum Value with MAX Function in ESQL
DESCRIPTION: This snippet demonstrates how to use the MAX function in ESQL to find the maximum value of the 'languages' field from the 'employees' index. The STATS command is used in conjunction with MAX to perform the aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/max.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS MAX(languages)
```

----------------------------------------

TITLE: Creating Elasticsearch Index with GeoShape Mapping
DESCRIPTION: This code snippet demonstrates how to create an Elasticsearch index with a `geo_shape` field mapping. It defines the `location` field as type `geo_shape`, enabling geospatial queries on this field. This is a prerequisite for using the `geo_shape` query with inline shape definitions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-shape-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /example
{
  "mappings": {
    "properties": {
      "location": {
        "type": "geo_shape"
      }
    }
  }
}
```

----------------------------------------

TITLE: Simple Analyzer in Elasticsearch
DESCRIPTION: Analyzer that divides text into terms on non-letter characters and lowercases all terms.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analyzer-reference.md#2025-04-21_snippet_1

LANGUAGE: elasticsearch
CODE:
```
"analyzer": "simple"
```

----------------------------------------

TITLE: Disabling _source Field for an Index - Console
DESCRIPTION: This snippet demonstrates how to create an index (`my-index-000001`) with the `_source` field explicitly disabled in the mappings. Disabling `_source` saves storage space but removes the original document source, impacting features like updates, reindexing, and highlighting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-source-field.md#_snippet_15

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "_source": {
      "enabled": false
    }
  }
}
```

----------------------------------------

TITLE: Add Years with DATE_ADD - SQL
DESCRIPTION: Example demonstrating the DATE_ADD function to add 10 years to a specific datetime string. The result is aliased as '+10 years'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_25

LANGUAGE: SQL
CODE:
```
SELECT DATE_ADD('years', 10, '2019-09-04T11:22:33.000Z'::datetime) AS "+10 years";
```

----------------------------------------

TITLE: Using a Numeric 'Now' Parameter in Painless Scripts
DESCRIPTION: JSON configuration for passing the current time as a numeric parameter to a Painless script. This approach is recommended as it avoids the need for parsing in the script.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_23

LANGUAGE: JSON
CODE:
```
...
"script": {
    ...
    "params": {
        "now": <generated numeric datetime in milliseconds since epoch>
    }
}
...
```

----------------------------------------

TITLE: Configuring Custom Standard Analyzer in Elasticsearch
DESCRIPTION: This example shows how to configure a custom standard analyzer with a maximum token length of 5 and English stop words. It includes the index creation and a sample analysis using the custom analyzer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-standard-analyzer.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_english_analyzer": {
          "type": "standard",
          "max_token_length": 5,
          "stopwords": "_english_"
        }
      }
    }
  }
}

POST my-index-000001/_analyze
{
  "analyzer": "my_english_analyzer",
  "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
}
```

LANGUAGE: text
CODE:
```
[ 2, quick, brown, foxes, jumpe, d, over, lazy, dog's, bone ]
```

----------------------------------------

TITLE: Configuring Multiple Transport Profiles in Elasticsearch
DESCRIPTION: Example configuration showing how to set up multiple transport profiles in Elasticsearch. Demonstrates binding to different ports and interfaces for default, client, and DMZ profiles.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/networking-settings.md#2025-04-21_snippet_9

LANGUAGE: yaml
CODE:
```
transport.profiles.default.port: 9300-9400
transport.profiles.default.bind_host: 10.0.0.1
transport.profiles.client.port: 9500-9600
transport.profiles.client.bind_host: 192.168.0.1
transport.profiles.dmz.port: 9700-9800
transport.profiles.dmz.bind_host: 172.16.1.2
```

----------------------------------------

TITLE: Filter by Relative Time using NOW and INTERVAL in Elasticsearch SQL
DESCRIPTION: Illustrates a common use case for the NOW function: filtering records based on a date relative to the current time. This query selects first names from an 'emp' table where 'hire_date' is within the last 100 years from the current timestamp.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_80

LANGUAGE: SQL
CODE:
```
SELECT first_name FROM emp WHERE hire_date > NOW() - INTERVAL 100 YEARS ORDER BY first_name ASC LIMIT 5;
```

----------------------------------------

TITLE: Querying Boxplot Aggregation in Elasticsearch
DESCRIPTION: This example shows how to perform a search query with a boxplot aggregation on the 'load_time' field, including the full request and response structure.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-boxplot-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET latency/_search
{
  "size": 0,
  "aggs": {
    "load_time_boxplot": {
      "boxplot": {
        "field": "load_time"
      }
    }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  ...

 "aggregations": {
    "load_time_boxplot": {
      "min": 0.0,
      "max": 990.0,
      "q1": 167.5,
      "q2": 445.0,
      "q3": 722.5,
      "lower": 0.0,
      "upper": 990.0
    }
  }
}
```

----------------------------------------

TITLE: Configuring the JSON Processor without Target Field
DESCRIPTION: Example configuration of a JSON processor without specifying a target field. This will cause the processor to replace the source field with the parsed JSON object.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/json-processor.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
{
  "json" : {
    "field" : "source_and_target"
  }
}
```

----------------------------------------

TITLE: Selecting from a Table with Special Characters
DESCRIPTION: Example showing how to use double quotes to escape special SQL characters in table names like dots, hyphens, or asterisks.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
SELECT * FROM "emp" LIMIT 1;
```

----------------------------------------

TITLE: Configuring Join Field Mapping in Elasticsearch Index
DESCRIPTION: Demonstrates how to set up an index with a join field mapping that defines parent-child relationships between documents
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-has-parent-query.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
PUT /my-index-000001
{
  "mappings": {
    "properties": {
      "my-join-field": {
        "type": "join",
        "relations": {
          "parent": "child"
        }
      },
      "tag": {
        "type": "keyword"
      }
    }
  }
}
```

----------------------------------------

TITLE: Elasticsearch Script Query Example
DESCRIPTION: This snippet demonstrates a basic script query in Elasticsearch. It filters documents based on a script that calculates an amount based on the document's 'amount' and 'type' fields, and returns documents where the calculated amount is less than 10.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-script-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "bool": {
      "filter": {
        "script": {
          "script": """
            double amount = doc['amount'].value;
            if (doc['type'].value == 'expense') {
              amount *= -1;
            }
            return amount < 10;
          """
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Field-Level Similarity in Elasticsearch Index Mapping
DESCRIPTION: This snippet demonstrates how to set different similarity algorithms at the field level when creating an Elasticsearch index. It shows a default field using the default BM25 similarity and another field explicitly configured to use the boolean similarity algorithm.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/similarity.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "default_field": { 
        "type": "text"
      },
      "boolean_sim_field": {
        "type": "text",
        "similarity": "boolean" 
      }
    }
  }
}
```

----------------------------------------

TITLE: Mapping Rank Vectors (Float) - Elasticsearch REST API
DESCRIPTION: This snippet creates an Elasticsearch index named `my-rank-vectors-float` with a mapping that defines a field `my_vector` of type `rank_vectors`. It then indexes a document with ID `1` into this index, providing example float vector data for the `my_vector` field. This shows how to configure and populate a rank vectors field with the default float type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/rank-vectors.md#_snippet_0

LANGUAGE: console
CODE:
```
PUT my-rank-vectors-float
{
  "mappings": {
    "properties": {
      "my_vector": {
        "type": "rank_vectors"
      }
    }
  }
}

PUT my-rank-vectors-float/_doc/1
{
  "my_vector" : [[0.5, 10, 6], [-0.5, 10, 10]]
}
```

----------------------------------------

TITLE: Configuring and Querying Null Values in Elasticsearch
DESCRIPTION: This snippet demonstrates how to configure a keyword field with a null_value, index documents with null and empty values, and query for the null_value. It showcases the difference in handling explicit null values versus empty arrays.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/null-value.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "status_code": {
        "type":       "keyword",
        "null_value": "NULL"
      }
    }
  }
}

PUT my-index-000001/_doc/1
{
  "status_code": null
}

PUT my-index-000001/_doc/2
{
  "status_code": []
}

GET my-index-000001/_search
{
  "query": {
    "term": {
      "status_code": "NULL"
    }
  }
}
```

----------------------------------------

TITLE: LIKE/RLIKE Pattern Matching in Elasticsearch SQL
DESCRIPTION: Pattern matching operations using LIKE and RLIKE with wildcard and regexp queries. Includes complex boolean combinations with AND/OR conditions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
SELECT * FROM test WHERE some.string LIKE '%a%';
```

LANGUAGE: elasticsearch
CODE:
```
"query":{"wildcard":{"some.string.typical":{"wildcard":"*a*"
```

----------------------------------------

TITLE: Querying and Retrieving _size field in Elasticsearch Search Console
DESCRIPTION: This example first indexes two sample documents and then performs a search request demonstrating how to query by `_size` using a range query, aggregate on `_size` using terms aggregation, sort by `_size`, and retrieve the `_size` value using both the `fields` parameter and a `script_fields` definition.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/mapper-size-usage.md#_snippet_1

LANGUAGE: console
CODE:
```
# Example documents
PUT my-index-000001/_doc/1
{
  "text": "This is a document"
}

PUT my-index-000001/_doc/2
{
  "text": "This is another document"
}

GET my-index-000001/_search
{
  "query": {
    "range": {
      "_size": {
        "gt": 10
      }
    }
  },
  "aggs": {
    "sizes": {
      "terms": {
        "field": "_size",
        "size": 10
      }
    }
  },
  "sort": [
    {
      "_size": {
        "order": "desc"
      }
    }
  ],
  "fields": ["_size"],
  "script_fields": {
    "size": {
      "script": "doc['_size']"
    }
  }
}
```

----------------------------------------

TITLE: Indexing documents with geo_point fields
DESCRIPTION: This snippet demonstrates creating an index in Elasticsearch with documents containing a geo_point field. Use the PUT HTTP method to create and add documents with geo_point data to the index. Parameters include index name and the location representing geo coordinates as a POINT.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-grid-query.md#2025-04-21_snippet_0

LANGUAGE: Elasticsearch
CODE:
```
PUT /my_locations
{
  "mappings": {
    "properties": {
      "location": {
        "type": "geo_point"
      }
    }
  }
}

PUT /my_locations/_doc/1?refresh
{
  "location" : "POINT(4.912350 52.374081)",
  "city": "Amsterdam",
  "name": "NEMO Science Museum"
}

PUT /my_locations/_doc/2?refresh
{
  "location" : "POINT(4.405200 51.222900)",
  "city": "Antwerp",
  "name": "Letterenhuis"
}

PUT /my_locations/_doc/3?refresh
{
  "location" : "POINT(2.336389 48.861111)",
  "city": "Paris",
  "name": "Musée du Louvre"
}
```

----------------------------------------

TITLE: Performing Fuzzy Matching in Query
DESCRIPTION: This snippet demonstrates how to add fuzziness to a match query, allowing for approximate matches in the search results. It is particularly useful for handling misspellings or variations in text.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-match-query.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "match": {
      "message": {
        "query": "this is a testt",
        "fuzziness": "AUTO"
      }
    }
  }
}
```

----------------------------------------

TITLE: Running Docker Image for Connector Service
DESCRIPTION: This shell command demonstrates how to run a Docker image for the Elastic connectors service. It uses a bind mount to link the local configuration directory and specifies the network and other necessary flags for optimal operation. The command also points to the configuration YAML file necessary for setting up the connector.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-github.md#2025-04-21_snippet_6

LANGUAGE: shell
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Querying Date Range Field with Range Query in Elasticsearch
DESCRIPTION: Demonstrates how to perform a `range` query specifically on a `date_range` field. This query supports parameters like `gte`, `lte`, and the `relation` parameter (`within`, `contains`, `intersects`) to define how the query range interacts with the indexed range. The example queries for a date range that is 'within' the indexed time frame.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/range.md#_snippet_2

LANGUAGE: Elasticsearch DSL
CODE:
```
GET range_index/_search
{
  "query" : {
    "range" : {
      "time_frame" : { 
        "gte" : "2015-10-31",
        "lte" : "2015-11-01",
        "relation" : "within" 
      }
    }
  }
}
```

----------------------------------------

TITLE: Generating RSA 1024-bit Keypair Certificate with Elasticsearch Certutil
DESCRIPTION: This snippet generates an RSA keypair certificate with a key size of 1024 bits using the elasticsearch-certutil tool. It specifies the output file path, validity period (days), key size, and distinguished name (CN, OU, DC) for the certificate.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/identity-provider/src/test/resources/keypair/README.txt#2025-04-21_snippet_1

LANGUAGE: Shell
CODE:
```
"elasticsearch-certutil cert --pem --out ${PWD}/keypair-rsa-1024.zip --days 54321 --keysize 1024 --name \"CN=test-1024,OU=idp,DC=elasticsearch,DC=org\""
```

----------------------------------------

TITLE: Combining Cross-Fields Queries with Dis Max in Console
DESCRIPTION: This snippet shows how to combine two `multi_match` queries of `type: cross_fields` using a `dis_max` query. This pattern is useful when searching fields with different analyzers, allowing parameters like `minimum_should_match` to be applied specifically to one group (here, "first" and "last") while treating another group ("*.edge") differently.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-multi-match-query.md#_snippet_12

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "dis_max": {
      "queries": [
        {
          "multi_match" : {
            "query":      "Will Smith",
            "type":       "cross_fields",
            "fields":     [ "first", "last" ],
            "minimum_should_match": "50%"
          }
        },
        {
          "multi_match" : {
            "query":      "Will Smith",
            "type":       "cross_fields",
            "fields":     [ "*.edge" ]
          }
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Installing Core Elasticsearch Plugins using Command Line
DESCRIPTION: Shell command to install core Elasticsearch plugins using the elasticsearch-plugin utility. This general syntax requires the plugin name as an argument and must be run with appropriate permissions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/installation.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
sudo bin/elasticsearch-plugin install [plugin_name]
```

----------------------------------------

TITLE: Ingesting Documents with ML Pipeline in Elasticsearch
DESCRIPTION: API call to index a document with a language identification pipeline. The document contains text in English, and the pipeline will detect and add the language information to the indexed document.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/repository-gcs/licenses/google-api-services-storage-NOTICE.txt#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
PUT my_index/_doc/1?pipeline=lang_ident_pipeline
{
  "text": "The quick brown fox jumps over the lazy dog."
}
```

----------------------------------------

TITLE: Configuring ILM Wait for Snapshot Policy in Elasticsearch
DESCRIPTION: Creates an ILM policy that waits for a specified SLM (Snapshot Lifecycle Management) policy to complete before proceeding with index deletion. Requires a policy name parameter to specify which SLM policy to wait for.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-wait-for-snapshot.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "delete": {
        "actions": {
          "wait_for_snapshot" : {
            "policy": "slm-policy-name"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing Data for kNN Search in Elasticsearch
DESCRIPTION: Indexes sample image data and their associated vectors into an Elasticsearch index configured for kNN search. Dependencies include a pre-existing index with appropriate mappings. The inputs are bulk data in JSON format, and the output is successful data indexing ready for kNN queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-knn-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST my-image-index/_bulk?refresh=true
{ "index": { "_id": "1" } }
{ "image-vector": [1, 5, -20], "file-type": "jpg", "title": "mountain lake" }
{ "index": { "_id": "2" } }
{ "image-vector": [42, 8, -15], "file-type": "png", "title": "frozen lake"}
{ "index": { "_id": "3" } }
{ "image-vector": [15, 11, 23], "file-type": "jpg", "title": "mountain lake lodge" }

```

----------------------------------------

TITLE: Requesting API Compatibility with HTTP Headers (Text)
DESCRIPTION: Shows how to include the `Accept` and `Content-Type` HTTP headers with the `compatible-with` parameter set to the desired previous major version (e.g., '8') to request REST API compatibility for a specific request. The `Accept` header is always required; `Content-Type` is only necessary when a request body is sent.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/compatibility.md#_snippet_0

LANGUAGE: text
CODE:
```
Accept: "application/vnd.elasticsearch+json;compatible-with=8"
Content-Type: "application/vnd.elasticsearch+json;compatible-with=8"
```

----------------------------------------

TITLE: Mapping Dense Vector Field with Int4 Quantization for HNSW Index in Elasticsearch (console)
DESCRIPTION: This snippet demonstrates creating an Elasticsearch index mapping for a `dense_vector` field that uses `int4` quantization for the HNSW index. This further reduces the memory footprint compared to `int8` by quantizing dimensions to half-byte integers, requiring an even number of vector dimensions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/dense-vector.md#_snippet_4

LANGUAGE: console
CODE:
```
PUT my-byte-quantized-index
{
  "mappings": {
    "properties": {
      "my_vector": {
        "type": "dense_vector",
        "dims": 4,
        "index": true,
        "index_options": {
          "type": "int4_hnsw"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating API Key for Connector via Security API (Console)
DESCRIPTION: This console snippet demonstrates how to create an API key for the connector using the Elasticsearch Security API. The API key is assigned specific cluster and index privileges required for the connector to function, including managing connectors and accessing relevant indices. The user executing this must have sufficient privileges.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-mysql.md#_snippet_1

LANGUAGE: console
CODE:
```
POST /_security/api_key
{
  "name": "connector_name-connector-api-key",
  "role_descriptors": {
    "connector_name-connector-role": {
      "cluster": [
        "monitor",
        "manage_connector"
      ],
      "indices": [
        {
          "names": [
            "index_name",
            ".search-acl-filter-index_name",
            ".elastic-connectors*"
          ],
          "privileges": [
            "all"
          ],
          "allow_restricted_indices": false
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Expressions Over Aggregates with GROUP BY
DESCRIPTION: Example of applying the ROUND function to the MIN aggregate function with salary data, grouped by gender.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_17

LANGUAGE: sql
CODE:
```
SELECT gender AS g, ROUND((MIN(salary) / 100)) AS salary FROM emp GROUP BY gender;
```

----------------------------------------

TITLE: Executing EQL Sequence Query for Malicious Script Detection in Elasticsearch
DESCRIPTION: This EQL query searches for a sequence of events indicating potential malicious script execution. It looks for a regsvr32.exe process, followed by loading of scrobj.dll, and then any network activity from the same process.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-ex-threat-detection.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET /my-data-stream/_eql/search
{
  "query": """
    sequence by process.pid
      [process where process.name == "regsvr32.exe"]
      [library where dll.name == "scrobj.dll"]
      [network where true]
  """
}
```

----------------------------------------

TITLE: Creating Custom Analyzer with N-gram Filter
DESCRIPTION: Creates a new index with a custom analyzer using the ngram filter combined with a standard tokenizer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-ngram-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT ngram_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "standard_ngram": {
          "tokenizer": "standard",
          "filter": [ "ngram" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Minimum Document Count in Terms Aggregation
DESCRIPTION: Example demonstrating how to set minimum document count threshold for terms inclusion in results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-terms-aggregation.md#2025-04-21_snippet_10

LANGUAGE: json
CODE:
```
GET /_search
{
  "aggs": {
    "tags": {
      "terms": {
        "field": "tags",
        "min_doc_count": 10
      }
    }
  }
}
```

----------------------------------------

TITLE: Basic Cardinality Aggregation Query
DESCRIPTION: Example of basic cardinality aggregation to count unique values in a field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-cardinality-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "type_count": {
      "cardinality": {
        "field": "type"
      }
    }
  }
}
```

----------------------------------------

TITLE: Converting Geometry to WKT in Elasticsearch SQL
DESCRIPTION: Explains the ST_AsWKT function which takes a geometry input and returns its Well-Known Text (WKT) string representation. It notes that a null input results in a null output. The example selects the city name and converts the location geometry to its WKT string representation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-geo.md#_snippet_0

LANGUAGE: SQL
CODE:
```
ST_AsWKT(
    geometry <1>
)
```

LANGUAGE: SQL
CODE:
```
SELECT city, ST_AsWKT(location) location FROM "geo" WHERE city = 'Amsterdam';
```

----------------------------------------

TITLE: Executing a Simple Query String in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the simple query string to search documents in Elasticsearch. It utilizes fields and operators to define the query logic. No special dependencies other than Elasticsearch are required. The query emphasizes searching with a default boolean logic and given fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-simple-query-string-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "simple_query_string" : {
        "query": "\"fried eggs\" +(eggplant | potato) -frittata",
        "fields": ["title^5", "body"],
        "default_operator": "and"
    }
  }
}
```

----------------------------------------

TITLE: Using IN Function with Mixed Values in ESQL
DESCRIPTION: This snippet demonstrates the usage of the IN function in ESQL. It creates a row with three columns and applies a WHERE clause using the IN function. The IN function checks if the expression c-a is equal to any of the values in the list, which includes both literal values and a column reference.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/examples/in.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = 1, b = 4, c = 3
| WHERE c-a IN (3, b / 2, a)
```

----------------------------------------

TITLE: Indexing Array of Objects with Regular Object Type
DESCRIPTION: Example showing how a document with an array of user objects is indexed using the default object type. This demonstrates the flattening behavior where the relationship between fields in the same object is lost.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/nested.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1
{
  "group" : "fans",
  "user" : [ 
    {
      "first" : "John",
      "last" :  "Smith"
    },
    {
      "first" : "Alice",
      "last" :  "White"
    }
  ]
}
```

----------------------------------------

TITLE: Install Elasticsearch EC2 Discovery Plugin Shell
DESCRIPTION: Executes the command-line utility to install the EC2 discovery plugin for Elasticsearch. This enables nodes to use the AWS API for cluster formation. The command must be run on each node, and the node must be restarted afterward. Requires appropriate user permissions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-ec2.md#_snippet_0

LANGUAGE: sh
CODE:
```
sudo bin/elasticsearch-plugin install discovery-ec2
```

----------------------------------------

TITLE: Updating Dynamic Tracing Settings via REST API
DESCRIPTION: cURL command to dynamically update tracing configuration settings like sampling rate using the Elasticsearch cluster settings API.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/TRACING.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
curl -XPUT \
  -H "Content-type: application/json" \
  -u "$USERNAME:$PASSWORD" \
  -d '{ "persistent": { "telemetry.agent.transaction_sample_rate": "0.75" } }' \
  https://localhost:9200/_cluster/settings
```

----------------------------------------

TITLE: Extracting Coordinates in Elasticsearch ESQL
DESCRIPTION: This snippet demonstrates how to extract the x and y coordinates from a geographical point expressed as a string in ESQL. It converts the string representation of the point into a geo_point using the TO_GEOPOINT function and then retrieves the x and y coordinates using the ST_X and ST_Y functions, respectively. The snippet assumes the input is a well-formed 'POINT' string and requires Elasticsearch's ESQL functionalities.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/st_y.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW point = TO_GEOPOINT("POINT(42.97109629958868 14.7552534006536)")
| EVAL x =  ST_X(point), y = ST_Y(point)
```

----------------------------------------

TITLE: Indexing a Pre-indexed Shape in Elasticsearch
DESCRIPTION: This code snippet demonstrates how to index a pre-defined shape in the `shapes` index. It inserts a document with the ID `deu` containing a shape defined as an `envelope`. This shape can then be referenced in other queries using its ID.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-shape-query.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
PUT /shapes/_doc/deu
{
  "location": {
    "type": "envelope",
    "coordinates" : [[13.0, 53.0], [14.0, 52.0]]
  }
}
```

----------------------------------------

TITLE: Unsafe Cluster Bootstrapping
DESCRIPTION: Shows the process of unsafe cluster bootstrapping when majority of master-eligible nodes are lost. Includes examples of checking cluster state terms and choosing the best node for bootstrapping.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/node-tool.md#2025-04-21_snippet_8

LANGUAGE: txt
CODE:
```
node_1$ ./bin/elasticsearch-node unsafe-bootstrap

    WARNING: Elasticsearch MUST be stopped before running this tool.

Current node cluster state (term, version) pair is (4, 12)

You should only run this tool if you have permanently lost half or more
of the master-eligible nodes in this cluster, and you cannot restore the
cluster from a snapshot. This tool can cause arbitrary data loss and its
use should be your last resort. If you have multiple surviving master
eligible nodes, you should run this tool on the node with the highest
cluster state (term, version) pair.

Do you want to proceed?

Confirm [y/N] n
```

LANGUAGE: txt
CODE:
```
node_2$ ./bin/elasticsearch-node unsafe-bootstrap

    WARNING: Elasticsearch MUST be stopped before running this tool.

Current node cluster state (term, version) pair is (5, 3)

You should only run this tool if you have permanently lost half or more
of the master-eligible nodes in this cluster, and you cannot restore the
cluster from a snapshot. This tool can cause arbitrary data loss and its
use should be your last resort. If you have multiple surviving master
eligible nodes, you should run this tool on the node with the highest
cluster state (term, version) pair.

Do you want to proceed?

Confirm [y/N] n
```

LANGUAGE: txt
CODE:
```
node_2$ ./bin/elasticsearch-node unsafe-bootstrap

    WARNING: Elasticsearch MUST be stopped before running this tool.

Current node cluster state (term, version) pair is (5, 3)

You should only run this tool if you have permanently lost half or more
of the master-eligible nodes in this cluster, and you cannot restore the
cluster from a snapshot. This tool can cause arbitrary data loss and its
use should be your last resort. If you have multiple surviving master
eligible nodes, you should run this tool on the node with the highest
cluster state (term, version) pair.

Do you want to proceed?

Confirm [y/N] y
Master node was successfully bootstrapped
```

----------------------------------------

TITLE: Performing Match Query on Author Field in ESQL
DESCRIPTION: This ESQL query demonstrates how to use the MATCH function to search for books authored by Faulkner. It filters the 'books' index using a match query on the 'author' field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/match.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM books
| WHERE MATCH(author, "Faulkner")
```

----------------------------------------

TITLE: Cartesian Centroid with Terms Aggregation
DESCRIPTION: Shows how to combine cartesian_centroid as a sub-aggregation with terms aggregation to find central locations per city.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-cartesian-centroid-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /museums/_search?size=0
{
  "aggs": {
    "cities": {
      "terms": { "field": "city.keyword" },
      "aggs": {
        "centroid": {
          "cartesian_centroid": { "field": "location" }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: ESQL Query with KEEP and RENAME Operations
DESCRIPTION: A sample ESQL query that selects specific columns from an 'employees' table and renames them using aliases. The query keeps only first_name and last_name columns, then renames them to 'fn' and 'ln' respectively.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/renameMultipleColumns.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP first_name, last_name
| RENAME first_name AS fn, last_name AS ln
```

----------------------------------------

TITLE: Creating Hockey Document in Elasticsearch
DESCRIPTION: Creates a document in the hockey index with player statistics including goals, assists, and games played.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-debugging.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /hockey/_doc/1?refresh
{"first":"johnny","last":"gaudreau","goals":[9,27,1],"assists":[17,46,0],"gp":[26,82,1]}
```

----------------------------------------

TITLE: Grouping by Multiple Values in ESQL STATS
DESCRIPTION: Shows how to group by multiple values using the STATS command in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/stats-by.md#2025-04-21_snippet_7

LANGUAGE: esql
CODE:
```
FROM employees
STATS
  avg_salary = AVG(salary)
BY department, gender;
```

----------------------------------------

TITLE: Example using RLIKE with regex in Elasticsearch SQL
DESCRIPTION: Provides an example of filtering data using the `RLIKE` operator with a regular expression in Elasticsearch SQL. It retrieves authors and names from the 'library' table where the 'name' matches the pattern 'Child.* Dune'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-like-rlike-operators.md#_snippet_4

LANGUAGE: SQL
CODE:
```
SELECT author, name FROM library WHERE name RLIKE 'Child.* Dune';
```

----------------------------------------

TITLE: Illustrating Valid Numeric Type Casts in Painless
DESCRIPTION: Examples of valid numeric type casts in Painless, demonstrating implicit and explicit casts between different numeric types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-casting.md#2025-04-21_snippet_1

LANGUAGE: painless
CODE:
```
int a = 1;            
long b = a;           
short c = (short)b;   
double e = (double)a; 
```

----------------------------------------

TITLE: Creating an Index with Sparse Vector Field Mapping in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create an Elasticsearch index with a sparse_vector field mapping. This is the field type that should be used with ELSER mappings for semantic search implementations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/sparse-vector.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index
{
  "mappings": {
    "properties": {
      "text.tokens": {
        "type": "sparse_vector"
      }
    }
  }
}
```

----------------------------------------

TITLE: Converting String to Time Duration and Performing Date Arithmetic in ESQL
DESCRIPTION: This snippet demonstrates how to convert a string to a time duration using the TO_TIMEDURATION function and perform date arithmetic operations. It shows adding and subtracting time durations from a datetime value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_timeduration.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW x = "2024-01-01"::datetime
| EVAL y = x + "3 hours"::time_duration, z = x - TO_TIMEDURATION("3 hours");
```

----------------------------------------

TITLE: Setting Zero Terms Query Behavior
DESCRIPTION: This snippet outlines how to configure the zero_terms_query parameter, enabling the query to return all documents instead of none if the analyzer removes all tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-match-query.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "match": {
      "message": {
        "query": "to be or not to be",
        "operator": "and",
        "zero_terms_query": "all"
      }
    }
  }
}
```

----------------------------------------

TITLE: Elasticsearch Access Control Document Example
DESCRIPTION: This code snippet demonstrates an example of Elasticsearch document. In this example, the document defines the identity of a user along with the parameters to form the access control policy.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-dls-overview.md#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
```js
{
  "_id": "example.user@example.com",
  "identity": {
      "username": "example username",
      "email": "example.user@example.com"
   },
   "query": {
        "template": {
            "params": {
                "access_control": [
                    "example.user@example.com",
                    "example group",
                    "example username"]
            }
        },
        "source": "..."
    }
}
```
```

----------------------------------------

TITLE: Analyze API Request with word_delimiter
DESCRIPTION: This example demonstrates how to use the `word_delimiter` filter with the Elasticsearch Analyze API to split a text string into normalized tokens using the filter's default rules. It specifies the `keyword` tokenizer and `word_delimiter` filter in the request.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-word-delimiter-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer": "keyword",
  "filter": [ "word_delimiter" ],
  "text": "Neil's-Super-Duper-XL500--42+AutoCoder"
}
```

----------------------------------------

TITLE: Using Nested Functions in ESQL STATS Aggregations
DESCRIPTION: Demonstrates using nested functions like MV_AVG within STATS for complex calculations on multivalued columns.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/stats-by.md#2025-04-21_snippet_9

LANGUAGE: esql
CODE:
```
FROM employees
STATS
  avg_salary_change = AVG(MV_AVG(salary_history))
BY department;
```

----------------------------------------

TITLE: Defining Identifier Grammar in Painless
DESCRIPTION: Specifies the grammar rule for valid identifiers in Painless. Identifiers must start with a letter or underscore, followed by any number of letters, numbers, or underscores.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-identifiers.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
ID: [_a-zA-Z] [_a-zA-Z-0-9]*;
```

----------------------------------------

TITLE: Grouping Data by Week with BUCKET ESQL
DESCRIPTION: This ESQL query demonstrates grouping data by a specific time span using the BUCKET function. It filters employee hire dates within a year and counts hires per week.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-time-spans.md#_snippet_0

LANGUAGE: ESQL
CODE:
```
FROM employees
| WHERE hire_date >= "1985-01-01T00:00:00Z" AND hire_date < "1986-01-01T00:00:00Z"
| STATS hires_per_week = COUNT(*) BY week = BUCKET(hire_date, 1 week)
| SORT week
```

----------------------------------------

TITLE: Basic Pipeline Processor Configuration in Elasticsearch
DESCRIPTION: A simple configuration of the pipeline processor that references another pipeline named 'inner-pipeline'. This allows nesting pipelines for more complex data processing flows.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/pipeline-processor.md#2025-04-21_snippet_0

LANGUAGE: js
CODE:
```
{
  "pipeline": {
    "name": "inner-pipeline"
  }
}
```

----------------------------------------

TITLE: Install Mapper Annotated Text Plugin (sh)
DESCRIPTION: This shell command uses the Elasticsearch plugin manager to install the `mapper-annotated-text` plugin on a node. It requires superuser privileges and the Elasticsearch `bin` directory to be accessible. The node must be restarted after installation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/mapper-annotated-text.md#_snippet_0

LANGUAGE: sh
CODE:
```
sudo bin/elasticsearch-plugin install mapper-annotated-text
```

----------------------------------------

TITLE: Elasticsearch Script Query with Custom Parameters
DESCRIPTION: This snippet demonstrates how to use custom parameters within a script query in Elasticsearch. It passes the value `5` as the parameter `param1` to the script, which compares the `num1` field in the document to this parameter. This allows for dynamic script execution without modifying the script source.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-script-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "bool": {
      "filter": {
        "script": {
          "script": {
            "source": "doc['num1'].value > params.param1",
            "lang": "painless",
            "params": {
              "param1": 5
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Data Path in Elasticsearch YAML
DESCRIPTION: Specifies the directory where Elasticsearch stores shard data, index, and cluster metadata by setting the `path.data` property in `elasticsearch.yml`. This path must be unique for each node sharing a filesystem and should ideally be outside the Elasticsearch home directory for safe upgrades.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/node-settings.md#_snippet_1

LANGUAGE: yaml
CODE:
```
path.data:  /var/elasticsearch/data
```

----------------------------------------

TITLE: Creating Custom Analyzer with Lowercase Filter in Elasticsearch
DESCRIPTION: This example shows how to use the create index API to configure a new custom analyzer that incorporates the lowercase filter with a whitespace tokenizer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lowercase-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT lowercase_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "whitespace_lowercase": {
          "tokenizer": "whitespace",
          "filter": [ "lowercase" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Filtering Documents with TERM Function in ESQL
DESCRIPTION: Example demonstrating how to use the TERM function to filter documents by exact term matches. The query searches for books where the author field contains the exact term "gabriel" and returns the matching book records.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/term.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM books
| WHERE TERM(author, "gabriel")
```

----------------------------------------

TITLE: Configuring HTTP JWT Authentication in Elasticsearch
DESCRIPTION: YAML configuration for JWT-based authentication in Elasticsearch. This setup enables JSON Web Token authentication and specifies the JWT realm to use for validation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/watcher/licenses/failureaccess-NOTICE.txt#2025-04-21_snippet_6

LANGUAGE: yaml
CODE:
```
xpack.security.http.authentication.type: jwt
xpack.security.http.authentication.realm: jwt1
```

----------------------------------------

TITLE: Multi-match Best Fields Query with Operator in Elasticsearch
DESCRIPTION: Demonstrates using the 'operator' parameter within a 'best_fields' type query. Note that for best_fields, the operator is applied to terms within each field individually.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-multi-match-query.md#_snippet_5

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "multi_match" : {
      "query":      "Will Smith",
      "type":       "best_fields",
      "fields":     [ "first_name", "last_name" ],
      "operator":   "and"
    }
  }
}
```

----------------------------------------

TITLE: Scripted Avg Aggregation with Runtime Field in Elasticsearch
DESCRIPTION: Illustrates how to use a runtime field with a script to apply a grade correction before calculating the average.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-avg-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /exams/_search?size=0
{
  "runtime_mappings": {
    "grade.corrected": {
      "type": "double",
      "script": {
        "source": "emit(Math.min(100, doc['grade'].value * params.correction))",
        "params": {
          "correction": 1.2
        }
      }
    }
  },
  "aggs": {
    "avg_corrected_grade": {
      "avg": {
        "field": "grade.corrected"
      }
    }
  }
}
```

----------------------------------------

TITLE: Install Elasticsearch Phonetic Analysis Plugin (sh)
DESCRIPTION: This command installs the `analysis-phonetic` plugin on an Elasticsearch node using the `elasticsearch-plugin` command-line tool. It typically requires `sudo` privileges and an internet connection for online installation. After installation, the Elasticsearch node must be restarted.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-phonetic.md#_snippet_0

LANGUAGE: sh
CODE:
```
sudo bin/elasticsearch-plugin install analysis-phonetic
```

----------------------------------------

TITLE: Query Elasticsearch SQL using Explicit Multi-field (SQL)
DESCRIPTION: This SQL query explicitly targets the `first_name.raw` multi-field for the exact comparison. It achieves the same result as querying the base `first_name` field when a suitable `keyword` multi-field is available, demonstrating how Elasticsearch SQL internally handles exact matches on `text` fields with multi-fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-data-types.md#_snippet_2

LANGUAGE: SQL
CODE:
```
SELECT first_name FROM index WHERE first_name.raw = 'John'
```

----------------------------------------

TITLE: Configure Parent Circuit Breaker Settings
DESCRIPTION: Settings for the parent-level circuit breaker that controls total memory usage across all breakers. Includes real memory usage toggle and total limit configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/circuit-breaker-settings.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
indices.breaker.total.use_real_memory: true
indices.breaker.total.limit: "70%"
```

----------------------------------------

TITLE: Initiating a Scroll Search in Elasticsearch
DESCRIPTION: This snippet shows how to initiate a scroll search request in Elasticsearch. It specifies a scroll time of 1 minute and a query to match documents containing 'foo' in the message field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/paginate-search-results.md#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
POST /my-index-000001/_search?scroll=1m
{
  "size": 100,
  "query": {
    "match": {
      "message": "foo"
    }
  }
}
```

----------------------------------------

TITLE: Setting Elasticsearch Password Environment Variable
DESCRIPTION: Bash command to set the ELASTIC_PASSWORD environment variable for local development. This uses a default password which should be changed in production environments.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/api-tutorial.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
export ELASTIC_PASSWORD="changeme"
```

----------------------------------------

TITLE: ELSER Semantic Search Example
DESCRIPTION: Demonstrates a sparse vector query using the ELSER (Elastic Learned Sparse Encoder) model for semantic search
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-sparse-vector-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET my-index/_search
{
   "query":{
      "sparse_vector": {
         "field": "ml.tokens",
         "inference_id": "my-elser-model",
         "query": "How is the weather in Jamaica?"
      }
   }
}
```

----------------------------------------

TITLE: Counting Distinct Hire Years with COUNT(DISTINCT) vs. Total Hires
DESCRIPTION: This example counts the number of distinct years represented in the 'hire_date' field using `COUNT(DISTINCT DATE_TRUNC('YEAR', hire_date))` and compares it to the total count of non-null hire dates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_10

LANGUAGE: SQL
CODE:
```
SELECT COUNT(DISTINCT DATE_TRUNC('YEAR', hire_date)) unique_hires, COUNT(DATE_TRUNC('YEAR', hire_date)) AS hires FROM emp;
```

----------------------------------------

TITLE: Creating a Multi Terms Aggregation in Elasticsearch
DESCRIPTION: Example of using multi_terms aggregation to create buckets based on unique combinations of genre and product fields. This creates dynamic buckets for each unique pair of values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-multi-terms-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /products/_search
{
  "aggs": {
    "genres_and_products": {
      "multi_terms": {
        "terms": [{
          "field": "genre" <1>
        }, {
          "field": "product"
        }]
      }
    }
  }
}
```

----------------------------------------

TITLE: RLIKE Regular Expression Matching in ESQL
DESCRIPTION: Example demonstrating the usage of RLIKE operator for pattern matching using regular expressions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/where.md#2025-04-21_snippet_3

LANGUAGE: esql
CODE:
```
WHERE field RLIKE "regex_pattern"
```

----------------------------------------

TITLE: Defining Bucket Script Aggregation in Elasticsearch
DESCRIPTION: Shows the basic syntax for a bucket_script aggregation, including the buckets_path and script parameters. The buckets_path defines variables to be used in the script, which performs calculations on specified metrics.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-bucket-script-aggregation.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "bucket_script": {
    "buckets_path": {
      "my_var1": "the_sum",
      "my_var2": "the_value_count"
    },
    "script": "params.my_var1 / params.my_var2"
  }
}
```

----------------------------------------

TITLE: ESQL LOOKUP JOIN Command Syntax
DESCRIPTION: This snippet shows the basic syntax for the `LOOKUP JOIN` command in ESQL. It demonstrates how to specify the source index, the lookup index, and the field used for joining the two datasets. The command is used to enrich the results of a query by adding fields from a lookup index where a match is found on the specified field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/lookup-join.md#_snippet_0

LANGUAGE: esql
CODE:
```
FROM <source_index>
| LOOKUP JOIN <lookup_index> ON <field_name>
```

----------------------------------------

TITLE: Sample Certificate Generation Workflow (Commented)
DESCRIPTION: A no-op function containing commented code examples showing how to use the certificate generation functions to create various certificate types and formats.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/src/test/resources/org/elasticsearch/xpack/ssl/SSLErrorMessageTests/README.txt#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
function no-op() {
#
# Create a CA in PKCS#12
#
new-p12-ca ca1.p12 "ca1-p12-password" 'CN=Certificate Authority 1,OU=ssl-error-message-test,DC=elastic,DC=co'

# Make a JKS version of the CA
p12-to-jks ca1.p12 "ca1-p12-password" ca1.jks "ca1-jks-password" 

# Make a PEM version of the CA cert
p12-export-cert ca1.p12 "ca1-p12-password" "ca" ca1.crt 

#
# Create a Cert/Key Pair in PKCS#12
#  - "cert1a" is signed by "ca1"
#  - "cert1a.p12" is password protected, and can act as a keystore or truststore
#
new-p12-cert cert1a.p12 "cert1a-p12-password" "cert1a" "ca1.p12" "ca1-p12-password"

# Convert to JKS
#  - "cert1a.jks" is password protected, and can act as a keystore or truststore
p12-to-jks cert1a.p12 "cert1a-p12-password" cert1a.jks "cert1a-jks-password" 

# Convert to PEM
#  - "cert1a.key" is an (unprotected) PKCS#1 key
p12-export-pair cert1a.p12 "cert1a-p12-password" "cert1a" cert1a.crt cert1a.key 
}
```

----------------------------------------

TITLE: Analyzing Text with Stop Analyzer in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the stop analyzer to analyze a given text. It shows the API call to the _analyze endpoint and the resulting output after stop word removal.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-analyzer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _analyze
{
  "analyzer": "stop",
  "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
}
```

LANGUAGE: text
CODE:
```
[ quick, brown, foxes, jumped, over, lazy, dog, s, bone ]
```

----------------------------------------

TITLE: GROUP BY with Multiple Grouping Elements
DESCRIPTION: Example of grouping by multiple columns (gender and languages) and including a COUNT aggregate function, with ORDER BY for sorting the results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_15

LANGUAGE: sql
CODE:
```
SELECT gender g, languages l, COUNT(*) c FROM "emp" GROUP BY g, l ORDER BY languages ASC, gender DESC;
```

----------------------------------------

TITLE: Multi-Criteria Ordering in Terms Aggregation
DESCRIPTION: Example demonstrating how to order buckets using multiple criteria including stats and document count.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-terms-aggregation.md#2025-04-21_snippet_8

LANGUAGE: json
CODE:
```
GET /_search
{
  "aggs": {
    "countries": {
      "terms": {
        "field": "artist.country",
        "order": [ { "rock>playback_stats.avg": "desc" }, { "_count": "desc" } ]
      },
      "aggs": {
        "rock": {
          "filter": { "term": { "genre": "rock" } },
          "aggs": {
            "playback_stats": { "stats": { "field": "play_count" } }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing Nested Documents in Elasticsearch
DESCRIPTION: Example of adding a product document with nested reseller information including company names and prices.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-nested-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /products/_doc/0?refresh
{
  "name": "LED TV",
  "resellers": [
    {
      "reseller": "companyA",
      "price": 350
    },
    {
      "reseller": "companyB",
      "price": 500
    }
  ]
}
```

----------------------------------------

TITLE: Executing Disjunction Max Query in Elasticsearch using Console
DESCRIPTION: This snippet demonstrates a Disjunction Max Query request in Elasticsearch. It uses the `_search` endpoint to execute queries that match either titles or body fields with 'Quick pets', adjusting relevance scores with a tie breaker. The query requires a list of subqueries, each encapsulated within a `term` query object. Optional parameters such as `tie_breaker` can modify the relevance scoring to benefit documents matching multiple query clauses. Inputs include an endpoint and a JSON query object, while outputs are the matching documents with scores.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-dis-max-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "dis_max": {
      "queries": [
        { "term": { "title": "Quick pets" } },
        { "term": { "body": "Quick pets" } }
      ],
      "tie_breaker": 0.7
    }
  }
}
```

----------------------------------------

TITLE: Performing Prefix Query with Full Syntax (Elasticsearch)
DESCRIPTION: This snippet demonstrates how to execute a prefix query using the standard, full syntax against the _search endpoint. It targets the `user.id` field and searches for terms that begin with the prefix 'ki', providing the prefix value within a nested `value` object under the field name.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-prefix-query.md#_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "prefix": {
      "user.id": {
        "value": "ki"
      }
    }
  }
}
```

----------------------------------------

TITLE: Filtering Books by Author in ESQL
DESCRIPTION: An ESQL query that searches for books where the author field contains 'Faulkner'. The query uses the FROM clause to specify the books index and the WHERE clause with a text match condition.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/examples/match_operator.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM books
| WHERE author:"Faulkner"
```

----------------------------------------

TITLE: Finding Last First Name by Gender and Birth Date (LAST) with Grouping and Ordering
DESCRIPTION: This query groups results by 'gender' and uses LAST to find the last first name within each group, explicitly ordering by 'birth_date'. This returns the first name corresponding to the latest birth date within each gender.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_26

LANGUAGE: SQL
CODE:
```
SELECT gender, LAST(first_name, birth_date) FROM emp GROUP BY gender ORDER BY gender;
```

----------------------------------------

TITLE: Querying Nested Fields in YAML Using KQL
DESCRIPTION: This snippet provides guidance on querying nested fields using KQL with appropriate syntax. It includes examples with single and nested fields to illustrate the full path required for these queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/kql.md#2025-04-21_snippet_7

LANGUAGE: yaml
CODE:
```
user:{ first: "Alice" and last: "White" }
```

LANGUAGE: yaml
CODE:
```
user.names:{ first: "Alice" and last: "White" }
```

----------------------------------------

TITLE: Calculating Average in ESQL
DESCRIPTION: This SQL query demonstrates the usage of the ESQL Average function. It calculates the average value of a field named 'a' and aliases the result as 'avg'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/mv_avg.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
SELECT AVG(a) AS avg FROM test
```

----------------------------------------

TITLE: Extracting Data with DISSECT ESQL
DESCRIPTION: Demonstrates how to use the `DISSECT` command in ESQL to extract fields from a literal string (`a`) based on a specified delimiter-based pattern. It then uses `KEEP` to select the extracted fields (`date`, `msg`, `ip`) for the output table.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-process-data-with-dissect-grok.md#_snippet_0

LANGUAGE: ESQL
CODE:
```
ROW a = "2023-01-23T12:15:00.000Z - some text - 127.0.0.1"
| DISSECT a """%{date} - %{msg} - %{ip}"""
| KEEP date, msg, ip
```

----------------------------------------

TITLE: Using Wildcards and Field Boosts in Simple Query String
DESCRIPTION: This snippet showcases querying with wildcards and boosting field relevance using the caret notation. It emphasizes multi-field search capabilities with boosted scores for specific fields, without any prerequisites other than an Elasticsearch instance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-simple-query-string-query.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "simple_query_string" : {
      "query":    "Will Smith",
      "fields": [ "title", "*_name" ] <1>
    }
  }
}
```

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "simple_query_string" : {
      "query" : "this is a test",
      "fields" : [ "subject^3", "message" ] <1>
    }
  }
}
```

----------------------------------------

TITLE: Analyzing Text with Repeat, Stemmer, and Deduplication (console)
DESCRIPTION: Further extends the example by adding the `remove_duplicates` filter after the `stemmer`. This demonstrates how to remove identical tokens that might result from the combination of `keyword_repeat` and a stemmer (where stemming doesn't change the token), ensuring a cleaner output stream.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-keyword-repeat-tokenfilter.md#_snippet_2

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer": "whitespace",
  "filter": [
    "keyword_repeat",
    "stemmer",
    "remove_duplicates"
  ],
  "text": "fox running and jumping",
  "explain": true,
  "attributes": "keyword"
}
```

----------------------------------------

TITLE: Example using LIKE with ESCAPE character in Elasticsearch SQL
DESCRIPTION: Illustrates how to use an `ESCAPE` character with the `LIKE` operator in Elasticsearch SQL. This allows matching the literal wildcard characters (`%` or `_`) within the pattern by preceding them with the specified escape character (in this case, '/').
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-like-rlike-operators.md#_snippet_2

LANGUAGE: SQL
CODE:
```
SELECT name, author FROM library WHERE name LIKE 'Dune/%' ESCAPE '/';
```

----------------------------------------

TITLE: Advanced Sync Rules for Redis Connector - Excluding Keys with Pattern
DESCRIPTION: JSON configuration for advanced sync rules to exclude Redis database records where keys start with 'test1', 'test2', or 'test3'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-redis.md#2025-04-21_snippet_6

LANGUAGE: js
CODE:
```
[
  {
    "database": 0,
    "key_pattern": "test[^123]"
  }
]
```

----------------------------------------

TITLE: Reset Native User Password - Interactive Mode
DESCRIPTION: Example demonstrating how to reset a native user's password in interactive mode where the user is prompted to enter the new password.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/reset-password.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
bin/elasticsearch-reset-password --username user1 -i
```

----------------------------------------

TITLE: Defining Bucket Selector Aggregation in Elasticsearch
DESCRIPTION: This snippet shows the basic syntax for a bucket selector aggregation in Elasticsearch. It defines variables for bucket paths and a script to determine bucket retention.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-bucket-selector-aggregation.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "bucket_selector": {
    "buckets_path": {
      "my_var1": "the_sum",
      "my_var2": "the_value_count"
    },
    "script": "params.my_var1 > params.my_var2"
  }
}
```

----------------------------------------

TITLE: Retrieving Next Batch of Scroll Results in Elasticsearch
DESCRIPTION: This snippet demonstrates how to retrieve the next batch of results using the scroll API. It requires the scroll_id from the previous response and specifies a new scroll time to keep the search context alive.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/paginate-search-results.md#2025-04-21_snippet_9

LANGUAGE: console
CODE:
```
POST /_search/scroll
{
  "scroll" : "1m",
  "scroll_id" : "DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAD4WYm9laVYtZndUQlNsdDcwakFMNjU1QQ=="
}
```

----------------------------------------

TITLE: Using PERCENTILE Function in Elasticsearch SQL
DESCRIPTION: Demonstrates calculating the 95th percentile of the 'salary' field, grouped by 'languages', using the default percentile algorithm.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_40

LANGUAGE: SQL
CODE:
```
SELECT languages, PERCENTILE(salary, 95) AS "95th" FROM emp
       GROUP BY languages;
```

----------------------------------------

TITLE: Calculating Ceiling Value in Elasticsearch SQL
DESCRIPTION: This snippet illustrates the `CEIL` (or `CEILING`) function in Elasticsearch SQL. It returns the smallest integer value that is greater than or equal to the input numeric expression. The output type is integer or long.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_2

LANGUAGE: SQL
CODE:
```
SELECT CEIL(125.01), CEILING(-125.99);
```

----------------------------------------

TITLE: Adding a New Field with Painless
DESCRIPTION: Updates multiple fields by adding a nickname field and changing the last name using Painless.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/brief-painless-walkthrough.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
POST hockey/_update/1
{
  "script": {
    "lang": "painless",
    "source": """
      ctx._source.last = params.last;
      ctx._source.nick = params.nick
    """,
    "params": {
      "last": "gaudreau",
      "nick": "hockey"
    }
  }
}
```

----------------------------------------

TITLE: Explain Request with Script Score in Elasticsearch
DESCRIPTION: Demonstrates how to use an explain request with a script_score query, including custom explanations in the script.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-script-score-query.md#2025-04-21_snippet_16

LANGUAGE: console
CODE:
```
GET /my-index-000001/_explain/0
{
  "query": {
    "script_score": {
      "query": {
        "match": { "message": "elasticsearch" }
      },
      "script": {
        "source": """
          long count = doc['count'].value;
          double normalizedCount = count / 10;
          if (explanation != null) {
            explanation.set('normalized count = count / 10 = ' + count + ' / 10 = ' + normalizedCount);
          }
          return normalizedCount;
        """
      }
    }
  }
}
```

----------------------------------------

TITLE: Querying Suggestions with Category Context in Elasticsearch
DESCRIPTION: This snippet illustrates how to query suggestions using category contexts in Elasticsearch. It shows how to filter suggestions by multiple categories and specify the completion field and size of results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_22

LANGUAGE: console
CODE:
```
POST place/_search?pretty
{
  "suggest": {
    "place_suggestion": {
      "prefix": "tim",
      "completion": {
        "field": "suggest",
        "size": 10,
        "contexts": {
          "place_type": [ "cafe", "restaurants" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing Multiple Entities - JSON Snippet - JavaScript
DESCRIPTION: This JSON snippet indexes both pages and databases in Notion, where the titles contain 'Demo Page' and 'Demo Database'. It facilitates the bulk synchronization of different entity types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-notion.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
{
  "searches": [
    {
      "filter": {
        "value": "database"
      },
      "query": "Demo Database"
    },
    {
      "filter": {
        "value": "page"
      },
      "query": "Demo Page"
    }
  ]
}
```

----------------------------------------

TITLE: Handling Null Values in Multivalued Fields (Console)
DESCRIPTION: Indexes a document containing `null` within a multivalued field and queries it using ESQL. Demonstrates that `null` values are not preserved at the storage layer and are therefore not returned by ESQL when querying the field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-multivalued-fields.md#_snippet_4

LANGUAGE: console
CODE:
```
POST /mv/_doc?refresh
{ "a": [2, null, 1] }

POST /_query
{
  "query": "FROM mv | LIMIT 1"
}
```

LANGUAGE: json
CODE:
```
{
  "took": 28,
  "is_partial": false,
  "columns": [
    { "name": "a", "type": "long"},
  ],
  "values": [
    [[1, 2]],
  ]
}
```

----------------------------------------

TITLE: Analyzing Text with CJK Width Filter
DESCRIPTION: Example of using the CJK width token filter to analyze Japanese text. The filter normalizes half-width Katakana characters into their full-width equivalents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-cjk-width-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer" : "standard",
  "filter" : ["cjk_width"],
  "text" : "ｼｰｻｲﾄﾞﾗｲﾅｰ"
}
```

LANGUAGE: text
CODE:
```
シーサイドライナー
```

----------------------------------------

TITLE: Resetting User Password
DESCRIPTION: Example showing how to reset password for user 'jachnich' using interactive mode.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/users-command.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
bin/elasticsearch-users passwd jachnich
```

----------------------------------------

TITLE: Using Parameterized Time Spans in Arithmetic Operations ESQL/JSON
DESCRIPTION: This Elasticsearch _query API request shows how to pass a time span as a named parameter string and explicitly convert it using casting (::DATE_PERIOD) or TO_DATEPERIOD() for use in arithmetic operations (+, -) on a date field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-time-spans.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
   "query": """
   FROM employees
   | EVAL x = hire_date + ?timespan::DATE_PERIOD, y = hire_date - TO_DATEPERIOD(?timespan)
   """,
   "params": [{"timespan" : "1 day"}]
}
```

----------------------------------------

TITLE: Configuring Docker-based Elasticsearch Connection in YAML
DESCRIPTION: This YAML configuration snippet shows how to set up the connection to a Dockerized Elasticsearch instance, including the host, API key, and connector details for a GraphQL service.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-graphql.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: graphql
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA> # Optional. If not provided, the connector will use the elasticsearch.api_key instead
```

----------------------------------------

TITLE: Using Until Keyword in EQL Sequence
DESCRIPTION: Demonstrates how to use the 'until' keyword to specify an expiration event for a sequence. The expiration event terminates sequence matching if it occurs between matching events.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_16

LANGUAGE: eql
CODE:
```
sequence
  [ event_category_1 where condition_1 ]
  [ event_category_2 where condition_2 ]
  ...
until [ event_category_3 where condition_3 ]
```

----------------------------------------

TITLE: Enriching Data with Language Information using ESQL
DESCRIPTION: This ESQL query creates a row with a single column 'a' and enriches it with language information using a predefined 'languages_policy'. The query adds a new column 'language_name' based on the value in column 'a'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/enrich.csv-spec/enrich_with.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = "1"
| ENRICH languages_policy ON a WITH language_name
```

----------------------------------------

TITLE: Basic MATCH Function on Author Field in ESQL
DESCRIPTION: Demonstrates using the MATCH function to find books where the author field contains 'Faulkner'. Shows how MATCH searches through text fields and returns matching records.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/match.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM books
| WHERE MATCH(author, "Faulkner")
```

----------------------------------------

TITLE: Defining Filtered Sync Rule (MS SQL Connector)
DESCRIPTION: This example demonstrates an advanced sync rule that applies a WHERE clause to filter data before syncing to Elasticsearch. The rule fetches only records from the 'employee' table where the 'emp_id' is greater than 5. Only the filtered subset of data will be ingested into Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-ms-sql.md#_snippet_7

LANGUAGE: json
CODE:
```
[
  {
    "tables": ["employee"],
    "query": "SELECT * FROM employee WHERE emp_id > 5"
  }
]
```

----------------------------------------

TITLE: Recreating Pattern Analyzer as Custom Analyzer in Elasticsearch
DESCRIPTION: This snippet demonstrates how to recreate the built-in `pattern` analyzer as a `custom` analyzer in Elasticsearch. This allows for further customization by adding token filters, such as lowercase conversion. It shows how to define a tokenizer and analyzer with specific settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pattern-analyzer.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
PUT /pattern_example
{
  "settings": {
    "analysis": {
      "tokenizer": {
        "split_on_non_word": {
          "type":       "pattern",
          "pattern":    "\\W+" <1>
        }
      },
      "analyzer": {
        "rebuilt_pattern": {
          "tokenizer": "split_on_non_word",
          "filter": [
            "lowercase"       <2>
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring ILM Policy with Dynamic Shard Count Based on Size
DESCRIPTION: Example of configuring an ILM policy that automatically calculates the optimal number of shards based on a maximum shard size of 50GB. The policy uses max_primary_shard_size to determine the target shard count.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-shrink.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "warm": {
        "actions": {
          "shrink" : {
            "max_primary_shard_size": "50gb"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Terms Aggregation with Document Count Error in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the show_term_doc_count_error parameter in a Terms aggregation to display the document count error upper bound for each bucket.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-terms-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /_search
{
  "aggs": {
    "products": {
      "terms": {
        "field": "product",
        "size": 5,
        "show_term_doc_count_error": true
      }
    }
  }
}
```

----------------------------------------

TITLE: Format Datetime with DATE_FORMAT - SQL
DESCRIPTION: Demonstrates DATE_FORMAT formatting a datetime value into a string including date, time, and fractional seconds using a MySQL-compatible pattern.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_40

LANGUAGE: SQL
CODE:
```
SELECT DATE_FORMAT(CAST('2020-04-05T11:22:33.987654' AS DATETIME), '%d/%m/%Y %H:%i:%s.%f') AS "datetime";
```

----------------------------------------

TITLE: Multi-Source Composite Aggregation in Elasticsearch
DESCRIPTION: This snippet shows a composite aggregation with multiple sources, including a terms aggregation on user_name and a date histogram on timestamp. It illustrates how multiple sources can be optimized when they match the index sort.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_20

LANGUAGE: console
CODE:
```
GET /_search
{
  "size": 0,
  "aggs": {
    "my_buckets": {
      "composite": {
        "sources": [
          { "user_name": { "terms": { "field": "user_name" } } },
          { "date": { "date_histogram": { "field": "timestamp", "calendar_interval": "1d", "order": "desc" } } }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Weight Function Implementation
DESCRIPTION: This snippet illustrates how to implement the `weight` function of the `function_score` query using the `script_score` query.  It shows how to multiply the original score by a weight parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-script-score-query.md#2025-04-21_snippet_8

LANGUAGE: js
CODE:
```
"script" : {
    "source" : "params.weight * _score",
    "params": {
        "weight": 2
    }
}
```

----------------------------------------

TITLE: Histogram Value Source Example
DESCRIPTION: Shows how to use the histogram value source to build fixed-size interval buckets over numeric values. This example creates buckets with an interval of 5 from the price field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
GET /_search
{
  "size": 0,
  "aggs": {
    "my_buckets": {
      "composite": {
        "sources": [
          { "histo": { "histogram": { "field": "price", "interval": 5 } } }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Using Keyed Response with Geo-distance Aggregation
DESCRIPTION: Demonstrates how to use the keyed parameter to return geo-distance aggregation buckets as a hash with unique string keys rather than an array.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-geodistance-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /museums/_search?size=0
{
  "aggs": {
    "rings_around_amsterdam": {
      "geo_distance": {
        "field": "location",
        "origin": "POINT (4.894 52.3760)",
        "ranges": [
          { "to": 100000 },
          { "from": 100000, "to": 300000 },
          { "from": 300000 }
        ],
        "keyed": true
      }
    }
  }
}
```

----------------------------------------

TITLE: Accessing Geopoint Values in Painless Scripts
DESCRIPTION: Examples showing how to access geopoint values in Painless scripts, including both object-based and direct access methods for latitude and longitude values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-point.md#2025-04-21_snippet_1

LANGUAGE: painless
CODE:
```
def geopoint = doc['location'].value;
def lat      = geopoint.lat;
def lon      = geopoint.lon;
```

LANGUAGE: painless
CODE:
```
def lat      = doc['location'].lat;
def lon      = doc['location'].lon;
```

----------------------------------------

TITLE: Moving Sum Function Example
DESCRIPTION: Example of using the pre-built sum function in a moving function aggregation to calculate sum of values in the window.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-movfn-aggregation.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
POST /_search
{
  "size": 0,
  "aggs": {
    "my_date_histo": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "1M"
      },
      "aggs": {
        "the_sum": {
          "sum": { "field": "price" }
        },
        "the_moving_sum": {
          "moving_fn": {
            "buckets_path": "the_sum",
            "window": 10,
            "script": "MovingFunctions.sum(values)"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Basic JVM Option Configuration
DESCRIPTION: Shows how to specify a JVM option for all Java versions using the -Xmx flag to set maximum heap size.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/jvm-settings.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
-Xmx2g
```

----------------------------------------

TITLE: Filtering Books by Author using KQL in ESQL
DESCRIPTION: This ESQL query demonstrates how to use the KQL function to filter books where the author is Faulkner. The query selects from the 'books' table and applies a KQL filter condition.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/kql.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM books
| WHERE KQL("author: Faulkner")
```

----------------------------------------

TITLE: EQL Pipe Example
DESCRIPTION: Shows how to use the tail pipe to limit results to most recent events.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_27

LANGUAGE: eql
CODE:
```
authentication where agent.id == 4624
| tail 10
```

----------------------------------------

TITLE: Configuring Doc-Value-Only Fields in Elasticsearch
DESCRIPTION: Example showing how to configure fields with doc values only, where one field is regular and another has indexing disabled. Demonstrates the tradeoff between disk usage and query performance for rarely queried fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/doc-values.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "status_code": {
        "type":  "long"
      },
      "session_id": {
        "type":  "long",
        "index": false
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Multiple Input/Output Mappings in Elasticsearch Inference Processor (JSON)
DESCRIPTION: This snippet demonstrates configuring the `inference` processor to handle multiple input fields. It uses the `input_output` array to specify that both the `content` and `title` fields should be used as input for the model, and the results should be written to `content_embedding` and `title_embedding` respectively. This approach is common for NLP tasks and is mutually exclusive with `target_field` and `field_map`. Requires an existing deployed model capable of handling multiple inputs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/inference-processor.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  "inference": {
    "model_id": "model_deployment_for_inference",
    "input_output": [
        {
            "input_field": "content",
            "output_field": "content_embedding"
        },
        {
            "input_field": "title",
            "output_field": "title_embedding"
        }
    ]
  }
}
```

----------------------------------------

TITLE: Synopsis for elasticsearch-create-enrollment-token Command
DESCRIPTION: The command syntax for elasticsearch-create-enrollment-token, showing available options including force, help, key-value pairs, scope, and URL specification.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/create-enrollment-token.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
bin/elasticsearch-create-enrollment-token
[-f, --force] [-h, --help] [-E <KeyValuePair>] [-s, --scope] [--url]
```

----------------------------------------

TITLE: Constant Score with Filter Query in Elasticsearch
DESCRIPTION: This query demonstrates using a `constant_score` query with a `filter` clause. This assigns a constant score of `1.0` to all documents that match the filter. In this case, it returns all documents where `status` is `active`, each with a score of `1.0`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-bool-query.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET _search
{
  "query": {
    "constant_score": {
      "filter": {
        "term": {
          "status": "active"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Elasticsearch Paths for Unix-like Systems
DESCRIPTION: Sets the data and logs paths for Elasticsearch on Unix-like systems (Linux and macOS) using Unix-style paths in the elasticsearch.yml configuration file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/path.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
path:
  data: /var/data/elasticsearch
  logs: /var/log/elasticsearch
```

----------------------------------------

TITLE: Using EXTRACT Function with DAY_OF_YEAR in Elasticsearch SQL
DESCRIPTION: This snippet shows how to use the generic EXTRACT function to retrieve a specific datetime field, in this case DAY_OF_YEAR, from a timestamp. EXTRACT requires specifying the desired field name (datetime_function) and the source date/datetime expression.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_88

LANGUAGE: SQL
CODE:
```
SELECT EXTRACT(DAY_OF_YEAR FROM CAST('2018-02-19T10:23:27Z' AS TIMESTAMP)) AS day;
```

----------------------------------------

TITLE: ESQL FROM Query with Multiple Indices
DESCRIPTION: Illustrates querying multiple indices using comma-separated lists and wildcards in the FROM command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/from.md#2025-04-21_snippet_3

LANGUAGE: esql
CODE:
```
FROM employees-00001,other-employees-*
```

----------------------------------------

TITLE: Creating Elasticsearch Source Index (firewall_logs) - Console
DESCRIPTION: Sets up the `firewall_logs` index with property mappings for fields like `timestamp`, `source.ip`, `destination.ip`, `action`, and `bytes_transferred`, preparing it to receive log data. This index will be the source for the initial ESQL query before the join. Requires Elasticsearch running.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-lookup-join.md#_snippet_1

LANGUAGE: console
CODE:
```
PUT firewall_logs
{
  "mappings": {
    "properties": {
      "timestamp": { "type": "date" },
      "source.ip": { "type": "ip" },
      "destination.ip": { "type": "ip" },
      "action": { "type": "keyword" },
      "bytes_transferred": { "type": "long" }
    }
  }
}
```

----------------------------------------

TITLE: Executing Matrix Stats Aggregation in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the matrix_stats aggregation to compute statistics on poverty and income fields. It shows the basic structure of the aggregation request.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-matrix-stats-aggregation.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
GET /_search
{
  "aggs": {
    "statistics": {
      "matrix_stats": {
        "fields": [ "poverty", "income" ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Implementing Gaussian Decay Function for Location Scoring in Elasticsearch
DESCRIPTION: This snippet shows how to implement a Gaussian decay function for scoring hotels based on location. It sets the origin at coordinates "11, 12" (town center) with a scale of 2km, preferring hotels closer to this location.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-function-score-query.md#2025-04-21_snippet_10

LANGUAGE: js
CODE:
```
"gauss": { <1>
    "location": {
          "origin": "11, 12",
          "scale": "2km"
    }
}
```

----------------------------------------

TITLE: Searching Field Excluded from _source - Console
DESCRIPTION: This snippet demonstrates performing a search query on the `logs` index for a field (`meta.other.foo`) that was excluded from the stored `_source` field. It shows that fields excluded from `_source` are still searchable.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-source-field.md#_snippet_18

LANGUAGE: console
CODE:
```
GET logs/_search
{
  "query": {
    "match": {
      "meta.other.foo": "one"
    }
  }
}
```

----------------------------------------

TITLE: EQL Lookup Operators
DESCRIPTION: Demonstrates various lookup operators in EQL for case-sensitive and case-insensitive matching against lists of values or patterns.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_6

LANGUAGE: eql
CODE:
```
my_field in ("Value-1", "VALUE2", "VAL3")                 // case-sensitive
my_field in~ ("value-1", "value2", "val3")                // case-insensitive

my_field not in ("Value-1", "VALUE2", "VAL3")             // case-sensitive
my_field not in~ ("value-1", "value2", "val3")            // case-insensitive

my_field : ("value-1", "value2", "val3")                  // case-insensitive

my_field like  ("Value-*", "VALUE2", "VAL?")              // case-sensitive
my_field like~ ("value-*", "value2", "val?")              // case-insensitive

my_field regex  ("[vV]alue-[0-9]", "VALUE[^2].?", "VAL3") // case-sensitive
my_field regex~  ("value-[0-9]", "value[^2].?", "val3")   // case-insensitive
```

----------------------------------------

TITLE: Creating Custom Analyzer with CJK Width Filter
DESCRIPTION: Example of creating a custom analyzer that incorporates the CJK width token filter using the create index API. The analyzer uses the standard tokenizer followed by the CJK width filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-cjk-width-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /cjk_width_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "standard_cjk_width": {
          "tokenizer": "standard",
          "filter": [ "cjk_width" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Nori Analyzer Configuration Example
DESCRIPTION: Example showing how to configure a custom analyzer with nori_tokenizer and nori_part_of_speech filter to remove Korean numerals.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-nori-speech.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT nori_sample
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "my_analyzer": {
            "tokenizer": "nori_tokenizer",
            "filter": [
              "my_posfilter"
            ]
          }
        },
        "filter": {
          "my_posfilter": {
            "type": "nori_part_of_speech",
            "stoptags": [
              "NR"
            ]
          }
        }
      }
    }
  }
}

GET nori_sample/_analyze
{
  "analyzer": "my_analyzer",
  "text": "여섯 용이"
}
```

----------------------------------------

TITLE: Configuring MySQL Connector for Docker - yaml
DESCRIPTION: Provides a sample YAML configuration for the Elasticsearch MySQL connector, specifically tailored for connecting to a Dockerized Elasticsearch instance. It defines the Elasticsearch host, API key, and details for the specific connector instance (ID, service type, API key). Placeholder values need to be replaced with actual environment details.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-mysql.md#_snippet_5

LANGUAGE: yaml
CODE:
```
# When connecting to your cloud deployment you should edit the host value
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: mysql
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA> # Optional. If not provided, the connector will use the elasticsearch.api_key instead
```

----------------------------------------

TITLE: Implementing Bengali Analyzer as Custom Analyzer in Elasticsearch
DESCRIPTION: Creates a custom analyzer that replicates the functionality of the built-in Bengali analyzer, showing the configuration of Bengali-specific stopwords, keyword marking, and specialized normalization and stemming for Indic languages.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT /bengali_example
{
  "settings": {
    "analysis": {
      "filter": {
        "bengali_stop": {
          "type":       "stop",
          "stopwords":  "_bengali_" 
        },
        "bengali_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["উদাহরণ"] 
        },
        "bengali_stemmer": {
          "type":       "stemmer",
          "language":   "bengali"
        }
      },
      "analyzer": {
        "rebuilt_bengali": {
          "tokenizer":  "standard",
          "filter": [
            "lowercase",
            "decimal_digit",
            "bengali_keywords",
            "indic_normalization",
            "bengali_normalization",
            "bengali_stop",
            "bengali_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Calculating Median and 50th Percentile of Salary in ESQL
DESCRIPTION: This snippet demonstrates how to use the MEDIAN and PERCENTILE functions to calculate the median salary from the employees table. Both functions are used to show that they produce the same result for the 50th percentile.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/median.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS MEDIAN(salary), PERCENTILE(salary, 50)
```

----------------------------------------

TITLE: Boolean Field Aggregations and Runtime Fields in Elasticsearch
DESCRIPTION: Demonstrates using boolean fields in aggregations, sorting, and runtime fields. Shows how boolean values are represented in terms aggregations and their usage in scripts.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/boolean.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST my-index-000001/_doc/1?refresh
{
  "is_published": true
}

POST my-index-000001/_doc/2?refresh
{
  "is_published": false
}

GET my-index-000001/_search
{
  "aggs": {
    "publish_state": {
      "terms": {
        "field": "is_published"
      }
    }
  },
  "sort": [ "is_published" ],
  "fields": [
    {"field": "weight"}
  ],
  "runtime_mappings": {
    "weight": {
      "type": "long",
      "script": "emit(doc['is_published'].value ? 10 : 0)"
    }
  }
}
```

----------------------------------------

TITLE: Executing Watcher with Payload Transformation
DESCRIPTION: This example demonstrates how to execute a watch with a transform script to modify the payload. The transform script uses the Java Stream API to filter and map the data, and then collects the results into a list for both 'money_makers' and 'duds'. This example shows the basic setup to use a transform script at the top level of the watch definition.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-watcher-transform-context.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _watcher/watch/_execute
{
  "watch" : {
    "trigger" : { "schedule" : { "interval" : "24h" } },
    "input" : {
      "search" : {
        "request" : {
          "indices" : [ "seats" ],
          "body" : {
            "query" : { "term": { "sold": "true"} },
            "aggs" : {
              "theatres" : {
                "terms" : { "field" : "play" },
                "aggs" : {
                  "money" : {
                    "sum": { "field" : "cost" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "transform" : {
      "script":
      """
        return [
          'money_makers': ctx.payload.aggregations.theatres.buckets.stream()  <1>
            .filter(t -> {                                                    <2>
                return t.money.value > 50000
            })
            .map(t -> {                                                       <3>
                return ['play': t.key, 'total_value': t.money.value ]
            }).collect(Collectors.toList()),                                  <4>
          'duds' : ctx.payload.aggregations.theatres.buckets.stream()         <5>
            .filter(t -> {
                return t.money.value < 15000
            })
            .map(t -> {
                return ['play': t.key, 'total_value': t.money.value ]
            }).collect(Collectors.toList())
          ]
      """
    },
    "actions" : {
      "my_log" : {
        "logging" : {
          "text" : "The output of the payload was transformed to {{ctx.payload}}"
        }
      }
    }
  }
}

```

----------------------------------------

TITLE: Querying both geo_point and geo_shape data with geo_distance filter
DESCRIPTION: This snippet shows how to search across multiple indices containing both `geo_point` and `geo_shape` data using the `geo_distance` filter in Elasticsearch. It queries both `my_locations` and `my_geoshapes` indices for documents within 200km of latitude 40 and longitude -70.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-distance-query.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET my_locations,my_geoshapes/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_distance": {
          "distance": "200km",
          "pin.location": {
            "lat": 40,
            "lon": -70
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Implementing Conditional Logic with If/Else Statements in Painless
DESCRIPTION: Demonstrates the use of if/else conditional statements in Painless to handle different scenarios based on document field values. It checks for missing fields and specific field values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-statements.md#2025-04-21_snippet_0

LANGUAGE: painless
CODE:
```
if (doc[item].size() == 0) {
  // do something if "item" is missing
} else if (doc[item].value == 'something') {
  // do something if "item" value is: something
} else {
  // do something else
}
```

----------------------------------------

TITLE: Configuring Custom Analyzer with Synonym Filter in Elasticsearch
DESCRIPTION: Example of including a synonym token filter in a custom analyzer configuration. The analyzer uses the standard tokenizer and applies stemmer and synonym filters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-synonym-tokenfilter.md#2025-04-21_snippet_3

LANGUAGE: JSON
CODE:
```
{
      "analyzer": {
        "my_analyzer": {
          "type": "custom",
          "tokenizer": "standard",
          "filter": ["stemmer", "synonym"]
        }
      }
}
```

----------------------------------------

TITLE: Creating Custom Analyzer with Hunspell Filter
DESCRIPTION: Example of creating an index with a custom analyzer using a configured Hunspell token filter
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-hunspell-tokenfilter.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "en": {
          "tokenizer": "standard",
          "filter": [ "my_en_US_dict_stemmer" ]
        }
      },
      "filter": {
        "my_en_US_dict_stemmer": {
          "type": "hunspell",
          "locale": "en_US",
          "dedup": false
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Reciprocal Rank Fusion with Text Expansion in Elasticsearch
DESCRIPTION: Example of using Reciprocal Rank Fusion (RRF) to combine results from multiple retrievers including text expansion and traditional queries. This approach provides an alternative to boolean queries for combining different search methods.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-text-expansion-query.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET my-index/_search
{
  "retriever": {
    "rrf": {
      "retrievers": [
        {
          "standard": {
            "query": {
              "multi_match": {
                "query": "How is the weather in Jamaica?",
                "fields": [
                  "title",
                  "description"
                ]
              }
            }
          }
        },
        {
          "standard": {
            "query": {
              "text_expansion": {
                "ml.inference.title_expanded.predicted_value": {
                  "model_id": ".elser_model_2",
                  "model_text": "How is the weather in Jamaica?"
                }
              }
            }
          }
        },
        {
          "standard": {
            "query": {
              "text_expansion": {
                "ml.inference.description_expanded.predicted_value": {
                  "model_id": ".elser_model_2",
                  "model_text": "How is the weather in Jamaica?"
                }
              }
            }
          }
        }
      ],
      "window_size": 10,
      "rank_constant": 20
    }
  }
}
```

----------------------------------------

TITLE: Creating a custom analyzer with Porter stem filter in Elasticsearch
DESCRIPTION: This example shows how to use the create index API to configure a new custom analyzer that includes the Porter stem filter. It ensures lowercase tokens by including the lowercase filter before the Porter stem filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-porterstem-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "whitespace",
          "filter": [
            "lowercase",
            "porter_stem"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Querying Elasticsearch Shape with Inline Definition
DESCRIPTION: This snippet shows how to query Elasticsearch for documents whose `geometry` field is within a specified `envelope`. It uses an inline shape definition with the `shape` parameter.  The `relation` parameter specifies the spatial relationship to check.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-shape-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /example/_search
{
  "query": {
    "shape": {
      "geometry": {
        "shape": {
          "type": "envelope",
          "coordinates": [ [ 1355.0, 5355.0 ], [ 1400.0, 5200.0 ] ]
        },
        "relation": "within"
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining Advanced Sync Rules in Elasticsearch JavaScript
DESCRIPTION: This JavaScript snippet configures rules to index files and folders in a specific directory structure, excluding files by extension. Proper JSON structuring ensures adherence to ownership and path specifications, critical for correct indexing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-onedrive.md#2025-04-21_snippet_8

LANGUAGE: JavaScript
CODE:
```
[
  {
    "owners": ["user1-domain@onmicrosoft.com", "user3-domain@onmicrosoft.com"],
    "skipFilesWithExtensions": [".pdf", ".py"],
    "parentPathPattern": "/drive/root:/hello/**/abc"
  }
]
```

----------------------------------------

TITLE: Defining Geohex to Shape Ingest Pipeline in Elasticsearch
DESCRIPTION: Creates an ingest pipeline named 'geohex2shape' that converts H3 cells to polygons in WKT format.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/ingest-geo-grid-processor.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT _ingest/pipeline/geohex2shape
{
  "description": "translate H3 cell to polygon",
  "processors": [
    {
      "geo_grid": {
        "field": "geocell",
        "tile_type": "geohex",
        "target_format": "wkt"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Using Optional Fields in EQL Queries
DESCRIPTION: Shows how to use the '?' operator to mark fields as optional in EQL queries. This is useful when you're not sure if a field exists in the dataset you're searching.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_8

LANGUAGE: eql
CODE:
```
network where ?user.id != null
```

----------------------------------------

TITLE: Vector Index Creation and Document Indexing
DESCRIPTION: Shows how to create an index with dense vector mapping and index sample documents with vector values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-script-score-query.md#2025-04-21_snippet_11

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "my_dense_vector": {
        "type": "dense_vector",
        "index": false,
        "dims": 3
      },
      "my_byte_dense_vector": {
        "type": "dense_vector",
        "index": false,
        "dims": 3,
        "element_type": "byte"
      },
      "status" : {
        "type" : "keyword"
      }
    }
  }
}
```

----------------------------------------

TITLE: Querying and Rescoring with Weighted Tokens and Pruning - Elasticsearch Console
DESCRIPTION: Illustrates how to use the `weighted_tokens` query in both the initial query and a `rescore` phase. The main query includes pruning with `only_score_pruned_tokens` set to `false`, while the rescore query uses the same tokens and pruning config but sets `only_score_pruned_tokens` to `true` to specifically score the tokens that were pruned in the initial query, helping to mitigate shard-level inconsistencies.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-weighted-tokens-query.md#_snippet_1

LANGUAGE: Console
CODE:
```
GET my-index/_search
{
   "query":{
      "weighted_tokens": {
      "query_expansion_field": {
        "tokens": {"2161": 0.4679, "2621": 0.307, "2782": 0.1299, "2851": 0.1056, "3088": 0.3041, "3376": 0.1038, "3467": 0.4873, "3684": 0.8958, "4380": 0.334, "4542": 0.4636, "4633": 2.2805, "4785": 1.2628, "4860": 1.0655, "5133": 1.0709, "7139": 1.0016, "7224": 0.2486, "7387": 0.0985, "7394": 0.0542, "8915": 0.369, "9156": 2.8947, "10505": 0.2771, "11464": 0.3996, "13525": 0.0088, "14178": 0.8161, "16893": 0.1376, "17851": 1.5348, "19939": 0.6012},
        "pruning_config": {
          "tokens_freq_ratio_threshold": 5,
          "tokens_weight_threshold": 0.4,
          "only_score_pruned_tokens": false
        }
      }
    }
   },
   "rescore": {
      "window_size": 100,
      "query": {
         "rescore_query": {
            "weighted_tokens": {
              "query_expansion_field": {
                "tokens": {"2161": 0.4679, "2621": 0.307, "2782": 0.1299, "2851": 0.1056, "3088": 0.3041, "3376": 0.1038, "3467": 0.4873, "3684": 0.8958, "4380": 0.334, "4542": 0.4636, "4633": 2.2805, "4785": 1.2628, "4860": 1.0655, "5133": 1.0709, "7139": 1.0016, "7224": 0.2486, "7387": 0.0985, "7394": 0.0542, "8915": 0.369, "9156": 2.8947, "10505": 0.2771, "11464": 0.3996, "13525": 0.0088, "14178": 0.8161, "16893": 0.1376, "17851": 1.5348, "19939": 0.6012},
                "pruning_config": {
                  "tokens_freq_ratio_threshold": 5,
                  "tokens_weight_threshold": 0.4,
                  "only_score_pruned_tokens": true
                }
              }
            }
         }
      }
   }
}
```

----------------------------------------

TITLE: Using Derivative Pipeline Aggregation with buckets_path
DESCRIPTION: Example showing how to use a derivative pipeline aggregation embedded inside a date histogram. The buckets_path refers to a sibling metric called 'the_sum'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/pipeline.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /_search
{
  "aggs": {
    "my_date_histo": {
      "date_histogram": {
        "field": "timestamp",
        "calendar_interval": "day"
      },
      "aggs": {
        "the_sum": {
          "sum": { "field": "lemmings" }              <1>
        },
        "the_deriv": {
          "derivative": { "buckets_path": "the_sum" } <2>
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining Swedish Stop Words
DESCRIPTION: Lists Swedish stop words for use in Elasticsearch analysis, providing a link to the Lucene document.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_37

LANGUAGE: markdown
CODE:
```
`_swedish_`
:   [Swedish stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/snowball/swedish_stop.txt)
```

----------------------------------------

TITLE: Configuring Pattern Replace for CamelCase Splitting
DESCRIPTION: Configuration example for splitting camelCase words by inserting spaces between lowercase and uppercase letters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pattern-replace-charfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "standard",
          "char_filter": [
            "my_char_filter"
          ],
          "filter": [
            "lowercase"
          ]
        }
      },
      "char_filter": {
        "my_char_filter": {
          "type": "pattern_replace",
          "pattern": "(?<=\\p{Lower})(?=\\p{Upper})",
          "replacement": " "
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "text": {
        "type": "text",
        "analyzer": "my_analyzer"
      }
    }
  }
}

POST my-index-000001/_analyze
{
  "analyzer": "my_analyzer",
  "text": "The fooBarBaz method"
}
```

----------------------------------------

TITLE: Creating a Custom Analyzer with Pattern Replace Filter in Elasticsearch
DESCRIPTION: This example demonstrates how to create a custom analyzer with a pattern_replace filter that removes currency symbols (£ and €) from tokens. The filter is configured to only replace the first matching symbol in each token.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pattern_replace-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "keyword",
          "filter": [
            "my_pattern_replace_filter"
          ]
        }
      },
      "filter": {
        "my_pattern_replace_filter": {
          "type": "pattern_replace",
          "pattern": "[£|€]",
          "replacement": "",
          "all": false
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Runtime Field Date Histogram Example
DESCRIPTION: Example using runtime fields to adjust dates for promoted sales in date histogram aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-datehistogram-aggregation.md#2025-04-21_snippet_14

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "runtime_mappings": {
    "date.promoted_is_tomorrow": {
      "type": "date",
      "script": """
        long date = doc['date'].value.toInstant().toEpochMilli();
        if (doc['promoted'].value) {
          date += 86400;
        }
        emit(date);
      """
    }
  },
  "aggs": {
    "sales_over_time": {
      "date_histogram": {
        "field": "date.promoted_is_tomorrow",
        "calendar_interval": "1M"
      }
    }
  }
}
```

----------------------------------------

TITLE: Implementing TF-IDF with Scripted Similarity in Elasticsearch
DESCRIPTION: A complete example of setting up a custom TF-IDF similarity model using Elasticsearch's scripted similarity. This defines a custom algorithm in the settings, applies it to a field in the mappings, adds sample documents, and demonstrates searching with explanations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/similarity.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /index
{
  "settings": {
    "number_of_shards": 1,
    "similarity": {
      "scripted_tfidf": {
        "type": "scripted",
        "script": {
          "source": "double tf = Math.sqrt(doc.freq); double idf = Math.log((field.docCount+1.0)/(term.docFreq+1.0)) + 1.0; double norm = 1/Math.sqrt(doc.length); return query.boost * tf * idf * norm;"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "field": {
        "type": "text",
        "similarity": "scripted_tfidf"
      }
    }
  }
}

PUT /index/_doc/1
{
  "field": "foo bar foo"
}

PUT /index/_doc/2
{
  "field": "bar baz"
}

POST /index/_refresh

GET /index/_search?explain=true
{
  "query": {
    "query_string": {
      "query": "foo^1.7",
      "default_field": "field"
    }
  }
}
```

----------------------------------------

TITLE: Execute TRIM Function Example - SQL
DESCRIPTION: Demonstrates a practical usage example of the TRIM SQL function in Elasticsearch. It shows how to remove leading and trailing whitespace characters from a given string expression.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-string.md#_snippet_3

LANGUAGE: sql
CODE:
```
SELECT TRIM('   Elastic   ') AS trimmed;
```

----------------------------------------

TITLE: Performing Term Query with ESQL TERM Function
DESCRIPTION: The TERM function is used in Elasticsearch SQL to perform a Term query on a specified field. It returns true if the provided term matches the row. This example demonstrates how to use TERM to filter books based on the author field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/term.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM books
| WHERE TERM(author, "gabriel")
```

----------------------------------------

TITLE: EVAL Command Syntax in ESQL
DESCRIPTION: The basic syntax for the EVAL command in ESQL. It allows appending new columns with calculated values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/eval.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
EVAL [column1 =] value1[, ..., [columnN =] valueN]
```

----------------------------------------

TITLE: Persian Custom Analyzer Implementation
DESCRIPTION: Shows how to reimplement the Persian analyzer with custom character filters for zero-width spaces and various token filters for normalization and stemming.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_23

LANGUAGE: console
CODE:
```
PUT /persian_example
{
  "settings": {
    "analysis": {
      "char_filter": {
        "zero_width_spaces": {
            "type":       "mapping",
            "mappings": [ "\\u200C=>\\u0020"]
        }
      },
      "filter": {
        "persian_stop": {
          "type":       "stop",
          "stopwords":  "_persian_"
        }
      },
      "analyzer": {
        "rebuilt_persian": {
          "tokenizer":     "standard",
          "char_filter": [ "zero_width_spaces" ],
          "filter": [
            "lowercase",
            "decimal_digit",
            "arabic_normalization",
            "persian_normalization",
            "persian_stop",
            "persian_stem"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Implementing French Analyzer in Elasticsearch
DESCRIPTION: Custom implementation of the built-in French analyzer with elision filter, French stopwords, keyword marker for exclusions from stemming, and light French stemming.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_14

LANGUAGE: console
CODE:
```
PUT /french_example
{
  "settings": {
    "analysis": {
      "filter": {
        "french_elision": {
          "type":         "elision",
          "articles_case": true,
          "articles": [
              "l", "m", "t", "qu", "n", "s",
              "j", "d", "c", "jusqu", "quoiqu",
              "lorsqu", "puisqu"
            ]
        },
        "french_stop": {
          "type":       "stop",
          "stopwords":  "_french_" <1>
        },
        "french_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["Example"] <2>
        },
        "french_stemmer": {
          "type":       "stemmer",
          "language":   "light_french"
        }
      },
      "analyzer": {
        "rebuilt_french": {
          "tokenizer":  "standard",
          "filter": [
            "french_elision",
            "lowercase",
            "french_stop",
            "french_keywords",
            "french_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Using Average Bucket Aggregation in Elasticsearch Search Query
DESCRIPTION: Example of using the average bucket aggregation in an Elasticsearch search query. This snippet demonstrates how to calculate average monthly sales using a date histogram and sum aggregation, followed by the avg_bucket aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-avg-bucket-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST _search
{
  "size": 0,
  "aggs": {
    "sales_per_month": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "sales": {
          "sum": {
            "field": "price"
          }
        }
      }
    },
    "avg_monthly_sales": {
      "avg_bucket": {
        "buckets_path": "sales_per_month>sales",
        "gap_policy": "skip",
        "format": "#,##0.00;(#,##0.00)"
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating API Key for Outlook Connector
DESCRIPTION: This snippet shows how to create an API key for the Outlook connector using the Elasticsearch API. It defines the key name and role descriptors with necessary permissions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-outlook.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /_security/api_key
{
  "name": "connector_name-connector-api-key",
  "role_descriptors": {
    "connector_name-connector-role": {
      "cluster": [
        "monitor",
        "manage_connector"
      ],
      "indices": [
        {
          "names": [
            "index_name",
            ".search-acl-filter-index_name",
            ".elastic-connectors*"
          ],
          "privileges": [
            "all"
          ],
          "allow_restricted_indices": false
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Observing Elasticsearch-PostgreSQL Connector Sync Logs (shell)
DESCRIPTION: This snippet shows example log output from the Elasticsearch-PostgreSQL connector service running in a terminal window. It illustrates the progress of a data sync operation, indicating the number of records fetched and processed (created/updated/deleted) and concluding with a summary of indexed and deleted documents upon completion.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-postgresql-connector-client-tutorial.md#_snippet_4

LANGUAGE: shell
CODE:
```
[FMWK][13:22:26][INFO] Fetcher <create: 499 update: 0 |delete: 0>
[FMWK][13:22:26][INF0] Fetcher <create: 599 update: 0 |delete: 0>
[FMWK][13:22:26][INFO] Fetcher <create: 699 update: 0 |delete: 0>
...
[FMWK][23:22:28][INF0] [oRXQwYYBLhXTs-qYpJ9i] Sync done: 3864 indexed, 0 deleted.
(27 seconds)
```

----------------------------------------

TITLE: Elasticsearch Search Response: Specific Nested Sub-field (JSON)
DESCRIPTION: Shows the response structure for retrieving a specific nested sub-field, confirming that the nested structure is preserved. It shows the `hits` structure, including the `fields` object where the nested `user` field is still returned as an array of objects, each containing only the requested `first` sub-field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_7

LANGUAGE: json
CODE:
```
{
  "took": 2,
  "timed_out": false,
  "_shards": {
    "total": 1,
    "successful": 1,
    "skipped": 0,
    "failed": 0
  },
  "hits": {
    "total": {
      "value": 1,
      "relation": "eq"
    },
    "max_score": 1.0,
    "hits": [{
      "_index": "my-index-000001",
      "_id": "1",
      "_score": 1.0,
      "fields": {
        "user": [{
            "first": ["John"]
          },
          {
            "first": ["Alice"]
          }
        ]
      }
    }]
  }
}
```

----------------------------------------

TITLE: Using minimum_should_match for Single Field
DESCRIPTION: Shows how to use minimum_should_match parameter to require that at least a certain number of terms match. This example requires at least two of the three terms to match in the title field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_19

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "query_string": {
      "fields": [
        "title"
      ],
      "query": "this that thus",
      "minimum_should_match": 2
    }
  }
}
```

----------------------------------------

TITLE: Configuring Custom N-gram Tokenizer in Elasticsearch
DESCRIPTION: This example shows how to create a custom index with a configured N-gram tokenizer. It sets up an analyzer that produces tri-grams and only considers letters and digits as tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-ngram-tokenizer.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
PUT my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "my_tokenizer"
        }
      },
      "tokenizer": {
        "my_tokenizer": {
          "type": "ngram",
          "min_gram": 3,
          "max_gram": 3,
          "token_chars": [
            "letter",
            "digit"
          ]
        }
      }
    }
  }
}

POST my-index-000001/_analyze
{
  "analyzer": "my_analyzer",
  "text": "2 Quick Foxes."
}
```

LANGUAGE: text
CODE:
```
[ Qui, uic, ick, Fox, oxe, xes ]
```

----------------------------------------

TITLE: Executing geohex_grid aggregation in Elasticsearch
DESCRIPTION: Illustrates the geohex_grid aggregation in Elasticsearch to group documents by geohex values. The GET query specifies location field with a precision parameter for the aggregation. The results highlight the document count within each geohex grid bucket.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-grid-query.md#2025-04-21_snippet_5

LANGUAGE: Elasticsearch
CODE:
```
GET /my_locations/_search
{
  "size" : 0,
  "aggs" : {
     "grouped" : {
        "geohex_grid" : {
           "field" : "location",
           "precision" : 1
        }
     }
  }
}
```

LANGUAGE: Elasticsearch
CODE:
```
{
  "took" : 2,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 3,
      "relation" : "eq"
    },
    "max_score" : null,
    "hits" : [ ]
  },
  "aggregations" : {
    "grouped" : {
      "buckets" : [
        {
          "key" : "81197ffffffffff",
          "doc_count" : 2
        },
        {
          "key" : "811fbffffffffff",
          "doc_count" : 1
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Retrieving Document with ML Processing Results
DESCRIPTION: API call to retrieve a document that has been processed by a language identification pipeline. The response includes the original text and the predicted language field added by the ML model.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/repository-gcs/licenses/google-api-services-storage-NOTICE.txt#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
GET my_index/_doc/1
```

----------------------------------------

TITLE: Docker Command to Run Network Drive Connector
DESCRIPTION: This snippet provides the command to run the Docker image for the Elastic network drive connector service. The command mounts the configuration directory to the Docker container and specifies the configuration file to be used.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-network-drive.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
docker run \ 
-v ~/connectors-config:/config \ 
--network "elastic" \ 
--tty \ 
--rm \ 
docker.elastic.co/integrations/elastic-connectors:9.0.0 \ 
/app/bin/elastic-ingest \ 
-c /config/config.yml
```

----------------------------------------

TITLE: Creating Dropbox Connector via API
DESCRIPTION: API call to create a new Dropbox connector in Elasticsearch
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-dropbox.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT _connector/my-dropbox-connector
{
  "index_name": "my-elasticsearch-index",
  "name": "Content synced from Dropbox",
  "service_type": "dropbox"
}
```

----------------------------------------

TITLE: Unsupported Grouping by TIME Data Type Elasticsearch SQL
DESCRIPTION: Example demonstrating a limitation: directly grouping ('GROUP BY') by a field cast to the 'TIME' data type is not supported. This query will fail.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-limitations.md#_snippet_8

LANGUAGE: SQL
CODE:
```
SELECT count(*) FROM test GROUP BY CAST(date_created AS TIME);
```

----------------------------------------

TITLE: Basic Range Aggregation in Elasticsearch
DESCRIPTION: Demonstrates how to use the range aggregation to bucket documents based on specified price ranges.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-range-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET sales/_search
{
  "aggs": {
    "price_ranges": {
      "range": {
        "field": "price",
        "ranges": [
          { "to": 100.0 },
          { "from": 100.0, "to": 200.0 },
          { "from": 200.0 }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Connector API Key with Role Descriptors
DESCRIPTION: API request to generate an API key for the Salesforce connector with specific cluster and index privileges. Requires appropriate user permissions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-salesforce.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /_security/api_key
{
  "name": "connector_name-connector-api-key",
  "role_descriptors": {
    "connector_name-connector-role": {
      "cluster": [
        "monitor",
        "manage_connector"
      ],
      "indices": [
        {
          "names": [
            "index_name",
            ".search-acl-filter-index_name",
            ".elastic-connectors*"
          ],
          "privileges": [
            "all"
          ],
          "allow_restricted_indices": false
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: EQL Sequence Search with Missing Events in Elasticsearch
DESCRIPTION: Shows how to use the '!' operator to match missing events in an EQL sequence search, with a maximum time span of 1 day.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
GET /my-data-stream/_eql/search
{
  "query": """
    sequence with maxspan=1d
      [ process where process.name == "cmd.exe" ]
      ![ process where stringContains(process.command_line, "ocx") ]
      [ file where stringContains(file.name, "scrobj.dll") ]
  """
}
```

----------------------------------------

TITLE: Indexing WKT BBOX in Elasticsearch
DESCRIPTION: Example of indexing a WKT BBOX (bounding box) in Elasticsearch. This represents the same geometry as the Envelope example but using WKT syntax, with parameter order: minLon, maxLon, maxLat, minLat.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-shape.md#2025-04-21_snippet_19

LANGUAGE: json
CODE:
```
POST /example/_doc
{
  "location" : "BBOX (100.0, 102.0, 2.0, 0.0)"
}
```

----------------------------------------

TITLE: Basic Sync Rule Configuration for Document Filtering
DESCRIPTION: Demonstrates configuration of sync rules to include or exclude documents based on field conditions using comparison rules like equals, starts_with, regex, and numeric comparisons
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-sync-rules.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "field": "ID",
  "rule": ">",
  "value": 1000,
  "policy": "exclude"
}
```

LANGUAGE: json
CODE:
```
{
  "field": "state",
  "rule": "regex",
  "value": "[A-Z]{2}",
  "policy": "exclude"
}
```

----------------------------------------

TITLE: Optimized Search with Early Termination in Elasticsearch
DESCRIPTION: Demonstrates efficient search query with early termination by disabling total hits tracking for better performance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/sorting.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET /events/_search
{
  "size": 10,
  "sort": [
      { "timestamp": "desc" }
  ],
  "track_total_hits": false
}
```

----------------------------------------

TITLE: Simulating Script Processor to Set Document Index
DESCRIPTION: This example shows how to use a Painless script in the script processor to set a document's '_index' field. It combines the 'lang' field from the document with a 'dataset' parameter to create the new index name.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/script-processor.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
POST _ingest/pipeline/_simulate
{
  "pipeline": {
    "processors": [
      {
        "script": {
          "description": "Set index based on `lang` field and `dataset` param",
          "lang": "painless",
          "source": """
            ctx['_index'] = ctx['lang'] + '-' + params['dataset'];
          """,
          "params": {
            "dataset": "catalog"
          }
        }
      }
    ]
  },
  "docs": [
    {
      "_index": "generic-index",
      "_source": {
        "lang": "fr"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Date Histogram Aggregation with Offset in Elasticsearch
DESCRIPTION: This example shows how to use the 'offset' parameter in a date histogram aggregation to adjust the start time of each bucket.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-datehistogram-aggregation.md#2025-04-21_snippet_9

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1?refresh
{
  "date": "2015-10-01T05:30:00Z"
}

PUT my-index-000001/_doc/2?refresh
{
  "date": "2015-10-01T06:30:00Z"
}

GET my-index-000001/_search?size=0
{
  "aggs": {
    "by_day": {
      "date_histogram": {
        "field":     "date",
        "calendar_interval":  "day",
        "offset":    "+6h"
      }
    }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "by_day": {
      "buckets": [
        {
          "key_as_string": "2015-09-30T06:00:00.000Z",
          "key": 1443592800000,
          "doc_count": 1
        },
        {
          "key_as_string": "2015-10-01T06:00:00.000Z",
          "key": 1443679200000,
          "doc_count": 1
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Analyzing Text with Polish Stop Token Filter in Elasticsearch
DESCRIPTION: This snippet shows how to use the _analyze API to test the custom analyzer with the polish_stop filter. It applies the analyzer to a Polish sentence to demonstrate stopword removal.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-polish-stop.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET polish_stop_example/_analyze
{
  "analyzer": "analyzer_with_stop",
  "text": "Gdzie kucharek sześć, tam nie ma co jeść."
}
```

----------------------------------------

TITLE: Script Score with Unsigned Long as Float Elasticsearch Console
DESCRIPTION: An example using a script score query where an `unsigned_long` field's value is accessed as a `BigInteger` and then converted to a `float` using `floatValue()`. This is useful when script logic requires floating-point calculations on large unsigned values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/unsigned-long.md#_snippet_7

LANGUAGE: Console
CODE:
```
GET /my_index/_search
{
    "query": {
        "script_score": {
          "query": {"match_all": {}},
          "script": {
            "source": "field('my_counter').asBigInteger(BigInteger.ZERO).floatValue()"
          }
        }
    }
}
```

----------------------------------------

TITLE: Filtering Aggregations with WHERE in ESQL STATS
DESCRIPTION: Demonstrates how to use the WHERE clause to filter rows for specific aggregations in the STATS command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/stats-by.md#2025-04-21_snippet_4

LANGUAGE: esql
CODE:
```
FROM employees
STATS
  avg_salary = AVG(salary) WHERE gender = "F",
  min_salary = MIN(salary),
  max_salary = MAX(salary)
BY department;
```

----------------------------------------

TITLE: Add secure setting(s) to Elasticsearch keystore with prompts
DESCRIPTION: Adds one or multiple secure settings to the keystore. Prompts for each setting's value and the keystore password if protected; use `--stdin` for input from standard input.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/elasticsearch-keystore.md#_snippet_3

LANGUAGE: Shell
CODE:
```
bin/elasticsearch-keystore add the.setting.name.to.set
```

----------------------------------------

TITLE: Using Redact Processor with IP Pattern
DESCRIPTION: Example showing how to use the Redact processor to obscure an IP address in a message field using the built-in IP Grok pattern.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/redact-processor.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _ingest/pipeline/_simulate
{
  "pipeline": {
    "description" : "Hide my IP",
    "processors": [
      {
        "redact": {
          "field": "message",
          "patterns": ["%{IP:client}"]
        }
      }
    ]
  },
  "docs":[
    {
      "_source": {
        "message": "55.3.244.1 GET /index.html 15824 0.043"
      }
    }
  ]
}
```

----------------------------------------

TITLE: ENRICH with Custom Match Field
DESCRIPTION: Example demonstrating ENRICH usage with a custom match field specified using the ON clause.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/enrich.md#2025-04-21_snippet_2

LANGUAGE: esql
CODE:
```
FROM languages.csv | ENRICH languages_policy ON lang
```

----------------------------------------

TITLE: Analyzing Text with Pattern Analyzer in Elasticsearch
DESCRIPTION: This snippet demonstrates how to analyze text using the `pattern` analyzer in Elasticsearch. It sends a POST request to the `_analyze` endpoint, specifying the analyzer as `pattern` and providing the text to be analyzed. The response will contain the terms generated by the analyzer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pattern-analyzer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _analyze
{
  "analyzer": "pattern",
  "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
}
```

----------------------------------------

TITLE: EQL Sequence Query with Until
DESCRIPTION: Example query searching for sequences containing event A followed by event B, with C as expiration event.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_18

LANGUAGE: eql
CODE:
```
sequence by ID
  A
  B
until C
```

----------------------------------------

TITLE: Converting String to Uppercase using TO_UPPER in ESQL
DESCRIPTION: This snippet demonstrates how to use the TO_UPPER function in ESQL to convert a string to uppercase. It creates a row with a 'message' field and then uses EVAL to create a new field 'message_upper' with the uppercase version of the message.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_upper.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW message = "Some Text"
| EVAL message_upper = TO_UPPER(message)
```

----------------------------------------

TITLE: Parsing Log Data with DISSECT in ESQL
DESCRIPTION: This ESQL query demonstrates how to use the DISSECT function to parse a log entry, extract specific fields (date, message, and IP address), and convert the date string to a datetime object. It also showcases the use of KEEP for selecting specific columns and EVAL for data transformation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/dissectWithToDatetime.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = "2023-01-23T12:15:00.000Z - some text - 127.0.0.1"
| DISSECT a """%{date} - %{msg} - %{ip}"""
| KEEP date, msg, ip
| EVAL date = TO_DATETIME(date)
```

----------------------------------------

TITLE: Configuring Custom Predicate Token Filter in Index Settings (Elasticsearch Console)
DESCRIPTION: This snippet provides an example of how to create a custom analyzer within index settings. It defines a custom `predicate_token_filter` named `my_script_filter` that uses a Painless script to retain only tokens whose type contains "ALPHANUM". This demonstrates persistent filter configuration for an index.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-predicatefilter-tokenfilter.md#_snippet_3

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "standard",
          "filter": [
            "my_script_filter"
          ]
        }
      },
      "filter": {
        "my_script_filter": {
          "type": "predicate_token_filter",
          "script": {
            "source": """
              token.type.contains("ALPHANUM")
            """
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Create Index with Bit Vector Mapping (Elasticsearch Console)
DESCRIPTION: Demonstrates how to create an Elasticsearch index named `my-bit-vectors` with a `dense_vector` field named `my_vector` configured for bit vectors. The `dims` parameter specifies the number of bits, which must be a multiple of 8.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/dense-vector.md#_snippet_6

LANGUAGE: json
CODE:
```
PUT my-bit-vectors
{
  "mappings": {
    "properties": {
      "my_vector": {
        "type": "dense_vector",
        "dims": 40,
        "element_type": "bit"
      }
    }
  }
}
```

----------------------------------------

TITLE: List settings stored in the Elasticsearch keystore
DESCRIPTION: Displays all the current secure settings stored in the keystore, prompting for a password if the keystore is password protected. Useful for auditing or verification.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/elasticsearch-keystore.md#_snippet_2

LANGUAGE: Shell
CODE:
```
bin/elasticsearch-keystore list
```

----------------------------------------

TITLE: Term Query on Unsigned Long Field Elasticsearch Console
DESCRIPTION: Demonstrates performing a term query on an `unsigned_long` field using the Elasticsearch search API. Term queries support both numeric and string forms of the integer value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/unsigned-long.md#_snippet_2

LANGUAGE: Console
CODE:
```
GET /my_index/_search
{
    "query": {
        "term" : {
            "my_counter" : 18446744073709551615
        }
    }
}
```

----------------------------------------

TITLE: Complex Inference Aggregation Example with Web Log Analysis
DESCRIPTION: Shows a complete example of using inference aggregation to analyze web logs, including composite aggregation by client IP and various metrics calculations for identifying suspicious IPs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-inference-bucket-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET kibana_sample_data_logs/_search
{
  "size": 0,
  "aggs": {
    "client_ip": {
      "composite": {
        "sources": [
          {
            "client_ip": {
              "terms": {
                "field": "clientip"
              }
            }
          }
        ]
      },
      "aggs": {
        "url_dc": {
          "cardinality": {
            "field": "url.keyword"
          }
        },
        "bytes_sum": {
          "sum": {
            "field": "bytes"
          }
        },
        "geo_src_dc": {
          "cardinality": {
            "field": "geo.src"
          }
        },
        "geo_dest_dc": {
          "cardinality": {
            "field": "geo.dest"
          }
        },
        "responses_total": {
          "value_count": {
            "field": "timestamp"
          }
        },
        "success": {
          "filter": {
            "term": {
              "response": "200"
            }
          }
        },
        "error404": {
          "filter": {
            "term": {
              "response": "404"
            }
          }
        },
        "error503": {
          "filter": {
            "term": {
              "response": "503"
            }
          }
        },
        "malicious_client_ip": {
          "inference": {
            "model_id": "malicious_clients_model",
            "buckets_path": {
              "response_count": "responses_total",
              "url_dc": "url_dc",
              "bytes_sum": "bytes_sum",
              "geo_src_dc": "geo_src_dc",
              "geo_dest_dc": "geo_dest_dc",
              "success": "success._count",
              "error404": "error404._count",
              "error503": "error503._count"
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Implementing Custom Token Filter in Java
DESCRIPTION: This Java class implements a custom token filter that only accepts 'hello' and 'world' tokens. It extends Lucene's FilteringTokenFilter class.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/extend/example-text-analysis-plugin.md#2025-04-21_snippet_1

LANGUAGE: java
CODE:
```
package org.example;

import org.apache.lucene.analysis.FilteringTokenFilter;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;

import java.util.Arrays;

public class HelloWorldTokenFilter extends FilteringTokenFilter {
    private final CharTermAttribute term = addAttribute(CharTermAttribute.class);

    public HelloWorldTokenFilter(TokenStream input) {
        super(input);
    }

    @Override
    public boolean accept() {
        if (term.length() != 5) return false;
        return Arrays.equals(term.buffer(), 0, 4, "hello".toCharArray(), 0, 4)
                || Arrays.equals(term.buffer(), 0, 4, "world".toCharArray(), 0, 4);
    }
}
```

----------------------------------------

TITLE: Retrieving Stored Fields in Elasticsearch Console
DESCRIPTION: This console command demonstrates how to use the `stored_fields` parameter to fetch values for fields that have explicitly been configured with `"store": true` in the index mapping. This method bypasses loading and parsing the `_source` but requires fields to be stored separately.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_19

LANGUAGE: console
CODE:
```
GET /_search
{
  "stored_fields" : ["user", "postDate"],
  "query" : {
    "term" : { "user" : "kimchy" }
  }
}
```

----------------------------------------

TITLE: Querying and Transforming Employee Data with ESQL
DESCRIPTION: This ESQL query sorts employees by emp_no, selects specific columns (first_name, last_name, height), and converts the height from meters to feet. It demonstrates the use of SORT, KEEP, and EVAL clauses in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/eval.csv-spec/evalUnnamedColumn.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| SORT emp_no
| KEEP first_name, last_name, height
| EVAL height * 3.281
```

----------------------------------------

TITLE: Invalid Recursive Copy_to Configuration in Elasticsearch
DESCRIPTION: This example shows an incorrect configuration where copy_to is used recursively through intermediary fields. Elasticsearch does not support recursive copying through intermediate fields, so field_1 values won't be copied to field_3.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/copy-to.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT bad_example_index
{
  "mappings": {
    "properties": {
      "field_1": {
        "type": "text",
        "copy_to": "field_2"
      },
      "field_2": {
        "type": "text",
        "copy_to": "field_3"
      },
      "field_3": {
        "type": "text"
      }
    }
  }
}
```

----------------------------------------

TITLE: Create Index API with custom analyzer using word_delimiter
DESCRIPTION: This example demonstrates how to configure a custom analyzer using the `word_delimiter` filter in the Elasticsearch Create Index API. It defines a custom analyzer named `my_analyzer` that uses the `keyword` tokenizer and the `word_delimiter` filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-word-delimiter-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "keyword",
          "filter": [ "word_delimiter" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Calculating Multiple Values with STATS in ESQL
DESCRIPTION: Illustrates how to calculate multiple aggregated values using the STATS command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/stats-by.md#2025-04-21_snippet_3

LANGUAGE: esql
CODE:
```
FROM employees
STATS
  avg_salary = AVG(salary),
  min_salary = MIN(salary),
  max_salary = MAX(salary)
BY department;
```

----------------------------------------

TITLE: Implementing Field Value Factor with Script Score
DESCRIPTION: Shows how to implement field_value_factor using a script with Math.log10 calculation and factor parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-script-score-query.md#2025-04-21_snippet_9

LANGUAGE: js
CODE:
```
"script" : {
    "source" : "Math.log10(doc['field'].value * params.factor)",
    "params" : {
        "factor" : 5
    }
}
```

----------------------------------------

TITLE: Creating Elasticsearch Connector with API
DESCRIPTION: Elasticsearch API call to create a PostgreSQL connector instance. This specifies the connector name, target index, and service type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/api-tutorial.md#2025-04-21_snippet_9

LANGUAGE: json
CODE:
```
PUT _connector/my-connector-id
{
  "name": "Music catalog",
  "index_name":  "music",
  "service_type": "postgresql"
}
```

----------------------------------------

TITLE: Executing Has Parent Query in Elasticsearch
DESCRIPTION: Example of a has_parent query that retrieves child documents where the parent document matches a specific term query
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-has-parent-query.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
GET /my-index-000001/_search
{
  "query": {
    "has_parent": {
      "parent_type": "parent",
      "query": {
        "term": {
          "tag": {
            "value": "Elasticsearch"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Elasticsearch Pod Metric Document
DESCRIPTION: This JSON snippet represents a document containing pod metrics from Kubernetes, designed to be indexed into Elasticsearch. It includes a timestamp, metricset (pod), Kubernetes pod details (name, UID), network statistics (tx, rx), and CPU usage (limit, nanocores, node). No specific dependencies are needed beyond proper configuration of data collection and Elasticsearch indexing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/esql/qa/server/single-node/src/javaRestTest/resources/tsdb-bulk-request.txt#2025-04-21_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "@timestamp": "2021-04-29T17:29:12.470Z",
  "metricset": "pod",
  "k8s": {
    "pod": {
      "name": "cat",
      "uid": "947e4ced-1786-4e53-9e0c-5c447e959507",
      "network": {
        "tx": 2001818691,
        "rx": 802133794
      },
      "cpu": {
        "limit": 0.3787411612903226,
        "nanocores": 35222928,
        "node": 0.048845732
      }
    }
  }
}
```

----------------------------------------

TITLE: Reset Elastic User Password - Auto-generated
DESCRIPTION: Example showing how to reset the elastic user's password to an auto-generated value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/reset-password.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
bin/elasticsearch-reset-password -u elastic
```

----------------------------------------

TITLE: Querying and Sorting Employee Data with ESQL
DESCRIPTION: This ESQL query selects specific columns from the 'employees' table, keeps only certain fields, and sorts the results by first name in ascending order with nulls first. It demonstrates the use of FROM, KEEP, and SORT clauses in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/sortNullsFirst.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP first_name, last_name, height
| SORT first_name ASC NULLS FIRST
```

----------------------------------------

TITLE: Exclude Node by IP using Cluster Settings (Console)
DESCRIPTION: This snippet demonstrates how to exclude a specific node from shard allocation using its IP address via the cluster settings API. By setting `cluster.routing.allocation.exclude._ip`, Elasticsearch will not allocate new shards to the node with the specified IP. This is commonly used during node decommissioning to migrate shards off the node before shutting it down.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/cluster-level-shard-allocation-routing-settings.md#_snippet_1

LANGUAGE: console
CODE:
```
PUT _cluster/settings
{
  "persistent" : {
    "cluster.routing.allocation.exclude._ip" : "10.0.0.1"
  }
}
```

----------------------------------------

TITLE: Filtering with IS NOT NULL and Counting in ESQL
DESCRIPTION: This ESQL query filters the employees dataset to include only records where is_rehired is not null, then counts the resulting employee numbers. The query returns a count of 84 matching records.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/examples/is_not_null.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| WHERE is_rehired IS NOT NULL
| STATS COUNT(emp_no)
```

----------------------------------------

TITLE: Search and Highlight on comment Field without matched_fields (Unified) - Elasticsearch DSL
DESCRIPTION: Performs a search on `index1` using a `query_string` targeting both `comment` and `comment.english` fields. Highlighting is requested only for the `comment` field using the default `unified` highlighter without specifying `matched_fields`, showing the base highlighting behavior.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_11

LANGUAGE: Elasticsearch DSL
CODE:
```
GET index1/_search
{
  "query": {
    "query_string": {
      "query": "running with scissors",
      "fields": ["comment", "comment.english"]
    }
  },
  "highlight": {
    "order": "score",
    "fields": {
      "comment": {}
    }
  }
}
```

----------------------------------------

TITLE: ENRICH with Field Renaming
DESCRIPTION: Example demonstrating ENRICH usage with field renaming capabilities using the WITH clause.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/enrich.md#2025-04-21_snippet_4

LANGUAGE: esql
CODE:
```
FROM languages.csv | ENRICH languages_policy WITH name=language_name
```

----------------------------------------

TITLE: Case-Insensitive Wildcard Matching in Elasticsearch EQL
DESCRIPTION: Demonstrates the use of 'like~' for case-insensitive wildcard matching in Elasticsearch EQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_33

LANGUAGE: eql
CODE:
```
process_name like~ "cmd*.exe"
```

----------------------------------------

TITLE: Accessing Array Fields with Dot Notation
DESCRIPTION: Example showing how to access and copy specific array elements using dot notation in the Set processor.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/set-processor.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /_ingest/pipeline/_simulate
{
  "pipeline": {
    "processors": [
      {
        "set": {
          "field": "my_field",
          "value": "{{{input_field.1}}}"
        }
      }
    ]
  },
  "docs": [
    {
      "_index": "index",
      "_id": "id",
      "_source": {
        "input_field": [
          "Ubuntu",
          "Windows",
          "Ventura"
        ]
      }
    }
  ]
}
```

----------------------------------------

TITLE: Basic Max Aggregation Query in Elasticsearch
DESCRIPTION: Demonstrates how to compute the maximum price value across all documents in a sales index using the max aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-max-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "max_price": { "max": { "field": "price" } }
  }
}
```

----------------------------------------

TITLE: Cron Expression Examples - Specific Day Triggers - TXT
DESCRIPTION: These examples illustrate triggering cron schedules on specific days, including a fixed date (April 1st), specific day of week in a month (Wednesday in April), a specific day of the month (15th), the nearest weekday to a date (15W), and the nth day of the week in a month (first Friday, 6#1).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/api-conventions.md#_snippet_4

LANGUAGE: txt
CODE:
```
0 1 4 1 4 ?
0 0,30 9 ? 4 WED
0 5 9 15 * ?
0 5 9 15W * ?
0 5 9 ? * 6#1
```

----------------------------------------

TITLE: With Runs Statement Example
DESCRIPTION: Demonstrates using 'with runs' statement to run same event criteria multiple times in sequence.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_21

LANGUAGE: eql
CODE:
```
sequence
  [ process where event.type == "creation" ]
  [ library where process.name == "regsvr32.exe" ] with runs=3
  [ registry where true ]
```

----------------------------------------

TITLE: Show Tables with SQL LIKE Pattern SQL
DESCRIPTION: Demonstrates using the standard SQL LIKE clause with SHOW TABLES. The pattern 'emp%' matches all indices/tables whose names start with 'emp'. The '%' wildcard matches zero or more characters. Patterns used with LIKE must be enclosed in single quotes (').
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-index-patterns.md#_snippet_3

LANGUAGE: SQL
CODE:
```
SHOW TABLES LIKE 'emp%';
```

----------------------------------------

TITLE: Clearing a Single Scroll Context in Elasticsearch
DESCRIPTION: This snippet demonstrates how to clear a single scroll context using the clear-scroll API. It's important to clear scroll contexts when they are no longer needed to free up resources.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/paginate-search-results.md#2025-04-21_snippet_11

LANGUAGE: console
CODE:
```
DELETE /_search/scroll
{
  "scroll_id" : "DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAD4WYm9laVYtZndUQlNsdDcwakFMNjU1QQ=="
}
```

----------------------------------------

TITLE: SQL CONVERT Function Syntax
DESCRIPTION: Shows the general syntax for the Elasticsearch SQL `CONVERT` function. It takes an expression and a target data type. If the expression is null, the function returns null. It works similarly to `CAST` but also supports ODBC data types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-type-conversion.md#_snippet_4

LANGUAGE: SQL
CODE:
```
CONVERT(
 expression, <1>
 data_type) <2>
```

----------------------------------------

TITLE: Running Salesforce Connector Docker Image
DESCRIPTION: Docker command to run the Elastic connectors service with the configuration file, using volume mapping and network settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-salesforce.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Mixed Aggregations with Optional Filtering in ESQL
DESCRIPTION: Shows how to mix aggregations with and without filters, and optional grouping in the STATS command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/stats-by.md#2025-04-21_snippet_5

LANGUAGE: esql
CODE:
```
FROM employees
STATS
  avg_salary = AVG(salary) WHERE gender = "F",
  min_salary = MIN(salary),
  max_salary = MAX(salary);
```

----------------------------------------

TITLE: Configuring ICU Tokenizer with Custom Rules in Elasticsearch
DESCRIPTION: This example demonstrates how to create an Elasticsearch index with a custom ICU tokenizer using a user-defined rule file. It specifies the rule file location and creates a custom analyzer using this tokenizer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-icu-tokenizer.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
PUT icu_sample
{
  "settings": {
    "index": {
      "analysis": {
        "tokenizer": {
          "icu_user_file": {
            "type": "icu_tokenizer",
            "rule_files": "Latn:KeywordTokenizer.rbbi"
          }
        },
        "analyzer": {
          "my_analyzer": {
            "type": "custom",
            "tokenizer": "icu_user_file"
          }
        }
      }
    }
  }
}

GET icu_sample/_analyze
{
  "analyzer": "my_analyzer",
  "text": "Elasticsearch. Wow!"
}
```

----------------------------------------

TITLE: Finding First First Name by Gender (FIRST) with Grouping
DESCRIPTION: This query groups results by 'gender' and uses FIRST to find the first first name within each gender group, sorted by 'gender'. No explicit ordering field is provided for FIRST itself.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_15

LANGUAGE: SQL
CODE:
```
SELECT gender, FIRST(first_name) FROM emp GROUP BY gender ORDER BY gender;
```

----------------------------------------

TITLE: Downloading Configuration File for Connector
DESCRIPTION: Shell command to download the sample configuration file for Elastic connectors from the GitHub repository.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-salesforce.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
curl https://raw.githubusercontent.com/elastic/connectors/main/config.yml.example --output ~/connectors-config/config.yml
```

----------------------------------------

TITLE: Analyzing Text with Kuromoji Katakana Readingform in Elasticsearch
DESCRIPTION: This snippet shows how to use the _analyze API to test the katakana_analyzer on the Japanese text "寿司". It demonstrates the conversion of kanji to katakana reading form.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-readingform.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET kuromoji_sample/_analyze
{
  "analyzer": "katakana_analyzer",
  "text": "寿司"
}
```

----------------------------------------

TITLE: Running Bulk Indexing Benchmark with Gradle
DESCRIPTION: Gradle command to execute a bulk indexing benchmark on Elasticsearch. It specifies client type, benchmark type, target host, data file, index name, type name, document count, and bulk size.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/client/benchmark/README.md#2025-04-21_snippet_2

LANGUAGE: gradle
CODE:
```
gradlew -p client/benchmark run --args ' rest bulk localhost build/documents-2.json geonames type 8647880 5000'
```

----------------------------------------

TITLE: Implementing Greater Than Operator in Painless
DESCRIPTION: Demonstrates the greater than operator '>' with various numeric types and def type. Includes type promotion and implicit casting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_1

LANGUAGE: painless
CODE:
```
boolean x = 5 > 4;
double y = 6.0;
x = 6 > y;
```

LANGUAGE: painless
CODE:
```
int x = 5;
def y = 7.0;
def z = y > 6.5;
def a = x > y;
```

----------------------------------------

TITLE: Configure Sync Rules with Filtering (JSON)
DESCRIPTION: Illustrates how to apply filtering using a SQL WHERE clause within the advanced sync rules JSON. This snippet fetches data only for employees where 'emp_id' is greater than 5.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-postgresql.md#_snippet_7

LANGUAGE: json
CODE:
```
[
  {
    "tables": ["employee"],
    "query": "SELECT * FROM employee WHERE emp_id > 5"
  }
]
```

----------------------------------------

TITLE: Regular Expression Matching in Elasticsearch EQL
DESCRIPTION: Shows how to use regex and regex~ for regular expression matching in Elasticsearch EQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_34

LANGUAGE: eql
CODE:
```
process_name regex "cmd.*\.exe"
```

----------------------------------------

TITLE: Creating API Key for Connector via API
DESCRIPTION: Shows how to create an API key for a connector using the Elasticsearch Create API Key API. Defines the name, role descriptors, cluster privileges, and index privileges required for the connector.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-ms-sql.md#_snippet_1

LANGUAGE: console
CODE:
```
POST /_security/api_key
{
  "name": "connector_name-connector-api-key",
  "role_descriptors": {
    "connector_name-connector-role": {
      "cluster": [
        "monitor",
        "manage_connector"
      ],
      "indices": [
        {
          "names": [
            "index_name",
            ".search-acl-filter-index_name",
            ".elastic-connectors*"
          ],
          "privileges": [
            "all"
          ],
          "allow_restricted_indices": false
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Customizing Unique Token Filter in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create a custom unique filter with the 'only_on_same_position' parameter set to true, and use it in a custom analyzer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-unique-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT letter_unique_pos_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "letter_unique_pos": {
          "tokenizer": "letter",
          "filter": [ "unique_pos" ]
        }
      },
      "filter": {
        "unique_pos": {
          "type": "unique",
          "only_on_same_position": true
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Custom Script Moving Function Example
DESCRIPTION: Example showing how to use a custom script in a moving function aggregation to return the first value from the window.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-movfn-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /_search
{
  "size": 0,
  "aggs": {
    "my_date_histo": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "1M"
      },
      "aggs": {
        "the_sum": {
          "sum": { "field": "price" }
        },
        "the_movavg": {
          "moving_fn": {
            "buckets_path": "the_sum",
            "window": 10,
            "script": "return values.length > 0 ? values[0] : Double.NaN"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Basic Text Expansion Query Structure in Elasticsearch
DESCRIPTION: Shows the basic structure of a text expansion query in Elasticsearch. The query requires a sparse vector field, model ID to produce token weights, and the query text to be processed by the model.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-text-expansion-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET _search
{
   "query":{
      "text_expansion":{
         "<sparse_vector_field>":{
            "model_id":"the model to produce the token weights",
            "model_text":"the query string"
         }
      }
   }
}
```

----------------------------------------

TITLE: Custom Pattern Definitions in Grok Processor
DESCRIPTION: Demonstrates how to define custom patterns for the Grok processor using pattern_definitions option.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/grok-processor.md#2025-04-21_snippet_1

LANGUAGE: js
CODE:
```
{
  "description" : "...",
  "processors": [
    {
      "grok": {
        "field": "message",
        "patterns": ["my %{FAVORITE_DOG:dog} is colored %{RGB:color}"],
        "pattern_definitions" : {
          "FAVORITE_DOG" : "beagle",
          "RGB" : "RED|GREEN|BLUE"
        }
      }
    }
  ]
}
```

----------------------------------------

TITLE: Sorting Employee Data with ESQL
DESCRIPTION: ESQL query that selects specific columns (first_name, last_name, height) from an employees table and sorts the results by height. The query demonstrates the use of KEEP for column selection and SORT for ordering results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/sort.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP first_name, last_name, height
| SORT height
```

----------------------------------------

TITLE: Indexing Documents into index2 with comment Field for FVH - Elasticsearch DSL
DESCRIPTION: Bulk indexes the same two documents used in the `index1` example into `index2`. This provides the necessary data indexed with term vectors for demonstrating highlighting using the Fast Vector Highlighter (FVH).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_14

LANGUAGE: Elasticsearch DSL
CODE:
```
PUT index2/_bulk?refresh=true
{"index": {"_id": "doc1" }}
{"comment": "run with scissors"}
{ "index" : {"_id": "doc2"} }
{"comment": "running with scissors"}
```

----------------------------------------

TITLE: Constant Score Query Example in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the `constant_score` query in Elasticsearch to wrap a filter query and assign a constant score to matching documents. It uses the `filter` parameter to specify the query and the `boost` parameter to set the constant score. The query searches for documents where the `user.id` field is equal to "kimchy" and assigns a relevance score of 1.2 to each matching document.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-constant-score-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "constant_score": {
      "filter": {
        "term": { "user.id": "kimchy" }
      },
      "boost": 1.2
    }
  }
}
```

----------------------------------------

TITLE: Running Extraction Service in Docker (Non-Dockerized Connector)
DESCRIPTION: This command runs the extraction service Docker container, mounting a local directory as a shared volume. The local and container filepaths must be identical for non-dockerized self-managed connectors to accurately provide file pointers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-content-extraction.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
$ docker run \
  -p 8090:8090 \
  -it \
  -v /app/files:/app/files \
  --name extraction-service \
  docker.elastic.co/integrations/data-extraction-service:$EXTRACTION_SERVICE_VERSION
```

----------------------------------------

TITLE: Running a Basic EQL Search in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the EQL search API to run a basic EQL query. It searches for processes where the process name is 'regsvr32.exe'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /my-data-stream/_eql/search
{
  "query": """
    process where process.name == "regsvr32.exe"
  """
}
```

----------------------------------------

TITLE: Check DLL Loading with EQL
DESCRIPTION: EQL query to detect when regsvr32.exe loads the scrobj.dll library, a common indicator of Squiblydoo attacks.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-ex-threat-detection.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET /my-data-stream/_eql/search
{
  "query": """
    library where process.name == "regsvr32.exe" and dll.name == "scrobj.dll"
  """
}
```

----------------------------------------

TITLE: Update Dense Vector Mapping to int4_hnsw (Elasticsearch Console)
DESCRIPTION: Demonstrates how to use the Update Mapping API to change the `index_options.type` of an existing `dense_vector` field from `flat` to `int4_hnsw`. This affects how subsequently indexed vectors are stored and searched.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/dense-vector.md#_snippet_11

LANGUAGE: json
CODE:
```
PUT /my-index-000001/_mapping
{
    "properties": {
        "text_embedding": {
            "type": "dense_vector",
            "dims": 384,
            "index_options": {
                "type": "int4_hnsw"
            }
        }
    }
}
```

----------------------------------------

TITLE: Creating Second CA PEM - ca2 with Elasticsearch Certutil
DESCRIPTION: This snippet creates the second CA PEM file named 'ca2' using the Elasticsearch certutil command, similar to the first CA with a validity of 9999 days.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/libs/ssl-config/src/test/resources/certs/README.txt#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
# 2. Create first CA PEM ("ca2")
elasticsearch-certutil ca --pem --out ca2.zip --days 9999 --ca-dn "CN=Test CA 2"
unzip ca2.zip 
mv ca ca2
```

----------------------------------------

TITLE: Adding Index Requests to Elasticsearch Bulk Request
DESCRIPTION: Method for adding an index request to the bulk operation. Each index request represents a document to be added to Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/repository-gcs/licenses/google-http-NOTICE.txt#2025-04-21_snippet_3

LANGUAGE: java
CODE:
```
public BulkRequest add(IndexRequest request) {
    request.beforeLocalFork();
    requests.add(request);
    return this;
}
```

----------------------------------------

TITLE: Creating a Regex Pattern in Painless
DESCRIPTION: Demonstrates how to create a simple regex pattern constant in Painless. This pattern matches any vowel character.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-regexes.md#2025-04-21_snippet_0

LANGUAGE: painless
CODE:
```
Pattern p = /[aeiou]/
```

----------------------------------------

TITLE: Indexing a Point Shape in WKT Format
DESCRIPTION: This example demonstrates indexing a point shape using Well-Known Text (WKT) format. The point is specified with x,y coordinates in a string format.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/shape.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /example/_doc
{
  "location" : "POINT (-377.03653 389.897676)"
}
```

----------------------------------------

TITLE: Indexing Geo-shapes and Computing Global Geo-centroid Aggregation (Elasticsearch Console)
DESCRIPTION: This snippet demonstrates using the geo_centroid aggregation on a geo_shape field. It shows how to create an index with a geo_shape mapping, index documents containing different geometry types (Point and Polygon), and then run a geo_centroid aggregation on the 'geometry' field. The centroid calculation prioritizes the highest-dimensional shape type in the bucket.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-geocentroid-aggregation.md#_snippet_2

LANGUAGE: Elasticsearch Console
CODE:
```
PUT /places
{
  "mappings": {
    "properties": {
      "geometry": {
        "type": "geo_shape"
      }
    }
  }
}

POST /places/_bulk?refresh
{"index":{"_id":1}}
{"name": "NEMO Science Museum", "geometry": "POINT(4.912350 52.374081)" }
{"index":{"_id":2}}
{"name": "Sportpark De Weeren", "geometry": { "type": "Polygon", "coordinates": [ [ [ 4.965305328369141, 52.39347642069457 ], [ 4.966979026794433, 52.391721758934835 ], [ 4.969425201416015, 52.39238958618537 ], [ 4.967944622039794, 52.39420969150824 ], [ 4.965305328369141, 52.39347642069457 ] ] ] } }

POST /places/_search?size=0
{
  "aggs": {
    "centroid": {
      "geo_centroid": {
        "field": "geometry"
      }
    }
  }
}
```

----------------------------------------

TITLE: Working with Arrays in Painless
DESCRIPTION: Examples of declaring, initializing, and assigning array variables in Painless, including multi-dimensional arrays.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-variables.md#2025-04-21_snippet_2

LANGUAGE: painless
CODE:
```
int[] ia1;
ia1 = new int[2];
ia1[0] = 1;
int[] ib1 = ia1;
int[][] ic2 = new int[2][5];
ic2[1][3] = 2;
ic2[0] = ia1;
```

----------------------------------------

TITLE: Analyzing Thai Text with Elasticsearch Thai Tokenizer
DESCRIPTION: This snippet demonstrates how to use the Thai tokenizer in Elasticsearch to segment Thai text into words. It sends a POST request to the _analyze endpoint with the tokenizer set to 'thai' and provides a sample Thai text for analysis.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-thai-tokenizer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _analyze
{
  "tokenizer": "thai",
  "text": "การที่ได้ต้องแสดงว่างานดี"
}
```

----------------------------------------

TITLE: Subqueries with Filtering and Ordering
DESCRIPTION: Subqueries combining WHERE clauses, GROUP BY, and ORDER BY operations
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_subqueries_tests.txt#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
SELECT g as h FROM (
    SELECT date AS f, int AS g FROM test
) WHERE h IS NOT NULL
GROUP BY h
ORDER BY h ASC;
```

----------------------------------------

TITLE: Basic Sparse Vector Query with NLP Model
DESCRIPTION: Demonstrates a basic sparse vector query using an inference model to convert query text into token-weight pairs for semantic search
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-sparse-vector-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET _search
{
   "query":{
      "sparse_vector": {
        "field": "ml.tokens",
        "inference_id": "the inference ID to produce the token weights",
        "query": "the query string"
      }
   }
}
```

----------------------------------------

TITLE: Configuring Scaling Thread Pool in Elasticsearch
DESCRIPTION: Configuration example for a scaling thread pool type with core size, max size, and keep alive parameters
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/thread-pool-settings.md#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
thread_pool:
    warmer:
        core: 1
        max: 8
        keep_alive: 2m
```

----------------------------------------

TITLE: Executing Significant Text Aggregation with Source Fields - Console
DESCRIPTION: This snippet shows how to use the `source_fields` parameter when the indexed field (`custom_all`) is derived from multiple original source fields (`content`, `title`). The aggregation runs on the `custom_all` field, but the analysis considers terms originating from the specified `source_fields`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-significanttext-aggregation.md#_snippet_7

LANGUAGE: Console
CODE:
```
GET news/_search
{
  "query": {
    "match": {
      "custom_all": "elasticsearch"
    }
  },
  "aggs": {
    "tags": {
      "significant_text": {
        "field": "custom_all",
        "source_fields": [ "content", "title" ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Checking String Containment (EQL)
DESCRIPTION: Demonstrates the `stringContains` function in EQL, showing how to check if a source string contains a specific substring. Examples cover basic usage, case sensitivity, using fields, empty strings, and null handling.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-function-ref.md#_snippet_15

LANGUAGE: eql
CODE:
```
// process.command_line = "start regsvr32.exe"
stringContains(process.command_line, "regsvr32")  // returns true
stringContains(process.command_line, "Regsvr32")  // returns false
stringContains(process.command_line, "start ")    // returns true
stringContains(process.command_line, "explorer")  // returns false

// Make matching case-insensitive
stringContains~(process.command_line, "Regsvr32")  // returns false

// process.name = "regsvr32.exe"
stringContains(command_line, process.name)        // returns true

// empty strings
stringContains("", "")                            // returns false
stringContains(process.command_line, "")          // returns false

// null handling
stringContains(null, "regsvr32")                  // returns null
stringContains(process.command_line, null)          // returns null
```

----------------------------------------

TITLE: Adding Interval to Datetime Literal in Elasticsearch SQL
DESCRIPTION: This snippet adds an `INTERVAL` of 49 years to a specific datetime literal, cast as `DATETIME`. The operation calculates the resulting date and time after adding the specified interval, aliasing the result as `result`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_3

LANGUAGE: SQL
CODE:
```
SELECT CAST('1969-05-13T12:34:56' AS DATETIME) + INTERVAL 49 YEARS AS result;
```

----------------------------------------

TITLE: Using PERCENTILE_RANK Function in Elasticsearch SQL
DESCRIPTION: Demonstrates calculating the percentile rank of the value 65000 within the 'salary' distribution, grouped by 'languages', using the default algorithm.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_43

LANGUAGE: SQL
CODE:
```
SELECT languages, PERCENTILE_RANK(salary, 65000) AS rank FROM emp GROUP BY languages;
```

----------------------------------------

TITLE: Elasticsearch Span Term Query with Boost
DESCRIPTION: This snippet demonstrates using a boost value with the `span_term` query.  It searches for spans where `user.id` is `kimchy`, but increases the score of matching documents by a factor of 2.0. The boost parameter allows to give more importance to specific terms.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-span-term-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "span_term" : { "user.id" : { "value" : "kimchy", "boost" : 2.0 } }
  }
}
```

----------------------------------------

TITLE: Using Parameterized Time Spans in DATE_TRUNC ESQL/JSON
DESCRIPTION: This Elasticsearch _query API request shows how to pass a time span as a named parameter string to the DATE_TRUNC scalar function. The string parameter is automatically converted to a time span value for the function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-time-spans.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{
   "query": """
   FROM employees
   | KEEP first_name, last_name, hire_date
   | EVAL year_hired = DATE_TRUNC(?timespan, hire_date)
   """,
   "params": [{"timespan" : "1 year"}]
}
```

----------------------------------------

TITLE: Querying with Tail Pipe in EQL
DESCRIPTION: Returns up to a specified number of events or sequences, starting with the most recent matches. This example returns up to five of the most recent svchost.exe processes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-pipe-ref.md#2025-04-21_snippet_2

LANGUAGE: eql
CODE:
```
process where process.name == "svchost.exe"
| tail 5
```

----------------------------------------

TITLE: Detaching Nodes from Cluster
DESCRIPTION: Demonstrates how to detach nodes from a failed cluster so they can join a new cluster after unsafe bootstrapping. Shows the interactive process and warnings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/node-tool.md#2025-04-21_snippet_9

LANGUAGE: txt
CODE:
```
node_3$ ./bin/elasticsearch-node detach-cluster

    WARNING: Elasticsearch MUST be stopped before running this tool.

You should only run this tool if you have permanently lost all of the
master-eligible nodes in this cluster and you cannot restore the cluster
from a snapshot, or you have already unsafely bootstrapped a new cluster
by running `elasticsearch-node unsafe-bootstrap` on a master-eligible
node that belonged to the same cluster as this node. This tool can cause
arbitrary data loss and its use should be your last resort.

Do you want to proceed?

Confirm [y/N] y
Node was successfully detached from the cluster
```

----------------------------------------

TITLE: Date Histogram with Offset Example
DESCRIPTION: Shows how to use the offset parameter with a date histogram to adjust bucket boundaries. This example creates documents and then uses a 6-hour offset to change buckets from midnight-to-midnight to 6am-to-6am.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_8

LANGUAGE: json
CODE:
```
PUT my-index-000001/_doc/1?refresh
{
  "date": "2015-10-01T05:30:00Z"
}

PUT my-index-000001/_doc/2?refresh
{
  "date": "2015-10-01T06:30:00Z"
}

GET my-index-000001/_search?size=0
{
  "aggs": {
    "my_buckets": {
      "composite" : {
        "sources" : [
          {
            "date": {
              "date_histogram" : {
                "field": "date",
                "calendar_interval": "day",
                "offset": "+6h",
                "format": "iso8601"
              }
            }
          }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Install Elasticsearch Kuromoji Plugin (sh)
DESCRIPTION: Installs the Elasticsearch analysis-kuromoji plugin using the plugin manager. This command needs to be run on every node in the cluster. After installation, each node must be restarted. Requires root privileges (sudo).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji.md#_snippet_0

LANGUAGE: sh
CODE:
```
sudo bin/elasticsearch-plugin install analysis-kuromoji
```

----------------------------------------

TITLE: Mixing Different Value Sources in Elasticsearch Aggregation
DESCRIPTION: Demonstrates combining date_histogram and terms aggregations in a composite aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_12

LANGUAGE: console
CODE:
```
GET /_search
{
  "size": 0,
  "aggs": {
    "my_buckets": {
      "composite": {
        "sources": [
          { "date": { "date_histogram": { "field": "timestamp", "calendar_interval": "1d" } } },
          { "product": { "terms": { "field": "product" } } }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: EQL Sequence Query Example for Process Events
DESCRIPTION: An EQL sequence query that searches for a pattern of processes (attrib, bash, cat) executed in sequence by the same user. The query uses the 'by' keyword to track sequences separately for each unique user.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_38

LANGUAGE: eql
CODE:
```
sequence by user.name
  [process where process.name == "attrib"]
  [process where process.name == "bash"]
  [process where process.name == "cat"]
```

----------------------------------------

TITLE: Demonstrating COALESCE Function in ESQL
DESCRIPTION: This snippet shows how to use the COALESCE function in ESQL. It creates a row with two fields, 'a' (null) and 'b' (string), and applies COALESCE to return the first non-null value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/coalesce.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=null, b="b"
| EVAL COALESCE(a, b)
```

----------------------------------------

TITLE: Filtering Data Using KQL Query in ESQL
DESCRIPTION: Demonstrates how to use the KQL function to filter data based on a Kibana Query Language expression. The example shows filtering books by author using KQL syntax within an ESQL query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/kql.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM books
| WHERE KQL("author: Faulkner")
```

----------------------------------------

TITLE: Executing Advanced Fuzzy Search Elasticsearch Console
DESCRIPTION: Illustrates an advanced fuzzy search query in Elasticsearch using extra parameters like 'fuzziness', 'max_expansions', 'prefix_length', 'transpositions', and 'rewrite' to control how similar terms are discovered. The search looks for terms similar to 'ki' in the user.id field with specified parameters for greater control over query execution and performance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-fuzzy-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "fuzzy": {
      "user.id": {
        "value": "ki",
        "fuzziness": "AUTO",
        "max_expansions": 50,
        "prefix_length": 0,
        "transpositions": true,
        "rewrite": "constant_score_blended"
      }
    }
  }
}

```

----------------------------------------

TITLE: Creating and Querying Basic Filters Aggregation in Elasticsearch
DESCRIPTION: This example demonstrates how to create a filters aggregation with named buckets for error and warning messages in log data, showing the document count for each filter condition.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-filters-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /logs/_bulk?refresh
{ "index" : { "_id" : 1 } }
{ "body" : "warning: page could not be rendered" }
{ "index" : { "_id" : 2 } }
{ "body" : "authentication error" }
{ "index" : { "_id" : 3 } }
{ "body" : "warning: connection timed out" }

GET logs/_search
{
  "size": 0,
  "aggs" : {
    "messages" : {
      "filters" : {
        "filters" : {
          "errors" :   { "match" : { "body" : "error"   }},
          "warnings" : { "match" : { "body" : "warning" }}
        }
      }
    }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  "took": 9,
  "timed_out": false,
  "_shards": ...,
  "hits": ...,
  "aggregations": {
    "messages": {
      "buckets": {
        "errors": {
          "doc_count": 1
        },
        "warnings": {
          "doc_count": 2
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring the JSON Processor with Target Field in Elasticsearch
DESCRIPTION: Example configuration of a JSON processor with a separate target field. This processor will parse the JSON content from 'string_source' field and store the result in 'json_target' field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/json-processor.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
{
  "json" : {
    "field" : "string_source",
    "target_field" : "json_target"
  }
}
```

----------------------------------------

TITLE: Configuring Cluster-Level Total Shards Per Node in Elasticsearch
DESCRIPTION: Dynamic cluster setting that limits the maximum number of primary and replica shards allocated to each node across all indices. Defaults to -1 which means unlimited shards per node.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/total-shards-per-node.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
cluster.routing.allocation.total_shards_per_node
```

----------------------------------------

TITLE: Downloading Sample Configuration File using Curl
DESCRIPTION: Retrieves the sample configuration file for Elasticsearch connectors from the official GitHub repository
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-servicenow.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
curl https://raw.githubusercontent.com/elastic/connectors/main/config.yml.example --output ~/connectors-config/config.yml
```

----------------------------------------

TITLE: Downloading Oracle Connector Configuration File
DESCRIPTION: This snippet shows how to download the sample configuration file for the Oracle connector using curl command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-oracle.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
curl https://raw.githubusercontent.com/elastic/connectors/main/config.yml.example --output ~/connectors-config/config.yml
```

----------------------------------------

TITLE: Using CURRENT_TIME Function Default Precision in Elasticsearch SQL
DESCRIPTION: This snippet demonstrates fetching the current time using the `CURRENT_TIME()` function with default precision (milliseconds) in Elasticsearch SQL. It retrieves the time the query reached the server and aliases it as `result`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_15

LANGUAGE: SQL
CODE:
```
SELECT CURRENT_TIME() AS result;
```

----------------------------------------

TITLE: Extended Stats Bucket Aggregation Example with Date Histogram
DESCRIPTION: Demonstrates calculating extended statistics for monthly sales using a date histogram and sum aggregation. The example shows how to combine multiple aggregations to analyze sales data over time.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-extended-stats-bucket-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "size": 0,
  "aggs": {
    "sales_per_month": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "sales": {
          "sum": {
            "field": "price"
          }
        }
      }
    },
    "stats_monthly_sales": {
      "extended_stats_bucket": {
        "buckets_path": "sales_per_month>sales"
      }
    }
  }
}
```

----------------------------------------

TITLE: Histogram Aggregation with Minimum Document Count
DESCRIPTION: Example showing how to configure histogram aggregation with a minimum document count to filter out empty buckets. Only buckets with at least the specified number of documents will be included in the response.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-histogram-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "prices": {
      "histogram": {
        "field": "price",
        "interval": 50,
        "min_doc_count": 1
      }
    }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "prices": {
      "buckets": [
        {
          "key": 0.0,
          "doc_count": 1
        },
        {
          "key": 50.0,
          "doc_count": 1
        },
        {
          "key": 150.0,
          "doc_count": 2
        },
        {
          "key": 200.0,
          "doc_count": 3
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Running the Docker image for the Connector Service
DESCRIPTION: This command runs the Docker image for the Elastic Connector Service, mounting the configuration directory and specifying the network. It executes the `elastic-ingest` command with the configuration file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-onedrive.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Running Docker Image for Elasticsearch Connector
DESCRIPTION: Docker command to run the Elasticsearch Connector Service with configuration volume mount and network settings
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-dropbox.md#2025-04-21_snippet_5

LANGUAGE: sh
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Geo-line Aggregation Query
DESCRIPTION: Example query demonstrating how to perform a geo_line aggregation on geo_point data sorted by timestamp.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-geo-line.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /test/_search?filter_path=aggregations
{
  "aggs": {
    "line": {
      "geo_line": {
        "point": {"field": "my_location"},
        "sort":  {"field": "@timestamp"}
      }
    }
  }
}
```

----------------------------------------

TITLE: Skipping Fields with Named Skip Key in DISSECT ESQL
DESCRIPTION: Illustrates the use of the `?` modifier with a key name (`ident`, `auth`) to match parts of the string but exclude them from the final output columns. This is functionally similar to an empty key `%{}`, but improves readability.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-process-data-with-dissect-grok.md#_snippet_6

LANGUAGE: ESQL
CODE:
```
ROW message="1.2.3.4 - - 30/Apr/1998:22:00:52 +0000"
| DISSECT message """%{clientip} %{?ident} %{?auth} %{@timestamp}"""
```

----------------------------------------

TITLE: Configuring Fielddata Frequency Filtering in Elasticsearch
DESCRIPTION: This snippet demonstrates how to configure fielddata frequency filtering to reduce memory usage by only loading terms whose document frequency falls within specified boundaries. It includes min/max frequency settings and minimum segment size.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/text.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "tag": {
        "type": "text",
        "fielddata": true,
        "fielddata_frequency_filter": {
          "min": 0.001,
          "max": 0.1,
          "min_segment_size": 500
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing Documents with Multiple Analyzers in Elasticsearch
DESCRIPTION: This snippet demonstrates how to index two documents into the index with multiple analyzers, using slightly different text content.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/multi-fields.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1
{ "text": "quick brown fox" }

PUT my-index-000001/_doc/2
{ "text": "quick brown foxes" }
```

----------------------------------------

TITLE: Configuring Multiple Realms in Elasticsearch YAML
DESCRIPTION: This snippet illustrates how to define and configure multiple authentication realms of different types (e.g., `native`, `ldap`, `active_directory`) within the Elasticsearch `elasticsearch.yml` file under the `xpack.security.authc.realms` namespace. Each realm is given a unique name and assigned an `order` property, which determines its priority in the realm chain during the authentication process.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/security-settings.md#_snippet_1

LANGUAGE: yaml
CODE:
```
xpack.security.authc.realms:

    native.realm1: <1>
        order: 0 <2>
        ...

    ldap.realm2:
        order: 1
        ...

    active_directory.realm3:
        order: 2
        ...
    ...
```

----------------------------------------

TITLE: Customizing Length filter in custom analyzer (Console)
DESCRIPTION: This example creates an index `length_custom_example` defining both a custom analyzer and a custom token filter. The custom filter, named `length_2_to_10_char`, is a `length` filter explicitly configured to keep tokens between 2 and 10 characters. The custom analyzer `whitespace_length_2_to_10_char` uses the `whitespace` tokenizer and applies this newly defined custom `length` filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-length-tokenfilter.md#_snippet_2

LANGUAGE: Console
CODE:
```
PUT length_custom_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "whitespace_length_2_to_10_char": {
          "tokenizer": "whitespace",
          "filter": [ "length_2_to_10_char" ]
        }
      },
      "filter": {
        "length_2_to_10_char": {
          "type": "length",
          "min": 2,
          "max": 10
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring and Using kuromoji_stemmer Token Filter in Elasticsearch
DESCRIPTION: This example demonstrates how to configure an Elasticsearch index with a custom analyzer that uses the kuromoji_stemmer token filter to normalize katakana words. It includes creating an index with appropriate settings and testing the analyzer with sample katakana words to show how the stemming works with different word lengths.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-stemmer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT kuromoji_sample
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "my_analyzer": {
            "tokenizer": "kuromoji_tokenizer",
            "filter": [
              "my_katakana_stemmer"
            ]
          }
        },
        "filter": {
          "my_katakana_stemmer": {
            "type": "kuromoji_stemmer",
            "minimum_length": 4
          }
        }
      }
    }
  }
}

GET kuromoji_sample/_analyze
{
  "analyzer": "my_analyzer",
  "text": "コピー" <1>
}

GET kuromoji_sample/_analyze
{
  "analyzer": "my_analyzer",
  "text": "サーバー" <2>
}
```

----------------------------------------

TITLE: Vector Direct Access Implementation
DESCRIPTION: Shows how to directly access vector values and implement custom similarity calculations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-script-score-query.md#2025-04-21_snippet_13

LANGUAGE: console
CODE:
```
GET my-index-000001/_search
{
  "query": {
    "script_score": {
      "query" : {
        "bool" : {
          "filter" : {
            "term" : {
              "status" : "published"
            }
          }
        }
      },
      "script": {
        "source": """
          float[] v = doc['my_dense_vector'].vectorValue;
          float vm = doc['my_dense_vector'].magnitude;
          float dotProduct = 0;
          for (int i = 0; i < v.length; i++) {
            dotProduct += v[i] * params.queryVector[i];
          }
          return dotProduct / (vm * (float) params.queryVectorMag);
        """,
        "params": {
          "queryVector": [4, 3.4, -0.2],
          "queryVectorMag": 5.25357
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Calculating Employee Salary Statistics using ESQL
DESCRIPTION: This ESQL query analyzes employee salaries by categorizing them into three ranges: under 40K, between 40K and 60K, and over 60K. It uses the EVAL clause to convert salaries to thousands and the STATS clause to count employees in each category. The query also calculates the total number of employees.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/stats.csv-spec/aggFilteringNoGroup.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| EVAL Ks = salary / 1000 // thousands
| STATS under_40K = COUNT(*) WHERE Ks < 40,
        inbetween = COUNT(*) WHERE 40 <= Ks AND Ks < 60,
        over_60K  = COUNT(*) WHERE 60 <= Ks,
        total     = COUNT(*)
```

----------------------------------------

TITLE: Handling Missing Values in Min Aggregation in Elasticsearch
DESCRIPTION: This snippet demonstrates how to handle missing values in the min aggregation using the 'missing' parameter. Documents without a value in the specified field will be treated as if they had the specified missing value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-min-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "aggs": {
    "grade_min": {
      "min": {
        "field": "grade",
        "missing": 10
      }
    }
  }
}
```

----------------------------------------

TITLE: ESQL FROM Query for Remote Clusters
DESCRIPTION: Demonstrates how to query data streams and indices on remote clusters using the FROM command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/from.md#2025-04-21_snippet_4

LANGUAGE: esql
CODE:
```
FROM cluster_one:employees-00001,cluster_two:other-employees-*
```

----------------------------------------

TITLE: Using TRIM Function to Remove Whitespace in ESQL
DESCRIPTION: This example demonstrates how to use the TRIM function in ESQL to remove leading and trailing whitespace from string values. The snippet creates a row with padded text values and then uses TRIM to clean up the data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/trim.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW message = "   some text  ",  color = " red "
| EVAL message = TRIM(message)
| EVAL color = TRIM(color)
```

----------------------------------------

TITLE: Rounding Up Numbers Using CEIL Function in ESQL
DESCRIPTION: This snippet demonstrates how to use the CEIL function in ESQL to round a number up to the nearest integer. It creates a row with a decimal value and then applies the CEIL function to round it up.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/ceil.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=1.8
| EVAL a=CEIL(a)
```

----------------------------------------

TITLE: Geohash-based Geo Sort in Elasticsearch
DESCRIPTION: Example of geo-distance sorting using geohash format for location specification.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/sort-search-results.md#2025-04-21_snippet_15

LANGUAGE: console
CODE:
```
GET /_search
{
  "sort": [
    {
      "_geo_distance": {
        "pin.location": "drm3btev3e86",
        "order": "asc",
        "unit": "km"
      }
    }
  ],
  "query": {
    "term": { "user": "kimchy" }
  }
}
```

----------------------------------------

TITLE: Installing analysis-smartcn Plugin (Shell)
DESCRIPTION: This command uses the Elasticsearch plugin manager (`bin/elasticsearch-plugin`) with elevated privileges (`sudo`) to install the `analysis-smartcn` plugin. It requires Elasticsearch to be installed on the node and the user to have permissions to run commands as superuser. Each node must be restarted after installation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-smartcn.md#_snippet_0

LANGUAGE: Shell
CODE:
```
sudo bin/elasticsearch-plugin install analysis-smartcn
```

----------------------------------------

TITLE: Escaping Event Categories in EQL
DESCRIPTION: Shows how to escape event categories that contain special characters, spaces, or start with numerals using double quotes or triple double quotes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_3

LANGUAGE: eql
CODE:
```
".my.event.category"
"my-event-category"
"my event category"
"6eventcategory"

""".my.event.category"""
"""my-event-category"""
"""my event category"""
"""6eventcategory"""
```

----------------------------------------

TITLE: Configuring Proxy Settings for Elasticsearch Plugin Installation on Windows
DESCRIPTION: Shows how to configure HTTP and HTTPS proxy settings for plugin installation on Windows systems by setting Java options through the CLI_JAVA_OPTS environment variable.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/_other_command_line_parameters.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
set CLI_JAVA_OPTS="-Dhttp.proxyHost=host_name -Dhttp.proxyPort=port_number -Dhttps.proxyHost=host_name -Dhttps.proxyPort=https_port_number"
bin\elasticsearch-plugin install analysis-icu
```

----------------------------------------

TITLE: Querying Elasticsearch: Basic Numeric Range Query (Console)
DESCRIPTION: This snippet shows how to perform a basic range query using the Elasticsearch REST API. It targets the `age` field and filters documents where the age is greater than or equal to 10 (`gte`) and less than or equal to 20 (`lte`). It also applies a boost of 2.0 to affect relevance scoring.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-range-query.md#_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "range": {
      "age": {
        "gte": 10,
        "lte": 20,
        "boost": 2.0
      }
    }
  }
}
```

----------------------------------------

TITLE: Finding Last First Name by Gender (LAST) with Grouping
DESCRIPTION: This query groups results by 'gender' and uses LAST to find the last first name within each gender group, sorted by 'gender'. No explicit ordering field is provided for LAST itself, so it uses the target field's natural sort.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_24

LANGUAGE: SQL
CODE:
```
SELECT gender, LAST(first_name) FROM emp GROUP BY gender ORDER BY gender;
```

----------------------------------------

TITLE: Configuring Preload in elasticsearch.yml
DESCRIPTION: Configuration example showing how to set index.store.preload in the elasticsearch.yml file to preload specific file extensions (nvd and dvd) into the file system cache.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/preloading-data-into-file-system-cache.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
index.store.preload: ["nvd", "dvd"]
```

----------------------------------------

TITLE: Setting Write Consistency Level for Elasticsearch Bulk Request
DESCRIPTION: Method to set the write consistency level for the bulk request, controlling the number of active shards required for write operations to be successful.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/repository-gcs/licenses/google-http-NOTICE.txt#2025-04-21_snippet_6

LANGUAGE: java
CODE:
```
public BulkRequest setConsistencyLevel(WriteConsistencyLevel consistencyLevel) {
    this.consistencyLevel = consistencyLevel;
    return this;
}
```

----------------------------------------

TITLE: IN Operator Usage in ESQL
DESCRIPTION: Example showing how to use the IN operator to test if a value matches any element in a list.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/where.md#2025-04-21_snippet_4

LANGUAGE: esql
CODE:
```
WHERE field IN (value1, value2, ...)
```

----------------------------------------

TITLE: Using Top Metrics with Terms Aggregation
DESCRIPTION: This example demonstrates how to use top_metrics aggregation inside a terms aggregation to find the last value reported by each server.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-top-metrics.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
PUT /node
{
  "mappings": {
    "properties": {
      "ip": {"type": "ip"},
      "date": {"type": "date"}
    }
  }
}
POST /node/_bulk?refresh
{"index": {}}
{"ip": "192.168.0.1", "date": "2020-01-01T01:01:01", "m": 1}
{"index": {}}
{"ip": "192.168.0.1", "date": "2020-01-01T02:01:01", "m": 2}
{"index": {}}
{"ip": "192.168.0.2", "date": "2020-01-01T02:01:01", "m": 3}
POST /node/_search?filter_path=aggregations
{
  "aggs": {
    "ip": {
      "terms": {
        "field": "ip"
      },
      "aggs": {
        "tm": {
          "top_metrics": {
            "metrics": {"field": "m"},
            "sort": {"date": "desc"}
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Searching with Geo-bounding Box Query for Geo_point
DESCRIPTION: This snippet shows how to search for geo_point data within a specified bounding box using a geo_bounding_box filter. The operation requires a geo_point index in Elasticsearch. Inputs are Elasticsearch GET requests with query structure, and outputs are matching documents. Accurate geo_point data is necessary.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-bounding-box-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET my_locations/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_bounding_box": {
          "pin.location": {
            "top_left": {
              "lat": 40.73,
              "lon": -74.1
            },
            "bottom_right": {
              "lat": 40.01,
              "lon": -71.12
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Shortening Match Query Syntax
DESCRIPTION: This snippet shows a simplified version of the match query syntax by combining the field and query parameters into a single line, effectively minimizing code footprint while executing a search operation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-match-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "match": {
      "message": "this is a test"
    }
  }
}
```

----------------------------------------

TITLE: Creating an Index with Geo-point Mapping and Performing a Low-precision Geotile Grid Aggregation
DESCRIPTION: This example creates a museums index with a geo_point field, indexes sample museum locations, and performs a low-precision geotile grid aggregation at precision level 8. The aggregation groups the museums into map tile buckets.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-geotilegrid-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /museums
{
  "mappings": {
    "properties": {
      "location": {
        "type": "geo_point"
      }
    }
  }
}

POST /museums/_bulk?refresh
{"index":{"_id":1}}
{"location": "POINT (4.912350 52.374081)", "name": "NEMO Science Museum"}
{"index":{"_id":2}}
{"location": "POINT (4.901618 52.369219)", "name": "Museum Het Rembrandthuis"}
{"index":{"_id":3}}
{"location": "POINT (4.914722 52.371667)", "name": "Nederlands Scheepvaartmuseum"}
{"index":{"_id":4}}
{"location": "POINT (4.405200 51.222900)", "name": "Letterenhuis"}
{"index":{"_id":5}}
{"location": "POINT (2.336389 48.861111)", "name": "Musée du Louvre"}
{"index":{"_id":6}}
{"location": "POINT (2.327000 48.860000)", "name": "Musée d'Orsay"}

POST /museums/_search?size=0
{
  "aggregations": {
    "large-grid": {
      "geotile_grid": {
        "field": "location",
        "precision": 8
      }
    }
  }
}
```

----------------------------------------

TITLE: Using a String 'Now' Parameter in Painless Scripts
DESCRIPTION: JSON configuration for passing the current time as a string parameter in ISO-8601 format to a Painless script. This approach requires parsing in the script.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_25

LANGUAGE: JSON
CODE:
```
...
"script": {
    ...
    "params": {
        "now": "<generated string datetime in ISO-8601>"
    }
}
...
```

----------------------------------------

TITLE: Uppercase Conversion Method in Painless
DESCRIPTION: This method signature shows how to use the uppercase processor to convert a string to its uppercase equivalent.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-ingest-processors-in-painless.md#2025-04-21_snippet_3

LANGUAGE: painless
CODE:
```
String uppercase(String value);
```

----------------------------------------

TITLE: Copying Field Values with Template Snippets
DESCRIPTION: Example demonstrating how to copy values between fields using template snippets in the Set processor pipeline configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/set-processor.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT _ingest/pipeline/set_os
{
  "description": "sets the value of host.os.name from the field os",
  "processors": [
    {
      "set": {
        "field": "host.os.name",
        "value": "{{{os}}}"
      }
    }
  ]
}

POST _ingest/pipeline/set_os/_simulate
{
  "docs": [
    {
      "_source": {
        "os": "Ubuntu"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Deleting a Point in Time (PIT) in Elasticsearch
DESCRIPTION: This example shows how to delete a Point in Time (PIT) when you're done with pagination. This is an important cleanup step to free resources in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/paginate-search-results.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
DELETE /_pit
{
    "id" : "46ToAwMDaWR5BXV1aWQyKwZub2RlXzMAAAAAAAAAACoBYwADaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQADaWR5BXV1aWQyKgZub2RlXzIAAAAAAAAAAAwBYgACBXV1aWQyAAAFdXVpZDEAAQltYXRjaF9hbGw_gAAAAA=="
}
```

----------------------------------------

TITLE: Converting and Manipulating Dates with TO_DATEPERIOD in ESQL
DESCRIPTION: This snippet demonstrates the usage of the TO_DATEPERIOD function in ESQL. It shows how to convert a string to a datetime, add a date period, and subtract a date period using TO_DATEPERIOD. The function converts the input '3 days' into a date_period value for manipulation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_dateperiod.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW x = "2024-01-01"::datetime
| EVAL y = x + "3 DAYS"::date_period, z = x - TO_DATEPERIOD("3 days");
```

----------------------------------------

TITLE: Analyzing Text with Character Group Tokenizer in Elasticsearch
DESCRIPTION: This example demonstrates how to use the char_group tokenizer to analyze text by splitting on whitespace, hyphens, and newlines. The tokenizer breaks "The QUICK brown-fox" into four separate tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-chargroup-tokenizer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _analyze
{
  "tokenizer": {
    "type": "char_group",
    "tokenize_on_chars": [
      "whitespace",
      "-",
      "\n"
    ]
  },
  "text": "The QUICK brown-fox"
}
```

LANGUAGE: console-result
CODE:
```
{
  "tokens": [
    {
      "token": "The",
      "start_offset": 0,
      "end_offset": 3,
      "type": "word",
      "position": 0
    },
    {
      "token": "QUICK",
      "start_offset": 4,
      "end_offset": 9,
      "type": "word",
      "position": 1
    },
    {
      "token": "brown",
      "start_offset": 10,
      "end_offset": 15,
      "type": "word",
      "position": 2
    },
    {
      "token": "fox",
      "start_offset": 16,
      "end_offset": 19,
      "type": "word",
      "position": 3
    }
  ]
}
```

----------------------------------------

TITLE: Defining Custom Swedish Analyzer in Elasticsearch
DESCRIPTION: This code snippet illustrates setting up a custom analyzer specifically for Swedish language processing in Elasticsearch, featuring configurations for stopwords, keyword markers, and stemming filters to suit Swedish linguistic requirements. It assumes an Elasticsearch environment with language-specific plugins installed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_27

LANGUAGE: console
CODE:
```
PUT /swedish_example
{
  "settings": {
    "analysis": {
      "filter": {
        "swedish_stop": {
          "type":       "stop",
          "stopwords":  "_swedish_" <1>
        },
        "swedish_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["exempel"] <2>
        },
        "swedish_stemmer": {
          "type":       "stemmer",
          "language":   "swedish"
        }
      },
      "analyzer": {
        "rebuilt_swedish": {
          "tokenizer":  "standard",
          "filter": [
            "lowercase",
            "swedish_stop",
            "swedish_keywords",
            "swedish_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Using Inequality Operators (<> or !=) in Elasticsearch SQL
DESCRIPTION: Demonstrates using the inequality operators (<> or !=) to filter rows where a column's value does not match a specified value. The query selects the last name for employees where the employee number is not 10000.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-operators.md#_snippet_2

LANGUAGE: sql
CODE:
```
SELECT last_name l FROM "test_emp" WHERE emp_no <> 10000 ORDER BY emp_no LIMIT 5;
```

----------------------------------------

TITLE: Calculating Total Goals with Script Fields in Painless
DESCRIPTION: Shows how to use Painless in script_fields to calculate the total goals for each player by summing the values in the goals array.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/brief-painless-walkthrough.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET hockey/_search
{
  "query": {
    "match_all": {}
  },
  "script_fields": {
    "total_goals": {
      "script": {
        "lang": "painless",
        "source": """
          int total = 0;
          for (int i = 0; i < doc['goals'].length; ++i) {
            total += doc['goals'][i];
          }
          return total;
        """
      }
    }
  }
}
```

----------------------------------------

TITLE: Performing ML Inference via Elasticsearch API
DESCRIPTION: API call to directly perform inference using a trained ML model without indexing the document. This example uses a sentiment analysis model on text input to analyze its sentiment.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/repository-gcs/licenses/google-api-services-storage-NOTICE.txt#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
POST _ml/trained_models/sentiment_model/_infer
{
  "docs": {
    "text_field": "I love working with Elasticsearch!"
  }
}
```

----------------------------------------

TITLE: ESQL ENRICH Command Syntax
DESCRIPTION: Basic syntax structure for the ENRICH command showing the policy name, optional match field specification, and field selection with optional renaming.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/enrich.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ENRICH policy [ON match_field] [WITH [new_name1 = ]field1, [new_name2 = ]field2, ...]
```

----------------------------------------

TITLE: Division Operator in Painless
DESCRIPTION: Demonstrates the division operator ('/') in Painless using different numeric types.  Integer division truncates the decimal portion of the result. The example shows division between int and double types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_16

LANGUAGE: painless
CODE:
```
int i = 29/4;     <1>
double d = i/7.0; <2>
```

----------------------------------------

TITLE: Querying Significant Terms with Multi-Set Analysis using Terms Aggregation (Elasticsearch Console)
DESCRIPTION: Illustrates how to analyze significant terms across multiple categories (police forces) in a single request by nesting the `significant_terms` aggregation inside a `terms` aggregation. This allows identifying unusual `crime_type` patterns for each distinct `force` value, comparing the term frequency within each force's bucket to the overall index frequency. This avoids the need for multiple individual queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-significantterms-aggregation.md#_snippet_1

LANGUAGE: console
CODE:
```
GET /_search
{
  "aggregations": {
    "forces": {
      "terms": { "field": "force" },
      "aggregations": {
        "significant_crime_types": {
          "significant_terms": { "field": "crime_type" }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Retrieving a Document with Sequence Number in Elasticsearch
DESCRIPTION: This snippet shows how to retrieve a document using the GET API. The response includes the current sequence number and primary term, which can be used for optimistic concurrency control in subsequent operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/optimistic-concurrency-control.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET products/_doc/1567
```

LANGUAGE: console-result
CODE:
```
{
  "_index": "products",
  "_id": "1567",
  "_version": 1,
  "_seq_no": 362,
  "_primary_term": 2,
  "found": true,
  "_source": {
    "product": "r2d2",
    "details": "A resourceful astromech droid"
  }
}
```

----------------------------------------

TITLE: Converting WKT String to Geoshape using TO_GEOSHAPE in ESQL
DESCRIPTION: This example demonstrates how to convert a WKT (Well-Known Text) format string representing a polygon into a geo_shape data type using the TO_GEOSHAPE function in ESQL. The query creates a row with a WKT string and transforms it into a geoshape object.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_geoshape.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW wkt = "POLYGON ((30 10, 40 40, 20 40, 10 20, 30 10))"
| EVAL geom = TO_GEOSHAPE(wkt)
```

----------------------------------------

TITLE: Using the Other Bucket in Elasticsearch Filters Aggregation
DESCRIPTION: This example demonstrates using the 'other_bucket_key' parameter to create a bucket for documents that don't match any of the specified filters, with a custom name for the 'other' bucket.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-filters-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT logs/_doc/4?refresh
{
  "body": "info: user Bob logged out"
}

GET logs/_search
{
  "size": 0,
  "aggs" : {
    "messages" : {
      "filters" : {
        "other_bucket_key": "other_messages",
        "filters" : {
          "errors" :   { "match" : { "body" : "error"   }},
          "warnings" : { "match" : { "body" : "warning" }}
        }
      }
    }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  "took": 3,
  "timed_out": false,
  "_shards": ...,
  "hits": ...,
  "aggregations": {
    "messages": {
      "buckets": {
        "errors": {
          "doc_count": 1
        },
        "warnings": {
          "doc_count": 2
        },
        "other_messages": {
          "doc_count": 1
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Generating SSL Keys for Server and Client in Elasticsearch
DESCRIPTION: These commands use keytool to generate RSA keys for both server and client. The keys are stored in separate keystores with specified aliases, passwords, and validity periods. Subject Alternative Names (SAN) are included for localhost.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/sql-client/src/test/resources/ssl/readme.txt#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ keytool -v -genkey -keyalg rsa -alias server -keypass password -keystore server.keystore -storepass password -validity 99999 -ext SAN=dns:localhost,ip:127.0.0.1
```

LANGUAGE: bash
CODE:
```
$ keytool -v -genkey -keyalg rsa -alias client -keypass password -keystore client.keystore -storepass password -validity 99999 -ext SAN=dns:localhost,ip:127.0.0.1
```

----------------------------------------

TITLE: Elasticsearch query boosting documents based on date
DESCRIPTION: This snippet shows a `bool` search that returns documents with the name `chocolate` and boosts documents with a `production_date` closer to `now` using the `distance_feature` query. The `pivot` parameter defines the distance from the origin at which the relevance score is halved.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-distance-feature-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /items/_search
{
  "query": {
    "bool": {
      "must": {
        "match": {
          "name": "chocolate"
        }
      },
      "should": {
        "distance_feature": {
          "field": "production_date",
          "pivot": "7d",
          "origin": "now"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Advanced Jira Sync Rules - Status-based Filtering
DESCRIPTION: JSON configuration for filtering Jira issues based on their status. This example shows how to target issues in specific projects with particular statuses.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-jira.md#2025-04-21_snippet_0

LANGUAGE: js
CODE:
```
[
  {
    "query": "project = Collaboration AND status = 'In Progress'"
  },
  {
    "query": "status IN ('To Do', 'In Progress', 'Closed')"
  }
]
```

----------------------------------------

TITLE: Deploying Elasticsearch Docker Container in Bash
DESCRIPTION: Runs an Elasticsearch Docker container with mapped ports, volumes, and environment variables. Includes commands for both version 5 and 6.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/qa/repository-old-versions-compatibility/src/javaRestTest/resources/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
docker run -d --name es \
-p 9200:9200 -p 9300:9300 \
-v ${SHARED_FOLDER}/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \
-v ${SHARED_FOLDER}/data:/usr/share/elasticsearch/data \
-v ${SHARED_FOLDER}/snapshots:/usr/share/elasticsearch/snapshots \
--env "discovery.type=single-node" \
docker.elastic.co/elasticsearch/elasticsearch:5.6.16

// Version 6
docker.elastic.co/elasticsearch/elasticsearch:6.8.23
```

----------------------------------------

TITLE: Querying Nested Documents with Source Disabled in Elasticsearch
DESCRIPTION: Demonstrates querying nested documents with inner hits while disabling source and using doc value fields in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-inner-hits.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
PUT test
{
  "mappings": {
    "properties": {
      "comments": {
        "type": "nested"
      }
    }
  }
}

PUT test/_doc/1?refresh
{
  "title": "Test title",
  "comments": [
    {
      "author": "kimchy",
      "text": "comment text"
    },
    {
      "author": "nik9000",
      "text": "words words words"
    }
  ]
}

POST test/_search
{
  "query": {
    "nested": {
      "path": "comments",
      "query": {
        "match": {"comments.text" : "words"}
      },
      "inner_hits": {
        "_source" : false,
        "docvalue_fields" : [
          "comments.text.keyword"
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Configure Request Circuit Breaker Settings
DESCRIPTION: Settings for the request circuit breaker that controls per-request data structure memory usage. Includes memory limit and overhead multiplier.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/circuit-breaker-settings.md#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
indices.breaker.request.limit: "60%"
indices.breaker.request.overhead: 1
```

----------------------------------------

TITLE: Elasticsearch Create Operation
DESCRIPTION: This JSON snippet represents an Elasticsearch create operation. It's used in bulk indexing to specify that a new document should be created.  It does not require any specific dependencies outside the Elasticsearch bulk API.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/esql/qa/server/single-node/src/javaRestTest/resources/tsdb-bulk-request.txt#2025-04-21_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "create": {}
}
```

----------------------------------------

TITLE: Custom Pattern Definition for GitHub Usernames
DESCRIPTION: Example showing how to create and use a custom pattern definition to redact GitHub usernames using the pattern_definitions option.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/redact-processor.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST _ingest/pipeline/_simulate
{
  "pipeline": {
    "processors": [
      {
        "redact": {
          "field": "message",
          "patterns": [
            "%{GITHUB_NAME:GITHUB_NAME}"
          ],
          "pattern_definitions": {
            "GITHUB_NAME": "@%{USERNAME}"
          }
        }
      }
    ]
  },
  "docs": [
    {
      "_source": {
        "message": "@elastic-data-management the PR is ready for review"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Select Data with Cross-Cluster Multi-target SQL
DESCRIPTION: Illustrates using the Elasticsearch multi-target syntax for cross-cluster search. The pattern uses the <remote_cluster>:<target> format, supporting wildcards (*). This allows querying across multiple clusters and matching target indices/tables based on patterns.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-index-patterns.md#_snippet_2

LANGUAGE: SQL
CODE:
```
SELECT emp_no FROM "my*cluster:*emp" LIMIT 1;
```

----------------------------------------

TITLE: EC2 Availability Zone Awareness Configuration
DESCRIPTION: YAML configuration to enable automatic availability zone awareness for Elasticsearch nodes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-ec2-usage.md#2025-04-21_snippet_4

LANGUAGE: yaml
CODE:
```
cloud.node.auto_attributes: true
cluster.routing.allocation.awareness.attributes: aws_availability_zone
```

----------------------------------------

TITLE: Handling Keyword Duplicates in Multivalued Fields (Console)
DESCRIPTION: Creates an index mapping the 'b' field as a `keyword` type, indexes documents with duplicate values in the multivalued 'b' field, and queries using ESQL. Shows that the `keyword` field type removes duplicate values during indexing, which ESQL then reflects in the results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-multivalued-fields.md#_snippet_1

LANGUAGE: console
CODE:
```
PUT /mv
{
  "mappings": {
    "properties": {
      "b": {"type": "keyword"}
    }
  }
}

POST /mv/_bulk?refresh
{ "index" : {} }
{ "a": 1, "b": ["foo", "foo", "bar"] }
{ "index" : {} }
{ "a": 2, "b": ["bar", "bar"] }

POST /_query
{
  "query": "FROM mv | LIMIT 2"
}
```

LANGUAGE: json
CODE:
```
{
  "took": 28,
  "is_partial": false,
  "columns": [
    { "name": "a", "type": "long"},
    { "name": "b", "type": "keyword"}
  ],
  "values": [
    [1, ["bar", "foo"]],
    [2,          "bar"]
  ]
}
```

----------------------------------------

TITLE: Creating a Custom Analyzer with Trim Filter in Elasticsearch
DESCRIPTION: This snippet shows how to use the create index API to configure a new custom analyzer that incorporates the trim filter. It demonstrates setting up an analyzer named 'keyword_trim' that uses the keyword tokenizer and the trim filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-trim-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT trim_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "keyword_trim": {
          "tokenizer": "keyword",
          "filter": [ "trim" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Handling Synonyms in Match Query
DESCRIPTION: This snippet illustrates how to configure a match query to handle multi-term synonyms without automatically generating phrase queries. It demonstrates a more complex boolean query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-match-query.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET /_search
{
   "query": {
       "match" : {
           "message": {
               "query" : "ny city",
               "auto_generate_synonyms_phrase_query" : false
           }
       }
   }
}
```

----------------------------------------

TITLE: Indexing Document: Nested Data (console)
DESCRIPTION: Indexes a document with ID `1` into `my-index-000001`. The document includes a `group` field and a `user` field containing an array of two objects, each with `first` and `last` names, matching the nested mapping. The `refresh=true` parameter makes the document immediately searchable.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_3

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1?refresh=true
{
  "group" : "fans",
  "user" : [
    {
      "first" : "John",
      "last" :  "Smith"
    },
    {
      "first" : "Alice",
      "last" :  "White"
    }
  ]
}
```

----------------------------------------

TITLE: Adding Secret Token to Elasticsearch Keystore
DESCRIPTION: Command to add APM server authentication token to the Elasticsearch keystore for secure communication.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/TRACING.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
bin/elasticsearch-keystore add telemetry.secret_token
```

----------------------------------------

TITLE: Filtered Nested Aggregation Query in Elasticsearch
DESCRIPTION: Advanced nested aggregation query that filters results for a specific reseller before calculating the minimum price.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-nested-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /products/_search?size=0
{
  "query": {
    "match": {
      "name": "led tv"
    }
  },
  "aggs": {
    "resellers": {
      "nested": {
        "path": "resellers"
      },
      "aggs": {
        "filter_reseller": {
          "filter": {
            "bool": {
              "filter": [
                {
                  "term": {
                    "resellers.reseller": "companyB"
                  }
                }
              ]
            }
          },
          "aggs": {
            "min_price": {
              "min": {
                "field": "resellers.price"
              }
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Elasticsearch Span Containing Query Example
DESCRIPTION: This code snippet demonstrates the usage of the `span_containing` query in Elasticsearch. It searches for documents where the `big` span, defined as a `span_near` query containing two terms, encloses the `little` span, defined as a `span_term` query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-span-containing-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "span_containing": {
      "little": {
        "span_term": { "field1": "foo" }
      },
      "big": {
        "span_near": {
          "clauses": [
            { "span_term": { "field1": "bar" } },
            { "span_term": { "field1": "baz" } }
          ],
          "slop": 5,
          "in_order": true
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Calculating String Length with LENGTH in ESQL
DESCRIPTION: This snippet demonstrates how to use the LENGTH function in an ESQL query to calculate the character length of a string field. It filters airports in India, keeps only the city field, and adds a new column with the length of each city name.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/length.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airports
| WHERE country == "India"
| KEEP city
| EVAL fn_length = LENGTH(city)
```

----------------------------------------

TITLE: Advanced Search Query with RRF Reranking
DESCRIPTION: Advanced example showing how to combine query rules with reciprocal rank fusion (RRF) reranking to apply rules on reranked results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/searching-with-query-rules.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
GET my-index-000001/_search
{
  "retriever": {
    "rule": {
      "match_criteria": {
        "query_string": "puggles",
        "user_country": "us"
      },
      "ruleset_ids": [
        "my-ruleset"
      ],
      "retriever": {
        "rrf": {
          "retrievers": [
            {
              "standard": {
                "query": {
                  "query_string": {
                    "query": "pugs"
                  }
                }
              }
            },
            {
              "standard": {
                "query": {
                  "query_string": {
                    "query": "puggles"
                  }
                }
              }
            }
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Customizing ICU Folding with Unicode Set Filter in Elasticsearch
DESCRIPTION: This example shows how to customize the ICU folding token filter using the unicode_set_filter parameter. It creates an analyzer that exempts Swedish characters from folding and adds a lowercase filter to ensure proper case handling.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-icu-folding.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT icu_sample
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "swedish_analyzer": {
            "tokenizer": "icu_tokenizer",
            "filter": [
              "swedish_folding",
              "lowercase"
            ]
          }
        },
        "filter": {
          "swedish_folding": {
            "type": "icu_folding",
            "unicode_set_filter": "[^åäöÅÄÖ]"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Setting Elasticsearch Cluster Name in YAML
DESCRIPTION: Sets the cluster name, which is used to identify and group nodes. All nodes in a cluster must share the same name. The default is 'elasticsearch', but it should be changed to something descriptive.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/miscellaneous-cluster-settings.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
cluster.name: logging-prod
```

----------------------------------------

TITLE: Calculating Sum Using ESQL SUM Function
DESCRIPTION: This ESQL query demonstrates the usage of the SUM function to calculate the total sum of the 'languages' field across all records in the 'employees' table. The STATS clause is used to perform the aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/sum.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS SUM(languages)
```

----------------------------------------

TITLE: Configuring Elasticsearch Regression Inference Processor (JSON)
DESCRIPTION: This snippet shows the configuration for an Elasticsearch inference processor specifically for regression tasks. It specifies the model ID to use, maps an input field (`original_fieldname`) to the name the model expects (`expected_fieldname`), and sets the target field for the regression results (`my_regression`).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/inference-processor.md#_snippet_3

LANGUAGE: JSON
CODE:
```
"inference":{
  "model_id": "my_model_id",
  "field_map": {
    "original_fieldname": "expected_fieldname"
  },
  "inference_config": {
    "regression": {
      "results_field": "my_regression"
    }
  }
}
```

----------------------------------------

TITLE: Configuring an Ingest Pipeline with Script Processor in Elasticsearch
DESCRIPTION: Creates an ingest pipeline named 'seats' with a script processor that parses date and time fields and converts them into a datetime field in ISO format.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-context-examples.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /_ingest/pipeline/seats
{
  "description": "update datetime for seats",
  "processors": [
    {
      "script": {
        "source": "String[] dateSplit = ctx.date.splitOnToken('-'); String year = dateSplit[0].trim(); String month = dateSplit[1].trim(); if (month.length() == 1) { month = '0' + month; } String day = dateSplit[2].trim(); if (day.length() == 1) { day = '0' + day; } boolean pm = ctx.time.substring(ctx.time.length() - 2).equals('PM'); String[] timeSplit = ctx.time.substring(0, ctx.time.length() - 2).splitOnToken(':'); int hours = Integer.parseInt(timeSplit[0].trim()); int minutes = Integer.parseInt(timeSplit[1].trim()); if (pm) { hours += 12; } String dts = year + '-' + month + '-' + day + 'T' + (hours < 10 ? '0' + hours : '' + hours) + ':' + (minutes < 10 ? '0' + minutes : '' + minutes) + ':00+08:00'; ZonedDateTime dt = ZonedDateTime.parse(dts, DateTimeFormatter.ISO_OFFSET_DATE_TIME); ctx.datetime = dt.getLong(ChronoField.INSTANT_SECONDS)*1000L;"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Calculating Standard Deviation of a Single Column in ESQL
DESCRIPTION: A simple example of using STD_DEV to calculate the standard deviation of height values in an employees table. Returns a single numeric value representing the standard deviation of the height column.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/std_dev.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS STD_DEV(height)
```

----------------------------------------

TITLE: Document Indexing with Custom Routing in Elasticsearch
DESCRIPTION: Example of indexing a document with a custom routing value that determines which shard the document is stored on. Includes timestamp and user data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-shard-routing.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /my-index-000001/_doc?routing=my-routing-value
{
  "@timestamp": "2099-11-15T13:12:00",
  "message": "GET /search HTTP/1.1 200 1070000",
  "user": {
    "id": "kimchy"
  }
}
```

----------------------------------------

TITLE: Indexing a Polygon Geometry using WKT in Elasticsearch
DESCRIPTION: Adds a document to the 'example' index with a Polygon geometry specified in Well-Known Text (WKT) format. The polygon is defined by five points forming a closed shape, with the first and last points being identical.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-shape.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
POST /example/_doc
{
  "location" : "POLYGON ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0))"
}
```

----------------------------------------

TITLE: Querying Significant Terms with Single Set Analysis (Elasticsearch Console)
DESCRIPTION: Shows how to use the `significant_terms` aggregation to find unusual terms in a subset of documents defined by a query. It compares the frequency of `crime_type` terms in documents where `force` is "British Transport Police" against the overall index frequency. The response shows the significant terms (`Bicycle theft`) and their statistics (`doc_count`, `score`, `bg_count`). This is useful for analyzing anomalies within specific search results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-significantterms-aggregation.md#_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "terms": { "force": [ "British Transport Police" ] }
  },
  "aggregations": {
    "significant_crime_types": {
      "significant_terms": { "field": "crime_type" }
    }
  }
}
```

----------------------------------------

TITLE: Filtering Significant Terms by Min Document Count (Console/JSON)
DESCRIPTION: Shows an example of using the `min_doc_count` parameter within a `significant_terms` aggregation in an Elasticsearch search request. This parameter filters the final list of significant terms, only including those that appear in a global count greater than or equal to the specified value (10 in this example).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-significantterms-aggregation.md#_snippet_11

LANGUAGE: console
CODE:
```
GET /_search
{
  "aggs": {
    "tags": {
      "significant_terms": {
        "field": "tag",
        "min_doc_count": 10
      }
    }
  }
}
```

----------------------------------------

TITLE: Example Response from Stats Aggregation in Elasticsearch
DESCRIPTION: This snippet shows the expected response format from a stats aggregation. It includes the count of documents, minimum and maximum values, average, and sum of the aggregated field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-stats-aggregation.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  ...

  "aggregations": {
    "grades_stats": {
      "count": 2,
      "min": 50.0,
      "max": 100.0,
      "avg": 75.0,
      "sum": 150.0
    }
  }
}
```

----------------------------------------

TITLE: Syntax for DAY_OF_MONTH Function in Elasticsearch SQL
DESCRIPTION: Defines the syntax for the DAY_OF_MONTH function (also aliased as DOM, DAY). It takes a date or datetime expression and extracts the day component. Returns null if the input is null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_56

LANGUAGE: SQL
CODE:
```
DAY_OF_MONTH(datetime_exp) <1>
```

----------------------------------------

TITLE: Executing Geo-polygon Query with Array Format
DESCRIPTION: This snippet shows how to perform a geo-polygon query using array format for defining geo-points. This format uses longitude-latitude pairs per the GeoJSON standard. The snippet requires Elasticsearch to process array-formatted geo-coordinates and outputs query matches.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-polygon-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_polygon": {
          "person.location": {
            "points": [
              [ -70, 40 ],
              [ -80, 30 ],
              [ -90, 20 ]
            ]
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Using FLOOR Function in ESQL to Round Down Values
DESCRIPTION: Example showing how to use the FLOOR function to round down a decimal value to the nearest integer. The function takes a numeric input and returns the largest integer less than or equal to the input value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/floor.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=1.8
| EVAL a=FLOOR(a)
```

----------------------------------------

TITLE: Parsing RFC 1123 DateTime
DESCRIPTION: Demonstrates parsing an RFC 1123 formatted datetime string using a built-in DateTimeFormatter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_2

LANGUAGE: painless
CODE:
```
String datetime = 'Thu, 13 Oct 1983 22:15:30 GMT';
ZonedDateTime zdt = ZonedDateTime.parse(datetime,
        DateTimeFormatter.RFC_1123_DATE_TIME);
```

----------------------------------------

TITLE: Change the password of the existing Elasticsearch keystore
DESCRIPTION: Updates the password of an existing Elasticsearch keystore. Prompts for the current and new passwords if the keystore is protected.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/elasticsearch-keystore.md#_snippet_1

LANGUAGE: Shell
CODE:
```
bin/elasticsearch-keystore passwd
```

----------------------------------------

TITLE: Performing Complex QUERY String Query SQL
DESCRIPTION: Shows how the QUERY predicate can execute complex query strings that utilize various features supported by Elasticsearch's `query_string` query, such as `_exists_`, range queries, regex (`/regex/`), and fuzziness (`~`).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-search.md#_snippet_6

LANGUAGE: SQL
CODE:
```
SELECT author, name, page_count, SCORE() FROM library WHERE QUERY('_exists_:"author" AND page_count:>200 AND (name:/star.*/ OR name:duna~)');
```

----------------------------------------

TITLE: Removing Persistent Cluster Settings
DESCRIPTION: Demonstrates how to remove specific persistent cluster settings that might prevent cluster formation. Includes examples of both specific setting removal and wildcard pattern usage.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/node-tool.md#2025-04-21_snippet_5

LANGUAGE: txt
CODE:
```
node$ ./bin/elasticsearch-node remove-settings xpack.monitoring.exporters.my_exporter.host

    WARNING: Elasticsearch MUST be stopped before running this tool.

The following settings will be removed:
xpack.monitoring.exporters.my_exporter.host: "10.1.2.3"

You should only run this tool if you have incompatible settings in the
cluster state that prevent the cluster from forming.
This tool can cause data loss and its use should be your last resort.

Do you want to proceed?

Confirm [y/N] y

Settings were successfully removed from the cluster state
```

LANGUAGE: txt
CODE:
```
node$ ./bin/elasticsearch-node remove-settings xpack.monitoring.*
```

----------------------------------------

TITLE: Basic NOW() Function Usage in ESQL
DESCRIPTION: Shows how to get the current date using NOW() function and assign it to a variable named current_date.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/now.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW current_date = NOW()
```

----------------------------------------

TITLE: String Concatenation with Space in ESQL
DESCRIPTION: Demonstrates how to concatenate strings with a single space between them using CONCAT and SPACE functions. Creates a 'Hello World!' message by joining 'Hello' and 'World!' with a single space character.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/space.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW message = CONCAT("Hello", SPACE(1), "World!");
```

----------------------------------------

TITLE: Configuring Custom Stop Analyzer in Elasticsearch
DESCRIPTION: This example shows how to configure a custom stop analyzer with a specified list of stop words. It includes the index creation with custom settings and an example of using the custom analyzer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-analyzer.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_stop_analyzer": {
          "type": "stop",
          "stopwords": ["the", "over"]
        }
      }
    }
  }
}

POST my-index-000001/_analyze
{
  "analyzer": "my_stop_analyzer",
  "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
}
```

LANGUAGE: text
CODE:
```
[ quick, brown, foxes, jumped, lazy, dog, s, bone ]
```

----------------------------------------

TITLE: Query Elasticsearch SQL using Text Field with Implicit Multi-field (SQL)
DESCRIPTION: This SQL query selects the `first_name` field and filters based on an exact match. When querying a `text` field with a `keyword` multi-field (like the `raw` field in the provided mapping), Elasticsearch SQL automatically uses the `keyword` multi-field for the exact comparison, making this query equivalent to explicitly querying the multi-field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-data-types.md#_snippet_1

LANGUAGE: SQL
CODE:
```
SELECT first_name FROM index WHERE first_name = 'John'
```

----------------------------------------

TITLE: Example Access Control Index Document
DESCRIPTION: This JavaScript code snippet shows an example document from the access control index created by the SharePoint Online connector. The document contains the Elasticsearch query that describes which documents a specific user has access to, based on the `access_control` field. This example is used to configure DLS for the user `john@example.com`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-dls-e2e-guide.md#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
{
  "_index": ".search-acl-filter-search-sharepoint",
  "_id": "john@example.co",
  "_version": 1,
  "_seq_no": 0,
  "_primary_term": 1,
  "found": true,
  "_source": {
    "identity": {
      "email": "john@example.co",
      "access_control": [
        "john@example.co",
        "Engineering Members"
      ]
    },
    "query": {
      "template": {
        "params": {
          "access_control": [
            "john@example.co",
            "Engineering Members"
            ]
        },
        "source": """
        {
          "bool": {
            "should": [
              {
                "bool": {
                  "must_not": {
                    "exists": {
                      "field": "_allow_access_control"
                    }
                  }
                }
              },
              {
                "terms": {
                  "_allow_access_control.enum": {{#toJson}}access_control{{/toJson}}
                }
              }
            ]
          }
        }
        """
      }
    }
  }
}
```

----------------------------------------

TITLE: Ordered All_Of Rule with Max_Gaps in Elasticsearch Intervals Query
DESCRIPTION: Example of using the all_of rule with ordered=true and max_gaps constraints to find documents containing specific phrase sequences with controlled gap sizes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-intervals-query.md#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
POST _search
{
  "query": {
    "intervals" : {
      "my_text" : {
        "all_of" : {
          "ordered" : true,     
          "max_gaps": 1,
          "intervals" : [
            {
              "match" : {
                "query" : "my favorite food",
                "max_gaps" : 0,
                "ordered" : true
              }
            },
            {
              "match" : {
                "query" : "cold porridge",
                "max_gaps" : 4,
                "ordered" : true
              }
            }
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Synthetic _source in Elasticsearch Index Settings (console)
DESCRIPTION: This snippet demonstrates how to enable synthetic `_source` for a new or existing Elasticsearch index named 'idx'. It sets the `index.mapping.source.mode` setting within the index's configuration to "synthetic". This feature reconstructs the source document at retrieval time instead of storing the full original source on disk, saving storage space. Requires an Elasticsearch cluster and a client capable of sending PUT requests (like `curl`).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-source-field.md#_snippet_0

LANGUAGE: console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring _source Includes/Excludes for an Index - Console
DESCRIPTION: This snippet shows how to create an index (`logs`) and configure the `_source` mapping to include specific fields matching patterns (`*.count`, `meta.*`) and exclude others (`meta.description`, `meta.other.*`). This allows partial source storage.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-source-field.md#_snippet_16

LANGUAGE: console
CODE:
```
PUT logs
{
  "mappings": {
    "_source": {
      "includes": [
        "*.count",
        "meta.*"
      ],
      "excludes": [
        "meta.description",
        "meta.other.*"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Splitting a String in ESQL
DESCRIPTION: This snippet demonstrates the use of the SPLIT function in ESQL to divide a single-valued string into multiple components based on a delimiter. The variable 'words' holds a semicolon-separated list, and the SPLIT function generates an array of individual words as output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/split.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW words="foo;bar;baz;qux;quux;corge"
| EVAL word = SPLIT(words, ";")
```

----------------------------------------

TITLE: Basic Combined Fields Query in Elasticsearch
DESCRIPTION: Demonstrates a simple combined fields query across multiple document fields with AND operator, searching for the phrase 'database systems'
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-combined-fields-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "combined_fields" : {
      "query":      "database systems",
      "fields":     [ "title", "abstract", "body"],
      "operator":   "and"
    }
  }
}
```

----------------------------------------

TITLE: Using SUM Function in Elasticsearch SQL
DESCRIPTION: Demonstrates calculating the total sum of values in the 'salary' field from the 'emp' index/table.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_34

LANGUAGE: SQL
CODE:
```
SELECT SUM(salary) AS sum FROM emp;
```

----------------------------------------

TITLE: Lat-Lon Properties Geo Sort in Elasticsearch
DESCRIPTION: Demonstrates geo-distance sorting using latitude and longitude as separate properties.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/sort-search-results.md#2025-04-21_snippet_13

LANGUAGE: console
CODE:
```
GET /_search
{
  "sort" : [
    {
      "_geo_distance" : {
        "pin.location" : {
          "lat" : 40,
          "lon" : -70
        },
        "order" : "asc",
        "unit" : "km"
      }
    }
  ],
  "query" : {
    "term" : { "user" : "kimchy" }
  }
}
```

----------------------------------------

TITLE: Language Analyzers in Elasticsearch
DESCRIPTION: Specialized analyzers for specific languages like English and French, providing language-specific text analysis.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analyzer-reference.md#2025-04-21_snippet_6

LANGUAGE: elasticsearch
CODE:
```
"analyzer": "english"
```

----------------------------------------

TITLE: Filtering Source with Wildcard in Elasticsearch Console
DESCRIPTION: This console command shows how to use a single wildcard pattern (`obj.*`) in the `_source` parameter of a search request to include only fields that match the pattern. This is a form of source filtering that avoids returning the entire original document source.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_15

LANGUAGE: console
CODE:
```
GET /_search
{
  "_source": "obj.*",
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  }
}
```

----------------------------------------

TITLE: Range Querying in YAML Using KQL
DESCRIPTION: This snippet illustrates how to perform range queries with KQL. It shows how to search for documents with field values below, above, or between specific thresholds, including examples for inclusive ranges, strings, and timestamps.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/kql.md#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
http.response.bytes < 10000
```

LANGUAGE: yaml
CODE:
```
http.response.bytes > 10000 and http.response.bytes <= 20000
```

LANGUAGE: yaml
CODE:
```
@timestamp < now-2w
```

----------------------------------------

TITLE: Multiple Inner Hits for Collapsed Results
DESCRIPTION: Demonstrates requesting multiple representations of collapsed hits by defining multiple inner_hits configurations. This example retrieves both the largest responses and most recent responses for each user.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/collapse-search-results.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search
{
  "query": {
    "match": {
      "message": "GET /search"
    }
  },
  "collapse": {
    "field": "user.id",                   <1>
    "inner_hits": [
      {
        "name": "largest_responses",      <2>
        "size": 3,
        "sort": [
          {
            "http.response.bytes": {
              "order": "desc"
            }
          }
        ]
      },
      {
        "name": "most_recent",             <3>
        "size": 3,
        "sort": [
          {
            "@timestamp": {
              "order": "desc"
            }
          }
        ]
      }
    ]
  },
  "sort": [
    "http.response.bytes"
  ]
}
```

----------------------------------------

TITLE: Selecting Columns with KEEP Clause in ESQL
DESCRIPTION: This ESQL query selects specific columns from the 'employees' table using the KEEP clause. It explicitly keeps the 'first_name' and 'last_name' columns, as well as any columns that start with 'first_name' using a wildcard.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/keepCompleteName.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP first_name, last_name, first_name*
```

----------------------------------------

TITLE: Example Connector Configuration File - YAML
DESCRIPTION: This YAML snippet provides an example configuration for the connector service, specifically tailored for connecting to a Dockerized Elasticsearch instance and running a PostgreSQL connector. It includes settings for the Elasticsearch host, API key, and the specific connector ID, service type, and optional connector-specific API key.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-postgresql.md#_snippet_3

LANGUAGE: yaml
CODE:
```
# When connecting to your cloud deployment you should edit the host value
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: postgresql
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA> # Optional. If not provided, the connector will use the elasticsearch.api_key instead
```

----------------------------------------

TITLE: Installing the ICU Analysis Plugin for Elasticsearch
DESCRIPTION: Example command for installing the ICU analysis plugin for Elasticsearch. This core plugin provides Unicode normalization, collation and folding capabilities.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/installing-multiple-plugins.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
sudo bin/elasticsearch-plugin install analysis-icu
```

----------------------------------------

TITLE: Combined Text Expansion Queries with Boolean Logic in Elasticsearch
DESCRIPTION: Demonstrates how to combine multiple text expansion queries with traditional full-text queries using boolean logic. This example searches across both title and description fields with different boost values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-text-expansion-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET my-index/_search
{
  "query": {
    "bool": {
      "should": [
        {
          "text_expansion": {
            "ml.inference.title_expanded.predicted_value": {
              "model_id": ".elser_model_2",
              "model_text": "How is the weather in Jamaica?",
              "boost": 1
            }
          }
        },
        {
          "text_expansion": {
            "ml.inference.description_expanded.predicted_value": {
              "model_id": ".elser_model_2",
              "model_text": "How is the weather in Jamaica?",
              "boost": 1
            }
          }
        },
        {
          "multi_match": {
            "query": "How is the weather in Jamaica?",
            "fields": [
              "title",
              "description"
            ],
            "boost": 4
          }
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Basic SELECT Statement Syntax in Elasticsearch SQL
DESCRIPTION: The complete syntax for SELECT statements in Elasticsearch SQL, showing all possible clauses including FROM, WHERE, GROUP BY, HAVING, ORDER BY, LIMIT, and PIVOT options.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
SELECT [TOP [ count ] ] select_expr [, ...]
[ FROM table_name ]
[ WHERE condition ]
[ GROUP BY grouping_element [, ...] ]
[ HAVING condition]
[ ORDER BY expression [ ASC | DESC ] [, ...] ]
[ LIMIT [ count ] ]
[ PIVOT ( aggregation_expr FOR column IN ( value [ [ AS ] alias ] [, ...] ) ) ]
```

----------------------------------------

TITLE: Elasticsearch Query DSL Settings
DESCRIPTION: Setting to control whether expensive queries are allowed in Elasticsearch. This setting can be used to prevent execution of queries that may impact cluster stability due to high computational costs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/querydsl.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
"search.allow_expensive_queries": false
```

----------------------------------------

TITLE: Fetch Profile Result in Elasticsearch (Console Result)
DESCRIPTION: Shows the detailed fetch profile output from Elasticsearch, including timing breakdowns for various fetch operations and debug information about stored fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-profile.md#2025-04-21_snippet_12

LANGUAGE: console-result
CODE:
```
{
  "profile": {
    "shards": [
      {
        "fetch": {
          "type": "fetch",
          "description": "",
          "time_in_nanos": 660555,
          "breakdown": {
            "next_reader": 7292,
            "next_reader_count": 1,
            "load_stored_fields": 299325,
            "load_stored_fields_count": 5,
            "load_source": 3863,
            "load_source_count": 5
          },
          "debug": {
            "stored_fields": ["_id", "_routing", "_source"]
          },
          "children": [
            {
              "type" : "FetchFieldsPhase",
              "description" : "",
              "time_in_nanos" : 238762,
              "breakdown" : {
                "process_count" : 5,
                "process" : 227914,
                "next_reader" : 10848,
                "next_reader_count" : 1
              }
            },
            {
              "type": "FetchSourcePhase",
              "description": "",
              "time_in_nanos": 20443,
              "breakdown": {
                "next_reader": 745,
                "next_reader_count": 1,
                "process": 19698,
                "process_count": 5
              },
              "debug": {
                "fast_path": 4
              }
            },
            {
              "type": "StoredFieldsPhase",
              "description": "",
              "time_in_nanos": 5310,
              "breakdown": {
                "next_reader": 745,
                "next_reader_count": 1,
                "process": 4445,
                "process_count": 5
              }
            }
          ]
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Configuring HTTP Anonymous Authentication in Elasticsearch
DESCRIPTION: YAML configuration for allowing anonymous access to Elasticsearch. This configuration permits unauthenticated access with a specific user role assigned to anonymous users.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/watcher/licenses/failureaccess-NOTICE.txt#2025-04-21_snippet_5

LANGUAGE: yaml
CODE:
```
xpack.security.http.authentication.type: anonymous
xpack.security.http.authentication.anonymous.username: anonymous_user
xpack.security.http.authentication.anonymous.roles: anonymous_user_role
xpack.security.http.authentication.anonymous.authz_exception: false
```

----------------------------------------

TITLE: Using LIKE Operator in Elasticsearch SQL
DESCRIPTION: The LIKE operator allows pattern matching in string comparisons using wildcards. The * wildcard matches zero or more characters, while the ? wildcard matches exactly one character. The operator can be used with field values or literal expressions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/layout/like.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
field LIKE pattern
```

----------------------------------------

TITLE: Select Data with Multi-target Pattern SQL
DESCRIPTION: Shows how to use the Elasticsearch multi-target syntax within a SELECT query. The quoted pattern "e*p" matches indices/tables starting with 'e' and ending with 'p'. Note the restriction that all resolved concrete tables must have the exact same mapping.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-index-patterns.md#_snippet_1

LANGUAGE: SQL
CODE:
```
SELECT emp_no FROM "e*p" LIMIT 1;
```

----------------------------------------

TITLE: HAVING Clause with GROUP BY
DESCRIPTION: Example of using HAVING clause to filter groups based on count between 15 and 20.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_21

LANGUAGE: sql
CODE:
```
SELECT languages AS l, COUNT(*) AS c FROM emp GROUP BY l HAVING c BETWEEN 15 AND 20;
```

----------------------------------------

TITLE: Histogram Aggregation with Missing Value Handling
DESCRIPTION: Example showing how to handle documents with missing values in a histogram aggregation by specifying a default value. Documents missing the aggregated field will be treated as having the specified value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-histogram-aggregation.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "quantity": {
      "histogram": {
        "field": "quantity",
        "interval": 10,
        "missing": 0 <1>
      }
    }
  }
}
```

----------------------------------------

TITLE: Auto Date Histogram with Missing Value Handling in Elasticsearch
DESCRIPTION: Example showing how to handle missing values in an auto date histogram aggregation. Documents without a value in the date field will be treated as if they had the specified default value ('2000/01/01').
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-autodatehistogram-aggregation.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "sale_date": {
      "auto_date_histogram": {
        "field": "date",
        "buckets": 10,
        "missing": "2000/01/01"
      }
    }
  }
}
```

----------------------------------------

TITLE: minimum_should_match with Explicit Operators and Multiple Fields
DESCRIPTION: Shows how explicit operators affect minimum_should_match behavior with multiple fields. Each term is considered a separate clause, creating a more complex boolean query where minimum_should_match is applied.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_21

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "query_string": {
      "fields": [
        "title",
        "content"
      ],
      "query": "this OR that OR thus",
      "minimum_should_match": 2
    }
  }
}
```

----------------------------------------

TITLE: Summing Languages in ESQL
DESCRIPTION: This query calculates the sum of the 'languages' field from the 'employees' table using the STATS clause with the SUM function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/sum.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS SUM(languages)
```

----------------------------------------

TITLE: Combining Queries Using Logical Operators in YAML
DESCRIPTION: This snippet showcases the combination of multiple KQL queries using logical operators like 'and' and 'or'. It also demonstrates the use of parentheses to determine precedence and shorthand syntax for multiple values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/kql.md#2025-04-21_snippet_5

LANGUAGE: yaml
CODE:
```
http.request.method: GET OR http.response.status_code: 400
```

LANGUAGE: yaml
CODE:
```
http.request.method: GET AND http.response.status_code: 400
```

LANGUAGE: yaml
CODE:
```
(http.request.method: GET AND http.response.status_code: 200) OR
(http.request.method: POST AND http.response.status_code: 400)
```

LANGUAGE: yaml
CODE:
```
http.request.method: (GET OR POST OR DELETE)
```

----------------------------------------

TITLE: Query Regsvr32 Events with EQL
DESCRIPTION: EQL query to count events associated with regsvr32.exe processes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-ex-threat-detection.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /my-data-stream/_eql/search?filter_path=-hits.events
{
  "query": """
    any where process.name == "regsvr32.exe"
  """,
  "size": 200
}
```

----------------------------------------

TITLE: Performing Significant Text Aggregation in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the `significant_text` aggregation in Elasticsearch. It queries the `news` index for documents matching 'Bird flu', samples the top 100 matching documents per shard, and then applies the `significant_text` aggregation to the `content` field within the sampled documents to find statistically unusual terms.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-significanttext-aggregation.md#_snippet_0

LANGUAGE: Console
CODE:
```
GET news/_search
{
  "query": {
    "match": { "content": "Bird flu" }
  },
  "aggregations": {
    "my_sample": {
      "sampler": {
        "shard_size": 100
      },
      "aggregations": {
        "keywords": {
          "significant_text": { "field": "content" }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Implementing Watch Condition with Aggregation Stream Processing
DESCRIPTION: Example of a watch configuration that uses Painless script to monitor theater revenue. The condition script uses Java Stream API to filter aggregation results and triggers when theaters have revenue outside the normal range (below $15000 or above $50000).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-watcher-condition-context.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
POST _watcher/watch/_execute
{
  "watch" : {
    "trigger" : { "schedule" : { "interval" : "24h" } },
    "input" : {
      "search" : {
        "request" : {
          "indices" : [ "seats" ],
          "body" : {
            "query" : {
              "term": { "sold": "true"}
            },
            "aggs" : {
              "theatres" : {
                "terms" : { "field" : "play" },
                "aggs" : {
                  "money" : {
                    "sum": { "field" : "cost" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "condition" : {
      "script" :
      """
        return ctx.payload.aggregations.theatres.buckets.stream()       
          .filter(theatre -> theatre.money.value < 15000 ||
                             theatre.money.value > 50000)               
          .count() > 0                                                  
      """
    },
    "actions" : {
      "my_log" : {
        "logging" : {
          "text" : "The output of the search was : {{ctx.payload.aggregations.theatres.buckets}}"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Grouping, Aggregation, and Sorting with ESQL
DESCRIPTION: This ESQL query creates a row with an integer and an array, performs a MIN aggregation grouped by array elements, and sorts the result. It demonstrates the use of ROW, STATS, and SORT clauses in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/stats.csv-spec/mv-group.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW i=1, a=["a", "b"] | STATS MIN(i) BY a | SORT a ASC
```

----------------------------------------

TITLE: Cardinality Aggregation with Missing Values
DESCRIPTION: Example demonstrating how to handle missing values in cardinality aggregation using the missing parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-cardinality-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "tag_cardinality": {
      "cardinality": {
        "field": "tag",
        "missing": "N/A"
      }
    }
  }
}
```

----------------------------------------

TITLE: Formatting Dates using DATE_FORMAT in ESQL
DESCRIPTION: Example query showing how to format a date field using DATE_FORMAT function with a specific pattern. The query keeps specific employee fields and creates a new column 'hired' with the formatted hire_date using 'yyyy-MM-dd' pattern.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/date_format.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP first_name, last_name, hire_date
| EVAL hired = DATE_FORMAT("yyyy-MM-dd", hire_date)
```

----------------------------------------

TITLE: Handling Missing Values in Elasticsearch Weighted Average Aggregation
DESCRIPTION: This example demonstrates how to use the 'missing' parameter to specify default values for documents with missing or null values in the weighted_avg aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-weight-avg-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /exams/_search
{
  "size": 0,
  "aggs": {
    "weighted_grade": {
      "weighted_avg": {
        "value": {
          "field": "grade",
          "missing": 2
        },
        "weight": {
          "field": "weight",
          "missing": 3
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Sample Configuration Download - Docker Setup - Shell
DESCRIPTION: This shell script snippet downloads a sample configuration file for using the Amazon S3 connector as a self-managed service in Docker. It uses curl to fetch the config from a specified URL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-s3.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
curl https://raw.githubusercontent.com/elastic/connectors/main/config.yml.example --output ~/connectors-config/config.yml
```

----------------------------------------

TITLE: Installing Elasticsearch HDFS Repository Plugin (Shell)
DESCRIPTION: This snippet shows the shell command to install the repository-hdfs plugin using the Elasticsearch plugin manager. The command must be executed on every node in the cluster, and nodes must be restarted after installation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/repository-hdfs.md#_snippet_0

LANGUAGE: Shell
CODE:
```
sudo bin/elasticsearch-plugin install repository-hdfs
```

----------------------------------------

TITLE: Configuring KV Processor in Elasticsearch
DESCRIPTION: This snippet demonstrates how to configure the KV processor to parse a log message containing key-value pairs. It specifies the field to be parsed, the delimiter for splitting key-value pairs, and the delimiter for splitting keys from values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/kv-processor.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
{
  "kv": {
    "field": "message",
    "field_split": " ",
    "value_split": "="
  }
}
```

----------------------------------------

TITLE: Creating Mappings with Join Field in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create an index with mappings that include a join field to establish parent-child relationships between questions and answers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-children-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT child_example
{
  "mappings": {
    "properties": {
      "join": {
        "type": "join",
        "relations": {
          "question": "answer"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Calculating Total Goals with Function Score Query in Painless
DESCRIPTION: Demonstrates using Painless in a function_score query to calculate the total goals for each player by summing the values in the goals array.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/brief-painless-walkthrough.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET hockey/_search
{
  "query": {
    "function_score": {
      "script_score": {
        "script": {
          "lang": "painless",
          "source": """
            int total = 0;
            for (int i = 0; i < doc['goals'].length; ++i) {
              total += doc['goals'][i];
            }
            return total;
          """
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Using Regular Expressions with Match Operator in Painless
DESCRIPTION: Updates hockey players whose last names start with a consonant and end with a vowel using the match operator (==~).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/brief-painless-walkthrough.md#2025-04-21_snippet_10

LANGUAGE: console
CODE:
```
POST hockey/_update_by_query
{
  "script": {
    "lang": "painless",
    "source": """
      if (ctx._source.last ==~ /[^aeiou].*[aeiou]/) {
        ctx._source.last += "matched";
      } else {
        ctx.op = "noop";
      }
    """
  }
}
```

----------------------------------------

TITLE: Updating Search Slow Log Settings for a Single Index
DESCRIPTION: This snippet demonstrates how to update search slow log settings for a specific index using the Elasticsearch Update Indices Settings API. It sets thresholds for different log levels and enables user information inclusion.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/slow-log.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
PUT /my-index-000001/_settings
{
  "index.search.slowlog.threshold.query.warn": "10s",
  "index.search.slowlog.threshold.query.info": "5s",
  "index.search.slowlog.threshold.query.debug": "2s",
  "index.search.slowlog.threshold.query.trace": "500ms",
  "index.search.slowlog.threshold.fetch.warn": "1s",
  "index.search.slowlog.threshold.fetch.info": "800ms",
  "index.search.slowlog.threshold.fetch.debug": "500ms",
  "index.search.slowlog.threshold.fetch.trace": "200ms",
  "index.search.slowlog.include.user": true
}
```

----------------------------------------

TITLE: Optimizing Scripted Similarity with Weight Script in Elasticsearch
DESCRIPTION: An example of how to optimize a scripted similarity in Elasticsearch by separating the document-independent calculations into a weight_script. This approach improves efficiency while maintaining the same scoring behavior.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/similarity.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
PUT /index
{
  "settings": {
    "number_of_shards": 1,
    "similarity": {
      "scripted_tfidf": {
        "type": "scripted",
        "weight_script": {
          "source": "double idf = Math.log((field.docCount+1.0)/(term.docFreq+1.0)) + 1.0; return query.boost * idf;"
        },
        "script": {
          "source": "double tf = Math.sqrt(doc.freq); double norm = 1/Math.sqrt(doc.length); return weight * tf * norm;"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "field": {
        "type": "text",
        "similarity": "scripted_tfidf"
      }
    }
  }
}
```

----------------------------------------

TITLE: Syntax for CURRENT_TIMESTAMP Function in Elasticsearch SQL
DESCRIPTION: This snippet presents the valid syntaxes for retrieving the current date and time when the query reaches the server in Elasticsearch SQL. It can be used as a keyword `CURRENT_TIMESTAMP` or as a function `CURRENT_TIMESTAMP()`, optionally accepting a precision argument for fractional seconds.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_19

LANGUAGE: SQL
CODE:
```
CURRENT_TIMESTAMP\nCURRENT_TIMESTAMP([precision]) <1>
```

----------------------------------------

TITLE: Array Access Operations in Painless
DESCRIPTION: Shows how to access and modify array elements using the array access operator '[]'. Includes examples with single-dimensional arrays, def type arrays, and multi-dimensional arrays.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-array.md#2025-04-21_snippet_1

LANGUAGE: painless
CODE:
```
int[] x = new int[2];
x[0] = 2;
x[1] = 5;
int y = x[0] + x[1];
int z = 1;
int i = x[z];
```

LANGUAGE: painless
CODE:
```
def d = new int[2];
d[0] = 2;
d[1] = 5;
def x = d[0] + d[1];
def y = 1;
def z = d[y];
```

LANGUAGE: painless
CODE:
```
int[][][] ia3 = new int[2][3][4];
ia3[1][2][3] = 99;
int i = ia3[1][2][3];
```

----------------------------------------

TITLE: Customizing Keyword Analyzer in Elasticsearch
DESCRIPTION: This snippet demonstrates how to recreate and customize the keyword analyzer as a custom analyzer in Elasticsearch. It provides a starting point for further customization by adding token filters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-keyword-analyzer.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /keyword_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "rebuilt_keyword": {
          "tokenizer": "keyword",
          "filter": [         <1>
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Analyzing Text with Keyword Analyzer in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the keyword analyzer in Elasticsearch. It shows an example of analyzing a sentence, which returns the entire input as a single token.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-keyword-analyzer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _analyze
{
  "analyzer": "keyword",
  "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
}
```

----------------------------------------

TITLE: Python script for indexing CBOR data with attachment processor
DESCRIPTION: Python script demonstrating how to read a file, encode it as CBOR, and send it to Elasticsearch using the attachment processor pipeline.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/attachment.md#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
import cbor2
import requests

file = 'my-file'
headers = {'content-type': 'application/cbor'}

with open(file, 'rb') as f:
  doc = {
    'data': f.read()
  }
  requests.put(
    'http://localhost:9200/my-index-000001/_doc/my_id?pipeline=cbor-attachment',
    data=cbor2.dumps(doc),
    headers=headers
  )
```

----------------------------------------

TITLE: Elasticsearch Croneval Command Syntax
DESCRIPTION: Shows the basic command syntax for elasticsearch-croneval including all available command line options.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/elasticsearch-croneval.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
bin/elasticsearch-croneval <expression>
[-c, --count <integer>] [-h, --help]
([-s, --silent] | [-v, --verbose])
```

----------------------------------------

TITLE: Querying Suggestions with Geo Location Context in Elasticsearch
DESCRIPTION: This example illustrates how to query suggestions using geo location context in Elasticsearch. It shows how to filter suggestions based on their proximity to a specified geo point, using the completion suggester.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_25

LANGUAGE: console
CODE:
```
POST place/_search
{
  "suggest": {
    "place_suggestion": {
      "prefix": "tim",
      "completion": {
        "field": "suggest",
        "size": 10,
        "contexts": {
          "location": {
            "lat": 43.662,
            "lon": -79.380
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Specifying Elasticsearch Highlighting Query (console)
DESCRIPTION: Illustrates how to use the `highlight_query` parameter within the `highlight.fields` section of an Elasticsearch `_search` request. This allows the highlighting logic to consider a query different from the main search query, such as incorporating a `rescore_query`, ensuring relevant terms are highlighted based on the combined criteria.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_3

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "match": {
      "comment": {
        "query": "foo bar"
      }
    }
  },
  "rescore": {
    "window_size": 50,
    "query": {
      "rescore_query": {
        "match_phrase": {
          "comment": {
            "query": "foo bar",
            "slop": 1
          }
        }
      },
      "rescore_query_weight": 10
    }
  },
  "_source": false,
  "highlight": {
    "order": "score",
    "fields": {
      "comment": {
        "fragment_size": 150,
        "number_of_fragments": 3,
        "highlight_query": {
          "bool": {
            "must": {
              "match": {
                "comment": {
                  "query": "foo bar"
                }
              }
            },
            "should": {
              "match_phrase": {
                "comment": {
                  "query": "foo bar",
                  "slop": 1,
                  "boost": 10.0
                }
              }
            },
            "minimum_should_match": 0
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Converting String Values to Datetime using TO_DATETIME in ESQL
DESCRIPTION: This example demonstrates converting a multi-valued string field to datetime objects. When a string value doesn't match the expected date format, it results in a null value and adds warning headers to the response.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_datetime.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW string = ["1953-09-02T00:00:00.000Z", "1964-06-02T00:00:00.000Z", "1964-06-02 00:00:00"]
| EVAL datetime = TO_DATETIME(string)
```

----------------------------------------

TITLE: Configuring Multiple Levels of Parent-Child Relations in Elasticsearch
DESCRIPTION: This example demonstrates how to set up multiple levels of parent-child relationships in an Elasticsearch join field. It creates a hierarchy with 'question' as the top-level parent, 'answer' and 'comment' as its children, and 'vote' as a child of 'answer'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/parent-join.md#2025-04-21_snippet_9

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "my_join_field": {
        "type": "join",
        "relations": {
          "question": ["answer", "comment"],  <1>
          "answer": "vote" <2>
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Geo-distance query with Geohash in Elasticsearch
DESCRIPTION: This snippet showcases the use of the `geo_distance` filter with a Geohash string specified within the `pin.location` field. The query searches for documents within a 12km radius of the location represented by the Geohash.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-distance-query.md#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
GET /my_locations/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_distance": {
          "distance": "12km",
          "pin.location": "drm3btev3e86"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Create Index with Specific Store Type using PUT (Console)
DESCRIPTION: This snippet shows how to create a new Elasticsearch index (`my-index-000001`) using a console command simulating an HTTP PUT request. It includes a JSON payload in the request body that explicitly sets the `index.store.type` setting for this specific index to `smb_mmap_fs` during its creation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/store-smb-usage.md#_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
   "settings": {
       "index.store.type": "smb_mmap_fs"
   }
}
```

----------------------------------------

TITLE: Enabling Percentage Score
DESCRIPTION: Configures the significant_terms aggregation to use a simple percentage calculation (foreground count / background count) as the significance score. This heuristic favors rare terms and is often combined with `min_doc_count` and `shard_min_doc_count`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-significantterms-aggregation.md#_snippet_9

LANGUAGE: JSON
CODE:
```
	 "percentage": {
	 }
```

----------------------------------------

TITLE: Filtering Geographic Data with ST_WITHIN in ESQL
DESCRIPTION: This query selects airports whose city boundaries fall within a specified polygon area. It uses the ST_WITHIN function to perform the geospatial containment test and keeps only relevant columns in the output. The example returns information about Sanya Phoenix International Airport which is located within the specified coordinates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/st_within.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airport_city_boundaries
| WHERE ST_WITHIN(city_boundary, TO_GEOSHAPE("POLYGON((109.1 18.15, 109.6 18.15, 109.6 18.65, 109.1 18.65, 109.1 18.15))"))
| KEEP abbrev, airport, region, city, city_location
```

----------------------------------------

TITLE: Configuring Custom Word Delimiter Graph Filter in Elasticsearch
DESCRIPTION: This snippet demonstrates how to define a custom `word_delimiter_graph` token filter within the analysis settings of an Elasticsearch index. It shows how to set parameters like `type_table` for custom character mappings and control splitting behaviors (`split_on_case_change`, `split_on_numerics`, `stem_english_possessive`) using the index PUT API. Requires an Elasticsearch instance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-word-delimiter-graph-tokenfilter.md#_snippet_2

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "keyword",
          "filter": [ "my_custom_word_delimiter_graph_filter" ]
        }
      },
      "filter": {
        "my_custom_word_delimiter_graph_filter": {
          "type": "word_delimiter_graph",
          "type_table": [ "- => ALPHA" ],
          "split_on_case_change": false,
          "split_on_numerics": false,
          "stem_english_possessive": true
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Analyzing Text with Letter Tokenizer in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the letter tokenizer in Elasticsearch to analyze a sample text. It sends a POST request to the _analyze endpoint with the tokenizer set to 'letter' and provides a sample text to tokenize.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-letter-tokenizer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _analyze
{
  "tokenizer": "letter",
  "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
}
```

----------------------------------------

TITLE: Categorizing and Counting Server Log Messages with ESQL
DESCRIPTION: This ESQL query reads data from the 'sample_data' source, categorizes messages using the CATEGORIZE function, and counts the occurrences of each category. The result is grouped by the categorized message.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/categorize.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM sample_data
| STATS count=COUNT() BY category=CATEGORIZE(message)
```

----------------------------------------

TITLE: Defining Custom Spanish Analyzer in Elasticsearch
DESCRIPTION: This snippet configures a custom analyzer for the Spanish language in Elasticsearch. It utilizes filters for stopwords, keyword marking, and light stemming to process Spanish text inputs effectively. Ensure that Elasticsearch is properly set up with relevant language plugins for accurate results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_26

LANGUAGE: console
CODE:
```
PUT /spanish_example
{
  "settings": {
    "analysis": {
      "filter": {
        "spanish_stop": {
          "type":       "stop",
          "stopwords":  "_spanish_" <1>
        },
        "spanish_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["ejemplo"] <2>
        },
        "spanish_stemmer": {
          "type":       "stemmer",
          "language":   "light_spanish"
        }
      },
      "analyzer": {
        "rebuilt_spanish": {
          "tokenizer":  "standard",
          "filter": [
            "lowercase",
            "spanish_stop",
            "spanish_keywords",
            "spanish_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Indexing Slow Log Settings in YAML
DESCRIPTION: This snippet shows how to configure indexing slow log settings in the log4j2.properties file using YAML format. It sets thresholds for different log levels, configures source logging, and enables user information inclusion.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/slow-log.md#2025-04-21_snippet_4

LANGUAGE: yaml
CODE:
```
index.indexing.slowlog.threshold.index.warn: 10s
index.indexing.slowlog.threshold.index.info: 5s
index.indexing.slowlog.threshold.index.debug: 2s
index.indexing.slowlog.threshold.index.trace: 500ms

index.indexing.slowlog.source: 1000
index.indexing.slowlog.reformat: true

index.indexing.slowlog.include.user: true
```

----------------------------------------

TITLE: Offset Bucket Dates in ESQL
DESCRIPTION: Shows how to adjust bucket start values by adding an offset to the dates before bucketing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/bucket.md#2025-04-21_snippet_9

LANGUAGE: esql
CODE:
```
FROM employees
| STATS dates = MV_SORT(VALUES(birth_date)) BY b = BUCKET(birth_date + 1 HOUR, 1 YEAR) - 1 HOUR
| EVAL d_count = MV_COUNT(dates)
```

----------------------------------------

TITLE: Analyzing Unique DNS Queries per Registered Domain with ESQL
DESCRIPTION: This query processes DNS logs to find high numbers of unique DNS queries per registered domain. It uses GROK pattern matching to extract the registered domain, counts distinct queries, and filters for results with more than 10 unique queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-examples.md#2025-04-21_snippet_2

LANGUAGE: esql
CODE:
```
FROM logs-*
| GROK dns.question.name "%{DATA}\\.%{GREEDYDATA:dns.question.registered_domain:string}"
| STATS unique_queries = COUNT_DISTINCT(dns.question.name) BY dns.question.registered_domain, process.name
| WHERE unique_queries > 10
| SORT unique_queries DESC
| RENAME unique_queries AS `Unique Queries`, dns.question.registered_domain AS `Registered Domain`, process.name AS `Process`
```

----------------------------------------

TITLE: Composite Aggregation with Rate Calculation
DESCRIPTION: Demonstrates using composite aggregation with date_histogram to calculate daily sale prices per item type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-rate-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET sales/_search?filter_path=aggregations&size=0
{
  "aggs": {
    "buckets": {
      "composite": {
        "sources": [
          {
            "month": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "month"
              }
            }
          },
          {
            "type": {
              "terms": {
                "field": "type"
              }
            }
          }
        ]
      },
      "aggs": {
        "avg_price": {
          "rate": {
            "field": "price",
            "unit": "day"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing GeoShape Data in Elasticsearch
DESCRIPTION: This code snippet demonstrates how to index a document with `geo_shape` data in Elasticsearch. It inserts a document into the `example` index with a `location` field defined as a point using GeoJSON format. The refresh parameter ensures the document is immediately searchable.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-shape-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /example/_doc?refresh
{
  "name": "Wind & Wetter, Berlin, Germany",
  "location": {
    "type": "point",
    "coordinates": [ 13.400544, 52.530286 ]
  }
}
```

----------------------------------------

TITLE: Parsing Source Document Datetime in Painless
DESCRIPTION: This snippet explains how to convert datetime information from a source document into ZonedDateTime objects in Painless. It includes parsing both numeric and string datetimes while highlighting dependencies on context.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_18

LANGUAGE: JSON
CODE:
```
{
  ...
  "input_datetime": 434931327000
  ...
}
```

LANGUAGE: painless
CODE:
```
long inputDateTime = ctx['_source']['input_datetime']; <1>
Instant instant = Instant.ofEpochMilli(inputDateTime);
ZonedDateTime zdt = ZonedDateTime.ofInstant(instant, ZoneId.of('Z'));
```

LANGUAGE: JSON
CODE:
```
{
  ...
  "input_datetime": "1983-10-13T22:15:30Z"
  ...
}
```

LANGUAGE: painless
CODE:
```
String datetime = params['_source']['input_datetime']; <1>
ZonedDateTime zdt = ZonedDateTime.parse(datetime); <2>
```

----------------------------------------

TITLE: Converting Array of Strings to Lowercase in ESQL
DESCRIPTION: This snippet shows how to use the TO_LOWER function with an array of strings in ESQL. It creates a row with a variable 'v' that contains the result of applying TO_LOWER to an array of strings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_lower.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
ROW v = TO_LOWER(["Some", "Text"])
```

----------------------------------------

TITLE: Create Index with Default Edge n-gram Analyzer (Console)
DESCRIPTION: This example shows how to create an Elasticsearch index with a custom analyzer that uses the default `edge_ngram` token filter. The analyzer `standard_edge_ngram` combines the standard tokenizer with the `edge_ngram` filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-edgengram-tokenfilter.md#_snippet_1

LANGUAGE: console
CODE:
```
PUT edge_ngram_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "standard_edge_ngram": {
          "tokenizer": "standard",
          "filter": [ "edge_ngram" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Synonym Filter with Synonyms File in Elasticsearch
DESCRIPTION: Example of configuring a synonym filter using a synonyms file. The 'synonyms_path' option specifies the path to the synonym file relative to the config location.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-synonym-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "filter": {
    "synonyms_filter": {
      "type": "synonym",
      "synonyms_path": "analysis/synonym-set.txt"
    }
  }
}
```

----------------------------------------

TITLE: Decoding Base64 String using FROM_BASE64 in ESQL
DESCRIPTION: This snippet demonstrates how to use the FROM_BASE64 function to decode a base64 encoded string in ESQL. It creates a row with a base64 encoded value and then decodes it using the FROM_BASE64 function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/from_base64.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = "ZWxhc3RpYw=="
| EVAL d = FROM_BASE64(a)
```

----------------------------------------

TITLE: CIDR Match Function in Elasticsearch
DESCRIPTION: Evaluates if the `source_address` resides within specified CIDR blocks, such as '10.0.0.0/8'. Leverages Elasticsearch's IP range queries within a term context to perform the check.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_16

LANGUAGE: Elasticsearch
CODE:
```
{"bool":{"must":[{"term":{"event.category":{"value":"process"}}},{"terms":{"source_address":["10.0.0.0/8"]}}]}}
```

----------------------------------------

TITLE: Monthly Sales Max Bucket Query in Elasticsearch
DESCRIPTION: Example query that calculates the maximum total monthly sales using date histogram and sum aggregations with max_bucket pipeline aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-max-bucket-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "size": 0,
  "aggs": {
    "sales_per_month": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "sales": {
          "sum": {
            "field": "price"
          }
        }
      }
    },
    "max_monthly_sales": {
      "max_bucket": {
        "buckets_path": "sales_per_month>sales"
      }
    }
  }
}
```

----------------------------------------

TITLE: COUNT_DISTINCT with SPLIT Function in ESQL
DESCRIPTION: Demonstrates combining COUNT_DISTINCT with the SPLIT function to count unique values from a delimited string. The example splits a semicolon-delimited string and counts distinct values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/count_distinct.md#2025-04-21_snippet_2

LANGUAGE: esql
CODE:
```
ROW words="foo;bar;baz;qux;quux;foo"
| STATS distinct_word_count = COUNT_DISTINCT(SPLIT(words, ";"))
```

----------------------------------------

TITLE: Updating extension name using local file method in Elasticsearch Service
DESCRIPTION: API call to update the name of an existing extension created with the local file method. Only updates metadata without requiring the file to be re-uploaded.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-plugins-guide.md#2025-04-21_snippet_12

LANGUAGE: sh
CODE:
```
curl -X POST \
  https://api.elastic-cloud.com/api/v1/deployments/extensions/EXTENSION_ID \
  -H "Authorization: ApiKey $CLOUD_API_KEY" \
  -H 'Content-Type: application/json' \
  -d '{
   "extension_type" : "plugin",
    "name": "custom-plugin-07012020",
   "version" : "8.4.3"
}'
```

----------------------------------------

TITLE: Calculating Median Salary Using ESQL MEDIAN Function
DESCRIPTION: This ESQL query demonstrates how to use the MEDIAN function to calculate the median salary from an 'employees' data source. It also shows the equivalence of MEDIAN to the 50th PERCENTILE.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/median.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS MEDIAN(salary), PERCENTILE(salary, 50)
```

----------------------------------------

TITLE: Trimming and Formatting Strings with RTRIM and CONCAT in ESQL
DESCRIPTION: This ESQL query demonstrates the use of RTRIM to remove trailing whitespace from 'message' and 'color' fields, followed by CONCAT to add single quotes around the trimmed values. It showcases string manipulation and formatting in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/rtrim.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW message = "   some text  ",  color = " red "
| EVAL message = RTRIM(message)
| EVAL color = RTRIM(color)
| EVAL message = CONCAT("'", message, "'")
| EVAL color = CONCAT("'", color, "'")
```

----------------------------------------

TITLE: Analyzing Text with Classic Tokenizer in Elasticsearch
DESCRIPTION: Example of using the classic tokenizer to analyze an English text string. Shows how the tokenizer handles numbers, hyphens, and punctuation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-classic-tokenizer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _analyze
{
  "tokenizer": "classic",
  "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
}
```

LANGUAGE: text
CODE:
```
[ The, 2, QUICK, Brown, Foxes, jumped, over, the, lazy, dog's, bone ]
```

----------------------------------------

TITLE: Querying Geo-Distance in Elasticsearch
DESCRIPTION: This snippet shows an Elasticsearch query for finding points within a certain distance using the geo_distance parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_14

LANGUAGE: JSON
CODE:
```
{"geo_distance":{"point":[10.0,20.0],"distance":25.0,"distance_type":"arc","validation_method":"STRICT
```

----------------------------------------

TITLE: Converting Strings to Datetime in ESQL
DESCRIPTION: This snippet demonstrates how to use the TO_DATETIME function to convert string representations of dates to datetime values. It handles ISO 8601 formatted strings and shows how to apply the function to multiple values in a row.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_datetime.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW string = ["1953-09-02T00:00:00.000Z", "1964-06-02T00:00:00.000Z", "1964-06-02 00:00:00"]
| EVAL datetime = TO_DATETIME(string)
```

----------------------------------------

TITLE: Converting Numeric to String using TO_STRING in ESQL
DESCRIPTION: This snippet demonstrates how to use the TO_STRING function in ESQL to convert a numeric value into a string. It creates a row with a numeric value and then uses TO_STRING to convert it to a string in a new column.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_string.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=10
| EVAL j = TO_STRING(a)
```

----------------------------------------

TITLE: Parent ID Query Example
DESCRIPTION: Demonstrates a search query to retrieve child documents associated with a specific parent document ID using the parent_id query type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-parent-id-query.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
  "query": {
    "parent_id": {
      "type": "my-child",
      "id": "1"
    }
  }
}
```

----------------------------------------

TITLE: Performing Single-Field MATCH Query SQL
DESCRIPTION: Demonstrates a basic Elasticsearch SQL query using the MATCH predicate on a single field ('author') to find documents containing the specified term ('frank'). This uses the underlying Elasticsearch `match` query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-search.md#_snippet_1

LANGUAGE: SQL
CODE:
```
SELECT author, name FROM library WHERE MATCH(author, 'frank');
```

----------------------------------------

TITLE: Configuring Default Index Store Type in YAML
DESCRIPTION: This snippet shows how to set the default index store type for all indices in the `config/elasticsearch.yml` configuration file. The specified type, like `hybridfs`, will be used unless overridden at index creation. This is a static cluster-wide setting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/store.md#_snippet_0

LANGUAGE: yaml
CODE:
```
index.store.type: hybridfs
```

----------------------------------------

TITLE: Format TIME using FORMAT in Elasticsearch SQL
DESCRIPTION: Shows formatting a TIME value into a string using the FORMAT function with a 'HH mm ss.f' pattern. The input is a casted time literal. The function returns the time as a formatted string, including a single digit for fractional seconds.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_51

LANGUAGE: SQL
CODE:
```
SELECT FORMAT(CAST('11:22:33.987' AS TIME), 'HH mm ss.f') AS "time";
```

----------------------------------------

TITLE: Executing Bucket Correlation Aggregation Example Console/JSON
DESCRIPTION: This example demonstrates a search query using the bucket_correlation aggregation. It uses nested 'terms' and 'range' aggregations. The bucket_correlation aggregation is configured to correlate the '_count' metric from the 'latency_ranges' buckets against a predefined set of 'expectations' and total 'doc_count' within each term bucket.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-correlation-aggregation.md#_snippet_1

LANGUAGE: Console
CODE:
```
POST correlate_latency/_search?size=0&filter_path=aggregations
{
  "aggs": {
    "buckets": {
      "terms": {
        "field": "version",
        "size": 2
      },
      "aggs": {
        "latency_ranges": {
          "range": {
            "field": "latency",
            "ranges": [
              { "to": 0.0 },
              { "from": 0, "to": 105 },
              { "from": 105, "to": 225 },
              { "from": 225, "to": 445 },
              { "from": 445, "to": 665 },
              { "from": 665, "to": 885 },
              { "from": 885, "to": 1115 },
              { "from": 1115, "to": 1335 },
              { "from": 1335, "to": 1555 },
              { "from": 1555, "to": 1775 },
              { "from": 1775 }
            ]
          }
        },
        "bucket_correlation": {
          "bucket_correlation": {
            "buckets_path": "latency_ranges>_count",
            "function": {
              "count_correlation": {
                "indicator": {
                   "expectations": [0, 52.5, 165, 335, 555, 775, 1000, 1225, 1445, 1665, 1775],
                   "doc_count": 200
                }
              }
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Extracting Substring with Between in EQL
DESCRIPTION: Shows how to use the 'between' function to extract a substring located between specified left and right delimiters within a source string. Includes examples demonstrating case-sensitive vs. case-insensitive matching (~), non-greedy vs. greedy matching, empty source string handling, and null handling.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-function-ref.md#_snippet_1

LANGUAGE: eql
CODE:
```
// file.path = "C:\\Windows\\System32\\cmd.exe"
between(file.path, "System32\\\\", ".exe")                // returns "cmd"
between(file.path, "system32\\\\", ".exe")                // returns ""
between(file.path, "workspace\\\\", ".exe")               // returns ""

// Make matching case-insensitive
between~(file.path, "system32\\\\", ".exe")               // returns "cmd"

// Greedy matching defaults to false.
between(file.path, "\\\\", "\\\\", false)                 // returns "Windows"

// Sets greedy matching to true
between(file.path, "\\\\", "\\\\", true)                  // returns "Windows\\System32"

// empty source string
between("", "System32\\\\", ".exe")                       // returns ""
between("", "", "")                                       // returns ""

// null handling
between(null, "System32\\\\", ".exe")                     // returns null
```

----------------------------------------

TITLE: Sample Configuration for Microsoft Teams Connector - YAML
DESCRIPTION: This YAML snippet outlines the required configuration for setting up the Microsoft Teams connector instance. It specifies the fields needed such as client_id, secret_value, tenant_id, username, and password. Each parameter is critical for establishing a valid connection to Azure Active Directory.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-teams.md#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
# Configuration for Microsoft Teams connector
client_id: ab123453-12a2-100a-1123-93fd09d67394
secret_value: eyav1~12aBadIg6SL-STDfg102eBfCGkbKBq_Ddyu
tenant_id: 123a1b23-12a3-45b6-7c8d-fc931cfb448d
username: dummy@3hmr2@onmicrosoft.com
password: changeme
```

----------------------------------------

TITLE: Using CURRENT_TIMESTAMP Keyword in Elasticsearch SQL
DESCRIPTION: This snippet demonstrates fetching the current date and time using the `CURRENT_TIMESTAMP` keyword in Elasticsearch SQL. It retrieves the timestamp when the query reached the server (with default precision) and aliases it as `result`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_20

LANGUAGE: SQL
CODE:
```
SELECT CURRENT_TIMESTAMP AS result;
```

----------------------------------------

TITLE: Calculating Average Salary Change using ESQL
DESCRIPTION: This ESQL query computes the average salary change for employees. It uses the STATS clause with AVG and MV_AVG functions, and rounds the result to 10 decimal places.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/stats.csv-spec/docsStatsAvgNestedExpression.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS avg_salary_change = ROUND(AVG(MV_AVG(salary_change)), 10)
```

----------------------------------------

TITLE: Non-keyed Response with Bucket Sort in Elasticsearch Filters Aggregation
DESCRIPTION: This example shows how to use the 'keyed: false' parameter to return buckets as an array instead of an object, allowing for proper sorting with bucket_sort aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-filters-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0&filter_path=aggregations
{
  "aggs": {
    "the_filter": {
      "filters": {
        "keyed": false,
        "filters": {
          "t-shirt": { "term": { "type": "t-shirt" } },
          "hat": { "term": { "type": "hat" } }
        }
      },
      "aggs": {
        "avg_price": { "avg": { "field": "price" } },
        "sort_by_avg_price": {
          "bucket_sort": { "sort": { "avg_price": "asc" } }
        }
      }
    }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  "aggregations": {
    "the_filter": {
      "buckets": [
        {
          "key": "t-shirt",
          "doc_count": 3,
          "avg_price": { "value": 128.33333333333334 }
        },
        {
          "key": "hat",
          "doc_count": 3,
          "avg_price": { "value": 150.0 }
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Using Runtime Fields with Multi Terms Aggregation
DESCRIPTION: Creating a multi_terms aggregation using a runtime field to calculate the length of genre values, combined with product field values to form composite buckets.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-multi-terms-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /products/_search
{
  "runtime_mappings": {
    "genre.length": {
      "type": "long",
      "script": "emit(doc['genre'].value.length())"
    }
  },
  "aggs": {
    "genres_and_products": {
      "multi_terms": {
        "terms": [
          {
            "field": "genre.length"
          },
          {
            "field": "product"
          }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Search and Highlight on comment Field with FVH and matched_fields (comment, comment.english) - Elasticsearch DSL
DESCRIPTION: Performs a search on `index2` highlighting the `comment` field using the `fvh` highlighter and explicitly sets `matched_fields` to include both `comment` and `comment.english`. This demonstrates how FVH combines matches from both fields for highlighting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_16

LANGUAGE: Elasticsearch DSL
CODE:
```
GET index2/_search
{
  "query": {
    "query_string": {
      "query": "running with scissors",
      "fields": ["comment", "comment.english"]
    }
  },
  "highlight": {
    "order": "score",
    "fields": {
      "comment": {
        "type" : "fvh",
        "matched_fields": ["comment", "comment.english"]
      }
    }
  }
}
```

----------------------------------------

TITLE: Examples of EQL indexOf Function Usage
DESCRIPTION: Various examples demonstrating the `indexOf` function, which finds the first occurrence of a substring within a source string. It covers case-sensitive and case-insensitive (`indexOf~`) searches, searching from a specific start position (including negative and out-of-bounds values), handling empty strings, missing substrings, and null inputs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-function-ref.md#_snippet_8

LANGUAGE: eql
CODE:
```
// url.domain = "subdomain.example.com"
indexOf(url.domain, "d")        // returns 3
indexOf(url.domain, "D")        // returns null
indexOf(url.domain, ".")        // returns 9
indexOf(url.domain, ".", 9)     // returns 9
indexOf(url.domain, ".", 10)    // returns 17
indexOf(url.domain, ".", -6)    // returns 9

// Make matching case-insensitive
indexOf~(url.domain, "D")        // returns 4

// empty strings
indexOf("", "")                 // returns 0
indexOf(url.domain, "")         // returns 0
indexOf(url.domain, "", 9)      // returns 9
indexOf(url.domain, "", 10)     // returns 10
indexOf(url.domain, "", -6)     // returns 0

// missing substrings
indexOf(url.domain, "z")        // returns null
indexOf(url.domain, "z", 9)     // returns null

// start position is higher than string length
indexOf(url.domain, ".", 30)    // returns null

// null handling
indexOf(null, ".", 9)           // returns null
indexOf(url.domain, null, 9)    // returns null
indexOf(url.domain, ".", null)  // returns null
```

----------------------------------------

TITLE: Equality Equals with Primitive Types in Painless
DESCRIPTION: Illustrates using the equality equals operator with primitive numeric types (int and double) in Painless. It declares an integer and a double, then compares them using '==', showcasing implicit type promotion and comparison between the two numeric values, followed by comparing an integer literal to the integer variable.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_12

LANGUAGE: painless
CODE:
```
"int a = 1;          <1>
double b = 2.0;     <2>
boolean c = a == b; <3>
c = 1 == a;         <4>"
```

----------------------------------------

TITLE: Setting ignore_malformed at Index Level in Elasticsearch
DESCRIPTION: This snippet shows how to set the ignore_malformed parameter at the index level in Elasticsearch. It demonstrates how to override the index-level setting for specific fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/ignore-malformed.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "index.mapping.ignore_malformed": true
  },
  "mappings": {
    "properties": {
      "number_one": {
        "type": "byte"
      },
      "number_two": {
        "type": "integer",
        "ignore_malformed": false
      }
    }
  }
}
```

----------------------------------------

TITLE: Performing Simple QUERY String Query SQL
DESCRIPTION: Demonstrates a basic Elasticsearch SQL query using the QUERY predicate with a simple query string ('name:dune'). This input is passed directly to the underlying Elasticsearch `query_string` query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-search.md#_snippet_5

LANGUAGE: SQL
CODE:
```
SELECT author, name, SCORE() FROM library WHERE QUERY('name:dune');
```

----------------------------------------

TITLE: Calculating Average Using ESQL AVG Function
DESCRIPTION: Demonstrates how to calculate the average value of the 'height' field from the 'employees' index using ESQL. The query uses the STATS command with AVG aggregation to compute the mean value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/avg.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS AVG(height)
```

----------------------------------------

TITLE: Elasticsearch Certificate Utility Command Synopsis
DESCRIPTION: Complete command syntax showing all available modes (ca, cert, csr, http) and their respective parameters including options for certificate generation, key management, and configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/certutil.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
bin/elasticsearch-certutil
(
(ca [--ca-dn <name>] [--keyusage <key_usages>] [--days <n>] [--pem])

| (cert ([--ca <file_path>] | [--ca-cert <file_path> --ca-key <file_path>])
[--ca-dn <name>] [--ca-pass <password>] [--days <n>]
[--dns <domain_name>] [--in <input_file>] [--ip <ip_addresses>]
[--multiple] [--name <file_name>] [--pem] [--self-signed])

| (csr [--dns <domain_name>] [--in <input_file>] [--ip <ip_addresses>]
[--name <file_name>])

[-E <KeyValuePair>] [--keysize <bits>] [--out <file_path>]
[--pass <password>]
)

| http

[-h, --help] ([-s, --silent] | [-v, --verbose])
```

----------------------------------------

TITLE: Configuring Oracle Secure Connection
DESCRIPTION: This snippet provides shell commands and configuration file content for setting up a secure connection to Oracle database.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-oracle.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
$ mkdir $ORACLE_HOME/ssl_wallet
```

LANGUAGE: shell
CODE:
```
WALLET_LOCATION = (SOURCE = (METHOD = FILE) (METHOD_DATA = (DIRECTORY = $ORACLE_HOME/ssl_wallet)))
SSL_CLIENT_AUTHENTICATION = FALSE
SSL_VERSION = 1.0
SSL_CIPHER_SUITES = (SSL_RSA_WITH_AES_256_CBC_SHA)
SSL_SERVER_DN_MATCH = ON
```

LANGUAGE: shell
CODE:
```
$ orapki wallet create -wallet path-to-oracle-home/ssl_wallet -auto_login_only
$ orapki wallet add -wallet path-to-oracle-home/ssl_wallet -trusted_cert -cert path-to-oracle-home/ssl_wallet/root_ca.pem -auto_login_only
```

----------------------------------------

TITLE: Creating API Key for Oracle Connector
DESCRIPTION: This snippet shows how to create an API key for the Oracle connector using the Elasticsearch API. It includes the necessary role descriptors and privileges.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-oracle.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /_security/api_key
{
  "name": "connector_name-connector-api-key",
  "role_descriptors": {
    "connector_name-connector-role": {
      "cluster": [
        "monitor",
        "manage_connector"
      ],
      "indices": [
        {
          "names": [
            "index_name",
            ".search-acl-filter-index_name",
            ".elastic-connectors*"
          ],
          "privileges": [
            "all"
          ],
          "allow_restricted_indices": false
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Runtime Field Percentiles Query
DESCRIPTION: Query using runtime fields to calculate percentiles on transformed data (milliseconds to seconds conversion).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-percentile-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET latency/_search
{
  "size": 0,
  "runtime_mappings": {
    "load_time.seconds": {
      "type": "long",
      "script": {
        "source": "emit(doc['load_time'].value / params.timeUnit)",
        "params": {
          "timeUnit": 1000
        }
      }
    }
  },
  "aggs": {
    "load_time_outlier": {
      "percentiles": {
        "field": "load_time.seconds"
      }
    }
  }
}
```

----------------------------------------

TITLE: Input Document Structure with Array of Attachments
DESCRIPTION: Example JSON document showing the structure of array-based attachments with base64 encoded data that needs to be processed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/attachment.md#2025-04-21_snippet_12

LANGUAGE: javascript
CODE:
```
{
  "attachments" : [
    {
      "filename" : "ipsum.txt",
      "data" : "dGhpcyBpcwpqdXN0IHNvbWUgdGV4dAo="
    },
    {
      "filename" : "test.txt",
      "data" : "VGhpcyBpcyBhIHRlc3QK"
    }
  ]
}
```

----------------------------------------

TITLE: Basic Categorize Text Aggregation Console
DESCRIPTION: This snippet shows the basic usage of the `categorize_text` aggregation. It applies the aggregation to the 'message' field of documents in the 'log-messages' index to group similar text messages.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-categorize-text-aggregation.md#_snippet_0

LANGUAGE: console
CODE:
```
POST log-messages/_search?filter_path=aggregations
{
  "aggs": {
    "categories": {
      "categorize_text": {
        "field": "message"
      }
    }
  }
}
```

----------------------------------------

TITLE: Executing Rate Aggregation with Runtime Mappings in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the rate aggregation with a runtime field for price adjustment. It calculates the average adjusted price per month using a date histogram and rate aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-rate-aggregation.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET sales/_search
{
  "size": 0,
  "runtime_mappings": {
    "price.adjusted": {
      "type": "double",
      "script": {
        "source": "emit(doc['price'].value * params.adjustment)",
        "params": {
          "adjustment": 0.9
        }
      }
    }
  },
  "aggs": {
    "by_date": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "avg_price": {
          "rate": {
            "field": "price.adjusted"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Pattern Analyzer in Elasticsearch
DESCRIPTION: This snippet demonstrates how to configure the `pattern` analyzer in Elasticsearch to split email addresses based on non-word characters or underscores (`\W|_`) and convert the results to lowercase. It includes creating an index with custom analyzer settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pattern-analyzer.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_email_analyzer": {
          "type":      "pattern",
          "pattern":   "\\W|_", <1>
          "lowercase": true
        }
      }
    }
  }
}

POST my-index-000001/_analyze
{
  "analyzer": "my_email_analyzer",
  "text": "John_Smith@foo-bar.com"
}
```

----------------------------------------

TITLE: Analyzing Text with Standard Tokenizer in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the standard tokenizer to analyze a sample text. It shows the input text and the expected output tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-standard-tokenizer.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
POST _analyze
{
  "tokenizer": "standard",
  "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
}
```

LANGUAGE: text
CODE:
```
[ The, 2, QUICK, Brown, Foxes, jumped, over, the, lazy, dog's, bone ]
```

----------------------------------------

TITLE: Field-based Sliced Scroll in Elasticsearch
DESCRIPTION: Example of using a numeric field with doc_values for slicing instead of document IDs. This approach is more efficient for large datasets as it avoids the high memory cost associated with ID-based slicing when the number of slices exceeds the shard count.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/paginate-search-results.md#2025-04-21_snippet_16

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search?scroll=1m
{
  "slice": {
    "field": "@timestamp",
    "id": 0,
    "max": 10
  },
  "query": {
    "match": {
      "message": "foo"
    }
  }
}
```

----------------------------------------

TITLE: Configuring Oracle Connector YAML File
DESCRIPTION: This snippet provides an example of the YAML configuration file for the Oracle connector, including Elasticsearch connection details and connector settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-oracle.md#2025-04-21_snippet_4

LANGUAGE: yaml
CODE:
```
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: oracle
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA> # Optional. If not provided, the connector will use the elasticsearch.api_key instead
```

----------------------------------------

TITLE: Upgrade the Elasticsearch keystore format
DESCRIPTION: Performs an upgrade of the keystore's internal format, ensuring compatibility with newer Elasticsearch versions. Must have write permissions to the keystore directory.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/elasticsearch-keystore.md#_snippet_8

LANGUAGE: Shell
CODE:
```
bin/elasticsearch-keystore upgrade
```

----------------------------------------

TITLE: Recreating Standard Analyzer as Custom Analyzer in Elasticsearch
DESCRIPTION: This snippet demonstrates how to recreate the standard analyzer as a custom analyzer, providing a starting point for further customization. It shows the index creation with a custom analyzer definition.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-standard-analyzer.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /standard_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "rebuilt_standard": {
          "tokenizer": "standard",
          "filter": [
            "lowercase"       <1>
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Install Eland with PyTorch support
DESCRIPTION: Installs the Eland tool necessary for interacting with Elasticsearch machine learning features, including support for PyTorch models, using the Python package manager pip.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrievers.md#_snippet_8

LANGUAGE: sh
CODE:
```
python -m pip install eland[pytorch]
```

----------------------------------------

TITLE: Converting Various Types to Long Using TO_LONG Function in ESQL
DESCRIPTION: This snippet demonstrates the usage of the TO_LONG function in ESQL to convert string and numeric values to long. It shows how different input types are handled, including strings representing numbers and potential non-numeric strings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_long.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW str1 = "2147483648", str2 = "2147483648.2", str3 = "foo"
| EVAL long1 = TO_LONG(str1), long2 = TO_LONG(str2), long3 = TO_LONG(str3)
```

----------------------------------------

TITLE: Using ENDS_WITH Function in ESQL Query
DESCRIPTION: Example showing how to use ENDS_WITH function to check if last names end with the letter 'd'. The query keeps only the last_name column and evaluates a boolean condition using ENDS_WITH function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/ends_with.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP last_name
| EVAL ln_E = ENDS_WITH(last_name, "d")
```

----------------------------------------

TITLE: Format Time with DATETIME_FORMAT - SQL
DESCRIPTION: Formats a time value into a string using DATETIME_FORMAT and a pattern specific to time components.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_47

LANGUAGE: SQL
CODE:
```
SELECT DATETIME_FORMAT(CAST('11:22:33.987' AS TIME), 'HH mm ss.S') AS "time";
```

----------------------------------------

TITLE: Apply HISTOGRAM on Date/Time Field SQL
DESCRIPTION: Shows how to use the `HISTOGRAM` function with a date/time field (`birth_date`) and a date/time interval (`INTERVAL 1 YEAR`). It also includes a count (`COUNT(*)`) for each resulting time bucket and groups by the histogram output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-grouping.md#_snippet_2

LANGUAGE: SQL
CODE:
```
SELECT HISTOGRAM(birth_date, INTERVAL 1 YEAR) AS h, COUNT(*) AS c FROM emp GROUP BY h;
```

----------------------------------------

TITLE: Creating Certificates Using elasticsearch-certutil in Bash
DESCRIPTION: This snippet demonstrates how to use the 'elasticsearch-certutil' utility to create additional certificates from a PKCS#12 keystore. It specifies the input keystore file, the DNS name of the node, and requires a password to access the keystore.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/cli/src/main/resources/org/elasticsearch/xpack/security/cli/certutil-http/ca-readme-p12.txt#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
elasticsearch-certutil cert --ca ${P12} --dns "hostname.of.your.node" --pass
```

----------------------------------------

TITLE: Fixed Weekly Bucket Size in ESQL
DESCRIPTION: Demonstrates using BUCKET with a fixed bucket size of one week, without specifying a range.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/bucket.md#2025-04-21_snippet_3

LANGUAGE: esql
CODE:
```
FROM employees
| WHERE hire_date >= "1985-01-01T00:00:00Z" AND hire_date < "1986-01-01T00:00:00Z"
| STATS hires_per_week = COUNT(*) BY week = BUCKET(hire_date, 1 week)
| SORT week
```

----------------------------------------

TITLE: Changing Default Similarity After Index Creation in Elasticsearch
DESCRIPTION: A sequence of operations to change the default similarity model for an existing Elasticsearch index. This requires closing the index, updating the settings, and then reopening it.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/similarity.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
POST /index/_close

PUT /index/_settings
{
  "index": {
    "similarity": {
      "default": {
        "type": "boolean"
      }
    }
  }
}

POST /index/_open
```

----------------------------------------

TITLE: Sorting Multivalued Fields in ESQL
DESCRIPTION: Demonstrates using mv_sort() to sort an array of numbers in both ascending and descending order. The function allows lexicographical sorting of multivalued fields with optional direction parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/mv_sort.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = [4, 2, -3, 2]
| EVAL sa = mv_sort(a), sd = mv_sort(a, "DESC")
```

----------------------------------------

TITLE: Querying Elasticsearch with Inline GeoShape Definition
DESCRIPTION: This code snippet shows how to query Elasticsearch using an inline `geo_shape` definition.  It uses the `envelope` GeoJSON extension to define a bounding box and searches for documents within that box. The `relation` parameter specifies the spatial relationship to search for (in this case, `within`).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-shape-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /example/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_shape": {
          "location": {
            "shape": {
              "type": "envelope",
              "coordinates": [ [ 13.0, 53.0 ], [ 14.0, 52.0 ] ]
            },
            "relation": "within"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Demonstrating Case-Sensitive Equality in Elasticsearch EQL
DESCRIPTION: Shows how the equality operator is case-sensitive in Elasticsearch EQL, unlike in Endgame EQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_28

LANGUAGE: eql
CODE:
```
process_name == "cmd.exe"
```

----------------------------------------

TITLE: Implementing Hindi Analyzer in Elasticsearch
DESCRIPTION: Custom implementation of the built-in Hindi analyzer with Hindi stopwords, keyword marker for exclusions from stemming, decimal digit normalization, Indic normalization, Hindi normalization, and Hindi stemming.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_18

LANGUAGE: console
CODE:
```
PUT /hindi_example
{
  "settings": {
    "analysis": {
      "filter": {
        "hindi_stop": {
          "type":       "stop",
          "stopwords":  "_hindi_" <1>
        },
        "hindi_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["उदाहरण"] <2>
        },
        "hindi_stemmer": {
          "type":       "stemmer",
          "language":   "hindi"
        }
      },
      "analyzer": {
        "rebuilt_hindi": {
          "tokenizer":  "standard",
          "filter": [
            "lowercase",
            "decimal_digit",
            "hindi_keywords",
            "indic_normalization",
            "hindi_normalization",
            "hindi_stop",
            "hindi_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Using LENGTH and BIT_LENGTH Functions in ESQL
DESCRIPTION: This ESQL query filters airports located in India, keeps only the city field, and applies two string functions: LENGTH to count characters and BIT_LENGTH to count bits in the city names.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/bit_length.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airports
| WHERE country == "India"
| KEEP city
| EVAL fn_length = LENGTH(city), fn_bit_length = BIT_LENGTH(city)
```

----------------------------------------

TITLE: Defining Supported Numeric Types for ESQL Function in Markdown
DESCRIPTION: This markdown table defines the supported numeric input types and their corresponding result types for an ESQL function. It includes double, integer, long, and unsigned_long as input types, all resulting in double output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/types/cbrt.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| number | result |
| --- | --- |
| double | double |
| integer | double |
| long | double |
| unsigned_long | double |
```

----------------------------------------

TITLE: Defining Advanced Role Descriptor with Global Permissions and Special Characters in Elasticsearch
DESCRIPTION: This role descriptor includes cluster-level permissions, global application and profile management, index privileges with complex naming patterns, and run-as permissions with special characters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/src/test/resources/org/elasticsearch/xpack/security/audit/logfile/audited_roles.txt#2025-04-22_snippet_4

LANGUAGE: JSON
CODE:
```
{"cluster":["manage_ml","grant_api_key","manage_rollup"],"global":{"application":{"manage":{"applications":["a+b+|b+a+"]}},"profile":{},"role":{}},"indices":[{"names":["/. ? + * | { } [ ] ( ) \" \\/","*"],"privileges":["read","read_cross_cluster"],"field_security":{"grant":["almost","all*"],"except":["denied*"]}}],"applications":[],"run_as":["//+a+\"[a]/"],"metadata":{"?list":["e1","e2","*"],"some other meta":{"r":"t"}}}
```

----------------------------------------

TITLE: Reversing a String with REVERSE Function in ESQL
DESCRIPTION: This snippet demonstrates how to use the REVERSE function in ESQL to reverse the characters in a string. It takes an input string 'message' and creates a new reversed string 'message_reversed'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/reverse.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW message = "Some Text" | EVAL message_reversed = REVERSE(message);
```

----------------------------------------

TITLE: Elasticsearch query boosting documents based on location
DESCRIPTION: This snippet demonstrates a `bool` search that returns documents with the name `chocolate` and boosts documents with a `location` closer to `[-71.3, 41.15]` using the `distance_feature` query.  The `pivot` parameter defines the distance from the origin at which the relevance score is halved.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-distance-feature-query.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /items/_search
{
  "query": {
    "bool": {
      "must": {
        "match": {
          "name": "chocolate"
        }
      },
      "should": {
        "distance_feature": {
          "field": "location",
          "pivot": "1000m",
          "origin": [-71.3, 41.15]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Sorting Multi-Value Arrays with mv_sort in ESQL
DESCRIPTION: This example demonstrates using the mv_sort function to sort a multi-value array in both ascending (default) and descending order. The function takes an array as input and returns a sorted copy, with an optional second parameter to specify sort direction.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_sort.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = [4, 2, -3, 2]
| EVAL sa = mv_sort(a), sd = mv_sort(a, "DESC")
```

----------------------------------------

TITLE: Sum Aggregation with Missing Value Handling in Elasticsearch
DESCRIPTION: This snippet demonstrates how to handle missing values in sum aggregation. It treats documents without a price as having a default value of 100.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-sum-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "query": {
    "constant_score": {
      "filter": {
        "match": { "type": "hat" }
      }
    }
  },
  "aggs": {
    "hat_prices": {
      "sum": {
        "field": "price",
        "missing": 100
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Epoch Seconds for Date Fields in Elasticsearch
DESCRIPTION: Example showing how to configure a date field to accept seconds-since-the-epoch format by including epoch_second in the format parameter. The example creates an index, inserts a document with a seconds-based timestamp, and queries it.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/date.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "date": {
        "type":   "date",
        "format": "strict_date_optional_time||epoch_second"
      }
    }
  }
}

PUT my-index-000001/_doc/example?refresh
{ "date": 1618321898 }

POST my-index-000001/_search
{
  "fields": [ {"field": "date"}],
  "_source": false
}
```

----------------------------------------

TITLE: Counting All Non-Null vs. Distinct Values with COUNT(ALL) and COUNT(DISTINCT)
DESCRIPTION: This query demonstrates counting all non-null values in the 'last_name' field using `COUNT(ALL last_name)` and compares it to the count of distinct non-null values using `COUNT(DISTINCT last_name)`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_6

LANGUAGE: SQL
CODE:
```
SELECT COUNT(ALL last_name) AS count_all, COUNT(DISTINCT last_name) count_distinct FROM emp;
```

----------------------------------------

TITLE: Simple Query String Syntax Example
DESCRIPTION: Illustrates using simple query string syntax with predefined operators to search documents. Special characters like '+', '|', and '-' specify logical operations. It showcases the effect of default operators on query results, requiring no additional prerequisites.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-simple-query-string-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "simple_query_string": {
      "fields": [ "content" ],
      "query": "foo bar -baz"
    }
  }
}
```

----------------------------------------

TITLE: Create Inference Endpoint for Reranking in Elasticsearch
DESCRIPTION: Creates an inference endpoint within Elasticsearch named `my-msmarco-minilm-model` for performing `rerank` tasks. It specifies the model ID uploaded previously and configures allocation settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrievers.md#_snippet_10

LANGUAGE: console
CODE:
```
PUT _inference/rerank/my-msmarco-minilm-model
{
  "service": "elasticsearch",
  "service_settings": {
    "num_allocations": 1,
    "num_threads": 1,
    "model_id": "cross-encoder__ms-marco-minilm-l-6-v2"
  }
}
```

----------------------------------------

TITLE: Configuring Gsub Processor in Elasticsearch
DESCRIPTION: Example configuration showing how to set up a Gsub processor in an Elasticsearch ingest pipeline. This example replaces dots with dashes in the 'field1' field using regular expressions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/gsub-processor.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "gsub": {
    "field": "field1",
    "pattern": "\\.",
    "replacement": "-"
  }
}
```

----------------------------------------

TITLE: Indexing Answer Documents with Parent Reference
DESCRIPTION: Creates child documents of type "answer" that reference the parent question document, including routing parameter to ensure they're stored in the same shard as the parent.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-parent-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT parent_example/_doc/2?routing=1
{
  "join": {
    "name": "answer",
    "parent": "1"
  },
  "owner": {
    "location": "Norfolk, United Kingdom",
    "display_name": "Sam",
    "id": 48
  },
  "body": "<p>Unfortunately you're pretty much limited to FTP...",
  "creation_date": "2009-05-04T13:45:37.030"
}

PUT parent_example/_doc/3?routing=1&refresh
{
  "join": {
    "name": "answer",
    "parent": "1"
  },
  "owner": {
    "location": "Norfolk, United Kingdom",
    "display_name": "Troll",
    "id": 49
  },
  "body": "<p>Use Linux...",
  "creation_date": "2009-05-05T13:45:37.030"
}
```

----------------------------------------

TITLE: GROUP BY with Column Alias
DESCRIPTION: Example of using a column alias in the GROUP BY clause to group results by the gender column.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_13

LANGUAGE: sql
CODE:
```
SELECT gender AS g FROM emp GROUP BY g;
```

----------------------------------------

TITLE: Indexing Doc with Synthetic Source Keyword Ignore Above in Elasticsearch Console
DESCRIPTION: Demonstrates creating an index with synthetic source and a 'keyword' field with 'ignore_above' set, then indexing a document including values longer than the 'ignore_above' limit. Under synthetic source, values exceeding 'ignore_above' are not indexed but are preserved and sorted to the end in the synthetic _source representation. Requires an running Elasticsearch instance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/keyword.md#_snippet_3

LANGUAGE: Console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "kwd": { "type": "keyword", "ignore_above": 3 }
    }
  }
}
PUT idx/_doc/1
{
  "kwd": ["foo", "foo", "bang", "bar", "baz"]
}
```

----------------------------------------

TITLE: Calculating Average Salary with AVG in Elasticsearch SQL
DESCRIPTION: This example demonstrates how to use the AVG function to calculate the average salary from the 'emp' index (or table). The result is aliased as 'avg'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_1

LANGUAGE: SQL
CODE:
```
SELECT AVG(salary) AS avg FROM emp;
```

----------------------------------------

TITLE: ESQL GROK Pattern Matching for ZIP Codes
DESCRIPTION: Query that extracts components from ZIP codes using GROK pattern matching. The pattern splits ZIP codes into parts using WORD patterns. Results show successful parsing of Dutch and US formats, with null results for unmatched Japanese formats.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/grokWithDuplicateFieldNames.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM addresses
| KEEP city.name, zip_code
| GROK zip_code ""%{WORD:zip_parts} %{WORD:zip_parts}""
```

----------------------------------------

TITLE: Implementing ID-based Sliced Scroll in Elasticsearch
DESCRIPTION: Example of how to split a search into multiple slices using document IDs. This approach shows two slice requests (id 0 and 1) that together return all matching documents. The slicing is done first by shards and then locally using the _id field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/paginate-search-results.md#2025-04-21_snippet_15

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search?scroll=1m
{
  "slice": {
    "id": 0,                      <1>
    "max": 2                      <2>
  },
  "query": {
    "match": {
      "message": "foo"
    }
  }
}
GET /my-index-000001/_search?scroll=1m
{
  "slice": {
    "id": 1,
    "max": 2
  },
  "query": {
    "match": {
      "message": "foo"
    }
  }
}
```

----------------------------------------

TITLE: Defining Inline Synonyms in Elasticsearch JSON
DESCRIPTION: Sets up inline synonyms directly within the Elasticsearch configuration. This is useful for small sets of synonyms that don't require external files.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-synonym-graph-tokenfilter.md#2025-04-21_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "filter": {
    "synonyms_filter": {
      "type": "synonym_graph",
      "synonyms": ["pc => personal computer", "computer, pc, laptop"]
    }
  }
}
```

----------------------------------------

TITLE: Completion Suggester with Source Filtering in Elasticsearch
DESCRIPTION: Demonstrates how to use source filtering with completion suggesters to minimize response size by returning only specific fields from the source document.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_14

LANGUAGE: console
CODE:
```
POST music/_search
{
  "_source": "suggest",     <1>
  "suggest": {
    "song-suggest": {
      "prefix": "nir",
      "completion": {
        "field": "suggest", <2>
        "size": 5           <3>
      }
    }
  }
}
```

----------------------------------------

TITLE: Adding Days to DateTime
DESCRIPTION: Demonstrates adding days to a ZonedDateTime object.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_11

LANGUAGE: painless
CODE:
```
ZonedDateTime zdt =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 0, ZoneId.of('Z'));
ZonedDateTime updatedZdt = zdt.plusDays(3);
```

----------------------------------------

TITLE: Calculating Percent of Total Sales Using Normalize Aggregation
DESCRIPTION: An Elasticsearch query demonstrating how to use the Normalize aggregation to calculate the percent of total sales for each month, including date histogram and sum aggregations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-normalize-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "size": 0,
  "aggs": {
    "sales_per_month": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "sales": {
          "sum": {
            "field": "price"
          }
        },
        "percent_of_total_sales": {
          "normalize": {
            "buckets_path": "sales",          <1>
            "method": "percent_of_sum",       <2>
            "format": "00.00%"                <3>
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring the Analyzer for Match Boolean Prefix Queries
DESCRIPTION: This snippet illustrates how to specify a custom analyzer for a match_bool_prefix query. In this case, the 'keyword' analyzer is used for the 'message' field when executing the query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-match-bool-prefix-query.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
"GET /_search\n{\n  \"query\": {\n    \"match_bool_prefix\": {\n      \"message\": {\n        \"query\": \"quick brown f\",\n        \"analyzer\": \"keyword\"\n      }\n    }\n  }\n}"
```

----------------------------------------

TITLE: Using BETWEEN Operator in Elasticsearch SQL
DESCRIPTION: Demonstrates using the BETWEEN operator to filter rows where a column's value falls within a specified inclusive range. The query selects the last name for employees with employee numbers between 9990 and 10003.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-operators.md#_snippet_4

LANGUAGE: sql
CODE:
```
SELECT last_name l FROM "test_emp" WHERE emp_no BETWEEN 9990 AND 10003 ORDER BY emp_no;
```

----------------------------------------

TITLE: Creating Index for Pre-indexed Shapes
DESCRIPTION: This code snippet shows how to create an Elasticsearch index to store pre-indexed shapes. The index `shapes` is created with a `geo_shape` field called `location`. This allows storing shapes that can be referenced in other queries by ID.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-shape-query.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
PUT /shapes
{
  "mappings": {
    "properties": {
      "location": {
        "type": "geo_shape"
      }
    }
  }
}
```

----------------------------------------

TITLE: Rounding Dates with DATE_TRUNC in ESQL
DESCRIPTION: This snippet demonstrates the use of the DATE_TRUNC function in ESQL to round down hire dates to the nearest year. It selects specific columns from the 'employees' table and creates a new column 'year_hired' using DATE_TRUNC.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/date_trunc.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP first_name, last_name, hire_date
| EVAL year_hired = DATE_TRUNC(1 year, hire_date)
```

----------------------------------------

TITLE: Calculate COT in Elasticsearch SQL
DESCRIPTION: Provides an example of using the `COT` function in Elasticsearch SQL. It calculates the cotangent of an angle expressed in radians and verifies the result by calculating COS(angle)/SIN(angle). The input is a numeric expression (in radians), and the output is a double numeric value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_25

LANGUAGE: sql
CODE:
```
SELECT COT(RADIANS(30)) AS "COT(30)", COS(RADIANS(30)) / SIN(RADIANS(30)) AS "COS(30)/SIN(30)";
```

----------------------------------------

TITLE: Execute SUBSTRING Function Example - SQL
DESCRIPTION: Demonstrates a practical usage example of the SUBSTRING SQL function in Elasticsearch. It shows how to extract a specific number of characters from a source string starting at a given position.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-string.md#_snippet_1

LANGUAGE: sql
CODE:
```
SELECT SUBSTRING('Elasticsearch', 0, 7);
```

----------------------------------------

TITLE: Connector Configuration YAML
DESCRIPTION: Sample YAML configuration for setting up the Azure Blob Storage connector with Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-azure-blob.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: azure_blob_storage
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA>
```

----------------------------------------

TITLE: Defining Joined Data Sync Rule (MS SQL Connector)
DESCRIPTION: This advanced sync rule illustrates how to use a JOIN query to combine data from multiple tables before syncing. The example performs an INNER JOIN between the 'employee' and 'customer' tables based on matching 'emp_id' and 'c_id'. The combined, joined data set is then synced to Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-ms-sql.md#_snippet_8

LANGUAGE: json
CODE:
```
[
  {
    "tables": ["employee", "customer"],
    "query": "SELECT * FROM employee INNER JOIN customer ON employee.emp_id = customer.c_id"
  }
]
```

----------------------------------------

TITLE: Computing Geo-centroid per City using Terms Sub-aggregation (Elasticsearch Console)
DESCRIPTION: This example illustrates how to use the geo_centroid aggregation as a sub-aggregation within a terms aggregation. It groups documents by the 'city.keyword' field and calculates the centroid for the 'location' field within each city bucket, effectively finding the central location for museums in each city. Requires the 'museums' index with data as set up in the previous example.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-geocentroid-aggregation.md#_snippet_1

LANGUAGE: Elasticsearch Console
CODE:
```
POST /museums/_search?size=0
{
  "aggs": {
    "cities": {
      "terms": { "field": "city.keyword" },
      "aggs": {
        "centroid": {
          "geo_centroid": { "field": "location" }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Analyzing Text with Keyword Repeat and Stemmer Filters in Elasticsearch
DESCRIPTION: This snippet demonstrates an analyze API request that uses the keyword_repeat and stemmer filters to create stemmed and unstemmed tokens for the text 'jumping dog'. It shows how duplicate tokens can be created in the same position.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-remove-duplicates-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET _analyze
{
  "tokenizer": "whitespace",
  "filter": [
    "keyword_repeat",
    "stemmer"
  ],
  "text": "jumping dog"
}
```

----------------------------------------

TITLE: Creating a Custom Kuromoji Analyzer with ICU Normalization in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create a custom analyzer based on the kuromoji analyzer with added icu_normalizer character filter. This configuration solves the problem of unexpected tokenization of full-width characters in Japanese text, ensuring proper handling of texts like 'Ｃｕｌｔｕｒｅ　ｏｆ　Ｊａｐａｎ'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-analyzer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT index-00001
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "kuromoji_normalize": {                 <1>
            "char_filter": [
              "icu_normalizer"                    <2>
            ],
            "tokenizer": "kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform",
              "kuromoji_part_of_speech",
              "cjk_width",
              "ja_stop",
              "kuromoji_stemmer",
              "lowercase"
            ]
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Analyzing Text with Uppercase Filter using Console
DESCRIPTION: This console request demonstrates how to employ the 'uppercase' filter with Elasticsearch's analyze API to convert the given text to uppercase, ensuring uniform text casing in queries. No additional dependencies are required for this setup. The input includes a text field with specified text, and the expected output yields tokens in uppercase form.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-uppercase-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET _analyze
{
  "tokenizer" : "standard",
  "filter" : ["uppercase"],
  "text" : "the Quick FoX JUMPs"
}
```

----------------------------------------

TITLE: Execute Painless Script to Calculate Difference Between Long Fields
DESCRIPTION: This snippet executes a Painless script using the _execute API in the 'long_field' context. The script retrieves the values of the 'measures.start' and 'measures.end' fields and calculates the difference between them, emitting the resulting long value. This demonstrates numerical calculation within a runtime field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_19

LANGUAGE: console
CODE:
```
POST /_scripts/painless/_execute
{
  "script": {
    "source": """
      emit(doc['measures.end'].value - doc['measures.start'].value);
    """
  },
  "context": "long_field",
  "context_setup": {
    "index": "my-index-000001",
    "document": {
      "measures": {
        "voltage": "4.0",
        "start": "400",
        "end": "8625309"
      }
    }
  }
}
```

----------------------------------------

TITLE: Ordering by Nested Aggregation Hierarchy in Elasticsearch
DESCRIPTION: Example showing how to order buckets based on a deeper aggregation in the hierarchy using country and rock genre statistics.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-terms-aggregation.md#2025-04-21_snippet_7

LANGUAGE: json
CODE:
```
GET /_search
{
  "aggs": {
    "countries": {
      "terms": {
        "field": "artist.country",
        "order": { "rock>playback_stats.avg": "desc" }
      },
      "aggs": {
        "rock": {
          "filter": { "term": { "genre": "rock" } },
          "aggs": {
            "playback_stats": { "stats": { "field": "play_count" } }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Cardinality Aggregation with Precision Control
DESCRIPTION: Example showing how to control precision using precision_threshold parameter, which trades memory for accuracy.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-cardinality-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "type_count": {
      "cardinality": {
        "field": "type",
        "precision_threshold": 100
      }
    }
  }
}
```

----------------------------------------

TITLE: Response from Parent/Child Inner Hits Query in Elasticsearch
DESCRIPTION: The response demonstrates how Elasticsearch returns a parent document that has a matching child, along with the child document in the inner hits section. The response includes the complete parent document and its matching children with their source data and routing information.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-inner-hits.md#2025-04-21_snippet_8

LANGUAGE: console-result
CODE:
```
{
  ...,
  "hits": {
    "total": {
      "value": 1,
      "relation": "eq"
    },
    "max_score": 1.0,
    "hits": [
      {
        "_index": "test",
        "_id": "1",
        "_score": 1.0,
        "_source": {
          "number": 1,
          "my_join_field": "my_parent"
        },
        "inner_hits": {
          "my_child": {
            "hits": {
              "total": {
                "value": 1,
                "relation": "eq"
              },
              "max_score": 1.0,
              "hits": [
                {
                  "_index": "test",
                  "_id": "2",
                  "_score": 1.0,
                  "_routing": "1",
                  "_source": {
                    "number": 1,
                    "my_join_field": {
                      "name": "my_child",
                      "parent": "1"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Creating a Custom Mapping Character Filter
DESCRIPTION: This example shows how to create a custom analyzer with a custom mapping character filter using the create index API. The filter is configured to replace emoticons with text equivalents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-mapping-charfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "standard",
          "char_filter": [
            "my_mappings_char_filter"
          ]
        }
      },
      "char_filter": {
        "my_mappings_char_filter": {
          "type": "mapping",
          "mappings": [
            ":) => _happy_",
            ":( => _sad_"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Querying Airport Data with Geospatial Containment in ESQL
DESCRIPTION: This ESQL query filters airport data from the 'airport_city_boundaries' table based on whether the city boundary contains a specific polygon. It uses the ST_CONTAINS function for geospatial comparison and selects specific fields from the matching records.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/st_contains.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airport_city_boundaries
| WHERE ST_CONTAINS(city_boundary, TO_GEOSHAPE("POLYGON((109.35 18.3, 109.45 18.3, 109.45 18.4, 109.35 18.4, 109.35 18.3))"))
| KEEP abbrev, airport, region, city, city_location
```

----------------------------------------

TITLE: Customizing N-gram Filter with Specific Parameters
DESCRIPTION: Creates a custom index with a modified ngram filter that generates n-grams between 3-5 characters and increases the max_ngram_diff setting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-ngram-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT ngram_custom_example
{
  "settings": {
    "index": {
      "max_ngram_diff": 2
    },
    "analysis": {
      "analyzer": {
        "default": {
          "tokenizer": "whitespace",
          "filter": [ "3_5_grams" ]
        }
      },
      "filter": {
        "3_5_grams": {
          "type": "ngram",
          "min_gram": 3,
          "max_gram": 5
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Single Connector in YAML
DESCRIPTION: Demonstrates the configuration structure for a single Elastic connector within the main configuration file, including the unique `connector_id`, optional `api_key` (scoped to the connector), and the `service_type`. This block is typically copied from the Kibana UI setup workflow.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-run-from-source.md#_snippet_0

LANGUAGE: yaml
CODE:
```
# ...
connectors:
  - connector_id: <CONNECTOR-ID>
    api_key: <API-KEY> # Scoped API key for this connector (optional). If not specified, the top-level `elasticsearch.api_key` value is used.
    service_type: gmail # example
```

----------------------------------------

TITLE: Indexing and searching annotated text in Elasticsearch
DESCRIPTION: Demonstrates indexing documents with annotated text and performing a term query to search for specific annotations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/mapper-annotated-text-usage.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
# Example documents
PUT my-index-000001/_doc/1
{
  "my_field": "[Beck](Beck) announced a new tour"
}

PUT my-index-000001/_doc/2
{
  "my_field": "[Jeff Beck](Jeff+Beck&Guitarist) plays a strat"
}

# Example search
GET my-index-000001/_search
{
  "query": {
    "term": {
        "my_field": "Beck"
    }
  }
}
```

----------------------------------------

TITLE: Geo-bounding Box Query with Simple Vertex Parameters
DESCRIPTION: This query demonstrates setting a bounding box's vertices using simple parameters: top, left, bottom, and right. Such configurations require latitude and longitude for each side, resulting in documents filtered by the spatial confines of the bounding box.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-bounding-box-query.md#2025-04-21_snippet_9

LANGUAGE: console
CODE:
```
GET my_locations/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_bounding_box": {
          "pin.location": {
            "top": 40.73,
            "left": -74.1,
            "bottom": 40.01,
            "right": -71.12
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Querying with Reverse Nested Aggregation in Elasticsearch
DESCRIPTION: This query demonstrates how to use the reverse nested aggregation to retrieve top commenters' usernames and the top tags of issues they've commented on. It showcases the nested and reverse_nested aggregations in action.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-reverse-nested-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /issues/_search
{
  "query": {
    "match_all": {}
  },
  "aggs": {
    "comments": {
      "nested": {
        "path": "comments"
      },
      "aggs": {
        "top_usernames": {
          "terms": {
            "field": "comments.username"
          },
          "aggs": {
            "comment_to_issue": {
              "reverse_nested": {}, <1>
              "aggs": {
                "top_tags_per_comment": {
                  "terms": {
                    "field": "tags"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Export Client Private Key
DESCRIPTION: Extracts the client's private key from PKCS#12 store using OpenSSL
SOURCE: https://github.com/elastic/elasticsearch/blob/main/build-tools-internal/src/main/resources/test/ssl/README.md#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
openssl pkcs12 -in test-client.p12 -passin pass:keypass -nocerts -passout pass:test-client-key-password -out test-client.key
```

----------------------------------------

TITLE: Searching Multiple Fields with query_string
DESCRIPTION: Demonstrates how to search across multiple fields using the fields parameter in the query_string query. This expands each query term to an OR clause across all specified fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_12

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "query_string": {
      "fields": [ "content", "name" ],
      "query": "this AND that"
    }
  }
}
```

----------------------------------------

TITLE: Indexing Parent Document
DESCRIPTION: Indexes a parent document with a specific ID and join field configuration, establishing the parent document in the parent-child relationship.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-parent-id-query.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "text": "This is a parent document.",
  "my-join-field": "my-parent"
}
```

----------------------------------------

TITLE: Using FIRST_VALUE Alias with Grouping and Ordering by Birth Date
DESCRIPTION: This example shows that FIRST_VALUE is an alias for FIRST, producing the same result as the previous query: finding the first first name by birth date within each gender group.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_18

LANGUAGE: SQL
CODE:
```
SELECT gender, FIRST_VALUE(first_name, birth_date) FROM emp GROUP BY gender ORDER BY gender;
```

----------------------------------------

TITLE: Configuring Uppercase Processor in Elasticsearch
DESCRIPTION: Example configuration for the Uppercase processor that converts the 'foo' field value to uppercase. The processor can be configured with various options including target field, error handling, and conditional execution.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/uppercase-processor.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "uppercase": {
    "field": "foo"
  }
}
```

----------------------------------------

TITLE: Retrieving Stored Synchronous EQL Search Results in Elasticsearch
DESCRIPTION: This snippet demonstrates how to retrieve the results of a previously stored synchronous EQL search using the get async EQL search API.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_30

LANGUAGE: console
CODE:
```
GET /_eql/search/FjlmbndxNmJjU0RPdExBTGg0elNOOEEaQk9xSjJBQzBRMldZa1VVQ2pPa01YUToxMDY=
```

----------------------------------------

TITLE: Rounding Height Values with ESQL ROUND Function
DESCRIPTION: This ESQL query selects employees data, keeps only the name and height columns, then creates a new column that converts height from meters to feet and rounds to one decimal place.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/round.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP first_name, last_name, height
| EVAL height_ft = ROUND(height * 3.281, 1)
```

----------------------------------------

TITLE: Querying Multiple Fields with Wildcards in YAML
DESCRIPTION: This example demonstrates querying multiple fields using wildcards within KQL, including considerations for potential errors due to field type mismatches.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/kql.md#2025-04-21_snippet_6

LANGUAGE: yaml
CODE:
```
datastream.*: logs
```

----------------------------------------

TITLE: Querying Recent Data in Elasticsearch using ESQL
DESCRIPTION: This ESQL query retrieves data from the 'sample_data' index, filtering for records within the last hour. It uses the NOW() function and a time comparison to limit the results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/date.csv-spec/docsNowWhere.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM sample_data
| WHERE @timestamp > NOW() - 1 hour
```

----------------------------------------

TITLE: Initializing Map with Static Values in Painless
DESCRIPTION: Shows how to initialize a Map with static key-value pairs using the map initialization operator in Painless.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-reference.md#2025-04-21_snippet_13

LANGUAGE: painless
CODE:
```
Map map = [1:2, 3:4, 5:6]; 
```

----------------------------------------

TITLE: Parsing Log Data with GROK and Transforming Fields in ESQL
DESCRIPTION: This ESQL query takes a log-like string, uses GROK to extract fields, keeps specific columns, and converts the date field to a datetime type. It demonstrates pattern matching, field selection, and data type conversion in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/grokWithToDatetime.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = "2023-01-23T12:15:00.000Z 127.0.0.1 some.email@foo.com 42"
| GROK a """%{TIMESTAMP_ISO8601:date} %{IP:ip} %{EMAILADDRESS:email} %{NUMBER:num:int}"""
| KEEP date, ip, email, num
| EVAL date = TO_DATETIME(date)
```

----------------------------------------

TITLE: Using NOT operator SQL
DESCRIPTION: Shows how to use the NOT operator to negate a single condition in the WHERE clause, returning rows where the condition is false. The query selects last names from the 'test_emp' table for employees where emp_no is NOT equal to 10000, limited to 5 results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-operators-logical.md#_snippet_2

LANGUAGE: sql
CODE:
```
SELECT last_name l FROM "test_emp" WHERE NOT emp_no = 10000 LIMIT 5;
```

----------------------------------------

TITLE: Executing Watcher with Action-Specific Transform
DESCRIPTION: This example shows a transform script applied within a specific action ('mod_log'). The script formats monetary values and creates a comma-separated string of plays. Another action ('unmod_log') does not have a transform, demonstrating that transforms can be selectively applied to individual actions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-watcher-transform-context.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST _watcher/watch/_execute
{
  "watch" : {
    "trigger" : { "schedule" : { "interval" : "24h" } },
    "input" : {
      "search" : {
        "request" : {
          "indices" : [ "seats" ],
          "body" : {
            "query" : {
              "term": { "sold": "true"}
            },
            "aggs" : {
              "theatres" : {
                "terms" : { "field" : "play" },
                "aggs" : {
                  "money" : {
                    "sum": { "field" : "cost" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "actions" : {
      "mod_log" : {
        "transform": {                                                                <1>
          "script" :
          """
          def formatter = NumberFormat.getCurrencyInstance();
          return [
            'msg': ctx.payload.aggregations.theatres.buckets.stream()
              .map(t-> formatter.format(t.money.value) + ' for the play ' + t.key)
              .collect(Collectors.joining(", "))
          ]
          """
        },
        "logging" : {
          "text" : "The output of the payload was transformed to: {{ctx.payload.msg}}"
        }
      },
      "unmod_log" : {                                                                 <2>
        "logging" : {
          "text" : "The output of the payload was not transformed and this value should not exist: {{ctx.payload.msg}}"
        }
      }
    }
  }
}

```

----------------------------------------

TITLE: Counting with Boolean Expressions and NULL Handling in ESQL
DESCRIPTION: This snippet shows how to count based on two different boolean expressions using the pattern COUNT(<expression> OR NULL). It leverages three-valued logic and NULL handling in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/count.md#2025-04-21_snippet_4

LANGUAGE: esql
CODE:
```
ROW n=1
| STATS COUNT(n > 0 OR NULL), COUNT(n < 0 OR NULL)
```

----------------------------------------

TITLE: Creating a pipeline that keeps binary data
DESCRIPTION: Example showing how to create a pipeline that keeps the original binary data by explicitly setting remove_binary to false, followed by document indexing and retrieval.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/attachment.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
PUT _ingest/pipeline/attachment
{
  "description" : "Extract attachment information including original binary",
  "processors" : [
    {
      "attachment" : {
        "field" : "data",
        "remove_binary": false
      }
    }
  ]
}
PUT my-index-000001/_doc/my_id?pipeline=attachment
{
  "data": "e1xydGYxXGFuc2kNCkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0DQpccGFyIH0="
}
GET my-index-000001/_doc/my_id
```

----------------------------------------

TITLE: Configuring Fail Processor in Elasticsearch Ingest Pipeline
DESCRIPTION: Example of a fail processor configuration that raises an exception with a custom error message when the 'production' tag is not present in the context. The processor uses conditional execution with the 'if' parameter and template snippets in the error message.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/fail-processor.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "fail": {
    "if" : "ctx.tags.contains('production') != true",
    "message": "The production tag is not present, found tags: {{{tags}}}"
  }
}
```

----------------------------------------

TITLE: Configuring and Using ignore_above in Elasticsearch Mapping
DESCRIPTION: This snippet demonstrates how to set up an index with the ignore_above setting, index documents, and perform a search with aggregation. It shows how strings longer than the specified limit are treated differently during indexing and querying.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/ignore-above.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "message": {
        "type": "keyword",
        "ignore_above": 20 <1>
      }
    }
  }
}

PUT my-index-000001/_doc/1 <2>
{
  "message": "Syntax error"
}

PUT my-index-000001/_doc/2 <3>
{
  "message": "Syntax error with some long stacktrace"
}

GET my-index-000001/_search <4>
{
  "aggs": {
    "messages": {
      "terms": {
        "field": "message"
      }
    }
  }
}
```

----------------------------------------

TITLE: Customize stop filter with ignore_case parameter
DESCRIPTION: This snippet shows how to customize the `stop` filter by setting the `ignore_case` parameter to `true`. This makes the stop word matching case-insensitive. The filter is associated with the default analyzer for the index `my-index-000001`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "default": {
          "tokenizer": "whitespace",
          "filter": [ "my_custom_stop_words_filter" ]
        }
      },
      "filter": {
        "my_custom_stop_words_filter": {
          "type": "stop",
          "ignore_case": true
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Using MV_APPEND to Combine Multiple Date Fields in ESQL
DESCRIPTION: Demonstrates how to use the MV_APPEND function in ESQL to combine birth_date and hire_date fields into a new array field called 'dates'. The query filters for specific employee numbers, sorts them, and returns selected fields including the newly created array field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_append.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| WHERE emp_no == 10039 OR emp_no == 10040
| SORT emp_no
| EVAL dates = MV_APPEND(birth_date, hire_date)
| KEEP emp_no, birth_date, hire_date, dates
```

----------------------------------------

TITLE: Profiling DFS Phase in Elasticsearch (Console)
DESCRIPTION: Executes a search query with DFS (Distributed Frequency Search) and profiling enabled to analyze the DFS phase. The query searches for documents with a specific keyword value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-profile.md#2025-04-21_snippet_14

LANGUAGE: console
CODE:
```
GET /my-dfs-index/_search?search_type=dfs_query_then_fetch&pretty&size=0
{
  "profile": true,
  "query": {
    "term": {
      "my-keyword": {
        "value": "a"
      }
    }
  }
}
```

----------------------------------------

TITLE: Grouping by Multiple Multivalued Keys in ESQL
DESCRIPTION: Illustrates how grouping by multiple multivalued keys places the input row in all relevant groups.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/stats-by.md#2025-04-21_snippet_8

LANGUAGE: esql
CODE:
```
FROM employees
STATS count(*)
BY languages, skills;
```

----------------------------------------

TITLE: Describing Boolean Conversion Rules in ESQL
DESCRIPTION: This snippet outlines the rules for converting different input types to boolean values in ESQL. It specifies how string and numerical inputs are handled, including case-insensitivity for string 'true' and the treatment of zero and non-zero numbers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/to_boolean.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
Converts an input value to a boolean value. A string value of `true` will be case-insensitive converted to the Boolean `true`. For anything else, including the empty string, the function will return `false`. The numerical value of `0` will be converted to `false`, anything else will be converted to `true`.
```

----------------------------------------

TITLE: Analyzing Text with KStem Filter in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the KStem filter to stem English text using the analyze API. It shows how the filter transforms the input text 'the foxes jumping quickly' into stemmed tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-kstem-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer": "standard",
  "filter": [ "kstem" ],
  "text": "the foxes jumping quickly"
}
```

----------------------------------------

TITLE: Executing Significant Text Aggregation with Background Filter - Console
DESCRIPTION: This snippet demonstrates how to use a `background_filter` within a `significant_text` aggregation. It finds terms that are significant in documents containing 'madrid' compared to the background context of documents containing 'spain', focusing the analysis on terms specific to the city within the country's context.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-significanttext-aggregation.md#_snippet_6

LANGUAGE: Console
CODE:
```
GET news/_search
{
  "query": {
    "match": {
      "content": "madrid"
    }
  },
  "aggs": {
    "tags": {
      "significant_text": {
        "field": "content",
        "background_filter": {
          "term": { "content": "spain" }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Regex-based Completion Suggester in Elasticsearch
DESCRIPTION: Shows how to use regular expressions with completion suggesters to match prefixes based on patterns rather than exact string matches.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_18

LANGUAGE: console
CODE:
```
POST music/_search?pretty
{
  "suggest": {
    "song-suggest": {
      "regex": "n[ever|i]r",
      "completion": {
        "field": "suggest"
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating a Custom Analyzer with Flatten Graph Filter in Elasticsearch
DESCRIPTION: This example shows how to create a custom analyzer that uses the word_delimiter_graph filter to produce token graphs with catenated, multi-position tokens, and then flattens them using the flatten_graph filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-flatten-graph-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_custom_index_analyzer": {
          "type": "custom",
          "tokenizer": "standard",
          "filter": [
            "my_custom_word_delimiter_graph_filter",
            "flatten_graph"
          ]
        }
      },
      "filter": {
        "my_custom_word_delimiter_graph_filter": {
          "type": "word_delimiter_graph",
          "catenate_all": true
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Elasticsearch Authorization Flow with Document-level Security Filtering
DESCRIPTION: Demonstration of how document-level security filtering works in Elasticsearch. This example shows how a query for documents is modified to add security filters based on user permissions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/vector-tile/licenses/protobuf-java-NOTICE.txt#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
GET /my_index/_search
{
  "query": {
    "match": {
      "title": "foo"
    }
  }
}
```

----------------------------------------

TITLE: T-test Aggregation with Runtime Field in Elasticsearch
DESCRIPTION: Demonstrates how to use a runtime field in a t_test aggregation to adjust values before comparison, allowing for more flexible data manipulation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-ttest-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET node_upgrade/_search
{
  "size": 0,
  "runtime_mappings": {
    "startup_time_before.adjusted": {
      "type": "long",
      "script": {
        "source": "emit(doc['startup_time_before'].value - params.adjustment)",
        "params": {
          "adjustment": 10
        }
      }
    }
  },
  "aggs": {
    "startup_time_ttest": {
      "t_test": {
        "a": {
          "field": "startup_time_before.adjusted"
        },
        "b": {
          "field": "startup_time_after"
        },
        "type": "paired"
      }
    }
  }
}
```

----------------------------------------

TITLE: Referencing Nested Sub-field Example Elasticsearch SQL
DESCRIPTION: An example query demonstrating how to select a specific sub-field ('dep.dep_name.keyword') from a nested field ('dep'). This query groups results by the 'languages' field and illustrates supported syntax for accessing nested data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-limitations.md#_snippet_1

LANGUAGE: SQL
CODE:
```
SELECT dep.dep_name.keyword FROM test_emp GROUP BY languages;
```

----------------------------------------

TITLE: Configuring Elasticsearch Plugins with YAML Configuration File
DESCRIPTION: Example of an elasticsearch-plugins.yml file that installs two official plugins (analysis-icu and repository-azure) and one unofficial plugin from a custom URL. Each plugin requires an ID, and unofficial plugins must also specify a location URL or Maven coordinates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/manage-plugins-using-configuration-file.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
plugins:
  - id: analysis-icu
  - id: repository-azure
  - id: custom-mapper
    location: https://example.com/archive/custom-mapper-1.0.0.zip
```

----------------------------------------

TITLE: Extracting Minimum Y Coordinate Using ST_YMIN in Elasticsearch ESQL
DESCRIPTION: This ESQL query demonstrates the use of ST_YMIN along with other geometry functions to extract the minimum and maximum coordinates of an envelope around a city boundary. It filters for a specific airport, creates an envelope, and then extracts the coordinate boundaries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/st_ymin.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airport_city_boundaries
| WHERE abbrev == "CPH"
| EVAL envelope = ST_ENVELOPE(city_boundary)
| EVAL xmin = ST_XMIN(envelope), xmax = ST_XMAX(envelope), ymin = ST_YMIN(envelope), ymax = ST_YMAX(envelope)
| KEEP abbrev, airport, xmin, xmax, ymin, ymax
```

----------------------------------------

TITLE: Using Anonymous Filters in Elasticsearch Aggregation
DESCRIPTION: This example shows how to use anonymous filters (array-based) instead of named filters, where buckets are returned in the same order as the filters provided in the request.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-filters-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET logs/_search
{
  "size": 0,
  "aggs" : {
    "messages" : {
      "filters" : {
        "filters" : [
          { "match" : { "body" : "error"   }},
          { "match" : { "body" : "warning" }}
        ]
      }
    }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  "took": 4,
  "timed_out": false,
  "_shards": ...,
  "hits": ...,
  "aggregations": {
    "messages": {
      "buckets": [
        {
          "doc_count": 1
        },
        {
          "doc_count": 2
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Verifying PostgreSQL Table Creation
DESCRIPTION: Docker command to list tables in the 'chinook' database, verifying that the example data was imported correctly.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/api-tutorial.md#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
docker exec -it postgres psql -U myuser -d chinook -c "\dt"
```

----------------------------------------

TITLE: ORDER BY with Aggregation
DESCRIPTION: Demonstrates ordering groups based on aggregate function results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_27

LANGUAGE: sql
CODE:
```
SELECT gender AS g, MIN(salary) AS salary FROM emp GROUP BY gender ORDER BY salary DESC;
```

----------------------------------------

TITLE: Configure Wildcard Mapping for IP Field Example
DESCRIPTION: This snippet shows how to create an index mapping in Elasticsearch with a 'message' field configured as type 'wildcard'. This allows the field to accept varied data, which can then be processed by a runtime script, such as extracting specific patterns like IP addresses.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_14

LANGUAGE: console
CODE:
```
PUT /my-index-000001/
{
  "mappings": {
    "properties": {
      "message": {
        "type": "wildcard"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring index routing allocation filter in Elasticsearch
DESCRIPTION: Illustrates how to add a routing allocation filter to an index using the Elasticsearch API. This example allocates shards from the 'test' index to either 'big' or 'medium' nodes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/shard-allocation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT test/_settings
{
  "index.routing.allocation.include.size": "big,medium"
}
```

----------------------------------------

TITLE: Examples of EQL Divide Function Usage
DESCRIPTION: A comprehensive set of examples demonstrating the `divide` function's behavior with various inputs, including integer division (showing rounding), float division, division by floats, division of floats, division by negative numbers, division of fields, and handling of null inputs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-function-ref.md#_snippet_6

LANGUAGE: eql
CODE:
```
divide(4, 2)                                            // returns 2
divide(4, 3)                                            // returns 1
divide(4, 3.0)                                          // returns 1.333...
divide(4, 0.5)                                          // returns 8
divide(0.5, 4)                                          // returns 0.125
divide(0.5, 0.25)                                       // returns 2.0
divide(4, -2)                                           // returns -2
divide(-4, -2)                                          // returns 2

// process.args_count = 4
divide(process.args_count, 2)                           // returns 2
divide(process.args_count, 3)                           // returns 1
divide(process.args_count, 3.0)                         // returns 1.333...
divide(12, process.args_count)                          // returns 3
divide(process.args_count, 0.5)                         // returns 8
divide(0.5, process.args_count)                         // returns 0.125

// process.parent.args_count = 2
divide(process.args_count, process.parent.args_count)   // returns 2

// null handling
divide(null, 4)                                         // returns null
divide(4, null)                                         // returns null
divide(null, process.args_count)                        // returns null
divide(process.args_count, null)                        // returns null
```

----------------------------------------

TITLE: Installing Plugins in Batch Mode in Elasticsearch
DESCRIPTION: Demonstrates how to install plugins in batch mode, which automatically grants all requested permissions without requiring user confirmation. This is useful for automated installation scripts.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/_other_command_line_parameters.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
sudo bin/elasticsearch-plugin install --batch [pluginname]
```

----------------------------------------

TITLE: Creating and Populating Geo-point Index
DESCRIPTION: Example showing how to create an Elasticsearch index with geo_point mapping and populate it with location data points ordered by timestamp.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-geo-line.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT test
{
    "mappings": {
        "properties": {
            "my_location": { "type": "geo_point" },
            "group":       { "type": "keyword" },
            "@timestamp":  { "type": "date" }
        }
    }
}

POST /test/_bulk?refresh
{"index":{}}
{"my_location": {"lat":52.373184, "lon":4.889187}, "@timestamp": "2023-01-02T09:00:00Z"}
{"index":{}}
{"my_location": {"lat":52.370159, "lon":4.885057}, "@timestamp": "2023-01-02T10:00:00Z"}
{"index":{}}
{"my_location": {"lat":52.369219, "lon":4.901618}, "@timestamp": "2023-01-02T13:00:00Z"}
{"index":{}}
{"my_location": {"lat":52.374081, "lon":4.912350}, "@timestamp": "2023-01-02T16:00:00Z"}
{"index":{}}
{"my_location": {"lat":52.371667, "lon":4.914722}, "@timestamp": "2023-01-03T12:00:00Z"}
```

----------------------------------------

TITLE: Calculate Difference in Quarters with DATE_DIFF - SQL
DESCRIPTION: Calculates the difference in quarters between two date values using DATE_DIFF.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_34

LANGUAGE: SQL
CODE:
```
SELECT DATE_DIFF('qq', '2019-09-04'::date, '2025-04-25'::date) AS "diffInQuarters";
```

----------------------------------------

TITLE: Conditional Reroute Processor Configuration
DESCRIPTION: Example configuration of a reroute processor with a conditional statement for nginx log files.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/reroute-processor.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
{
  "reroute": {
    "tag": "nginx",
    "if" : "ctx?.log?.file?.path?.contains('nginx')",
    "dataset": "nginx"
  }
}
```

----------------------------------------

TITLE: Using Parameterized Time Spans in BUCKET ESQL/JSON
DESCRIPTION: This Elasticsearch _query API request demonstrates passing a time span as a named parameter string to the BUCKET grouping function. The string parameter is automatically converted to a time span value for the function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-time-spans.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{
   "query": """
   FROM employees
   | WHERE hire_date >= "1985-01-01T00:00:00Z" AND hire_date < "1986-01-01T00:00:00Z"
   | STATS hires_per_week = COUNT(*) BY week = BUCKET(hire_date, ?timespan)
   | SORT week
   """,
   "params": [{"timespan" : "1 week"}]
}
```

----------------------------------------

TITLE: Disabling Doc Values in Elasticsearch Mappings
DESCRIPTION: Example demonstrating how to disable doc values for fields where sorting, aggregation, and script access aren't needed. Shows configuration for both default doc values and explicitly disabled doc values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/doc-values.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "status_code": {
        "type":       "keyword"
      },
      "session_id": {
        "type":       "keyword",
        "doc_values": false
      }
    }
  }
}
```

----------------------------------------

TITLE: Syntax for MV_EXPAND Command in ESQL
DESCRIPTION: Demonstrates the basic syntax for using the MV_EXPAND command in Elasticsearch ESQL. The command takes a single parameter, which is the multivalued column to be expanded.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/mv_expand.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
MV_EXPAND column
```

----------------------------------------

TITLE: Proximity Search Query
DESCRIPTION: Shows how to perform proximity searches that allow specified words to be in a flexible order within a maximum word distance
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_6

LANGUAGE: elasticsearch
CODE:
```
"fox quick"~5
```

----------------------------------------

TITLE: JSON Parsing Example in Painless
DESCRIPTION: This code snippet shows how to use the JSON processor to parse a JSON string and add the resulting structured object to the document context.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-ingest-processors-in-painless.md#2025-04-21_snippet_5

LANGUAGE: painless
CODE:
```
Object json = Processors.json(ctx.inputJsonString);
ctx.structuredJson = json;
```

----------------------------------------

TITLE: Using MV_MIN Function in ESQL to Find Minimum Value
DESCRIPTION: This snippet demonstrates how to use the MV_MIN function in ESQL to convert a multivalued expression into a single value containing the minimum value. It creates a row with a multivalued field 'a' and then applies MV_MIN to find the minimum value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/mv_min.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=[2, 1]
| EVAL min_a = MV_MIN(a)
```

----------------------------------------

TITLE: Setting Custom Metadata in Elasticsearch Index Mapping
DESCRIPTION: This snippet demonstrates how to set custom metadata using the _meta field when creating an Elasticsearch index. The _meta field can store application-specific information such as class names and version ranges.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-meta-field.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "_meta": { 
      "class": "MyApp::User",
      "version": {
        "min": "1.0",
        "max": "1.3"
      }
    }
  }
}
```

----------------------------------------

TITLE: Basic Syntax of Change Point Aggregation (JSON)
DESCRIPTION: Demonstrates the minimal configuration for a `change_point` aggregation, requiring only the `buckets_path` parameter to specify the input values from a sibling aggregation. The path indicates the sequence of values to analyze for changes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-change-point-aggregation.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "change_point": {
    "buckets_path": "date_histogram>_count" <1>
  }
}
```

----------------------------------------

TITLE: Searching with Custom Routing Values in Elasticsearch
DESCRIPTION: Example of restricting a search to specific shards by providing routing values in the search request, which improves search performance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-routing-field.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET my-index-000001/_search?routing=user1,user2 <1>
{
  "query": {
    "match": {
      "title": "document"
    }
  }
}
```

----------------------------------------

TITLE: Fuzzy Searching Book Titles using QSTR in ESQL
DESCRIPTION: This ESQL query performs a fuzzy search for book titles similar to 'Hobbit'. It uses the QSTR function with a fuzziness parameter of 2, allowing for slight variations in spelling or typos.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/qstr.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM books
| WHERE QSTR("title: Hobbjt~", {"fuzziness": 2})
```

----------------------------------------

TITLE: GeoTile Grid Aggregation in Elasticsearch
DESCRIPTION: Demonstrates how to use geotile_grid aggregation on geo_point fields to group points into map tile buckets with specified precision.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_10

LANGUAGE: console
CODE:
```
GET /_search
{
  "size": 0,
  "aggs": {
    "my_buckets": {
      "composite": {
        "sources": [
          { "tile": { "geotile_grid": { "field": "location", "precision": 8 } } }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Counting Actors Using Painless in Elasticsearch
DESCRIPTION: This script calculates the number of actors embedded as an array in the 'actors' field of a document. It requires that the 'actors' field be stored in a keyword format, or else values must be extracted from '_source'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs-mdx/painless/painless-field-context.mdx#2025-04-21_snippet_1

LANGUAGE: Painless
CODE:
```
doc['actors'].size()
```

----------------------------------------

TITLE: Mapping Elasticsearch Index: Nested Field (console)
DESCRIPTION: Creates or updates the mapping for `my-index-000001`. It defines a `group` field as `keyword` and a `user` field as `nested` with `first` and `last` keyword sub-fields. This is a prerequisite for the following nested field retrieval examples.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_2

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "group" : { "type" : "keyword" },
      "user": {
        "type": "nested",
        "properties": {
          "first" : { "type" : "keyword" },
          "last" : { "type" : "keyword" }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Mapping Configuration for Date Fields in Elasticsearch
DESCRIPTION: JSON configuration for defining date field mappings in Elasticsearch. This example shows how to set up the 'input_datetime' field as a date type in the index mapping.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_19

LANGUAGE: JSON
CODE:
```
{
  "mappings": {
    ...
    "properties": {
      ...
      "input_datetime": {
        "type": "date"
      }
      ...
    }
    ...
  }
}
```

----------------------------------------

TITLE: Calculate Difference in Seconds with DATE_DIFF - SQL
DESCRIPTION: Example using DATE_DIFF to find the difference in seconds between two datetime values, resulting in a large negative integer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_33

LANGUAGE: SQL
CODE:
```
SELECT DATE_DIFF('seconds', '2019-09-04T11:22:33.123Z'::datetime, '2019-07-12T22:33:11.321Z'::datetime) AS "diffInSeconds";
```

----------------------------------------

TITLE: Creating a Self-managed GitHub Connector with Elasticsearch API
DESCRIPTION: Illustrates the creation of a new GitHub connector using the Elasticsearch API, specifying index name, service type, and other configuration parameters. Assumes access to the Elastic service with necessary API privileges.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-github.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT _connector/my-github-connector
{
  "index_name": "my-elasticsearch-index",
  "name": "Content synced from GitHub",
  "service_type": "github"
}
```

----------------------------------------

TITLE: Basic Percentile Ranks Aggregation in Elasticsearch
DESCRIPTION: Demonstrates how to perform a basic percentile ranks aggregation on a numeric field to calculate the percentage of values below specified thresholds (500ms and 600ms).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-percentile-rank-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET latency/_search
{
  "size": 0,
  "aggs": {
    "load_time_ranks": {
      "percentile_ranks": {
        "field": "load_time",
        "values": [ 500, 600 ]
      }
    }
  }
}
```

----------------------------------------

TITLE: NULL Check Operations
DESCRIPTION: Examples of IS NULL and IS NOT NULL checks in WHERE and HAVING clauses.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_11

LANGUAGE: sql
CODE:
```
SELECT * FROM test WHERE keyword IS NULL;
```

LANGUAGE: json
CODE:
```
"query":{"bool":{"must_not":[{"exists":{"field":"keyword",
```

----------------------------------------

TITLE: Finding Last First Name by Birth Date (LAST) with Explicit Ordering
DESCRIPTION: This query uses LAST to find the last first name in the 'emp' index, explicitly ordering by 'birth_date'. Since LAST orders descending, this returns the first name corresponding to the latest birth date.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_25

LANGUAGE: SQL
CODE:
```
SELECT LAST(first_name, birth_date) FROM emp;
```

----------------------------------------

TITLE: Unmapped Fields Handling in Elasticsearch Sort
DESCRIPTION: Shows how to handle unmapped fields in sorting using the unmapped_type parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/sort-search-results.md#2025-04-21_snippet_11

LANGUAGE: console
CODE:
```
GET /_search
{
  "sort" : [
    { "price" : {"unmapped_type" : "long"} }
  ],
  "query" : {
    "term" : { "product" : "chocolate" }
  }
}
```

----------------------------------------

TITLE: Configuring Translog Flush Threshold Size in Elasticsearch YAML
DESCRIPTION: Sets the maximum total size of operations in the translog before a flush occurs, generating a new Lucene commit point. This prevents recoveries from taking too long. The default is 10 GB.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/translog.md#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
index.translog.flush_threshold_size: 10GB
```

----------------------------------------

TITLE: NULL Predicate Examples in ESQL
DESCRIPTION: Examples demonstrating how to use IS NULL and IS NOT NULL predicates for handling null values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/where.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
WHERE field IS NULL
```

LANGUAGE: esql
CODE:
```
WHERE field IS NOT NULL
```

----------------------------------------

TITLE: Creating Custom Analyzer with Fingerprint Filter
DESCRIPTION: Example of using the create index API to configure a custom analyzer that uses the fingerprint filter with whitespace tokenizer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-fingerprint-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT fingerprint_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "whitespace_fingerprint": {
          "tokenizer": "whitespace",
          "filter": [ "fingerprint" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Concatenating Strings with CONCAT in ESQL
DESCRIPTION: This snippet demonstrates how to use the CONCAT function in ESQL to combine first and last names into a full name. It selects data from the 'employees' table, keeps only the first_name and last_name columns, and then creates a new 'fullname' column using CONCAT.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/concat.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP first_name, last_name
| EVAL fullname = CONCAT(first_name, " ", last_name)
```

----------------------------------------

TITLE: Creating Index with Edge Ngram Filter for Prefix Wildcard Optimization in Elasticsearch
DESCRIPTION: Creates an Elasticsearch index with custom analysis settings that uses edge_ngram token filter to optimize prefix wildcard queries. This approach transforms wildcard prefix queries into more efficient term queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/percolator.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
PUT my_queries1
{
  "settings": {
    "analysis": {
      "analyzer": {
        "wildcard_prefix": { <1>
          "type": "custom",
          "tokenizer": "standard",
          "filter": [
            "lowercase",
            "wildcard_edge_ngram"
          ]
        }
      },
      "filter": {
        "wildcard_edge_ngram": { <2>
          "type": "edge_ngram",
          "min_gram": 1,
          "max_gram": 32
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "query": {
        "type": "percolator"
      },
      "my_field": {
        "type": "text",
        "fields": {
          "prefix": { <3>
            "type": "text",
            "analyzer": "wildcard_prefix",
            "search_analyzer": "standard"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Percolating an Existing Document Using Index Response
DESCRIPTION: Uses index response information like '_id' and '_version' to percolate an existing document. It affirms matching logic by specifying an exact version to avoid conflicts.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-percolate-query.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search
{
  "query": {
    "percolate": {
      "field": "query",
      "index": "my-index-000001",
      "id": "2",
      "version": 1
    }
  }
}
```

----------------------------------------

TITLE: Frequent Item Sets Aggregation with Two Fields and Exclude Parameter
DESCRIPTION: Elasticsearch query using async search to find frequent item sets in e-commerce data, analyzing product categories and customer cities while excluding 'other' as a city name.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-frequent-item-sets-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /kibana_sample_data_ecommerce/_async_search
{
   "size":0,
   "aggs":{
      "my_agg":{
         "frequent_item_sets":{
            "minimum_set_size":3,
            "fields":[
               {
                  "field":"category.keyword"
               },
               {
                  "field":"geoip.city_name",
                  "exclude":"other"
               }
            ],
            "size":3
         }
      }
   }
}
```

----------------------------------------

TITLE: Removing Trailing Whitespaces with RTRIM in ESQL
DESCRIPTION: Demonstrates how to use the RTRIM function to remove trailing whitespaces from string columns in an ESQL query. The example shows applying RTRIM to multiple columns and then concatenating the results with single quotes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/rtrim.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW message = "   some text  ",  color = " red "
| EVAL message = RTRIM(message)
| EVAL color = RTRIM(color)
| EVAL message = CONCAT("'", message, "'")
| EVAL color = CONCAT("'", color, "'")
```

----------------------------------------

TITLE: Configuring Percolator Field Mapping in Elasticsearch
DESCRIPTION: Shows how to set up an index mapping with a percolator field type for storing queries and a text field for matching.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/percolator.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "query": {
        "type": "percolator"
      },
      "field": {
        "type": "text"
      }
    }
  }
}
```

----------------------------------------

TITLE: Extract Hour of Day using HOUR_OF_DAY in Elasticsearch SQL
DESCRIPTION: Demonstrates using the HOUR_OF_DAY function to extract the hour component from a TIMESTAMP literal '2018-02-19T10:23:27Z'. The function returns an integer representing the hour.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_65

LANGUAGE: SQL
CODE:
```
SELECT HOUR_OF_DAY(CAST('2018-02-19T10:23:27Z' AS TIMESTAMP)) AS hour;
```

----------------------------------------

TITLE: Configuring Transport Port in Elasticsearch YAML
DESCRIPTION: Defines the port for inter-node communication. Accepts a single value or range. For master-eligible nodes, use a single port. The node uses the first available port if a range is specified.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/networking-settings.md#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
transport.port: 9300-9400
```

----------------------------------------

TITLE: Case-Insensitive Process Name Contains Check - Elasticsearch
DESCRIPTION: This query identifies `process` events where the `process_name` contains 'foo', doing so without regard to case by setting the `case_insensitive` flag true in a `wildcard` query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_8

LANGUAGE: Elasticsearch
CODE:
```
{"bool":{"must":[{"term":{"event.category":{"value":"process"}}},{"wildcard":{"process_name":{"wildcard":"*foo*","case_insensitive":true,"boost":1.0}}}],"boost":1.0}}
```

----------------------------------------

TITLE: Configuring Index-Level Total Shards Per Node in Elasticsearch
DESCRIPTION: Setting to limit the maximum number of shards (replicas and primaries) that will be allocated to a single node for a specific index. When not set, the value is unbounded.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/total-shards-per-node.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
index.routing.allocation.total_shards_per_node
```

----------------------------------------

TITLE: Declaring and Assigning Primitive Variables Painless
DESCRIPTION: Demonstrates how to declare variables of primitive types (`int`, `double`, `boolean`) in Painless and assign them initial values. Variables without an explicit assignment receive a default value based on their type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-types.md#_snippet_0

LANGUAGE: painless
CODE:
```
int i = 1;        <1>
double d;         <2>
boolean b = true; <3>
```

----------------------------------------

TITLE: Downloading Sample Connector Configuration File - Shell
DESCRIPTION: This shell command uses `curl` to download a sample configuration file (`config.yml.example`) from the Elastic connectors GitHub repository and saves it locally in a `~/connectors-config` directory with the name `config.yml`. This file serves as a template for configuring the self-managed connector service.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-postgresql.md#_snippet_2

LANGUAGE: sh
CODE:
```
curl https://raw.githubusercontent.com/elastic/connectors/main/config.yml.example --output ~/connectors-config/config.yml
```

----------------------------------------

TITLE: Keyed Date Range Aggregation in Elasticsearch
DESCRIPTION: Shows how to create a keyed date range aggregation in Elasticsearch. The query uses custom date formatting and sets the 'keyed' flag to true for a hash-style response.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-daterange-aggregation.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "range": {
      "date_range": {
        "field": "date",
        "format": "MM-yyy",
        "ranges": [
          { "to": "now-10M/M" },
          { "from": "now-10M/M" }
        ],
        "keyed": true
      }
    }
  }
}
```

----------------------------------------

TITLE: Specifying Distance Unit in Geo-distance Aggregation
DESCRIPTION: Demonstrates how to specify the distance unit (kilometers in this case) when using geo-distance aggregation in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-geodistance-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /museums/_search?size=0
{
  "aggs": {
    "rings": {
      "geo_distance": {
        "field": "location",
        "origin": "POINT (4.894 52.3760)",
        "unit": "km", 
        "ranges": [
          { "to": 100 },
          { "from": 100, "to": 300 },
          { "from": 300 }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Listing All SQL Functions in Elasticsearch
DESCRIPTION: Example of using SHOW FUNCTIONS to list all available SQL functions in Elasticsearch along with their types (AGGREGATE, SCALAR, CONDITIONAL, etc.).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-show-functions.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
SHOW FUNCTIONS;

      name       |     type
-----------------+---------------
AVG              |AGGREGATE
COUNT            |AGGREGATE
FIRST            |AGGREGATE
FIRST_VALUE      |AGGREGATE
LAST             |AGGREGATE
LAST_VALUE       |AGGREGATE
MAX              |AGGREGATE
MIN              |AGGREGATE
SUM              |AGGREGATE
KURTOSIS         |AGGREGATE
MAD              |AGGREGATE
PERCENTILE       |AGGREGATE
PERCENTILE_RANK  |AGGREGATE
SKEWNESS         |AGGREGATE
STDDEV_POP       |AGGREGATE
STDDEV_SAMP      |AGGREGATE
SUM_OF_SQUARES   |AGGREGATE
VAR_POP          |AGGREGATE
VAR_SAMP         |AGGREGATE
HISTOGRAM        |GROUPING
CASE             |CONDITIONAL
COALESCE         |CONDITIONAL
GREATEST         |CONDITIONAL
IFNULL           |CONDITIONAL
IIF              |CONDITIONAL
ISNULL           |CONDITIONAL
LEAST            |CONDITIONAL
NULLIF           |CONDITIONAL
NVL              |CONDITIONAL
CURDATE          |SCALAR
CURRENT_DATE     |SCALAR
CURRENT_TIME     |SCALAR
CURRENT_TIMESTAMP|SCALAR
CURTIME          |SCALAR
DATEADD          |SCALAR
DATEDIFF         |SCALAR
DATEPART         |SCALAR
DATETIME_FORMAT  |SCALAR
DATETIME_PARSE   |SCALAR
DATETRUNC        |SCALAR
DATE_ADD         |SCALAR
DATE_DIFF        |SCALAR
DATE_FORMAT      |SCALAR
DATE_PARSE       |SCALAR
DATE_PART        |SCALAR
DATE_TRUNC       |SCALAR
DAY              |SCALAR
DAYNAME          |SCALAR
DAYOFMONTH       |SCALAR
DAYOFWEEK        |SCALAR
DAYOFYEAR        |SCALAR
DAY_NAME         |SCALAR
DAY_OF_MONTH     |SCALAR
DAY_OF_WEEK      |SCALAR
DAY_OF_YEAR      |SCALAR
DOM              |SCALAR
DOW              |SCALAR
DOY              |SCALAR
FORMAT           |SCALAR
HOUR             |SCALAR
HOUR_OF_DAY      |SCALAR
IDOW             |SCALAR
ISODAYOFWEEK     |SCALAR
ISODOW           |SCALAR
ISOWEEK          |SCALAR
ISOWEEKOFYEAR    |SCALAR
ISO_DAY_OF_WEEK  |SCALAR
ISO_WEEK_OF_YEAR |SCALAR
IW               |SCALAR
IWOY             |SCALAR
MINUTE           |SCALAR
MINUTE_OF_DAY    |SCALAR
MINUTE_OF_HOUR   |SCALAR
MONTH            |SCALAR
MONTHNAME        |SCALAR
MONTH_NAME       |SCALAR
MONTH_OF_YEAR    |SCALAR
NOW              |SCALAR
QUARTER          |SCALAR
SECOND           |SCALAR
SECOND_OF_MINUTE |SCALAR
TIMESTAMPADD     |SCALAR
TIMESTAMPDIFF    |SCALAR
TIMESTAMP_ADD    |SCALAR
TIMESTAMP_DIFF   |SCALAR
TIME_PARSE       |SCALAR
TODAY            |SCALAR
TO_CHAR          |SCALAR
WEEK             |SCALAR
WEEK_OF_YEAR     |SCALAR
YEAR             |SCALAR
ABS              |SCALAR
ACOS             |SCALAR
ASIN             |SCALAR
ATAN             |SCALAR
ATAN2            |SCALAR
CBRT             |SCALAR
CEIL             |SCALAR
CEILING          |SCALAR
COS              |SCALAR
COSH             |SCALAR
COT              |SCALAR
DEGREES          |SCALAR
E                |SCALAR
EXP              |SCALAR
EXPM1            |SCALAR
FLOOR            |SCALAR
LOG              |SCALAR
LOG10            |SCALAR
MOD              |SCALAR
PI               |SCALAR
POWER            |SCALAR
RADIANS          |SCALAR
RAND             |SCALAR
RANDOM           |SCALAR
ROUND            |SCALAR
SIGN             |SCALAR
SIGNUM           |SCALAR
SIN              |SCALAR
SINH             |SCALAR
SQRT             |SCALAR
TAN              |SCALAR
TRUNC            |SCALAR
TRUNCATE         |SCALAR
ASCII            |SCALAR
BIT_LENGTH       |SCALAR
CHAR             |SCALAR
CHARACTER_LENGTH |SCALAR
CHAR_LENGTH      |SCALAR
CONCAT           |SCALAR
INSERT           |SCALAR
LCASE            |SCALAR
LEFT             |SCALAR
LENGTH           |SCALAR
LOCATE           |SCALAR
LTRIM            |SCALAR
OCTET_LENGTH     |SCALAR
POSITION         |SCALAR
REPEAT           |SCALAR
REPLACE          |SCALAR
RIGHT            |SCALAR
RTRIM            |SCALAR
SPACE            |SCALAR
STARTS_WITH      |SCALAR
SUBSTRING        |SCALAR
TRIM             |SCALAR
UCASE            |SCALAR
CAST             |SCALAR
CONVERT          |SCALAR
DATABASE         |SCALAR
USER             |SCALAR
ST_ASTEXT        |SCALAR
ST_ASWKT         |SCALAR
ST_DISTANCE      |SCALAR
ST_GEOMETRYTYPE  |SCALAR
ST_GEOMFROMTEXT  |SCALAR
ST_WKTTOSQL      |SCALAR
ST_X             |SCALAR
ST_Y             |SCALAR
ST_Z             |SCALAR
SCORE            |SCORE
```

----------------------------------------

TITLE: Indexing Documents with Rank Features
DESCRIPTION: This snippet shows how to index documents into the test index set up previously. The documents include rank feature fields such as pagerank, url_length, and topics, which are used for enhancing search relevance scores. Each document is indexed with a specific ID and refresh parameter to make it searchable immediately.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-rank-feature-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /test/_doc/1?refresh
{
  "url": "https://en.wikipedia.org/wiki/2016_Summer_Olympics",
  "content": "Rio 2016",
  "pagerank": 50.3,
  "url_length": 42,
  "topics": {
    "sports": 50,
    "brazil": 30
  }
}

PUT /test/_doc/2?refresh
{
  "url": "https://en.wikipedia.org/wiki/2016_Brazilian_Grand_Prix",
  "content": "Formula One motor race held on 13 November 2016",
  "pagerank": 50.3,
  "url_length": 47,
  "topics": {
    "sports": 35,
    "formula one": 65,
    "brazil": 20
  }
}

PUT /test/_doc/3?refresh
{
  "url": "https://en.wikipedia.org/wiki/Deadpool_(film)",
  "content": "Deadpool is a 2016 American superhero film",
  "pagerank": 50.3,
  "url_length": 37,
  "topics": {
    "movies": 60,
    "super hero": 65
  }
}
```

----------------------------------------

TITLE: Advanced Jira Sync Rules - Assignee and Date Filtering
DESCRIPTION: JSON configuration to filter Jira issues based on assignee status and creation date. This example identifies unassigned issues created more than a day ago.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-jira.md#2025-04-21_snippet_2

LANGUAGE: js
CODE:
```
[
  {
    "query": "assignee is EMPTY and created < -1d"
  }
]
```

----------------------------------------

TITLE: Using CURDATE Function in Elasticsearch SQL
DESCRIPTION: This snippet demonstrates fetching the current date using the `CURDATE()` function in Elasticsearch SQL. It retrieves the date the query reached the server and aliases it as `result`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_11

LANGUAGE: SQL
CODE:
```
SELECT CURDATE() AS result;
```

----------------------------------------

TITLE: Supported Operators on Nested Fields in WHERE Elasticsearch SQL
DESCRIPTION: Example demonstrating supported usage of comparison ('>=') and logical ('OR', 'IS NULL') operators when applied to nested fields ('dep.start_date', 'dep.dep_end_date') within the 'WHERE' clause. Unlike scalar functions, these operators are allowed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-limitations.md#_snippet_4

LANGUAGE: SQL
CODE:
```
SELECT * FROM test_emp WHERE dep.start_date >= CAST('2020-01-01' AS DATE) OR dep.dep_end_date IS NULL;
```

----------------------------------------

TITLE: Computing Day of Week in Painless for Elasticsearch
DESCRIPTION: This script retrieves the doc value for the 'datetime' field and determines the corresponding day of the week using the getDayOfWeekEnum function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-field-context.md#2025-04-21_snippet_0

LANGUAGE: painless
CODE:
```
doc['datetime'].value.getDayOfWeekEnum().getDisplayName(TextStyle.FULL, Locale.ROOT)
```

----------------------------------------

TITLE: REST Endpoint URL Examples in Elasticsearch
DESCRIPTION: Examples showing Elasticsearch's convention of using singular nouns rather than plurals in REST API endpoints. The recommended format uses singular forms like '/_ingest/pipeline' and '/_ingest/pipeline/{id}' rather than plural forms.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
/_ingest/pipeline
/_ingest/pipeline/{id}
```

----------------------------------------

TITLE: Basic Nested Aggregation Query in Elasticsearch
DESCRIPTION: Query demonstrating how to perform a nested aggregation to find the minimum price across all resellers for a product.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-nested-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /products/_search?size=0
{
  "query": {
    "match": {
      "name": "led tv"
    }
  },
  "aggs": {
    "resellers": {
      "nested": {
        "path": "resellers"
      },
      "aggs": {
        "min_price": {
          "min": {
            "field": "resellers.price"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Simulating Pipeline Execution with Natural Language Query (Console)
DESCRIPTION: This snippet demonstrates how to simulate running a document through the previously created `query_helper_pipeline`. It provides a sample document with a natural language query in the `content` field. The simulation shows how the pipeline processes this input, applying the script and inference processors to potentially generate an Elasticsearch query in the output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/inference-processor.md#_snippet_7

LANGUAGE: console
CODE:
```
POST _ingest/pipeline/query_helper_pipeline/_simulate
{
  "docs": [
    {
      "_source": {
        "content": "artificial intelligence in medicine articles published in the last 12 months" 
      }
    }
  ]
}
```

----------------------------------------

TITLE: Disabling Stored Fields and Metadata in Elasticsearch Console
DESCRIPTION: This console command demonstrates using `stored_fields: "_none_"` to explicitly disable the retrieval of any stored fields or metadata fields (like `_id`, `_type`) in the search response. Note that this option is mutually exclusive with requesting the `_source` or `version`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_21

LANGUAGE: console
CODE:
```
GET /_search
{
  "stored_fields": "_none_",
  "query" : {
    "term" : { "user" : "kimchy" }
  }
}
```

----------------------------------------

TITLE: Comparing Date Field with Date Math Equality in Elasticsearch SQL
DESCRIPTION: This snippet queries the `emp` table, selecting the `hire_date` field. It filters results where `hire_date` is equal to the date calculated by applying the date math expression `'1987-03-01||+4y/y'`. This shows how to use date math within a WHERE clause comparison.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_0

LANGUAGE: SQL
CODE:
```
SELECT hire_date FROM emp WHERE hire_date = '1987-03-01||+4y/y';
```

----------------------------------------

TITLE: Defining an Inner Pipeline in Elasticsearch
DESCRIPTION: Creates a pipeline named 'pipelineA' that sets a field value. This pipeline will be called from another pipeline to demonstrate nesting capabilities.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/pipeline-processor.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT _ingest/pipeline/pipelineA
{
  "description" : "inner pipeline",
  "processors" : [
    {
      "set" : {
        "field": "inner_pipeline_set",
        "value": "inner"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Date Histogram with Formatted Output Example
DESCRIPTION: Demonstrates how to format the output of a date histogram value source. This example formats the daily buckets in yyyy-MM-dd format.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_7

LANGUAGE: json
CODE:
```
GET /_search
{
  "size": 0,
  "aggs": {
    "my_buckets": {
      "composite": {
        "sources": [
          {
            "date": {
              "date_histogram": {
                "field": "timestamp",
                "calendar_interval": "1d",
                "format": "yyyy-MM-dd"         <1>
              }
            }
          }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Pattern Replace Character Filter in Elasticsearch
DESCRIPTION: Replaces characters matching a specific regular expression with a designated replacement during text analysis
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/character-filter-reference.md#2025-04-21_snippet_2

LANGUAGE: markdown
CODE:
```
`pattern_replace` character filter replaces any characters matching a regular expression with the specified replacement
```

----------------------------------------

TITLE: Configure Nested Object Mapping with Long Fields
DESCRIPTION: This snippet sets up an Elasticsearch index mapping for a nested object named 'measures'. The 'measures' object contains two sub-fields, 'start' and 'end', both explicitly mapped as type 'long', preparing the index for storing and processing numerical duration data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_18

LANGUAGE: console
CODE:
```
PUT /my-index-000001/
{
  "mappings": {
    "properties": {
      "measures": {
        "properties": {
          "start": {
            "type": "long"
          },
          "end": {
           "type": "long"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Removing Leading Whitespaces with LTRIM in ESQL
DESCRIPTION: This snippet demonstrates the usage of LTRIM function to remove leading whitespaces from strings. It also shows how to combine LTRIM with CONCAT to visualize the results. The example processes two strings, one with leading and trailing spaces, and another with only leading spaces.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/ltrim.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW message = "   some text  ",  color = " red "
| EVAL message = LTRIM(message)
| EVAL color = LTRIM(color)
| EVAL message = CONCAT("'", message, "'")
| EVAL color = CONCAT("'", color, "'")
```

----------------------------------------

TITLE: Search and Highlight on comment Field with matched_fields (comment.english) (Unified) - Elasticsearch DSL
DESCRIPTION: Executes a search on `index1` identical to the previous one but configures highlighting for the `comment` field using `matched_fields`. By including `comment.english` in `matched_fields`, matches from the English-analyzed version are combined into the `comment` field's highlighting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_12

LANGUAGE: Elasticsearch DSL
CODE:
```
GET index1/_search
{
  "query": {
    "query_string": {
      "query": "running with scissors",
      "fields": ["comment", "comment.english"]
    }
  },
  "highlight": {
    "order": "score",
    "fields": {
      "comment": {
        "matched_fields": ["comment.english"]
      }
    }
  }
}
```

----------------------------------------

TITLE: RRF Query with Multiple Standard Retrievers
DESCRIPTION: Example showing how to combine BM25 and ELSER queries using RRF in Elasticsearch for improved relevance scoring.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reciprocal-rank-fusion.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
GET example-index/_search
{
    "retriever": {
        "rrf": {
            "retrievers": [
                {
                    "standard": {
                        "query": {
                            "term": {
                                "text": "blue shoes sale"
                            }
                        }
                    }
                },
                {
                    "standard": {
                        "query": {
                            "sparse_vector":{
                                "field": "ml.tokens",
                                "inference_id": "my_elser_model",
                                "query": "What blue shoes are on sale?"
                            }
                        }
                    }
                }
            ],
            "rank_window_size": 50,
            "rank_constant": 20
        }
    }
}
```

----------------------------------------

TITLE: Using _local Preference Parameter in Elasticsearch
DESCRIPTION: Demonstrates the _local preference parameter which routes search requests to locally available shards when possible, falling back to other nodes if needed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/licenses/slf4j-api-NOTICE.txt#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
preference=_local
```

----------------------------------------

TITLE: Calculating Sum of Array Values Using MV_SUM in ESQL
DESCRIPTION: This snippet demonstrates how to use the MV_SUM function to calculate the sum of all values in an array field. The function takes an array as input and returns a single integer representing the sum of all elements in the array.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_sum.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=[3, 5, 6]
| EVAL sum_a = MV_SUM(a)
```

----------------------------------------

TITLE: Setting up Circle Processor Pipeline in Elasticsearch
DESCRIPTION: This snippet shows how to create an index with geo_shape mapping and define an ingest pipeline with the circle processor. The pipeline converts circle shapes to polygons with a specified error distance, allowing for efficient indexing and querying of circle-like geometries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/ingest-circle-processor.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT circles
{
  "mappings": {
    "properties": {
      "circle": {
        "type": "geo_shape"
      }
    }
  }
}

PUT _ingest/pipeline/polygonize_circles
{
  "description": "translate circle to polygon",
  "processors": [
    {
      "circle": {
        "field": "circle",
        "error_distance": 28.0,
        "shape_type": "geo_shape"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Calculating Distance (ST_Distance) in Elasticsearch SQL
DESCRIPTION: Describes the ST_Distance function which takes two geometries (which must be points) and returns the distance between them in meters as a double. It returns null if either input is null. The example calculates the distance between two points defined by WKT strings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-geo.md#_snippet_6

LANGUAGE: SQL
CODE:
```
ST_Distance(
    geometry, <1>
    geometry  <2>
)
```

LANGUAGE: SQL
CODE:
```
SELECT ST_Distance(ST_WKTToSQL('POINT (10 20)'), ST_WKTToSQL('POINT (20 30)')) distance;
```

----------------------------------------

TITLE: Complete Kuromoji Analyzer Configuration Example
DESCRIPTION: Full example of configuring a kuromoji analyzer with user dictionary and analyzing text with it.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-tokenizer.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
PUT kuromoji_sample
{
  "settings": {
    "index": {
      "analysis": {
        "tokenizer": {
          "kuromoji_user_dict": {
            "type": "kuromoji_tokenizer",
            "mode": "extended",
            "discard_punctuation": "false",
            "user_dictionary": "userdict_ja.txt",
            "lenient": "true"
          }
        },
        "analyzer": {
          "my_analyzer": {
            "type": "custom",
            "tokenizer": "kuromoji_user_dict"
          }
        }
      }
    }
  }
}

GET kuromoji_sample/_analyze
{
  "analyzer": "my_analyzer",
  "text": "東京スカイツリー"
}
```

----------------------------------------

TITLE: Filtering Documents by Directory Path Using Path Hierarchy Tokenizer
DESCRIPTION: This example uses a term query on the file_path.tree field to filter documents with file paths that exist within a specific directory, matching only files in Alice's May 16, 2017 directory.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pathhierarchy-tokenizer.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET file-path-test/_search
{
  "query": {
    "term": {
      "file_path.tree": "/User/alice/photos/2017/05/16"
    }
  }
}
```

----------------------------------------

TITLE: Authentication Success Event Logging in Elasticsearch
DESCRIPTION: JSON structure for logging successful user authentication events.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
{"type":"audit", "timestamp":"2020-12-30T22:03:35,018+0200", "node.id":"0RMNyghkQYCc_gVd1G6tZQ", "event.type":"rest", "event.action":"authentication_success", "authentication.type":"REALM", "user.name":"elastic", "user.realm":"reserved", "origin.type":"rest", "origin.address":"[::1]:51014", "realm":"reserved", "url.path":"/twitter/_search", "url.query":"pretty", "request.method":"POST", "request.id":"nHV3UMOoSiu-TaSPWCfxGg"}
```

----------------------------------------

TITLE: Using CIDR_MATCH Function in ESQL Query
DESCRIPTION: Demonstrates how to use the CIDR_MATCH function to filter records based on whether an IP address (ip1) matches any of the specified CIDR blocks (127.0.0.2/32 or 127.0.0.3/32). The query returns selected fields including card, host, ip0, and ip1.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/cidr_match.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM hosts
| WHERE CIDR_MATCH(ip1, "127.0.0.2/32", "127.0.0.3/32")
| KEEP card, host, ip0, ip1
```

----------------------------------------

TITLE: Advanced Querying and Aggregations with Parent-Join Fields in Elasticsearch
DESCRIPTION: Example demonstrating advanced features with join fields including parent_id query, aggregations on parent fields, and accessing join fields in scripts. This shows the versatility of parent-child relationships.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/parent-join.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET my-index-000001/_search
{
  "query": {
    "parent_id": { <1>
      "type": "answer",
      "id": "1"
    }
  },
  "aggs": {
    "parents": {
      "terms": {
        "field": "my_join_field#question", <2>
        "size": 10
      }
    }
  },
  "runtime_mappings": {
    "parent": {
      "type": "long",
      "script": """
        emit(Integer.parseInt(doc['my_join_field#question'].value)) <3>
      """
    }
  },
  "fields": [
    { "field": "parent" }
  ]
}
```

----------------------------------------

TITLE: Creating Microsoft Teams Connector using API - Elasticsearch API
DESCRIPTION: This code snippet demonstrates how to create a new self-managed Microsoft Teams connector using the Elasticsearch Create Connector API. Required parameters include the index name, connector name, and service type. The expected input is a JSON body with these details, and successful execution results in the creation of the connector.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-teams.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT _connector/my-microsoft_teams-connector
{
  "index_name": "my-elasticsearch-index",
  "name": "Content synced from Microsoft Teams",
  "service_type": "microsoft_teams"
}
```

----------------------------------------

TITLE: Removing a Single Field with Remove Processor in Elasticsearch
DESCRIPTION: Configuration example that demonstrates how to remove a single field named 'user_agent' from documents processed by an Elasticsearch ingest pipeline.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/remove-processor.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "remove": {
    "field": "user_agent"
  }
}
```

----------------------------------------

TITLE: Missing Value Date Histogram Example
DESCRIPTION: Example showing how to handle missing values in date histogram aggregation by assigning them a default date.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-datehistogram-aggregation.md#2025-04-21_snippet_15

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "sale_date": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "year",
        "missing": "2000/01/01"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring a Custom Edge N-gram Tokenizer in Elasticsearch
DESCRIPTION: Example of configuring a custom edge_ngram tokenizer with min_gram 2, max_gram 10, and token_chars set to letters and digits. The analyzer is tested with the text '2 Quick Foxes.'
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-edgengram-tokenizer.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "my_tokenizer"
        }
      },
      "tokenizer": {
        "my_tokenizer": {
          "type": "edge_ngram",
          "min_gram": 2,
          "max_gram": 10,
          "token_chars": [
            "letter",
            "digit"
          ]
        }
      }
    }
  }
}

POST my-index-000001/_analyze
{
  "analyzer": "my_analyzer",
  "text": "2 Quick Foxes."
}
```

----------------------------------------

TITLE: Pivoting with Aliased Columns
DESCRIPTION: This snippet demonstrates pivoting with the use of aliases for the columns in the resulting table. The query allows users to customize column names in the pivot operation for readability while aggregating average salary data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_32

LANGUAGE: sql
CODE:
```
SELECT * FROM (SELECT languages, gender, salary FROM test_emp) PIVOT (AVG(salary) FOR gender IN ('M' AS "XY", 'F' "XX"));
```

----------------------------------------

TITLE: Date Histogram Aggregation with Time Zone in Elasticsearch
DESCRIPTION: This example shows how to use the 'time_zone' parameter in a date histogram aggregation to adjust bucketing based on a specific time zone.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-datehistogram-aggregation.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1?refresh
{
  "date": "2015-10-01T00:30:00Z"
}

PUT my-index-000001/_doc/2?refresh
{
  "date": "2015-10-01T01:30:00Z"
}

GET my-index-000001/_search?size=0
{
  "aggs": {
    "by_day": {
      "date_histogram": {
        "field":     "date",
        "calendar_interval":  "day"
      }
    }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "by_day": {
      "buckets": [
        {
          "key_as_string": "2015-10-01T00:00:00.000Z",
          "key":           1443657600000,
          "doc_count":     2
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Removing Multiple Fields with Remove Processor in Elasticsearch
DESCRIPTION: Configuration example that shows how to remove multiple fields ('user_agent' and 'url') from documents using an array in the 'field' parameter of the Remove processor.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/remove-processor.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "remove": {
    "field": ["user_agent", "url"]
  }
}
```

----------------------------------------

TITLE: Precedence Operator Example in Painless
DESCRIPTION: Demonstrates the use of parentheses to control operator precedence in arithmetic operations. Shows how precedence affects the order of evaluation in mathematical expressions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-general.md#2025-04-21_snippet_0

LANGUAGE: painless
CODE:
```
int x = (5+4)*6;   
int y = 12/(x-50);
```

----------------------------------------

TITLE: Unsupported Sorting by Scalar Function on Aggregate Elasticsearch SQL
DESCRIPTION: Example demonstrating a limitation: sorting ('ORDER BY') cannot be applied to an expression that uses a scalar function ('ROUND') on top of an aggregate result ('AVG(salary)'). This query will fail.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-limitations.md#_snippet_6

LANGUAGE: SQL
CODE:
```
SELECT age, ROUND(AVG(salary)) AS avg FROM test GROUP BY age ORDER BY avg;
```

----------------------------------------

TITLE: Foreach Processor Configuration for String Array
DESCRIPTION: Configuration of the Foreach processor that applies an uppercase transformation to each element in an array of strings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/foreach-processor.md#2025-04-21_snippet_1

LANGUAGE: js
CODE:
```
{
  "foreach" : {
    "field" : "values",
    "processor" : {
      "uppercase" : {
        "field" : "_ingest._value"
      }
    }
  }
}
```

----------------------------------------

TITLE: Converting String to Lowercase in ESQL
DESCRIPTION: This snippet demonstrates how to use the TO_LOWER function to convert a string to lowercase in an ESQL query. It creates a row with a 'message' field and then uses EVAL to create a new field 'message_lower' with the lowercase version of the message.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_lower.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW message = "Some Text"
| EVAL message_lower = TO_LOWER(message)
```

----------------------------------------

TITLE: Converting Array of Integers to Strings using TO_STRING in ESQL
DESCRIPTION: Shows how TO_STRING function handles array inputs by converting each integer element to its string representation. Demonstrates conversion of array [10, 9, 8] to array of strings ["10", "9", "8"].
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_string.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
ROW a=[10, 9, 8]
| EVAL j = TO_STRING(a)
```

----------------------------------------

TITLE: Advanced Sync Rule for Knowledge Service
DESCRIPTION: JSON configuration to filter and index ServiceNow Knowledge documents based on author name
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-servicenow.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
[
  {
    "service": "Knowledge",
    "query": "author.nameSTARTSWITHSystem Administrator"
  }
]
```

----------------------------------------

TITLE: Execute UCASE Function Example - SQL
DESCRIPTION: Demonstrates a practical usage example of the UCASE SQL function in Elasticsearch. It shows how to convert all characters in a given string expression to uppercase.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-string.md#_snippet_5

LANGUAGE: sql
CODE:
```
SELECT UCASE('Elastic');
```

----------------------------------------

TITLE: Extracting Characters from Left Side of String using LEFT Function in ESQL
DESCRIPTION: This snippet demonstrates the usage of the LEFT function in ESQL. It extracts the first 3 characters from the 'last_name' field of the 'employees' index. The function takes two parameters: the string to extract from and the number of characters to extract.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/left.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP last_name
| EVAL left = LEFT(last_name, 3)
```

----------------------------------------

TITLE: Using STARTS_WITH Function in ESQL Query
DESCRIPTION: This query filters employee data and checks if last names start with 'B'. It keeps only the last_name column and creates a new boolean column ln_S containing the result of the STARTS_WITH check.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/starts_with.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP last_name
| EVAL ln_S = STARTS_WITH(last_name, "B")
```

----------------------------------------

TITLE: Casting and Concatenating Values to Create a Version String in ESQL
DESCRIPTION: This snippet demonstrates the use of the `::` operator for type casting in ESQL. It converts an integer to a string, concatenates it with other string literals, and finally casts the result to a VERSION type. The operation combines multiple type conversions and string concatenation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/operators/cast.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW ver = CONCAT(("0"::INT + 1)::STRING, ".2.3")::VERSION
```

----------------------------------------

TITLE: Map Index with Synthetic Source & Long Array (console)
DESCRIPTION: Configures an Elasticsearch index 'idx' with synthetic _source enabled and a 'long' field mapping. Indexes a document with an array of long values to demonstrate how synthetic _source sorts them upon retrieval.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/number.md#_snippet_1

LANGUAGE: console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "long": { "type": "long" }
    }
  }
}
PUT idx/_doc/1
{
  "long": [0, 0, -123466, 87612]
}
```

----------------------------------------

TITLE: Indexing a Document with Nested Objects in Elasticsearch
DESCRIPTION: Example of indexing a hierarchical JSON document containing nested objects. The document includes a top-level 'region' field and a nested 'manager' object, which itself contains an 'age' field and a nested 'name' object.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/object.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1
{ <1>
  "region": "US",
  "manager": { <2>
    "age":     30,
    "name": { <3>
      "first": "John",
      "last":  "Smith"
    }
  }
}
```

----------------------------------------

TITLE: Iterating Over Lists Using For-In Loop in Painless
DESCRIPTION: Shows two equivalent ways to iterate over a list using for-in loops in Painless. The first example uses the 'def' keyword for variable declaration, while the second omits it.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-statements.md#2025-04-21_snippet_1

LANGUAGE: painless
CODE:
```
for (def item : list) {
  // do something
}
```

LANGUAGE: painless
CODE:
```
for (item in list) {
  // do something
}
```

----------------------------------------

TITLE: Getting extension details with deployment information in Elasticsearch Service
DESCRIPTION: API call to retrieve information about a specific extension including which deployments are currently using it. Uses the include_deployments parameter set to true.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-plugins-guide.md#2025-04-21_snippet_9

LANGUAGE: sh
CODE:
```
curl -X GET \
  https://api.elastic-cloud.com/api/v1/deployments/extensions/EXTENSION_ID?include_deployments=true \
  -H 'Content-Type: application/json' \
  -H "Authorization: ApiKey $CLOUD_API_KEY" \
```

----------------------------------------

TITLE: Retrieving Current Date and Time with NOW() in ESQL
DESCRIPTION: This snippet demonstrates how to use the NOW() function in ESQL to get the current date and time. The result is stored in a variable named 'current_date' within a ROW construct.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/now.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW current_date = NOW()
```

----------------------------------------

TITLE: Using WHERE Clause for Filtering
DESCRIPTION: Example of using the WHERE clause to filter rows based on a condition, returning only rows where emp_no equals 10001.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_10

LANGUAGE: sql
CODE:
```
SELECT last_name FROM emp WHERE emp_no = 10001;
```

----------------------------------------

TITLE: Generating CA-signed Elasticsearch certificates
DESCRIPTION: This script generates CA-signed certificates for Elasticsearch nodes. It copies the CA certificate and key, generates the certificates using `elasticsearch-certutil`, and copies the generated certificates and keys to the specified test resources directory.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/core/src/test/resources/org/elasticsearch/xpack/security/transport/ssl/certs/simple/nodes/readme.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
rm -rf /tmp/certs; mkdir /tmp/certs; rm -rf local-ca
cp $SOURCE_ROOT/x-pack/plugin/core/src/test/resources/org/elasticsearch/xpack/security/transport/ssl/certs/simple/nodes/ca.crt .
cp $SOURCE_ROOT/x-pack/plugin/core/src/test/resources/org/elasticsearch/xpack/security/transport/ssl/certs/simple/nodes/ca.key .
bin/elasticsearch-certutil cert --pem --silent --in instances.yml --out /tmp/certs/ca.zip --days 7300 --ca-key ca.key --ca-cert ca.crt
unzip /tmp/certs/ca.zip -d ./local-ca
cp -r ./local-ca/n*/*.crt $SOURCE_ROOT/x-pack/plugin/core/src/test/resources/org/elasticsearch/xpack/security/transport/ssl/certs/simple/nodes/ca-signed
cp -r ./local-ca/n*/*.key $SOURCE_ROOT/x-pack/plugin/core/src/test/resources/org/elasticsearch/xpack/security/transport/ssl/certs/simple/nodes/ca-signed
```

----------------------------------------

TITLE: Using LEFT Function with ESQL
DESCRIPTION: Demonstrates how to extract the first 3 characters from employee last names using the LEFT function in ESQL. The query keeps only the last_name column and creates a new column 'left' containing the first 3 characters of each last name.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/left.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP last_name
| EVAL left = LEFT(last_name, 3)
```

----------------------------------------

TITLE: Analyzing Text with Default N-gram Tokenizer in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the default N-gram tokenizer to analyze text in Elasticsearch. It shows the API call and the resulting tokens produced.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-ngram-tokenizer.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
POST _analyze
{
  "tokenizer": "ngram",
  "text": "Quick Fox"
}
```

LANGUAGE: text
CODE:
```
[ Q, Qu, u, ui, i, ic, c, ck, k, "k ", " ", " F", F, Fo, o, ox, x ]
```

----------------------------------------

TITLE: Transforming Data in Elasticsearch Watch
DESCRIPTION: A transform script that formats the execution time as an RFC 1123 formatted date and includes aggregations from the payload in the returned object.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-watcher-transform-context.md#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
def theDate = ZonedDateTime.ofInstant(ctx.execution_time.toInstant(), ctx.execution_time.getZone());
return ['human_date': DateTimeFormatter.RFC_1123_DATE_TIME.format(theDate),
        'aggregations': ctx.payload.aggregations]
```

----------------------------------------

TITLE: Complete Example of K-S Test for Comparing Latency Distributions by Version
DESCRIPTION: A comprehensive example showing how to execute a bucket_count_ks_test on terms aggregation results. This example tests if latency distributions across different software versions follow a uniform distribution by using range buckets based on latency percentiles.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-count-ks-test-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST correlate_latency/_search?size=0&filter_path=aggregations
{
  "aggs": {
    "buckets": {
      "terms": { <1>
        "field": "version",
        "size": 2
      },
      "aggs": {
        "latency_ranges": {
          "range": { <2>
            "field": "latency",
            "ranges": [
              { "to": 0 },
              { "from": 0, "to": 105 },
              { "from": 105, "to": 225 },
              { "from": 225, "to": 445 },
              { "from": 445, "to": 665 },
              { "from": 665, "to": 885 },
              { "from": 885, "to": 1115 },
              { "from": 1115, "to": 1335 },
              { "from": 1335, "to": 1555 },
              { "from": 1555, "to": 1775 },
              { "from": 1775 }
            ]
          }
        },
        "ks_test": { <3>
          "bucket_count_ks_test": {
            "buckets_path": "latency_ranges>_count",
            "alternative": ["less", "greater", "two_sided"]
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Elasticsearch Span Term Query Example
DESCRIPTION: This snippet demonstrates a basic `span_term` query in Elasticsearch.  It searches for spans where the `user.id` field contains the term `kimchy`.  This query is used to find documents matching the specified term within a span context.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-span-term-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "span_term" : { "user.id" : "kimchy" }
  }
}
```

----------------------------------------

TITLE: Configuring and Using Katakana Uppercase Token Filter in Elasticsearch
DESCRIPTION: This snippet demonstrates how to configure an index with a custom analyzer that uses the katakana_uppercase token filter, and then shows how to test the analyzer with Japanese katakana text. The example converts small katakana characters to their standard uppercase versions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-katakana-uppercase.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT kuromoji_sample
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "my_analyzer": {
            "tokenizer": "kuromoji_tokenizer",
            "filter": [
              "katakana_uppercase"
            ]
          }
        }
      }
    }
  }
}

GET kuromoji_sample/_analyze
{
  "analyzer": "my_analyzer",
  "text": "ストップウォッチ"
}
```

----------------------------------------

TITLE: Querying Elasticsearch Index in Python
DESCRIPTION: Performs a search query on an Elasticsearch index using the Python client.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/ml/src/main/resources/org/elasticsearch/xpack/ml/inference.nlp.tokenizers/spm_precompiled_normalizer.txt#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from elasticsearch import Elasticsearch

es = Elasticsearch([{'host': 'localhost', 'port': 9200}])

result = es.search(index="my-index", body={
    "query": {
        "match": {
            "title": "elasticsearch"
        }
    }
})

for hit in result['hits']['hits']:
    print(hit['_source'])
```

----------------------------------------

TITLE: Ordering Composite Aggregations in Elasticsearch
DESCRIPTION: Shows how to specify custom ordering (ascending/descending) for different value sources in a composite aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_14

LANGUAGE: console
CODE:
```
GET /_search
{
  "size": 0,
  "aggs": {
    "my_buckets": {
      "composite": {
        "sources": [
          { "date": { "date_histogram": { "field": "timestamp", "calendar_interval": "1d", "order": "desc" } } },
          { "product": { "terms": { "field": "product", "order": "asc" } } }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing a Polygon with Hole using WKT in Elasticsearch
DESCRIPTION: Adds a document to the 'example' index with a Polygon geometry that includes a hole, specified in Well-Known Text (WKT) format. The first parenthesis contains the outer boundary, and the second parenthesis contains the interior hole.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-shape.md#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
POST /example/_doc
{
  "location" : "POLYGON ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8, 100.2 0.2))"
}
```

----------------------------------------

TITLE: Defining Geotile to Shape Ingest Pipeline in Elasticsearch
DESCRIPTION: Creates an ingest pipeline named 'geotile2shape' that converts rectangular z/x/y geotiles to bounding boxes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/ingest-geo-grid-processor.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT _ingest/pipeline/geotile2shape
{
  "description": "translate rectangular z/x/y geotile to bounding box",
  "processors": [
    {
      "geo_grid": {
        "field": "geocell",
        "tile_type": "geotile"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Setting Up Index with Percolator for Reindexing
DESCRIPTION: Creates an index with percolator mapping and adds an alias for better maintainability during reindexing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/percolator.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT index
{
  "mappings": {
    "properties": {
      "query" : {
        "type" : "percolator"
      },
      "body" : {
        "type": "text"
      }
    }
  }
}

POST _aliases
{
  "actions": [
    {
      "add": {
        "index": "index",
        "alias": "queries"
      }
    }
  ]
}

PUT queries/_doc/1?refresh
{
  "query" : {
    "match" : {
      "body" : "quick brown fox"
    }
  }
}
```

----------------------------------------

TITLE: Running Outlook Connector Docker Container
DESCRIPTION: This shell command runs the Docker container for the Outlook connector, mounting the configuration file and specifying the network and other options.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-outlook.md#2025-04-21_snippet_5

LANGUAGE: sh
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Equality Equals with Def Type in Painless
DESCRIPTION: Illustrates the usage of the equality equals operator with the 'def' type in Painless.  It assigns integer and HashMap/ArrayList to 'def' variables, then compares the 'def' variables, showing how the operator handles dynamic typing and different object types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_15

LANGUAGE: painless
CODE:
```
"def a = 0;               <1>
def b = 1;               <2>
boolean c = a == b;      <3>
def d = new HashMap();   <4>
def e = new ArrayList(); <5>
c = d == e;              <6>"
```

----------------------------------------

TITLE: Creating Self-managed S3 Connector via API - Elasticsearch - Console
DESCRIPTION: This snippet demonstrates how to create an Amazon S3 connector on Elasticsearch using the Create Connector API, specifying the index name, connector name, and service type. The required privileges for users are outlined for API key creation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-s3.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT _connector/my-s3-connector
{
  "index_name": "my-elasticsearch-index",
  "name": "Content synced from Amazon S3",
  "service_type": "s3"
}
```

----------------------------------------

TITLE: IP CIDR Match Function Definition in SQL for Elasticsearch
DESCRIPTION: This SQL function definition checks if a given IP address is contained within one or more specified CIDR blocks. It takes an IP address and a list of CIDR blocks as input and returns a boolean result.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/cidr_match.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.

**Description**

Returns true if the provided IP is contained in one of the provided CIDR blocks.
```

----------------------------------------

TITLE: Percolating Multiple Documents Simultaneously
DESCRIPTION: This example demonstrates matching multiple documents with percolator queries using an array of documents. It maps each matched query to relevant documents via the '_percolator_document_slot'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-percolate-query.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search
{
  "query": {
    "percolate": {
      "field": "query",
      "documents": [
        {
          "message": "bonsai tree"
        },
        {
          "message": "new tree"
        },
        {
          "message": "the office"
        },
        {
          "message": "office tree"
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Creating an Inference Pipeline in Elasticsearch
DESCRIPTION: API call to create an inference pipeline for a language identification model. The pipeline is configured to process the 'text' field and store the result in the 'predicted_lang' field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/repository-gcs/licenses/google-api-services-storage-NOTICE.txt#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
PUT _ingest/pipeline/lang_ident_pipeline
{
  "description": "Language identification pipeline",
  "processors": [
    {
      "inference": {
        "model_id": "lang_ident_model",
        "target_field": "predicted_lang",
        "field_map": {
          "text": "text"
        }
      }
    }
  ]
}
```

----------------------------------------

TITLE: Limiting Supported Operators with Flags
DESCRIPTION: Demonstrates how to limit supported operators for a simple query string using the flags parameter. The flags parameter enables selective usage of operators like OR, AND, and PREFIX, by using a '|' separator. Elasticsearch requirements apply, with no additional setup.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-simple-query-string-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "simple_query_string": {
      "query": "foo | bar + baz*",
      "flags": "OR|AND|PREFIX"
    }
  }
}
```

----------------------------------------

TITLE: Customizing Shingle Filter in Analyzer Definition (Console)
DESCRIPTION: Demonstrates how to define a custom token filter with specific `shingle` parameters (`min_shingle_size`, `max_shingle_size`, `output_unigrams`) and then include this custom filter in a custom analyzer definition when creating an index.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-shingle-tokenfilter.md#_snippet_5

LANGUAGE: Console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "en": {
          "tokenizer": "standard",
          "filter": [ "my_shingle_filter" ]
        }
      },
      "filter": {
        "my_shingle_filter": {
          "type": "shingle",
          "min_shingle_size": 2,
          "max_shingle_size": 5,
          "output_unigrams": false
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Using TOP Clause to Limit Results
DESCRIPTION: Example of using the TOP clause to restrict the number of rows returned in the result set. TOP needs to be placed before the select list.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
SELECT TOP 2 first_name, last_name, emp_no FROM emp;
```

----------------------------------------

TITLE: Defining Scripts Structure in Elasticsearch Painless
DESCRIPTION: This snippet outlines the basic structure of scripts in Elasticsearch's Painless language. It mentions that scripts consist of one or more statements and are executed in a controlled sandbox environment with predefined variables and API access limitations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-scripts.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# Scripts [painless-scripts]

Scripts are composed of one-to-many [statements](/reference/scripting-languages/painless/painless-statements.md) and are run in a sandbox that determines what local variables are immediately available along with what APIs are allowed.
```

----------------------------------------

TITLE: Indexing Geographic Location Data in Elasticsearch
DESCRIPTION: The snippet demonstrates how to index documents containing geo_point and geo_shape data. Dependencies include an Elasticsearch instance. Inputs are Elasticsearch PUT requests, and outputs are indexed documents. Considerations include ensuring Elasticsearch is running and accessible.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-bounding-box-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /my_locations
{
  "mappings": {
    "properties": {
      "pin": {
        "properties": {
          "location": {
            "type": "geo_point"
          }
        }
      }
    }
  }
}

PUT /my_locations/_doc/1
{
  "pin": {
    "location": {
      "lat": 40.12,
      "lon": -71.34
    }
  }
}

PUT /my_geoshapes
{
  "mappings": {
    "properties": {
      "pin": {
        "properties": {
          "location": {
            "type": "geo_shape"
          }
        }
      }
    }
  }
}

PUT /my_geoshapes/_doc/1
{
  "pin": {
    "location": {
      "type" : "polygon",
      "coordinates" : [[[13.0 ,51.5], [15.0, 51.5], [15.0, 54.0], [13.0, 54.0], [13.0 ,51.5]]]
    }
  }
}
```

----------------------------------------

TITLE: Performing Basic Operations on Painless Reference Types
DESCRIPTION: This snippet demonstrates the creation of a reference type instance (`ArrayList`), adding an element to it, and retrieving an element to use in an arithmetic operation. It shows how reference type variables are declared and manipulated.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-types.md#_snippet_2

LANGUAGE: painless
CODE:
```
List l = new ArrayList();
l.add(1);
int i = l.get(0) + 2;
```

----------------------------------------

TITLE: Executing a Match Boolean Prefix Query in Elasticsearch
DESCRIPTION: This snippet demonstrates how to execute a match_bool_prefix query to search for documents in Elasticsearch that match the input phrase 'quick brown f'. The query analyzes the input terms to generate the underlying boolean structure.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-match-bool-prefix-query.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
"GET /_search\n{\n  \"query\": {\n    \"match_bool_prefix\" : {\n      \"message\" : \"quick brown f\"\n    }\n  }\n}"
```

----------------------------------------

TITLE: Default Function Application on Multivalued Fields in ESQL (Console)
DESCRIPTION: Indexes documents including a multivalued field and attempts to apply standard arithmetic functions directly to the multivalued field using ESQL. Shows that, by default, functions typically return `null` when applied to a multivalued input.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-multivalued-fields.md#_snippet_5

LANGUAGE: console
CODE:
```
POST /mv/_bulk?refresh
{ "index" : {} }
{ "a": 1, "b": [2, 1] }
{ "index" : {} }
{ "a": 2, "b": 3 }

POST /_query
{
  "query": "FROM mv | EVAL b + 2, a + b | LIMIT 4"
}
```

LANGUAGE: json
CODE:
```
{
  "took": 28,
  "is_partial": false,
  "columns": [
    { "name": "a",   "type": "long"},
    { "name": "b",   "type": "long"},
    { "name": "b + 2", "type": "long"},
    { "name": "a + b", "type": "long"}
  ],
  "values": [
    [1, [1, 2], null, null],
    [2,      3,    5,    5]
  ]
}
```

----------------------------------------

TITLE: Configuring Index-based Audit Event Ignore Policy in Elasticsearch YAML
DESCRIPTION: This setting defines a list of index names or wildcards for which audit events will not be printed. It only applies if all indices in the event are covered by the policy. It is a dynamic cluster setting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/auding-settings.md#2025-04-21_snippet_4

LANGUAGE: yaml
CODE:
```
xpack.security.audit.logfile.events.ignore_filters.<policy_name>.indices
```

----------------------------------------

TITLE: Configuring Single Field Index Sorting in Elasticsearch
DESCRIPTION: Shows how to create an index with sorting configured on a single date field in descending order. Demonstrates basic index sorting setup with field mapping.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/sorting.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "index": {
      "sort.field": "date",
      "sort.order": "desc"
    }
  },
  "mappings": {
    "properties": {
      "date": {
        "type": "date"
      }
    }
  }
}
```

----------------------------------------

TITLE: Customizing ASCII Folding Filter with preserve_original Parameter in Elasticsearch
DESCRIPTION: Example of creating a custom ASCII folding filter with the preserve_original parameter set to true. This configuration emits both the original tokens and the folded tokens, providing more flexible text analysis options.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-asciifolding-tokenfilter.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT /asciifold_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "standard_asciifolding": {
          "tokenizer": "standard",
          "filter": [ "my_ascii_folding" ]
        }
      },
      "filter": {
        "my_ascii_folding": {
          "type": "asciifolding",
          "preserve_original": true
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Realm-based Audit Event Ignore Policy in Elasticsearch YAML
DESCRIPTION: This setting specifies a list of authentication realm names or wildcards for which audit events will not be printed. It is a dynamic cluster setting that can be updated without restarting the cluster.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/auding-settings.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
xpack.security.audit.logfile.events.ignore_filters.<policy_name>.realms
```

----------------------------------------

TITLE: Using Wildcards in EQL String Comparisons
DESCRIPTION: Demonstrates the use of '*' and '?' wildcards in EQL string comparisons with the ':' operator and 'like' keyword.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_11

LANGUAGE: eql
CODE:
```
my_field : "doc*"     // Matches "doc", "docs", or "document" but not "DOS"
my_field : "*doc"     // Matches "adoc" or "asciidoc"
my_field : "d*c"      // Matches "doc" or "disc"

my_field like "DOC*"  // Matches "DOC", "DOCS", "DOCs", or "DOCUMENT" but not "DOS"
my_field like "D*C"   // Matches "DOC", "DISC", or "DisC"
```

LANGUAGE: eql
CODE:
```
my_field : "doc?"     // Matches "docs" but not "doc", "document", or "DOS"
my_field : "?doc"     // Matches "adoc" but not "asciidoc"
my_field : "d?c"      // Matches "doc" but not "disc"

my_field like "DOC?"  // Matches "DOCS" or "DOCs" but not "DOC", "DOCUMENT", or "DOS"
my_field like "D?c"   // Matches "DOC" but not "DISC"
```

LANGUAGE: eql
CODE:
```
my_field : ("doc*", "f*o", "ba?", "qux")
my_field like ("Doc*", "F*O", "BA?", "QUX")
```

----------------------------------------

TITLE: Json Class Methods for Loading and Dumping Data
DESCRIPTION: This snippet outlines methods in the org.elasticsearch.painless.api.Json class for handling JSON data. The load method accepts a String for parsing JSON content, while the dump methods convert a defined object into a JSON string format. One of the dump methods allows for an additional boolean parameter for configuration purposes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.reindex.txt#2025-04-21_snippet_1

LANGUAGE: groovy
CODE:
```
class org.elasticsearch.painless.api.Json {
  def load(String)
  String dump(def)
  String dump(def, boolean)
}
```

----------------------------------------

TITLE: Subtraction with Different Numeric Types in Painless
DESCRIPTION: This snippet demonstrates the subtraction operator in Painless by illustrating how to subtract different numeric types and handle type promotion between int and double. It captures error cases for non-numeric types and outlines the behavior according to JVM specifications.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_22

LANGUAGE: painless
CODE:
```
int i = 29-4;     <1>
double d = i-7.5; <2>
```

----------------------------------------

TITLE: Converting Strings to IP Addresses with CIDR Matching in ESQL
DESCRIPTION: Demonstrates converting string literals to IP addresses using TO_IP() and validating them against a CIDR range. Shows successful conversion of a valid IP string and failed conversion of an invalid string that returns null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_ip.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW str1 = "1.1.1.1", str2 = "foo"
| EVAL ip1 = TO_IP(str1), ip2 = TO_IP(str2)
| WHERE CIDR_MATCH(ip1, "1.0.0.0/8")
```

----------------------------------------

TITLE: Setting up Index Mapping for Score Context - Console
DESCRIPTION: This snippet creates/updates the `my-index-000001` index mapping to include a `long` field named `rank`, in addition to the existing `field`. This mapping is necessary to provide a valid `index` in the `context_setup` for the score context example.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_3

LANGUAGE: Console
CODE:
```
PUT /my-index-000001
{
  "mappings": {
    "properties": {
      "field": {
        "type": "keyword"
      },
      "rank": {
        "type": "long"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Field Data Cache Size in Elasticsearch
DESCRIPTION: Static cluster setting that defines the maximum size of the field data cache. Can be set as a percentage of heap space or absolute value. Should be configured smaller than the field data circuit breaker limit.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/field-data-cache-settings.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
indices.fielddata.cache.size
```

----------------------------------------

TITLE: Converting WKT String to Geo Shape in ESQL
DESCRIPTION: This snippet demonstrates how to use the TO_GEOSHAPE function to convert a Well-Known Text (WKT) string representation of a polygon into a geo_shape value. The function accepts a string input in WKT format and returns a geo_shape object that can be used in geospatial queries and aggregations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_geoshape.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW wkt = "POLYGON ((30 10, 40 40, 20 40, 10 20, 30 10))"
| EVAL geom = TO_GEOSHAPE(wkt)
```

----------------------------------------

TITLE: Configuring ICU Normalization in Elasticsearch Index Settings
DESCRIPTION: Example showing how to configure ICU normalization character filters in Elasticsearch index settings. Demonstrates both default NFKC_CF normalization and custom NFD normalization with decomposition mode.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-icu-normalization-charfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT icu_sample
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "nfkc_cf_normalized": { 
            "tokenizer": "icu_tokenizer",
            "char_filter": [
              "icu_normalizer"
            ]
          },
          "nfd_normalized": { 
            "tokenizer": "icu_tokenizer",
            "char_filter": [
              "nfd_normalizer"
            ]
          }
        },
        "char_filter": {
          "nfd_normalizer": {
            "type": "icu_normalizer",
            "name": "nfc",
            "mode": "decompose"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Enabled Setting for Object Fields
DESCRIPTION: Shows how to configure an index mapping with disabled parsing for specific object fields. The example demonstrates storing session data without indexing it, while still indexing user_id and last_updated fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/enabled.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "user_id": {
        "type":  "keyword"
      },
      "last_updated": {
        "type": "date"
      },
      "session_data": {
        "type": "object",
        "enabled": false
      }
    }
  }
}

PUT my-index-000001/_doc/session_1
{
  "user_id": "kimchy",
  "session_data": {
    "arbitrary_object": {
      "some_array": [ "foo", "bar", { "baz": 2 } ]
    }
  },
  "last_updated": "2015-12-06T18:20:22"
}

PUT my-index-000001/_doc/session_2
{
  "user_id": "jpountz",
  "session_data": "none",
  "last_updated": "2015-12-06T18:22:13"
}
```

----------------------------------------

TITLE: Checking String Prefix in EQL
DESCRIPTION: Determines if a source string begins with a specified substring. Matching is case-sensitive by default but supports a case-insensitive variant (`startsWith~`). Handles null inputs and supports keyword/text fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-function-ref.md#_snippet_13

LANGUAGE: eql
CODE:
```
startsWith("regsvr32.exe", "regsvr32")  // returns true
startsWith("regsvr32.exe", "Regsvr32")  // returns false
startsWith("regsvr32.exe", "explorer")  // returns false
startsWith("", "")                      // returns true

// Make matching case-insensitive
startsWith~("regsvr32.exe", "Regsvr32")  // returns true

// process.name = "regsvr32.exe"
startsWith(process.name, "regsvr32")    // returns true
startsWith(process.name, "explorer")    // returns false

// process.name = "regsvr32"
startsWith("regsvr32.exe", process.name) // returns true
startsWith("explorer.exe", process.name) // returns false

// null handling
startsWith("regsvr32.exe", null)        // returns null
startsWith("", null)                    // returns null
startsWith(null, "regsvr32")            // returns null
startsWith(null, null)                  // returns null
```

----------------------------------------

TITLE: Performing Boolean AND: Painless Example
DESCRIPTION: Demonstrates the use of the AND operator with boolean types in Painless. It implements logical AND, returning true if both inputs are true. Inputs must be booleans, and the return type is a boolean.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_31

LANGUAGE: Painless
CODE:
```
boolean x = true;
boolean y = x && true;
x = false;
y = y && x;
```

----------------------------------------

TITLE: Formatting Date Range Synthetic Source (Console)
DESCRIPTION: Shows how date ranges are formatted in the synthetic `_source` according to the default `yyyy-MM-dd'T'HH:mm:ss.SSSZ` format. The example indexes a `date_range` document with values provided as both timestamps and strings, illustrating their conversion and formatting in the output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/range.md#_snippet_8

LANGUAGE: Console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "my_range": { "type": "date_range" }
    }
  }
}

PUT idx/_doc/1
{
  "my_range": [
    {
      "gte": 1504224000000,
      "lte": 1504569600000
    },
    {
      "gte": "2017-09-01",
      "lte": "2017-09-10"
    }
  ]
}
```

LANGUAGE: JSON
CODE:
```
{
  "my_range": [
    {
      "gte": "2017-09-01T00:00:00.000Z",
      "lte": "2017-09-05T00:00:00.000Z"
    },
    {
      "gte": "2017-09-01T00:00:00.000Z",
      "lte": "2017-09-10T23:59:59.999Z"
    }
  ]
}
```

----------------------------------------

TITLE: Processing Elasticsearch Search Response in Java
DESCRIPTION: This snippet demonstrates how to process the response from an Elasticsearch search query. It retrieves the total number of hits, iterates through the search hits, and extracts the source as a map for each hit.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/inference/licenses/reactive-streams-NOTICE.txt#2025-04-22_snippet_2

LANGUAGE: Java
CODE:
```
SearchHits hits = searchResponse.getHits();
TotalHits totalHits = hits.getTotalHits();
// the total number of hits, must be interpreted in the context of totalHits.relation
long numHits = totalHits.value;
// whether the number of hits is accurate (EQUAL_TO) or a lower bound of the total (GREATER_THAN_OR_EQUAL_TO)
TotalHits.Relation relation = totalHits.relation;
float maxScore = hits.getMaxScore();

SearchHit[] searchHits = hits.getHits();
for (SearchHit hit : searchHits) {
    // do something with the SearchHit
    String index = hit.getIndex();
    String id = hit.getId();
    float score = hit.getScore();

    String sourceAsString = hit.getSourceAsString();
    Map<String, Object> sourceAsMap = hit.getSourceAsMap();
    String documentTitle = (String) sourceAsMap.get("title");
    List<Object> users = (List<Object>) sourceAsMap.get("user");
    Map<String, Object> innerObject = (Map<String, Object>) sourceAsMap.get("innerObject");
}
```

----------------------------------------

TITLE: Example using LIKE with percent wildcard in Elasticsearch SQL
DESCRIPTION: Demonstrates filtering results using the `LIKE` operator with the percent wildcard (`%`) in Elasticsearch SQL. It retrieves authors and names from the 'library' table where the 'name' starts with 'Dune'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-like-rlike-operators.md#_snippet_1

LANGUAGE: SQL
CODE:
```
SELECT author, name FROM library WHERE name LIKE 'Dune%';
```

----------------------------------------

TITLE: Configuring Kuromoji Readingform Analyzers in Elasticsearch
DESCRIPTION: This snippet demonstrates how to set up custom analyzers using the kuromoji_readingform filter with different configurations for romaji and katakana output. It creates an index with two analyzers and their respective filter settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-readingform.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT kuromoji_sample
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "romaji_analyzer": {
            "tokenizer": "kuromoji_tokenizer",
            "filter": [ "romaji_readingform" ]
          },
          "katakana_analyzer": {
            "tokenizer": "kuromoji_tokenizer",
            "filter": [ "katakana_readingform" ]
          }
        },
        "filter": {
          "romaji_readingform": {
            "type": "kuromoji_readingform",
            "use_romaji": true
          },
          "katakana_readingform": {
            "type": "kuromoji_readingform",
            "use_romaji": false
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Querying Airports within a Polygon using ESQL and Geospatial Functions
DESCRIPTION: This ESQL query filters airports based on their location intersecting with a specified polygon. It uses the ST_INTERSECTS function to check if the airport's location is within the polygon defined by TO_GEOSHAPE. This query is useful for finding airports within a specific geographical area.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/st_intersects.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airports
| WHERE ST_INTERSECTS(location, TO_GEOSHAPE("POLYGON((42 14, 43 14, 43 15, 42 15, 42 14))"))
```

----------------------------------------

TITLE: Filtering Events Outside Business Hours in ESQL
DESCRIPTION: This snippet shows how to filter events that occurred outside of business hours (before 9 AM or after 5 PM) using the DATE_EXTRACT function in ESQL. It extracts the hour of day from the @timestamp field and applies the condition.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/date_extract.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM sample_data
| WHERE DATE_EXTRACT("hour_of_day", @timestamp) < 9
    AND DATE_EXTRACT("hour_of_day", @timestamp) >= 17
```

----------------------------------------

TITLE: Creating an Index with Histogram and Keyword Fields in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create an Elasticsearch index with two field mappings: a histogram field for storing percentile data and a keyword field for storing text. This setup is required for the _doc_count example.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-doc-count-field.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my_index
{
  "mappings" : {
    "properties" : {
      "my_histogram" : {
        "type" : "histogram"
      },
      "my_text" : {
        "type" : "keyword"
      }
    }
  }
}
```

----------------------------------------

TITLE: Using Query Parameters in ESQL Functions (Console)
DESCRIPTION: Illustrates how to use query parameters (`?`) within an ESQL query executed via the `_query` endpoint, including passing parameters into function named parameters, with values provided in the `params` array.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-syntax.md#_snippet_11

LANGUAGE: console
CODE:
```
POST /_query
{
"query": """
FROM library
| EVAL year = DATE_EXTRACT("year", release_date)
| WHERE page_count > ? AND match(author, ?, {"minimum_should_match": ?})
| LIMIT 5
""",
"params": [300, "Frank Herbert", 2]
}
```

----------------------------------------

TITLE: Demonstrating Valid Casts in Painless
DESCRIPTION: Examples of valid casts in Painless, including explicit numeric casts, implicit reference casts, and explicit reference casts.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-casting.md#2025-04-21_snippet_0

LANGUAGE: painless
CODE:
```
int i = (int)5L;         
Map m = new HashMap();   
HashMap hm = (HashMap)m; 
```

----------------------------------------

TITLE: Copying to Nested Fields with Full Path Specification in Elasticsearch
DESCRIPTION: This example shows how to correctly use copy_to with nested fields in Elasticsearch. When targeting nested fields, the full path must be specified to avoid mapping exceptions, particularly important when using strict dynamic mapping.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/copy-to.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT /test_index
{
  "mappings": {
    "dynamic": "strict",
    "properties": {
      "description": {
        "properties": {
          "notes": {
            "type": "text",
            "copy_to": [ "description.notes_raw"],
            "analyzer": "standard",
            "search_analyzer": "standard"
          },
          "notes_raw": {
            "type": "keyword"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Generic Literals with Casting - SQL
DESCRIPTION: Illustrates methods for creating explicitly typed literals in Elasticsearch SQL using casting mechanisms like the PostgreSQL-style :: operator, the CAST function, and the CONVERT function to transform values into desired types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-lexical-structure.md#_snippet_5

LANGUAGE: sql
CODE:
```
123::LONG                                   -- cast 123 to a LONG
CAST('1969-05-13T12:34:56' AS TIMESTAMP)    -- cast the given string to datetime
CONVERT('10.0.0.1', IP)                     -- cast '10.0.0.1' to an IP
```

----------------------------------------

TITLE: Defining Runtime Field in Elasticsearch Search Request
DESCRIPTION: Demonstrates how to create a runtime field within a search request for temporary use. The example includes an aggregation on the dynamically calculated day of week field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/use-painless-scripts-in-runtime-fields.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET my-index/_search
{
  "runtime_mappings": {
    "day_of_week": {
      "type": "keyword",
      "script": {
        "source":
        """emit(doc['@timestamp'].value.dayOfWeekEnum
        .getDisplayName(TextStyle.FULL, Locale.ROOT))"""
      }
    }
  },
  "aggs": {
    "day_of_week": {
      "terms": {
        "field": "day_of_week"
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Index with synthetic_source_keep Settings - Console
DESCRIPTION: This snippet demonstrates how to create an Elasticsearch index (`idx_keep`) with `synthetic_source` enabled at the index level and specific `synthetic_source_keep` settings applied to individual fields (`path` and `ids`) within the mapping properties.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-source-field.md#_snippet_12

LANGUAGE: console
CODE:
```
PUT idx_keep
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "path": {
        "type": "object",
        "synthetic_source_keep": "all"
      },
      "ids": {
        "type": "integer",
        "synthetic_source_keep": "arrays"
      }
    }
  }
}
```

----------------------------------------

TITLE: ILM Allocate Action with Multiple Node Attributes
DESCRIPTION: Shows how to allocate indices based on multiple node attributes, requiring specific box_type and storage values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-allocate.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "cold": {
        "actions": {
          "allocate" : {
            "require" : {
              "box_type": "cold",
              "storage": "high"
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Displaying Elasticsearch Plugin Help Command for Self-Managed Deployments
DESCRIPTION: Command to display usage instructions for the elasticsearch-plugin tool in self-managed Elasticsearch deployments. The tool is located in the $ES_HOME/bin directory and requires appropriate permissions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/plugin-management.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
sudo bin/elasticsearch-plugin -h
```

----------------------------------------

TITLE: Using Table Alias in FROM Clause
DESCRIPTION: Example of assigning an alias to a table in the FROM clause using the AS keyword, which hides the actual table name and must be used in its place.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
SELECT e.emp_no FROM emp AS e LIMIT 1;
```

----------------------------------------

TITLE: Configuring HTTP Service Account Authentication in Elasticsearch
DESCRIPTION: YAML configuration for setting up service account token authentication in Elasticsearch. This enables service accounts to authenticate via tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/watcher/licenses/failureaccess-NOTICE.txt#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
xpack.security.http.authentication.type: service_account
```

----------------------------------------

TITLE: Null Comparison Using '!==': Painless Example
DESCRIPTION: This snippet illustrates using the identity not equals operator for null comparisons in Painless. It checks if a reference is not null or if two null values are compared, returning a boolean.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_27

LANGUAGE: Painless
CODE:
```
Object a = null;
Object b = null;
boolean c = a !== null;
c = a !== b;
b = new Object();
c = a !== b;
```

----------------------------------------

TITLE: Updating Document Fields Using Painless Script in Elasticsearch
DESCRIPTION: This code snippet demonstrates how to use a Painless script to update a document in Elasticsearch. The script sets the 'sold' field to true and updates the 'cost' field based on the parameter 'sold_cost'. This operation is performed as part of an update request to a specific document within an index.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-update-context.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
"POST /seats/_update/3\n{\n  \"script\": {\n    \"source\": \"ctx._source.sold = true; ctx._source.cost = params.sold_cost\",\n    \"lang\": \"painless\",\n    \"params\": {\n      \"sold_cost\": 26\n    }\n  }\n}"
```

----------------------------------------

TITLE: Upload Hugging Face Model to Elasticsearch using Eland
DESCRIPTION: Uploads a specified Hugging Face model (`cross-encoder/ms-marco-MiniLM-L-6-v2`) to Elasticsearch for use with NLP tasks. Requires cloud ID and API key for authentication and specifies the task type as `text_similarity`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrievers.md#_snippet_9

LANGUAGE: sh
CODE:
```
eland_import_hub_model \
  --cloud-id $CLOUD_ID \
  --es-api-key $ES_API_KEY \
  --hub-model-id cross-encoder/ms-marco-MiniLM-L-6-v2 \
  --task-type text_similarity \
  --clear-previous \
  --start
```

----------------------------------------

TITLE: Converting Single Integer to String using TO_STRING in ESQL
DESCRIPTION: Demonstrates how to convert a single integer value to a string using the TO_STRING function. The example shows conversion of integer 10 to string "10".
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_string.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=10
| EVAL j = TO_STRING(a)
```

----------------------------------------

TITLE: Search Response Showing Ignored Field Values in Elasticsearch Console
DESCRIPTION: This console-result snippet shows the expected output of a search request when some field values in the original document were ignored during indexing due to mapping constraints (like `ignore_above`). The response includes the successfully indexed values in the `fields` section and the ignored values in the `ignored_field_values` section.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_13

LANGUAGE: console-result
CODE:
```
{
  "took" : 2,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 1,
      "relation" : "eq"
    },
    "max_score" : 1.0,
    "hits" : [
      {
        "_index" : "my-index-000001",
        "_id" : "1",
        "_score" : 1.0,
        "_ignored" : [ "my-small"],
        "fields" : {
          "my-large": [
            "ok content"
          ],
          "my-small": [
            "ok"
          ]
        },
        "ignored_field_values" : {
          "my-small": [
            "bad"
          ]
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Querying Basic Multivalued Fields with ESQL (Console)
DESCRIPTION: Indexes sample documents containing a mix of single and multivalued fields and queries them using ESQL. Demonstrates the default behavior of ESQL, where multivalued fields are returned as JSON arrays in the result set.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-multivalued-fields.md#_snippet_0

LANGUAGE: console
CODE:
```
POST /mv/_bulk?refresh
{ "index" : {} }
{ "a": 1, "b": [2, 1] }
{ "index" : {} }
{ "a": 2, "b": 3 }

POST /_query
{
  "query": "FROM mv | LIMIT 2"
}
```

LANGUAGE: json
CODE:
```
{
  "took": 28,
  "is_partial": false,
  "columns": [
    { "name": "a", "type": "long"},
    { "name": "b", "type": "long"}
  ],
  "values": [
    [1, [1, 2]],
    [2,      3]
  ]
}
```

----------------------------------------

TITLE: Bulk Indexing with Flattened Fields
DESCRIPTION: Example showing how to bulk index multiple documents containing flattened fields with various nested structures.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/flattened.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /my-index-000001/_bulk?refresh
{"index":{}}
{"title":"Something really urgent","labels":{"priority":"urgent","release":["v1.2.5","v1.3.0"],"timestamp":{"created":1541458026,"closed":1541457010}}}
{"index":{}}
{"title":"Somewhat less urgent","labels":{"priority":"high","release":["v1.3.0"],"timestamp":{"created":1541458026,"closed":1541457010}}}
{"index":{}}
{"title":"Not urgent","labels":{"priority":"low","release":["v1.2.0"],"timestamp":{"created":1541458026,"closed":1541457010}}}
```

----------------------------------------

TITLE: Dissect Processor Configuration in Elasticsearch Pipeline
DESCRIPTION: Configuration example for the dissect processor in an Elasticsearch ingest pipeline. The processor is configured to extract fields from the 'message' field using the specified pattern.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/dissect-processor.md#2025-04-21_snippet_3

LANGUAGE: js
CODE:
```
{
  "dissect": {
    "field": "message",
    "pattern" : "%{clientip} %{ident} %{auth} [%{@timestamp}] \"%{verb} %{request} HTTP/%{httpversion}\" %{status} %{size}"
   }
}
```

----------------------------------------

TITLE: Showing frozen tables SQL
DESCRIPTION: This SQL snippet demonstrates how to use the `INCLUDE FROZEN` keyword with the `SHOW TABLES` command. It explicitly instructs Elasticsearch SQL to include frozen indices in the list of tables returned. The output includes a column indicating the 'kind' of index, showing 'FROZEN INDEX' for frozen ones.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-index-frozen.md#_snippet_0

LANGUAGE: SQL
CODE:
```
SHOW TABLES INCLUDE FROZEN;
```

----------------------------------------

TITLE: Installing Elasticsearch Plugin from Local File System (Unix)
DESCRIPTION: This command installs an Elasticsearch plugin from a local file system location on Unix systems.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/plugin-management-custom-url.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
sudo bin/elasticsearch-plugin install file:///path/to/plugin.zip
```

----------------------------------------

TITLE: EQL Pattern Comparison Keywords
DESCRIPTION: Shows the usage of 'like' and 'regex' keywords for case-sensitive and case-insensitive pattern matching in EQL queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_5

LANGUAGE: eql
CODE:
```
my_field like  "VALUE*"         // case-sensitive wildcard matching
my_field like~ "value*"         // case-insensitive wildcard matching

my_field regex  "VALUE[^Z].?"   // case-sensitive regex matching
my_field regex~ "value[^z].?"   // case-insensitive regex matching
```

----------------------------------------

TITLE: Analyzing Text with HTML Strip Filter in Elasticsearch
DESCRIPTION: This example demonstrates how to use the HTML strip filter with the analyze API to remove HTML tags from text and decode HTML entities.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-htmlstrip-charfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer": "keyword",
  "char_filter": [
    "html_strip"
  ],
  "text": "<p>I&apos;m so <b>happy</b>!</p>"
}
```

----------------------------------------

TITLE: Defining STATS Command Syntax in ESQL
DESCRIPTION: Specifies the syntax for the STATS command, including optional column naming, expressions, WHERE clauses, and BY grouping.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/stats-by.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
STATS [column1 =] expression1 [WHERE boolean_expression1][,
      ...,
      [columnN =] expressionN [WHERE boolean_expressionN]]
      [BY grouping_expression1[, ..., grouping_expressionN]]
```

----------------------------------------

TITLE: Reset Native User Password with Custom URL
DESCRIPTION: Example showing how to reset a native user's password while specifying a custom URL for the Elasticsearch node connection.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/reset-password.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
bin/elasticsearch-reset-password --url "https://172.0.0.3:9200" --username user2 -i
```

----------------------------------------

TITLE: Implicit Grouping with HAVING
DESCRIPTION: Shows HAVING clause usage with implicit grouping and MIN/MAX aggregations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_23

LANGUAGE: sql
CODE:
```
SELECT MIN(salary) AS min, MAX(salary) AS max FROM emp HAVING min > 25000;
```

----------------------------------------

TITLE: Using MV_MIN Function with Integer Arrays in ESQL
DESCRIPTION: This snippet demonstrates how to use the MV_MIN function to find the minimum value in an integer array. The function receives a multi-valued field as input and returns the smallest value from the array.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_min.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=[2, 1]
| EVAL min_a = MV_MIN(a)
```

----------------------------------------

TITLE: Configuring Elasticsearch Plugin Descriptor Template
DESCRIPTION: Template for plugin-descriptor.properties file that defines plugin metadata including name, version, Java compatibility, and Elasticsearch version requirements. The template includes both mandatory elements like description, version, and name, as well as optional elements like classname and modulename.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/extend/plugin-descriptor-file-classic.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
# Elasticsearch plugin descriptor file
# This file must exist as 'plugin-descriptor.properties' or 'stable-plugin-descriptor.properties inside a plugin.
#
## example plugin for "foo"
#
# foo.zip <-- zip file for the plugin, with this structure:
# |____   <arbitrary name1>.jar <-- classes, resources, dependencies
# |____   <arbitrary nameN>.jar <-- any number of jars
# |____   plugin-descriptor.properties <-- example contents below:
#
# classname=foo.bar.BazPlugin
# description=My cool plugin
# version=6.0
# elasticsearch.version=6.0
# java.version=1.8
#
## mandatory elements for all plugins:
#
# 'description': simple summary of the plugin
description=${description}
#
# 'version': plugin's version
version=${version}
#
# 'name': the plugin name
name=${name}
#
# 'java.version': version of java the code is built against
# use the system property java.specification.version
# version string must be a sequence of nonnegative decimal integers
# separated by "."'s and may have leading zeros
java.version=${javaVersion}
#
# 'elasticsearch.version': version of elasticsearch compiled against.
# Plugins implementing plugin-api.jar this version only has to match a major version of the ES server
# For all other plugins it has to be the same as ES server version
elasticsearch.version=${elasticsearchVersion}
## optional elements for plugins:
<% if (classname) { %>
#
# 'classname': the name of the class to load, fully-qualified. Only applies to
# "isolated" plugins
classname=${classname}
<% } %>
<% if (modulename) { %>
#
# 'modulename': the name of the module to load classname from. Only applies to
# "isolated" plugins. This is optional. Specifying it causes the plugin
# to be loaded as a module.
modulename=${modulename}
<% } %>
<% if (extendedPlugins) { %>
#
#  'extended.plugins': other plugins this plugin extends through SPI
extended.plugins=${extendedPlugins}
<% } %>
<% if (hasNativeController) { %>
#
# 'has.native.controller': whether or not the plugin has a native controller
has.native.controller=${hasNativeController}
<% } %>
<% if (licensed) { %>
# This plugin requires that a license agreement be accepted before installation
licensed=${licensed}
<% } %>
```

----------------------------------------

TITLE: Decay Function for Geo Fields
DESCRIPTION: This snippet shows an example of using the `decayGeoExp` function within a script. It uses parameters such as origin, scale, offset, and decay to calculate the score based on geographic distance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-script-score-query.md#2025-04-21_snippet_6

LANGUAGE: js
CODE:
```
"script" : {
    "source" : "decayGeoExp(params.origin, params.scale, params.offset, params.decay, doc['location'].value)",
    "params": {
        "origin": "40, -70.12",
        "scale": "200km",
        "offset": "0km",
        "decay" : 0.2
    }
}
```

----------------------------------------

TITLE: Indexing GeoJSON MultiPolygon in Elasticsearch
DESCRIPTION: Example of indexing a GeoJSON MultiPolygon geometry in Elasticsearch. MultiPolygon represents a collection of polygons, with the second polygon containing a hole defined by an interior ring.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-shape.md#2025-04-21_snippet_14

LANGUAGE: json
CODE:
```
POST /example/_doc
{
  "location" : {
    "type" : "MultiPolygon",
    "coordinates" : [
      [ [[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]] ],
      [ [[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],
        [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]] ]
    ]
  }
}
```

----------------------------------------

TITLE: Check Command Line Usage with EQL
DESCRIPTION: EQL query to find regsvr32.exe processes with command line parameters, helping identify potential Squiblydoo attacks.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-ex-threat-detection.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /my-data-stream/_eql/search
{
  "query": """
    process where process.name == "regsvr32.exe" and process.command_line.keyword != null
  """
}
```

----------------------------------------

TITLE: Removing Custom Metadata from Cluster State
DESCRIPTION: Demonstrates removal of custom metadata from the cluster state when it prevents node startup. Shows the process for removing specific custom metadata types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/node-tool.md#2025-04-21_snippet_7

LANGUAGE: txt
CODE:
```
node$ ./bin/elasticsearch-node remove-customs snapshot_lifecycle

    WARNING: Elasticsearch MUST be stopped before running this tool.

The following customs will be removed:
snapshot_lifecycle

You should only run this tool if you have broken custom metadata in the
cluster state that prevents the cluster state from being loaded.
This tool can cause data loss and its use should be your last resort.

Do you want to proceed?

Confirm [y/N] y

Customs were successfully removed from the cluster state
```

----------------------------------------

TITLE: Executing a Parent Aggregation Query
DESCRIPTION: Performs a search with nested aggregations that first groups by answer owner names, then uses the parent aggregation to connect to the parent question documents, and finally aggregates by question tags.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-parent-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST parent_example/_search?size=0
{
  "aggs": {
    "top-names": {
      "terms": {
        "field": "owner.display_name.keyword",
        "size": 10
      },
      "aggs": {
        "to-questions": {
          "parent": {
            "type" : "answer" <1>
          },
          "aggs": {
            "top-tags": {
              "terms": {
                "field": "tags.keyword",
                "size": 10
              }
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Elasticsearch Aggregation Timing Breakdown
DESCRIPTION: This snippet illustrates the detailed timing breakdown for an Elasticsearch aggregation. It shows various execution phases like build_aggregation, initialize, collect, and build_leaf_collector, along with their respective counts and durations in nanoseconds.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-profile.md#2025-04-21_snippet_10

LANGUAGE: js
CODE:
```
"breakdown": {
  "reduce": 0,
  "build_aggregation": 30885,
  "build_aggregation_count": 1,
  "initialize": 2623,
  "initialize_count": 1,
  "reduce_count": 0,
  "collect": 45786,
  "collect_count": 4,
  "build_leaf_collector": 18211,
  "build_leaf_collector_count": 1
}
```

----------------------------------------

TITLE: Calculating Percentile and Median in ESQL
DESCRIPTION: This snippet demonstrates the usage of MV_PERCENTILE and MV_MEDIAN functions in ESQL. It creates a row with a multi-valued field 'values' and then calculates the 50th percentile (p50) and median of these values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/mv_percentile.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW values = [5, 5, 10, 12, 5000]
| EVAL p50 = MV_PERCENTILE(values, 50), median = MV_MEDIAN(values)
```

----------------------------------------

TITLE: Calculating Percentile and Median using MV_PERCENTILE and MV_MEDIAN in ESQL
DESCRIPTION: This snippet demonstrates how to use the MV_PERCENTILE and MV_MEDIAN functions in ESQL. It creates a row with an array of integer values and calculates the 50th percentile and median of those values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_percentile.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW values = [5, 5, 10, 12, 5000]
| EVAL p50 = MV_PERCENTILE(values, 50), median = MV_MEDIAN(values)
```

----------------------------------------

TITLE: Monthly Salary Averages in ESQL
DESCRIPTION: Calculates average salaries by hire month for the year 1985 using monthly buckets.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/bucket.md#2025-04-21_snippet_7

LANGUAGE: esql
CODE:
```
FROM employees
| WHERE hire_date >= "1985-01-01T00:00:00Z" AND hire_date < "1986-01-01T00:00:00Z"
| STATS AVG(salary) BY bucket = BUCKET(hire_date, 20, "1985-01-01T00:00:00Z", "1986-01-01T00:00:00Z")
```

----------------------------------------

TITLE: Configuring Elasticsearch Classification Inference Processor (JSON)
DESCRIPTION: This snippet illustrates the configuration for an Elasticsearch inference processor focused on classification. It defines the model ID, specifies the number of top predicted classes to include in the results (`num_top_classes`), and designates the fields for the primary prediction (`results_field`) and the probabilities of the top classes (`top_classes_results_field`).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/inference-processor.md#_snippet_4

LANGUAGE: JSON
CODE:
```
"inference":{
  "model_id":"my_model_id"
  "inference_config": {
    "classification": {
      "num_top_classes": 2,
      "results_field": "prediction",
      "top_classes_results_field": "probabilities"
    }
  }
}
```

----------------------------------------

TITLE: Custom Document Routing in Elasticsearch
DESCRIPTION: Examples of indexing and retrieving a document with a custom routing value instead of using the default document ID for routing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-routing-field.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1?routing=user1&refresh=true <1>
{
  "title": "This is a document"
}

GET my-index-000001/_doc/1?routing=user1 <2>
```

----------------------------------------

TITLE: Syntax for MAX Function in Elasticsearch SQL
DESCRIPTION: This snippet shows the basic syntax for the MAX function, which finds the maximum value across input values in a specified field. It requires a numeric field for standard use but can work on text/keyword fields (translated to LAST).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_29

LANGUAGE: SQL
CODE:
```
MAX(field_name) <1>
```

----------------------------------------

TITLE: Searching Books by Author using QSTR in ESQL
DESCRIPTION: This ESQL query searches for books where the author field contains 'Faulkner'. It demonstrates the basic usage of the QSTR function for text-based queries in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/qstr.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM books
| WHERE QSTR("author: Faulkner")
```

----------------------------------------

TITLE: Grouping Examples with Parentheses in Regular Expressions
DESCRIPTION: Examples showing how to use parentheses to group parts of a pattern and treat them as a single unit.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/regexp-syntax.md#2025-04-21_snippet_9

LANGUAGE: text
CODE:
```
abc(def)?  # matches 'abc' and 'abcdef' but not 'abcd'
```

----------------------------------------

TITLE: Defining Synonyms Using Solr Format in Text
DESCRIPTION: Defines groups of equivalent and explicit synonyms using the Solr format. These examples show how synonyms can be grouped using commas for equivalent words or expanded in explicit rules.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-synonym-graph-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
ipod, i-pod, i pod
computer, pc, laptop
```

LANGUAGE: text
CODE:
```
personal computer => pc
sea biscuit, sea biscit => seabiscuit
```

----------------------------------------

TITLE: Percolate Query Search Request in Elasticsearch
DESCRIPTION: A search request using the percolate query to find matching percolator queries for a given document. This demonstrates how the optimized term query is used for matching.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/percolator.md#2025-04-21_snippet_9

LANGUAGE: console
CODE:
```
GET /my_queries1/_search
{
  "query": {
    "percolate": {
      "field": "query",
      "document": {
        "my_field": "abcd"
      }
    }
  }
}
```

----------------------------------------

TITLE: Index Setup with Rank Features in Elasticsearch
DESCRIPTION: This snippet demonstrates how to set up an index in Elasticsearch with various rank feature fields such as pagerank, url_length, and topics. These fields are used to boost document relevance scores in search queries. It is necessary to have Elasticsearch installed and running. The index configuration includes field types and score impact settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-rank-feature-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /test
{
  "mappings": {
    "properties": {
      "pagerank": {
        "type": "rank_feature"
      },
      "url_length": {
        "type": "rank_feature",
        "positive_score_impact": false
      },
      "topics": {
        "type": "rank_features"
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing a LineString Geometry using WKT in Elasticsearch
DESCRIPTION: Adds a document to the 'example' index with a LineString geometry specified in Well-Known Text (WKT) format. The line is defined by two points representing a path from the White House to the US Capitol Building.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-shape.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
POST /example/_doc
{
  "location" : "LINESTRING (-77.03653 38.897676, -77.009051 38.889939)"
}
```

----------------------------------------

TITLE: Curly Braces Examples for Repetition in Regular Expressions
DESCRIPTION: Examples showing how to specify exact or ranged repetition counts using curly braces notation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/regexp-syntax.md#2025-04-21_snippet_7

LANGUAGE: text
CODE:
```
a{{2}}    # matches 'aa'
a{2,4}  # matches 'aa', 'aaa', and 'aaaa'
a{2,}   # matches 'a` repeated two or more times
```

----------------------------------------

TITLE: Configuring Index Sort for Composite Aggregation Optimization in Elasticsearch
DESCRIPTION: This snippet demonstrates how to set up index sorting to optimize composite aggregations. It configures the index to sort by username in ascending order and timestamp in descending order.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_18

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "index": {
      "sort.field": [ "username", "timestamp" ],
      "sort.order": [ "asc", "desc" ]
    }
  },
  "mappings": {
    "properties": {
      "username": {
        "type": "keyword",
        "doc_values": true
      },
      "timestamp": {
        "type": "date"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Stored Fields in Elasticsearch Mapping
DESCRIPTION: This example demonstrates how to configure certain fields to be stored separately from the _source field. The mapping defines 'title' and 'date' as stored fields, while 'content' remains unstored. It shows how to index a document and then retrieve only the stored fields using the stored_fields parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-store.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "title": {
        "type": "text",
        "store": true <1>
      },
      "date": {
        "type": "date",
        "store": true <1>
      },
      "content": {
        "type": "text"
      }
    }
  }
}

PUT my-index-000001/_doc/1
{
  "title":   "Some short title",
  "date":    "2015-01-01",
  "content": "A very long content field..."
}

GET my-index-000001/_search
{
  "stored_fields": [ "title", "date" ] <2>
}
```

----------------------------------------

TITLE: Extended Stats with Runtime Field Calculation
DESCRIPTION: Demonstrates using a runtime field to perform extended stats aggregation on calculated values, including grade correction using a multiplication factor.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-extendedstats-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /exams/_search
{
  "size": 0,
  "runtime_mappings": {
    "grade.corrected": {
      "type": "double",
      "script": {
        "source": "emit(Math.min(100, doc['grade'].value * params.correction))",
        "params": {
          "correction": 1.2
        }
      }
    }
  },
  "aggs": {
    "grades_stats": {
      "extended_stats": { "field": "grade.corrected" }
    }
  }
}
```

----------------------------------------

TITLE: Using Named Queries in RRF Elasticsearch Search
DESCRIPTION: Elasticsearch query that demonstrates using named queries with RRF to provide more intuitive explanation output. This example shows how to use the _name parameter with knn retriever.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reciprocal-rank-fusion.md#2025-04-21_snippet_10

LANGUAGE: js
CODE:
```
GET example-index/_search
{
    "retriever": {
        "rrf": {
            "retrievers": [
                {
                    "standard": {
                        "query": {
                            "term": {
                                "text": "rrf"
                            }
                        }
                    }
                },
                {
                    "knn": {
                        "field": "vector",
                        "query_vector": [3],
                        "k": 5,
                        "num_candidates": 5,
                        "_name": "my_knn_query"                           <1>
                    }
                }
            ],
            "rank_window_size": 5,
            "rank_constant": 1
        }
    },
    "size": 3,
    "aggs": {
        "int_count": {
            "terms": {
                "field": "integer"
            }
        }
    }
}
```

----------------------------------------

TITLE: Cross-Cluster Search in SQL
DESCRIPTION: Example of performing a cross-cluster search by specifying a remote cluster name using the <remote_cluster>:<target> syntax with wildcard pattern matching.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
SELECT emp_no FROM "my*cluster:*emp" LIMIT 1;
```

----------------------------------------

TITLE: Configuring IP Location Processor Pipeline in Elasticsearch
DESCRIPTION: This snippet demonstrates how to set up an ingest pipeline using the IP location processor to add geographical information based on an IP address field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/ip-location-processor.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT _ingest/pipeline/ip_location
{
  "description" : "Add ip geolocation info",
  "processors" : [
    {
      "ip_location" : {
        "field" : "ip"
      }
    }
  ]
}
PUT my-index-000001/_doc/my_id?pipeline=ip_location
{
  "ip": "89.160.20.128"
}
GET my-index-000001/_doc/my_id
```

----------------------------------------

TITLE: Running Docker Container for Elastic Connector Service
DESCRIPTION: This Docker command runs the Elastic Connector Service container, mounting the configuration directory and setting up the network for communication with Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-graphql.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Executing elasticsearch-setup-passwords Command in Shell
DESCRIPTION: Synopsis showing the usage of the elasticsearch-setup-passwords command with its available options and parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/setup-passwords.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
bin/elasticsearch-setup-passwords auto|interactive
[-b, --batch] [-h, --help] [-E <KeyValuePair>]
[-s, --silent] [-u, --url "<URL>"] [-v, --verbose]
```

----------------------------------------

TITLE: Sort Highlight Fragments by Score Elasticsearch Console
DESCRIPTION: Modifies an Elasticsearch search query to sort the returned highlight fragments by their relevance score. Setting 'order: "score"' within the 'highlight' block ensures that the most relevant text snippets from the field appear first in the highlighting results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_20

LANGUAGE: console
CODE:
```
GET /_search
{
  "query" : {
    "match": { "user.id": "kimchy" }
  },
  "highlight" : {
    "order" : "score",
    "fields" : {
      "comment" : {"fragment_size" : 150, "number_of_fragments" : 3}
    }
  }
}
```

----------------------------------------

TITLE: Running Self-Managed Connector in Docker (Dockerized)
DESCRIPTION: This command runs the self-managed connector Docker image with the shared volume and network. It mounts the configuration directory and the `extraction-service-volume`, connects to the `elastic` network, and executes the `elastic-ingest` command with the specified configuration file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-content-extraction.md#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
$ docker run \
  -v ~/connectors-config:/config \
  -v extraction-service-volume:/app/files \
  --network "elastic" \
  --tty \
  --rm \
  docker.elastic.co/integrations/elastic-connectors:$CONNECTOR_CLIENT_VERSION \
  /app/bin/elastic-ingest \
  -c /config/config.yml
```

----------------------------------------

TITLE: Filtering Employee Data with ESQL
DESCRIPTION: ESQL query that selects first_name, last_name, and height columns from employees table and filters for first names less than 4 characters in length. The query demonstrates the use of KEEP for column selection and LENGTH function in WHERE clause.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/whereFunction.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP first_name, last_name, height
| WHERE LENGTH(first_name) < 4
```

----------------------------------------

TITLE: Relative Time Filtering with CURRENT_TIME and Interval in Elasticsearch SQL
DESCRIPTION: This snippet queries the `emp` table to find employees whose hire time is more than 20 minutes before the current time. It casts `hire_date` to `TIME` and uses `CURRENT_TIME()` combined with interval subtraction for relative time comparison in the WHERE clause, ordering by first name and limiting results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_18

LANGUAGE: SQL
CODE:
```
SELECT first_name FROM emp WHERE CAST(hire_date AS TIME) > CURRENT_TIME() - INTERVAL 20 MINUTES ORDER BY first_name ASC LIMIT 5;
```

----------------------------------------

TITLE: Indexing GeoShape as Array (Multipoint)
DESCRIPTION: This code snippet demonstrates indexing multiple points as a single multipoint `geo_shape`.  Both requests are equivalent, treating the array of points as a single multipoint shape. This shows how Elasticsearch handles arrays of shapes in `geo_shape` fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-shape-query.md#2025-04-21_snippet_9

LANGUAGE: console
CODE:
```
PUT /test/_doc/1
{
  "location": [
    {
      "coordinates": [46.25,20.14],
      "type": "point"
    },
    {
      "coordinates": [47.49,19.04],
      "type": "point"
    }
  ]
}
```

LANGUAGE: console
CODE:
```
PUT /test/_doc/1
{
  "location":
    {
      "coordinates": [[46.25,20.14],[47.49,19.04]],
      "type": "multipoint"
    }
}
```

----------------------------------------

TITLE: Using IS NULL/IS NOT NULL Operators in Elasticsearch SQL
DESCRIPTION: Demonstrates using IS NULL and IS NOT NULL operators to filter rows based on whether a column's value is NULL. The query selects the last name for employees where emp_no is not NULL and gender is NULL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-operators.md#_snippet_5

LANGUAGE: sql
CODE:
```
SELECT last_name l FROM "test_emp" WHERE emp_no IS NOT NULL AND gender IS NULL;
```

----------------------------------------

TITLE: Sorting with Mode Option for Array Fields in Elasticsearch
DESCRIPTION: Illustrates how to use the 'mode' option when sorting on array fields, using the average value of a price field for sorting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/sort-search-results.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT /my-index-000001/_doc/1?refresh
{
   "product": "chocolate",
   "price": [20, 4]
}

POST /_search
{
   "query" : {
      "term" : { "product" : "chocolate" }
   },
   "sort" : [
      {"price" : {"order" : "asc", "mode" : "avg"}}
   ]
}
```

----------------------------------------

TITLE: Installing Elasticsearch Plugin from HTTP URL
DESCRIPTION: This command installs an Elasticsearch plugin from an HTTP URL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/plugin-management-custom-url.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
sudo bin/elasticsearch-plugin install https://some.domain/path/to/plugin.zip
```

----------------------------------------

TITLE: Indexing Child Documents with Join Field in Elasticsearch
DESCRIPTION: Example showing how to index child documents that are linked to a parent document. Child documents must specify both the relation name and the parent ID, and must be routed to the same shard as their parent.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/parent-join.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/3?routing=1&refresh <1>
{
  "my_id": "3",
  "text": "This is an answer",
  "my_join_field": {
    "name": "answer", <2>
    "parent": "1" <3>
  }
}

PUT my-index-000001/_doc/4?routing=1&refresh
{
  "my_id": "4",
  "text": "This is another answer",
  "my_join_field": {
    "name": "answer",
    "parent": "1"
  }
}
```

----------------------------------------

TITLE: Decay Function Basic Structure
DESCRIPTION: Generic structure for implementing decay functions in Elasticsearch, showing the basic parameters including origin, scale, offset, and decay rate.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-function-score-query.md#2025-04-21_snippet_6

LANGUAGE: js
CODE:
```
"DECAY_FUNCTION": { 
    "FIELD_NAME": { 
          "origin": "11, 12",
          "scale": "2km",
          "offset": "0km",
          "decay": 0.33
    }
}
```

----------------------------------------

TITLE: Indexing a Polygon Shape in GeoJSON Format
DESCRIPTION: This example shows how to index a polygon shape in GeoJSON format. The polygon is defined with a type and coordinates array containing a list of points, where the first and last points must be the same to close the polygon.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/shape.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
POST /example/_doc
{
  "location" : {
    "type" : "polygon",
    "coordinates" : [
      [ [1000.0, -1001.0], [1001.0, -1001.0], [1001.0, -1000.0], [1000.0, -1000.0], [1000.0, -1001.0] ]
    ]
  }
}
```

----------------------------------------

TITLE: Track Scores with Sorting in Elasticsearch
DESCRIPTION: Shows how to maintain score computation when sorting by enabling track_scores parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/sort-search-results.md#2025-04-21_snippet_19

LANGUAGE: console
CODE:
```
GET /_search
{
  "track_scores": true,
  "sort" : [
    { "post_date" : {"order" : "desc"} },
    { "name" : "desc" },
    { "age" : "desc" }
  ],
  "query" : {
    "term" : { "user" : "kimchy" }
  }
}
```

----------------------------------------

TITLE: Weekly Bucketing with Target Count in ESQL
DESCRIPTION: Creates weekly buckets for hire dates over a year period, targeting 100 buckets maximum. Shows how increasing the target bucket count results in smaller bucket sizes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/bucket.md#2025-04-21_snippet_2

LANGUAGE: esql
CODE:
```
FROM employees
| WHERE hire_date >= "1985-01-01T00:00:00Z" AND hire_date < "1986-01-01T00:00:00Z"
| STATS hires_per_week = COUNT(*) BY week = BUCKET(hire_date, 100, "1985-01-01T00:00:00Z", "1986-01-01T00:00:00Z")
```

----------------------------------------

TITLE: Searching and Highlighting Semantic Text Field - Elasticsearch API
DESCRIPTION: This search request demonstrates how to query a `semantic_text` field using a standard `match` query and retrieve relevant fragments using the `highlight` parameter. It configures highlighting to return the top N fragments based on their score. Requires an index with a `semantic_text` field containing data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/semantic-text.md#_snippet_3

LANGUAGE: console
CODE:
```
POST test-index/_search
{
    "query": {
        "match": {
            "my_semantic_field": "Which country is Paris in?"
        }
    },
    "highlight": {
        "fields": {
            "my_semantic_field": {
                "number_of_fragments": 2,
                "order": "score"
            }
        }
    }
}
```

----------------------------------------

TITLE: Apply HISTOGRAM on Numeric Field SQL
DESCRIPTION: Demonstrates applying the `HISTOGRAM` function to a numeric field (`salary`) with a fixed numeric interval (`5000`). The query groups the results by the generated histogram buckets.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-grouping.md#_snippet_1

LANGUAGE: SQL
CODE:
```
SELECT HISTOGRAM(salary, 5000) AS h FROM emp GROUP BY h;
```

----------------------------------------

TITLE: Configuring ICU Tokenizer in Elasticsearch Index Settings
DESCRIPTION: This snippet demonstrates how to configure an Elasticsearch index to use the ICU tokenizer. It creates a custom analyzer named 'my_icu_analyzer' that uses the 'icu_tokenizer'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-icu-tokenizer.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
PUT icu_sample
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "my_icu_analyzer": {
            "tokenizer": "icu_tokenizer"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Using MAD Function in Elasticsearch SQL
DESCRIPTION: Shows how to use the MAD (Median Absolute Deviation) function to measure the variability of values in the 'salary' field, alongside minimum, maximum, and average values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_38

LANGUAGE: SQL
CODE:
```
SELECT MIN(salary) AS min, MAX(salary) AS max, AVG(salary) AS avg, MAD(salary) AS mad FROM emp;
```

----------------------------------------

TITLE: Enabling Shard Request Cache Dynamically in Elasticsearch
DESCRIPTION: This request enables the request cache on an existing index using the update settings API. It demonstrates how to dynamically change the cache settings without reindexing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/shard-request-cache.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /my-index-000001/_settings
{
  "index.requests.cache.enable": true
}
```

----------------------------------------

TITLE: Index Of Function - Case-Sensitive Elasticsearch Query
DESCRIPTION: This snippet checks if the character 'A' appears beyond index 2 in the `user_name` field. Uses a custom script to determine the index position and implement filtering logic.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_11

LANGUAGE: Elasticsearch Painless
CODE:
```
"script":{"source":"InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.gt(InternalEqlScriptUtils.indexOf(X0,params.v1,params.v2,params.v3),params.v4)))","params":{"v0":"user_name","v1":"A","v2":2,"v3":false,"v4":0}}
```

----------------------------------------

TITLE: Calculating Weighted Average Using grade and weight Fields in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the weighted_avg aggregation to calculate a weighted average of exam grades using the 'grade' field for values and the 'weight' field for weights.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-weight-avg-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST /exams/_search
{
  "size": 0,
  "aggs": {
    "weighted_grade": {
      "weighted_avg": {
        "value": {
          "field": "grade"
        },
        "weight": {
          "field": "weight"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating a pipeline with character extraction limits
DESCRIPTION: Example showing how to create an attachment processor pipeline with a limit on the number of characters to extract, including support for per-document limits.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/attachment.md#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
PUT _ingest/pipeline/attachment
{
  "description" : "Extract attachment information",
  "processors" : [
    {
      "attachment" : {
        "field" : "data",
        "indexed_chars" : 11,
        "indexed_chars_field" : "max_size",
        "remove_binary": true
      }
    }
  ]
}
PUT my-index-000001/_doc/my_id?pipeline=attachment
{
  "data": "e1xydGYxXGFuc2kNCkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0DQpccGFyIH0="
}
GET my-index-000001/_doc/my_id
```

----------------------------------------

TITLE: Executing Painless Double Script - Elasticsearch Console
DESCRIPTION: Executes a Painless script in the 'double_field' context to conditionally adjust a voltage value. If the 'model_number' matches 'QVKC92Q', it multiplies the voltage from the source document by 1.7; otherwise, it emits the original voltage value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_11

LANGUAGE: Console
CODE:
```
POST /_scripts/painless/_execute
{
  "script": {
    "source": """
      if (doc['model_number'].value.equals('QVKC92Q'))
      {emit(1.7 * params._source['measures']['voltage']);}
      else{emit(params._source['measures']['voltage']);}
    """
  },
  "context": "double_field",
  "context_setup": {
    "index": "my-index-000001",
    "document": {
      "@timestamp": 1516470094000,
      "model_number": "QVKC92Q",
      "measures": {
        "voltage": 5.6
      }
    }
  }
}
```

----------------------------------------

TITLE: Encoding String to Base64 using TO_BASE64 Function in ESQL
DESCRIPTION: This snippet demonstrates how to use the TO_BASE64 function in ESQL to encode a string to base64 format. It creates a row with a string value and then applies the TO_BASE64 function to encode it.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_base64.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = "elastic"
| EVAL e = TO_BASE64(a)
```

----------------------------------------

TITLE: Negated Character Class Examples
DESCRIPTION: Examples showing how to use the caret symbol to negate character classes, matching anything except the specified characters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/regexp-syntax.md#2025-04-21_snippet_12

LANGUAGE: text
CODE:
```
[^abc]      # matches any character except 'a', 'b', or 'c'
[^a-c]      # matches any character except 'a', 'b', or 'c'
[^-abc]     # matches any character except '-', 'a', 'b', or 'c'
[^abc\-]    # matches any character except 'a', 'b', 'c', or '-'
```

----------------------------------------

TITLE: Context Mapping for Completion Suggester in Elasticsearch
DESCRIPTION: Demonstrates how to configure context mappings for a completion field to enable filtering or boosting of suggestions based on category or geographic location.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_19

LANGUAGE: console
CODE:
```
PUT place
{
  "mappings": {
    "properties": {
      "suggest": {
        "type": "completion",
        "contexts": [
          {                                 <1>
            "name": "place_type",
            "type": "category"
          },
          {                                 <2>
            "name": "location",
            "type": "geo",
            "precision": 4
          }
        ]
      }
    }
  }
}
PUT place_path_category
{
  "mappings": {
    "properties": {
      "suggest": {
        "type": "completion",
        "contexts": [
          {                           <3>
            "name": "place_type",
            "type": "category",
            "path": "cat"
          },
          {                           <4>
            "name": "location",
            "type": "geo",
            "precision": 4,
            "path": "loc"
          }
        ]
      },
      "loc": {
        "type": "geo_point"
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing a Point Shape in GeoJSON Format
DESCRIPTION: This example shows how to index a point shape in GeoJSON format. The point is defined with a type and coordinates array specifying the x,y position in cartesian space.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/shape.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /example/_doc
{
  "location" : {
    "type" : "point",
    "coordinates" : [-377.03653, 389.897676]
  }
}
```

----------------------------------------

TITLE: Calculating Median Absolute Deviation in ESQL
DESCRIPTION: Example showing how to calculate both median absolute deviation and median from an array of integer values using ESQL's built-in functions. The example uses MV_MEDIAN_ABSOLUTE_DEVIATION and MV_MEDIAN functions on an array of [0, 2, 5, 6].
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_median_absolute_deviation.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW values = [0, 2, 5, 6]
| EVAL median_absolute_deviation = MV_MEDIAN_ABSOLUTE_DEVIATION(values), median = MV_MEDIAN(values)
```

----------------------------------------

TITLE: Script-based Sorting in Elasticsearch
DESCRIPTION: Example of custom script-based sorting using Painless scripting language with parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/sort-search-results.md#2025-04-21_snippet_18

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "term": { "user": "kimchy" }
  },
  "sort": {
    "_script": {
      "type": "number",
      "script": {
        "lang": "painless",
        "source": "doc['field_name'].value * params.factor",
        "params": {
          "factor": 1.1
        }
      },
      "order": "asc"
    }
  }
}
```

----------------------------------------

TITLE: Calculating Time Difference in Microseconds using DATE_DIFF in ESQL
DESCRIPTION: This snippet demonstrates how to use the DATE_DIFF function to calculate the difference between two timestamps in microseconds. It creates two datetime values and then computes their difference.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/date_diff.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW date1 = TO_DATETIME("2023-12-02T11:00:00.000Z"),
    date2 = TO_DATETIME("2023-12-02T11:00:00.001Z")
| EVAL dd_ms = DATE_DIFF("microseconds", date1, date2)
```

----------------------------------------

TITLE: Using YEAR Function in Elasticsearch SQL
DESCRIPTION: This snippet demonstrates the use of the YEAR function to extract the year component from a given timestamp. It takes a date or datetime expression as input and returns an integer representing the year. If the input is null, the function returns null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_87

LANGUAGE: SQL
CODE:
```
SELECT YEAR(CAST('2018-02-19T10:23:27Z' AS TIMESTAMP)) AS year;
```

----------------------------------------

TITLE: Formatting to ISO 8601
DESCRIPTION: Demonstrates formatting a ZonedDateTime to ISO 8601 string format using built-in formatter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_4

LANGUAGE: painless
CODE:
```
ZonedDateTime zdt =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 0, ZoneId.of('Z'));
String datetime = zdt.format(DateTimeFormatter.ISO_INSTANT);
```

----------------------------------------

TITLE: Multiple Lookup Joins in ESQL
DESCRIPTION: Demonstrates sequential LOOKUP JOIN operations to combine data from system_metrics, host_inventory, and ownerships tables using host.name as the common join key. This is a generated test case for validating join functionality.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs-lookup-join.csv-spec/lookupJoinHostNameTwice.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM system_metrics
| LOOKUP JOIN host_inventory ON host.name
| LOOKUP JOIN ownerships ON host.name
```

----------------------------------------

TITLE: Analyzing text with Porter stem filter in Elasticsearch
DESCRIPTION: This example demonstrates how to use the Porter stem filter in an Elasticsearch analyze API request. It stems the input text 'the foxes jumping quickly' to produce stemmed tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-porterstem-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer": "standard",
  "filter": [ "porter_stem" ],
  "text": "the foxes jumping quickly"
}
```

----------------------------------------

TITLE: Auto Date Histogram with Minimum Interval Parameter in Elasticsearch
DESCRIPTION: Example of an auto date histogram aggregation with a minimum interval parameter. This specifies that the aggregation should not attempt to round at any interval lower than 'minute', which can improve efficiency.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-autodatehistogram-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "sale_date": {
      "auto_date_histogram": {
        "field": "date",
        "buckets": 10,
        "minimum_interval": "minute"
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing Doc with Synthetic Source Stored Keyword in Elasticsearch Console
DESCRIPTION: Illustrates creating an index with synthetic source and a 'keyword' field where 'store' is set to true, then indexing a document with duplicate and unsorted values. When 'store: true', synthetic source preserves the original order and duplicates of the multi-value keyword field. Requires an running Elasticsearch instance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/keyword.md#_snippet_2

LANGUAGE: Console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "kwd": { "type": "keyword", "store": true }
    }
  }
}
PUT idx/_doc/1
{
  "kwd": ["foo", "foo", "bar", "baz"]
}
```

----------------------------------------

TITLE: Defining Custom Turkish Analyzer in Elasticsearch
DESCRIPTION: This snippet sets up a custom analyzer for processing Turkish language text in Elasticsearch. It incorporates specific filters that handle lowercase conversion, stopwords, and stemming for Turkish, with requirements for Elasticsearch and proper language support configurations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_28

LANGUAGE: console
CODE:
```
PUT /turkish_example
{
  "settings": {
    "analysis": {
      "filter": {
        "turkish_stop": {
          "type":       "stop",
          "stopwords":  "_turkish_" <1>
        },
        "turkish_lowercase": {
          "type":       "lowercase",
          "language":   "turkish"
        },
        "turkish_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["örnek"] <2>
        },
        "turkish_stemmer": {
          "type":       "stemmer",
          "language":   "turkish"
        }
      },
      "analyzer": {
        "rebuilt_turkish": {
          "tokenizer":  "standard",
          "filter": [
            "apostrophe",
            "turkish_lowercase",
            "turkish_stop",
            "turkish_keywords",
            "turkish_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Changing Default Similarity During Index Creation in Elasticsearch
DESCRIPTION: An example of changing the default similarity model for all fields in an Elasticsearch index during its creation. This uses the boolean similarity model instead of the default BM25.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/similarity.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
PUT /index
{
  "settings": {
    "index": {
      "similarity": {
        "default": {
          "type": "boolean"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Querying with Unified Highlighting in Elasticsearch
DESCRIPTION: This snippet executes a search query against the `test_index` to find documents matching the phrase 'only fox' in the `content` field. It requests highlighting for the `content` field using the `unified` highlighter type, configured to return a maximum of 3 fragments.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_31

LANGUAGE: Kibana Console
CODE:
```
GET test_index/_search
{
  "query": {
    "match_phrase" : {"content" : "only fox"}
  },
  "highlight": {
    "type" : "unified",
    "number_of_fragments" : 3,
    "fields": {
      "content": {}
    }
  }
}
```

----------------------------------------

TITLE: Sample Connector Configuration File
DESCRIPTION: YAML configuration for setting up a Salesforce connector, including Elasticsearch host, API key, and connector-specific details.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-salesforce.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: salesforce
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA>
```

----------------------------------------

TITLE: Configure Field Data Circuit Breaker Settings
DESCRIPTION: Settings for the field data circuit breaker that estimates heap memory required for field data cache. Includes memory limit and overhead multiplier.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/circuit-breaker-settings.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
indices.breaker.fielddata.limit: "40%"
indices.breaker.fielddata.overhead: 1.03
```

----------------------------------------

TITLE: Assignment Operator Examples in Painless
DESCRIPTION: Demonstrates field assignments with different types in a custom class Example. Shows direct value assignments and field access assignments.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-general.md#2025-04-21_snippet_3

LANGUAGE: painless
CODE:
```
Example example = new Example();
example.x = 1;
example.y = 2.0;
example.z = new ArrayList();
```

LANGUAGE: painless
CODE:
```
Example example = new Example();
example.x = 1;
example.y = example.x;
```

----------------------------------------

TITLE: Multiple Statistical Aggregates with GROUP BY
DESCRIPTION: Example showing how to use multiple statistical aggregate functions (KURTOSIS and SKEWNESS) with salary data, grouped by gender.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_18

LANGUAGE: sql
CODE:
```
SELECT gender AS g, KURTOSIS(salary) AS k, SKEWNESS(salary) AS s FROM emp GROUP BY gender;
```

----------------------------------------

TITLE: Pivoting with AVG on Gender with Subquery
DESCRIPTION: This code snippet shows how to pivot data using the `AVG` function on the `gender` column. It selects `languages`, `gender`, and `salary` from a subquery before applying the pivot operation. The aggregate values represent the average salary by gender.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_31

LANGUAGE: sql
CODE:
```
SELECT * FROM (SELECT languages, gender, salary FROM test_emp) PIVOT (AVG(salary) FOR gender IN ('F'));
```

----------------------------------------

TITLE: Scripted Metric Aggregation Reduce Script Input
DESCRIPTION: This JavaScript snippet demonstrates the input to the reduce_script in the scripted metric aggregation, containing the results from each shard.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-scripted-metric-aggregation.md#2025-04-21_snippet_6

LANGUAGE: js
CODE:
```
"states" : [
    50,
    120
]
```

----------------------------------------

TITLE: Mapping a Wildcard Field (Console)
DESCRIPTION: This snippet shows how to create an index and map a field named `my_wildcard` as a `wildcard` type. The `wildcard` type is optimized for searching large, unstructured machine-generated content using wildcard or regex queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/keyword.md#_snippet_6

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "my_wildcard": {
        "type": "wildcard"
      }
    }
  }
}
```

----------------------------------------

TITLE: Max Aggregation with Histogram Fields
DESCRIPTION: Shows how to create and query histogram fields for max aggregation, including index mapping setup and document insertion.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-max-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT metrics_index
{
  "mappings": {
    "properties": {
      "latency_histo": { "type": "histogram" }
    }
  }
}

PUT metrics_index/_doc/1?refresh
{
  "network.name" : "net-1",
  "latency_histo" : {
      "values" : [0.1, 0.2, 0.3, 0.4, 0.5],
      "counts" : [3, 7, 23, 12, 6]
   }
}

PUT metrics_index/_doc/2?refresh
{
  "network.name" : "net-2",
  "latency_histo" : {
      "values" :  [0.1, 0.2, 0.3, 0.4, 0.5],
      "counts" : [8, 17, 8, 7, 6]
   }
}

POST /metrics_index/_search?size=0&filter_path=aggregations
{
  "aggs" : {
    "max_latency" : { "max" : { "field" : "latency_histo" } }
  }
}
```

----------------------------------------

TITLE: Format DATETIME using FORMAT in Elasticsearch SQL
DESCRIPTION: Illustrates formatting a DATETIME value into a string using the FORMAT function with a 'dd/MM/yyyy HH:mm:ss.ff' pattern. The input is a casted datetime literal. The function returns the datetime as a formatted string, including fractional seconds.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_50

LANGUAGE: SQL
CODE:
```
SELECT FORMAT(CAST('2020-04-05T11:22:33.987654' AS DATETIME), 'dd/MM/yyyy HH:mm:ss.ff') AS "datetime";
```

----------------------------------------

TITLE: Aggregating on a Date Range Field with Query Bounds
DESCRIPTION: This snippet illustrates how query bounds do not act as filters for aggregations, showing a date_histogram aggregation that includes data outside the query range.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-range-field-note.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /range_index/_search?size=0
{
  "query": {
    "range": {
      "time_frame": {
        "gte": "2019-11-01",
        "format": "yyyy-MM-dd"
      }
    }
  },
  "aggs": {
    "november_data": {
      "date_histogram": {
        "field": "time_frame",
        "calendar_interval": "day",
        "format": "yyyy-MM-dd"
      }
    }
  }
}
```

----------------------------------------

TITLE: Analyzing text with Length filter (Console)
DESCRIPTION: This snippet shows how to use the `_analyze` API to test the `length` token filter. It applies the `whitespace` tokenizer and the `length` filter configured to keep tokens between 0 and 4 characters long, analyzing the provided text "the quick brown fox jumps over the lazy dog". The expected output demonstrates which tokens are kept based on the length constraint.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-length-tokenfilter.md#_snippet_0

LANGUAGE: Console
CODE:
```
GET _analyze
{
  "tokenizer": "whitespace",
  "filter": [
    {
      "type": "length",
      "min": 0,
      "max": 4
    }
  ],
  "text": "the quick brown fox jumps over the lazy dog"
}
```

----------------------------------------

TITLE: Using ST_WITHIN in ESQL
DESCRIPTION: This ESQL query demonstrates the use of the ST_WITHIN function to determine if a city boundary is within a specified polygon. The query filters the `airport_city_boundaries` dataset, keeping only records where the `city_boundary` is within the polygon defined using TO_GEOSHAPE.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/st_within.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airport_city_boundaries
| WHERE ST_WITHIN(city_boundary, TO_GEOSHAPE("POLYGON((109.1 18.15, 109.6 18.15, 109.6 18.65, 109.1 18.65, 109.1 18.15))"))
| KEEP abbrev, airport, region, city, city_location
```

----------------------------------------

TITLE: Extracting documents with geohex geo_grid query
DESCRIPTION: This snippet executes a geo_grid query using geohex values to fetch documents matching a specific geohex bucket in Elasticsearch. The GET query requires the geohex value to filter and returns documents for that particular grid.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-grid-query.md#2025-04-21_snippet_6

LANGUAGE: Elasticsearch
CODE:
```
GET /my_locations/_search
{
  "query": {
    "geo_grid" :{
      "location" : {
        "geohex" : "811fbffffffffff"
      }
    }
  }
}
```

LANGUAGE: Elasticsearch
CODE:
```
{
  "took" : 26,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 1,
      "relation" : "eq"
    },
    "max_score" : 1.0,
    "hits" : [
      {
        "_index" : "my_locations",
        "_id" : "3",
        "_score" : 1.0,
        "_source" : {
          "location" : "POINT(2.336389 48.861111)",
          "city" : "Paris",
          "name" : "Musée du Louvre"
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Configuring User Agent Processor Pipeline in Elasticsearch
DESCRIPTION: Example showing how to set up a pipeline that processes user agent strings and extracts browser information. The example demonstrates creating a pipeline and indexing a document with a user agent string.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/user-agent-processor.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT _ingest/pipeline/user_agent
{
  "description" : "Add user agent information",
  "processors" : [
    {
      "user_agent" : {
        "field" : "agent"
      }
    }
  ]
}
PUT my-index-000001/_doc/my_id?pipeline=user_agent
{
  "agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36"
}
GET my-index-000001/_doc/my_id
```

----------------------------------------

TITLE: Importing PostgreSQL Example Data
DESCRIPTION: Docker commands to copy the sample data into the PostgreSQL container and execute the SQL script to create tables and import data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/api-tutorial.md#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
docker cp ~/data/Chinook_PostgreSql.sql postgres:/
docker exec -it postgres psql -U myuser -f /Chinook_PostgreSql.sql
```

----------------------------------------

TITLE: Using murmur3 Field for Cardinality Aggregation in Elasticsearch
DESCRIPTION: This example demonstrates indexing documents and running a cardinality aggregation on a murmur3 hash field. The aggregation counts unique values, potentially improving performance for high-cardinality fields compared to running the same operation on the original field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/mapper-murmur3-usage.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
# Example documents
PUT my-index-000001/_doc/1
{
  "my_field": "This is a document"
}

PUT my-index-000001/_doc/2
{
  "my_field": "This is another document"
}

GET my-index-000001/_search
{
  "aggs": {
    "my_field_cardinality": {
      "cardinality": {
        "field": "my_field.hash"
      }
    }
  }
}
```

----------------------------------------

TITLE: Running Connector Service with Docker - Shell
DESCRIPTION: This shell command executes the Docker image for the Elastic Connector Service. It mounts a local configuration directory as a volume, connects to a Docker network named 'elastic', and runs the `elastic-ingest` command with the specified configuration file, making the connector ready to run sync jobs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-postgresql.md#_snippet_4

LANGUAGE: sh
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Creating Custom Word Delimiter Token Filter in Elasticsearch
DESCRIPTION: The code snippet demonstrates how to configure a custom `word_delimiter` filter in Elasticsearch. It specifies settings to split tokens at non-alphanumeric characters except hyphens, remove delimiters, and avoid splitting at case or number transitions. The configuration includes disabling case and numeric splitting while preserving English possessives.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-word-delimiter-tokenfilter.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "keyword",
          "filter": [ "my_custom_word_delimiter_filter" ]
        }
      },
      "filter": {
        "my_custom_word_delimiter_filter": {
          "type": "word_delimiter",
          "type_table": [ "- => ALPHA" ],
          "split_on_case_change": false,
          "split_on_numerics": false,
          "stem_english_possessive": true
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Zipping Multivalued Fields in ESQL
DESCRIPTION: Combines values from two multivalued fields using a custom delimiter, creating a new field with zipped values. The function allows merging corresponding elements from different arrays with a specified separator.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/mv_zip.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = ["x", "y", "z"], b = ["1", "2"]
| EVAL c = mv_zip(a, b, "-")
| KEEP a, b, c
```

----------------------------------------

TITLE: Using Custom Country Database for IP Location Processor in Elasticsearch
DESCRIPTION: This example shows how to configure the IP location processor to use a specific country database and store the result in a custom field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/ip-location-processor.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT _ingest/pipeline/ip_location
{
  "description" : "Add ip geolocation info",
  "processors" : [
    {
      "ip_location" : {
        "field" : "ip",
        "target_field" : "geo",
        "database_file" : "GeoLite2-Country.mmdb"
      }
    }
  ]
}
PUT my-index-000001/_doc/my_id?pipeline=ip_location
{
  "ip": "89.160.20.128"
}
GET my-index-000001/_doc/my_id
```

----------------------------------------

TITLE: Basic Sum Bucket Aggregation Syntax
DESCRIPTION: Demonstrates the basic structure of a sum bucket aggregation that calculates sums across specified buckets.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-sum-bucket-aggregation.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "sum_bucket": {
    "buckets_path": "the_sum"
  }
}
```

----------------------------------------

TITLE: Creating an Index with Field Mappings for Terms Set Query
DESCRIPTION: This snippet shows how to create an index with the necessary field mappings to support a terms set query. It defines fields for the candidate name, programming languages, and a numeric field to specify required matches.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-terms-set-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /job-candidates
{
  "mappings": {
    "properties": {
      "name": {
        "type": "keyword"
      },
      "programming_languages": {
        "type": "keyword"
      },
      "required_matches": {
        "type": "long"
      }
    }
  }
}
```

----------------------------------------

TITLE: Executing Geo-polygon Query in Console
DESCRIPTION: This snippet demonstrates executing a geo-polygon query in Elasticsearch which retrieves hits within a polygon defined by geo-coordinates. It requires Elasticsearch to handle geo-coordinates and polygon definitions. The query expects latitude and longitude values in GeoJSON format. It outputs query results matching the criteria.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-polygon-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_polygon": {
          "person.location": {
            "points": [
              { "lat": 40, "lon": -70 },
              { "lat": 30, "lon": -80 },
              { "lat": 20, "lon": -90 }
            ]
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Synonym Filter with Inline Synonyms in Elasticsearch
DESCRIPTION: Example of configuring a synonym filter with inline synonyms. The 'synonyms' option allows direct definition of synonym rules within the configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-synonym-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "filter": {
    "synonyms_filter": {
      "type": "synonym",
      "synonyms": ["pc => personal computer", "computer, pc, laptop"]
    }
  }
}
```

----------------------------------------

TITLE: Creating an Index with Settings and Mappings Overrides
DESCRIPTION: This example demonstrates creating a new index from a source while overriding specific settings and mappings. It changes the number of shards to 5 and adds a new boolean field called 'field2'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/create-index-from-source.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
POST _create_from/my-index/my-new-index
{
  "settings_override": {
    "index": {
      "number_of_shards": 5
    }
  },
  "mappings_override": {
    "properties": {
        "field2": { "type": "boolean" }
    }
  }
}
```

----------------------------------------

TITLE: Indexing WKT BBOX (Envelope) in Elasticsearch
DESCRIPTION: Example of indexing an Envelope using the WKT BBOX format in Elasticsearch. The BBOX format follows the order: minLon, maxLon, maxLat, minLat.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/shape.md#2025-04-21_snippet_19

LANGUAGE: json
CODE:
```
POST /example/_doc
{
  "location" : "BBOX (1000.0, 1002.0, 2000.0, 1000.0)"
}
```

----------------------------------------

TITLE: Synopsis - Elasticsearch Reset Password Command
DESCRIPTION: Command line syntax for the elasticsearch-reset-password tool showing all available options and parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/reset-password.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
bin/elasticsearch-reset-password
[-a, --auto] [-b, --batch] [-E <KeyValuePair]
[-f, --force] [-h, --help] [-i, --interactive]
[-s, --silent] [-u, --username] [--url] [-v, --verbose]
```

----------------------------------------

TITLE: Using ROUND Function with STATS in ESQL
DESCRIPTION: Demonstrates how to calculate an average salary and round it using ESQL. The query first computes the average salary from an employees table, then rounds the result using the ROUND function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/stats.csv-spec/statsUnnamedColumnEval.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS AVG(salary)
| EVAL avg_salary_rounded = ROUND(`AVG(salary)`)
```

----------------------------------------

TITLE: Creating Index with Synthetic Source for date_nanos Field in Elasticsearch
DESCRIPTION: Example of creating an index with synthetic _source enabled and a date_nanos field, demonstrating how values are sorted in the synthetic source.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/date_nanos.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "date": { "type": "date_nanos" }
    }
  }
}
PUT idx/_doc/1
{
  "date": ["2015-01-01T12:10:30.000Z", "2014-01-01T12:10:30.000Z"]
}
```

----------------------------------------

TITLE: Calculating Average Monthly Salary with AVG in Elasticsearch SQL
DESCRIPTION: This query calculates the average monthly salary by dividing the 'salary' field by 12.0 before applying the AVG function. The result is aliased as 'avg'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_2

LANGUAGE: SQL
CODE:
```
SELECT AVG(salary / 12.0) AS avg FROM emp;
```

----------------------------------------

TITLE: Example Usage of elasticsearch-reconfigure-node Tool
DESCRIPTION: Provides an example of how to use the elasticsearch-reconfigure-node tool with sudo permissions to reconfigure an installed Elasticsearch node, allowing it to join an existing cluster on first start. The example includes the use of an enrollment token.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/reconfigure-node.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
sudo /usr/share/elasticsearch/elasticsearch-reconfigure-node --enrollment-token eyJ2ZXIiOiI4LjAuMCIsImFkciI6WyIxOTIuMTY4LjEuMTY6OTIwMCJdLCJmZ3IiOiI4NGVhYzkyMzAyMWQ1MjcyMmQxNTFhMTQwZmM2ODI5NmE5OWNiNmU0OGVhZjYwYWMxYzljM2I3ZDJjOTg2YTk3Iiwia2V5IjoiUy0yUjFINEJrNlFTMkNEY1dVV1g6QS0wSmJxM3hTRy1haWxoQTdPWVduZyJ9
```

----------------------------------------

TITLE: Multiple Aggregations Query
DESCRIPTION: Shows how to use multiple aggregate functions (MIN, MAX, AVG, COUNT) in a single query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_20

LANGUAGE: sql
CODE:
```
SELECT MIN(salary) AS min, MAX(salary) AS max, AVG(salary) AS avg, COUNT(*) AS count FROM emp;
```

----------------------------------------

TITLE: Creating an HDFS Repository with Kerberos Authentication
DESCRIPTION: Shows how to configure a secure HDFS repository with Kerberos authentication by specifying the security.principal in the repository settings. This example uses a static principal name for all nodes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/repository-hdfs-security.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
PUT _snapshot/my_hdfs_repository
{
  "type": "hdfs",
  "settings": {
    "uri": "hdfs://namenode:8020/",
    "path": "/user/elasticsearch/repositories/my_hdfs_repository",
    "security.principal": "elasticsearch@REALM"
  }
}
```

----------------------------------------

TITLE: Disabling Automatic Synonym Phrase Queries
DESCRIPTION: Demonstrates how to control synonym expansion behavior by setting auto_generate_synonyms_phrase_query to false. This creates boolean queries instead of phrase queries for multi-term synonyms.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_18

LANGUAGE: console
CODE:
```
GET /_search
{
   "query": {
       "query_string" : {
           "default_field": "title",
           "query" : "ny city",
           "auto_generate_synonyms_phrase_query" : false
       }
   }
}
```

----------------------------------------

TITLE: Height Conversion and Average Calculation in ESQL
DESCRIPTION: Query that selects from employees table, converts height measurements to feet using a multiplication factor of 3.281, and calculates the average height in feet. The result shows an average height of approximately 5.80 feet.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/eval.csv-spec/evalUnnamedColumnStats.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| EVAL height * 3.281
| STATS avg_height_feet = AVG(`height * 3.281`)
```

----------------------------------------

TITLE: Analyzing Text with UAX URL Email Tokenizer in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the UAX URL email tokenizer to analyze a sample text containing an email address. It shows how the tokenizer keeps the email address as a single token.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-uaxurlemail-tokenizer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _analyze
{
  "tokenizer": "uax_url_email",
  "text": "Email me at john.smith@global-international.com"
}
```

----------------------------------------

TITLE: Creating Index with Custom Analyzer using Stemmer - Elasticsearch Console
DESCRIPTION: Shows how to use the Elasticsearch Create Index API to define a custom analyzer named `my_analyzer` that includes the default `stemmer` filter. This makes the analyzer available for use within the index. Requires a running Elasticsearch instance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stemmer-tokenfilter.md#_snippet_1

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "whitespace",
          "filter": [ "stemmer" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Extract Minute of Day using MINUTE_OF_DAY in Elasticsearch SQL
DESCRIPTION: Demonstrates using the MINUTE_OF_DAY function to extract the minute of the day from a TIMESTAMP literal '2018-02-19T10:23:27Z'. The function returns an integer representing the number of minutes since the beginning of the day.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_71

LANGUAGE: SQL
CODE:
```
SELECT MINUTE_OF_DAY(CAST('2018-02-19T10:23:27Z' AS TIMESTAMP)) AS minute;
```

----------------------------------------

TITLE: Case-Insensitive/Partial RLIKE Workaround (ESQL)
DESCRIPTION: Provides a workaround for performing case-insensitive or partial matching on `text` fields in ESQL, since `LIKE` treats them as `keyword` fields. Using the `RLIKE` operator with a regular expression allows for more flexible pattern matching, such as `[Ee]lasticsearch.*`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/limitations.md#_snippet_4

LANGUAGE: esql
CODE:
```
| WHERE field RLIKE "[Ee]lasticsearch.*"
```

----------------------------------------

TITLE: High Precision Geohex Grid Query with Bounding Box
DESCRIPTION: Demonstrates high precision (zoom level 12) geohex grid aggregation with geo_bounding_box filter to limit the search area and prevent excessive bucket generation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-geohexgrid-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /museums/_search?size=0
{
  "aggregations": {
    "zoomed-in": {
      "filter": {
        "geo_bounding_box": {
          "location": {
            "top_left": "POINT (4.9 52.4)",
            "bottom_right": "POINT (5.0 52.3)"
          }
        }
      },
      "aggregations": {
        "zoom1": {
          "geohex_grid": {
            "field": "location",
            "precision": 12
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Terms Set Query Using minimum_should_match_script
DESCRIPTION: This snippet shows how to use a script to dynamically determine the required number of matching terms. The script uses Math.min to ensure the required matches don't exceed the number of terms provided in the query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-terms-set-query.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET /job-candidates/_search
{
  "query": {
    "terms_set": {
      "programming_languages": {
        "terms": [ "c++", "java", "php" ],
        "minimum_should_match_script": {
          "source": "Math.min(params.num_terms, doc['required_matches'].value)"
        },
        "boost": 1.0
      }
    }
  }
}
```

----------------------------------------

TITLE: ESQL RENAME Command Syntax
DESCRIPTION: Basic syntax for the RENAME command in ESQL. Shows how to rename one or multiple columns using the AS keyword.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/rename.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
RENAME old_name1 AS new_name1[, ..., old_nameN AS new_nameN]
```

----------------------------------------

TITLE: Indexing Bit Vectors in Elasticsearch
DESCRIPTION: Demonstrates how to create an index with a dense vector field of type 'bit' and index documents with bit vector data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-script-score-query.md#2025-04-21_snippet_14

LANGUAGE: console
CODE:
```
PUT my-index-bit-vectors
{
  "mappings": {
    "properties": {
      "my_dense_vector": {
        "type": "dense_vector",
        "index": false,
        "element_type": "bit",
        "dims": 40
      }
    }
  }
}

PUT my-index-bit-vectors/_doc/1
{
  "my_dense_vector": [8, 5, -15, 1, -7]
}

PUT my-index-bit-vectors/_doc/2
{
  "my_dense_vector": [-1, 115, -3, 4, -128]
}

PUT my-index-bit-vectors/_doc/3
{
  "my_dense_vector": [2, 18, -5, 0, -124]
}

POST my-index-bit-vectors/_refresh
```

----------------------------------------

TITLE: Filtering Data with RLIKE in ESQL
DESCRIPTION: This ESQL snippet demonstrates how to filter data using the `RLIKE` operator with a regular expression pattern. It filters the `employees` dataset to keep only the entries where `first_name` matches the pattern ".leja.*". The query then keeps only the `first_name` and `last_name` fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/operators/rlike.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| WHERE first_name RLIKE "\".leja.*\""
| KEEP first_name, last_name
```

----------------------------------------

TITLE: Named Queries Example in Elasticsearch
DESCRIPTION: This example demonstrates the use of named queries within a boolean query in Elasticsearch. Each query (`match` and `terms`) is assigned a `_name`. The response will include a `matched_queries` property for each hit, indicating which named queries matched.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-bool-query.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "bool": {
      "should": [
        { "match": { "name.first": { "query": "shay", "_name": "first" } } },
        { "match": { "name.last": { "query": "banon", "_name": "last" } } }
      ],
      "filter": {
        "terms": {
          "name.last": [ "banon", "kimchy" ],
          "_name": "test"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Analyzing Text with Predicate Token Filter (Elasticsearch Console)
DESCRIPTION: This snippet shows how to use the `_analyze` API to apply the `predicate_token_filter`. It configures the filter with a Painless script that keeps tokens whose term length is greater than 3. This demonstrates filtering tokens based on a simple condition during analysis.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-predicatefilter-tokenfilter.md#_snippet_0

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer": "whitespace",
  "filter": [
    {
      "type": "predicate_token_filter",
      "script": {
        "source": """
          token.term.length() > 3
        """
      }
    }
  ],
  "text": "the fox jumps the lazy dog"
}
```

----------------------------------------

TITLE: Painless Script for Watcher Condition
DESCRIPTION: This Painless script is used as a condition in a Watcher to check if any theatre's monetary value is either below a low threshold or above a high threshold, both defined in the watch's metadata.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-watcher-transform-context.md#2025-04-21_snippet_5

LANGUAGE: painless
CODE:
```

        return ctx.payload.aggregations.theatres.buckets.stream()
          .anyMatch(theatre -> theatre.money.value < ctx.metadata.low_threshold ||
                               theatre.money.value > ctx.metadata.high_threshold)
      
```

----------------------------------------

TITLE: Pattern Analyzer in Elasticsearch
DESCRIPTION: Analyzer that uses a regular expression to split text into terms, with support for lowercasing and stop word removal.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analyzer-reference.md#2025-04-21_snippet_5

LANGUAGE: elasticsearch
CODE:
```
"analyzer": "pattern"
```

----------------------------------------

TITLE: Categorize Text with Filters and Similarity Threshold Console
DESCRIPTION: This snippet shows how to use both `categorization_filters` and `similarity_threshold`. The threshold parameter (set to 11%) controls how similar messages must be to be grouped into the same category, influencing the granularity of results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-categorize-text-aggregation.md#_snippet_2

LANGUAGE: console
CODE:
```
POST log-messages/_search?filter_path=aggregations
{
  "aggs": {
    "categories": {
      "categorize_text": {
        "field": "message",
        "categorization_filters": ["\\w+\_\\d{3}"],
        "similarity_threshold": 11
      }
    }
  }
}
```

----------------------------------------

TITLE: High-precision Geotile Grid Aggregation with Geo Bounding Box Filter
DESCRIPTION: This example demonstrates how to perform a high-precision geotile grid aggregation (precision 22) with a geo_bounding_box filter to limit the scope. The filter is applied to avoid generating millions of buckets when using high precision levels.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-geotilegrid-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /museums/_search?size=0
{
  "aggregations": {
    "zoomed-in": {
      "filter": {
        "geo_bounding_box": {
          "location": {
            "top_left": "POINT (4.9 52.4)",
            "bottom_right": "POINT (5.0 52.3)"
          }
        }
      },
      "aggregations": {
        "zoom1": {
          "geotile_grid": {
            "field": "location",
            "precision": 22
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Using Index Boost with Specific Indices in Elasticsearch
DESCRIPTION: This example demonstrates how to use the indices_boost parameter to boost search results from specific indices. It applies a boost of 1.4 to my-index-000001 and 1.3 to my-index-000002.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-multiple-data-streams-indices.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET /_search
{
  "indices_boost": [
    { "my-index-000001": 1.4 },
    { "my-index-000002": 1.3 }
  ]
}
```

----------------------------------------

TITLE: Setting JVM Options for elasticsearch-reconfigure-node Tool
DESCRIPTION: Demonstrates how to set custom JVM options for the elasticsearch-reconfigure-node tool by using the CLI_JAVA_OPTS environment variable. This example increases the heap size to 1GB.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/reconfigure-node.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
export CLI_JAVA_OPTS="-Xmx1g"
bin/elasticsearch-reconfigure-node ...
```

----------------------------------------

TITLE: Adding Limit Token Filter to a Custom Analyzer in Elasticsearch
DESCRIPTION: Example of creating a custom analyzer named 'standard_one_token_limit' that uses the standard tokenizer and the default limit filter which keeps only the first token.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-limit-token-count-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT limit_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "standard_one_token_limit": {
          "tokenizer": "standard",
          "filter": [ "limit" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Enabling Eager Global Ordinals in Elasticsearch Mapping
DESCRIPTION: This snippet shows how to enable eager global ordinals on a keyword field named 'tags' through a mapping update. When enabled, global ordinals are built when a shard is refreshed rather than at search time, optimizing for search performance at the cost of slower indexing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/eager-global-ordinals.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
PUT my-index-000001/_mapping
{
  "properties": {
    "tags": {
      "type": "keyword",
      "eager_global_ordinals": true
    }
  }
}
```

----------------------------------------

TITLE: Creating Index with Separate Ingest/Search Semantic Text Fields - Elasticsearch API
DESCRIPTION: This snippet illustrates how to specify distinct inference endpoints for index-time embedding generation (`inference_id`) and query-time embedding generation (`search_inference_id`). This allows optimizing endpoints for different workloads. Requires an Elasticsearch instance and two separate pre-configured inference endpoints.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/semantic-text.md#_snippet_2

LANGUAGE: console
CODE:
```
PUT my-index-000003
{
  "mappings": {
    "properties": {
      "inference_field": {
        "type": "semantic_text",
        "inference_id": "my-elser-endpoint-for-ingest",
        "search_inference_id": "my-elser-endpoint-for-search"
      }
    }
  }
}
```

----------------------------------------

TITLE: Using ESQL ENRICH with Specific Enrich Fields
DESCRIPTION: Illustrates how to select only specific fields from the enrich index to be added as columns using the `WITH <field1>, <field2>, ...` clause, in this case, only 'language_name'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-enrich-data.md#_snippet_2

LANGUAGE: esql
CODE:
```
ROW a = "1"\n| ENRICH languages_policy ON a WITH language_name
```

----------------------------------------

TITLE: ESQL AS_GEO_SHAPE Function Description
DESCRIPTION: Describes the AS_GEO_SHAPE function, which converts input values to geo_shape values. It specifically mentions that string inputs must conform to the Well-known text (WKT) format to be successfully converted.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/to_geoshape.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
**Description**

Converts an input value to a `geo_shape` value. A string will only be successfully converted if it respects the [WKT](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry) format.
```

----------------------------------------

TITLE: Finding Percolator Queries with Failed Term Extraction in Elasticsearch
DESCRIPTION: This query searches for percolator queries where term extraction has failed. Such queries can't benefit from the performance optimization that reduces candidate matches during percolation. This assumes a 'query' field of type 'percolator' in the mappings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-percolate-query.md#2025-04-21_snippet_12

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "term" : {
      "query.extraction_result" : "failed"
    }
  }
}
```

----------------------------------------

TITLE: Clearing Multiple Scroll Contexts in Elasticsearch
DESCRIPTION: This snippet shows how to clear multiple scroll contexts at once by passing an array of scroll_ids to the clear-scroll API.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/paginate-search-results.md#2025-04-21_snippet_12

LANGUAGE: console
CODE:
```
DELETE /_search/scroll
{
  "scroll_id" : [
    "DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAD4WYm9laVYtZndUQlNsdDcwakFMNjU1QQ==",
    "DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAAABFmtSWWRRWUJrU2o2ZExpSGJCVmQxYUEAAAAAAAAAAxZrUllkUVlCa1NqNmRMaUhiQlZkMWFBAAAAAAAAAAIWa1JZZFFZQmtTajZkTGlIYkJWZDFhQQAAAAAAAAAFFmtSWWRRWUJrU2o2ZExpSGJCVmQxYUEAAAAAAAAABBZrUllkUVlCa1NqNmRMaUhiQlZkMWFB"
  ]
}
```

----------------------------------------

TITLE: Understanding DATE_DIFF with year units in ESQL
DESCRIPTION: This example illustrates how DATE_DIFF works with calendar units like years, showing that only fully elapsed units are counted. It compares dates at the end of 2023 and throughout 2024 to demonstrate this behavior.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/date_diff.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
ROW end_23 = TO_DATETIME("2023-12-31T23:59:59.999Z"),
  start_24 = TO_DATETIME("2024-01-01T00:00:00.000Z"),
    end_24 = TO_DATETIME("2024-12-31T23:59:59.999")
| EVAL end23_to_start24 = DATE_DIFF("year", end_23, start_24)
| EVAL end23_to_end24   = DATE_DIFF("year", end_23, end_24)
| EVAL start_to_end_24  = DATE_DIFF("year", start_24, end_24)
```

----------------------------------------

TITLE: Fetch Documents with Standard and Custom Fields
DESCRIPTION: This snippet demonstrates how to fetch documents with all fields or specific field types (standard or custom) from Salesforce. Users will input their desired field types through a SOQL query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-salesforce.md#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
[
  {
    "query": "SELECT FIELDS(ALL) FROM Account",
    "language": "SOQL"
  }
]
```

----------------------------------------

TITLE: Extracting DateTime Components
DESCRIPTION: Demonstrates extracting individual components from a ZonedDateTime object.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_9

LANGUAGE: painless
CODE:
```
ZonedDateTime zdt =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 100, ZoneId.of(tz));
int year = zdt.getYear();
int month = zdt.getMonthValue();
int day = zdt.getDayOfMonth();
int hour = zdt.getHour();
int minutes = zdt.getMinute();
int seconds = zdt.getSecond();
int nanos = zdt.getNano();
```

----------------------------------------

TITLE: Pipeline Aggregation with Top Metrics
DESCRIPTION: Demonstrates using top_metrics in pipeline aggregations with bucket_selector for filtering buckets based on metric values, similar to SQL HAVING clause.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-top-metrics.md#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
POST /test*/_search?filter_path=aggregations
{
  "aggs": {
    "ip": {
      "terms": {
        "field": "ip"
      },
      "aggs": {
        "tm": {
          "top_metrics": {
            "metrics": {"field": "m"},
            "sort": {"s": "desc"},
            "size": 1
          }
        },
        "having_tm": {
          "bucket_selector": {
            "buckets_path": {
              "top_m": "tm[m]"
            },
            "script": "params.top_m < 1000"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Limiting Network Interface to IPv4 in Elasticsearch YAML
DESCRIPTION: Configures the node to use only IPv4 addresses of a specific network interface (en0 in this case).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/networking-settings.md#2025-04-21_snippet_5

LANGUAGE: yaml
CODE:
```
network.host: "_en0:ipv4_"
```

----------------------------------------

TITLE: Handling Missing Events in EQL Sequences
DESCRIPTION: Demonstrates how to use '!' to match missing events in timespan-constrained sequences in EQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_13

LANGUAGE: eql
CODE:
```
sequence by host.name, user.name with maxspan=5s
  [ authentication where event.code : "4624" ]
  ![ authentication where event.code : "4647" ]
```

----------------------------------------

TITLE: Auto-Flattening Object Mappings in Elasticsearch with Subobjects Disabled
DESCRIPTION: This example demonstrates how to use auto-flattening with subobjects disabled. Object mappings defined within an object with 'subobjects: false' will be automatically flattened before being stored, converting nested object structures to dotted field names.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/subobjects.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT my-index-000002
{
  "mappings": {
    "properties": {
      "metrics": {
        "subobjects": false,
        "properties": {
          "time": {
            "type": "object", <1>
            "properties": {
              "min": { "type": "long" }, <2>
              "max": { "type": "long" }
            }
          }
        }
      }
    }
  }
}
GET my-index-000002/_mapping
```

----------------------------------------

TITLE: Creating GCE Instance with Tags for Elasticsearch Discovery
DESCRIPTION: A shell command for creating a Google Compute Engine instance with specific tags that can be used for Elasticsearch node discovery filtering. The command creates an instance named 'myesnode1' with the compute-rw scope and the tags 'elasticsearch' and 'dev'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-tags.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
gcloud compute instances create myesnode1 --project=es-cloud \
       --scopes=compute-rw \
       --tags=elasticsearch,dev
```

----------------------------------------

TITLE: Creating a OneDrive connector using the Elasticsearch API
DESCRIPTION: This snippet demonstrates how to create a new self-managed OneDrive connector using the Elasticsearch Create connector API. It specifies the index name, connector name, and service type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-onedrive.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT _connector/my-onedrive-connector
{
  "index_name": "my-elasticsearch-index",
  "name": "Content synced from OneDrive",
  "service_type": "onedrive"
}
```

----------------------------------------

TITLE: Configure Mapping for Postings Highlighting Elasticsearch Console
DESCRIPTION: Defines an Elasticsearch index mapping for a 'comment' field to support highlighting using the postings list highlighter. Setting 'index_options' to "offsets" ensures that term positions and offsets, required by this highlighter, are indexed along with the text.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_23

LANGUAGE: console
CODE:
```
PUT /example
{
  "mappings": {
    "properties": {
      "comment" : {
        "type": "text",
        "index_options" : "offsets"
      }
    }
  }
}
```

----------------------------------------

TITLE: Incremental Cumulative Cardinality Query
DESCRIPTION: Advanced example showing how to calculate both cumulative and incremental new user counts using combination of cumulative_cardinality and derivative aggregations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-cumulative-cardinality-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /user_hits/_search
{
  "size": 0,
  "aggs": {
    "users_per_day": {
      "date_histogram": {
        "field": "timestamp",
        "calendar_interval": "day"
      },
      "aggs": {
        "distinct_users": {
          "cardinality": {
            "field": "user_id"
          }
        },
        "total_new_users": {
          "cumulative_cardinality": {
            "buckets_path": "distinct_users"
          }
        },
        "incremental_new_users": {
          "derivative": {
            "buckets_path": "total_new_users"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Generating Dropbox Refresh Token
DESCRIPTION: cURL command to generate a refresh token using authorization code
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-dropbox.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
curl -X POST "https://api.dropboxapi.com/oauth2/token?code=<AUTHORIZATION_CODE>&grant_type=authorization_code" -u "<APP_KEY>:<APP_SECRET>"
```

----------------------------------------

TITLE: Analyzing Text with Keyword Tokenizer in Elasticsearch
DESCRIPTION: This snippet demonstrates using the analyze API with the keyword tokenizer to produce a token containing whitespace. It shows how the token retains the original whitespace without trimming.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-trim-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET _analyze
{
  "tokenizer" : "keyword",
  "text" : " fox "
}
```

----------------------------------------

TITLE: Configuring Search Slow Log Settings in YAML
DESCRIPTION: This snippet shows how to configure search slow log settings in the log4j2.properties file using YAML format. It sets thresholds for different log levels and enables user information inclusion.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/slow-log.md#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
index.search.slowlog.threshold.query.warn: 10s
index.search.slowlog.threshold.query.info: 5s
index.search.slowlog.threshold.query.debug: 2s
index.search.slowlog.threshold.query.trace: 500ms

index.search.slowlog.threshold.fetch.warn: 1s
index.search.slowlog.threshold.fetch.info: 800ms
index.search.slowlog.threshold.fetch.debug: 500ms
index.search.slowlog.threshold.fetch.trace: 200ms

index.search.slowlog.include.user: true
```

----------------------------------------

TITLE: Using STDDEV_POP Function on Derived Value in Elasticsearch SQL
DESCRIPTION: Illustrates how to calculate the population standard deviation of a derived value (monthly salary: salary / 12.0), alongside minimum and maximum derived values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_49

LANGUAGE: SQL
CODE:
```
SELECT MIN(salary / 12.0) AS min, MAX(salary / 12.0) AS max, STDDEV_POP(salary / 12.0) AS stddev FROM emp;
```

----------------------------------------

TITLE: Mapping Elasticsearch Index: Disable Mappings (console)
DESCRIPTION: Creates or updates the mapping for `my-index-000001`, setting `enabled` to `false` at the root level. This disables all mappings, meaning fields will be stored in `_source` but not indexed or parsed according to specific types, making them "unmapped".
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_8

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "enabled": false
  }
}
```

----------------------------------------

TITLE: Rolling Over a Data Stream using JavaScript
DESCRIPTION: This JavaScript snippet shows how to manually roll over a data stream using the Elasticsearch JavaScript client. It sends a POST request to the _rollover endpoint.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/ml/licenses/ojalgo-NOTICE.txt#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
const { Client } = require('@elastic/elasticsearch')
const client = new Client({ node: 'http://localhost:9200' })

client.indices.rollover({
  alias: 'my-data-stream',
  body: {
    "conditions": {
      "max_age": "7d",
      "max_docs": 1000000
    }
  }
}, (err, result) => {
  if (err) console.error(err)
  else console.log(result)
})
```

----------------------------------------

TITLE: Geotile Grid Aggregation with Bounds Parameter
DESCRIPTION: This example shows how to use the optional bounds parameter within the geotile_grid aggregation to restrict the cells considered to those that intersect with the provided bounding box. The bounds parameter works independently of any geo_bounding_box queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-geotilegrid-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /museums/_search?size=0
{
  "aggregations": {
    "tiles-in-bounds": {
      "geotile_grid": {
        "field": "location",
        "precision": 22,
        "bounds": {
          "top_left": "POINT (4.9 52.4)",
          "bottom_right": "POINT (5.0 52.3)"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Advanced Sync Rules in SharePoint Online
DESCRIPTION: JSON configuration to skip extracting drive items older than specified days. This example skips extraction of files not modified in the last 60 days.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-sharepoint-online.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
{
	"skipExtractingDriveItemsOlderThan": 60
}
```

----------------------------------------

TITLE: Configuring ILM Policy with Unfollow Action in Elasticsearch
DESCRIPTION: Example of creating an ILM policy that includes the unfollow action in the hot phase. This policy will convert follower indices into regular indices when specific conditions are met, allowing for subsequent operations like shrink, rollover, and searchable snapshots.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-unfollow.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "hot": {
        "actions": {
          "unfollow" : {}
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Date Range Aggregation with Missing Values in Elasticsearch
DESCRIPTION: Demonstrates how to handle documents with missing date values in a date range aggregation by providing a default date. Documents without a date value will be treated as if they had the specified default date value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-daterange-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
   "aggs": {
       "range": {
           "date_range": {
               "field": "date",
               "missing": "1976/11/30",
               "ranges": [
                  {
                    "key": "Older",
                    "to": "2016/02/01"
                  }, <1>
                  {
                    "key": "Newer",
                    "from": "2016/02/01",
                    "to" : "now/d"
                  }
              ]
          }
      }
   }
}
```

----------------------------------------

TITLE: Querying Elasticsearch with typed_keys Parameter
DESCRIPTION: Example of using the typed_keys parameter in an Elasticsearch search request with term and phrase suggesters. The request includes two suggesters targeting the message field with different suggestion types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_27

LANGUAGE: console
CODE:
```
POST _search?typed_keys
{
  "suggest": {
    "text" : "some test mssage",
    "my-first-suggester" : {
      "term" : {
        "field" : "message"
      }
    },
    "my-second-suggester" : {
      "phrase" : {
        "field" : "message"
      }
    }
  }
}
```

----------------------------------------

TITLE: Basic Search Query with Sorted Results in Elasticsearch
DESCRIPTION: Shows how to query a sorted index for the latest 10 events using timestamp-based sorting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/sorting.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /events/_search
{
  "size": 10,
  "sort": [
    { "timestamp": "desc" }
  ]
}
```

----------------------------------------

TITLE: Executing Rare Terms Aggregation in Elasticsearch
DESCRIPTION: Shows how to execute a rare terms aggregation on the 'genre' field in a search request, with default settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-rare-terms-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /_search
{
  "aggs": {
    "genres": {
      "rare_terms": {
        "field": "genre"
      }
    }
  }
}
```

----------------------------------------

TITLE: Summing Multivalued Field with MV_SUM in ESQL
DESCRIPTION: This snippet demonstrates how to use the MV_SUM function in ESQL to convert a multivalued field into a single value containing the sum of all values. It creates a row with a multivalued field 'a' and then uses MV_SUM to calculate the sum of its values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/mv_sum.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=[3, 5, 6]
| EVAL sum_a = MV_SUM(a)
```

----------------------------------------

TITLE: Converting JKS Keystore to PKCS12
DESCRIPTION: Converts a JKS keystore containing multiple entries to a PKCS12 keystore format. Useful for interoperability with systems requiring PKCS12.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/identity-provider/src/test/resources/org/elasticsearch/xpack/idp/saml/idp/README.txt#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
keytool -importkeystore -srckeystore multi_signing.jks  -destkeystore multi_signing.p12 -deststoretype PKCS12 -deststorepass signing -destkeypass signing
```

----------------------------------------

TITLE: Indexing a Basic Suggestion with Multiple Inputs and Weight
DESCRIPTION: Example of indexing a suggestion with multiple input values and a weight attribute. The weight determines suggestion scoring priority, and multiple inputs allow matching on different terms.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_9

LANGUAGE: json
CODE:
```
PUT music/_doc/1?refresh
{
  "suggest" : {
    "input": [ "Nevermind", "Nirvana" ],
    "weight" : 34
  }
}
```

----------------------------------------

TITLE: Computing Aggregate Statistics with ESQL
DESCRIPTION: ESQL query that computes the average and maximum number of languages from an employees table using STATS operation. The query calculates AVG(languages) as avg_lang and MAX(languages) as max_lang.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/stats.csv-spec/statsCalcMultipleValues.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS avg_lang = AVG(languages), max_lang = MAX(languages)
```

----------------------------------------

TITLE: Downloading MySQL Connector Sample Config - sh
DESCRIPTION: Downloads the sample configuration file for the Elasticsearch MySQL connector from the GitHub repository using `curl` and saves it to a local directory specified by the `--output` argument. This is the first step in deploying the connector using Docker.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-mysql.md#_snippet_4

LANGUAGE: sh
CODE:
```
curl https://raw.githubusercontent.com/elastic/connectors/main/config.yml.example --output ~/connectors-config/config.yml
```

----------------------------------------

TITLE: Demonstrating Escaped Characters in Regular Expressions
DESCRIPTION: Examples showing how to escape reserved characters in regular expressions with backslashes or double quotes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/regexp-syntax.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
\@                  # renders as a literal '@'
\\                  # renders as a literal '\'
"john@smith.com"    # renders as 'john@smith.com'
```

----------------------------------------

TITLE: Starting New Elasticsearch Instances from Custom Image on GCP
DESCRIPTION: This snippet shows how to create new Elasticsearch instances using a custom image. It provides two examples: a simple instance creation and a more detailed one with specific machine type and scopes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-cloning.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
# Just change node name (here myesnode2)
gcloud compute instances create myesnode2 --image elasticsearch-2-0-0 --zone europe-west1-a

# If you want to provide all details directly, you can use:
gcloud compute instances create myesnode2 --image=elasticsearch-2-0-0 \
       --zone europe-west1-a --machine-type f1-micro --scopes=compute-rw
```

----------------------------------------

TITLE: Setting Custom Background Context for Significant Terms (Console/JSON)
DESCRIPTION: Illustrates setting a custom background context for the `significant_terms` aggregation using the `background_filter` parameter. This changes the reference population for significance calculation from the entire index to the documents matching the specified filter (e.g., documents containing "spain"), highlighting terms unusually frequent within a sub-population (e.g., "madrid" documents within "spain").
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-significantterms-aggregation.md#_snippet_12

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "match": {
      "city": "madrid"
    }
  },
  "aggs": {
    "tags": {
      "significant_terms": {
        "field": "tag",
        "background_filter": {
          "term": { "text": "spain" }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Connector Configuration (Dockerized)
DESCRIPTION: This YAML configuration snippet demonstrates how to configure the self-managed connector to use the data extraction service within a Docker environment.  The `host` points to the internal Docker endpoint, `host.docker.internal`, and the `shared_volume_dir` is configured for `/app/files`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-content-extraction.md#2025-04-21_snippet_8

LANGUAGE: yaml
CODE:
```
# data-extraction-service settings
extraction_service:
  host: http://host.docker.internal:8090
  use_file_pointers: true
  shared_volume_dir: '/app/files'
```

----------------------------------------

TITLE: Explicit Synonym Mapping with Token Replacement
DESCRIPTION: Creates explicit mappings that replace specific token sequences with alternative representations, ignoring the expand parameter in schema configuration
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/src/test/cluster/config/analysis/synonym.txt#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
i-pod, i pod => ipod
sea biscuit, sea biscit => seabiscuit
```

----------------------------------------

TITLE: Defining Advanced Sync Rules in Elasticsearch JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to define advanced sync rules for an Elasticsearch connector. The JSON structure configures skipping files based on extensions owned by certain users. Ensure proper configuration and syntax for effective rule implementation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-onedrive.md#2025-04-21_snippet_6

LANGUAGE: JavaScript
CODE:
```
[
  {
    "owners": ["user1-domain@onmicrosoft.com", "user2-domain@onmicrosoft.com"],
    "skipFilesWithExtensions": [".py"]
  }
]
```

----------------------------------------

TITLE: Configure Mapping for Term Vectors Highlighting Elasticsearch Console
DESCRIPTION: Defines an Elasticsearch index mapping for a 'comment' field to support highlighting using highlighters that utilize term vectors (FVH or Unified). Setting 'term_vector' to "with_positions_offsets" indexes detailed term information but increases the index size.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_24

LANGUAGE: console
CODE:
```
PUT /example
{
  "mappings": {
    "properties": {
      "comment" : {
        "type": "text",
        "term_vector" : "with_positions_offsets"
      }
    }
  }
}
```

----------------------------------------

TITLE: Running Extraction Service in Docker (Dockerized Connector)
DESCRIPTION: This command runs the extraction service Docker container with a shared volume and network. It maps port 8090, attaches the `extraction-service-volume`, and connects to the `elastic` network. `$EXTRACTION_SERVICE_VERSION` should be set to the desired extraction service image version.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-content-extraction.md#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
$ docker run \
  -p 8090:8090 \
  -it \
  -v extraction-service-volume:/app/files \
  --network "elastic" \
  --name extraction-service \
  docker.elastic.co/integrations/data-extraction-service:$EXTRACTION_SERVICE_VERSION
```

----------------------------------------

TITLE: Analyze Text with Edge n-gram Filter (Console)
DESCRIPTION: This example demonstrates how to use the `_analyze` API to test the `edge_ngram` filter's output. It applies the filter with `min_gram: 1` and `max_gram: 2` to a sample text, showing the resulting edge n-grams.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-edgengram-tokenfilter.md#_snippet_0

LANGUAGE: console
CODE:
```
GET _analyze
{
  "tokenizer": "standard",
  "filter": [
    { "type": "edge_ngram",
      "min_gram": 1,
      "max_gram": 2
    }
  ],
  "text": "the quick brown fox jumps"
}
```

----------------------------------------

TITLE: Counting All Non-Null vs. Distinct Values with CASE and COUNT(ALL)/COUNT(DISTINCT)
DESCRIPTION: This example uses a CASE statement within `COUNT(ALL)` and `COUNT(DISTINCT)` to assign a non-null value (-1) to fields where 'languages' is NULL. This allows `COUNT(ALL)` to include rows where 'languages' was originally null, while `COUNT(DISTINCT)` counts distinct values including -1.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_7

LANGUAGE: SQL
CODE:
```
SELECT COUNT(ALL CASE WHEN languages IS NULL THEN -1 ELSE languages END) AS count_all, COUNT(DISTINCT CASE WHEN languages IS NULL THEN -1 ELSE languages END) count_distinct FROM emp;
```

----------------------------------------

TITLE: Unweighted Average in Elasticsearch Moving Functions
DESCRIPTION: Implementation of simple arithmetic mean using unweightedAvg function. Calculates average over a window without time-dependent weighting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-movfn-aggregation.md#2025-04-21_snippet_7

LANGUAGE: json
CODE:
```
POST /_search
{
  "size": 0,
  "aggs": {
    "my_date_histo": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "1M"
      },
      "aggs": {
        "the_sum": {
          "sum": { "field": "price" }
        },
        "the_movavg": {
          "moving_fn": {
            "buckets_path": "the_sum",
            "window": 10,
            "script": "MovingFunctions.unweightedAvg(values)"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Calculating Percentile Rank with Different Methods in Elasticsearch SQL
DESCRIPTION: Illustrates calculating the percentile rank of the value 65000 using both 'tdigest' and 'hdr' algorithms with specified parameters, rounded to 2 decimal places, grouped by 'languages'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_45

LANGUAGE: SQL
CODE:
```
SELECT
    languages,
    ROUND(PERCENTILE_RANK(salary, 65000, 'tdigest', 100.0), 2) AS "rank_TDigest",
    ROUND(PERCENTILE_RANK(salary, 65000, 'hdr', 3), 2) AS "rank_HDR"
FROM emp
GROUP BY languages;
```

----------------------------------------

TITLE: Generating API Key for SharePoint Server Connector
DESCRIPTION: Example of creating an API key for the SharePoint Server connector using the Elasticsearch API. This key is used for authentication and authorization of the connector.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-sharepoint.md#2025-04-22_snippet_1

LANGUAGE: console
CODE:
```
POST /_security/api_key
{
  "name": "connector_name-connector-api-key",
  "role_descriptors": {
    "connector_name-connector-role": {
      "cluster": [
        "monitor",
        "manage_connector"
      ],
      "indices": [
        {
          "names": [
            "index_name",
            ".search-acl-filter-index_name",
            ".elastic-connectors*"
          ],
          "privileges": [
            "all"
          ],
          "allow_restricted_indices": false
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Indexing Document with Array of Objects for Synthetic _source Example (console)
DESCRIPTION: This snippet shows indexing a sample document with an array field (`foo`) containing multiple objects, each having a `bar` field. This document is used to illustrate how synthetic `_source` flattens arrays containing objects with the same field name when reconstructing the source. Requires an Elasticsearch cluster with the `idx` index and a client capable of sending PUT requests.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-source-field.md#_snippet_1

LANGUAGE: console
CODE:
```
PUT idx/_doc/1
{
  "foo": [
    {
      "bar": 1
    },
    {
      "bar": 2
    }
  ]
}
```

----------------------------------------

TITLE: Configuring and Using Phonetic Token Filter in Elasticsearch
DESCRIPTION: Example showing how to create an index with a custom analyzer using phonetic token filtering with metaphone encoding, and then analyzing text with this analyzer. The example uses metaphone encoding without replacing the original tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-phonetic-token-filter.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
PUT phonetic_sample
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "my_analyzer": {
            "tokenizer": "standard",
            "filter": [
              "lowercase",
              "my_metaphone"
            ]
          }
        },
        "filter": {
          "my_metaphone": {
            "type": "phonetic",
            "encoder": "metaphone",
            "replace": false
          }
        }
      }
    }
  }
}

GET phonetic_sample/_analyze
{
  "analyzer": "my_analyzer",
  "text": "Joe Bloggs"
}
```

----------------------------------------

TITLE: Configuring Simple Pattern Tokenizer in Elasticsearch
DESCRIPTION: This code snippet demonstrates how to configure the simple pattern tokenizer in Elasticsearch to tokenize three-digit numbers. It sets up an index with an analyzer that uses this tokenizer and tests it using sample text. This configuration requires Elasticsearch with support for setting tokenizers and a basic understanding of index settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-simplepattern-tokenizer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "my_tokenizer"
        }
      },
      "tokenizer": {
        "my_tokenizer": {
          "type": "simple_pattern",
          "pattern": "[0123456789]{3}"
        }
      }
    }
  }
}

POST my-index-000001/_analyze
{
  "analyzer": "my_analyzer",
  "text": "fd-786-335-514-x"
}
```

----------------------------------------

TITLE: Referencing Nested Sub-fields in Elasticsearch SQL
DESCRIPTION: Shows the standard syntax for accessing a sub-field within a nested field. This is the supported method for querying data stored in nested documents using Elasticsearch SQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-limitations.md#_snippet_0

LANGUAGE: SQL
CODE:
```
[nested_field_name].[sub_field_name]
```

----------------------------------------

TITLE: Creating an index with token_count field in Elasticsearch
DESCRIPTION: This example demonstrates creating an index with a text field that includes a token_count multi-field to count tokens. The example shows indexing documents and searching by token count.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/token-count.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "name": { <1>
        "type": "text",
        "fields": {
          "length": { <2>
            "type":     "token_count",
            "analyzer": "standard"
          }
        }
      }
    }
  }
}

PUT my-index-000001/_doc/1
{ "name": "John Smith" }

PUT my-index-000001/_doc/2
{ "name": "Rachel Alice Williams" }

GET my-index-000001/_search
{
  "query": {
    "term": {
      "name.length": 3 <3>
    }
  }
}
```

----------------------------------------

TITLE: Running Box Connector Docker Image
DESCRIPTION: Shell command to run the Docker image for the Box Connector Service. It mounts a local configuration directory, sets the network, and specifies the Docker image and command to execute.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-box.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Analyzing Text with Keyword Repeat and Stemmer (console)
DESCRIPTION: Extends the basic example by adding the `stemmer` filter after `keyword_repeat` in the Analyze API request. This shows how the non-keyword tokens generated by `keyword_repeat` can be stemmed, while the keyword duplicates retain their original form.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-keyword-repeat-tokenfilter.md#_snippet_1

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer": "whitespace",
  "filter": [
    "keyword_repeat",
    "stemmer"
  ],
  "text": "fox running and jumping",
  "explain": true,
  "attributes": "keyword"
}
```

----------------------------------------

TITLE: Querying Elasticsearch with Rule Query
DESCRIPTION: This snippet demonstrates how to use the `rule` query in Elasticsearch to apply query rules based on specified criteria. It requires defining `ruleset_ids`, `match_criteria`, and the `organic` query. The response will contain results modified by the query rules if any match, otherwise, the organic query will be executed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-rule-query.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "rule": {
      "match_criteria": {
        "user_query": "pugs"
      },
      "ruleset_ids": ["my-ruleset"],
      "organic": {
        "match": {
          "description": "puggles"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Example using STDDEV_SAMP on a field in SQL
DESCRIPTION: Demonstrates how to use the STDDEV_SAMP function along with MIN and MAX aggregations on the 'salary' field from the 'emp' table in Elasticsearch SQL. The query calculates the sample standard deviation of salaries and presents it alongside the minimum and maximum salary values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_51

LANGUAGE: SQL
CODE:
```
SELECT MIN(salary) AS min, MAX(salary) AS max, STDDEV_SAMP(salary) AS stddev FROM emp;
```

----------------------------------------

TITLE: Describing ADD Function Behavior in ESQL
DESCRIPTION: Explains the functionality of the ADD (+) function in ESQL, including its behavior with multivalued fields. The function adds two numbers together, but returns null if either field is multivalued.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/operators/add.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
### ADD `+`
Add two numbers together. If either field is [multivalued](https://www.elastic.co/docs/reference/query-languages/esql/esql-multivalued-fields) then the result is `null`.
```

----------------------------------------

TITLE: Filtering Process Events with Username Starting with A or B - Elasticsearch
DESCRIPTION: This query filters events in the `process` category where the `user_name` starts with either 'A' or 'B'. Utilizes Elasticsearch's `prefix` query to identify and boost relevant records. Case-sensitive by default.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_5

LANGUAGE: Elasticsearch
CODE:
```
{"bool":{"must":[{"term":{"event.category":{"value":"process"}}},{"bool":{"should":[{"prefix":{"user_name":{"value":"A","boost":1.0}}},{"prefix":{"user_name":{"value":"B","boost":1.0}}}],"boost":1.0}}],"boost":1.0}}
```

----------------------------------------

TITLE: Configure Basic HTTP Monitoring Exporter YAML
DESCRIPTION: Configures an 'http' monitoring exporter to send data to a remote Elasticsearch cluster. This requires specifying the type as 'http' and providing at least one target host.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/monitoring-settings.md#_snippet_1

LANGUAGE: YAML
CODE:
```
xpack.monitoring.exporters.my_remote:
  type: http
  host: ["host:port", ...]
```

----------------------------------------

TITLE: Using STDDEV_POP Function in Elasticsearch SQL
DESCRIPTION: Shows how to use the STDDEV_POP (Population Standard Deviation) function to measure the spread of values in the 'salary' field, alongside minimum and maximum values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_48

LANGUAGE: SQL
CODE:
```
SELECT MIN(salary) AS min, MAX(salary) AS max, STDDEV_POP(salary) AS stddev FROM emp;
```

----------------------------------------

TITLE: Customize Edge n-gram Filter in Index Analyzer (Console)
DESCRIPTION: This example demonstrates creating a custom `edge_ngram` filter with specific `min_gram` and `max_gram` values (3-5) and configuring it within a custom analyzer for a new index. This allows tailoring the n-gram generation beyond the default settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-edgengram-tokenfilter.md#_snippet_2

LANGUAGE: console
CODE:
```
PUT edge_ngram_custom_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "default": {
          "tokenizer": "whitespace",
          "filter": [ "3_5_edgegrams" ]
        }
      },
      "filter": {
        "3_5_edgegrams": {
          "type": "edge_ngram",
          "min_gram": 3,
          "max_gram": 5
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Case-Insensitive Wildcard Matching in Elasticsearch EQL
DESCRIPTION: Shows the use of the : operator for case-insensitive equality comparisons with wildcard support.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_30

LANGUAGE: eql
CODE:
```
process_name : "cmd*.exe"
```

----------------------------------------

TITLE: Configuring Cluster-Level Data Stream Retention Maximum
DESCRIPTION: Dynamic setting that defines the maximum retention period for all user data streams managed by the lifecycle. Must be greater than 10 seconds.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/data-stream-lifecycle-settings.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
data_streams.lifecycle.retention.max: <time_value>
```

----------------------------------------

TITLE: Pagination Continuation in Elasticsearch Aggregation
DESCRIPTION: Demonstrates how to fetch the next set of results in composite aggregation using the after parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_17

LANGUAGE: console
CODE:
```
GET /_search
{
  "size": 0,
  "aggs": {
    "my_buckets": {
      "composite": {
        "size": 2,
        "sources": [
          { "date": { "date_histogram": { "field": "timestamp", "calendar_interval": "1d", "order": "desc" } } },
          { "product": { "terms": { "field": "product", "order": "asc" } } }
        ],
        "after": { "date": 1494288000000, "product": "mad max" }
      }
    }
  }
}
```

----------------------------------------

TITLE: Advanced Azure Discovery Configuration in Elasticsearch
DESCRIPTION: An example of advanced Azure discovery configuration specifying host type, endpoint name, deployment name, and deployment slot. This configuration provides more control over how Elasticsearch nodes discover each other.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-azure-classic-usage.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
discovery:
    type: azure
    azure:
        host:
            type: private_ip
        endpoint:
            name: elasticsearch
        deployment:
            name: your_azure_cloud_service_name
            slot: production
```

----------------------------------------

TITLE: Performing Low-precision Geohash Grid Aggregation in Elasticsearch
DESCRIPTION: This example shows how to perform a low-precision geohash_grid aggregation on the museums index, using a precision of 3.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-geohashgrid-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /museums/_search?size=0
{
  "aggregations": {
    "large-grid": {
      "geohash_grid": {
        "field": "location",
        "precision": 3
      }
    }
  }
}
```

----------------------------------------

TITLE: Simulating Ingest Pipeline with Painless Script for Byte Conversion
DESCRIPTION: This snippet demonstrates how to use the bytes processor in a Painless script within an ingest pipeline simulation. It converts a human-readable byte value to its numeric equivalent.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-ingest-processors-in-painless.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
POST /_ingest/pipeline/_simulate?verbose
{
  "pipeline": {
    "processors": [
      {
        "script": {
          "lang": "painless",
          "source": """
            long bytes = Processors.bytes(ctx.size);
            ctx.size_in_bytes = bytes;
          """
        }
      }
    ]
  },
  "docs": [
    {
      "_source": {
        "size": "1kb"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Advanced Sync Rules for Redis Connector - Fetching Keys Starting with 'alpha'
DESCRIPTION: JSON configuration for advanced sync rules to fetch Redis database records where keys start with 'alpha'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-redis.md#2025-04-21_snippet_3

LANGUAGE: js
CODE:
```
[
  {
    "database": 0,
    "key_pattern": "alpha*"
  }
]
```

----------------------------------------

TITLE: Diversified Sampler with Runtime Fields in Elasticsearch
DESCRIPTION: Example using diversified_sampler with a runtime field to diversify based on tag combinations. This creates a hash of the multiple values in a tags field to ensure the sample doesn't contain repeated tag combinations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-diversified-sampler-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /stackoverflow/_search?size=0
{
  "query": {
    "query_string": {
      "query": "tags:kibana"
    }
  },
  "runtime_mappings": {
    "tags.hash": {
      "type": "long",
      "script": "emit(doc['tags'].hashCode())"
    }
  },
  "aggs": {
    "my_unbiased_sample": {
      "diversified_sampler": {
        "shard_size": 200,
        "max_docs_per_value": 3,
        "field": "tags.hash"
      },
      "aggs": {
        "keywords": {
          "significant_terms": {
            "field": "tags",
            "exclude": [ "kibana" ]
          }
        }
      }
    }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "my_unbiased_sample": {
      "doc_count": 6,
      "keywords": {
        "doc_count": 6,
        "bg_count": 650,
        "buckets": [
          {
            "key": "logstash",
            "doc_count": 3,
            "score": 2.213,
            "bg_count": 50
          },
          {
            "key": "elasticsearch",
            "doc_count": 3,
            "score": 1.34,
            "bg_count": 200
          }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: ABS Function with Table Data and Expression
DESCRIPTION: Shows how to use the ABS function with employee data, keeping specific columns and calculating the absolute difference between height values and zero.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/abs.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP first_name, last_name, height
| EVAL abs_height = ABS(0.0 - height)
```

----------------------------------------

TITLE: Histogram Aggregation with Extended Bounds
DESCRIPTION: Example of using extended_bounds to force the histogram to include buckets within a specified range, even if there are no documents in those buckets. Useful when min_doc_count is 0.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-histogram-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "query": {
    "constant_score": { "filter": { "range": { "price": { "lte": "500" } } } }
  },
  "aggs": {
    "prices": {
      "histogram": {
        "field": "price",
        "interval": 50,
        "extended_bounds": {
          "min": 0,
          "max": 500
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: GROUP BY with Column Expression
DESCRIPTION: Example of grouping by an expression that adds 1 to the languages value, demonstrating how expressions can be used in GROUP BY clauses.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_14

LANGUAGE: sql
CODE:
```
SELECT languages + 1 AS l FROM emp GROUP BY l;
```

----------------------------------------

TITLE: Method Call Examples in Painless
DESCRIPTION: Demonstrates method calls on different reference types including Map and ArrayList operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-reference.md#2025-04-21_snippet_1

LANGUAGE: painless
CODE:
```
Map m = new HashMap();
m.put(1, 2);
int z = m.get(1);
def d = new ArrayList();
d.add(1);
int i = Integer.parseInt(d.get(0).toString());
```

----------------------------------------

TITLE: Configuring Different Authentication Per Endpoint in Elasticsearch
DESCRIPTION: YAML configuration for setting different authentication methods for specific Elasticsearch endpoints. This example configures API key authentication for monitoring endpoints and basic authentication for all others.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/watcher/licenses/failureaccess-NOTICE.txt#2025-04-21_snippet_10

LANGUAGE: yaml
CODE:
```
xpack.security.http.authentication.schemes:
  - name: apikey-for-monitoring
    type: apikey
    http_paths: ["/_monitor/*", "/_cluster/health"]
  - name: basic-for-everything-else
    type: basic
    realm: file
    http_paths: ["*"]
```

----------------------------------------

TITLE: Configuring ILM Policy with Disabled Migration
DESCRIPTION: Example of an ILM policy where automatic migration is disabled and custom node allocation rules are specified using rack_id attributes. This allows for manual control over index placement.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-migrate.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "warm": {
        "actions": {
          "migrate" : {
           "enabled": false
          },
          "allocate": {
            "include" : {
              "rack_id": "one,two"
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Collect Mode for Terms Aggregation in Elasticsearch
DESCRIPTION: This example shows how to set the collect mode to 'breadth_first' for a terms aggregation. This mode is useful for fields with high cardinality or when the cardinality is unknown, optimizing performance for certain scenarios.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-terms-aggregation.md#2025-04-21_snippet_15

LANGUAGE: json
CODE:
```
GET /_search
{
  "aggs": {
    "actors": {
      "terms": {
        "field": "actors",
        "size": 10,
        "collect_mode": "breadth_first"
      },
      "aggs": {
        "costars": {
          "terms": {
            "field": "actors",
            "size": 5
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Advanced Sync Rules for Redis Connector - Fetching Specific Key
DESCRIPTION: JSON configuration for advanced sync rules to fetch Redis database records with an exact match by specifying the full key name.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-redis.md#2025-04-21_snippet_4

LANGUAGE: js
CODE:
```
[
  {
    "database": 0,
    "key_pattern": "alpha"
  }
]
```

----------------------------------------

TITLE: Sparse Vector Query with Precomputed Vectors
DESCRIPTION: Shows how to perform a sparse vector query using precalculated token-weight pairs, bypassing additional inference
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-sparse-vector-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET _search
{
   "query":{
      "sparse_vector": {
        "field": "ml.tokens",
        "query_vector": { "token1": 0.5, "token2": 0.3, "token3": 0.2 }
      }
   }
}
```

----------------------------------------

TITLE: Indexing a document with a custom character limit
DESCRIPTION: Example showing how to index a document with a custom character extraction limit specified in the max_size field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/attachment.md#2025-04-21_snippet_10

LANGUAGE: console
CODE:
```
PUT _ingest/pipeline/attachment
{
  "description" : "Extract attachment information",
  "processors" : [
    {
      "attachment" : {
        "field" : "data",
        "indexed_chars" : 11,
        "indexed_chars_field" : "max_size",
        "remove_binary": true
      }
    }
  ]
}
PUT my-index-000001/_doc/my_id_2?pipeline=attachment
{
  "data": "e1xydGYxXGFuc2kNCkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0DQpccGFyIH0=",
  "max_size": 5
}
GET my-index-000001/_doc/my_id_2
```

----------------------------------------

TITLE: First Order Derivative Example
DESCRIPTION: Demonstrates calculating the first derivative of monthly sales totals using date histogram and sum aggregations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-derivative-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "size": 0,
  "aggs": {
    "sales_per_month": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "sales": {
          "sum": {
            "field": "price"
          }
        },
        "sales_deriv": {
          "derivative": {
            "buckets_path": "sales"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: EWMA Implementation in Elasticsearch
DESCRIPTION: Exponentially weighted moving average function with configurable alpha parameter for decay control. Provides greater smoothing for small alpha values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-movfn-aggregation.md#2025-04-21_snippet_9

LANGUAGE: json
CODE:
```
POST /_search
{
  "size": 0,
  "aggs": {
    "my_date_histo": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "1M"
      },
      "aggs": {
        "the_sum": {
          "sum": { "field": "price" }
        },
        "the_movavg": {
          "moving_fn": {
            "buckets_path": "the_sum",
            "window": 10,
            "script": "MovingFunctions.ewma(values, 0.3)"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Index and Inserting Point Data for Cartesian-bounds Aggregation
DESCRIPTION: This snippet demonstrates creating an index with a Point field and inserting sample museum data for use with the cartesian-bounds aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-cartesian-bounds-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /museums
{
  "mappings": {
    "properties": {
      "location": {
        "type": "point"
      }
    }
  }
}

POST /museums/_bulk?refresh
{"index":{"_id":1}}
{"location": "POINT (491.2350 5237.4081)", "city": "Amsterdam", "name": "NEMO Science Museum"}
{"index":{"_id":2}}
{"location": "POINT (490.1618 5236.9219)", "city": "Amsterdam", "name": "Museum Het Rembrandthuis"}
{"index":{"_id":3}}
{"location": "POINT (491.4722 5237.1667)", "city": "Amsterdam", "name": "Nederlands Scheepvaartmuseum"}
{"index":{"_id":4}}
{"location": "POINT (440.5200 5122.2900)", "city": "Antwerp", "name": "Letterenhuis"}
{"index":{"_id":5}}
{"location": "POINT (233.6389 4886.1111)", "city": "Paris", "name": "Musée du Louvre"}
{"index":{"_id":6}}
{"location": "POINT (232.7000 4886.0000)", "city": "Paris", "name": "Musée d'Orsay"}
```

----------------------------------------

TITLE: Case-Sensitive Wildcard Matching in Elasticsearch EQL
DESCRIPTION: Shows the use of the 'like' keyword for case-sensitive wildcard matching in Elasticsearch EQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_32

LANGUAGE: eql
CODE:
```
process_name like "cmd*.exe"
```

----------------------------------------

TITLE: Configuring Synonym File in Elasticsearch JSON
DESCRIPTION: Configures a synonym filter in Elasticsearch by specifying a file path. This method requires the synonyms file to exist at the provided path.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-synonym-graph-tokenfilter.md#2025-04-21_snippet_3

LANGUAGE: JSON
CODE:
```
{
  "filter": {
    "synonyms_filter": {
      "type": "synonym_graph",
      "synonyms_path": "analysis/synonym-set.txt"
    }
  }
}
```

----------------------------------------

TITLE: Creating Custom Analyzer with Truncate Filter in Elasticsearch
DESCRIPTION: This example shows how to use the create index API to configure a new custom analyzer that incorporates the truncate filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-truncate-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT custom_truncate_example
{
  "settings" : {
    "analysis" : {
      "analyzer" : {
        "standard_truncate" : {
        "tokenizer" : "standard",
        "filter" : ["truncate"]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Average Bucket Aggregation in Elasticsearch
DESCRIPTION: JSON configuration for the average bucket aggregation, specifying the buckets path, gap policy, and output format. This snippet shows the basic structure and available parameters for the aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-avg-bucket-aggregation.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
"avg_bucket": {
  "buckets_path": "sales_per_month>sales",
  "gap_policy": "skip",
  "format": "#,##0.00;(#,##0.00)"
}
```

----------------------------------------

TITLE: Executing Watcher with Comprehensive Scripting
DESCRIPTION: This example demonstrates a complete watch configuration, including a scripted condition, transform, and action-specific transforms.  The example shows how to use the `ctx.metadata` to externalize configuration. It also shows how to use a scripted condition within the watch definition. The aggregation also uses a script to calculate the `cost`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-watcher-transform-context.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
POST _watcher/watch/_execute
{
  "watch" : {
    "metadata" : { "high_threshold": 4000, "low_threshold": 1000 },
    "trigger" : { "schedule" : { "interval" : "24h" } },
    "input" : {
      "search" : {
        "request" : {
          "indices" : [ "seats" ],
          "body" : {
            "query" : {
              "term": { "sold": "true"}
            },
            "aggs" : {
              "theatres" : {
                "terms" : { "field" : "play" },
                "aggs" : {
                  "money" : {
                    "sum": {
                      "field" : "cost",
                      "script": {
                       "source": "doc.cost.value * doc.number.value"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "condition" : {
      "script" :
      """
        return ctx.payload.aggregations.theatres.buckets.stream()
          .anyMatch(theatre -> theatre.money.value < ctx.metadata.low_threshold ||
                               theatre.money.value > ctx.metadata.high_threshold)
      """
    },
    "transform" : {
      "script":
      """
        return [
          'money_makers': ctx.payload.aggregations.theatres.buckets.stream()
            .filter(t -> {
                return t.money.value > ctx.metadata.high_threshold
            })
            .map(t -> {
                return ['play': t.key, 'total_value': t.money.value ]
            }).collect(Collectors.toList()),
          'duds' : ctx.payload.aggregations.theatres.buckets.stream()
            .filter(t -> {
                return t.money.value < ctx.metadata.low_threshold
            })
            .map(t -> {
                return ['play': t.key, 'total_value': t.money.value ]
            }).collect(Collectors.toList())
          ]
      """
    },
    "actions" : {
      "log_money_makers" : {
        "condition": {
          "script" : "return ctx.payload.money_makers.size() > 0"
        },
        "transform": {
          "script" :
          """
          def formatter = NumberFormat.getCurrencyInstance();
          return [
            'plays_value': ctx.payload.money_makers.stream()
              .map(t-> formatter.format(t.total_value) + ' for the play ' + t.play)
              .collect(Collectors.joining(", "))
          ]
          """
        },
        "logging" : {
          "text" : "The following plays contain the highest grossing total income: {{ctx.payload.plays_value}}"
        }
      },
      "log_duds" : {
        "condition": {
          "script" : "return ctx.payload.duds.size() > 0"
        },
        "transform": {
          "script" :
          """
          def formatter = NumberFormat.getCurrencyInstance();
          return [
            'plays_value': ctx.payload.duds.stream()
              .map(t-> formatter.format(t.total_value) + ' for the play ' + t.play)
              .collect(Collectors.joining(", "))
          ]
          """
        },
        "logging" : {
          "text" : "The following plays need more advertising due to their low total income: {{ctx.payload.plays_value}}"
        }
      }
    }
  }
}

```

----------------------------------------

TITLE: Executing Span Or Query in Elasticsearch
DESCRIPTION: This code snippet demonstrates how to execute a span_or query in Elasticsearch. It utilizes the _search endpoint to match a union of specified span clauses. Each clause is defined as a span term query that checks for specific field values. The input is a request in JSON format to the Elasticsearch API, and the output is expected to return search results that match any of the specified terms.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-span-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "span_or" : {
      "clauses" : [
        { "span_term" : { "field" : "value1" } },
        { "span_term" : { "field" : "value2" } },
        { "span_term" : { "field" : "value3" } }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Finding Documents with Specific Ignored Field using term Query in Elasticsearch
DESCRIPTION: This query uses the term query to find all documents where a specific field (@timestamp) was ignored at index time.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-ignored-field.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET _search
{
  "query": {
    "term": {
      "_ignored": "@timestamp"
    }
  }
}
```

----------------------------------------

TITLE: Downloading Zoom Connector Sample Configuration File with curl
DESCRIPTION: Command to download the sample configuration file for the connector from the GitHub repository.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-zoom.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
curl https://raw.githubusercontent.com/elastic/connectors/main/config.yml.example --output ~/connectors-config/config.yml
```

----------------------------------------

TITLE: Searching Wildcard Field with Wildcard Query (Console)
DESCRIPTION: This snippet demonstrates performing a search query on a `wildcard` field using a `wildcard` query. The query searches for documents where the `my_wildcard` field's value contains the pattern "*quite*lengthy".
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/keyword.md#_snippet_8

LANGUAGE: console
CODE:
```
GET my-index-000001/_search
{
  "query": {
    "wildcard": {
      "my_wildcard": {
        "value": "*quite*lengthy"
      }
    }
  }
}
```

----------------------------------------

TITLE: Collecting Top Salaries using TOP Function in ESQL
DESCRIPTION: This snippet demonstrates how to use the TOP function in ESQL to collect the top 3 salaries in descending order from the employees table. It also includes a MAX function to get the highest salary for comparison.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/top.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS top_salaries = TOP(salary, 3, "desc"), top_salary = MAX(salary)
```

----------------------------------------

TITLE: Type Casting Operations in Elasticsearch SQL
DESCRIPTION: Examples of type casting combined with other operations like ABS and EXTRACT. Shows grouping and ordering with cast expressions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
SELECT CAST(ABS(EXTRACT(YEAR FROM date)) AS BIGINT) FROM test GROUP BY CAST(ABS(EXTRACT(YEAR FROM date)) AS BIGINT) ORDER BY CAST(ABS(EXTRACT(YEAR FROM date)) AS BIGINT) NULLS FIRST;
```

LANGUAGE: elasticsearch
CODE:
```
InternalSqlScriptUtils.cast(InternalSqlScriptUtils.abs(InternalSqlScriptUtils.dateTimeExtract(InternalQlScriptUtils.docValue(doc,params.v0),params.v1,params.v2)),params.v3)
```

----------------------------------------

TITLE: Document Routing with Collapse Field Value
DESCRIPTION: Demonstrates how to assign the collapse field value as the routing key during indexing to ensure documents sharing the same collapse value are clustered on one shard for reliable ordering when rescoring.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/collapse-search-results.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
POST /my-index-000001/_doc?routing=xyz      <1>
{
  "@timestamp": "2099-11-15T13:12:00",
  "message": "You know for search!",
  "user.id": "xyz"
}
```

----------------------------------------

TITLE: Filtering IP Addresses Using CIDR_MATCH Function in ESQL
DESCRIPTION: This ESQL query filters records from the 'hosts' table where the 'ip1' field matches either of two CIDR ranges. The CIDR_MATCH function evaluates whether IP addresses fall within specified CIDR ranges, and the KEEP command restricts the output to only the specified fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/cidr_match.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM hosts
| WHERE CIDR_MATCH(ip1, "127.0.0.2/32", "127.0.0.3/32")
| KEEP card, host, ip0, ip1
```

----------------------------------------

TITLE: File Extension Search Examples
DESCRIPTION: Demonstrates different approaches to searching for file extensions, comparing function-based and field-based methods.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_26

LANGUAGE: eql
CODE:
```
file where endsWith(file.path,".exe") or endsWith(file.path,".dll")
```

LANGUAGE: eql
CODE:
```
file where file.extension in ("exe", "dll")
```

----------------------------------------

TITLE: Defining Thai Stop Words
DESCRIPTION: Defines Thai stop words relevant for Elasticsearch text analysis, linking to the definitive Lucene source.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_38

LANGUAGE: markdown
CODE:
```
`_thai_`
:   [Thai stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/th/stopwords.txt)
```

----------------------------------------

TITLE: Indexing a Parent (Question) Document in Elasticsearch
DESCRIPTION: This snippet shows how to index a parent document (question) with tags and other relevant fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-children-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT child_example/_doc/1
{
  "join": {
    "name": "question"
  },
  "body": "<p>I have Windows 2003 server and i bought a new Windows 2008 server...",
  "title": "Whats the best way to file transfer my site from server to a newer one?",
  "tags": [
    "windows-server-2003",
    "windows-server-2008",
    "file-transfer"
  ]
}
```

----------------------------------------

TITLE: Painless Script for Action-Specific Formatting
DESCRIPTION: This Painless script is used within a Watcher action to format monetary values as currency and concatenate them into a comma-separated string. It utilizes the `NumberFormat` class to achieve currency formatting and the `Collectors.joining` method to construct the final message.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-watcher-transform-context.md#2025-04-21_snippet_3

LANGUAGE: painless
CODE:
```

          def formatter = NumberFormat.getCurrencyInstance();
          return [
            'msg': ctx.payload.aggregations.theatres.buckets.stream()
              .map(t-> formatter.format(t.money.value) + ' for the play ' + t.key)
              .collect(Collectors.joining(", "))
          ]
          
```

----------------------------------------

TITLE: Simulating Network Direction Processor in Elasticsearch
DESCRIPTION: This example demonstrates how to use the network direction processor to determine traffic direction. It processes a document with external source IP and internal destination IP, resulting in the traffic being classified as 'inbound'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/network-direction-processor.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _ingest/pipeline/_simulate
{
  "pipeline": {
    "processors": [
      {
        "network_direction": {
          "internal_networks": ["private"]
        }
      }
    ]
  },
  "docs": [
    {
      "_source": {
        "source": {
          "ip": "128.232.110.120"
        },
        "destination": {
          "ip": "192.168.1.1"
        }
      }
    }
  ]
}
```

LANGUAGE: console-result
CODE:
```
{
  "docs": [
    {
      "doc": {
        ...
        "_source": {
          "destination": {
            "ip": "192.168.1.1"
          },
          "source": {
            "ip": "128.232.110.120"
          },
          "network": {
            "direction": "inbound"
          }
        }
      }
    }
  ]
}
```

----------------------------------------

TITLE: Conditional Operator Examples in Painless
DESCRIPTION: Illustrates the use of the ternary conditional operator with various data types and conditions. Shows type promotion and boolean evaluation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-general.md#2025-04-21_snippet_2

LANGUAGE: painless
CODE:
```
boolean b = true;
int x = b ? 1 : 2;
List y = x > 1 ? new ArrayList() : null;
def z = x < 2 ? x : 2.0;
```

----------------------------------------

TITLE: Extracting Substrings (EQL)
DESCRIPTION: Illustrates the `substring` function in EQL for extracting a portion of a string. Examples show extracting from a start position to the end, or between start and optional end positions, including the use of zero-indexing and negative offsets.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-function-ref.md#_snippet_16

LANGUAGE: eql
CODE:
```
substring("start regsvr32.exe", 6)        // returns "regsvr32.exe"
substring("start regsvr32.exe", 0, 5)     // returns "start"
substring("start regsvr32.exe", 6, 14)    // returns "regsvr32"
substring("start regsvr32.exe", -4)       // returns ".exe"
substring("start regsvr32.exe", -4, -1)   // returns ".ex"
```

----------------------------------------

TITLE: Configuring Gateway Recovery Settings in Elasticsearch YAML
DESCRIPTION: Example configuration for Elasticsearch's gateway recovery settings in elasticsearch.yml. Specifies the expected number of data nodes, recovery timeout, and minimum data nodes required for recovery to begin.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/local-gateway.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
gateway.expected_data_nodes: 3
gateway.recover_after_time: 600s
gateway.recover_after_data_nodes: 3
```

----------------------------------------

TITLE: Starting Elasticsearch Service
DESCRIPTION: Starts the Elasticsearch service using systemd after configuration is complete.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-long.md#2025-04-21_snippet_9

LANGUAGE: sh
CODE:
```
sudo systemctl start elasticsearch
```

----------------------------------------

TITLE: Removing Height-Related Columns using ESQL DROP
DESCRIPTION: ESQL query that removes all columns that match the pattern 'height*' from the employees table. The asterisk acts as a wildcard to match any column names that begin with 'height'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/drop.csv-spec/heightWithWildcard.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| DROP height*
```

----------------------------------------

TITLE: Creating Oracle Connector using Elasticsearch API
DESCRIPTION: This snippet demonstrates how to create a new self-managed Oracle connector using the Elasticsearch Create connector API.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-oracle.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT _connector/my-oracle-connector
{
  "index_name": "my-elasticsearch-index",
  "name": "Content synced from Oracle",
  "service_type": "oracle"
}
```

----------------------------------------

TITLE: Linear Weighted Average in Elasticsearch
DESCRIPTION: Linear weighted moving average implementation that assigns decreasing weights to older datapoints linearly. Helps reduce lag in moving averages.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-movfn-aggregation.md#2025-04-21_snippet_8

LANGUAGE: json
CODE:
```
POST /_search
{
  "size": 0,
  "aggs": {
    "my_date_histo": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "1M"
      },
      "aggs": {
        "the_sum": {
          "sum": { "field": "price" }
        },
        "the_movavg": {
          "moving_fn": {
            "buckets_path": "the_sum",
            "window": 10,
            "script": "MovingFunctions.linearWeightedAvg(values)"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Map Access Operator Usage in Painless
DESCRIPTION: This snippet demonstrates the use of the map access operator '[]' in Painless as a shortcut for 'put' and 'get' method calls on Map type values. It highlights error handling when non-Map values are accessed. Prerequisites include initializing a Map instance. It shows how values can be retrieved and updated using the '[]' operator with both Map and def types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-reference.md#2025-04-21_snippet_15

LANGUAGE: painless
CODE:
```
Map map = new HashMap();
map['value2'] = 2;
map['value5'] = 5;
int x = map['value2'] + map['value5'];
String y = 'value5';
int z = x[z];
```

----------------------------------------

TITLE: Creating a New Index from Source Index
DESCRIPTION: This example shows the basic usage of the Create Index from Source API, creating a new index that inherits all settings and mappings from a source index without any modifications.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/create-index-from-source.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
POST _create_from/my-index/my-new-index
```

----------------------------------------

TITLE: Creating Custom Analyzer with Repeat, Stemmer, Deduplication (console)
DESCRIPTION: Shows how to define a custom analyzer within an index's settings that uses the `keyword_repeat`, `porter_stem`, and `remove_duplicates` filters along with a standard tokenizer. This configuration creates a field that stores both original and stemmed versions of tokens while removing redundant duplicates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-keyword-repeat-tokenfilter.md#_snippet_3

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_custom_analyzer": {
          "tokenizer": "standard",
          "filter": [
            "keyword_repeat",
            "porter_stem",
            "remove_duplicates"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Reroute Processor with Fallback Values
DESCRIPTION: Configuration example showing how to set up fallback values for dataset and namespace in the reroute processor.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/reroute-processor.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
{
  "reroute": {
    "dataset": [
        "{{service.name}}",
        "generic"
    ],
    "namespace": "default"
  }
}
```

----------------------------------------

TITLE: Enabling Profile API in Elasticsearch Search Query
DESCRIPTION: Example showing how to enable profiling for a search request by adding the 'profile' parameter set to true at the top level of the request. This example searches for 'GET /search' in the message field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-profile.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search
{
  "profile": true, <1>
  "query" : {
    "match" : { "message" : "GET /search" }
  }
}
```

----------------------------------------

TITLE: Creating Index with Join Field Mapping
DESCRIPTION: Sets up an Elasticsearch index with a join field mapping to establish parent-child document relationships. Defines a relationship between 'my-parent' and 'my-child' document types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-parent-id-query.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "mappings": {
    "properties": {
      "my-join-field": {
        "type": "join",
        "relations": {
          "my-parent": "my-child"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Handling Missing Values in Percentile Ranks Aggregation
DESCRIPTION: Demonstrates how to handle documents with missing values in percentile ranks aggregation by specifying a default value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-percentile-rank-aggregation.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET latency/_search
{
  "size": 0,
  "aggs": {
    "load_time_ranks": {
      "percentile_ranks": {
        "field": "load_time",
        "values": [ 500, 600 ],
        "missing": 10
      }
    }
  }
}
```

----------------------------------------

TITLE: Execute Painless Script to Extract Multiple Fields using Grok
DESCRIPTION: This snippet runs a Painless script using the _execute API in the 'composite_field' context. The script applies the %{COMMONAPACHELOG} Grok pattern to the 'message' field and emits a map containing all the extracted sub-fields (like clientip, request, response, etc.). This demonstrates creating multiple logical fields from a single source field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_21

LANGUAGE: console
CODE:
```
POST /_scripts/painless/_execute
{
  "script": {
    "source": "emit(grok(\"%{COMMONAPACHELOG}\").extract(doc[\"message\"].value));"
  },
  "context": "composite_field",
  "context_setup": {
    "index": "my-index-000001",
    "document": {
      "timestamp":"2020-04-30T14:31:27-05:00",
      "message":"252.0.0.0 - - [30/Apr/2020:14:31:27 -0500] \"GET /images/hm_bg.jpg HTTP/1.0\" 200 24736"
    }
  }
}
```

----------------------------------------

TITLE: Creating DateTime from Components
DESCRIPTION: Shows how to create a ZonedDateTime object from individual datetime components.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_8

LANGUAGE: painless
CODE:
```
int year = 1983;
int month = 10;
int day = 13;
int hour = 22;
int minutes = 15;
int seconds = 30;
int nanos = 0;
ZonedDateTime zdt = ZonedDateTime.of(
        year, month, day, hour, minutes, seconds, nanos, ZoneId.of('Z'));
```

----------------------------------------

TITLE: Using minimum_should_match with Multiple Fields
DESCRIPTION: Example showing minimum_should_match with multiple search fields. Without explicit operators, this creates a disjunction max query across the fields where minimum_should_match cannot be applied.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_20

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "query_string": {
      "fields": [
        "title",
        "content"
      ],
      "query": "this that thus",
      "minimum_should_match": 2
    }
  }
}
```

----------------------------------------

TITLE: EC2 Tag-based Discovery Configuration
DESCRIPTION: Example YAML configuration for filtering EC2 discovery based on instance tags.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-ec2-usage.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
discovery.ec2.tag.role: master
discovery.ec2.tag.environment: dev,staging
```

----------------------------------------

TITLE: Querying geo_shape data with geo_distance filter in Elasticsearch
DESCRIPTION: This snippet shows how to use the `geo_distance` filter to search for `geo_shape` values within a specified distance of a given geopoint in Elasticsearch. It uses a bool query with a `match_all` clause and a `geo_distance` filter to find documents within 200km of latitude 40 and longitude -70.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-distance-query.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET my_geoshapes/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_distance": {
          "distance": "200km",
          "pin.location": {
            "lat": 40,
            "lon": -70
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Show Tables with Multi-target Pattern SQL
DESCRIPTION: Demonstrates using Elasticsearch's multi-target syntax with SHOW TABLES to list indices/tables. The pattern includes all (*) but excludes (-) those starting with 'l'. This syntax requires the pattern to be surrounded by double quotes (").
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-index-patterns.md#_snippet_0

LANGUAGE: SQL
CODE:
```
SHOW TABLES "*,-l*";
```

----------------------------------------

TITLE: Calculating Datetime Differences with Painless
DESCRIPTION: This snippet demonstrates how to calculate the difference between two numeric datetimes and two complex ZonedDateTime objects using Painless scripting. The code uses simple arithmetic for numeric datetimes and ChronoUnit for complex datetimes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_14

LANGUAGE: painless
CODE:
```
long startTimestamp = 434931327000L;
long endTimestamp = 434931330000L;
long differenceInMillis = endTimestamp - startTimestamp;
```

LANGUAGE: painless
CODE:
```
ZonedDateTime zdt1 =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 11000000, ZoneId.of('Z'));
ZonedDateTime zdt2 =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 35, 0, ZoneId.of('Z'));
long differenceInMillis = ChronoUnit.MILLIS.between(zdt1, zdt2);
```

LANGUAGE: painless
CODE:
```
ZonedDateTime zdt1 =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 11000000, ZoneId.of('Z'));
ZonedDateTime zdt2 =
        ZonedDateTime.of(1983, 10, 17, 22, 15, 35, 0, ZoneId.of('Z'));
long differenceInDays = ChronoUnit.DAYS.between(zdt1, zdt2);
```

----------------------------------------

TITLE: Removing Elasticsearch Stempel Plugin - Shell
DESCRIPTION: This command removes the Elasticsearch Stempel analysis plugin using the built-in plugin manager. It requires superuser privileges (`sudo`) and should be run from the Elasticsearch installation directory's `bin` subdirectory. The Elasticsearch node must be stopped before executing this removal command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-stempel.md#_snippet_1

LANGUAGE: sh
CODE:
```
sudo bin/elasticsearch-plugin remove analysis-stempel
```

----------------------------------------

TITLE: Creating Custom Analyzer with Reverse Token Filter in Elasticsearch
DESCRIPTION: This example shows how to create a custom analyzer named 'whitespace_reverse' using the create index API. The analyzer uses a whitespace tokenizer followed by the reverse filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-reverse-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT reverse_example
{
  "settings" : {
    "analysis" : {
      "analyzer" : {
        "whitespace_reverse" : {
          "tokenizer" : "whitespace",
          "filter" : ["reverse"]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Division with 'def' Type in Painless
DESCRIPTION: Illustrates division with the '/' operator and the 'def' type in Painless. The 'def' type automatically infers the type, so integer division rules apply if both operands are effectively integers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_17

LANGUAGE: painless
CODE:
```
def x = 5/4; <1>
def y = x/2; <2>
```

----------------------------------------

TITLE: Character Class Examples with Square Brackets
DESCRIPTION: Examples showing how to use square brackets to match any single character from a set of characters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/regexp-syntax.md#2025-04-21_snippet_10

LANGUAGE: text
CODE:
```
[abc]   # matches 'a', 'b', 'c'
```

----------------------------------------

TITLE: Removing analysis-smartcn Plugin (Shell)
DESCRIPTION: This command uses the Elasticsearch plugin manager (`bin/elasticsearch-plugin`) with elevated privileges (`sudo`) to remove the `analysis-smartcn` plugin. The Elasticsearch node must be stopped before running this command, and the user needs appropriate permissions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-smartcn.md#_snippet_1

LANGUAGE: Shell
CODE:
```
sudo bin/elasticsearch-plugin remove analysis-smartcn
```

----------------------------------------

TITLE: Subtracting Minutes from DateTime
DESCRIPTION: Shows how to subtract minutes from a ZonedDateTime object.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_12

LANGUAGE: painless
CODE:
```
ZonedDateTime zdt =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 0, ZoneId.of('Z'));
ZonedDateTime updatedZdt = zdt.minusMinutes(125);
```

----------------------------------------

TITLE: Generating Is Null in Script Query in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create a query to check for null values in a script context in Elasticsearch. It checks if the result of a comparison is null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_25

LANGUAGE: eql
CODE:
```
process where null == (exit_code > -1)
```

LANGUAGE: json
CODE:
```
{"script":{"script":{"source":"InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.isNull(InternalQlScriptUtils.gt(X0,params.v1))))","params":{"v0":"exit_code","v1":-1}}}}
```

----------------------------------------

TITLE: SQL DESCRIBE Table Example Output
DESCRIPTION: Example output of DESCRIBE command showing column details including column names, data types, and their corresponding Elasticsearch mappings for an employee table.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-describe-table.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
DESCRIBE emp;

       column       |     type      |    mapping
--------------------+---------------+---------------
birth_date          |TIMESTAMP      |datetime
dep                 |STRUCT         |nested
dep.dep_id          |VARCHAR        |keyword
dep.dep_name        |VARCHAR        |text
dep.dep_name.keyword|VARCHAR        |keyword
dep.from_date       |TIMESTAMP      |datetime
dep.to_date         |TIMESTAMP      |datetime
emp_no              |INTEGER        |integer
first_name          |VARCHAR        |text
first_name.keyword  |VARCHAR        |keyword
gender              |VARCHAR        |keyword
hire_date           |TIMESTAMP      |datetime
languages           |TINYINT        |byte
last_name           |VARCHAR        |text
last_name.keyword   |VARCHAR        |keyword
name                |VARCHAR        |keyword
salary              |INTEGER        |integer
```

----------------------------------------

TITLE: Inefficient Multiple Filter Aggregations in Elasticsearch
DESCRIPTION: This snippet shows a less efficient way of using multiple filter aggregations, which should be avoided in favor of the filters aggregation approach shown in the previous example.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-filter-aggregation.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0&filter_path=aggregations
{
  "aggs": {
    "hats": {
      "filter": { "term": { "type": "hat" } },
      "aggs": {
        "avg_price": { "avg": { "field": "price" } }
      }
    },
    "t_shirts": {
      "filter": { "term": { "type": "t-shirt" } },
      "aggs": {
        "avg_price": { "avg": { "field": "price" } }
      }
    }
  }
}
```

----------------------------------------

TITLE: Elasticsearch API Key Creation Response
DESCRIPTION: This JavaScript code snippet shows the response from the Elasticsearch Create API Key API. The response contains the `id`, `name`, `expiration`, `api_key`, and `encoded` values for the newly created API key. The `api_key` can be used to query the Search Application with the defined DLS restrictions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-dls-e2e-guide.md#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
{
  "id": "0rCD3i-MjKsw4g9BpRIBa",
  "name": "john-api-key",
  "expiration": 1687881715555,
  "api_key": "zTxre9L6TcmRIgd2NgLCRg",
  "encoded": "Qk05dy1JZ0JhRDNyNGpLQ3MwUmk6elRzdGU5QjZUY21SSWdkMldnQ1RMZw=="
}
```

----------------------------------------

TITLE: Computing Average with Nested Functions in ESQL
DESCRIPTION: This example demonstrates how to calculate an average over a multivalued column by first using MV_AVG to average the multiple values per row, then using AVG and ROUND to get the final result.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/avg.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM employees
| STATS avg_salary_change = ROUND(AVG(MV_AVG(salary_change)), 10)
```

----------------------------------------

TITLE: Multi-Value Sparse Vectors Example in Elasticsearch
DESCRIPTION: This example demonstrates how to work with multi-value sparse vectors in Elasticsearch. It shows index creation, document insertion with overlapping feature names across vectors, and querying. The example illustrates how max values of overlapping feature names are stored in multi-value sparse vectors.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/sparse-vector.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "text": {
        "type": "text",
        "analyzer": "standard"
      },
      "impact": {
        "type": "sparse_vector"
      },
      "positive": {
        "type": "sparse_vector"
      },
      "negative": {
        "type": "sparse_vector"
      }
    }
  }
}

POST my-index-000001/_doc
{
    "text": "I had some terribly delicious carrots.",
    "impact": [{"I": 0.55, "had": 0.4, "some": 0.28, "terribly": 0.01, "delicious": 1.2, "carrots": 0.8},
               {"I": 0.54, "had": 0.4, "some": 0.28, "terribly": 2.01, "delicious": 0.02, "carrots": 0.4}],
    "positive": {"I": 0.55, "had": 0.4, "some": 0.28, "terribly": 0.01, "delicious": 1.2, "carrots": 0.8},
    "negative": {"I": 0.54, "had": 0.4, "some": 0.28, "terribly": 2.01, "delicious": 0.02, "carrots": 0.4}
}

GET my-index-000001/_search
{
  "query": {
    "term": {
      "impact": {
         "value": "delicious"
      }
    }
  }
}
```

----------------------------------------

TITLE: Deploying SharePoint Server Connector with Docker
DESCRIPTION: Command to run the Docker image for the SharePoint Server connector service. This snippet demonstrates how to start the connector using the configured YAML file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-sharepoint.md#2025-04-22_snippet_3

LANGUAGE: console
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Creating Data Structure for Elasticsearch in Bash
DESCRIPTION: Sets up the necessary directory structure for Elasticsearch data, configuration, and snapshots.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/qa/repository-old-versions-compatibility/src/javaRestTest/resources/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
mkdir /tmp/sharedESData
mkdir /tmp/sharedESData/config
mkdir /tmp/sharedESData/data
mkdir /tmp/sharedESData/snapshots
```

----------------------------------------

TITLE: Using Fields Parameter in EQL Search for Elasticsearch
DESCRIPTION: This example shows how to use the fields parameter to retrieve and format specific fields in the EQL search response, including wildcard patterns and custom formatting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_18

LANGUAGE: console
CODE:
```
GET /my-data-stream/_eql/search?filter_path=-hits.events._source
{
  "query": """
    process where process.name == "regsvr32.exe"
  """,
  "fields": [
    "event.type",
    "process.*",
    {
      "field": "@timestamp",
      "format": "epoch_millis"
    }
  ]
}
```

----------------------------------------

TITLE: Generating self-signed Elasticsearch certificates
DESCRIPTION: This script generates self-signed certificates for Elasticsearch nodes using the `elasticsearch-certutil` tool. It removes any existing certificates, creates a temporary directory, and uses the `instances.yml` configuration to generate the certificates. The generated certificates and keys are then copied to the specified test resources directory.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/core/src/test/resources/org/elasticsearch/xpack/security/transport/ssl/certs/simple/nodes/readme.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
rm -rf /tmp/certs; mkdir /tmp/certs; rm -rf local-self
bin/elasticsearch-certutil cert --pem --silent --in instances.yml --out /tmp/certs/self.zip --days 7300 --self-signed
unzip /tmp/certs/self.zip -d ./local-self
cp -r ./local-self/n*/*.crt $SOURCE_ROOT/x-pack/plugin/core/src/test/resources/org/elasticsearch/xpack/security/transport/ssl/certs/simple/nodes/self-signed
cp -r ./local-self/n*/*.key $SOURCE_ROOT/x-pack/plugin/core/src/test/resources/org/elasticsearch/xpack/security/transport/ssl/certs/simple/nodes/self-signed
```

----------------------------------------

TITLE: Finding First First Name by Birth Date (FIRST) with Explicit Ordering
DESCRIPTION: This query uses FIRST to find the first first name in the 'emp' index, explicitly ordering by 'birth_date'. This returns the first name corresponding to the earliest birth date.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_16

LANGUAGE: SQL
CODE:
```
SELECT FIRST(first_name, birth_date) FROM emp;
```

----------------------------------------

TITLE: Checking Less Than or Equal Condition
DESCRIPTION: This snippet checks if one field is less than or equal to another using the less than or equal operator (`<=`). If either field is multivalued, the result returns null. This behavior is particularly important in relation to how it interacts with the search index when one side of the comparison is a constant and the other side is a field that has both a mapping index and doc-values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/operators/less_than_or_equal.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
if (field1 <= field2) {
    // The fields are in the specified relation.
} else {
    // Handle the case where the condition is not met.
}
```

----------------------------------------

TITLE: Searching with Geo-bounding Box Query for Geo_shape
DESCRIPTION: This snippet demonstrates how to search for geo_shape data within a specified bounding box using a geo_bounding_box filter. The prerequisite is a geo_shape index in Elasticsearch, and the output is documents that intersect the bounding box. Availability of indexed geo_shape data is essential.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-bounding-box-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET my_geoshapes/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_bounding_box": {
          "pin.location": {
            "top_left": {
              "lat": 40.73,
              "lon": -74.1
            },
            "bottom_right": {
              "lat": 40.01,
              "lon": -71.12
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: EQL Sequence Search with Global Shared Field in Elasticsearch
DESCRIPTION: Demonstrates an EQL sequence search where all events share the same process.pid value, using the 'sequence by' keyword at the beginning of the query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_9

LANGUAGE: console
CODE:
```
GET /my-data-stream/_eql/search
{
  "query": """
    sequence by process.pid with maxspan=1h
      [ process where process.name == "regsvr32.exe" ]
      [ file where stringContains(file.name, "scrobj.dll") ]
  """
}
```

----------------------------------------

TITLE: Querying Elasticsearch Rank Evaluation API with Mean Reciprocal Rank Metric
DESCRIPTION: This snippet shows how to use the Elasticsearch Rank Evaluation API with the Mean Reciprocal Rank metric. It sets the k value to 20 and the relevant rating threshold to 1.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-rank-eval.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
GET /my-index-000001/_rank_eval
{
  "requests": [
    {
      "id": "JFK query",
      "request": { "query": { "match_all": {} } },
      "ratings": []
    } ],
  "metric": {
    "mean_reciprocal_rank": {
      "k": 20,
      "relevant_rating_threshold": 1
    }
  }
}
```

----------------------------------------

TITLE: Analyzing Text with Common Grams Filter in Elasticsearch
DESCRIPTION: This example demonstrates using the analyze API with a common_grams filter to create bigrams for the common words 'is' and 'the' in the text 'the quick fox is brown'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-common-grams-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer" : "whitespace",
  "filter" : [
    {
      "type": "common_grams",
      "common_words": ["is", "the"]
    }
  ],
  "text" : "the quick fox is brown"
}
```

----------------------------------------

TITLE: GC Logging Configuration
DESCRIPTION: Example of configuring custom garbage collection logging settings with file rotation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/jvm-settings.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
# Turn off all previous logging configuratons
-Xlog:disable

# Default settings from JEP 158, but with `utctime` instead of `uptime` to match the next line
-Xlog:all=warning:stderr:utctime,level,tags

# Enable GC logging to a custom location with a variety of options
-Xlog:gc*,gc+age=trace,safepoint:file=/opt/my-app/gc.log:utctime,level,pid,tags:filecount=32,filesize=64m
```

----------------------------------------

TITLE: Creating Nested Mapping for Sales Index in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create a mapping for a 'sales' index with nested comments. It defines 'tags' as a keyword field and 'comments' as a nested field with 'username' and 'comment' properties.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-top-hits-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /sales
{
  "mappings": {
    "properties": {
      "tags": { "type": "keyword" },
      "comments": {                           <1>
        "type": "nested",
        "properties": {
          "username": { "type": "keyword" },
          "comment": { "type": "text" }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Using MV_FIRST with SPLIT in ESQL
DESCRIPTION: This snippet demonstrates how to split a string using the SPLIT function and extract the first element using MV_FIRST. It takes a string with semicolon-delimited values, splits it into an array, and returns the first element.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_first.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a="foo;bar;baz"
| EVAL first_a = MV_FIRST(SPLIT(a, ";"))
```

----------------------------------------

TITLE: Dot Expander with Wildcard Configuration
DESCRIPTION: Shows how to configure the dot expander to process all top-level dotted fields using a wildcard.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/dot-expand-processor.md#2025-04-21_snippet_7

LANGUAGE: js
CODE:
```
{
  "dot_expander": {
    "field": "*"
  }
}
```

----------------------------------------

TITLE: Checking Sync Job Status
DESCRIPTION: Fetches the status and updates of the most recent sync job using the `Get sync job API`. The completion status is marked by a `completed` flag.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/api-tutorial.md#2025-04-21_snippet_17

LANGUAGE: console
CODE:
```
GET _connector/_sync_job?connector_id=my-connector-id&size=1
```

----------------------------------------

TITLE: Filtering Employee Names with RLIKE Operator in ESQL
DESCRIPTION: This ESQL query filters employees whose first names match the regular expression pattern '.leja.*'. It then keeps only the first_name and last_name columns in the result set.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/examples/rlike.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| WHERE first_name RLIKE "\".leja.*\""
| KEEP first_name, last_name
```

----------------------------------------

TITLE: Standard Deviation Calculation in Elasticsearch Aggregations
DESCRIPTION: Example of using the stdDev function in a moving function aggregation to calculate standard deviation over a window of values. Uses date histogram with monthly intervals and combines with sum aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-movfn-aggregation.md#2025-04-21_snippet_6

LANGUAGE: json
CODE:
```
POST /_search
{
  "size": 0,
  "aggs": {
    "my_date_histo": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "1M"
      },
      "aggs": {
        "the_sum": {
          "sum": { "field": "price" }
        },
        "the_moving_sum": {
          "moving_fn": {
            "buckets_path": "the_sum",
            "window": 10,
            "script": "MovingFunctions.stdDev(values, MovingFunctions.unweightedAvg(values))"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining Advanced Sync Rules in Elasticsearch JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to define advanced sync rules for an Elasticsearch connector. The JSON structure allows skipping files with specific extensions, indexing based on ownership, or directory criteria. These rules require a full sync to take effect. Ensure that the proper JSON syntax is used and dependencies are correctly configured.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-onedrive.md#2025-04-21_snippet_5

LANGUAGE: JavaScript
CODE:
```
[
  {
    "skipFilesWithExtensions": [".xlsx", ".docx"]
  }
]
```

----------------------------------------

TITLE: Basic Extended Stats Bucket Aggregation Syntax in Elasticsearch
DESCRIPTION: Shows the basic syntax structure for an extended_stats_bucket aggregation with a required buckets_path parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-extended-stats-bucket-aggregation.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "extended_stats_bucket": {
    "buckets_path": "the_sum"
  }
}
```

----------------------------------------

TITLE: ESQL KEEP Column Selection Query
DESCRIPTION: Demonstrates using the KEEP function in ESQL to select specific columns from the employees table. Uses wildcard patterns with asterisks to match column names starting with 'first_name' and explicitly keeps the last_name column.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/keepWildcardPrecedence.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP first_name*, last_name, first_na*
```

----------------------------------------

TITLE: Example using STDDEV_SAMP on an expression in SQL
DESCRIPTION: Illustrates how to apply the STDDEV_SAMP function to an expression ('salary / 12.0') within an Elasticsearch SQL query. This calculates the sample standard deviation of the monthly salary derived from the 'salary' field, presented with the corresponding minimum and maximum monthly salary values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_52

LANGUAGE: SQL
CODE:
```
SELECT MIN(salary / 12.0) AS min, MAX(salary / 12.0) AS max, STDDEV_SAMP(salary / 12.0) AS stddev FROM emp;
```

----------------------------------------

TITLE: Filtering airports by intersection with a polygon
DESCRIPTION: This snippet demonstrates how to use the ST_INTERSECTS function in an ESQL query to find airports whose location intersects with a specific polygon. The TO_GEOSHAPE function is used to define the polygon.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/st_intersects.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airports
| WHERE ST_INTERSECTS(location, TO_GEOSHAPE("POLYGON((42 14, 43 14, 43 15, 42 15, 42 14))"))
```

----------------------------------------

TITLE: Creating Indices with Different Numeric Types for Sorting in Elasticsearch
DESCRIPTION: Defines two indices with different numeric types (double and long) to demonstrate type casting in sorting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/sort-search-results.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
PUT /index_double
{
  "mappings": {
    "properties": {
      "field": { "type": "double" }
    }
  }
}
```

LANGUAGE: console
CODE:
```
PUT /index_long
{
  "mappings": {
    "properties": {
      "field": { "type": "long" }
    }
  }
}
```

----------------------------------------

TITLE: Combining STD_DEV with Inline Functions in ESQL
DESCRIPTION: Advanced example showing how to combine STD_DEV with MV_MAX to calculate the standard deviation of maximum salary changes. First applies MV_MAX to each row's salary_change values, then calculates the standard deviation of those maximums.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/std_dev.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM employees
| STATS stddev_salary_change = STD_DEV(MV_MAX(salary_change))
```

----------------------------------------

TITLE: Creating GCE Instance with Custom Elasticsearch Port
DESCRIPTION: This snippet demonstrates how to create a new Google Compute Engine instance with a custom Elasticsearch port specified in the metadata. It includes examples for creating a new instance from scratch and from an existing image.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-port.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
# when creating first instance
gcloud compute instances create myesnode1 \
       --scopes=compute-rw,storage-full \
       --metadata es_port=9301

# when creating an instance from an image
gcloud compute instances create myesnode2 --image=elasticsearch-1-0-0-RC1 \
       --zone europe-west1-a --machine-type f1-micro --scopes=compute-rw \
       --metadata es_port=9301
```

----------------------------------------

TITLE: Remove Elasticsearch Kuromoji Plugin (sh)
DESCRIPTION: Removes the Elasticsearch analysis-kuromoji plugin using the plugin manager. The node must be stopped before executing this command. Requires root privileges (sudo).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji.md#_snippet_1

LANGUAGE: sh
CODE:
```
sudo bin/elasticsearch-plugin remove analysis-kuromoji
```

----------------------------------------

TITLE: Analyzing Text with Truncate Filter in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the truncate filter in an analyze API request to shorten tokens that exceed 10 characters in the given text.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-truncate-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET _analyze
{
  "tokenizer" : "whitespace",
  "filter" : ["truncate"],
  "text" : "the quinquennial extravaganza carried on"
}
```

----------------------------------------

TITLE: Analyze API request using the stop filter
DESCRIPTION: This snippet demonstrates how to use the `stop` filter with the analyze API to remove stop words (a, the) from the input text 'a quick fox jumps over the lazy dog'. It specifies the 'standard' tokenizer and the 'stop' filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
GET /_analyze
{
  "tokenizer": "standard",
  "filter": [ "stop" ],
  "text": "a quick fox jumps over the lazy dog"
}
```

----------------------------------------

TITLE: Complete Moving Function Query Example
DESCRIPTION: Full example showing a moving function aggregation embedded within a date histogram, including a sum metric calculation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-movfn-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /_search
{
  "size": 0,
  "aggs": {
    "my_date_histo": {                  
      "date_histogram": {
        "field": "date",
        "calendar_interval": "1M"
      },
      "aggs": {
        "the_sum": {
          "sum": { "field": "price" }   
        },
        "the_movfn": {
          "moving_fn": {
            "buckets_path": "the_sum",  
            "window": 10,
            "script": "MovingFunctions.unweightedAvg(values)"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Converting WKT Points to Cartesian Points in ESQL
DESCRIPTION: This snippet demonstrates the use of TO_CARTESIANPOINT function to convert Well-Known Text (WKT) Point strings to cartesian_point values. It uses MV_EXPAND to process multiple points and EVAL to apply the conversion.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_cartesianpoint.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW wkt = ["POINT(4297.11 -1475.53)", "POINT(7580.93 2272.77)"]
| MV_EXPAND wkt
| EVAL pt = TO_CARTESIANPOINT(wkt)
```

----------------------------------------

TITLE: Basic Inference Bucket Aggregation Syntax in Elasticsearch
DESCRIPTION: Demonstrates the basic structure of an inference bucket aggregation with model ID, inference configuration for regression, and buckets path mapping.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-inference-bucket-aggregation.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "inference": {
    "model_id": "a_model_for_inference",
    "inference_config": {
      "regression_config": {
        "num_top_feature_importance_values": 2
      }
    },
    "buckets_path": {
      "avg_cost": "avg_agg",
      "max_cost": "max_agg"
    }
  }
}
```

----------------------------------------

TITLE: Configure Script Compilation Circuit Breaker Settings
DESCRIPTION: Settings to limit the number of inline script compilations within a time period. Includes compilation rate limit configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/circuit-breaker-settings.md#2025-04-21_snippet_4

LANGUAGE: yaml
CODE:
```
script.max_compilations_rate: "150/5m"
script.cache.max_size: "<size>"
```

----------------------------------------

TITLE: Keyed Response Date Histogram Example
DESCRIPTION: Example query showing how to get a keyed response for date histogram aggregation with monthly intervals.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-datehistogram-aggregation.md#2025-04-21_snippet_13

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "sales_over_time": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "1M",
        "format": "yyyy-MM-dd",
        "keyed": true
      }
    }
  }
}
```

----------------------------------------

TITLE: Calculating Logarithm with Custom Base in ESQL
DESCRIPTION: This example demonstrates how to use the LOG function with a custom base in ESQL. It calculates the logarithm of 8.0 with base 2.0.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/log.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW base = 2.0, value = 8.0
| EVAL s = LOG(base, value)
```

----------------------------------------

TITLE: Configuring Simple Pattern Split Tokenizer in Elasticsearch
DESCRIPTION: Demonstrates how to create a custom analyzer using the simple_pattern_split tokenizer to split text on underscores, breaking input into individual terms.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-simplepatternsplit-tokenizer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "my_tokenizer"
        }
      },
      "tokenizer": {
        "my_tokenizer": {
          "type": "simple_pattern_split",
          "pattern": "_"
        }
      }
    }
  }
}

POST my-index-000001/_analyze
{
  "analyzer": "my_analyzer",
  "text": "an_underscored_phrase"
}
```

----------------------------------------

TITLE: Alternative Stop Token Filter Placement
DESCRIPTION: Shows how removing the original term before synonym expansion can allow matches for the expanded term
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-synonym-graph-tokenfilter.md#2025-04-21_snippet_7

LANGUAGE: text
CODE:
```
Stop filter removes: foo
Synonym rule: foo, bar => baz
Result: Potential matches for baz
```

----------------------------------------

TITLE: Converting Single Value to Aggregate Metric Double in ESQL
DESCRIPTION: This example shows how to convert a single long value to an aggregate_metric_double using the TO_AGGREGATE_METRIC_DOUBLE function. The result includes min, max, sum, and value_count properties for the input value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_aggregate_metric_double.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW x = 3892095203
| EVAL agg_metric = TO_AGGREGATE_METRIC_DOUBLE(x)
```

----------------------------------------

TITLE: Indexing Document to Demonstrate synthetic_source_keep - Console
DESCRIPTION: This snippet shows how to index a document into the `idx_keep` index. The document contains nested objects and arrays designed to illustrate how the `synthetic_source_keep` settings configured in the index mapping affect the stored `_source` representation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-source-field.md#_snippet_13

LANGUAGE: console
CODE:
```
PUT idx_keep/_doc/1
{
  "path": {
    "to": [
      { "foo": [3, 2, 1] },
      { "foo": [30, 20, 10] }
    ],
    "bar": "baz"
  },
  "ids": [ 200, 100, 300, 100 ]
}
```

----------------------------------------

TITLE: Using Stored Scripts in Scripted Metric Aggregation
DESCRIPTION: This example demonstrates how to use stored scripts in a scripted metric aggregation, including passing parameters to the scripts.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-scripted-metric-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST ledger/_search?size=0
{
  "aggs": {
    "profit": {
      "scripted_metric": {
        "init_script": {
          "id": "my_init_script"
        },
        "map_script": {
          "id": "my_map_script"
        },
        "combine_script": {
          "id": "my_combine_script"
        },
        "params": {
          "field": "amount"
        },
        "reduce_script": {
          "id": "my_reduce_script"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Query Ruleset in Elasticsearch
DESCRIPTION: Example of creating a query ruleset with two rules - one for pinning specific document IDs and another for excluding documents, based on different metadata criteria.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/searching-with-query-rules.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
PUT /_query_rules/my-ruleset
{
  "rules": [
    {
      "rule_id": "rule1",
      "type": "pinned",
      "criteria": [
        {
          "type": "fuzzy",
          "metadata": "query_string",
          "values": [ "puggles", "pugs" ]
        },
        {
          "type": "exact",
          "metadata": "user_country",
          "values": [ "us" ]
        }
      ],
      "actions": {
        "ids": [
          "id1",
          "id2"
        ]
      }
    },
    {
      "rule_id": "rule2",
      "type": "exclude",
      "criteria": [
        {
          "type": "contains",
          "metadata": "query_string",
          "values": [ "beagles" ]
        }
      ],
      "actions": {
        "docs": [
          {
            "_index": "my-index-000001",
            "_id": "id3"
          },
          {
            "_index": "my-index-000002",
            "_id": "id4"
          }
        ]
      }
    }
  ]
}
```

----------------------------------------

TITLE: Calculating Rounded Sum of Monthly Salary in Elasticsearch SQL
DESCRIPTION: Shows how to calculate the sum of monthly salaries (salary / 12.0), rounded to one decimal place, from the 'emp' index/table.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_35

LANGUAGE: SQL
CODE:
```
SELECT ROUND(SUM(salary / 12.0), 1) AS sum FROM emp;
```

----------------------------------------

TITLE: Querying Elasticsearch with Runtime Field and Frequent Items Aggregation
DESCRIPTION: This query creates a runtime field 'price_range' based on 'taxful_total_price', and uses it in a frequent items aggregation along with category and city name. It demonstrates how to analyze numeric values by grouping them into price ranges.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-frequent-item-sets-aggregation.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET kibana_sample_data_ecommerce/_search
{
  "runtime_mappings": {
    "price_range": {
      "type": "keyword",
      "script": {
        "source": """
           def bucket_start = (long) Math.floor(doc['taxful_total_price'].value / 50) * 50;
           def bucket_end = bucket_start + 50;
           emit(bucket_start.toString() + "-" + bucket_end.toString());
        """
      }
    }
  },
  "size": 0,
  "aggs": {
    "my_agg": {
      "frequent_item_sets": {
        "minimum_set_size": 4,
        "fields": [
          {
            "field": "category.keyword"
          },
          {
            "field": "price_range"
          },
          {
            "field": "geoip.city_name"
          }
        ],
        "size": 3
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating New PEM Certificate
DESCRIPTION: Function to generate a new PEM certificate and key pair signed by a given CA. Creates a temporary zip file, extracts the certificate and key, then removes the zip.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/src/test/resources/org/elasticsearch/xpack/ssl/SSLErrorMessageTests/README.txt#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
function new-pem-cert() {
    local CrtFile="$1"
    local KeyFile="$2"
    local KeyPass="$3"
    local CertName="$4"
    local CaFile="$5"
    local CaPass="$6"
    shift 6

    local ZipFile=${PWD}/$CertName.zip
    local PassOpt=""
    if [ -n "$KeyPass" ]
    then
        PassOpt="--pass=$KeyPass"
    fi

    certutil cert --pem \
        --ca="${PWD}/$CaFile" --ca-pass="$CaPass" \
        --name="$CertName" --out $ZipFile \
        --days=5000 $PassOpt \
        "$@"
    unzip -p $ZipFile "$CertName/$CertName.crt" > $CrtFile
    unzip -p $ZipFile "$CertName/$CertName.key" > $KeyFile
    rm $ZipFile
}
```

----------------------------------------

TITLE: Configuring Time Series Index Mode in Elasticsearch
DESCRIPTION: Setting to specify the mode of an index, supporting time_series or null values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/time-series.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
index.mode: time_series
```

----------------------------------------

TITLE: Implementing Cursor-based Pagination in GraphQL Query
DESCRIPTION: This GraphQL query example demonstrates how to implement cursor-based pagination for fetching user data, which is required for the connector's pagination configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-graphql.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
query getUsers($cursor: String!) {
    sampleData {
        users(after: $cursor) {
            pageInfo {
                endCursor
                hasNextPage
            }
            nodes {
                first_name
                last_name
                address
            }
        }
    }
}
```

----------------------------------------

TITLE: Converting Certificate Keys to PKCS#8 Format
DESCRIPTION: This snippet converts the private keys of the certificates into PKCS#8 format for enhanced security and compatibility.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/libs/ssl-config/src/test/resources/certs/README.txt#2025-04-21_snippet_11

LANGUAGE: bash
CODE:
```
# 12. Convert certifcate keys to pkcs8

openssl pkcs8 -topk8 -inform PEM -in cert1/cert1.key -outform PEM -out cert1/cert1-pkcs8.key -nocrypt
openssl pkcs8 -topk8 -inform PEM -in cert2/cert2.key -outform PEM -out cert2/cert2-pkcs8.key -passin pass:"c2-pass" -passout pass:"c2-pass"
```

----------------------------------------

TITLE: Format TIME using TO_CHAR in Elasticsearch SQL
DESCRIPTION: Shows formatting a TIME value into a string using the TO_CHAR function with a 'HH12 MI SS.FF1' pattern. The input is a casted time literal. The function returns the time as a formatted string using 12-hour format and 1 fractional second digit.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_55

LANGUAGE: SQL
CODE:
```
SELECT TO_CHAR(CAST('23:22:33.987' AS TIME), 'HH12 MI SS.FF1') AS "time";
```

----------------------------------------

TITLE: Dynamic Type Casting with `def` in Painless
DESCRIPTION: Demonstrates valid dynamic type casts in Painless, showcasing implicit casts from `int` and `ArrayList` to `def`, and an implicit cast from `def` to `HashMap` when calling the `size()` method.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-casting.md#2025-04-21_snippet_5

LANGUAGE: painless
CODE:
```
def d0 = 3;               <1>
d0 = new ArrayList();     <2>
Object o = new HashMap(); <3>
def d1 = o;               <4>
int i = d1.size();        <5>
```

----------------------------------------

TITLE: Indexing GeoPoint Data in Elasticsearch
DESCRIPTION: This code snippet demonstrates how to index a document with `geo_point` data in Elasticsearch. It inserts a document into the `example_points` index with a `location` field defined as a `geo_point` array. The refresh parameter ensures the document is immediately searchable.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-shape-query.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
PUT /example_points/_doc/1?refresh
{
  "name": "Wind & Wetter, Berlin, Germany",
  "location": [13.400544, 52.530286]
}
```

----------------------------------------

TITLE: Equivalent Multi-field Search with Explicit Field References
DESCRIPTION: Shows the equivalent query to a multi-field search, explicitly referencing each field. This illustrates how Elasticsearch expands field searches under the hood.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_13

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "query_string": {
      "query": "(content:this OR name:this) AND (content:that OR name:that)"
    }
  }
}
```

----------------------------------------

TITLE: Generating RSA 2048-bit Keypair Certificate with Elasticsearch Certutil
DESCRIPTION: This snippet generates an RSA keypair certificate with a key size of 2048 bits using the elasticsearch-certutil tool. It specifies the output file path, validity period (days), key size, and distinguished name (CN, OU, DC) for the certificate.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/identity-provider/src/test/resources/keypair/README.txt#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```
"elasticsearch-certutil cert --pem --out ${PWD}/keypair-rsa-2048.zip --days 54321 --keysize 2048 --name \"CN=test,OU=idp,DC=elasticsearch,DC=org\""
```

----------------------------------------

TITLE: Defining SCORE Function Syntax SQL
DESCRIPTION: Defines the syntax for the SCORE() function in Elasticsearch SQL. It takes no input parameters and returns a `double` numeric value representing the relevance score computed by the underlying Elasticsearch search query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-search.md#_snippet_8

LANGUAGE: SQL
CODE:
```
SCORE()
```

----------------------------------------

TITLE: Creating Elasticsearch Shape Index for Pre-Indexed Shape
DESCRIPTION: This snippet shows how to create an Elasticsearch index named `shapes` with a mapping that includes a `shape` field. This index will store pre-indexed shapes that can be referenced by other queries. The `shape` type allows storing and querying geographical shapes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-shape-query.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT /shapes
{
  "mappings": {
    "properties": {
      "geometry": {
        "type": "shape"
      }
    }
  }
}
```

----------------------------------------

TITLE: Enabling HTTP Body Tracing
DESCRIPTION: Configures logging levels for both HTTP tracers to enable body tracing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/networking-settings.md#2025-04-21_snippet_13

LANGUAGE: console
CODE:
```
PUT _cluster/settings
{
   "persistent" : {
      "logger.org.elasticsearch.http.HttpTracer" : "TRACE",
      "logger.org.elasticsearch.http.HttpBodyTracer" : "TRACE"
   }
}
```

----------------------------------------

TITLE: Replacing Substrings Using REPLACE Function in ESQL
DESCRIPTION: This snippet demonstrates the usage of the REPLACE function in ESQL. It replaces the word 'World' with 'Universe' in the string 'Hello World'. The function takes three parameters: the original string, the regex pattern to match, and the replacement string.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/replace.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW str = "Hello World"
| EVAL str = REPLACE(str, "World", "Universe")
| KEEP str
```

----------------------------------------

TITLE: Configuring HTTP Kerberos Authentication in Elasticsearch
DESCRIPTION: YAML configuration for enabling Kerberos authentication for HTTP clients in Elasticsearch. This sets up the Kerberos authentication type and specifies the Kerberos realm to use.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/watcher/licenses/failureaccess-NOTICE.txt#2025-04-21_snippet_4

LANGUAGE: yaml
CODE:
```
xpack.security.http.authentication.type: kerberos
xpack.security.http.authentication.realm: kerb1
```

----------------------------------------

TITLE: Filtered T-test Aggregation Query in Elasticsearch
DESCRIPTION: Shows how to use filters in a t_test aggregation to compare startup times between different groups of nodes, demonstrating an unpaired test scenario.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-ttest-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET node_upgrade/_search
{
  "size": 0,
  "aggs": {
    "startup_time_ttest": {
      "t_test": {
        "a": {
          "field": "startup_time_before",         <1>
          "filter": {
            "term": {
              "group": "A"                        <2>
            }
          }
        },
        "b": {
          "field": "startup_time_before",         <3>
          "filter": {
            "term": {
              "group": "B"                        <4>
            }
          }
        },
        "type": "heteroscedastic"                 <5>
      }
    }
  }
}
```

----------------------------------------

TITLE: Customizing position_increment_gap in Elasticsearch Mapping
DESCRIPTION: This example demonstrates how to set a custom position_increment_gap in the mapping definition. By setting it to 0, phrase queries can match terms across different array elements, which can produce unexpected matching behavior.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/position-increment-gap.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "names": {
        "type": "text",
        "position_increment_gap": 0 <1>
      }
    }
  }
}

PUT my-index-000001/_doc/1
{
  "names": [ "John Abraham", "Lincoln Smith"]
}

GET my-index-000001/_search
{
  "query": {
    "match_phrase": {
      "names": "Abraham Lincoln" <2>
    }
  }
}
```

----------------------------------------

TITLE: Configuring Outlook Connector for Docker Deployment
DESCRIPTION: This YAML snippet shows a sample configuration for the Outlook connector when deploying it using Docker. It includes Elasticsearch connection details and connector-specific settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-outlook.md#2025-04-21_snippet_4

LANGUAGE: yaml
CODE:
```
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: outlook
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA> # Optional. If not provided, the connector will use the elasticsearch.api_key instead
```

----------------------------------------

TITLE: Implementing Annotated Highlighter in Elasticsearch
DESCRIPTION: Example demonstrating how to use the annotated highlighter with the annotated-text plugin. The example shows indexing a document with annotations and then searching with highlighting enabled. The annotated highlighter respects original markup and uses markdown-like syntax for highlighting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/mapper-annotated-text-highlighter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
# Example documents
PUT my-index-000001/_doc/1
{
  "my_field": "The cat sat on the [mat](sku3578)"
}

GET my-index-000001/_search
{
  "query": {
    "query_string": {
        "query": "cats"
    }
  },
  "highlight": {
    "fields": {
      "my_field": {
        "type": "annotated", <1>
        "require_field_match": false
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring UAX URL Email Tokenizer with Custom Max Token Length
DESCRIPTION: This example shows how to configure the UAX URL email tokenizer with a custom max_token_length of 5. It creates an index with a custom analyzer using this tokenizer configuration and then analyzes a sample email address.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-uaxurlemail-tokenizer.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "my_tokenizer"
        }
      },
      "tokenizer": {
        "my_tokenizer": {
          "type": "uax_url_email",
          "max_token_length": 5
        }
      }
    }
  }
}

POST my-index-000001/_analyze
{
  "analyzer": "my_analyzer",
  "text": "john.smith@global-international.com"
}
```

----------------------------------------

TITLE: Complex HAVING with Multiple Aggregates
DESCRIPTION: Demonstrates complex HAVING conditions using multiple aggregate functions and arithmetic operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_22

LANGUAGE: sql
CODE:
```
SELECT MIN(salary) AS min, MAX(salary) AS max, MAX(salary) - MIN(salary) AS diff FROM emp GROUP BY languages HAVING diff - max % min > 0 AND AVG(salary) > 30000;
```

----------------------------------------

TITLE: Indexing WKT MultiPolygon in Elasticsearch
DESCRIPTION: Example of indexing a WKT (Well-Known Text) MultiPolygon in Elasticsearch. The example shows two polygons in string format, with the second polygon containing a hole.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/shape.md#2025-04-21_snippet_15

LANGUAGE: json
CODE:
```
POST /example/_doc
{
  "location" : "MULTIPOLYGON (((1002.0 200.0, 1003.0 200.0, 1003.0 300.0, 1002.0 300.0, 102.0 200.0)), ((1000.0 100.0, 1001.0 100.0, 1001.0 100.0, 1000.0 100.0, 1000.0 100.0), (1000.2 100.2, 1000.8 100.2, 1000.8 100.8, 1000.2 100.8, 1000.2 100.2)))"
}
```

----------------------------------------

TITLE: Stop Analyzer in Elasticsearch
DESCRIPTION: Similar to simple analyzer with additional support for removing stop words.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analyzer-reference.md#2025-04-21_snippet_3

LANGUAGE: elasticsearch
CODE:
```
"analyzer": "stop"
```

----------------------------------------

TITLE: Setting Index-Level Coercion Default in Elasticsearch
DESCRIPTION: This snippet shows how to set a global coercion default at the index level in Elasticsearch. It demonstrates disabling coercion globally while enabling it for a specific field, and includes examples of document insertions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/coerce.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "index.mapping.coerce": false
  },
  "mappings": {
    "properties": {
      "number_one": {
        "type": "integer",
        "coerce": true
      },
      "number_two": {
        "type": "integer"
      }
    }
  }
}

PUT my-index-000001/_doc/1
{ "number_one": "10" }

PUT my-index-000001/_doc/2
{ "number_two": "10" }
```

----------------------------------------

TITLE: Using value_type in Terms Aggregation for Type Coercion
DESCRIPTION: Shows how to use the value_type parameter to handle type mismatches across indices. This example specifically demonstrates coercing an IP address field with a missing value fallback.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-terms-aggregation.md#2025-04-21_snippet_18

LANGUAGE: console
CODE:
```
GET /_search
{
  "aggs": {
    "ip_addresses": {
      "terms": {
        "field": "destination_ip",
        "missing": "0.0.0.0",
        "value_type": "ip"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring German Phonebook Order Sorting in Elasticsearch
DESCRIPTION: Example showing how to configure an index with ICU collation keyword field for German phonebook-style name sorting. The configuration creates a text field with a sub-field for sorting using German phonebook collation rules.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-icu-collation-keyword-field.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "name": {
        "type": "text",
        "fields": {
          "sort": {
            "type": "icu_collation_keyword",
            "index": false,
            "language": "de",
            "country": "DE",
            "variant": "@collation=phonebook"
          }
        }
      }
    }
  }
}

GET /my-index-000001/_search
{
  "query": {
    "match": {
      "name": "Fritz"
    }
  },
  "sort": "name.sort"
}
```

----------------------------------------

TITLE: Indexing Array into Wildcard Field with Synthetic Source (Console)
DESCRIPTION: This snippet shows how to create an index using synthetic source and map a field as `wildcard`. It then demonstrates indexing a document where the `wildcard` field contains an array of strings, illustrating how synthetic source might sort the values upon retrieval.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/keyword.md#_snippet_9

LANGUAGE: console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "card": { "type": "wildcard" }
    }
  }
}
PUT idx/_doc/1
{
  "card": ["king", "ace", "ace", "jack"]
}
```

----------------------------------------

TITLE: Querying Geo-bounding Box Using Lat Lon Array Format
DESCRIPTION: This snippet utilizes an array format for the `geo_bounding_box` query, aligning with GeoJSON standards. Coordinates must be provided in a `[longitude, latitude]` array format, returning documents where the bounding box intersects.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-bounding-box-query.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET my_locations/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_bounding_box": {
          "pin.location": {
            "top_left": [ -74.1, 40.73 ],
            "bottom_right": [ -71.12, 40.01 ]
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing a Pre-Indexed Shape in Elasticsearch
DESCRIPTION: This snippet demonstrates how to index a pre-indexed shape document with a `shape` field in Elasticsearch within the `shapes` index. It uses the `envelope` type with `coordinates` to represent a geographical area. This pre-indexed shape can be referenced by other queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-shape-query.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
PUT /shapes/_doc/footprint
{
  "geometry": {
    "type": "envelope",
    "coordinates": [ [ 1355.0, 5355.0 ], [ 1400.0, 5200.0 ] ]
  }
}
```

----------------------------------------

TITLE: Querying Documents with Missing Fields in Elasticsearch
DESCRIPTION: Example of using missing aggregation to find documents that don't have a value for a specific field. The query searches for products without a price field, returning the count in an aggregation bucket.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-missing-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "products_without_a_price": {
      "missing": { "field": "price" }
    }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "products_without_a_price": {
      "doc_count": 0
    }
  }
}
```

----------------------------------------

TITLE: Expanding Array Values with MV_EXPAND in ESQL
DESCRIPTION: Demonstrates the use of MV_EXPAND function to expand the array 'a' into separate rows while keeping other column values constant. The query expands [1,2,3] into three separate rows while maintaining the values of columns 'b' and 'j'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/mv_expand.csv-spec/simple.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=[1,2,3], b="b", j=["a","b"]
| MV_EXPAND a
```

----------------------------------------

TITLE: Parse Date String with DATE_PARSE - SQL
DESCRIPTION: Example demonstrating DATE_PARSE converting a 'dd/MM/yyyy' string into a date type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_43

LANGUAGE: SQL
CODE:
```
SELECT DATE_PARSE('07/04/2020', 'dd/MM/yyyy') AS "date";
```

----------------------------------------

TITLE: Indexing a Question Document for Parent Aggregation Example
DESCRIPTION: Creates a parent document of type "question" with tags that will be used in the parent aggregation example.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-parent-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT parent_example/_doc/1
{
  "join": {
    "name": "question"
  },
  "body": "<p>I have Windows 2003 server and i bought a new Windows 2008 server...",
  "title": "Whats the best way to file transfer my site from server to a newer one?",
  "tags": [
    "windows-server-2003",
    "windows-server-2008",
    "file-transfer"
  ]
}
```

----------------------------------------

TITLE: Basic Derivative Aggregation Syntax
DESCRIPTION: Shows the basic syntax structure for a derivative aggregation that calculates changes in a metric over time.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-derivative-aggregation.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
"derivative": {
  "buckets_path": "the_sum"
}
```

----------------------------------------

TITLE: Add multiple settings to the keystore using stdin
DESCRIPTION: Feeds setting values into the keystore via standard input, allowing automation or script-based configuration. Supports multiple settings, separated by newlines.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/elasticsearch-keystore.md#_snippet_4

LANGUAGE: Shell
CODE:
```
cat /file/containing/setting/value | bin/elasticsearch-keystore add --stdin the.setting.name.to.set
```

----------------------------------------

TITLE: Counting Split Values with Inline Function in ESQL
DESCRIPTION: This snippet illustrates how to use an inline function (SPLIT) within the COUNT function to count the number of values after splitting a string.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/count.md#2025-04-21_snippet_2

LANGUAGE: esql
CODE:
```
ROW words="foo;bar;baz;qux;quux;foo"
| STATS word_count = COUNT(SPLIT(words, ";"))
```

----------------------------------------

TITLE: Simple ABS Function with Negative Number
DESCRIPTION: Demonstrates using the ABS function to get the absolute value of a negative number using a ROW constructor.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/abs.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW number = -1.0
| EVAL abs_number = ABS(number)
```

----------------------------------------

TITLE: Repurposing Node as Dedicated Master
DESCRIPTION: Example of converting a data node to a dedicated master node using the elasticsearch-node repurpose command. Shows the interactive process of cleaning up shard data after changing node.roles to ["master"].
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/node-tool.md#2025-04-21_snippet_3

LANGUAGE: txt
CODE:
```
node$ ./bin/elasticsearch-node repurpose

    WARNING: Elasticsearch MUST be stopped before running this tool.

Found 2 shards in 2 indices to clean up
Use -v to see list of paths and indices affected
Node is being re-purposed as master and no-data. Clean-up of shard data will be performed.
Do you want to proceed?
Confirm [y/N] y
Node successfully repurposed to master and no-data.
```

----------------------------------------

TITLE: Configuring Append Processor in Elasticsearch Ingest Pipeline
DESCRIPTION: This snippet demonstrates how to configure the Append processor in an Elasticsearch ingest pipeline. It appends multiple values, including static strings and dynamic template snippets, to the 'tags' field of a document.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/append-processor.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "append": {
    "field": "tags",
    "value": ["production", "{{{app}}}", "{{{owner}}}"]
  }
}
```

----------------------------------------

TITLE: Querying Elasticsearch Documents Using _tier Field
DESCRIPTION: Example showing how to query documents across multiple indexes using the _tier field to filter by data tiers. The query uses terms to match documents in indexes with tier_preference set to either data_hot or data_warm.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-tier-field.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT index_1/_doc/1
{
  "text": "Document in index 1"
}

PUT index_2/_doc/2?refresh=true
{
  "text": "Document in index 2"
}

GET index_1,index_2/_search
{
  "query": {
    "terms": {
      "_tier": ["data_hot", "data_warm"]
    }
  }
}
```

----------------------------------------

TITLE: User Dictionary Rule Example
DESCRIPTION: Sample user dictionary entry for tokenizing the word 'Tokyo Skytree' in Japanese.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-tokenizer.md#2025-04-21_snippet_4

LANGUAGE: text
CODE:
```
東京スカイツリー,東京 スカイツリー,トウキョウ スカイツリー,カスタム名詞
```

----------------------------------------

TITLE: Using Multi-Dimensional Painless Arrays
DESCRIPTION: This snippet shows how to declare, initialize, and access elements in multi-dimensional arrays in Painless. It demonstrates allocating a 3D integer array using the `new` operator with dimensions specified and then assigning/retrieving a value using multiple indices.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-types.md#_snippet_10

LANGUAGE: Painless
CODE:
```
int[][][] ia3 = new int[2][3][4];
ia3[1][2][3] = 99;
int i = ia3[1][2][3];
```

----------------------------------------

TITLE: Enriching Language Data with ESQL
DESCRIPTION: This ESQL query takes a row with a language_code and enriches it using a languages_policy. It demonstrates how to use the ENRICH function in ESQL to add additional information based on a given code.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/enrich.csv-spec/enrich.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW language_code = "1"
| ENRICH languages_policy
```

----------------------------------------

TITLE: Step-by-Step State Machine Transition Explanation for EQL Sequence Query
DESCRIPTION: A detailed walkthrough of how the state machine processes each event in the dataset. Shows how sequences progress through different states based on the EQL query criteria and how separate state machines are maintained for each unique user.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_39

LANGUAGE: txt
CODE:
```
{ "index" : { "_id": "1" } }
{ "user": { "name": "root" }, "process": { "name": "attrib" }, ...}
// Creates sequence [1] in state A for the "root" user.
//
// +------------------------"root"------------------------+
// |  +-----------+     +-----------+     +------------+  |
// |  |  State A  |     |  State B  |     |  Complete  |  |
// |  +-----------+     +-----------+     +------------+  |
// |  |    [1]    |     |           |     |            |  |
// |  +-----------+     +-----------+     +------------+  |
// +------------------------------------------------------+

{ "index" : { "_id": "2" } }
{ "user": { "name": "root" }, "process": { "name": "attrib" }, ...}
// Creates sequence [2] in state A for "root", overwriting sequence [1].
//
// +------------------------"root"------------------------+
// |  +-----------+     +-----------+     +------------+  |
// |  |  State A  |     |  State B  |     |  Complete  |  |
// |  +-----------+     +-----------+     +------------+  |
// |  |    [2]    |     |           |     |            |  |
// |  +-----------+     +-----------+     +------------+  |
// +------------------------------------------------------+

{ "index" : { "_id": "3" } }
{ "user": { "name": "elkbee" }, "process": { "name": "bash" }, ...}
// Nothing happens. The "elkbee" user has no pending sequence to move
// from state A to state B.
//
// +-----------------------"elkbee"-----------------------+
// |  +-----------+     +-----------+     +------------+  |
// |  |  State A  |     |  State B  |     |  Complete  |  |
// |  +-----------+     +-----------+     +------------+  |
// |  |           |     |           |     |            |  |
// |  +-----------+     +-----------+     +------------+  |
// +------------------------------------------------------+

{ "index" : { "_id": "4" } }
{ "user": { "name": "root" }, "process": { "name": "bash" }, ...}
// Sequence [2] moves out of state A for "root".
// State B for "root" now contains [2, 4].
// State A for "root" is empty.
//
// +------------------------"root"------------------------+
// |  +-----------+     +-----------+     +------------+  |
// |  |  State A  |     |  State B  |     |  Complete  |  |
// |  +-----------+ --> +-----------+     +------------+  |
// |  |           |     |   [2, 4]  |     |            |  |
// |  +-----------+     +-----------+     +------------+  |
// +------------------------------------------------------+

{ "index" : { "_id": "5" } }
{ "user": { "name": "root" }, "process": { "name": "bash" }, ...}
// Nothing happens. State A is empty for "root".
//
// +------------------------"root"------------------------+
// |  +-----------+     +-----------+     +------------+  |
// |  |  State A  |     |  State B  |     |  Complete  |  |
// |  +-----------+     +-----------+     +------------+  |
// |  |           |     |   [2, 4]  |     |            |  |
// |  +-----------+     +-----------+     +------------+  |
// +------------------------------------------------------+

{ "index" : { "_id": "6" } }
{ "user": { "name": "elkbee" }, "process": { "name": "attrib" }, ...}
// Creates sequence [6] in state A for "elkbee".
//
// +-----------------------"elkbee"-----------------------+
// |  +-----------+     +-----------+     +------------+  |
// |  |  State A  |     |  State B  |     |  Complete  |  |
// |  +-----------+     +-----------+     +------------+  |
// |  |    [6]    |     |           |     |            |  |
// |  +-----------+     +-----------+     +------------+  |
// +------------------------------------------------------+

{ "index" : { "_id": "7" } }
{ "user": { "name": "root" }, "process": { "name": "attrib" }, ...}
// Creates sequence [7] in state A for "root".
// Sequence [2, 4] remains in state B for "root".
//
// +------------------------"root"------------------------+
// |  +-----------+     +-----------+     +------------+  |
// |  |  State A  |     |  State B  |     |  Complete  |  |
// |  +-----------+     +-----------+     +------------+  |
// |  |    [7]    |     |   [2, 4]  |     |            |  |
// |  +-----------+     +-----------+     +------------+  |
// +------------------------------------------------------+

{ "index" : { "_id": "8" } }
{ "user": { "name": "elkbee" }, "process": { "name": "bash" }, ...}
// Sequence [6, 8] moves to state B for "elkbee".
// State A for "elkbee" is now empty.
//
// +-----------------------"elkbee"-----------------------+
// |  +-----------+     +-----------+     +------------+  |
// |  |  State A  |     |  State B  |     |  Complete  |  |
// |  +-----------+ --> +-----------+     +------------+  |
// |  |           |     |   [6, 8]  |     |            |  |
// |  +-----------+     +-----------+     +------------+  |
// +------------------------------------------------------+

{ "index" : { "_id": "9" } }
{ "user": { "name": "root" }, "process": { "name": "cat" }, ...}
// Sequence [2, 4, 9] is complete for "root".
// State B for "root" is now empty.
// Sequence [7] remains in state A.
//
// +------------------------"root"------------------------+
// |  +-----------+     +-----------+     +------------+  |
// |  |  State A  |     |  State B  |     |  Complete  |  |
// |  +-----------+     +-----------+ --> +------------+  |
// |  |    [7]    |     |           |     |  [2, 4, 9] |
// |  +-----------+     +-----------+     +------------+  |
// +------------------------------------------------------+

{ "index" : { "_id": "10" } }
{ "user": { "name": "elkbee" }, "process": { "name": "cat" }, ...}
// Sequence [6, 8, 10] is complete for "elkbee".
// State A and B for "elkbee" are now empty.
//
// +-----------------------"elkbee"-----------------------+
// |  +-----------+     +-----------+     +------------+  |
// |  |  State A  |     |  State B  |     |  Complete  |  |
// |  +-----------+     +-----------+ --> +------------+  |
// |  |           |     |           |     | [6, 8, 10] |
// |  +-----------+     +-----------+     +------------+  |
// +------------------------------------------------------+

{ "index" : { "_id": "11" } }
{ "user": { "name": "root" }, "process": { "name": "cat" }, ...}
// Nothing happens.
// The machines for "root" and "elkbee" remain the same.
//
// +------------------------"root"------------------------+
// |  +-----------+     +-----------+     +------------+  |
// |  |  State A  |     |  State B  |     |  Complete  |  |
// |  +-----------+     +-----------+     +------------+  |
// |  |    [7]    |     |           |     |  [2, 4, 9] |
// |  +-----------+     +-----------+     +------------+  |
// +------------------------------------------------------+
//
// +-----------------------"elkbee"-----------------------+
// |  +-----------+     +-----------+     +------------+  |
// |  |  State A  |     |  State B  |     |  Complete  |  |
// |  +-----------+     +-----------+     +------------+  |
// |  |           |     |           |     | [6, 8, 10] |
// |  +-----------+     +-----------+     +------------+  |
// +------------------------------------------------------+
```

----------------------------------------

TITLE: Removing Elasticsearch Azure Classic Discovery Plugin (Shell)
DESCRIPTION: This command uses the Elasticsearch plugin manager to remove the Azure Classic Discovery plugin. The node where the plugin is being removed must be stopped before executing this command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-azure-classic.md#_snippet_1

LANGUAGE: shell
CODE:
```
sudo bin/elasticsearch-plugin remove discovery-azure-classic
```

----------------------------------------

TITLE: Creating and Testing Nori Analyzer with User Dictionary
DESCRIPTION: Elasticsearch request to create an index with a custom analyzer using nori_tokenizer with a user dictionary, followed by analysis of Korean text.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-nori-tokenizer.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
PUT nori_sample
{
  "settings": {
    "index": {
      "analysis": {
        "tokenizer": {
          "nori_user_dict": {
            "type": "nori_tokenizer",
            "decompound_mode": "mixed",
            "discard_punctuation": "false",
            "user_dictionary": "userdict_ko.txt",
            "lenient": "true"
          }
        },
        "analyzer": {
          "my_analyzer": {
            "type": "custom",
            "tokenizer": "nori_user_dict"
          }
        }
      }
    }
  }
}

GET nori_sample/_analyze
{
  "analyzer": "my_analyzer",
  "text": "세종시"  <1>
}
```

----------------------------------------

TITLE: Generating Random Scores in Elasticsearch Function Score Query
DESCRIPTION: This snippet shows how to create random scores in a function_score query, allowing for uniformly distributed scores and providing an option to set a seed and field for reproducibility of scores, demonstrating the usage of the random_score function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-function-score-query.md#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "function_score": {
      "random_score": {
        "seed": 10,
        "field": "_seq_no"
      }
    }
  }
}
```

----------------------------------------

TITLE: Pinning Documents in a Specific Index - Elasticsearch Console
DESCRIPTION: This example shows how to pin documents using their specific index and ID. It illustrates how to ensure certain documents appear first in search results by specifying each document's index and ID. Useful when working with multiple indices in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-pinned-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "pinned": {
      "docs": [
        {
          "_index": "my-index-000001", <1>
          "_id": "1"
        },
        {
          "_id": "4" <2>
        }
      ],
      "organic": {
        "match": {
          "description": "iphone"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Split Processor with Whitespace Separator in Elasticsearch
DESCRIPTION: This snippet demonstrates how to configure the Split processor to split a field using whitespace as a separator. It uses a regular expression '\s+' to match one or more whitespace characters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/split-processor.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "split": {
    "field": "my_field",
    "separator": "\\s+"
  }
}
```

----------------------------------------

TITLE: EQL Query for Specific Process
DESCRIPTION: Shows an EQL query that matches events with an event category of 'process' and a process name of 'svchost.exe'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_1

LANGUAGE: eql
CODE:
```
process where process.name == "svchost.exe"
```

----------------------------------------

TITLE: Setting Distance Calculation Type in Geo-distance Aggregation
DESCRIPTION: Shows how to set the distance calculation type parameter (plane) for geo-distance aggregation in Elasticsearch, which trades accuracy for speed in narrow geographical areas.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-geodistance-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /museums/_search?size=0
{
  "aggs": {
    "rings": {
      "geo_distance": {
        "field": "location",
        "origin": "POINT (4.894 52.3760)",
        "unit": "km",
        "distance_type": "plane",
        "ranges": [
          { "to": 100 },
          { "from": 100, "to": 300 },
          { "from": 300 }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Custom Percentiles Range Query
DESCRIPTION: Query specifying custom percentile values (95,99,99.9) to calculate for outlier detection.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-percentile-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET latency/_search
{
  "size": 0,
  "aggs": {
    "load_time_outlier": {
      "percentiles": {
        "field": "load_time",
        "percents": [ 95, 99, 99.9 ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Connector with API
DESCRIPTION: Updates an existing connector configuration with PostgreSQL details using an API call. The correct schema registration is a prerequisite.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/api-tutorial.md#2025-04-21_snippet_15

LANGUAGE: json
CODE:
```
PUT _connector/my-connector-id/_configuration
{
  "values": {
    "host": "127.0.0.1",
    "port": 5432,
    "username": "myuser",
    "password": "mypassword",
    "database": "chinook",
    "schema": "public",
    "tables": "album,artist"
  }
}
```

----------------------------------------

TITLE: Configuring User-based Audit Event Ignore Policy in Elasticsearch YAML
DESCRIPTION: This setting defines a list of users or wildcards for which audit events will not be printed. It is a dynamic cluster setting that can be updated without restarting the cluster.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/auding-settings.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
xpack.security.audit.logfile.events.ignore_filters.<policy_name>.users
```

----------------------------------------

TITLE: Comparing String Length and Byte Length in ESQL
DESCRIPTION: This ESQL query demonstrates the usage of BYTE_LENGTH function in comparison with LENGTH function. It selects cities in India from the airports dataset, keeping only the city column, and then calculates both the character length and byte length of each city name.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/byte_length.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airports
| WHERE country == "India"
| KEEP city
| EVAL fn_length = LENGTH(city), fn_byte_length = BYTE_LENGTH(city)
```

----------------------------------------

TITLE: Creating a pipeline with selected attachment properties
DESCRIPTION: Example showing how to create an attachment processor pipeline that extracts only specific properties (content and title) from attachments.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/attachment.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT _ingest/pipeline/attachment
{
  "description" : "Extract attachment information",
  "processors" : [
    {
      "attachment" : {
        "field" : "data",
        "properties": [ "content", "title" ],
        "remove_binary": true
      }
    }
  ]
}
```

----------------------------------------

TITLE: Calculating Base-10 Logarithm Using ESQL LOG10 Function
DESCRIPTION: Demonstrates how to use the LOG10 function to calculate the base-10 logarithm of a numeric value. The function takes a numeric input and returns a double value. Returns null and warns for zero or negative inputs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/log10.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW d = 1000.0
| EVAL s = LOG10(d)
```

----------------------------------------

TITLE: Basic Set Processor Configuration
DESCRIPTION: Simple example showing how to set a field value to a static number using the Set processor.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/set-processor.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "description" : "sets the value of count to 1",
  "set": {
    "field": "count",
    "value": 1
  }
}
```

----------------------------------------

TITLE: Defining Custom Thai Analyzer in Elasticsearch
DESCRIPTION: This Elasticsearch configuration snippet demonstrates how to define a custom analyzer for the Thai language. It employs a Thai tokenizer and specific filter configurations, tailored for text processing in the Thai language domain, assuming Elasticsearch setup with Thai language support.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_29

LANGUAGE: console
CODE:
```
PUT /thai_example
{
  "settings": {
    "analysis": {
      "filter": {
        "thai_stop": {
          "type":       "stop",
          "stopwords":  "_thai_" <1>
        }
      },
      "analyzer": {
        "rebuilt_thai": {
          "tokenizer":  "thai",
          "filter": [
            "lowercase",
            "decimal_digit",
            "thai_stop"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Verifying Connector Connection
DESCRIPTION: Retrieves the status of a specified Elasticsearch connector instance using an API call. The response format should contain a `needs_configuration` status and a `last_seen` field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/api-tutorial.md#2025-04-21_snippet_14

LANGUAGE: console
CODE:
```
GET _connector/my-connector-id
```

----------------------------------------

TITLE: Generating API Key for Gmail Connector
DESCRIPTION: API call to create a security API key with appropriate permissions for the Gmail connector.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-gmail.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /_security/api_key
{
  "name": "connector_name-connector-api-key",
  "role_descriptors": {
    "connector_name-connector-role": {
      "cluster": [
        "monitor",
        "manage_connector"
      ],
      "indices": [
        {
          "names": [
            "index_name",
            ".search-acl-filter-index_name",
            ".elastic-connectors*"
          ],
          "privileges": [
            "all"
          ],
          "allow_restricted_indices": false
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Creating Index with Geo-shape Mapping in Elasticsearch
DESCRIPTION: Creates an index named 'geocells' with a mapping for a 'geocell' field of type 'geo_shape'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/ingest-geo-grid-processor.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT geocells
{
  "mappings": {
    "properties": {
      "geocell": {
        "type": "geo_shape"
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating a Text Field with Default Prefix Length Settings in Elasticsearch
DESCRIPTION: This example shows how to create a 'body_text' field with default index_prefixes settings. An empty settings object will use the default min_chars (2) and max_chars (5) values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/index-prefixes.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "body_text": {
        "type": "text",
        "index_prefixes": { }    <1>
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring ElasticSearch Thresholds in YAML
DESCRIPTION: This YAML configuration defines various thresholds for ElasticSearch operations. It includes settings for search, indexing, and system-wide parameters such as maximum shards per node and cluster concurrent rebalance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/plugins/discovery-gce/licenses/grpc-context-NOTICE.txt#2025-04-22_snippet_0

LANGUAGE: yaml
CODE:
```
# Increase from 1000 to 10_000
search.max_buckets: 10000

# Increase from 65,536 to 200,000
index.max_result_window: 200000

# Increase from 10,000 to 50,000
cluster.max_shards_per_node: 50000

# Increase from 2 to 4
cluster.routing.allocation.cluster_concurrent_rebalance: 4
```

----------------------------------------

TITLE: Defining Enriched Geohex to Shape Ingest Pipeline in Elasticsearch
DESCRIPTION: Creates an ingest pipeline that converts H3 cells to polygons and adds enriched fields like parent, children, and non-children tiles.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/ingest-geo-grid-processor.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
PUT _ingest/pipeline/geohex2shape
{
  "description": "translate H3 cell to polygon with enriched fields",
  "processors": [
    {
      "geo_grid": {
        "description": "Ingest H3 cells like '811fbffffffffff' and create polygons",
        "field": "geocell",
        "tile_type": "geohex",
        "target_format": "wkt",
        "target_field": "shape",
        "parent_field": "parent",
        "children_field": "children",
        "non_children_field": "nonChildren",
        "precision_field": "precision"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Using Less Than Or Equal Operator with 'def' Type in Painless
DESCRIPTION: Demonstrates the usage of the less than or equal operator with the 'def' type, showing implicit casting and type promotion.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_6

LANGUAGE: painless
CODE:
```
int x = 5;        <1>
def y = 7.0;      <2>
def z = y <= 7.0; <3>
def a = x <= y;   <4>
```

----------------------------------------

TITLE: Using Request Cache Parameter for Per-Request Caching in Elasticsearch
DESCRIPTION: This search request explicitly enables caching using the request_cache query parameter, overriding the index-level setting. It shows an aggregation query that counts terms in the 'colors' field with size set to 0.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/shard-request-cache.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search?request_cache=true
{
  "size": 0,
  "aggs": {
    "popular_colors": {
      "terms": {
        "field": "colors"
      }
    }
  }
}
```

----------------------------------------

TITLE: Executing Span First Query in Elasticsearch Console
DESCRIPTION: This code snippet demonstrates how to execute a span first query using the Elasticsearch console. The snippet assumes Elasticsearch setup and involves using a 'span_first' query to match a term near the beginning of a specified field. The 'end' parameter specifies the maximum position a span can reach to be considered a match.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-span-first-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "span_first": {
      "match": {
        "span_term": { "user.id": "kimchy" }
      },
      "end": 3
    }
  }
}
```

----------------------------------------

TITLE: Creating a GCE Instance for Elasticsearch
DESCRIPTION: Creates a Google Compute Engine instance named 'myesnode1' with the compute-rw scope, which is required for Elasticsearch discovery. The command requires specifying the zone where the instance will be deployed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-long.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
gcloud compute instances create myesnode1 \
       --zone <your-zone> \
       --scopes compute-rw
```

----------------------------------------

TITLE: Mapping Aggregate Metric Double Field (stats-index)
DESCRIPTION: Creates an index named `stats-index` with a mapping for an `aggregate_metric_double` field named `agg_metric`. It includes `min`, `max`, `sum`, and `value_count` metrics and sets `max` as the default.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/aggregate-metric-double.md#_snippet_1

LANGUAGE: console
CODE:
```
PUT stats-index
{
  "mappings": {
    "properties": {
      "agg_metric": {
        "type": "aggregate_metric_double",
        "metrics": [ "min", "max", "sum", "value_count" ],
        "default_metric": "max"
      }
    }
  }
}
```

----------------------------------------

TITLE: Geo-distance query with lat/lon as array in Elasticsearch
DESCRIPTION: This snippet showcases the use of the `geo_distance` filter with latitude and longitude specified as an array in `[lon, lat]` format within the `pin.location` field. The query searches for documents within a 12km radius of the specified coordinates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-distance-query.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
GET /my_locations/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_distance": {
          "distance": "12km",
          "pin.location": [ -70, 40 ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Importing Certificates into Single PKCS#12 Keystore
DESCRIPTION: This snippet imports the previously converted PKCS#12 certificates into a single PKCS#12 keystore, streamlining certificate management.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/libs/ssl-config/src/test/resources/certs/README.txt#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
# 9. Import Certs into single PKCS#12 keystore

for Cert in cert1 cert2 
do
    keytool -importkeystore -noprompt \
            -srckeystore $Cert/$Cert.p12 -srcstoretype PKCS12 -srcstorepass p12-pass  \
            -destkeystore cert-all/certs.p12 -deststoretype PKCS12 -deststorepass p12-pass
done
```

----------------------------------------

TITLE: Clearing All Scroll Contexts in Elasticsearch
DESCRIPTION: This snippet demonstrates how to clear all scroll contexts using the _all parameter with the clear-scroll API.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/paginate-search-results.md#2025-04-21_snippet_13

LANGUAGE: console
CODE:
```
DELETE /_search/scroll/_all
```

----------------------------------------

TITLE: Setting Data Path via Elasticsearch Command Line
DESCRIPTION: Sets the data path for an Elasticsearch node when starting it from the command line using the `-E` flag to override or set configuration properties. The `-Epath.data` argument specifies the directory for storing data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/node-settings.md#_snippet_2

LANGUAGE: sh
CODE:
```
./bin/elasticsearch -Epath.data=/var/elasticsearch/data
```

----------------------------------------

TITLE: Defining Regex Substitution Function in ESQL for Elasticsearch
DESCRIPTION: This SQL snippet defines a function named 'regexp_replace' that performs regex-based string substitution. It takes three parameters: the input string, the regex pattern, and the replacement string. The function returns a string after applying the substitution.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/replace.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.
```

----------------------------------------

TITLE: Calculating Average Languages using ESQL Stats
DESCRIPTION: ESQL query that computes the average number of languages from the employees table using the STATS and AVG functions. The query outputs a single column named avg_lang containing the calculated mean value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/stats.csv-spec/statsWithoutBy.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS avg_lang = AVG(languages)
```

----------------------------------------

TITLE: Executing Geo-polygon Query in String Format
DESCRIPTION: This code snippet demonstrates performing a geo-polygon query with points defined in string format (latitude followed by longitude). The Elasticsearch setup must support string format for geo-points, and it returns query results that meet the condition.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-polygon-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_polygon": {
          "person.location": {
            "points": [
              "40, -70",
              "30, -80",
              "20, -90"
            ]
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: ESQL Field Type Support Table - Markdown
DESCRIPTION: A markdown table showing field type to result type mappings for ESQL functions. All listed field types (date, date_nanos, double, integer, keyword, long, text, unsigned_long) map to a date result type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/types/to_datetime.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| field | result |
| --- | --- |
| date | date |
| date_nanos | date |
| double | date |
| integer | date |
| keyword | date |
| long | date |
| text | date |
| unsigned_long | date |
```

----------------------------------------

TITLE: Filtering Employee Records with LIKE Operator in ESQL
DESCRIPTION: This query filters the 'employees' dataset to find records where the first_name field starts with 'b' (case-insensitive), followed by any number of characters. The query then keeps only the first_name and last_name columns in the result set.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/examples/like.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| WHERE first_name LIKE """?b*"""
| KEEP first_name, last_name
```

----------------------------------------

TITLE: Index Sample Data and Run Adjacency Matrix Aggregation - Elasticsearch Console
DESCRIPTION: This console command block first indexes three sample documents into the 'emails' index, each with an 'accounts' field containing lists of names. It then executes a search request with size 0 to only get aggregations, applying an `adjacency_matrix` aggregation named 'interactions' using three defined filters ('grpA', 'grpB', 'grpC') based on account names.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-adjacency-matrix-aggregation.md#_snippet_0

LANGUAGE: console
CODE:
```
PUT emails/_bulk?refresh
{ "index" : { "_id" : 1 } }
{ "accounts" : ["hillary", "sidney"]}
{ "index" : { "_id" : 2 } }
{ "accounts" : ["hillary", "donald"]}
{ "index" : { "_id" : 3 } }
{ "accounts" : ["vladimir", "donald"]}

GET emails/_search
{
  "size": 0,
  "aggs" : {
    "interactions" : {
      "adjacency_matrix" : {
        "filters" : {
          "grpA" : { "terms" : { "accounts" : ["hillary", "sidney"] }},
          "grpB" : { "terms" : { "accounts" : ["donald", "mitt"] }},
          "grpC" : { "terms" : { "accounts" : ["vladimir", "nigel"] }}
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing GeoJSON MultiPoint in Elasticsearch
DESCRIPTION: Example of indexing a GeoJSON MultiPoint geometry in Elasticsearch. MultiPoint represents a collection of points as an array of coordinate arrays.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-shape.md#2025-04-21_snippet_10

LANGUAGE: json
CODE:
```
POST /example/_doc
{
  "location" : {
    "type" : "MultiPoint",
    "coordinates" : [
      [102.0, 2.0], [103.0, 2.0]
    ]
  }
}
```

----------------------------------------

TITLE: SQL Query for X-Coordinate using ST_X
DESCRIPTION: This SQL query selects points from a test table where the X-coordinate is equal to 10.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_16

LANGUAGE: SQL
CODE:
```
SELECT ST_AsWKT(point) FROM test WHERE ST_X(point) = 10;
```

----------------------------------------

TITLE: SHOW TABLES with Exact Pattern Matching
DESCRIPTION: Demonstrates using LIKE clause with exact table name matching.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-show-tables.md#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
SHOW TABLES LIKE 'emp';
```

----------------------------------------

TITLE: Basic DISSECT Usage Example in ESQL
DESCRIPTION: An example of using DISSECT to parse a string containing a timestamp, text, and IP address. The specific example is referenced but not provided in the given text.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/dissect.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
// Example referenced but not provided in the text
```

----------------------------------------

TITLE: Dissecting and Extracting Fields from a String using ESQL
DESCRIPTION: This ESQL snippet demonstrates how to dissect a string containing date, message, and IP address information using the DISSECT function. It then selects specific fields using the KEEP clause. The input string follows a specific format, and the output is a table with extracted fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/basicDissect.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = "2023-01-23T12:15:00.000Z - some text - 127.0.0.1"
| DISSECT a """%{date} - %{msg} - %{ip}"""
| KEEP date, msg, ip
```

----------------------------------------

TITLE: New Instance Operator in Painless
DESCRIPTION: Illustrates the allocation of new instances using the 'new' operator in Painless. Discusses overloaded constructors and error handling when instances are allocated with mismatched argument types or incorrect arity. It covers implicit casting of allocated instances.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-reference.md#2025-04-21_snippet_17

LANGUAGE: painless
CODE:
```
Map m = new HashMap();
def d = new ArrayList();
def e = new HashMap(m);
```

----------------------------------------

TITLE: Apply HISTOGRAM on Numeric Expression SQL
DESCRIPTION: Illustrates applying the `HISTOGRAM` function to a numeric expression (`salary % 100`) rather than just a field. The expression's result is then bucketed using a numeric interval (`10`), and the query counts entries per bucket, grouping by the histogram output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-grouping.md#_snippet_3

LANGUAGE: SQL
CODE:
```
SELECT HISTOGRAM(salary % 100, 10) AS h, COUNT(*) AS c FROM emp GROUP BY h;
```

----------------------------------------

TITLE: Exporting All Certificates from PKCS12 Keystore
DESCRIPTION: Extracts all certificates from a PKCS12 keystore file using openssl. The output is directed to a file named 'all_certs'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/identity-provider/src/test/resources/org/elasticsearch/xpack/idp/saml/idp/README.txt#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
openssl pkcs12 -in multi_signing.p12 -nokeys -out all_certs
```

----------------------------------------

TITLE: Disabling Shard Request Cache When Creating an Index in Elasticsearch
DESCRIPTION: This request creates a new index with the request cache disabled via index settings. By default, the cache is enabled, but this example shows how to turn it off when creating an index.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/shard-request-cache.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "index.requests.cache.enable": false
  }
}
```

----------------------------------------

TITLE: Creating an attachment pipeline for CBOR data
DESCRIPTION: Example showing how to create an attachment processor pipeline intended for use with CBOR-encoded data instead of JSON.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/attachment.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
PUT _ingest/pipeline/cbor-attachment
{
  "description" : "Extract attachment information",
  "processors" : [
    {
      "attachment" : {
        "field" : "data",
        "remove_binary": true
      }
    }
  ]
}
```

----------------------------------------

TITLE: Demonstrating Lowercase Tokenizer Usage in Elasticsearch
DESCRIPTION: This example shows how to use the lowercase tokenizer in Elasticsearch's _analyze API. It processes a sample text that contains a mix of uppercase and lowercase letters, numbers, and punctuation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lowercase-tokenizer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _analyze
{
  "tokenizer": "lowercase",
  "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
}
```

----------------------------------------

TITLE: Match Phrase Prefix Query Example
DESCRIPTION: Demonstrates using a match_phrase_prefix query for strict term order matching. This query type is useful when exact phrase matching with a prefix is required.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/search-as-you-type.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET my-index-000001/_search
{
  "query": {
    "match_phrase_prefix": {
      "my_field": "brown f"
    }
  }
}
```

----------------------------------------

TITLE: Creating an Elasticsearch Index with geo_shape Mapping
DESCRIPTION: Creates an Elasticsearch index named 'example' with a mapping that defines a field 'location' of type 'geo_shape'. This mapping allows the field to store geometric shapes for geospatial queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-shape.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /example
{
  "mappings": {
    "properties": {
      "location": {
        "type": "geo_shape"
      }
    }
  }
}
```

----------------------------------------

TITLE: Performing Prefix Query with Short Syntax (Elasticsearch)
DESCRIPTION: This snippet illustrates the simplified syntax for the prefix query, allowing you to specify the target field and prefix value directly under the `prefix` type. It queries the _search endpoint to find documents where the `user` field contains terms starting with the prefix 'ki'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-prefix-query.md#_snippet_1

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "prefix" : { "user" : "ki" }
  }
}
```

----------------------------------------

TITLE: Basic MIN Function Usage in ESQL
DESCRIPTION: Demonstrates the basic usage of MIN function to find the minimum value in a column named 'languages'. This query returns the smallest value from the 'languages' column across all records in the 'employees' index.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/min.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS MIN(languages)
```

----------------------------------------

TITLE: Converting First Vowel to Uppercase with replaceFirst in Painless
DESCRIPTION: Uses Painless's replaceFirst with a function to make only the first vowel in player last names uppercase.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/brief-painless-walkthrough.md#2025-04-21_snippet_14

LANGUAGE: console
CODE:
```
POST hockey/_update_by_query
{
  "script": {
    "lang": "painless",
    "source": """
      ctx._source.last = ctx._source.last.replaceFirst(/[aeiou]/, m ->
        m.group().toUpperCase(Locale.ROOT))
    """
  }
}
```

----------------------------------------

TITLE: Implementing Exponential Backoff Policy in Java for Elasticsearch
DESCRIPTION: This code implements an exponential backoff policy with configurable parameters. It provides methods to wait for specific periods between retry attempts, with support for both synchronous and asynchronous execution via the TimeValue class.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/licenses/slf4j-nop-NOTICE.txt#2025-04-21_snippet_0

LANGUAGE: Java
CODE:
```
/**
 * A policy to compute backoff delays for an operation that is retried.
 */
public class BackoffPolicy {

    public static class Builder {

        static final BackoffPolicy DEFAULT_BACKOFF = new BackoffPolicy(
            CancellableBackoff.between(TimeValue.timeValueMillis(10), TimeValue.timeValueMinutes(1)),
            // not needed as no sniffing used in this context, see #waitForNextRetry
            retryOn -> true
        );

        private Cancellable backoff;
        private Predicate<Exception> retryPredicate;

        private Builder() {
        }

        /**
         * Sets the backoff to be used
         */
        public Builder withBackoff(Cancellable backoff) {
            this.backoff = backoff;
            return this;
        }

        /**
         * Sets whether to retry based on the exception thrown
         */
        public Builder withRetryOn(Predicate<Exception> retryPredicate) {
            this.retryPredicate = retryPredicate;
            return this;
        }

        /**
         * Builds a new {@link BackoffPolicy}
         */
        public BackoffPolicy build() {
            return new BackoffPolicy(this.backoff, this.retryPredicate);
        }
    }

    /**
     * Creates a new {@link Builder}
     */
    public static Builder builder() {
        return new Builder();
    }

    private final Cancellable backoff;
    private final Predicate<Exception> retryPredicate;

    private BackoffPolicy(Cancellable backoff, Predicate<Exception> retryPredicate) {
        this.backoff = backoff;
        this.retryPredicate = retryPredicate;
    }

    /**
     * Get default exponential backoff policy using jitter
     */
    public static BackoffPolicy exponentialBackoff() {
        return BackoffPolicy.Builder.DEFAULT_BACKOFF;
    }

    /**
     * Returns true if this policy should retry given the exception.
     */
    public boolean shouldRetry(Exception e) {
        return retryPredicate.test(e);
    }

    /**
     * Waits for the next delay before retrying the operation. A retry attempt is stored in {@code retryState}
     * which is passed in to every invocation of this method. This method uses the backoff to compute the next delay and
     * sleeps for the appropriate amount of time.
     *
     * @param retryState the retry state used to compute the delay
     * @throws Exception propagates exceptions if the interrupts or cancels the waiting
     */
    public void waitForNextRetry(RetryState retryState) throws Exception {
        TimeValue waitTime = backoff.next(retryState);
        Thread.sleep(waitTime.millis());
    }

    /**
     * Returns the iteration state which can be used in {@link #iterator()}
     */
    public RetryState newRetryState() {
        return new RetryState();
    }

    /**
     * Allows to iterate over the backoff delays. Uses {@link RetryState} internally.
     */
    public Iterator<TimeValue> iterator() {
        return new BackoffIterator(newRetryState());
    }

    /**
     * Allows to iterate over the backoff delays. Uses {@link RetryState} internally.
     */
    public final class BackoffIterator implements Iterator<TimeValue> {

        private final RetryState retryState;

        private BackoffIterator(RetryState retryState) {
            this.retryState = retryState;
        }

        @Override
        public boolean hasNext() {
            return true;
        }

        @Override
        public TimeValue next() {
            return backoff.next(retryState);
        }
    }
}
```

----------------------------------------

TITLE: Deleting Connector and Associated Sync Jobs
DESCRIPTION: Deletes the connector and its related sync jobs without affecting the created Elasticsearch index. Use API calls to perform the deletions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/api-tutorial.md#2025-04-21_snippet_19

LANGUAGE: console
CODE:
```
DELETE _connector/my-connector-id&delete_sync_jobs=true
DELETE music
```

----------------------------------------

TITLE: ESQL Aggregation with Metadata Fields
DESCRIPTION: Demonstrates how to use metadata fields in aggregation queries, showing grouping by metadata field while calculating maximum value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-metadata-fields.md#2025-04-21_snippet_2

LANGUAGE: esql
CODE:
```
FROM employees METADATA _index, _id
| STATS max = MAX(emp_no) BY _index
```

----------------------------------------

TITLE: Changing EQL Search Retention Period in Elasticsearch
DESCRIPTION: This snippet demonstrates how to change the retention period for an EQL search using the 'keep_alive' parameter. It sets a 2-day retention period and a 2-second wait for completion timeout.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_26

LANGUAGE: console
CODE:
```
GET /my-data-stream/_eql/search
{
  "keep_alive": "2d",
  "wait_for_completion_timeout": "2s",
  "query": """
    process where process.name == "cmd.exe"
  """
}
```

----------------------------------------

TITLE: Setting multiple index routing allocation filters in Elasticsearch
DESCRIPTION: Demonstrates how to specify multiple routing allocation filters for an index, requiring shards to be allocated to 'big' nodes in 'rack1'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/shard-allocation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT test/_settings
{
  "index.routing.allocation.require.size": "big",
  "index.routing.allocation.require.rack": "rack1"
}
```

----------------------------------------

TITLE: Calling ESQL Function with Named Parameters (Console)
DESCRIPTION: Shows an example of executing an ESQL query via the `_query` endpoint using the `console` format, demonstrating how to provide named parameters to a function like `match` using a JSON object syntax.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-syntax.md#_snippet_10

LANGUAGE: console
CODE:
```
POST /_query
{
"query": """
FROM library
| WHERE match(author, "Frank Herbert", {"minimum_should_match": 2, "operator": "AND"})
| LIMIT 5
"""
}
```

----------------------------------------

TITLE: Configuring Enrich Cache Size in Elasticsearch YAML
DESCRIPTION: Sets the maximum number of searches to cache for enriching documents. The default value is 1000, and this cache is shared across all enrich processors in the cluster.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/enrich-settings.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
enrich.cache_size: 1000
```

----------------------------------------

TITLE: Using CURRENT_DATE Function in Elasticsearch SQL
DESCRIPTION: This snippet demonstrates fetching the current date using the `CURRENT_DATE()` function in Elasticsearch SQL. It retrieves the date the query reached the server and aliases it as `result`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_10

LANGUAGE: SQL
CODE:
```
SELECT CURRENT_DATE() AS result;
```

----------------------------------------

TITLE: Generating Custom SAML Metadata with Additional Options in Shell
DESCRIPTION: This example shows how to generate a metadata file for the 'saml2' realm with custom service name, locale, contacts, and organization information using the elasticsearch-saml-metadata command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/saml-metadata.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
bin/elasticsearch-saml-metadata --realm saml2 \
    --service-name kibana-finance \
    --locale en-GB \
    --contacts \
    --organisation-name "Mega Corp. Finance Team" \
    --organisation-url "http://mega.example.com/finance/"
```

----------------------------------------

TITLE: Configuring Persistent Tasks Allocation in Elasticsearch
DESCRIPTION: These settings control the allocation of persistent tasks to nodes in an Elasticsearch cluster. 'cluster.persistent_tasks.allocation.enable' enables or disables task allocation, while 'cluster.persistent_tasks.allocation.recheck_interval' sets the frequency of allocation checks.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/miscellaneous-cluster-settings.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
cluster.persistent_tasks.allocation.enable: all
cluster.persistent_tasks.allocation.recheck_interval: 30s
```

----------------------------------------

TITLE: String Concatenation Compound Assignment
DESCRIPTION: Demonstrates string concatenation using compound assignment operator.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-general.md#2025-04-21_snippet_8

LANGUAGE: painless
CODE:
```
String s = 'compound';
s += ' assignment';
```

----------------------------------------

TITLE: Using KURTOSIS Function in Elasticsearch SQL
DESCRIPTION: Illustrates how to use the KURTOSIS function to quantify the shape of the distribution of values in the 'salary' field, alongside the minimum and maximum values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_36

LANGUAGE: SQL
CODE:
```
SELECT MIN(salary) AS min, MAX(salary) AS max, KURTOSIS(salary) AS k FROM emp;
```

----------------------------------------

TITLE: Example traceparent Header and Trace ID - TXT
DESCRIPTION: This snippet shows an example of the `traceparent` HTTP header value format and how the `trace.id` portion is extracted and surfaced in Elasticsearch logs for tracing requests across services. It demonstrates a specific header value and the corresponding trace ID found in logs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/api-conventions.md#_snippet_0

LANGUAGE: txt
CODE:
```
`traceparent`: 00-0af7651916cd43dd8448eb211c80319c-b7ad6b7169203331-01
`trace.id`: 0af7651916cd43dd8448eb211c80319c
```

----------------------------------------

TITLE: Setting JVM Options for Elasticsearch Node Tool
DESCRIPTION: Example showing how to override default JVM heap size (64MB) for the elasticsearch-node tool by setting the CLI_JAVA_OPTS environment variable.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/node-tool.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
export CLI_JAVA_OPTS="-Xmx1g"
bin/elasticsearch-node ...
```

----------------------------------------

TITLE: Configuring CamelCase Tokenizer in Elasticsearch
DESCRIPTION: This snippet demonstrates how to configure the `pattern` analyzer as a CamelCase tokenizer in Elasticsearch, splitting text based on specific patterns to separate words in CamelCase strings. It includes defining the analyzer with a complex regular expression.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pattern-analyzer.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "camel": {
          "type": "pattern",
          "pattern": "([^\\p{L}\\d]+)|(?<=\\D)(?=\\d)|(?<=\\d)(?=\\D)|(?<=[\\p{L}&&[^\\p{Lu}]])(?=\\p{Lu})|(?<=\\p{Lu})(?=\\p{Lu}[\\p{L}&&[^\\p{Lu}]])"
        }
      }
    }
  }
}

GET my-index-000001/_analyze
{
  "analyzer": "camel",
  "text": "MooseX::FTPClass2_beta"
}
```

----------------------------------------

TITLE: Indexing a Shape in Elasticsearch
DESCRIPTION: This snippet demonstrates how to index a document with a `shape` field in Elasticsearch. It uses the `point` type with `coordinates` to represent a geographical point. The `refresh=wait_for` parameter ensures the document is immediately searchable.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-shape-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /example/_doc/1?refresh=wait_for
{
  "name": "Lucky Landing",
  "geometry": {
    "type": "point",
    "coordinates": [ 1355.400544, 5255.530286 ]
  }
}
```

----------------------------------------

TITLE: Checking Async EQL Search Status in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the get async EQL status API to check the status of an asynchronous EQL search in a lightweight manner.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_25

LANGUAGE: console
CODE:
```
GET /_eql/search/status/FmNJRUZ1YWZCU3dHY1BIOUhaenVSRkEaaXFlZ3h4c1RTWFNocDdnY2FSaERnUTozNDE=
```

----------------------------------------

TITLE: Setting GCE Machine Permissions with gcloud Command-line Flag
DESCRIPTION: Shows the required scopes flag when creating GCE instances using gcloud to provide necessary compute read-write permissions for the Elasticsearch discovery plugin.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-tips.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
--scopes=compute-rw
```

----------------------------------------

TITLE: Managing WriteField Objects
DESCRIPTION: This snippet defines the 'WriteField' class, offering numerous methods for field manipulation in scripts, including the ability to get, set, and check the existence of field values, as well as deduplication and transformation capabilities.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.update.txt#2025-04-21_snippet_4

LANGUAGE: groovy
CODE:
```
class org.elasticsearch.script.field.WriteField {
    String getName()
    boolean exists()
    WriteField move(def)
    WriteField overwrite(def)
    void remove()
    WriteField set(def)
    WriteField append(def)
    boolean isEmpty()
    int size()
    Iterator iterator()
    def get(def)
    def get(int, def)
    boolean hasValue(Predicate)
    WriteField transform(Function)
    WriteField deduplicate()
    WriteField removeValuesIf(Predicate)
    WriteField removeValue(int)
    NestedDocument doc()
    NestedDocument doc(int)
    Iterable docs()
}
```

----------------------------------------

TITLE: WKT String Geo Sort in Elasticsearch
DESCRIPTION: Shows geo-distance sorting using Well-Known Text (WKT) format for location specification.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/sort-search-results.md#2025-04-21_snippet_14

LANGUAGE: console
CODE:
```
GET /_search
{
  "sort": [
    {
      "_geo_distance": {
        "pin.location": "POINT (-70 40)",
        "order": "asc",
        "unit": "km"
      }
    }
  ],
  "query": {
    "term": { "user": "kimchy" }
  }
}
```

----------------------------------------

TITLE: Configuring HTML Strip Processor in Elasticsearch
DESCRIPTION: An example configuration for the HTML strip processor that removes HTML tags from a field named 'foo'. Each HTML tag is replaced with a newline character. The processor can be configured with various options like target_field, ignore_missing, and conditional execution.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/htmlstrip-processor.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "html_strip": {
    "field": "foo"
  }
}
```

----------------------------------------

TITLE: Creating Catalan Custom Analyzer in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create a custom analyzer for the Catalan language in Elasticsearch using various filters, such as elision, stop words, keywords, and a stemmer. Required parameters include 'stopwords' and 'keywords' to customize filtering and processing of Catalan text.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_6

LANGUAGE: json
CODE:
```
PUT /catalan_example
{
  "settings": {
    "analysis": {
      "filter": {
        "catalan_elision": {
          "type":       "elision",
          "articles":   [ "d", "l", "m", "n", "s", "t"]
          ,"articles_case": true
        },
        "catalan_stop": {
          "type":       "stop",
          "stopwords":  "_catalan_" <1>
        },
        "catalan_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["example"] <2>
        },
        "catalan_stemmer": {
          "type":       "stemmer",
          "language":   "catalan"
        }
      },
      "analyzer": {
        "rebuilt_catalan": {
          "tokenizer":  "standard",
          "filter": [
            "catalan_elision",
            "lowercase",
            "catalan_stop",
            "catalan_keywords",
            "catalan_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Span Within Query with Elasticsearch Query DSL - Console
DESCRIPTION: This snippet demonstrates the use of the span within query in Elasticsearch's query DSL. The purpose is to find matches within a span query constrained by another enclosing span query. The 'little' clause specifies the query for the enclosed span using span terms, while the 'big' clause defines the enclosing span with span near clauses allowing for slop and ordered matches. Inputs are span query clauses, and the expected output is the search results matching the criteria. This query works in Elasticsearch (requires an Elasticsearch instance).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-span-within-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "span_within": {
      "little": {
        "span_term": { "field1": "foo" }
      },
      "big": {
        "span_near": {
          "clauses": [
            { "span_term": { "field1": "bar" } },
            { "span_term": { "field1": "baz" } }
          ],
          "slop": 5,
          "in_order": true
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Certificate Authority for Elasticsearch in Bash
DESCRIPTION: Generates a Certificate Authority (CA) in PEM format with a 9999-day validity period and 2048-bit key size. The script creates the CA files, extracts them from the zip archive, and cleans up temporary files.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/qa/saml-rest-tests/src/javaRestTest/resources/ssl/README.txt#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
elasticsearch-certutil ca --pem --out ${PWD}/ca.zip -days 9999 -keysize 2048 -ca-dn "CN=Certificate Authority,DC=localhost"
unzip ca.zip
mv ca/ca.* ./
rmdir ca
rm ca.zip
```

----------------------------------------

TITLE: Implementing Armenian Analyzer as Custom Analyzer in Elasticsearch
DESCRIPTION: Creates a custom analyzer that replicates the functionality of the built-in Armenian analyzer, showing the configuration of Armenian-specific stopwords, keyword marking for stem exclusion, and stemming.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /armenian_example
{
  "settings": {
    "analysis": {
      "filter": {
        "armenian_stop": {
          "type":       "stop",
          "stopwords":  "_armenian_" 
        },
        "armenian_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["օրինակ"] 
        },
        "armenian_stemmer": {
          "type":       "stemmer",
          "language":   "armenian"
        }
      },
      "analyzer": {
        "rebuilt_armenian": {
          "tokenizer":  "standard",
          "filter": [
            "lowercase",
            "armenian_stop",
            "armenian_keywords",
            "armenian_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring HTTP SAML Authentication in Elasticsearch
DESCRIPTION: YAML configuration for enabling SAML authentication in Elasticsearch. This configures Security Assertion Markup Language authentication and specifies the SAML realm to use.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/watcher/licenses/failureaccess-NOTICE.txt#2025-04-21_snippet_7

LANGUAGE: yaml
CODE:
```
xpack.security.http.authentication.type: saml
xpack.security.http.authentication.realm: saml1
```

----------------------------------------

TITLE: Basic Dot Expander Configuration in Elasticsearch
DESCRIPTION: Demonstrates basic configuration of the dot expander processor to convert a field with dots in its name into an object structure.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/dot-expand-processor.md#2025-04-21_snippet_0

LANGUAGE: js
CODE:
```
{
  "dot_expander": {
    "field": "foo.bar"
  }
}
```

----------------------------------------

TITLE: Loading Sample Seat Data into Elasticsearch Using Bulk API
DESCRIPTION: Ingests sample seat data with details about theater plays, actors, dates, times, seats, and prices using the bulk API with the 'seats' ingest pipeline.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-context-examples.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST seats/_bulk?pipeline=seats&refresh=true
{"create":{"_index":"seats","_id":"1"}}
{"theatre":"Skyline","play":"Rent","actors":["James Holland","Krissy Smith","Joe Muir","Ryan Earns"],"date":"2021-4-1","time":"3:00PM","cost":37,"row":1,"number":7,"sold":false}
{"create":{"_index":"seats","_id":"2"}}
{"theatre":"Graye","play":"Rent","actors":["Dave Christmas"],"date":"2021-4-1","time":"3:00PM","cost":30,"row":3,"number":5,"sold":false}
{"create":{"_index":"seats","_id":"3"}}
{"theatre":"Graye","play":"Rented","actors":["Dave Christmas"],"date":"2021-4-1","time":"3:00PM","cost":33,"row":2,"number":6,"sold":false}
{"create":{"_index":"seats","_id":"4"}}
{"theatre":"Skyline","play":"Rented","actors":["James Holland","Krissy Smith","Joe Muir","Ryan Earns"],"date":"2021-4-1","time":"3:00PM","cost":20,"row":5,"number":2,"sold":false}
{"create":{"_index":"seats","_id":"5"}}
{"theatre":"Down Port","play":"Pick It Up","actors":["Joel Madigan","Jessica Brown","Baz Knight","Jo Hangum","Rachel Grass","Phoebe Miller"],"date":"2018-4-2","time":"8:00PM","cost":27.5,"row":3,"number":2,"sold":false}
{"create":{"_index":"seats","_id":"6"}}
{"theatre":"Down Port","play":"Harriot","actors":["Phoebe Miller","Sarah Notch","Brayden Green","Joshua Iller","Jon Hittle","Rob Kettleman","Laura Conrad","Simon Hower","Nora Blue","Mike Candlestick","Jacey Bell"],"date":"2018-8-7","time":"8:00PM","cost":30,"row":1,"number":10,"sold":false}
{"create":{"_index":"seats","_id":"7"}}
{"theatre":"Skyline","play":"Auntie Jo","actors":["Jo Hangum","Jon Hittle","Rob Kettleman","Laura Conrad","Simon Hower","Nora Blue"],"date":"2018-10-2","time":"5:40PM","cost":22.5,"row":7,"number":10,"sold":false}
{"create":{"_index":"seats","_id":"8"}}
{"theatre":"Skyline","play":"Test Run","actors":["Joe Muir","Ryan Earns","Joel Madigan","Jessica Brown"],"date":"2018-8-5","time":"7:30PM","cost":17.5,"row":11,"number":12,"sold":true}
{"create":{"_index":"seats","_id":"9"}}
{"theatre":"Skyline","play":"Sunnyside Down","actors":["Krissy Smith","Joe Muir","Ryan Earns","Nora Blue","Mike Candlestick","Jacey Bell"],"date":"2018-6-12","time":"4:00PM","cost":21.25,"row":8,"number":15,"sold":true}
{"create":{"_index":"seats","_id":"10"}}
{"theatre":"Graye","play":"Line and Single","actors":["Nora Blue","Mike Candlestick"],"date":"2018-6-5","time":"2:00PM","cost":30,"row":1,"number":2,"sold":false}
{"create":{"_index":"seats","_id":"11"}}
{"theatre":"Graye","play":"Hamilton","actors":["Lin-Manuel Miranda","Leslie Odom Jr."],"date":"2018-6-5","time":"2:00PM","cost":5000,"row":1,"number":20,"sold":true}
```

----------------------------------------

TITLE: Deleting Old Snapshots in Elasticsearch Repository
DESCRIPTION: This method deletes snapshots older than a specified timestamp from an Elasticsearch repository. It handles pagination and retries failed deletions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/inference/licenses/slf4j-NOTICE.txt#2025-04-22_snippet_0

LANGUAGE: Java
CODE:
```
public void deleteOldSnapshots(
        String repoName,
        long beforeTimestamp,
        int batchSize,
        ActionListener<DeleteSnapshotResult> listener
    ) {
        if (batchSize <= 0) {
            throw new IllegalArgumentException("batchSize must be greater than 0");
        }
        final AtomicBoolean hasMore = new AtomicBoolean(true);
        final AtomicReference<String> lastSeenName = new AtomicReference<>();
        final AtomicInteger deleted = new AtomicInteger();
        final AtomicInteger failed = new AtomicInteger();

        final ActionListener<DeleteSnapshotResult> wrappedListener = ActionListener.wrap(r -> {
            if (failed.get() > 0) {
                listener.onFailure(
                    new SnapshotException(
                        repoName,
                        "_all",
                        "failed to delete [" + failed.get() + "] snapshots; successfully deleted [" + deleted.get() + "] snapshots"
                    )
                );
            } else {
                listener.onResponse(r);
            }
        }, listener::onFailure);

        deleteOldSnapshotsLoop(repoName, beforeTimestamp, batchSize, hasMore, lastSeenName, deleted, failed, wrappedListener);
    }
```

----------------------------------------

TITLE: Converting to String in EQL
DESCRIPTION: Converts any given value (integer, float, boolean, string, etc.) into its string representation. Handles null inputs. Note that it does not support conversion from 'text' field data types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-function-ref.md#_snippet_14

LANGUAGE: eql
CODE:
```
string(42)               // returns "42"
string(42.5)             // returns "42.5"
string("regsvr32.exe")   // returns "regsvr32.exe"
string(true)             // returns "true"

// null handling
string(null)             // returns null
```

----------------------------------------

TITLE: Creating Certificate Authority (CA) for Elasticsearch
DESCRIPTION: This snippet demonstrates how to create a new Certificate Authority using the elasticsearch-certutil tool. It generates a CA key pair and extracts the public and private keys.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/build-tools-internal/src/main/resources/run.ssl/readme.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
bin/elasticsearch-certutil ca -pem -days 7305
unzip elastic-stack-ca.zip
mv ca/ca.crt public-ca.pem
mv ca/ca.key private-ca.key
```

----------------------------------------

TITLE: Setting Preload During Index Creation
DESCRIPTION: REST API call example demonstrating how to configure index.store.preload when creating a new index to preload specific file extensions into memory.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/preloading-data-into-file-system-cache.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "index.store.preload": ["nvd", "dvd"]
  }
}
```

----------------------------------------

TITLE: Configuring ILM Policy with Explicit Shard Count Shrink Action
DESCRIPTION: Example of configuring an ILM policy that shrinks an index to a specific number of shards in the warm phase. The policy sets the target number of shards to 1.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-shrink.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "warm": {
        "actions": {
          "shrink" : {
            "number_of_shards": 1
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Handling Missing Values in Top Metrics Aggregation
DESCRIPTION: This example demonstrates how to handle missing values in top_metrics aggregation using the 'missing' parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-top-metrics.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /my-index
{
  "mappings": {
    "properties": {
      "nr":    { "type": "integer" },
      "state":  { "type": "keyword"  }
    }
  }
}
POST /my-index/_bulk?refresh
{"index": {}}
{"nr": 1, "state": "started"}
{"index": {}}
{"nr": 2, "state": "stopped"}
{"index": {}}
{"nr": 3, "state": "N/A"}
{"index": {}}
{"nr": 4}
POST /my-index/_search?filter_path=aggregations
{
  "aggs": {
    "my_top_metrics": {
      "top_metrics": {
        "metrics": {
          "field": "state",
          "missing": "N/A"},
        "sort": {"nr": "desc"}
      }
    }
  }
}
```

----------------------------------------

TITLE: Extracting with Right Padding in DISSECT ESQL
DESCRIPTION: Illustrates using the `->` modifier in a `DISSECT` pattern to handle variable amounts of padding (spaces) between fields (`ts` and `level`). The `ts` field is matched, and the modifier allows any number of following spaces before matching the delimiter and the next field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-process-data-with-dissect-grok.md#_snippet_2

LANGUAGE: ESQL
CODE:
```
ROW message="1998-08-10T17:15:42          WARN"
| DISSECT message """%{ts->} %{level}"""
```

----------------------------------------

TITLE: Creating Custom Analyzer with Unique Token Filter in Elasticsearch
DESCRIPTION: This example shows how to use the create index API to configure a new custom analyzer that incorporates the unique filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-unique-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT custom_unique_example
{
  "settings" : {
    "analysis" : {
      "analyzer" : {
        "standard_truncate" : {
        "tokenizer" : "standard",
        "filter" : ["unique"]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Declaring Variables in Painless
DESCRIPTION: Examples of different variations of variable declaration in Painless, including primitive types, reference types, and arrays.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-variables.md#2025-04-21_snippet_0

LANGUAGE: painless
CODE:
```
int x;
List y;
int x, y = 5, z;
def d;
int i = 10;
float[] f;
Map[][] m;
```

----------------------------------------

TITLE: Indexing Suggestions with Category Context Using Path in Elasticsearch
DESCRIPTION: This example shows how to index suggestions with category context when a 'path' is defined in the mapping. It demonstrates indexing multiple suggestions and their associated categories using a separate field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_21

LANGUAGE: console
CODE:
```
PUT place_path_category/_doc/1
{
  "suggest": ["timmy's", "starbucks", "dunkin donuts"],
  "cat": ["cafe", "food"] <1>
}
```

----------------------------------------

TITLE: Installing and Running Elastic Connector Service with Make Shell
DESCRIPTION: Provides the shell commands to install necessary dependencies and start the Elastic connector service from the cloned source code. These commands leverage the `Makefile` provided in the repository for setup and execution. Python 3.10 or 3.11 is required.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-run-from-source.md#_snippet_3

LANGUAGE: shell
CODE:
```
make install
make run
```

----------------------------------------

TITLE: Plus Operator Examples in Regular Expressions
DESCRIPTION: Examples showing the plus operator which matches one or more occurrences of the preceding character.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/regexp-syntax.md#2025-04-21_snippet_5

LANGUAGE: text
CODE:
```
ab+     # matches 'ab', 'abb', 'abbb', etc.
```

----------------------------------------

TITLE: ESQL Type Compatibility Matrix Table in Markdown
DESCRIPTION: A markdown table defining valid type combinations for ESQL functions. Shows compatible type combinations between first argument, rest arguments, and result types. Important for understanding type coercion and compatibility in ESQL operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/types/least.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| first | rest | result |
| --- | --- | --- |
| boolean | boolean | boolean |
| boolean | | boolean |
| date | date | date |
| date_nanos | date_nanos | date_nanos |
| double | double | double |
| integer | integer | integer |
| integer | | integer |
| ip | ip | ip |
| keyword | keyword | keyword |
| keyword | | keyword |
| long | long | long |
| long | | long |
| text | text | keyword |
| text | | keyword |
| version | version | version |
```

----------------------------------------

TITLE: Listing Elasticsearch Users
DESCRIPTION: Example demonstrating how to list all users registered in the file realm showing their assigned roles.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/users-command.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
bin/elasticsearch-users list
rdeniro        : admin
alpacino       : power_user
jacknich       : monitoring,network
```

----------------------------------------

TITLE: Indexing All Rows of a Specific Database - JSON Snippet - JavaScript
DESCRIPTION: This JSON snippet is designed to index all rows of a specified database in Notion by referencing the database ID. This helps to streamline the synchronization of specific data structures.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-notion.md#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
{
  "database_query_filters": [
    {
      "database_id": "database_id"
    }
  ]
}
```

----------------------------------------

TITLE: Detailed Token Analysis with Keyword Attributes
DESCRIPTION: Advanced analysis request showing token attributes and keyword marking details with explanation enabled.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-keyword-marker-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer": "whitespace",
  "filter": [
    {
      "type": "keyword_marker",
      "keywords": [ "jumping" ]
    },
    "stemmer"
  ],
  "text": "fox running and jumping",
  "explain": true,
  "attributes": "keyword"
}
```

----------------------------------------

TITLE: Creating Azure VM Image for Elasticsearch Node (Shell)
DESCRIPTION: This snippet demonstrates how to create an image from an existing Elasticsearch node VM in Azure. It includes shutting down the instance, capturing the image, and recreating the instance using the new image.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-azure-classic-scale.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
# Shutdown the instance
azure vm shutdown myesnode1

# Create an image from this instance (it could take some minutes)
azure vm capture myesnode1 esnode-image --delete

# Note that the previous instance has been deleted (mandatory)
# So you need to create it again and BTW create other instances.

azure vm create azure-elasticsearch-cluster \
                esnode-image \
                --vm-name myesnode1 \
                --location "West Europe" \
                --vm-size extrasmall \
                --ssh 22 \
                --ssh-cert /tmp/azure-certificate.pem \
                elasticsearch password1234\!\!
```

----------------------------------------

TITLE: Invalid Boxing/Unboxing in Painless
DESCRIPTION: Illustrates invalid boxing and unboxing attempts in Painless that result in errors. Explicit boxing and unboxing operations are not allowed, leading to compilation errors when attempting these conversions directly.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-casting.md#2025-04-21_snippet_11

LANGUAGE: painless
CODE:
```
Integer x = 1;                   // error <1>
Integer y = (Integer)1;          // error <2>
int a = Integer.valueOf(1);      // error <3>
int b = (int)Integer.valueOf(1); // error <4>
```

----------------------------------------

TITLE: MongoDB Find Query Sync Rule Example
DESCRIPTION: JSON structure demonstrating a find query with text search and pagination options
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-mongodb.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
{
	"find": {
		"filter": {
			"$text": {
				"$search": "garden",
				"$caseSensitive": false
			}
		},
		"skip": 10,
		"limit": 1000
	}
}
```

----------------------------------------

TITLE: Kuromoji Tokenizer Configuration with Inline Rules
DESCRIPTION: Elasticsearch configuration example showing how to set up a kuromoji tokenizer with inline user dictionary rules.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-tokenizer.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
PUT kuromoji_sample
{
  "settings": {
    "index": {
      "analysis": {
        "tokenizer": {
          "kuromoji_user_dict": {
            "type": "kuromoji_tokenizer",
            "mode": "extended",
            "user_dictionary_rules": ["東京スカイツリー,東京 スカイツリー,トウキョウ スカイツリー,カスタム名詞"]
          }
        },
        "analyzer": {
          "my_analyzer": {
            "type": "custom",
            "tokenizer": "kuromoji_user_dict"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating an API key for the connector
DESCRIPTION: This snippet shows how to create an API key for the OneDrive connector using the Elasticsearch Security API.  The API key is configured with cluster privileges and index privileges required for the connector to function correctly.  The response includes an encoded value to use in configuration files.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-onedrive.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /_security/api_key
{
  "name": "connector_name-connector-api-key",
  "role_descriptors": {
    "connector_name-connector-role": {
      "cluster": [
        "monitor",
        "manage_connector"
      ],
      "indices": [
        {
          "names": [
            "index_name",
            ".search-acl-filter-index_name",
            ".elastic-connectors*"
          ],
          "privileges": [
            "all"
          ],
          "allow_restricted_indices": false
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Metric Aggregation Combine Context Variables and Return Types
DESCRIPTION: Defines the available variables and return types for Painless combine scripts in metric aggregations. Scripts have access to read-only params Map for user parameters and state Map containing values from previous map script. Scripts must return a value that can be used in a subsequent reduce script or as final result.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-metric-agg-combine-context.md#2025-04-21_snippet_0

LANGUAGE: painless
CODE:
```
// Available variables:
params  // Map (read-only) - User-defined parameters from query
state   // Map - Values from prior map script

// Valid return types:
// - List
// - Map 
// - String
// - primitive
```

----------------------------------------

TITLE: Capturing Run As Granted Event in Elasticsearch
DESCRIPTION: Example JSON audit log entry for when a run-as authentication request is granted. Shows successful impersonation of one user by another with superuser privileges.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_18

LANGUAGE: json
CODE:
```
{"type":"audit", "timestamp":"2020-12-30T22:44:42,068+0200", "node.id": "0RMNyghkQYCc_gVd1G6tZQ", "event.type":"transport", "event.action": "run_as_granted", "user.name":"elastic", "user.run_as.name":"user1", "user.realm":"reserved", "user.run_as.realm":"default_native", "user.roles":["superuser"], "origin.type":"rest", "origin.address": "[::1]:52623", "request.id":"dGqPTdEQSX2TAPS3cvc1qA", "action": "indices:data/read/search", "request.name":"SearchRequest", "indices":["alias1"]}
```

----------------------------------------

TITLE: Terms Lookup Query Example
DESCRIPTION: Demonstrates using terms lookup to find documents with color values matching a specified document
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-terms-query.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET my-index-000001/_search?pretty
{
  "query": {
    "terms": {
        "color" : {
            "index" : "my-index-000001",
            "id" : "2",
            "path" : "color"
        }
    }
  }
}
```

----------------------------------------

TITLE: Cardinality Aggregation with Runtime Fields
DESCRIPTION: Example showing cardinality aggregation on a runtime field that combines multiple fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-cardinality-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "runtime_mappings": {
    "type_and_promoted": {
      "type": "keyword",
      "script": "emit(doc['type'].value + ' ' + doc['promoted'].value)"
    }
  },
  "aggs": {
    "type_promoted_count": {
      "cardinality": {
        "field": "type_and_promoted"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Index Mapping with Structured and Unstructured Fields in Elasticsearch
DESCRIPTION: This snippet shows how to define index mappings that combine an annotated_text field for unstructured content with a structured field for entity references. The structured field includes a keyword sub-field to support aggregations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/mapper-annotated-text-tips.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "my_unstructured_text_field": {
        "type": "annotated_text"
      },
      "my_structured_people_field": {
        "type": "text",
        "fields": {
          "keyword" : {
            "type": "keyword"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Array to Nested Object Conversion in Synthetic _source for Flattened Fields
DESCRIPTION: This example shows how synthetic _source converts an array of objects in a flattened field to a nested object structure. It creates an index with synthetic _source enabled and inserts a document with an array of objects.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/flattened.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "flattened": { "type": "flattened" }
    }
  }
}
PUT idx/_doc/1
{
  "flattened": {
      "field": [
        { "id": 1, "name": "foo" },
        { "id": 2, "name": "bar" },
        { "id": 3, "name": "baz" }
      ]
  }
}
```

LANGUAGE: console-result
CODE:
```
{
    "flattened": {
      "field": {
          "id": [ "1", "2", "3" ],
          "name": [ "bar", "baz", "foo" ]
      }
    }
}
```

----------------------------------------

TITLE: Explaining RRF Scoring in Elasticsearch Response
DESCRIPTION: Example of an Elasticsearch response with explain=true showing how RRF scores are computed for each document. The explanation includes the final score, description of computation, and details for each query's contribution.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reciprocal-rank-fusion.md#2025-04-21_snippet_9

LANGUAGE: js
CODE:
```
{
    "hits":
    [
        {
            "_index": "example-index",
            "_id": "3",
            "_score": 0.8333334,
            "_explanation":
            {
                "value": 0.8333334,                                                                                                                                               <1>
                "description": "rrf score: [0.8333334] computed for initial ranks [2, 1] with rankConstant: [1] as sum of [1 / (rank + rankConstant)] for each query",            <2>
                "details":                                                                                                                                                        <3>
                [
                    {
                        "value": 2,                                                                                                                                               <4>
                        "description": "rrf score: [0.33333334], for rank [2] in query at index [0] computed as [1 / (2 + 1]), for matching query with score: ",
                        "details":                                                                                                                                                <5>
                        [
                            {
                                "value": 0.15876243,
                                "description": "weight(text:rrf in 0) [PerFieldSimilarity], result of:",
                                "details":
                                [
                                    ...
                                ]
                            }
                        ]
                    },
                    {
                        "value": 1,                                                                                                                                              <6>
                        "description": "rrf score: [0.5], for rank [1] in query at index [1] computed as [1 / (1 + 1]), for matching query with score: ",
                        "details":
                        [
                            {
                                "value": 1,
                                "description": "within top k documents",
                                "details":
                                []
                            }
                        ]
                    }
                ]
            }
        }
        ...
    ]
}
```

----------------------------------------

TITLE: Setting Elasticsearch Logger Level in Console
DESCRIPTION: Shows how to dynamically update logging settings. This example increases the logging level of the 'indices.recovery' module to DEBUG.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/miscellaneous-cluster-settings.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /_cluster/settings
{
  "persistent": {
    "logger.org.elasticsearch.indices.recovery": "DEBUG"
  }
}
```

----------------------------------------

TITLE: Enabling Metadata Fields Access in ESQL
DESCRIPTION: Demonstrates how to enable access to metadata fields using the FROM source command with METADATA directive.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-metadata-fields.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM index METADATA _index, _id
```

----------------------------------------

TITLE: Querying Documents with Noisy Terms (Console)
DESCRIPTION: A console snippet showing an Elasticsearch `_search` request using a `simple_query_string` to find documents containing both 'elasticsearch' and the noisy term 'pozmantier'. It includes `_source` filtering and `highlighting` to examine the context within the document content.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-significanttext-aggregation.md#_snippet_2

LANGUAGE: console
CODE:
```
GET news/_search
{
  "query": {
    "simple_query_string": {
      "query": "+elasticsearch  +pozmantier"
    }
  },
  "_source": [
    "title",
    "source"
  ],
  "highlight": {
    "fields": {
      "content": {}
    }
  }
}
```

----------------------------------------

TITLE: Running Asynchronous EQL Search in Elasticsearch
DESCRIPTION: This snippet demonstrates how to run an asynchronous EQL search by setting the wait_for_completion_timeout parameter, which is useful for searches across large data sets or frozen data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_23

LANGUAGE: console
CODE:
```
GET /my-data-stream/_eql/search
{
  "wait_for_completion_timeout": "2s",
  "query": """
    process where process.name == "cmd.exe"
  """
}
```

----------------------------------------

TITLE: minimum_should_match with Cross-field Search Type
DESCRIPTION: Demonstrates using minimum_should_match with the cross_fields search type. This groups fields with the same analyzer together during analysis, creating per-term blended queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_22

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "query_string": {
      "fields": [
        "title",
        "content"
      ],
      "query": "this OR that OR thus",
      "type": "cross_fields",
      "minimum_should_match": 2
    }
  }
}
```

----------------------------------------

TITLE: Conditional Function Transformations
DESCRIPTION: Examples of IIF, COALESCE, NULLIF, and CASE expressions in SQL queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_12

LANGUAGE: sql
CODE:
```
SELECT IIF(int > 20, 'foo', 'bar') FROM test GROUP BY 1;
```

LANGUAGE: json
CODE:
```
InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.gt(InternalQlScriptUtils.docValue(doc,params.v0),params.v1))?params.v2:params.v3
```

----------------------------------------

TITLE: Indexing GeoJSON Envelope in Elasticsearch
DESCRIPTION: Example of indexing an Envelope type in Elasticsearch using GeoJSON format. The envelope is defined by upper left and lower right coordinates to represent a bounding rectangle.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/shape.md#2025-04-21_snippet_18

LANGUAGE: json
CODE:
```
POST /example/_doc
{
  "location" : {
    "type" : "envelope",
    "coordinates" : [ [1000.0, 100.0], [1001.0, 100.0] ]
  }
}
```

----------------------------------------

TITLE: IP Range Aggregation with CIDR Masks
DESCRIPTION: Shows how to use CIDR mask notation to define IP ranges for aggregation queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-iprange-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /ip_addresses/_search
{
  "size": 0,
  "aggs": {
    "ip_ranges": {
      "ip_range": {
        "field": "ip",
        "ranges": [
          { "mask": "10.0.0.0/25" },
          { "mask": "10.0.0.127/25" }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Calculating Multiple Percentiles with ESQL
DESCRIPTION: Demonstrates how to calculate multiple percentiles (0th, 50th, and 99th) of the salary column using the PERCENTILE function in a single query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/percentile.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS p0 = PERCENTILE(salary,  0)
     , p50 = PERCENTILE(salary, 50)
     , p99 = PERCENTILE(salary, 99)
```

----------------------------------------

TITLE: Modifying Datetime Zones with Painless
DESCRIPTION: This snippet demonstrates how to change the timezone of a complex ZonedDateTime object using Painless scripting. It includes methods to alter both directly-created ZonedDateTimes and those parsed from string format.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_16

LANGUAGE: painless
CODE:
```
ZonedDateTime utc =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 0, ZoneId.of('Z'));
ZonedDateTime pst = utc.withZoneSameInstant(ZoneId.of('America/Los_Angeles'));
```

LANGUAGE: painless
CODE:
```
String gmtString = 'Thu, 13 Oct 1983 22:15:30 GMT';
ZonedDateTime gmtZdt = ZonedDateTime.parse(gmtString,
        DateTimeFormatter.RFC_1123_DATE_TIME); <1>
ZonedDateTime pstZdt =
        gmtZdt.withZoneSameInstant(ZoneId.of('America/Los_Angeles'));
String pstString = pstZdt.format(DateTimeFormatter.RFC_1123_DATE_TIME);
```

----------------------------------------

TITLE: Recreating and Customizing Stop Analyzer in Elasticsearch
DESCRIPTION: This snippet demonstrates how to recreate the built-in stop analyzer as a custom analyzer, providing a starting point for further customization. It includes the index creation with detailed analyzer configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-analyzer.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /stop_example
{
  "settings": {
    "analysis": {
      "filter": {
        "english_stop": {
          "type":       "stop",
          "stopwords":  "_english_"
        }
      },
      "analyzer": {
        "rebuilt_stop": {
          "tokenizer": "lowercase",
          "filter": [
            "english_stop"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Syntax for COUNT(DISTINCT) Function in Elasticsearch SQL
DESCRIPTION: This snippet shows the syntax for `COUNT(DISTINCT <field_name>)`. It counts the total number of unique, non-null values for the specified field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_8

LANGUAGE: SQL
CODE:
```
COUNT(DISTINCT field_name) <1>
```

----------------------------------------

TITLE: Configuring Drop Processor in Elasticsearch Ingest Pipeline (JSON)
DESCRIPTION: This snippet demonstrates how to configure a Drop processor in an Elasticsearch ingest pipeline. The processor is set to drop documents based on a condition where the 'network_name' field equals 'Guest'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/drop-processor.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "drop": {
    "if" : "ctx.network_name == 'Guest'"
  }
}
```

----------------------------------------

TITLE: Remove one or multiple settings from the Elasticsearch keystore
DESCRIPTION: Deletes specified settings from the keystore, effective immediately upon command execution. Prompts for password if the keystore is protected.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/elasticsearch-keystore.md#_snippet_7

LANGUAGE: Shell
CODE:
```
bin/elasticsearch-keystore remove the.setting.name.to.remove
```

----------------------------------------

TITLE: Performing Time Series Aggregation in Elasticsearch
DESCRIPTION: This snippet shows how to perform a basic time series aggregation using the 'time_series' aggregation type. The 'keyed' parameter is set to false, meaning the results will be returned as an array rather than a keyed map.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-time-series-aggregation.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
GET /_search
{
  "aggs": {
    "ts": {
      "time_series": { "keyed": false }
    }
  }
}
```

----------------------------------------

TITLE: Histogram Aggregations in Elasticsearch SQL
DESCRIPTION: Examples of histogram-based grouping with different intervals (years, months, days) and ordering options. Includes calendar and fixed interval configurations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
SELECT MAX(int) FROM test GROUP BY HISTOGRAM(date, INTERVAL 2 YEARS);
```

LANGUAGE: elasticsearch
CODE:
```
"date_histogram":{"field":"date","missing_bucket":true,"order":"asc","fixed_interval":"62208000000ms","time_zone":"Z"}}]}
```

----------------------------------------

TITLE: Explicitly Removing Index Blocks with Settings Override
DESCRIPTION: This snippet shows how to manually remove all index blocks from the source index when creating a new index. It sets all block settings to null to ensure the new index is fully writable and accessible.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/create-index-from-source.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
POST _create_from/my-index/my-new-index
{
  "settings_override": {
    "index": {
      "blocks.write": null,
      "blocks.read": null,
      "blocks.read_only": null,
      "blocks.read_only_allow_delete": null,
      "blocks.metadata": null
    }
  }
}
```

----------------------------------------

TITLE: Using Global Suggest Text
DESCRIPTION: Example of using a global suggest text to avoid repetition across multiple suggestions. The text is defined once at the suggest level and applies to all suggestions in the request.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST _search
{
  "suggest": {
    "text" : "tring out Elasticsearch",
    "my-suggest-1" : {
      "term" : {
        "field" : "message"
      }
    },
    "my-suggest-2" : {
       "term" : {
        "field" : "user"
       }
    }
  }
}
```

----------------------------------------

TITLE: Computing SHA1 Hashes in ESQL Pipeline
DESCRIPTION: This example demonstrates an ESQL pipeline that filters out error messages, computes SHA1 hashes for message values, and keeps only the relevant fields. The pipeline processes connection messages and shows the resulting SHA1 hash for each message value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/sha1.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM sample_data
| WHERE message != "Connection error"
| EVAL sha1 = sha1(message)
| KEEP message, sha1
```

----------------------------------------

TITLE: Advanced Sync Rules for Confluence Connector
DESCRIPTION: Defines advanced synchronization rules for filtering Confluence data based on custom queries. Each query is specified in JSON, filtering data by criteria such as space keys and date ranges. This allows complex data synchronization scenarios tailored to specific content.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-confluence.md#2025-04-21_snippet_6

LANGUAGE: json
CODE:
```
[
  {
    "query": "space = DEV"
  }
]
```

LANGUAGE: json
CODE:
```
[
  {
    "query": "created >= now('-5w')"
  },
  {
    "query": "lastmodified < startOfYear()"
  }
]
```

LANGUAGE: json
CODE:
```
[
  {
    "query": "type in ('page', 'attachment') AND space.key = 'SD'"
  }
]
```

----------------------------------------

TITLE: Query String Grouping
DESCRIPTION: Shows how to use parentheses to group terms, target specific fields, and apply complex query logic
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_10

LANGUAGE: elasticsearch
CODE:
```
(quick OR brown) AND fox
```

LANGUAGE: elasticsearch
CODE:
```
status:(active OR pending) title:(full text search)^2
```

----------------------------------------

TITLE: DISSECT Function Syntax in ESQL
DESCRIPTION: The basic syntax for the DISSECT function in ESQL. It takes an input column, a pattern string, and an optional separator for appended values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/dissect.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
DISSECT input "pattern" [APPEND_SEPARATOR="<separator>"]
```

----------------------------------------

TITLE: Basic String Stats Aggregation Query in Elasticsearch
DESCRIPTION: Demonstrates how to compute basic string statistics (count, length metrics, entropy) on a keyword field using the string_stats aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-string-stats-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST /my-index-000001/_search?size=0
{
  "aggs": {
    "message_stats": { "string_stats": { "field": "message.keyword" } }
  }
}
```

----------------------------------------

TITLE: Configuring Fixed Thread Pool in Elasticsearch
DESCRIPTION: Configuration example for a fixed thread pool type with size and queue size parameters
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/thread-pool-settings.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
thread_pool:
    write:
        size: 30
        queue_size: 1000
```

----------------------------------------

TITLE: Retrieving Source1 Access Control Document in Elasticsearch
DESCRIPTION: Example of an Elasticsearch GET request to retrieve the access control document for a user from the source1 index, showing the structure of user identity and access control query templates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-dls-e2e-guide.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
GET .search-acl-filter-source1
{
  "_id": "example.user@example.com",
  "identity": {
      "username": "example username",
      "email": "example.user@example.com"
   },
   "query": {
        "template": {
            "params": {
                "access_control": [
                    "example.user@example.com",
                    "source1-user-group"]
            }
        },
        "source": "..."
    }
}
```

----------------------------------------

TITLE: Basic Cumulative Cardinality Aggregation Syntax
DESCRIPTION: Shows the basic structure of a cumulative cardinality aggregation that references another cardinality aggregation via buckets_path.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-cumulative-cardinality-aggregation.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "cumulative_cardinality": {
    "buckets_path": "my_cardinality_agg"
  }
}
```

----------------------------------------

TITLE: Basic Stats Bucket Aggregation Syntax in Elasticsearch
DESCRIPTION: Shows the basic syntax structure for a stats_bucket aggregation in isolation. This demonstrates the minimal required configuration using buckets_path parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-stats-bucket-aggregation.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
{
  "stats_bucket": {
    "buckets_path": "the_sum"
  }
}
```

----------------------------------------

TITLE: Basic EQL Sample Query with Join Keys
DESCRIPTION: Example of a basic EQL sample query with host-based filtering and multiple conditions, including response showing matched events.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_15

LANGUAGE: console
CODE:
```
GET /my-index*/_eql/search
{
  "query": """
    sample by host
      [any where uptime > 0]   by os
      [any where port > 100]   by op_sys
      [any where bool == true] by os
  """
}
```

----------------------------------------

TITLE: Mapping a Constant Keyword Field with Value (Console)
DESCRIPTION: This snippet shows how to create an index and map a field named `level` as a `constant_keyword` type, explicitly setting its `value` to "debug". This ensures all documents in the index for this field will have the value "debug".
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/keyword.md#_snippet_4

LANGUAGE: console
CODE:
```
PUT logs-debug
{
  "mappings": {
    "properties": {
      "@timestamp": {
        "type": "date"
      },
      "message": {
        "type": "text"
      },
      "level": {
        "type": "constant_keyword",
        "value": "debug"
      }
    }
  }
}
```

----------------------------------------

TITLE: Installing Classic Elasticsearch Plugin (Shell)
DESCRIPTION: This command demonstrates how to install a classic Elasticsearch plugin packaged as a ZIP file from a local filesystem path using the `elasticsearch-plugin` management tool. This is typically used for testing plugins during development before distributing them.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/extend/creating-classic-plugins.md#_snippet_0

LANGUAGE: Shell
CODE:
```
bin/elasticsearch-plugin install file:///path/to/your/plugin
```

----------------------------------------

TITLE: Basic Rank Evaluation Request Structure in Elasticsearch
DESCRIPTION: Shows the basic structure of a rank evaluation request with sections for requests and metrics.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-rank-eval.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /my-index-000001/_rank_eval
{
  "requests": [ ... ],                            
  "metric": {                                     
    "mean_reciprocal_rank": { ... }               
  }
}
```

----------------------------------------

TITLE: Configuring Coercion for Integer Fields in Elasticsearch
DESCRIPTION: This snippet demonstrates how to configure coercion for integer fields in an Elasticsearch index mapping. It shows one field with default coercion and another with coercion explicitly disabled.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/coerce.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "number_one": {
        "type": "integer"
      },
      "number_two": {
        "type": "integer",
        "coerce": false
      }
    }
  }
}

PUT my-index-000001/_doc/1
{
  "number_one": "10"
}

PUT my-index-000001/_doc/2
{
  "number_two": "10"
}
```

----------------------------------------

TITLE: Array Format Geo Sort in Elasticsearch
DESCRIPTION: Shows geo-distance sorting using array format [lon, lat] for location specification.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/sort-search-results.md#2025-04-21_snippet_16

LANGUAGE: console
CODE:
```
GET /_search
{
  "sort": [
    {
      "_geo_distance": {
        "pin.location": [ -70, 40 ],
        "order": "asc",
        "unit": "km"
      }
    }
  ],
  "query": {
    "term": { "user": "kimchy" }
  }
}
```

----------------------------------------

TITLE: Painless Script for Action-Specific Transform - Multi Action
DESCRIPTION: This Painless script formats monetary values and concatenates them into a comma-separated string specifically for the `log_money_makers` action. It retrieves data from the transformed payload (`ctx.payload.money_makers`)
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-watcher-transform-context.md#2025-04-21_snippet_7

LANGUAGE: painless
CODE:
```

          def formatter = NumberFormat.getCurrencyInstance();
          return [
            'plays_value': ctx.payload.money_makers.stream()
              .map(t-> formatter.format(t.total_value) + ' for the play ' + t.play)
              .collect(Collectors.joining(", "))
          ]
          
```

----------------------------------------

TITLE: Map Index with Synthetic Source & Scaled Float (console)
DESCRIPTION: Configures an Elasticsearch index 'idx' with synthetic _source enabled and a 'scaled_float' field mapping using a scaling factor. Indexes a document to show synthetic _source applying the factor on retrieval.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/number.md#_snippet_3

LANGUAGE: console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "f": { "type": "scaled_float", "scaling_factor": 0.01 }
    }
  }
}
PUT idx/_doc/1
{
  "f": 123
}
```

----------------------------------------

TITLE: Configuring a Custom Path Hierarchy Tokenizer in Elasticsearch
DESCRIPTION: This example configures a custom path_hierarchy tokenizer with delimiter '-', replacement character '/', and skipping the first two tokens, then analyzes text with this custom analyzer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pathhierarchy-tokenizer.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "my_tokenizer"
        }
      },
      "tokenizer": {
        "my_tokenizer": {
          "type": "path_hierarchy",
          "delimiter": "-",
          "replacement": "/",
          "skip": 2
        }
      }
    }
  }
}

POST my-index-000001/_analyze
{
  "analyzer": "my_analyzer",
  "text": "one-two-three-four-five"
}
```

LANGUAGE: text
CODE:
```
[ /three, /three/four, /three/four/five ]
```

----------------------------------------

TITLE: Example MySQL SSL Certificate Content (Text)
DESCRIPTION: This text snippet provides an example of the content format for an SSL certificate used when configuring SSL verification for the MySQL connection. The certificate content should be provided in PEM format, typically enclosed by '-----BEGIN CERTIFICATE-----' and '-----END CERTIFICATE-----' markers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-mysql.md#_snippet_2

LANGUAGE: text
CODE:
```
-----BEGIN CERTIFICATE-----
MIID+jCCAuKgAwIBAgIGAJJMzlxLMA0GCSqGSIb3DQEBCwUAMHoxCzAJBgNVBAYT
AlVTMQwwCgYDVQQKEwNJQk0xFjAUBgNVBAsTDURlZmF1bHROb2RlMDExFjAUBgNV
BAsTDURlZmF0bHRDZWxsMDExGTAXBgNVBAsTEFJvb3QgQ2VydGlmaWNhdGUxEjAQ
BgNVBAMTCWxvY2FsaG9zdDAeFw0yMTEyMTQyMjA3MTZaFw0yMjEyMTQyMjA3MTZa
MF8xCzAJBgNVBAYTAlVTMQwwCgYDVQQKEwNJQk0xFjAUBgNVBAsTDURlZmF1bHRO
b2RlMDExFjAUBgNVBAsTDURlZmF1bHRDZWxsMDExEjAQBgNVBAMTCWxvY2FsaG9z
dDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMv5HCsJZIpI5zCy+jXV
z6lmzNc9UcVSEEHn86h6zT6pxuY90TYeAhlZ9hZ+SCKn4OQ4GoDRZhLPTkYDt+wW
CV3NTIy9uCGUSJ6xjCKoxClJmgSQdg5m4HzwfY4ofoEZ5iZQ0Zmt62jGRWc0zuxj
hegnM+eO2reBJYu6Ypa9RPJdYJsmn1RNnC74IDY8Y95qn+WZj//UALCpYfX41hko
i7TWD9GKQO8SBmAxhjCDifOxVBokoxYrNdzESl0LXvnzEadeZTd9BfUtTaBHhx6t
njqqCPrbTY+3jAbZFd4RiERPnhLVKMytw5ot506BhPrUtpr2lusbN5svNXjuLeea
MMUCAwEAAaOBoDCBnTATBgNVHSMEDDAKgAhOatpLwvJFqjAdBgNVHSUEFjAUBggr
BgEFBQcDAQYIKwYBBQUHAwIwVAYDVR0RBE0wS4E+UHJvZmlsZVVVSUQ6QXBwU3J2
MDEtQkFTRS05MDkzMzJjMC1iNmFiLTQ2OTMtYWI5NC01Mjc1ZDI1MmFmNDiCCWxv
Y2FsaG9zdDARBgNVHQ4ECgQITzqhA5sO8O4wDQYJKoZIhvcNAQELBQADggEBAKR0
gY/BM69S6BDyWp5dxcpmZ9FS783FBbdUXjVtTkQno+oYURDrhCdsfTLYtqUlP4J4
CHoskP+MwJjRIoKhPVQMv14Q4VC2J9coYXnePhFjE+6MaZbTjq9WaekGrpKkMaQA
iQt5b67jo7y63CZKIo9yBvs7sxODQzDn3wZwyux2vPegXSaTHR/rop/s/mPk3YTS
hQprs/IVtPoWU4/TsDN3gIlrAYGbcs29CAt5q9MfzkMmKsuDkTZD0ry42VjxjAmk
xw23l/k8RoD1wRWaDVbgpjwSzt+kl+vJE/ip2w3h69eEZ9wbo6scRO5lCO2JM4Pr
7RhLQyWn2u00L7/9Omw=
-----END CERTIFICATE-----
```

----------------------------------------

TITLE: Correct Function Application Inside HISTOGRAM SQL
DESCRIPTION: Shows the correct way to achieve the desired result from the invalid example. The function (`MONTH`) is applied *inside* the `HISTOGRAM` function on the original field (`birth_date`) before bucketing occurs. The query then groups by the result of the histogram applied to the modified value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-grouping.md#_snippet_5

LANGUAGE: SQL
CODE:
```
SELECT HISTOGRAM(MONTH(birth_date), 2) AS h, COUNT(*) as c FROM emp GROUP BY h ORDER BY h DESC;
```

----------------------------------------

TITLE: High Accuracy Execution Query
DESCRIPTION: Query showing how to enable high accuracy execution mode for TDigest algorithm at the cost of performance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-percentile-aggregation.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET latency/_search
{
  "size": 0,
  "aggs": {
    "load_time_outlier": {
      "percentiles": {
        "field": "load_time",
        "tdigest": {
          "execution_hint": "high_accuracy"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Analyzing Text with Hyphenation Decompounder Filter
DESCRIPTION: Example of using the analyze API with hyphenation_decompounder filter to decompose the German compound word 'Kaffeetasse' using specified word list and hyphenation patterns.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-hyp-decomp-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET _analyze
{
  "tokenizer": "standard",
  "filter": [
    {
      "type": "hyphenation_decompounder",
      "hyphenation_patterns_path": "analysis/hyphenation_patterns.xml",
      "word_list": ["Kaffee", "zucker", "tasse"]
    }
  ],
  "text": "Kaffeetasse"
}
```

----------------------------------------

TITLE: SHOW TABLES with Mixed Pattern Matching
DESCRIPTION: Demonstrates combining multiple and single character wildcards in pattern matching.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-show-tables.md#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
SHOW TABLES LIKE '%em_';
```

----------------------------------------

TITLE: Creating Custom Analyzer with Classic Token Filter
DESCRIPTION: Shows how to configure a custom analyzer using the classic token filter in an Elasticsearch index creation request
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-classic-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /classic_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "classic_analyzer": {
          "tokenizer": "classic",
          "filter": [ "classic" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Basic MEDIAN and MEDIAN_ABSOLUTE_DEVIATION Query in ESQL
DESCRIPTION: Shows how to calculate both median and median absolute deviation of salary data from an employees table.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/median_absolute_deviation.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS MEDIAN(salary), MEDIAN_ABSOLUTE_DEVIATION(salary)
```

----------------------------------------

TITLE: Loading Hockey Stats into Elasticsearch Index
DESCRIPTION: Bulk API request to load hockey player statistics into an Elasticsearch index named 'hockey'. The data contains player information including names, goals, assists, games played, and birth dates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/brief-painless-walkthrough.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT hockey/_bulk?refresh
{"index":{"_id":1}}
{"first":"johnny","last":"gaudreau","goals":[9,27,1],"assists":[17,46,0],"gp":[26,82,1],"born":"1993/08/13"}
{"index":{"_id":2}}
{"first":"sean","last":"monohan","goals":[7,54,26],"assists":[11,26,13],"gp":[26,82,82],"born":"1994/10/12"}
{"index":{"_id":3}}
{"first":"jiri","last":"hudler","goals":[5,34,36],"assists":[11,62,42],"gp":[24,80,79],"born":"1984/01/04"}
{"index":{"_id":4}}
{"first":"micheal","last":"frolik","goals":[4,6,15],"assists":[8,23,15],"gp":[26,82,82],"born":"1988/02/17"}
{"index":{"_id":5}}
{"first":"sam","last":"bennett","goals":[5,0,0],"assists":[8,1,0],"gp":[26,1,0],"born":"1996/06/20"}
{"index":{"_id":6}}
{"first":"dennis","last":"wideman","goals":[0,26,15],"assists":[11,30,24],"gp":[26,81,82],"born":"1983/03/20"}
{"index":{"_id":7}}
{"first":"david","last":"jones","goals":[7,19,5],"assists":[3,17,4],"gp":[26,45,34],"born":"1984/08/10"}
{"index":{"_id":8}}
{"first":"tj","last":"brodie","goals":[2,14,7],"assists":[8,42,30],"gp":[26,82,82],"born":"1990/06/07"}
{"index":{"_id":39}}
{"first":"mark","last":"giordano","goals":[6,30,15],"assists":[3,30,24],"gp":[26,60,63],"born":"1983/10/03"}
{"index":{"_id":10}}
{"first":"mikael","last":"backlund","goals":[3,15,13],"assists":[6,24,18],"gp":[26,82,82],"born":"1989/03/17"}
{"index":{"_id":11}}
{"first":"joe","last":"colborne","goals":[3,18,13],"assists":[6,20,24],"gp":[26,67,82],"born":"1990/01/30"}
```

----------------------------------------

TITLE: Concatenating Integer Array with MV_CONCAT and TO_STRING in ESQL
DESCRIPTION: This example shows how to concatenate elements of a non-string array by first converting them to strings using TO_STRING function, then applying MV_CONCAT.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_concat.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
ROW a=[10, 9, 8]
| EVAL j = MV_CONCAT(TO_STRING(a), ", ")
```

----------------------------------------

TITLE: Stop Token Filter After Synonym Token Filter Example
DESCRIPTION: Illustrates the impact of removing tokens after synonym expansion, which can prevent matching for expanded terms
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-synonym-graph-tokenfilter.md#2025-04-21_snippet_6

LANGUAGE: text
CODE:
```
Synonym rule: foo, bar => baz
Stop filter removes: baz
Result: No matches for foo or bar
```

----------------------------------------

TITLE: Holt-Winters Triple Exponential Implementation
DESCRIPTION: Triple exponential smoothing incorporating level, trend, and seasonality components with configurable parameters for each decay value and seasonality period.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-movfn-aggregation.md#2025-04-21_snippet_11

LANGUAGE: json
CODE:
```
POST /_search
{
  "size": 0,
  "aggs": {
    "my_date_histo": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "1M"
      },
      "aggs": {
        "the_sum": {
          "sum": { "field": "price" }
        },
        "the_movavg": {
          "moving_fn": {
            "buckets_path": "the_sum",
            "window": 10,
            "script": "if (values.length > 5*2) {MovingFunctions.holtWinters(values, 0.3, 0.1, 0.1, 5, false)}"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing a Polygon with Hole in WKT Format
DESCRIPTION: This example demonstrates indexing a polygon with a hole using Well-Known Text (WKT) format. The outer polygon and inner hole are specified as separate coordinate sequences within the POLYGON definition.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/shape.md#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
POST /example/_doc
{
  "location" : "POLYGON ((1000.0 1000.0, 1001.0 1000.0, 1001.0 1001.0, 1000.0 1001.0, 1000.0 1000.0), (1000.2 1000.2, 1000.8 1000.2, 1000.8 1000.8, 1000.2 1000.8, 1000.2 1000.2))"
}
```

----------------------------------------

TITLE: Indexing GeoJSON MultiLineString in Elasticsearch
DESCRIPTION: Example of indexing a GeoJSON MultiLineString type in Elasticsearch. The example shows a document with a 'location' field containing multiple linestrings, each defined by an array of coordinate pairs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/shape.md#2025-04-21_snippet_12

LANGUAGE: json
CODE:
```
POST /example/_doc
{
  "location" : {
    "type" : "multilinestring",
    "coordinates" : [
      [ [1002.0, 200.0], [1003.0, 200.0], [1003.0, 300.0], [1002.0, 300.0] ],
      [ [1000.0, 100.0], [1001.0, 100.0], [1001.0, 100.0], [1000.0, 100.0] ],
      [ [1000.2, 100.2], [1000.8, 100.2], [1000.8, 100.8], [1000.2, 100.8] ]
    ]
  }
}
```

----------------------------------------

TITLE: Script Score Query Example
DESCRIPTION: This snippet shows an example of a script_score query that calculates the score of each document by dividing the value of the 'my-int' field by 10. It demonstrates the basic structure of the query, including the 'query' and 'script' parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-script-score-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "script_score": {
      "query": {
        "match": { "message": "elasticsearch" }
      },
      "script": {
        "source": "doc['my-int'].value / 10 "
      }
    }
  }
}
```

----------------------------------------

TITLE: Adding CJK Bigram Filter to a Custom Analyzer in Elasticsearch
DESCRIPTION: This example shows how to configure a new custom analyzer using the CJK bigram token filter through the create index API.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-cjk-bigram-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /cjk_bigram_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "standard_cjk_bigram": {
          "tokenizer": "standard",
          "filter": [ "cjk_bigram" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining buckets_path Syntax in EBNF
DESCRIPTION: Extended Backus-Naur form definition of the buckets_path syntax used in pipeline aggregations to reference other aggregations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/pipeline.md#2025-04-21_snippet_0

LANGUAGE: ebnf
CODE:
```
AGG_SEPARATOR       =  `>` ;
METRIC_SEPARATOR    =  `.` ;
AGG_NAME            =  <the name of the aggregation> ;
METRIC              =  <the name of the metric (in case of multi-value metrics aggregation)> ;
MULTIBUCKET_KEY     =  `[<KEY_NAME>]`
PATH                =  <AGG_NAME><MULTIBUCKET_KEY>? (<AGG_SEPARATOR>, <AGG_NAME> )* ( <METRIC_SEPARATOR>, <METRIC> ) ;
```

----------------------------------------

TITLE: Parsing ISO 8601 DateTime
DESCRIPTION: Shows how to parse an ISO 8601 formatted datetime string into a ZonedDateTime object.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_1

LANGUAGE: painless
CODE:
```
String datetime = '1983-10-13T22:15:30Z';
ZonedDateTime zdt = ZonedDateTime.parse(datetime);
```

----------------------------------------

TITLE: SQL SHOW COLUMNS Syntax
DESCRIPTION: The syntax definition for the SHOW COLUMNS command in Elasticsearch SQL. Supports optional catalog identifier, frozen indices inclusion, and pattern matching for table names.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-show-columns.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
SHOW COLUMNS
    [CATALOG identifier]? <1>
    [INCLUDE FROZEN]?     <2>
    [FROM | IN]
    [table_identifier |   <3>
     LIKE pattern]        <4>
```

----------------------------------------

TITLE: Elasticsearch Search Response: All Fields Including Nested (JSON)
DESCRIPTION: Shows the response structure for retrieving all fields, including a nested field, using the `fields` parameter. It demonstrates how nested field values are grouped in the response.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_5

LANGUAGE: json
CODE:
```
{
  "took": 2,
  "timed_out": false,
  "_shards": {
    "total": 1,
    "successful": 1,
    "skipped": 0,
    "failed": 0
  },
  "hits": {
    "total": {
      "value": 1,
      "relation": "eq"
    },
    "max_score": 1.0,
    "hits": [{
      "_index": "my-index-000001",
      "_id": "1",
      "_score": 1.0,
      "fields": {
        "group" : ["fans"],
        "user": [{
            "first": ["John"],
            "last": ["Smith"]
          },
          {
            "first": ["Alice"],
            "last": ["White"]
          }
        ]
      }
    }]
  }
}
```

----------------------------------------

TITLE: Setting up Kerberos Keytab Files for HDFS Repository Plugin
DESCRIPTION: Demonstrates the directory structure and placement of the Kerberos keytab file for the HDFS repository plugin. The keytab file needs to be placed in the elasticsearch/config/repository-hdfs directory with the filename krb5.keytab.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/repository-hdfs-security.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$> cd elasticsearch/config
$> ls
elasticsearch.yml  jvm.options        log4j2.properties  repository-hdfs/   scripts/
$> cd repository-hdfs
$> ls
krb5.keytab
```

----------------------------------------

TITLE: Using CURRENT_TIME Keyword in Elasticsearch SQL
DESCRIPTION: This snippet demonstrates fetching the current time using the `CURRENT_TIME` keyword in Elasticsearch SQL. It retrieves the time the query reached the server (with default precision) and aliases it as `result`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_14

LANGUAGE: SQL
CODE:
```
SELECT CURRENT_TIME AS result;
```

----------------------------------------

TITLE: Repurposing Node as Coordinating-Only
DESCRIPTION: Example of converting a data node to a coordinating-only node using the elasticsearch-node repurpose command. Shows the cleanup process after setting node.roles to empty array.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/node-tool.md#2025-04-21_snippet_4

LANGUAGE: txt
CODE:
```
node$./bin/elasticsearch-node repurpose

    WARNING: Elasticsearch MUST be stopped before running this tool.

Found 2 indices (2 shards and 2 index meta data) to clean up
Use -v to see list of paths and indices affected
Node is being re-purposed as no-master and no-data. Clean-up of index data will be performed.
Do you want to proceed?
Confirm [y/N] y
Node successfully repurposed to no-master and no-data.
```

----------------------------------------

TITLE: Extracting X Coordinate using ESQL
DESCRIPTION: This snippet demonstrates how to use the ST_X and ST_Y functions to extract the x (longitude) and y (latitude) coordinates from a geo_point data type in ESQL. The TO_GEOPOINT function is used to convert a string representation of a point into a geo_point. There are no additional dependencies required for this operation. The expected output is the x and y coordinates, corresponding to the longitude and latitude respectively.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/st_x.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW point = TO_GEOPOINT("POINT(42.97109629958868 14.7552534006536)")
| EVAL x =  ST_X(point), y = ST_Y(point)
```

----------------------------------------

TITLE: Applying Allocation Filter for Node Migration
DESCRIPTION: Elasticsearch API call to apply an allocation filter, excluding a specific node from shard allocation. This is part of the process for migrating away from multiple data paths.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/path.md#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
PUT _cluster/settings
{
  "persistent": {
    "cluster.routing.allocation.exclude._name": "target-node-name"
  }
}
```

----------------------------------------

TITLE: Analyzing text with Word Delimiter Graph filter (Console)
DESCRIPTION: This console command demonstrates how to use the Elasticsearch `_analyze` API to see the output of the `word_delimiter_graph` filter when applied to a specific input string. It uses the `keyword` tokenizer and the filter's default rules to split and normalize the text, showing the resulting tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-word-delimiter-graph-tokenfilter.md#_snippet_0

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer": "keyword",
  "filter": [ "word_delimiter_graph" ],
  "text": "Neil's-Super-Duper-XL500--42+AutoCoder"
}
```

----------------------------------------

TITLE: Executing Random Sampler Aggregation in Elasticsearch
DESCRIPTION: Example query demonstrating how to use the random_sampler aggregation with percentiles calculation on e-commerce data. The query samples 10% of documents (probability: 0.1) and calculates percentiles of the taxful_total_price field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-random-sampler-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET kibana_sample_data_ecommerce/_search?size=0&track_total_hits=false
{
  "aggregations": {
    "sampling": {
      "random_sampler": {
        "probability": 0.1
      },
      "aggs": {
        "price_percentiles": {
          "percentiles": {
            "field": "taxful_total_price"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Script-based Value Count Aggregation in Elasticsearch
DESCRIPTION: Shows how to use a runtime field with a script to perform a more complex value count aggregation. The script emits values based on the 'type' field and a condition on the 'promoted' field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-valuecount-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "size": 0,
  "runtime_mappings": {
    "tags": {
      "type": "keyword",
      "script": """
        emit(doc['type'].value);
        if (doc['promoted'].value) {
          emit('hot');
        }
      """
    }
  },
  "aggs": {
    "tags_count": {
      "value_count": {
        "field": "tags"
      }
    }
  }
}
```

----------------------------------------

TITLE: Calculating Average of Multi-Value Array with MV_AVG in ESQL
DESCRIPTION: This example demonstrates how to use the MV_AVG function to calculate the average value of elements in a multi-value array field. The function takes an array as input and returns a double value representing the average of all elements in the array.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_avg.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=[3, 5, 1, 6]
| EVAL avg_a = MV_AVG(a)
```

----------------------------------------

TITLE: Reading Elasticsearch certificates using openssl
DESCRIPTION: This script reads and parses Elasticsearch certificates using `openssl` commands. It sets environment variables for the certificate path and filename, then uses `openssl x509` to display the certificate text, and `openssl asn1parse` to parse the certificate's ASN.1 structure. Specific parts of the certificate, such as the SAN (Subject Alternative Name), are parsed using `openssl asn1parse` with the `-strparse` option.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/core/src/test/resources/org/elasticsearch/xpack/security/transport/ssl/certs/simple/nodes/readme.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
export CERT_PATH=$SOURCE_ROOT/x-pack/plugin/core/src/test/resources/org/elasticsearch/xpack/security/transport/ssl/certs/simple/nodes
export CERT=ca-signed/n1.c1.crt
openssl x509 -in $CERT_PATH/$CERT -text
openssl asn1parse -in $CERT_PATH/$CERT
openssl asn1parse -in $CERT_PATH/$CERT -strparse 492 # location for SAN OCTET STRING
```

----------------------------------------

TITLE: Applying Custom Similarity to Field Mapping in Elasticsearch
DESCRIPTION: Demonstrates how to apply a previously configured custom similarity to a specific text field in the mapping. The example shows mapping the 'title' field to use the custom similarity named 'my_similarity'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/similarity.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /index/_mapping
{
  "properties" : {
    "title" : { "type" : "text", "similarity" : "my_similarity" }
  }
}
```

----------------------------------------

TITLE: Calculating Square Root in Elasticsearch SQL
DESCRIPTION: This example shows the `SQRT` function in Elasticsearch SQL. It calculates the square root of a non-negative numeric expression. The function returns a double numeric value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_16

LANGUAGE: SQL
CODE:
```
SELECT SQRT(EXP(2)), E(), SQRT(25);
```

----------------------------------------

TITLE: Wildcard Search in Elasticsearch
DESCRIPTION: Shows how to use wildcard characters to perform flexible text searches, with warnings about performance implications of extensive wildcard usage
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_3

LANGUAGE: elasticsearch
CODE:
```
qu?ck bro*
```

----------------------------------------

TITLE: Defining XContent Interface in Java for Elasticsearch
DESCRIPTION: This snippet defines the XContent interface, which is a core part of Elasticsearch's content handling API. It includes methods for creating parsers and generators, as well as utility methods for content type management.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/plugins/discovery-ec2/licenses/slf4j-nop-NOTICE.txt#2025-04-22_snippet_0

LANGUAGE: Java
CODE:
```
public interface XContent {

    /**
     * The type that the xcontent handles.
     */
    XContentType type();

    /**
     * Creates a new {@link XContentParser}.
     */
    XContentParser createParser(NamedXContentRegistry xContentRegistry,
                                DeprecationHandler deprecationHandler, String content) throws IOException;

    /**
     * Creates a new {@link XContentParser}.
     */
    XContentParser createParser(NamedXContentRegistry xContentRegistry,
                                DeprecationHandler deprecationHandler, InputStream is) throws IOException;

    /**
     * Creates a new {@link XContentParser}.
     */
    XContentParser createParser(NamedXContentRegistry xContentRegistry,
                                DeprecationHandler deprecationHandler, byte[] data) throws IOException;

    /**
     * Creates a new {@link XContentParser}.
     */
    XContentParser createParser(NamedXContentRegistry xContentRegistry,
                                DeprecationHandler deprecationHandler, byte[] data, int offset, int length) throws IOException;

    /**
     * Creates a new {@link XContentParser}.
     */
    XContentParser createParser(NamedXContentRegistry xContentRegistry,
                                DeprecationHandler deprecationHandler, BytesReference bytes) throws IOException;

    /**
     * Creates a new {@link XContentParser}.
     */
    XContentParser createParser(NamedXContentRegistry xContentRegistry,
                                DeprecationHandler deprecationHandler, Reader reader) throws IOException;

    /**
     * Creates a new {@link XContentGenerator}.
     */
    XContentGenerator createGenerator(OutputStream os) throws IOException;

    /**
     * Creates a new {@link XContentGenerator}.
     */
    XContentGenerator createGenerator(Writer writer) throws IOException;

    /**
     * Returns true if the content type is binary.
     */
    boolean isBinary();

    /**
     * Verify that the given {@link BytesReference} is of type {@link #type()}.
     * Use {@link #detect(BytesReference)} if you don't know the type beforehand
     * and want to detect it.
     */
    void checkHeaderOrNull(BytesReference bytes);

    /**
     * Detect the content type from the given bytes, or {@code null} if can't be detected.
     */
    static XContentType detect(BytesReference bytes) {
        return XContentFactory.xContentType(Objects.requireNonNull(bytes));
    }

    /**
     * Detect the content type from the given string content, or {@code null} if can't be detected.
     */
    static XContentType detect(String content) {
        return XContentFactory.xContentType(content);
    }
}
```

----------------------------------------

TITLE: Extracting Last Three Characters with SUBSTRING in ESQL
DESCRIPTION: This example shows how to use negative start positions with the SUBSTRING function to extract characters relative to the end of the string. It extracts the last three characters from each last_name in the employees dataset.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/substring.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP last_name
| EVAL ln_sub = SUBSTRING(last_name, -3, 3)
```

----------------------------------------

TITLE: Using DAY_OF_YEAR Function Directly in Elasticsearch SQL
DESCRIPTION: This snippet provides an alternative to the EXTRACT function shown previously, demonstrating that some datetime fields can be extracted using a direct function call, like DAY_OF_YEAR. It achieves the same result as the corresponding EXTRACT example.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_89

LANGUAGE: SQL
CODE:
```
SELECT DAY_OF_YEAR(CAST('2018-02-19T10:23:27Z' AS TIMESTAMP)) AS day;
```

----------------------------------------

TITLE: Single Source Composite Aggregation in Elasticsearch
DESCRIPTION: This example shows a composite aggregation with a single source using the terms aggregation on the user_name field. It demonstrates how the aggregation can be optimized when it matches the index sort.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_19

LANGUAGE: console
CODE:
```
GET /_search
{
  "size": 0,
  "aggs": {
    "my_buckets": {
      "composite": {
        "sources": [
          { "user_name": { "terms": { "field": "user_name" } } }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Pattern Replace Filter for Number Formatting
DESCRIPTION: Example showing how to configure pattern_replace character filter to replace dashes with underscores in numbers using regular expressions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pattern-replace-charfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "standard",
          "char_filter": [
            "my_char_filter"
          ]
        }
      },
      "char_filter": {
        "my_char_filter": {
          "type": "pattern_replace",
          "pattern": "(\\d+)-(?=\\d)",
          "replacement": "$1_"
        }
      }
    }
  }
}

POST my-index-000001/_analyze
{
  "analyzer": "my_analyzer",
  "text": "My credit card is 123-456-789"
}
```

----------------------------------------

TITLE: Sharing Painless Reference Type Instances via Shallow Copy
DESCRIPTION: This example illustrates how multiple reference type variables can refer to the same instance. It shows that modifications made through one variable (`l0.add(1)`) are visible when accessing the instance through another variable (`l1.get(0)`), demonstrating the concept of a shallow copy.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-types.md#_snippet_3

LANGUAGE: painless
CODE:
```
List l0 = new ArrayList();
List l1 = l0;
l0.add(1);
l1.add(2);
int i = l1.get(0) + l0.get(1);
```

----------------------------------------

TITLE: Range and Special Character Handling in Character Classes
DESCRIPTION: Examples demonstrating character ranges and how to handle the hyphen character within square brackets.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/regexp-syntax.md#2025-04-21_snippet_11

LANGUAGE: text
CODE:
```
[a-c]   # matches 'a', 'b', or 'c'
[-abc]  # '-' is first character. Matches '-', 'a', 'b', or 'c'
[abc\-] # Escapes '-'. Matches 'a', 'b', 'c', or '-'
```

----------------------------------------

TITLE: Calculating Median of Maximum Salary Change Using Inline Functions in ESQL
DESCRIPTION: This example shows how to combine the MEDIAN function with the MV_MAX function to calculate the median of the maximum values in a multi-valued column. It uses MV_MAX to get the maximum salary change per row, then applies MEDIAN to these maximum values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/median.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM employees
| STATS median_max_salary_change = MEDIAN(MV_MAX(salary_change))
```

----------------------------------------

TITLE: Generating Default SAML Metadata for a Realm in Shell
DESCRIPTION: This example demonstrates how to generate a default metadata file for the 'saml1' realm using the elasticsearch-saml-metadata command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/saml-metadata.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
bin/elasticsearch-saml-metadata --realm saml1
```

----------------------------------------

TITLE: Querying Documents by Routing Value in Elasticsearch
DESCRIPTION: Example of using the _routing field in a terms query to find documents with a specific routing value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-routing-field.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET my-index-000001/_search
{
  "query": {
    "terms": {
      "_routing": [ "user1" ] <1>
    }
  }
}
```

----------------------------------------

TITLE: Setting JVM Options for Elasticsearch Shard Tool
DESCRIPTION: Example showing how to increase the heap size for the elasticsearch-shard tool by setting the CLI_JAVA_OPTS environment variable.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/shard-tool.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
export CLI_JAVA_OPTS="-Xmx1g"
bin/elasticsearch-shard ...
```

----------------------------------------

TITLE: Defining English Stop Words
DESCRIPTION: Defines the English stop words for Elasticsearch text analysis, referring to the Lucene source file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_15

LANGUAGE: markdown
CODE:
```
`_english_`
:   [English stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishAnalyzer.java#L48)
```

----------------------------------------

TITLE: Applying Lowercase Filter to Short Tokens Using Conditional Token Filter in Elasticsearch
DESCRIPTION: This example uses the condition filter to match tokens with fewer than 5 characters and applies the lowercase filter to those matching tokens. The request is made using the analyze API.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-condition-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer": "standard",
  "filter": [
    {
      "type": "condition",
      "filter": [ "lowercase" ],
      "script": {
        "source": "token.getTerm().length() < 5"
      }
    }
  ],
  "text": "THE QUICK BROWN FOX"
}
```

----------------------------------------

TITLE: SQL Query for Geo-Distance using ST_Distance
DESCRIPTION: This SQL query selects shapes from a test table where the distance between a point and a given coordinate is less than or equal to 25 units.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_15

LANGUAGE: SQL
CODE:
```
SELECT shape FROM test WHERE ST_Distance(point, ST_WKTToSQL('point (10 20)')) <= 25;
```

----------------------------------------

TITLE: Compression Configuration Query
DESCRIPTION: Query demonstrating how to configure TDigest compression parameter to balance memory usage and accuracy.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-percentile-aggregation.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET latency/_search
{
  "size": 0,
  "aggs": {
    "load_time_outlier": {
      "percentiles": {
        "field": "load_time",
        "tdigest": {
          "compression": 200
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Combining Arrays with Delimiter using mv_zip Function in ESQL
DESCRIPTION: Demonstrates using the mv_zip function to combine elements from two arrays with a delimiter. The function joins corresponding elements from each array using the specified delimiter, and handles arrays of different lengths by including unpaired elements from the longer array.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_zip.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = ["x", "y", "z"], b = ["1", "2"]
| EVAL c = mv_zip(a, b, "-")
| KEEP a, b, c
```

----------------------------------------

TITLE: Mapping and Indexing Elasticsearch IP Range Field
DESCRIPTION: Shows how to add an `ip_range` field to an existing mapping and index a document with an IP range value. The example demonstrates the flexibility of indexing IP ranges using CIDR notation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/range.md#_snippet_3

LANGUAGE: Elasticsearch DSL
CODE:
```
PUT range_index/_mapping
{
  "properties": {
    "ip_allowlist": {
      "type": "ip_range"
    }
  }
}

PUT range_index/_doc/2
{
  "ip_allowlist" : "192.168.0.0/16"
}
```

----------------------------------------

TITLE: Creating Custom Analyzers with Keep Words Filter in Elasticsearch
DESCRIPTION: This example demonstrates how to create custom analyzers using the Keep Words filter, one with an inline array of words and another with a file path for the word list.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-keep-words-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT keep_words_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "standard_keep_word_array": {
          "tokenizer": "standard",
          "filter": [ "keep_word_array" ]
        },
        "standard_keep_word_file": {
          "tokenizer": "standard",
          "filter": [ "keep_word_file" ]
        }
      },
      "filter": {
        "keep_word_array": {
          "type": "keep",
          "keep_words": [ "one", "two", "three" ]
        },
        "keep_word_file": {
          "type": "keep",
          "keep_words_path": "analysis/example_word_list.txt"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring and Using ja_stop Token Filter with Kuromoji in Elasticsearch
DESCRIPTION: This snippet demonstrates how to configure a custom analyzer with the ja_stop token filter to remove Japanese stopwords and a custom stopword. It creates an index with a custom analyzer and then tests it using the _analyze endpoint to show how the stopword 'ストップ' gets filtered out.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-stop.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT kuromoji_sample
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "analyzer_with_ja_stop": {
            "tokenizer": "kuromoji_tokenizer",
            "filter": [
              "ja_stop"
            ]
          }
        },
        "filter": {
          "ja_stop": {
            "type": "ja_stop",
            "stopwords": [
              "_japanese_",
              "ストップ"
            ]
          }
        }
      }
    }
  }
}

GET kuromoji_sample/_analyze
{
  "analyzer": "analyzer_with_ja_stop",
  "text": "ストップは消える"
}
```

----------------------------------------

TITLE: Configuring Stemmer Override Token Filter with Inline Rules in Elasticsearch
DESCRIPTION: This snippet illustrates how to configure a custom analyzer with a stemmer override token filter using inline rules. The custom stems are defined directly in the index settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stemmer-override-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "standard",
          "filter": [ "lowercase", "custom_stems", "porter_stem" ]
        }
      },
      "filter": {
        "custom_stems": {
          "type": "stemmer_override",
          "rules": [
            "running, runs => run",
            "stemmer => stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating a Custom Analyzer with Remove Duplicates Filter in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the create index API to configure a new custom analyzer that incorporates the remove_duplicates filter along with keyword_repeat and stemmer filters. This setup creates stemmed and unstemmed versions of each token and then removes any duplicates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-remove-duplicates-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_custom_analyzer": {
          "tokenizer": "standard",
          "filter": [
            "keyword_repeat",
            "stemmer",
            "remove_duplicates"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Converting Vowels to Uppercase with Function-based Replacement in Painless
DESCRIPTION: Uses functional replacement in Painless to convert all vowels in player last names to uppercase.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/brief-painless-walkthrough.md#2025-04-21_snippet_13

LANGUAGE: console
CODE:
```
POST hockey/_update_by_query
{
  "script": {
    "lang": "painless",
    "source": """
      ctx._source.last = ctx._source.last.replaceAll(/[aeiou]/, m ->
        m.group().toUpperCase(Locale.ROOT))
    """
  }
}
```

----------------------------------------

TITLE: Calculate Difference in Hours with DATEDIFF - SQL
DESCRIPTION: Uses the DATEDIFF alias to calculate the difference in hours between two datetimes, illustrating the truncation behavior for sub-hour units.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_35

LANGUAGE: SQL
CODE:
```
SELECT DATEDIFF('hours', '2019-11-10T12:10:00.000Z'::datetime, '2019-11-10T23:59:59.999Z'::datetime) AS "diffInHours";
```

----------------------------------------

TITLE: Calculate Difference in Years with DATE_DIFF - SQL
DESCRIPTION: Example showing DATE_DIFF calculating the difference in years between two datetime values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_31

LANGUAGE: SQL
CODE:
```
SELECT DATE_DIFF('years', '2019-09-04T11:22:33.000Z'::datetime, '2032-09-04T22:33:11.000Z'::datetime) AS "diffInYears";
```

----------------------------------------

TITLE: Concatenating Values into String in EQL
DESCRIPTION: Provides examples of using the 'concat' function to join multiple values of different types (strings, numbers, booleans) and field values into a single string. Shows how it handles a single argument and returns null if any argument is null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-function-ref.md#_snippet_3

LANGUAGE: eql
CODE:
```
concat("process is ", "regsvr32.exe")         // returns "process is regsvr32.exe"
concat("regsvr32.exe", " ", 42)               // returns "regsvr32.exe 42"
concat("regsvr32.exe", " ", 42.5)             // returns "regsvr32.exe 42.5"
concat("regsvr32.exe", " ", true)             // returns "regsvr32.exe true"
concat("regsvr32.exe")                        // returns "regsvr32.exe"

// process.name = "regsvr32.exe"
concat(process.name, " ", 42)                 // returns "regsvr32.exe 42"
concat(process.name, " ", 42.5)               // returns "regsvr32.exe 42.5"
concat("process is ", process.name)           // returns "process is regsvr32.exe"
concat(process.name, " ", true)               // returns "regsvr32.exe true"
concat(process.name)                          // returns "regsvr32.exe"

// process.arg_count = 4
concat(process.name, " ", process.arg_count)  // returns "regsvr32.exe 4"

// null handling
concat(null, "regsvr32.exe")                  // returns null
concat(process.name, null)                    // returns null
concat(null)                                  // returns null
```

----------------------------------------

TITLE: Stored Template Rank Evaluation Example
DESCRIPTION: Demonstrates using a stored search template for rank evaluation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-rank-eval.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /my_index/_rank_eval
{
   [...]
  "templates": [
     {
        "id": "match_one_field_query",  
        "template": { 
            "id": "match_one_field_query"
        }
     }
  ],
  "requests": [...]
}
```

----------------------------------------

TITLE: Docker GC Logging Configuration
DESCRIPTION: Example of setting up GC logging for Elasticsearch running in a Docker container.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/jvm-settings.md#2025-04-21_snippet_5

LANGUAGE: sh
CODE:
```
MY_OPTS="-Xlog:disable -Xlog:all=warning:stderr:utctime,level,tags -Xlog:gc=debug:stderr:utctime"
docker run -e ES_JAVA_OPTS="$MY_OPTS" # etc
```

----------------------------------------

TITLE: Bulk Indexing Unsigned Long Values Elasticsearch Console
DESCRIPTION: This example shows how to use the bulk API to index documents containing `unsigned_long` values into the `my_index`. It includes values ranging from 0 up to the maximum representable value for an unsigned 64-bit integer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/unsigned-long.md#_snippet_1

LANGUAGE: Console
CODE:
```
POST /my_index/_bulk?refresh
{"index":{"_id":1}}
{"my_counter": 0}
{"index":{"_id":2}}
{"my_counter": 9223372036854775808}
{"index":{"_id":3}}
{"my_counter": 18446744073709551614}
{"index":{"_id":4}}
{"my_counter": 18446744073709551615}
```

----------------------------------------

TITLE: Concatenating Multi-Valued String with Delimiter in ESQL
DESCRIPTION: This snippet demonstrates the usage of the MV_CONCAT function in ESQL. It takes a multi-valued string column 'a' and concatenates its values into a single string 'j', using ', ' as the delimiter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/mv_concat.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=["foo", "zoo", "bar"]
| EVAL j = MV_CONCAT(a, ", ")
```

----------------------------------------

TITLE: Retrieving Selected Fields with EQL Search in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the filter_path query parameter to retrieve specific fields from the _source of each matching event in an EQL search.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_17

LANGUAGE: console
CODE:
```
GET /my-data-stream/_eql/search?filter_path=hits.events._source.@timestamp,hits.events._source.process.pid
{
  "query": """
    process where process.name == "regsvr32.exe"
  """
}
```

----------------------------------------

TITLE: Calculating Average of Multivalued Field using MV_AVG in ESQL
DESCRIPTION: This snippet demonstrates the usage of the MV_AVG function in ESQL to calculate the average of a multivalued field. It takes an array of numbers as input and returns a single value representing the average.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/mv_avg.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=[3, 5, 1, 6]
| EVAL avg_a = MV_AVG(a)
```

----------------------------------------

TITLE: Configuring Elasticsearch Root Project in Gradle
DESCRIPTION: Sets up the root project for Elasticsearch, including plugin management, dependency configurations, and build settings. It applies various plugins, configures repositories, and defines common properties and tasks.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/qa/common/licenses/jtoml-NOTICE.txt#2025-04-22_snippet_0

LANGUAGE: Gradle
CODE:
```
import org.elasticsearch.gradle.Architecture
import org.elasticsearch.gradle.OS

pluginManagement {
  repositories {
    mavenCentral()
    gradlePluginPortal()
  }
}

plugins {
  id "com.gradle.enterprise" version "3.15"
  id "com.gradle.common-custom-user-data-gradle-plugin" version "1.11.1"
}

include ':libs:elasticsearch-plugin-cli'
include ':libs:elasticsearch-cli'
include ':libs:elasticsearch-core'
include ':libs:elasticsearch-secure-sm'
include ':libs:elasticsearch-x-content'
include ':libs:elasticsearch-lz4'
include ':libs:elasticsearch-geo'
include ':libs:elasticsearch-logging'
include ':server'

dependencyResolutionManagement {
  versionCatalogs {
    libs {
      from(files("libs.versions.toml"))
    }
  }
}

rootProject.name = 'elasticsearch'

apply from: file('gradle/build-scan.gradle')
apply from: file('gradle/ide.gradle')
apply from: file('gradle/repositories.gradle')

Boolean isEclipse = System.getProperty("eclipse.launcher") != null || project.hasProperty("eclipse")

String javaHome = providers.environmentVariable('JAVA_HOME').orElse(System.getProperty("java.home")).get()
String javaVersion = providers.environmentVariable('RUNTIME_JAVA_VERSION').orElse(System.getProperty("java.specification.version")).get()

gradle.projectsLoaded {
  rootProject.subprojects {
    pluginManager.withPlugin("java") {
      if (findProperty('compiler.java') != javaVersion) {
        pluginManager.apply('org.elasticsearch.gradle.toolchain')
      }
    }
  }
}

Boolean inFipsJvm = false
try {
  inFipsJvm = javax.crypto.Cipher.getMaxAllowedKeyLength("AES") > 128
} catch (Exception e) {
  // ignore
}

String minimumCompilerJavaVersionString = rootProject.file('.ci/java-versions.properties')
  .readLines()
  .findAll { it.startsWith('ES_BUILD_JAVA=') }
  .collect { it.replace('ES_BUILD_JAVA=', '').trim() }
  .first()

Integer minimumCompilerJavaVersion = Integer.parseInt(minimumCompilerJavaVersionString)

String runtimeJavaVersion = System.getProperty("java.specification.version")
String unsupportedJavaVersion = "is unsupported. Please use a Java version for this build that is less than or equal to " +
  "$javaVersion, and greater than or equal to $minimumCompilerJavaVersionString"

assert Integer.parseInt(javaVersion) <= Integer.parseInt(runtimeJavaVersion) :
  "JAVA_HOME=$javaHome with java version $javaVersion $unsupportedJavaVersion"
assert Integer.parseInt(minimumCompilerJavaVersionString) <= Integer.parseInt(javaVersion) :
  "JAVA_HOME=$javaHome with java version $javaVersion $unsupportedJavaVersion"

String compilerJavaHome = javaHome

gradleEnterprise {
  buildScan {
    if (providers.systemProperty('disableBuildScan').map { it.toBoolean() }.getOrElse(false) == false) {
      tag "ES"
      tag isEclipse ? "Eclipse" : "Internal"
      tag inFipsJvm ? "FIPS" : "nonFIPS"
      tag "min-compiler-jdk-$minimumCompilerJavaVersionString"
      tag "runtime-jdk-${System.getProperty("java.specification.version")}"
      tag "compiler-jdk-$javaVersion"
      tag "os-${OS.current()}"
      tag "arch-${Architecture.current()}"
    }
    publishOnFailure()
    buildScanPublished { scan ->
      if (System.getenv('CI') != null) {
        println "Build scan: $scan.buildScanUri"
      }
    }
  }
}

allprojects {
  plugins.withType(JavaPlugin).configureEach {
    sourceCompatibility = minimumCompilerJavaVersionString
    targetCompatibility = minimumCompilerJavaVersionString
  }
  ext {
    compilerJavaHome = new File(compilerJavaHome)
    compilerJavaVersion = javaVersion
    isEclipse = isEclipse
    buildChecksDependsOnBuild = false
    runtimeJavaVersion = Integer.parseInt(System.getProperty("java.specification.version"))
    inFipsJvm = inFipsJvm
  }
  if (project != rootProject) {
    version = rootProject.version
  }
}

```

----------------------------------------

TITLE: Removing Duplicate Tokens Using Remove Duplicates Filter in Elasticsearch
DESCRIPTION: This snippet shows an analyze API request that adds the remove_duplicates filter to remove one of the duplicate 'dog' tokens created by the keyword_repeat and stemmer filters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-remove-duplicates-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET _analyze
{
  "tokenizer": "whitespace",
  "filter": [
    "keyword_repeat",
    "stemmer",
    "remove_duplicates"
  ],
  "text": "jumping dog"
}
```

----------------------------------------

TITLE: Extracting Minimum X Coordinates with ESQL
DESCRIPTION: This ESQL snippet evaluates the minimum and maximum x and y coordinates of city boundaries within an ElasticSearch database. The snippet filters data from the `airport_city_boundaries` table where the abbreviation is 'CPH' and calculates the boundary's envelope. The evaluated coordinates are then retained alongside other relevant airport data. Ensure that the geometry is of type `geo_point` or `geo_shape` to perform coordinate extraction accurately.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/st_xmin.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airport_city_boundaries
| WHERE abbrev == "CPH"
| EVAL envelope = ST_ENVELOPE(city_boundary)
| EVAL xmin = ST_XMIN(envelope), xmax = ST_XMAX(envelope), ymin = ST_YMIN(envelope), ymax = ST_YMAX(envelope)
| KEEP abbrev, airport, xmin, xmax, ymin, ymax
```

----------------------------------------

TITLE: Matching Multi-position Tokens in Query String
DESCRIPTION: Explains how to handle multi-position tokens in query strings using either match_phrase queries or boolean conjunctions. Adjusts the query parser's behavior with auto_generate_synonyms_phrase_query. Requires a functional Elasticsearch setup.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-simple-query-string-query.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "simple_query_string": {
      "query": "ny city",
      "auto_generate_synonyms_phrase_query": false
    }
  }
}
```

----------------------------------------

TITLE: Configuring and Using ICU Transform Token Filter in Elasticsearch
DESCRIPTION: This snippet demonstrates how to configure an index with an ICU transform token filter and use it to analyze text in different languages. It shows the setup for transliterating characters to Latin, separating and removing accents, and normalizing the text.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-icu-transform.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT icu_sample
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "latin": {
            "tokenizer": "keyword",
            "filter": [
              "myLatinTransform"
            ]
          }
        },
        "filter": {
          "myLatinTransform": {
            "type": "icu_transform",
            "id": "Any-Latin; NFD; [:Nonspacing Mark:] Remove; NFC"
          }
        }
      }
    }
  }
}

GET icu_sample/_analyze
{
  "analyzer": "latin",
  "text": "你好"
}

GET icu_sample/_analyze
{
  "analyzer": "latin",
  "text": "здравствуйте"
}

GET icu_sample/_analyze
{
  "analyzer": "latin",
  "text": "こんにちは"
}
```

----------------------------------------

TITLE: Creating Enrollment Token for Kibana with Custom URL
DESCRIPTION: Example command to create an enrollment token for enrolling a Kibana instance into a cluster, specifying a custom URL for the Elasticsearch node.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/create-enrollment-token.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
bin/elasticsearch-create-enrollment-token -s kibana --url "https://172.0.0.3:9200"
```

----------------------------------------

TITLE: Querying with Children Aggregation in Elasticsearch
DESCRIPTION: This snippet shows how to use the Children aggregation to connect parent (question) and child (answer) documents, aggregating top tags and answer owners.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-children-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST child_example/_search?size=0
{
  "aggs": {
    "top-tags": {
      "terms": {
        "field": "tags.keyword",
        "size": 10
      },
      "aggs": {
        "to-answers": {
          "children": {
            "type" : "answer"
          },
          "aggs": {
            "top-names": {
              "terms": {
                "field": "owner.display_name.keyword",
                "size": 10
              }
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Logarithm Function in Rank Feature Query
DESCRIPTION: This snippet illustrates the implementation of the log function within a rank_feature query in Elasticsearch to adjust relevance scores. It applies the function to the pagerank field with a scaling factor, and supports only rank features with a positive score impact, requiring a proper index setup.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-rank-feature-query.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET /test/_search
{
  "query": {
    "rank_feature": {
      "field": "pagerank",
      "log": {
        "scaling_factor": 4
      }
    }
  }
}
```

----------------------------------------

TITLE: Extracting First Three Characters with SUBSTRING in ESQL
DESCRIPTION: This example demonstrates using the SUBSTRING function to extract the first three characters from each last_name value in the employees dataset. The function takes a string, a starting position (1-based indexing), and the number of characters to extract.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/substring.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP last_name
| EVAL ln_sub = SUBSTRING(last_name, 1, 3)
```

----------------------------------------

TITLE: Running Redis Connector Docker Image
DESCRIPTION: Docker command to run the Redis connector service image, mounting the configuration file and connecting to the Elastic network.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-redis.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Running ServiceNow Connector Docker Image
DESCRIPTION: Docker command to run the Elastic Connectors service with the specified configuration file and network settings
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-servicenow.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Finding Last First Name Without Explicit Ordering (LAST)
DESCRIPTION: This query applies the LAST function to the 'first_name' field in the 'emp' index without providing an ordering field. The result is the last non-null first name based on internal sorting (typically descending).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_23

LANGUAGE: SQL
CODE:
```
SELECT LAST(first_name) FROM emp;
```

----------------------------------------

TITLE: Extract Script Field using _source in Elasticsearch Console
DESCRIPTION: Shows how to define a `script_fields` in an Elasticsearch `_search` query to extract a specific field directly from the original `_source` document using the `painless` script language. This method avoids caching but requires loading and parsing the source for every hit, which is generally slower than using `doc`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_23

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "match_all": {}
},
  "script_fields": {
    "test1": {
      "script": "params['_source']['message']"
    }
  }
}
```

----------------------------------------

TITLE: Custom Analyzer Creation with Keyword Marker
DESCRIPTION: Creates a custom analyzer that combines keyword_marker filter with porter_stem filter, using keywords from an external file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-keyword-marker-tokenfilter.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_custom_analyzer": {
          "type": "custom",
          "tokenizer": "standard",
          "filter": [
            "my_custom_keyword_marker_filter",
            "porter_stem"
          ]
        }
      },
      "filter": {
        "my_custom_keyword_marker_filter": {
          "type": "keyword_marker",
          "keywords_path": "analysis/example_word_list.txt"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Elasticsearch Keystore for SSL (Bash)
DESCRIPTION: Command to add the keystore password as a secure configuration setting in Elasticsearch. This allows Elasticsearch to access the private key for SSL encryption.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/cli/src/main/resources/org/elasticsearch/xpack/security/cli/certutil-http/es-readme-p12.txt#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
elasticsearch-keystore add "xpack.security.http.ssl.keystore.secure_password"
```

----------------------------------------

TITLE: Using wildcards in Elasticsearch index routing allocation filters
DESCRIPTION: Shows how to use wildcards when specifying attribute values in index routing allocation filters, matching IP addresses starting with '192.168.2.'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/shard-allocation.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
PUT test/_settings
{
  "index.routing.allocation.include._ip": "192.168.2.*"
}
```

----------------------------------------

TITLE: Indexing Document with Version Field Values
DESCRIPTION: This snippet shows how to index a document with multiple version values in the 'versions' field. It demonstrates inserting an array of version strings, including pre-release versions and duplicates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/version.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT idx/_doc/1
{
  "versions": ["8.0.0-beta1", "8.5.0", "0.90.12", "2.6.1", "1.3.4", "1.3.4"]
}
```

----------------------------------------

TITLE: Dynamic Type Casting to Target Types in Painless
DESCRIPTION: Illustrates valid dynamic type casts from `def` to other types like `int`, `float`, and `List` in Painless, emphasizing the implicit casting behavior and when explicit casts are needed. It also showcases how the type represented by `def` can change.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-casting.md#2025-04-21_snippet_6

LANGUAGE: painless
CODE:
```
def d = 1.0;         <1>
int i = (int)d;      <2>
d = 1;               <3>
float f = d;         <4>
d = new ArrayList(); <5>
List l = d;          <6>
```

----------------------------------------

TITLE: ESQL FROM Query with Escaped Index Names
DESCRIPTION: Demonstrates how to use double quotes to escape index names containing special characters in the FROM command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/from.md#2025-04-21_snippet_6

LANGUAGE: esql
CODE:
```
FROM "this=that", """this[that"""
```

----------------------------------------

TITLE: Extracting Maximum X Coordinate from Geometric Data using ESQL
DESCRIPTION: This SQL query demonstrates the usage of the ESQL function for extracting the maximum X coordinate (longitude) from various geometric data types. It includes test cases for different input formats and expected outputs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/st_xmax.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.
```

----------------------------------------

TITLE: Displaying Search Slow Log Event in JSON Format
DESCRIPTION: This snippet shows an example of a search event in the Elasticsearch slow log, formatted as JSON. It includes various fields such as timestamp, cluster information, search details, and user data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/slow-log.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "@timestamp": "2024-12-21T12:42:37.255Z",
  "auth.type": "REALM",
  "ecs.version": "1.2.0",
  "elasticsearch.cluster.name": "distribution_run",
  "elasticsearch.cluster.uuid": "Ui23kfF1SHKJwu_hI1iPPQ",
  "elasticsearch.node.id": "JK-jn-XpQ3OsDUsq5ZtfGg",
  "elasticsearch.node.name": "node-0",
  "elasticsearch.slowlog.id": "tomcat-123",
  "elasticsearch.slowlog.message": "[index6][0]",
  "elasticsearch.slowlog.search_type": "QUERY_THEN_FETCH",
  "elasticsearch.slowlog.source": "{\"query\":{\"match_all\":{\"boost\":1.0}}}",
  "elasticsearch.slowlog.stats": "[]",
  "elasticsearch.slowlog.took": "747.3micros",
  "elasticsearch.slowlog.took_millis": 0,
  "elasticsearch.slowlog.total_hits": "1 hits",
  "elasticsearch.slowlog.total_shards": 1,
  "event.dataset": "elasticsearch.index_search_slowlog",
  "fileset.name" : "slowlog",
  "log.level": "WARN",
  "log.logger": "index.search.slowlog.query",
  "process.thread.name": "elasticsearch[runTask-0][search][T#5]",
  "service.name": "ES_ECS",
  "user.name": "elastic",
  "user.realm": "reserved"
}
```

----------------------------------------

TITLE: Converting Various Inputs to Boolean using TO_BOOLEAN in ESQL
DESCRIPTION: This snippet demonstrates the usage of the TO_BOOLEAN function in ESQL. It creates a row with multiple string values and converts each to a boolean using TO_BOOLEAN. The function converts 'true' (case-insensitive) to true, '0' to false, and other non-empty strings or non-zero numbers to true.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_boolean.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW str = ["true", "TRuE", "false", "", "yes", "1"]
| EVAL bool = TO_BOOLEAN(str)
```

----------------------------------------

TITLE: Making Routing Value Required in Elasticsearch Mapping
DESCRIPTION: Example of configuring an index to require a routing value for all document operations by setting _routing.required to true in the mappings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-routing-field.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
PUT my-index-000002
{
  "mappings": {
    "_routing": {
      "required": true <1>
    }
  }
}

PUT my-index-000002/_doc/1 <2>
{
  "text": "No routing value provided"
}
```

----------------------------------------

TITLE: Configuring Significant Terms Script Heuristic (Painless/JSON)
DESCRIPTION: Configures the `significant_terms` aggregation to use a custom scoring script written in Painless. The script accesses parameters like `_subset_freq` and `_superset_freq` to calculate a significance score, overriding the default statistical heuristic. This allows for flexible, customized term significance calculations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-significantterms-aggregation.md#_snippet_10

LANGUAGE: json
CODE:
```
"script_heuristic": {
  "script": {
    "lang": "painless",
    "source": "params._subset_freq/(params._superset_freq - params._subset_freq + 1)"
  }
}
```

----------------------------------------

TITLE: Configuring Action-based Audit Event Ignore Policy in Elasticsearch YAML
DESCRIPTION: This setting defines a list of action names or wildcards for which audit events will not be printed. The action name can be found in the 'action' field of the audit event. It is a dynamic cluster setting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/auding-settings.md#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
xpack.security.audit.logfile.events.ignore_filters.<policy_name>.actions
```

----------------------------------------

TITLE: Configuring Kuromoji Part of Speech Filter in Elasticsearch
DESCRIPTION: This snippet demonstrates how to configure and use the kuromoji_part_of_speech token filter in Elasticsearch. It creates an index with a custom analyzer that uses the filter to remove specific Japanese parts of speech.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-speech.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT kuromoji_sample
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "my_analyzer": {
            "tokenizer": "kuromoji_tokenizer",
            "filter": [
              "my_posfilter"
            ]
          }
        },
        "filter": {
          "my_posfilter": {
            "type": "kuromoji_part_of_speech",
            "stoptags": [
              "助詞-格助詞-一般",
              "助詞-終助詞"
            ]
          }
        }
      }
    }
  }
}

GET kuromoji_sample/_analyze
{
  "analyzer": "my_analyzer",
  "text": "寿司がおいしいね"
}
```

----------------------------------------

TITLE: Using LAST_VALUE with SUBSTRING and Ordering
DESCRIPTION: This query demonstrates using LAST_VALUE with a function (SUBSTRING) applied to the target field ('first_name'), while still ordering by 'birth_date' within each 'gender' group.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_28

LANGUAGE: SQL
CODE:
```
SELECT gender, LAST_VALUE(SUBSTRING(first_name, 3, 8), birth_date) AS "last" FROM emp GROUP BY gender ORDER BY gender;
```

----------------------------------------

TITLE: Calculating Price Difference with Base Cost in Painless
DESCRIPTION: A simple Painless script that calculates the difference between maximum and minimum values plus a base cost. It accesses values through the params map which contains both aggregation results and user-defined parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-bucket-script-agg-context.md#2025-04-21_snippet_0

LANGUAGE: painless
CODE:
```
(params.max - params.min) + params.base_cost
```

----------------------------------------

TITLE: Generating Version Field Automatic Conversion Query in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create a query for version comparison in Elasticsearch. It uses a range query on the version field with automatic type conversion.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_29

LANGUAGE: eql
CODE:
```
process where version > "2"
```

LANGUAGE: json
CODE:
```
{"range":{"version":{"gt":"2"}}}
```

----------------------------------------

TITLE: Number Conversion and Comparison in Elasticsearch Script
DESCRIPTION: Demonstrates the use of scripts to convert fields to numbers and then apply equality or inequality checks. Validates that `serial_event_id` equals the numeric conversion of a hexadecimal input.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_17

LANGUAGE: Elasticsearch Painless
CODE:
```
{"term":{"serial_event_id":{"value":-32.5}}
```

----------------------------------------

TITLE: Analyzing Text with Keep Words Filter in Elasticsearch
DESCRIPTION: This example uses the analyze API to demonstrate the Keep Words filter, which keeps only the 'fox' and 'dog' tokens from the input text.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-keep-words-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET _analyze
{
  "tokenizer": "whitespace",
  "filter": [
    {
      "type": "keep",
      "keep_words": [ "dog", "elephant", "fox" ]
    }
  ],
  "text": "the quick fox jumps over the lazy dog"
}
```

----------------------------------------

TITLE: Defining Parent-Child Relations with Join Field Type in Elasticsearch
DESCRIPTION: Example of defining a join field that creates a parent/child relation where 'question' is the parent of 'answer'. This mapping creates a special field that allows documents to be linked within the same index.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/parent-join.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "my_id": {
        "type": "keyword"
      },
      "my_join_field": { <1>
        "type": "join",
        "relations": {
          "question": "answer" <2>
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Using Regex Capture Groups for Replacement in Painless
DESCRIPTION: Demonstrates using regex capture groups ($1) for replacements in Painless by replacing 'n' followed by a vowel with just the vowel.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/brief-painless-walkthrough.md#2025-04-21_snippet_12

LANGUAGE: console
CODE:
```
POST hockey/_update_by_query
{
  "script": {
    "lang": "painless",
    "source": "ctx._source.last = /n([aeiou])/.matcher(ctx._source.last).replaceAll('$1')"
  }
}
```

----------------------------------------

TITLE: Repeating String Values with REPEAT Function in ESQL
DESCRIPTION: This snippet demonstrates the usage of the REPEAT function in ESQL. It creates a new column 'triple_a' by repeating the value of column 'a' three times. The input is a single row with a string value, and the output shows the original and repeated values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/repeat.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = "Hello!"
| EVAL triple_a = REPEAT(a, 3)
```

----------------------------------------

TITLE: MongoDB Aggregation Pipeline for Filtering
DESCRIPTION: This snippet demonstrates the MongoDB aggregation pipeline used to filter apartments based on their location, specifically for those in Portugal or Spain. It employs the $match operator with an $or condition to ensure the criteria are met.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-sync-rules.md#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
[
  {
    "$match": {
         "$or": [
                {
                  "address.country_information.country": "Portugal"
                },
                {
                  "address.country_information.country": "Spain"
                }
              ]
            }
  }
]
```

----------------------------------------

TITLE: Syntax for VAR_POP SQL function
DESCRIPTION: Shows the basic syntax for the VAR_POP aggregation function in Elasticsearch SQL. It requires a single numeric field name or expression as input. The function returns null if all input values are null, and ignores nulls otherwise.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_56

LANGUAGE: SQL
CODE:
```
VAR_POP(field_name) <1>
```

----------------------------------------

TITLE: CIDR Range Containment Utility
DESCRIPTION: Provides a utility class for checking if an IP address is contained within a CIDR range using a contains method
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.net.txt#2025-04-21_snippet_1

LANGUAGE: Java
CODE:
```
class org.elasticsearch.painless.api.CIDR {
    (String)
    boolean contains(String)
}
```

----------------------------------------

TITLE: Using ST_ENVELOPE and Min/Max Coordinate Functions in ESQL for Geographic Bounds
DESCRIPTION: This query extracts the minimum and maximum X and Y coordinates from a city boundary. It first filters for Copenhagen airport, calculates the envelope (bounding box) of the city boundary, then extracts the minimum and maximum coordinates using ST_XMIN, ST_XMAX, ST_YMIN, and ST_YMAX functions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/st_ymin.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airport_city_boundaries
| WHERE abbrev == "CPH"
| EVAL envelope = ST_ENVELOPE(city_boundary)
| EVAL xmin = ST_XMIN(envelope), xmax = ST_XMAX(envelope), ymin = ST_YMIN(envelope), ymax = ST_YMAX(envelope)
| KEEP abbrev, airport, xmin, xmax, ymin, ymax
```

----------------------------------------

TITLE: Querying Airport City Boundaries with ESQL
DESCRIPTION: This ESQL query filters the airport_city_boundaries dataset for Copenhagen (CPH), calculates the envelope of the city boundary using ST_ENVELOPE, and returns the airport abbreviation, name, and envelope. It demonstrates data filtering, spatial function usage, and field selection in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/st_envelope.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airport_city_boundaries
| WHERE abbrev == "CPH"
| EVAL envelope = ST_ENVELOPE(city_boundary)
| KEEP abbrev, airport, envelope
```

----------------------------------------

TITLE: Defining a Dissect Pattern for Log Parsing in Elasticsearch
DESCRIPTION: A sample dissect pattern for parsing common log formats. The pattern matches specific parts of a log line and captures named fields like clientip, timestamp, verb, and status.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/dissect-processor.md#2025-04-21_snippet_0

LANGUAGE: txt
CODE:
```
%{clientip} %{ident} %{auth} [%{@timestamp}] \"%{verb} %{request} HTTP/%{httpversion}\" %{status} %{size}
```

----------------------------------------

TITLE: Defining Advanced Sync Rules in Elasticsearch JavaScript
DESCRIPTION: This set of rules illustrates indexing strategies focusing on ownership with exception for certain extensions, as well as recursive directory patterns. Effective JSON configuration is vital for functionality.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-onedrive.md#2025-04-21_snippet_10

LANGUAGE: JavaScript
CODE:
```
[
  {
    "owners": ["user1-domain@onmicrosoft.com", "user2-domain@onmicrosoft.com"],
    "skipFilesWithExtensions": [".md"]
  },
  {
    "parentPathPattern": "/drive/root:/abc/**"
  }
]
```

----------------------------------------

TITLE: Defining a Normalize Aggregation in Elasticsearch
DESCRIPTION: Example of a basic Normalize aggregation structure in Elasticsearch, specifying the buckets_path and normalization method.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-normalize-aggregation.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "normalize": {
    "buckets_path": "normalized",
    "method": "percent_of_sum"
  }
}
```

----------------------------------------

TITLE: Analyzing File Paths with Forward and Reversed Path Hierarchy Tokenizers
DESCRIPTION: This example demonstrates the tokens generated for the same file path by both the forward and reversed path hierarchy tokenizers, showing how they differ in their tokenization approach.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pathhierarchy-tokenizer.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
POST file-path-test/_analyze
{
  "analyzer": "custom_path_tree",
  "text": "/User/alice/photos/2017/05/16/my_photo1.jpg"
}

POST file-path-test/_analyze
{
  "analyzer": "custom_path_tree_reversed",
  "text": "/User/alice/photos/2017/05/16/my_photo1.jpg"
}
```

----------------------------------------

TITLE: Specifying Sort Tiebreaker in EQL Search for Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the tiebreaker_field parameter to specify a field for sorting events with the same timestamp in an EQL search query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_21

LANGUAGE: console
CODE:
```
GET /my-data-stream/_eql/search
{
  "tiebreaker_field": "event.sequence",
  "query": """
    process where process.name == "cmd.exe" and stringContains(process.executable, "System32")
  """
}
```

----------------------------------------

TITLE: Example set_https_connection_properties Entitlement (YAML)
DESCRIPTION: This snippet illustrates how to grant the `set_https_connection_properties` entitlement in the `entitlement-policy.yaml` file. This entitlement allows a plugin module to modify properties on established HTTPS connections.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/extend/creating-classic-plugins.md#_snippet_5

LANGUAGE: YAML
CODE:
```
org.example.module: # or 'ALL-UNNAMED' if the plugin is non-modular
  - set_https_connection_properties
```

----------------------------------------

TITLE: Getting Sign of Numeric Value in Elasticsearch SQL
DESCRIPTION: This snippet illustrates the `SIGN` (or `SIGNUM`) function in Elasticsearch SQL. It returns -1 if the input is negative, 0 if the input is zero, and 1 if the input is positive. The input must be a numeric expression.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_15

LANGUAGE: SQL
CODE:
```
SELECT SIGN(-123), SIGN(0), SIGN(415);
```

----------------------------------------

TITLE: Setting Year in DateTime
DESCRIPTION: Demonstrates how to set the year component of a ZonedDateTime object.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_13

LANGUAGE: painless
CODE:
```
ZonedDateTime zdt =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 0, ZoneId.of('Z'));
ZonedDateTime updatedZdt = zdt.withYear(1976);
```

----------------------------------------

TITLE: ENRICH with Specific Fields
DESCRIPTION: Example showing ENRICH usage with explicit field selection using the WITH clause.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/enrich.md#2025-04-21_snippet_3

LANGUAGE: esql
CODE:
```
FROM languages.csv | ENRICH languages_policy WITH language_name
```

----------------------------------------

TITLE: Numeric Compound Assignment Examples
DESCRIPTION: Demonstrates compound assignments with various numeric operators including multiplication, division, remainder, addition, subtraction, and bitwise operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-general.md#2025-04-21_snippet_6

LANGUAGE: painless
CODE:
```
int i = 10;
i *= 2;
i /= 5;
i %= 3;
i += 5;
i -= 5;
i <<= 2;
i >>= 1;
i >>>= 1;
i &= 15;
i ^= 12;
i |= 2;
```

----------------------------------------

TITLE: Boolean Parsing Recommendation
DESCRIPTION: Advises against using Boolean.getBoolean() which can be misleading due to its lenient parsing behavior. Recommends using org.elasticsearch.core.Booleans#parseBoolean instead for more predictable results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/build-tools-internal/src/main/resources/forbidden/es-all-signatures.txt#2025-04-21_snippet_4

LANGUAGE: java
CODE:
```
# This method is misleading, and uses lenient boolean parsing under the hood. If you intend to parse
# a system property as a boolean, use
# org.elasticsearch.core.Booleans#parseBoolean(java.lang.String) on the result of
# java.lang.SystemProperty#getProperty(java.lang.String) instead. If you were not intending to parse
# a system property as a boolean, but instead parse a string to a boolean, use
# org.elasticsearch.core.Booleans#parseBoolean(java.lang.String) directly on the string.
@defaultMessage use org.elasticsearch.core.Booleans#parseBoolean(java.lang.String)
java.lang.Boolean#getBoolean(java.lang.String)
```

----------------------------------------

TITLE: Encoding Numeric to Aggregate Metric Double in ESQL
DESCRIPTION: This snippet demonstrates how to use the TO_AGGREGATE_METRIC_DOUBLE function to convert a numeric value into an aggregate_metric_double type. The function takes a single numeric argument and returns the encoded aggregate metric double value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_aggregate_metric_double.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW x = 3892095203
| EVAL agg_metric = TO_AGGREGATE_METRIC_DOUBLE(x)
```

----------------------------------------

TITLE: Avg Aggregation Result for Histogram Fields in Elasticsearch
DESCRIPTION: Shows the expected response format for an Avg aggregation on histogram fields, including the computed weighted average.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-avg-aggregation.md#2025-04-21_snippet_5

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "avg_latency": {
      "value": 0.29690721649
    }
  }
}
```

----------------------------------------

TITLE: Generating Disjunction of Same Field Same Function Query in Elasticsearch
DESCRIPTION: This snippet shows how to create a disjunction query using the same function on the same field in Elasticsearch. It applies length conditions on the file_name field with an OR condition.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_24

LANGUAGE: eql
CODE:
```
process where length(file_name) > 5 or length(file_name) < 10
```

LANGUAGE: json
CODE:
```
{"bool":{"should":[{"script":{"script":{"source":"InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.gt(InternalEqlScriptUtils.length(X0),params.v1)))","params":{"v0":"file_name.keyword","v1":5}}}},{"script":{"script":{"source":"InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.lt(InternalEqlScriptUtils.length(X0),params.v1)))","params":{"v0":"file_name.keyword","v1":10}}}}]}
```

----------------------------------------

TITLE: Configuring Elastic Connector Service (YAML)
DESCRIPTION: This YAML configuration file specifies the settings for the self-managed Python connector service. It includes the Elasticsearch host endpoint, API key(s), the unique connector ID assigned in Kibana, and the specific service type (postgresql) for the connector being used.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-postgresql-connector-client-tutorial.md#_snippet_2

LANGUAGE: yaml
CODE:
```
elasticsearch:
  host: <https://<my-elastic-deployment.es.us-west2.gcp.elastic-cloud.com>> # Your Elasticsearch endpoint
  api_key: '<YOUR-API-KEY>' # Your top-level Elasticsearch API key
...
connectors:
  -
    connector_id: "<YOUR-CONNECTOR-ID>"
    api_key: "'<YOUR-API-KEY>" # Your scoped connector index API key (optional). If not provided, the top-level API key is used.
    service_type: "postgresql"



# Self-managed connector settings
connector_id: '<YOUR-CONNECTOR-ID>' # Your connector ID
service_type: 'postgresql'  # The service type for your connector

sources:
  # mongodb: connectors.sources.mongo:MongoDataSource
  # s3: connectors.sources.s3:S3DataSource
  # dir: connectors.sources.directory:DirectoryDataSource
  # mysql: connectors.sources.mysql:MySqlDataSource
  # network_drive: connectors.sources.network_drive:NASDataSource
  # google_cloud_storage: connectors.sources.google_cloud_storage:GoogleCloudStorageDataSource
  # azure_blob_storage: connectors.sources.azure_blob_storage:AzureBlobStorageDataSource
  postgresql: connectors.sources.postgresql:PostgreSQLDataSource
  # oracle: connectors.sources.oracle:OracleDataSource
  # sharepoint: connectors.sources.sharepoint:SharepointDataSource
  # mssql: connectors.sources.mssql:MSSQLDataSource
  # jira: connectors.sources.jira:JiraDataSource
```

----------------------------------------

TITLE: Creating extension metadata for local file upload in Elasticsearch Service
DESCRIPTION: Creates the metadata for an extension that will be uploaded from a local file. This is the first step in a two-step process for uploading extensions from local files.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-plugins-guide.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
curl -X POST \
  https://api.elastic-cloud.com/api/v1/deployments/extensions \
  -H "Authorization: ApiKey $CLOUD_API_KEY" \
  -H 'Content-Type: application/json' \
  -d '{
    "extension_type": "plugin",
    "name": "custom-plugin",
    "version" : "8.4.3"
}'
```

----------------------------------------

TITLE: Converting String to SQL_INTEGER using SQL CONVERT
DESCRIPTION: Example showing how to use the Elasticsearch SQL `CONVERT` function to convert a string literal ('123') into the `SQL_INTEGER` ODBC data type. Includes the query and the expected output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-type-conversion.md#_snippet_5

LANGUAGE: SQL
CODE:
```
SELECT CONVERT('123', SQL_INTEGER) AS int;

      int
---------------
123
```

----------------------------------------

TITLE: Using CEIL Function in ESQL
DESCRIPTION: This example demonstrates how to use the CEIL function in ESQL to round a decimal value up to the next integer. The query creates a row with a double value of 1.8 and then applies CEIL to round it up to 2.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/ceil.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=1.8
| EVAL a=CEIL(a)
```

----------------------------------------

TITLE: Rounding Numeric Values to Right of Decimal in Elasticsearch SQL
DESCRIPTION: This demonstrates the `ROUND` function in Elasticsearch SQL, rounding a number to a specified number of decimal places to the right of the decimal point. The second argument specifies the number of places.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_13

LANGUAGE: SQL
CODE:
```
SELECT ROUND(-345.153, 1) AS rounded;
```

----------------------------------------

TITLE: Applying Functions Using MV_MIN on Multivalued Fields in ESQL (Console)
DESCRIPTION: Queries documents using ESQL and applies the `MV_MIN` function to a multivalued field to reduce it to a single value before applying standard arithmetic functions. Demonstrates how to use `MV_` prefix functions to enable standard function application on multivalued fields by first aggregating or selecting a single value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-multivalued-fields.md#_snippet_6

LANGUAGE: console
CODE:
```
POST /_query
{
  "query": "FROM mv | EVAL b=MV_MIN(b) | EVAL b + 2, a + b | LIMIT 4"
}
```

LANGUAGE: json
CODE:
```
{
  "took": 28,
  "is_partial": false,
  "columns": [
    { "name": "a",   "type": "long"},
    { "name": "b",   "type": "long"},
    { "name": "b + 2", "type": "long"},
    { "name": "a + b", "type": "long"}
  ],
  "values": [
    [1, 1, 3, 2],
    [2, 3, 5, 5]  ]
}
```

----------------------------------------

TITLE: Converting Multivalued Long with Duplicates to String in ESQL (Console)
DESCRIPTION: Indexes documents with duplicates in a `long` multivalued field and queries using ESQL, applying the `TO_STRING` function to the multivalued field. Shows that converting a multivalued field preserves the duplicates if the original field type (`long`) did not remove them.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-multivalued-fields.md#_snippet_3

LANGUAGE: console
CODE:
```
PUT /mv
{
  "mappings": {
    "properties": {
      "b": {"type": "long"}
    }
  }
}

POST /mv/_bulk?refresh
{ "index" : {} }
{ "a": 1, "b": [2, 2, 1] }
{ "index" : {} }
{ "a": 2, "b": [1, 1] }

POST /_query
{
  "query": "FROM mv | EVAL b=TO_STRING(b) | LIMIT 2"
}
```

LANGUAGE: json
CODE:
```
{
  "took": 28,
  "is_partial": false,
  "columns": [
    { "name": "a", "type": "long"},
    { "name": "b", "type": "keyword"}
  ],
  "values": [
    [1, ["1", "2", "2"]],
    [2,      ["1", "1"]]
  ]
}
```

----------------------------------------

TITLE: String Concatenation in Painless
DESCRIPTION: Shows how to use the '+' operator for string concatenation in Painless, handling different data types, including automatic type conversion. Explains operator precedence and associativity in operations involving strings and integers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-reference.md#2025-04-21_snippet_18

LANGUAGE: painless
CODE:
```
String x = "con";
String y = x + "cat";
String z = 4 + 5 + x;
```

----------------------------------------

TITLE: Configuring Join Field with Disabled Eager Global Ordinals in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create an index mapping with a join field that disables eager loading of global ordinals. It defines a relation between 'question' and 'answer' entities.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/parent-join.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "my_join_field": {
        "type": "join",
        "relations": {
           "question": "answer"
        },
        "eager_global_ordinals": false
      }
    }
  }
}
```

----------------------------------------

TITLE: Updating Plugin File with Option 2 Method (cURL)
DESCRIPTION: This snippet shows how to update the file associated with an existing plugin extension using the Option 2 method. It uses a PUT request to upload the new plugin file directly.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-plugins-guide.md#2025-04-21_snippet_16

LANGUAGE: sh
CODE:
```
curl -v -X PUT "https://api.elastic-cloud.com/api/v1/deployments/extensions/EXTENSION_ID" \
-H 'Content-type:application/zip' \
-H "Authorization: ApiKey $CLOUD_API_KEY" \
-H 'Expect:' \
-T "/path_to/custom-plugin-8.4.3-10212022.zip"
```

----------------------------------------

TITLE: Using the DIVIDE Operator in ESQL
DESCRIPTION: The DIVIDE (/) operator divides one number by another. It returns null for multivalued fields. Integer division rounds towards 0. For floating-point division, cast one argument to DOUBLE.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/operators/div.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
### DIVIDE `/`
Divide one number by another. If either field is [multivalued](https://www.elastic.co/docs/reference/query-languages/esql/esql-multivalued-fields) then the result is `null`.

Note: Division of two integer types will yield an integer result, rounding towards 0. If you need floating point division, [`Cast (::)`](https://www.elastic.co/docs/reference/query-languages/esql/functions-operators/operators#esql-cast-operator) one of the arguments to a `DOUBLE`.
```

----------------------------------------

TITLE: Configuring Maximum Merge Threads in Elasticsearch YAML
DESCRIPTION: Sets the maximum number of threads that can perform merge operations on a single shard simultaneously. The default value is calculated based on the number of processors, with a minimum of 1 and maximum of 4. For spinning disk drives, it's recommended to set this to 1.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/merge.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
index.merge.scheduler.max_thread_count: Math.max(1, Math.min(4, <<node.processors, node.processors>> / 2))
```

----------------------------------------

TITLE: Illustrating Keywords and Identifiers - SQL
DESCRIPTION: Shows a simple SQL query to demonstrate the difference between SQL keywords (like SELECT and FROM) and identifiers (like table). Keywords have fixed meanings, while identifiers name entities.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-lexical-structure.md#_snippet_0

LANGUAGE: sql
CODE:
```
SELECT * FROM table
```

----------------------------------------

TITLE: Aggregating Without Grouping in ESQL
DESCRIPTION: Shows how omitting the BY clause in STATS returns one row with aggregations applied over the entire dataset.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/stats-by.md#2025-04-21_snippet_2

LANGUAGE: esql
CODE:
```
FROM employees
STATS
  avg_salary = AVG(salary),
  min_salary = MIN(salary),
  max_salary = MAX(salary);
```

----------------------------------------

TITLE: Creating Geo-distance Aggregation with Museums Example in Elasticsearch
DESCRIPTION: This example creates a museums index with geo_point location data and demonstrates how to use geo-distance aggregation to create distance rings around Amsterdam.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-geodistance-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /museums
{
  "mappings": {
    "properties": {
      "location": {
        "type": "geo_point"
      }
    }
  }
}

POST /museums/_bulk?refresh
{"index":{"_id":1}}
{"location": "POINT (4.912350 52.374081)", "name": "NEMO Science Museum"}
{"index":{"_id":2}}
{"location": "POINT (4.901618 52.369219)", "name": "Museum Het Rembrandthuis"}
{"index":{"_id":3}}
{"location": "POINT (4.914722 52.371667)", "name": "Nederlands Scheepvaartmuseum"}
{"index":{"_id":4}}
{"location": "POINT (4.405200 51.222900)", "name": "Letterenhuis"}
{"index":{"_id":5}}
{"location": "POINT (2.336389 48.861111)", "name": "Musée du Louvre"}
{"index":{"_id":6}}
{"location": "POINT (2.327000 48.860000)", "name": "Musée d'Orsay"}

POST /museums/_search?size=0
{
  "aggs": {
    "rings_around_amsterdam": {
      "geo_distance": {
        "field": "location",
        "origin": "POINT (4.894 52.3760)",
        "ranges": [
          { "to": 100000 },
          { "from": 100000, "to": 300000 },
          { "from": 300000 }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Time-Series Enabled Tour Index
DESCRIPTION: Example showing how to create a time-series enabled index with geo_point data for tourism points of interest across different cities.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-geo-line.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT tour
{
    "mappings": {
        "properties": {
            "city": {
                "type": "keyword",
                "time_series_dimension": true
            },
            "category":   { "type": "keyword" },
            "route":      { "type": "long" },
            "name":       { "type": "keyword" },
            "location":   { "type": "geo_point" },
            "@timestamp": { "type": "date" }
        }
    },
    "settings": {
        "index": {
            "mode": "time_series",
            "routing_path": [ "city" ],
            "time_series": {
                "start_time": "2023-01-01T00:00:00Z",
                "end_time": "2024-01-01T00:00:00Z"
            }
        }
    }
}

POST /tour/_bulk?refresh
{"index":{}}
{"@timestamp": "2023-01-02T09:00:00Z", "route": 0, "location": "POINT(4.889187 52.373184)", "city": "Amsterdam", "category": "Attraction", "name": "Royal Palace Amsterdam"}
{"index":{}}
{"@timestamp": "2023-01-02T10:00:00Z", "route": 1, "location": "POINT(4.885057 52.370159)", "city": "Amsterdam", "category": "Attraction", "name": "The Amsterdam Dungeon"}
{"index":{}}
{"@timestamp": "2023-01-02T13:00:00Z", "route": 2, "location": "POINT(4.901618 52.369219)", "city": "Amsterdam", "category": "Museum", "name": "Museum Het Rembrandthuis"}
{"index":{}}
{"@timestamp": "2023-01-02T16:00:00Z", "route": 3, "location": "POINT(4.912350 52.374081)", "city": "Amsterdam", "category": "Museum", "name": "NEMO Science Museum"}
{"index":{}}
{"@timestamp": "2023-01-03T12:00:00Z", "route": 4, "location": "POINT(4.914722 52.371667)", "city": "Amsterdam", "category": "Museum", "name": "Nederlands Scheepvaartmuseum"}
{"index":{}}
{"@timestamp": "2023-01-04T09:00:00Z", "route": 5, "location": "POINT(4.401384 51.220292)", "city": "Antwerp", "category": "Attraction", "name": "Cathedral of Our Lady"}
{"index":{}}
{"@timestamp": "2023-01-04T12:00:00Z", "route": 6, "location": "POINT(4.405819 51.221758)", "city": "Antwerp", "category": "Museum", "name": "Snijders&Rockoxhuis"}
{"index":{}}
{"@timestamp": "2023-01-04T15:00:00Z", "route": 7, "location": "POINT(4.405200 51.222900)", "city": "Antwerp", "category": "Museum", "name": "Letterenhuis"}
{"index":{}}
{"@timestamp": "2023-01-05T10:00:00Z", "route": 8, "location": "POINT(2.336389 48.861111)", "city": "Paris", "category": "Museum", "name": "Musée du Louvre"}
{"index":{}}
{"@timestamp": "2023-01-05T14:00:00Z", "route": 9, "location": "POINT(2.327000 48.860000)", "city": "Paris", "category": "Museum", "name": "Musée dOrsay"}
```

----------------------------------------

TITLE: Customizing CJK Bigram Token Filter in Elasticsearch
DESCRIPTION: This example demonstrates how to customize the CJK bigram token filter by creating a new custom token filter with specific configuration parameters, including ignored scripts and unigram output settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-cjk-bigram-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /cjk_bigram_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "han_bigrams": {
          "tokenizer": "standard",
          "filter": [ "han_bigrams_filter" ]
        }
      },
      "filter": {
        "han_bigrams_filter": {
          "type": "cjk_bigram",
          "ignored_scripts": [
            "hangul",
            "hiragana",
            "katakana"
          ],
          "output_unigrams": true
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: CHANGE_POINT Syntax in Elasticsearch SQL
DESCRIPTION: Defines the syntax for the CHANGE_POINT command, which detects spikes, dips, and change points in a metric. It specifies the required 'value' parameter and optional 'key', 'type_name', and 'pvalue_name' parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/change_point.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
CHANGE_POINT value [ON key] [AS type_name, pvalue_name]
```

----------------------------------------

TITLE: Installing Multiple Elasticsearch Plugins in a Single Command
DESCRIPTION: Command for installing multiple Elasticsearch plugins simultaneously. The syntax allows specifying multiple plugin_ids in one command, where each plugin_id can be a core plugin name or a custom URL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/installing-multiple-plugins.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
sudo bin/elasticsearch-plugin install [plugin_id] [plugin_id] ... [plugin_id]
```

----------------------------------------

TITLE: Describing STRING_AGG Function in Elasticsearch ESQL
DESCRIPTION: The STRING_AGG function in Elasticsearch ESQL converts a multivalued string expression into a single valued column. It concatenates all values, separating them with a specified delimiter. This function is useful for aggregating multiple string values into a single, comma-separated (or otherwise delimited) string.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/mv_concat.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.

**Description**

Converts a multivalued string expression into a single valued column containing the concatenation of all values separated by a delimiter.
```

----------------------------------------

TITLE: Using IN Operator in ESQL Query
DESCRIPTION: This snippet demonstrates the usage of the IN operator in ESQL. It creates a row with values for 'a', 'b', and 'c', then uses the WHERE clause with the IN operator to filter based on whether 'c-a' is equal to any of the values in the provided list.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/operators/in.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = 1, b = 4, c = 3
| WHERE c-a IN (3, b / 2, a)
```

----------------------------------------

TITLE: Using ASCII Folding Filter with Analyze API in Elasticsearch
DESCRIPTION: Example of using the asciifolding filter with the analyze API to convert characters with diacritical marks to their ASCII equivalents. This request processes the text 'açaí à la carte' and removes the diacritical marks.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-asciifolding-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer" : "standard",
  "filter" : ["asciifolding"],
  "text" : "açaí à la carte"
}
```

----------------------------------------

TITLE: Matching IP Address against CIDR Blocks in EQL
DESCRIPTION: Illustrates using the 'cidrMatch' function to determine if a given IP address falls within one or more specified CIDR blocks. Examples cover single and multiple CIDR blocks, successful and unsuccessful matches, and null handling for both the IP address and CIDR block arguments.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-function-ref.md#_snippet_2

LANGUAGE: eql
CODE:
```
// source.address = "192.168.152.12"
cidrMatch(source.address, "192.168.0.0/16")               // returns true
cidrMatch(source.address, "192.168.0.0/16", "10.0.0.0/8") // returns true
cidrMatch(source.address, "10.0.0.0/8")                   // returns false
cidrMatch(source.address, "10.0.0.0/8", "10.128.0.0/9")   // returns false

// null handling
cidrMatch(null, "10.0.0.0/8")                             // returns null
cidrMatch(source.address, null)                           // returns null
```

----------------------------------------

TITLE: Generating Disjunction of Multi-Field Functions Query in Elasticsearch
DESCRIPTION: This snippet shows how to create a disjunction query using multiple field functions in Elasticsearch. It combines string concatenation and numeric addition operations with an OR condition.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_22

LANGUAGE: eql
CODE:
```
process where concat(file_name, ".", process_name) == "foo" or add(pid, ppid) > 100
```

LANGUAGE: json
CODE:
```
{"bool":{"should":[{"script":{"script":{"source":"InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalEqlScriptUtils.multiValueDocValues(doc,params.v1,X1->InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.eq(InternalEqlScriptUtils.concat([X0,params.v2,X1]),params.v3))))","params":{"v0":"file_name.keyword","v1":"process_name","v2":".","v3":"foo"}}}},{"script":{"script":{"source":"InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalEqlScriptUtils.multiValueDocValues(doc,params.v1,X1->InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.gt(InternalQlScriptUtils.add(X0,X1),params.v2))))","params":{"v0":"pid","v1":"ppid","v2":100}}}}]}
```

----------------------------------------

TITLE: Bulk Inserting Data into firewall_logs Index - Console
DESCRIPTION: Adds sample firewall log data to the `firewall_logs` index using the Elasticsearch bulk API. Includes records detailing network traffic with `timestamp`, `source.ip`, `destination.ip`, `action`, and `bytes_transferred` for the primary query source. Requires the `firewall_logs` index to exist.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-lookup-join.md#_snippet_3

LANGUAGE: console
CODE:
```
POST firewall_logs/_bulk
{"index":{}}
{"timestamp":"2025-04-23T10:00:01Z","source.ip":"192.0.2.1","destination.ip":"10.0.0.100","action":"allow","bytes_transferred":1024}
{"index":{}}
{"timestamp":"2025-04-23T10:00:05Z","source.ip":"203.0.113.5","destination.ip":"10.0.0.55","action":"allow","bytes_transferred":2048}
{"index":{}}
{"timestamp":"2025-04-23T10:00:08Z","source.ip":"198.51.100.2","destination.ip":"10.0.0.200","action":"block","bytes_transferred":0}
{"index":{}}
{"timestamp":"2025-04-23T10:00:15Z","source.ip":"203.0.113.5","destination.ip":"10.0.0.44","action":"allow","bytes_transferred":4096}
{"index":{}}
{"timestamp":"2025-04-23T10:00:30Z","source.ip":"192.0.2.1","destination.ip":"10.0.0.100","action":"allow","bytes_transferred":512}
```

----------------------------------------

TITLE: Example using VAR_SAMP on an expression in SQL
DESCRIPTION: Illustrates how to apply the VAR_SAMP function to an expression ('salary / 24.0') within an Elasticsearch SQL query. This calculates the sample variance of values derived from the expression, presented with the corresponding minimum and maximum values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_61

LANGUAGE: SQL
CODE:
```
SELECT MIN(salary / 24.0) AS min, MAX(salary / 24.0) AS max, VAR_SAMP(salary / 24.0) AS varsamp FROM emp;
```

----------------------------------------

TITLE: Syntax for STDDEV_SAMP SQL function
DESCRIPTION: Shows the basic syntax for the STDDEV_SAMP aggregation function in Elasticsearch SQL. It requires a single numeric field name or expression as input. The function returns null if all input values are null, and ignores nulls otherwise.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_50

LANGUAGE: SQL
CODE:
```
STDDEV_SAMP(field_name) <1>
```

----------------------------------------

TITLE: Demonstrating Instanceof Operator with Reference Types in Painless
DESCRIPTION: Shows examples of using the instanceof operator with different reference types, including implicit casting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_8

LANGUAGE: painless
CODE:
```
Map m = new HashMap();            <1>
boolean a = m instanceof HashMap; <2>
boolean b = m instanceof Map;     <3>
```

----------------------------------------

TITLE: Date Range Aggregation Response in Elasticsearch
DESCRIPTION: Shows the response for a date range aggregation with bucket counts and formatted date strings. The response includes two buckets with their respective document counts and formatted date ranges.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-daterange-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "range": {
      "buckets": [
        {
          "to": 1.4436576E12,
          "to_as_string": "10-2015",
          "doc_count": 7,
          "key": "*-10-2015"
        },
        {
          "from": 1.4436576E12,
          "from_as_string": "10-2015",
          "doc_count": 0,
          "key": "10-2015-*"
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Executing Geo-polygon Query with Geohash
DESCRIPTION: This snippet exemplifies using a geo-polygon query with geohash as one of the point formats. Elasticsearch must be able to decode geohashes and also support other point formats. Outputs include matched documents fitting within the polygon.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-polygon-query.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_polygon": {
          "person.location": {
            "points": [
              "drn5x1g8cu2y",
              "30, -80",
              "20, -90"
            ]
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Executing Pinned Query with Document IDs - Elasticsearch Console
DESCRIPTION: This console snippet demonstrates a pinned query where specific documents are ranked higher in search results based on their IDs. The 'organic' query ensures that other results still match search terms but with lower ranking. Necessary for setups where document IDs are used to control ranking in search queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-pinned-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "pinned": {
      "ids": [ "1", "4", "100" ],
      "organic": {
        "match": {
          "description": "iphone"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Generating Boolean Query with Multi-Value Document Fields in Elasticsearch
DESCRIPTION: This snippet shows how to create a boolean query using multi-value document fields in Elasticsearch. It uses script queries to filter based on field length conditions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_20

LANGUAGE: json
CODE:
```
{"bool":{"should":[{"script":{"script":{"source":"InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.gt(InternalEqlScriptUtils.length(X0),params.v1)))","params":{"v0":"file_name.keyword","v1":0}}},{"script":{"script":{"source":"InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.lte(InternalEqlScriptUtils.length(X0),params.v1)))","params":{"v0":"process_name","v1":0}}}]}
```

----------------------------------------

TITLE: Calculate Difference in Minutes (Date vs Datetime) with DATE_DIFF - SQL
DESCRIPTION: Calculates the difference in minutes between a date value and a datetime value using DATE_DIFF.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_37

LANGUAGE: SQL
CODE:
```
SELECT DATE_DIFF('minutes', '2019-09-04'::date, '2015-08-17T22:33:11.567Z'::datetime) AS "diffInMinutes";
```

----------------------------------------

TITLE: Invalid Calendar Interval Configuration in Elasticsearch
DESCRIPTION: This example shows an invalid configuration of a date histogram aggregation using multiples of calendar units, which is not supported and results in an error.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-datehistogram-aggregation.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "sales_over_time": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "2d"
      }
    }
  }
}
```

----------------------------------------

TITLE: Truncating Numeric Values to Right of Decimal in Elasticsearch SQL
DESCRIPTION: This demonstrates the `TRUNCATE` (or `TRUNC`) function in Elasticsearch SQL, truncating a number to a specified number of decimal places to the right of the decimal point. The second argument specifies the number of places.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_17

LANGUAGE: SQL
CODE:
```
SELECT TRUNC(-345.153, 1) AS trimmed;
```

----------------------------------------

TITLE: Response from creating extension metadata in Elasticsearch Service
DESCRIPTION: Sample JSON response after creating extension metadata, containing the extension ID and URL that will be used for uploading the actual file and referencing in deployment plans.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-plugins-guide.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
    "url": "repo://4226448541",
    "version": "8.4.3",
    "extension_type": "plugin",
    "id": "4226448541",
    "name": "custom-plugin"
}
```

----------------------------------------

TITLE: Complex Bucket Expressions in ESQL
DESCRIPTION: Demonstrates using BUCKET in both aggregating and grouping parts of STATS command with complex expressions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/bucket.md#2025-04-21_snippet_8

LANGUAGE: esql
CODE:
```
FROM employees
| STATS s1 = b1 + 1, s2 = BUCKET(salary / 1000 + 999, 50.) + 2 BY b1 = BUCKET(salary / 100 + 99, 50.), b2 = BUCKET(salary / 1000 + 999, 50.)
| SORT b1, b2
| KEEP s1, b1, s2, b2
```

----------------------------------------

TITLE: Using WEEK/WEEK_OF_YEAR Functions in Elasticsearch SQL
DESCRIPTION: This snippet illustrates how to use the WEEK or WEEK_OF_YEAR function to extract the week number of the year from a timestamp. Both functions take a date or datetime expression and return an integer. The example also includes ISOWEEK for comparison.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_86

LANGUAGE: SQL
CODE:
```
SELECT WEEK(CAST('1988-01-05T09:22:10Z' AS TIMESTAMP)) AS week, ISOWEEK(CAST('1988-01-05T09:22:10Z' AS TIMESTAMP)) AS isoweek;
```

----------------------------------------

TITLE: Searching Against a Standard Text Field with File Paths in Elasticsearch
DESCRIPTION: This example performs a match query against the file_path field, which uses standard analysis and matches all documents containing parts of the path, with Bob's documents ranking highest due to term frequency.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pathhierarchy-tokenizer.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET file-path-test/_search
{
  "query": {
    "match": {
      "file_path": "/User/bob/photos/2017/05"
    }
  }
}
```

----------------------------------------

TITLE: Quoting Keyword-Conflicting and Date Math Identifiers - SQL
DESCRIPTION: Shows quoting an identifier ("from") that conflicts with a keyword and quoting an identifier ("<logstash-{now/d}>") containing date math, emphasizing the recommendation to quote identifiers, especially user input.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-lexical-structure.md#_snippet_3

LANGUAGE: sql
CODE:
```
SELECT "from" FROM "<logstash-{now/d}>"
```

----------------------------------------

TITLE: Querying Elasticsearch with Span Near
DESCRIPTION: This code snippet demonstrates how to use the `span_near` query in Elasticsearch to find spans that are near each other within a document. The `clauses` array specifies the span queries to be matched, `slop` defines the maximum number of intervening positions, and `in_order` determines whether the matches must be in the specified order.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-span-near-query.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "span_near": {
      "clauses": [
        { "span_term": { "field": "value1" } },
        { "span_term": { "field": "value2" } },
        { "span_term": { "field": "value3" } }
      ],
      "slop": 12,
      "in_order": false
    }
  }
}
```

----------------------------------------

TITLE: Using the Limit Token Filter with Analyze API in Elasticsearch
DESCRIPTION: Example of using the limit token filter with the analyze API to keep only the first two tokens from the input text. The filter is configured with a max_token_count of 2.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-limit-token-count-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET _analyze
{
  "tokenizer": "standard",
    "filter": [
    {
      "type": "limit",
      "max_token_count": 2
    }
  ],
  "text": "quick fox jumps over lazy dog"
}
```

----------------------------------------

TITLE: Def Type Equality Not Equals Examples
DESCRIPTION: Shows equality not equals operations using the def type with both primitive and reference type values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_21

LANGUAGE: painless
CODE:
```
def a = 0;
def b = 1;
boolean c = a == b;
def d = new HashMap();
def e = new ArrayList();
c = d == e;
```

----------------------------------------

TITLE: Setting EC2 Discovery Credentials in Elasticsearch Keystore
DESCRIPTION: Shell commands to add AWS access and secret keys to the Elasticsearch keystore for EC2 discovery authentication.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-ec2-usage.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
bin/elasticsearch-keystore add discovery.ec2.access_key
bin/elasticsearch-keystore add discovery.ec2.secret_key
```

----------------------------------------

TITLE: Second Order Derivative Example
DESCRIPTION: Shows how to chain derivative aggregations to calculate both first and second order derivatives of monthly sales.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-derivative-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "size": 0,
  "aggs": {
    "sales_per_month": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "sales": {
          "sum": {
            "field": "price"
          }
        },
        "sales_deriv": {
          "derivative": {
            "buckets_path": "sales"
          }
        },
        "sales_2nd_deriv": {
          "derivative": {
            "buckets_path": "sales_deriv"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Using Quoted Reserved Keyword in Elasticsearch SQL
DESCRIPTION: This SQL snippet demonstrates how to use a reserved keyword, like 'AS', as an identifier within an Elasticsearch SQL query. Reserved keywords must be enclosed in double quotes to be treated as column names or other identifiers, rather than standard SQL syntax elements.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-reserved.md#_snippet_0

LANGUAGE: SQL
CODE:
```
SELECT "AS" FROM index
```

----------------------------------------

TITLE: Creating an Index with murmur3 Field Mapping in Elasticsearch
DESCRIPTION: This snippet shows how to define an index mapping with a keyword field that includes a murmur3 hash sub-field. This allows storing both the original value and its hash for efficient cardinality aggregations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/mapper-murmur3-usage.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "my_field": {
        "type": "keyword",
        "fields": {
          "hash": {
            "type": "murmur3"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: HTML Strip Character Filter in Elasticsearch
DESCRIPTION: Removes HTML elements and decodes HTML entities from text streams during text analysis preprocessing
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/character-filter-reference.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
`html_strip` character filter strips out HTML elements like `<b>` and decodes HTML entities like `&amp;`
```

----------------------------------------

TITLE: Updating EQL Search Retention Period in Elasticsearch
DESCRIPTION: This snippet shows how to update the retention period of an existing EQL search to 5 days using the get async EQL search API.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_27

LANGUAGE: console
CODE:
```
GET /_eql/search/FmNJRUZ1YWZCU3dHY1BIOUhaenVSRkEaaXFlZ3h4c1RTWFNocDdnY2FSaERnUTozNDE=?keep_alive=5d
```

----------------------------------------

TITLE: Filtering Documents Where a Field Exists in YAML
DESCRIPTION: This snippet demonstrates how to filter documents using KQL where a specific field exists, employing the '*' operator. It checks for any indexed value, including empty strings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/kql.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
http.request.method: *
```

----------------------------------------

TITLE: Span Multi-Term Query with Prefix
DESCRIPTION: Demonstrates a basic span_multi query using a prefix query to match user IDs starting with 'ki'
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-span-multi-term-query.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "span_multi": {
      "match": {
        "prefix": { "user.id": { "value": "ki" } }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating an Index with Forward and Reversed Path Hierarchy Tokenizers for File Path Analysis
DESCRIPTION: This example sets up an index with two custom path hierarchy analyzers (forward and reversed) and applies them to multifields of a file_path field, then indexes sample documents with file paths.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pathhierarchy-tokenizer.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT file-path-test
{
  "settings": {
    "analysis": {
      "analyzer": {
        "custom_path_tree": {
          "tokenizer": "custom_hierarchy"
        },
        "custom_path_tree_reversed": {
          "tokenizer": "custom_hierarchy_reversed"
        }
      },
      "tokenizer": {
        "custom_hierarchy": {
          "type": "path_hierarchy",
          "delimiter": "/"
        },
        "custom_hierarchy_reversed": {
          "type": "path_hierarchy",
          "delimiter": "/",
          "reverse": "true"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "file_path": {
        "type": "text",
        "fields": {
          "tree": {
            "type": "text",
            "analyzer": "custom_path_tree"
          },
          "tree_reversed": {
            "type": "text",
            "analyzer": "custom_path_tree_reversed"
          }
        }
      }
    }
  }
}

POST file-path-test/_doc/1
{
  "file_path": "/User/alice/photos/2017/05/16/my_photo1.jpg"
}

POST file-path-test/_doc/2
{
  "file_path": "/User/alice/photos/2017/05/16/my_photo2.jpg"
}

POST file-path-test/_doc/3
{
  "file_path": "/User/alice/photos/2017/05/16/my_photo3.jpg"
}

POST file-path-test/_doc/4
{
  "file_path": "/User/alice/photos/2017/05/15/my_photo1.jpg"
}

POST file-path-test/_doc/5
{
  "file_path": "/User/bob/photos/2017/05/16/my_photo1.jpg"
}
```

----------------------------------------

TITLE: Using LongGaugeMetric Utility in Elasticsearch
DESCRIPTION: This example demonstrates the use of the LongGaugeMetric utility to simplify the registration and updating of a LongGauge.  It's useful when direct access to the 'state' to be fetched on metric event is unavailable. The `create()` method is used to register the gauge, and the `set()` method is used to update the gauge's value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/apm/METERING.md#2025-04-21_snippet_2

LANGUAGE: java
CODE:
```
MeterRegistry meterRegistry ;
LongGaugeMetric longGaugeMetric = LongGaugeMetric.create(meterRegistry, "es.test.gauge", "a test gauge", "total value");
longGaugeMetric.set(123L);
```

----------------------------------------

TITLE: Using Fingerprint Processor in Elasticsearch Pipeline Simulation
DESCRIPTION: This example demonstrates how to use the fingerprint processor to hash user data in an Elasticsearch ingest pipeline. The processor is configured to hash the 'user' field containing personal information like name, date of birth, and activity status.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/fingerprint-processor.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _ingest/pipeline/_simulate
{
  "pipeline": {
    "processors": [
      {
        "fingerprint": {
          "fields": ["user"]
        }
      }
    ]
  },
  "docs": [
    {
      "_source": {
        "user": {
          "last_name": "Smith",
          "first_name": "John",
          "date_of_birth": "1980-01-15",
          "is_active": true
        }
      }
    }
  ]
}
```

----------------------------------------

TITLE: Using SKEWNESS Function in Elasticsearch SQL
DESCRIPTION: Illustrates how to use the SKEWNESS function to quantify the asymmetry of the distribution of values in the 'salary' field, alongside minimum and maximum values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_46

LANGUAGE: SQL
CODE:
```
SELECT MIN(salary) AS min, MAX(salary) AS max, SKEWNESS(salary) AS s FROM emp;
```

----------------------------------------

TITLE: Certificate Generation Command Synopsis - Shell
DESCRIPTION: Command line syntax for the elasticsearch-certgen tool showing all available parameters and options for generating certificates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/certgen.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
bin/elasticsearch-certgen
(([--cert <cert_file>] [--days <n>] [--dn <name>] [--key <key_file>]
[--keysize <bits>] [--pass <password>] [--p12 <password>])
| [--csr])
[-E <KeyValuePair>] [-h, --help] [--in <input_file>] [--out <output_file>]
([-s, --silent] | [-v, --verbose])
```

----------------------------------------

TITLE: DISSECT with Type Conversion in ESQL
DESCRIPTION: An example showing how to use DISSECT in combination with type conversion functions to convert the extracted data to specific types. The specific example is referenced but not provided in the given text.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/dissect.md#2025-04-21_snippet_2

LANGUAGE: esql
CODE:
```
// Example referenced but not provided in the text
```

----------------------------------------

TITLE: Combining MAX with MV_AVG Function in ESQL
DESCRIPTION: Advanced example showing how to combine MAX with MV_AVG to first average multi-valued columns and then find the maximum. This query calculates the maximum of the average 'salary_change' values across all employees.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/max.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM employees
| STATS max_avg_salary_change = MAX(MV_AVG(salary_change))
```

----------------------------------------

TITLE: Basic Min Bucket Aggregation Syntax in Elasticsearch
DESCRIPTION: Shows the basic structure of a min_bucket aggregation that finds the minimum value from specified buckets.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-min-bucket-aggregation.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "min_bucket": {
    "buckets_path": "the_sum"
  }
}
```

----------------------------------------

TITLE: Creating an API Key for GitHub Connector Authentication
DESCRIPTION: Demonstrates how to programmatically create an API key needed by the connector, covering necessary cluster privileges. The API key aids in authenticating with the GitHub instance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-github.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /_security/api_key
{
  "name": "connector_name-connector-api-key",
  "role_descriptors": {
    "connector_name-connector-role": {
      "cluster": [
        "monitor",
        "manage_connector"
      ],
      "indices": [
        {
          "names": [
            "index_name",
            ".search-acl-filter-index_name",
            ".elastic-connectors*"
          ],
          "privileges": [
            "all"
          ],
          "allow_restricted_indices": false
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: GROUP BY with Column Ordinal
DESCRIPTION: Example of grouping results using a column's ordinal position rather than its name, which references the first column in the SELECT list.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_12

LANGUAGE: sql
CODE:
```
SELECT gender FROM emp GROUP BY 1;
```

----------------------------------------

TITLE: Named Queries with Scores in Elasticsearch
DESCRIPTION: This code shows an example that includes the score associated with named queries by including the request parameter `include_named_queries_score`. The response will include a `matched_queries` map that contains the name of the query that matched as a key and its associated score as the value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-bool-query.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
GET /_search?include_named_queries_score
{
  "query": {
    "bool": {
      "should": [
        { "match": { "name.first": { "query": "shay", "_name": "first" } } },
        { "match": { "name.last": { "query": "banon", "_name": "last" } } }
      ],
      "filter": {
        "terms": {
          "name.last": [ "banon", "kimchy" ],
          "_name": "test"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Remote Cluster Server in Elasticsearch YAML
DESCRIPTION: YAML configuration for enabling and setting up the remote cluster server in Elasticsearch. This includes settings for enabling the server, specifying host addresses, and configuring TCP options.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/networking-settings.md#2025-04-21_snippet_10

LANGUAGE: yaml
CODE:
```
remote_cluster_server.enabled: true
remote_cluster.host: "192.168.1.1"
remote_cluster.bind_host: "192.168.1.1"
remote_cluster.publish_host: "192.168.1.1"
remote_cluster.publish_port: 9400
remote_cluster.tcp.keep_alive: true
remote_cluster.tcp.keep_idle: 300
remote_cluster.tcp.keep_interval: 60
remote_cluster.tcp.keep_count: 5
remote_cluster.tcp.no_delay: true
remote_cluster.tcp.reuse_address: true
remote_cluster.tcp.send_buffer_size: 64mb
remote_cluster.tcp.receive_buffer_size: 64mb
```

----------------------------------------

TITLE: Extracting Remainder of String with SUBSTRING in ESQL
DESCRIPTION: This example demonstrates using the SUBSTRING function with an omitted length parameter, which returns all characters from the starting position to the end of the string. It extracts all characters except the first one from each last_name.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/substring.md#2025-04-21_snippet_2

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP last_name
| EVAL ln_sub = SUBSTRING(last_name, 2)
```

----------------------------------------

TITLE: Advanced Sync Rules for Redis Connector - Fetching SET Type Records
DESCRIPTION: JSON configuration for advanced sync rules to fetch Redis database records where type is 'SET'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-redis.md#2025-04-21_snippet_9

LANGUAGE: js
CODE:
```
[
  {
    "database": 0,
    "type": "SET"
  }
]
```

----------------------------------------

TITLE: Random Score Function Example
DESCRIPTION: This snippet shows how to use the `randomScore` function to generate random scores for documents. It uses a seed value of 100 and the '_seq_no' field as a source of randomness.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-script-score-query.md#2025-04-21_snippet_3

LANGUAGE: js
CODE:
```
"script" : {
    "source" : "randomScore(100, '_seq_no')"
}
```

----------------------------------------

TITLE: Grouping Geo-Line Data with Time-Series Aggregation in Elasticsearch
DESCRIPTION: Example of using time-series aggregation to group geo-line data, specifically designed for time series indices. This approach leverages pre-sorted data by timestamp for better performance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-geo-line.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
POST /tour/_search?filter_path=aggregations
{
  "aggregations": {
    "path": {
      "time_series": {},
      "aggregations": {
        "museum_tour": {
          "geo_line": {
            "point": {"field": "location"}
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Using Triple Quotes for ESQL Regular Expressions
DESCRIPTION: This snippet shows an alternative approach using triple quotes to reduce the need for escaping in ESQL regular expressions. It simplifies the syntax by allowing a single backslash for escaping special characters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/detailedDescription/rlike.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
ROW message = "foo ( bar"
| WHERE message RLIKE """foo \( bar"""
```

----------------------------------------

TITLE: Fixed Salary Bucket Size in ESQL
DESCRIPTION: Creates salary buckets with a fixed size of 5000 units for employees hired in 1985.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/bucket.md#2025-04-21_snippet_5

LANGUAGE: esql
CODE:
```
FROM employees
| WHERE hire_date >= "1985-01-01T00:00:00Z" AND hire_date < "1986-01-01T00:00:00Z"
| STATS c = COUNT(1) BY b = BUCKET(salary, 5000.)
| SORT b
```

----------------------------------------

TITLE: Advanced EQL Sample Query with Size Parameters
DESCRIPTION: Demonstrates how to configure sample size limits using max_samples_per_key and size parameters to control result set size.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_16

LANGUAGE: console
CODE:
```
GET /my-index*/_eql/search
{
  "max_samples_per_key": 2,
  "size": 20,
  "query": """
    sample
      [any where uptime > 0]   by host,os
      [any where port > 100]   by host,op_sys
      [any where bool == true] by host,os
  """
}
```

----------------------------------------

TITLE: Using LENGTH and BYTE_LENGTH Functions in ESQL Query
DESCRIPTION: An ESQL query that filters airports in India, keeps only the city column, and adds two computed columns using the LENGTH and BYTE_LENGTH functions. The example demonstrates that for non-ASCII characters like 'ā', the byte length can be greater than the character length.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/byte_length.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airports
| WHERE country == "India"
| KEEP city
| EVAL fn_length = LENGTH(city), fn_byte_length = BYTE_LENGTH(city)
```

----------------------------------------

TITLE: Update Configuration for Docker Deployment - Elasticsearch - YAML
DESCRIPTION: This YAML snippet is a configuration template for deploying the S3 connector with Docker. It includes settings for the Elasticsearch host, API key, and connector ID. The configuration should be updated according to the environment specifics.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-s3.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
# When connecting to your cloud deployment you should edit the host value
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: s3
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA> # Optional. If not provided, the connector will use the elasticsearch.api_key instead
```

----------------------------------------

TITLE: Calculating Square Root Using SQRT Function in ESQL
DESCRIPTION: This snippet demonstrates how to use the SQRT function in ESQL to calculate the square root of a numeric value. The example creates a row with a double value of 100.0 and then evaluates its square root, resulting in 10.0.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/sqrt.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW d = 100.0
| EVAL s = SQRT(d)
```

----------------------------------------

TITLE: Querying IPv6 Addresses Using Query String in Elasticsearch
DESCRIPTION: This snippet shows how to use the query_string query to search for IPv6 addresses, demonstrating the need to escape colons by enclosing the address in quotes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/ip.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET my-index-000001/_search
{
  "query": {
    "query_string" : {
      "query": "ip_addr:\"2001:db8::/48\""
    }
  }
}
```

----------------------------------------

TITLE: Creating and Querying Index with date_nanos Field in Elasticsearch
DESCRIPTION: Example of creating an index with a date_nanos field, inserting data, and querying it with various date formats and a runtime field to detect nanosecond precision.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/date_nanos.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "date": {
        "type": "date_nanos"
      }
    }
  }
}

PUT my-index-000001/_bulk?refresh
{ "index" : { "_id" : "1" } }
{ "date": "2015-01-01" }
{ "index" : { "_id" : "2" } }
{ "date": "2015-01-01T12:10:30.123456789Z" }
{ "index" : { "_id" : "3" } }
{ "date": 1420070400000 }

GET my-index-000001/_search
{
  "sort": { "date": "asc"},
  "runtime_mappings": {
    "date_has_nanos": {
      "type": "boolean",
      "script": "emit(doc['date'].value.nano != 0)"
    }
  },
  "fields": [
    {
      "field": "date",
      "format": "strict_date_optional_time_nanos"
    },
    {
      "field": "date_has_nanos"
    }
  ]
}
```

----------------------------------------

TITLE: Filtering for NOT NULL Values and Aggregating in ESQL
DESCRIPTION: This query selects employees where the is_rehired field is NOT NULL and then counts the total number of employee numbers. The result shows a count of 84 employees who have been rehired.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/examples/predicates.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM employees
| WHERE is_rehired IS NOT NULL
| STATS COUNT(emp_no)
```

----------------------------------------

TITLE: Calculating Percentiles using HDR Histogram in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the HDR Histogram for calculating percentiles in Elasticsearch. It specifies the 'hdr' parameter and sets the number of significant value digits for precision.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-percentile-aggregation.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
GET latency/_search
{
  "size": 0,
  "aggs": {
    "load_time_outlier": {
      "percentiles": {
        "field": "load_time",
        "percents": [ 95, 99, 99.9 ],
        "hdr": {                                  <1>
          "number_of_significant_value_digits": 3 <2>
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Querying Elasticsearch with Pre-indexed GeoShape
DESCRIPTION: This code snippet shows how to query Elasticsearch using a pre-indexed shape. It references the shape with ID `deu` from the `shapes` index and the `location` path. This allows querying based on a shape that has been pre-defined and stored in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-shape-query.md#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
GET /example/_search
{
  "query": {
    "bool": {
      "filter": {
        "geo_shape": {
          "location": {
            "indexed_shape": {
              "index": "shapes",
              "id": "deu",
              "path": "location"
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Adding Missing Configuration Fields with Elasticsearch Console
DESCRIPTION: This console command uses the Elasticsearch POST update API to add missing configuration fields to a connector document in the `.elastic-connectors` index. It provides examples for adding fields of type `str`, `bool`, `int`, and `list`. This is a manual resolution for a known issue where connectors created before 8.8 might be missing configuration fields, preventing them from running. The `connector_id` placeholder should be replaced with the actual connector ID, and the specific fields (`field_a`, `field_b`, etc.) and their types/values should match the fields reported as missing by the connector.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-known-issues.md#_snippet_2

LANGUAGE: console
CODE:
```
POST /.elastic-connectors/_update/connector_id
{
  "doc" : {
    "configuration": {
      "field_a": {
        "type": "str",
        "value": ""
      },
      "field_b": {
        "type": "bool",
        "value": false
      },
      "field_c": {
        "type": "int",
        "value": 1
      },
      "field_d": {
        "type": "list",
        "value": "a,b"
      }
    }
  }
}
```

----------------------------------------

TITLE: Performing Cartesian-bounds Aggregation on Shape Data
DESCRIPTION: This snippet shows how to perform a cartesian-bounds aggregation on a Shape field, returning the bounding box of all documents in the index.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-cartesian-bounds-aggregation.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
POST /places/_search?size=0
{
  "aggs": {
    "viewport": {
      "cartesian_bounds": {
        "field": "geometry"
      }
    }
  }
}
```

----------------------------------------

TITLE: Example for Ignored Field Values in Elasticsearch Console
DESCRIPTION: This sequence of console commands demonstrates how Elasticsearch handles field values that violate mapping constraints. It sets up an index with a size restriction on a field, indexes a document containing both valid and invalid values for that field, and then performs a search to show how the ignored value appears separately in the response.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_12

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "my-small" : { "type" : "keyword", "ignore_above": 2 }, 
      "my-large" : { "type" : "keyword" }
    }
  }
}

PUT my-index-000001/_doc/1?refresh=true
{
  "my-small": ["ok", "bad"], 
  "my-large": "ok content"
}

POST my-index-000001/_search
{
  "fields": ["my-*"],
  "_source": false
}
```

----------------------------------------

TITLE: Defining InternalSqlScriptUtils Class for SQL Scripting in Java
DESCRIPTION: This snippet defines the InternalSqlScriptUtils class with various mathematical, date/time, ASCII, geo, and casting functions for use in SQL scripting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/main/resources/org/elasticsearch/xpack/sql/plugin/sql_whitelist.txt#2025-04-21_snippet_5

LANGUAGE: java
CODE:
```
class org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils {
#
# Conditional
#
  def coalesce(java.util.List)
  def greatest(java.util.List)
  def least(java.util.List)
  def nullif(Object, Object)

#
# Math
#
  def add(Object, Object)
  def sub(Object, Object)
  def div(Object, Object)
  def mod(Object, Object)
  def mul(Object, Object)
  Number atan2(Number, Number)
  Number neg(Number)
  Number power(Number, Number)
  Number round(Number, Number)
  Number truncate(Number, Number)

  Number abs(Number)
  Number acos(Number)
  Number asin(Number)
  Number atan(Number)
  Number cbrt(Number)
  Number ceil(Number)
  Number cos(Number)
  Number cosh(Number)
  Number cot(Number)
  Number degrees(Number)
  Number e(Number)
  Number exp(Number)
  Number expm1(Number)
  Number floor(Number)
  Number log(Number)
  Number log10(Number)
  Number pi(Number)
  Number radians(Number)
  Number random(Number)
  Number sign(Number)
  Number sin(Number)
  Number sinh(Number)
  Number sqrt(Number)
  Number tan(Number)

#
# Date/Time functions
#
  Integer dateTimeChrono(Object, String, String)
  Integer dateTimeExtract(Object, String, String)
  String  dayName(Object, String)
  Integer dayOfWeek(Object, String)
  String  monthName(Object, String)
  Integer quarter(Object, String)
  Integer weekOfYear(Object, String)
  ZonedDateTime dateAdd(String, Integer, Object, String)
  Integer dateDiff(String, Object, Object, String)
  def dateTrunc(String, Object, String)
  def dateParse(String, String, String)
  Integer datePart(String, Object, String)
  String dateFormat(Object, String, String)
  String dateTimeFormat(Object, String, String)
  String format(Object, String, String)
  String toChar(Object, String, String)
  def dateTimeParse(String, String, String)
  def timeParse(String, String, String)
  IntervalDayTime intervalDayTime(String, String)
  IntervalYearMonth intervalYearMonth(String, String)
  ZonedDateTime asDateTime(Object)
  OffsetTime asTime(String)

#
# ASCII Functions
#
  Integer ascii(String)
  Integer bitLength(String)
  String  character(Number)
  Integer charLength(String)
  String  concat(String, String)
  String  insert(String, Number, Number, String)
  String  lcase(String)
  String  left(String, Number)
  Integer length(String)
  Integer locate(String, String)
  Integer locate(String, String, Number)
  String  ltrim(String)
  Integer octetLength(String)
  Integer position(String, String)
  String  repeat(String, Number)
  String  replace(String, String, String)
  String  right(String, Number)
  String  rtrim(String)
  String  space(Number)
  String  substring(String, Number, Number)
  String  trim(String)
  String  ucase(String)

#
# Geo Functions
#
  GeoShape geoDocValue(java.util.Map, String)
  String   stAswkt(Object)
  Double   stDistance(Object, Object)
  String   stGeometryType(Object)
  GeoShape stWktToSql(String)
  Double   stX(Object)
  Double   stY(Object)
  Double   stZ(Object)

#
# Casting
#
  def cast(Object, String)
}
```

----------------------------------------

TITLE: Defining LOCATE Function Test Case in SQL
DESCRIPTION: This SQL snippet defines a test case for the LOCATE function, which finds the position of a substring within a string. It includes various test scenarios to validate the function's behavior.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/locate.md#2025-04-21_snippet_0

LANGUAGE: SQL
CODE:
```
SELECT
    LOCATE('bar', 'foobarbar') AS result1,
    LOCATE('bar', 'foobarbar', 5) AS result2,
    LOCATE('bar', 'foo') AS result3,
    LOCATE('', 'foo') AS result4,
    LOCATE('foo', '') AS result5,
    LOCATE('', '') AS result6,
    LOCATE('a', 'aaa') AS result7,
    LOCATE('aa', 'aaa') AS result8,
    LOCATE('aaa', 'aaa') AS result9,
    LOCATE('', 'aaa') AS result10,
    LOCATE('a', 'aaa', 2) AS result11,
    LOCATE('aa', 'aaa', 2) AS result12,
    LOCATE('aaa', 'aaa', 2) AS result13,
    LOCATE('', 'aaa', 2) AS result14
;

-- { "columns": [
--   {"name": "result1", "type": "integer"},
--   {"name": "result2", "type": "integer"},
--   {"name": "result3", "type": "integer"},
--   {"name": "result4", "type": "integer"},
--   {"name": "result5", "type": "integer"},
--   {"name": "result6", "type": "integer"},
--   {"name": "result7", "type": "integer"},
--   {"name": "result8", "type": "integer"},
--   {"name": "result9", "type": "integer"},
--   {"name": "result10", "type": "integer"},
--   {"name": "result11", "type": "integer"},
--   {"name": "result12", "type": "integer"},
--   {"name": "result13", "type": "integer"},
--   {"name": "result14", "type": "integer"}
-- ],
-- "rows": [
--   [4, 7, 0, 1, 0, 1, 1, 1, 1, 1, 2, 2, 0, 2]
-- ] }
```

----------------------------------------

TITLE: Calculating String Bit Length in ESQL
DESCRIPTION: Demonstrates the use of BIT_LENGTH() function to calculate the bit length of city names, compared with regular LENGTH(). The query filters airports in India and shows both character length and bit length of city names. Since UTF-8 encoding is used, characters may occupy multiple bytes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/bit_length.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airports
| WHERE country == "India"
| KEEP city
| EVAL fn_length = LENGTH(city), fn_bit_length = BIT_LENGTH(city)
```

----------------------------------------

TITLE: Generating X.509 Certificates with elasticsearch-certutil
DESCRIPTION: This command generates X.509 certificates and private keys using a previously created CA. It prompts for the CA password, output filename, and password, which can also be specified using the --ca-pass, --out, and --pass parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/certutil.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12
```

----------------------------------------

TITLE: Custom Fingerprint Analyzer Implementation
DESCRIPTION: Demonstrates how to recreate the fingerprint analyzer as a custom analyzer for further customization using standard tokenizer and specific token filters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-fingerprint-analyzer.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /fingerprint_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "rebuilt_fingerprint": {
          "tokenizer": "standard",
          "filter": [
            "lowercase",
            "asciifolding",
            "fingerprint"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: RRF Pagination Example with Rank Window Size
DESCRIPTION: Python-like example demonstrating how rank_window_size affects RRF scoring and pagination. Shows the ranked result sets for different documents with two queries and explains how from and size parameters work with rank_window_size.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reciprocal-rank-fusion.md#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
     |  queryA   |  queryB    |
_id: |  1        |  5         |
_id: |  2        |  4         |
_id: |  3        |  3         |
_id: |  4        |  1         |
_id: |           |  2         |
```

----------------------------------------

TITLE: Removing Store SMB Plugin (Shell)
DESCRIPTION: This command removes the Store SMB plugin using the Elasticsearch plugin manager. The node where the plugin is being removed must be stopped before executing this command. It typically requires root or administrator privileges.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/store-smb.md#_snippet_1

LANGUAGE: sh
CODE:
```
sudo bin/elasticsearch-plugin remove store-smb
```

----------------------------------------

TITLE: Example Output of Corrupted Data Removal
DESCRIPTION: Shows the complete output of running the elasticsearch-shard tool to remove corrupted data, including warnings, analysis results, and required follow-up actions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/shard-tool.md#2025-04-21_snippet_2

LANGUAGE: txt
CODE:
```
$ bin/elasticsearch-shard remove-corrupted-data --index my-index-000001 --shard-id 0


    WARNING: Elasticsearch MUST be stopped before running this tool.

  Please make a complete backup of your index before using this tool.


Opening Lucene index at /var/lib/elasticsearchdata/indices/P45vf_YQRhqjfwLMUvSqDw/0/index/

 >> Lucene index is corrupted at /var/lib/elasticsearchdata/indices/P45vf_YQRhqjfwLMUvSqDw/0/index/

Opening translog at /var/lib/elasticsearchdata/indices/P45vf_YQRhqjfwLMUvSqDw/0/translog/


 >> Translog is clean at /var/lib/elasticsearchdata/indices/P45vf_YQRhqjfwLMUvSqDw/0/translog/


  Corrupted Lucene index segments found - 32 documents will be lost.

            WARNING:              YOU WILL LOSE DATA.

Continue and remove docs from the index ? Y

WARNING: 1 broken segments (containing 32 documents) detected
Took 0.056 sec total.
Writing...
OK
Wrote new segments file "segments_c"
Marking index with the new history uuid : 0pIBd9VTSOeMfzYT6p0AsA
Changing allocation id V8QXk-QXSZinZMT-NvEq4w to tjm9Ve6uTBewVFAlfUMWjA

You should run the following command to allocate this shard:

POST /_cluster/reroute
{
  "commands" : [
    {
      "allocate_stale_primary" : {
        "index" : "index42",
        "shard" : 0,
        "node" : "II47uXW2QvqzHBnMcl2o_Q",
        "accept_data_loss" : false
      }
    }
  ]
}

You must accept the possibility of data loss by changing the `accept_data_loss` parameter to `true`.

Deleted corrupt marker corrupted_FzTSBSuxT7i3Tls_TgwEag from /var/lib/elasticsearchdata/indices/P45vf_YQRhqjfwLMUvSqDw/0/index/
```

----------------------------------------

TITLE: Retrieving Detailed Script Error Information in ElasticSearch
DESCRIPTION: This snippet demonstrates how to retrieve detailed information when a script evaluation fails. It shows the JSON response format that includes a script_stack array and cause object which provides the exception type and reason for the failure.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/vector-tile/licenses/slf4j-api-NOTICE.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "error" : {
    "root_cause" : [
      {
        "type" : "script_exception",
        "reason" : "runtime error",
        "script_stack" : [
          "... composite array size must be added ...",
          "    sizes[i] = dimension * sizes[i+1];\n",
          "             ^---- HERE"
        ],
        "script" : "import org.elasticsearch.compute.ann.VectorSimilarity;\nVector a = [1.0, 2.0, 3.0];\nVector b = [4.0, 5.0, 6.0];\nreturn VectorSimilarity.cosineSimilarity(a, b);",
        "lang" : "painless"
      }
    ],
    "type" : "script_exception",
    "reason" : "runtime error",
    "script_stack" : [
      "... composite array size must be added ...",
      "    sizes[i] = dimension * sizes[i+1];\n",
      "             ^---- HERE"
    ],
    "script" : "import org.elasticsearch.compute.ann.VectorSimilarity;\nVector a = [1.0, 2.0, 3.0];\nVector b = [4.0, 5.0, 6.0];\nreturn VectorSimilarity.cosineSimilarity(a, b);",
    "lang" : "painless",
    "caused_by" : {
      "type" : "illegal_argument_exception",
      "reason" : "Dynamic method [java.lang.Math, cosineSimilarity, [double[]              #1<local>, double[] #2<local>]] not found"
    }
  },
  "status" : 500
}
```

----------------------------------------

TITLE: Connector Configuration (Non-Dockerized)
DESCRIPTION: This YAML configuration snippet shows how to configure the self-managed connector to use the data extraction service.  It specifies the host, enables file pointers, and defines the shared volume directory. The `host` should point to the extraction service's endpoint.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-content-extraction.md#2025-04-21_snippet_4

LANGUAGE: yaml
CODE:
```
# data-extraction-service settings
extraction_service:
  host: http://localhost:8090
  use_file_pointers: true
  shared_volume_dir: '/app/files'
```

----------------------------------------

TITLE: Configuring Elasticsearch YAML File in Bash
DESCRIPTION: Creates and populates the Elasticsearch configuration file with cluster settings, node name, network settings, and security options.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/qa/repository-old-versions-compatibility/src/javaRestTest/resources/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
touch /tmp/sharedESData/config/elasticsearch.yml

cat <<EOF >> /tmp/sharedESData/config/elasticsearch.yml
cluster.name: "archive-indides-test"
node.name: "node-1"
path.repo: ["/usr/share/elasticsearch/snapshots"]
network.host: 0.0.0.0
http.port: 9200

discovery.type: single-node
xpack.security.enabled: false
EOF
```

----------------------------------------

TITLE: RRF Search Response with Ranked Results and Aggregations in Elasticsearch
DESCRIPTION: The response from the Reciprocal Rank Fusion search showing the combined ranking of documents from both text and vector queries, along with the terms aggregation results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reciprocal-rank-fusion.md#2025-04-21_snippet_5

LANGUAGE: console-response
CODE:
```
{
    "took": ...,
    "timed_out" : false,
    "_shards" : {
        "total" : 1,
        "successful" : 1,
        "skipped" : 0,
        "failed" : 0
    },
    "hits" : {
        "total" : {
            "value" : 5,
            "relation" : "eq"
        },
        "max_score" : ...,
        "hits" : [
            {
                "_index" : "example-index",
                "_id" : "3",
                "_score" : 0.8333334,
                "_source" : {
                    "integer" : 1,
                    "vector" : [
                        3
                    ],
                    "text" : "rrf rrf rrf"
                }
            },
            {
                "_index" : "example-index",
                "_id" : "2",
                "_score" : 0.5833334,
                "_source" : {
                    "integer" : 2,
                    "vector" : [
                        4
                    ],
                    "text" : "rrf rrf"
                }
            },
            {
                "_index" : "example-index",
                "_id" : "4",
                "_score" : 0.5,
                "_source" : {
                    "integer" : 2,
                    "text" : "rrf rrf rrf rrf"
                }
            }
        ]
    },
    "aggregations" : {
        "int_count" : {
            "doc_count_error_upper_bound" : 0,
            "sum_other_doc_count" : 0,
            "buckets" : [
                {
                    "key" : 1,
                    "doc_count" : 3
                },
                {
                    "key" : 2,
                    "doc_count" : 2
                }
            ]
        }
    }
}
```

----------------------------------------

TITLE: Response from Hierarchical Nested Inner Hits Query in Elasticsearch
DESCRIPTION: The response shows how Elasticsearch returns the matching document along with the inner hits for the nested path 'comments.votes'. The inner hits section contains the exact nested object that matched the query, preserving the hierarchical structure with nested field offsets.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-inner-hits.md#2025-04-21_snippet_6

LANGUAGE: console-result
CODE:
```
{
  ...,
  "hits": {
    "total" : {
        "value": 1,
        "relation": "eq"
    },
    "max_score": 0.6931471,
    "hits": [
      {
        "_index": "test",
        "_id": "1",
        "_score": 0.6931471,
        "_source": ...,
        "inner_hits": {
          "comments.votes": {
            "hits": {
              "total" : {
                  "value": 1,
                  "relation": "eq"
              },
              "max_score": 0.6931471,
              "hits": [
                {
                  "_index": "test",
                  "_id": "1",
                  "_nested": {
                    "field": "comments",
                    "offset": 1,
                    "_nested": {
                      "field": "votes",
                      "offset": 0
                    }
                  },
                  "_score": 0.6931471,
                  "_source": {
                    "value": 1,
                    "voter": "kimchy"
                  }
                }
              ]
            }
          }
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Using TODAY for Relative Date Filtering in Elasticsearch SQL
DESCRIPTION: This snippet demonstrates how the TODAY function can be used in a WHERE clause for relative date filtering. It shows selecting employee names where the hire date is greater than 35 years before today's date, useful for dynamic date-based queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_85

LANGUAGE: SQL
CODE:
```
SELECT first_name FROM emp WHERE hire_date > TODAY() - INTERVAL 35 YEARS ORDER BY first_name ASC LIMIT 5;
```

----------------------------------------

TITLE: Keyword Marker with Stemmer Analysis
DESCRIPTION: Example showing how to prevent stemming of specific words using keyword_marker filter before the stemmer filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-keyword-marker-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer": "whitespace",
  "filter": [
    {
      "type": "keyword_marker",
      "keywords": [ "jumping" ]
    },
    "stemmer"
  ],
  "text": "fox running and jumping"
}
```

----------------------------------------

TITLE: Logging put_privileges Event in Elasticsearch
DESCRIPTION: Example of an audit log for the create or update privileges event. This event is logged when the API is invoked to add or update one or more application privileges.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_12

LANGUAGE: javascript
CODE:
```
{"type":"audit", "timestamp":"2020-12-31T00:39:07,779+0200", "node.id":
"9clhpgjJRR-iKzOw20xBNQ", "event.type":"security_config_change",
"event.action":"put_privileges", "request.id":"1X2VVtNgRYO7FmE0nR_BGA",
"put":{"privileges":[{"application":"myapp","name":"read","actions":
["data:read/*","action:login"],"metadata":{"description":"Read access to myapp"}}]}}
```

----------------------------------------

TITLE: Customizing Lowercase Filter for Greek Language in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create a custom lowercase filter specifically for the Greek language, using the create index API to define both the filter and a custom analyzer that uses it.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lowercase-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT custom_lowercase_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "greek_lowercase_example": {
          "type": "custom",
          "tokenizer": "standard",
          "filter": ["greek_lowercase"]
        }
      },
      "filter": {
        "greek_lowercase": {
          "type": "lowercase",
          "language": "greek"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Date Histogram Value Source Example
DESCRIPTION: Shows how to use the date_histogram value source with a calendar interval. This example creates daily buckets from a timestamp field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_6

LANGUAGE: json
CODE:
```
GET /_search
{
  "size": 0,
  "aggs": {
    "my_buckets": {
      "composite": {
        "sources": [
          { "date": { "date_histogram": { "field": "timestamp", "calendar_interval": "1d" } } }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Using Pattern Matcher to Remove Vowels in Painless
DESCRIPTION: Uses Painless regex with Pattern.matcher to remove all vowels from player last names.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/brief-painless-walkthrough.md#2025-04-21_snippet_11

LANGUAGE: console
CODE:
```
POST hockey/_update_by_query
{
  "script": {
    "lang": "painless",
    "source": "ctx._source.last = /[aeiou]/.matcher(ctx._source.last).replaceAll('')"
  }
}
```

----------------------------------------

TITLE: Addition Operator in Elasticsearch Script
DESCRIPTION: Performs arithmetic addition on the `serial_event_id` field, comparing the result with a specific number. Implements the `add` function in an Elasticsearch scripting context to handle such calculations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_18

LANGUAGE: Elasticsearch Painless
CODE:
```
script":{"source":"InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.eq(InternalEqlScriptUtils.add(X0,params.v1),params.v2)))","params":{"v0":"serial_event_id","v1":2,"v2":-2147483647}}
```

----------------------------------------

TITLE: Searching Documents with Join Fields in Elasticsearch
DESCRIPTION: Example of searching an index that contains documents with a join field. The search returns both parent and child documents, showing how the join field appears in each document type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/parent-join.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET my-index-000001/_search
{
  "query": {
    "match_all": {}
  },
  "sort": ["my_id"]
}
```

----------------------------------------

TITLE: Parent Aggregation Response Example
DESCRIPTION: Shows the response from the parent aggregation query, displaying top answer owners and for each owner the top tags from their corresponding question documents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-parent-aggregation.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
{
  "took": 9,
  "timed_out": false,
  "_shards": {
    "total": 1,
    "successful": 1,
    "skipped": 0,
    "failed": 0
  },
  "hits": {
    "total" : {
      "value": 3,
      "relation": "eq"
    },
    "max_score": null,
    "hits": []
  },
  "aggregations": {
    "top-names": {
      "doc_count_error_upper_bound": 0,
      "sum_other_doc_count": 0,
      "buckets": [
        {
          "key": "Sam",
          "doc_count": 1, <1>
          "to-questions": {
            "doc_count": 1, <2>
            "top-tags": {
              "doc_count_error_upper_bound": 0,
              "sum_other_doc_count": 0,
              "buckets": [
                {
                  "key": "file-transfer",
                  "doc_count": 1
                },
                {
                  "key": "windows-server-2003",
                  "doc_count": 1
                },
                {
                  "key": "windows-server-2008",
                  "doc_count": 1
                }
              ]
            }
          }
        },
        {
          "key": "Troll",
          "doc_count": 1,
          "to-questions": {
            "doc_count": 1,
            "top-tags": {
              "doc_count_error_upper_bound": 0,
              "sum_other_doc_count": 0,
              "buckets": [
                {
                  "key": "file-transfer",
                  "doc_count": 1
                },
                {
                  "key": "windows-server-2003",
                  "doc_count": 1
                },
                {
                  "key": "windows-server-2008",
                  "doc_count": 1
                }
              ]
            }
          }
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Verifying Data in Elasticsearch Music Index
DESCRIPTION: Performs queries to verify data presence and structure in the `music` index after a sync job.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/api-tutorial.md#2025-04-21_snippet_18

LANGUAGE: console
CODE:
```
GET music/_count
GET music/_search
```

----------------------------------------

TITLE: Converting WKT Format to Geo Point in ESQL
DESCRIPTION: This example demonstrates how to use the TO_GEOPOINT function to convert a WKT (Well-Known Text) string representation of a point to Elasticsearch's geo_point data type. The function takes a WKT string as input and returns a geo_point value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_geopoint.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW wkt = "POINT(42.97109630194 14.7552534413725)"
| EVAL pt = TO_GEOPOINT(wkt)
```

----------------------------------------

TITLE: Calculating Modulo in EQL
DESCRIPTION: Calculates the remainder of a division between a dividend and a divisor. Supports integer and float inputs, handles nulls, and allows using numeric fields. The divisor cannot be zero.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-function-ref.md#_snippet_10

LANGUAGE: eql
CODE:
```
modulo(10, 6)                                       // returns 4
modulo(10, 5)                                       // returns 0
modulo(10, 0.5)                                     // returns 0
modulo(10, -6)                                      // returns 4
modulo(-10, -6)                                     // returns -4

// process.args_count = 10
modulo(process.args_count, 6)                       // returns 4
modulo(process.args_count, 5)                       // returns 0
modulo(106, process.args_count)                     // returns 6
modulo(process.args_count, -6)                      // returns 4
modulo(process.args_count, 0.5)                     // returns 0

// process.parent.args_count = 6
modulo(process.args_count, process.parent.args_count)  // returns 4

// null handling
modulo(null, 5)                                     // returns null
modulo(7, null)                                     // returns null
modulo(null, process.args_count)                    // returns null
modulo(process.args_count, null)                    // returns null
```

----------------------------------------

TITLE: SQL Query for FIRST Aggregation with Two Arguments
DESCRIPTION: This SQL query selects the first value of the keyword field, sorted by the int field, from the test table.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_28

LANGUAGE: SQL
CODE:
```
SELECT FIRST(keyword, int) FROM test;
```

----------------------------------------

TITLE: Fixing EQL Divide Integer Rounding with Float
DESCRIPTION: This EQL query modifies the previous example by changing the dividend from an integer `4` to a float `4.0`. This prevents the `divide` function from rounding down the result, ensuring the query only matches events where the division results in exactly `1.0` (before comparison to the integer `1`).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-function-ref.md#_snippet_5

LANGUAGE: eql
CODE:
```
process where divide(4.0, process.args_count) == 1
```

----------------------------------------

TITLE: CHANGE_POINT Example in Elasticsearch SQL
DESCRIPTION: Demonstrates the usage of the CHANGE_POINT command to detect a step change in a metric. The example includes input data and the expected output after applying the command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/change_point.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
INPUT
1	10
2	11
3	9
4	12
5	10
6	11
7	20
8	19
9	21
10	22
;

CHANGE_POINT y ON x
;

OUTPUT
x	y	type	pvalue
1	10	null	null
2	11	null	null
3	9	null	null
4	12	null	null
5	10	null	null
6	11	null	null
7	20	step_change	0.00123
8	19	null	null
9	21	null	null
10	22	null	null
;
```

----------------------------------------

TITLE: Multiplication Operator in Painless
DESCRIPTION: Illustrates the multiplication operator ('*') in Painless with different numeric types.  It shows how the result type is determined by the promotion rules, and provides an example with int and double types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_14

LANGUAGE: painless
CODE:
```
int i = 5*4;      <1>
double d = i*7.0; <2>
```

----------------------------------------

TITLE: Function Score with Has Parent Query for Sorting
DESCRIPTION: Demonstrates using a function_score query with has_parent to sort child documents based on a parent document's field value
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-has-parent-query.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "has_parent": {
      "parent_type": "parent",
      "score": true,
      "query": {
        "function_score": {
          "script_score": {
            "script": "_score * doc['view_count'].value"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating JKS Keystore with Multiple Entries
DESCRIPTION: Generates a Java KeyStore (JKS) with multiple RSA and EC keys using the keytool command. Each key is given a different alias and distinguished name.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/identity-provider/src/test/resources/org/elasticsearch/xpack/idp/saml/idp/README.txt#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
keytool -genkey -alias signing1 -keyalg RSA -keysize 2048 -keystore multi_signing.jks -storepass signing -dname \"CN=saml1-test\"

keytool -genkey -alias signing2 -keyalg RSA -keysize 2048 -keystore multi_signing.jks -storepass signing -dname \"CN=saml2-test\"

keytool -genkey -alias signing3 -keyalg RSA -keysize 2048 -keystore multi_signing.jks -storepass signing -dname \"CN=saml3-test\"

keytool -genkey -alias signing4 -keyalg EC -keysize 256 -keystore multi_signing.jks -storepass signing -dname \"CN=saml4-test\"
```

----------------------------------------

TITLE: Syntax for ISO_DAY_OF_WEEK Function in Elasticsearch SQL
DESCRIPTION: Defines the syntax for the ISO_DAY_OF_WEEK function (also aliased as ISODAYOFWEEK, ISODOW, IDOW). It takes a date or datetime expression and extracts the day of the week according to ISO 8601 standard. Monday is 1, Tuesday is 2, etc. Returns null if the input is null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_66

LANGUAGE: SQL
CODE:
```
ISO_DAY_OF_WEEK(datetime_exp) <1>
```

----------------------------------------

TITLE: Enabling Mutual Information Score
DESCRIPTION: Configures the significant_terms aggregation to use Mutual Information scoring, including terms that appear less frequently in the subset. This score is described in "Information Retrieval" by Manning et al.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-significantterms-aggregation.md#_snippet_4

LANGUAGE: JSON
CODE:
```
	 "mutual_information": {
	      "include_negatives": true
	 }
```

----------------------------------------

TITLE: Profile API Response Structure in Elasticsearch
DESCRIPTION: Example response from the Profile API showing detailed timing information for a search query. The response includes metrics for query execution, breakdown of time spent in different operations, and fetch phase details.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-profile.md#2025-04-21_snippet_1

LANGUAGE: console-result
CODE:
```
{
  "took": 25,
  "timed_out": false,
  "_shards": {
    "total": 1,
    "successful": 1,
    "skipped": 0,
    "failed": 0
  },
  "hits": {
    "total": {
      "value": 5,
      "relation": "eq"
    },
    "max_score": 0.17402273,
    "hits": [...] <1>
  },
  "profile": {
    "shards": [
      {
        "id": "[q2aE02wS1R8qQFnYu6vDVQ][my-index-000001][0]",
        "node_id": "q2aE02wS1R8qQFnYu6vDVQ",
        "shard_id": 0,
        "index": "my-index-000001",
        "cluster": "(local)",
        "searches": [
          {
            "query": [
              {
                "type": "BooleanQuery",
                "description": "message:get message:search",
                "time_in_nanos" : 11972972,
                "breakdown" : {
                  "set_min_competitive_score_count": 0,
                  "match_count": 5,
                  "shallow_advance_count": 0,
                  "set_min_competitive_score": 0,
                  "next_doc": 39022,
                  "match": 4456,
                  "next_doc_count": 5,
                  "score_count": 5,
                  "compute_max_score_count": 0,
                  "compute_max_score": 0,
                  "advance": 84525,
                  "advance_count": 1,
                  "score": 37779,
                  "build_scorer_count": 2,
                  "create_weight": 4694895,
                  "shallow_advance": 0,
                  "create_weight_count": 1,
                  "build_scorer": 7112295,
                  "count_weight": 0,
                  "count_weight_count": 0
                },
                "children": [
                  {
                    "type": "TermQuery",
                    "description": "message:get",
                    "time_in_nanos": 3801935,
                    "breakdown": {
                      "set_min_competitive_score_count": 0,
                      "match_count": 0,
                      "shallow_advance_count": 3,
                      "set_min_competitive_score": 0,
                      "next_doc": 0,
                      "match": 0,
                      "next_doc_count": 0,
                      "score_count": 5,
                      "compute_max_score_count": 3,
                      "compute_max_score": 32487,
                      "advance": 5749,
                      "advance_count": 6,
                      "score": 16219,
                      "build_scorer_count": 3,
                      "create_weight": 2382719,
                      "shallow_advance": 9754,
                      "create_weight_count": 1,
                      "build_scorer": 1355007,
                      "count_weight": 0,
                      "count_weight_count": 0
                    }
                  },
                  {
                    "type": "TermQuery",
                    "description": "message:search",
                    "time_in_nanos": 205654,
                    "breakdown": {
                      "set_min_competitive_score_count": 0,
                      "match_count": 0,
                      "shallow_advance_count": 3,
                      "set_min_competitive_score": 0,
                      "next_doc": 0,
                      "match": 0,
                      "next_doc_count": 0,
                      "score_count": 5,
                      "compute_max_score_count": 3,
                      "compute_max_score": 6678,
                      "advance": 12733,
                      "advance_count": 6,
                      "score": 6627,
                      "build_scorer_count": 3,
                      "create_weight": 130951,
                      "shallow_advance": 2512,
                      "create_weight_count": 1,
                      "build_scorer": 46153,
                      "count_weight": 0,
                      "count_weight_count": 0
                    }
                  }
                ]
              }
            ],
            "rewrite_time": 451233,
            "collector": [
              {
                "name": "QueryPhaseCollector",
                "reason": "search_query_phase",
                "time_in_nanos": 775274,
                "children" : [
                  {
                    "name": "SimpleTopScoreDocCollector",
                    "reason": "search_top_hits",
                    "time_in_nanos": 775274
                  }
                ]
              }
            ]
          }
        ],
        "aggregations": [],
        "fetch": {
          "type": "fetch",
          "description": "",
          "time_in_nanos": 660555,
          "breakdown": {
            "next_reader": 7292,
            "next_reader_count": 1,
            "load_stored_fields": 299325,
            "load_stored_fields_count": 5,
            "load_source": 3863,
            "load_source_count": 5
          },
          "debug": {
            "stored_fields": ["_id", "_routing", "_source"]
          },
          "children": [
            {
              "type" : "FetchFieldsPhase",
              "description" : "",
              "time_in_nanos" : 238762,
              "breakdown" : {
                "process_count" : 5,
                "process" : 227914,
                "next_reader" : 10848,
                "next_reader_count" : 1
              }
            },
            {
              "type": "FetchSourcePhase",
              "description": "",
              "time_in_nanos": 20443,
              "breakdown": {
                "next_reader": 745,
                "next_reader_count": 1,
                "process": 19698,
                "process_count": 5
              },
              "debug": {
                "fast_path": 5
              }
            },
            {
              "type": "StoredFieldsPhase",
              "description": "",
              "time_in_nanos": 5310,
              "breakdown": {
                "next_reader": 745,
                "next_reader_count": 1,
                "process": 4445,
                "process_count": 5
              }
            }
          ]
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Calculating Median Absolute Deviation in ESQL
DESCRIPTION: This snippet describes the median absolute deviation function in ESQL. It converts a multivalued field into a single value representing the median absolute deviation. The calculation involves finding the median of the deviations from the median of the entire sample.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/mv_median_absolute_deviation.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
**Description**

Converts a multivalued field into a single valued field containing the median absolute deviation.  It is calculated as the median of each data point's deviation from the median of the entire sample. That is, for a random variable `X`, the median absolute deviation is `median(|median(X) - X|)`.

::::{note}
If the field has an even number of values, the medians will be calculated as the average of the middle two values. If the value is not a floating point number, the averages are rounded towards 0.
::::
```

----------------------------------------

TITLE: Listing All Service Tokens with elasticsearch-service-tokens - Shell
DESCRIPTION: Shows the command to list all service account tokens currently defined in the `$ES_HOME/config/service_tokens` file. When executed without specifying a principal, this command outputs a list of all token identifiers (formatted as `<principal>/<token_name>`) found in the file, one per line.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/service-tokens-command.md#_snippet_4

LANGUAGE: shell
CODE:
```
bin/elasticsearch-service-tokens list
```

----------------------------------------

TITLE: Translating SQL Group By with Constant Scalar to Elasticsearch JSON
DESCRIPTION: This snippet shows how a SQL GROUP BY clause with a constant scalar expression is translated into an Elasticsearch aggregation query. It uses a script to calculate PI() * int for grouping and ordering.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
SELECT PI() * int
FROM test
WHERE PI() * int > 5.0
GROUP BY PI() * int
ORDER BY PI() * int LIMIT 10;
```

LANGUAGE: json
CODE:
```
{"script":{"source":"InternalSqlScriptUtils.mul(InternalQlScriptUtils.docValue(doc,params.v0),params.v1)",
"params":{"v0":"int","v1":3.141592653589793}},
"missing_bucket":true,"value_type":"double","order":"asc"}}]}}}}
```

----------------------------------------

TITLE: String Stats with Missing Value Handling
DESCRIPTION: Shows how to handle missing field values in string_stats aggregation by specifying a default value for missing fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-string-stats-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /my-index-000001/_search?size=0
{
  "aggs": {
    "message_stats": {
      "string_stats": {
        "field": "message.keyword",
        "missing": "[empty message]"
      }
    }
  }
}
```

----------------------------------------

TITLE: Parsing Date String to Date Object in ESQL
DESCRIPTION: This snippet demonstrates how to use the DATE_PARSE function in ESQL to convert a date string into a date object. It takes a date string in the format 'yyyy-MM-dd' and parses it into a date type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/date_parse.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW date_string = "2022-05-06"
| EVAL date = DATE_PARSE("yyyy-MM-dd", date_string)
```

----------------------------------------

TITLE: Formatting Date Histogram Keys in Elasticsearch
DESCRIPTION: This example demonstrates how to use the 'format' parameter in a date histogram aggregation to specify custom date formatting for bucket keys.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-datehistogram-aggregation.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "sales_over_time": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "1M",
        "format": "yyyy-MM-dd"
      }
    }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "sales_over_time": {
      "buckets": [
        {
          "key_as_string": "2015-01-01",
          "key": 1420070400000,
          "doc_count": 3
        },
        {
          "key_as_string": "2015-02-01",
          "key": 1422748800000,
          "doc_count": 2
        },
        {
          "key_as_string": "2015-03-01",
          "key": 1425168000000,
          "doc_count": 2
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Converting String to Base64 Using TO_BASE64 Function in ESQL
DESCRIPTION: This example demonstrates how to use the TO_BASE64 function to encode a string value in ESQL. It creates a row with a field 'a' containing the string 'elastic', then evaluates a new field 'e' that contains the base64-encoded value of field 'a'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_base64.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = "elastic"
| EVAL e = TO_BASE64(a)
```

----------------------------------------

TITLE: Boolean Type Equality Not Equals Examples
DESCRIPTION: Demonstrates equality not equals operations with boolean values, showing comparisons between true and false values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_17

LANGUAGE: painless
CODE:
```
boolean a = true;
boolean b = false;
a = a != false;
b = a != b;
```

----------------------------------------

TITLE: Defining Elasticsearch Index Mapping for Feature Importance (JSON)
DESCRIPTION: This snippet provides an example index mapping configuration for the `ml.inference.feature_importance` field. It defines the field as a `nested` type to handle multiple feature importance entries per document, with properties for `feature_name` (keyword) and `importance` (double). This mapping is recommended for effective aggregation and searching of feature importance data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/inference-processor.md#_snippet_5

LANGUAGE: JSON
CODE:
```
"ml.inference.feature_importance": {
  "type": "nested",
  "dynamic": true,
  "properties": {
    "feature_name": {
      "type": "keyword"
    },
    "importance": {
      "type": "double"
    }
  }
}
```

----------------------------------------

TITLE: Defining Deprecated Routes with Version Information
DESCRIPTION: Example of declaring REST API routes with deprecation information. This allows the server to handle deprecated paths properly based on the requested API version.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/REST_API_COMPATIBILITY.md#2025-04-21_snippet_6

LANGUAGE: java
CODE:
```
Route.builder(GET, "_mypath/{foo}/{bar}").deprecated(MY_DEPRECATION_MESSAGE, RestApiVersion.V_7).build(),
```

----------------------------------------

TITLE: Precision Metric Evaluation Request
DESCRIPTION: Shows how to use the precision@k metric for evaluating search results quality.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-rank-eval.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET /my-index-000001/_rank_eval
{
  "requests": [
    {
      "id": "JFK query",
      "request": { "query": { "match_all": {} } },
      "ratings": []
    } ],
  "metric": {
    "precision": {
      "k": 20,
      "relevant_rating_threshold": 1,
      "ignore_unlabeled": false
    }
  }
}
```

----------------------------------------

TITLE: Querying Bit Vectors with Dot Product in Elasticsearch
DESCRIPTION: Shows how to perform a search query using the dot product function with bit vectors, demonstrating both byte-array and float-array comparisons.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-script-score-query.md#2025-04-21_snippet_15

LANGUAGE: console
CODE:
```
GET my-index-bit-vectors/_search
{
  "query": {
    "script_score": {
      "query" : {
        "match_all": {}
      },
      "script": {
        "source": "dotProduct(params.query_vector, 'my_dense_vector')",
        "params": {
          "query_vector": [8, 5, -15, 1, -7]
        }
      }
    }
  }
}
```

LANGUAGE: console
CODE:
```
GET my-index-bit-vectors/_search
{
  "query": {
    "script_score": {
      "query" : {
        "match_all": {}
      },
      "script": {
        "source": "dotProduct(params.query_vector, 'my_dense_vector')",
        "params": {
          "query_vector": [0.23, 1.45, 3.67, 4.89, -0.56, 2.34, 3.21, 1.78, -2.45, 0.98, -0.12, 3.45, 4.56, 2.78, 1.23, 0.67, 3.89, 4.12, -2.34, 1.56, 0.78, 3.21, 4.12, 2.45, -1.67, 0.34, -3.45, 4.56, -2.78, 1.23, -0.67, 3.89, -4.34, 2.12, -1.56, 0.78, -3.21, 4.45, 2.12, 1.67]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining CJK Stop Words
DESCRIPTION: Defines stop words for Chinese, Japanese, and Korean for Elasticsearch usage, linked to the respective Lucene document.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_11

LANGUAGE: markdown
CODE:
```
`_cjk_` (Chinese, Japanese, and Korean)
:   [CJK stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/cjk/stopwords.txt)
```

----------------------------------------

TITLE: Removing Duplicates from Multivalued Field using MV_DEDUPE in ESQL
DESCRIPTION: This snippet demonstrates the usage of the MV_DEDUPE function in ESQL to remove duplicate values from a multivalued field. It creates a row with a field 'a' containing duplicate values, then uses MV_DEDUPE to create a new field 'dedupe_a' with duplicates removed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/mv_dedupe.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=["foo", "foo", "bar", "foo"]
| EVAL dedupe_a = MV_DEDUPE(a)
```

----------------------------------------

TITLE: Extracting Envelope Boundaries from Geographic Data using ESQL Spatial Functions
DESCRIPTION: This ESQL query extracts the coordinate boundaries (minimum and maximum x and y values) from the 'city_boundary' field of a record from the 'airport_city_boundaries' table. It filters for the Copenhagen airport (CPH), applies the ST_ENVELOPE function to get the bounding rectangle, then extracts the boundary coordinates using ST_XMIN, ST_XMAX, ST_YMIN, and ST_YMAX functions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/st_xmax.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airport_city_boundaries
| WHERE abbrev == "CPH"
| EVAL envelope = ST_ENVELOPE(city_boundary)
| EVAL xmin = ST_XMIN(envelope), xmax = ST_XMAX(envelope), ymin = ST_YMIN(envelope), ymax = ST_YMAX(envelope)
| KEEP abbrev, airport, xmin, xmax, ymin, ymax
```

----------------------------------------

TITLE: Extracting documents with geotile geo_grid query
DESCRIPTION: This snippet shows how to perform a geo_grid query based on geotile values in Elasticsearch. It retrieves documents that match the location's geotile value. The query, using the GET method, filters results by specified geotile bucket key.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-grid-query.md#2025-04-21_snippet_4

LANGUAGE: Elasticsearch
CODE:
```
GET /my_locations/_search
{
  "query": {
    "geo_grid" :{
      "location" : {
        "geotile" : "6/32/22"
      }
    }
  }
}
```

LANGUAGE: Elasticsearch
CODE:
```
{
  "took" : 1,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 1,
      "relation" : "eq"
    },
    "max_score" : 1.0,
    "hits" : [
      {
        "_index" : "my_locations",
        "_id" : "3",
        "_score" : 1.0,
        "_source" : {
          "location" : "POINT(2.336389 48.861111)",
          "city" : "Paris",
          "name" : "Musée du Louvre"
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: IP Range Aggregation with Keyed Response
DESCRIPTION: Demonstrates how to get a keyed response format for IP range aggregations by setting the 'keyed' parameter to true.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-iprange-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /ip_addresses/_search
{
  "size": 0,
  "aggs": {
    "ip_ranges": {
      "ip_range": {
        "field": "ip",
        "ranges": [
          { "to": "10.0.0.5" },
          { "from": "10.0.0.5" }
        ],
        "keyed": true
      }
    }
  }
}
```

----------------------------------------

TITLE: Querying Disjoint Geometries Using ST_DISJOINT in ESQL
DESCRIPTION: This ESQL query demonstrates the use of ST_DISJOINT function to filter airport city boundaries that are disjoint from a specified polygon. It checks if the city boundary does not intersect with the given polygon and returns selected fields for matching records.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/st_disjoint.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airport_city_boundaries
| WHERE ST_DISJOINT(city_boundary, TO_GEOSHAPE("POLYGON((-10 -60, 120 -60, 120 60, -10 60, -10 -60))"))
| KEEP abbrev, airport, region, city, city_location
```

----------------------------------------

TITLE: Specifying Timestamp and Event Category Fields in EQL Search
DESCRIPTION: This example shows how to use the timestamp_field and event_category_field parameters to specify custom fields for timestamp and event category in an EQL search query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_20

LANGUAGE: console
CODE:
```
GET /my-data-stream/_eql/search
{
  "timestamp_field": "file.accessed",
  "event_category_field": "file.type",
  "query": """
    file where (file.size > 1 and file.type == "file")
  """
}
```

----------------------------------------

TITLE: Slicing Multi-Value Fields with Negative Indices in ESQL
DESCRIPTION: This example shows how to use mv_slice function with negative indices to extract elements from the end of a multi-value field. It demonstrates both single element extraction and range extraction using negative indices.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_slice.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
row a = [1, 2, 2, 3]
| eval a1 = mv_slice(a, -2), a2 = mv_slice(a, -3, -1)
```

----------------------------------------

TITLE: Creating Gmail Connector via Elasticsearch API
DESCRIPTION: API call to create a new Gmail connector in Elasticsearch with basic configuration settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-gmail.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT _connector/my-gmail-connector
{
  "index_name": "my-elasticsearch-index",
  "name": "Content synced from Gmail",
  "service_type": "gmail"
}
```

----------------------------------------

TITLE: Grouping Geo-Line Data with Terms Aggregation in Elasticsearch
DESCRIPTION: Example of using terms aggregation to group geo-line data by city name. The query aggregates location data and sorts it by timestamp to create geographic line strings for each city.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-geo-line.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /tour/_search?filter_path=aggregations
{
  "aggregations": {
    "path": {
      "terms": {"field": "city"},
      "aggregations": {
        "museum_tour": {
          "geo_line": {
            "point": {"field": "location"},
            "sort": {"field": "@timestamp"}
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining Duration Class
DESCRIPTION: This code snippet defines the `java.time.Duration` class and lists its methods and fields, covering operations like calculating durations, performing arithmetic operations, and converting to different units. It includes static constants like `ZERO` and methods for parsing and formatting durations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.time.txt#2025-04-21_snippet_3

LANGUAGE: Java
CODE:
```
"class java.time.Duration {\n  Duration ZERO\n  Duration abs()\n  Duration between(Temporal,Temporal)\n  int compareTo(Duration)\n  Duration dividedBy(long)\n  Duration from(TemporalAmount)\n  int getNano()\n  long getSeconds()\n  boolean isNegative()\n  boolean isZero()\n  Duration minus(Duration)\n  Duration minus(long,TemporalUnit)\n  Duration minusDays(long)\n  Duration minusHours(long)\n  Duration minusMinutes(long)\n  Duration minusSeconds(long)\n  Duration minusMillis(long)\n  Duration minusNanos(long)\n  Duration multipliedBy(long)\n  Duration negated()\n  Duration of(long,TemporalUnit)\n  Duration ofDays(long)\n  Duration ofHours(long)\n  Duration ofMillis(long)\n  Duration ofMinutes(long)\n  Duration ofNanos(long)\n  Duration ofSeconds(long)\n  Duration ofSeconds(long,long)\n  Duration parse(CharSequence)\n  Duration plus(Duration)\n  Duration plus(long,TemporalUnit)\n  Duration plusDays(long)\n  Duration plusHours(long)\n  Duration plusMinutes(long)\n  Duration plusSeconds(long)\n  Duration plusMillis(long)\n  Duration plusNanos(long)\n  long toDays()\n  long toHours()\n  long toMinutes()\n  long toMillis()\n  long toNanos()\n  Duration withSeconds(long)\n  Duration withNanos(int)\n}"
```

----------------------------------------

TITLE: Dot Expander with Override Configuration
DESCRIPTION: Shows configuration for the dot expander when override is set to true, which will replace existing values during conflicts instead of merging them.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/dot-expand-processor.md#2025-04-21_snippet_5

LANGUAGE: js
CODE:
```
{
  "dot_expander": {
    "field": "foo.bar",
    "override": true
  }
}
```

----------------------------------------

TITLE: Creating Estonian Custom Analyzer in Elasticsearch
DESCRIPTION: This code snippet demonstrates the process of creating a custom analyzer for the Estonian language using Elasticsearch. It showcases filter settings for stop words, keyword markers, and stemming functionalities to enhance text indexing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_12

LANGUAGE: json
CODE:
```
PUT /estonian_example
{
  "settings": {
    "analysis": {
      "filter": {
        "estonian_stop": {
          "type":       "stop",
          "stopwords":  "_estonian_" <1>
        },
        "estonian_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["näide"] <2>
        },
        "estonian_stemmer": {
          "type":       "stemmer",
          "language":   "estonian"
        }
      },
      "analyzer": {
        "rebuilt_estonian": {
          "tokenizer":  "standard",
          "filter": [
            "lowercase",
            "estonian_stop",
            "estonian_keywords",
            "estonian_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Analyzing Text with Unique Token Filter in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the analyze API with the unique filter to remove duplicate tokens from a given text.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-unique-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET _analyze
{
  "tokenizer" : "whitespace",
  "filter" : ["unique"],
  "text" : "the quick fox jumps the lazy fox"
}
```

----------------------------------------

TITLE: Enabling JLH Score in Significant Terms Aggregation
DESCRIPTION: Configures the significant_terms aggregation to use the JLH score as the significance measure. This score balances absolute and relative changes in term popularity between foreground and background sets.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-significantterms-aggregation.md#_snippet_3

LANGUAGE: JSON
CODE:
```
	 "jlh": {
	 }
```

----------------------------------------

TITLE: Environment Variable JVM Configuration
DESCRIPTION: Shows how to set JVM options using the ES_JAVA_OPTS environment variable for development environments.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/jvm-settings.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
export ES_JAVA_OPTS="$ES_JAVA_OPTS -Djava.io.tmpdir=/path/to/temp/dir"
./bin/elasticsearch
```

----------------------------------------

TITLE: Mapping Character Filter in Elasticsearch
DESCRIPTION: Replaces specified string occurrences with predefined replacements during text stream processing
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/character-filter-reference.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
`mapping` character filter replaces any occurrences of the specified strings with the specified replacements
```

----------------------------------------

TITLE: Subtract Seconds with DATE_ADD - SQL
DESCRIPTION: Demonstrates using a negative integer argument with DATE_ADD to subtract 1234 seconds from a datetime.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_27

LANGUAGE: SQL
CODE:
```
SELECT DATE_ADD('seconds', -1234, '2019-09-04T11:22:33.000Z'::datetime) AS "-1234 seconds";
```

----------------------------------------

TITLE: Forcing Single Analyzer Group in Cross-Fields Console
DESCRIPTION: This snippet demonstrates how to ensure all specified fields are processed as a single group when using `multi_match` with `type: cross_fields`. By setting the `analyzer` parameter (here, to "standard"), it overrides the individual analyzers of the "first", "last", and "*.edge" fields, forcing a unified analysis and blending of statistics across all fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-multi-match-query.md#_snippet_13

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
   "multi_match" : {
      "query":      "Jon",
      "type":       "cross_fields",
      "analyzer":   "standard",
      "fields":     [ "first", "last", "*.edge" ]
    }
  }
}
```

----------------------------------------

TITLE: Painless Script for Geometry Type Filtering
DESCRIPTION: This Painless script filters documents based on the geometry type of a point field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_21

LANGUAGE: Painless
CODE:
```
InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.eq(InternalSqlScriptUtils.stGeometryType(InternalSqlScriptUtils.geoDocValue(doc,params.v0)),params.v1))
```

----------------------------------------

TITLE: Using Size Parameter in Top Metrics Aggregation
DESCRIPTION: This example shows how to use the 'size' parameter to return metrics from multiple top documents in top_metrics aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-top-metrics.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /test/_bulk?refresh
{"index": {}}
{"s": 1, "m": 3.1415}
{"index": {}}
{"s": 2, "m": 1.0}
{"index": {}}
{"s": 3, "m": 2.71828}
POST /test/_search?filter_path=aggregations
{
  "aggs": {
    "tm": {
      "top_metrics": {
        "metrics": {"field": "m"},
        "sort": {"s": "desc"},
        "size": 3
      }
    }
  }
}
```

----------------------------------------

TITLE: Type Table Mapping File Example
DESCRIPTION: This demonstrates how to customize type mappings using a file. The file contains character mappings to specific types, allowing for fine-grained control over token splitting.  The example shows how to map characters like $, %, '.', and ',' to the DIGIT type, and the Zero-Width Joiner to ALPHANUM.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-word-delimiter-tokenfilter.md#2025-04-21_snippet_4

LANGUAGE: txt
CODE:
```
# Map the $, %, '.', and ',' characters to DIGIT
# This might be useful for financial data.
$ => DIGIT
% => DIGIT
. => DIGIT
\\u002C => DIGIT

# in some cases you might not want to split on ZWJ
# this also tests the case where we need a bigger byte[]
# see https://en.wikipedia.org/wiki/Zero-width_joiner
\\u200D => ALPHANUM
```

----------------------------------------

TITLE: Using _bucket_count Special Path in Pipeline Aggregation
DESCRIPTION: Example showing how to use the special _bucket_count path to filter buckets based on whether they contain any buckets for an inner aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/pipeline.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "size": 0,
  "aggs": {
    "histo": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "day"
      },
      "aggs": {
        "categories": {
          "terms": {
            "field": "category"
          }
        },
        "min_bucket_selector": {
          "bucket_selector": {
            "buckets_path": {
              "count": "categories._bucket_count" <1>
            },
            "script": {
              "source": "params.count != 0"
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Logging delete_service_token Event in Elasticsearch
DESCRIPTION: Example of an audit log for the delete service account token event. This event is logged when the API is invoked to delete an index-based token for a service account.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
{"type":"audit", "timestamp":"2021-04-30T23:17:42,952+0200", "node.id":
"0RMNyghkQYCc_gVd1G6tZQ", "event.type":"security_config_change", "event.
action":"delete_service_token", "request.id":"az9a1Db5QrebDMacQ8yGKc",
"delete":{"service_token":{"namespace":"elastic","service":"fleet-server","name":"token1"}}}
```

----------------------------------------

TITLE: Customizing Fingerprint Filter Configuration
DESCRIPTION: Example of creating a custom fingerprint filter with modified separator and maximum output size parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-fingerprint-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT custom_fingerprint_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "whitespace_": {
          "tokenizer": "whitespace",
          "filter": [ "fingerprint_plus_concat" ]
        }
      },
      "filter": {
        "fingerprint_plus_concat": {
          "type": "fingerprint",
          "max_output_size": 100,
          "separator": "+"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Equivalent Dis Max Query for Best Fields Type in Elasticsearch
DESCRIPTION: Shows the underlying dis_max query structure that Elasticsearch internally generates for the 'best_fields' multi-match type. It demonstrates how individual match queries for each field are wrapped in a dis_max query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-multi-match-query.md#_snippet_4

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "dis_max": {
      "queries": [
        { "match": { "subject": "brown fox" }},
        { "match": { "message": "brown fox" }}
      ],
      "tie_breaker": 0.3
    }
  }
}
```

----------------------------------------

TITLE: Indexing WKT MultiPolygon in Elasticsearch
DESCRIPTION: Example of indexing a Well-Known Text (WKT) MultiPolygon geometry in Elasticsearch. This represents the same geometry as the GeoJSON example but using WKT syntax, with the second polygon containing a hole.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-shape.md#2025-04-21_snippet_15

LANGUAGE: json
CODE:
```
POST /example/_doc
{
  "location" : "MULTIPOLYGON (((102.0 2.0, 103.0 2.0, 103.0 3.0, 102.0 3.0, 102.0 2.0)), ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8, 100.2 0.2)))"
}
```

----------------------------------------

TITLE: Using CURRENT_TIME Function with Precision in Elasticsearch SQL
DESCRIPTION: This snippet demonstrates fetching the current time using the `CURRENT_TIME()` function with a specified precision of 1 fractional digit for seconds in Elasticsearch SQL. It retrieves the time the query reached the server and aliases it as `result`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_17

LANGUAGE: SQL
CODE:
```
SELECT CURRENT_TIME(1) AS result;
```

----------------------------------------

TITLE: Configuring Smoothing Model for Phrase Suggester in Elasticsearch
DESCRIPTION: This snippet shows how to configure a smoothing model (Laplace in this case) for the phrase suggester to balance weights between frequent and infrequent n-grams.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
POST test/_search
{
  "suggest": {
    "text" : "obel prize",
    "simple_phrase" : {
      "phrase" : {
        "field" : "title.trigram",
        "size" : 1,
        "smoothing" : {
          "laplace" : {
            "alpha" : 0.7
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Time-series Dimensions with Pass-through Objects
DESCRIPTION: Demonstrates configuring a pass-through field as a container for time-series dimensions in a data stream.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/passthrough.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT _index_template/my-metrics
{
  "index_patterns": ["metrics-mymetrics-*"],
  "priority": 200,
  "data_stream": { },
  "template": {
    "settings": {
      "index.mode": "time_series"
    },
    "mappings": {
      "properties": {
        "attributes": {
          "type": "passthrough",
          "priority": 10,
          "time_series_dimension": true,
          "properties": {
            "host.name": {
              "type": "keyword"
            }
          }
        },
        "cpu": {
          "type": "integer",
          "time_series_metric": "counter"
        }
      }
    }
  }
}

POST metrics-mymetrics-test/_doc
{
  "@timestamp": "2020-01-01T00:00:00.000Z",
  "attributes" : {
    "host.name": "foo",
    "zone": "bar"
  },
  "cpu": 10
}
```

----------------------------------------

TITLE: ZoneId Methods and Fields
DESCRIPTION: Details the methods and fields within the java.time.ZoneId class. It provides a summary on how to create and retrieve zone IDs, including functionalities for obtaining available zone IDs, retrieving the ID, getting display names, normalizing IDs, and accessing zone rules.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.time.txt#2025-04-21_snippet_16

LANGUAGE: java
CODE:
```
"class java.time.ZoneId {
  Map SHORT_IDS
  Set getAvailableZoneIds()
  ZoneId of(String)
  ZoneId of(String,Map)
  ZoneId ofOffset(String,ZoneOffset)
  ZoneId from(TemporalAccessor)
  String getId()
  String getDisplayName(TextStyle,Locale)
  ZoneId normalized()
  ZoneId systemDefault()
  ZoneRules getRules()
}"
```

----------------------------------------

TITLE: Demonstrating Boolean Not Operator in Painless
DESCRIPTION: Examples showing the use of the boolean not operator '!' with boolean and def types. Includes type casting and variable assignment.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_0

LANGUAGE: painless
CODE:
```
boolean x = !false;
boolean y = !x;
```

LANGUAGE: painless
CODE:
```
def y = true;
def z = !y;
```

----------------------------------------

TITLE: Elasticsearch COUNT_DISTINCT Approximate Counting Documentation
DESCRIPTION: Documentation block explaining the approximate counting mechanism using HyperLogLog++ algorithm in Elasticsearch's COUNT_DISTINCT function. Describes how exact counting is impractical for high-cardinality sets and explains the precision_threshold parameter that allows trading memory for accuracy, with a default value of 3000 and maximum of 40000.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/appendix/count_distinct.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.

### Counts are approximate [esql-agg-count-distinct-approximate]

Computing exact counts requires loading values into a set and returning its
size. This doesn't scale when working on high-cardinality sets and/or large
values as the required memory usage and the need to communicate those
per-shard sets between nodes would utilize too many resources of the cluster.

This `COUNT_DISTINCT` function is based on the
[HyperLogLog++](https://static.googleusercontent.com/media/research.google.com/fr//pubs/archive/40671.pdf)
algorithm, which counts based on the hashes of the values with some interesting
properties:

:::{include} /reference/aggregations/_snippets/search-aggregations-metrics-cardinality-aggregation-explanation.md
:::

The `COUNT_DISTINCT` function takes an optional second parameter to configure
the precision threshold. The `precision_threshold` options allows to trade memory
for accuracy, and defines a unique count below which counts are expected to be
close to accurate. Above this value, counts might become a bit more fuzzy. The
maximum supported value is `40000`, thresholds above this number will have the
same effect as a threshold of `40000`. The default value is `3000`.
```

----------------------------------------

TITLE: Indexing Histogram Data for Avg Aggregation in Elasticsearch
DESCRIPTION: Demonstrates how to index pre-aggregated histogram data for use with the Avg aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-avg-aggregation.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
PUT metrics_index/_doc/1
{
  "network.name" : "net-1",
  "latency_histo" : {
      "values" : [0.1, 0.2, 0.3, 0.4, 0.5],
      "counts" : [3, 7, 23, 12, 6]
   }
}

PUT metrics_index/_doc/2
{
  "network.name" : "net-2",
  "latency_histo" : {
      "values" :  [0.1, 0.2, 0.3, 0.4, 0.5],
      "counts" : [8, 17, 8, 7, 6]
   }
}

POST /metrics_index/_search?size=0
{
  "aggs": {
    "avg_latency":
      { "avg": { "field": "latency_histo" }
    }
  }
}
```

----------------------------------------

TITLE: Executing Weighted Tokens Query with Pruning Configuration - Elasticsearch Console
DESCRIPTION: Demonstrates a basic `_search` request using the `weighted_tokens` query. It specifies a field name (`query_expansion_field`) with a dictionary of token-weight pairs and an optional `pruning_config` object to optimize performance by omitting non-significant tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-weighted-tokens-query.md#_snippet_0

LANGUAGE: Console
CODE:
```
POST _search
{
  "query": {
    "weighted_tokens": {
      "query_expansion_field": {
        "tokens": {"2161": 0.4679, "2621": 0.307, "2782": 0.1299, "2851": 0.1056, "3088": 0.3041, "3376": 0.1038, "3467": 0.4873, "3684": 0.8958, "4380": 0.334, "4542": 0.4636, "4633": 2.2805, "4785": 1.2628, "4860": 1.0655, "5133": 1.0709, "7139": 1.0016, "7224": 0.2486, "7387": 0.0985, "7394": 0.0542, "8915": 0.369, "9156": 2.8947, "10505": 0.2771, "11464": 0.3996, "13525": 0.0088, "14178": 0.8161, "16893": 0.1376, "17851": 1.5348, "19939": 0.6012},
        "pruning_config": {
          "tokens_freq_ratio_threshold": 5,
          "tokens_weight_threshold": 0.4,
          "only_score_pruned_tokens": false
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Example Result Showing synthetic_source_keep Effect - Console
DESCRIPTION: This snippet displays the expected `_source` content when retrieving the document indexed with `synthetic_source_keep` settings. It shows that `synthetic_source_keep: "all"` on `path` preserves the original structure and `synthetic_source_keep: "arrays"` on `ids` preserves array order and duplicates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-source-field.md#_snippet_14

LANGUAGE: console-result
CODE:
```
{
  "path": {
    "to": [
      { "foo": [3, 2, 1] },
      { "foo": [30, 20, 10] }
    ],
    "bar": "baz"
  },
  "ids": [ 200, 100, 300, 100 ]
}
```

----------------------------------------

TITLE: Extract Second of Minute using SECOND_OF_MINUTE in Elasticsearch SQL
DESCRIPTION: Demonstrates using the SECOND_OF_MINUTE function to extract the second component from a TIMESTAMP literal '2018-02-19T10:23:27Z'. The function returns an integer representing the second within the minute.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_82

LANGUAGE: SQL
CODE:
```
SELECT SECOND_OF_MINUTE(CAST('2018-02-19T10:23:27Z' AS TIMESTAMP)) AS second;
```

----------------------------------------

TITLE: Indexing Histogram Data in Elasticsearch
DESCRIPTION: Example API requests demonstrating how to store pre-aggregated histogram data for two different histograms, including values and counts arrays that define the histogram buckets and their frequencies.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/histogram.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1
{
  "my_text" : "histogram_1",
  "my_histogram" : {
      "values" : [0.1, 0.2, 0.3, 0.4, 0.5],
      "counts" : [3, 7, 23, 12, 6]
   }
}

PUT my-index-000001/_doc/2
{
  "my_text" : "histogram_2",
  "my_histogram" : {
      "values" : [0.1, 0.25, 0.35, 0.4, 0.45, 0.5],
      "counts" : [8, 17, 8, 7, 6, 2]
   }
}
```

----------------------------------------

TITLE: Running the Docker Image for Slack Connector - Console
DESCRIPTION: This console command shows how to run the Docker image for the Slack connector, specifying volume mounts for configuration and setting up the network. This is a step needed to execute the connector service.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-slack.md#2025-04-21_snippet_3

LANGUAGE: Console
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Logging put_role_mapping Event in Elasticsearch
DESCRIPTION: Example of an audit log for the create or update role mapping event. This event is logged when the API is invoked to create or update a role mapping.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_14

LANGUAGE: javascript
CODE:
```
{"type":"audit", "timestamp":"2020-12-31T00:11:13,932+0200", "node.id":
"0RMNyghkQYCc_gVd1G6tZQ", "event.type":"security_config_change", "event.
action":"put_role_mapping", "request.id":"kg4h1l_kTDegnLC-0A-XxA",
"put":{"role_mapping":{"name":"mapping1","roles":["user"],"rules":
{"field":{"username":"*"}},"enabled":true,"metadata":{"version":1}}}}
```

----------------------------------------

TITLE: Defining Percentiles Bucket Aggregation in JavaScript
DESCRIPTION: Demonstrates the basic syntax for a percentiles_bucket aggregation in Elasticsearch. It specifies the buckets_path parameter to indicate which metric to calculate percentiles for.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-percentiles-bucket-aggregation.md#2025-04-21_snippet_0

LANGUAGE: js
CODE:
```
{
  "percentiles_bucket": {
    "buckets_path": "the_sum"
  }
}
```

----------------------------------------

TITLE: Creating Flattened Field Mapping in Elasticsearch
DESCRIPTION: Example showing how to create an index with a flattened field mapping and index a document with nested structure.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/flattened.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT bug_reports
{
  "mappings": {
    "properties": {
      "title": {
        "type": "text"
      },
      "labels": {
        "type": "flattened"
      }
    }
  }
}

POST bug_reports/_doc/1
{
  "title": "Results are not sorted correctly.",
  "labels": {
    "priority": "urgent",
    "release": ["v1.2.5", "v1.3.0"],
    "timestamp": {
      "created": 1541458026,
      "closed": 1541457010
    }
  }
}
```

----------------------------------------

TITLE: Syntax for CURRENT_DATE CURDATE Function in Elasticsearch SQL
DESCRIPTION: This snippet presents the valid syntaxes for retrieving the current date when the query reaches the server in Elasticsearch SQL. It can be used as a keyword `CURRENT_DATE` or as functions `CURRENT_DATE()` and `CURDATE()`, all returning the date part without time.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_8

LANGUAGE: SQL
CODE:
```
CURRENT_DATE\nCURRENT_DATE()\nCURDATE()
```

----------------------------------------

TITLE: Using _shards Preference Parameter in Elasticsearch
DESCRIPTION: Shows the _shards preference parameter which directs searches to specific shards, identified by their IDs, for targeted querying.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/licenses/slf4j-api-NOTICE.txt#2025-04-21_snippet_3

LANGUAGE: text
CODE:
```
preference=_shards:2,3
```

----------------------------------------

TITLE: Configuring EQL Circuit Breaker in Elasticsearch
DESCRIPTION: Settings for the EQL circuit breaker, which limits memory allocation during sequence query execution. It includes options for setting the memory limit, overhead factor, and breaker type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/circuit-breaker-settings.md#2025-04-21_snippet_6

LANGUAGE: yaml
CODE:
```
breaker.eql_sequence.limit: 50%
breaker.eql_sequence.overhead: 1
breaker.eql_sequence.type: memory
```

----------------------------------------

TITLE: Unordered All_Of Rule with Max_Gaps in Elasticsearch Intervals Query
DESCRIPTION: Example of using the all_of rule with ordered=false and max_gaps constraints, allowing intervals to appear in any order, including overlapping with each other.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-intervals-query.md#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
POST _search
{
  "query": {
    "intervals" : {
      "my_text" : {
        "all_of" : {
          "ordered" : false, 
          "max_gaps": 1,
          "intervals" : [
            {
              "match" : {
                "query" : "my favorite food",
                "max_gaps" : 0,
                "ordered" : true
              }
            },
            {
              "match" : {
                "query" : "cold porridge",
                "max_gaps" : 4,
                "ordered" : true
              }
            }
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Casting Integer to String using SQL CAST
DESCRIPTION: Example showing how to use the Elasticsearch SQL `CAST` function to convert an integer literal (123) into a string (`VARCHAR`) type. Includes the query and the expected output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-type-conversion.md#_snippet_2

LANGUAGE: SQL
CODE:
```
SELECT CAST(123 AS VARCHAR) AS string;

    string
---------------
123
```

----------------------------------------

TITLE: Implicit Grouping Query in SQL
DESCRIPTION: Demonstrates implicit grouping using COUNT aggregate function without GROUP BY clause.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_19

LANGUAGE: sql
CODE:
```
SELECT COUNT(*) AS count FROM emp;
```

----------------------------------------

TITLE: Executing geotile_grid aggregation in Elasticsearch
DESCRIPTION: This Elasticsearch snippet demonstrates the use of geotile_grid aggregation, grouping documents by geotile values. The GET request specifies the location field and precision level. The response includes document counts per geotile bucket.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-grid-query.md#2025-04-21_snippet_3

LANGUAGE: Elasticsearch
CODE:
```
GET /my_locations/_search
{
  "size" : 0,
  "aggs" : {
     "grouped" : {
        "geotile_grid" : {
           "field" : "location",
           "precision" : 6
        }
     }
  }
}
```

LANGUAGE: Elasticsearch
CODE:
```
{
  "took" : 1,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 3,
      "relation" : "eq"
    },
    "max_score" : null,
    "hits" : [ ]
  },
  "aggregations" : {
    "grouped" : {
      "buckets" : [
        {
          "key" : "6/32/21",
          "doc_count" : 2
        },
        {
          "key" : "6/32/22",
          "doc_count" : 1
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Optimizing Scroll Search with _doc Sort in Elasticsearch
DESCRIPTION: This snippet shows how to optimize a scroll search by sorting on _doc. This is the most efficient option when you want to iterate over all documents regardless of order.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/paginate-search-results.md#2025-04-21_snippet_10

LANGUAGE: console
CODE:
```
GET /_search?scroll=1m
{
  "sort": [
    "_doc"
  ]
}
```

----------------------------------------

TITLE: Syntax for DAY_OF_WEEK Function in Elasticsearch SQL
DESCRIPTION: Defines the syntax for the DAY_OF_WEEK function (also aliased as DAYOFWEEK, DOW). It takes a date or datetime expression and extracts the day of the week. Sunday is 1, Monday is 2, etc. Returns null if the input is null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_58

LANGUAGE: SQL
CODE:
```
DAY_OF_WEEK(datetime_exp) <1>
```

----------------------------------------

TITLE: Analyzing Text with Pattern Replace Filter in Elasticsearch
DESCRIPTION: This example uses the analyze API with a pattern_replace filter to prepend 'watch' to the substring 'dog' in the text 'foxes jump lazy dogs', resulting in the token 'watchdogs'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pattern_replace-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer": "whitespace",
  "filter": [
    {
      "type": "pattern_replace",
      "pattern": "(dog)",
      "replacement": "watch$1"
    }
  ],
  "text": "foxes jump lazy dogs"
}
```

----------------------------------------

TITLE: Configuring Bytes Processor in Elasticsearch
DESCRIPTION: Example configuration for the bytes processor that converts human-readable byte values in the 'file.size' field to raw byte values. The processor converts values like '1kb' to 1024 bytes, supporting units from 'b' to 'pb' case-insensitively.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/bytes-processor.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
{
  "bytes": {
    "field": "file.size"
  }
}
```

----------------------------------------

TITLE: Keyed Response IP Prefix Aggregation
DESCRIPTION: Demonstrates IP prefix aggregation with keyed response format for better bucket identification.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-ipprefix-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /network-traffic/_search
{
  "size": 0,
  "aggs": {
    "ipv4-subnets": {
      "ip_prefix": {
        "field": "ipv4",
        "prefix_length": 24,
        "keyed": true
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining Moving Percentiles Aggregation in Elasticsearch
DESCRIPTION: Shows the basic structure of a moving_percentiles aggregation, specifying the buckets_path and window size.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-moving-percentiles-aggregation.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "moving_percentiles": {
    "buckets_path": "the_percentile",
    "window": 10
  }
}
```

----------------------------------------

TITLE: Host Name Contains Check - Case-Sensitive Elasticsearch Filter
DESCRIPTION: Filters `process` events to find those where the `hostname` field contains 'foo'. Relies on a `wildcard` query targeting the `.keyword` sub-field for case sensitivity.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_9

LANGUAGE: Elasticsearch
CODE:
```
{"bool":{"must":[{"term":{"event.category":{"value":"process"}}},{"wildcard":{"hostname.keyword":{"wildcard":"*foo*","boost":1.0}}}],"boost":1.0}}
```

----------------------------------------

TITLE: Translating SQL Having Clause to Elasticsearch JSON
DESCRIPTION: This example demonstrates how a SQL HAVING clause is translated into an Elasticsearch bucket selector aggregation. It filters groups based on the MAX(int) value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
SELECT keyword, MAX(int) FROM test GROUP BY 1 HAVING ABS(MAX(int)) > 10;
```

LANGUAGE: json
CODE:
```
InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.gt(InternalSqlScriptUtils.abs(InternalQlScriptUtils.nullSafeCastNumeric(params.a0,params.v0)),params.v1))
"params":{"v0":"INTEGER","v1":10}}
```

----------------------------------------

TITLE: Range Query on Unsigned Long Field Elasticsearch Console
DESCRIPTION: Illustrates executing a range query on an `unsigned_long` field. It is recommended to pass range boundaries as strings to preserve precision, especially for large values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/unsigned-long.md#_snippet_3

LANGUAGE: Console
CODE:
```
GET /my_index/_search
{
    "query": {
        "range" : {
            "my_counter" : {
                "gte" : "9223372036854775808",
                "lte" : "18446744073709551615"
            }
        }
    }
}
```

----------------------------------------

TITLE: Using MV Slice to Extract Subset in ESQL
DESCRIPTION: This code snippet demonstrates the use of the mv_slice function to return specific elements from a multivalued field. The function takes in a multivalued array and returns the elements from the specified start index to the end index. The expected output will be a subset of the original array based on the provided indices.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/mv_slice.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
row a = [1, 2, 2, 3]
| eval a1 = mv_slice(a, 1), a2 = mv_slice(a, 2, 3)
```

----------------------------------------

TITLE: Configuring ICU Normalization Token Filter in Elasticsearch
DESCRIPTION: Example showing how to configure both default (nfkc_cf) and custom (nfc) normalization filters in Elasticsearch. Demonstrates setting up custom analyzers with different normalization modes and the ICU tokenizer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-icu-normalization.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT icu_sample
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "nfkc_cf_normalized": {
            "tokenizer": "icu_tokenizer",
            "filter": [
              "icu_normalizer"
            ]
          },
          "nfc_normalized": {
            "tokenizer": "icu_tokenizer",
            "filter": [
              "nfc_normalizer"
            ]
          }
        },
        "filter": {
          "nfc_normalizer": {
            "type": "icu_normalizer",
            "name": "nfc"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Pattern Matching with Triple Quote Strings in ESQL
DESCRIPTION: Demonstrates using triple quotes for simpler escaping syntax when matching special characters. Triple quotes require only single backslash for escaping special characters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/detailedDescription/like.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
ROW message = "foo * bar"
| WHERE message LIKE """foo \* bar"""
```

----------------------------------------

TITLE: Dot Expander with Path Configuration
DESCRIPTION: Shows how to use the path option to navigate to and expand dotted fields nested within a non-dotted structure.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/dot-expand-processor.md#2025-04-21_snippet_10

LANGUAGE: js
CODE:
```
{
  "dot_expander": {
    "path": "foo"
    "field": "*"
  }
}
```

----------------------------------------

TITLE: Extract ISO Day of Week using ISO_DAY_OF_WEEK in Elasticsearch SQL
DESCRIPTION: Demonstrates using the ISO_DAY_OF_WEEK function to extract the ISO 8601 day of the week from a TIMESTAMP literal '2018-02-19T10:23:27Z'. The function returns an integer (1-7) representing the day, with Monday as 1.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_67

LANGUAGE: SQL
CODE:
```
SELECT ISO_DAY_OF_WEEK(CAST('2018-02-19T10:23:27Z' AS TIMESTAMP)) AS day;
```

----------------------------------------

TITLE: Extract Day of Month using DAY_OF_MONTH in Elasticsearch SQL
DESCRIPTION: Demonstrates using the DAY_OF_MONTH function to extract the day of the month from a TIMESTAMP literal '2018-02-19T10:23:27Z'. The function returns an integer representing the day.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_57

LANGUAGE: SQL
CODE:
```
SELECT DAY_OF_MONTH(CAST('2018-02-19T10:23:27Z' AS TIMESTAMP)) AS day;
```

----------------------------------------

TITLE: Multi-document Percolator Query
DESCRIPTION: Example of percolating multiple documents simultaneously with highlighting enabled.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-percolate-query.md#2025-04-21_snippet_9

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search
{
  "query": {
    "percolate": {
      "field": "query",
      "documents": [
        {
          "message": "bonsai tree"
        },
        {
          "message": "new tree"
        },
        {
          "message": "the office"
        },
        {
          "message": "office tree"
        }
      ]
    }
  },
  "highlight": {
    "fields": {
      "message": {}
    }
  }
}
```

----------------------------------------

TITLE: Indexing a Polygon Shape in WKT Format
DESCRIPTION: This example demonstrates indexing a polygon shape using Well-Known Text (WKT) format. The polygon is specified with a series of x,y coordinates in a string format, where the first and last points must match.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/shape.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
POST /example/_doc
{
  "location" : "POLYGON ((1000.0 -1001.0, 1001.0 -1001.0, 1001.0 -1000.0, 1000.0 -1000.0, 1000.0 -1001.0))"
}
```

----------------------------------------

TITLE: Configuring Elasticsearch for Azure Discovery
DESCRIPTION: YAML configuration for the Elasticsearch Azure Discovery plugin, specifying Azure subscription ID, cloud service name, keystore path and password, and discovery type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-azure-classic-long.md#2025-04-21_snippet_11

LANGUAGE: yaml
CODE:
```
# If you don't remember your account id, you may get it with `azure account list`
cloud:
    azure:
        management:
             subscription.id: your_azure_subscription_id
             cloud.service.name: your_azure_cloud_service_name
             keystore:
                   path: /home/elasticsearch/azurekeystore.pkcs12
                   password: your_password_for_keystore

discovery:
    type: azure

# Recommended (warning: non durable disk)
# path.data: /mnt/resource/elasticsearch/data
```

----------------------------------------

TITLE: Mapping GraphQL Objects to Elasticsearch IDs
DESCRIPTION: This JSON configuration example demonstrates how to map GraphQL response objects to their corresponding ID fields for indexing in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-graphql.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
{
    "organization.users": "user_id"
}
```

----------------------------------------

TITLE: Using ESQL ENRICH with Specified Match Field
DESCRIPTION: Shows how to use the ENRICH command when the input column name ('a') differs from the enrich policy's match field, using the `ON <column-name>` clause to specify the join column.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-enrich-data.md#_snippet_1

LANGUAGE: esql
CODE:
```
ROW a = "1"\n| ENRICH languages_policy ON a
```

----------------------------------------

TITLE: Examples of EQL length Function Usage
DESCRIPTION: Demonstrates the `length` function in EQL, which returns the character length of a string. Examples include calculating the length of literal strings (including whitespace and punctuation), empty strings, null inputs, and field values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-function-ref.md#_snippet_9

LANGUAGE: eql
CODE:
```
length("explorer.exe")         // returns 12
length("start explorer.exe")   // returns 18
length("")                     // returns 0
length(null)                   // returns null

// process.name = "regsvr32.exe"
length(process.name)           // returns 12
```

----------------------------------------

TITLE: Testing Multiplexer Token Filter in Elasticsearch
DESCRIPTION: This snippet shows how to test the configured multiplexer token filter using the _analyze API. It analyzes the text 'Going HOME' using the custom analyzer with the multiplexer filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-multiplexer-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /multiplexer_example/_analyze
{
  "analyzer" : "my_analyzer",
  "text" : "Going HOME"
}
```

----------------------------------------

TITLE: Defining MATCH Function Syntax SQL
DESCRIPTION: Defines the general syntax for the MATCH predicate in Elasticsearch SQL. It requires a field expression (single field or list with optional boosting) and a constant expression for the matching text, with an optional third parameter for additional query options.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-search.md#_snippet_0

LANGUAGE: SQL
CODE:
```
MATCH(
    field_exp,   <1>
    constant_exp <2>
    [, options]) <3>
```

----------------------------------------

TITLE: Customizing Delimited Payload Filter
DESCRIPTION: Creates an index with a custom delimited payload filter using '+' as delimiter and integer encoding for payloads.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-delimited-payload-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT delimited_payload_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "whitespace_plus_delimited": {
          "tokenizer": "whitespace",
          "filter": [ "plus_delimited" ]
        }
      },
      "filter": {
        "plus_delimited": {
          "type": "delimited_payload",
          "delimiter": "+",
          "encoding": "int"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Node Certificate for Elasticsearch in Bash
DESCRIPTION: Generates a certificate for the Elasticsearch node communication signed by the CA. Similar to the HTTP certificate, it includes DNS for localhost and IP addresses for both IPv4 and IPv6 loopback interfaces.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/qa/saml-rest-tests/src/javaRestTest/resources/ssl/README.txt#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
elasticsearch-certutil cert --name "node" --ca-cert ${PWD}/ca.crt --ca-key ${PWD}/ca.key --days 9999 --dns "localhost" --ip "127.0.0.1" --ip "0:0:0:0:0:0:0:1" --keysize 2048 --out ${PWD}/node.zip --pem 
unzip node.zip
mv node/node.* ./
rmdir node
rm node.zip
```

----------------------------------------

TITLE: Excluding Specific Token Types in Elasticsearch Analysis
DESCRIPTION: Example of using the keep_types filter to exclude numeric tokens (<NUM>) from input text by setting mode to exclude.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-keep-types-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET _analyze
{
  "tokenizer": "standard",
  "filter": [
    {
      "type": "keep_types",
      "types": [ "<NUM>" ],
      "mode": "exclude"
    }
  ],
  "text": "1 quick fox 2 lazy dogs"
}
```

----------------------------------------

TITLE: Customizing Common Grams Filter with Advanced Options in Elasticsearch
DESCRIPTION: This example demonstrates creating a custom common_grams filter with ignore_case and query_mode set to true, which changes how common words are processed in the token stream.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-common-grams-tokenfilter.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT /common_grams_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "index_grams": {
          "tokenizer": "whitespace",
          "filter": [ "common_grams_query" ]
        }
      },
      "filter": {
        "common_grams_query": {
          "type": "common_grams",
          "common_words": [ "a", "is", "the" ],
          "ignore_case": true,
          "query_mode": true
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Write Thread Pool in Elasticsearch
DESCRIPTION: Example showing how to configure the write thread pool by setting its size parameter in elasticsearch.yml
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/thread-pool-settings.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
thread_pool:
    write:
        size: 30
```

----------------------------------------

TITLE: High-precision Geohash Grid Aggregation with Geo Bounding Box in Elasticsearch
DESCRIPTION: This snippet demonstrates a high-precision geohash_grid aggregation using a geo_bounding_box filter to narrow the subject area and avoid creating too many buckets.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-geohashgrid-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /museums/_search?size=0
{
  "aggregations": {
    "zoomed-in": {
      "filter": {
        "geo_bounding_box": {
          "location": {
            "top_left": "POINT (4.9 52.4)",
            "bottom_right": "POINT (5.0 52.3)"
          }
        }
      },
      "aggregations": {
        "zoom1": {
          "geohash_grid": {
            "field": "location",
            "precision": 8
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Demonstrating Post-Decrement Operator in Painless
DESCRIPTION: This snippet demonstrates the usage of the post-decrement operator '--' with various numeric types in Painless, including its behavior with type promotion and implicit casting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_2

LANGUAGE: painless
CODE:
```
short i = 0;
i--;
long j = 1;
long k;
k = j--;
```

----------------------------------------

TITLE: Representing Default Range Bounds in Synthetic Source (Console)
DESCRIPTION: Demonstrates how default or implicit bounds for range fields are represented as `null` in the synthetic `_source`. The example indexes an `integer_range` document with only an `lte` value equal to the maximum integer, showing both `gte` and `lte` become `null` in the output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/range.md#_snippet_7

LANGUAGE: Console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "my_range": { "type": "integer_range" }
    }
  }
}

PUT idx/_doc/1
{
  "my_range": {
    "lte": 2147483647
  }
}
```

LANGUAGE: JSON
CODE:
```
{
  "my_range": {
    "gte": null,
    "lte": null
  }
}
```

----------------------------------------

TITLE: Demonstrating Default position_increment_gap Behavior in Elasticsearch
DESCRIPTION: This example shows how the default position_increment_gap of 100 affects phrase queries across multiple text field values. It demonstrates that a phrase query doesn't match across values by default, but can match when using sufficient slop.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/position-increment-gap.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1
{
  "names": [ "John Abraham", "Lincoln Smith"]
}

GET my-index-000001/_search
{
  "query": {
    "match_phrase": {
      "names": {
        "query": "Abraham Lincoln" <1>
      }
    }
  }
}

GET my-index-000001/_search
{
  "query": {
    "match_phrase": {
      "names": {
        "query": "Abraham Lincoln",
        "slop": 101 <2>
      }
    }
  }
}
```

----------------------------------------

TITLE: Analyzing Text with Reverse Token Filter in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the reverse token filter in an analyze API request. It applies the standard tokenizer and reverse filter to the text 'quick fox jumps'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-reverse-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET _analyze
{
  "tokenizer" : "standard",
  "filter" : ["reverse"],
  "text" : "quick fox jumps"
}
```

----------------------------------------

TITLE: Sorting Across Indices with Different Date Resolutions in Elasticsearch
DESCRIPTION: Shows how to use the 'numeric_type' option to set a single resolution when sorting across indices with different date field resolutions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/sort-search-results.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
POST /index_long,index_double/_search
{
   "sort" : [
      {
        "field" : {
            "numeric_type" : "date_nanos"
        }
      }
   ]
}
```

----------------------------------------

TITLE: Configuring Elasticsearch Connector Configuration File
DESCRIPTION: Configuration file for setting up Elasticsearch connection and Dropbox connector with authentication options
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-dropbox.md#2025-04-21_snippet_4

LANGUAGE: yaml
CODE:
```
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: dropbox
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA>
```

----------------------------------------

TITLE: Analyzing Employee Salaries by Hire Year and Programming Language in ESQL
DESCRIPTION: This ESQL query processes employee data to calculate average salaries grouped by hire year and programming languages. It formats the hire date, computes average salaries, rounds the results, and sorts the output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/stats.csv-spec/statsGroupByMultipleValues.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| EVAL hired = DATE_FORMAT("yyyy", hire_date)
| STATS avg_salary = AVG(salary) BY hired, languages.long
| EVAL avg_salary = ROUND(avg_salary)
| SORT hired, languages.long
```

----------------------------------------

TITLE: RRF Score Calculation with rank_window_size=2
DESCRIPTION: Python-like example showing RRF score calculations when rank_window_size=2, which limits visible documents from each query. Demonstrates how this changes the final ranking and pagination capabilities.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reciprocal-rank-fusion.md#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
# doc   | queryA     | queryB         | score
_id: 1 =  1.0/(1+1)  + 0              = 0.5
_id: 2 =  1.0/(1+2)  + 0              = 0.33
_id: 4 =    0        + 1.0/(1+2)      = 0.33
_id: 5 =    0        + 1.0/(1+1)      = 0.5
```

----------------------------------------

TITLE: Setting Index Store Type During Index Creation (Console)
DESCRIPTION: This snippet demonstrates how to specify a file system storage type for a specific index when creating it using the Elasticsearch REST API via the console. The `index.store.type` setting is provided within the index settings object, making it a static setting for this particular index.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/store.md#_snippet_1

LANGUAGE: json
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "index.store.type": "hybridfs"
  }
}
```

----------------------------------------

TITLE: Example Document Structure for Composite Aggregation
DESCRIPTION: Sample document structure showing how composite buckets are created from combinations of field values. This example demonstrates how a document with multiple keywords and numbers generates multiple composite buckets.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
{
  "keyword": ["foo", "bar"],
  "number": [23, 65, 76]
}
```

----------------------------------------

TITLE: Configuring Multi-Zone GCE Discovery in Elasticsearch
DESCRIPTION: This YAML configuration demonstrates how to set up Elasticsearch to discover nodes across multiple Google Cloud Engine zones. It specifies the project ID and multiple zones to search for Elasticsearch instances, enabling cross-zone cluster formation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-zones.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
cloud:
  gce:
    project_id: <your-google-project-id>
    zone: ["<your-zone1>", "<your-zone2>"]
discovery:
  seed_providers: gce
```

----------------------------------------

TITLE: List Initialization Examples in Painless
DESCRIPTION: Demonstrates various list initialization scenarios including empty lists and lists with static/non-static values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-reference.md#2025-04-21_snippet_7

LANGUAGE: painless
CODE:
```
List empty = [];
List list = [1, 2, 3];
int i = 1;
long l = 2L;
float f = 3.0F;
double d = 4.0;
String s = "5";
List list = [i, l, f*d, s];
```

----------------------------------------

TITLE: Illustrating ESQL Query Structure
DESCRIPTION: Shows the basic structure of an ESQL query consisting of a source command followed by optional processing commands separated by a pipe character.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-syntax.md#_snippet_0

LANGUAGE: esql
CODE:
```
source-command
| processing-command1
| processing-command2
```

----------------------------------------

TITLE: Initiating Reindex Data Stream API Call (console)
DESCRIPTION: This snippet shows the basic HTTP method and endpoint used to initiate the reindexing process for a data stream's backing indices. This API call requires a request body specifying the data stream and mode.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reindex-data-stream.md#_snippet_0

LANGUAGE: console
CODE:
```
POST /_migration/reindex
```

----------------------------------------

TITLE: Advanced Jira Sync Rules - Priority and Project Filtering
DESCRIPTION: JSON configuration to filter Jira issues by priority level across specific projects. This targets high-priority issues (Blocker, Critical) within selected projects.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-jira.md#2025-04-21_snippet_1

LANGUAGE: js
CODE:
```
[
  {
    "query": "priority in (Blocker, Critical) AND project in (ProjA, ProjB, ProjC)"
  }
]
```

----------------------------------------

TITLE: Basic Azure VM Discovery Configuration in Elasticsearch
DESCRIPTION: A simple sample configuration for Azure VM discovery in Elasticsearch. This includes the essential cloud provider settings for Azure and enables the Azure seed provider for discovery.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-azure-classic-usage.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
cloud:
    azure:
        management:
             subscription.id: XXX-XXX-XXX-XXX
             cloud.service.name: es-demo-app
             keystore:
                   path: /path/to/azurekeystore.pkcs12
                   password: WHATEVER
                   type: pkcs12

discovery:
    seed_providers: azure
```

----------------------------------------

TITLE: Configuring GCE Network Host Settings in Elasticsearch
DESCRIPTION: Examples of different network host configurations when using the discovery-gce plugin. Shows how to specify private IP addresses from different network interfaces and hostname settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-network-host.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
# get the IP address from network interface 1
network.host: _gce:privateIp:1_
# Using GCE internal hostname
network.host: _gce:hostname_
# shortcut for _gce:privateIp:0_ (recommended)
network.host: _gce_
```

----------------------------------------

TITLE: Testing a Custom Mapping Character Filter
DESCRIPTION: This example shows how to test the custom mapping character filter using the analyze API. It demonstrates replacing a sad emoticon with its text equivalent.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-mapping-charfilter.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /my-index-000001/_analyze
{
  "tokenizer": "keyword",
  "char_filter": [ "my_mappings_char_filter" ],
  "text": "I'm delighted about it :("
}
```

----------------------------------------

TITLE: Fetching Custom Objects via SOQL and SOSL
DESCRIPTION: This code snippet provides an example of how to obtain documents for custom objects using SOQL and SOSL queries. The snippet outlines the expected input format and the potential output structure.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-salesforce.md#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
[
  {
    "query": "SELECT Connector_Name, Version FROM Connector__c",
    "language": "SOQL"
  },
  {
    "query": "FIND {Salesforce} IN ALL FIELDS RETURNING Connectors__c(Id, Connector_Name, Connector_Version)",
    "language": "SOSL"
  }
]
```

----------------------------------------

TITLE: Example Elasticsearch Entitlement Patch Policy YAML
DESCRIPTION: Provides a concrete example of an entitlement policy patch for the 'ALL-UNNAMED' scope. This policy grants specific permissions like setting HTTPS properties, outbound network access, and read access to a user's gcloud config file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/libs/entitlement/README.md#_snippet_2

LANGUAGE: yaml
CODE:
```
versions:
  - 9.1.0
policy:
  ALL-UNNAMED:
    - set_https_connection_properties
    - outbound_network
    - files:
        - relative_path: ".config/gcloud"
          relative_to: home
          mode: read
```

----------------------------------------

TITLE: Indexing Sample Documents for Scripted Metric Aggregation
DESCRIPTION: This snippet shows how to index sample documents into an Elasticsearch index for testing the scripted metric aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-scripted-metric-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT /transactions/_bulk?refresh
{"index":{"_id":1}}
{"type": "sale","amount": 80}
{"index":{"_id":2}}
{"type": "cost","amount": 10}
{"index":{"_id":3}}
{"type": "cost","amount": 30}
{"index":{"_id":4}}
{"type": "sale","amount": 130}
```

----------------------------------------

TITLE: Calculate COSH in Elasticsearch SQL
DESCRIPTION: Shows how to use the `COSH` function in Elasticsearch SQL. It calculates the hyperbolic cosine of a numeric expression and compares the result to the definition (e^x + e^-x)/2 using the `POWER` and `E()` functions. Requires a numeric expression as input and outputs a double numeric value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_24

LANGUAGE: sql
CODE:
```
SELECT COSH(5), (POWER(E(), 5) + POWER(E(), -5)) / 2 AS "(e^5 + e^-5)/2";
```

----------------------------------------

TITLE: Configuring Look Ahead Time in Elasticsearch
DESCRIPTION: Setting to define the interval for calculating the end_time of a TSDS write index. Accepts values between 1m and 2h.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/time-series.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
index.look_ahead_time: 30m
```

----------------------------------------

TITLE: Filtering Documents by Filename Using Reversed Path Hierarchy Tokenizer
DESCRIPTION: This example searches for all files named 'my_photo1.jpg' within any directory by using a term query on the reversed path hierarchy field, demonstrating how to match from the end of file paths.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pathhierarchy-tokenizer.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET file-path-test/_search
{
  "query": {
    "term": {
      "file_path.tree_reversed": {
        "value": "my_photo1.jpg"
      }
    }
  }
}
```

----------------------------------------

TITLE: Cancelling Elasticsearch Data Stream Reindex Task (Console)
DESCRIPTION: Executes the API call to cancel a specific data stream reindex task identified by its data stream name (`my-data-stream`). This stops the currently running reindexing process.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reindex-data-stream.md#_snippet_4

LANGUAGE: console
CODE:
```
POST /_migration/reindex/my-data-stream/_cancel

```

----------------------------------------

TITLE: Remove Elasticsearch Phonetic Analysis Plugin (sh)
DESCRIPTION: This command removes the `analysis-phonetic` plugin from an Elasticsearch node using the `elasticsearch-plugin` command-line tool. It requires `sudo` privileges and importantly, the Elasticsearch node must be stopped before executing this command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-phonetic.md#_snippet_1

LANGUAGE: sh
CODE:
```
sudo bin/elasticsearch-plugin remove analysis-phonetic
```

----------------------------------------

TITLE: Creating Elasticsearch Indices with Custom Priority Settings
DESCRIPTION: This snippet shows how to create multiple Elasticsearch indices with different priority settings. It demonstrates setting a custom index.priority for some indices while leaving others at default priority.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/recovery-prioritization.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT index_1

PUT index_2

PUT index_3
{
  "settings": {
    "index.priority": 10
  }
}

PUT index_4
{
  "settings": {
    "index.priority": 5
  }
}
```

----------------------------------------

TITLE: Converting IP Strings with Leading Zeros as Octal in ESQL
DESCRIPTION: Shows how TO_IP() can parse IPv4 addresses with leading zeros as octal values by setting the 'leading_zeros' parameter to 'octal'. This behavior is similar to tools like ping or ftp.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_ip.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
ROW s = "1.1.010.1" | EVAL ip = TO_IP(s, {"leading_zeros":"octal"})
```

----------------------------------------

TITLE: Extracting Boundary Coordinates using ST_ENVELOPE in ESQL
DESCRIPTION: Query that extracts the minimum and maximum coordinates of a spatial boundary using ST_ENVELOPE and related spatial functions. The query filters for Copenhagen airport (CPH) and returns the envelope's boundary coordinates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/st_xmin.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airport_city_boundaries
| WHERE abbrev == "CPH"
| EVAL envelope = ST_ENVELOPE(city_boundary)
| EVAL xmin = ST_XMIN(envelope), xmax = ST_XMAX(envelope), ymin = ST_YMIN(envelope), ymax = ST_YMAX(envelope)
| KEEP abbrev, airport, xmin, xmax, ymin, ymax
```

----------------------------------------

TITLE: Creating Index with Payload Storage
DESCRIPTION: Creates an index that stores term vectors with payloads and uses a custom analyzer with the delimited_payload filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-delimited-payload-tokenfilter.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT text_payloads
{
  "mappings": {
    "properties": {
      "text": {
        "type": "text",
        "term_vector": "with_positions_payloads",
        "analyzer": "payload_delimiter"
      }
    }
  },
  "settings": {
    "analysis": {
      "analyzer": {
        "payload_delimiter": {
          "tokenizer": "whitespace",
          "filter": [ "delimited_payload" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Filtering Rare Terms with Exact Values in Elasticsearch
DESCRIPTION: Shows how to filter rare terms aggregation using exact value matching. The example includes 'swing' and 'rock' terms while excluding 'jazz'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-rare-terms-aggregation.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET /_search
{
  "aggs": {
    "genres": {
      "rare_terms": {
        "field": "genre",
        "include": [ "swing", "rock" ],
        "exclude": [ "jazz" ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Synonym Dictionary Bundle Structure Example
DESCRIPTION: Example directory structure for a synonym dictionary bundle showing the placement of synonyms.txt in the dictionaries folder.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-custom-bundles.md#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
$ tree .
.
└── dictionaries
    └── synonyms.txt
```

----------------------------------------

TITLE: Creating an Elasticsearch Index with Range Fields
DESCRIPTION: This snippet demonstrates how to create an Elasticsearch index with integer_range and date_range fields, and insert a sample document.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-range-field-note.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT range_index
{
  "settings": {
    "number_of_shards": 2
  },
  "mappings": {
    "properties": {
      "expected_attendees": {
        "type": "integer_range"
      },
      "time_frame": {
        "type": "date_range",
        "format": "yyyy-MM-dd||epoch_millis"
      }
    }
  }
}

PUT range_index/_doc/1?refresh
{
  "expected_attendees" : {
    "gte" : 10,
    "lte" : 20
  },
  "time_frame" : {
    "gte" : "2019-10-28",
    "lte" : "2019-11-04"
  }
}
```

----------------------------------------

TITLE: Debug Response for _source Context
DESCRIPTION: Shows the response from Debug.explain revealing the internal structure and type of the _source context object.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-debugging.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
{
  "error" : {
    "root_cause": ...,
    "type": "illegal_argument_exception",
    "reason": "failed to execute script",
    "caused_by": {
      "type": "script_exception",
      "to_string": "{gp=[26, 82, 1], last=gaudreau, assists=[17, 46, 0], first=johnny, goals=[9, 27, 1]}",
      "painless_class": "java.util.LinkedHashMap",
      "java_class": "java.util.LinkedHashMap",
      ...
    }
  },
  "status": 400
}
```

----------------------------------------

TITLE: Def Type Comparison using '!==': Painless Example
DESCRIPTION: This snippet showcases the use of identity not equals operator with the 'def' type in Painless. It demonstrates reference type comparison within loosely typed variables. The expected output is a boolean based on reference inequality conditions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_28

LANGUAGE: Painless
CODE:
```
def a = new HashMap();
def b = new ArrayList();
boolean c = a !== b;
b = a;
c = a !== b;
```

----------------------------------------

TITLE: Response from Katakana Uppercase Token Filter Analysis
DESCRIPTION: This snippet shows the response from the Elasticsearch analyze API when using the katakana_uppercase filter. It demonstrates how small katakana characters in 'ストップウォッチ' (stopwatch) are normalized to standard characters, resulting in 'ストツプウオツチ'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-katakana-uppercase.md#2025-04-21_snippet_1

LANGUAGE: console-result
CODE:
```
{
  "tokens": [
    {
      "token": "ストツプウオツチ",
      "start_offset": 0,
      "end_offset": 8,
      "type": "word",
      "position": 0
    }
  ]
}
```

----------------------------------------

TITLE: Completion Suggester Response in Elasticsearch
DESCRIPTION: Shows the response format of a completion suggester query, including metadata fields and the suggestion results with their scores and source documents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_13

LANGUAGE: console-result
CODE:
```
{
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits": ...
  "took": 2,
  "timed_out": false,
  "suggest": {
    "song-suggest" : [ {
      "text" : "nir",
      "offset" : 0,
      "length" : 3,
      "options" : [ {
        "text" : "Nirvana",
        "_index": "music",
        "_id": "1",
        "_score": 1.0,
        "_source": {
          "suggest": ["Nevermind", "Nirvana"]
        }
      } ]
    } ]
  }
}
```

----------------------------------------

TITLE: Basic Fingerprint Analyzer Usage Example
DESCRIPTION: Demonstrates basic usage of the fingerprint analyzer with a sample text input containing special characters and repeated words.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-fingerprint-analyzer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _analyze
{
  "analyzer": "fingerprint",
  "text": "Yes yes, Gödel said this sentence is consistent and."
}
```

LANGUAGE: text
CODE:
```
[ and consistent godel is said sentence this yes ]
```

----------------------------------------

TITLE: Implementing While Loop for Conditional Iteration in Painless
DESCRIPTION: Demonstrates the use of a while loop in Painless to repeatedly execute a block of code as long as a specified condition is true. It uses the context variable 'ctx._source' to access document fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-statements.md#2025-04-21_snippet_2

LANGUAGE: painless
CODE:
```
while (ctx._source.item < condition) {
  // do something
}
```

----------------------------------------

TITLE: Updating Plugin File with Option 1 Method (cURL)
DESCRIPTION: This snippet demonstrates how to update the file associated with an existing plugin extension using the Option 1 method. It includes specifying the download URL, extension type, name, and version.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-plugins-guide.md#2025-04-21_snippet_15

LANGUAGE: sh
CODE:
```
curl -X POST \
  https://api.elastic-cloud.com/api/v1/deployments/extensions/EXTENSION_ID \
  -H "Authorization: ApiKey $CLOUD_API_KEY" \
  -H 'Content-Type: application/json' \
  -d '{
   "download_url" : "https://my_site/custom-plugin-8.4.3-10212022.zip",
   "extension_type" : "plugin",
    "name": "custom-plugin-10212022",
   "version" : "8.4.3"
}'
```

----------------------------------------

TITLE: Static Node Query Cache Size Setting
DESCRIPTION: Static cluster setting that controls the memory size allocated for the query cache on data nodes
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/node-query-cache-settings.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
indices.queries.cache.size
```

----------------------------------------

TITLE: Defining Max Lookups Per Request for Enrich Coordinator Proxy in Elasticsearch YAML
DESCRIPTION: Sets the maximum number of searches to include in a multi-search request when enriching documents. The default value is 128.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/enrich-settings.md#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
enrich.coordinator_proxy.max_lookups_per_request: 128
```

----------------------------------------

TITLE: Setting Time Series End Time in Elasticsearch
DESCRIPTION: Configuration for the latest acceptable @timestamp value in a time series index.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/time-series.md#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
index.time_series.end_time: "2024-01-01T00:00:00Z"
```

----------------------------------------

TITLE: Span Fragmenter Plain Highlighter Results Json
DESCRIPTION: Provides an example JSON response showing the output of the 'plain' highlighter configured with the 'span' fragmenter. The highlighted fragments for the 'message' field show how the 'span' fragmenter combines highlighted terms into potentially longer, more coherent snippets.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_28

LANGUAGE: json
CODE:
```
{
  ...
  "hits": {
    "total": {
      "value": 1,
      "relation": "eq"
    },
    "max_score": 1.6011951,
    "hits": [
      {
        "_index": "my-index-000001",
        "_id": "1",
        "_score": 1.6011951,
        "_source": {
          "message": "some message with the number 1",
          "context": "bar"
        },
        "highlight": {
          "message": [
            " with the <em>number</em> <em>1</em>"
          ]
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Function Call Operator Example in Painless
DESCRIPTION: Shows how to define and call a function using the function call operator. Includes a simple addition function with two parameters and its usage.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-general.md#2025-04-21_snippet_1

LANGUAGE: painless
CODE:
```
int add(int x, int y) {
    return x + y;
}

int z = add(1, 2);
```

----------------------------------------

TITLE: Token Output from Common Grams Filter in Elasticsearch
DESCRIPTION: This shows the output tokens produced by the common_grams filter when processing 'the quick fox is brown' with 'is' and 'the' as common words.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-common-grams-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
[ the, the_quick, quick, fox, fox_is, is, is_brown, brown ]
```

----------------------------------------

TITLE: Defining Multiple Table Sync Rules (MS SQL Connector)
DESCRIPTION: This advanced sync rule example defines two separate queries within a single configuration, one for the 'employee' table and one for the 'customer' table. This allows syncing data from multiple distinct sources within the same sync job to Elasticsearch. A full sync is required for these rules to take effect.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-ms-sql.md#_snippet_6

LANGUAGE: json
CODE:
```
[
  {
    "tables": [
      "employee"
    ],
    "query": "SELECT * FROM employee"
  },
  {
    "tables": [
      "customer"
    ],
    "query": "SELECT * FROM customer"
  }
]
```

----------------------------------------

TITLE: Basic Boxplot Aggregation in Elasticsearch
DESCRIPTION: This snippet demonstrates the basic syntax for a boxplot aggregation in Elasticsearch, showing how to compute boxplot statistics for a numeric field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-boxplot-aggregation.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
{
  "boxplot": {
    "field": "load_time"
  }
}
```

----------------------------------------

TITLE: Fingerprint Analyzer in Elasticsearch
DESCRIPTION: Specialized analyzer for creating text fingerprints useful for duplicate detection.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analyzer-reference.md#2025-04-21_snippet_7

LANGUAGE: elasticsearch
CODE:
```
"analyzer": "fingerprint"
```

----------------------------------------

TITLE: Creating and Extracting Coordinates from a GeoPoint in ESQL
DESCRIPTION: This ESQL snippet demonstrates how to create a geo_point using TO_GEOPOINT function and then extract its X and Y coordinates using ST_X and ST_Y functions. It creates a point at longitude 42.97109629958868 and latitude 14.7552534006536.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/st_y.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW point = TO_GEOPOINT("POINT(42.97109629958868 14.7552534006536)")
| EVAL x =  ST_X(point), y = ST_Y(point)
```

----------------------------------------

TITLE: Enriching Data with Languages Policy in ESQL
DESCRIPTION: Demonstrates enriching a row containing a value '1' by joining it with a languages policy using the language_name field. The query maps the input value to retrieve the corresponding language name from the policy.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/enrich.csv-spec/enrich_rename.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = "1"
| ENRICH languages_policy ON a WITH name = language_name
```

----------------------------------------

TITLE: Querying IPv6 Addresses Using CIDR Notation in Elasticsearch
DESCRIPTION: This snippet demonstrates how to perform a term query on an IP field using CIDR notation for IPv6 addresses.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/ip.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET my-index-000001/_search
{
  "query": {
    "term": {
      "ip_addr": "2001:db8::/48"
    }
  }
}
```

----------------------------------------

TITLE: Implementing Version-Aware Parsing with ParseField in Elasticsearch
DESCRIPTION: Example of using ParseField to handle both current and deprecated field names across different API versions. This allows the parser to match on the incoming payload based on the requested compatibility version.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/REST_API_COMPATIBILITY.md#2025-04-21_snippet_4

LANGUAGE: java
CODE:
```
PARSER.declareInt(MyPojo::setMax, new ParseField("maximum", "limit").forRestApiVersion(RestApiVersion.equalTo(RestApiVersion.V_7)));
PARSER.declareInt(MyPojo::setMax, new ParseField("maximum").forRestApiVersion(RestApiVersion.onOrAfter(RestApiVersion.V_8)));
```

----------------------------------------

TITLE: Calculating Exponential Function in Elasticsearch SQL
DESCRIPTION: This example utilizes the `EXP` function in Elasticsearch SQL. It calculates Euler's number raised to the power of the input float numeric expression. The output is a double numeric value representing e^x.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_4

LANGUAGE: SQL
CODE:
```
SELECT EXP(1), E(), EXP(2), E() * E();
```

----------------------------------------

TITLE: User Object Schema for Security Config Change Events in Elasticsearch
DESCRIPTION: Defines the structure of a user object in security configuration change events. It includes fields for the user's name, enabled status, roles, personal information, password status, and metadata.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_20

LANGUAGE: javascript
CODE:
```
{"name": <string>, "enabled": <boolean>, "roles": <string_list>,
"full_name": <string>, "email": <string>, "has_password": <boolean>,
"metadata": <object>}
```

----------------------------------------

TITLE: Sample User Dictionary for Nori Tokenizer
DESCRIPTION: Example of a user dictionary file showing simple nouns and compound noun entries with their decomposition, to be saved as userdict_ko.txt.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-nori-tokenizer.md#2025-04-21_snippet_4

LANGUAGE: txt
CODE:
```
c++                 <1>
C쁠쁠
세종
세종시 세종 시        <2>
```

----------------------------------------

TITLE: Reversing Unicode Characters with REVERSE in ESQL
DESCRIPTION: Shows how the REVERSE function handles Unicode grapheme clusters correctly when reversing a string. It preserves the integrity of emoji and other complex Unicode characters during reversal.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/reverse.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
ROW bending_arts = "💧🪨🔥💨" | EVAL bending_arts_reversed = REVERSE(bending_arts);
```

----------------------------------------

TITLE: Painless Script for Payload Transformation
DESCRIPTION: This Painless script filters theatre data based on monetary value. It extracts 'money_makers' (plays with value > 50000) and 'duds' (plays with value < 15000), creating a new payload containing these two lists. The script leverages the Java Stream API for data manipulation within the Elasticsearch Watcher transform context.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-watcher-transform-context.md#2025-04-21_snippet_1

LANGUAGE: painless
CODE:
```

        return [
          'money_makers': ctx.payload.aggregations.theatres.buckets.stream()  <1>
            .filter(t -> {                                                    <2>
                return t.money.value > 50000
            })
            .map(t -> {                                                       <3>
                return ['play': t.key, 'total_value': t.money.value ]
            }).collect(Collectors.toList()),                                  <4>
          'duds' : ctx.payload.aggregations.theatres.buckets.stream()         <5>
            .filter(t -> {
                return t.money.value < 15000
            })
            .map(t -> {
                return ['play': t.key, 'total_value': t.money.value ]
            }).collect(Collectors.toList())
          ]
      
```

----------------------------------------

TITLE: Indexing Document with Synthetic Source and Aggregate Metric
DESCRIPTION: Adds a document with ID `1` to the `idx` index, which is configured for synthetic source. The document includes pre-aggregated data for the `agg_metric` field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/aggregate-metric-double.md#_snippet_7

LANGUAGE: console
CODE:
```
PUT idx/_doc/1
{
  "agg_metric": {
    "min": -302.50,
    "max": 702.30,
    "sum": 200.0,
    "value_count": 25
  }
}
```

----------------------------------------

TITLE: Configuring Kuromoji Baseform Token Filter in Elasticsearch
DESCRIPTION: This snippet demonstrates how to set up an index with a custom analyzer using the kuromoji_tokenizer and kuromoji_baseform filter. It also includes an example of analyzing text with the configured analyzer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-baseform.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT kuromoji_sample
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "my_analyzer": {
            "tokenizer": "kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform"
            ]
          }
        }
      }
    }
  }
}

GET kuromoji_sample/_analyze
{
  "analyzer": "my_analyzer",
  "text": "飲み"
}
```

----------------------------------------

TITLE: Setting Index Origination Date
DESCRIPTION: Dynamic index-level setting for specifying the timestamp used to calculate backing index generation age after rollover.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/data-stream-lifecycle-settings.md#2025-04-21_snippet_8

LANGUAGE: yaml
CODE:
```
index.lifecycle.origination_date: <unix_epoch_milliseconds>
```

----------------------------------------

TITLE: Creating PKCS12 Keystore with a Single Entry
DESCRIPTION: Imports a specific key alias from a JKS keystore into a PKCS12 keystore format using the keytool command, focusing on 'signing1'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/identity-provider/src/test/resources/org/elasticsearch/xpack/idp/saml/idp/README.txt#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
keytool -importkeystore -srckeystore multi_signing.jks  -destkeystore signing.p12 -deststoretype PKCS12 -deststorepass signing -destkeypass signing -alias signing1
```

----------------------------------------

TITLE: Receiving Bucket Correlation Aggregation Example Response JSON
DESCRIPTION: This snippet shows a potential JSON response structure for the bucket correlation example query. It includes the results for each term bucket, the nested range aggregation results within each term bucket, and the calculated 'value' representing the correlation coefficient from the bucket_correlation aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-correlation-aggregation.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "aggregations" : {
    "buckets" : {
      "doc_count_error_upper_bound" : 0,
      "sum_other_doc_count" : 0,
      "buckets" : [
        {
          "key" : "1.0",
          "doc_count" : 100,
          "latency_ranges" : {
            "buckets" : [
              {
                "key" : "*-0.0",
                "to" : 0.0,
                "doc_count" : 0
              },
              {
                "key" : "0.0-105.0",
                "from" : 0.0,
                "to" : 105.0,
                "doc_count" : 1
              },
              {
                "key" : "105.0-225.0",
                "from" : 105.0,
                "to" : 225.0,
                "doc_count" : 9
              },
              {
                "key" : "225.0-445.0",
                "from" : 225.0,
                "to" : 445.0,
                "doc_count" : 0
              },
              {
                "key" : "445.0-665.0",
                "from" : 445.0,
                "to" : 665.0,
                "doc_count" : 0
              },
              {
                "key" : "665.0-885.0",
                "from" : 665.0,
                "to" : 885.0,
                "doc_count" : 0
              },
              {
                "key" : "885.0-1115.0",
                "from" : 885.0,
                "to" : 1115.0,
                "doc_count" : 10
              },
              {
                "key" : "1115.0-1335.0",
                "from" : 1115.0,
                "to" : 1335.0,
                "doc_count" : 20
              },
              {
                "key" : "1335.0-1555.0",
                "from" : 1335.0,
                "to" : 1555.0,
                "doc_count" : 20
              },
              {
                "key" : "1555.0-1775.0",
                "from" : 1555.0,
                "to" : 1775.0,
                "doc_count" : 20
              },
              {
                "key" : "1775.0-*",
                "from" : 1775.0,
                "doc_count" : 20
              }
            ]
          },
          "bucket_correlation" : {
            "value" : 0.8402398981360937
          }
        },
        {
          "key" : "2.0",
          "doc_count" : 100,
          "latency_ranges" : {
            "buckets" : [
              {
                "key" : "*-0.0",
                "to" : 0.0,
                "doc_count" : 0
              },
              {
                "key" : "0.0-105.0",
                "from" : 0.0,
                "to" : 105.0,
                "doc_count" : 19
              },
              {
                "key" : "105.0-225.0",
                "from" : 105.0,
                "to" : 225.0,
                "doc_count" : 11
              },
              {
                "key" : "225.0-445.0",
                "from" : 225.0,
                "to" : 445.0,
                "doc_count" : 20
              },
              {
                "key" : "445.0-665.0",
                "from" : 445.0,
                "to" : 665.0,
                "doc_count" : 20
              },
              {
                "key" : "665.0-885.0",
                "from" : 665.0,
                "to" : 885.0,
                "doc_count" : 20
              },
              {
                "key" : "885.0-1115.0",
                "from" : 885.0,
                "to" : 1115.0,
                "doc_count" : 10
              },
              {
                "key" : "1115.0-1335.0",
                "from" : 1115.0,
                "to" : 1335.0,
                "doc_count" : 0
              },
              {
                "key" : "1335.0-1555.0",
                "from" : 1335.0,
                "to" : 1555.0,
                "doc_count" : 0
              },
              {
                "key" : "1555.0-1775.0",
                "from" : 1555.0,
                "to" : 1775.0,
                "doc_count" : 0
              },
              {
                "key" : "1775.0-*",
                "from" : 1775.0,
                "doc_count" : 0
              }
            ]
          },
          "bucket_correlation" : {
            "value" : -0.5759855613334943
          }
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Promotion in Painless
DESCRIPTION: Demonstrates how promotion works in Painless, where values are implicitly cast to compatible types for evaluation. It shows examples of promoting an `int` to a `double` and a `def` to a `float` during arithmetic operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-casting.md#2025-04-21_snippet_12

LANGUAGE: painless
CODE:
```
double d = 2 + 2.0; <1>
def x = 1;          <2>
float f = x + 2.0F; <3>
```

----------------------------------------

TITLE: Logging Action in Elasticsearch Watch
DESCRIPTION: A logging action configuration that displays the execution date and the number of buckets in the aggregation results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-watcher-transform-context.md#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
"The watch was successfully executed on {{ctx.payload.human_date}} and contained {{ctx.payload.aggregations.theatres.buckets.size}} buckets"
```

----------------------------------------

TITLE: Creating Elasticsearch Java API Client
DESCRIPTION: This snippet shows how to create an instance of the Elasticsearch Java API Client. It uses a builder pattern to configure the client with server details and other options.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/ent-search/licenses/slf4j-api-NOTICE.txt#2025-04-22_snippet_0

LANGUAGE: Java
CODE:
```
// Create the low-level client
RestClient restClient = RestClient.builder(
    new HttpHost("localhost", 9200)).build();

// Create the transport with a Jackson mapper
ElasticsearchTransport transport = new RestClientTransport(
    restClient, new JacksonJsonpMapper());

// And create the API client
ElasticsearchClient client = new ElasticsearchClient(transport);
```

----------------------------------------

TITLE: Handling Multiple Values with Single Weight in Elasticsearch Weighted Average
DESCRIPTION: This example shows how the weighted_avg aggregation processes a document with multiple values in the 'grade' field and a single weight, applying the weight to each value independently.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-weight-avg-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /exams/_doc?refresh
{
  "grade": [1, 2, 3],
  "weight": 2
}

POST /exams/_search
{
  "size": 0,
  "aggs": {
    "weighted_grade": {
      "weighted_avg": {
        "value": {
          "field": "grade"
        },
        "weight": {
          "field": "weight"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Appending Fields with Order in DISSECT ESQL
DESCRIPTION: Shows how to use the `+` modifier along with `/n` (where `n` is an integer) to append multiple matched parts into a single output field (`name`) in a specific order. The `APPEND_SEPARATOR` specifies the joining character.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-process-data-with-dissect-grok.md#_snippet_5

LANGUAGE: ESQL
CODE:
```
ROW message="john jacob jingleheimer schmidt"
| DISSECT message """%{+name/2} %{+name/4} %{+name/3} %{+name/1}""" APPEND_SEPARATOR=","
```

----------------------------------------

TITLE: Configuring Enrich Processor Options Table
DESCRIPTION: Markdown table defining all available configuration options for the Elasticsearch enrich processor, including required and optional parameters with their descriptions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/enrich-processor.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| Name | Required | Default | Description |
| --- | --- | --- | --- |
| `policy_name` | yes | - | The name of the enrich policy to use. |
| `field` | yes | - | The field in the input document that matches the policies match_field used to retrieve the enrichment data. Supports [template snippets](docs-content://manage-data/ingest/transform-enrich/ingest-pipelines.md#template-snippets). |
| `target_field` | yes | - | Field added to incoming documents to contain enrich data. This field contains both the `match_field` and `enrich_fields` specified in the [enrich policy](https://www.elastic.co/docs/api/doc/elasticsearch/operation/operation-enrich-put-policy). Supports [template snippets](docs-content://manage-data/ingest/transform-enrich/ingest-pipelines.md#template-snippets). |
| `ignore_missing` | no | false | If `true` and `field` does not exist, the processor quietly exits without modifying the document |
| `override` | no | true | If processor will update fields with pre-existing non-null-valued field. When set to `false`, such fields will not be touched. |
| `max_matches` | no | 1 | The maximum number of matched documents to include under the configured target field. The `target_field` will be turned into a json array if `max_matches` is higher than 1, otherwise `target_field` will become a json object. In order to avoid documents getting too large, the maximum allowed value is 128. |
| `shape_relation` | no | `INTERSECTS` | A spatial relation operator used to match the [geoshape](/reference/elasticsearch/mapping-reference/geo-shape.md) of incoming documents to documents in the enrich index. This option is only used for `geo_match` enrich policy types. See [Spatial Relations](/reference/query-languages/query-dsl/query-dsl-shape-query.md#_spatial_relations) for operators and more information. |
| `description` | no | - | Description of the processor. Useful for describing the purpose of the processor or its configuration. |
| `if` | no | - | Conditionally execute the processor. See [Conditionally run a processor](docs-content://manage-data/ingest/transform-enrich/ingest-pipelines.md#conditionally-run-processor). |
| `ignore_failure` | no | `false` | Ignore failures for the processor. See [Handling pipeline failures](docs-content://manage-data/ingest/transform-enrich/ingest-pipelines.md#handling-pipeline-failures). |
| `on_failure` | no | - | Handle failures for the processor. See [Handling pipeline failures](docs-content://manage-data/ingest/transform-enrich/ingest-pipelines.md#handling-pipeline-failures). |
| `tag` | no | - | Identifier for the processor. Useful for debugging and metrics. |
```

----------------------------------------

TITLE: Array Initialization Operator in Painless
DESCRIPTION: Demonstrates array initialization with static and dynamic values using the array initialization operator '[] {}'. Shows both simple integer array creation and mixed-type def array initialization.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-array.md#2025-04-21_snippet_0

LANGUAGE: painless
CODE:
```
int[] x = new int[] {1, 2, 3};
```

LANGUAGE: painless
CODE:
```
int i = 1;
long l = 2L;
float f = 3.0F;
double d = 4.0;
String s = "5";
def array = new def[] {i, l, f*d, s};
```

----------------------------------------

TITLE: Configuring Elasticsearch Plugins with Proxy Settings
DESCRIPTION: Example of an elasticsearch-plugins.yml file that installs a custom plugin through an HTTP proxy. The proxy configuration allows specifying an explicit proxy server to use when downloading plugins, overriding the standard Java proxy system properties.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/manage-plugins-using-configuration-file.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
plugins:
  - id: custom-mapper
    location: https://example.com/archive/custom-mapper-1.0.0.zip
proxy: proxy.example.com:8443
```

----------------------------------------

TITLE: User Dictionary Format Example
DESCRIPTION: Example format for Kuromoji user dictionary showing CSV structure with text, tokens, readings, and part-of-speech tags.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-tokenizer.md#2025-04-21_snippet_3

LANGUAGE: text
CODE:
```
<text>,<token 1> ... <token n>,<reading 1> ... <reading n>,<part-of-speech tag>
```

----------------------------------------

TITLE: Using Unicode Case and Case-Insensitive Flags in Painless
DESCRIPTION: Demonstrates combining Unicode case 'u' and case-insensitive 'i' flags in a Painless regex pattern. This example checks if 'Ɛ' matches 'ɛ' ignoring case.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-regexes.md#2025-04-21_snippet_5

LANGUAGE: painless
CODE:
```
'Ɛ' ==~ /ɛ/iu
```

----------------------------------------

TITLE: Calculating Simple Average with AVG in ESQL
DESCRIPTION: This example shows how to calculate the average height from the employees table using the AVG function in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/avg.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS AVG(height)
```

----------------------------------------

TITLE: Defining Frequent Item Sets Aggregation in Elasticsearch
DESCRIPTION: Example of a frequent_item_sets aggregation in Elasticsearch, specifying minimum set size and fields to analyze.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-frequent-item-sets-aggregation.md#2025-04-21_snippet_0

LANGUAGE: js
CODE:
```
"frequent_item_sets": {
  "minimum_set_size": 3,
  "fields": [
    {"field": "my_field_1"},
    {"field": "my_field_2"}
  ]
}
```

----------------------------------------

TITLE: Generate Client Keystore with Keytool
DESCRIPTION: Creates a JKS keystore for the client with RSA key and SAN extensions for localhost variants
SOURCE: https://github.com/elastic/elasticsearch/blob/main/build-tools-internal/src/main/resources/test/ssl/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
keytool -genkey -alias test-client -keystore test-client.jks -keyalg RSA -keysize 2048 -validity 3654 -dname CN="Elasticsearch Build Test Infrastructure" -keypass keypass -storepass keypass -ext san=dns:localhost,dns:localhost.localdomain,dns:localhost4,dns:localhost4.localdomain4,dns:localhost6,dns:localhost6.localdomain6,ip:127.0.0.1,ip:0:0:0:0:0:0:0:1
```

----------------------------------------

TITLE: Return Text on No Highlight Match Elasticsearch Console
DESCRIPTION: Configures Elasticsearch highlighting to return a snippet from the beginning of a field ('comment') when no terms in that field match the query. Setting 'no_match_size' to a non-zero value (like 150) specifies the desired length of this fallback snippet.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_22

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "match": { "user.id": "kimchy" }
  },
  "highlight": {
    "fields": {
      "comment": {
        "fragment_size": 150,
        "number_of_fragments": 3,
        "no_match_size": 150
      }
    }
  }
}
```

----------------------------------------

TITLE: NestedDocument Class for Nested Document Handling
DESCRIPTION: This snippet describes the org.elasticsearch.script.field.NestedDocument class that facilitates operations on nested documents within Elasticsearch. It includes methods for accessing fields, checking existence, and managing the size of nested documents, ensuring nested document structures can be adequately handled in scripts.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.reindex.txt#2025-04-21_snippet_5

LANGUAGE: groovy
CODE:
```
class org.elasticsearch.script.field.NestedDocument {
    WriteField field(String)
    Stream fields(String)
    boolean isEmpty()
    int size()
    boolean exists()
    void remove()
}
```

----------------------------------------

TITLE: Syntax for FORMAT Function in Elasticsearch SQL
DESCRIPTION: Defines the syntax for the FORMAT function, which formats a date, datetime, or time expression into a string using a specified pattern. It requires the date/datetime/time expression and a string expression for the format pattern. Returns null if either input is null or the pattern is an empty string.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_48

LANGUAGE: SQL
CODE:
```
FORMAT(
    date_exp/datetime_exp/time_exp, <1>
    string_exp) <2>
```

----------------------------------------

TITLE: Indexing GeoJSON MultiLineString in Elasticsearch
DESCRIPTION: Example of indexing a GeoJSON MultiLineString geometry in Elasticsearch. MultiLineString represents a collection of linestrings as an array of linestring coordinate arrays.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-shape.md#2025-04-21_snippet_12

LANGUAGE: json
CODE:
```
POST /example/_doc
{
  "location" : {
    "type" : "MultiLineString",
    "coordinates" : [
      [ [102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0] ],
      [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0] ],
      [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8] ]
    ]
  }
}
```

----------------------------------------

TITLE: Get Current Timestamp using NOW in Elasticsearch SQL
DESCRIPTION: Demonstrates using the NOW function to retrieve the current timestamp from the server. The function returns a datetime value representing the time of query execution.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_79

LANGUAGE: SQL
CODE:
```
SELECT NOW() AS result;
```

----------------------------------------

TITLE: Setting up Index Mapping for Filter Context - Console
DESCRIPTION: This snippet creates an Elasticsearch index named `my-index-000001` with a mapping that includes a `keyword` field named `field`. This mapping is required to provide a valid `index` in the `context_setup` for the filter context example.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_1

LANGUAGE: Console
CODE:
```
PUT /my-index-000001
{
  "mappings": {
    "properties": {
      "field": {
        "type": "keyword"
      }
    }
  }
}
```

----------------------------------------

TITLE: kNN Search Profile Result in Elasticsearch (JavaScript)
DESCRIPTION: Shows a portion of the kNN search profile output from Elasticsearch, including timing breakdowns for vector operations, query execution, and result collection.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-profile.md#2025-04-21_snippet_17

LANGUAGE: js
CODE:
```
"dfs" : {
    "knn" : [
        {
        "vector_operations_count" : 4,
        "query" : [
            {
                "type" : "DocAndScoreQuery",
                "description" : "DocAndScoreQuery[0,...][0.008961825,...],0.008961825",
                "time_in_nanos" : 444414,
                "breakdown" : {
                  "set_min_competitive_score_count" : 0,
                  "match_count" : 0,
                  "shallow_advance_count" : 0,
                  "set_min_competitive_score" : 0,
                  "next_doc" : 1688,
                  "match" : 0,
                  "next_doc_count" : 3,
                  "score_count" : 3,
                  "compute_max_score_count" : 0,
                  "compute_max_score" : 0,
                  "advance" : 4153,
                  "advance_count" : 1,
                  "score" : 2099,
                  "build_scorer_count" : 2,
                  "create_weight" : 128879,
                  "shallow_advance" : 0,
                  "create_weight_count" : 1,
                  "build_scorer" : 307595,
                  "count_weight": 0,
                  "count_weight_count": 0
                }
            }
        ],
        "rewrite_time" : 1275732,
        "collector" : [
            {
                "name" : "SimpleTopScoreDocCollector",
                "reason" : "search_top_hits",
                "time_in_nanos" : 17163
            }
        ]
    }   ]
}
```

----------------------------------------

TITLE: GeoTile Grid with Bounding Box in Elasticsearch
DESCRIPTION: Shows how to constrain geotile_grid aggregation to a specific geographic bounding box with high precision tiling.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_11

LANGUAGE: console
CODE:
```
GET /_search
{
  "size": 0,
  "aggs": {
    "my_buckets": {
      "composite": {
        "sources": [
          {
            "tile": {
              "geotile_grid": {
                "field": "location",
                "precision": 22,
                "bounds": {
                  "top_left": "POINT (4.9 52.4)",
                  "bottom_right": "POINT (5.0 52.3)"
                }
              }
            }
          }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Filtering Unsold Documents Under $25 with Painless Script
DESCRIPTION: This Painless script filters documents that are not sold and cost less than $25. It demonstrates the use of the 'doc' map to access document fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-filter-context.md#2025-04-21_snippet_0

LANGUAGE: painless
CODE:
```
doc['sold'].value == false && doc['cost'].value < 25
```

----------------------------------------

TITLE: Finding First First Name by Gender and Birth Date (FIRST) with Grouping and Ordering
DESCRIPTION: This query groups results by 'gender' and uses FIRST to find the first first name within each group, explicitly ordering by 'birth_date'. This returns the first name corresponding to the earliest birth date within each gender.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_17

LANGUAGE: SQL
CODE:
```
SELECT gender, FIRST(first_name, birth_date) FROM emp GROUP BY gender ORDER BY gender;
```

----------------------------------------

TITLE: Calculating Median Absolute Deviation in ESQL
DESCRIPTION: This snippet demonstrates how to use the MEDIAN_ABSOLUTE_DEVIATION function in an ESQL query. It calculates both the median and median absolute deviation of the 'salary' field from the 'employees' index. The function is useful for describing data that may have outliers or may not be normally distributed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/median_absolute_deviation.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS MEDIAN(salary), MEDIAN_ABSOLUTE_DEVIATION(salary)
```

----------------------------------------

TITLE: Saturation Function in Script
DESCRIPTION: This snippet demonstrates how to use the saturation function within a script to calculate a custom score.  The saturation function `saturation(value,k) = value/(k + value)` is used to modify the score based on the 'my-int' field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-script-score-query.md#2025-04-21_snippet_1

LANGUAGE: js
CODE:
```
"script" : {
    "source" : "saturation(doc['my-int'].value, 1)"
}
```

----------------------------------------

TITLE: EQL Query with 'Any' Event Category
DESCRIPTION: Demonstrates how to use the 'any' keyword to match events of any category or documents without an event category field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_2

LANGUAGE: eql
CODE:
```
any where network.protocol == "http"
```

----------------------------------------

TITLE: Named Queries in Percolator
DESCRIPTION: Example of using named queries within percolator queries to track which sub-queries matched each document.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-percolate-query.md#2025-04-21_snippet_10

LANGUAGE: console
CODE:
```
PUT /my-index-000001/_doc/5?refresh
{
  "query": {
    "bool": {
      "should": [
        {
          "match": {
            "message": {
              "query": "Japanese art",
              "_name": "query1"
            }
          }
        },
        {
          "match": {
            "message": {
              "query": "Holand culture",
              "_name": "query2"
            }
          }
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Querying User Identity and Access Control for Source1 in Elasticsearch
DESCRIPTION: This snippet demonstrates how to retrieve user identity and access control information for a specific user from the .search-acl-filter-source1 index in Elasticsearch. It includes the user's email, username, and access control groups.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-dls-overview.md#2025-04-21_snippet_4

LANGUAGE: js
CODE:
```
GET .search-acl-filter-source1
{
  "_id": "example.user@example.com",
  "identity": {
      "username": "example username",
      "email": "example.user@example.com"
   },
   "query": {
        "template": {
            "params": {
                "access_control": [
                    "example.user@example.com",
                    "source1-user-group"]
            }
        },
        "source": "..."
    }
}
```

----------------------------------------

TITLE: Indexing IP Range Synthetic Source (Console)
DESCRIPTION: Illustrates configuring an index with synthetic source and an `ip_range` field. Shows how duplicate IP range values and CIDR notation are normalized and deduplicated in the synthetic `_source`, representing the range as inclusive bounds.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/range.md#_snippet_5

LANGUAGE: Console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "my_range": { "type": "ip_range" }
    }
  }
}

PUT idx/_doc/1
{
  "my_range": [
    "10.0.0.0/24",
    {
      "gte": "10.0.0.0",
      "lte": "10.0.0.255"
    }
  ]
}
```

LANGUAGE: JSON
CODE:
```
{
  "my_range": {
      "gte": "10.0.0.0",
      "lte": "10.0.0.255"
    }

}
```

----------------------------------------

TITLE: Implicit Type Casting Query in ESQL
DESCRIPTION: Example query demonstrating implicit type casting where the string date literal is automatically converted to datetime without explicit to_datetime() function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-implicit-casting.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM employees
| EVAL dd_ns1=date_diff("day", "2023-12-02T11:00:00.00Z", birth_date)
| SORT emp_no
| KEEP dd_ns1
| LIMIT 1
```

----------------------------------------

TITLE: Subquery with Field Aliasing
DESCRIPTION: SELECT operations using field aliases in subqueries
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_subqueries_tests.txt#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
SELECT i FROM
    (SELECT int AS i FROM test);
```

----------------------------------------

TITLE: Configuring ICU Folding Token Filter in Elasticsearch
DESCRIPTION: This snippet demonstrates how to configure an analyzer using the icu_folding token filter in Elasticsearch. It creates an index with a custom analyzer that uses the icu_tokenizer and applies the icu_folding filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-icu-folding.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT icu_sample
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "folded": {
            "tokenizer": "icu_tokenizer",
            "filter": [
              "icu_folding"
            ]
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Token output from dictionary decompounder filter in Elasticsearch
DESCRIPTION: This snippet shows the tokens produced by the dictionary_decompounder filter when applied to the word 'Donaudampfschiff'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-dict-decomp-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
[ Donaudampfschiff, Donau, dampf, schiff ]
```

----------------------------------------

TITLE: Elasticsearch Top Hits Aggregation for FIRST with Two Fields
DESCRIPTION: This JSON snippet shows the Elasticsearch aggregation equivalent to the SQL FIRST function with two fields for sorting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_29

LANGUAGE: JSON
CODE:
```
"top_hits":{"from":0,"size":1,"version":false,"seq_no_primary_term":false,"explain":false,"docvalue_fields":[{"field":"keyword"}],"sort":[{"int":{"order":"asc","missing":"_last","unmapped_type":"integer"}},{"keyword":{"order":"asc","missing":"_last","unmapped_type":"keyword"}}]}}}}
```

----------------------------------------

TITLE: Setting Cron Trigger: Last Day (Text)
DESCRIPTION: This Cron syntax example defines a schedule to trigger an action at 9:05 a.m. UTC on the last day of every month.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/api-conventions.md#_snippet_5

LANGUAGE: text
CODE:
```
0 5 9 L * ?
```

----------------------------------------

TITLE: Configuring and Testing a smartcn_stop Token Filter in Elasticsearch
DESCRIPTION: This example demonstrates how to configure an Elasticsearch index with a custom analyzer that uses the smartcn_tokenizer and smartcn_stop filter. The filter is configured to use the predefined _smartcn_ stopwords list along with custom stopwords 'stack' and '的'. A test query is then executed to analyze Chinese text with this analyzer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-smartcn_stop.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT smartcn_example
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "smartcn_with_stop": {
            "tokenizer": "smartcn_tokenizer",
            "filter": [
              "porter_stem",
              "my_smartcn_stop"
            ]
          }
        },
        "filter": {
          "my_smartcn_stop": {
            "type": "smartcn_stop",
            "stopwords": [
              "_smartcn_",
              "stack",
              "的"
            ]
          }
        }
      }
    }
  }
}

GET smartcn_example/_analyze
{
  "analyzer": "smartcn_with_stop",
  "text": "哈喽，我们是 Elastic   我们是 Elastic Stack（Elasticsearch、Kibana、Beats 和 Logstash）的开发公司。从股票行情到 Twitter 消息流，从 Apache 日志到 WordPress 博文，我们可以帮助人们体验搜索的强大力量，帮助他们以截然不同的方式探索和分析数据"
}
```

----------------------------------------

TITLE: Specifying Semantic Highlighter Type - Elasticsearch API
DESCRIPTION: This snippet shows how to explicitly set the `type` parameter within the `highlight` configuration of a search request to `semantic`. This ensures that the semantic highlighter is used for the specified field, which is particularly relevant for `semantic_text` fields or when you need to force semantic highlighting behavior. Requires an index with the specified field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/semantic-text.md#_snippet_4

LANGUAGE: console
CODE:
```
PUT test-index
{
    "query": {
        "match": {
            "my_field": "Which country is Paris in?"
        }
    },
    "highlight": {
        "fields": {
            "my_field": {
                "type": "semantic",
                "number_of_fragments": 2,
                "order": "score"
            }
        }
    }
}
```

----------------------------------------

TITLE: EQL Sequence Search with Time Constraint in Elasticsearch
DESCRIPTION: Demonstrates an EQL sequence search with a maximum time span of 1 hour between events using the 'with maxspan' keyword.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET /my-data-stream/_eql/search
{
  "query": """
    sequence with maxspan=1h
      [ process where process.name == "regsvr32.exe" ]
      [ file where stringContains(file.name, "scrobj.dll") ]
  """
}
```

----------------------------------------

TITLE: Subquery with Group By
DESCRIPTION: GROUP BY operations in subqueries with and without aliases
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_subqueries_tests.txt#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
SELECT int FROM
    (SELECT int FROM test)
GROUP BY int;
```

----------------------------------------

TITLE: Setting background_is_superset to false
DESCRIPTION: Specifies that the custom background filter used for comparison is not a superset of the foreground documents. This is used when comparing two distinct sets of documents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-significantterms-aggregation.md#_snippet_5

LANGUAGE: JSON
CODE:
```
"background_is_superset": false
```

----------------------------------------

TITLE: Viewing ML Document Processing Response in Elasticsearch
DESCRIPTION: Example response from retrieving a document processed by the language identification ML model. It shows both the original text field and the predicted language field with confidence scores for detected languages.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/repository-gcs/licenses/google-api-services-storage-NOTICE.txt#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
  "_index": "my_index",
  "_id": "1",
  "_version": 1,
  "_seq_no": 0,
  "_primary_term": 1,
  "found": true,
  "_source": {
    "text": "The quick brown fox jumps over the lazy dog.",
    "predicted_lang": {
      "predicted_value": "en",
      "prediction_probability": 0.999744,
      "prediction_score": 0.999744,
      "lang_score": {
        "ar": 1.48472E-9,
        "bg": 2.26657E-11,
        "bn": 7.46137E-10,
        "cs": 5.56967E-10,
        "da": 1.14542E-7,
        "de": 3.19231E-8,
        "el": 2.6091E-9,
        "en": 0.999744,
        "es": 6.52424E-9,
        [...]
      }
    }
  }
}
```

----------------------------------------

TITLE: Example Query for DATABASE() (SQL)
DESCRIPTION: Demonstrates how to execute the `DATABASE()` function in Elasticsearch SQL using a `SELECT` statement. The query returns a single row with the cluster name in the 'DATABASE' column. It is a basic example showing function usage.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-system.md#_snippet_1

LANGUAGE: sql
CODE:
```
SELECT DATABASE();
```

----------------------------------------

TITLE: Advanced Remote Recovery Settings in Elasticsearch
DESCRIPTION: Expert-level settings for fine-tuning remote recovery operations, including concurrent file chunks, chunk size, and timeout configurations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/cross-cluster-replication-settings.md#2025-04-21_snippet_1

LANGUAGE: properties
CODE:
```
ccr.indices.recovery.max_concurrent_file_chunks=5
ccr.indices.recovery.chunk_size=1mb
ccr.indices.recovery.recovery_activity_timeout=60s
ccr.indices.recovery.internal_action_timeout=60s
```

----------------------------------------

TITLE: Querying with Linear Rank Feature Function in Elasticsearch
DESCRIPTION: This example demonstrates how to use the linear function in a rank_feature query. The query searches the 'test' index and applies the linear function to the 'pagerank' field to influence document scoring based on the field's value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-rank-feature-query.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
GET /test/_search
{
  "query": {
    "rank_feature": {
      "field": "pagerank",
      "linear": {}
    }
  }
}
```

----------------------------------------

TITLE: Indexing a LineString Shape in GeoJSON Format
DESCRIPTION: This example shows how to index a linestring shape in GeoJSON format. The linestring is defined with a type and coordinates array containing two or more points that form a line.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/shape.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /example/_doc
{
  "location" : {
    "type" : "linestring",
    "coordinates" : [[-377.03653, 389.897676], [-377.009051, 389.889939]]
  }
}
```

----------------------------------------

TITLE: Indexing a Polygon with Hole in GeoJSON Format
DESCRIPTION: This example shows how to index a polygon with a hole in GeoJSON format. The polygon is defined with two coordinate arrays: the first represents the outer boundary, and the second represents the interior hole.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/shape.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
POST /example/_doc
{
  "location" : {
    "type" : "polygon",
    "coordinates" : [
      [ [1000.0, -1001.0], [1001.0, -1001.0], [1001.0, -1000.0], [1000.0, -1000.0], [1000.0, -1001.0] ],
      [ [1000.2, -1001.2], [1000.8, -1001.2], [1000.8, -1001.8], [1000.2, -1001.8], [1000.2, -1001.2] ]
    ]
  }
}
```

----------------------------------------

TITLE: Using EXP Function in ESQL to Calculate Exponential Value
DESCRIPTION: This example demonstrates how to use the EXP function in ESQL to calculate the exponential value (e^x) of a number. It creates a row with a double value and then applies the EXP function to calculate e raised to the power of that value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/exp.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW d = 5.0
| EVAL s = EXP(d)
```

----------------------------------------

TITLE: Calculating Hyperbolic Sine with SINH Function in ESQL
DESCRIPTION: This snippet demonstrates how to use the SINH function in ESQL to calculate the hyperbolic sine of a numeric value. The example creates a row with a double value and applies SINH to it, returning the calculated result.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/sinh.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=1.8
| EVAL sinh=SINH(a)
```

----------------------------------------

TITLE: Character to String Casting in Painless
DESCRIPTION: Illustrates how to convert a `char` type value into a `String` type value in Painless using the cast operator. It shows an example of casting the character with ASCII value 65 (A) to its string representation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-casting.md#2025-04-21_snippet_9

LANGUAGE: painless
CODE:
```
char c = 65;          <1>
String s = (String)c; <2>
```

----------------------------------------

TITLE: Creating Index with Reverse Token Filter for Suffix Wildcard Optimization in Elasticsearch
DESCRIPTION: Creates an Elasticsearch index with custom analysis settings that combines reverse and edge_ngram token filters to optimize suffix wildcard queries. This technique helps speed up *xyz pattern searches.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/percolator.md#2025-04-21_snippet_10

LANGUAGE: console
CODE:
```
PUT my_queries2
{
  "settings": {
    "analysis": {
      "analyzer": {
        "wildcard_suffix": {
          "type": "custom",
          "tokenizer": "standard",
          "filter": [
            "lowercase",
            "reverse",
            "wildcard_edge_ngram"
          ]
        },
        "wildcard_suffix_search_time": {
          "type": "custom",
          "tokenizer": "standard",
          "filter": [
            "lowercase",
            "reverse"
          ]
        }
      },
      "filter": {
        "wildcard_edge_ngram": {
          "type": "edge_ngram",
          "min_gram": 1,
          "max_gram": 32
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "query": {
        "type": "percolator"
      },
      "my_field": {
        "type": "text",
        "fields": {
          "suffix": {
            "type": "text",
            "analyzer": "wildcard_suffix",
            "search_analyzer": "wildcard_suffix_search_time" <1>
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Using Modulus Operator in ESQL
DESCRIPTION: The modulus operator (%) divides one number by another and returns the remainder. If either operand is a multivalued field, the result is null. This operator is useful for performing modular arithmetic in ESQL queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/layout/mod.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
a % b
```

----------------------------------------

TITLE: Setting Elasticsearch Highlighter Type (console)
DESCRIPTION: Shows how to force a specific highlighter implementation for a field using the `type` parameter within the `highlight.fields` section of an Elasticsearch `_search` request. This example sets the highlighter type to `plain` for the `comment` field, overriding the default behavior.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_4

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "match": { "user.id": "kimchy" }
  },
  "highlight": {
    "fields": {
      "comment": { "type": "plain" }
    }
  }
}
```

----------------------------------------

TITLE: Indexing Multiple Suggestions with Different Weights
DESCRIPTION: Example showing how to index multiple suggestions for a single document, each with its own input value and weight. This allows for more complex suggestion configurations with differing priorities.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_10

LANGUAGE: json
CODE:
```
PUT music/_doc/1?refresh
{
  "suggest": [
    {
      "input": "Nevermind",
      "weight": 10
    },
    {
      "input": "Nirvana",
      "weight": 3
    }
  ]
}
```

----------------------------------------

TITLE: Copying Keystore and Connecting to Azure VM
DESCRIPTION: Commands to copy the previously created keystore to the Azure VM and then connect to the VM using SSH for Elasticsearch installation and configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-azure-classic-long.md#2025-04-21_snippet_9

LANGUAGE: sh
CODE:
```
scp /tmp/azurekeystore.pkcs12 azure-elasticsearch-cluster.cloudapp.net:/home/elasticsearch
ssh azure-elasticsearch-cluster.cloudapp.net
```

----------------------------------------

TITLE: Invalid Fixed Interval Configuration in Elasticsearch
DESCRIPTION: This example demonstrates an invalid configuration of a date histogram aggregation using an unsupported calendar unit (weeks) for fixed intervals, resulting in an error.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-datehistogram-aggregation.md#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "sales_over_time": {
      "date_histogram": {
        "field": "date",
        "fixed_interval": "2w"
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Index with Percolator and Text Fields in Elasticsearch
DESCRIPTION: This code snippet demonstrates how to create an Elasticsearch index with a text field for storing document messages and a percolator field for storing queries. The percolator field type allows stored queries to be matched against incoming documents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-percolate-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "mappings": {
    "properties": {
      "message": {
        "type": "text"
      },
      "query": {
        "type": "percolator"
      }
    }
  }
}
```

----------------------------------------

TITLE: Calculating Geometric Centroid using ST_CENTROID_AGG in ESQL
DESCRIPTION: This query retrieves data from the 'airports' index and uses the ST_CENTROID_AGG function to calculate the centroid (geometric center) of all location points. The result is a single geo_point representing the central point of all airport locations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/st_centroid_agg.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airports
| STATS centroid=ST_CENTROID_AGG(location)
```

----------------------------------------

TITLE: Elasticsearch Croneval Usage Example
DESCRIPTION: Example showing how to validate a cron expression that runs every minute and display the next 20 execution times.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/elasticsearch-croneval.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
bin/elasticsearch-croneval "0 0/1 * * * ?" -c 20
```

----------------------------------------

TITLE: Finding Substring Position Using LOCATE in ESQL
DESCRIPTION: Shows how to use the LOCATE function to find the position of a substring 'll' within the string 'hello'. The function returns 3 since 'll' starts at position 3 in 'hello' (1-based indexing).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/locate.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = "hello"
| EVAL a_ll = LOCATE(a, "ll")
```

----------------------------------------

TITLE: Using Pre-Decrement Operator with 'def' Type in Painless
DESCRIPTION: This example illustrates how the pre-decrement operator '--' functions with the 'def' type in Painless, showing implicit casting and type handling.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_7

LANGUAGE: painless
CODE:
```
def x = 1;
--x;
```

----------------------------------------

TITLE: Converting WKT to Cartesian Points using TO_CARTESIANPOINT in ESQL
DESCRIPTION: This ESQL query demonstrates the conversion of WKT point representations to Cartesian points. It uses MV_EXPAND to process multiple WKT strings and then applies the TO_CARTESIANPOINT function to create cartesian_point values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_cartesianpoint.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW wkt = ["POINT(4297.11 -1475.53)", "POINT(7580.93 2272.77)"]
| MV_EXPAND wkt
| EVAL pt = TO_CARTESIANPOINT(wkt)
```

----------------------------------------

TITLE: Calculating Percentile with Multi-Valued Column in ESQL
DESCRIPTION: Shows how to combine MV_MAX and PERCENTILE functions to calculate the 80th percentile of maximum values from a multi-valued salary_change column.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/percentile.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM employees
| STATS p80_max_salary_change = PERCENTILE(MV_MAX(salary_change), 80)
```

----------------------------------------

TITLE: Finding Maximum Absolute Monthly Salary with MAX and ABS
DESCRIPTION: This query calculates the absolute value of the monthly salary ('salary / -12.0') and then finds the maximum among these absolute values using the MAX function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_31

LANGUAGE: SQL
CODE:
```
SELECT MAX(ABS(salary / -12.0)) AS max FROM emp;
```

----------------------------------------

TITLE: Configuring Kuromoji Analyzer with Hiragana Uppercase Filter in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create an index with a custom analyzer using the kuromoji_tokenizer and hiragana_uppercase filter. It also includes an example of analyzing text with the custom analyzer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-hiragana-uppercase.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT kuromoji_sample
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "my_analyzer": {
            "tokenizer": "kuromoji_tokenizer",
            "filter": [
              "hiragana_uppercase"
            ]
          }
        }
      }
    }
  }
}

GET kuromoji_sample/_analyze
{
  "analyzer": "my_analyzer",
  "text": "ちょっとまって"
}
```

----------------------------------------

TITLE: Setting GCE Discovery Trace Logging
DESCRIPTION: Adds logging configuration to set the GCE discovery module to trace level for detailed debugging information.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-long.md#2025-04-21_snippet_12

LANGUAGE: yaml
CODE:
```
# discovery
logger.discovery_gce.name = discovery.gce
logger.discovery_gce.level = trace
```

----------------------------------------

TITLE: Filtering Columns with KEEP in ESQL
DESCRIPTION: This ESQL query selects data from the 'employees' table and uses the KEEP function to retain only columns that start with 'h'. This operation is useful for focusing on specific data fields in a large dataset.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/keepWildcard.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP h*
```

----------------------------------------

TITLE: Counting Array Elements with MV_COUNT in ESQL
DESCRIPTION: Example showing how to use MV_COUNT function to count the number of elements in an array field. The query creates a row with an array field 'a' containing three strings and uses MV_COUNT to count its elements.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_count.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=["foo", "zoo", "bar"]
| EVAL count_a = MV_COUNT(a)
```

----------------------------------------

TITLE: Calculating Total Salary Changes with Inline Function in ESQL
DESCRIPTION: This query demonstrates the use of an inline function MV_MAX within a SUM aggregation. It calculates the sum of the maximum salary changes for each employee from the 'employees' table.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/sum.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM employees
| STATS total_salary_changes = SUM(MV_MAX(salary_change))
```

----------------------------------------

TITLE: Search with Rule Retriever in Elasticsearch
DESCRIPTION: Executes a search on the `movies` index using the `rule` retriever. It applies rules from `my-ruleset` based on the `query_string` match criteria to the results returned by the standard query for "harry potter".
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrievers.md#_snippet_12

LANGUAGE: console
CODE:
```
GET movies/_search
{
  "retriever": {
    "rule": {
      "match_criteria": {
        "query_string": "harry potter"
      },
      "ruleset_ids": [
        "my-ruleset"
      ],
      "retriever": {
        "standard": {
          "query": {
            "query_string": {
              "query": "harry potter"
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Finding First Value With Explicit Ordering (FIRST) - Example 2
DESCRIPTION: This query finds the first non-null value in column 'a' from index 't', explicitly using column 'b' for ordering. The result is the value of 'a' corresponding to the minimum 'b' (then potentially 'a' for ties).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_13

LANGUAGE: SQL
CODE:
```
SELECT FIRST(a, b) FROM t
```

----------------------------------------

TITLE: Slicing Multi-Value Fields with Positive Indices in ESQL
DESCRIPTION: This example demonstrates how to use mv_slice function with positive indices to extract elements from a multi-value field. It shows both single element extraction and range extraction.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_slice.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
row a = [1, 2, 2, 3]
| eval a1 = mv_slice(a, 1), a2 = mv_slice(a, 2, 3)
```

----------------------------------------

TITLE: Analyzing Text with N-gram Filter in Elasticsearch
DESCRIPTION: Example of using the analyze API with the ngram filter to generate 1-character and 2-character n-grams from the text 'Quick fox'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-ngram-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET _analyze
{
  "tokenizer": "standard",
  "filter": [ "ngram" ],
  "text": "Quick fox"
}
```

----------------------------------------

TITLE: SHA1 Hash Computation in Elasticsearch ESQL
DESCRIPTION: This snippet demonstrates how to compute the SHA1 hash of a string field in Elasticsearch using ESQL. It retrieves data from 'sample_data', filters out rows with 'Connection error' messages, calculates the SHA1 hash of the 'message' field, and keeps only the original message and its hash.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/sha1.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM sample_data
| WHERE message != "Connection error"
| EVAL sha1 = sha1(message)
| KEEP message, sha1
```

----------------------------------------

TITLE: Querying No Documents with match_none in Elasticsearch
DESCRIPTION: This snippet shows how to perform a match_none query in Elasticsearch, which will match no documents. This is useful for testing and validation within query logic.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-match-all-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "match_none": {}
  }
}
```

----------------------------------------

TITLE: Analyzing Text with the Default Path Hierarchy Tokenizer in Elasticsearch
DESCRIPTION: This example demonstrates using the default path_hierarchy tokenizer to analyze a file path '/one/two/three', which produces three terms representing each level of the path hierarchy.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pathhierarchy-tokenizer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _analyze
{
  "tokenizer": "path_hierarchy",
  "text": "/one/two/three"
}
```

LANGUAGE: text
CODE:
```
[ /one, /one/two, /one/two/three ]
```

----------------------------------------

TITLE: Field Capabilities API with Alias
DESCRIPTION: Demonstrates how to use wildcard patterns with field aliases in the field capabilities API. The pattern matches both concrete fields and aliases.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/field-alias.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET trips/_field_caps?fields=route_*,transit_mode
```

----------------------------------------

TITLE: Elasticsearch Top Hits Aggregation for LAST
DESCRIPTION: This JSON snippet shows the Elasticsearch aggregation equivalent to the SQL LAST function for a date field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_26

LANGUAGE: JSON
CODE:
```
"top_hits":{"from":0,"size":1,"version":false,"seq_no_primary_term":false,"explain":false,"docvalue_fields":[{"field":"date","format":"strict_date_optional_time_nanos"}],"sort":[{"date":{"order":"desc","missing":"_last","unmapped_type":"date"}}]}}}}
```

----------------------------------------

TITLE: Installing Elasticsearch Plugin from Local File System (Windows)
DESCRIPTION: This command installs an Elasticsearch plugin from a local file system location on Windows systems. Paths with spaces must be wrapped in quotes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/plugin-management-custom-url.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
bin\elasticsearch-plugin install file:///C:/path/to/plugin.zip
```

----------------------------------------

TITLE: Elasticsearch Top Hits Aggregation for LAST with Two Fields
DESCRIPTION: This JSON snippet shows the Elasticsearch aggregation equivalent to the SQL LAST function with two fields for sorting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_31

LANGUAGE: JSON
CODE:
```
"top_hits":{"from":0,"size":1,"version":false,"seq_no_primary_term":false,"explain":false,"docvalue_fields":[{"field":"date","format":"strict_date_optional_time_nanos"}],"sort":[{"int":{"order":"desc","missing":"_last","unmapped_type":"integer"}},{"date":{"order":"desc","missing":"_last","unmapped_type":"date"}}]}}}}
```

----------------------------------------

TITLE: Updating an Elasticsearch Plugin
DESCRIPTION: Commands to update an Elasticsearch plugin by first removing the existing version and then installing the new version. Most plugins are built for specific Elasticsearch versions and must be reinstalled after Elasticsearch updates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/listing-removing-updating.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
sudo bin/elasticsearch-plugin remove [pluginname]
sudo bin/elasticsearch-plugin install [pluginname]
```

----------------------------------------

TITLE: Indexing GeoJSON Geometry Collection in Elasticsearch
DESCRIPTION: Example of indexing a GeoJSON Geometry Collection in Elasticsearch. The collection contains multiple geometry objects of different types (point and linestring) in a single field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/shape.md#2025-04-21_snippet_16

LANGUAGE: json
CODE:
```
POST /example/_doc
{
  "location" : {
    "type": "geometrycollection",
    "geometries": [
      {
        "type": "point",
        "coordinates": [1000.0, 100.0]
      },
      {
        "type": "linestring",
        "coordinates": [ [1001.0, 100.0], [1002.0, 100.0] ]
      }
    ]
  }
}
```

----------------------------------------

TITLE: Example using SUM_OF_SQUARES on a field in SQL
DESCRIPTION: Demonstrates how to use the SUM_OF_SQUARES function along with MIN and MAX aggregations on the 'salary' field from the 'emp' table in Elasticsearch SQL. The query calculates the sum of squares of salaries and presents it alongside the minimum and maximum salary values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_54

LANGUAGE: SQL
CODE:
```
SELECT MIN(salary) AS min, MAX(salary) AS max, SUM_OF_SQUARES(salary) AS sumsq
       FROM emp;
```

----------------------------------------

TITLE: Email Analysis Configuration - Elasticsearch Pattern Capture
DESCRIPTION: Elasticsearch configuration for analyzing email addresses using pattern capture filter
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pattern-capture-tokenfilter.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
PUT test
{
   "settings" : {
      "analysis" : {
         "filter" : {
            "email" : {
               "type" : "pattern_capture",
               "preserve_original" : true,
               "patterns" : [
                  "([^@]+)",
                  "(\\p{L}+)",
                  "(\\d+)",
                  "@(.+)"
               ]
            }
         },
         "analyzer" : {
            "email" : {
               "tokenizer" : "uax_url_email",
               "filter" : [ "email", "lowercase",  "unique" ]
            }
         }
      }
   }
}
```

----------------------------------------

TITLE: Performing Negation in SQL (Unary)
DESCRIPTION: Shows how to use the unary negation operator (-) to change the sign of a single numeric value in a SQL query. The result is returned as a column named 'x'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-operators-math.md#_snippet_2

LANGUAGE: sql
CODE:
```
SELECT - 1 AS x;
```

----------------------------------------

TITLE: Configure HTTP Exporter Host Formats YAML
DESCRIPTION: Shows various accepted formats for specifying the 'host' setting for an 'http' monitoring exporter. Hosts can be specified as a single string or an array, supporting hostname, hostname:port, and full HTTP/HTTPS URLs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/monitoring-settings.md#_snippet_2

LANGUAGE: YAML
CODE:
```
xpack.monitoring.exporters:
  example1:
    type: http
    host: "10.1.2.3"
  example2:
    type: http
    host: ["http://10.1.2.4"]
  example3:
    type: http
    host: ["10.1.2.5", "10.1.2.6"]
  example4:
    type: http
    host: ["https://10.1.2.3:9200"]
```

----------------------------------------

TITLE: Install Elasticsearch Ukrainian Analysis Plugin (Shell)
DESCRIPTION: This command uses the Elasticsearch plugin manager to install the Ukrainian analysis plugin from the default Elastic repository. It requires superuser privileges and the plugin manager tool to be accessible. After execution, each node where the plugin is installed must be restarted.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-ukrainian.md#_snippet_0

LANGUAGE: Shell
CODE:
```
sudo bin/elasticsearch-plugin install analysis-ukrainian
```

----------------------------------------

TITLE: Listing Installed Elasticsearch Plugins via Command Line
DESCRIPTION: Command to list all currently installed Elasticsearch plugins using the elasticsearch-plugin utility. This provides a simple way to view which plugins are active in the current installation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/listing-removing-updating.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
sudo bin/elasticsearch-plugin list
```

----------------------------------------

TITLE: Extracting Substring from Right in ESQL
DESCRIPTION: This ESQL query demonstrates the usage of the RIGHT function to extract the last 3 characters from the 'last_name' field of employees. It keeps only the 'last_name' column and creates a new 'right' column with the extracted substring.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/right.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP last_name
| EVAL right = RIGHT(last_name, 3)
```

----------------------------------------

TITLE: Foreach Processor with Failure Handling
DESCRIPTION: Configuration of the Foreach processor with an on_failure block that redirects documents to a failure_index if the remove processor fails.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/foreach-processor.md#2025-04-21_snippet_11

LANGUAGE: js
CODE:
```
{
  "foreach" : {
    "field" : "persons",
    "processor" : {
      "remove" : {
        "field" : "_value.id",
        "on_failure" : [
          {
            "set" : {
              "field": "_index",
              "value": "failure_index"
            }
          }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Matching Documents Using Percolate Query
DESCRIPTION: This shows how to match a document against stored percolator queries in an index. The document is matched using a percolate query which evaluates the 'message' against registered queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-percolate-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search
{
  "query": {
    "percolate": {
      "field": "query",
      "document": {
        "message": "A new bonsai tree in the office"
      }
    }
  }
}
```

----------------------------------------

TITLE: SQL Query for FIRST Aggregation
DESCRIPTION: This SQL query selects the first value of the keyword field from the test table.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_22

LANGUAGE: SQL
CODE:
```
SELECT FIRST(keyword) FROM test;
```

----------------------------------------

TITLE: Computing SHA256 Hash in ESQL
DESCRIPTION: This snippet filters out messages containing a specific string and computes the SHA256 hash for the remaining messages. The output includes the original message and its corresponding SHA256 hash. It requires a dataset labeled 'sample_data' and uses the EVAL function to perform the hash computation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/sha256.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM sample_data
| WHERE message != "Connection error"
| EVAL sha256 = sha256(message)
| KEEP message, sha256
```

----------------------------------------

TITLE: Querying Elasticsearch Rank Evaluation API with Discounted Cumulative Gain Metric
DESCRIPTION: This snippet demonstrates the use of the Elasticsearch Rank Evaluation API with the Discounted Cumulative Gain metric. It sets the k value to 20 and disables normalization.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-rank-eval.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
GET /my-index-000001/_rank_eval
{
  "requests": [
    {
      "id": "JFK query",
      "request": { "query": { "match_all": {} } },
      "ratings": []
    } ],
  "metric": {
    "dcg": {
      "k": 20,
      "normalize": false
    }
  }
}
```

----------------------------------------

TITLE: Fixing Custom Scheduling Migration with Elasticsearch Console
DESCRIPTION: This console command uses the Elasticsearch POST update API to update a specific connector document in the `.elastic-connectors` index. It sets the `custom_scheduling` field to an empty object, which is a manual workaround for a migration failure issue ('NoMethodError: undefined method 'each' for nil:NilClass') that can occur when upgrading from version 8.6 or earlier. The `connector-id` placeholder should be replaced with the actual ID of the affected connector.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-known-issues.md#_snippet_1

LANGUAGE: console
CODE:
```
POST /.elastic-connectors/_update/connector-id
{
  "doc": {
    "custom_scheduling": {}
  }
}
```

----------------------------------------

TITLE: Incorrect MongoDB Aggregation Pipeline Example
DESCRIPTION: This code snippet demonstrates an incorrect usage of `new Date()` within a MongoDB aggregation pipeline.  The `new Date()` expression will be treated as a string literal instead of being evaluated, leading to unexpected results. Avoid using JavaScript expressions directly within the pipeline definition.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-mongodb.md#2025-04-21_snippet_2

LANGUAGE: js
CODE:
```
{
    "aggregate": {
        "pipeline": [
            {
                "$match": {
                  "expiresAt": {
                    "$gte": "new Date()"
                  }
                }
            }
        ]
    }
}
```

----------------------------------------

TITLE: Searching and Highlighting Using Index Prefixes in Elasticsearch
DESCRIPTION: This example shows how to perform a prefix search query and highlight the results using the automatically created '._index_prefix' subfield. The matched_fields parameter is used to highlight the main field based on matches found in the prefix field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/index-prefixes.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET my-index-000001/_search
{
  "query": {
    "prefix": {
      "full_name": {
        "value": "ki"
      }
    }
  },
  "highlight": {
    "fields": {
      "full_name": {
        "matched_fields": ["full_name._index_prefix"]
      }
    }
  }
}
```

----------------------------------------

TITLE: Getting Geometry Type in Elasticsearch SQL
DESCRIPTION: Explains the ST_GeometryType function which takes a geometry input and returns a string indicating its type (e.g., POINT, POLYGON, etc.). It returns null for null input. The example converts a WKT point string to geometry and gets its type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-geo.md#_snippet_2

LANGUAGE: SQL
CODE:
```
ST_GeometryType(
    geometry <1>
)
```

LANGUAGE: SQL
CODE:
```
SELECT ST_GeometryType(ST_WKTToSQL('POINT (10 20)')) type;
```

----------------------------------------

TITLE: Listing all extensions for an account in Elasticsearch Service
DESCRIPTION: API call to retrieve information about all extensions available in the account. Returns metadata about each extension without the actual file content.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-plugins-guide.md#2025-04-21_snippet_7

LANGUAGE: sh
CODE:
```
curl -X GET \
  https://api.elastic-cloud.com/api/v1/deployments/extensions \
  -H 'Content-Type: application/json' \
  -H "Authorization: ApiKey $CLOUD_API_KEY" \
```

----------------------------------------

TITLE: Field Access Examples in Painless
DESCRIPTION: Demonstrates field access operations using the Example type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-reference.md#2025-04-21_snippet_4

LANGUAGE: painless
CODE:
```
Example example = new Example();
example.x = 1;
example.y = example.x;
example.z = new ArrayList();
example.z.add(1);
example.x = example.z.get(0);
```

----------------------------------------

TITLE: Analyzing Text with Hunspell Token Filter
DESCRIPTION: Example of using the analyze API with Hunspell filter to stem English text using the en_US dictionary
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-hunspell-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer": "standard",
  "filter": [
    {
      "type": "hunspell",
      "locale": "en_US"
    }
  ],
  "text": "the foxes jumping quickly"
}
```

----------------------------------------

TITLE: Analyzing Text with Elision Filter in Elasticsearch
DESCRIPTION: Example of using the analyze API with the elision filter to remove the elision 'j'' from French text.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-elision-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET _analyze
{
  "tokenizer" : "standard",
  "filter" : ["elision"],
  "text" : "j'examine près du wharf"
}
```

LANGUAGE: text
CODE:
```
[ examine, près, du, wharf ]
```

----------------------------------------

TITLE: Configuring ICU Analyzer Parameters in Elasticsearch
DESCRIPTION: Demonstrates the configuration parameters available for the icu_analyzer. The analyzer supports method parameter for normalization type (nfkc, nfc, nfkc_cf) and mode parameter for normalization mode (compose, decompose).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-icu-analyzer.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
method: # Accepts nfkc, nfc or nfkc_cf (default)
mode: # Accepts compose (default) or decompose
```

----------------------------------------

TITLE: Final Scripted Metric Aggregation Response
DESCRIPTION: This JavaScript snippet shows the final response of the scripted metric aggregation, including the total profit calculated across all shards.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-scripted-metric-aggregation.md#2025-04-21_snippet_7

LANGUAGE: js
CODE:
```
{
  ...

  "aggregations": {
    "profit": {
      "value": 170
    }
  }
}
```

----------------------------------------

TITLE: Multiple Percolate Queries
DESCRIPTION: Demonstrates how to specify multiple percolate queries in a single search request using named queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-percolate-query.md#2025-04-21_snippet_11

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search
{
  "query": {
    "bool": {
      "should": [
        {
          "percolate": {
            "field": "query",
            "document": {
              "message": "bonsai tree"
            },
            "name": "query1"
          }
        },
        {
          "percolate": {
            "field": "query",
            "document": {
              "message": "tulip flower"
            },
            "name": "query2"
          }
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Setting Dimension Fields Limit in Elasticsearch
DESCRIPTION: Configuration for the maximum number of time series dimensions allowed in an index.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/time-series.md#2025-04-21_snippet_6

LANGUAGE: yaml
CODE:
```
index.mapping.dimension_fields.limit: 32768
```

----------------------------------------

TITLE: ESQL Query with Aggregation Exceeding Maximum Limit
DESCRIPTION: Demonstrates an ESQL query with aggregation that processes all documents but still respects the maximum row limit.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/common/result-set-size-limitation.md#2025-04-21_snippet_3

LANGUAGE: esql
CODE:
```
FROM index | STATS AVG(field1) BY field2 | LIMIT 20000
```

----------------------------------------

TITLE: IPv6 Prefix Aggregation
DESCRIPTION: Shows IP prefix aggregation for IPv6 addresses with a prefix length of 64 bits.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-ipprefix-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /network-traffic/_search
{
  "size": 0,
  "aggs": {
    "ipv6-subnets": {
      "ip_prefix": {
        "field": "ipv6",
        "prefix_length": 64,
        "is_ipv6": true
      }
    }
  }
}
```

----------------------------------------

TITLE: Converting and Managing IP Addresses with ESQL
DESCRIPTION: Demonstrates converting string representations to IP addresses and creating network prefixes. Uses TO_IP() function to convert strings to IP addresses and IP_PREFIX() to create network masks with specified prefix lengths.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/ip_prefix.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW ip4 = to_ip("1.2.3.4"), ip6 = TO_IP("fe80::cae2:65ff:fece:feb9")
| EVAL ip4_prefix = IP_PREFIX(ip4, 24, 0), ip6_prefix = IP_PREFIX(ip6, 0, 112);
```

----------------------------------------

TITLE: Example p-value Significant Terms Query
DESCRIPTION: Demonstrates an Elasticsearch search query using the significant_terms aggregation with the p-value score. It finds significant `user_agent.version` terms for documents where `event.outcome` is "failure" within a specific time range and service name, comparing them against documents where `event.outcome` is not "failure" in the same context.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-significantterms-aggregation.md#_snippet_8

LANGUAGE: JSON
CODE:
```
GET /_search
{
  "query": {
    "bool": {
      "filter": [
        {
          "term": {
            "event.outcome": "failure"
          }
        },
        {
          "range": {
            "@timestamp": {
              "gte": "2021-02-01",
              "lt": "2021-02-04"
            }
          }
        },
        {
          "term": {
            "service.name": {
              "value": "frontend-node"
            }
          }
        }
      ]
    }
  },
  "aggs": {
    "failure_p_value": {
      "significant_terms": {
        "field": "user_agent.version",
        "background_filter": {
          "bool": {
            "must_not": [
              {
                "term": {
                  "event.outcome": "failure"
                }
              }
            ],
            "filter": [
              {
                "range": {
                  "@timestamp": {
                    "gte": "2021-02-01",
                    "lt": "2021-02-04"
                  }
                }
              },
              {
                "term": {
                  "service.name": {
                    "value": "frontend-node"
                  }
                }
              }
            ]
          }
        },
        "p_value": {"background_is_superset": false, "normalize_above": 1000}
      }
    }
  }
}
```

----------------------------------------

TITLE: Exporting Certificate and Key Pair from PKCS#12 to PEM
DESCRIPTION: Function to export both certificate and private key from a PKCS#12 file to separate PEM files using a combination of keytool and openssl.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/src/test/resources/org/elasticsearch/xpack/ssl/SSLErrorMessageTests/README.txt#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
function p12-export-pair() {
    local P12File="$1"
    local P12Pass="$2"
    local P12Name="$3"
    local CrtFile="$4"
    local KeyFile="$5"

    local TmpFile="${PWD}/$(basename $P12File .p12).tmp.p12"
    
    # OpenSSL doesn't have a way to export a single entry
    # Keytool doesn't have a way to export keys
    # So we use keytool to export the whole entry to a temporary PKCS#12 and then use openssl to export that to PEM

    keytool -importkeystore -srckeystore "${PWD}/$P12File" -srcstorepass "$P12Pass" -srcalias "$P12Name" \
        -destkeystore "$TmpFile" -deststorepass "tmp_password" 

    # This produces an unencrypted PKCS#1 key. Use other commands to convert it if needed
    # The sed is to skip "BagAttributes" which we don't need
    openssl pkcs12 -in "$TmpFile" -nodes   -nocerts -passin "pass:tmp_password" | sed -n -e'/^-----/,/^-----/p' > $KeyFile
    openssl pkcs12 -in "$TmpFile" -clcerts -nokeys  -passin "pass:tmp_password" | sed -n -e'/^-----/,/^-----/p' > $CrtFile

    rm $TmpFile
}
```

----------------------------------------

TITLE: Grouping by Multivalued Keys in ESQL STATS
DESCRIPTION: Demonstrates how grouping by a multivalued key places the input row in all relevant groups.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/stats-by.md#2025-04-21_snippet_6

LANGUAGE: esql
CODE:
```
FROM employees
STATS count(*)
BY languages;
```

----------------------------------------

TITLE: Custom Keys in Range Aggregation for Elasticsearch
DESCRIPTION: Illustrates how to customize keys for each range in a range aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-range-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET sales/_search
{
  "aggs": {
    "price_ranges": {
      "range": {
        "field": "price",
        "keyed": true,
        "ranges": [
          { "key": "cheap", "to": 100 },
          { "key": "average", "from": 100, "to": 200 },
          { "key": "expensive", "from": 200 }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Enabling Google Normalized Distance Score
DESCRIPTION: Configures the significant_terms aggregation to use the Google Normalized Distance (GND) score. This score measures co-occurrence and is described in "The Google Similarity Distance". It accepts the `background_is_superset` parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-significantterms-aggregation.md#_snippet_7

LANGUAGE: JSON
CODE:
```
	 "gnd": {
	 }
```

----------------------------------------

TITLE: Span Field Masking Query Example in Elasticsearch
DESCRIPTION: This snippet demonstrates the use of `span_field_masking` query within a `span_near` query in Elasticsearch. It allows searching across different fields (e.g., 'text' and 'text.stems') as if they were the same field. The example showcases how to combine span queries across different fields by masking the field of one of the span queries, along with the `highlight` settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-span-field-masking-query.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "span_near": {
      "clauses": [
        {
          "span_term": {
            "text": "quick brown"
          }
        },
        {
          "span_field_masking": {
            "query": {
              "span_term": {
                "text.stems": "fox" <1>
              }
            },
            "field": "text" <2>
          }
        }
      ],
      "slop": 5,
      "in_order": false
    }
  },
  "highlight": {
    "require_field_match" : false, <3>
    "fields": {
      "*": {}
    }
  }
}
```

----------------------------------------

TITLE: Span Multi-Term Query with Boost
DESCRIPTION: Shows how to add a boost parameter to modify the relevance score of the span multi-term query
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-span-multi-term-query.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "span_multi": {
      "match": {
        "prefix": { "user.id": { "value": "ki", "boost": 1.08 } }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configure Date Mapping for Keyword Field Example
DESCRIPTION: This snippet defines an index mapping in Elasticsearch for a field named '@timestamp' with the data type set to 'date'. This is a prerequisite for using the 'keyword_field' runtime context to perform date-related operations, such as calculating the day of the week from the timestamp value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_16

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "mappings": {
    "properties": {
      "@timestamp": {
        "type": "date"
      }
    }
  }
}
```

----------------------------------------

TITLE: Paired T-test Aggregation Query in Elasticsearch
DESCRIPTION: Illustrates a complete Elasticsearch query using t_test aggregation to compare node startup times before and after an upgrade, using a paired test.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-ttest-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET node_upgrade/_search
{
  "size": 0,
  "aggs": {
    "startup_time_ttest": {
      "t_test": {
        "a": { "field": "startup_time_before" },  <1>
        "b": { "field": "startup_time_after" },   <2>
        "type": "paired"                          <3>
      }
    }
  }
}
```

----------------------------------------

TITLE: Extracting Maximum X Coordinate in ESQL
DESCRIPTION: This ESQL snippet extracts maximum and minimum boundary values from city boundaries, specifically focusing on the x-axis, using various spatial functions like ST_ENVELOPE and ST_XMAX. The main dependency is the `airport_city_boundaries` dataset. Key inputs include the city boundary while outputs are the calculated boundary extremes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/st_xmax.md#2025-04-21_snippet_0

LANGUAGE: ESQL
CODE:
```
FROM airport_city_boundaries
| WHERE abbrev == "CPH"
| EVAL envelope = ST_ENVELOPE(city_boundary)
| EVAL xmin = ST_XMIN(envelope), xmax = ST_XMAX(envelope), ymin = ST_YMIN(envelope), ymax = ST_YMAX(envelope)
| KEEP abbrev, airport, xmin, xmax, ymin, ymax
```

----------------------------------------

TITLE: Using MAD Function on Derived Value in Elasticsearch SQL
DESCRIPTION: Illustrates how to calculate the MAD of a derived value (monthly salary: salary / 12.0), alongside minimum, maximum, and average derived values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_39

LANGUAGE: SQL
CODE:
```
SELECT MIN(salary / 12.0) AS min, MAX(salary / 12.0) AS max, AVG(salary/ 12.0) AS avg, MAD(salary / 12.0) AS mad FROM emp;
```

----------------------------------------

TITLE: Logging delete_role_mapping Event in Elasticsearch
DESCRIPTION: Example of an audit log for the delete role mapping event. This event is logged when the API is invoked to delete a role mapping from the security system.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
{"type":"audit", "timestamp":"2020-12-31T00:12:09,349+0200", "node.id":
"0RMNyghkQYCc_gVd1G6tZQ", "event.type":"security_config_change", "event.
action":"delete_role_mapping", "request.id":"Stim-DuoSTCWom0S_xhf8g",
"delete":{"role_mapping":{"name":"mapping1"}}}
```

----------------------------------------

TITLE: Converting WKT Point to geo_point in ESQL
DESCRIPTION: This snippet demonstrates how to use the TO_GEOPOINT function to convert a Well-Known Text (WKT) Point string representation to a geo_point value in Elasticsearch SQL. The function accepts a string input in WKT Point format and returns a geo_point type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_geopoint.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW wkt = "POINT(42.97109630194 14.7552534413725)"
| EVAL pt = TO_GEOPOINT(wkt)
```

----------------------------------------

TITLE: Converting Various Types to Unsigned Long in ESQL
DESCRIPTION: This snippet demonstrates the usage of TO_UNSIGNED_LONG function (and its aliases TO_ULONG and TO_UL) to convert string representations of numbers and invalid inputs to unsigned long values. It shows how the function handles integer strings, floating-point strings, and non-numeric strings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_unsigned_long.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW str1 = "2147483648", str2 = "2147483648.2", str3 = "foo"
| EVAL long1 = TO_UNSIGNED_LONG(str1), long2 = TO_ULONG(str2), long3 = TO_UL(str3)
```

----------------------------------------

TITLE: Extracting Last Element from Split String using MV_LAST in ESQL
DESCRIPTION: This snippet demonstrates how to split a string by semicolons and then extract the last element using the MV_LAST function in ESQL. It uses the SPLIT function to divide the string and MV_LAST to retrieve the final element.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_last.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a="foo;bar;baz"
| EVAL last_a = MV_LAST(SPLIT(a, ";"))
```

----------------------------------------

TITLE: Calculating Median of Multivalued Field using MV_MEDIAN in ESQL
DESCRIPTION: This snippet demonstrates the usage of the MV_MEDIAN function in ESQL. It takes a multivalued field 'a' containing an array of numbers and calculates the median value, storing the result in a new field 'median_a'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/mv_median.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=[3, 5, 1]
| EVAL median_a = MV_MEDIAN(a)
```

----------------------------------------

TITLE: Indexing a MultiPoint Shape in GeoJSON Format
DESCRIPTION: This example shows how to index a multipoint shape in GeoJSON format. The multipoint is defined with a type and coordinates array containing multiple independent points.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/shape.md#2025-04-21_snippet_10

LANGUAGE: console
CODE:
```
POST /example/_doc
{
  "location" : {
    "type" : "multipoint",
    "coordinates" : [
      [1002.0, 1002.0], [1003.0, 2000.0]
    ]
  }
}
```

----------------------------------------

TITLE: Code Analysis Configuration - Elasticsearch Pattern Capture
DESCRIPTION: Elasticsearch configuration for analyzing camelCase code using pattern capture filter
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pattern-capture-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT test
{
   "settings" : {
      "analysis" : {
         "filter" : {
            "code" : {
               "type" : "pattern_capture",
               "preserve_original" : true,
               "patterns" : [
                  "(\\p{Ll}+|\\p{Lu}\\p{Ll}+|\\p{Lu}+)",
                  "(\\d+)"
               ]
            }
         },
         "analyzer" : {
            "code" : {
               "tokenizer" : "pattern",
               "filter" : [ "code", "lowercase" ]
            }
         }
      }
   }
}
```

----------------------------------------

TITLE: Skip Duplicate Suggestions in Elasticsearch Completion Suggester
DESCRIPTION: Shows how to filter out duplicate suggestions from different documents in the results by setting the skip_duplicates parameter to true.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_16

LANGUAGE: console
CODE:
```
POST music/_search?pretty
{
  "suggest": {
    "song-suggest": {
      "prefix": "nor",
      "completion": {
        "field": "suggest",
        "skip_duplicates": true
      }
    }
  }
}
```

----------------------------------------

TITLE: Basic Serial Differencing Aggregation in Elasticsearch
DESCRIPTION: Basic example of a serial differencing aggregation that specifies the bucket path and lag period. The lag parameter determines how many buckets back to compare the current value against.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-serialdiff-aggregation.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "serial_diff": {
    "buckets_path": "the_sum",
    "lag": 7
  }
}
```

----------------------------------------

TITLE: Rounding Down with FLOOR Function in ESQL
DESCRIPTION: This snippet demonstrates the usage of the FLOOR function in ESQL to round a decimal number down to the nearest integer. It creates a row with a decimal value and then applies the FLOOR function to round it down.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/floor.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=1.8
| EVAL a=FLOOR(a)
```

----------------------------------------

TITLE: ESQL Type Combinations Table in Markdown
DESCRIPTION: A comprehensive table showing all supported type combinations for conditional operations in ESQL. The table specifies the condition type (boolean), possible true/else value types, and the resulting type of the operation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/types/case.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| condition | trueValue | elseValue | result |
| --- | --- | --- | --- |
| boolean | boolean | boolean | boolean |
| boolean | boolean | | boolean |
| boolean | cartesian_point | cartesian_point | cartesian_point |
| boolean | cartesian_point | | cartesian_point |
| boolean | cartesian_shape | cartesian_shape | cartesian_shape |
| boolean | cartesian_shape | | cartesian_shape |
| boolean | date | date | date |
| boolean | date | | date |
| boolean | date_nanos | date_nanos | date_nanos |
| boolean | date_nanos | | date_nanos |
| boolean | double | double | double |
| boolean | double | | double |
| boolean | geo_point | geo_point | geo_point |
| boolean | geo_point | | geo_point |
| boolean | geo_shape | geo_shape | geo_shape |
| boolean | geo_shape | | geo_shape |
| boolean | integer | integer | integer |
| boolean | integer | | integer |
| boolean | ip | ip | ip |
| boolean | ip | | ip |
| boolean | keyword | keyword | keyword |
| boolean | keyword | text | keyword |
| boolean | keyword | | keyword |
| boolean | long | long | long |
| boolean | long | | long |
| boolean | text | keyword | keyword |
| boolean | text | text | keyword |
| boolean | text | | keyword |
| boolean | unsigned_long | unsigned_long | unsigned_long |
| boolean | unsigned_long | | unsigned_long |
| boolean | version | version | version |
| boolean | version | | version |
```

----------------------------------------

TITLE: Converting Values to Date Period in Elasticsearch ESQL
DESCRIPTION: This SQL snippet demonstrates various test cases for converting different input types to date_period values in Elasticsearch ESQL. It includes tests for null values, strings, and invalid inputs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/to_dateperiod.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
SELECT TO_DATE_PERIOD(null);

SELECT TO_DATE_PERIOD('1 year');

SELECT TO_DATE_PERIOD('1y');

SELECT TO_DATE_PERIOD('2 years');

SELECT TO_DATE_PERIOD('2y');

SELECT TO_DATE_PERIOD('1 month');

SELECT TO_DATE_PERIOD('1M');

SELECT TO_DATE_PERIOD('2 months');

SELECT TO_DATE_PERIOD('2M');

SELECT TO_DATE_PERIOD('1 week');

SELECT TO_DATE_PERIOD('1w');

SELECT TO_DATE_PERIOD('2 weeks');

SELECT TO_DATE_PERIOD('2w');

SELECT TO_DATE_PERIOD('1 day');

SELECT TO_DATE_PERIOD('1d');

SELECT TO_DATE_PERIOD('2 days');

SELECT TO_DATE_PERIOD('2d');

SELECT TO_DATE_PERIOD('1 hour');

SELECT TO_DATE_PERIOD('1h');

SELECT TO_DATE_PERIOD('2 hours');

SELECT TO_DATE_PERIOD('2h');

SELECT TO_DATE_PERIOD('1 minute');

SELECT TO_DATE_PERIOD('1m');

SELECT TO_DATE_PERIOD('2 minutes');

SELECT TO_DATE_PERIOD('2m');

SELECT TO_DATE_PERIOD('1 second');

SELECT TO_DATE_PERIOD('1s');

SELECT TO_DATE_PERIOD('2 seconds');

SELECT TO_DATE_PERIOD('2s');

SELECT TO_DATE_PERIOD('1y2M3w4d5h6m7s');

SELECT TO_DATE_PERIOD('1 year 2 months 3 weeks 4 days 5 hours 6 minutes 7 seconds');

SELECT TO_DATE_PERIOD('not a valid period');

SELECT TO_DATE_PERIOD(123);

SELECT TO_DATE_PERIOD(true);

SELECT TO_DATE_PERIOD(false);
```

----------------------------------------

TITLE: Optimized Match Query for Suffix Search in Elasticsearch
DESCRIPTION: An optimized version of the suffix wildcard query using a match query against the reversed field. This approach uses text analysis to reverse the query terms for matching with the reversed indexed tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/percolator.md#2025-04-21_snippet_12

LANGUAGE: console
CODE:
```
PUT /my_queries2/_doc/2?refresh
{
  "query": {
    "match": { <1>
      "my_field.suffix": "xyz"
    }
  }
}
```

----------------------------------------

TITLE: Defining Synonym Records
DESCRIPTION: These lines define synonym or related term records using a structured format, likely for Elasticsearch. Each record follows the pattern s(id, sequence, term, type, flag1, flag2), specifying an identifier (100000001), a sequence number (1, 2, 3), the term ('abstain', 'refrain', 'desist'), a type ('v'), and two flags (1, 0). This data associates multiple terms under a single identifier.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/analysis-common/src/test/resources/org/elasticsearch/analysis/common/synonyms_wordnet.txt#_snippet_0

LANGUAGE: plaintext
CODE:
```
s(100000001,1,'abstain',v,1,0).
s(100000001,2,'refrain',v,1,0).
s(100000001,3,'desist',v,1,0).
```

----------------------------------------

TITLE: Defining Advanced Sync Rules in Elasticsearch JavaScript
DESCRIPTION: This JavaScript snippet shows an advanced sync rule setup for indexing files directly inside a root folder, excluding certain file types. It ensures the indexing follows the specified path pattern while skipping designated extensions. JSON must be correctly structured to function as intended.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-onedrive.md#2025-04-21_snippet_7

LANGUAGE: JavaScript
CODE:
```
[
  {
    "skipFilesWithExtensions": [".md"],
    "parentPathPattern": "/drive/root:"
  }
]
```

----------------------------------------

TITLE: Using MV_DEDUPE Function in ESQL
DESCRIPTION: This example demonstrates how to use the MV_DEDUPE function to remove duplicate values from a multi-value array. The function takes an array and returns a new array with all duplicate values removed, preserving only the first occurrence of each value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_dedupe.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=["foo", "foo", "bar", "foo"]
| EVAL dedupe_a = MV_DEDUPE(a)
```

----------------------------------------

TITLE: Basic Moving Function Syntax in Elasticsearch
DESCRIPTION: Basic syntax example showing the structure of a moving_fn aggregation with required parameters buckets_path, window size, and script.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-movfn-aggregation.md#2025-04-21_snippet_0

LANGUAGE: js
CODE:
```
{
  "moving_fn": {
    "buckets_path": "the_sum",
    "window": 10,
    "script": "MovingFunctions.min(values)"
  }
}
```

----------------------------------------

TITLE: Max Aggregation with Runtime Fields
DESCRIPTION: Shows how to calculate maximum values using runtime fields for complex calculations, including price adjustments based on promotion status.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-max-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "size": 0,
  "runtime_mappings": {
    "price.adjusted": {
      "type": "double",
      "script": """
        double price = doc['price'].value;
        if (doc['promoted'].value) {
          price *= 0.8;
        }
        emit(price);
      """
    }
  },
  "aggs": {
    "max_price": {
      "max": { "field": "price.adjusted" }
    }
  }
}
```

----------------------------------------

TITLE: Analyzing Text with Pattern Tokenizer in Elasticsearch
DESCRIPTION: Example showing how to use the default pattern tokenizer to analyze text, which splits on non-word characters (\W+). The example demonstrates tokenizing a sentence containing underscores and apostrophes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pattern-tokenizer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _analyze
{
  "tokenizer": "pattern",
  "text": "The foo_bar_size's default is 5."
}
```

LANGUAGE: text
CODE:
```
[ The, foo_bar_size, s, default, is, 5 ]
```

----------------------------------------

TITLE: Demonstrating EQL Divide Integer Rounding
DESCRIPTION: This EQL query uses the `divide` function with two integer arguments within a `where` clause. It demonstrates how dividing integers can result in rounding down the floating-point result to the nearest integer, potentially matching unexpected values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-function-ref.md#_snippet_4

LANGUAGE: eql
CODE:
```
process where divide(4, process.args_count) == 1
```

----------------------------------------

TITLE: Basic Median Absolute Deviation Query in Elasticsearch
DESCRIPTION: Example showing how to calculate median absolute deviation for product reviews ratings. Uses basic aggregation to compute both average and variability of ratings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-median-absolute-deviation-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET reviews/_search
{
  "size": 0,
  "aggs": {
    "review_average": {
      "avg": {
        "field": "rating"
      }
    },
    "review_variability": {
      "median_absolute_deviation": {
        "field": "rating"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Terms Aggregation Execution Hint in Elasticsearch
DESCRIPTION: Example showing how to set execution hints for terms aggregation using the map strategy. The execution_hint parameter can be set to either 'map' or 'global_ordinals' to control how the aggregation is executed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-terms-aggregation.md#2025-04-21_snippet_16

LANGUAGE: console
CODE:
```
GET /_search
{
  "aggs": {
    "tags": {
      "terms": {
        "field": "tags",
        "execution_hint": "map"
      }
    }
  }
}
```

----------------------------------------

TITLE: Using VALUES Function in ESQL for Grouping and Sorting
DESCRIPTION: This ESQL query demonstrates the use of the VALUES function to group first names by their first letter. It also showcases the use of SUBSTRING, MV_SORT, and SORT functions. The query returns sorted groups of first names for each starting letter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/values.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| EVAL first_letter = SUBSTRING(first_name, 0, 1)
| STATS first_name = MV_SORT(VALUES(first_name)) BY first_letter
| SORT first_letter
```

----------------------------------------

TITLE: Indexing Geohex Document with Ingest Pipeline in Elasticsearch
DESCRIPTION: Indexes a document with a geohex (H3) value using the 'geohex2shape' pipeline, converting it to a WKT polygon.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/ingest-geo-grid-processor.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
PUT geocells/_doc/1?pipeline=geohex2shape
{
  "geocell": "811fbffffffffff"
}

GET geocells/_doc/1
```

----------------------------------------

TITLE: Basic T-test Aggregation Syntax in Elasticsearch
DESCRIPTION: Demonstrates the basic syntax for a t_test aggregation in Elasticsearch, showing how to specify the fields for comparison and the test type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-ttest-aggregation.md#2025-04-21_snippet_0

LANGUAGE: js
CODE:
```
{
  "t_test": {
    "a": "value_before",
    "b": "value_after",
    "type": "paired"
  }
}
```

----------------------------------------

TITLE: Appending Fields with DISSECT ESQL
DESCRIPTION: Demonstrates using the `+` modifier to append multiple matched parts into a single output field (`name`). The `APPEND_SEPARATOR` option specifies the character used to join the appended values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-process-data-with-dissect-grok.md#_snippet_4

LANGUAGE: ESQL
CODE:
```
ROW message="john jacob jingleheimer schmidt"
| DISSECT message """%{+name} %{+name} %{+name} %{+name}""" APPEND_SEPARATOR=" "
```

----------------------------------------

TITLE: Configure Default Store Type in elasticsearch.yml (YAML)
DESCRIPTION: This snippet demonstrates how to set the default index store type for all newly created indices in Elasticsearch by adding a configuration line to the `elasticsearch.yml` file. It specifies `smb_nio_fs` as the preferred store type, which is optimized for SMB file systems.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/store-smb-usage.md#_snippet_0

LANGUAGE: yaml
CODE:
```
index.store.type: smb_nio_fs
```

----------------------------------------

TITLE: Using Script Filters in Elasticsearch Intervals Query
DESCRIPTION: Example showing how to filter intervals based on their start position, end position, and internal gap count using a script filter in an intervals query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-intervals-query.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
POST _search
{
  "query": {
    "intervals" : {
      "my_text" : {
        "match" : {
          "query" : "hot porridge",
          "filter" : {
            "script" : {
              "source" : "interval.start > 10 && interval.end < 20 && interval.gaps == 0"
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Using Case-Insensitive Regex Flag in Painless
DESCRIPTION: Shows how to use the case-insensitive flag 'i' in a Painless regex pattern. This example checks if 'A' matches the pattern 'a' ignoring case.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-regexes.md#2025-04-21_snippet_1

LANGUAGE: painless
CODE:
```
'A' ==~ /a/i
```

----------------------------------------

TITLE: Creating Index with Histogram Field Mapping in Elasticsearch
DESCRIPTION: API request to create a new index with a histogram field for storing percentile data and a keyword field for histogram titles. The mapping defines the structure for storing pre-aggregated numerical data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/histogram.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings" : {
    "properties" : {
      "my_histogram" : {
        "type" : "histogram"
      },
      "my_text" : {
        "type" : "keyword"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring HTTP Tracer URI Patterns
DESCRIPTION: Configures which URIs will be traced using include and exclude patterns.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/networking-settings.md#2025-04-21_snippet_12

LANGUAGE: console
CODE:
```
PUT _cluster/settings
{
   "persistent" : {
      "http.tracer.include" : "*",
      "http.tracer.exclude" : ""
   }
}
```

----------------------------------------

TITLE: Sorting with Date Formatting in Elasticsearch
DESCRIPTION: Shows how to use the 'format' parameter to specify a date format for sort values of date fields in the search response.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/sort-search-results.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search
{
  "sort" : [
    { "post_date" : {"format": "strict_date_optional_time_nanos"}}
  ],
  "query" : {
    "term" : { "user" : "kimchy" }
  }
}
```

----------------------------------------

TITLE: SHOW TABLES with Remote Cluster Filtering
DESCRIPTION: Shows how to list tables from remote clusters using catalog wildcard patterns and table name filtering.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-show-tables.md#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
SHOW TABLES CATALOG 'my_*' LIKE 'test_emp%';
```

----------------------------------------

TITLE: Disabling Norms in Elasticsearch Using Update Mapping API
DESCRIPTION: This code demonstrates how to disable norms for a text field using the Elasticsearch update mapping API. This is useful for fields that are only used for filtering or aggregations to save disk space.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/norms.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001/_mapping
{
  "properties": {
    "title": {
      "type": "text",
      "norms": false
    }
  }
}
```

----------------------------------------

TITLE: Input Document Example for JSON Processor with Target Field
DESCRIPTION: Example of an input document containing a JSON string that will be processed by the JSON processor. The string_source field contains a serialized JSON object.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/json-processor.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
{
  "string_source": "{\"foo\": 2000}"
}
```

----------------------------------------

TITLE: Creating and Extracting Coordinates from a Geo Point in ESQL
DESCRIPTION: This ESQL snippet demonstrates how to create a geo_point using the TO_GEOPOINT function with a WKT string, and then extract its X and Y coordinates using ST_X and ST_Y functions. The result is stored in a row with three fields: the original point, and its X and Y coordinates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/st_x.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW point = TO_GEOPOINT("POINT(42.97109629958868 14.7552534006536)")
| EVAL x =  ST_X(point), y = ST_Y(point)
```

----------------------------------------

TITLE: EQL Sequence Search Result with Shared Field Values in Elasticsearch
DESCRIPTION: Shows the response format for an EQL sequence search with shared field values, including the 'join_keys' property containing the shared values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_10

LANGUAGE: console-result
CODE:
```
{
  ...
  "hits": ...,
    "sequences": [
      {
        "join_keys": [
          2012
        ],
        "events": ...
      }
    ]
  }
}
```

----------------------------------------

TITLE: Computing Median for Odd Number of Values in ESQL
DESCRIPTION: Example showing how MV_MEDIAN function calculates the median value for an array with odd number of elements. The function returns the middle value after sorting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_median.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=[3, 5, 1]
| EVAL median_a = MV_MEDIAN(a)
```

----------------------------------------

TITLE: Aggregating on _ignored Field to Find All Ignored Fields in Elasticsearch
DESCRIPTION: This query uses terms aggregation on the _ignored field to identify all fields that were ignored during indexing. This feature is available since Elasticsearch 8.15.0.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-ignored-field.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET _search
{
  "aggs": {
    "ignored_fields": {
      "terms": {
         "field": "_ignored"
      }
    }
  }
}
```

----------------------------------------

TITLE: Computing Median for Even Number of Values in ESQL
DESCRIPTION: Example demonstrating how MV_MEDIAN handles an array with even number of elements. For integer values, it takes the average of the middle two values and rounds down.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_median.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
ROW a=[3, 7, 1, 6]
| EVAL median_a = MV_MEDIAN(a)
```

----------------------------------------

TITLE: Indexing GeoJSON Envelope in Elasticsearch
DESCRIPTION: Example of indexing an Envelope geometry in Elasticsearch. Envelope represents a bounding rectangle defined by its upper-left and lower-right coordinates in the format [[minLon, maxLat], [maxLon, minLat]].
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-shape.md#2025-04-21_snippet_18

LANGUAGE: json
CODE:
```
POST /example/_doc
{
  "location" : {
    "type" : "envelope",
    "coordinates" : [ [100.0, 1.0], [101.0, 0.0] ]
  }
}
```

----------------------------------------

TITLE: Supported PIVOT with Explicit IN Values Elasticsearch SQL
DESCRIPTION: Example demonstrating the supported usage of the 'PIVOT' clause where the list of values to pivot on in the 'IN' clause is explicitly provided as literal values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-limitations.md#_snippet_11

LANGUAGE: SQL
CODE:
```
SELECT * FROM test_emp PIVOT (SUM(salary) FOR languages IN (1, 2))
```

----------------------------------------

TITLE: Using Min Aggregation with Histogram Fields in Elasticsearch
DESCRIPTION: This example shows how to use the min aggregation with histogram fields. It demonstrates index creation with a histogram field, data insertion, and querying to find the minimum value across all histogram fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-min-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT metrics_index
{
  "mappings": {
    "properties": {
      "latency_histo": { "type": "histogram" }
    }
  }
}

PUT metrics_index/_doc/1?refresh
{
  "network.name" : "net-1",
  "latency_histo" : {
      "values" : [0.1, 0.2, 0.3, 0.4, 0.5],
      "counts" : [3, 7, 23, 12, 6]
   }
}

PUT metrics_index/_doc/2?refresh
{
  "network.name" : "net-2",
  "latency_histo" : {
      "values" :  [0.1, 0.2, 0.3, 0.4, 0.5],
      "counts" : [8, 17, 8, 7, 6]
   }
}

POST /metrics_index/_search?size=0&filter_path=aggregations
{
  "aggs" : {
    "min_latency" : { "min" : { "field" : "latency_histo" } }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  "aggregations": {
    "min_latency": {
      "value": 0.1
    }
  }
}
```

----------------------------------------

TITLE: Debugging _source Context in Update API
DESCRIPTION: Demonstrates using Debug.explain to inspect the _source context object in an update script.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-debugging.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /hockey/_update/1
{
  "script": "Debug.explain(ctx._source)"
}
```

----------------------------------------

TITLE: Using REPLACE Function in ESQL for String Substitution
DESCRIPTION: This example demonstrates how to use the REPLACE function in ESQL to substitute one string with another. It creates a row with a string field, replaces 'World' with 'Universe', and then keeps only the modified string field in the result.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/replace.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW str = "Hello World"
| EVAL str = REPLACE(str, "World", "Universe")
| KEEP str
```

----------------------------------------

TITLE: Indexing WKT MultiLineString in Elasticsearch
DESCRIPTION: Example of indexing a WKT (Well-Known Text) MultiLineString in Elasticsearch. The 'location' field contains a string representation of multiple linestrings using the WKT format.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/shape.md#2025-04-21_snippet_13

LANGUAGE: json
CODE:
```
POST /example/_doc
{
  "location" : "MULTILINESTRING ((1002.0 200.0, 1003.0 200.0, 1003.0 300.0, 1002.0 300.0), (1000.0 100.0, 1001.0 100.0, 1001.0 100.0, 1000.0 100.0), (1000.2 0.2, 1000.8 100.2, 1000.8 100.8, 1000.2 100.8))"
}
```

----------------------------------------

TITLE: Example using VAR_POP on an expression in SQL
DESCRIPTION: Illustrates how to apply the VAR_POP function to an expression ('salary / 24.0') within an Elasticsearch SQL query. This calculates the population variance of values derived from the expression, presented with the corresponding minimum and maximum values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_58

LANGUAGE: SQL
CODE:
```
SELECT MIN(salary / 24.0) AS min, MAX(salary / 24.0) AS max, VAR_POP(salary / 24.0) AS varpop FROM emp;
```

----------------------------------------

TITLE: Assigning Array Values in ESQL
DESCRIPTION: Creates a row variable 'a' containing an array with two integer values [2, 1]. Demonstrates basic array literal syntax and variable assignment in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/row.csv-spec/multivalue.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = [2, 1]
```

----------------------------------------

TITLE: Indexing Suggestions Using Shorthand Array Syntax
DESCRIPTION: Example demonstrating the shorthand form for indexing multiple suggestion inputs as a simple array. This simplified syntax cannot specify weights for individual suggestions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_11

LANGUAGE: json
CODE:
```
PUT music/_doc/1?refresh
{
  "suggest" : [ "Nevermind", "Nirvana" ]
}
```

----------------------------------------

TITLE: Implementing Irish Analyzer in Elasticsearch
DESCRIPTION: Custom implementation of the built-in Irish analyzer with specialized hyphenation handling, elision filter, Irish-specific lowercase filter, Irish stopwords, keyword marker for exclusions from stemming, and Irish stemming.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_21

LANGUAGE: console
CODE:
```
PUT /irish_example
{
  "settings": {
    "analysis": {
      "filter": {
        "irish_hyphenation": {
          "type":       "stop",
          "stopwords":  [ "h", "n", "t" ],
          "ignore_case": true
        },
        "irish_elision": {
          "type":       "elision",
          "articles":   [ "d", "m", "b" ],
          "articles_case": true
        },
        "irish_stop": {
          "type":       "stop",
          "stopwords":  "_irish_" <1>
        },
        "irish_lowercase": {
          "type":       "lowercase",
          "language":   "irish"
        },
        "irish_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["sampla"] <2>
        },
        "irish_stemmer": {
          "type":       "stemmer",
          "language":   "irish"
        }
      },
      "analyzer": {
        "rebuilt_irish": {
          "tokenizer":  "standard",
          "filter": [
            "irish_hyphenation",
            "irish_elision",
            "irish_lowercase",
            "irish_stop",
            "irish_keywords",
            "irish_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Interpreting the Search Query Results in Elasticsearch
DESCRIPTION: The result block reflects the outcome of executing the Elasticsearch query, indicating the 'day-of-week' and 'number-of-actors' for each of the two returned documents. It presumes existing documents with appropriate fields indexed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs-mdx/painless/painless-field-context.mdx#2025-04-21_snippet_3

LANGUAGE: console-result
CODE:
```
{
  "took" : 68,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 11,
      "relation" : "eq"
    },
    "max_score" : 1.0,
    "hits" : [
      {
        "_index" : "seats",
        "_id" : "1",
        "_score" : 1.0,
        "fields" : {
          "day-of-week" : [
            "Thursday"
          ],
          "number-of-actors" : [
            4
          ]
        }
      },
      {
        "_index" : "seats",
        "_id" : "2",
        "_score" : 1.0,
        "fields" : {
          "day-of-week" : [
            "Thursday"
          ],
          "number-of-actors" : [
            1
          ]
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Low Precision Geohex Grid Query in Elasticsearch
DESCRIPTION: Example showing basic geohex grid aggregation with precision level 4. Creates an index for museums, adds sample location data, and performs a grid aggregation returning hexagonal cell buckets.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-geohexgrid-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /museums
{
  "mappings": {
    "properties": {
      "location": {
        "type": "geo_point"
      }
    }
  }
}

POST /museums/_bulk?refresh
{"index":{"_id":1}}
{"location": "POINT (4.912350 52.374081)", "name": "NEMO Science Museum"}
{"index":{"_id":2}}
{"location": "POINT (4.901618 52.369219)", "name": "Museum Het Rembrandthuis"}
{"index":{"_id":3}}
{"location": "POINT (4.914722 52.371667)", "name": "Nederlands Scheepvaartmuseum"}
{"index":{"_id":4}}
{"location": "POINT (4.405200 51.222900)", "name": "Letterenhuis"}
{"index":{"_id":5}}
{"location": "POINT (2.336389 48.861111)", "name": "Musée du Louvre"}
{"index":{"_id":6}}
{"location": "POINT (2.327000 48.860000)", "name": "Musée d'Orsay"}

POST /museums/_search?size=0
{
  "aggregations": {
    "large-grid": {
      "geohex_grid": {
        "field": "location",
        "precision": 4
      }
    }
  }
}
```

----------------------------------------

TITLE: Implementing Google Cloud Storage Repository in Java
DESCRIPTION: This code snippet defines an abstract class for Google Cloud Storage repositories in Elasticsearch. It includes methods for initializing the repository, handling bucket names, and managing blob names.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/plugins/discovery-ec2/licenses/slf4j-api-NOTICE.txt#2025-04-22_snippet_1

LANGUAGE: Java
CODE:
```
abstract class GoogleCloudStorageRepository extends BlobStoreRepository {
    private final String bucket;
    private final String clientName;
    private final String basePath;

    GoogleCloudStorageRepository(
        final RepositoryMetadata metadata,
        final NamedXContentRegistry namedXContentRegistry,
        final BlobStoreFactory blobStoreFactory,
        final String bucket,
        final String clientName,
        final String basePath
    ) {
        super(
            metadata,
            namedXContentRegistry,
            blobStoreFactory.create(metadata, GoogleCloudStorageBlobStore.TYPE, buildSettings(metadata, bucket, clientName))
        );
        this.bucket = bucket;
        this.clientName = clientName;
        this.basePath = basePath;
    }

    private static Map<String, String> buildSettings(RepositoryMetadata metadata, String bucket, String clientName) {
        final Map<String, String> settings = new HashMap<>(metadata.settings());
        settings.put(GoogleCloudStorageBlobStore.BUCKET, bucket);
        if (clientName != null) {
            settings.put(GoogleCloudStorageBlobStore.CLIENT_NAME, clientName);
        }
        return settings;
    }

    // package private for testing
    BlobPath basePath() {
        return new BlobPath().add(basePath);
    }

    @Override
    protected ByteSizeValue chunkSize() {
        return GoogleCloudStorageBlobStore.MAX_CHUNK_SIZE;
    }

    @Override
    public boolean hasAtomicOverwrites() {
        return true;
    }
}
```

----------------------------------------

TITLE: Setting Custom Node Attribute via Elasticsearch Command Line
DESCRIPTION: Assigns a custom attribute to an Elasticsearch node during startup using the command line with the `-E` flag and the `node.attr.<attribute-name>` syntax. Custom attributes like `rack_id` can be used for advanced shard allocation filtering and awareness.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/node-settings.md#_snippet_3

LANGUAGE: sh
CODE:
```
./bin/elasticsearch -Enode.attr.rack_id=rack_one
```

----------------------------------------

TITLE: Calculating Cube Root using CBRT Function in ESQL
DESCRIPTION: Demonstrates how to calculate the cube root of a numeric value using the CBRT function. The function accepts any numeric input and returns a double value representing the cube root. Returns null for infinite values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/cbrt.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW d = 1000.0
| EVAL c = CBRT(d)
```

----------------------------------------

TITLE: Converting Strings to Long Values Using TO_LONG in ESQL
DESCRIPTION: Example showing how TO_LONG function converts string values to long data type. The function successfully converts numeric strings with and without decimal points, while non-numeric strings result in null values with appropriate warning headers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_long.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW str1 = "2147483648", str2 = "2147483648.2", str3 = "foo"
| EVAL long1 = TO_LONG(str1), long2 = TO_LONG(str2), long3 = TO_LONG(str3)
```

----------------------------------------

TITLE: Creating CJK Custom Analyzer in Elasticsearch
DESCRIPTION: This snippet illustrates how to set up a custom analyzer for CJK text in Elasticsearch. It includes the use of various filters like CJK width and bigram filters alongside an English stop words filter. Parameters like 'stopwords' provide customization for text processing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_7

LANGUAGE: json
CODE:
```
PUT /cjk_example
{
  "settings": {
    "analysis": {
      "filter": {
        "english_stop": {
          "type":       "stop",
          "stopwords":  [ <1>
            "a", "and", "are", "as", "at", "be", "but", "by", "for",
            "if", "in", "into", "is", "it", "no", "not", "of", "on",
            "or", "s", "such", "t", "that", "the", "their", "then",
            "there", "these", "they", "this", "to", "was", "will",
            "with", "www"
          ]
        }
      },
      "analyzer": {
        "rebuilt_cjk": {
          "tokenizer":  "standard",
          "filter": [
            "cjk_width",
            "lowercase",
            "cjk_bigram",
            "english_stop"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Exclude Nodes by IP Range using Wildcard in Cluster Settings (Console)
DESCRIPTION: This snippet illustrates using a wildcard in the `cluster.routing.allocation.exclude._ip` setting to exclude all nodes within a specified IP range from shard allocation. The pattern `192.168.2.*` will match any node whose IP starts with `192.168.2.`. This provides a flexible way to manage shard allocation across a range of nodes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/cluster-level-shard-allocation-routing-settings.md#_snippet_2

LANGUAGE: console
CODE:
```
PUT _cluster/settings
{
  "persistent": {
    "cluster.routing.allocation.exclude._ip": "192.168.2.*"
  }
}
```

----------------------------------------

TITLE: Identifying High Numbers of Outbound User Connections with ESQL
DESCRIPTION: This query identifies users with a high number of outbound connections to non-private IP addresses. It enriches user data with LDAP information, calculates the count of unique destination IPs, and flags users with 100 or more connections for follow-up.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-examples.md#2025-04-21_snippet_3

LANGUAGE: esql
CODE:
```
FROM logs-*
| WHERE NOT CIDR_MATCH(destination.ip, "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16")
| STATS destcount = COUNT(destination.ip) BY user.name, host.name
| ENRICH ldap_lookup_new ON user.name
| WHERE group.name IS NOT NULL
| EVAL follow_up = CASE(destcount >= 100, "true","false")
| SORT destcount DESC
| KEEP destcount, host.name, user.name, group.name, follow_up
```

----------------------------------------

TITLE: Creating an Index with Synthetic Source for Text Fields with Keyword Sub-fields
DESCRIPTION: Example showing how to create an index with synthetic _source enabled and a text field that has a keyword sub-field. This configuration allows the text field to support synthetic _source functionality.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/text.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "text": {
        "type": "text",
        "fields": {
          "raw": {
            "type": "keyword"
          }
        }
      }
    }
  }
}
PUT idx/_doc/1
{
  "text": [
    "the quick brown fox",
    "the quick brown fox",
    "jumped over the lazy dog"
  ]
}
```

----------------------------------------

TITLE: Checking Reindex Data Stream Status (console)
DESCRIPTION: This snippet shows how to retrieve the status of a running or recently completed reindex data stream task for a specific data stream (`my-data-stream`). The status indicates progress, pending indices, and any errors encountered.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reindex-data-stream.md#_snippet_2

LANGUAGE: console
CODE:
```
GET /_migration/reindex/my-data-stream/_status
```

----------------------------------------

TITLE: Selecting SCORE Without Ordering by Score SQL
DESCRIPTION: Shows that the SCORE() function can be selected and displayed as part of the result set in Elasticsearch SQL even if the query's results are ordered by a different field. This allows examining relevance scores alongside other data without using score for sorting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-search.md#_snippet_10

LANGUAGE: SQL
CODE:
```
SELECT SCORE() AS score, name, release_date FROM library WHERE QUERY('dune') ORDER BY YEAR(release_date) DESC;
```

----------------------------------------

TITLE: Syntax of USER() Function (SQL)
DESCRIPTION: Provides the syntax for the `USER()` system function in Elasticsearch SQL. This function retrieves the username of the authenticated user executing the query. It takes no arguments and returns a string, which can be null if security is disabled.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-system.md#_snippet_2

LANGUAGE: sql
CODE:
```
USER()
```

----------------------------------------

TITLE: Boxplot Aggregation with Missing Value Handling in Elasticsearch
DESCRIPTION: This example illustrates how to use the missing parameter in a boxplot aggregation to specify a default value for documents missing the aggregated field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-boxplot-aggregation.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET latency/_search
{
  "size": 0,
  "aggs": {
    "grade_boxplot": {
      "boxplot": {
        "field": "grade",
        "missing": 10
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing a Query with Percolator Field
DESCRIPTION: Demonstrates how to index a match query using the percolator field type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/percolator.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/match_value
{
  "query": {
    "match": {
      "field": "value"
    }
  }
}
```

----------------------------------------

TITLE: Pattern Matching with Double Quote Escaping in ESQL
DESCRIPTION: Shows how to match literal asterisk character in a string using double quotes and double backslash escaping. The pattern 'foo \* bar' matches the exact string 'foo * bar'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/detailedDescription/like.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW message = "foo * bar"
| WHERE message LIKE "foo \\* bar"
```

----------------------------------------

TITLE: Simulation Response for Date Index Name Pipeline in Elasticsearch
DESCRIPTION: The simulation response shows the date math expression used for the _index field, revealing how Elasticsearch interprets time-based index patterns before resolving them to actual index names.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/date-index-name-processor.md#2025-04-21_snippet_4

LANGUAGE: console-result
CODE:
```
{
  "docs" : [
    {
      "doc" : {
        "_id" : "_id",
        "_index" : "<my-index-{2016-04-25||/M{yyyy-MM-dd|UTC}}>",
        "_version" : "-3",
        "_source" : {
          "date1" : "2016-04-25T12:02:01.789Z"
        },
        "_ingest" : {
          "timestamp" : "2016-11-08T19:43:03.850+0000"
        }
      }
    }
  ]
}
```

----------------------------------------

TITLE: Querying Elasticsearch Rank Evaluation API with Recall Metric
DESCRIPTION: This snippet demonstrates how to use the Elasticsearch Rank Evaluation API with the Recall at K metric. It sets the k value to 20 and the relevant rating threshold to 1.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-rank-eval.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET /my-index-000001/_rank_eval
{
  "requests": [
    {
      "id": "JFK query",
      "request": { "query": { "match_all": {} } },
      "ratings": []
    } ],
  "metric": {
    "recall": {
      "k": 20,
      "relevant_rating_threshold": 1
    }
  }
}
```

----------------------------------------

TITLE: Percolating Queries in a Filter Context for Performance
DESCRIPTION: This code optimizes the percolating query by using it within a 'constant_score' query wrapper, which improves performance by avoiding score calculations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-percolate-query.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search
{
  "query": {
    "constant_score": {
      "filter": {
        "percolate": {
          "field": "query",
          "document": {
            "message": "A new bonsai tree in the office"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Boxplot Aggregation with Runtime Field in Elasticsearch
DESCRIPTION: This snippet illustrates how to use a runtime field to convert milliseconds to seconds before performing a boxplot aggregation in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-boxplot-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET latency/_search
{
  "size": 0,
  "runtime_mappings": {
    "load_time.seconds": {
      "type": "long",
      "script": {
        "source": "emit(doc['load_time'].value / params.timeUnit)",
        "params": {
          "timeUnit": 1000
        }
      }
    }
  },
  "aggs": {
    "load_time_boxplot": {
      "boxplot": { "field": "load_time.seconds" }
    }
  }
}
```

----------------------------------------

TITLE: Aggregation Query with Normalized Terms
DESCRIPTION: Demonstrates how aggregations return normalized values when using a normalized keyword field. The query returns term buckets showing document counts for each normalized value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/normalizer.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET index/_search
{
  "size": 0,
  "aggs": {
    "foo_terms": {
      "terms": {
        "field": "foo"
      }
    }
  }
}
```

----------------------------------------

TITLE: Significant Text Aggregation with Duplicate Filter (Console)
DESCRIPTION: A console snippet showing an Elasticsearch `_search` request that includes a `significant_text` aggregation on the `content` field. The key parameter `filter_duplicate_text: true` is set, which instructs Elasticsearch to filter out sequences of identical tokens longer than 6 from the sampled documents before calculating term significance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-significanttext-aggregation.md#_snippet_4

LANGUAGE: console
CODE:
```
GET news/_search
{
  "query": {
    "match": {
      "content": "elasticsearch"
    }
  },
  "aggs": {
    "sample": {
      "sampler": {
        "shard_size": 100
      },
      "aggs": {
        "keywords": {
          "significant_text": {
            "field": "content",
            "filter_duplicate_text": true
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Basic Stemmer Filter Analysis in Elasticsearch
DESCRIPTION: Example showing token stemming without keyword marking, using the stemmer filter on the text 'fox running and jumping'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-keyword-marker-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer": "whitespace",
  "filter": [ "stemmer" ],
  "text": "fox running and jumping"
}
```

----------------------------------------

TITLE: Using LEAST Function in ESQL
DESCRIPTION: Demonstrates how to use the LEAST function to find the minimum value between two columns 'a' and 'b'. The function compares the values and returns the smaller one, storing the result in column 'l'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/least.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = 10, b = 20
| EVAL l = LEAST(a, b)
```

----------------------------------------

TITLE: Non-Object Data in Disabled Fields
DESCRIPTION: Shows how disabled fields can accept non-object data since field contents are not parsed. Demonstrates storing string data in a disabled object field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/enabled.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "session_data": {
        "type": "object",
        "enabled": false
      }
    }
  }
}

PUT my-index-000001/_doc/session_1
{
  "session_data": "foo bar"
}
```

----------------------------------------

TITLE: Handling Long Duplicates in Multivalued Fields (Console)
DESCRIPTION: Creates an index mapping the 'b' field as a `long` type, indexes documents with duplicate values in the multivalued 'b' field, and queries using ESQL. Demonstrates that the `long` field type (unlike `keyword`) preserves duplicate values during indexing, and ESQL returns these duplicates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-multivalued-fields.md#_snippet_2

LANGUAGE: console
CODE:
```
PUT /mv
{
  "mappings": {
    "properties": {
      "b": {"type": "long"}
    }
  }
}

POST /mv/_bulk?refresh
{ "index" : {} }
{ "a": 1, "b": [2, 2, 1] }
{ "index" : {} }
{ "a": 2, "b": [1, 1] }

POST /_query
{
  "query": "FROM mv | LIMIT 2"
}
```

LANGUAGE: json
CODE:
```
{
  "took": 28,
  "is_partial": false,
  "columns": [
    { "name": "a", "type": "long"},
    { "name": "b", "type": "long"}
  ],
  "values": [
    [1, [1, 2, 2]],
    [2,    [1, 1]]
  ]
}
```

----------------------------------------

TITLE: Extracting Maximum Y-Coordinate Using ST_YMAX in Elasticsearch ESQL
DESCRIPTION: This ESQL query demonstrates the usage of ST_YMAX along with other geospatial functions to extract the maximum y-coordinate (latitude) from airport city boundaries. It also calculates the minimum and maximum x and y coordinates of the envelope surrounding the city boundary.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/st_ymax.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airport_city_boundaries
| WHERE abbrev == "CPH"
| EVAL envelope = ST_ENVELOPE(city_boundary)
| EVAL xmin = ST_XMIN(envelope), xmax = ST_XMAX(envelope), ymin = ST_YMIN(envelope), ymax = ST_YMAX(envelope)
| KEEP abbrev, airport, xmin, xmax, ymin, ymax
```

----------------------------------------

TITLE: Fetch Documents with Custom Fields
DESCRIPTION: This example shows how to fetch documents that contain all custom fields for a specified Salesforce object using a SOQL query. The snippet addresses the query structure and expected array of results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-salesforce.md#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
[
  {
    "query": "SELECT FIELDS(CUSTOM) FROM Connector__c",
    "language": "SOQL"
  }
]
```

----------------------------------------

TITLE: ESQL Function Type Support Matrix Table
DESCRIPTION: A matrix table showing the result types when combining different numeric types (double, integer, long) in ESQL functions. The table defines that operations between any combination of these numeric types will result in a double type output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/types/weighted_avg.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| number | weight | result |
| --- | --- | --- |
| double | double | double |
| double | integer | double |
| double | long | double |
| integer | double | double |
| integer | integer | double |
| integer | long | double |
| long | double | double |
| long | integer | double |
| long | long | double |
```

----------------------------------------

TITLE: Phrase Suggester with Collate Query in Elasticsearch
DESCRIPTION: This example demonstrates using the phrase suggester with a collate query to prune suggestions based on document matches, including templating and custom parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
POST test/_search
{
  "suggest": {
    "text" : "noble prize",
    "simple_phrase" : {
      "phrase" : {
        "field" :  "title.trigram",
        "size" :   1,
        "direct_generator" : [ {
          "field" :            "title.trigram",
          "suggest_mode" :     "always",
          "min_word_length" :  1
        } ],
        "collate": {
          "query": {
            "source" : {
              "match": {
                "{{field_name}}" : "{{suggestion}}"
              }
            }
          },
          "params": {"field_name" : "title"},
          "prune": true
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing geo_shape data in Elasticsearch
DESCRIPTION: This snippet demonstrates how to index documents with `geo_shape` fields in Elasticsearch. It defines a mapping with a nested `pin.location` property of type `geo_shape` and then indexes a document with a polygon geo shape using coordinates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-distance-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /my_geoshapes
{
  "mappings": {
    "properties": {
      "pin": {
        "properties": {
          "location": {
            "type": "geo_shape"
          }
        }
      }
    }
  }
}

PUT /my_geoshapes/_doc/1
{
  "pin": {
    "location": {
      "type" : "polygon",
      "coordinates" : [[[13.0 ,51.5], [15.0, 51.5], [15.0, 54.0], [13.0, 54.0], [13.0 ,51.5]]]
    }
  }
}
```

----------------------------------------

TITLE: Demonstrating Identity Equals with Reference Types in Painless
DESCRIPTION: Shows how the identity equals operator works with reference types in Painless, including list creation and comparison.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_23

LANGUAGE: painless
CODE:
```
List a = new ArrayList(); 
List b = new ArrayList(); 
List c = a;               
boolean c = a === b;      
c = a === c;              
```

----------------------------------------

TITLE: Indexing Pre-aggregated Histogram Data with _doc_count in Elasticsearch
DESCRIPTION: This snippet shows how to index two documents containing pre-aggregated histogram data. Each document includes the _doc_count field to specify the actual number of documents represented by the pre-aggregated data (45 and 62 respectively).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-doc-count-field.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my_index/_doc/1
{
  "my_text" : "histogram_1",
  "my_histogram" : {
      "values" : [0.1, 0.2, 0.3, 0.4, 0.5],
      "counts" : [3, 7, 23, 12, 6]
   },
  "_doc_count": 45 <1>
}

PUT my_index/_doc/2
{
  "my_text" : "histogram_2",
  "my_histogram" : {
      "values" : [0.1, 0.25, 0.35, 0.4, 0.45, 0.5],
      "counts" : [8, 17, 8, 7, 6, 2]
   },
  "_doc_count": 62 <1>
}
```

----------------------------------------

TITLE: Configuring Transport Layer Tracer
DESCRIPTION: Sets the logging level for the transport layer tracer to TRACE.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/networking-settings.md#2025-04-21_snippet_16

LANGUAGE: console
CODE:
```
PUT _cluster/settings
{
   "persistent" : {
      "logger.org.elasticsearch.transport.TransportService.tracer" : "TRACE"
   }
}
```

----------------------------------------

TITLE: Indexing Enriched Geohex Document with Ingest Pipeline in Elasticsearch
DESCRIPTION: Indexes a document with a geohex (H3) value using the enriched 'geohex2shape' pipeline, adding additional fields like parent, children, and non-children tiles.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/ingest-geo-grid-processor.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
PUT geocells/_doc/1?pipeline=geohex2shape
{
  "geocell": "811fbffffffffff"
}

GET geocells/_doc/1
```

----------------------------------------

TITLE: Calculating Spatial Extent for Indian Airports
DESCRIPTION: Uses ST_EXTENT_AGG to compute the bounding box of airport locations in India by filtering and aggregating geometric data
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/st_extent_agg.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airports
| WHERE country == "India"
| STATS extent = ST_EXTENT_AGG(location)
```

----------------------------------------

TITLE: Calculating Cube Root in Elasticsearch SQL
DESCRIPTION: This example shows the `CBRT` function in Elasticsearch SQL. It computes the cube root of a numeric expression and returns a double numeric value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_1

LANGUAGE: SQL
CODE:
```
SELECT CBRT(-125.5);
```

----------------------------------------

TITLE: Using Triple-Quoted String Literals in ESQL
DESCRIPTION: Shows the convenience of using triple quotes (`"""`) to delimit string literals in ESQL, which simplifies including double quotes directly within the string without needing to escape them.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-syntax.md#_snippet_5

LANGUAGE: esql
CODE:
```
ROW name = """Indiana "Indy" Jones"""
```

----------------------------------------

TITLE: Retrieving Async Search Results in Elasticsearch
DESCRIPTION: Command to retrieve the results of an asynchronous search in Elasticsearch using the search ID.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-frequent-item-sets-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /_async_search/<id>
```

----------------------------------------

TITLE: Format DATE using FORMAT in Elasticsearch SQL
DESCRIPTION: Demonstrates formatting a DATE value into a string using the FORMAT function with a 'dd/MM/yyyy' pattern. The input is a casted date literal '2020-04-05'. The function returns the date as a formatted string.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_49

LANGUAGE: SQL
CODE:
```
SELECT FORMAT(CAST('2020-04-05' AS DATE), 'dd/MM/yyyy') AS "date";
```

----------------------------------------

TITLE: Filtered Significant Text Aggregation Results (JSON)
DESCRIPTION: Displays a JSON response snippet showing the `keywords` bucket from an Elasticsearch `significant_text` aggregation with `filter_duplicate_text` enabled. It demonstrates the improved results where noisy terms derived from repetitive content are removed, leaving more relevant terms like 'logstash' and 'kibana'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-significanttext-aggregation.md#_snippet_5

LANGUAGE: json
CODE:
```
{
  ...
  "aggregations": {
    "sample": {
      "doc_count": 35,
      "keywords": {
        "doc_count": 35,
        "buckets": [
          {
            "key": "elasticsearch",
            "doc_count": 22,
            "score": 11288.001166180758,
            "bg_count": 35
          },
          {
            "key": "logstash",
            "doc_count": 3,
            "score": 1836.648979591837,
            "bg_count": 4
          },
          {
            "key": "kibana",
            "doc_count": 3,
            "score": 1469.3020408163263,
            "bg_count": 5
          }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Formatting to Custom Format
DESCRIPTION: Shows how to format a ZonedDateTime to a custom string format using a custom DateTimeFormatter pattern.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_5

LANGUAGE: painless
CODE:
```
ZonedDateTime zdt =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 0, ZoneId.of('Z'));
DateTimeFormatter dtf = DateTimeFormatter.ofPattern(
        "'date:' yyyy/MM/dd 'time:' HH:mm:ss");
String datetime = zdt.format(dtf);
```

----------------------------------------

TITLE: Extended Stats with Missing Value Handling
DESCRIPTION: Shows how to handle missing values in extended stats aggregation by specifying a default value for documents missing the target field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-extendedstats-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /exams/_search
{
  "size": 0,
  "aggs": {
    "grades_stats": {
      "extended_stats": {
        "field": "grade",
        "missing": 0
      }
    }
  }
}
```

----------------------------------------

TITLE: Byte Conversion Method in Painless
DESCRIPTION: This method signature shows how to use the bytes processor to convert a human-readable byte value to its numeric equivalent in bytes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-ingest-processors-in-painless.md#2025-04-21_snippet_1

LANGUAGE: painless
CODE:
```
long bytes(String value);
```

----------------------------------------

TITLE: Using Do-While Loop for Guaranteed Execution in Painless
DESCRIPTION: Shows the implementation of a do-while loop in Painless, which ensures that the code block is executed at least once before checking the condition. It uses the context variable 'ctx._source' to access document fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-statements.md#2025-04-21_snippet_3

LANGUAGE: painless
CODE:
```
do {
  // do something
}
while (ctx._source.item < condition)
```

----------------------------------------

TITLE: URI Decomposition Method in Painless
DESCRIPTION: This method signature shows how to use the URI parts processor to decompose a URI string into its component parts, returning a map of key-value pairs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-ingest-processors-in-painless.md#2025-04-21_snippet_7

LANGUAGE: painless
CODE:
```
String uriParts(String value);
```

----------------------------------------

TITLE: Removing Elasticsearch HDFS Repository Plugin (Shell)
DESCRIPTION: This snippet provides the shell command to remove the repository-hdfs plugin using the Elasticsearch plugin manager. The node must be stopped before executing this command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/repository-hdfs.md#_snippet_1

LANGUAGE: Shell
CODE:
```
sudo bin/elasticsearch-plugin remove repository-hdfs
```

----------------------------------------

TITLE: Concatenation Function in Elasticsearch Script
DESCRIPTION: Utilizes script-based concatenation to merge `process_name` with fixed strings and checks if the result matches 'net.exe::foo::1'. Implements the `concat` method within a scripting context.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_15

LANGUAGE: Elasticsearch Painless
CODE:
```
"script":{"script":{"source":"InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalQlScriptUtils.nullSafeFilter(InternalEqlScriptUtils.seq(InternalEqlScriptUtils.concat([X0,params.v1,params.v2,params.v3]),params.v4)))" "params":{"v0":"process_name","v1":"::foo::","v2":null,"v3":1,"v4":"net.exe::foo::1"}
```

----------------------------------------

TITLE: Calculating Power Using POW Function in ESQL
DESCRIPTION: This snippet demonstrates how to use the POW function in ESQL to calculate the power of a base number raised to an exponent. It creates a row with base and exponent values, then uses the EVAL command to compute the result using POW. Note that if the result overflows a double, null will be returned.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/pow.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW base = 2.0, exponent = 2
| EVAL result = POW(base, exponent)
```

----------------------------------------

TITLE: SQL Query for LAST Aggregation
DESCRIPTION: This SQL query selects the last value of the date field from the test table.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_25

LANGUAGE: SQL
CODE:
```
SELECT LAST(date) FROM test;
```

----------------------------------------

TITLE: Defining Bucket Correlation Aggregation Syntax JSON
DESCRIPTION: This snippet shows the basic JSON structure for defining a bucket_correlation aggregation. It specifies the 'buckets_path' to the sibling aggregation's output and the 'function' to use, demonstrated here with 'count_correlation' and its 'indicator' parameters 'expectations' and 'doc_count'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-correlation-aggregation.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "bucket_correlation": {
    "buckets_path": "range_values>_count",
    "function": {
      "count_correlation": {
        "indicator": {
          "expectations": [...],
          "doc_count": 10000
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Running Self-Hosted Extraction Service with Docker
DESCRIPTION: Command to run the self-hosted content extraction service using Docker. This service handles extraction for files larger than 10MB for self-managed connectors.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-content-extraction.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ docker run \
  -p 8090:8090 \
  -it \
  --name extraction-service \
  docker.elastic.co/integrations/data-extraction-service:$EXTRACTION_SERVICE_VERSION
```

----------------------------------------

TITLE: Left Shift with Different Integer Types in Painless
DESCRIPTION: This snippet illustrates the left shift operator, showing how to shift bits of different integer types. It includes type promotion rules and error handling for non-integer types during the operation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_24

LANGUAGE: painless
CODE:
```
int i = 4 << 1;   <1>
long l = i << 2L; <2>
```

----------------------------------------

TITLE: Filtering Functions with Single Character Wildcard in Elasticsearch SQL
DESCRIPTION: Example of using SHOW FUNCTIONS with LIKE clause using underscore (_) wildcard to match exactly one character.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-show-functions.md#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
SHOW FUNCTIONS LIKE 'A__';

     name      |     type
---------------+---------------
AVG            |AGGREGATE
ABS            |SCALAR
```

----------------------------------------

TITLE: Determining Minimum Bounding Box using ESQL
DESCRIPTION: This ESQL snippet calculates the minimum bounding box for a city boundary using the ST_ENVELOPE function. It filters data from airport city boundaries where the abbreviation is 'CPH' and keeps specific fields including the calculated envelope. There are no required dependencies, but it assumes access to a dataset named 'airport_city_boundaries'. The input is a row from the dataset, and the output is the abbreviation, airport name, and the calculated envelope of the city boundary.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/st_envelope.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airport_city_boundaries
| WHERE abbrev == "CPH"
| EVAL envelope = ST_ENVELOPE(city_boundary)
| KEEP abbrev, airport, envelope
```

----------------------------------------

TITLE: Geohex Grid Query with Bounds Parameter
DESCRIPTION: Shows how to use the bounds parameter in geohex_grid aggregation to restrict cells to those intersecting with specified geographic bounds, independent of any geo_bounding_box query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-geohexgrid-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /museums/_search?size=0
{
  "aggregations": {
    "tiles-in-bounds": {
      "geohex_grid": {
        "field": "location",
        "precision": 12,
        "bounds": {
          "top_left": "POINT (4.9 52.4)",
          "bottom_right": "POINT (5.0 52.3)"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Output of Keep Words Filter Analysis in Elasticsearch
DESCRIPTION: This snippet shows the output produced by the Keep Words filter, containing only the tokens 'fox' and 'dog'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-keep-words-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
[ fox, dog ]
```

----------------------------------------

TITLE: Customizing HTML Strip Filter in Elasticsearch
DESCRIPTION: This example demonstrates how to create a custom HTML strip filter that skips the removal of specific HTML tags, in this case, the <b> tag.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-htmlstrip-charfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "keyword",
          "char_filter": [
            "my_custom_html_strip_char_filter"
          ]
        }
      },
      "char_filter": {
        "my_custom_html_strip_char_filter": {
          "type": "html_strip",
          "escaped_tags": [
            "b"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Calculate SINH in Elasticsearch SQL
DESCRIPTION: Provides an example of the `SINH` function in Elasticsearch SQL. It calculates the hyperbolic sine of a numeric expression and verifies the result against the definition (e^x - e^-x)/2 using the `POWER` and `E()` functions. Requires a numeric expression as input and outputs a double numeric value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_29

LANGUAGE: sql
CODE:
```
SELECT SINH(5), (POWER(E(), 5) - POWER(E(), -5)) / 2 AS "(e^5 - e^-5)/2";
```

----------------------------------------

TITLE: Advanced Sync Rules for Redis Connector - Fetching All SET Type Records
DESCRIPTION: JSON configuration for advanced sync rules to fetch all Redis database records where type is 'SET'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-redis.md#2025-04-21_snippet_8

LANGUAGE: js
CODE:
```
[
  {
    "database": 0,
    "key_pattern": "*",
    "type": "SET"
  }
]
```

----------------------------------------

TITLE: Authentication Failed Event Logging in Elasticsearch
DESCRIPTION: JSON structure for logging failed authentication attempts where credentials don't match known users.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
{"type":"audit", "timestamp":"2020-12-30T22:10:15,510+0200", "node.id":"0RMNyghkQYCc_gVd1G6tZQ", "event.type":"rest", "event.action":"authentication_failed", "user.name":"elastic", "origin.type":"rest", "origin.address":"[::1]:51504", "url.path":"/_security/user/user1", "url.query":"pretty", "request.method":"POST", "request.id":"POv8p_qeTl2tb5xoFl0HIg"}
```

----------------------------------------

TITLE: Indexing Databases with Title Filter - JSON Snippet - JavaScript
DESCRIPTION: This JSON snippet is used to filter and index every database in Notion where the title includes 'Demo Database'. This is crucial for creating sync rules related to database content.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-notion.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
{
  "searches": [
    {
      "filter": {
        "value": "database"
      },
      "query": "Demo Database"
    }
  ]
}
```

----------------------------------------

TITLE: Finding First First Name Without Explicit Ordering (FIRST)
DESCRIPTION: This query applies the FIRST function to the 'first_name' field in the 'emp' index without providing an ordering field. The result is the first non-null first name based on internal sorting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_14

LANGUAGE: SQL
CODE:
```
SELECT FIRST(first_name) FROM emp;
```

----------------------------------------

TITLE: Finding Last Value With Explicit Ordering (LAST) - Example 2
DESCRIPTION: This query finds the last non-null value in column 'a' from index 't', explicitly using column 'b' for ordering (descending). The result is the value of 'a' corresponding to the maximum 'b' (then potentially 'a' for ties).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_22

LANGUAGE: SQL
CODE:
```
SELECT LAST(a, b) FROM t
```

----------------------------------------

TITLE: Advanced Sync Rules for Redis Connector - Fetching All Records
DESCRIPTION: JSON configuration for advanced sync rules to fetch all Redis database records.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-redis.md#2025-04-21_snippet_7

LANGUAGE: js
CODE:
```
[
  {
    "database": 0,
    "key_pattern": "*"
  }
]
```

----------------------------------------

TITLE: Creating Password-Protected Certificate PEM - cert2 with Elasticsearch Certutil
DESCRIPTION: This snippet creates a second certificate PEM file named 'cert2', similar to cert1 but includes a password for additional security.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/libs/ssl-config/src/test/resources/certs/README.txt#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
# 5. Create "cert2" PEM (same as cert1, but with a password)
elasticsearch-certutil cert --pem --out cert2.zip --name cert2 --ip 127.0.0.1 --dns localhost --days 9999 --ca-key ca1/ca.key --ca-cert ca1/ca.crt --pass "c2-pass"
unzip cert2.zip
```

----------------------------------------

TITLE: Frequent Item Sets Aggregation with Filter for European Purchases
DESCRIPTION: Elasticsearch query using async search to find frequent item sets in e-commerce data, focusing on purchases made in Europe by applying a filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-frequent-item-sets-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /kibana_sample_data_ecommerce/_async_search
{
  "size": 0,
  "aggs": {
    "my_agg": {
      "frequent_item_sets": {
        "minimum_set_size": 3,
        "fields": [
          { "field": "category.keyword" },
          { "field": "geoip.city_name" }
        ],
        "size": 3,
        "filter": {
          "term": {
            "geoip.continent_name": "Europe"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Filtering Data with IS NOT NULL in ESQL
DESCRIPTION: This query demonstrates how to use the IS NOT NULL operator to filter employees based on whether they have been rehired. It then counts the number of matching employee numbers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/operators/is_not_null.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| WHERE is_rehired IS NOT NULL
| STATS COUNT(emp_no)
```

----------------------------------------

TITLE: Extracting Right Characters from Strings using ESQL RIGHT Function
DESCRIPTION: Demonstrates how to use the RIGHT function in ESQL to extract a specified number of characters from the right side of a string. This example keeps only the last_name field from the employees index and creates a new column 'right' containing the last 3 characters of each last name.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/right.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP last_name
| EVAL right = RIGHT(last_name, 3)
```

----------------------------------------

TITLE: Testing Elasticsearch API with cURL Commands
DESCRIPTION: Example cURL commands demonstrating how to reproduce bugs in Elasticsearch, including deleting an index, inserting a document, and executing a test query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
# delete the index
curl -XDELETE localhost:9200/test

# insert a document
curl -XPUT localhost:9200/test/test/1 -d '{
 "title": "test document"
}'

# this should return XXXX but instead returns YYY
curl ....
```

----------------------------------------

TITLE: Converting String to Version Value in ESQL
DESCRIPTION: The TO_VERSION function takes a string representation of a version number and converts it to a version value. This example demonstrates how to use the function to convert the string "1.2.3" to a version value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_version.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW v = TO_VERSION("1.2.3")
```

----------------------------------------

TITLE: Script Field with Unsigned Long Division Elasticsearch Console
DESCRIPTION: This search query uses a script field to demonstrate performing unsigned division on an `unsigned_long` value using the Painless scripting language and the `Long.divideUnsigned()` method.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/unsigned-long.md#_snippet_5

LANGUAGE: Console
CODE:
```
GET /my_index/_search
{
    "query": {
        "match_all" : {}
    },
    "script_fields": {
        "count10" : {
          "script": {
            "source": "Long.divideUnsigned(doc['my_counter'].value, 10)"
          }
        }
    }
}
```

----------------------------------------

TITLE: Mapping an annotated-text field in Elasticsearch
DESCRIPTION: Creates an index with a mapping for an annotated-text field named 'my_field'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/mapper-annotated-text-usage.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "my_field": {
        "type": "annotated_text"
      }
    }
  }
}
```

----------------------------------------

TITLE: Selecting Specific Buckets in buckets_path
DESCRIPTION: Example demonstrating how to select specific bucket keys from a multi-bucket aggregation using the bucket_script aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/pipeline.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /_search
{
  "aggs": {
    "sales_per_month": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "sale_type": {
          "terms": {
            "field": "type"
          },
          "aggs": {
            "sales": {
              "sum": {
                "field": "price"
              }
            }
          }
        },
        "hat_vs_bag_ratio": {
          "bucket_script": {
            "buckets_path": {
              "hats": "sale_type['hat']>sales",   <1>
              "bags": "sale_type['bag']>sales"    <1>
            },
            "script": "params.hats / params.bags"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Advanced Extraction Service Configuration in YAML
DESCRIPTION: Extended YAML configuration for the self-hosted extraction service, including optional fields for timeout, file pointers usage, stream chunk size, and shared volume directory.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-content-extraction.md#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
# data-extraction-service settings
extraction_service:
  host: http://localhost:8090
  timeout: 30
  use_file_pointers: false
  stream_chunk_size: 65536
  shared_volume_dir: '/app/files'
```

----------------------------------------

TITLE: Inner Hits Response Structure in Elasticsearch
DESCRIPTION: Illustrates the structure of the inner hits response in Elasticsearch search results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-inner-hits.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
"hits": [
     {
        "_index": ...,
        "_type": ...,
        "_id": ...,
        "inner_hits": {
           "<inner_hits_name>": {
              "hits": {
                 "total": ...,
                 "hits": [
                    {
                       "_id": ...,
                       ...
                    },
                    ...
                 ]
              }
           }
        },
        ...
     },
     ...
]
```

----------------------------------------

TITLE: Inefficient Suffix Wildcard Query for Percolator in Elasticsearch
DESCRIPTION: An example of an inefficient suffix wildcard query pattern that should be avoided with the percolator. This query uses a direct wildcard expression which is more expensive to evaluate.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/percolator.md#2025-04-21_snippet_11

LANGUAGE: js
CODE:
```
{
  "query": {
    "wildcard": {
      "my_field": "*xyz"
    }
  }
}
```

----------------------------------------

TITLE: Excluding Unigrams via Analyze API (Console)
DESCRIPTION: Illustrates how to use the `output_unigrams` parameter with the `shingle` filter via the `_analyze` API to exclude original single tokens from the output. When `output_unigrams` is set to `false`, only the generated shingles are included in the token stream.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-shingle-tokenfilter.md#_snippet_2

LANGUAGE: Console
CODE:
```
GET /_analyze
{
  "tokenizer": "whitespace",
  "filter": [
    {
      "type": "shingle",
      "min_shingle_size": 2,
      "max_shingle_size": 3,
      "output_unigrams": false
    }
  ],
  "text": "quick brown fox jumps"
}
```

----------------------------------------

TITLE: Creating Index Mapping with Term Vector for MLT Speedup (Elasticsearch Console)
DESCRIPTION: Defines a mapping for an index ('imdb'), specifying field types and explicitly enabling 'term_vector' storage for certain fields ('title', 'tags.raw'). This configuration helps optimize the analysis phase of the more_like_this query for these specific fields, potentially speeding up the process compared to relying solely on _source.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-mlt-query.md#_snippet_3

LANGUAGE: console
CODE:
```
PUT /imdb
{
  "mappings": {
    "properties": {
      "title": {
        "type": "text",
        "term_vector": "yes"
      },
      "description": {
        "type": "text"
      },
      "tags": {
        "type": "text",
        "fields": {
          "raw": {
            "type": "text",
            "analyzer": "keyword",
            "term_vector": "yes"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Data Frame Analytics Model in Elasticsearch Inference Processor (JSON)
DESCRIPTION: This snippet shows the configuration for using the `inference` processor with a Data Frame Analytics model. Instead of `input_output`, it uses `target_field` to specify the root path for the results (`FlightDelayMin_prediction_infer`). It also includes an optional `field_map` to explicitly map a document field (`your_field`) to a model's expected input field (`my_field`). An `inference_config` for regression is also included. Requires an existing deployed Data Frame Analytics model.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/inference-processor.md#_snippet_2

LANGUAGE: json
CODE:
```
{
  "inference": {
    "model_id": "model_deployment_for_inference",
    "target_field": "FlightDelayMin_prediction_infer",
    "field_map": {
      "your_field": "my_field"
    },
    "inference_config": { "regression": {} }
  }
}
```

----------------------------------------

TITLE: Rounding in ESQL
DESCRIPTION: This ESQL snippet demonstrates the use of the ROUND function to round a calculated value to one decimal place. It processes data from an `employees` table, using the KEEP clause to retain specific fields, then evaluates a new field `height_ft` that rounds the height multiplied by 3.281 to one decimal place. There are no additional dependencies required other than the data and table specified. The expected output includes the original and calculated field values in a transformed table format.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/round.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees\n| KEEP first_name, last_name, height\n| EVAL height_ft = ROUND(height * 3.281, 1)
```

----------------------------------------

TITLE: Type Support Matrix in Markdown Table Format
DESCRIPTION: Comprehensive table showing supported field types, query types, and their resulting boolean output in ESQL functions. The matrix covers primitive types, date formats, numeric types, text types, and special types like IP addresses and versions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/types/match_operator.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| field | query | result |
| --- | --- | --- |
| boolean | boolean | boolean |
| boolean | keyword | boolean |
| date | date | boolean |
| date | keyword | boolean |
| date_nanos | date_nanos | boolean |
| date_nanos | keyword | boolean |
| double | double | boolean |
| double | integer | boolean |
| double | keyword | boolean |
| double | long | boolean |
| integer | double | boolean |
| integer | integer | boolean |
| integer | keyword | boolean |
| integer | long | boolean |
| ip | ip | boolean |
| ip | keyword | boolean |
| keyword | keyword | boolean |
| long | double | boolean |
| long | integer | boolean |
| long | keyword | boolean |
| long | long | boolean |
| text | keyword | boolean |
| unsigned_long | double | boolean |
| unsigned_long | integer | boolean |
| unsigned_long | keyword | boolean |
| unsigned_long | long | boolean |
| unsigned_long | unsigned_long | boolean |
| version | keyword | boolean |
| version | version | boolean |
```

----------------------------------------

TITLE: Calculating Weighted Average with ESQL
DESCRIPTION: This ESQL query demonstrates the usage of the WEIGHTED_AVG function to calculate the weighted average of salary based on height for employees, grouped by languages. The result is rounded and sorted by languages.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/weighted_avg.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS w_avg = WEIGHTED_AVG(salary, height) BY languages
| EVAL w_avg = ROUND(w_avg)
| KEEP w_avg, languages
| SORT languages
```

----------------------------------------

TITLE: COMPLEMENT Operator Examples
DESCRIPTION: Examples showing the tilde operator which negates the shortest following pattern, available when the COMPLEMENT flag is enabled.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/regexp-syntax.md#2025-04-21_snippet_13

LANGUAGE: text
CODE:
```
a~bc   # matches 'adc' and 'aec' but not 'abc'
```

----------------------------------------

TITLE: Using Post-Increment Operator with 'def' Type in Painless
DESCRIPTION: This example illustrates how the post-increment operator '++' works with the 'def' type in Painless, showing implicit casting and type handling.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_1

LANGUAGE: painless
CODE:
```
def x = 1;
x++;
```

----------------------------------------

TITLE: Fixing MySQL Connector Config After Upgrade (Console)
DESCRIPTION: This console snippet demonstrates how to update an existing MySQL connector's configuration via the Elasticsearch API after upgrading from version 8.7 or earlier. This POST request adds missing required configuration fields to ensure the connector functions correctly with newer versions. Replace 'connector_id' with the actual ID of the connector.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-mysql.md#_snippet_3

LANGUAGE: console
CODE:
```
POST /.elastic-connectors/_update/connector_id
{
  "doc" : {
    "configuration": {
      "tables": {
        "type": "list",
        "value": "*"
      },
      "ssl_enabled": {
        "type": "bool",
        "value": false
      },
      "ssl_ca": {
        "type": "str",
        "value": ""
      },
      "fetch_size": {
        "type": "int",
        "value": 50
      },
      "retry_count": {
        "type": "int",
        "value": 3
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Single Input/Output Mapping in Elasticsearch Inference Processor (JSON)
DESCRIPTION: This snippet shows how to configure the `inference` processor in an Elasticsearch ingest pipeline. It specifies a `model_id` to use and uses the `input_output` array to map a single input field, `content`, to an output field, `content_embedding`, where the inference results will be stored. This configuration is typically used for NLP models and is incompatible with `target_field` and `field_map`. Requires an existing deployed model.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/inference-processor.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "inference": {
    "model_id": "model_deployment_for_inference",
    "input_output": [
        {
            "input_field": "content",
            "output_field": "content_embedding"
        }
    ]
  }
}
```

----------------------------------------

TITLE: Indexing Geotile Document with Ingest Pipeline in Elasticsearch
DESCRIPTION: Indexes a document with a geotile value using the 'geotile2shape' pipeline, converting it to a GeoJSON envelope.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/ingest-geo-grid-processor.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT geocells/_doc/1?pipeline=geotile2shape
{
  "geocell": "4/8/5"
}

GET geocells/_doc/1
```

----------------------------------------

TITLE: Calculate Difference in Weeks with DATE_DIFF - SQL
DESCRIPTION: Demonstrates DATE_DIFF calculating the difference in weeks between two datetimes, resulting in a negative value because the start date is later than the end date.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_32

LANGUAGE: SQL
CODE:
```
SELECT DATE_DIFF('week', '2019-09-04T11:22:33.000Z'::datetime, '2016-12-08T22:33:11.000Z'::datetime) AS "diffInWeeks";
```

----------------------------------------

TITLE: Converting Strings to Unsigned Long in ESQL
DESCRIPTION: Demonstrates converting string values to unsigned long using TO_UNSIGNED_LONG(), TO_ULONG(), and TO_UL() functions. Shows successful conversions of numeric strings and handling of invalid conversion attempts that result in null values with warning messages.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_unsigned_long.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW str1 = "2147483648", str2 = "2147483648.2", str3 = "foo"
| EVAL long1 = TO_UNSIGNED_LONG(str1), long2 = TO_ULONG(str2), long3 = TO_UL(str3)
```

----------------------------------------

TITLE: Using CURRENT_TIMESTAMP Function with Precision in Elasticsearch SQL
DESCRIPTION: This snippet demonstrates fetching the current date and time using the `CURRENT_TIMESTAMP()` function with a specified precision of 1 fractional digit for seconds in Elasticsearch SQL. It retrieves the timestamp when the query reached the server and aliases it as `result`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_22

LANGUAGE: SQL
CODE:
```
SELECT CURRENT_TIMESTAMP(1) AS result;
```

----------------------------------------

TITLE: Calculating Geographic Extent with ST_EXTENT_AGG in ESQL
DESCRIPTION: This ESQL query filters airports in India and uses ST_EXTENT_AGG to compute the bounding box of their locations. It demonstrates spatial aggregation in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/st_extent_agg.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airports
| WHERE country == "India"
| STATS extent = ST_EXTENT_AGG(location)
```

----------------------------------------

TITLE: Referencing Metrics with Dots in Names
DESCRIPTION: Example showing the syntax for referencing metrics that have dots in their names, such as percentiles (e.g., 99.9th percentile).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/pipeline.md#2025-04-21_snippet_6

LANGUAGE: js
CODE:
```
"buckets_path": "my_percentile[99.9]"
```

----------------------------------------

TITLE: Output Document After Wildcard Expansion
DESCRIPTION: Shows the result after expanding all top-level dotted fields with the wildcard option.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/dot-expand-processor.md#2025-04-21_snippet_9

LANGUAGE: js
CODE:
```
{
  "foo" : {
    "bar" : "value"
  },
  "baz" : {
    "qux" : "value"
  }
}
```

----------------------------------------

TITLE: Using GREATEST Function in ESQL
DESCRIPTION: This snippet demonstrates how to use the GREATEST function in ESQL to return the maximum value from multiple columns. It creates a row with two values and then evaluates the greatest of them.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/greatest.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = 10, b = 20
| EVAL g = GREATEST(a, b)
```

----------------------------------------

TITLE: Extracting Boundary Coordinates Using ESQL Spatial Functions
DESCRIPTION: This query extracts the minimum and maximum coordinates of Copenhagen's city boundary. It filters airport data for CPH, calculates an envelope around the city boundary, then extracts the minimum and maximum x and y coordinates using spatial functions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/st_ymax.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airport_city_boundaries
| WHERE abbrev == "CPH"
| EVAL envelope = ST_ENVELOPE(city_boundary)
| EVAL xmin = ST_XMIN(envelope), xmax = ST_XMAX(envelope), ymin = ST_YMIN(envelope), ymax = ST_YMAX(envelope)
| KEEP abbrev, airport, xmin, xmax, ymin, ymax
```

----------------------------------------

TITLE: Handling Missing Values in MAD Aggregation
DESCRIPTION: Demonstrates how to handle missing values in median absolute deviation calculation by specifying a default value for documents missing the target field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-median-absolute-deviation-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET reviews/_search
{
  "size": 0,
  "aggs": {
    "review_variability": {
      "median_absolute_deviation": {
        "field": "rating",
        "missing": 5
      }
    }
  }
}
```

----------------------------------------

TITLE: Metadata Access for Update Scripts
DESCRIPTION: Enables retrieval and modification of document metadata in Elasticsearch update scripts, including index, ID, routing, and version information
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.update_by_query.txt#2025-04-21_snippet_2

LANGUAGE: java
CODE:
```
class org.elasticsearch.script.Metadata {
    String getIndex()
    String getId()
    String getRouting()
    long getVersion()
    String getOp()
    void setOp(String)
}
```

----------------------------------------

TITLE: Documenting SPLIT Function Parameters in Elasticsearch SQL
DESCRIPTION: Describes the parameters for the SPLIT function in ESQL. It takes two parameters: a multivalue expression string and a delimiter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/parameters/mv_concat.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
**Parameters**

`string`
:   Multivalue expression.

`delim`
:   Delimiter.
```

----------------------------------------

TITLE: Using Double-Quoted String Literals in ESQL
DESCRIPTION: Demonstrates filtering data using a string literal enclosed in double quotes (`"`) in an ESQL WHERE clause. Double quotes within the string must be escaped with a backslash (`\"`).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-syntax.md#_snippet_4

LANGUAGE: esql
CODE:
```
// Filter by a string value
FROM index
| WHERE first_name == "Georgi"
```

----------------------------------------

TITLE: Categorize Text with Filters Console
DESCRIPTION: This example demonstrates using the `categorization_filters` parameter to exclude tokens matching a specified regular expression. The filter `\w+\_\d{3}` is used to remove tokens like 'foo_123' before categorization.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-categorize-text-aggregation.md#_snippet_1

LANGUAGE: console
CODE:
```
POST log-messages/_search?filter_path=aggregations
{
  "aggs": {
    "categories": {
      "categorize_text": {
        "field": "message",
        "categorization_filters": ["\\w+\_\\d{3}"]
      }
    }
  }
}
```

----------------------------------------

TITLE: Converting WKT strings to cartesian_shape using TO_CARTESIANSHAPE in ESQL
DESCRIPTION: This example demonstrates how to convert Well-Known Text (WKT) format strings into cartesian_shape values using the TO_CARTESIANSHAPE function. The snippet creates a row with an array of WKT strings, expands it, and then applies the conversion function to each value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_cartesianshape.md#2025-04-22_snippet_0

LANGUAGE: esql
CODE:
```
ROW wkt = ["POINT(4297.11 -1475.53)", "POLYGON ((3339584.72 1118889.97, 4452779.63 4865942.27, 2226389.81 4865942.27, 1113194.90 2273030.92, 3339584.72 1118889.97))"] 
| MV_EXPAND wkt
| EVAL geom = TO_CARTESIANSHAPE(wkt)
```

----------------------------------------

TITLE: Painless Script Variables and Return Types for Metric Aggregation Reduce Context
DESCRIPTION: Defines the available variables and return types for Painless scripts in metric aggregation reduce context. Scripts have access to read-only params Map for user parameters and states Map for values from prior combine/map scripts. Scripts can return List, Map, String or primitive values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-metric-agg-reduce-context.md#2025-04-21_snippet_0

LANGUAGE: painless
CODE:
```
// Available variables:
params: Map  // read-only user parameters
states: Map  // values from prior combine/map script

// Valid return types:
// - List
// - Map
// - String
// - primitive
```

----------------------------------------

TITLE: Histogram Aggregation Result on Histogram Field in Elasticsearch
DESCRIPTION: This snippet shows the expected output of running a histogram aggregation on a histogram field. The result includes buckets with keys representing intervals and doc_count representing the sum of counts for each interval.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-histogram-aggregation.md#2025-04-21_snippet_9

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "latency_buckets": {
      "buckets": [
        {
          "key": 0.0,
          "doc_count": 18
        },
        {
          "key": 5.0,
          "doc_count": 48
        },
        {
          "key": 10.0,
          "doc_count": 25
        },
        {
          "key": 15.0,
          "doc_count": 6
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Left Shift with the Def Type in Painless
DESCRIPTION: This snippet shows how to use the left shift operator with the def type in Painless, detailing the implicit casting that occurs and the resulting values after shifting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_25

LANGUAGE: painless
CODE:
```
def x = 4 << 2; <1>
def y = x << 1; <2>
```

----------------------------------------

TITLE: String Concatenation with Def in Painless
DESCRIPTION: Demonstrates string concatenation involving def types in Painless. Shows type switching where a variable can store multiple distinct data types through implicit type casting and concatenation. Requires initial variable definition.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-reference.md#2025-04-21_snippet_19

LANGUAGE: painless
CODE:
```
def d = 2;
d = "con" + d + "cat";
```

----------------------------------------

TITLE: Querying with Head Pipe in EQL
DESCRIPTION: Returns up to a specified number of events or sequences, starting with the earliest matches. This example returns up to three of the earliest powershell commands.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-pipe-ref.md#2025-04-21_snippet_0

LANGUAGE: eql
CODE:
```
process where process.name == "powershell.exe"
| head 3
```

----------------------------------------

TITLE: Examples of Numeric Literals - SQL
DESCRIPTION: Presents different formats for numeric literals supported in Elasticsearch SQL, such as integers, decimals, and scientific notation, demonstrating valid syntax for representing numeric constants.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-lexical-structure.md#_snippet_4

LANGUAGE: sql
CODE:
```
1969    -- integer notation
3.14    -- decimal notation
.1234   -- decimal notation starting with decimal point
4E5     -- scientific notation (with exponent marker)
1.2e-3  -- scientific notation with decimal point
```

----------------------------------------

TITLE: Output of ASCII Folding Filter Processing
DESCRIPTION: The tokens produced by the ASCII folding filter after processing the input text 'açaí à la carte'. The diacritical marks have been removed, converting 'açaí' to 'acai' and 'à' to 'a'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-asciifolding-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
[ acai, a, la, carte ]
```

----------------------------------------

TITLE: ESQL KEEP Query Example
DESCRIPTION: Demonstrates using the KEEP clause in ESQL to retain all existing columns (*) along with explicitly keeping the first_name column. This ensures the first_name column appears in the output even if it might be excluded by other operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/keepWildcardLowest.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP *, first_name
```

----------------------------------------

TITLE: Evaluating Sine Function in ESQL
DESCRIPTION: This snippet demonstrates how to use the SIN function in ESQL to calculate the sine of an angle. It defines a row with a field 'a' and then evaluates the SIN function on 'a', storing the result in a new field named 'sin'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/sin.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=1.8
| EVAL sin=SIN(a)
```

----------------------------------------

TITLE: Running the Connector Service
DESCRIPTION: Executes a Docker command to start the Elasticsearch connector service locally, mounting the configuration directory. Ensure Docker is installed and the service image `docker.elastic.co/integrations/elastic-connectors:9.0.0` is available.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/api-tutorial.md#2025-04-21_snippet_13

LANGUAGE: sh
CODE:
```
docker run \
-v "$HOME/connectors-config:/config" \
--rm \
--tty -i \
--network host \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Creating Third CA PEM - ca3 with Elasticsearch Certutil
DESCRIPTION: This snippet creates the third CA PEM file named 'ca3' using the Elasticsearch certutil command, maintaining the same validity and structure as previous CAs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/libs/ssl-config/src/test/resources/certs/README.txt#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
# 3. Create first CA PEM ("ca3")
elasticsearch-certutil ca --pem --out ca3.zip --days 9999 --ca-dn "CN=Test CA 3"
unzip ca3.zip 
mv ca ca3
```

----------------------------------------

TITLE: Creating Index and Inserting Shape Data for Cartesian-bounds Aggregation
DESCRIPTION: This snippet demonstrates creating an index with a Shape field and inserting sample place data for use with the cartesian-bounds aggregation on shapes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-cartesian-bounds-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT /places
{
  "mappings": {
    "properties": {
      "geometry": {
        "type": "shape"
      }
    }
  }
}

POST /places/_bulk?refresh
{"index":{"_id":1}}
{"name": "NEMO Science Museum", "geometry": "POINT(491.2350 5237.4081)" }
{"index":{"_id":2}}
{"name": "Sportpark De Weeren", "geometry": { "type": "Polygon", "coordinates": [ [ [ 496.5305328369141, 5239.347642069457 ], [ 496.6979026794433, 5239.1721758934835 ], [ 496.9425201416015, 5239.238958618537 ], [ 496.7944622039794, 5239.420969150824 ], [ 496.5305328369141, 5239.347642069457 ] ] ] } }
```

----------------------------------------

TITLE: Basic WHERE Syntax in ESQL
DESCRIPTION: The fundamental syntax for the WHERE command in ESQL that filters rows based on a boolean expression.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/where.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
WHERE expression
```

----------------------------------------

TITLE: Correct Painless Script Accessing Synthetic _source Field by Object Path (js)
DESCRIPTION: This snippet demonstrates a correct way to access a field (originally `foo.bar.baz`) from `_source` using Painless scripting when synthetic `_source` is active. It accesses the field by traversing the reconstructed nested object structure (`params._source['foo']['bar']['baz']`). This script is part of a larger search or update request payload.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-source-field.md#_snippet_8

LANGUAGE: js
CODE:
```
"script": { "source": """  emit(params._source['foo']['bar']['baz'])  """ }
```

----------------------------------------

TITLE: Equality Equals with Null in Painless
DESCRIPTION: Demonstrates the behavior of the equality equals operator when dealing with null values in Painless. It assigns null to two Object variables, compares them, then assigns a new Object to one variable, and compares them again, highlighting how '==' handles null comparisons.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_14

LANGUAGE: painless
CODE:
```
"Object a = null;       <1>
Object b = null;       <2>
boolean c = a == null; <3>
c = a == b;            <4>
b = new Object();      <5>
c = a == b;            <6>"
```

----------------------------------------

TITLE: Configuring Stemmer Override Token Filter with Rules Path in Elasticsearch
DESCRIPTION: This snippet demonstrates how to configure a custom analyzer with a stemmer override token filter using a rules path. The filter is applied before the Porter stemmer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stemmer-override-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "standard",
          "filter": [ "lowercase", "custom_stems", "porter_stem" ]
        }
      },
      "filter": {
        "custom_stems": {
          "type": "stemmer_override",
          "rules_path": "analysis/stemmer_override.txt"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating an API Key for the Connector - Python
DESCRIPTION: This snippet illustrates how to create an API key for the ServiceNow connector using the Elasticsearch API. It shows the necessary HTTP method and the structure of the request body to define the API key settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-servicenow.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /_security/api_key
{
  "name": "connector_name-connector-api-key",
  "role_descriptors": {
    "connector_name-connector-role": {
      "cluster": [
        "monitor",
        "manage_connector"
      ],
      "indices": [
        {
          "names": [
            "index_name",
            ".search-acl-filter-index_name",
            ".elastic-connectors*"
          ],
          "privileges": [
            "all"
          ],
          "allow_restricted_indices": false
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Using Comments Flag in Painless Regex
DESCRIPTION: Shows how to use the comments (extended) flag 'x' in a Painless regex pattern. This allows including comments within the regex pattern.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-regexes.md#2025-04-21_snippet_6

LANGUAGE: painless
CODE:
```
'a' ==~ /a #comment/x
```

----------------------------------------

TITLE: String Handling in EQL
DESCRIPTION: Examples of string usage in EQL, including escape characters and raw strings. Shows how to include special characters and Unicode in strings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_10

LANGUAGE: eql
CODE:
```
"hello world"
```

LANGUAGE: eql
CODE:
```
"example \r of \" escaped \n characters"
```

LANGUAGE: eql
CODE:
```
"""Raw string with a literal double quote " and blackslash \ included"""
```

LANGUAGE: eql
CODE:
```
"String containing \"\"\" three double quotes"
```

----------------------------------------

TITLE: Null Comparison Equality Not Equals Examples
DESCRIPTION: Demonstrates null-safe equality not equals operations, comparing null values with objects and other null values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_20

LANGUAGE: painless
CODE:
```
Object a = null;
Object b = null;
boolean c = a == null;
c = a == b;
b = new Object();
c = a == b;
```

----------------------------------------

TITLE: Docker Run Command for Azure Blob Storage Connector
DESCRIPTION: Command to run the Azure Blob Storage connector as a Docker container with mounted configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-azure-blob.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Calculating Logarithm with Base 2 in ESQL
DESCRIPTION: Demonstrates how to calculate the logarithm of a value (8.0) with a specified base (2.0) using the LOG function. The function returns a double value and handles special cases like zero, negative numbers, and base of one by returning null with a warning.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/log.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW base = 2.0, value = 8.0
| EVAL s = LOG(base, value)
```

----------------------------------------

TITLE: Configuring Box Connector in YAML
DESCRIPTION: YAML configuration for the Box connector, specifying Elasticsearch connection details and connector settings. It includes options for authentication and allows customization of default configurations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-box.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
# When connecting to your cloud deployment you should edit the host value
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: box
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA> # Optional. If not provided, the connector will use the elasticsearch.api_key instead
```

----------------------------------------

TITLE: Dropbox Advanced Sync Rules - File Category Filter
DESCRIPTION: Advanced sync rules example with file category filtering
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-dropbox.md#2025-04-21_snippet_8

LANGUAGE: js
CODE:
```
[
  {
    "query": "test",
    "options": {
      "file_categories": [
        {
          ".tag": "paper"
        },
        {
          ".tag": "png"
        }
      ]
    }
  }
]
```

----------------------------------------

TITLE: kNN Retriever Results for Vector Search in Elasticsearch
DESCRIPTION: The ranked results from the kNN retriever showing document IDs and scores based on vector similarity, before RRF ranking is applied.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reciprocal-rank-fusion.md#2025-04-21_snippet_7

LANGUAGE: console-result
CODE:
```
"hits" : [
    {
        "_index" : "example-index",
        "_id" : "3",                   <1>
        "_score" : 1.0,
        "_source" : {
            "integer" : 1,
            "vector" : [3],
            "text" : "rrf rrf rrf"
        }
    },
    {
        "_index" : "example-index",
        "_id" : "2",                   <2>
        "_score" : 0.5,
        "_source" : {
            "integer" : 2,
            "vector" : [4],
            "text" : "rrf rrf"
        }
    },
    {
        "_index" : "example-index",
        "_id" : "1",                   <3>
        "_score" : 0.2,
        "_source" : {
            "integer" : 1,
            "vector" : [5],
            "text" : "rrf"
        }
    },
    {
        "_index" : "example-index",
        "_id" : "5",                   <4>
        "_score" : 0.1,
        "_source" : {
            "integer" : 1,
            "vector" : [0]
        }
    }
]
```

----------------------------------------

TITLE: Elasticsearch Users Command Synopsis
DESCRIPTION: Shows the complete syntax for the elasticsearch-users command including all available operations like useradd, list, passwd, roles, and userdel.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/users-command.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
bin/elasticsearch-users
([useradd <username>] [-p <password>] [-r <roles>]) |
([list] <username>) |
([passwd <username>] [-p <password>]) |
([roles <username>] [-a <roles>] [-r <roles>]) |
([userdel <username>])
```

----------------------------------------

TITLE: WriteField Class for Document Fields Management
DESCRIPTION: This snippet introduces the org.elasticsearch.script.field.WriteField class, which encapsulates methods for managing document fields in Elasticsearch. It includes various methods for getting, setting, appending, and transforming field values, along with functions for checking existence and size of fields, allowing detailed manipulation of document data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.reindex.txt#2025-04-21_snippet_4

LANGUAGE: groovy
CODE:
```
class org.elasticsearch.script.field.WriteField {
    String getName()
    boolean exists()
    WriteField move(def)
    WriteField overwrite(def)
    void remove()
    WriteField set(def)
    WriteField append(def)
    boolean isEmpty()
    int size()
    Iterator iterator()
    def get(def)
    def get(int, def)
    boolean hasValue(Predicate)
    WriteField transform(Function)
    WriteField deduplicate()
    WriteField removeValuesIf(Predicate)
    WriteField removeValue(int)
    NestedDocument doc()
    NestedDocument doc(int)
    Iterable docs()
}
```

----------------------------------------

TITLE: Indexing and Querying Documents with Annotations in Elasticsearch
DESCRIPTION: This example demonstrates how to index a document with annotated text and structured fields, then query it with aggregations. The query searches for elastic stack components while the significant_terms aggregation identifies people associated with those components.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/mapper-annotated-text-tips.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
# Example documents
PUT my-index-000001/_doc/1
{
  "my_unstructured_text_field": "[Shay](%40kimchy) created elasticsearch",
  "my_twitter_handles": ["@kimchy"] <1>
}

GET my-index-000001/_search
{
  "query": {
    "query_string": {
        "query": "elasticsearch OR logstash OR kibana",<2>
        "default_field": "my_unstructured_text_field"
    }
  },
  "aggregations": {
  	"top_people" :{
  	    "significant_terms" : { <3>
	       "field" : "my_twitter_handles.keyword"
  	    }
  	}
  }
}
```

----------------------------------------

TITLE: RRF Score Calculation with rank_window_size=5
DESCRIPTION: Python-like example showing RRF score calculations when rank_window_size=5, allowing all documents from both queries to be considered. Demonstrates how the final ranking is determined and how pagination works with this configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reciprocal-rank-fusion.md#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
# doc   | queryA     | queryB       | score
_id: 1 =  1.0/(1+1)  + 1.0/(1+4)      = 0.7
_id: 2 =  1.0/(1+2)  + 1.0/(1+5)      = 0.5
_id: 3 =  1.0/(1+3)  + 1.0/(1+3)      = 0.5
_id: 4 =  1.0/(1+4)  + 1.0/(1+2)      = 0.533
_id: 5 =    0        + 1.0/(1+1)      = 0.5
```

----------------------------------------

TITLE: Running Docker Image for Elasticsearch Connectors
DESCRIPTION: This shell command runs a Docker image to deploy the Elastic Connector Service using a specific configuration file. The command mounts a local configuration directory, sets the Docker network, and specifies the image version. Prerequisites include Docker and access to the configuration file on the local path. The expected output is the running connector service, ready to ingest data. Ensure proper network settings in Docker.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-google-drive.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Removing Allocation Filter After Node Migration
DESCRIPTION: Elasticsearch API call to remove the allocation filter previously applied during the node migration process.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/path.md#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
PUT _cluster/settings
{
  "persistent": {
    "cluster.routing.allocation.exclude._name": null
  }
}
```

----------------------------------------

TITLE: Calculating Base-10 Logarithm in Elasticsearch SQL
DESCRIPTION: This example uses the `LOG10` function in Elasticsearch SQL to calculate the base 10 logarithm of a numeric expression. The output is a double numeric value. The snippet also shows how to calculate the base 10 logarithm using the `LOG` function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_8

LANGUAGE: SQL
CODE:
```
SELECT LOG10(5), LOG(5)/LOG(10);
```

----------------------------------------

TITLE: Extract Day of Week using DAY_OF_WEEK in Elasticsearch SQL
DESCRIPTION: Demonstrates using the DAY_OF_WEEK function to extract the day of the week from a TIMESTAMP literal '2018-02-19T10:23:27Z'. The function returns an integer (1-7) representing the day, with Sunday as 1.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_59

LANGUAGE: SQL
CODE:
```
SELECT DAY_OF_WEEK(CAST('2018-02-19T10:23:27Z' AS TIMESTAMP)) AS day;
```

----------------------------------------

TITLE: Range Aggregation on Histogram Fields in Elasticsearch
DESCRIPTION: Demonstrates range aggregation on pre-aggregated histogram fields for latency metrics across different networks.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-range-aggregation.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
PUT metrics_index
{
  "mappings": {
    "properties": {
      "network": {
        "properties": {
          "name": {
            "type": "keyword"
          }
        }
      },
      "latency_histo": {
         "type": "histogram"
      }
    }
  }
}

PUT metrics_index/_doc/1?refresh
{
  "network.name" : "net-1",
  "latency_histo" : {
      "values" : [1, 3, 8, 12, 15],
      "counts" : [3, 7, 23, 12, 6]
   }
}

PUT metrics_index/_doc/2?refresh
{
  "network.name" : "net-2",
  "latency_histo" : {
      "values" : [1, 6, 8, 12, 14],
      "counts" : [8, 17, 8, 7, 6]
   }
}

GET metrics_index/_search?size=0&filter_path=aggregations
{
  "aggs": {
    "latency_ranges": {
      "range": {
        "field": "latency_histo",
        "ranges": [
          {"to": 2},
          {"from": 2, "to": 3},
          {"from": 3, "to": 10},
          {"from": 10}
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Implementing Hungarian Analyzer in Elasticsearch
DESCRIPTION: Custom implementation of the built-in Hungarian analyzer with Hungarian stopwords, keyword marker for exclusions from stemming, and Hungarian stemming.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_19

LANGUAGE: console
CODE:
```
PUT /hungarian_example
{
  "settings": {
    "analysis": {
      "filter": {
        "hungarian_stop": {
          "type":       "stop",
          "stopwords":  "_hungarian_" <1>
        },
        "hungarian_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["példa"] <2>
        },
        "hungarian_stemmer": {
          "type":       "stemmer",
          "language":   "hungarian"
        }
      },
      "analyzer": {
        "rebuilt_hungarian": {
          "tokenizer":  "standard",
          "filter": [
            "lowercase",
            "hungarian_stop",
            "hungarian_keywords",
            "hungarian_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Multiplication with 'def' Type in Painless
DESCRIPTION: Demonstrates multiplication using the '*' operator with the 'def' type in Painless. The 'def' type infers the type dynamically, impacting the result and subsequent operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_15

LANGUAGE: painless
CODE:
```
def x = 5*4; <1>
def y = x*2; <2>
```

----------------------------------------

TITLE: Creating Indices with Different Date Types for Sorting in Elasticsearch
DESCRIPTION: Defines two indices with different date types (date and date_nanos) to demonstrate date resolution conversion in sorting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/sort-search-results.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
PUT /index_double
{
  "mappings": {
    "properties": {
      "field": { "type": "date" }
    }
  }
}
```

LANGUAGE: console
CODE:
```
PUT /index_long
{
  "mappings": {
    "properties": {
      "field": { "type": "date_nanos" }
    }
  }
}
```

----------------------------------------

TITLE: Elasticsearch Span Term Query with Term and Boost
DESCRIPTION: This snippet demonstrates another way to specify the term and boost for a `span_term` query. It is equivalent to the previous example, explicitly using the `term` field to define the search term `kimchy` and applying a boost of 2.0. This provides an alternative syntax for achieving the same boosting effect.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-span-term-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "span_term" : { "user.id" : { "term" : "kimchy", "boost" : 2.0 } }
  }
}
```

----------------------------------------

TITLE: Derivative with Unit Normalization
DESCRIPTION: Illustrates how to specify units for derivative calculations to get normalized values in different time units.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-derivative-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "size": 0,
  "aggs": {
    "sales_per_month": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "sales": {
          "sum": {
            "field": "price"
          }
        },
        "sales_deriv": {
          "derivative": {
            "buckets_path": "sales",
            "unit": "day"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Running Docker Image for S3 Connector - Shell
DESCRIPTION: This shell script runs the Docker image for the Amazon S3 connector using specified configuration files. It assumes the necessary Docker network configurations are completed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-s3.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Single-step Extension Creation with Download URL
DESCRIPTION: Creates and uploads an extension in a single step by providing a download_url in the initial POST request.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-custom-bundles.md#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
curl -XPOST \
-H "Authorization: ApiKey $EC_API_KEY" \
-H 'content-type:application/json' \
https://api.elastic-cloud.com/api/v1/deployments/extensions \
-d'{
  "name" : "anylysis_icu",
  "description" : "Helpful description",
  "extension_type" : "plugin",
  "version" : "7.13.2",
  "download_url": "https://artifacts.elastic.co/downloads/elasticsearch-plugins/analysis-icu/analysis-icu-7.13.2.zip"
}'
```

----------------------------------------

TITLE: Truncating Buckets Without Sorting in Elasticsearch
DESCRIPTION: Demonstrates how to use bucket sort aggregation to truncate result buckets without performing any sorting, returning only the second bucket.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-bucket-sort-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "size": 0,
  "aggs": {
    "sales_per_month": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "bucket_truncate": {
          "bucket_sort": {
            "from": 1,
            "size": 1
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Running Elasticsearch GeoIP Database Generation Tool
DESCRIPTION: Command to generate GeoIP database files from a source directory, with optional target directory specification.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/geoip-processor.md#2025-04-21_snippet_7

LANGUAGE: sh
CODE:
```
./bin/elasticsearch-geoip -s my/source/dir [-t target/directory]
```

----------------------------------------

TITLE: Demonstrating Pre-Decrement Operator in Painless
DESCRIPTION: This snippet shows the usage of the pre-decrement operator '--' with various numeric types in Painless, illustrating its behavior with type promotion and implicit casting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_6

LANGUAGE: painless
CODE:
```
short i = 0;
--i;
long j = 1;
long k;
k = --j;
```

----------------------------------------

TITLE: Converting Long Values to Integers in ESQL
DESCRIPTION: This snippet demonstrates how to use the TO_INTEGER function to convert long values to integers. It creates a row with long values and applies the TO_INTEGER function to each value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_integer.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW long = [5013792, 2147483647, 501379200000]
| EVAL int = TO_INTEGER(long)
```

----------------------------------------

TITLE: Calculating Percentile Rank on Derived Value in Elasticsearch SQL
DESCRIPTION: Shows how to calculate the percentile rank of the value 5000 within the monthly salary (salary/12) distribution, grouped by 'languages'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_44

LANGUAGE: SQL
CODE:
```
SELECT languages, PERCENTILE_RANK(salary/12, 5000) AS rank FROM emp GROUP BY languages;
```

----------------------------------------

TITLE: Installing Elasticsearch Mapper Murmur3 Plugin (sh)
DESCRIPTION: This shell command installs the `mapper-murmur3` plugin on an Elasticsearch node using the built-in plugin manager. This command requires `sudo` privileges and must be executed on every node in the cluster, followed by a restart of each node.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/mapper-murmur3.md#_snippet_0

LANGUAGE: sh
CODE:
```
sudo bin/elasticsearch-plugin install mapper-murmur3
```

----------------------------------------

TITLE: Extract Month of Year using MONTH_OF_YEAR in Elasticsearch SQL
DESCRIPTION: Demonstrates using the MONTH_OF_YEAR function to extract the month component from a TIMESTAMP literal '2018-02-19T10:23:27Z'. The function returns an integer representing the month.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_75

LANGUAGE: SQL
CODE:
```
SELECT MONTH_OF_YEAR(CAST('2018-02-19T10:23:27Z' AS TIMESTAMP)) AS month;
```

----------------------------------------

TITLE: Using Apostrophe Token Filter with Analyze API - Elasticsearch Console
DESCRIPTION: This snippet demonstrates the use of the analyze API to test the apostrophe token filter, which is designed to strip characters occurring after an apostrophe, including the apostrophe itself. The input text 'Istanbul'a veya Istanbul'dan' will be processed to yield the specified tokens. No dependencies beyond Elasticsearch itself are needed, and it expects a request in the proper format, outputting the array of tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-apostrophe-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer" : "standard",
  "filter" : ["apostrophe"],
  "text" : "Istanbul'a veya Istanbul'dan"
}
```

----------------------------------------

TITLE: Augmenting Existing Classes in Painless
DESCRIPTION: This snippet demonstrates how to augment an existing Java class, such as java.lang.String, by adding a new method that operates on the instance and returns an integer value. This showcases the extensibility of Painless scripting capabilities.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/plugins/examples/painless-whitelist/src/main/resources/org/elasticsearch/example/painlesswhitelist/example_whitelist.txt#2025-04-21_snippet_1

LANGUAGE: groovy
CODE:
```
class java.lang.String {
  # existing classes can be "augmented" to have additional methods, which take the object
  # to operate on as the first argument to a static method
  int org.elasticsearch.example.painlesswhitelist.ExampleWhitelistedClass toInt()
}
```

----------------------------------------

TITLE: Painless Script for X-Coordinate Filtering
DESCRIPTION: This Painless script filters documents based on the X-coordinate of a point field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_17

LANGUAGE: Painless
CODE:
```
InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.eq(InternalSqlScriptUtils.stX(InternalSqlScriptUtils.geoDocValue(doc,params.v0)),params.v1))
```

----------------------------------------

TITLE: Adding multi-architecture support with qemu-user-static
DESCRIPTION: Demonstrates how to use the multiarch/qemu-user-static image to add support for additional architectures like ARM64 in a Docker environment.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/distribution/docker/README.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
$ docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
```

----------------------------------------

TITLE: Fetching Standard Objects via SOQL and SOSL
DESCRIPTION: This snippet shows how to fetch documents for standard objects using both SOQL and SOSL queries. It demonstrates the input format for queries and specifies the expected return type as an array of documents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-salesforce.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
[
  {
    "query": "SELECT Account_Id, Address, Contact_Number FROM Account",
    "language": "SOQL"
  },
  {
    "query": "FIND {Alex Wilber} IN ALL FIELDS RETURNING Contact(LastModifiedDate, Name, Address)",
    "language": "SOSL"
  }
]
```

----------------------------------------

TITLE: Complex Pattern Matching for Functions in Elasticsearch SQL
DESCRIPTION: Example of using SHOW FUNCTIONS with a more complex LIKE pattern using wildcards to match functions containing 'DAY'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-show-functions.md#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
SHOW FUNCTIONS LIKE '%DAY%';

     name      |     type
---------------+---------------
DAY            |SCALAR
DAYNAME        |SCALAR
DAYOFMONTH     |SCALAR
DAYOFWEEK      |SCALAR
DAYOFYEAR      |SCALAR
DAY_NAME       |SCALAR
DAY_OF_MONTH   |SCALAR
DAY_OF_WEEK    |SCALAR
DAY_OF_YEAR    |SCALAR
HOUR_OF_DAY    |SCALAR
ISODAYOFWEEK   |SCALAR
ISO_DAY_OF_WEEK|SCALAR
MINUTE_OF_DAY  |SCALAR
TODAY          |SCALAR
```

----------------------------------------

TITLE: EC2 Discovery IAM Policy Configuration
DESCRIPTION: AWS IAM policy JSON configuration that grants necessary permissions for EC2 discovery functionality.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-ec2-usage.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "Statement": [
    {
      "Action": [
        "ec2:DescribeInstances"
      ],
      "Effect": "Allow",
      "Resource": [
        "*"
      ]
    }
  ],
  "Version": "2012-10-17"
}
```

----------------------------------------

TITLE: Demonstrating Unary Positive Operator in Painless
DESCRIPTION: This snippet demonstrates the use of the unary positive operator '+' with different numeric types in Painless, showing its identity preservation behavior.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_8

LANGUAGE: painless
CODE:
```
int x = +1;
long y = +x;
```

----------------------------------------

TITLE: Basic SHOW Command Syntax
DESCRIPTION: Demonstrates the basic syntax structure for the SHOW command in ESQL. The command is used to display system information.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/show.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
SHOW item
```

----------------------------------------

TITLE: Response from uploading extension file in Elasticsearch Service
DESCRIPTION: Sample JSON response after successfully uploading an extension file, containing the extension details including ID, URL, version, type, and name.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-plugins-guide.md#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
    "url": "repo://2286113333",
    "version": "8.4.3",
    "extension_type": "plugin",
    "id": "2286113333",
    "name": "custom-plugin"
}
```

----------------------------------------

TITLE: Calculating base-10 logarithm using LOG10 function in ESQL
DESCRIPTION: This snippet demonstrates how to use the LOG10 function in ESQL to calculate the base-10 logarithm of a numeric value. It creates a row with a double value and then applies the LOG10 function to it.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/log10.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW d = 1000.0
| EVAL s = LOG10(d)
```

----------------------------------------

TITLE: Network Community ID Methods in Painless
DESCRIPTION: These method signatures demonstrate how to use the community ID processor to compute the network community ID for network flow data, with and without a custom seed value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-ingest-processors-in-painless.md#2025-04-21_snippet_8

LANGUAGE: painless
CODE:
```
String communityId(String sourceIpAddrString, String destIpAddrString, Object ianaNumber, Object transport, Object sourcePort, Object destinationPort, Object icmpType, Object icmpCode, int seed)
String communityId(String sourceIpAddrString, String destIpAddrString, Object ianaNumber, Object transport, Object sourcePort, Object destinationPort, Object icmpType, Object icmpCode)
```

----------------------------------------

TITLE: Updating Elasticsearch Cluster Reindex Settings (Console)
DESCRIPTION: Uses the cluster settings API to modify persistent reindexing parameters. This example sets the `migrate.data_stream_reindex_max_request_per_second` to 10000 to increase the throttle. Requires appropriate cluster privileges.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reindex-data-stream.md#_snippet_5

LANGUAGE: console
CODE:
```
PUT /_cluster/settings
{
  "persistent" : {
    "migrate.data_stream_reindex_max_request_per_second" : 10000
  }
}
```

----------------------------------------

TITLE: Define DATE_FORMAT Function - SQL
DESCRIPTION: Defines the syntax for the DATE_FORMAT function, which formats a date, datetime, or time expression into a string based on a specified MySQL-compatible pattern.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_38

LANGUAGE: SQL
CODE:
```
DATE_FORMAT(
    date_exp/datetime_exp/time_exp, <1>
    string_exp) <2>
```

----------------------------------------

TITLE: Indexing Document with Wildcard Field (Console)
DESCRIPTION: This snippet shows how to index a single document into an index that contains a `wildcard` field. The document contains a sample string value for the `my_wildcard` field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/keyword.md#_snippet_7

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1
{
  "my_wildcard" : "This string can be quite lengthy"
}
```

----------------------------------------

TITLE: Including Specific Token Types in Elasticsearch Analysis
DESCRIPTION: Example of using the keep_types filter to retain only numeric tokens (<NUM>) from input text using the analyze API.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-keep-types-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET _analyze
{
  "tokenizer": "standard",
  "filter": [
    {
      "type": "keep_types",
      "types": [ "<NUM>" ]
    }
  ],
  "text": "1 quick fox 2 lazy dogs"
}
```

----------------------------------------

TITLE: Sampler Aggregation Query Example
DESCRIPTION: Demonstrates using sampler aggregation with significant_terms to focus analysis on top-scoring documents matching 'kibana' or 'javascript' tags.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-sampler-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST /stackoverflow/_search?size=0
{
  "query": {
    "query_string": {
      "query": "tags:kibana OR tags:javascript"
    }
  },
  "aggs": {
    "sample": {
      "sampler": {
        "shard_size": 200
      },
      "aggs": {
        "keywords": {
          "significant_terms": {
            "field": "tags",
            "exclude": [ "kibana", "javascript" ]
          }
        }
      }
    }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "sample": {
      "doc_count": 200,
      "keywords": {
        "doc_count": 200,
        "bg_count": 650,
        "buckets": [
          {
            "key": "elasticsearch",
            "doc_count": 150,
            "score": 1.078125,
            "bg_count": 200
          },
          {
            "key": "logstash",
            "doc_count": 50,
            "score": 0.5625,
            "bg_count": 50
          }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Adjusting Result Size in EQL Search for Elasticsearch
DESCRIPTION: This snippet shows how to use the 'size' parameter in an EQL search to adjust the number of returned results. In this example, it's set to return 50 hits.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /my-data-stream/_eql/search
{
  "query": """
    process where process.name == "regsvr32.exe"
  """,
  "size": 50
}
```

----------------------------------------

TITLE: Syntax for ISO_WEEK_OF_YEAR Function in Elasticsearch SQL
DESCRIPTION: Defines the syntax for the ISO_WEEK_OF_YEAR function (also aliased as ISOWEEKOFYEAR, ISOWEEK, IWOY, IW). It takes a date or datetime expression and extracts the week of the year according to ISO 8601 standard. Returns null if the input is null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_68

LANGUAGE: SQL
CODE:
```
ISO_WEEK_OF_YEAR(datetime_exp) <1>
```

----------------------------------------

TITLE: Using 'by' Keyword in EQL Sequences
DESCRIPTION: Shows how to use the 'by' keyword in EQL sequence queries to match events that share the same values. Includes examples of combining 'sequence by' with 'with maxspan'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_14

LANGUAGE: eql
CODE:
```
sequence
  [ file where file.extension == "exe" ] by user.name, file.path
  [ process where true ] by user.name, process.executable
```

LANGUAGE: eql
CODE:
```
sequence by user.name
  [ file where file.extension == "exe" ] by file.path
  [ process where true ] by process.executable
```

LANGUAGE: eql
CODE:
```
sequence by user.name with maxspan=15m
  [ file where file.extension == "exe" ]
  [ process where true ]
```

----------------------------------------

TITLE: Remove Elasticsearch Mapper Size Plugin (Shell)
DESCRIPTION: This command removes the `mapper-size` plugin using the Elasticsearch plugin manager. It requires superuser privileges (`sudo`). The node must be stopped before executing this command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/mapper-size.md#_snippet_1

LANGUAGE: Shell
CODE:
```
sudo bin/elasticsearch-plugin remove mapper-size
```

----------------------------------------

TITLE: Creating a Mapping with Shape Field Type in Elasticsearch
DESCRIPTION: This example creates an index with a mapping that defines a 'geometry' field as a shape type. The indexer uses single precision floats for vertex values with accuracy guaranteed to the same precision as float values (typically 1E-38).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/shape.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /example
{
  "mappings": {
    "properties": {
      "geometry": {
        "type": "shape"
      }
    }
  }
}
```

----------------------------------------

TITLE: Using Instanceof Operator with 'def' Type in Painless
DESCRIPTION: Demonstrates the usage of the instanceof operator with the 'def' type, showing implicit casting and type checking.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_9

LANGUAGE: painless
CODE:
```
def d = new ArrayList();       <1>
boolean a = d instanceof List; <2>
boolean b = d instanceof Map;  <3>
```

----------------------------------------

TITLE: Reference Types Equality Not Equals Examples
DESCRIPTION: Illustrates equality not equals operations with reference types, specifically comparing List objects and their contents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_19

LANGUAGE: painless
CODE:
```
List a = new ArrayList();
List b = new ArrayList();
a.add(1);
boolean c = a == b;
b.add(1);
c = a == b;
```

----------------------------------------

TITLE: Demonstrating List Access with Def Type in Painless
DESCRIPTION: Illustrates the use of the list access operator with the def type in Painless, showing implicit type casting and method calls on ArrayList instances.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-reference.md#2025-04-21_snippet_10

LANGUAGE: painless
CODE:
```
def d = new ArrayList(); 
d.add(1);                
d.add(2);                
d.add(3);                
d[0] = 2;                
d[1] = 5;                
def x = d[0] + d[1];     
def y = 1;               
def z = d[y];            
```

----------------------------------------

TITLE: Configuring HTTP Request Tracer Logger
DESCRIPTION: Sets the logging level for the HTTP request tracer to TRACE using cluster settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/networking-settings.md#2025-04-21_snippet_11

LANGUAGE: console
CODE:
```
PUT _cluster/settings
{
   "persistent" : {
      "logger.org.elasticsearch.http.HttpTracer" : "TRACE"
   }
}
```

----------------------------------------

TITLE: Example Response Structure for Change Point Aggregation (JSON)
DESCRIPTION: Shows the structure of the response returned by the `change_point` aggregation, detailing the detected bucket, its key and document count, aggregated values, and the type of change found along with statistical significance (`p_value`). It indicates a dip was found in this specific example.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-change-point-aggregation.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
    "change_points_avg" : {
      "bucket" : {
        "key" : "2023-04-29T00:00:00.000Z", <1>
        "doc_count" : 329, <2>
        "avg" : { <3>
          "value" : 4737.209726443769
        }
      },
      "type" : { <4>
        "dip" : {
          "p_value" : 3.8999455212466465e-10, <5>
          "change_point" : 41 <6>
        }
      }
    }
}
```

----------------------------------------

TITLE: Finding Maximum Value in Integer Array using MV_MAX in ESQL
DESCRIPTION: Example showing how to use MV_MAX function to find the maximum value in an integer array. Returns 5 as the maximum value from the array [3, 5, 1].
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_max.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=[3, 5, 1]
| EVAL max_a = MV_MAX(a)
```

----------------------------------------

TITLE: Extract ISO Week of Year using ISO_WEEK_OF_YEAR in Elasticsearch SQL
DESCRIPTION: Demonstrates using the ISO_WEEK_OF_YEAR function to extract the ISO 8601 week of the year from a TIMESTAMP literal '2018-02-19T10:23:27Z'. The function returns an integer representing the week number.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_69

LANGUAGE: SQL
CODE:
```
SELECT ISO_WEEK_OF_YEAR(CAST('2018-02-19T10:23:27Z' AS TIMESTAMP)) AS week;
```

----------------------------------------

TITLE: Computing MD5 Hash Using ESQL
DESCRIPTION: This query filters out connection error messages, computes the MD5 hash of the 'message' field, and keeps only the original message and its MD5 hash. It demonstrates the use of the md5() function in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/md5.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM sample_data
| WHERE message != "Connection error"
| EVAL md5 = md5(message)
| KEEP message, md5
```

----------------------------------------

TITLE: Enabling Stack Traces in Elasticsearch Error Responses
DESCRIPTION: Shows how to enable stack traces in Elasticsearch error responses using the error_trace parameter. By default, stack traces are not included, but setting error_trace=true will include them in the response.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/common-options.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /my-index-000001/_search?size=surprise_me
```

LANGUAGE: console
CODE:
```
POST /my-index-000001/_search?size=surprise_me&error_trace=true
```

----------------------------------------

TITLE: Output of Number Formatting Pattern Replace
DESCRIPTION: The resulting terms after applying the pattern_replace filter to format numbers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pattern-replace-charfilter.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
[ My, credit, card, is, 123_456_789 ]
```

----------------------------------------

TITLE: Basic Compound Assignment Syntax
DESCRIPTION: Shows the basic syntax structure for compound assignments where V is the variable/field and T is the type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-general.md#2025-04-21_snippet_4

LANGUAGE: painless
CODE:
```
V = (T)(V op expression);
```

----------------------------------------

TITLE: Rare Terms Aggregation with Custom Max Doc Count
DESCRIPTION: Demonstrates how to use the 'max_doc_count' parameter to adjust the threshold for what is considered a rare term.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-rare-terms-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /_search
{
  "aggs": {
    "genres": {
      "rare_terms": {
        "field": "genre",
        "max_doc_count": 2
      }
    }
  }
}
```

----------------------------------------

TITLE: Highlighting Example with Pattern Replace
DESCRIPTION: Example showing how pattern replacement affects highlighting in search results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pattern-replace-charfilter.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1?refresh
{
  "text": "The fooBarBaz method"
}

GET my-index-000001/_search
{
  "query": {
    "match": {
      "text": "bar"
    }
  },
  "highlight": {
    "fields": {
      "text": {}
    }
  }
}
```

----------------------------------------

TITLE: Docker Container Deployment
DESCRIPTION: Docker run command to deploy the Google Cloud Storage connector service with mounted configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-google-cloud.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Using GREATEST Function in ESQL
DESCRIPTION: Demonstrates using the GREATEST function to compare two integer values and return the larger one. The example creates a row with values a=10 and b=20, then uses GREATEST to find the maximum value between them.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/greatest.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = 10, b = 20
| EVAL g = GREATEST(a, b)
```

----------------------------------------

TITLE: Indexing Child Document
DESCRIPTION: Indexes a child document linked to a specific parent document using routing and join field configuration to establish the parent-child relationship.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-parent-id-query.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "text": "This is a child document.",
  "my-join-field": {
    "name": "my-child",
    "parent": "1"
  }
}
```

----------------------------------------

TITLE: Detailed Query Timing Breakdown in Elasticsearch Profile API
DESCRIPTION: Example of the breakdown component in Profile API results which provides detailed timing statistics about low-level Lucene execution. It shows various metrics like creation time, scoring time, and document matching operations in nanoseconds.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-profile.md#2025-04-21_snippet_4

LANGUAGE: console-result
CODE:
```
"breakdown": {
  "set_min_competitive_score_count": 0,
  "match_count": 5,
  "shallow_advance_count": 0,
  "set_min_competitive_score": 0,
  "next_doc": 39022,
  "match": 4456,
  "next_doc_count": 5,
  "score_count": 5,
  "compute_max_score_count": 0,
  "compute_max_score": 0,
  "advance": 84525,
  "advance_count": 1,
  "score": 37779,
  "build_scorer_count": 2,
  "create_weight": 4694895,
  "shallow_advance": 0,
  "create_weight_count": 1,
  "build_scorer": 7112295,
  "count_weight": 0,
  "count_weight_count": 0
}
```

----------------------------------------

TITLE: Enabling EC2 Discovery in Elasticsearch Configuration
DESCRIPTION: Basic YAML configuration to enable EC2 seed hosts provider in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-ec2-usage.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
discovery.seed_providers: ec2
```

----------------------------------------

TITLE: Using DOTALL Regex Flag in Painless
DESCRIPTION: Illustrates the use of the DOTALL (single line) flag 's' in a Painless regex pattern. This allows the dot to match newline characters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-regexes.md#2025-04-21_snippet_3

LANGUAGE: painless
CODE:
```
'a\nb\nc' =~ /.b./s
```

----------------------------------------

TITLE: INTERVAL Operator Examples
DESCRIPTION: Examples showing the angle bracket operators which match numeric ranges, available when the INTERVAL flag is enabled.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/regexp-syntax.md#2025-04-21_snippet_15

LANGUAGE: text
CODE:
```
foo<1-100>      # matches 'foo1', 'foo2' ... 'foo99', 'foo100'
foo<01-100>     # matches 'foo01', 'foo02' ... 'foo99', 'foo100'
```

----------------------------------------

TITLE: Clearing Scroll Contexts with Query Parameters in Elasticsearch
DESCRIPTION: This snippet shows how to clear multiple scroll contexts by passing scroll_ids as comma-separated query string parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/paginate-search-results.md#2025-04-21_snippet_14

LANGUAGE: console
CODE:
```
DELETE /_search/scroll/DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAD4WYm9laVYtZndUQlNsdDcwakFMNjU1QQ==,DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAAABFmtSWWRRWUJrU2o2ZExpSGJCVmQxYUEAAAAAAAAAAxZrUllkUVlCa1NqNmRMaUhiQlZkMWFBAAAAAAAAAAIWa1JZZFFZQmtTajZkTGlIYkJWZDFhQQAAAAAAAAAFFmtSWWRRWUJrU2o2ZExpSGJCVmQxYUEAAAAAAAAABBZrUllkUVlCa1NqNmRMaUhiQlZkMWFB
```

----------------------------------------

TITLE: Value Count Mode Rate Aggregation
DESCRIPTION: Shows how to use the value_count mode to calculate rates based on number of values rather than sum of values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-rate-aggregation.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET sales/_search
{
  "size": 0,
  "aggs": {
    "by_date": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "avg_number_of_sales_per_year": {
          "rate": {
            "field": "price",
            "unit": "year",
            "mode": "value_count"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Generating Version Field Cast Query in Elasticsearch
DESCRIPTION: This snippet shows how to create a query for version comparison with concatenation in Elasticsearch. It uses a script to concatenate the version field with a constant keyword before comparison.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_30

LANGUAGE: eql
CODE:
```
process where CONCAT(version, constant_keyword) > "2"
```

LANGUAGE: json
CODE:
```
{"script":{"source":"InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalEqlScriptUtils.multiValueDocValues(doc,params.v1,X1->InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.gt(InternalEqlScriptUtils.concat([X0,X1]),params.v2))))","params":{"v0":"version","v1":"constant_keyword","v2":"2"}}}
```

----------------------------------------

TITLE: Converting Multivalued Expression to Single Value using MV_FIRST in ESQL
DESCRIPTION: This example demonstrates how to use the MV_FIRST function in ESQL to extract the first value from a multivalued column. It uses the SPLIT function to create a multivalued column from a string, then applies MV_FIRST to get the first value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/mv_first.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a="foo;bar;baz"
| EVAL first_a = MV_FIRST(SPLIT(a, ";"))
```

----------------------------------------

TITLE: Setting Up Elasticsearch Connector Configuration
DESCRIPTION: Sets up the connector configuration in a YAML file. Replace the placeholders with actual Elasticsearch endpoint and API key before using.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/api-tutorial.md#2025-04-21_snippet_12

LANGUAGE: yaml
CODE:
```
elasticsearch.host: <ELASTICSEARCH_ENDPOINT> # Your Elasticsearch endpoint
elasticsearch.api_key: <ELASTICSEARCH_API_KEY> # Your Elasticsearch API key

connectors:
  - connector_id: "my-connector-id"
    service_type: "postgresql"
```

----------------------------------------

TITLE: Filtering Functions with Exact Match Pattern in Elasticsearch SQL
DESCRIPTION: Example of using SHOW FUNCTIONS with LIKE clause to find an exact function name match.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-show-functions.md#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
SHOW FUNCTIONS LIKE 'ABS';

     name      |     type
---------------+---------------
ABS            |SCALAR
```

----------------------------------------

TITLE: Primitive Types Equality Not Equals Examples
DESCRIPTION: Shows equality not equals operations between different primitive numeric types with implicit type promotion.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_18

LANGUAGE: painless
CODE:
```
int a = 1;
double b = 2.0;
boolean c = a != b;
c = 1 != a;
```

----------------------------------------

TITLE: Geo-bounds Aggregation Result for Geo_point Fields in Elasticsearch
DESCRIPTION: This snippet shows the response format for a geo-bounds aggregation on geo_point fields. It includes the top_left and bottom_right coordinates of the bounding box.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-geobounds-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "viewport": {
      "bounds": {
        "top_left": {
          "lat": 48.86111099738628,
          "lon": 2.3269999679178
        },
        "bottom_right": {
          "lat": 48.85999997612089,
          "lon": 2.3363889567553997
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Normalizing Exclusive Range Bounds in Synthetic Source (Console)
DESCRIPTION: Shows how ranges defined with exclusive bounds (`gt`, `lt`) are transformed into inclusive bounds (`gte`, `lte`) in the synthetic `_source`. The example indexes a `long_range` document with `gt` and `lt` and shows the bounds adjusted by one unit in the `gte`/`lte` format.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/range.md#_snippet_6

LANGUAGE: Console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "my_range": { "type": "long_range" }
    }
  }
}

PUT idx/_doc/1
{
  "my_range": {
    "gt": 200,
    "lt": 300
  }
}
```

LANGUAGE: JSON
CODE:
```
{
  "my_range": {
    "gte": 201,
    "lte": 299
  }
}
```

----------------------------------------

TITLE: Creating Custom Analyzer with Delimited Payload
DESCRIPTION: Creates an index with a custom analyzer that uses the delimited_payload filter with default settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-delimited-payload-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT delimited_payload
{
  "settings": {
    "analysis": {
      "analyzer": {
        "whitespace_delimited_payload": {
          "tokenizer": "whitespace",
          "filter": [ "delimited_payload" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Custom Analyzer with Keep Types Filter
DESCRIPTION: Example of creating a custom analyzer that uses a keep_types filter to retain only alphanumeric tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-keep-types-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT keep_types_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "standard",
          "filter": [ "extract_alpha" ]
        }
      },
      "filter": {
        "extract_alpha": {
          "type": "keep_types",
          "types": [ "<ALPHANUM>" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Histogram Aggregation with Keyed Response Format
DESCRIPTION: Example demonstrating how to request a keyed response format for histogram buckets. Instead of returning an array, the response contains a hash keyed by the bucket keys.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-histogram-aggregation.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "prices": {
      "histogram": {
        "field": "price",
        "interval": 50,
        "keyed": true
      }
    }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "prices": {
      "buckets": {
        "0.0": {
          "key": 0.0,
          "doc_count": 1
        },
        "50.0": {
          "key": 50.0,
          "doc_count": 1
        },
        "100.0": {
          "key": 100.0,
          "doc_count": 0
        },
        "150.0": {
          "key": 150.0,
          "doc_count": 2
        },
        "200.0": {
          "key": 200.0,
          "doc_count": 3
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Synthetic Source Boolean Field Example in Elasticsearch
DESCRIPTION: Shows how to configure and use synthetic _source with boolean fields, demonstrating how boolean arrays are automatically sorted in the output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/boolean.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "bool": { "type": "boolean" }
    }
  }
}
PUT idx/_doc/1
{
  "bool": [true, false, true, false]
}
```

----------------------------------------

TITLE: Indexing WKT MultiLineString in Elasticsearch
DESCRIPTION: Example of indexing a Well-Known Text (WKT) MultiLineString geometry in Elasticsearch. This represents the same geometry as the GeoJSON example but using WKT syntax.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-shape.md#2025-04-21_snippet_13

LANGUAGE: json
CODE:
```
POST /example/_doc
{
  "location" : "MULTILINESTRING ((102.0 2.0, 103.0 2.0, 103.0 3.0, 102.0 3.0), (100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8))"
}
```

----------------------------------------

TITLE: Case-Sensitive vs Case-Insensitive Functions
DESCRIPTION: Shows how to use the tilde operator to make functions case-insensitive.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_25

LANGUAGE: eql
CODE:
```
stringContains(process.name,".exe")  // Matches ".exe" but not ".EXE" or ".Exe"
stringContains~(process.name,".exe") // Matches ".exe", ".EXE", or ".Exe"
```

----------------------------------------

TITLE: Output Document After JSON Processing without Target Field
DESCRIPTION: Example of a document after the JSON processor has parsed and replaced the original field. The source_and_target field now contains the structured JSON object instead of the string.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/json-processor.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
{
  "source_and_target": {
    "foo": 2000
  }
}
```

----------------------------------------

TITLE: Calculate TAN in Elasticsearch SQL
DESCRIPTION: Demonstrates the use of the `TAN` function in Elasticsearch SQL. It calculates the tangent of an angle expressed in radians and confirms the result by computing SIN(angle)/COS(angle). The input is a numeric expression (in radians), and the output is a double numeric value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_30

LANGUAGE: sql
CODE:
```
SELECT TAN(RADIANS(66)) AS "TAN(66)", SIN(RADIANS(66))/COS(RADIANS(66)) AS "SIN(66)/COS(66)=TAN(66)";
```

----------------------------------------

TITLE: Finding Last Value Without Explicit Ordering (LAST) - Example 1
DESCRIPTION: This query finds the last non-null value in column 'a' from index 't' without specifying an explicit ordering field. The result depends on the internal sorting, typically descending.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_21

LANGUAGE: SQL
CODE:
```
SELECT LAST(a) FROM t
```

----------------------------------------

TITLE: Converting Radians to Degrees using TO_DEGREES in Elasticsearch SQL
DESCRIPTION: This snippet demonstrates how to use the TO_DEGREES function to convert an array of radian values to degrees. It creates a row with a 'rad' column containing radian values, then uses EVAL to apply the TO_DEGREES function and store the result in a new 'deg' column.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_degrees.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW rad = [1.57, 3.14, 4.71]
| EVAL deg = TO_DEGREES(rad)
```

----------------------------------------

TITLE: Default Date Format for date_nanos Field in Elasticsearch
DESCRIPTION: The default date format used for the date_nanos field type if no custom format is specified.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/date_nanos.md#2025-04-21_snippet_0

LANGUAGE: js
CODE:
```
"strict_date_optional_time_nanos||epoch_millis"
```

----------------------------------------

TITLE: Defining Parameters for ESQL Numeric Function
DESCRIPTION: Specifies the parameters for an ESQL numeric function. It defines a single parameter 'number' which is a numeric expression. The function returns null if the input is null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/parameters/cbrt.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
**Parameters**

`number`
:   Numeric expression. If `null`, the function returns `null`.
```

----------------------------------------

TITLE: Total Suffix Metric Example
DESCRIPTION: This snippet gives examples that incorporates the `total` suffix, combined with other time or storage metrics, which represent a monotonic increasing counter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/apm/NAMING.md#2025-04-21_snippet_7

LANGUAGE: none
CODE:
```
"es.process.jvm.collection.time.total"
```

LANGUAGE: none
CODE:
```
"es.indices.storage.write.total"
```

----------------------------------------

TITLE: Configuring TDigest Compression for MAD Calculation
DESCRIPTION: Demonstrates how to adjust the compression parameter to control the trade-off between accuracy and memory usage in the median absolute deviation calculation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-median-absolute-deviation-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET reviews/_search
{
  "size": 0,
  "aggs": {
    "review_variability": {
      "median_absolute_deviation": {
        "field": "rating",
        "compression": 100
      }
    }
  }
}
```

----------------------------------------

TITLE: Copying Complex Values with copy_from
DESCRIPTION: Example demonstrating how to copy complex values like arrays between fields using the copy_from parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/set-processor.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT _ingest/pipeline/set_bar
{
  "description": "sets the value of bar from the field foo",
  "processors": [
    {
      "set": {
        "field": "bar",
        "copy_from": "foo"
      }
    }
  ]
}

POST _ingest/pipeline/set_bar/_simulate
{
  "docs": [
    {
      "_source": {
        "foo": ["foo1", "foo2"]
      }
    }
  ]
}
```

----------------------------------------

TITLE: Configuring Hunspell Dictionary Directory Structure
DESCRIPTION: Shows the expected directory structure for Hunspell dictionaries under the Elasticsearch config directory
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-hunspell-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: txt
CODE:
```
- config
    |-- hunspell
    |    |-- en_US
    |    |    |-- en_US.dic
    |    |    |-- en_US.aff
```

----------------------------------------

TITLE: Response from smartcn_stop Token Filter Test
DESCRIPTION: This is the response from the analyze API when using the smartcn_with_stop analyzer on Chinese text. It shows the tokens produced after applying the smartcn tokenizer and smartcn_stop filter, with stopwords removed and remaining tokens stemmed by the porter stemmer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-smartcn_stop.md#2025-04-21_snippet_1

LANGUAGE: console-result
CODE:
```
{
  "tokens": [
    {
      "token": "哈",
      "start_offset": 0,
      "end_offset": 1,
      "type": "word",
      "position": 0
    },
    {
      "token": "喽",
      "start_offset": 1,
      "end_offset": 2,
      "type": "word",
      "position": 1
    },
    {
      "token": "我们",
      "start_offset": 3,
      "end_offset": 5,
      "type": "word",
      "position": 3
    },
    {
      "token": "是",
      "start_offset": 5,
      "end_offset": 6,
      "type": "word",
      "position": 4
    },
    {
      "token": "elast",
      "start_offset": 7,
      "end_offset": 14,
      "type": "word",
      "position": 5
    },
    {
      "token": "我们",
      "start_offset": 17,
      "end_offset": 19,
      "type": "word",
      "position": 6
    },
    {
      "token": "是",
      "start_offset": 19,
      "end_offset": 20,
      "type": "word",
      "position": 7
    },
    {
      "token": "elast",
      "start_offset": 21,
      "end_offset": 28,
      "type": "word",
      "position": 8
    },
    {
      "token": "elasticsearch",
      "start_offset": 35,
      "end_offset": 48,
      "type": "word",
      "position": 11
    },
    {
      "token": "kibana",
      "start_offset": 49,
      "end_offset": 55,
      "type": "word",
      "position": 13
    },
    {
      "token": "beat",
      "start_offset": 56,
      "end_offset": 61,
      "type": "word",
      "position": 15
    },
    {
      "token": "和",
      "start_offset": 62,
      "end_offset": 63,
      "type": "word",
      "position": 16
    },
    {
      "token": "logstash",
      "start_offset": 64,
      "end_offset": 72,
      "type": "word",
      "position": 17
    },
    {
      "token": "开发",
      "start_offset": 74,
      "end_offset": 76,
      "type": "word",
      "position": 20
    },
    {
      "token": "公司",
      "start_offset": 76,
      "end_offset": 78,
      "type": "word",
      "position": 21
    },
    {
      "token": "从",
      "start_offset": 79,
      "end_offset": 80,
      "type": "word",
      "position": 23
    },
    {
      "token": "股票",
      "start_offset": 80,
      "end_offset": 82,
      "type": "word",
      "position": 24
    },
    {
      "token": "行情",
      "start_offset": 82,
      "end_offset": 84,
      "type": "word",
      "position": 25
    },
    {
      "token": "到",
      "start_offset": 84,
      "end_offset": 85,
      "type": "word",
      "position": 26
    },
    {
      "token": "twitter",
      "start_offset": 86,
      "end_offset": 93,
      "type": "word",
      "position": 27
    },
    {
      "token": "消息",
      "start_offset": 94,
      "end_offset": 96,
      "type": "word",
      "position": 28
    },
    {
      "token": "流",
      "start_offset": 96,
      "end_offset": 97,
      "type": "word",
      "position": 29
    },
    {
      "token": "从",
      "start_offset": 98,
      "end_offset": 99,
      "type": "word",
      "position": 31
    },
    {
      "token": "apach",
      "start_offset": 100,
      "end_offset": 106,
      "type": "word",
      "position": 32
    },
    {
      "token": "日志",
      "start_offset": 107,
      "end_offset": 109,
      "type": "word",
      "position": 33
    },
    {
      "token": "到",
      "start_offset": 109,
      "end_offset": 110,
      "type": "word",
      "position": 34
    },
    {
      "token": "wordpress",
      "start_offset": 111,
      "end_offset": 120,
      "type": "word",
      "position": 35
    },
    {
      "token": "博",
      "start_offset": 121,
      "end_offset": 122,
      "type": "word",
      "position": 36
    },
    {
      "token": "文",
      "start_offset": 122,
      "end_offset": 123,
      "type": "word",
      "position": 37
    },
    {
      "token": "我们",
      "start_offset": 124,
      "end_offset": 126,
      "type": "word",
      "position": 39
    },
    {
      "token": "可以",
      "start_offset": 126,
      "end_offset": 128,
      "type": "word",
      "position": 40
    },
    {
      "token": "帮助",
      "start_offset": 128,
      "end_offset": 130,
      "type": "word",
      "position": 41
    },
    {
      "token": "人们",
      "start_offset": 130,
      "end_offset": 132,
      "type": "word",
      "position": 42
    },
    {
      "token": "体验",
      "start_offset": 132,
      "end_offset": 134,
      "type": "word",
      "position": 43
    },
    {
      "token": "搜索",
      "start_offset": 134,
      "end_offset": 136,
      "type": "word",
      "position": 44
    },
    {
      "token": "强大",
      "start_offset": 137,
      "end_offset": 139,
      "type": "word",
      "position": 46
    },
    {
      "token": "力量",
      "start_offset": 139,
      "end_offset": 141,
      "type": "word",
      "position": 47
    },
    {
      "token": "帮助",
      "start_offset": 142,
      "end_offset": 144,
      "type": "word",
      "position": 49
    },
    {
      "token": "他们",
      "start_offset": 144,
      "end_offset": 146,
      "type": "word",
      "position": 50
    },
    {
      "token": "以",
      "start_offset": 146,
      "end_offset": 147,
      "type": "word",
      "position": 51
    },
    {
      "token": "截然不同",
      "start_offset": 147,
      "end_offset": 151,
      "type": "word",
      "position": 52
    },
    {
      "token": "方式",
      "start_offset": 152,
      "end_offset": 154,
      "type": "word",
      "position": 54
    },
    {
      "token": "探索",
      "start_offset": 154,
      "end_offset": 156,
      "type": "word",
      "position": 55
    },
    {
      "token": "和",
      "start_offset": 156,
      "end_offset": 157,
      "type": "word",
      "position": 56
    },
    {
      "token": "分析",
      "start_offset": 157,
      "end_offset": 159,
      "type": "word",
      "position": 57
    },
    {
      "token": "数据",
      "start_offset": 159,
      "end_offset": 161,
      "type": "word",
      "position": 58
    }
  ]
}
```

----------------------------------------

TITLE: General Usage of the Painless Dynamic Type 'def'
DESCRIPTION: This example showcases the flexibility of the `def` dynamic type in Painless. It demonstrates how a single `def` variable can be assigned values of different underlying types (primitive integer, reference ArrayList), and how the type it represents can change dynamically.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-types.md#_snippet_5

LANGUAGE: painless
CODE:
```
def dp = 1;
def dr = new ArrayList();
dr = dp;
```

----------------------------------------

TITLE: Creating Outlook Connector via Elasticsearch API
DESCRIPTION: This snippet demonstrates how to create a new self-managed Outlook connector using the Elasticsearch Create connector API. It specifies the index name, connector name, and service type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-outlook.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT _connector/my-outlook-connector
{
  "index_name": "my-elasticsearch-index",
  "name": "Content synced from Outlook",
  "service_type": "outlook"
}
```

----------------------------------------

TITLE: Getting Elasticsearch System Indices Metadata (Console)
DESCRIPTION: This console command retrieves cluster state metadata and filters the results to show only information about system indices.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/api-conventions.md#_snippet_10

LANGUAGE: console
CODE:
```
GET _cluster/state/metadata?filter_path=metadata.indices.*.system
```

----------------------------------------

TITLE: Mixed Sort Types Example in Elasticsearch
DESCRIPTION: Demonstrates how top_metrics handles sorting when dealing with fields that have different types across indices. Shows the default behavior where floating point fields are sorted independently of whole numbers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-top-metrics.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
POST /test/_bulk?refresh
{"index": {"_index": "test1"}}
{"s": 1, "m": 3.1415}
{"index": {"_index": "test1"}}
{"s": 2, "m": 1}
{"index": {"_index": "test2"}}
{"s": 3.1, "m": 2.71828}
POST /test*/_search?filter_path=aggregations
{
  "aggs": {
    "tm": {
      "top_metrics": {
        "metrics": {"field": "m"},
        "sort": {"s": "asc"}
      }
    }
  }
}
```

LANGUAGE: js
CODE:
```
{
  "aggregations": {
    "tm": {
      "top": [ {"sort": [3.0999999046325684], "metrics": {"m": 2.718280076980591 } } ]
    }
  }
}
```

----------------------------------------

TITLE: Elasticsearch Node Tool Synopsis
DESCRIPTION: Command line syntax for the elasticsearch-node tool showing available commands and options.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/node-tool.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
bin/elasticsearch-node repurpose|unsafe-bootstrap|detach-cluster|override-version
  [-E <KeyValuePair>]
  [-h, --help] ([-s, --silent] | [-v, --verbose])
```

----------------------------------------

TITLE: Implementing Not Equals Operator in ESQL
DESCRIPTION: The not equals (!=) operator checks if two fields have different values. When used with multivalued fields, the result is null. This comparison operator follows standard SQL inequality semantics.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/layout/not_equals.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
field1 != field2
```

----------------------------------------

TITLE: Multiple Synonym Mapping Merging
DESCRIPTION: Shows how multiple synonym mapping entries are combined and interpreted during token processing
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/src/test/cluster/config/analysis/synonym.txt#2025-04-21_snippet_3

LANGUAGE: text
CODE:
```
foo => foo bar
foo => baz
# is equivalent to
foo => foo bar, baz
```

----------------------------------------

TITLE: Bitwise NOT Operator in Painless
DESCRIPTION: Demonstrates the bitwise NOT operator ('~') in Painless, which flips the bits of an integer type value. A 1-bit becomes a 0-bit, and a 0-bit becomes a 1-bit. The example shows how it works with byte, int, and long types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_12

LANGUAGE: painless
CODE:
```
byte b = 1;  <1>
int i = ~b;  <2>
long l = ~i; <3>
```

----------------------------------------

TITLE: Converting P12 to PEM format with OpenSSL
DESCRIPTION: This OpenSSL command converts the CA certificate from PKCS#12 format (`ca.p12`) to PEM format (`ca.pem`). It extracts the certificate information without the private key and requires the password used during the creation of the PKCS#12 file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/reindex/src/test/resources/org/elasticsearch/reindex/README.txt#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
openssl pkcs12 -info -in ./ca.p12 -nokeys -out ca.pem -passin "pass:ca-password"
```

----------------------------------------

TITLE: Implementing REST API Compatibility Headers for JSON Format
DESCRIPTION: Example of the Accept header required to request REST API compatibility when making a request without a body, specifying compatibility with Elasticsearch version 7.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/REST_API_COMPATIBILITY.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
Accept: "application/vnd.elasticsearch+json;compatible-with=7"
```

----------------------------------------

TITLE: Truncating Date to Year with DATE_TRUNC ESQL
DESCRIPTION: This ESQL query shows how to use the DATE_TRUNC function with a time span. It truncates the 'hire_date' field for each employee record to the beginning of the respective year.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-time-spans.md#_snippet_1

LANGUAGE: ESQL
CODE:
```
FROM employees
| KEEP first_name, last_name, hire_date
| EVAL year_hired = DATE_TRUNC(1 year, hire_date)
```

----------------------------------------

TITLE: Using Null-Safe Equality Operator (<=>) in Elasticsearch SQL
DESCRIPTION: Demonstrates the null-safe equality operator (<=>). Unlike '=', this operator considers NULL values comparable, returning TRUE if both sides are NULL and FALSE if one is NULL and the other is not. The examples show comparisons with and between NULLs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-operators.md#_snippet_1

LANGUAGE: sql
CODE:
```
SELECT 'elastic' <=> null AS "equals";
```

LANGUAGE: sql
CODE:
```
SELECT null <=> null AS "equals";
```

----------------------------------------

TITLE: Retrieving Source2 Access Control Document in Elasticsearch
DESCRIPTION: Example of an Elasticsearch GET request to retrieve the access control document for a user from the source2 index, similar to source1 but with different group membership.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-dls-e2e-guide.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
GET .search-acl-filter-source2
{
  "_id": "example.user@example.com",
  "identity": {
      "username": "example username",
      "email": "example.user@example.com"
   },
   "query": {
        "template": {
            "params": {
                "access_control": [
                    "example.user@example.com",
                    "source2-user-group"]
            }
        },
        "source": "..."
    }
}
```

----------------------------------------

TITLE: SHOW TABLES with Multi-target Syntax
DESCRIPTION: Shows how to use Elasticsearch multi-target syntax to exclude tables starting with 'l' while including all others.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-show-tables.md#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
SHOW TABLES "*,-l*";
```

----------------------------------------

TITLE: Boolean OR with Def Type
DESCRIPTION: Illustrates boolean OR operations using the dynamic 'def' type with implicit type casting and logical OR combinations
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_34

LANGUAGE: painless
CODE:
```
def x = false;     
def y = x || true; 
y = false;         
y = y || x;        
```

----------------------------------------

TITLE: Version-Specific JVM Configuration
DESCRIPTION: Demonstrates how to apply JVM settings to specific Java versions or version ranges.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/jvm-settings.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
17:-Xmx2g
```

LANGUAGE: text
CODE:
```
17-18:-Xmx2g
```

LANGUAGE: text
CODE:
```
17-:-Xmx2g
```

----------------------------------------

TITLE: Basic Remote Recovery Settings in Elasticsearch
DESCRIPTION: Controls the maximum bandwidth for remote recovery operations. This setting limits total inbound and outbound remote recovery traffic on each node. Default value is 40mb.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/cross-cluster-replication-settings.md#2025-04-21_snippet_0

LANGUAGE: properties
CODE:
```
ccr.indices.recovery.max_bytes_per_sec=40mb
```

----------------------------------------

TITLE: Mapping Aggregate Metric Double Field (my-index)
DESCRIPTION: Defines a mapping for an index named `my-index` specifying a field `my-agg-metric-field` of type `aggregate_metric_double`. It configures the metrics to store (`min`, `max`, `sum`, `value_count`) and sets `max` as the default metric.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/aggregate-metric-double.md#_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index
{
  "mappings": {
    "properties": {
      "my-agg-metric-field": {
        "type": "aggregate_metric_double",
        "metrics": [ "min", "max", "sum", "value_count" ],
        "default_metric": "max"
      }
    }
  }
}
```

----------------------------------------

TITLE: SHOW FUNCTIONS Basic Syntax in Elasticsearch SQL
DESCRIPTION: The basic syntax for the SHOW FUNCTIONS command in Elasticsearch SQL. The optional LIKE clause can be used with a pattern to filter the results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-show-functions.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
SHOW FUNCTIONS [LIKE pattern]?
```

----------------------------------------

TITLE: Rounding Date Values in Java for Date Histogram
DESCRIPTION: This snippet shows how date values are rounded down to the closest bucket in a date histogram aggregation using Java-like pseudocode.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-datehistogram-aggregation.md#2025-04-21_snippet_0

LANGUAGE: java
CODE:
```
bucket_key = Math.floor(value / interval) * interval
```

----------------------------------------

TITLE: Defining Boolean Index Mapping - Elasticsearch Console
DESCRIPTION: Defines an Elasticsearch index mapping named 'my-index-000001' with basic fields ('name', 'author' as keyword, 'release_date' as date, 'page_count' as double) suitable for subsequent runtime field examples related to book data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_5

LANGUAGE: Console
CODE:
```
PUT /my-index-000001
{
  "mappings": {
    "properties": {
      "name": {
        "type": "keyword"
      },
      "author": {
        "type": "keyword"
      },
      "release_date": {
        "type": "date"
      },
      "page_count": {
        "type": "double"
      }
    }
  }
}
```

----------------------------------------

TITLE: SHOW TABLES with Single Character Pattern
DESCRIPTION: Illustrates single character pattern matching using underscore wildcard.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-show-tables.md#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
SHOW TABLES LIKE 'em_';
```

----------------------------------------

TITLE: Configuring Sort Processor in Elasticsearch Ingest Pipeline (JSON)
DESCRIPTION: This snippet demonstrates how to configure the Sort processor in an Elasticsearch ingest pipeline. It shows the basic structure for sorting an array field in descending order.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/sort-processor.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "sort": {
    "field": "array_field_to_sort",
    "order": "desc"
  }
}
```

----------------------------------------

TITLE: Customizing Limit Token Filter in Elasticsearch
DESCRIPTION: Example of creating a custom limit token filter named 'five_token_limit' that keeps up to five tokens from the input text, and using it in a custom analyzer with whitespace tokenizer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-limit-token-count-tokenfilter.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT custom_limit_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "whitespace_five_token_limit": {
          "tokenizer": "whitespace",
          "filter": [ "five_token_limit" ]
        }
      },
      "filter": {
        "five_token_limit": {
          "type": "limit",
          "max_token_count": 5
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Executing Painless Geo-point Script - Elasticsearch Console
DESCRIPTION: Executes a Painless script in the 'geo_point_field' context. The script retrieves the 'lat' and 'lon' values from the document and emits them, which Elasticsearch formats as a GeoJSON 'Point' coordinate pair.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-api-examples.md#_snippet_13

LANGUAGE: Console
CODE:
```
POST /_scripts/painless/_execute
{
  "script": {
    "source": """
      emit(doc['lat'].value, doc['lon'].value);
    """
  },
  "context": "geo_point_field",
  "context_setup": {
    "index": "my-index-000001",
    "document": {
      "lat": 41.12,
      "lon": -71.34
    }
  }
}
```

----------------------------------------

TITLE: Selecting from frozen index SQL
DESCRIPTION: This SQL snippet shows how to use the `FROZEN` keyword within the `FROM` clause of a `SELECT` statement. This allows querying a specific index (`archive`) that is known or expected to be frozen. The query retrieves all columns from the specified frozen index, limited to one result row.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-index-frozen.md#_snippet_1

LANGUAGE: SQL
CODE:
```
SELECT * FROM FROZEN archive LIMIT 1;
```

----------------------------------------

TITLE: Updating _meta Field in Existing Elasticsearch Index Mapping
DESCRIPTION: This snippet shows how to update the _meta field of an existing Elasticsearch index using the update mapping API. It allows modification of custom metadata associated with the mapping type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-meta-field.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001/_mapping
{
  "_meta": {
    "class": "MyApp2::User3",
    "version": {
      "min": "1.3",
      "max": "1.5"
    }
  }
}
```

----------------------------------------

TITLE: Creating API Key for Confluence Connector
DESCRIPTION: API call to generate an API key with appropriate permissions for the Confluence connector
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-confluence.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /_security/api_key
{
  "name": "connector_name-connector-api-key",
  "role_descriptors": {
    "connector_name-connector-role": {
      "cluster": [
        "monitor",
        "manage_connector"
      ],
      "indices": [
        {
          "names": [
            "index_name",
            ".search-acl-filter-index_name",
            ".elastic-connectors*"
          ],
          "privileges": [
            "all"
          ],
          "allow_restricted_indices": false
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Bitwise And with Different Integer Types in Painless
DESCRIPTION: This snippet demonstrates the bitwise and operator in Painless, detailing how to apply the operator across different integer types while outlining the expected results and type promotions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_30

LANGUAGE: painless
CODE:
```
int i = 5 & 6;   <1>
long l = i & 5L; <2>
```

----------------------------------------

TITLE: Define DATETIME_FORMAT Function - SQL
DESCRIPTION: Defines the syntax for the DATETIME_FORMAT function, which formats a date, datetime, or time expression into a string based on a specified java.time.format.DateTimeFormatter pattern.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_44

LANGUAGE: SQL
CODE:
```
DATETIME_FORMAT(
    date_exp/datetime_exp/time_exp, <1>
    string_exp) <2>
```

----------------------------------------

TITLE: Boolean OR with Boolean Type
DESCRIPTION: Demonstrates boolean OR operations using explicit boolean type declarations and logical OR combinations
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_33

LANGUAGE: painless
CODE:
```
boolean x = false;     
boolean y = x || true; 
y = false;             
y = y || x;            
```

----------------------------------------

TITLE: Syntax for MINUTE_OF_HOUR Function in Elasticsearch SQL
DESCRIPTION: Defines the syntax for the MINUTE_OF_HOUR function (also aliased as MINUTE). It takes a date or datetime expression and extracts the minute component within the hour. Returns null if the input is null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_72

LANGUAGE: SQL
CODE:
```
MINUTE_OF_HOUR(datetime_exp) <1>
```

----------------------------------------

TITLE: Metadata Operations Class Definition
DESCRIPTION: Defines methods for accessing and modifying document metadata like index, id, routing, and version information.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.ingest.txt#2025-04-21_snippet_2

LANGUAGE: java
CODE:
```
class org.elasticsearch.script.Metadata {
    String getIndex()
    void setIndex(String)

    String getId()
    void setId(String)

    String getRouting()
    void setRouting(String)

    long getVersion()
    void setVersion(long)

    String getVersionType()
    void setVersionType(String)

    ZonedDateTime getNow()
}
```

----------------------------------------

TITLE: Downloading Sample Connector Configuration
DESCRIPTION: Provides a shell command using `curl` to download a sample `config.yml` file from the elastic/connectors GitHub repository to a local directory.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-ms-sql.md#_snippet_2

LANGUAGE: sh
CODE:
```
curl https://raw.githubusercontent.com/elastic/connectors/main/config.yml.example --output ~/connectors-config/config.yml
```

----------------------------------------

TITLE: Creating a PEM Certificate with a Specific Hostname
DESCRIPTION: Creates a certificate and key pair in PEM format with a specific hostname 'not.this.host' signed by the CA1 certificate. Used for testing SSL hostname verification.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/src/test/resources/org/elasticsearch/xpack/ssl/SSLErrorMessageTests/README.txt#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
new-pem-cert not-this-host.crt not-this-host.key "" "not-this-host" "ca1.p12" "ca1-p12-password" --dns not.this.host
```

----------------------------------------

TITLE: Defining Synonyms Using WordNet Format in Text
DESCRIPTION: Demonstrates the format of defining synonyms with WordNet, which include a unique numeric identifier and additional attributes for each synonym. This setup is suitable for applications requiring detailed grammatical information.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-synonym-graph-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
s(100000002,1,'come',v,1,0).
s(100000002,2,'advance',v,1,0).
s(100000002,3,'approach',v,1,0).
```

----------------------------------------

TITLE: Elasticsearch Typed Suggester Response
DESCRIPTION: Response showing how the typed_keys parameter modifies suggester names by prefixing them with their types (term# and phrase#). Includes detailed suggestion results with scores and options for both suggesters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_28

LANGUAGE: console-result
CODE:
```
{
  "suggest": {
    "term#my-first-suggester": [
      {
        "text": "some",
        "offset": 0,
        "length": 4,
        "options": []
      },
      {
        "text": "test",
        "offset": 5,
        "length": 4,
        "options": []
      },
      {
        "text": "mssage",
        "offset": 10,
        "length": 6,
        "options": [
          {
            "text": "message",
            "score": 0.8333333,
            "freq": 4
          }
        ]
      }
    ],
    "phrase#my-second-suggester": [
      {
        "text": "some test mssage",
        "offset": 0,
        "length": 16,
        "options": [
          {
            "text": "some test message",
            "score": 0.030227963
          }
        ]
      }
    ]
  },
  ...
}
```

----------------------------------------

TITLE: Setting Refresh Policy in Elasticsearch Bulk Request
DESCRIPTION: Method for setting the refresh policy on a bulk request to control when the changes made by the request are made visible to search.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/repository-gcs/licenses/google-http-NOTICE.txt#2025-04-21_snippet_1

LANGUAGE: java
CODE:
```
public BulkRequest setRefreshPolicy(String refreshPolicy) {
    this.refreshPolicy = refreshPolicy;
    return this;
}
```

----------------------------------------

TITLE: Connecting to GCE Instance
DESCRIPTION: Shows two methods to connect to the created GCE instance: using the Google Cloud SDK gcloud command or using standard SSH with the external IP address.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-long.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
# Connect using google cloud SDK
gcloud compute ssh myesnode1 --zone europe-west1-a

# Or using SSH with external IP address
ssh -i ~/.ssh/google_compute_engine 192.158.29.199
```

----------------------------------------

TITLE: Lowercase Conversion Method in Painless
DESCRIPTION: This method signature demonstrates the use of the lowercase processor to convert a string to its lowercase equivalent.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-ingest-processors-in-painless.md#2025-04-21_snippet_2

LANGUAGE: painless
CODE:
```
String lowercase(String value);
```

----------------------------------------

TITLE: Using MV_PSERIES_WEIGHTED_SUM Function in ESQL
DESCRIPTION: This example demonstrates how to use the MV_PSERIES_WEIGHTED_SUM function to calculate a weighted sum on an array using a p-series weighting factor of 1.5. The function is applied to an array of numeric values and returns a single double value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_pseries_weighted_sum.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = [70.0, 45.0, 21.0, 21.0, 21.0]
| EVAL sum = MV_PSERIES_WEIGHTED_SUM(a, 1.5)
| KEEP sum
```

----------------------------------------

TITLE: Searching Documents with Ignored Fields using exists Query in Elasticsearch
DESCRIPTION: This query uses the exists query to match all documents that have one or more fields that were ignored during indexing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-ignored-field.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET _search
{
  "query": {
    "exists": {
      "field": "_ignored"
    }
  }
}
```

----------------------------------------

TITLE: Testing COUNT Function in ESQL
DESCRIPTION: This SQL snippet demonstrates various test cases for the COUNT function in ESQL. It includes scenarios with different data types, NULL values, and empty sets to ensure proper functionality of the COUNT aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/count.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
SELECT COUNT(*);

SELECT COUNT(*) FROM (VALUES (1), (2), (3));

SELECT COUNT(1) FROM (VALUES (1), (2), (3));

SELECT COUNT(NULL) FROM (VALUES (1), (2), (3));

SELECT COUNT(a) FROM (VALUES (1), (2), (3)) AS t(a);

SELECT COUNT(a) FROM (VALUES (1), (NULL), (3)) AS t(a);

SELECT COUNT(a) FROM (VALUES (NULL), (NULL), (NULL)) AS t(a);

SELECT COUNT(*);

SELECT COUNT(1);
```

----------------------------------------

TITLE: Querying User Identity and Access Control for Source2 in Elasticsearch
DESCRIPTION: This snippet shows how to retrieve user identity and access control information for a specific user from the .search-acl-filter-source2 index in Elasticsearch. It includes the user's email, username, and access control groups.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-dls-overview.md#2025-04-21_snippet_5

LANGUAGE: js
CODE:
```
GET .search-acl-filter-source2
{
  "_id": "example.user@example.com",
  "identity": {
      "username": "example username",
      "email": "example.user@example.com"
   },
   "query": {
        "template": {
            "params": {
                "access_control": [
                    "example.user@example.com",
                    "source2-user-group"]
            }
        },
        "source": "..."
    }
}
```

----------------------------------------

TITLE: Verifying Docker buildx platform support
DESCRIPTION: Shows how to list supported build platforms with Docker buildx. This example demonstrates output when ARM64 support is missing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/distribution/docker/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
$ docker buildx ls
NAME/NODE DRIVER/ENDPOINT STATUS  BUILDKIT PLATFORMS
default * docker
  default default         running 20.10.21 linux/amd64, linux/386
```

----------------------------------------

TITLE: Building Elasticsearch Plugin with Gradle
DESCRIPTION: This shell command uses Gradle to build the Elasticsearch plugin, generating a JAR file and bundling it into a plugin ZIP file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/extend/example-text-analysis-plugin.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
gradle bundlePlugin
```

----------------------------------------

TITLE: Getting Geometry Latitude (ST_Y) in Elasticsearch SQL
DESCRIPTION: Describes the ST_Y function which takes a geometry and returns the latitude (Y coordinate) of its first point as a double. It returns null for null input. The example converts a WKT point string to geometry and extracts its latitude.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-geo.md#_snippet_4

LANGUAGE: SQL
CODE:
```
ST_Y(
    geometry <1>
)
```

LANGUAGE: SQL
CODE:
```
SELECT ST_Y(ST_WKTToSQL('POINT (10 20)')) y;
```

----------------------------------------

TITLE: String Stats with Runtime Field Script
DESCRIPTION: Demonstrates using string_stats aggregation with a runtime field that combines multiple field values using a script.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-string-stats-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /my-index-000001/_search
{
  "size": 0,
  "runtime_mappings": {
    "message_and_context": {
      "type": "keyword",
      "script": """
        emit(doc['message.keyword'].value + ' ' + doc['context.keyword'].value)
      """
    }
  },
  "aggs": {
    "message_stats": {
      "string_stats": { "field": "message_and_context" }
    }
  }
}
```

----------------------------------------

TITLE: Downloading Sample Configuration File using cURL
DESCRIPTION: Command to download the sample configuration file for Elasticsearch MongoDB connector deployment
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-mongodb.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
curl https://raw.githubusercontent.com/elastic/connectors/main/config.yml.example --output ~/connectors-config/config.yml
```

----------------------------------------

TITLE: Indexing Document with Aggregate Metric Data (Doc 1)
DESCRIPTION: Adds a document with ID `1` to the `stats-index`. The document contains pre-aggregated `min`, `max`, `sum`, and `value_count` values for the `agg_metric` field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/aggregate-metric-double.md#_snippet_2

LANGUAGE: console
CODE:
```
PUT stats-index/_doc/1
{
  "agg_metric": {
    "min": -302.50,
    "max": 702.30,
    "sum": 200.0,
    "value_count": 25
  }
}
```

----------------------------------------

TITLE: Downloading Gmail Connector Configuration File
DESCRIPTION: Shell command to download the sample configuration file for the Gmail connector.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-gmail.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
curl https://raw.githubusercontent.com/elastic/connectors/main/config.yml.example --output ~/connectors-config/config.yml
```

----------------------------------------

TITLE: Percolating an Existing Document
DESCRIPTION: Illustrates how to percolate an already indexed document using its '_id' and metadata. It showcases how to issue a search request to match the new document against stored queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-percolate-query.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
PUT /my-index-000001/_doc/2
{
  "message" : "A new bonsai tree in the office"
}
```

----------------------------------------

TITLE: Setting Up a Prebuilt ML Model in Elasticsearch
DESCRIPTION: API call to create a trained model alias for a prebuilt ML model. This example uses a language identification model, including model ID and alias for reference.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/repository-gcs/licenses/google-api-services-storage-NOTICE.txt#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
POST _ml/trained_models/lang_ident_model_1/trained_model_aliases/lang_ident_model
{
  "model_id": "lang_ident_model_1"
}
```

----------------------------------------

TITLE: Implementing YAML REST Test Suite in Java
DESCRIPTION: This Java class sets up the YAML REST test suite for the custom Elasticsearch plugin. It extends ESClientYamlSuiteTestCase to use Elasticsearch's test framework.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/extend/example-text-analysis-plugin.md#2025-04-21_snippet_5

LANGUAGE: java
CODE:
```
import com.carrotsearch.randomizedtesting.annotations.Name;
import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;
import org.elasticsearch.test.rest.yaml.ClientYamlTestCandidate;
import org.elasticsearch.test.rest.yaml.ESClientYamlSuiteTestCase;

public class HelloWorldPluginClientYamlTestSuiteIT extends ESClientYamlSuiteTestCase {

    public HelloWorldPluginClientYamlTestSuiteIT(
            @Name("yaml") ClientYamlTestCandidate testCandidate
    ) {
        super(testCandidate);
    }

    @ParametersFactory
    public static Iterable<Object[]> parameters() throws Exception {
        return ESClientYamlSuiteTestCase.createParameters();
    }
}
```

----------------------------------------

TITLE: Defining French Stop Words
DESCRIPTION: Defines French stop words for analyzing text in Elasticsearch, linking to the related Lucene file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_18

LANGUAGE: markdown
CODE:
```
`_french_`
:   [French stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/snowball/french_stop.txt)
```

----------------------------------------

TITLE: Configuring Nori Number Token Filter in Elasticsearch
DESCRIPTION: This example demonstrates how to configure an analyzer with nori_number token filter. The setup includes a tokenizer with discard_punctuation set to false and a part_of_speech filter to handle special tokens. The analyzer is then applied to Korean text containing numbers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-nori-number.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT nori_sample
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "my_analyzer": {
            "tokenizer": "tokenizer_discard_puncuation_false",
            "filter": [
              "part_of_speech_stop_sp", "nori_number"
            ]
          }
        },
        "tokenizer": {
          "tokenizer_discard_puncuation_false": {
            "type": "nori_tokenizer",
            "discard_punctuation": "false"
          }
        },
        "filter": {
            "part_of_speech_stop_sp": {
                "type": "nori_part_of_speech",
                "stoptags": ["SP"]
            }
        }
      }
    }
  }
}

GET nori_sample/_analyze
{
  "analyzer": "my_analyzer",
  "text": "십만이천오백과 ３.２천"
}
```

----------------------------------------

TITLE: Valid API Compatibility Header Values (Text)
DESCRIPTION: Lists the valid values that can be used for the `Accept` and `Content-Type` headers when requesting REST API compatibility with Elasticsearch 8.x or 9.x. These values specify the desired response/request format (JSON, YAML, SMILE, CBOR) and indicate compatibility with version 8.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/compatibility.md#_snippet_1

LANGUAGE: text
CODE:
```
"application/vnd.elasticsearch+json;compatible-with=8"
```

LANGUAGE: text
CODE:
```
"application/vnd.elasticsearch+yaml;compatible-with=8"
```

LANGUAGE: text
CODE:
```
"application/vnd.elasticsearch+smile;compatible-with=8"
```

LANGUAGE: text
CODE:
```
"application/vnd.elasticsearch+cbor;compatible-with=8"
```

----------------------------------------

TITLE: Detecting Step Changes Using CHANGE_POINT in ESQL
DESCRIPTION: Query that expands a sequence of numbers 1-25, assigns values (0 for numbers <13, 42 for others), and detects change points. The CHANGE_POINT function identifies where significant value changes occur in the sequence.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/change_point.csv-spec/changePointForDocs.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW key=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]
| MV_EXPAND key
| EVAL value = CASE(key<13, 0, 42)
| CHANGE_POINT value ON key
| WHERE type IS NOT NULL
```

----------------------------------------

TITLE: Configuring Error Retry Interval
DESCRIPTION: Dynamic setting for the number of retries before signaling an index is stuck in an error state. Defaults to 10 retries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/data-stream-lifecycle-settings.md#2025-04-21_snippet_6

LANGUAGE: yaml
CODE:
```
data_streams.lifecycle.signalling.error_retry_interval: 10
```

----------------------------------------

TITLE: Default Date Format in Elasticsearch
DESCRIPTION: The default date format used in Elasticsearch if no format is specified.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/date.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
    "strict_date_optional_time||epoch_millis"
```

----------------------------------------

TITLE: Applying Less Than Operator in Painless
DESCRIPTION: Demonstrates the less than operator '<' with various numeric types and def type. Includes type promotion, implicit casting, and comparison results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_3

LANGUAGE: painless
CODE:
```
boolean x = 5 < 4;
double y = 6.0;
x = 6 < y;
```

LANGUAGE: painless
CODE:
```
int x = 5;
def y = 7.0;
def z = y < 6.5;
def a = x < y;
```

----------------------------------------

TITLE: Configuring Elasticsearch Paths for Windows
DESCRIPTION: Sets the data and logs paths for Elasticsearch on Windows systems using DOS paths with escaped backslashes in the elasticsearch.yml configuration file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/path.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
path:
  data: "C:\\Elastic\\Elasticsearch\\data"
  logs: "C:\\Elastic\\Elasticsearch\\logs"
```

----------------------------------------

TITLE: Calculate SIN in Elasticsearch SQL
DESCRIPTION: Shows how to use the `SIN` function in Elasticsearch SQL. It calculates the sine of an angle expressed in radians and also verifies the Pythagorean identity (sin^2 + cos^2 = 1) using the `SIN` and `COS` functions. The input is a numeric expression (in radians), and the output is a double numeric value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_28

LANGUAGE: sql
CODE:
```
SELECT SIN(RADIANS(90)), POWER(SIN(RADIANS(67)), 2) + POWER(COS(RADIANS(67)), 2) AS pythagorean_identity;
```

----------------------------------------

TITLE: Configuring Classic Tokenizer with Custom Settings
DESCRIPTION: Example showing how to configure a classic tokenizer with a custom max_token_length setting and create a custom analyzer using it.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-classic-tokenizer.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "my_tokenizer"
        }
      },
      "tokenizer": {
        "my_tokenizer": {
          "type": "classic",
          "max_token_length": 5
        }
      }
    }
  }
}

POST my-index-000001/_analyze
{
  "analyzer": "my_analyzer",
  "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
}
```

LANGUAGE: text
CODE:
```
[ The, 2, QUICK, Brown, Foxes, jumpe, d, over, the, lazy, dog's, bone ]
```

----------------------------------------

TITLE: Checking Global Ordinals Heap Usage in Elasticsearch
DESCRIPTION: These commands show how to check the amount of heap used by global ordinals for a specific join field relation. It includes examples for checking per-index and per-node per-index statistics.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/parent-join.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
# Per-index
GET _stats/fielddata?human&fields=my_join_field#question

# Per-node per-index
GET _nodes/stats/indices/fielddata?human&fields=my_join_field#question
```

----------------------------------------

TITLE: Calculating Hyperbolic Sine using ESQL
DESCRIPTION: This snippet demonstrates how to calculate the hyperbolic sine of a given number using ESQL. The function SINH takes a numeric value and returns its hyperbolic sine. In this case, the value of 'a' is initialized to 1.8 and its hyperbolic sine is computed and stored in the variable 'sinh'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/sinh.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=1.8
| EVAL sinh=SINH(a)
```

----------------------------------------

TITLE: Configuring Elasticsearch Host and API Key
DESCRIPTION: This YAML snippet demonstrates how to configure the Elasticsearch host and API key for cloud deployments. The 'elasticsearch.host' setting specifies the URL of the Elasticsearch server, while 'elasticsearch.api_key' is necessary for authentication. If using the GitHub connector, an additional API key may be supplied for specific service types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-github.md#2025-04-21_snippet_5

LANGUAGE: yaml
CODE:
```
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: github
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA> # Optional. If not provided, the connector will use the elasticsearch.api_key instead
```

----------------------------------------

TITLE: Parsing Elasticsearch BulkResponse with Optional Error Handling
DESCRIPTION: This code demonstrates how to implement a BulkResponse parser that efficiently handles error checking. It only processes error objects when the hasErrors flag is true, avoiding unnecessary parsing of potentially large error objects when no errors are present.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/sql-cli/licenses/jline-NOTICE.txt#2025-04-21_snippet_0

LANGUAGE: java
CODE:
```
final Map<String, Object> bulkResponseMap = ...;
final boolean hasErrors = (boolean) bulkResponseMap.get("errors");
// only process the items when there are errors
if (hasErrors) {
    final List<Map<String, Object>> items = (List<Map<String, Object>>) bulkResponseMap.get("items");
    for (Map<String, Object> item : items) {
        // Do something with the error.  
    }
}
```

----------------------------------------

TITLE: Configuring Object Fields with Subobjects Disabled in Elasticsearch
DESCRIPTION: This example shows how to configure an object field with 'subobjects' set to false, allowing fields with dots in their names to be stored without creating intermediate objects. The example includes adding documents with both flat paths and as a single object.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/subobjects.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "metrics": {
        "type":  "object",
        "subobjects": false, <1>
        "properties": {
          "time": { "type": "long" },
          "time.min": { "type": "long" },
          "time.max": { "type": "long" }
        }
      }
    }
  }
}

PUT my-index-000001/_doc/metric_1
{
  "metrics.time" : 100, <2>
  "metrics.time.min" : 10,
  "metrics.time.max" : 900
}

PUT my-index-000001/_doc/metric_2
{
  "metrics" : {
    "time" : 100, <3>
    "time.min" : 10,
    "time.max" : 900
  }
}

GET my-index-000001/_mapping
```

----------------------------------------

TITLE: Calculating Square Root with Fractional Exponent in ESQL
DESCRIPTION: This snippet shows how to use the POW function with a fractional exponent to calculate a root. It uses a base of 4 and an exponent of 0.5 to calculate the square root of 4.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/pow.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
ROW base = 4, exponent = 0.5
| EVAL s = POW(base, exponent)
```

----------------------------------------

TITLE: Querying IPv4 Addresses Using CIDR Notation in Elasticsearch
DESCRIPTION: This snippet shows how to perform a term query on an IP field using CIDR notation for IPv4 addresses.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/ip.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET my-index-000001/_search
{
  "query": {
    "term": {
      "ip_addr": "192.168.0.0/16"
    }
  }
}
```

----------------------------------------

TITLE: Decay Function for Numeric Fields
DESCRIPTION: This snippet shows an example of using the `decayNumericLinear` function within a script. It includes the parameters origin, scale, offset and decay to be used to calculate the score.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-script-score-query.md#2025-04-21_snippet_5

LANGUAGE: js
CODE:
```
"script" : {
    "source" : "decayNumericLinear(params.origin, params.scale, params.offset, params.decay, doc['dval'].value)",
    "params": { <1>
        "origin": 20,
        "scale": 10,
        "decay" : 0.5,
        "offset" : 0
    }
}
```

----------------------------------------

TITLE: Base64 Encoding YAML Policy File Shell
DESCRIPTION: Demonstrates how to use the `base64` command-line tool, commonly available on many operating systems, to encode a YAML policy file (e.g., `plugin-patch.yaml`) into a base64 string. This encoded string is required to pass the policy via a system property.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/libs/entitlement/README.md#_snippet_3

LANGUAGE: shell
CODE:
```
base64 -i plugin-patch.yaml
```

----------------------------------------

TITLE: Customizing Truncate Filter in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create a custom truncate filter that shortens tokens to a length of 5 or fewer characters and incorporates it into a custom analyzer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-truncate-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT 5_char_words_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "lowercase_5_char": {
          "tokenizer": "lowercase",
          "filter": [ "5_char_trunc" ]
        }
      },
      "filter": {
        "5_char_trunc": {
          "type": "truncate",
          "length": 5
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating PostgreSQL Connector via Elasticsearch API - Console
DESCRIPTION: This snippet shows how to use the Elasticsearch Create connector API to programmatically create a new self-managed PostgreSQL connector instance, specifying its index name, user-friendly name, and service type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-postgresql.md#_snippet_0

LANGUAGE: console
CODE:
```
PUT _connector/my-postgresql-connector
{
  "index_name": "my-elasticsearch-index",
  "name": "Content synced from PostgreSQL",
  "service_type": "postgresql"
}
```

----------------------------------------

TITLE: Basic IP Range Aggregation Query
DESCRIPTION: Demonstrates how to perform a basic IP range aggregation query using 'to' and 'from' range parameters on an IP field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-iprange-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /ip_addresses/_search
{
  "size": 10,
  "aggs": {
    "ip_ranges": {
      "ip_range": {
        "field": "ip",
        "ranges": [
          { "to": "10.0.0.5" },
          { "from": "10.0.0.5" }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Demonstrating Valid Reference Type Casts in Painless
DESCRIPTION: Examples of valid reference type casts in Painless, showing implicit and explicit casts between related types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-casting.md#2025-04-21_snippet_3

LANGUAGE: painless
CODE:
```
List x;                        
ArrayList y = new ArrayList(); 
x = y;                         
y = (ArrayList)x;              
x = (List)y;                   
```

----------------------------------------

TITLE: Indexing Document: Unmapped Fields (console)
DESCRIPTION: Indexes a document with ID `1` into `my-index-000001`. The document contains `user_id` and nested `session_data.object.some_field`. Since mappings are disabled, these fields are stored in `_source` but are unmapped for retrieval purposes unless `include_unmapped` is used. `refresh=true` makes it searchable.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_9

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1?refresh=true
{
  "user_id": "kimchy",
  "session_data": {
     "object": {
       "some_field": "some_value"
     }
   }
}
```

----------------------------------------

TITLE: Configuring Gradle Build for Elasticsearch Plugin
DESCRIPTION: This Gradle build script sets up the project for developing an Elasticsearch plugin. It defines plugin metadata, dependencies, and test configurations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/extend/example-text-analysis-plugin.md#2025-04-21_snippet_0

LANGUAGE: gradle
CODE:
```
ext.pluginApiVersion = '8.7.0'
ext.luceneVersion = '9.5.0'

buildscript {
  ext.pluginApiVersion = '8.7.0'
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.elasticsearch.gradle:build-tools:${pluginApiVersion}"
  }
}

apply plugin: 'elasticsearch.stable-esplugin'
apply plugin: 'elasticsearch.yaml-rest-test'

esplugin {
  name 'my-plugin'
  description 'My analysis plugin'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {

  //TODO transitive dependency off and plugin-api dependency?
  compileOnly "org.elasticsearch.plugin:elasticsearch-plugin-api:${pluginApiVersion}"
  compileOnly "org.elasticsearch.plugin:elasticsearch-plugin-analysis-api:${pluginApiVersion}"
  compileOnly "org.apache.lucene:lucene-analysis-common:${luceneVersion}"

  //TODO for testing this also have to be declared
  testImplementation "org.elasticsearch.plugin:elasticsearch-plugin-api:${pluginApiVersion}"
  testImplementation "org.elasticsearch.plugin:elasticsearch-plugin-analysis-api:${pluginApiVersion}"
  testImplementation "org.apache.lucene:lucene-analysis-common:${luceneVersion}"

  testImplementation ('junit:junit:4.13.2'){
    exclude group: 'org.hamcrest'
  }
  testImplementation 'org.mockito:mockito-core:4.4.0'
  testImplementation 'org.hamcrest:hamcrest:2.2'

}
```

----------------------------------------

TITLE: Example manage_threads Entitlement (YAML)
DESCRIPTION: This snippet illustrates how to grant the `manage_threads` entitlement in the `entitlement-policy.yaml` file. This entitlement allows the specified module (or `ALL-UNNAMED`) to create or modify Java threads, though using Elasticsearch thread pools is generally recommended.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/extend/creating-classic-plugins.md#_snippet_3

LANGUAGE: YAML
CODE:
```
org.example.module: # or 'ALL-UNNAMED' if the plugin is non-modular
  - manage_threads
```

----------------------------------------

TITLE: Customizing Keys in Keyed Response for Geo-distance Aggregation
DESCRIPTION: Shows how to customize the key for each range in a keyed response from a geo-distance aggregation by explicitly specifying key names for each range.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-geodistance-aggregation.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
POST /museums/_search?size=0
{
  "aggs": {
    "rings_around_amsterdam": {
      "geo_distance": {
        "field": "location",
        "origin": "POINT (4.894 52.3760)",
        "ranges": [
          { "to": 100000, "key": "first_ring" },
          { "from": 100000, "to": 300000, "key": "second_ring" },
          { "from": 300000, "key": "third_ring" }
        ],
        "keyed": true
      }
    }
  }
}
```

----------------------------------------

TITLE: Output of CamelCase Tokenizer
DESCRIPTION: This example shows the output of the configured CamelCase tokenizer. The words in the sample text are split based on upper and lower case letters and numbers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pattern-analyzer.md#2025-04-21_snippet_5

LANGUAGE: text
CODE:
```
[ moose, x, ftp, class, 2, beta ]
```

----------------------------------------

TITLE: Checking Async EQL Search Progress in Elasticsearch
DESCRIPTION: This example shows how to check the progress of an asynchronous EQL search using the get async EQL search API with a search ID and wait_for_completion_timeout parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_24

LANGUAGE: console
CODE:
```
GET /_eql/search/FmNJRUZ1YWZCU3dHY1BIOUhaenVSRkEaaXFlZ3h4c1RTWFNocDdnY2FSaERnUTozNDE=?wait_for_completion_timeout=2s
```

----------------------------------------

TITLE: Concatenating String Multiple Times with REPEAT in ESQL
DESCRIPTION: This snippet demonstrates the usage of the REPEAT function in ESQL. It takes a string 'Hello!' and repeats it three times, storing the result in a new column 'triple_a'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/repeat.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = "Hello!"
| EVAL triple_a = REPEAT(a, 3)
```

----------------------------------------

TITLE: Defining MySQL Connector Advanced Sync Rule - json
DESCRIPTION: Provides an example of an advanced sync rule configuration for the MySQL connector using JSON. It specifies the tables involved in the query and includes an arbitrary SQL query to be executed against the MySQL instance. When using this, ensure the tables specified in the 'tables' field match those used in the 'query'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-mysql.md#_snippet_7

LANGUAGE: json
CODE:
```
[
    {
        "tables": ["table1", "table2"],
        "query": "SELECT ... FROM ..."
    }
]
```

----------------------------------------

TITLE: Decoding HTTP Body Trace Logs
DESCRIPTION: Unix command to decode and decompress HTTP body trace logs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/networking-settings.md#2025-04-21_snippet_15

LANGUAGE: sh
CODE:
```
cat httptrace.log | sed -e 's/.*://' | base64 --decode | gzip --decompress
```

----------------------------------------

TITLE: Creating Docker Volume
DESCRIPTION: This command creates a Docker volume named `extraction-service-volume`, which will be shared between the self-managed connector and the extraction service containers for accessing the files to be extracted.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-content-extraction.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
$ docker volume create --name extraction-service-volume
```

----------------------------------------

TITLE: Filtering Data with IS NULL in ESQL
DESCRIPTION: This snippet demonstrates how to use the IS NULL operator in an ESQL query to filter records where the birth_date field is null. It selects data from the employees table and returns only the rows where birth_date does not exist or has a null value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/operators/is_null.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| WHERE birth_date IS NULL
```

----------------------------------------

TITLE: Adding Shingle Filter to Custom Analyzer (Console)
DESCRIPTION: Demonstrates how to define a custom analyzer that includes the default `shingle` token filter when creating a new index using the Elasticsearch Create Index API. The custom analyzer `standard_shingle` uses the `standard` tokenizer followed by the `shingle` filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-shingle-tokenfilter.md#_snippet_3

LANGUAGE: Console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "standard_shingle": {
          "tokenizer": "standard",
          "filter": [ "shingle" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Create API Key for MongoDB Connector
DESCRIPTION: This snippet shows how to create an API key for the MongoDB connector with necessary cluster and index privileges. It's required for the connector to access and index data. The API key's encoded value must be added to the connector's configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-mongodb.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
"POST /_security/api_key
{
  "name": "connector_name-connector-api-key",
  "role_descriptors": {
        "connector_name-connector-role": {
          "cluster": [
            "monitor",
            "manage_connector"
          ],
          "indices": [
            {
              "names": [
                "index_name",
                ".search-acl-filter-index_name",
                ".elastic-connectors*"
              ],
              "privileges": [
                "all"
              ],
              "allow_restricted_indices": false
            }
          ]
        }
      }
    }"
```

----------------------------------------

TITLE: Multi-Value Mode Configuration
DESCRIPTION: Configuration example for handling multi-valued fields in decay functions, showing how to specify the multi_value_mode parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-function-score-query.md#2025-04-21_snippet_8

LANGUAGE: js
CODE:
```
    "DECAY_FUNCTION": {
        "FIELD_NAME": {
              "origin": ...,
              "scale": ...
        },
        "multi_value_mode": "avg"
    }
```

----------------------------------------

TITLE: Using Custom String Preference Parameter in Elasticsearch
DESCRIPTION: Demonstrates using a custom string as preference parameter value to ensure consistent shard selection across different search requests.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/licenses/slf4j-api-NOTICE.txt#2025-04-21_snippet_4

LANGUAGE: text
CODE:
```
preference=xyzabc
```

----------------------------------------

TITLE: Dropbox Advanced Sync Rules - Query Only Example
DESCRIPTION: Example of advanced sync rules for Dropbox connector using query matching on filenames
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-dropbox.md#2025-04-21_snippet_6

LANGUAGE: js
CODE:
```
[
  {
    "query": "confidential"
  },
  {
    "query": "dropbox"
  }
]
```

----------------------------------------

TITLE: Performing End-to-End Testing - Shell Command
DESCRIPTION: This shell command runs end-to-end tests for the Azure Blob Storage connector using the Elasticsearch connector framework. Use the 'NAME' parameter to specify the connector and 'DATA_SIZE' to modify the test data size for faster results. Ensure that 'make' utility and necessary permissions are available.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-azure-blob.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
$ make ftest NAME=azure_blob_storage
```

----------------------------------------

TITLE: Foreach Processor Modifying Object Keys
DESCRIPTION: Configuration of the Foreach processor that sets each object key to the value of its display_name field, effectively renaming keys based on display names.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/foreach-processor.md#2025-04-21_snippet_9

LANGUAGE: js
CODE:
```
{
  "foreach": {
    "field": "products",
    "processor": {
      "set": {
        "field": "_ingest._key",
        "value": "{{_ingest._value.display_name}}"
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing a Polygon with Custom Orientation in GeoJSON
DESCRIPTION: This example shows how to override the default orientation parameter when indexing a polygon. By specifying 'clockwise' orientation, Elasticsearch will interpret the vertex order differently than the default counterclockwise ordering.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/shape.md#2025-04-21_snippet_9

LANGUAGE: console
CODE:
```
POST /example/_doc
{
  "location" : {
    "type" : "polygon",
    "orientation" : "clockwise",
    "coordinates" : [
      [ [1000.0, 1000.0], [1000.0, 1001.0], [1001.0, 1001.0], [1001.0, 1000.0], [1000.0, 1000.0] ]
    ]
  }
}
```

----------------------------------------

TITLE: Type Table Mapping Example
DESCRIPTION: This demonstrates how to customize type mappings using an array, to avoid splitting on specific characters. The provided example maps the plus (`+`) and hyphen (`-`) characters as alphanumeric, which means they won’t be treated as delimiters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-word-delimiter-tokenfilter.md#2025-04-21_snippet_3

LANGUAGE: txt
CODE:
```
[ "+ => ALPHA", "- => ALPHA" ]
```

----------------------------------------

TITLE: Equality Equals with Reference Types in Painless
DESCRIPTION: Shows how the equality equals operator works with reference types (Lists) in Painless. It creates two List objects, adds an element to one, compares them, adds an element to the other, and then compares them again, demonstrating comparison of List references.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_13

LANGUAGE: painless
CODE:
```
"List a = new ArrayList(); <1>
List b = new ArrayList(); <2>
a.add(1);                 <3>
boolean c = a == b;       <4>
b.add(1);                 <5>
c = a == b;               <6>"
```

----------------------------------------

TITLE: Reindexing Percolator Queries
DESCRIPTION: Shows the process of reindexing percolator queries to a new index and updating aliases.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/percolator.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT new_index
{
  "mappings": {
    "properties": {
      "query" : {
        "type" : "percolator"
      },
      "body" : {
        "type": "text"
      }
    }
  }
}

POST /_reindex?refresh
{
  "source": {
    "index": "index"
  },
  "dest": {
    "index": "new_index"
  }
}

POST _aliases
{
  "actions": [
    {
      "remove": {
        "index" : "index",
        "alias": "queries"
      }
    },
    {
      "add": {
        "index": "new_index",
        "alias": "queries"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Synthetic _source Example for IP Fields in Elasticsearch
DESCRIPTION: This snippet demonstrates how synthetic _source behaves with IP fields, including sorting and removing duplicates for both IPv4 and IPv6 addresses.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/ip.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "ip": { "type": "ip" }
    }
  }
}
PUT idx/_doc/1
{
  "ip": ["192.168.0.1", "192.168.0.1", "10.10.12.123",
         "2001:db8::1:0:0:1", "::afff:4567:890a"]
}
```

----------------------------------------

TITLE: Hot Threads API Output for Idle Transport Worker
DESCRIPTION: Example output from the Nodes hot threads API showing an idle transport_worker thread, including CPU usage statistics and stack trace information.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/networking-settings.md#2025-04-21_snippet_19

LANGUAGE: text
CODE:
```
   0.0% [cpu=0.0%, idle=100.0%] (500ms out of 500ms) cpu usage by thread 'elasticsearch[instance-0000000004][transport_worker][T#1]'
     10/10 snapshots sharing following 9 elements
       java.base@17.0.2/sun.nio.ch.EPoll.wait(Native Method)
       java.base@17.0.2/sun.nio.ch.EPollSelectorImpl.doSelect(EPollSelectorImpl.java:118)
       java.base@17.0.2/sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:129)
       java.base@17.0.2/sun.nio.ch.SelectorImpl.select(SelectorImpl.java:146)
       io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:813)
       io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:460)
       io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)
       io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
       java.base@17.0.2/java.lang.Thread.run(Thread.java:833)
```

----------------------------------------

TITLE: Defining Stream Interface in Painless - Java
DESCRIPTION: Specifies the Stream interface, which processes sequences of objects. It contains generic methods for various stream operations, such as map, filter, reduce, and collect.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.util.stream.txt#2025-04-21_snippet_8

LANGUAGE: Java
CODE:
```
class java.util.stream.Stream {
  boolean allMatch(Predicate)
  boolean anyMatch(Predicate)
  Stream.Builder builder()
  def collect(Collector)
  def collect(Supplier,BiConsumer,BiConsumer)
  Stream concat(Stream,Stream)
  long count()
  Stream distinct()
  Stream empty()
  Stream filter(Predicate)
  Optional findAny()
  Optional findFirst()
  Stream flatMap(Function)
  DoubleStream flatMapToDouble(Function)
  IntStream flatMapToInt(Function)
  LongStream flatMapToLong(Function)
  void forEach(Consumer)
  void forEachOrdered(Consumer)
  Stream limit(long)
  Stream map(Function)
  DoubleStream mapToDouble(ToDoubleFunction)
  IntStream mapToInt(ToIntFunction)
  LongStream mapToLong(ToLongFunction)
  Optional max(Comparator)
  Optional min(Comparator)
  boolean noneMatch(Predicate)
  Stream of(def[])
  Stream peek(Consumer)
  Optional reduce(BinaryOperator)
  def reduce(def,BinaryOperator)
  def reduce(def,BiFunction,BinaryOperator)
  Stream skip(long)
  Stream sorted()
  Stream sorted(Comparator)
  def[] toArray()
  def[] toArray(IntFunction)
}
```

----------------------------------------

TITLE: Configuring HDFS Repository via Elasticsearch REST API
DESCRIPTION: This snippet demonstrates how to create an HDFS repository using the Elasticsearch REST API. It includes essential settings like the HDFS URI, path for storing data, and an example of specifying a Hadoop configuration parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/repository-hdfs-config.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT _snapshot/my_hdfs_repository
{
  "type": "hdfs",
  "settings": {
    "uri": "hdfs://namenode:8020/",
    "path": "elasticsearch/repositories/my_hdfs_repository",
    "conf.dfs.client.read.shortcircuit": "true"
  }
}
```

----------------------------------------

TITLE: Mapping Rank Vectors (Byte) - Elasticsearch REST API
DESCRIPTION: This code block sets up an Elasticsearch index named `my-rank-vectors-byte`, configuring the `my_vector` field as `rank_vectors` with the `element_type` explicitly set to `byte`. It then indexes a document with sample byte vector data into this field, illustrating how to use a different element type for the rank vectors.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/rank-vectors.md#_snippet_1

LANGUAGE: console
CODE:
```
PUT my-rank-vectors-byte
{
  "mappings": {
    "properties": {
      "my_vector": {
        "type": "rank_vectors",
        "element_type": "byte"
      }
    }
  }
}

PUT my-rank-vectors-byte/_doc/1
{
  "my_vector" : [[1, 2, 3], [4, 5, 6]]
}
```

----------------------------------------

TITLE: Period Methods and Fields
DESCRIPTION: Lists the methods and fields available in the java.time.Period class. It summarizes functionalities for creating, manipulating, and querying periods, including operations for calculating periods between dates, adding or subtracting durations, scaling, and normalizing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.time.txt#2025-04-21_snippet_12

LANGUAGE: java
CODE:
```
"class java.time.Period {
  Period ZERO
  Period between(LocalDate,LocalDate)
  Period from(TemporalAmount)
  IsoChronology getChronology()
  int getDays()
  int getMonths()
  int getYears()
  Period of(int,int,int)
  Period ofYears(int)
  Period ofMonths(int)
  Period ofWeeks(int)
  Period ofDays(int)
  Period parse(CharSequence)
  Period plus(TemporalAmount)
  Period plusYears(long)
  Period plusMonths(long)
  Period plusDays(long)
  Period minus(TemporalAmount)
  Period minusYears(long)
  Period minusMonths(long)
  Period minusDays(long)
  Period multipliedBy(int)
  Period negated()
  Period normalized()
  long toTotalMonths()
  Period withDays(int)
  Period withMonths(int)
  Period withYears(int)
}"
```

----------------------------------------

TITLE: Creating Czech Custom Analyzer in Elasticsearch
DESCRIPTION: This snippet provides a method to create a custom analyzer for Czech language text in Elasticsearch. It features stop words and keyword filtering, along with a stemmer for effective text analysis. The stop words can be overwritten as per requirements.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_8

LANGUAGE: json
CODE:
```
PUT /czech_example
{
  "settings": {
    "analysis": {
      "filter": {
        "czech_stop": {
          "type":       "stop",
          "stopwords":  "_czech_" <1>
        },
        "czech_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["příklad"] <2>
        },
        "czech_stemmer": {
          "type":       "stemmer",
          "language":   "czech"
        }
      },
      "analyzer": {
        "rebuilt_czech": {
          "tokenizer":  "standard",
          "filter": [
            "lowercase",
            "czech_stop",
            "czech_keywords",
            "czech_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Value Count Aggregation on Histogram Fields in Elasticsearch
DESCRIPTION: Illustrates how to use value count aggregation on histogram fields. It includes examples of indexing documents with histogram data and performing the aggregation, which sums all numbers in the 'counts' array of the histograms.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-valuecount-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT metrics_index/_doc/1
{
  "network.name" : "net-1",
  "latency_histo" : {
      "values" : [0.1, 0.2, 0.3, 0.4, 0.5],
      "counts" : [3, 7, 23, 12, 6]
   }
}

PUT metrics_index/_doc/2
{
  "network.name" : "net-2",
  "latency_histo" : {
      "values" :  [0.1, 0.2, 0.3, 0.4, 0.5],
      "counts" : [8, 17, 8, 7, 6]
   }
}

POST /metrics_index/_search?size=0
{
  "aggs": {
    "total_requests": {
      "value_count": { "field": "latency_histo" }
    }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "total_requests": {
      "value": 97
    }
  }
}
```

----------------------------------------

TITLE: Simple Fragmenter Plain Highlighter Results Json
DESCRIPTION: Provides an example JSON response showing the output of the 'plain' highlighter configured with the 'simple' fragmenter. The highlighted fragments for the 'message' field demonstrate how the 'simple' fragmenter might split the text into multiple, potentially short, segments.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_26

LANGUAGE: json
CODE:
```
{
  ...
  "hits": {
    "total": {
      "value": 1,
      "relation": "eq"
    },
    "max_score": 1.6011951,
    "hits": [
      {
        "_index": "my-index-000001",
        "_id": "1",
        "_score": 1.6011951,
        "_source": {
          "message": "some message with the number 1",
          "context": "bar"
        },
        "highlight": {
          "message": [
            " with the <em>number</em>",
            " <em>1</em>"
          ]
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Invalid Full-Text Search ESQL Query (Intermediate Command)
DESCRIPTION: Shows an invalid ESQL query attempting full-text search using `MATCH`. The `MATCH` command is placed after the `STATS` processing command, which causes a validation error according to ESQL's full-text search limitations. Full-text search functions must be close to the `FROM` command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/limitations.md#_snippet_1

LANGUAGE: esql
CODE:
```
FROM books
| STATS AVG(price) BY author
| WHERE MATCH(author, "Faulkner")
```

----------------------------------------

TITLE: Indexing Document with Array of Objects for Synthetic _source Sneaky Example (console)
DESCRIPTION: This snippet demonstrates indexing a document containing an array field (`foo`) where the objects within the array have different field names (`bar` and `baz`). This document is used to show how synthetic `_source` flattens such arrays, potentially making some array structures "vanish" by merging the object contents. Requires an Elasticsearch cluster and a client capable of sending PUT requests.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-source-field.md#_snippet_3

LANGUAGE: console
CODE:
```
PUT idx/_doc/1
{
  "foo": [
    {
      "bar": 1
    },
    {
      "baz": 2
    }
  ]
}
```

----------------------------------------

TITLE: Defining a Bucket Count K-S Test Aggregation in Elasticsearch
DESCRIPTION: A basic example of a bucket_count_ks_test aggregation that compares distributions. It specifies the buckets path to count values, alternative hypothesis types to calculate, and the sampling method for the K-S statistic.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-count-ks-test-aggregation.md#2025-04-21_snippet_0

LANGUAGE: js
CODE:
```
{
  "bucket_count_ks_test": {
    "buckets_path": "range_values>_count", <1>
    "alternative": ["less", "greater", "two_sided"], <2>
    "sampling_method": "upper_tail" <3>
  }
}
```

----------------------------------------

TITLE: Using Single-Line Comments in ESQL
DESCRIPTION: Illustrates the use of double slashes (`//`) for creating single-line comments in an ESQL query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-syntax.md#_snippet_7

LANGUAGE: esql
CODE:
```
// Query the employees index
FROM employees
| WHERE height > 2
```

----------------------------------------

TITLE: Comparing Identity Using '!==': Painless Example
DESCRIPTION: This snippet demonstrates the identity not equals operator to compare two values in Painless. It's used to determine if two reference types refer to different instances. Typical inputs are reference types, and the output is a boolean indicating inequality.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_26

LANGUAGE: Painless
CODE:
```
List a = new ArrayList();
List b = new ArrayList();
List c = a;
boolean c = a !== b;
c = a !== c;
```

----------------------------------------

TITLE: Reversing a Text String with REVERSE in ESQL
DESCRIPTION: Demonstrates using the REVERSE function to reverse a simple text string. The function takes a string input and returns a new string with the characters in reverse order.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/reverse.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW message = "Some Text" | EVAL message_reversed = REVERSE(message);
```

----------------------------------------

TITLE: Defining Modulo Operator in ESQL
DESCRIPTION: This snippet defines the modulo operator (%) in ESQL. It divides one number by another and returns the remainder. The operator returns null if either field is multivalued.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/operators/mod.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
### MODULO `%`
Divide one number by another and return the remainder. If either field is [multivalued](https://www.elastic.co/docs/reference/query-languages/esql/esql-multivalued-fields) then the result is `null`.
```

----------------------------------------

TITLE: Right Shift with the Def Type in Painless
DESCRIPTION: This example illustrates using the right shift operator with the def type in Painless. It highlights implicit casting behavior and the expected results after the operation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_27

LANGUAGE: painless
CODE:
```
def x = 16 >> 2; <1>
def y = x >> 1;  <2>
```

----------------------------------------

TITLE: Holt Double Exponential Implementation
DESCRIPTION: Double exponential smoothing that incorporates trend tracking with configurable alpha and beta parameters for level and trend decay.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-movfn-aggregation.md#2025-04-21_snippet_10

LANGUAGE: json
CODE:
```
POST /_search
{
  "size": 0,
  "aggs": {
    "my_date_histo": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "1M"
      },
      "aggs": {
        "the_sum": {
          "sum": { "field": "price" }
        },
        "the_movavg": {
          "moving_fn": {
            "buckets_path": "the_sum",
            "window": 10,
            "script": "MovingFunctions.holt(values, 0.3, 0.1)"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Specifying Execution Hint for Significant Terms (Console/JSON)
DESCRIPTION: Demonstrates the use of the `execution_hint` parameter in the `significant_terms` aggregation. This parameter allows specifying how Elasticsearch should execute the aggregation internally (e.g., `map` or `global_ordinals`). While Elasticsearch usually picks a sensible default, this provides manual control, though the hint may be ignored if not applicable.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-significantterms-aggregation.md#_snippet_13

LANGUAGE: console
CODE:
```
GET /_search
{
  "aggs": {
    "tags": {
      "significant_terms": {
        "field": "tags",
        "execution_hint": "map" 
      }
    }
  }
}
```

----------------------------------------

TITLE: Installing Elasticsearch Azure Classic Discovery Plugin (Shell)
DESCRIPTION: This command uses the Elasticsearch plugin manager to install the Azure Classic Discovery plugin. The plugin must be installed on every node in the cluster, and each node requires a restart after installation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-azure-classic.md#_snippet_0

LANGUAGE: shell
CODE:
```
sudo bin/elasticsearch-plugin install discovery-azure-classic
```

----------------------------------------

TITLE: Checking Geometry Containment with ST_CONTAINS in ESQL
DESCRIPTION: This ESQL code snippet checks if a given city boundary contains a specified polygon geometry. It filters records based on this condition and retains relevant fields for the output. Prerequisites include having a dataset of airport city boundaries with valid geometry formats. Expected inputs are the geometry of the city boundary and a polygon shape, while the expected output is a filtered set of records with the specified fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/st_contains.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airport_city_boundaries
| WHERE ST_CONTAINS(city_boundary, TO_GEOSHAPE("POLYGON((109.35 18.3, 109.45 18.3, 109.45 18.4, 109.35 18.4, 109.35 18.3))"))
| KEEP abbrev, airport, region, city, city_location
```

----------------------------------------

TITLE: Indexing Documents with Constant Keyword Field (Console)
DESCRIPTION: These examples demonstrate indexing documents into an index with a `constant_keyword` field. The first request explicitly provides the correct "debug" value, while the second omits the field entirely, both resulting in the field being treated as having the configured constant value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/keyword.md#_snippet_5

LANGUAGE: console
CODE:
```
POST logs-debug/_doc
{
  "date": "2019-12-12",
  "message": "Starting up Elasticsearch",
  "level": "debug"
}

POST logs-debug/_doc
{
  "date": "2019-12-12",
  "message": "Starting up Elasticsearch"
}
```

----------------------------------------

TITLE: Decoding JWT Token for Elasticsearch Authentication
DESCRIPTION: This snippet shows a decoded JWT token used for authentication in Elasticsearch. It includes the header with key ID and algorithm, and the payload with issuer, audience, subject, expiration, and issued-at claims.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/src/test/resources/org/elasticsearch/xpack/security/authc/apikey/serialized-signed-RS256-jwt.txt#2025-04-21_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "header": {
    "kid": "test-rsa-key",
    "alg": "RS256"
  },
  "payload": {
    "iss": "https://issuer.example.com/",
    "aud": "https://audience.example.com/",
    "sub": "user1",
    "exp": 4070908800,
    "iat": 946684800
  }
}
```

----------------------------------------

TITLE: Indexing All Pages - JSON Snippet - JavaScript
DESCRIPTION: This JSON snippet illustrates how to index all pages in the Notion workspace. It can be useful for full-scale synchronization without applying specific title filters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-notion.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
{
  "searches": [
    {
      "filter": {
        "value": "page"
      },
      "query": ""
    }
  ]
}
```

----------------------------------------

TITLE: EQL Case Insensitive Equals
DESCRIPTION: Executes a case-insensitive equality check for the process name being 'test'. Verifies handling of case insensitivity in transformation to a term query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_3

LANGUAGE: basic
CODE:
```
process where process_name : "test"
;
"term":{"process_name":{"value":"test","case_insensitive":true}
;
```

----------------------------------------

TITLE: Configuring Data Stream Lifecycle Poll Interval
DESCRIPTION: Dynamic setting that determines how often Elasticsearch checks for next actions on data streams. Defaults to 5 minutes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/data-stream-lifecycle-settings.md#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
data_streams.lifecycle.poll_interval: 5m
```

----------------------------------------

TITLE: Brics Automaton Copyright Notice
DESCRIPTION: Copyright notice and BSD-style license terms for Brics automaton code used in Lucene's automaton package
SOURCE: https://github.com/elastic/elasticsearch/blob/main/plugins/analysis-icu/licenses/lucene-LICENSE.txt#2025-04-21_snippet_1

LANGUAGE: java
CODE:
```
/*
 * Copyright (c) 2001-2009 Anders Moeller
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
```

----------------------------------------

TITLE: Using Top Hits in Pipeline Aggregations in Elasticsearch
DESCRIPTION: This snippet shows how to use top_hits in pipeline aggregations, specifically with a bucket_selector for filtering. It demonstrates setting the size to 1 and specifying the path for the value to be passed to the wrapping aggregator.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-top-hits-aggregation.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "top_tags": {
      "terms": {
        "field": "type",
        "size": 3
      },
      "aggs": {
        "top_sales_hits": {
          "top_hits": {
            "sort": [
              {
                "date": {
                  "order": "desc"
                }
              }
            ],
            "_source": {
              "includes": [ "date", "price" ]
            },
            "size": 1
          }
        },
        "having.top_salary": {
          "bucket_selector": {
            "buckets_path": {
              "tp": "top_sales_hits[_source.price]"
            },
            "script": "params.tp < 180"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Sample Response for Rate Aggregation in Elasticsearch
DESCRIPTION: This snippet shows the expected response format for a rate aggregation query. It includes bucketed results with key, doc_count, and average price for each month.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-rate-aggregation.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
{
  ...
  "aggregations" : {
    "by_date" : {
      "buckets" : [
        {
          "key_as_string" : "2015/01/01 00:00:00",
          "key" : 1420070400000,
          "doc_count" : 3,
          "avg_price" : {
            "value" : 495.0
          }
        },
        {
          "key_as_string" : "2015/02/01 00:00:00",
          "key" : 1422748800000,
          "doc_count" : 2,
          "avg_price" : {
            "value" : 54.0
          }
        },
        {
          "key_as_string" : "2015/03/01 00:00:00",
          "key" : 1425168000000,
          "doc_count" : 2,
          "avg_price" : {
            "value" : 337.5
          }
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Syntax for MONTH_NAME Function in Elasticsearch SQL
DESCRIPTION: Defines the syntax for the MONTH_NAME function (also aliased as MONTHNAME). It takes a date or datetime expression and extracts the name of the month. Returns null if the input is null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_76

LANGUAGE: SQL
CODE:
```
MONTH_NAME(datetime_exp) <1>
```

----------------------------------------

TITLE: Testing Log Function with Base 2 in ESQL
DESCRIPTION: This SQL query tests the log function with base 2 for various input values. It covers positive numbers, zero, and negative numbers, demonstrating the function's behavior and null handling.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/log.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
SELECT
    log(2, null::LONG) AS null_long,
    log(2, null::DOUBLE) AS null_double,
    log(2, null::INTEGER) AS null_integer,
    log(2, 1) AS one,
    log(2, 2) AS two,
    log(2, 4) AS four,
    log(2, 0.5) AS half,
    log(2, 0) AS zero,
    log(2, -1) AS negative;
```

----------------------------------------

TITLE: Updating Bundle Version with Option 1 Method (cURL)
DESCRIPTION: This snippet demonstrates how to update the version of an existing bundle extension using the Option 1 method. It sets the version to '8.*' to ensure compatibility with all 8.x versions of Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-plugins-guide.md#2025-04-21_snippet_13

LANGUAGE: sh
CODE:
```
curl -X POST \
  https://api.elastic-cloud.com/api/v1/deployments/extensions/EXTENSION_ID \
  -H "Authorization: ApiKey $CLOUD_API_KEY" \
  -H 'Content-Type: application/json' \
  -d '{
   "extension_type" : "bundle",
    "name": "custom-bundle",
   "version" : "8.*"
}'
```

----------------------------------------

TITLE: Response Format for Multi Terms Aggregation
DESCRIPTION: Example response showing the structure of multi_terms aggregation results, including bucket keys as arrays, document counts, and error bounds.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-multi-terms-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations" : {
    "genres_and_products" : {
      "doc_count_error_upper_bound" : 0,  <1>
      "sum_other_doc_count" : 0,          <2>
      "buckets" : [                       <3>
        {
          "key" : [                       <4>
            "rock",
            "Product A"
          ],
          "key_as_string" : "rock|Product A",
          "doc_count" : 2
        },
        {
          "key" : [
            "electronic",
            "Product B"
          ],
          "key_as_string" : "electronic|Product B",
          "doc_count" : 1
        },
        {
          "key" : [
            "jazz",
            "Product B"
          ],
          "key_as_string" : "jazz|Product B",
          "doc_count" : 1
        },
        {
          "key" : [
            "rock",
            "Product B"
          ],
          "key_as_string" : "rock|Product B",
          "doc_count" : 1
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Modifying Elasticsearch Port on Running GCE Instance
DESCRIPTION: This snippet shows how to add or modify the Elasticsearch port metadata for an existing Google Compute Engine instance. It uses the 'gcloud compute instances add-metadata' command to set the 'es_port' metadata value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-port.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
gcloud compute instances add-metadata myesnode1 \
       --zone europe-west1-a \
       --metadata es_port=9301
```

----------------------------------------

TITLE: Generating Node Certificates Signed by CA for Elasticsearch
DESCRIPTION: This snippet shows how to create new certificates for Elasticsearch nodes, signed by the previously created CA. It includes steps to generate the certificate, extract the public and private keys, and convert them to PKCS12 format.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/build-tools-internal/src/main/resources/run.ssl/readme.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
export i=1 # update this
rm -rf certificate-bundle.zip public-cert$i.pem private-cert$i.key private-cert$i.p12 instance
bin/elasticsearch-certutil cert -ca-key private-ca.key -ca-cert public-ca.pem -days 7305 -pem -dns localhost,es$i -ip 127.0.0.1,::1
unzip certificate-bundle.zip
mv instance/instance.crt public-cert$i.pem
mv instance/instance.key private-cert$i.key
openssl pkcs12 -export -out private-cert$i.p12 -inkey private-cert$i.key -in public-cert$i.pem -passout pass: #convert public/private key to p12
```

----------------------------------------

TITLE: Using Runtime Fields for Complex Weight Calculations in Elasticsearch
DESCRIPTION: This snippet illustrates how to use a runtime field to combine multiple weights and a custom script for value calculation in a weighted_avg aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-weight-avg-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /exams/_doc?refresh
{
  "grade": 100,
  "weight": [2, 3]
}
POST /exams/_doc?refresh
{
  "grade": 80,
  "weight": 3
}

POST /exams/_search?filter_path=aggregations
{
  "size": 0,
  "runtime_mappings": {
    "weight.combined": {
      "type": "double",
      "script": """
        double s = 0;
        for (double w : doc['weight']) {
          s += w;
        }
        emit(s);
      """
    }
  },
  "aggs": {
    "weighted_grade": {
      "weighted_avg": {
        "value": {
          "script": "doc.grade.value + 1"
        },
        "weight": {
          "field": "weight.combined"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Show the value of a setting from Elasticsearch Keystore
DESCRIPTION: Retrieves and displays the value of a specific secure setting. When settings contain binary data, use the `-o` option to write output to a file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/elasticsearch-keystore.md#_snippet_6

LANGUAGE: Shell
CODE:
```
bin/elasticsearch-keystore show the.name.of.the.setting.to.show
```

----------------------------------------

TITLE: Getting Geometry Longitude (ST_X) in Elasticsearch SQL
DESCRIPTION: Describes the ST_X function which takes a geometry and returns the longitude (X coordinate) of its first point as a double. It returns null for null input. The example converts a WKT point string to geometry and extracts its longitude.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-geo.md#_snippet_3

LANGUAGE: SQL
CODE:
```
ST_X(
    geometry <1>
)
```

LANGUAGE: SQL
CODE:
```
SELECT ST_X(ST_WKTToSQL('POINT (10 20)')) x;
```

----------------------------------------

TITLE: Pass-through Object Conflict Resolution Example
DESCRIPTION: Shows how to handle naming conflicts between multiple pass-through objects using priority settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/passthrough.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000002
{
  "mappings": {
    "properties": {
      "attributes": {
        "type": "passthrough",
        "priority": 10,
        "properties": {
          "id": {
            "type": "keyword"
          }
        }
      },
      "resource.attributes": {
        "type": "passthrough",
        "priority": 20,
        "properties": {
          "id": {
            "type": "keyword"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Complex Multi-level Subqueries
DESCRIPTION: Multiple nested subqueries with aliasing, grouping, and ordering
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_subqueries_tests.txt#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
SELECT j AS k FROM (
    SELECT i AS j FROM (
        SELECT int AS i FROM test
    )
) GROUP BY k;
```

----------------------------------------

TITLE: Custom ICU Tokenizer Rule File Example
DESCRIPTION: This snippet shows the content of a custom rule file for the ICU tokenizer. The rule '.+ {200};' treats the entire input as a single token.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-icu-tokenizer.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
.+ {200};
```

----------------------------------------

TITLE: SharePoint Server Connector Configuration in YAML
DESCRIPTION: Example YAML configuration for the SharePoint Server connector when deploying as a self-managed connector using Docker. This snippet shows the structure and required fields for the config.yml file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-sharepoint.md#2025-04-22_snippet_2

LANGUAGE: yaml
CODE:
```
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: sharepoint_server
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA> # Optional. If not provided, the connector will use the elasticsearch.api_key instead
```

----------------------------------------

TITLE: GeoJSON Circle Processing Response Example
DESCRIPTION: This snippet shows the response after indexing a GeoJSON circle through the circle processor pipeline. The original circle has been converted to a GeoJSON polygon with coordinates that approximate the circle within the specified error distance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/ingest-circle-processor.md#2025-04-21_snippet_4

LANGUAGE: console-result
CODE:
```
{
  "found": true,
  "_index": "circles",
  "_id": "2",
  "_version": 1,
  "_seq_no": 22,
  "_primary_term": 1,
  "_source": {
    "circle": {
      "coordinates": [
        [
          [30.000365257263184, 10.0],
          [30.000111397193788, 10.00034284530941],
          [29.999706043744222, 10.000213571721195],
          [29.999706043744222, 9.999786428278805],
          [30.000111397193788, 9.99965715469059],
          [30.000365257263184, 10.0]
        ]
      ],
      "type": "Polygon"
    }
  }
}
```

----------------------------------------

TITLE: Sample Document Result After Community ID Processing (JSON)
DESCRIPTION: This JSON object shows the content of the _source field for a document after it has been processed by the Community ID ingest processor. It demonstrates how the processor adds the network.community_id field with the calculated Community ID based on the input network data from the source document.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/community-id-processor.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "_source" : {
    "destination" : {
      "port" : 80,
      "ip" : "55.56.57.58"
    },
    "source" : {
      "port" : 12345,
      "ip" : "123.124.125.126"
    },
    "network" : {
      "community_id" : "1:9qr9Z1LViXcNwtLVOHZ3CL8MlyM=",
      "transport" : "TCP"
    }
  }
}
```

----------------------------------------

TITLE: Clearing Shard Request Cache in Elasticsearch
DESCRIPTION: This command manually expires the request cache for specified indices using the clear cache API. The request parameter is set to true to specifically target the request cache.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/shard-request-cache.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST /my-index-000001,my-index-000002/_cache/clear?request=true
```

----------------------------------------

TITLE: Using LOCATE Function in ESQL
DESCRIPTION: This snippet demonstrates the usage of the LOCATE function in ESQL. It finds the position of the substring 'll' within the string 'hello'. The function returns an integer indicating the position, with string positions starting from 1. If the substring is not found, it returns 0.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/locate.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = "hello"
| EVAL a_ll = LOCATE(a, "ll")
```

----------------------------------------

TITLE: Index Query Cache Enable Setting
DESCRIPTION: Index-level setting to control whether query caching is enabled for a specific index
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/node-query-cache-settings.md#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
index.queries.cache.enabled
```

----------------------------------------

TITLE: Converting String to Version Type in ESQL
DESCRIPTION: Demonstrates using the TO_VERSION function to convert a string representation of a version number ("1.2.3") into a version type. The result is stored in variable 'v' and displayed in a tabular format.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_version.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW v = TO_VERSION("1.2.3")
```

----------------------------------------

TITLE: Defining a Version Field in Elasticsearch Mapping
DESCRIPTION: This snippet demonstrates how to create an index with a mapping that includes a 'version' field type. It shows the basic structure for defining a 'version' field named 'my_version' within the index mapping.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/version.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "my_version": {
        "type": "version"
      }
    }
  }
}
```

----------------------------------------

TITLE: Custom Standard Deviation Bounds in Extended Stats
DESCRIPTION: Shows how to customize the standard deviation bounds by specifying a sigma value to control the number of standard deviations from the mean.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-extendedstats-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /exams/_search
{
  "size": 0,
  "aggs": {
    "grades_stats": {
      "extended_stats": {
        "field": "grade",
        "sigma": 3
      }
    }
  }
}
```

----------------------------------------

TITLE: Using _count Special Path in Pipeline Aggregation
DESCRIPTION: Example showing how to use the special _count path to calculate derivatives based on document counts instead of specific metrics.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/pipeline.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
POST /_search
{
  "aggs": {
    "my_date_histo": {
      "date_histogram": {
        "field": "timestamp",
        "calendar_interval": "day"
      },
      "aggs": {
        "the_deriv": {
          "derivative": { "buckets_path": "_count" } <1>
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Extension details response with deployment information in Elasticsearch Service
DESCRIPTION: Sample JSON response from getting an extension with the include_deployments parameter, showing the extension details and an array of deployment IDs using this extension.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-plugins-guide.md#2025-04-21_snippet_10

LANGUAGE: json
CODE:
```
{
    "name": "custom-plugin",
    "url": "repo://2286113333",
    "extension_type": "plugin",
    "deployments": [
        "f91f3a9360a74e9d8c068cd2698c92ea"
    ],
    "version": "8.4.3",
    "id": "2286113333"
}
```

----------------------------------------

TITLE: Indexing WKT MultiPoint in Elasticsearch
DESCRIPTION: Example of indexing a Well-Known Text (WKT) MultiPoint geometry in Elasticsearch. This represents the same geometry as the GeoJSON example but using WKT syntax.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-shape.md#2025-04-21_snippet_11

LANGUAGE: json
CODE:
```
POST /example/_doc
{
  "location" : "MULTIPOINT (102.0 2.0, 103.0 2.0)"
}
```

----------------------------------------

TITLE: Calculating Power with Positive Exponent in Elasticsearch SQL
DESCRIPTION: This demonstrates the `POWER` function in Elasticsearch SQL for positive integer exponents. It calculates the value of the first numeric expression raised to the power of the second integer expression.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_10

LANGUAGE: SQL
CODE:
```
SELECT POWER(3, 2), POWER(3, 3);
```

----------------------------------------

TITLE: Disabling Eager Global Ordinals in Elasticsearch Mapping
DESCRIPTION: This snippet demonstrates how to disable eager global ordinals on a field by setting the 'eager_global_ordinals' property to false. This reverts to the default behavior where global ordinals are loaded on-demand during search operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/eager-global-ordinals.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
PUT my-index-000001/_mapping
{
  "properties": {
    "tags": {
      "type": "keyword",
      "eager_global_ordinals": false
    }
  }
}
```

----------------------------------------

TITLE: Calculating Arcsine in Elasticsearch SQL
DESCRIPTION: This snippet shows the `ASIN` function in Elasticsearch SQL, which calculates the arcsine of a numeric expression. The function returns an angle in radians. The input should be between -1 and 1 (inclusive). The example includes converting to degrees for verification.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_20

LANGUAGE: SQL
CODE:
```
SELECT ROUND(DEGREES(ASIN(0.7071067811865475))) AS "ASIN(0.707)", ROUND(SIN(RADIANS(45)), 3) AS "SIN(45)";
```

----------------------------------------

TITLE: Listing Migrated Backing Indices (Console)
DESCRIPTION: Queries the data stream API to list the backing indices associated with a specified data stream (`my-data-stream`), filtering the output to show only the index names. Used to verify which indices belong to the stream after reindexing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reindex-data-stream.md#_snippet_7

LANGUAGE: console
CODE:
```
GET _data_stream/my-data-stream?filter_path=data_streams.indices.index_name

```

----------------------------------------

TITLE: Keyed Range Aggregation in Elasticsearch
DESCRIPTION: Shows how to use the 'keyed' flag to return range buckets as a hash instead of an array.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-range-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET sales/_search
{
  "aggs": {
    "price_ranges": {
      "range": {
        "field": "price",
        "keyed": true,
        "ranges": [
          { "to": 100 },
          { "from": 100, "to": 200 },
          { "from": 200 }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Calculating Cube Root with CBRT Function in ESQL
DESCRIPTION: This snippet demonstrates the use of the CBRT function in ESQL to calculate the cube root of a number. It creates a row with a double value and applies the CBRT function to it.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/cbrt.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW d = 1000.0
| EVAL c = CBRT(d)
```

----------------------------------------

TITLE: Setting Default GCE Project
DESCRIPTION: Sets the default Google Cloud project ID for future gcloud commands. This configuration allows you to work with your cloud resources without specifying the project ID in each command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-long.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
gcloud config set project es-cloud
```

----------------------------------------

TITLE: Comparing Histogram Calculation Methods in Elasticsearch
DESCRIPTION: This code demonstrates two methods for calculating histogram buckets for ranges in Elasticsearch: the precise method using actual document values and the approximate method using encoded values. It shows the pros and cons of each approach.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/repository-gcs/licenses/google-cloud-NOTICE.txt#2025-04-21_snippet_2

LANGUAGE: java
CODE:
```
// precise histogram, uses the actual values from the document
for (int doc = 0; doc < n; doc++) {
  int value = getValue(doc);
  int bucket = value / interval;
  ++counts[bucket];
}

// approximate histogram, uses the encoded values
for (int doc = 0; doc < n; doc++) {
  int slot = getSlot(doc);
  int approxValue = decodeSlot(slot);
  int bucket = approxValue / interval;
  ++counts[bucket];
}
```

----------------------------------------

TITLE: Example Connector Service Configuration YAML
DESCRIPTION: Illustrates a sample `config.yml` structure for the Elastic Connector Service, specifying Elasticsearch host, API key, and details for a specific connector instance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-ms-sql.md#_snippet_3

LANGUAGE: yaml
CODE:
```
# When connecting to your cloud deployment you should edit the host value
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: mssql
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA> # Optional. If not provided, the connector will use the elasticsearch.api_key instead
```

----------------------------------------

TITLE: Simple Pattern Tokenizer Output Example
DESCRIPTION: The output example shows the terms produced by the simple pattern tokenizer when configured to recognize three-digit numbers. This output is generated from the previously configured Elasticsearch analyzer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-simplepattern-tokenizer.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
[ 786, 335, 514 ]
```

----------------------------------------

TITLE: Analyzing Text with CJK Bigram Token Filter in Elasticsearch
DESCRIPTION: This example demonstrates how the CJK bigram token filter works using the analyze API. It tokenizes a Japanese text sample and forms bigrams from the tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-cjk-bigram-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer" : "standard",
  "filter" : ["cjk_bigram"],
  "text" : "東京都は、日本の首都であり"
}
```

----------------------------------------

TITLE: Creating an API Key for the Zoom Connector
DESCRIPTION: API call to generate a security API key with the necessary permissions for the connector to access and modify Elasticsearch indices.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-zoom.md#2025-04-22_snippet_1

LANGUAGE: console
CODE:
```
POST /_security/api_key
{
  "name": "connector_name-connector-api-key",
  "role_descriptors": {
    "connector_name-connector-role": {
      "cluster": [
        "monitor",
        "manage_connector"
      ],
      "indices": [
        {
          "names": [
            "index_name",
            ".search-acl-filter-index_name",
            ".elastic-connectors*"
          ],
          "privileges": [
            "all"
          ],
          "allow_restricted_indices": false
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Indexing WKT Circle with Circle Processor
DESCRIPTION: This example shows how to index a document containing a circle defined in Well-Known Text (WKT) format and retrieve the resulting polygon. The circle processor automatically converts the WKT circle to a WKT polygon representation based on the error distance configured in the pipeline.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/ingest-circle-processor.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT circles/_doc/1?pipeline=polygonize_circles
{
  "circle": "CIRCLE (30 10 40)"
}

GET circles/_doc/1
```

----------------------------------------

TITLE: Retrieving Flattened Fields Example
DESCRIPTION: Example demonstrating how to retrieve specific subfields from a flattened field using the fields parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/flattened.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "flattened_field": {
        "type": "flattened"
      }
    }
  }
}

PUT my-index-000001/_doc/1?refresh=true
{
  "flattened_field" : {
    "subfield" : "value"
  }
}

POST my-index-000001/_search
{
  "fields": ["flattened_field.subfield"],
  "_source": false
}
```

----------------------------------------

TITLE: Wildcard Queries in YAML
DESCRIPTION: This snippet demonstrates the usage of wildcard searches in KQL, allowing for pattern matching within fields. It includes an explanation of the default restriction on leading wildcards and the relevant advanced setting for changes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/kql.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
http.response.status_code: 4*
```

----------------------------------------

TITLE: Configuring Notion Connector in YAML
DESCRIPTION: Example YAML configuration for the Notion connector when running as a self-managed connector using Docker. This configuration specifies the Elasticsearch host, API key, connector ID, and service type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-notion.md#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: notion
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA> # Optional. If not provided, the connector will use the elasticsearch.api_key instead
```

----------------------------------------

TITLE: Creating Custom Analyzer with Hyphenation Decompounder
DESCRIPTION: Example of creating a custom analyzer using the hyphenation_decompounder filter with specific configuration for word list path, hyphenation patterns, and maximum subword size.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-hyp-decomp-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT hyphenation_decompound_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "standard_hyphenation_decompound": {
          "tokenizer": "standard",
          "filter": [ "22_char_hyphenation_decompound" ]
        }
      },
      "filter": {
        "22_char_hyphenation_decompound": {
          "type": "hyphenation_decompounder",
          "word_list_path": "analysis/example_word_list.txt",
          "hyphenation_patterns_path": "analysis/hyphenation_patterns.xml",
          "max_subword_size": 22
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Max Bucket Aggregation Response Example
DESCRIPTION: Sample response showing the aggregation results including monthly sales buckets and the maximum monthly sales value with corresponding keys.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-max-bucket-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console-result
CODE:
```
{
   "took": 11,
   "timed_out": false,
   "_shards": ...,
   "hits": ...,
   "aggregations": {
      "sales_per_month": {
         "buckets": [
            {
               "key_as_string": "2015/01/01 00:00:00",
               "key": 1420070400000,
               "doc_count": 3,
               "sales": {
                  "value": 550.0
               }
            },
            {
               "key_as_string": "2015/02/01 00:00:00",
               "key": 1422748800000,
               "doc_count": 2,
               "sales": {
                  "value": 60.0
               }
            },
            {
               "key_as_string": "2015/03/01 00:00:00",
               "key": 1425168000000,
               "doc_count": 2,
               "sales": {
                  "value": 375.0
               }
            }
         ]
      },
      "max_monthly_sales": {
          "keys": ["2015/01/01 00:00:00"],
          "value": 550.0
      }
   }
}
```

----------------------------------------

TITLE: Handling Missing Values in Rare Terms Aggregation
DESCRIPTION: Demonstrates how to handle documents with missing values in rare terms aggregation by specifying a default value 'N/A'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-rare-terms-aggregation.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET /_search
{
  "aggs": {
    "genres": {
      "rare_terms": {
        "field": "genre",
        "missing": "N/A"
      }
    }
  }
}
```

----------------------------------------

TITLE: Adding Elasticsearch Data Source to TDVT
DESCRIPTION: Command to add an Elasticsearch data source configuration to TDVT for testing. This generates the necessary test configuration files.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/connectors/tableau/tdvt/README.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
$TDVT action --add_ds elastic
```

----------------------------------------

TITLE: Response from ja_stop Token Filter Analysis
DESCRIPTION: This snippet shows the response from the _analyze endpoint when using the custom analyzer with ja_stop filter. It demonstrates that the stopword 'ストップ' has been removed, leaving only the non-stopword token '消える' in the result.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-stop.md#2025-04-21_snippet_1

LANGUAGE: console-result
CODE:
```
{
  "tokens" : [ {
    "token" : "消える",
    "start_offset" : 5,
    "end_offset" : 8,
    "type" : "word",
    "position" : 2
  } ]
}
```

----------------------------------------

TITLE: Declaring Void Return Type in Painless Function
DESCRIPTION: This snippet illustrates the use of the `void` keyword in a Painless function signature to indicate that the function does not return a value. The example shows a simple function `addToList` that modifies a list passed as an argument by adding an element to it.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-types.md#_snippet_8

LANGUAGE: Painless
CODE:
```
void addToList(List l, def d) {
    l.add(d);
}
```

----------------------------------------

TITLE: Analyzing Text with Fingerprint Filter
DESCRIPTION: Example of using the analyze API with fingerprint filter to process text input. The filter transforms 'zebra jumps over resting resting dog' into a single sorted, deduplicated token.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-fingerprint-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET _analyze
{
  "tokenizer" : "whitespace",
  "filter" : ["fingerprint"],
  "text" : "zebra jumps over resting resting dog"
}
```

----------------------------------------

TITLE: Year Methods and Fields
DESCRIPTION: Lists the methods and fields available in the java.time.Year class. It focuses on methods for creating, parsing, and manipulating Year objects, including functionalities for comparing years, formatting, retrieving values, and performing arithmetic operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.time.txt#2025-04-21_snippet_13

LANGUAGE: java
CODE:
```
"class java.time.Year {
  int MAX_VALUE
  int MIN_VALUE
  LocalDate atDay(int)
  YearMonth atMonth(int)
  LocalDate atMonthDay(MonthDay)
  int compareTo(Year)
  String format(DateTimeFormatter)
  Year from(TemporalAccessor)
  int getValue()
  boolean isAfter(Year)
  boolean isLeap()
  boolean isLeap(long)
  boolean isValidMonthDay(MonthDay)
  int length()
  Year minus(TemporalAmount)
  Year minus(long,TemporalUnit)
  Year minusYears(long)
  Year of(int)
  Year parse(CharSequence)
  Year parse(CharSequence,DateTimeFormatter)
  Year plus(TemporalAmount)
  Year plus(long,TemporalUnit)
  Year plusYears(long)
  Year with(TemporalAdjuster)
  Year with(TemporalField,long)
}"
```

----------------------------------------

TITLE: Implicit Boxing/Unboxing in Painless
DESCRIPTION: Demonstrates implicit boxing and unboxing between primitive types and their corresponding reference types in Painless. It highlights how boxing/unboxing occurs during operations like adding an integer to a `List` and retrieving an integer from a `List`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-casting.md#2025-04-21_snippet_10

LANGUAGE: painless
CODE:
```
List l = new ArrayList();       <1>
l.add(1);                       <2>
Integer I = Integer.valueOf(0); <3>
int i = l.get(i);               <4>
```

----------------------------------------

TITLE: Enabling _size field mapping in Elasticsearch Console
DESCRIPTION: This snippet demonstrates how to add or update the mapping for an index to enable the `_size` field. The `_size` field stores the original size of the document source in bytes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/mapper-size-usage.md#_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "_size": {
      "enabled": true
    }
  }
}
```

----------------------------------------

TITLE: Calculating Power with Integer Exponent in ESQL
DESCRIPTION: This snippet demonstrates using the POW function to calculate the power of a number with an integer exponent. It uses a base of 2.0 and an exponent of 2 to calculate 2 squared.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/pow.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW base = 2.0, exponent = 2
| EVAL result = POW(base, exponent)
```

----------------------------------------

TITLE: Synthetic Source Geopoint Example
DESCRIPTION: Demonstration of synthetic source functionality with geo_point fields, showing how values are sorted and reduced to stored precision.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-point.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "point": { "type": "geo_point" }
    }
  }
}
PUT idx/_doc/1
{
  "point": [
    {"lat":-90, "lon":-80},
    {"lat":10, "lon":30}
  ]
}
```

----------------------------------------

TITLE: Analysis Predicate Context Variables and Types
DESCRIPTION: Defines the available variables and their types in the analysis predicate context. Includes token properties like term, position, offsets, and type information. The script must return a boolean indicating whether the current token matches the predicate.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-analysis-predicate-context.md#2025-04-21_snippet_0

LANGUAGE: painless
CODE:
```
// Available variables:
Map params;                    // read-only user parameters
CharSequence token.term;        // token characters
int token.position;            // token position
int token.positionIncrement;   // position increment
int token.positionLength;      // position length
int token.startOffset;         // start offset
int token.endOffset;           // end offset
String token.type;             // token type
boolean token.keyword;         // keyword flag

// Must return:
boolean                        // whether token matches predicate
```

----------------------------------------

TITLE: Executing Percolate Query
DESCRIPTION: Example of executing a percolate query against stored queries via an alias.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/percolator.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET /queries/_search
{
  "query": {
    "percolate" : {
      "field" : "query",
      "document" : {
        "body" : "fox jumps over the lazy dog"
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating an API Key for Notion Connector
DESCRIPTION: Example of creating an API key for the Notion connector using the Elasticsearch API. This key grants necessary permissions for the connector to function, including monitor and manage_connector privileges.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-notion.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /_security/api_key
{
  "name": "connector_name-connector-api-key",
  "role_descriptors": {
    "connector_name-connector-role": {
      "cluster": [
        "monitor",
        "manage_connector"
      ],
      "indices": [
        {
          "names": [
            "index_name",
            ".search-acl-filter-index_name",
            ".elastic-connectors*"
          ],
          "privileges": [
            "all"
          ],
          "allow_restricted_indices": false
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Salary Range Histogram in ESQL
DESCRIPTION: Creates a histogram of employee salaries using numeric bucketing with 20 target buckets across a salary range.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/bucket.md#2025-04-21_snippet_4

LANGUAGE: esql
CODE:
```
FROM employees
| STATS COUNT(*) by bs = BUCKET(salary, 20, 25324, 74999)
| SORT bs
```

----------------------------------------

TITLE: EQL Search Response in Elasticsearch
DESCRIPTION: This snippet shows the response format for an EQL search. It includes metadata about the search and the matching events in the 'hits' object.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "is_partial": false,
  "is_running": false,
  "took": 60,
  "timed_out": false,
  "hits": {
    "total": {
      "value": 2,
      "relation": "eq"
    },
    "events": [
      {
        "_index": ".ds-my-data-stream-2099.12.07-000001",
        "_id": "OQmfCaduce8zoHT93o4H",
        "_source": {
          "@timestamp": "2099-12-07T11:07:09.000Z",
          "event": {
            "category": "process",
            "id": "aR3NWVOs",
            "sequence": 4
          },
          "process": {
            "pid": 2012,
            "name": "regsvr32.exe",
            "command_line": "regsvr32.exe  /s /u /i:https://...RegSvr32.sct scrobj.dll",
            "executable": "C:\\Windows\\System32\\regsvr32.exe"
          }
        }
      },
      {
        "_index": ".ds-my-data-stream-2099.12.07-000001",
        "_id": "xLkCaj4EujzdNSxfYLbO",
        "_source": {
          "@timestamp": "2099-12-07T11:07:10.000Z",
          "event": {
            "category": "process",
            "id": "GTSmSqgz0U",
            "sequence": 6,
            "type": "termination"
          },
          "process": {
            "pid": 2012,
            "name": "regsvr32.exe",
            "executable": "C:\\Windows\\System32\\regsvr32.exe"
          }
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Example Result of Adjacency Matrix Aggregation - Elasticsearch JSON
DESCRIPTION: This JSON output shows the result of the 'interactions' adjacency matrix aggregation executed in the example. It contains a 'buckets' array listing the non-empty intersection buckets along with their keys (filter names or combined filter names using '&') and the count of documents ('doc_count') that matched each bucket's filters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-adjacency-matrix-aggregation.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  "took": 9,
  "timed_out": false,
  "_shards": ...,
  "hits": ...,
  "aggregations": {
    "interactions": {
      "buckets": [
        {
          "key":"grpA",
          "doc_count": 2
        },
        {
          "key":"grpA&grpB",
          "doc_count": 1
        },
        {
          "key":"grpB",
          "doc_count": 2
        },
        {
          "key":"grpB&grpC",
          "doc_count": 1
        },\n        {
          "key":"grpC",
          "doc_count": 1
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Adding Documents to Elasticsearch Index for Version 6 in JSON
DESCRIPTION: Inserts a document into the Elasticsearch index for version 6, including title, content, and created_at fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/qa/repository-old-versions-compatibility/src/javaRestTest/resources/README.md#2025-04-21_snippet_10

LANGUAGE: json
CODE:
```
POST /index/_doc
{
  "title": "Title 5",
  "content": "Elasticsearch is a powerful search engine.",
  "created_at": "2024-12-16"
}
```

----------------------------------------

TITLE: Verifying Elasticsearch Index Version Result (Console Result)
DESCRIPTION: Shows the output of the API call to get index settings, specifically the creation version. Confirms that the specified migrated index was created with Elasticsearch version 8.18.0, indicating a successful upgrade.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reindex-data-stream.md#_snippet_10

LANGUAGE: console-result
CODE:
```
{
  ".migrated-ds-my-data-stream-2025.01.23-000001": {
    "settings": {
      "index": {
        "version": {
          "created_string": "8.18.0"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Regular Expression Query with Double-Escaped Backslash
DESCRIPTION: Example of a regexp query that matches documents containing backslashes, showing the double-escaping required in JSON.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/regexp-syntax.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET my-index-000001/_search
{
  "query": {
    "regexp": {
      "my_field.keyword": "a\\\\.*"
    }
  }
}
```

----------------------------------------

TITLE: With Runs Using By Keyword
DESCRIPTION: Example showing how to combine 'with runs' statement with the 'by' keyword.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_23

LANGUAGE: eql
CODE:
```
sequence
  [ process where event.type == "creation" ] by process.executable
  [ library where process.name == "regsvr32.exe" ] by dll.path with runs=3
```

----------------------------------------

TITLE: IP Prefix Aggregation with Appended Prefix Length
DESCRIPTION: Shows IP prefix aggregation with the prefix length appended to the IP address keys in the response.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-ipprefix-aggregation.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET /network-traffic/_search
{
  "size": 0,
  "aggs": {
    "ipv4-subnets": {
      "ip_prefix": {
        "field": "ipv4",
        "prefix_length": 24,
        "append_prefix_length": true
      }
    }
  }
}
```

----------------------------------------

TITLE: Analyzing Text with Kuromoji Romaji Readingform in Elasticsearch
DESCRIPTION: This snippet illustrates the use of the _analyze API to test the romaji_analyzer on the Japanese text "寿司". It shows the conversion of kanji to romaji reading form.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-readingform.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET kuromoji_sample/_analyze
{
  "analyzer": "romaji_analyzer",
  "text": "寿司"
}
```

----------------------------------------

TITLE: Converting to Date Nanos and Filtering in ESQL
DESCRIPTION: This ESQL query demonstrates the use of TO_DATE_NANOS function to convert a string timestamp to a nanosecond-resolution date value. It filters records based on both nanosecond and millisecond precision dates, then sorts the results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_date_nanos.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM date_nanos
| WHERE MV_MIN(nanos) < TO_DATE_NANOS("2023-10-23T12:27:28.948Z")
    AND millis > "2000-01-01"
| SORT nanos DESC
```

----------------------------------------

TITLE: Initializing Index and Querying Geo-bounds for Geo_point Fields in Elasticsearch
DESCRIPTION: This snippet demonstrates creating an index with a geo_point field, inserting sample data, and performing a geo-bounds aggregation. It shows how to specify the field and use the wrap_longitude parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-geobounds-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /museums
{
  "mappings": {
    "properties": {
      "location": {
        "type": "geo_point"
      }
    }
  }
}

POST /museums/_bulk?refresh
{"index":{"_id":1}}
{"location": "POINT (4.912350 52.374081)", "name": "NEMO Science Museum"}
{"index":{"_id":2}}
{"location": "POINT (4.901618 52.369219)", "name": "Museum Het Rembrandthuis"}
{"index":{"_id":3}}
{"location": "POINT (4.914722 52.371667)", "name": "Nederlands Scheepvaartmuseum"}
{"index":{"_id":4}}
{"location": "POINT (4.405200 51.222900)", "name": "Letterenhuis"}
{"index":{"_id":5}}
{"location": "POINT (2.336389 48.861111)", "name": "Musée du Louvre"}
{"index":{"_id":6}}
{"location": "POINT (2.327000 48.860000)", "name": "Musée d'Orsay"}

POST /museums/_search?size=0
{
  "query": {
    "match": { "name": "musée" }
  },
  "aggs": {
    "viewport": {
      "geo_bounds": {
        "field": "location",    <1>
        "wrap_longitude": true  <2>
      }
    }
  }
}
```

----------------------------------------

TITLE: Converting Text Fields to Keyword with EVAL (ESQL)
DESCRIPTION: Shows how ESQL functions and commands like `EVAL` can implicitly convert `text` fields into `keyword` fields when processed. In this example, the `GREATEST` function, applied to potentially `text` fields (`field1`, `field2`, `field3`), results in the output column `greatest` being of type `keyword`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/limitations.md#_snippet_5

LANGUAGE: esql
CODE:
```
| FROM index
| EVAL greatest = GREATEST(field1, field2, field3)
```

----------------------------------------

TITLE: Calculating Arcsine Using ASIN Function in ESQL
DESCRIPTION: Demonstrates how to calculate the arcsine (inverse sine) of a decimal value using the ASIN function in Elasticsearch SQL. The example shows the calculation of ASIN(0.9) which returns approximately 1.12 radians.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/asin.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=.9
| EVAL asin=ASIN(a)
```

----------------------------------------

TITLE: Using Optional 'by' Fields in EQL
DESCRIPTION: Demonstrates how to use the '?' operator to mark 'by' fields as optional in EQL sequences, allowing for null join keys.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_15

LANGUAGE: eql
CODE:
```
sequence by process.pid, ?process.entity_id
  [process where process.name == "regsvr32.exe"]
  [network where true]
```

----------------------------------------

TITLE: Converting Degrees to Radians using TO_RADIANS Function in ESQL
DESCRIPTION: Uses the TO_RADIANS function to convert an array of degree values (90, 180, 270) to their equivalent radian measurements. The result shows the input degrees array and the corresponding radians array as output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_radians.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW deg = [90.0, 180.0, 270.0]
| EVAL rad = TO_RADIANS(deg)
```

----------------------------------------

TITLE: Decoding Geohash to Bounding Box using Node.js
DESCRIPTION: This JavaScript snippet demonstrates how to use the node-geohash library to decode a geohash into a bounding box, which can be useful for systems that don't support geohashes directly.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-geohashgrid-aggregation.md#2025-04-21_snippet_4

LANGUAGE: js
CODE:
```
var geohash = require('ngeohash');

// bbox will contain [ 52.03125, 4.21875, 53.4375, 5.625 ]
//                   [   minlat,  minlon,  maxlat, maxlon]
var bbox = geohash.decode_bbox('u17');
```

----------------------------------------

TITLE: Byte Type Compound Assignment
DESCRIPTION: Shows compound assignment with byte type demonstrating implicit casting behavior.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-general.md#2025-04-21_snippet_10

LANGUAGE: painless
CODE:
```
byte b = 1;
b += 2;
```

----------------------------------------

TITLE: Using CURTIME Function Default Precision in Elasticsearch SQL
DESCRIPTION: This snippet demonstrates fetching the current time using the `CURTIME()` function with default precision (milliseconds) in Elasticsearch SQL. It retrieves the time the query reached the server and aliases it as `result`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_16

LANGUAGE: SQL
CODE:
```
SELECT CURTIME() AS result;
```

----------------------------------------

TITLE: Converting WKT Strings to Cartesian Shapes in ESQL
DESCRIPTION: This example demonstrates using the TO_CARTESIANSHAPE function to convert WKT (Well-Known Text) strings into cartesian shape objects. It processes multiple WKT strings by expanding them using MV_EXPAND and then converting each to a cartesian shape.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_cartesianshape.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW wkt = ["POINT(4297.11 -1475.53)", "POLYGON ((3339584.72 1118889.97, 4452779.63 4865942.27, 2226389.81 4865942.27, 1113194.90 2273030.92, 3339584.72 1118889.97))"] 
| MV_EXPAND wkt
| EVAL geom = TO_CARTESIANSHAPE(wkt)
```

----------------------------------------

TITLE: Configuring Fingerprint Analyzer with Stopwords
DESCRIPTION: Shows how to configure a custom fingerprint analyzer using English stopwords and testing it with sample text.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-fingerprint-analyzer.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_fingerprint_analyzer": {
          "type": "fingerprint",
          "stopwords": "_english_"
        }
      }
    }
  }
}

POST my-index-000001/_analyze
{
  "analyzer": "my_fingerprint_analyzer",
  "text": "Yes yes, Gödel said this sentence is consistent and."
}
```

LANGUAGE: text
CODE:
```
[ consistent godel said sentence yes ]
```

----------------------------------------

TITLE: Extract Month Name using MONTH_NAME in Elasticsearch SQL
DESCRIPTION: Demonstrates using the MONTH_NAME function to extract the name of the month from a TIMESTAMP literal '2018-02-19T10:23:27Z'. The function returns a string like 'February'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_77

LANGUAGE: SQL
CODE:
```
SELECT MONTH_NAME(CAST('2018-02-19T10:23:27Z' AS TIMESTAMP)) AS month;
```

----------------------------------------

TITLE: Exporting Certificate from PKCS#12 to PEM
DESCRIPTION: Function to export just the certificate from a PKCS#12 file to PEM format using keytool's exportcert command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/src/test/resources/org/elasticsearch/xpack/ssl/SSLErrorMessageTests/README.txt#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
function p12-export-cert() {
    local P12File="$1"
    local P12Pass="$2"
    local P12Name="$3"
    local PemFile="$4"
    
    keytool -exportcert -keystore "${PWD}/$P12File" -storepass "$P12Pass" -alias "$P12Name" \
        -rfc -file "${PWD}/$PemFile" 
}
```

----------------------------------------

TITLE: Defining Stemming Rules for English Words in Elasticsearch
DESCRIPTION: This snippet defines stemming rules for English words. It shows how to convert 'running' and 'runs' to the base form 'run', and leaves 'stemmer' unchanged.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/src/test/cluster/config/analysis/stemmer_override.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
running, runs => run

stemmer => stemmer
```

----------------------------------------

TITLE: Combined Fields Query Term-Centric Execution Example
DESCRIPTION: Shows how the combined_fields query is internally executed with a term-centric approach across specified fields
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-combined-fields-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "combined_fields" : {
      "query":      "database systems",
      "fields":     [ "title", "abstract"],
      "operator":   "and"
    }
  }
}
```

----------------------------------------

TITLE: Importing Certificates into Single JKS Keystore
DESCRIPTION: This snippet imports the certificates into a single Java Keystore (JKS), allowing for separate key-password management for each certificate.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/libs/ssl-config/src/test/resources/certs/README.txt#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
# 10. Import Certs into single JKS keystore with separate key-password

for Cert in cert1 cert2 
do
    keytool -importkeystore -noprompt \
            -srckeystore $Cert/$Cert.p12 -srcstoretype PKCS12 -srcstorepass p12-pass  \
            -destkeystore cert-all/certs.jks -deststoretype jks -deststorepass jks-pass
    keytool -keypasswd -keystore cert-all/certs.jks -alias $Cert -keypass p12-pass -new key-pass -storepass jks-pass
done
```

----------------------------------------

TITLE: ESQL Numeric Type Mapping Table
DESCRIPTION: Markdown table showing type conversion mappings for numeric types in ESQL functions. Documents that double, integer and long input types all result in double output type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/types/median.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| number | result |
| --- | --- |
| double | double |
| integer | double |
| long | double |
```

----------------------------------------

TITLE: Using TODAY Function in Elasticsearch SQL
DESCRIPTION: This snippet shows the basic usage of the TODAY function. It returns the date when the current query reached the server. The function takes no arguments and always returns the same date for all occurrences within the same query, functionally identical to CURRENT_DATE().
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_84

LANGUAGE: SQL
CODE:
```
SELECT TODAY() AS result;
```

----------------------------------------

TITLE: Example Identifier Variations in Painless
DESCRIPTION: Demonstrates various valid identifier patterns in Painless, showing different combinations of letters, numbers, and underscores that conform to the identifier grammar rules.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-identifiers.md#2025-04-21_snippet_1

LANGUAGE: painless
CODE:
```
a
Z
id
list
list0
MAP25
_map25
Map_25
```

----------------------------------------

TITLE: Float Literal Examples
DESCRIPTION: Demonstrates various floating-point literal notations including decimal and exponential forms with type specifiers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-literals.md#2025-04-21_snippet_3

LANGUAGE: painless
CODE:
```
0.0      
1E6      
0.977777 
-126.34  
89.9F    
```

----------------------------------------

TITLE: Using filler_token with Position Gaps (Console)
DESCRIPTION: Shows how the `filler_token` parameter is used when the `shingle` filter encounters position gaps in the token stream, often caused by upstream filters like the `stop` filter. The specified filler token ('+' in this case) replaces the empty position in shingles.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-shingle-tokenfilter.md#_snippet_4

LANGUAGE: Console
CODE:
```
GET /_analyze
{
  "tokenizer": "whitespace",
  "filter": [
    {
      "type": "stop",
      "stopwords": [ "a" ]
    },
    {
      "type": "shingle",
      "filler_token": "+"
    }
  ],
  "text": "fox jumps a lazy dog"
}
```

----------------------------------------

TITLE: Implementing SecureSettings Interface in Java for Elasticsearch
DESCRIPTION: This code defines the SecureSettings interface, which provides methods for accessing secure string and file settings. It includes methods for retrieving secure strings, files, and setting names, as well as creating new instances.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/licenses/accessors-smart-NOTICE.txt#2025-04-22_snippet_1

LANGUAGE: Java
CODE:
```
public interface SecureSettings extends Closeable {
    SecureString getString(String setting);
    InputStream getFile(String setting);
    Set<String> getSettingNames();
    SecureSettings clone();
    void close();

    static SecureSettings EMPTY = new SecureSettings() {
        @Override
        public SecureString getString(String setting) {
            return null;
        }

        @Override
        public InputStream getFile(String setting) {
            return null;
        }

        @Override
        public Set<String> getSettingNames() {
            return Collections.emptySet();
        }

        @Override
        public SecureSettings clone() {
            return this;
        }

        @Override
        public void close() {}
    };
}
```

----------------------------------------

TITLE: Sample Advanced Sync Rules for GMail Connector
DESCRIPTION: This JSON snippet specifies advanced sync rules for a GMail connector using GMail advanced search syntax. It filters messages based on given criteria such as date and sender. No additional dependencies are required, but it assumes the connector has access to the necessary GMail account and permissions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-gmail.md#2025-04-21_snippet_4

LANGUAGE: js
CODE:
```
{
  \"messages\": [
    \"before:2021/10/10\",
    \"from:amy\"
  ]
}
```

----------------------------------------

TITLE: Sample Docker Configuration for GitHub Connector
DESCRIPTION: An example yaml configuration file snippet for Docker deployment where Elasticsearch and Kibana run as Dockerized versions, including essential settings like host and API key.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-github.md#2025-04-21_snippet_4

LANGUAGE: yaml
CODE:
```

```

----------------------------------------

TITLE: Example SSL Certificate Content
DESCRIPTION: Provides an example of the format for the `ssl_ca` configuration field, which contains the content of an SSL certificate in PEM format.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-ms-sql.md#_snippet_5

LANGUAGE: text
CODE:
```
-----BEGIN CERTIFICATE-----
MIID+jCCAuKgAwIBAgIGAJJMzlxLMA0GCSqGSIb3DQEBCwUAMHoxCzAJBgNVBAYT
...
7RhLQyWn2u00L7/9Omw=
-----END CERTIFICATE-----
```

----------------------------------------

TITLE: Analyzing Text with Decimal Digit Filter in Elasticsearch
DESCRIPTION: Example of using the analyze API with the decimal_digit filter to convert Devanagari numerals to standard digits 0-9. The filter processes text containing mixed numerals and words.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-decimal-digit-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer" : "whitespace",
  "filter" : ["decimal_digit"],
  "text" : "१-one two-२ ३"
}
```

LANGUAGE: text
CODE:
```
[ 1-one, two-2, 3]
```

----------------------------------------

TITLE: Character Distribution Analysis in String Stats
DESCRIPTION: Shows how to retrieve character probability distribution alongside standard string statistics by enabling the show_distribution parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-string-stats-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /my-index-000001/_search?size=0
{
  "aggs": {
    "message_stats": {
      "string_stats": {
        "field": "message.keyword",
        "show_distribution": true
      }
    }
  }
}
```

----------------------------------------

TITLE: New Array Creation in Painless
DESCRIPTION: Shows how to create new arrays using the new array operator 'new []'. Includes examples of single and multi-dimensional array creation with dynamic sizing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-array.md#2025-04-21_snippet_3

LANGUAGE: painless
CODE:
```
int[] x = new int[5];
x = new int[10];
int y = 2;
def z = new def[y][y*2];
```

----------------------------------------

TITLE: Access Granted Event Logging in Elasticsearch
DESCRIPTION: JSON structure for logging successful access attempts by authenticated non-system users.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
{"type":"audit", "timestamp":"2020-12-30T22:30:06,947+0200", "node.id":"0RMNyghkQYCc_gVd1G6tZQ", "event.type":"transport", "event.action":"access_granted", "authentication.type":"REALM", "user.name":"user1", "user.realm":"default_native", "user.roles":["test_role"], "origin.type":"rest", "origin.address":"[::1]:52434", "request.id":"yKOgWn2CRQCKYgZRz3phJw", "action":"indices:data/write/bulk", "request.name":"BulkRequest"}
```

----------------------------------------

TITLE: Executing a Search Query with Script Fields in Elasticsearch
DESCRIPTION: A console command example for executing a search query that applies custom Painless scripts to return calculated fields like 'day-of-week' and 'number-of-actors'. This query requires a mapped index and assumes that the field types are correctly set.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs-mdx/painless/painless-field-context.mdx#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET seats/_search
{
  "size": 2,
  "query": {
    "match_all": {}
  },
  "script_fields": {
    "day-of-week": {
      "script": {
        "source": "doc['datetime'].value.getDayOfWeekEnum().getDisplayName(TextStyle.FULL, Locale.ROOT)"
      }
    },
    "number-of-actors": {
      "script": {
        "source": "doc['actors'].size()"
      }
    }
  }
}
```

----------------------------------------

TITLE: Elasticsearch Rank Evaluation API Response Format
DESCRIPTION: This snippet illustrates the response format of the Elasticsearch Rank Evaluation API. It includes the overall metric score, details for each query, and optional failure information.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-rank-eval.md#2025-04-21_snippet_9

LANGUAGE: js
CODE:
```
{
  "rank_eval": {
    "metric_score": 0.4,                          
      "details": {
      "my_query_id1": {                           
        "metric_score": 0.6,                      
        "unrated_docs": [                         
          {
            "_index": "my-index-000001",
            "_id": "1960795"
          }, ...
        ],
        "hits": [
          {
            "hit": {                              
              "_index": "my-index-000001",
              "_type": "page",
              "_id": "1528558",
              "_score": 7.0556192
            },
            "rating": 1
          }, ...
        ],
        "metric_details": {                       
          "precision": {
            "relevant_docs_retrieved": 6,
            "docs_retrieved": 10
          }
        }
      },
      "my_query_id2": { [... ] }
    },
    "failures": { [... ] }
  }
}
```

----------------------------------------

TITLE: Configure ILM Searchable Snapshot in Cold Phase (Console)
DESCRIPTION: This example configures an Elasticsearch ILM policy named `my_policy` that uses the `searchable_snapshot` action in the `cold` phase. It specifies `backing_repo` as the snapshot repository where the snapshot will be stored before being mounted as a searchable snapshot. This action is typically used to transition indices to lower-cost storage tiers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-searchable-snapshot.md#_snippet_0

LANGUAGE: Console
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "cold": {
        "actions": {
          "searchable_snapshot" : {
            "snapshot_repository" : "backing_repo"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Displaying Supported Types Table in Markdown
DESCRIPTION: This markdown snippet presents a table showing the supported field types, inlist types, and result types for ESQL's AbstractFunctionTestCase. It covers various data types including boolean, geometric shapes, numeric types, and text types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/types/in.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| field | inlist | result |
| --- | --- | --- |
| boolean | boolean | boolean |
| cartesian_point | cartesian_point | boolean |
| cartesian_shape | cartesian_shape | boolean |
| double | double | boolean |
| geo_point | geo_point | boolean |
| geo_shape | geo_shape | boolean |
| integer | integer | boolean |
| ip | ip | boolean |
| keyword | keyword | boolean |
| keyword | text | boolean |
| long | long | boolean |
| text | keyword | boolean |
| text | text | boolean |
| version | version | boolean |
```

----------------------------------------

TITLE: Complex Pipeline for Handling Type Conflicts
DESCRIPTION: Shows a pipeline that first renames the conflicting scalar field before applying the dot expander, since Ingest cannot automatically cast a scalar field to an object field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/dot-expand-processor.md#2025-04-21_snippet_14

LANGUAGE: js
CODE:
```
{
  "processors" : [
    {
      "rename" : {
        "field" : "foo",
        "target_field" : "foo.bar"
      }
    },
    {
      "dot_expander": {
        "field": "foo.bar"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Using Phrase Suggest with Multiple Generators in Elasticsearch
DESCRIPTION: Example of a phrase suggester API call with two direct generators: one using a standard field and another using a reversed field to overcome prefix limitations. The example demonstrates how to use pre_filter and post_filter with reverse analyzers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_7

LANGUAGE: json
CODE:
```
POST test/_search
{
  "suggest": {
    "text" : "obel prize",
    "simple_phrase" : {
      "phrase" : {
        "field" : "title.trigram",
        "size" : 1,
        "direct_generator" : [ {
          "field" : "title.trigram",
          "suggest_mode" : "always"
        }, {
          "field" : "title.reverse",
          "suggest_mode" : "always",
          "pre_filter" : "reverse",
          "post_filter" : "reverse"
        } ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Search and Highlight on comment Field with FVH without matched_fields - Elasticsearch DSL
DESCRIPTION: Searches `index2` using a `query_string` targeting both fields and highlights the `comment` field specifically using the `fvh` type. This request shows the default behavior of the FVH highlighter without combining match information from other fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_15

LANGUAGE: Elasticsearch DSL
CODE:
```
GET index2/_search
{
  "query": {
    "query_string": {
      "query": "running with scissors",
      "fields": ["comment", "comment.english"]
    }
  },
  "highlight": {
    "order": "score",
    "fields": {
      "comment": {
        "type" : "fvh"
      }
    }
  }
}
```

----------------------------------------

TITLE: Geo-bounding Box Query Using Geohash
DESCRIPTION: This snippet queries for documents using geohashes in a geo_bounding_box filter. Inputs include appropriate geohash strings, and outputs comprise documents whose location falls within the bounding box. Geohashes must correspond to the geographic location data to be queried effectively.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-bounding-box-query.md#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
GET my_locations/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_bounding_box": {
          "pin.location": {
            "top_left": "dr5r9ydj2y73",
            "bottom_right": "drj7teegpus6"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Example Query Using Change Point Aggregation (JSON)
DESCRIPTION: Provides a full example demonstrating how to use the `change_point` aggregation in conjunction with a `date_histogram` and an `avg` aggregation to find change points in the average 'bytes' value over time. The query targets the `kibana_sample_data_logs` index.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-change-point-aggregation.md#_snippet_1

LANGUAGE: JSON
CODE:
```
GET kibana_sample_data_logs/_search
{
  "aggs": {
    "date":{ <1>
      "date_histogram": {
        "field": "@timestamp",
        "fixed_interval": "1d"
      },
      "aggs": {
        "avg": { <2>
          "avg": {
            "field": "bytes"
          }
        }
      }
    },
    "change_points_avg": { <3>
      "change_point": {
        "buckets_path": "date>avg" <4>
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating and Querying Date Fields in Elasticsearch
DESCRIPTION: Example showing how to create an index with a date field and insert documents with different date formats (plain date, date with time, and milliseconds-since-epoch). The example also shows how to query and sort by the date field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/date.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "date": {
        "type": "date" <1>
      }
    }
  }
}

PUT my-index-000001/_doc/1
{ "date": "2015-01-01" } <2>

PUT my-index-000001/_doc/2
{ "date": "2015-01-01T12:10:30Z" } <3>

PUT my-index-000001/_doc/3
{ "date": 1420070400001 } <4>

GET my-index-000001/_search
{
  "sort": { "date": "asc"} <5>
}
```

----------------------------------------

TITLE: Customizing Shingle Size via Analyze API (Console)
DESCRIPTION: Shows how to use the `_analyze` API to configure the `shingle` filter with specific minimum and maximum shingle sizes. This example sets `min_shingle_size` to 2 and `max_shingle_size` to 3, resulting in shingles of both 2 and 3 words alongside the original unigrams.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-shingle-tokenfilter.md#_snippet_1

LANGUAGE: Console
CODE:
```
GET /_analyze
{
  "tokenizer": "whitespace",
  "filter": [
    {
      "type": "shingle",
      "min_shingle_size": 2,
      "max_shingle_size": 3
    }
  ],
  "text": "quick brown fox jumps"
}
```

----------------------------------------

TITLE: Configuring Required JWT Claims in YAML
DESCRIPTION: This YAML snippet demonstrates how to configure the 'required_claims' setting for an Elasticsearch JWT realm. It specifies that the JWT must contain claims 'token_use' with the exact value 'id' and 'versions' with the values '1.0' and '2.0'. This ensures that only JWTs with these specific claims and values are accepted by the realm.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/security-settings.md#_snippet_2

LANGUAGE: yaml
CODE:
```
xpack.security.authc.realms.jwt.jwt1:
  required_claims:
    token_use: "id"
    versions: ["1.0", "2.0"]
```

----------------------------------------

TITLE: Saturation Function in Elasticsearch Rank Feature Queries
DESCRIPTION: This snippet demonstrates the use of the saturation function in a rank_feature query to modify relevance scores. The function customizes the score of documents based on the pagerank field and a pivot parameter. This query requires a configured Elasticsearch index with appropriate rank feature fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-rank-feature-query.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /test/_search
{
  "query": {
    "rank_feature": {
      "field": "pagerank",
      "saturation": {
        "pivot": 8
      }
    }
  }
}

GET /test/_search
{
  "query": {
    "rank_feature": {
      "field": "pagerank",
      "saturation": {}
    }
  }
}
```

----------------------------------------

TITLE: ILM Allocate Action with Node Assignment and Replica Settings
DESCRIPTION: Example of combining replica count configuration with node allocation requirements, setting one replica per shard and targeting cold nodes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-allocate.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "warm": {
        "actions": {
          "allocate" : {
            "number_of_replicas": 1,
            "require" : {
              "box_type": "cold"
            }
        }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: IP Prefix Aggregation with Minimum Document Count
DESCRIPTION: Demonstrates IP prefix aggregation that only returns buckets containing at least 3 documents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-ipprefix-aggregation.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET /network-traffic/_search
{
  "size": 0,
  "aggs": {
    "ipv4-subnets": {
      "ip_prefix": {
        "field": "ipv4",
        "prefix_length": 24,
        "min_doc_count": 3
      }
    }
  }
}
```

----------------------------------------

TITLE: Setting custom node attribute in Elasticsearch YAML configuration
DESCRIPTION: Demonstrates how to specify a custom node attribute in the elasticsearch.yml configuration file to enable filtering based on node characteristics.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/shard-allocation.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
node.attr.size: medium
```

----------------------------------------

TITLE: Matching Any Condition in EQL
DESCRIPTION: Demonstrates how to match events solely on event category using the 'where true' condition. Also shows how to match any event using the 'any' keyword combined with 'where true'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_7

LANGUAGE: eql
CODE:
```
file where true
```

LANGUAGE: eql
CODE:
```
any where true
```

----------------------------------------

TITLE: Boxplot Aggregation with Compression in Elasticsearch
DESCRIPTION: This example demonstrates how to use the compression parameter in a boxplot aggregation to control the balance between memory utilization and estimation accuracy.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-boxplot-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET latency/_search
{
  "size": 0,
  "aggs": {
    "load_time_boxplot": {
      "boxplot": {
        "field": "load_time",
        "compression": 200
      }
    }
  }
}
```

----------------------------------------

TITLE: Customizing Case-Insensitive Elision Filter
DESCRIPTION: Example of creating a custom case-insensitive elision filter with specific articles to remove.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-elision-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /elision_case_insensitive_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "default": {
          "tokenizer": "whitespace",
          "filter": [ "elision_case_insensitive" ]
        }
      },
      "filter": {
        "elision_case_insensitive": {
          "type": "elision",
          "articles": [ "l", "m", "t", "qu", "n", "s", "j" ],
          "articles_case": true
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Reconstructed Synthetic _source with Dot Notation Expansion (console-result)
DESCRIPTION: This snippet shows the expected structure of the `_source` document when synthetic `_source` is active and the document with a dot-notation field name (`foo.bar.baz`) is retrieved. The single field is expanded into a nested object structure `{"foo": {"bar": {"baz": 1}}}`, reflecting how dots are interpreted as object paths. This is an output example, not code to be executed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-source-field.md#_snippet_6

LANGUAGE: console-result
CODE:
```
{
  "foo": {
    "bar": {
      "baz": 1
    }
  }
}
```

----------------------------------------

TITLE: Japanese Search Mode Tokenization Example
DESCRIPTION: Example output of kuromoji_tokenizer in search mode showing decompounding of long nouns with compound token synonyms.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-tokenizer.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
関西, 関西国際空港, 国際, 空港
アブラカダブラ
```

----------------------------------------

TITLE: Fetching Documents using SOQL Query
DESCRIPTION: This code snippet demonstrates how to fetch documents from Salesforce using a SOQL query. The expected input is a valid SOQL query string and the output is an array of documents matching the query criteria.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-salesforce.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
[
  {
    "query": "SELECT Id, Name FROM Account",
    "language": "SOQL"
  }
]
```

----------------------------------------

TITLE: Constructing a Bool Query from Match Boolean Prefix Query
DESCRIPTION: This snippet shows the equivalent boolean query that is constructed from the match_bool_prefix query provided earlier. It breaks down the analyzed terms into a should clause with term queries and a prefix query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-match-bool-prefix-query.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
"GET /_search\n{\n  \"query\": {\n    \"bool\" : {\n      \"should\": [\n        { \"term\": { \"message\": \"quick\" }},\n        { \"term\": { \"message\": \"brown\" }},\n        { \"prefix\": { \"message\": \"f\"}}\n      ]\n    }\n  }\n}"
```

----------------------------------------

TITLE: Listing Migrated Backing Indices Result (Console Result)
DESCRIPTION: Displays the output of the API call to list data stream backing indices. It shows the names of the indices, illustrating the `.migrated` prefix applied to indices that have been successfully upgraded.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reindex-data-stream.md#_snippet_8

LANGUAGE: console-result
CODE:
```
{
  "data_streams": [
    {
      "indices": [
        {
          "index_name": ".migrated-ds-my-data-stream-2025.01.23-000003"
        },
        {
          "index_name": ".migrated-ds-my-data-stream-2025.01.23-000002"
        },
        {
          "index_name": ".migrated-ds-my-data-stream-2025.01.23-000001"
        },
        {
          "index_name": ".ds-my-data-stream-2025.01.23-000004"
        }
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Performing Boolean XOR: Painless Example
DESCRIPTION: Demonstrates the use of the XOR operator with boolean types in Painless. It calculates the XOR result, which returns true if one input is true and the other false. Inputs should be boolean values, and the result is a boolean.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_29

LANGUAGE: Painless
CODE:
```
boolean x = false;
boolean y = x ^ true;
y = y ^ x;
```

----------------------------------------

TITLE: Indexing a Document with Programming Languages and Required Matches
DESCRIPTION: This snippet shows how to index a document with a list of programming languages and specifying that 2 matches are required. The example includes a refresh parameter to make the document immediately available for search.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-terms-set-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /job-candidates/_doc/1?refresh
{
  "name": "Jane Smith",
  "programming_languages": [ "c++", "java" ],
  "required_matches": 2
}
```

----------------------------------------

TITLE: Examples of Numeric Literals
DESCRIPTION: Provides examples of different formats for numeric literals supported, including integer, decimal, and scientific notation with an optional exponent marker ('e' or 'E') and negative sign.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-syntax.md#_snippet_6

LANGUAGE: sql
CODE:
```
1969    -- integer notation
3.14    -- decimal notation
.1234   -- decimal notation starting with decimal point
4E5     -- scientific notation (with exponent marker)
1.2e-3  -- scientific notation with decimal point
-.1e2   -- scientific notation starting with the negative sign
```

----------------------------------------

TITLE: Multiplexer Token Filter Analysis Result in Elasticsearch
DESCRIPTION: This snippet shows the response from the _analyze API, demonstrating the output tokens produced by the multiplexer token filter. It includes original, lowercase, and stemmed versions of the input tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-multiplexer-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console-result
CODE:
```
{
  "tokens": [
    {
      "token": "Going",
      "start_offset": 0,
      "end_offset": 5,
      "type": "<ALPHANUM>",
      "position": 0
    },
    {
      "token": "going",
      "start_offset": 0,
      "end_offset": 5,
      "type": "<ALPHANUM>",
      "position": 0
    },
    {
      "token": "go",
      "start_offset": 0,
      "end_offset": 5,
      "type": "<ALPHANUM>",
      "position": 0
    },
    {
      "token": "HOME",
      "start_offset": 6,
      "end_offset": 10,
      "type": "<ALPHANUM>",
      "position": 1
    },
    {
      "token": "home",          <1>
      "start_offset": 6,
      "end_offset": 10,
      "type": "<ALPHANUM>",
      "position": 1
    }
  ]
}
```

----------------------------------------

TITLE: Nori Number Token Filter Analysis Results
DESCRIPTION: This snippet shows the tokens produced by the nori_number filter. The Korean numbers '십만이천오백' and '３.２천' are normalized to '102500' and '3200' respectively, while preserving other tokens like '과'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-nori-number.md#2025-04-21_snippet_1

LANGUAGE: console-result
CODE:
```
{
  "tokens" : [{
    "token" : "102500",
    "start_offset" : 0,
    "end_offset" : 6,
    "type" : "word",
    "position" : 0
  }, {
    "token" : "과",
    "start_offset" : 6,
    "end_offset" : 7,
    "type" : "word",
    "position" : 1
  }, {
    "token" : "3200",
    "start_offset" : 8,
    "end_offset" : 12,
    "type" : "word",
    "position" : 2
  }]
}
```

----------------------------------------

TITLE: Mapping Index with Multifields (comment, comment.english) for FVH - Elasticsearch DSL
DESCRIPTION: Creates an index named `index2` with a `comment` field and a `comment.english` sub-field, similar to `index1`. Critically, it sets `term_vector` to `with_positions_offsets` for both fields, a requirement for the Fast Vector Highlighter (FVH).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_13

LANGUAGE: Elasticsearch DSL
CODE:
```
PUT index2
{
  "mappings": {
    "properties": {
      "comment": {
        "type": "text",
        "analyzer": "standard",
        "term_vector": "with_positions_offsets",
        "fields": {
          "english": {
            "type": "text",
            "analyzer": "english",
            "term_vector": "with_positions_offsets"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: String Literal Grammar Specification
DESCRIPTION: Defines the grammar rules for string literals in Painless, supporting both single and double quotes with escape sequences.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-literals.md#2025-04-21_snippet_4

LANGUAGE: text
CODE:
```
STRING: ( '"'  ( '\\"'  | '\\\\' | ~[\\" ] )*? '"'  )
      | ( '\'' ( '\\\'' | '\\\\' | ~[\\' ] )*? '\'' );
```

----------------------------------------

TITLE: Indexing Pre-aggregated Histogram Data in Elasticsearch
DESCRIPTION: This snippet shows how to create an index with a histogram field and index pre-aggregated histogram data for latency metrics across different networks.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-histogram-aggregation.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
PUT metrics_index
{
  "mappings": {
    "properties": {
      "network": {
        "properties": {
          "name": {
            "type": "keyword"
          }
        }
      },
      "latency_histo": {
         "type": "histogram"
      }
    }
  }
}

PUT metrics_index/_doc/1?refresh
{
  "network.name" : "net-1",
  "latency_histo" : {
      "values" : [1, 3, 8, 12, 15],
      "counts" : [3, 7, 23, 12, 6]
   }
}

PUT metrics_index/_doc/2?refresh
{
  "network.name" : "net-2",
  "latency_histo" : {
      "values" : [1, 6, 8, 12, 14],
      "counts" : [8, 17, 8, 7, 6]
   }
}
```

----------------------------------------

TITLE: Defining Double Class Methods and Constants in Java
DESCRIPTION: This snippet shows the public methods and constants of the java.lang.Double class. It includes constants like MAX_VALUE and MIN_VALUE, and methods for comparing, parsing, and manipulating double values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.lang.txt#2025-04-21_snippet_9

LANGUAGE: Java
CODE:
```
class java.lang.Double {
  int BYTES
  int MAX_EXPONENT
  double MAX_VALUE
  int MIN_EXPONENT
  double MIN_NORMAL
  double MIN_VALUE
  double NaN
  double NEGATIVE_INFINITY
  double POSITIVE_INFINITY
  int SIZE
  int compare(double,double)
  int compareTo(Double)
  long doubleToLongBits(double)
  long doubleToRawLongBits(double)
  int hashCode(double)
  boolean isFinite(double)
  boolean isInfinite()
  boolean isInfinite(double)
  boolean isNaN()
  boolean isNaN(double)
  double longBitsToDouble(long)
  double max(double,double)
  double min(double,double)
  double parseDouble(String)
  double sum(double,double)
  String toHexString(double)
  String toString(double)
  Double valueOf(double)
}
```

----------------------------------------

TITLE: Customize stop filter with custom stopwords
DESCRIPTION: This snippet creates a custom `stop` filter that removes only the stop words `and`, `is`, and `the`, and is case-insensitive. It configures a new index `my-index-000001` with the custom filter `my_custom_stop_words_filter` to be used with the default analyzer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "default": {
          "tokenizer": "whitespace",
          "filter": [ "my_custom_stop_words_filter" ]
        }
      },
      "filter": {
        "my_custom_stop_words_filter": {
          "type": "stop",
          "ignore_case": true,
          "stopwords": [ "and", "is", "the" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Setting ignore_malformed for Integer Fields in Elasticsearch Mapping
DESCRIPTION: This snippet demonstrates how to set the ignore_malformed parameter for integer fields in an Elasticsearch index mapping. It shows the difference between a field with ignore_malformed set to true and one without it.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/ignore-malformed.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "number_one": {
        "type": "integer",
        "ignore_malformed": true
      },
      "number_two": {
        "type": "integer"
      }
    }
  }
}

PUT my-index-000001/_doc/1
{
  "text":       "Some text value",
  "number_one": "foo"
}

PUT my-index-000001/_doc/2
{
  "text":       "Some text value",
  "number_two": "foo"
}
```

----------------------------------------

TITLE: Declaring and Initializing Painless Strings
DESCRIPTION: This snippet shows multiple ways to declare String variables in Painless, including using double quotes, single quotes, the `new` operator, and declaring without explicit initialization (resulting in a null value). String types do not require explicit allocation but can be initialized with literals or the new operator.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-types.md#_snippet_7

LANGUAGE: Painless
CODE:
```
String r = "some text";
String s = 'some text';
String t = new String("some text");
String u;
```

----------------------------------------

TITLE: Example Connector Config YAML
DESCRIPTION: This YAML configuration snippet shows the basic settings required for connecting to Elasticsearch and configuring a connector.  It highlights the need to specify the Elasticsearch host, API key, connector ID, service type, and connector API key.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-run-from-docker.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
# When connecting to your cloud deployment you should edit the host value
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: sharepoint_online # Example value — update this for service type you are connecting to
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA> # Optional. If not provided, the connector will use the elasticsearch.api_key instead
```

----------------------------------------

TITLE: Implementing ExternalLinkValidator Class in Java for Elasticsearch
DESCRIPTION: This code snippet defines the ExternalLinkValidator class, which implements the LinkValidator interface. It includes constructor initialization, dependency injection, and methods for validating external links.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/watcher/licenses/owasp-java-html-sanitizer-NOTICE.txt#2025-04-21_snippet_0

LANGUAGE: Java
CODE:
```
public class ExternalLinkValidator implements LinkValidator {
    private final Client client;
    private final int maxConnectionsPerRoute;
    private final int maxTotalConnections;
    private final int timeout;
    private final List<String> excludePatterns;

    public ExternalLinkValidator(
            Client client,
            int maxConnectionsPerRoute,
            int maxTotalConnections,
            int timeout,
            List<String> excludePatterns
    ) {
        this.client = client;
        this.maxConnectionsPerRoute = maxConnectionsPerRoute;
        this.maxTotalConnections = maxTotalConnections;
        this.timeout = timeout;
        this.excludePatterns = excludePatterns;
    }

    @Override
    public LinkValidationResult validate(String link) {
        // Implementation details omitted for brevity
        return null;
    }

    // Other methods and implementation details...
}
```

----------------------------------------

TITLE: Inserting Data into Time Series Index in Elasticsearch
DESCRIPTION: This snippet demonstrates how to add data to a time series index using the _bulk API. It inserts four documents with 'key', 'val', and '@timestamp' fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-time-series-aggregation.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
PUT /my-time-series-index-0/_bulk
{ "index": {} }
{ "key": "a", "val": 1, "@timestamp": "2022-01-01T00:00:10Z" }
{ "index": {}}
{ "key": "a", "val": 2, "@timestamp": "2022-01-02T00:00:00Z" }
{ "index": {} }
{ "key": "b", "val": 2, "@timestamp": "2022-01-01T00:00:10Z" }
{ "index": {}}
{ "key": "b", "val": 3, "@timestamp": "2022-01-02T00:00:00Z" }
```

----------------------------------------

TITLE: Highlighting in Elasticsearch All Fields (console)
DESCRIPTION: Explains how to configure Elasticsearch highlighting to include fields in the highlighting result even if the primary search query didn't directly match terms within those specific fields. This is achieved by setting the `require_field_match` parameter to `false` within the `highlight` section of the `_search` request.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_8

LANGUAGE: console
CODE:
```
GET /_search
{
  "query" : {
    "match": { "user.id": "kimchy" }
  },
  "highlight" : {
    "require_field_match": false,
    "fields": {
      "body" : { "pre_tags" : ["<em>"], "post_tags" : ["</em>"] }
    }
  }
}
```

----------------------------------------

TITLE: Static Import of Domain Split Functions in Java
DESCRIPTION: This code snippet demonstrates how to statically import two overloaded `domainSplit` functions from the `org.elasticsearch.xpack.ml.utils.DomainSplitFunction` class. The static import allows direct access to these functions without needing to qualify them with the class name.  This is often used for utility functions that are frequently called.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/ml/src/main/resources/org/elasticsearch/xpack/ml/whitelist.txt#2025-04-21_snippet_0

LANGUAGE: Java
CODE:
```
static_import {
    List domainSplit(String) from_class org.elasticsearch.xpack.ml.utils.DomainSplitFunction
    List domainSplit(String,Map) from_class org.elasticsearch.xpack.ml.utils.DomainSplitFunction
}
```

----------------------------------------

TITLE: Defining JSON Class Methods for Loading and Dumping in Painless API
DESCRIPTION: This snippet defines a class within the Elasticsearch Painless API for performing JSON operations, including loading a JSON string and dumping an object into a JSON string format. The 'load' method takes a JSON string as input, while the 'dump' method can serialize an object to a JSON string, with an optional boolean parameter to control the output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.json.txt#2025-04-21_snippet_0

LANGUAGE: groovy
CODE:
```
class org.elasticsearch.painless.api.Json {
  def load(String)
  String dump(def)
  String dump(def, boolean)
}
```

----------------------------------------

TITLE: Sigmoid Function in Rank Feature Query
DESCRIPTION: This snippet provides an example of using the sigmoid function in an Elasticsearch rank_feature query to compute relevance scores based on the field value with configurable pivot and exponent parameters. Suitable for indices where training has suggested appropriate values for these parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-rank-feature-query.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET /test/_search
{
  "query": {
    "rank_feature": {
      "field": "pagerank",
      "sigmoid": {
        "pivot": 7,
        "exponent": 0.6
      }
    }
  }
}
```

----------------------------------------

TITLE: Analysis Result of Hiragana Uppercase Filter in Elasticsearch
DESCRIPTION: This snippet shows the result of analyzing Japanese text using the custom analyzer with the hiragana_uppercase filter. It demonstrates how small hiragana characters are normalized to standard forms.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-hiragana-uppercase.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
{
  "tokens": [
    {
      "token": "ちよつと",
      "start_offset": 0,
      "end_offset": 4,
      "type": "word",
      "position": 0
    },
    {
      "token": "まつ",
      "start_offset": 4,
      "end_offset": 6,
      "type": "word",
      "position": 1
    },
    {
      "token": "て",
      "start_offset": 6,
      "end_offset": 7,
      "type": "word",
      "position": 2
    }
  ]
}
```

----------------------------------------

TITLE: Configuring & Indexing Long Range Synthetic Source (Console)
DESCRIPTION: Demonstrates configuring an index with synthetic source and a `long_range` field. Shows how multiple range values, including duplicates, are sorted by lower bound and then upper bound, with duplicates removed, in the synthetic `_source` output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/range.md#_snippet_4

LANGUAGE: Console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "my_range": { "type": "long_range" }
    }
  }
}

PUT idx/_doc/1
{
  "my_range": [
    {
        "gte": 200,
        "lte": 300
    },
    {
        "gte": 1,
        "lte": 100
    },
    {
        "gte": 200,
        "lte": 300
    },
    {
        "gte": 200,
        "lte": 500
    }
  ]
}
```

LANGUAGE: JSON
CODE:
```
{
  "my_range": [
    {
        "gte": 1,
        "lte": 100
    },
    {
        "gte": 200,
        "lte": 300
    },
    {
        "gte": 200,
        "lte": 500
    }
  ]
}
```

----------------------------------------

TITLE: Correct Painless Script Accessing Synthetic _source Field by Script Dot Notation (js)
DESCRIPTION: This snippet provides an alternative correct method for accessing a field (originally `foo.bar.baz`) from `_source` in Painless when synthetic `_source` is enabled. It uses standard script dot-notation object access (`params._source.foo.bar.baz`) to traverse the nested structure. This script is part of a larger search or update request payload.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-source-field.md#_snippet_9

LANGUAGE: js
CODE:
```
"script": { "source": """  emit(params._source.foo.bar.baz)  """ }
```

----------------------------------------

TITLE: Response for Runtime Field Multi Terms Aggregation
DESCRIPTION: Example response showing buckets created from the genre length runtime field and product field, with counts for each unique combination.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-multi-terms-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations" : {
    "genres_and_products" : {
      "doc_count_error_upper_bound" : 0,
      "sum_other_doc_count" : 0,
      "buckets" : [
        {
          "key" : [
            4,
            "Product A"
          ],
          "key_as_string" : "4|Product A",
          "doc_count" : 2
        },
        {
          "key" : [
            4,
            "Product B"
          ],
          "key_as_string" : "4|Product B",
          "doc_count" : 2
        },
        {
          "key" : [
            10,
            "Product B"
          ],
          "key_as_string" : "10|Product B",
          "doc_count" : 1
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Comparing Date Field with Date Math IN Operator in Elasticsearch SQL
DESCRIPTION: This snippet queries the `emp` table, selecting the `hire_date` field. It filters results where `hire_date` is present in the set of dates calculated from the two date math expressions `'1987-03-01||+2y/M'` and `'1987-03-01||+3y/M'`. This illustrates the use of the `IN` operator with date math.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_1

LANGUAGE: SQL
CODE:
```
SELECT hire_date FROM emp WHERE hire_date IN ('1987-03-01||+2y/M', '1987-03-01||+3y/M');
```

----------------------------------------

TITLE: Show Tables with SQL LIKE ESCAPE SQL
DESCRIPTION: Shows how to use the ESCAPE clause with SQL LIKE. The pattern 'emp!%' with ESCAPE '!' treats the '%' character literally because it is preceded by the escape character '!'. This is useful when you need to match a literal wildcard character.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-index-patterns.md#_snippet_4

LANGUAGE: SQL
CODE:
```
SHOW TABLES LIKE 'emp!%' ESCAPE '!';
```

----------------------------------------

TITLE: Index documents into Elasticsearch
DESCRIPTION: This snippet indexes three documents into the `items` index, each containing a `name`, `production_date`, and `location`. These documents can be used to test and demonstrate the distance_feature query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-distance-feature-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /items/_doc/1?refresh
{
  "name" : "chocolate",
  "production_date": "2018-02-01",
  "location": [-71.34, 41.12]
}

PUT /items/_doc/2?refresh
{
  "name" : "chocolate",
  "production_date": "2018-01-01",
  "location": [-71.3, 41.15]
}


PUT /items/_doc/3?refresh
{
  "name" : "chocolate",
  "production_date": "2017-12-01",
  "location": [-71.3, 41.12]
}
```

----------------------------------------

TITLE: Implementing DocValues Fields for Elasticsearch in Java
DESCRIPTION: This segment implements various DocValues fields for Elasticsearch scripts, defining methods to retrieve field data typically stored in document values. These include primitive data types like integer, long, float, and specialized types such as GeoPoint and IPAddress.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.fields.txt#2025-04-21_snippet_1

LANGUAGE: java
CODE:
```
class org.elasticsearch.script.field.BinaryDocValuesField @dynamic_type {
  ByteBuffer get(ByteBuffer)
  ByteBuffer get(int, ByteBuffer)
}

class org.elasticsearch.script.field.BooleanDocValuesField @dynamic_type {
  boolean get(boolean)
  boolean get(int, boolean)
}

class org.elasticsearch.script.field.IntegerDocValuesField @dynamic_type {
  int get(int)
  int get(int, int)
}
```

----------------------------------------

TITLE: Using Elasticsearch Highlighting Styled Tags Schema (console)
DESCRIPTION: Shows how to apply a pre-defined set of tags for highlighting using the `tags_schema` parameter in an Elasticsearch `_search` request. Setting `tags_schema` to "styled" applies a built-in schema with different styles for highlighted terms without requiring manual `pre_tags` and `post_tags` configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_7

LANGUAGE: console
CODE:
```
GET /_search
{
  "query" : {
    "match": { "user.id": "kimchy" }
  },
  "highlight" : {
    "tags_schema" : "styled",
    "fields" : {
      "comment" : {}
    }
  }
}
```

----------------------------------------

TITLE: Calculating Monthly Sales Percentiles in Elasticsearch
DESCRIPTION: Shows how to use the percentiles_bucket aggregation to calculate the 25th, 50th, and 75th percentiles of monthly sales. It combines a date histogram aggregation with a sum aggregation and then applies the percentiles_bucket.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-percentiles-bucket-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "size": 0,
  "aggs": {
    "sales_per_month": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "sales": {
          "sum": {
            "field": "price"
          }
        }
      }
    },
    "percentiles_monthly_sales": {
      "percentiles_bucket": {
        "buckets_path": "sales_per_month>sales",
        "percents": [ 25.0, 50.0, 75.0 ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Advanced Sync Rules for GitHub Connector
DESCRIPTION: These JSON snippets define advanced sync rules for the GitHub connector, specifying how to index documents based on specific criteria such as branch names and issue types. Each snippet outlines the filtering options available for syncing relevant repository items based on their attributes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-github.md#2025-04-21_snippet_7

LANGUAGE: json
CODE:
```
[
  {
    "repository": "repo_name",
    "filter": {
      "branch": "sync-rules-feature"
    }
  }
]
```

LANGUAGE: json
CODE:
```
[
  {
    "repository": "repo_name",
    "filter": {
      "issue": "is:bug"
    }
  }
]
```

LANGUAGE: json
CODE:
```
[
  {
    "repository": "repo_name",
    "filter": {
      "pr": "is:open"
    }
  }
]
```

LANGUAGE: json
CODE:
```
[
  {
    "repository": "repo_name",
    "filter": {
      "issue": "is:bug",
      "pr": "is:open",
      "branch": "sync-rules-feature"
    }
  }
]
```

LANGUAGE: json
CODE:
```
[
  {
    "filter": {
      "pr": "is:pr is:merged label:auto-backport merged:>=2023-07-20"
    },
    "repository": "repo_name"
  },
  {
    "filter": {
      "pr": "is:pr is:merged label:auto-backport merged:>=2023-07-15"
    },
    "repository": "repo_name"
  }
]
```

----------------------------------------

TITLE: Rescoring Collapsed Search Results
DESCRIPTION: Shows how to use the rescore parameter with field collapsing to apply a secondary scoring logic to the top-ranked document per collapsed field. This example rescores using a match_phrase query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/collapse-search-results.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search
{
  "query": {
    "match": {
      "message": "you know for search"
    }
  },
  "collapse": {
    "field": "user.id"
  },
  "rescore" : {
      "window_size" : 50,
      "query" : {
         "rescore_query" : {
            "match_phrase": {
                "message": "you know for search"
            }
         },
         "query_weight" : 0.3,
         "rescore_query_weight" : 1.4
      }
   }
}
```

----------------------------------------

TITLE: Creating an API key for the connector - Console - Elasticsearch
DESCRIPTION: This snippet illustrates how to generate an API key for a Slack connector in Elasticsearch. The command requires specifying the name and role descriptors including necessary privileges for managing the connector.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-slack.md#2025-04-21_snippet_1

LANGUAGE: Console
CODE:
```
POST /_security/api_key
{
  "name": "connector_name-connector-api-key",
  "role_descriptors": {
    "connector_name-connector-role": {
      "cluster": [
        "monitor",
        "manage_connector"
      ],
      "indices": [
        {
          "names": [
            "index_name",
            ".search-acl-filter-index_name",
            ".elastic-connectors*"
          ],
          "privileges": [
            "all"
          ],
          "allow_restricted_indices": false
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Computing ST DISTANCE using ESQL
DESCRIPTION: This snippet performs a distance calculation between airport locations and city locations using the ST_DISTANCE function. It filters for airports with the abbreviation 'CPH' and retains specific fields, including the calculated distance. The required inputs are the locations of the airport and the city, and the output includes the abbreviation, name, locations, and computed distance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/st_distance.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airports
| WHERE abbrev == "CPH"
| EVAL distance = ST_DISTANCE(location, city_location)
| KEEP abbrev, name, location, city_location, distance
```

----------------------------------------

TITLE: Configuring Elasticsearch Highlighting Tags (console)
DESCRIPTION: Explains how to customize the HTML tags used to wrap highlighted text in an Elasticsearch `_search` response. This is achieved by setting the `pre_tags` and `post_tags` parameters in the `highlight` section to use custom tags like `<tag1>` instead of the default `<em>`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_5

LANGUAGE: console
CODE:
```
GET /_search
{
  "query" : {
    "match": { "user.id": "kimchy" }
  },
  "highlight" : {
    "pre_tags" : ["<tag1>"],
    "post_tags" : ["</tag1>"],
    "fields" : {
      "body" : {}
    }
  }
}
```

----------------------------------------

TITLE: DayOfWeek Enum Methods and Fields
DESCRIPTION: Describes the enum constants and methods of java.time.DayOfWeek. Summarizes how to represent and manipulate days of the week, including obtaining a DayOfWeek from a value, retrieving localized names, and performing arithmetic operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.time.txt#2025-04-21_snippet_18

LANGUAGE: java
CODE:
```
"class java.time.DayOfWeek {
  DayOfWeek FRIDAY
  DayOfWeek MONDAY
  DayOfWeek SATURDAY
  DayOfWeek SUNDAY
  DayOfWeek THURSDAY
  DayOfWeek TUESDAY
  DayOfWeek WEDNESDAY
  DayOfWeek of(int)
  DayOfWeek from(TemporalAccessor)
  int getValue()
  String getDisplayName(TextStyle,Locale)
  DayOfWeek minus(long)
  DayOfWeek plus(long)
  DayOfWeek valueOf(String)
  DayOfWeek[] values()
}"
```

----------------------------------------

TITLE: Multiple Rescoring in Elasticsearch
DESCRIPTION: Demonstrates using multiple rescore queries in sequence with different window sizes and scoring modes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/filter-search-results.md#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
POST /_search
{
   "query" : {
      "match" : {
         "message" : {
            "operator" : "or",
            "query" : "the quick brown"
         }
      }
   },
   "rescore" : [ {
      "window_size" : 100,
      "query" : {
         "rescore_query" : {
            "match_phrase" : {
               "message" : {
                  "query" : "the quick brown",
                  "slop" : 2
               }
            }
         },
         "query_weight" : 0.7,
         "rescore_query_weight" : 1.2
      }
   }, {
      "window_size" : 10,
      "query" : {
         "score_mode": "multiply",
         "rescore_query" : {
            "function_score" : {
               "script_score": {
                  "script": {
                    "source": "Math.log10(doc.count.value + 2)"
                  }
               }
            }
         }
      }
   } ]
}
```

----------------------------------------

TITLE: Implementing German Analyzer in Elasticsearch
DESCRIPTION: Custom implementation of the built-in German analyzer with German stopwords, keyword marker for exclusions from stemming, German normalization, and light German stemming.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lang-analyzer.md#2025-04-21_snippet_16

LANGUAGE: console
CODE:
```
PUT /german_example
{
  "settings": {
    "analysis": {
      "filter": {
        "german_stop": {
          "type":       "stop",
          "stopwords":  "_german_" <1>
        },
        "german_keywords": {
          "type":       "keyword_marker",
          "keywords":   ["Beispiel"] <2>
        },
        "german_stemmer": {
          "type":       "stemmer",
          "language":   "light_german"
        }
      },
      "analyzer": {
        "rebuilt_german": {
          "tokenizer":  "standard",
          "filter": [
            "lowercase",
            "german_stop",
            "german_keywords",
            "german_normalization",
            "german_stemmer"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Calculating Spatial Centroid in Elasticsearch ESQL
DESCRIPTION: This SQL query demonstrates the usage of the ST_CENTROID function to calculate the spatial centroid over a field with spatial point geometry type. It is part of an automatically generated test case for Elasticsearch ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/st_centroid_agg.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.
```

----------------------------------------

TITLE: Performing Cartesian-bounds Aggregation on Point Data
DESCRIPTION: This snippet shows how to perform a cartesian-bounds aggregation on a Point field, filtering results with a query and returning the bounding box of matching documents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-cartesian-bounds-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /museums/_search?size=0
{
  "query": {
    "match": { "name": "musée" }
  },
  "aggs": {
    "viewport": {
      "cartesian_bounds": {
        "field": "location"
      }
    }
  }
}
```

----------------------------------------

TITLE: Date Histogram Aggregation with 50-Day Offset
DESCRIPTION: Example response showing date histogram buckets with a 50-day offset, showing how documents can be grouped into the same bucket.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-datehistogram-aggregation.md#2025-04-21_snippet_12

LANGUAGE: console
CODE:
```
"buckets": [
  { "key_as_string": "2022-01-20", "key": 1642636800000, "doc_count": 1 },
  { "key_as_string": "2022-02-20", "key": 1645315200000, "doc_count": 2 },
  { "key_as_string": "2022-04-20", "key": 1650412800000, "doc_count": 2 },
  { "key_as_string": "2022-06-20", "key": 1655683200000, "doc_count": 2 },
  { "key_as_string": "2022-08-20", "key": 1660953600000, "doc_count": 1 }
]
```

----------------------------------------

TITLE: Creating Index with Histogram Field in Elasticsearch
DESCRIPTION: This code creates an index with a histogram field to store pre-aggregated latency metrics for different networks.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-sum-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT metrics_index
{
  "mappings": {
    "properties": {
      "latency_histo": { "type": "histogram" }
    }
  }
}
```

----------------------------------------

TITLE: Remainder Operator in Painless
DESCRIPTION: Illustrates the remainder operator ('%') in Painless with different numeric types.  The result is the remainder after division. The example shows remainder operations between int and double types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_18

LANGUAGE: painless
CODE:
```
int i = 29%4;     <1>
double d = i%7.0; <2>
```

----------------------------------------

TITLE: Running Notion Connector Docker Container
DESCRIPTION: Command to run the Docker container for the Notion connector service. This command mounts the configuration directory, sets the network, and specifies the Docker image and command to run.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-notion.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Analyzing Text with Custom ICU Tokenizer in Elasticsearch
DESCRIPTION: This snippet shows the response from Elasticsearch when analyzing text using a custom ICU tokenizer with user-defined rules. The entire input is treated as a single token due to the custom rule.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-icu-tokenizer.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
   "tokens": [
      {
         "token": "Elasticsearch. Wow!",
         "start_offset": 0,
         "end_offset": 19,
         "type": "<ALPHANUM>",
         "position": 0
      }
   ]
}
```

----------------------------------------

TITLE: Using AND operator SQL
DESCRIPTION: Demonstrates how to use the AND operator to combine two conditions in a WHERE clause, returning rows where both conditions are true. The query selects last names from the 'test_emp' table for employees with emp_no greater than 10000 AND less than 10005, ordered and limited.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-operators-logical.md#_snippet_0

LANGUAGE: sql
CODE:
```
SELECT last_name l FROM "test_emp" WHERE emp_no > 10000 AND emp_no < 10005 ORDER BY emp_no LIMIT 5;
```

----------------------------------------

TITLE: ESQL Data Type Mapping Table
DESCRIPTION: A markdown table showing the supported input types (str), pattern types, and result types for ESQL pattern matching operations. Documents that keyword and text types can be matched against keyword patterns to produce boolean results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/types/like.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| str | pattern | result |
| --- | --- | --- |
| keyword | keyword | boolean |
| text | keyword | boolean |
```

----------------------------------------

TITLE: ESQL Function Type Mappings in Markdown
DESCRIPTION: A markdown table showing the mapping between field types and their corresponding result types in ESQL. This table is automatically generated and lists all supported data types including primitive types, geometric types, and special Elasticsearch types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/types/mv_last.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| field | result |
| --- | --- |
| boolean | boolean |
| cartesian_point | cartesian_point |
| cartesian_shape | cartesian_shape |
| date | date |
| date_nanos | date_nanos |
| double | double |
| geo_point | geo_point |
| geo_shape | geo_shape |
| integer | integer |
| ip | ip |
| keyword | keyword |
| long | long |
| text | keyword |
| unsigned_long | unsigned_long |
| version | version |
```

----------------------------------------

TITLE: Defining ScriptTermStats Class for Term Frequency Analysis in Java
DESCRIPTION: This snippet outlines the ScriptTermStats class, which includes methods to retrieve unique term counts and matched term counts, as well as summary statistics for document frequency, total term frequency, term frequency, and term positions. It is vital for understanding term usage statistics in scoring.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.score.txt#2025-04-21_snippet_2

LANGUAGE: Java
CODE:
```
class org.elasticsearch.script.ScriptTermStats {
    int uniqueTermsCount()
    int matchedTermsCount()
    StatsSummary docFreq()
    StatsSummary totalTermFreq()
    StatsSummary termFreq()
    StatsSummary termPositions()
}
```

----------------------------------------

TITLE: Querying Suggestions with Boosted Category Context in Elasticsearch
DESCRIPTION: This example demonstrates how to query suggestions with category contexts while boosting certain categories. It shows how to filter by multiple categories and apply different boost factors to influence the ranking of results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_23

LANGUAGE: console
CODE:
```
POST place/_search?pretty
{
  "suggest": {
    "place_suggestion": {
      "prefix": "tim",
      "completion": {
        "field": "suggest",
        "size": 10,
        "contexts": {
          "place_type": [                             <1>
            { "context": "cafe" },
            { "context": "restaurants", "boost": 2 }
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Applying Apache License 2.0 Boilerplate Notice
DESCRIPTION: This snippet provides a template for the boilerplate notice to be included when applying the Apache License 2.0 to a software project. It includes placeholders for the copyright year and owner, as well as the full text of the license notice.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/licenses/xmlsec-LICENSE.txt#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
```

----------------------------------------

TITLE: Role Object Schema for Security Config Change Events in Elasticsearch
DESCRIPTION: Specifies the structure of a role object in security configuration change events. It includes fields for the role name, cluster privileges, global privileges, index privileges, application privileges, run-as privileges, and metadata.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_21

LANGUAGE: javascript
CODE:
```
{"name": <string>, "role_descriptor": {"cluster": <string_list>, "global":
{"application":{"manage":{<string>:<string_list>}}}, "indices": [                             {"names": <string_list>, "privileges": <string_list>, "field_security":
{"grant": <string_list>, "except": <string_list>}, "query": <string>,
"allow_restricted_indices": <boolean>}], "applications":[{"application": <string>,
"privileges": <string_list>, "resources": <string_list>}], "run_as": <string_list>,
"metadata": <object>}}
```

----------------------------------------

TITLE: Using Shingle Filter Default Settings via Analyze API (Console)
DESCRIPTION: Demonstrates how to use the Elasticsearch `_analyze` API to test the basic `shingle` token filter with its default settings. It applies the filter after a `whitespace` tokenizer to sample text, showing the output including original tokens and default two-word shingles.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-shingle-tokenfilter.md#_snippet_0

LANGUAGE: Console
CODE:
```
GET /_analyze
{
  "tokenizer": "whitespace",
  "filter": [ "shingle" ],
  "text": "quick brown fox jumps"
}
```

----------------------------------------

TITLE: Creating a match_only_text Field in Elasticsearch
DESCRIPTION: This snippet shows how to use the match_only_text field type, a space-efficient variant of the text field that trades scoring and positional query efficiency for reduced storage requirements. It's suitable for log messages and other text that doesn't need precise scoring.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/text.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
PUT logs
{
  "mappings": {
    "properties": {
      "@timestamp": {
        "type": "date"
      },
      "message": {
        "type": "match_only_text"
      }
    }
  }
}
```

----------------------------------------

TITLE: Using Well-Known Text for Geo-bounding Box
DESCRIPTION: This example employs Well-Known Text (WKT) to define the bounding box for a geo_bounding_box query. The input is a WKT string format for spatial data, and matching documents intersecting the bounding box are the outputs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-bounding-box-query.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
GET my_locations/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_bounding_box": {
          "pin.location": {
            "wkt": "BBOX (-74.1, -71.12, 40.73, 40.01)"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Markdown Document Structure with Navigation and Notes
DESCRIPTION: A structured markdown document defining the navigation title and main content sections for Elasticsearch mapping documentation, including a note block with references to other documentation sections.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/index.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
---
navigation_title: "Mapping"
---
# Mapping reference

:::{note}
This section provides detailed **reference information** for mapping.

Refer to [Mapping](docs-content://manage-data/data-store/mapping.md) in the **Manage data** section for overview, getting started and conceptual information.
:::

Mappings are defined dynamically or explicitly for each document in Elasticsearch.
This section contains explanations for the following mapping components:

- [Field data types](/reference/elasticsearch/mapping-reference/field-data-types.md)
- [Metadata fields](/reference/elasticsearch/mapping-reference/document-metadata-fields.md)
- [Mapping parameters](/reference/elasticsearch/mapping-reference/mapping-parameters.md)

% TO-DO: Link to the mapping overview in the data management section
```

----------------------------------------

TITLE: Date Histogram Offset Result Example
DESCRIPTION: Shows the response from the date histogram with offset example. The documents are grouped into buckets starting at 6am instead of midnight, demonstrating how the offset parameter works.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_9

LANGUAGE: json
CODE:
```
{
  ...
  "aggregations": {
    "my_buckets": {
      "after_key": { "date": "2015-10-01T06:00:00.000Z" },
      "buckets": [
        {
          "key": { "date": "2015-09-30T06:00:00.000Z" },
          "doc_count": 1
        },
        {
          "key": { "date": "2015-10-01T06:00:00.000Z" },
          "doc_count": 1
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Creating an Index with Synthetic Source for Stored Text Fields
DESCRIPTION: Example demonstrating how to set up an index with synthetic _source enabled and a text field with the 'store' parameter set to true, which preserves order and duplicates in the field values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/text.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "text": { "type": "text", "store": true }
    }
  }
}
PUT idx/_doc/1
{
  "text": [
    "the quick brown fox",
    "the quick brown fox",
    "jumped over the lazy dog"
  ]
}
```

----------------------------------------

TITLE: Detailed Rank Evaluation Request Example
DESCRIPTION: Demonstrates a complete rank evaluation request with multiple test queries and document ratings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-rank-eval.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /my-index-000001/_rank_eval
{
  "requests": [
    {
      "id": "amsterdam_query",                                  
      "request": {                                              
          "query": { "match": { "text": "amsterdam" } }
      },
      "ratings": [                                              
        { "_index": "my-index-000001", "_id": "doc1", "rating": 0 },
        { "_index": "my-index-000001", "_id": "doc2", "rating": 3 },
        { "_index": "my-index-000001", "_id": "doc3", "rating": 1 }
      ]
    },
    {
      "id": "berlin_query",
      "request": {
        "query": { "match": { "text": "berlin" } }
      },
      "ratings": [
        { "_index": "my-index-000001", "_id": "doc1", "rating": 1 }
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Bulk Indexing Bit Vectors (Elasticsearch Console)
DESCRIPTION: Illustrates how to index multiple documents containing bit vectors into the `my-bit-vectors` index using the bulk API. It shows two ways to represent the bit vector data: as a list of byte values or as a hexadecimal string.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/dense-vector.md#_snippet_7

LANGUAGE: json
CODE:
```
POST /my-bit-vectors/_bulk?refresh
{"index": {"_id" : "1"}}
{"my_vector": [127, -127, 0, 1, 42]}
{"index": {"_id" : "2"}}
{"my_vector": "8100012a7f"}
```

----------------------------------------

TITLE: Basic ESQL Query with Implicit Limit
DESCRIPTION: Demonstrates a basic ESQL query with an implicit limit of 1000 results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/common/result-set-size-limitation.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM index | WHERE field = "value"
```

----------------------------------------

TITLE: Indexing geo_point data in Elasticsearch
DESCRIPTION: This snippet shows how to index documents with `geo_point` fields in Elasticsearch. It defines a mapping with a nested `pin.location` property of type `geo_point` and then indexes a document with sample latitude and longitude values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-distance-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /my_locations
{
  "mappings": {
    "properties": {
      "pin": {
        "properties": {
          "location": {
            "type": "geo_point"
          }
        }
      }
    }
  }
}

PUT /my_locations/_doc/1
{
  "pin": {
    "location": {
      "lat": 40.12,
      "lon": -71.34
    }
  }
}
```

----------------------------------------

TITLE: Reimplementing smartcn Analyzer with Custom Configuration in Elasticsearch
DESCRIPTION: This example demonstrates how to rebuild the smartcn analyzer as a custom analyzer with additional configuration. The rebuilt analyzer uses the smartcn_tokenizer and applies porter_stem and smartcn_stop filters, allowing for more flexible Chinese text analysis.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/_reimplementing_and_extending_the_analyzers.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT smartcn_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "rebuilt_smartcn": {
          "tokenizer":  "smartcn_tokenizer",
          "filter": [
            "porter_stem",
            "smartcn_stop"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: ESQL Function Parameters Documentation in Markdown
DESCRIPTION: Comprehensive documentation of supported function parameters for ESQL queries, including fuzziness controls, analyzer settings, matching behavior, and relevance scoring options. Each parameter is defined with its type and default behavior.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/functionNamedParams/match.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.

**Supported function named parameters**

`fuzziness`
:   (keyword) Maximum edit distance allowed for matching.

`auto_generate_synonyms_phrase_query`
:   (boolean) If true, match phrase queries are automatically created for multi-term synonyms. Defaults to true.

`analyzer`
:   (keyword) Analyzer used to convert the text in the query value into token. Defaults to the index-time analyzer mapped for the field. If no analyzer is mapped, the index's default analyzer is used.

`minimum_should_match`
:   (integer) Minimum number of clauses that must match for a document to be returned.

`zero_terms_query`
:   (keyword) Indicates whether all documents or none are returned if the analyzer removes all tokens, such as when using a stop filter. Defaults to none.

`boost`
:   (float) Floating point number used to decrease or increase the relevance scores of the query. Defaults to 1.0.

`fuzzy_transpositions`
:   (boolean) If true, edits for fuzzy matching include transpositions of two adjacent characters (ab → ba). Defaults to true.

`fuzzy_rewrite`
:   (keyword) Method used to rewrite the query. See the rewrite parameter for valid values and more information. If the fuzziness parameter is not 0, the match query uses a fuzzy_rewrite method of top_terms_blended_freqs_${max_expansions} by default.

`prefix_length`
:   (integer) Number of beginning characters left unchanged for fuzzy matching. Defaults to 0.

`lenient`
:   (boolean) If false, format-based errors, such as providing a text query value for a numeric field, are returned. Defaults to false.

`operator`
:   (keyword) Boolean logic used to interpret text in the query value. Defaults to OR.

`max_expansions`
:   (integer) Maximum number of terms to which the query will expand. Defaults to 50.
```

----------------------------------------

TITLE: Multiplying Interval by Number in Elasticsearch SQL
DESCRIPTION: This snippet shows how to multiply an `INTERVAL` value by a numerical scalar. It multiplies an interval of 3 years by -2 and aliases the result as `result`, demonstrating scalar multiplication of intervals. The expected output is a scaled interval.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_7

LANGUAGE: SQL
CODE:
```
SELECT -2 * INTERVAL '3' YEARS AS result;
```

----------------------------------------

TITLE: Defining FilterScript Class in Java
DESCRIPTION: This snippet defines the 'FilterScript' class which is part of the Elasticsearch scripting functionality, specifically whitelisted for usage in the fields API. It is essential for ensuring that the painless scripting engine can access the required classes and methods. No dependencies are specified beyond Elasticsearch's own requirements.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.filter.txt#2025-04-21_snippet_0

LANGUAGE: java
CODE:
```
class org.elasticsearch.script.FilterScript @no_import {
}

```

----------------------------------------

TITLE: Analyzing Text with Keyword Repeat Filter (console)
DESCRIPTION: Demonstrates using the `keyword_repeat` filter on sample text via the Analyze API. It shows how the filter duplicates each token and marks one version as a keyword (`keyword: true`) while the other remains non-keyword (`keyword: false`), illustrating the filter's basic functionality.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-keyword-repeat-tokenfilter.md#_snippet_0

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer": "whitespace",
  "filter": [
    "keyword_repeat"
  ],
  "text": "fox running and jumping",
  "explain": true,
  "attributes": "keyword"
}
```

----------------------------------------

TITLE: Applying Apache License 2.0 Boilerplate Notice
DESCRIPTION: This snippet provides a template for the boilerplate notice to be included when applying the Apache License 2.0 to a software project. It includes placeholders for the copyright year and owner, and specifies the terms of the license.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/client/rest/licenses/httpcore-nio-LICENSE.txt#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
```

----------------------------------------

TITLE: Mapping Basic Keyword Field in Elasticsearch Console
DESCRIPTION: Demonstrates how to create a new index and define a basic mapping for a field named 'tags' using the 'keyword' data type. This is suitable for structured content where exact matching and indexing of the full value is required. Requires an running Elasticsearch instance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/keyword.md#_snippet_0

LANGUAGE: Console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "tags": {
        "type":  "keyword"
      }
    }
  }
}
```

----------------------------------------

TITLE: Restricted Executor Service Creation
DESCRIPTION: Lists executor service constructors that should be avoided in favor of Elasticsearch's custom executors which properly handle error propagation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/build-tools-internal/src/main/resources/forbidden/es-all-signatures.txt#2025-04-21_snippet_6

LANGUAGE: java
CODE:
```
@defaultMessage use executors from org.elasticsearch.common.util.concurrent.EsExecutors instead which will properly bubble up Errors
java.util.concurrent.AbstractExecutorService#<init>()
java.util.concurrent.ThreadPoolExecutor#<init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue)
java.util.concurrent.ThreadPoolExecutor#<init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory)
java.util.concurrent.ThreadPoolExecutor#<init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.RejectedExecutionHandler)
java.util.concurrent.ThreadPoolExecutor#<init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler)
```

----------------------------------------

TITLE: Using LENGTH Function in ESQL to Calculate String Length
DESCRIPTION: This ESQL query filters airport data for Indian cities, retains only the city field, and adds a new column that computes the length of each city name using the LENGTH function. The results show three Indian cities with their respective character lengths.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/length.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airports
| WHERE country == "India"
| KEEP city
| EVAL fn_length = LENGTH(city)
```

----------------------------------------

TITLE: Docker Configuration for Slack Connector - YAML
DESCRIPTION: This YAML configuration snippet shows how to set up the Elastic Slack connector by specifying the Elasticsearch host, API key, and connector details. It includes the required settings for running the connector service in a Docker environment.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-slack.md#2025-04-21_snippet_2

LANGUAGE: YAML
CODE:
```
# When connecting to your cloud deployment you should edit the host value
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: slack
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA> # Optional. If not provided, the connector will use the elasticsearch.api_key instead
```

----------------------------------------

TITLE: Commenting ESQL AbstractFunctionTestCase Generated Test File
DESCRIPTION: This code snippet is a LaTeX comment that explains the origin and purpose of the file. It indicates that the content is automatically generated by ESQL's AbstractFunctionTestCase and should not be manually edited. It also provides a reference to a README file for regeneration instructions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/mv_append.md#2025-04-21_snippet_0

LANGUAGE: tex
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.
```

----------------------------------------

TITLE: Defining Augmentation Methods in Elasticsearch
DESCRIPTION: This snippet defines three augmentation methods for calculating SHA hash values (sha1, sha256, sha512) in the context of Elasticsearch scripting. These methods are accessible through the org.elasticsearch.painless.api.Augmentation class, enabling script writers to utilize secure hash algorithms in their scripts.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.reindex.txt#2025-04-21_snippet_0

LANGUAGE: groovy
CODE:
```
class java.lang.String {
  String org.elasticsearch.painless.api.Augmentation sha1()
  String org.elasticsearch.painless.api.Augmentation sha256()
  String org.elasticsearch.painless.api.Augmentation sha512()
}
```

----------------------------------------

TITLE: Including ESQL MV_SUM Function Documentation Components
DESCRIPTION: This snippet shows how the documentation for the MV_SUM function is assembled from separate components using includes. It references a syntax diagram and several markdown files containing different aspects of the function documentation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/mv_sum.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.

## `MV_SUM` [esql-mv_sum]

**Syntax**

:::{image} ../../../images/functions/mv_sum.svg
:alt: Embedded
:class: text-center
:::


:::{include} ../parameters/mv_sum.md
:::

:::{include} ../description/mv_sum.md
:::

:::{include} ../types/mv_sum.md
:::

:::{include} ../examples/mv_sum.md
:::
```

----------------------------------------

TITLE: Filtered Completion Suggester Response in Elasticsearch
DESCRIPTION: Shows the response from a completion suggester with source filtering applied, returning only the 'suggest' field in the source documents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_15

LANGUAGE: console-result
CODE:
```
{
  "took": 6,
  "timed_out": false,
  "_shards": {
    "total": 1,
    "successful": 1,
    "skipped": 0,
    "failed": 0
  },
  "hits": {
    "total": {
      "value": 0,
      "relation": "eq"
    },
    "max_score": null,
    "hits": []
  },
  "suggest": {
    "song-suggest": [ {
        "text": "nir",
        "offset": 0,
        "length": 3,
        "options": [ {
            "text": "Nirvana",
            "_index": "music",
            "_id": "1",
            "_score": 1.0,
            "_source": {
              "suggest": [ "Nevermind", "Nirvana" ]
            }
          } ]
      } ]
  }
}
```

----------------------------------------

TITLE: ESQL Numeric Type Combinations Matrix
DESCRIPTION: A markdown table defining the supported numeric type combinations and their resulting types. Shows how different numeric types (double, integer, long, unsigned_long) interact with decimal parameters in ESQL functions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/types/round.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| number | decimals | result |
| --- | --- | --- |
| double | integer | double |
| double | long | double |
| double | | double |
| integer | integer | integer |
| integer | long | integer |
| integer | | integer |
| long | integer | long |
| long | long | long |
| long | | long |
| unsigned_long | integer | unsigned_long |
| unsigned_long | long | unsigned_long |
| unsigned_long | | unsigned_long |
```

----------------------------------------

TITLE: ESQL Numeric Type Mappings Table
DESCRIPTION: Markdown table showing the mapping between numeric input types and their corresponding result types in ESQL functions. Includes double, integer, long, and unsigned_long types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/types/mv_median_absolute_deviation.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| number | result |
| --- | --- |
| double | double |
| integer | integer |
| long | long |
| unsigned_long | unsigned_long |
```

----------------------------------------

TITLE: Configuring Polish Stop Token Filter in Elasticsearch
DESCRIPTION: This snippet demonstrates how to configure an index with a custom analyzer using the polish_stop token filter. It sets up an analyzer that applies lowercase and polish_stop filters to the input text.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-polish-stop.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /polish_stop_example
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "analyzer_with_stop": {
            "tokenizer": "standard",
            "filter": [
              "lowercase",
              "polish_stop"
            ]
          }
        },
        "filter": {
          "polish_stop": {
            "type": "polish_stop",
            "stopwords": [
              "_polish_",
              "jeść"
            ]
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Java Text Package Class Definitions
DESCRIPTION: Detailed class specifications from the java.text package, including text formatting, localization, and internationalization classes with their methods and constants.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.text.txt#2025-04-21_snippet_2

LANGUAGE: java
CODE:
```
class java.text.Annotation {
  (Object)
  def getValue()
}

class java.text.AttributedCharacterIterator$Attribute {
  AttributedCharacterIterator.Attribute INPUT_METHOD_SEGMENT
  AttributedCharacterIterator.Attribute LANGUAGE
  AttributedCharacterIterator.Attribute READING
}

class java.text.AttributedString {
  (String)
  (String,Map)
  void addAttribute(AttributedCharacterIterator.Attribute,Object)
  void addAttribute(AttributedCharacterIterator.Attribute,Object,int,int)
  void addAttributes(Map,int,int)
  AttributedCharacterIterator getIterator()
  AttributedCharacterIterator getIterator(AttributedCharacterIterator.Attribute[])
  AttributedCharacterIterator getIterator(AttributedCharacterIterator.Attribute[],int,int)
}
```

----------------------------------------

TITLE: Converting Degrees to Radians using TO_RADIANS in ESQL
DESCRIPTION: This snippet demonstrates the usage of the TO_RADIANS function in ESQL. It creates a row with a 'deg' column containing degree values, then uses the EVAL clause to apply the TO_RADIANS function to convert these values to radians, storing the result in a new 'rad' column.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_radians.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW deg = [90.0, 180.0, 270.0]
| EVAL rad = TO_RADIANS(deg)
```

----------------------------------------

TITLE: Configure Basic Sync Rules (JSON)
DESCRIPTION: Defines basic advanced sync rules for the PostgreSQL connector using a JSON array. Each object specifies a list of tables and a SQL query to fetch data from those tables. This example fetches all data from the 'employee' and 'customer' tables.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-postgresql.md#_snippet_5

LANGUAGE: json
CODE:
```
[
  {
    "tables": [
      "employee"
    ],
    "query": "SELECT * FROM employee"
  },
  {
    "tables": [
      "customer"
    ],
    "query": "SELECT * FROM customer"
  }
]
```

----------------------------------------

TITLE: Applying Apache License 2.0 Boilerplate Notice
DESCRIPTION: The standard boilerplate notice that should be included in files to apply the Apache License 2.0. It includes placeholders for copyright information and standard license text referencing where to find the complete license.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/licenses/jcip-annotations-LICENSE.txt#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
```

----------------------------------------

TITLE: Gradle Task Execution List
DESCRIPTION: Comprehensive list of Gradle tasks to be executed for building Elasticsearch components, including compilation, resource processing, and JAR creation tasks.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/libs/simdvec/output.txt#2025-04-21_snippet_16

LANGUAGE: text
CODE:
```
Tasks to be executed: [task ':libs:simdvec:cleanTest', task ':libs:logging:compileJava', task ':libs:core:compileJava', task ':libs:native:compileJava', task ':libs:simdvec:compileJava', task ':libs:simdvec:processResources', task ':libs:simdvec:classes', task ':libs:simdvec:compileMain21Java', task ':libs:simdvec:processMain21Resources', task ':libs:simdvec:main21Classes', task ':libs:simdvec:compileMain22Java', task ':libs:simdvec:processMain22Resources', task ':libs:simdvec:main22Classes', task ':libs:simdvec:jar']
```

----------------------------------------

TITLE: Running Docker Image for Microsoft Teams Connector - Shell
DESCRIPTION: This shell command runs the Docker image for the Microsoft Teams connector service. It specifies volume mounts and network settings necessary for operating the connector with the relevant configuration file. Successful execution starts the connector service with the provided configurations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-teams.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Inserting Data into ElasticSearch Index with JavaScript
DESCRIPTION: This code snippet inserts a JSON document into a specified ElasticSearch index using the JavaScript client, with error handling included. It is used to add new records for search and analysis purposes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/plugins/analysis-kuromoji/src/test/resources/org/elasticsearch/plugin/analysis/kuromoji/user_dict.txt#_snippet_2

LANGUAGE: JavaScript
CODE:
```
async function indexDocument(indexName, document) {
  try {
    await client.index({
      index: indexName,
      body: document
    });
    console.log('Document indexed successfully');
  } catch (error) {
    console.error('Error indexing document:', error);
  }
}

// Example usage:
// indexDocument('test_index', { test_name: '制限スピード' });
```

----------------------------------------

TITLE: Defining Advanced Sync Rules with Glob Patterns - JavaScript
DESCRIPTION: The JavaScript snippets demonstrate how to define advanced synchronization rules using glob patterns for indexing files and folders within a configured drive path in an Elasticsearch network drive connector. These rules specify patterns to identify target folders and exclude certain files. The JSON format is used, requiring an appropriate key setup by the connector with the 'drive_path' field at the start of each pattern.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-network-drive.md#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
[
  {
    "pattern": "Folder-shared/a/mock/**"
  },
  {
    "pattern": "Folder-shared/b/alpha/**"
  }
]
```

LANGUAGE: JavaScript
CODE:
```
[
  {
    "pattern": "Folder-shared/a/b/test"
  }
]
```

LANGUAGE: JavaScript
CODE:
```
[
  {
    "pattern": "Folder-shared/org/*/all-tests/test[135]"
  }
]
```

LANGUAGE: JavaScript
CODE:
```
[
  {
    "pattern": "Folder-shared/**/all-tests/test[!7]"
  }
]
```

----------------------------------------

TITLE: Unsigned Right Shift with the Def Type in Painless
DESCRIPTION: This example showcases the unsigned right shift operator with the def type in Painless, emphasizing the implicit casting that occurs during operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_29

LANGUAGE: painless
CODE:
```
def x = 16 >>> 2; <1>
def y = x >>> 1;  <2>
```

----------------------------------------

TITLE: Equivalent Bool Query for Most Fields Type in Elasticsearch
DESCRIPTION: Displays the equivalent bool query structure that Elasticsearch internally generates for the 'most_fields' multi-match type. It shows how individual match queries for each field are combined using a bool query with should clauses.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-multi-match-query.md#_snippet_7

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "bool": {
      "should": [
        { "match": { "title":          "quick brown fox" }},
        { "match": { "title.original": "quick brown fox" }},
        { "match": { "title.shingles": "quick brown fox" }}
      ]
    }
  }
}
```

----------------------------------------

TITLE: Regular Expression Query Syntax
DESCRIPTION: Demonstrates embedding regular expression patterns within Elasticsearch query strings using forward slashes
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_4

LANGUAGE: elasticsearch
CODE:
```
name:/joh?n(ath[oa]n)/
```

----------------------------------------

TITLE: Executing Percolator Search with Highlighting
DESCRIPTION: Search request using percolate query with highlighting enabled to match stored queries against a document.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-percolate-query.md#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search
{
  "query": {
    "percolate": {
      "field": "query",
      "document": {
        "message": "The quick brown fox jumps over the lazy dog"
      }
    }
  },
  "highlight": {
    "fields": {
      "message": {}
    }
  }
}
```

----------------------------------------

TITLE: Accessing Unsigned Long as BigInteger Painless
DESCRIPTION: This Painless script source snippet shows how to access an `unsigned_long` field's value as a Java `BigInteger` using the field API, which is necessary for values exceeding `Long.MAX_VALUE` when you need accurate arithmetic.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/unsigned-long.md#_snippet_6

LANGUAGE: Painless
CODE:
```
"script": {
    "source": "field('my_counter').asBigInteger(BigInteger.ZERO)"
}
```

----------------------------------------

TITLE: Sorting on Unsigned Long Field Elasticsearch Console
DESCRIPTION: Shows how to sort search results based on an `unsigned_long` field. The sorting mechanism returns `long` or `BigInteger` based on the field value's magnitude.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/unsigned-long.md#_snippet_4

LANGUAGE: Console
CODE:
```
GET /my_index/_search
{
    "query": {
        "match_all" : {}
    },
    "sort" : {"my_counter" : "desc"}
}
```

----------------------------------------

TITLE: Rounding Decimal Number in ESQL
DESCRIPTION: This snippet demonstrates the usage of the ROUND function in ESQL. It rounds the decimal number 1.23 to 0 decimal places and assigns the result to a variable named 'a'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/row.csv-spec/function.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = ROUND(1.23, 0)
```

----------------------------------------

TITLE: EVAL Command with Unnamed Column in ESQL
DESCRIPTION: An example of using the EVAL command without specifying a column name. The new column name becomes the expression itself.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/eval.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
height*3.281
```

----------------------------------------

TITLE: Geo-bounds Aggregation Result for Geo_shape Fields in Elasticsearch
DESCRIPTION: This snippet shows the response format for a geo-bounds aggregation on geo_shape fields. It includes the top_left and bottom_right coordinates of the bounding box encompassing all shapes in the result set.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-geobounds-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "viewport": {
      "bounds": {
        "top_left": {
          "lat": 52.39420966710895,
          "lon": 4.912349972873926
        },
        "bottom_right": {
          "lat": 52.374080987647176,
          "lon": 4.969425117596984
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating ZIP Archive for Large Plugins in Shell
DESCRIPTION: Shell command to create a ZIP archive for plugins larger than 5GB, ensuring the descriptor file is placed at the top of the archive for proper processing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-custom-bundles.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
zip -r name-of-plugin.zip name-of-descriptor-file.properties *
```

----------------------------------------

TITLE: Indexing Blocks with Filters - JSON Snippet - JavaScript
DESCRIPTION: This JSON snippet shows how to index blocks using search filters defined for both searches and database query filters, allowing for versatile indexing strategies.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-notion.md#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
{
  "searches":[
    {
      "query":"External tasks",
      "filter":{
        "value":"database"
      }
    },
    {
      "query":"External tasks",
      "filter":{
        "value":"page"
      }
    }
  ],
  "database_query_filters":[
    {
      "database_id":"notion_database_id1",
      "filter":{
        "property":"Task completed",
        "checkbox":{
          "equals":true
        }
      }
    }
  ]
}
```

----------------------------------------

TITLE: Truncating IPv4 and IPv6 Addresses Using IP_PREFIX in Elasticsearch SQL
DESCRIPTION: This snippet demonstrates the usage of the IP_PREFIX function to truncate IPv4 and IPv6 addresses. It creates a row with both IP types and applies IP_PREFIX with different prefix lengths.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/ip_prefix.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW ip4 = to_ip("1.2.3.4"), ip6 = TO_IP("fe80::cae2:65ff:fece:feb9")
| EVAL ip4_prefix = IP_PREFIX(ip4, 24, 0), ip6_prefix = IP_PREFIX(ip6, 0, 112);
```

----------------------------------------

TITLE: Keyword Analyzer Output in Elasticsearch
DESCRIPTION: This snippet shows the output of the keyword analyzer when applied to a sample sentence. The entire input is returned as a single token.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-keyword-analyzer.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
[ The 2 QUICK Brown-Foxes jumped over the lazy dog's bone. ]
```

----------------------------------------

TITLE: Configuring Merge Policy Factor
DESCRIPTION: Dynamic setting for controlling the merge factor in tail merging operations. Defaults to 16.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/data-stream-lifecycle-settings.md#2025-04-21_snippet_4

LANGUAGE: yaml
CODE:
```
data_streams.lifecycle.target.merge.policy.merge_factor: 16
```

----------------------------------------

TITLE: Using Unicode Character Class Regex Flag in Painless
DESCRIPTION: Shows how to use the Unicode character class flag 'U' in a Painless regex pattern. This example checks if 'Ɛ' matches the Unicode word character class.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-regexes.md#2025-04-21_snippet_4

LANGUAGE: painless
CODE:
```
'Ɛ' ==~ /\\w/U
```

----------------------------------------

TITLE: Converting to Number in EQL
DESCRIPTION: Converts a string representation of a number to an integer or float. Supports optional base for conversion (defaults to 10, or 16 for '0x' prefixed strings). Handles leading/trailing whitespace and null inputs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-function-ref.md#_snippet_12

LANGUAGE: eql
CODE:
```
number("1337")              // returns 1337
number("42.5")              // returns 42.5
number("deadbeef", 16)      // returns 3735928559

// integer literals beginning with "0x" are auto-detected as hexadecimal
number("0xdeadbeef")        // returns 3735928559
number("0xdeadbeef", 16)    // returns 3735928559

// "+" and "-" are supported
number("+1337")             // returns 1337
number("-1337")             // returns -1337

// surrounding whitespace is ignored
number("  1337  ")          // returns 1337

// process.pid = "1337"
number(process.pid)         // returns 1337

// null handling
number(null)                // returns null
number(null, 16)            // returns null

// strings beginning with "0x" are treated as hexadecimal (base 16),
// even if the <base_num> is explicitly null.
number("0xdeadbeef", null) // returns 3735928559

// otherwise, strings are treated as decimal (base 10)
// if the <base_num> is explicitly null.
number("1337", null)        // returns 1337
```

----------------------------------------

TITLE: Using Case-Insensitive Function in Elasticsearch EQL
DESCRIPTION: Demonstrates how to make a function case-insensitive in Elasticsearch EQL using the ~ operator.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_29

LANGUAGE: eql
CODE:
```
endsWith~(process_name, ".exe")
```

----------------------------------------

TITLE: Calculating Power with Negative Exponent in Elasticsearch SQL
DESCRIPTION: This demonstrates the `POWER` function in Elasticsearch SQL for negative integer exponents. It calculates the value of the base raised to the negative power. The output is a double numeric value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_11

LANGUAGE: SQL
CODE:
```
SELECT POWER(5, -1), POWER(5, -2);
```

----------------------------------------

TITLE: Querying Current Date and Time with NOW Function in Elasticsearch ESQL
DESCRIPTION: This SQL query demonstrates the usage of the NOW function in Elasticsearch ESQL to retrieve the current date and time. The NOW function returns the current timestamp without any arguments.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/now.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
SELECT NOW();
```

----------------------------------------

TITLE: Rounding Numeric Values to Left of Decimal in Elasticsearch SQL
DESCRIPTION: This demonstrates the `ROUND` function in Elasticsearch SQL, rounding a number to a specified number of decimal places to the left of the decimal point. A negative second argument specifies the number of places left of the decimal.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_14

LANGUAGE: SQL
CODE:
```
SELECT ROUND(-345.153, -1) AS rounded;
```

----------------------------------------

TITLE: Mapping Rank Vectors (Bit) and Bulk Indexing - Elasticsearch REST API
DESCRIPTION: This snippet first creates an index `my-rank-vectors-bit`, mapping `my_vector` as `rank_vectors` with `element_type` set to `bit`. It then uses the bulk API to index two documents, showing how bit vectors can be represented as an array of integers or as a base64-encoded string containing the raw bits. This highlights the flexibility in providing bit vector data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/rank-vectors.md#_snippet_2

LANGUAGE: console
CODE:
```
PUT my-rank-vectors-bit
{
  "mappings": {
    "properties": {
      "my_vector": {
        "type": "rank_vectors",
        "element_type": "bit"
      }
    }
  }
}

POST /my-rank-vectors-bit/_bulk?refresh
{"index": {"_id" : "1"}}
{"my_vector": [127, -127, 0, 1, 42]}
{"index": {"_id" : "2"}}
{"my_vector": "8100012a7f"}
```

----------------------------------------

TITLE: Sample Response for Reverse Nested Aggregation Query in Elasticsearch
DESCRIPTION: This snippet shows a possible response structure for the reverse nested aggregation query. It includes aggregations for comments, top usernames, and top tags per comment, demonstrating the hierarchical nature of the results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-reverse-nested-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console-result
CODE:
```
{
  "aggregations": {
    "comments": {
      "doc_count": 1,
      "top_usernames": {
        "doc_count_error_upper_bound" : 0,
        "sum_other_doc_count" : 0,
        "buckets": [
          {
            "key": "username_1",
            "doc_count": 1,
            "comment_to_issue": {
              "doc_count": 1,
              "top_tags_per_comment": {
                "doc_count_error_upper_bound" : 0,
                "sum_other_doc_count" : 0,
                "buckets": [
                  {
                    "key": "tag_1",
                    "doc_count": 1
                  }
                  ...
                ]
              }
            }
          }
          ...
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Input Document with Conflicting Field Types
DESCRIPTION: Shows an example document where a scalar field conflicts with a dotted field that would need that scalar to become an object.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/dot-expand-processor.md#2025-04-21_snippet_13

LANGUAGE: js
CODE:
```
{
  "foo": "value1",
  "foo.bar": "value2"
}
```

----------------------------------------

TITLE: Integer Literal Examples
DESCRIPTION: Demonstrates various integer literal notations including decimal, octal, and hexadecimal values with type specifiers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-literals.md#2025-04-21_snippet_1

LANGUAGE: painless
CODE:
```
0     
0D    
1234L 
-90f  
-022  
0xF2A 
```

----------------------------------------

TITLE: Downloading Connector Configuration
DESCRIPTION: Command to download sample configuration file for Docker deployment
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-dropbox.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
curl https://raw.githubusercontent.com/elastic/connectors/main/config.yml.example --output ~/connectors-config/config.yml
```

----------------------------------------

TITLE: Querying Integer Range Field with Term Query in Elasticsearch
DESCRIPTION: Illustrates how to use a `term` query against an `integer_range` field. This query type checks if the specified value falls within the defined range of the indexed document. The example shows querying for the value 12 in the `expected_attendees` field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/range.md#_snippet_1

LANGUAGE: Elasticsearch DSL
CODE:
```
GET range_index/_search
{
  "query" : {
    "term" : {
      "expected_attendees" : {
        "value": 12
      }
    }
  }
}
```

----------------------------------------

TITLE: Concurrent Shard Request Control in Elasticsearch
DESCRIPTION: Example of controlling the maximum number of concurrent shard requests per node using the max_concurrent_shard_requests parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-shard-routing.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search?max_concurrent_shard_requests=3
{
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  }
}
```

----------------------------------------

TITLE: Calling Method on Primitive Type (Auto-boxing) Painless
DESCRIPTION: Illustrates how calling a method on a primitive type variable in Painless triggers auto-boxing. The primitive value is converted to its corresponding reference type (e.g., `int` to `Integer`) to allow the method invocation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-types.md#_snippet_1

LANGUAGE: painless
CODE:
```
int i = 1;    <1>
i.toString(); <2>
```

----------------------------------------

TITLE: Configuring GCE Discovery in Elasticsearch
DESCRIPTION: YAML configuration to enable GCE discovery in Elasticsearch. It specifies the GCE project ID, zone, and sets GCE as the seed provider for Elasticsearch node discovery.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-long.md#2025-04-21_snippet_8

LANGUAGE: yaml
CODE:
```
cloud:
  gce:
      project_id: es-cloud
      zone: europe-west1-a
discovery:
      seed_providers: gce
```

----------------------------------------

TITLE: Export Node Certificate
DESCRIPTION: Exports the node's certificate from its keystore
SOURCE: https://github.com/elastic/elasticsearch/blob/main/build-tools-internal/src/main/resources/test/ssl/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
keytool -export -alias test-node -keystore test-node.jks -storepass keypass -file test-node.crt
```

----------------------------------------

TITLE: Calculating Arcsine Using ASIN Function in ESQL
DESCRIPTION: Demonstrates how to use the ASIN function to calculate the arcsine of a numeric value (0.9) in ESQL. The result is returned in radians. The example creates a row with value 'a' and computes its arcsine using the ASIN function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/asin.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=.9
| EVAL asin=ASIN(a)
```

----------------------------------------

TITLE: Starting Elasticsearch Service
DESCRIPTION: Command to start the Elasticsearch service after plugin installation and configuration using systemd.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-azure-classic-long.md#2025-04-21_snippet_12

LANGUAGE: sh
CODE:
```
sudo systemctl start elasticsearch
```

----------------------------------------

TITLE: Computing Cosine Value Using ESQL COS Function
DESCRIPTION: Demonstrates how to calculate the cosine of an angle using the COS function in ESQL. The example sets a variable 'a' to 1.8 and computes its cosine value using the COS function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/cos.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=1.8
| EVAL cos=COS(a)
```

----------------------------------------

TITLE: Creating Confluence Connector via API
DESCRIPTION: API call to create a new Confluence connector in Elasticsearch
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-confluence.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT _connector/my-confluence-connector
{
  "index_name": "my-elasticsearch-index",
  "name": "Content synced from Confluence",
  "service_type": "confluence"
}
```

----------------------------------------

TITLE: Querying SharePoint Site ID using Graph API
DESCRIPTION: This HTTP GET request fetches the site ID for a specific SharePoint site using the Microsoft Graph API. The query includes parameters to select specific fields and search for the site by name.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-sharepoint-online.md#2025-04-22_snippet_3

LANGUAGE: http
CODE:
```
GET https://graph.microsoft.com/v1.0/sites?select=webUrl,Title,Id&$search="<Name of the site>*"
```

----------------------------------------

TITLE: Configuring URL decode processor in Elasticsearch
DESCRIPTION: This snippet demonstrates how to configure the URL decode processor in an Elasticsearch ingest pipeline. It specifies the field to be decoded using the 'urldecode' operation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/urldecode-processor.md#2025-04-21_snippet_0

LANGUAGE: js
CODE:
```
{
  "urldecode": {
    "field": "my_url_to_decode"
  }
}
```

----------------------------------------

TITLE: Creating a Zoom Connector Using the Elasticsearch API
DESCRIPTION: API call to create a new self-managed Zoom connector by specifying the index name, connector name, and service type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-zoom.md#2025-04-22_snippet_0

LANGUAGE: console
CODE:
```
PUT _connector/my-zoom-connector
{
  "index_name": "my-elasticsearch-index",
  "name": "Content synced from Zoom",
  "service_type": "zoom"
}
```

----------------------------------------

TITLE: Getting Geometry Altitude (ST_Z) in Elasticsearch SQL
DESCRIPTION: Describes the ST_Z function which takes a geometry and returns the altitude (Z coordinate) of its first point as a double. It returns null for null input. Note: Z is accepted but not stored in doc values or indexed for geo_points. The example converts a WKT point string with Z to geometry and extracts its altitude.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-geo.md#_snippet_5

LANGUAGE: SQL
CODE:
```
ST_Z(
    geometry <1>
)
```

LANGUAGE: SQL
CODE:
```
SELECT ST_Z(ST_WKTToSQL('POINT (10 20 30)')) z;
```

----------------------------------------

TITLE: Creating a Notion Connector using Elasticsearch API
DESCRIPTION: Example of creating a new self-managed Notion connector using the Elasticsearch Create connector API. This snippet demonstrates how to specify the index name, connector name, and service type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-notion.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT _connector/my-notion-connector
{
  "index_name": "my-elasticsearch-index",
  "name": "Content synced from Notion",
  "service_type": "notion"
}
```

----------------------------------------

TITLE: Running Oracle Connector Docker Image
DESCRIPTION: This snippet demonstrates how to run the Docker image for the Oracle connector, including volume mounting and network configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-oracle.md#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Using Mapping Character Filter to Convert Numerals
DESCRIPTION: This example demonstrates using the mapping character filter with the analyze API to convert Hindu-Arabic numerals to Arabic-Latin equivalents. It transforms '٢٥٠١٥' to '25015' using a mapping configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-mapping-charfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer": "keyword",
  "char_filter": [
    {
      "type": "mapping",
      "mappings": [
        "٠ => 0",
        "١ => 1",
        "٢ => 2",
        "٣ => 3",
        "٤ => 4",
        "٥ => 5",
        "٦ => 6",
        "٧ => 7",
        "٨ => 8",
        "٩ => 9"
      ]
    }
  ],
  "text": "My license plate is ٢٥٠١٥"
}
```

----------------------------------------

TITLE: Setting Cron Trigger: Last Monday (Text)
DESCRIPTION: This Cron syntax example defines a schedule to trigger an action at 9:05 a.m. UTC on the last Monday (day 2) of every month using the 'L' character for the day of the week.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/api-conventions.md#_snippet_6

LANGUAGE: text
CODE:
```
0 5 9 ? * 2L
```

----------------------------------------

TITLE: Basic GROK Syntax in ESQL
DESCRIPTION: Basic syntax example of the GROK command showing the required input and pattern parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/grok.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
GROK input "pattern"
```

----------------------------------------

TITLE: Deleting Azure VM Instance (Shell)
DESCRIPTION: This command demonstrates how to delete a running Azure VM instance using the Azure CLI. It's useful for cleaning up resources when they're no longer needed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-azure-classic-scale.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
azure vm delete myesnode1
```

----------------------------------------

TITLE: Kuromoji Baseform Token Filter Analysis Result
DESCRIPTION: This snippet shows the response from analyzing the Japanese text "飲み" (nomi) using the custom analyzer with kuromoji_baseform filter. The result demonstrates how the filter lemmatizes the verb to its base form "飲む" (nomu).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-baseform.md#2025-04-21_snippet_1

LANGUAGE: console-result
CODE:
```
{
  "tokens" : [ {
    "token" : "飲む",
    "start_offset" : 0,
    "end_offset" : 2,
    "type" : "word",
    "position" : 0
  } ]
}
```

----------------------------------------

TITLE: Checking Completed Reindex Data Stream Status (Console Result)
DESCRIPTION: Shows the status of a data stream reindex task after it has successfully completed. It indicates `complete: true`, the total indices processed, and confirms the number of indices that required and received upgrades.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reindex-data-stream.md#_snippet_6

LANGUAGE: console-result
CODE:
```
{
  "start_time_millis": 1737676174349,
  "complete": true,
  "total_indices_in_data_stream": 4,
  "total_indices_requiring_upgrade": 2,
  "successes": 2,
  "in_progress": [],
  "pending": 0,
  "errors": []
}
```

----------------------------------------

TITLE: Analyzing Text with Kuromoji Part of Speech Filter in Elasticsearch
DESCRIPTION: This snippet shows the response from analyzing Japanese text using the custom analyzer with the kuromoji_part_of_speech filter. It demonstrates how certain parts of speech are removed from the tokenization results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-speech.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
{
  "tokens" : [ {
    "token" : "寿司",
    "start_offset" : 0,
    "end_offset" : 2,
    "type" : "word",
    "position" : 0
  }, {
    "token" : "おいしい",
    "start_offset" : 3,
    "end_offset" : 7,
    "type" : "word",
    "position" : 2
  } ]
}
```

----------------------------------------

TITLE: Run Tests Against a Manually Started ES Node
DESCRIPTION: This command runs a specific query against a locally running ElasticSearch node, allowing a user to test and debug with the cluster configuration specified by the `-Dtests` parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/qa/correctness/README.md#2025-04-21_snippet_6

LANGUAGE: shell
CODE:
```
./gradlew ':x-pack:plugin:eql:qa:correctness:javaRestTest' --tests "org.elasticsearch.xpack.eql.EsEQLCorrectnessIT.test {<queryNo>}" -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=runTask-0
```

----------------------------------------

TITLE: Retrieving Euler's Number in ESQL
DESCRIPTION: This function returns Euler's number (e), a mathematical constant approximately equal to 2.71828. It takes no parameters and returns a single row containing the value of e.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/e.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW E()
```

----------------------------------------

TITLE: Querying Suggestions with Boosted Geo Location Context in Elasticsearch
DESCRIPTION: This snippet demonstrates how to query suggestions with geo location contexts while applying different precision levels and boost factors. It shows how to filter and boost suggestions based on their proximity to multiple geo points.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_26

LANGUAGE: console
CODE:
```
POST place/_search?pretty
{
  "suggest": {
    "place_suggestion": {
      "prefix": "tim",
      "completion": {
        "field": "suggest",
        "size": 10,
        "contexts": {
          "location": [             <1>
                      {
              "lat": 43.6624803,
              "lon": -79.3863353,
              "precision": 2
            },
            {
              "context": {
                "lat": 43.6624803,
                "lon": -79.3863353
              },
              "boost": 2
            }
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Using PI() Function in ESQL
DESCRIPTION: Demonstrates how to use the PI() function in ESQL to return the mathematical constant π (pi). The function takes no arguments and returns the value of π as a double precision floating point number (3.141592653589793).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/pi.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW PI()
```

----------------------------------------

TITLE: Painless Dynamic Type 'def' Representing Child-Most Descendant
DESCRIPTION: This snippet illustrates how a `def` variable assigned a value of a parent type (Object) which actually refers to a child type instance (ArrayList) will dynamically represent the child-most descendant type at runtime. This allows calling methods specific to the actual instance type (`ensureCapacity`) even if declared as a parent type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-types.md#_snippet_6

LANGUAGE: painless
CODE:
```
Object l = new ArrayList();
def d = l;
d.ensureCapacity(10);
```

----------------------------------------

TITLE: Calculating Natural Logarithm in Elasticsearch SQL
DESCRIPTION: This demonstrates the `LOG` function in Elasticsearch SQL, which calculates the natural logarithm (base e) of a numeric expression. The input must be numeric, and the function returns a double numeric value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_7

LANGUAGE: SQL
CODE:
```
SELECT EXP(3), LOG(20.085536923187668);
```

----------------------------------------

TITLE: Elasticsearch Index Response with Pipeline Processing
DESCRIPTION: Shows the response from the Elasticsearch server after indexing a document with pipeline processing. The response confirms that the document was successfully created.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/pipeline-processor.md#2025-04-21_snippet_4

LANGUAGE: console-result
CODE:
```
{
  "_index": "my-index-000001",
  "_id": "1",
  "_version": 1,
  "result": "created",
  "_shards": {
    "total": 2,
    "successful": 1,
    "failed": 0
  },
  "_seq_no": 66,
  "_primary_term": 1
}
```

----------------------------------------

TITLE: Invalid Usage of KURTOSIS Function with Scalar Functions in Elasticsearch SQL
DESCRIPTION: Demonstrates an invalid attempt to use the KURTOSIS function on a scalar function (`salary / 12.0`). The KURTOSIS function can only be applied directly to a field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_37

LANGUAGE: SQL
CODE:
```
SELECT KURTOSIS(salary / 12.0), gender FROM emp GROUP BY gender
```

----------------------------------------

TITLE: Output of Thai Tokenizer in Elasticsearch
DESCRIPTION: This snippet shows the expected output from the Thai tokenizer when processing the sample Thai text. It demonstrates how the tokenizer segments the input into individual Thai words.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-thai-tokenizer.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
[ การ, ที่, ได้, ต้อง, แสดง, ว่า, งาน, ดี ]
```

----------------------------------------

TITLE: Response showing document with custom character limit
DESCRIPTION: Response showing the extracted properties with a custom limit of 5 characters for the content field as specified in the max_size field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/attachment.md#2025-04-21_snippet_11

LANGUAGE: console-result
CODE:
```
{
  "found": true,
  "_index": "my-index-000001",
  "_id": "my_id_2",
  "_version": 1,
  "_seq_no": 40,
  "_primary_term": 1,
  "_source": {
    "max_size": 5,
    "attachment": {
      "content_type": "application/rtf",
      "language": "sl",
      "content": "Lorem",
      "content_length": 5
    }
  }
}
```

----------------------------------------

TITLE: PowerShell Command for SharePoint Authentication
DESCRIPTION: PowerShell command to set DisableCustomAppAuthentication to false for SharePoint tenant configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-sharepoint-online.md#2025-04-22_snippet_1

LANGUAGE: powershell
CODE:
```
set-spotenant -DisableCustomAppAuthentication $false
```

----------------------------------------

TITLE: Resulting Composite Buckets Example
DESCRIPTION: Shows the resulting composite buckets that would be created from the sample document. Each bucket represents a unique combination of keyword and number values from the source document.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-composite-aggregation.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
{ "keyword": "foo", "number": 23 }
{ "keyword": "foo", "number": 65 }
{ "keyword": "foo", "number": 76 }
{ "keyword": "bar", "number": 23 }
{ "keyword": "bar", "number": 65 }
{ "keyword": "bar", "number": 76 }
```

----------------------------------------

TITLE: Cleaning Up Elasticsearch Resources in Bash
DESCRIPTION: Removes the Elasticsearch Docker container and deletes the shared data directory.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/qa/repository-old-versions-compatibility/src/javaRestTest/resources/README.md#2025-04-21_snippet_15

LANGUAGE: bash
CODE:
```
docker rm -f es
rm -rf /tmp/sharedESData/
```

----------------------------------------

TITLE: Downloading Configuration File using cURL
DESCRIPTION: Command to download the sample configuration file for the Google Cloud Storage connector from GitHub.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-google-cloud.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
curl https://raw.githubusercontent.com/elastic/connectors/main/config.yml.example --output ~/connectors-config/config.yml
```

----------------------------------------

TITLE: Indexing Parent Documents with Join Field (Shortcut Notation) in Elasticsearch
DESCRIPTION: Example of creating parent documents using a simplified shortcut notation. Instead of using the object notation, parent documents can simply specify the name of the relation directly.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/parent-join.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1?refresh
{
  "my_id": "1",
  "text": "This is a question",
  "my_join_field": "question" <1>
}

PUT my-index-000001/_doc/2?refresh
{
  "my_id": "2",
  "text": "This is another question",
  "my_join_field": "question"
}
```

----------------------------------------

TITLE: ESQL FROM Query with Metadata Fields
DESCRIPTION: Shows how to use the METADATA directive in the FROM command to retrieve specific metadata fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/from.md#2025-04-21_snippet_5

LANGUAGE: esql
CODE:
```
FROM employees METADATA _id
```

----------------------------------------

TITLE: Installing Elasticsearch Plugin from HTTPS URL with Self-Signed Certificate
DESCRIPTION: This command installs an Elasticsearch plugin from an HTTPS URL with a self-signed certificate. It requires adding the CA cert to a local Java truststore and specifying its location.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/plugin-management-custom-url.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
sudo CLI_JAVA_OPTS="-Djavax.net.ssl.trustStore=/path/to/trustStore.jks" bin/elasticsearch-plugin install https://host/plugin.zip
```

----------------------------------------

TITLE: Access Denied Event Logging in Elasticsearch
DESCRIPTION: JSON structure for logging denied access attempts by authenticated users lacking necessary privileges.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
{"type":"audit", "timestamp":"2020-12-30T22:30:06,949+0200", "node.id":"0RMNyghkQYCc_gVd1G6tZQ", "event.type":"transport", "event.action":"access_denied", "authentication.type":"REALM", "user.name":"user1", "user.realm":"default_native", "user.roles":["test_role"], "origin.type":"rest", "origin.address":"[::1]:52434", "request.id":"yKOgWn2CRQCKYgZRz3phJw", "action":"indices:admin/auto_create", "request.name":"CreateIndexRequest", "indices":["<index-{now/d+1d}>"]}
```

----------------------------------------

TITLE: Incorrect Jinja2 Template with Unsupported Python Import
DESCRIPTION: An example of an invalid Jinja2 template that attempts to import a non-standard library module. This demonstrates what's not allowed in Elasticsearch templates, as only standard library modules can be imported.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/distribution/tools/ansi-console/licenses/jansi-NOTICE.txt#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
import requests
```

----------------------------------------

TITLE: Setting Elasticsearch node.roles for Transform Configuration
DESCRIPTION: This static setting identifies an Elasticsearch node as a dedicated transform node. At least one node with this role is required to run transforms. When setting node.roles, you must explicitly list all roles for the node, including 'transform' and preferably 'remote_cluster_client' for CCS compatibility.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/transforms-settings.md#_snippet_0

LANGUAGE: Configuration
CODE:
```
node.roles: [ transform ]
```

----------------------------------------

TITLE: Examples of EQL endsWith Function Usage
DESCRIPTION: A collection of examples demonstrating the `endsWith` function, showing how it checks if a source string ends with a specified substring. It includes examples for case-sensitive and case-insensitive matching (`endsWith~`), using literal strings, field references, empty strings, and null inputs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-function-ref.md#_snippet_7

LANGUAGE: eql
CODE:
```
endsWith("regsvr32.exe", ".exe")          // returns true
endsWith("regsvr32.exe", ".EXE")          // returns false
endsWith("regsvr32.exe", ".dll")          // returns false
endsWith("", "")                          // returns true

// Make matching case-insensitive
endsWith~("regsvr32.exe", ".EXE")         // returns true

// file.name = "regsvr32.exe"
endsWith(file.name, ".exe")               // returns true
endsWith(file.name, ".dll")               // returns false

// file.extension = ".exe"
endsWith("regsvr32.exe", file.extension)  // returns true
endsWith("ntdll.dll", file.name)          // returns false

// null handling
endsWith("regsvr32.exe", null)            // returns null
endsWith("", null)                          // returns null
endsWith(null, ".exe")                    // returns null
endsWith(null, null)                      // returns null
```

----------------------------------------

TITLE: Creating a Custom Simple Analyzer in Elasticsearch
DESCRIPTION: Illustrates how to define a custom simple analyzer by duplicating and altering the default simple analyzer. This code snippet configures the analyzer without any additional token filters, allowing users to define them later. Provides the flexibility to enhance text processing capabilities beyond the default settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-simple-analyzer.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_custom_simple_analyzer": {
          "tokenizer": "lowercase",
          "filter": [                          <1>
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Source Filtering with Field Alias Limitation
DESCRIPTION: Illustrates a limitation where field aliases cannot be used in source filtering operations, resulting in an empty source response.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/field-alias.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /_search
{
  "query" : {
    "match_all": {}
  },
  "_source": "route_length_miles"
}
```

----------------------------------------

TITLE: Syntax for HOUR_OF_DAY Function in Elasticsearch SQL
DESCRIPTION: Defines the syntax for the HOUR_OF_DAY function (also aliased as HOUR). It takes a date or datetime expression and extracts the hour component. Returns null if the input is null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_64

LANGUAGE: SQL
CODE:
```
HOUR_OF_DAY(datetime_exp) <1>
```

----------------------------------------

TITLE: Fetching Documents using SOSL Query
DESCRIPTION: This code snippet illustrates the process of fetching documents using a SOSL query. Users can input a valid SOSL query string, and the output will be an array of documents that match the search criteria.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-salesforce.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
[
  {
    "query": "FIND {Salesforce} IN ALL FIELDS",
    "language": "SOSL"
  }
]
```

----------------------------------------

TITLE: Indexing a Document with Nested Comments in Elasticsearch
DESCRIPTION: This snippet shows how to index a document into the 'sales' index. The document includes tags and an array of nested comments, each with a username and comment text.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-top-hits-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT /sales/_doc/1?refresh
{
  "tags": [ "car", "auto" ],
  "comments": [
    { "username": "baddriver007", "comment": "This car could have better brakes" },
    { "username": "dr_who", "comment": "Where's the autopilot? Can't find it" },
    { "username": "ilovemotorbikes", "comment": "This car has two extra wheels" }
  ]
}
```

----------------------------------------

TITLE: Output Tokens from Limit Token Filter in Elasticsearch
DESCRIPTION: The resulting tokens after applying the limit token filter with max_token_count set to 2. Only the first two tokens from the original text are preserved.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-limit-token-count-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
[ quick, fox ]
```

----------------------------------------

TITLE: Downloading Google Drive Connector Configuration File
DESCRIPTION: Command to download the sample configuration file for the Google Drive connector using curl.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-google-drive.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
curl https://raw.githubusercontent.com/elastic/connectors/main/config.yml.example --output ~/connectors-config/config.yml
```

----------------------------------------

TITLE: JSON Parsing Methods in Painless
DESCRIPTION: These method signatures demonstrate how to use the JSON processor to parse JSON strings into structured JSON objects. The first method modifies a map in-place, while the second returns a new object.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-ingest-processors-in-painless.md#2025-04-21_snippet_4

LANGUAGE: painless
CODE:
```
void json(Map<String, Object> map, String key);
Object json(Object value);
```

----------------------------------------

TITLE: Generating Two Ranges on a Single Field Query in Elasticsearch
DESCRIPTION: This snippet shows how to create a query with two range conditions on a single field in Elasticsearch. It uses separate range queries for the pid field to handle multi-value scenarios.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_28

LANGUAGE: eql
CODE:
```
process where pid > 100 and pid < 200
```

LANGUAGE: json
CODE:
```
{"bool":{"must":[{"range":{"pid":{"gt":100}}},{"range":{"pid":{"lt":200}}}]}}
```

----------------------------------------

TITLE: Random Score Function with Lucene ID
DESCRIPTION: This snippet demonstrates using the `randomScore` function without specifying a field. This uses the internal Lucene document ids as a source of randomness, which is efficient but not reproducible.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-script-score-query.md#2025-04-21_snippet_4

LANGUAGE: js
CODE:
```
"script" : {
    "source" : "randomScore(100)"
}
```

----------------------------------------

TITLE: Configure Sync Rules with ID Columns (JSON)
DESCRIPTION: Configures advanced sync rules for the PostgreSQL connector, including the optional 'id_columns' field. This field allows specifying unique columns (like 'emp_id' or 'c_id') for tables without primary keys, enabling the connector to generate unique document IDs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-postgresql.md#_snippet_6

LANGUAGE: json
CODE:
```
[
  {
    "tables": [
      "employee"
    ],
    "query": "SELECT * FROM employee",
    "id_columns": ["emp_id"]
  },
  {
    "tables": [
      "customer"
    ],
    "query": "SELECT * FROM customer",
    "id_columns": ["c_id"]
  }
]
```

----------------------------------------

TITLE: Updating Elasticsearch Deployment and Bundle Reference in JSON
DESCRIPTION: This JSON snippet demonstrates how to update an Elasticsearch deployment plan to upgrade the Elasticsearch version and update the bundle reference. It includes setting the new Elasticsearch version and updating the user bundle's Elasticsearch version compatibility.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-plugins-guide.md#2025-04-21_snippet_17

LANGUAGE: json
CODE:
```
{
    "name": "Extensions",
    "prune_orphans": false,
    "resources": {
        "elasticsearch": [
            {
                "region": "gcp-us-central1",
                "ref_id": "main-elasticsearch",
                "plan": {
                    "cluster_topology": [
                      ...
                    ],
                    "elasticsearch": {
                        "version": "8.4.3",
                        "enabled_built_in_plugins": [],
                        "user_bundles": [
                            {
                                  "elasticsearch_version": "7.*",
                                  "name": "custom-bundle",
                                  "url": "repo://5886113212"
                            }
                        ]

                    },
                    "deployment_template": {
                        "id": "gcp-storage-optimized-v3"
                    }
                }
            }
        ]
    }
}
```

----------------------------------------

TITLE: Using Block Comments in ESQL (Multi-Line)
DESCRIPTION: Demonstrates using `/*` and `*/` to create a multi-line block comment in ESQL, spanning across multiple lines within the query for more detailed explanations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-syntax.md#_snippet_9

LANGUAGE: esql
CODE:
```
FROM employees
/* Query the
 * employees
 * index */
| WHERE height > 2
```

----------------------------------------

TITLE: Referencing Columns with Special Characters in ESQL
DESCRIPTION: Shows how to reference columns with special characters in subsequent commands using backticks.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/stats-by.md#2025-04-21_snippet_12

LANGUAGE: esql
CODE:
```
FROM (
  FROM employees
  STATS AVG(salary)
  BY department
)
EVAL `AVG(salary)` > 50000;
```

----------------------------------------

TITLE: Capturing Tampered Request Event in Elasticsearch
DESCRIPTION: Example JSON audit log entry for when a request is detected as tampered, typically related to search scroll requests where the scroll ID appears to have been modified.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_19

LANGUAGE: json
CODE:
```
{"type":"audit", "timestamp":"2019-11-27T22:00:00,947+0200", "node.id": "0RMNyghkQYCc_gVd1G6tZQ", "event.type": "rest", "event.action": "tampered_request", "origin.address":"[::1]:50543", "url.path": "/twitter/_async_search", "url.query":"pretty", "request.method":"POST", "request.id":"TqA9OisyQ8WTl1ivJUV1AA"}
```

----------------------------------------

TITLE: ESQL Data Type Mapping Table
DESCRIPTION: A markdown table showing the supported input angle types and their corresponding result types for an ESQL function. All input types (double, integer, long, unsigned_long) map to double as the result type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/types/tan.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| angle | result |
| --- | --- |
| double | double |
| integer | double |
| long | double |
| unsigned_long | double |
```

----------------------------------------

TITLE: Preserving Index Blocks from Source Index
DESCRIPTION: This example shows how to preserve the index blocks from the source index by setting the 'remove_index_blocks' parameter to false. By default, this parameter is true to make the new index immediately writable.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/create-index-from-source.md#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
POST _create_from/my-index/my-new-index
{
  "remove_index_blocks": false
}
```

----------------------------------------

TITLE: Checking for Elasticsearch Home Directory in Bash
DESCRIPTION: Validates that the ES_HOME environment variable is set and points to a valid directory before executing certificate operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/src/test/resources/org/elasticsearch/xpack/ssl/SSLErrorMessageTests/README.txt#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
[ -n "$ES_HOME" ] || { printf '%s: $ES_HOME is not set\n' "$0" ; exit 1; }
[ -d "$ES_HOME" ] || { printf '%s: $ES_HOME is not a directory\n' "$0" ; exit 1; }
```

----------------------------------------

TITLE: Defining Supported Types for ESQL String Pattern Matching
DESCRIPTION: This markdown table specifies the supported input types (str), pattern types, and result types for ESQL's string pattern matching functionality. It shows that both keyword and text types can be matched against keyword patterns, producing boolean results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/types/not like.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| str | pattern | result |
| --- | --- | --- |
| keyword | keyword | boolean |
| text | keyword | boolean |
```

----------------------------------------

TITLE: Running E2E Tests for Confluence Connector
DESCRIPTION: Details commands for conducting end-to-end tests on the Confluence connector. Through the 'make ftest' command, operators can test data source integration. Optional flags adjust the dataset size for quicker testing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-confluence.md#2025-04-21_snippet_7

LANGUAGE: shell
CODE:
```
$ make ftest NAME=confluence
```

LANGUAGE: shell
CODE:
```
make ftest NAME=confluence DATA_SIZE=small
```

----------------------------------------

TITLE: RRF Score Calculation Algorithm in Python
DESCRIPTION: Core algorithm for calculating Reciprocal Rank Fusion scores. Takes multiple query results and combines them using a ranking constant k to determine document scores.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reciprocal-rank-fusion.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
score = 0.0
for q in queries:
    if d in result(q):
        score += 1.0 / ( k + rank( result(q), d ) )
return score

# where
# k is a ranking constant
# q is a query in the set of queries
# d is a document in the result set of q
# result(q) is the result set of q
# rank( result(q), d ) is d's rank within the result(q) starting from 1
```

----------------------------------------

TITLE: Analyzing text with dictionary decompounder filter in Elasticsearch
DESCRIPTION: This example demonstrates how to use the dictionary_decompounder filter in an analyze API request to find subwords in 'Donaudampfschiff' using a specified word list.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-dict-decomp-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET _analyze
{
  "tokenizer": "standard",
  "filter": [
    {
      "type": "dictionary_decompounder",
      "word_list": ["Donau", "dampf", "meer", "schiff"]
    }
  ],
  "text": "Donaudampfschiff"
}
```

----------------------------------------

TITLE: Running Histogram Aggregation on Histogram Field in Elasticsearch
DESCRIPTION: This snippet demonstrates how to perform a histogram aggregation on a pre-aggregated histogram field. The aggregation computes the total number of counts for each interval specified by the 'interval' parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-histogram-aggregation.md#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
POST /metrics_index/_search?size=0
{
  "aggs": {
    "latency_buckets": {
      "histogram": {
        "field": "latency_histo",
        "interval": 5
      }
    }
  }
}
```

----------------------------------------

TITLE: Def Type Compound Assignment
DESCRIPTION: Example of compound assignment using the def type with implicit casting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-general.md#2025-04-21_snippet_9

LANGUAGE: painless
CODE:
```
def x = 1;
x += 2;
```

----------------------------------------

TITLE: Loading Sample Data for DateTime Examples in Elasticsearch
DESCRIPTION: Console command using the _bulk API to load sample message data with different priorities and datetimes for use in the examples.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_28

LANGUAGE: console
CODE:
```
POST /_bulk
{ "index" : { "_index" : "messages", "_id" : "1" } }
{ "priority": 1, "datetime": "2019-07-17T12:13:14Z", "message": "m1" }
{ "index" : { "_index" : "messages", "_id" : "2" } }
{ "priority": 1, "datetime": "2019-07-24T01:14:59Z", "message": "m2" }
{ "index" : { "_index" : "messages", "_id" : "3" } }
{ "priority": 2, "datetime": "1983-10-14T00:36:42Z", "message": "m3" }
{ "index" : { "_index" : "messages", "_id" : "4" } }
{ "priority": 3, "datetime": "1983-10-10T02:15:15Z", "message": "m4" }
{ "index" : { "_index" : "messages", "_id" : "5" } }
{ "priority": 3, "datetime": "1983-10-10T17:18:19Z", "message": "m5" }
{ "index" : { "_index" : "messages", "_id" : "6" } }
{ "priority": 1, "datetime": "2019-08-03T17:19:31Z", "message": "m6" }
{ "index" : { "_index" : "messages", "_id" : "7" } }
{ "priority": 3, "datetime": "2019-08-04T17:20:00Z", "message": "m7" }
{ "index" : { "_index" : "messages", "_id" : "8" } }
{ "priority": 2, "datetime": "2019-08-04T18:01:01Z", "message": "m8" }
{ "index" : { "_index" : "messages", "_id" : "9" } }
{ "priority": 3, "datetime": "1983-10-10T19:00:45Z", "message": "m9" }
{ "index" : { "_index" : "messages", "_id" : "10" } }
{ "priority": 2, "datetime": "2019-07-23T23:39:54Z", "message": "m10" }
```

----------------------------------------

TITLE: Assigning Site Permissions using Graph API
DESCRIPTION: This HTTP POST request assigns read or write access to a specific SharePoint site for an application. It uses the site ID obtained from the previous query and specifies the roles and application details in the request body.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-sharepoint-online.md#2025-04-22_snippet_4

LANGUAGE: http
CODE:
```
POST https://graph.microsoft.com/v1.0/sites/<siteId>/permissions
{
    "roles": ["read"], // or "write"
    "grantedToIdentities": [
        {
            "application": {
                "id": "<App_Client_ID>",
                "displayName": "<App_Display_Name>"
            }
        }
    ]
}
```

----------------------------------------

TITLE: User Dictionary Format for Nori Tokenizer
DESCRIPTION: The format of a user dictionary used by the Nori tokenizer, showing how to define custom nouns and their optional segmentation for compound words.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-nori-tokenizer.md#2025-04-21_snippet_3

LANGUAGE: txt
CODE:
```
<token> [<token 1> ... <token n>]
```

----------------------------------------

TITLE: Token Output from Conditional Filter Example
DESCRIPTION: The output tokens resulting from applying the conditional filter that converts tokens with fewer than 5 characters to lowercase.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-condition-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
[ the, QUICK, BROWN, fox ]
```

----------------------------------------

TITLE: INTERSECTION Operator Examples
DESCRIPTION: Examples showing the ampersand operator which acts as an AND operator, available when the INTERSECTION flag is enabled.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/regexp-syntax.md#2025-04-21_snippet_16

LANGUAGE: text
CODE:
```
aaa.+&.+bbb  # matches 'aaabbb'
```

----------------------------------------

TITLE: Converting CAs to JKS Format
DESCRIPTION: This snippet converts created CAs into the Java KeyStore (JKS) format, ensuring compatibility with Java-based applications.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/libs/ssl-config/src/test/resources/certs/README.txt#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
# 7. Convert CAs to JKS

for n in 1 2 3
do
    keytool -importcert -file ca${n}/ca.crt -alias ca${n} -keystore ca-all/ca.jks -storetype jks -storepass jks-pass -v 
done
```

----------------------------------------

TITLE: Calculate COS in Elasticsearch SQL
DESCRIPTION: Illustrates the usage of the `COS` function in Elasticsearch SQL. It calculates the cosine of an angle expressed in radians and also verifies the Pythagorean identity (sin^2 + cos^2 = 1) using the `SIN` and `COS` functions. The input is a numeric expression (in radians), and the output is a double numeric value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_23

LANGUAGE: sql
CODE:
```
SELECT COS(RADIANS(180)), POWER(SIN(RADIANS(54)), 2) + POWER(COS(RADIANS(54)), 2) AS pythagorean_identity;
```

----------------------------------------

TITLE: GC Generations Metric Example
DESCRIPTION: This snippet demonstrates a case where including a finite and fixed set of names directly in the metric name is acceptable, using "young" and "old" as examples for GC generations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/apm/NAMING.md#2025-04-21_snippet_2

LANGUAGE: none
CODE:
```
"young"
```

LANGUAGE: none
CODE:
```
"old"
```

----------------------------------------

TITLE: URL Decoding Method in Painless
DESCRIPTION: This method signature demonstrates how to use the URL decode processor to decode a URL-encoded string.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-ingest-processors-in-painless.md#2025-04-21_snippet_6

LANGUAGE: painless
CODE:
```
String urlDecode(String value);
```

----------------------------------------

TITLE: Checking In-Progress Reindex Data Stream Status (Console Result)
DESCRIPTION: Displays the status of an actively running data stream reindex task. It shows start time, completion status, total/pending/successful indices, progress for the current index, and any errors encountered.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reindex-data-stream.md#_snippet_3

LANGUAGE: console-result
CODE:
```
{
  "start_time_millis": 1737676174349,
  "complete": false,
  "total_indices_in_data_stream": 4,
  "total_indices_requiring_upgrade": 3,
  "successes": 1,
  "in_progress": [
    {
      "index": ".ds-my-data-stream-2025.01.23-000002",
      "total_doc_count": 10000000,
      "reindexed_doc_count": 1000
    }
  ],
  "pending": 1,
  "errors": []
}
```

----------------------------------------

TITLE: Profile API Response Structure Overview
DESCRIPTION: The basic structure of the Profile API response showing the main sections including shard identification, query details, rewrite time, collectors, aggregations, and fetch phase information.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-profile.md#2025-04-21_snippet_2

LANGUAGE: console-result
CODE:
```
{
   "profile": {
        "shards": [
           {
              "id": "[q2aE02wS1R8qQFnYu6vDVQ][my-index-000001][0]",  <1>
              "node_id": "q2aE02wS1R8qQFnYu6vDVQ",
              "shard_id": 0,
              "index": "my-index-000001",
              "cluster": "(local)",             <2>
              "searches": [
                 {
                    "query": [...],             <3>
                    "rewrite_time": 51443,      <4>
                    "collector": [...]          <5>
                 }
              ],
              "aggregations": [...],            <6>
              "fetch": {...}                    <7>
           }
        ]
     }
}
```

----------------------------------------

TITLE: Define DATE_PARSE Function - SQL
DESCRIPTION: Defines the syntax for the DATE_PARSE function, which parses a date string into a date type based on a specified java.time.format.DateTimeFormatter pattern.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_42

LANGUAGE: SQL
CODE:
```
DATE_PARSE(
    string_exp, <1>
    string_exp) <2>
```

----------------------------------------

TITLE: Search Query with Custom Routing Value in Elasticsearch
DESCRIPTION: Shows how to perform a search query using a custom routing value to target the specific shard where a document was indexed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-shard-routing.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search?routing=my-routing-value
{
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  }
}
```

----------------------------------------

TITLE: Configuring synthetic _source for annotated-text in Elasticsearch
DESCRIPTION: Shows how to set up an index with synthetic _source for an annotated-text field, demonstrating default behavior and stored field behavior.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/mapper-annotated-text-usage.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "text": {
        "type": "annotated_text",
        "fields": {
          "raw": {
            "type": "keyword"
          }
        }
      }
    }
  }
}
PUT idx/_doc/1
{
  "text": [
    "the quick brown fox",
    "the quick brown fox",
    "jumped over the lazy dog"
  ]
}
```

LANGUAGE: console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "text": { "type": "annotated_text", "store": true }
    }
  }
}
PUT idx/_doc/1
{
  "text": [
    "the quick brown fox",
    "the quick brown fox",
    "jumped over the lazy dog"
  ]
}
```

----------------------------------------

TITLE: Performing Faster End-to-End Testing - Shell Command
DESCRIPTION: This shell command is an optimized version to run end-to-end tests quickly by setting a smaller data size. It requires the 'make' utility and appropriate permissions. Key parameters include 'NAME' for the connector name and 'DATA_SIZE' flag to modify the test data size.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-azure-blob.md#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
make ftest NAME=azure_blob_storage DATA_SIZE=small
```

----------------------------------------

TITLE: EQL Sequence Search Result in Elasticsearch
DESCRIPTION: Shows the response format for an EQL sequence search, including the matching sequence of events with their details.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_4

LANGUAGE: console-result
CODE:
```
{
  ...
  "hits": {
    "total": ...,
    "sequences": [
      {
        "events": [
          {
            "_index": ".ds-my-data-stream-2099.12.07-000001",
            "_id": "OQmfCaduce8zoHT93o4H",
            "_source": {
              "@timestamp": "2099-12-07T11:07:09.000Z",
              "event": {
                "category": "process",
                "id": "aR3NWVOs",
                "sequence": 4
              },
              "process": {
                "pid": 2012,
                "name": "regsvr32.exe",
                "command_line": "regsvr32.exe  /s /u /i:https://...RegSvr32.sct scrobj.dll",
                "executable": "C:\\Windows\\System32\\regsvr32.exe"
              }
            }
          },
          {
            "_index": ".ds-my-data-stream-2099.12.07-000001",
            "_id": "yDwnGIJouOYGBzP0ZE9n",
            "_source": {
              "@timestamp": "2099-12-07T11:07:10.000Z",
              "event": {
                "category": "file",
                "id": "tZ1NWVOs",
                "sequence": 5
              },
              "process": {
                "pid": 2012,
                "name": "regsvr32.exe",
                "executable": "C:\\Windows\\System32\\regsvr32.exe"
              },
              "file": {
                "path": "C:\\Windows\\System32\\scrobj.dll",
                "name": "scrobj.dll"
              }
            }
          }
        ]
      }
    ]
  }
}
```

----------------------------------------

TITLE: Defining Binary Field Mapping in Elasticsearch
DESCRIPTION: This snippet demonstrates how to define a mapping with a binary field and how to index a document with a Base64 encoded binary value. The binary field is not stored by default and is not searchable.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/binary.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "name": {
        "type": "text"
      },
      "blob": {
        "type": "binary"
      }
    }
  }
}

PUT my-index-000001/_doc/1
{
  "name": "Some binary blob",
  "blob": "U29tZSBiaW5hcnkgYmxvYg=="
}
```

----------------------------------------

TITLE: TRACE Level Logging Example in Elasticsearch (Java)
DESCRIPTION: Shows an example of TRACE level logging in Elasticsearch, used for detailed debugging information typically only needed by developers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/CONTRIBUTING.md#2025-04-21_snippet_14

LANGUAGE: java
CODE:
```
logger.trace("starting async refresh");
// ...
logger.trace("received node stats response");
// ...
logger.trace("received indices stats response");
// ...
logger.trace("stats all received, computing cluster info and notifying listeners");
// ...
logger.trace("notifying [{}] of new cluster info", listener);
```

----------------------------------------

TITLE: API Keys Object Schema for Security Config Change Events in Elasticsearch
DESCRIPTION: Defines the structure of an API keys object in security configuration change events. It includes fields for key IDs, name, ownership status, and user information.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_28

LANGUAGE: javascript
CODE:
```
{"ids": <string_list>, "name": <string>, "owned_by_authenticated_user":
<boolean>, "user":{"name": <string>, "realm": <string>}}
```

----------------------------------------

TITLE: Privileges Object Schema for Security Config Change Events in Elasticsearch
DESCRIPTION: Specifies the structure of a privileges object in security configuration change events. It includes fields for the application, privilege name, actions, and metadata.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_23

LANGUAGE: javascript
CODE:
```
{"application": <string>, "name": <string>, "actions": <string_list>,
"metadata": <object>}
```

----------------------------------------

TITLE: Configuring Transport Authentication with Realm in Elasticsearch
DESCRIPTION: YAML configuration for transport layer authentication with a specific realm. This example sets up PKI authentication for node-to-node communication using a specified PKI realm.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/watcher/licenses/failureaccess-NOTICE.txt#2025-04-21_snippet_12

LANGUAGE: yaml
CODE:
```
xpack.security.transport.authentication.type: pki
xpack.security.transport.authentication.realm: pki1
```

----------------------------------------

TITLE: Downloading Redis Connector Configuration File with curl
DESCRIPTION: Command to download the sample configuration file for the Redis connector using curl. The file is saved to the ~/connectors-config/ directory.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-redis.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
curl https://raw.githubusercontent.com/elastic/connectors/main/config.yml.example --output ~/connectors-config/config.yml
```

----------------------------------------

TITLE: Indexing WKT GeometryCollection in Elasticsearch
DESCRIPTION: Example of indexing a Well-Known Text (WKT) GeometryCollection in Elasticsearch. This represents the same geometry as the GeoJSON example but using WKT syntax, combining a Point and a LineString.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-shape.md#2025-04-21_snippet_17

LANGUAGE: json
CODE:
```
POST /example/_doc
{
  "location" : "GEOMETRYCOLLECTION (POINT (100.0 0.0), LINESTRING (101.0 0.0, 102.0 1.0))"
}
```

----------------------------------------

TITLE: Reconstructed Synthetic _source with Flattened Array (console-result)
DESCRIPTION: This snippet displays the expected structure of the `_source` document when synthetic `_source` is active and the document from the previous example is retrieved. The array of objects `[{"bar": 1}, {"bar": 2}]` is transformed into `{"bar": [1, 2]}`, illustrating the array modification behavior. This is an output example, not code to be executed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-source-field.md#_snippet_2

LANGUAGE: console-result
CODE:
```
{
  "foo": {
    "bar": [1, 2]
  }
}
```

----------------------------------------

TITLE: MongoDB Aggregation Pipeline Sync Rule Structure
DESCRIPTION: JSON structure demonstrating the format for defining MongoDB aggregation pipeline sync rules
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-mongodb.md#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
{
	"aggregate":{
		"pipeline": [
			// pipeline elements go here
		],
		"options": {
            // pipeline options go here
		}
    }
}
```

----------------------------------------

TITLE: Defining WordNet Format Synonyms in Elasticsearch
DESCRIPTION: Example of defining synonyms using the WordNet format. Each line contains information about the synonym set, including identifiers and word types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-synonym-tokenfilter.md#2025-04-21_snippet_5

LANGUAGE: text
CODE:
```
s(100000002,1,'come',v,1,0).
s(100000002,2,'advance',v,1,0).
s(100000002,3,'approach',v,1,0)."
```

----------------------------------------

TITLE: Creating an HDFS Repository with Node-Specific Kerberos Principals
DESCRIPTION: Demonstrates how to configure a secure HDFS repository with dynamic hostname-based Kerberos principals. The _HOST pattern in the principal name will be automatically replaced with the hostname of each node at runtime.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/repository-hdfs-security.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
PUT _snapshot/my_hdfs_repository
{
  "type": "hdfs",
  "settings": {
    "uri": "hdfs://namenode:8020/",
    "path": "/user/elasticsearch/repositories/my_hdfs_repository",
    "security.principal": "elasticsearch/_HOST@REALM"
  }
}
```

----------------------------------------

TITLE: Advanced Sync Rules for S3 Connector - Elasticsearch - JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to define advanced sync rules for fetching data from specific S3 buckets using prefixes and file extensions. These rules refine the data sync process for the connector.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-s3.md#2025-04-21_snippet_5

LANGUAGE: js
CODE:
```
[
  {
    "bucket": "bucket1",
    "prefix": "folder1/docs"
  }
]

[
  {
    "bucket": "bucket2",
    "prefix": "folder1"
  }
]

[
  {
    "bucket": "bucket2",
    "prefix": "abc",
    "extension": [".txt", ".png"]
  }
]
```

----------------------------------------

TITLE: Adding a plugin extension to a deployment plan in Elasticsearch Service
DESCRIPTION: JSON plan example showing how to include a plugin extension in an Elasticsearch deployment update operation. The extension is referenced by its ID in the user_plugins section.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-plugins-guide.md#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
{
    "name": "Extensions",
    "prune_orphans": false,
    "resources": {
        "elasticsearch": [
            {
                "region": "gcp-us-central1",
                "ref_id": "main-elasticsearch",
                "plan": {
                    "cluster_topology": [

                      ...

                    ],
                    "elasticsearch": {
                        "version": "8.4.3",
                        "enabled_built_in_plugins": [ ],
                      "user_bundles": [
                        {
                          "name": "custom-plugin",
                          "url": "repo://2286113333",
                          "elasticsearch_version": "8.4.3"
                        }
                      ]
                    },
                    "deployment_template": {
                        "id": "gcp-storage-optimized-v3"
                    }
                }
            }
        ]
    }
}
```

----------------------------------------

TITLE: Calculate ATAN2 in Elasticsearch SQL
DESCRIPTION: Demonstrates how to use the `ATAN2` function in Elasticsearch SQL. It calculates the arctangent of y (ordinate) and x (abscissa) coordinates, showing that it returns the angle in radians. It requires two numeric expressions as input and outputs a double numeric value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_22

LANGUAGE: sql
CODE:
```
SELECT ATAN2(5 * SIN(RADIANS(45)), 5 * COS(RADIANS(45))) AS "ATAN2(5*SIN(45), 5*COS(45))", RADIANS(45);
```

----------------------------------------

TITLE: Performing Multi-Match Query in Elasticsearch ESQL
DESCRIPTION: This snippet demonstrates how to use the MULTI_MATCH function in an ESQL query to search for 'Faulkner' across the 'author' and 'description' fields of a 'books' index. It limits the results to 5 entries, sorts by 'book_no', and only returns the 'book_no' and 'author' fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/multi_match.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM books
| WHERE MULTI_MATCH("Faulkner", author, description)
| KEEP book_no, author
| SORT book_no
| LIMIT 5
```

----------------------------------------

TITLE: Log4j ParameterizedMessage Usage Restriction
DESCRIPTION: Discourages direct usage of Log4j ParameterizedMessage, recommending java.util.Supplier<String> with String.format instead for more flexibility and control over message formatting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/build-tools-internal/src/main/resources/forbidden/es-all-signatures.txt#2025-04-21_snippet_8

LANGUAGE: java
CODE:
```
@defaultMessage use java.util.Supplier<String> with String.format instead of ParameterizedMessage
org.apache.logging.log4j.message.ParameterizedMessage#<init>(java.lang.String, java.lang.String[], java.lang.Throwable)
org.apache.logging.log4j.message.ParameterizedMessage#<init>(java.lang.String, java.lang.Object[], java.lang.Throwable)
org.apache.logging.log4j.message.ParameterizedMessage#<init>(java.lang.String, java.lang.Object[])
org.apache.logging.log4j.message.ParameterizedMessage#<init>(java.lang.String, java.lang.Object)
org.apache.logging.log4j.message.ParameterizedMessage#<init>(java.lang.String, java.lang.Object, java.lang.Object)
```

----------------------------------------

TITLE: Defining ClassNotFoundException in Java
DESCRIPTION: This snippet defines the java.lang.ClassNotFoundException class, thrown when an application tries to load in a class through its string name using `forName` but no definition for the class with the specified name could be found. It includes a default constructor and a constructor that accepts a string message.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.lang.txt#2025-04-21_snippet_30

LANGUAGE: java
CODE:
```
class java.lang.ClassNotFoundException {
  ()
  (String)
}
```

----------------------------------------

TITLE: Creating Rerank Inference Endpoint using Elastic Rerank Model | Elasticsearch Console
DESCRIPTION: Defines an Elasticsearch inference endpoint named `my-elastic-rerank` using the built-in `.rerank-v1` model for the `rerank` task. This endpoint is a prerequisite for using the `text_similarity_reranker` with the Elastic Rerank model.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrievers.md#_snippet_5

LANGUAGE: console
CODE:
```
PUT _inference/rerank/my-elastic-rerank
{
  "service": "elasticsearch",
  "service_settings": {
    "model_id": ".rerank-v1",
    "num_threads": 1,
    "adaptive_allocations": {
      "enabled": true,
      "min_number_of_allocations": 1,
      "max_number_of_allocations": 10
    }
  }
}
```

----------------------------------------

TITLE: Calculating Time Difference Between Two Date Fields in Painless
DESCRIPTION: Painless script that safely accesses two date fields from an indexed document, handles cases where fields might be missing, and calculates the time difference in milliseconds.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_22

LANGUAGE: painless
CODE:
```
if (doc.containsKey('start') && doc.containsKey('end')) {

    if (doc['start'].size() > 0 && doc['end'].size() > 0) {

        ZonedDateTime start = doc['start'].value;
        ZonedDateTime end = doc['end'].value;
        long differenceInMillis = ChronoUnit.MILLIS.between(start, end);

        // handle difference in times
    } else {
        // handle fields without values
    }
} else {
    // handle index with missing fields
}
```

----------------------------------------

TITLE: Demonstrating Date Format Usage in Elasticsearch
DESCRIPTION: This snippet shows a note about using the 'date_optional_time' format and its potential issues when paired with numeric formats. It recommends using the strict version for better results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-date-format.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
NOTE: When using `date_optional_time`, the parsing is lenient and will attempt to parse
numbers as a year (e.g. `292278994` will be parsed as a year). This can lead to unexpected results
when paired with a numeric focused format like `epoch_second` and `epoch_millis`.
It is recommended you use `strict_date_optional_time` when pairing with a numeric focused format.
```

----------------------------------------

TITLE: Silent Mode Configuration - YAML
DESCRIPTION: YAML configuration file format for running elasticsearch-certgen in silent mode. Shows how to specify instance names, IP addresses, DNS names, and custom filenames.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/certgen.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
instances:
  - name: "node1"
    ip:
      - "192.0.2.1"
    dns:
      - "node1.mydomain.com"
  - name: "node2"
    ip:
      - "192.0.2.2"
      - "198.51.100.1"
  - name: "node3"
  - name: "node4"
    dns:
      - "node4.mydomain.com"
      - "node4.internal"
  - name: "CN=node5,OU=IT,DC=mydomain,DC=com"
    filename: "node5"
```

----------------------------------------

TITLE: Histogram Aggregation with Hard Bounds
DESCRIPTION: Example showing how to limit the range of buckets in a histogram aggregation using hard_bounds. This is useful for open data ranges that could result in too many buckets.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-histogram-aggregation.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "query": {
    "constant_score": { "filter": { "range": { "price": { "lte": "500" } } } }
  },
  "aggs": {
    "prices": {
      "histogram": {
        "field": "price",
        "interval": 50,
        "hard_bounds": {
          "min": 100,
          "max": 200
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Viewing Extraction Service Logs
DESCRIPTION: These commands use `docker exec` to access and display the extraction service logs from within the Docker container.  They tail both `openresty.log` (request traffic logs) and `tika.log` (tikaserver jar logs) for troubleshooting purposes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-content-extraction.md#2025-04-21_snippet_10

LANGUAGE: bash
CODE:
```
$ docker exec extraction-service /bin/sh -c "tail /var/log/openresty.log"
$ docker exec extraction-service /bin/sh -c "tail /var/log/tika.log"
```

----------------------------------------

TITLE: Search and Highlight Fields as Array - Elasticsearch DSL
DESCRIPTION: Demonstrates specifying the `fields` parameter within the `highlight` section as a JSON array. This allows explicitly controlling the order in which fields are processed for highlighting, although built-in highlighters may not utilize this order.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_18

LANGUAGE: Elasticsearch DSL
CODE:
```
GET /_search
{
  "highlight": {
    "fields": [
      { "title": {} },
      { "text": {} }
    ]
  }
}
```

----------------------------------------

TITLE: Extract Minute of Hour using MINUTE_OF_HOUR in Elasticsearch SQL
DESCRIPTION: Demonstrates using the MINUTE_OF_HOUR function to extract the minute component from a TIMESTAMP literal '2018-02-19T10:23:27Z'. The function returns an integer representing the minute within the hour.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_73

LANGUAGE: SQL
CODE:
```
SELECT MINUTE_OF_HOUR(CAST('2018-02-19T10:23:27Z' AS TIMESTAMP)) AS minute;
```

----------------------------------------

TITLE: Computing MD5 and SHA-256 Hashes using ESQL
DESCRIPTION: Example query demonstrating how to compute multiple hash values (MD5 and SHA-256) for message field data. The query filters out connection error messages, computes hashes, and retains only relevant fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/hash.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM sample_data
| WHERE message != "Connection error"
| EVAL md5 = hash("md5", message), sha256 = hash("sha256", message)
| KEEP message, md5, sha256
```

----------------------------------------

TITLE: Elasticsearch License Header Definition
DESCRIPTION: Multi-license header defining usage terms for Elasticsearch components. Users can choose between Elastic License 2.0, GNU AGPL v3.0, or Server Side Public License v1.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.time.txt#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
#
 # Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 # or more contributor license agreements. Licensed under the "Elastic License
 # 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 # Public License v 1"; you may not use this file except in compliance with, at
 # your election, the "Elastic License 2.0", the "GNU Affero General Public
 # License v3.0 only", or the "Server Side Public License, v 1".
#
```

----------------------------------------

TITLE: Cron Expression Examples - Interval Triggers - TXT
DESCRIPTION: These examples demonstrate using the increment operator (`/`) in cron expressions. They trigger every 15 minutes between 9:00 AM and 9:45 AM UTC daily, and at 9:05 AM UTC every 3 days starting from the 1st of the month, respectively.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/api-conventions.md#_snippet_3

LANGUAGE: txt
CODE:
```
0 0/15 9 * * ?
0 5 9 1/3 * ?
```

----------------------------------------

TITLE: Applying Bucket Selector Aggregation in Elasticsearch Query
DESCRIPTION: This example demonstrates how to use bucket selector aggregation in an Elasticsearch query. It filters sales data to retain only buckets where total monthly sales exceed 200.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-bucket-selector-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "size": 0,
  "aggs": {
    "sales_per_month": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "total_sales": {
          "sum": {
            "field": "price"
          }
        },
        "sales_bucket_filter": {
          "bucket_selector": {
            "buckets_path": {
              "totalSales": "total_sales"
            },
            "script": "params.totalSales > 200"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Converting CAs to PKCS#12 Format
DESCRIPTION: This snippet converts all created CAs into PKCS#12 format using the keytool command. It ensures that certificates are properly stored as PKCS#12 keystores.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/libs/ssl-config/src/test/resources/certs/README.txt#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
# 6. Convert CAs to PKCS#12

for n in 1 2 3
do
    keytool -importcert -file ca${n}/ca.crt -alias ca -keystore ca${n}/ca.p12 -storetype PKCS12 -storepass p12-pass -v 
    keytool -importcert -file ca${n}/ca.crt -alias ca${n} -keystore ca-all/ca.p12 -storetype PKCS12 -storepass p12-pass -v 
done
```

----------------------------------------

TITLE: Configuring Google Drive Connector for Dockerized Elasticsearch
DESCRIPTION: YAML configuration for setting up the Google Drive connector to work with a Dockerized Elasticsearch and Kibana environment.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-google-drive.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
elasticsearch:
  host: http://elasticsearch:9200
  api_key: "<your api key>"

connectors:
  - connector_id: "google_drive"
    service_type: "google_drive"
    # Name of the connector
    name: "Google Drive Connector"
    index_name: "search-google-drive"
    # Sync interval
    scheduling:
      interval: "3600s"
    # Configures the connector
    configuration:
      service_account_credentials: '<Your service_account_credentials JSON here>'
      use_domain_wide_delegation_for_sync: false
      google_workspace_admin_email_for_data_sync: 'admin@example.com'
      google_workspace_email_for_shared_drives_sync: 'user@example.com'
      use_document_level_security: false
      google_workspace_admin_email: 'admin@example.com'
      max_concurrency: 10
      use_text_extraction_service: false
```

----------------------------------------

TITLE: Configuring Elasticsearch Connection Parameters
DESCRIPTION: Configures basic connection settings for Elasticsearch and connectors. The snippet sets host and API key values necessary for authentication. Optional parameters include connector-specific API keys which override the default key if provided.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-confluence.md#2025-04-21_snippet_4

LANGUAGE: yaml
CODE:
```
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: confluence
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA>
```

----------------------------------------

TITLE: Convert Degrees to Radians in Elasticsearch SQL
DESCRIPTION: Illustrates the use of the `RADIANS` function in Elasticsearch SQL, which converts an angle from degrees to radians. It converts 90 degrees and compares the result to PI()/2, showing they are equal. Requires a numeric expression (in degrees) as input and outputs a double numeric value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_27

LANGUAGE: sql
CODE:
```
SELECT RADIANS(90), PI()/2;
```

----------------------------------------

TITLE: Defining MIN Function Test Case for Elasticsearch SQL
DESCRIPTION: This code snippet defines a test case for the MIN function in Elasticsearch SQL. It specifies the function name, expected data types, and provides example queries to test the function's behavior.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/min.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
MIN

expression	NUMERIC, DATETIME, INTERVAL
result	SAME

MIN(1)	=>	1
MIN(1.0)	=>	1.0
MIN(null)	=>	null

MIN(CAST('2020-01-01' AS TIMESTAMP))	=>	CAST('2020-01-01' AS TIMESTAMP)
MIN(CAST('1 year' AS INTERVAL YEAR))	=>	CAST('1 year' AS INTERVAL YEAR)

SELECT MIN(emp_no) FROM test_emp
SELECT department, MIN(salary) FROM test_emp GROUP BY department
```

----------------------------------------

TITLE: Using Nested Query in Elasticsearch Search
DESCRIPTION: This code snippet forms a query using a nested field to search within 'my-index-000001'. It performs a boolean query on the nested field 'obj1' and adjusts the score based on the average of matching child objects.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-nested-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search
{
  "query": {
    "nested": {
      "path": "obj1",
      "query": {
        "bool": {
          "must": [
            { "match": { "obj1.name": "blue" } },
            { "range": { "obj1.count": { "gt": 5 } } }
          ]
        }
      },
      "score_mode": "avg"
    }
  }
}
```

----------------------------------------

TITLE: Configuring Standard Tokenizer with Custom max_token_length in Elasticsearch
DESCRIPTION: This example shows how to configure the standard tokenizer with a custom max_token_length of 5. It includes the index creation with custom analyzer and tokenizer settings, followed by an analysis request.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-standard-tokenizer.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
PUT my-index-000001
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "my_tokenizer"
        }
      },
      "tokenizer": {
        "my_tokenizer": {
          "type": "standard",
          "max_token_length": 5
        }
      }
    }
  }
}

POST my-index-000001/_analyze
{
  "analyzer": "my_analyzer",
  "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
}
```

LANGUAGE: text
CODE:
```
[ The, 2, QUICK, Brown, Foxes, jumpe, d, over, the, lazy, dog's, bone ]
```

----------------------------------------

TITLE: Updating extension name using download URL method in Elasticsearch Service
DESCRIPTION: API call to update the name of an existing extension created with the download URL method. Only updates metadata without requiring the file to be re-uploaded.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-plugins-guide.md#2025-04-21_snippet_11

LANGUAGE: sh
CODE:
```
curl -X POST \
  https://api.elastic-cloud.com/api/v1/deployments/extensions/EXTENSION_ID \
  -H "Authorization: ApiKey $CLOUD_API_KEY" \
  -H 'Content-Type: application/json' \
  -d '{
   "extension_type" : "plugin",
    "name": "custom-plugin-07012020",
   "version" : "8.4.3"
}'
```

----------------------------------------

TITLE: Adding and Subtracting Date Periods from DateTime Values in ESQL
DESCRIPTION: This snippet demonstrates how to add and subtract date periods from datetime values using ESQL. It creates a row with a datetime value, then adds a literal date period of '3 DAYS' and subtracts a date period created using the TO_DATEPERIOD function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_dateperiod.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW x = "2024-01-01"::datetime
| EVAL y = x + "3 DAYS"::date_period, z = x - TO_DATEPERIOD("3 days");
```

----------------------------------------

TITLE: Resulting Document after Dissect Processing
DESCRIPTION: The JSON document produced after the dissect processor has extracted structured fields from the log line. Each captured field becomes a property in the document's _source.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/dissect-processor.md#2025-04-21_snippet_2

LANGUAGE: js
CODE:
```
"doc": {
  "_index": "_index",
  "_type": "_type",
  "_id": "_id",
  "_source": {
    "request": "/english/venues/cities/images/montpellier/18.gif",
    "auth": "-",
    "ident": "-",
    "verb": "GET",
    "@timestamp": "30/Apr/1998:22:00:52 +0000",
    "size": "3171",
    "clientip": "1.2.3.4",
    "httpversion": "1.0",
    "status": "200"
  }
}
```

----------------------------------------

TITLE: Between Function - Elasticsearch Query
DESCRIPTION: Filters processes by checking if the substring between characters 's' and 'e' in `process_name` matches 'yst'. Uses a custom script to perform the string slice and comparison.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_14

LANGUAGE: Elasticsearch Painless
CODE:
```
"script":{"script":{"source":"InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalQlScriptUtils.nullSafeFilter(InternalEqlScriptUtils.seq(InternalEqlScriptUtils.between(X0,params.v1,params.v2,params.v3,params.v4),params.v5)))" "params":{"v0":"process_name","v1":"s","v2":"e","v3":false,"v4":false,"v5":"yst"}
```

----------------------------------------

TITLE: Querying and Transforming Employee Data with ESQL
DESCRIPTION: This ESQL query sorts employees by emp_no, selects specific columns, and calculates height in feet and centimeters from the original height value in meters. It demonstrates sorting, column selection, and mathematical operations in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/eval.csv-spec/eval.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| SORT emp_no
| KEEP first_name, last_name, height
| EVAL height_feet = height * 3.281, height_cm = height * 100
```

----------------------------------------

TITLE: Example using VAR_SAMP on a field in SQL
DESCRIPTION: Demonstrates how to use the VAR_SAMP function along with MIN and MAX aggregations on the 'salary' field from the 'emp' table in Elasticsearch SQL. The query calculates the sample variance of salaries and presents it alongside the minimum and maximum salary values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_60

LANGUAGE: SQL
CODE:
```
SELECT MIN(salary) AS min, MAX(salary) AS max, VAR_SAMP(salary) AS varsamp FROM emp;
```

----------------------------------------

TITLE: Example using VAR_POP on a field in SQL
DESCRIPTION: Demonstrates how to use the VAR_POP function along with MIN and MAX aggregations on the 'salary' field from the 'emp' table in Elasticsearch SQL. The query calculates the population variance of salaries and presents it alongside the minimum and maximum salary values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_57

LANGUAGE: SQL
CODE:
```
SELECT MIN(salary) AS min, MAX(salary) AS max, VAR_POP(salary) AS varpop FROM emp;
```

----------------------------------------

TITLE: Synthetic Source with Binary Fields in Elasticsearch
DESCRIPTION: This example shows how to set up an index with synthetic _source enabled and a binary field. It demonstrates that synthetic source may sort binary values based on their byte representation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/binary.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "binary": { "type": "binary", "doc_values": true }
    }
  }
}
PUT idx/_doc/1
{
  "binary": ["IAA=", "EAA="]
}
```

----------------------------------------

TITLE: Calculating MD5 Hashes with ESQL
DESCRIPTION: Example query that filters out connection error messages, calculates MD5 hashes of the message field, and returns only the message and corresponding MD5 hash columns. The query demonstrates the usage of WHERE, EVAL, and KEEP clauses in combination with the md5() function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/md5.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM sample_data
| WHERE message != "Connection error"
| EVAL md5 = md5(message)
| KEEP message, md5
```

----------------------------------------

TITLE: Monthly Bucketing with Target Count in ESQL
DESCRIPTION: Creates monthly buckets for hire dates over a year period, targeting 20 buckets maximum. Demonstrates the automatic bucket size calculation mode with date values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/bucket.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| WHERE hire_date >= "1985-01-01T00:00:00Z" AND hire_date < "1986-01-01T00:00:00Z"
| STATS hire_date = MV_SORT(VALUES(hire_date)) BY month = BUCKET(hire_date, 20, "1985-01-01T00:00:00Z", "1986-01-01T00:00:00Z")
```

----------------------------------------

TITLE: Configuring Kuromoji Number Token Filter in Elasticsearch
DESCRIPTION: Example showing how to configure a custom analyzer with kuromoji_tokenizer and kuromoji_number filter, followed by an analyze API call to test the number conversion.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-number.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
PUT kuromoji_sample
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "my_analyzer": {
            "tokenizer": "kuromoji_tokenizer",
            "filter": [
              "kuromoji_number"
            ]
          }
        }
      }
    }
  }
}

GET kuromoji_sample/_analyze
{
  "analyzer": "my_analyzer",
  "text": "一〇〇〇"
}
```

----------------------------------------

TITLE: Subtracting Interval from Datetime Literal in Elasticsearch SQL
DESCRIPTION: This snippet subtracts a year-month `INTERVAL` ('2 years and 8 months') from a specific datetime literal, cast as `DATETIME`. The operation calculates the resulting date and time after subtracting the specified interval, aliasing the result as `result`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_6

LANGUAGE: SQL
CODE:
```
SELECT CAST('2018-05-13T12:34:56' AS DATETIME) - INTERVAL '2-8' YEAR TO MONTH AS result;
```

----------------------------------------

TITLE: Example using SUM_OF_SQUARES on an expression in SQL
DESCRIPTION: Illustrates how to apply the SUM_OF_SQUARES function to an expression ('salary / 24.0') within an Elasticsearch SQL query. This calculates the sum of squares of values derived from the expression, presented with the corresponding minimum and maximum values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_55

LANGUAGE: SQL
CODE:
```
SELECT MIN(salary / 24.0) AS min, MAX(salary / 24.0) AS max, SUM_OF_SQUARES(salary / 24.0) AS sumsq FROM emp;
```

----------------------------------------

TITLE: Example Warning Log Message
DESCRIPTION: This warning message indicates that the health check to the data extraction service resulted in a timeout or connection error.  A timeout may be due to the extraction service not running or being inaccessible, while a server connection error is an internal issue requiring log investigation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-content-extraction.md#2025-04-21_snippet_13

LANGUAGE: bash
CODE:
```
Expected to find a running instance of data extraction service at <HOST> but failed. <ERROR>.
```

----------------------------------------

TITLE: Extracting documents with geohash geo_grid query
DESCRIPTION: Demonstrates querying Elasticsearch using a geo_grid query to retrieve documents within a specific geohash bucket. This uses the GET method and specifies the geohash value to filter documents. The query returns documents that match the specified geohash.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-geo-grid-query.md#2025-04-21_snippet_2

LANGUAGE: Elasticsearch
CODE:
```
GET /my_locations/_search
{
  "query": {
    "geo_grid" :{
      "location" : {
        "geohash" : "u0"
      }
    }
  }
}
```

LANGUAGE: Elasticsearch
CODE:
```
{
  "took" : 1,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 1,
      "relation" : "eq"
    },
    "max_score" : 1.0,
    "hits" : [
      {
        "_index" : "my_locations",
        "_id" : "3",
        "_score" : 1.0,
        "_source" : {
          "location" : "POINT(2.336389 48.861111)",
          "city" : "Paris",
          "name" : "Musée du Louvre"
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: GeoIP Pipeline with No Match Example
DESCRIPTION: Example demonstrating what happens when an IP address cannot be found in the GeoIP database - no target field is added to the document.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/geoip-processor.md#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
PUT _ingest/pipeline/geoip
{
  "description" : "Add ip geolocation info",
  "processors" : [
    {
      "geoip" : {
        "field" : "ip"
      }
    }
  ]
}

PUT my-index-000001/_doc/my_id?pipeline=geoip
{
  "ip": "80.231.5.0"
}

GET my-index-000001/_doc/my_id
```

----------------------------------------

TITLE: Type Support Matrix for Date Operations in ESQL
DESCRIPTION: A markdown table showing supported type combinations for date operations in ESQL. Documents how date_period and time_duration intervals interact with date and date_nanos types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/types/date_trunc.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| interval | date | result |
| --- | --- | --- |
| date_period | date | date |
| date_period | date_nanos | date_nanos |
| time_duration | date | date |
| time_duration | date_nanos | date_nanos |
```

----------------------------------------

TITLE: Question Mark Operator Examples in Regular Expressions
DESCRIPTION: Examples showing the question mark operator which makes the preceding character optional (zero or one occurrence).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/regexp-syntax.md#2025-04-21_snippet_4

LANGUAGE: text
CODE:
```
abc?     # matches 'ab' and 'abc'
```

----------------------------------------

TITLE: Defining ZoneRules Class Methods
DESCRIPTION: Defines the structure and methods of the ZoneRules class for managing time zone rules. Includes methods for handling daylight savings, offsets, and transitions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.time.zone.txt#2025-04-21_snippet_2

LANGUAGE: java
CODE:
```
class java.time.zone.ZoneRules {
  Duration getDaylightSavings(Instant)
  ZoneOffset getOffset(Instant)
  ZoneOffset getStandardOffset(Instant)
  ZoneOffsetTransition getTransition(LocalDateTime)
  List getTransitionRules()
  List getTransitions()
  List getValidOffsets(LocalDateTime)
  boolean isDaylightSavings(Instant)
  boolean isFixedOffset()
  boolean isValidOffset(LocalDateTime,ZoneOffset)
  ZoneOffsetTransition nextTransition(Instant)
  ZoneRules of(ZoneOffset)
  ZoneRules of(ZoneOffset,ZoneOffset,List,List,List)
  ZoneOffsetTransition previousTransition(Instant)
}
```

----------------------------------------

TITLE: Apache License 2.0 Boilerplate Notice Text
DESCRIPTION: Standard copyright and license notice text to be included in software projects using Apache License 2.0. The text includes placeholders for copyright year and owner information that should be customized.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/repository-gcs/licenses/opencensus-LICENSE.txt#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
Copyright [yyyy] [name of copyright owner]

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
```

----------------------------------------

TITLE: Asterisk Operator Examples in Regular Expressions
DESCRIPTION: Examples showing the asterisk operator which matches zero or more occurrences of the preceding character.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/regexp-syntax.md#2025-04-21_snippet_6

LANGUAGE: text
CODE:
```
ab*     # matches 'a', 'ab', 'abb', 'abbb', etc.
```

----------------------------------------

TITLE: Defining Apartment Structure in JSON
DESCRIPTION: This snippet represents the structure of an apartment in JSON format, which will be filtered based on certain criteria. The structure includes properties like id, bedrooms, price, and address details, which are essential for the filtering process.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-sync-rules.md#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
{
    "id": 1234,
    "bedrooms": 3,
    "price": 1500,
    "address": {
        "street": "Street 123",
        "government_area": "Area",
        "country_information": {
            "country_code": "PT",
            "country": "Portugal"
        }
    }
}
```

----------------------------------------

TITLE: Defining ZoneOffsetTransition Class Methods
DESCRIPTION: Defines the structure and methods of the ZoneOffsetTransition class for handling time zone offset transitions. Includes methods for comparing transitions, getting date/time information, and checking transition validity.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.time.zone.txt#2025-04-21_snippet_0

LANGUAGE: java
CODE:
```
class java.time.zone.ZoneOffsetTransition {
  int compareTo(ZoneOffsetTransition)
  LocalDateTime getDateTimeAfter()
  LocalDateTime getDateTimeBefore()
  Duration getDuration()
  Instant getInstant()
  ZoneOffset getOffsetAfter()
  ZoneOffset getOffsetBefore()
  boolean isGap()
  boolean isOverlap()
  boolean isValidOffset(ZoneOffset)
  ZoneOffsetTransition of(LocalDateTime,ZoneOffset,ZoneOffset)
  long toEpochSecond()
}
```

----------------------------------------

TITLE: Configuring QUERY String Query with Optional Parameters SQL
DESCRIPTION: Illustrates how to provide additional configuration options to the QUERY predicate using the optional second parameter, a semicolon-separated string. This allows customizing underlying `query_string` settings like default operator and default field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-search.md#_snippet_7

LANGUAGE: SQL
CODE:
```
SELECT author, name, SCORE() FROM library WHERE QUERY('dune god', 'default_operator=and;default_field=name');
```

----------------------------------------

TITLE: Hashing Messages with SHA256 Function in ESQL
DESCRIPTION: This snippet demonstrates how to apply the SHA256 hashing function to message fields in ESQL. It first filters out messages with 'Connection error', applies the SHA256 function to the message field, and then selects only the message and its corresponding hash value for display.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/sha256.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM sample_data
| WHERE message != "Connection error"
| EVAL sha256 = sha256(message)
| KEEP message, sha256
```

----------------------------------------

TITLE: Sending HTTP Request with Hostname Verifier and Socket Factory - Java
DESCRIPTION: This snippet demonstrates how to send an HTTP request using the Nimbus SDK with the ability to specify a HostnameVerifier and SSLSocketFactory. It allows for secure connections and hostname validation ensuring that connections are made to trusted servers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/forbidden/oidc-signatures.txt#2025-04-21_snippet_0

LANGUAGE: Java
CODE:
```
com.nimbusds.oauth2.sdk.http.HTTPRequest#send(javax.net.ssl.HostnameVerifier, javax.net.ssl.SSLSocketFactory)
```

----------------------------------------

TITLE: Basic Copyright Notice Template
DESCRIPTION: Template for the minimal copyright and license notice to be included at the start of source files.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/ingest-attachment/licenses/tika-langdetect-NOTICE.txt#2025-04-22_snippet_3

LANGUAGE: text
CODE:
```
One line to give the program's name and a brief idea of what it does.
Copyright (C) <year> <name of author>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335 USA
```

----------------------------------------

TITLE: Creating a Text Field with Custom Prefix Length Settings in Elasticsearch
DESCRIPTION: This example demonstrates how to create a 'full_name' field with custom index_prefixes settings. It specifies min_chars as 1 and max_chars as 10, overriding the default values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/index-prefixes.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "full_name": {
        "type": "text",
        "index_prefixes": {
          "min_chars" : 1,
          "max_chars" : 10
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Testing ESQL Coalesce Function with Various Input Types
DESCRIPTION: This SQL snippet demonstrates the usage of the COALESCE function with different data types and null values. It tests the function's behavior with integers, strings, and null inputs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/coalesce.md#2025-04-21_snippet_0

LANGUAGE: SQL
CODE:
```
SELECT
    COALESCE(null, 1, 2) AS result,
    COALESCE(null, null, 3) AS result,
    COALESCE(1, null, 2) AS result,
    COALESCE(null, 'a', 'b') AS result,
    COALESCE('a', null, 'b') AS result,
    COALESCE(null, null, null) AS result;
```

----------------------------------------

TITLE: Using Runtime Fields in EQL Search for Elasticsearch
DESCRIPTION: This snippet demonstrates how to use the runtime_mappings parameter to create and extract runtime fields during an EQL search, and include them in the response using the fields parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_19

LANGUAGE: console
CODE:
```
GET /my-data-stream/_eql/search?filter_path=-hits.events._source
{
  "runtime_mappings": {
    "day_of_week": {
      "type": "keyword",
      "script": "emit(doc['@timestamp'].value.dayOfWeekEnum.toString())"
    }
  },
  "query": """
    process where process.name == "regsvr32.exe"
  """,
  "fields": [
    "@timestamp",
    "day_of_week"
  ]
}
```

----------------------------------------

TITLE: Referencing COUNT_DISTINCT Function Documentation in Markdown
DESCRIPTION: This snippet shows the structure of the documentation for the COUNT_DISTINCT function, including references to various sections and an embedded image for syntax visualization.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/count_distinct.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.

## `COUNT_DISTINCT` [esql-count_distinct]

**Syntax**

:::{image} ../../../images/functions/count_distinct.svg
:alt: Embedded
:class: text-center
:::


:::{include} ../parameters/count_distinct.md
:::

:::{include} ../description/count_distinct.md
:::

:::{include} ../types/count_distinct.md
:::

:::{include} ../examples/count_distinct.md
:::

:::{include} ../appendix/count_distinct.md
:::
```

----------------------------------------

TITLE: Indexing Document for Highlighting Example
DESCRIPTION: This snippet adds a single document with ID `doc1` to the `test_index`. The document contains a `content` field with sample text used to demonstrate phrase matching and highlighting by the unified highlighter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_30

LANGUAGE: Kibana Console
CODE:
```
PUT test_index/_doc/doc1
{
  "content" : "For you I'm only a fox like a hundred thousand other foxes. But if you tame me, we'll need each other. You'll be the only boy in the world for me. I'll be the only fox in the world for you."
}
```

----------------------------------------

TITLE: Calculating Percentiles using PERCENTILE Function in Elasticsearch ESQL
DESCRIPTION: This snippet demonstrates how to use the PERCENTILE function to calculate various percentiles of salary data from an 'employees' dataset. It calculates the 0th (minimum), 50th (median), and 99th percentiles of the salary field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/percentile.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS p0 = PERCENTILE(salary,  0)
     , p50 = PERCENTILE(salary, 50)
     , p99 = PERCENTILE(salary, 99)
```

----------------------------------------

TITLE: Multiple Pattern Redaction with Custom Tokens
DESCRIPTION: Example demonstrating how to redact multiple patterns (IP and email) with custom prefix and suffix tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/redact-processor.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST _ingest/pipeline/_simulate
{
  "pipeline": {
    "description": "Hide my IP",
    "processors": [
      {
        "redact": {
          "field": "message",
          "patterns": [
            "%{IP:REDACTED}",
            "%{EMAILADDRESS:REDACTED}"
          ],
          "prefix": "*",
          "suffix": "*"
        }
      }
    ]
  },
  "docs": [
    {
      "_source": {
        "message": "55.3.244.1 GET /index.html 15824 0.043 test@elastic.co"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Index Of Function - Case-Insensitive Elasticsearch Query
DESCRIPTION: This script checks the index position of 'A' within `user_name` beyond index 2, without case sensitivity. Utilizes Elasticsearch's scripting capabilities for comparison.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_12

LANGUAGE: Elasticsearch Painless
CODE:
```
script":{"source":"InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.gt(InternalEqlScriptUtils.indexOf(X0,params.v1,params.v2,params.v3),params.v4)))","params":{"v0":"user_name","v1":"A","v2":2,"v3":true,"v4":0}}
```

----------------------------------------

TITLE: Parameter Documentation for ESQL Log Function
DESCRIPTION: Documents the parameters for the logarithm function in ESQL. The function accepts an optional base parameter which defaults to e for natural logarithm, and a required number parameter. Both parameters return null if given null values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/parameters/log.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.

**Parameters**

`base`
:   Base of logarithm. If `null`, the function returns `null`. If not provided, this function returns the natural logarithm (base e) of a value.

`number`
:   Numeric expression. If `null`, the function returns `null`.
```

----------------------------------------

TITLE: Concatenating Multi-Value Fields with MV_APPEND in ESQL
DESCRIPTION: This ESQL query demonstrates the usage of the MV_APPEND function to combine values from 'birth_date' and 'hire_date' fields into a new 'dates' field. It filters employees, sorts them, and keeps specific fields in the output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/mv_append.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| WHERE emp_no == 10039 OR emp_no == 10040
| SORT emp_no
| EVAL dates = MV_APPEND(birth_date, hire_date)
| KEEP emp_no, birth_date, hire_date, dates
```

----------------------------------------

TITLE: Using Index Boost with Aliases and Patterns in Elasticsearch
DESCRIPTION: This snippet shows how to apply index boosting to an alias and an index pattern. It applies a boost of 1.4 to the alias 'my-alias' and 1.3 to any indices matching the pattern 'my-index*'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-multiple-data-streams-indices.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET /_search
{
  "indices_boost": [
    { "my-alias":  1.4 },
    { "my-index*": 1.3 }
  ]
}
```

----------------------------------------

TITLE: Markdown Structure for ST_XMIN Function Documentation
DESCRIPTION: This snippet outlines the structure of the documentation for the ST_XMIN function, including headers for different sections and directives to include content from other files.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/st_xmin.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.

### `ST_XMIN` [esql-st_xmin]

**Syntax**

:::{image} ../../../images/functions/st_xmin.svg
:alt: Embedded
:class: text-center
:::


:::{include} ../parameters/st_xmin.md
:::

:::{include} ../description/st_xmin.md
:::

:::{include} ../types/st_xmin.md
:::

:::{include} ../examples/st_xmin.md
:::
```

----------------------------------------

TITLE: Using Min Aggregation with Runtime Fields in Elasticsearch
DESCRIPTION: This example shows how to use the min aggregation with a runtime field. It calculates the minimum of an adjusted price based on whether the item is promoted or not.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-min-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "size": 0,
  "runtime_mappings": {
    "price.adjusted": {
      "type": "double",
      "script": """
        double price = doc['price'].value;
        if (doc['promoted'].value) {
          price *= 0.8;
        }
        emit(price);
      """
    }
  },
  "aggs": {
    "min_price": {
      "min": { "field": "price.adjusted" }
    }
  }
}
```

----------------------------------------

TITLE: Using Script Score Function in Elasticsearch Query
DESCRIPTION: This snippet demonstrates how to use the script_score function within a function_score query to customize a document's score using a script that incorporates document field values. Parameters include the script source for computation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-function-score-query.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "function_score": {
      "query": {
        "match": { "message": "elasticsearch" }
      },
      "script_score": {
        "script": {
          "source": "Math.log(2 + doc['my-int'].value)"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining StringFieldScript Class in Painless
DESCRIPTION: This code defines the `StringFieldScript` class in Painless. The `@no_import` annotation prevents this class from being directly imported into Painless scripts, controlling its accessibility. This is likely part of a security or API stability measure.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.keyword_field.txt#2025-04-21_snippet_0

LANGUAGE: Painless
CODE:
```
"class org.elasticsearch.script.StringFieldScript @no_import {
}"
```

----------------------------------------

TITLE: Apache License 2.0 Boilerplate Notice Template
DESCRIPTION: Standard copyright and license notice template to be included in source files. The [yyyy] and [name of copyright owner] placeholders should be replaced with actual values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/repository-url/licenses/commons-logging-LICENSE.txt#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
Copyright [yyyy] [name of copyright owner]

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
```

----------------------------------------

TITLE: Displaying Supported Types for ESQL Function in Markdown
DESCRIPTION: This markdown snippet presents a table showing the supported input number types and their corresponding result types for an ESQL function. It covers double, integer, long, and unsigned_long types, all resulting in double output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/types/mv_avg.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| number | result |
| --- | --- |
| double | double |
| integer | double |
| long | double |
| unsigned_long | double |
```

----------------------------------------

TITLE: Boolean Filter Query with Zero Score in Elasticsearch
DESCRIPTION: This query uses a `bool` query with only a `filter` clause. The `filter` clause ensures that only documents with `status: active` are returned, but because there are no scoring queries, all documents receive a score of `0`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-bool-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET _search
{
  "query": {
    "bool": {
      "filter": {
        "term": {
          "status": "active"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Extension Metadata with HTTP POST
DESCRIPTION: Creates metadata for a new extension by sending a POST request to the Extensions API with JSON payload containing name, description, type and version.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-custom-bundles.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
curl -XPOST \
-H "Authorization: ApiKey $EC_API_KEY" \
-H 'content-type:application/json' \
https://api.elastic-cloud.com/api/v1/deployments/extensions \
-d'{
  "name" : "synonyms-v1",
  "description" : "The best synonyms ever",
  "extension_type" : "bundle",
  "version" : "7.*"
}'
```

----------------------------------------

TITLE: Sample Copyright Notice Template
DESCRIPTION: Standard template for including copyright and license notices at the start of source files.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/ingest-attachment/licenses/tika-parser-miscoffice-module-NOTICE.txt#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
One line to give the program's name and a brief idea of what it does.
Copyright (C) <year> <name of author>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335 USA
```

----------------------------------------

TITLE: Indexing Documents into index1 with comment Field - Elasticsearch DSL
DESCRIPTION: Bulk indexes two documents into the `index1`. These documents contain different phrases in the `comment` field (`run with scissors` and `running with scissors`) used to demonstrate stemming effects on highlighting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_10

LANGUAGE: Elasticsearch DSL
CODE:
```
PUT index1/_bulk?refresh=true
{"index": {"_id": "doc1" }}
{"comment": "run with scissors"}
{ "index" : {"_id": "doc2"} }
{"comment": "running with scissors"}
```

----------------------------------------

TITLE: Indexing GeoJSON Circle with Circle Processor
DESCRIPTION: This example demonstrates indexing a document containing a circle defined in GeoJSON format and retrieving the resulting polygon. The circle processor converts the GeoJSON circle to a GeoJSON polygon representation while maintaining the specified error distance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/ingest-circle-processor.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT circles/_doc/2?pipeline=polygonize_circles
{
  "circle": {
    "type": "circle",
    "radius": "40m",
    "coordinates": [30, 10]
  }
}

GET circles/_doc/2
```

----------------------------------------

TITLE: Configuring Set Priority Action in Elasticsearch ILM Policy
DESCRIPTION: This snippet demonstrates how to create an ILM policy that sets the priority of an index to 50 when it enters the warm phase. The 'set_priority' action is used within the policy definition to specify the priority value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-set-priority.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "warm": {
        "actions": {
          "set_priority" : {
            "priority": 50
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Morning/Evening Aggregation Using Painless in Elasticsearch
DESCRIPTION: Example showing how to use a terms aggregation with a Painless script to group messages into morning (AM) and evening (PM) categories based on the hour of the day.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_30

LANGUAGE: console
CODE:
```
GET /messages/_search?pretty=true
{
  "aggs": {
    "am-pm-count": {
      "terms": {
        "script": "return doc[\"datetime\"].value.getHour() < 12 ? \"AM\" : \"PM\";"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configure Sync Rules with JOIN (JSON)
DESCRIPTION: Shows how to use a SQL JOIN operation within the advanced sync rules JSON. This example joins the 'employee' and 'customer' tables based on a condition, allowing indexing of combined data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-postgresql.md#_snippet_8

LANGUAGE: json
CODE:
```
[
  {
    "tables": ["employee", "customer"],
    "query": "SELECT * FROM employee INNER JOIN customer ON employee.emp_id = customer.c_id"
  }
]
```

----------------------------------------

TITLE: Removing Elasticsearch Analysis ICU Plugin (Shell)
DESCRIPTION: This command uses the Elasticsearch plugin manager via the command line to remove the 'analysis-icu' plugin from a node. It requires root/sudo privileges and should be run from the Elasticsearch installation directory. The node must be stopped before executing this removal command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-icu.md#_snippet_1

LANGUAGE: Shell
CODE:
```
sudo bin/elasticsearch-plugin remove analysis-icu
```

----------------------------------------

TITLE: Second-Level Collapsing in Elasticsearch
DESCRIPTION: Illustrates a second level of collapsing where results are collapsed first by country name, and then inner hits are further collapsed by user.id, providing hierarchical deduplication of search results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/collapse-search-results.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search
{
  "query": {
    "match": {
      "message": "GET /search"
    }
  },
  "collapse": {
    "field": "geo.country_name",
    "inner_hits": {
      "name": "by_location",
      "collapse": { "field": "user.id" },
      "size": 3
    }
  }
}
```

----------------------------------------

TITLE: Using QUARTER Function in Elasticsearch SQL
DESCRIPTION: This snippet demonstrates how to use the QUARTER function to extract the quarter of the year from a given timestamp. The function takes a date or datetime expression as input and returns an integer representing the quarter (1-4). If the input is null, the function returns null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_83

LANGUAGE: SQL
CODE:
```
SELECT QUARTER(CAST('2018-02-19T10:23:27Z' AS TIMESTAMP)) AS quarter;
```

----------------------------------------

TITLE: Configuring Force Merge Action in ILM Policy
DESCRIPTION: This snippet demonstrates how to configure a force merge action in an Elasticsearch ILM policy. It sets up a policy named 'my_policy' with a force merge action in the warm phase, specifying to merge the index into a single segment.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-forcemerge.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "warm": {
        "actions": {
          "forcemerge" : {
            "max_num_segments": 1
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Documentation Template for ESQL Geometry Parameter in LaTeX
DESCRIPTION: A LaTeX documentation template for an ESQL function that accepts a geometry parameter. The template indicates the parameter accepts expressions of type geo_point, geo_shape, cartesian_point, or cartesian_shape, and returns null when the input is null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/parameters/st_envelope.md#2025-04-21_snippet_0

LANGUAGE: latex
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.

**Parameters**

`geometry`
:   Expression of type `geo_point`, `geo_shape`, `cartesian_point` or `cartesian_shape`. If `null`, the function returns `null`.
```

----------------------------------------

TITLE: Example Notice for Using Database Content
DESCRIPTION: This snippet provides an example notice to be included when publicly using content obtained from a database licensed under ODbL. It informs users about the source of the content and its availability under the Open Database License.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/spatial/src/test/resources/org/elasticsearch/xpack/spatial/index/fielddata/LICENSE.txt#2025-04-21_snippet_0

LANGUAGE: Plain Text
CODE:
```
Contains information from DATABASE NAME, which is made available\nhere under the Open Database License (ODbL).
```

----------------------------------------

TITLE: Indexing Suggestions with Category Context in Elasticsearch
DESCRIPTION: This snippet demonstrates how to index suggestions with associated categories using the 'category' context in Elasticsearch. It shows how to include multiple input suggestions and assign them to specific categories.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_20

LANGUAGE: console
CODE:
```
PUT place/_doc/1
{
  "suggest": {
    "input": [ "timmy's", "starbucks", "dunkin donuts" ],
    "contexts": {
      "place_type": [ "cafe", "food" ]                    <1>
    }
  }
}
```

----------------------------------------

TITLE: Calculating Hypotenuse Using HYPOT in ESQL
DESCRIPTION: Demonstrates the usage of HYPOT function to calculate the hypotenuse of a right triangle with sides 3.0 and 4.0. The function accepts any numeric values as inputs and returns a double value. Returns null when dealing with infinite values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/hypot.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = 3.0, b = 4.0
| EVAL c = HYPOT(a, b)
```

----------------------------------------

TITLE: Defining SHA Functions in Painless API
DESCRIPTION: This snippet defines methods for generating SHA hash digests in the Elasticsearch Painless scripting environment. The methods 'sha1', 'sha256', and 'sha512' return string representations of the respective hash digests.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.update.txt#2025-04-21_snippet_0

LANGUAGE: groovy
CODE:
```
class java.lang.String {
  String org.elasticsearch.painless.api.Augmentation sha1()
  String org.elasticsearch.painless.api.Augmentation sha256()
  String org.elasticsearch.painless.api.Augmentation sha512()
}
```

----------------------------------------

TITLE: Defining an Outer Pipeline with Nested Pipeline Reference in Elasticsearch
DESCRIPTION: Creates a pipeline named 'pipelineB' that first executes 'pipelineA' and then adds its own field. This demonstrates how to chain pipelines together.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/pipeline-processor.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT _ingest/pipeline/pipelineB
{
  "description" : "outer pipeline",
  "processors" : [
    {
      "pipeline" : {
        "name": "pipelineA"
      }
    },
    {
      "set" : {
        "field": "outer_pipeline_set",
        "value": "outer"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Valid Full-Text Search ESQL Query
DESCRIPTION: Demonstrates a valid ESQL query using the `MATCH` function for full-text search. The `MATCH` command is correctly placed immediately after the `FROM` source command as required. It searches for documents where the `author` field contains "Faulkner" AND "Tolkien".
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/limitations.md#_snippet_0

LANGUAGE: esql
CODE:
```
FROM books
| WHERE MATCH(author, "Faulkner") AND MATCH(author, "Tolkien")
```

----------------------------------------

TITLE: Using search_after with Field Collapsing
DESCRIPTION: Shows how to use the search_after parameter with field collapsing for pagination. This only works when sorting and collapsing on the same field, without secondary sorts.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/collapse-search-results.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search
{
  "query": {
    "match": {
      "message": "GET /search"
    }
  },
  "collapse": {
    "field": "user.id"
  },
  "sort": [ "user.id" ],
  "search_after": ["dd5ce1ad"]
}
```

----------------------------------------

TITLE: Configuring Multiplexer Token Filter in Elasticsearch
DESCRIPTION: This snippet demonstrates how to set up a multiplexer token filter in Elasticsearch index settings. It creates an analyzer that uses the multiplexer filter with lowercase and porter stem filters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-multiplexer-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /multiplexer_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "standard",
          "filter": [ "my_multiplexer" ]
        }
      },
      "filter": {
        "my_multiplexer": {
          "type": "multiplexer",
          "filters": [ "lowercase", "lowercase, porter_stem" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Displaying Supported Types for ESQL Percentile Function in Markdown
DESCRIPTION: A markdown table showing the supported input types (number and percentile) and the resulting output type for the percentile function in ESQL. It covers combinations of double, integer, and long input types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/types/percentile.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| number | percentile | result |
| --- | --- | --- |
| double | double | double |
| double | integer | double |
| double | long | double |
| integer | double | double |
| integer | integer | double |
| integer | long | double |
| long | double | double |
| long | integer | double |
| long | long | double |
```

----------------------------------------

TITLE: Syntax for MIN Function in Elasticsearch SQL
DESCRIPTION: This snippet shows the basic syntax for the MIN function, which finds the minimum value across input values in a specified field. It requires a numeric field for standard use but can work on text/keyword fields (translated to FIRST).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_32

LANGUAGE: SQL
CODE:
```
MIN(field_name) <1>
```

----------------------------------------

TITLE: Generate Node Keystore with Keytool
DESCRIPTION: Creates a JKS keystore for the node with RSA key and SAN extensions for localhost variants
SOURCE: https://github.com/elastic/elasticsearch/blob/main/build-tools-internal/src/main/resources/test/ssl/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
keytool -genkey -alias test-node -keystore test-node.jks -keyalg RSA -keysize 2048 -validity 3654 -dname CN="Elasticsearch Build Test Infrastructure" -keypass keypass -storepass keypass -ext san=dns:localhost,dns:localhost.localdomain,dns:localhost4,dns:localhost4.localdomain4,dns:localhost6,dns:localhost6.localdomain6,ip:127.0.0.1,ip:0:0:0:0:0:0:0:1
```

----------------------------------------

TITLE: Indexing a LineString Geometry using GeoJSON in Elasticsearch
DESCRIPTION: Adds a document to the 'example' index with a LineString geometry specified in GeoJSON format. The line is defined by two points representing a path from the White House to the US Capitol Building.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-shape.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
POST /example/_doc
{
  "location" : {
    "type" : "LineString",
    "coordinates" : [[-77.03653, 38.897676], [-77.009051, 38.889939]]
  }
}
```

----------------------------------------

TITLE: Declaring and Using a Function in Painless
DESCRIPTION: Example showing how to declare a boolean function named 'isNegative' that checks if a value is negative, and then using that function in a conditional statement. The function takes a dynamic typed parameter 'x' and returns true if x is less than 0.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-functions.md#2025-04-21_snippet_0

LANGUAGE: painless
CODE:
```
boolean isNegative(def x) { x < 0 }
...
if (isNegative(someVar)) {
  ...
}
```

----------------------------------------

TITLE: Basic Search Query Using Rule Retriever
DESCRIPTION: Example of performing a search using a previously defined ruleset with specific match criteria for query string and user country.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/searching-with-query-rules.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
GET /my-index-000001/_search
{
  "retriever": {
    "rule": {
      "retriever": {
        "standard": {
          "query": {
            "query_string": {
              "query": "puggles"
            }
          }
        }
      },
      "match_criteria": {
        "query_string": "puggles",
        "user_country": "us"
      },
      "ruleset_ids": [ "my-ruleset" ]
    }
  }
}
```

----------------------------------------

TITLE: Creating a custom analyzer with dictionary decompounder filter in Elasticsearch
DESCRIPTION: This example demonstrates how to create a custom analyzer using a customized dictionary_decompounder filter in an index creation API request.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-dict-decomp-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT dictionary_decompound_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "standard_dictionary_decompound": {
          "tokenizer": "standard",
          "filter": [ "22_char_dictionary_decompound" ]
        }
      },
      "filter": {
        "22_char_dictionary_decompound": {
          "type": "dictionary_decompounder",
          "word_list_path": "analysis/example_word_list.txt",
          "max_subword_size": 22
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing Pages with Title Filter - JSON Snippet - JavaScript
DESCRIPTION: This JSON snippet is used to filter and index every page in Notion where the title includes 'Demo Page'. It helps in setting up sync rules for content indexing based on page properties.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-notion.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
{
  "searches": [
    {
      "filter": {
        "value": "page"
      },
      "query": "Demo Page"
    }
  ]
}
```

----------------------------------------

TITLE: Configure Local Monitoring Exporter YAML
DESCRIPTION: Configures the default 'local' monitoring exporter in Elasticsearch. This exporter sends monitoring data to the same cluster where the data is collected. It is the default if no exporters are explicitly defined.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/monitoring-settings.md#_snippet_0

LANGUAGE: YAML
CODE:
```
xpack.monitoring.exporters.my_local:
  type: local
```

----------------------------------------

TITLE: Example Warning Log Message
DESCRIPTION: This warning message indicates that self-hosted extraction service is enabled for the connector, but the required `extraction_service.host` field is missing from the connector's configuration. This results in no text being extracted during the sync.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-content-extraction.md#2025-04-21_snippet_14

LANGUAGE: bash
CODE:
```
Extraction service has been initialised but no extraction service configuration was found. No text will be extracted for this sync.
```

----------------------------------------

TITLE: Example Query for USER() (SQL)
DESCRIPTION: Demonstrates how to execute the `USER()` function in Elasticsearch SQL using a `SELECT` statement. The query returns a single row containing the authenticated username in the 'USER' column. The result may be null if Elasticsearch security features are not active.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-system.md#_snippet_3

LANGUAGE: sql
CODE:
```
SELECT USER();
```

----------------------------------------

TITLE: Output Document After Dot Expansion
DESCRIPTION: Shows the transformed document after the dot expander processor converts the dotted field into a nested structure.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/dot-expand-processor.md#2025-04-21_snippet_2

LANGUAGE: js
CODE:
```
{
  "foo" : {
    "bar" : "value"
  }
}
```

----------------------------------------

TITLE: Filtering Terms Aggregation with Regular Expressions in Elasticsearch
DESCRIPTION: This snippet demonstrates how to use regular expressions to include and exclude values in a terms aggregation. It creates buckets for tags containing 'sport' but excludes those starting with 'water_'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-terms-aggregation.md#2025-04-21_snippet_12

LANGUAGE: json
CODE:
```
GET /_search
{
  "aggs": {
    "tags": {
      "terms": {
        "field": "tags",
        "include": ".*sport.*",
        "exclude": "water_.*"
      }
    }
  }
}
```

----------------------------------------

TITLE: Viewing Token Attributes with Nori Tokenizer
DESCRIPTION: Request to analyze Korean text using the Nori tokenizer with additional attributes displayed, showing how to examine POS tags and other linguistic information.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-nori-tokenizer.md#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
GET _analyze
{
  "tokenizer": "nori_tokenizer",
  "text": "뿌리가 깊은 나무는",   <1>
  "attributes" : ["posType", "leftPOS", "rightPOS", "morphemes", "reading"],
  "explain": true
}
```

----------------------------------------

TITLE: Downloading and Importing Azure Account Settings
DESCRIPTION: Commands to download and import Azure account settings to enable CLI authentication. This downloads a .publishsettings file and imports it to configure the CLI.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-azure-classic-long.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
# This will open a browser and will download a .publishsettings file
azure account download

# Import this file (we have downloaded it to /tmp)
# Note, it will create needed files in ~/.azure. You can remove azure.publishsettings when done.
azure account import /tmp/azure.publishsettings
```

----------------------------------------

TITLE: Creating Custom Analyzer with Conditional Token Filter in Elasticsearch
DESCRIPTION: This example creates a custom analyzer that uses a conditional filter to reverse only the first token in a text. The custom filter matches tokens at position 0 and applies the reverse filter to them.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-condition-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /palindrome_list
{
  "settings": {
    "analysis": {
      "analyzer": {
        "whitespace_reverse_first_token": {
          "tokenizer": "whitespace",
          "filter": [ "reverse_first_token" ]
        }
      },
      "filter": {
        "reverse_first_token": {
          "type": "condition",
          "filter": [ "reverse" ],
          "script": {
            "source": "token.getPosition() === 0"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Syntax for COUNT Function in Elasticsearch SQL
DESCRIPTION: This snippet shows the general syntax for the COUNT function. It accepts a field name, wildcard (*), or any numeric value. The behavior regarding NULL values depends on the input type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_3

LANGUAGE: SQL
CODE:
```
COUNT(expression) <1>
```

----------------------------------------

TITLE: Sample Response for Moving Percentiles Aggregation
DESCRIPTION: Illustrates the structure of a response from a moving_percentiles aggregation, showing calculated percentiles for multiple time buckets.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-moving-percentiles-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console-result
CODE:
```
{
   "took": 11,
   "timed_out": false,
   "_shards": ...,
   "hits": ...,
   "aggregations": {
      "my_date_histo": {
         "buckets": [
             {
                 "key_as_string": "2015/01/01 00:00:00",
                 "key": 1420070400000,
                 "doc_count": 3,
                 "the_percentile": {
                     "values": {
                       "1.0": 151.0,
                       "99.0": 200.0
                     }
                 }
             },
             {
                 "key_as_string": "2015/02/01 00:00:00",
                 "key": 1422748800000,
                 "doc_count": 2,
                 "the_percentile": {
                     "values": {
                       "1.0": 10.4,
                       "99.0": 49.6
                     }
                 },
                 "the_movperc": {
                   "values": {
                     "1.0": 151.0,
                     "99.0": 200.0
                   }
                 }
             },
             {
                 "key_as_string": "2015/03/01 00:00:00",
                 "key": 1425168000000,
                 "doc_count": 2,
                 "the_percentile": {
                    "values": {
                      "1.0": 175.25,
                      "99.0": 199.75
                    }
                 },
                 "the_movperc": {
                    "values": {
                      "1.0": 11.6,
                      "99.0": 200.0
                    }
                 }
             }
         ]
      }
   }
}
```

----------------------------------------

TITLE: Declare JitPack Dependency - Groovy
DESCRIPTION: Declares a dependency to be resolved from the JitPack repository. The format 'com.github.User:Repo:Tag' corresponds to the GitHub user, repository name, and a tag, commit hash, or branch (like `main-SNAPSHOT` or `PR<NR>-SNAPSHOT`).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/BUILDING.md#_snippet_2

LANGUAGE: Groovy
CODE:
```
dependencies {
  implementation 'com.github.User:Repo:Tag'
}
```

----------------------------------------

TITLE: Processed URI Output Document
DESCRIPTION: Result document showing the parsed URI components including scheme, domain, path, query parameters, and authentication details.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/uri-parts-processor.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
"_source" : {
  "input_field" : "http://myusername:mypassword@www.example.com:80/foo.gif?key1=val1&key2=val2#fragment",
  "url" : {
    "path" : "/foo.gif",
    "fragment" : "fragment",
    "extension" : "gif",
    "password" : "mypassword",
    "original" : "http://myusername:mypassword@www.example.com:80/foo.gif?key1=val1&key2=val2#fragment",
    "scheme" : "http",
    "port" : 80,
    "user_info" : "myusername:mypassword",
    "domain" : "www.example.com",
    "query" : "key1=val1&key2=val2",
    "username" : "myusername"
  }
}
```

----------------------------------------

TITLE: Calculating Floor Value in Elasticsearch SQL
DESCRIPTION: This illustrates the `FLOOR` function in Elasticsearch SQL. It returns the largest integer value that is less than or equal to the input numeric expression. The output type is integer or long.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_6

LANGUAGE: SQL
CODE:
```
SELECT FLOOR(125.01), FLOOR(-125.99);
```

----------------------------------------

TITLE: Converting Long to Integer using TO_INTEGER in ESQL
DESCRIPTION: This snippet demonstrates the use of the TO_INTEGER function to convert long values to integers. It shows how the function handles values within and outside the integer range, including the generation of null values and warning headers for out-of-range conversions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_integer.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW long = [5013792, 2147483647, 501379200000]
| EVAL int = TO_INTEGER(long)
```

----------------------------------------

TITLE: Creating Token Filter Factory in Java
DESCRIPTION: This Java class implements a factory for the custom HelloWorldTokenFilter. It uses the @NamedComponent annotation to register the filter with the name 'hello_world'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/extend/example-text-analysis-plugin.md#2025-04-21_snippet_2

LANGUAGE: java
CODE:
```
package org.example;

import org.apache.lucene.analysis.TokenStream;
import org.elasticsearch.plugin.analysis.TokenFilterFactory;
import org.elasticsearch.plugin.NamedComponent;

@NamedComponent(value = "hello_world")
public class HelloWorldTokenFilterFactory implements TokenFilterFactory {

    @Override
    public TokenStream create(TokenStream tokenStream) {
        return new HelloWorldTokenFilter(tokenStream);
    }

}
```

----------------------------------------

TITLE: Querying Aggregate Metric Field (Term Query)
DESCRIPTION: Performs a `term` query on the `stats-index` targeting the `agg_metric` field. The query uses the field's `default_metric` (which is `max`) for comparison.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/aggregate-metric-double.md#_snippet_5

LANGUAGE: console
CODE:
```
GET stats-index/_search
{
  "query": {
    "term": {
      "agg_metric": {
        "value": 702.30
      }
    }
  }
}
```

----------------------------------------

TITLE: Dropbox Advanced Sync Rules - File Extension Filter
DESCRIPTION: Advanced sync rules example with file extension filtering
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-dropbox.md#2025-04-21_snippet_7

LANGUAGE: js
CODE:
```
[
  {
    "query": "dropbox",
    "options": {
      "file_extensions": [
        "txt",
        "pdf"
      ]
    }
  }
]
```

----------------------------------------

TITLE: Subtracting Intervals in Elasticsearch SQL
DESCRIPTION: This snippet shows how to subtract one `INTERVAL` from another. It subtracts an interval of 2 hours from an interval of 1 day and aliases the result as `result`, demonstrating interval subtraction arithmetic. The expected output is a difference interval.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_5

LANGUAGE: SQL
CODE:
```
SELECT INTERVAL '1' DAY - INTERVAL '2' HOURS AS result;
```

----------------------------------------

TITLE: Setting Cron Trigger: Last Weekday (Text)
DESCRIPTION: This Cron syntax example defines a schedule to trigger an action at 9:05 a.m. UTC on the last weekday of every month using the 'LW' character combination.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/api-conventions.md#_snippet_7

LANGUAGE: text
CODE:
```
0 5 9 LW * ?
```

----------------------------------------

TITLE: Using ENDS_WITH Function in ESQL Query
DESCRIPTION: This snippet demonstrates how to use the ENDS_WITH function in an ESQL query. It filters the 'employees' table, keeps only the 'last_name' column, and then evaluates whether each last name ends with the letter 'd'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/ends_with.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP last_name
| EVAL ln_E = ENDS_WITH(last_name, "d")
```

----------------------------------------

TITLE: Adding Intervals in Elasticsearch SQL
DESCRIPTION: This snippet shows how to add two `INTERVAL` values together. It adds an interval of 1 day to an interval of 53 minutes and aliases the result as `result`, demonstrating basic interval arithmetic. The expected output is a combined interval.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_2

LANGUAGE: SQL
CODE:
```
SELECT INTERVAL 1 DAY + INTERVAL 53 MINUTES AS result;
```

----------------------------------------

TITLE: Adding Hashing Methods to String Class in Elasticsearch Painless
DESCRIPTION: This snippet adds SHA-1, SHA-256, and SHA-512 hashing methods to the String class in the Elasticsearch Painless scripting language. These methods allow for easy generation of hash values from string data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/watcher/src/main/resources/org/elasticsearch/xpack/watcher/painless_whitelist.txt#2025-04-21_snippet_0

LANGUAGE: java
CODE:
```
class java.lang.String {
  String org.elasticsearch.painless.api.Augmentation sha1()
  String org.elasticsearch.painless.api.Augmentation sha256()
  String org.elasticsearch.painless.api.Augmentation sha512()
}
```

----------------------------------------

TITLE: Elasticsearch Analysis Result with Polish Stop Token Filter
DESCRIPTION: This snippet shows the result of analyzing a Polish text with the custom analyzer using the polish_stop filter. It demonstrates how stopwords are removed from the input text.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-polish-stop.md#2025-04-21_snippet_2

LANGUAGE: console-result
CODE:
```
{
  "tokens" : [
    {
      "token" : "kucharek",
      "start_offset" : 6,
      "end_offset" : 14,
      "type" : "<ALPHANUM>",
      "position" : 1
    },
    {
      "token" : "sześć",
      "start_offset" : 15,
      "end_offset" : 20,
      "type" : "<ALPHANUM>",
      "position" : 2
    }
  ]
}
```

----------------------------------------

TITLE: ESQL Lookup Join Query on Firewall Logs
DESCRIPTION: Performs a lookup join between firewall_logs and threat_list tables, matching on source.IP field. Filters results to only include records where threat_level exists. Useful for enriching firewall log data with threat intelligence.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs-lookup-join.csv-spec/lookupJoinSourceIpWhere.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM firewall_logs
| LOOKUP JOIN threat_list ON source.IP
| WHERE threat_level IS NOT NULL
```

----------------------------------------

TITLE: Calculating Median Absolute Deviation using MV_MEDIAN_ABSOLUTE_DEVIATION in ESQL
DESCRIPTION: This snippet demonstrates how to use the MV_MEDIAN_ABSOLUTE_DEVIATION function in ESQL to convert a multivalued field into a single value containing the median absolute deviation. It also calculates the median for comparison using MV_MEDIAN.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/mv_median_absolute_deviation.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW values = [0, 2, 5, 6]
| EVAL median_absolute_deviation = MV_MEDIAN_ABSOLUTE_DEVIATION(values), median = MV_MEDIAN(values)
```

----------------------------------------

TITLE: Class definition for LongFieldScript in Elasticsearch Painless
DESCRIPTION: Defines the `LongFieldScript` class for use within Painless scripts in Elasticsearch. This class serves as a type hint and provides access to field values.  The `@no_import` annotation prevents automatic importing of the class.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.long_field.txt#2025-04-21_snippet_0

LANGUAGE: Painless
CODE:
```
class org.elasticsearch.script.LongFieldScript @no_import {
}
```

----------------------------------------

TITLE: Using Moving Percentiles in a Date Histogram Aggregation
DESCRIPTION: Demonstrates how to embed a moving_percentiles aggregation within a date_histogram, including a percentile metric as its input.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-moving-percentiles-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /_search
{
  "size": 0,
  "aggs": {
    "my_date_histo": {
        "date_histogram": {
        "field": "date",
        "calendar_interval": "1M"
      },
      "aggs": {
        "the_percentile": {
            "percentiles": {
            "field": "price",
            "percents": [ 1.0, 99.0 ]
          }
        },
        "the_movperc": {
          "moving_percentiles": {
            "buckets_path": "the_percentile",
            "window": 10
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Script-Based String Conversion in Elasticsearch
DESCRIPTION: Applies a custom script to convert the `pid` field to a string and matches it against '123'. Targets `process` events for script execution within Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_10

LANGUAGE: Elasticsearch Painless
CODE:
```
"script":{"script":{"source":"InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalQlScriptUtils.nullSafeFilter(InternalEqlScriptUtils.seq(InternalEqlScriptUtils.string(X0),params.v1)))" "params":{"v0":"pid","v1":"123"}
```

----------------------------------------

TITLE: Template-Based Rank Evaluation Request
DESCRIPTION: Shows how to use query templates in rank evaluation requests to make them more succinct.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-rank-eval.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /my-index-000001/_rank_eval
{
   [...]
  "templates": [
     {
        "id": "match_one_field_query",  
        "template": { 
            "inline": {
                "query": {
                  "match": { "{{field}}": { "query": "{{query_string}}" }}
                }
            }
        }
     }
  ],
  "requests": [
      {
         "id": "amsterdam_query",
         "ratings": [ ... ],
         "template_id": "match_one_field_query", 
         "params": { 
            "query_string": "amsterdam",
            "field": "text"
          }
     },
    [...]
  ]
}
```

----------------------------------------

TITLE: Configuring Split Processor with Comma Separator and Trailing Preservation in Elasticsearch
DESCRIPTION: This example shows how to set up the Split processor to split a field using a comma as a separator, while preserving trailing empty fields. This configuration will maintain empty elements at the end of the resulting array.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/split-processor.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "split": {
    "field": "my_field",
    "separator": ",",
    "preserve_trailing": true
  }
}
```

----------------------------------------

TITLE: Adding a bundle extension to a deployment plan in Elasticsearch Service
DESCRIPTION: JSON snippet showing the user_bundles construct for adding a custom bundle to an Elasticsearch deployment. Uses wildcard notation for version compatibility across a major version.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-plugins-guide.md#2025-04-21_snippet_6

LANGUAGE: json
CODE:
```
      "user_bundles": [
              {
                    "elasticsearch_version": "8.*",
                    "name": "custom-bundle",
                    "url": "repo://5886113212"
              }
       ]
```

----------------------------------------

TITLE: Using LAST_VALUE Alias with Grouping and Ordering by Birth Date
DESCRIPTION: This example shows that LAST_VALUE is an alias for LAST, producing the same result as the previous query: finding the last first name by birth date within each gender group.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_27

LANGUAGE: SQL
CODE:
```
SELECT gender, LAST_VALUE(first_name, birth_date) FROM emp GROUP BY gender ORDER BY gender;
```

----------------------------------------

TITLE: Extracting Year from Date using DATE_EXTRACT in ESQL
DESCRIPTION: This snippet demonstrates how to parse a date string into a date object and then extract the year component from it. It uses the DATE_PARSE function to convert a string to a date, and DATE_EXTRACT to get the year.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/date_extract.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW date = DATE_PARSE("yyyy-MM-dd", "2022-05-06")
| EVAL year = DATE_EXTRACT("year", date)
```

----------------------------------------

TITLE: Mathematical Functions in Elasticsearch SQL
DESCRIPTION: A collection of mathematical and trigonometric functions available in Elasticsearch SQL. These functions provide various numerical operations and calculations, including absolute values, logarithms, and trigonometric computations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/qa/server/single-node/src/javaRestTest/resources/org/elasticsearch/xpack/sql/qa/single_node/ConsistentFunctionArgHandlingIT-non-tested-functions.txt#2025-04-21_snippet_1

LANGUAGE: SQL
CODE:
```
ABS
ACOS
ASIN
ATAN
ATAN2
CBRT
CEIL
CEILING
COS
COSH
COT
DEGREES
E
EXP
EXPM1
FLOOR
LOG
LOG10
MOD
PI
POWER
RADIANS
RAND
RANDOM
ROUND
SIGN
SIGNUM
SIN
SINH
SQRT
TAN
TRUNC
TRUNCATE
```

----------------------------------------

TITLE: Finding Maximum Value in Multivalued Column using MV_MAX in ESQL
DESCRIPTION: This snippet demonstrates how to use the MV_MAX function in ESQL to convert a multivalued expression into a single value containing the maximum value. It creates a row with a multivalued column 'a' and then applies MV_MAX to find the maximum value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/mv_max.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=[3, 5, 1]
| EVAL max_a = MV_MAX(a)
```

----------------------------------------

TITLE: Query Rescoring in Elasticsearch
DESCRIPTION: Shows how to rescore search results using a secondary query with custom weights and window size.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/filter-search-results.md#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
POST /_search
{
   "query" : {
      "match" : {
         "message" : {
            "operator" : "or",
            "query" : "the quick brown"
         }
      }
   },
   "rescore" : {
      "window_size" : 50,
      "query" : {
         "rescore_query" : {
            "match_phrase" : {
               "message" : {
                  "query" : "the quick brown",
                  "slop" : 2
               }
            }
         },
         "query_weight" : 0.7,
         "rescore_query_weight" : 1.2
      }
   }
}
```

----------------------------------------

TITLE: Static Importing Method from Another Class
DESCRIPTION: This snippet demonstrates how to perform a static import within the Painless environment to access a method from another class. It outlines the structure for importing and utilizing class methods in a type-safe manner.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/plugins/examples/painless-whitelist/src/main/resources/org/elasticsearch/example/painlesswhitelist/example_whitelist.txt#2025-04-21_snippet_2

LANGUAGE: groovy
CODE:
```
static_import {
  int exampleAddInts(int, int) from_class org.elasticsearch.example.painlesswhitelist.ExampleStaticMethodClass
}
```

----------------------------------------

TITLE: Selecting and Renaming Columns in ESQL
DESCRIPTION: This ESQL query selects the 'first_name' and 'last_name' columns from the 'employees' table, then renames them to 'fn' and 'ln' respectively. It demonstrates the use of KEEP for column selection and RENAME for column aliasing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/renameMultipleColumnsDifferentCommands.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP first_name, last_name
| RENAME first_name AS fn
| RENAME last_name AS ln
```

----------------------------------------

TITLE: Generating Text Embeddings with Elasticsearch ML API
DESCRIPTION: API call to generate text embeddings using a prebuilt ML model. This example creates vector representations for text that can be used for semantic search and other natural language processing tasks.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/repository-gcs/licenses/google-api-services-storage-NOTICE.txt#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
POST _ml/trained_models/my_embedding_model/_infer
{
  "docs": {
    "text_field": "Elasticsearch is great for search and analytics."
  }
}
```

----------------------------------------

TITLE: Analyzing Text with Synonym Graph and Flatten Graph Filters in Elasticsearch
DESCRIPTION: This example demonstrates how to use the synonym_graph filter to add multi-position synonyms and then flatten the resulting token graph using the flatten_graph filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-flatten-graph-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer": "standard",
  "filter": [
    {
      "type": "synonym_graph",
      "synonyms": [ "internet phonebook, domain name system" ]
    },
    "flatten_graph"
  ],
  "text": "domain name system is fragile"
}
```

----------------------------------------

TITLE: Filtering Active Employees with ESQL
DESCRIPTION: ESQL query that selects specific employee fields (first_name, last_name, still_hired) and filters for currently employed staff. The query uses KEEP for column selection and WHERE clause for filtering based on employment status.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/where.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP first_name, last_name, still_hired
| WHERE still_hired == true
```

----------------------------------------

TITLE: Filtering ESQL records where birth_date is NULL
DESCRIPTION: This snippet shows how to use the `IS NULL` predicate in ESQL to select records from the `employees` table where the `birth_date` column contains a NULL value.  The query returns all rows where the `birth_date` field is null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/operators/predicates.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| WHERE birth_date IS NULL
```

----------------------------------------

TITLE: Creating a ServiceNow Connector Using the API - Python
DESCRIPTION: This code snippet demonstrates how to create a self-managed ServiceNow connector using the Elasticsearch API. It includes the necessary HTTP method, endpoint, and payload structure required to successfully create the connector.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-servicenow.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT _connector/my-servicenow-connector
{
  "index_name": "my-elasticsearch-index",
  "name": "Content synced from ServiceNow",
  "service_type": "servicenow"
}
```

----------------------------------------

TITLE: Syntax for NOW Function in Elasticsearch SQL
DESCRIPTION: Defines the syntax for the NOW function, which returns the current datetime when the query reached the server. It takes no arguments. It behaves identically to CURRENT_TIMESTAMP() and returns the same value for every call within the same query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_78

LANGUAGE: SQL
CODE:
```
NOW()
```

----------------------------------------

TITLE: Percolate Query for Suffix Search in Elasticsearch
DESCRIPTION: A search request using the percolate query to find matching percolator queries for a given document. This demonstrates how the optimized suffix matching works with the reversed tokens approach.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/percolator.md#2025-04-21_snippet_13

LANGUAGE: console
CODE:
```
GET /my_queries2/_search
{
  "query": {
    "percolate": {
      "field": "query",
      "document": {
        "my_field": "wxyz"
      }
    }
  }
}
```

----------------------------------------

TITLE: IPv4 Prefix Aggregation
DESCRIPTION: Demonstrates IP prefix aggregation for IPv4 addresses with a prefix length of 24 bits.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-ipprefix-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /network-traffic/_search
{
  "size": 0,
  "aggs": {
    "ipv4-subnets": {
      "ip_prefix": {
        "field": "ipv4",
        "prefix_length": 24
      }
    }
  }
}
```

----------------------------------------

TITLE: Syntax for SUM_OF_SQUARES SQL function
DESCRIPTION: Shows the basic syntax for the SUM_OF_SQUARES aggregation function in Elasticsearch SQL. It takes a single numeric field name or expression as input. The function returns null if all input values are null, and ignores nulls otherwise.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_53

LANGUAGE: SQL
CODE:
```
SUM_OF_SQUARES(field_name) <1>
```

----------------------------------------

TITLE: Ordering Results by SCORE in SQL
DESCRIPTION: Demonstrates the common use case of the SCORE() function in Elasticsearch SQL to order query results based on their computed relevance score. Typically, results are ordered in descending order to show the most relevant documents first.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-search.md#_snippet_9

LANGUAGE: SQL
CODE:
```
SELECT SCORE(), * FROM library WHERE MATCH(name, 'dune') ORDER BY SCORE() DESC;
```

----------------------------------------

TITLE: Running Elasticsearch in Docker for Development
DESCRIPTION: Docker command to start a local Elasticsearch instance for testing purposes. This setup disables security features and is not suitable for production use.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/api-tutorial.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
docker run -p 9200:9200 -d --name elasticsearch \
  -e "discovery.type=single-node" \
  -e "xpack.security.enabled=false" \
  -e "xpack.security.http.ssl.enabled=false" \
  -e "xpack.license.self_generated.type=trial" \
  docker.elastic.co/elasticsearch/elasticsearch:9.0.0
```

----------------------------------------

TITLE: Querying with Match Operator in ESQL
DESCRIPTION: This snippet demonstrates how to use the match operator to query documents in the 'books' index for a specific author. The syntax resembles SQL-like queries and checks if the author matches 'Faulkner'. Dependency on Elasticsearch's ESQL is necessary.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/operators/match_operator.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM books
| WHERE author:"Faulkner"
```

----------------------------------------

TITLE: Calculating Spatial Centroid using ST_CENTROID_AGG in ESQL
DESCRIPTION: This snippet demonstrates how to use the ST_CENTROID_AGG function in Elasticsearch's ESQL to calculate the spatial centroid over a field with spatial point geometry type. It queries the 'airports' index and computes the centroid of the 'location' field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/st_centroid_agg.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airports
| STATS centroid=ST_CENTROID_AGG(location)
```

----------------------------------------

TITLE: Generating Certificates from Keystores in Elasticsearch
DESCRIPTION: These commands export certificates from the previously created keystores for both server and client. The certificates are saved as separate files (server.crt and client.crt) using the respective aliases and passwords.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/sql-client/src/test/resources/ssl/readme.txt#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
$ keytool -v -export -alias server -file server.crt -keystore server.keystore -storepass password
```

LANGUAGE: bash
CODE:
```
$ keytool -v -export -alias client -file client.crt -keystore client.keystore -storepass password
```

----------------------------------------

TITLE: Adding Field Metadata in Elasticsearch Mapping
DESCRIPTION: This example demonstrates how to attach metadata to a field when creating an index mapping. The snippet creates an index with a 'latency' field of type 'long' and attaches metadata indicating the unit is milliseconds.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-field-meta.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "latency": {
        "type": "long",
        "meta": {
          "unit": "ms"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Cloning Elastic Connectors Git Repository Shell
DESCRIPTION: Provides the shell command necessary to clone the official Elastic connectors repository from GitHub. This is the first step in obtaining the source code needed to run connectors locally. Users can either clone directly or fork first and clone their fork.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-run-from-source.md#_snippet_1

LANGUAGE: shell
CODE:
```
git clone https://github.com/elastic/connectors
```

----------------------------------------

TITLE: Simulating Registered Domain Processor in Elasticsearch
DESCRIPTION: This example demonstrates how to use the registered domain processor in an Elasticsearch ingest pipeline. It extracts domain components from a given FQDN and stores them in a target field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/registered-domain-processor.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _ingest/pipeline/_simulate
{
  "pipeline": {
    "processors": [
      {
        "registered_domain": {
          "field": "fqdn",
          "target_field": "url"
        }
      }
    ]
  },
  "docs": [
    {
      "_source": {
        "fqdn": "www.example.ac.uk"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Documenting ESQL String Manipulation Function Parameters in Markdown
DESCRIPTION: This snippet defines the parameters for an ESQL function that operates on strings. It specifies three parameters: a string expression, a start position, and an optional length for substring extraction.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/parameters/substring.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
**Parameters**

`string`
:   String expression. If `null`, the function returns `null`.

`start`
:   Start position.

`length`
:   Length of the substring from the start position. Optional; if omitted, all positions after `start` are returned.
```

----------------------------------------

TITLE: Creating Random Circles for Elasticsearch Geo Testing in Java
DESCRIPTION: This method generates a random circle for geospatial testing in Elasticsearch. It creates a circle with a random center point and radius, ensuring the radius is within a specified range.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/esql/arrow/licenses/checker-qual-NOTICE.txt#2025-04-22_snippet_4

LANGUAGE: Java
CODE:
```
public static Circle randomCircle(Point... centerPoint) {
    Point center = centerPoint.length > 0 ? centerPoint[0] : randomPoint();
    return new Circle(center, OpenSearchTestCase.randomDouble() * 100);
}
```

----------------------------------------

TITLE: Scripted Percentile Ranks with Runtime Fields in Elasticsearch
DESCRIPTION: Illustrates using runtime fields with percentile ranks aggregation to perform calculations on transformed values, converting milliseconds to seconds.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-percentile-rank-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET latency/_search
{
  "size": 0,
  "runtime_mappings": {
    "load_time.seconds": {
      "type": "long",
      "script": {
        "source": "emit(doc['load_time'].value / params.timeUnit)",
        "params": {
          "timeUnit": 1000
        }
      }
    }
  },
  "aggs": {
    "load_time_ranks": {
      "percentile_ranks": {
        "values": [ 500, 600 ],
        "field": "load_time.seconds"
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining ESQL Function Parameter for IPv4 Address Formatting
DESCRIPTION: Documentation for the 'leading_zeros' parameter which controls how leading zeros are handled in IPv4 addresses. This parameter appears to be a keyword that configures formatting behavior for IP-related functions in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/functionNamedParams/to_ip.md#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
`leading_zeros`
:   (keyword) What to do with leading 0s in IPv4 addresses.
```

----------------------------------------

TITLE: Defining Irish Stop Words
DESCRIPTION: Defines the Irish stop words for Elasticsearch usage, providing a link to the corresponding Lucene stop words file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_25

LANGUAGE: markdown
CODE:
```
`_irish_`
:   [Irish stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/ga/stopwords.txt)
```

----------------------------------------

TITLE: Indexing a Point Geometry using WKT in Elasticsearch
DESCRIPTION: Adds a document to the 'example' index with a Point geometry specified in Well-Known Text (WKT) format. The coordinates are provided as longitude (-77.03653) and latitude (38.897676).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-shape.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /example/_doc
{
  "location" : "POINT (-77.03653 38.897676)"
}
```

----------------------------------------

TITLE: Adding Document Operations to Elasticsearch Bulk Request
DESCRIPTION: Methods for adding index, update, and delete requests to a bulk operation. These methods append the specified operation to the request list.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/repository-gcs/licenses/google-http-NOTICE.txt#2025-04-21_snippet_2

LANGUAGE: java
CODE:
```
public BulkRequest add(DocWriteRequest<?> request) {
    if (request instanceof IndexRequest) {
        add((IndexRequest) request);
    } else if (request instanceof UpdateRequest) {
        add((UpdateRequest) request);
    } else if (request instanceof DeleteRequest) {
        add((DeleteRequest) request);
    } else {
        throw new IllegalArgumentException("No support for request [" + request + "]");
    }
    return this;
}
```

----------------------------------------

TITLE: Restricted Scheduled Thread Pool Executor Creation
DESCRIPTION: Restricts direct usage of ScheduledThreadPoolExecutor, recommending Elasticsearch's SafeScheduledThreadPoolExecutor instead for proper error handling.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/build-tools-internal/src/main/resources/forbidden/es-all-signatures.txt#2025-04-21_snippet_7

LANGUAGE: java
CODE:
```
@defaultMessage extend org.elasticsearch.threadpool.Scheduler.SafeScheduledThreadPoolExecutor instead which will properly bubble up Errors
java.util.concurrent.ScheduledThreadPoolExecutor#<init>(int)
java.util.concurrent.ScheduledThreadPoolExecutor#<init>(int, java.util.concurrent.ThreadFactory)
java.util.concurrent.ScheduledThreadPoolExecutor#<init>(int, java.util.concurrent.RejectedExecutionHandler)
java.util.concurrent.ScheduledThreadPoolExecutor#<init>(int, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler)
```

----------------------------------------

TITLE: Deprecated Java API References
DESCRIPTION: Collection of deprecated Java API references spanning multiple packages including java.security, java.sql, java.util, javax.management and related packages. These APIs are marked for removal in future Java versions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/build-tools-internal/src/main/resources/forbidden/jdk-deprecated.txt#2025-04-21_snippet_3

LANGUAGE: Java
CODE:
```
java.security.Policy$Parameters
java.security.PolicySpi
java.security.PrivateKey#serialVersionUID
java.security.Provider#<init>(java.lang.String,double,java.lang.String)
java.security.Provider#getVersion()
java.security.PublicKey#serialVersionUID
// ... additional deprecated APIs
```

----------------------------------------

TITLE: SQL Log Base 10 Function Description
DESCRIPTION: Documentation for the SQL LOG10 function that calculates logarithms with base 10. The function accepts numeric inputs and returns double values. When the input is 0 or negative, the function returns null and generates a warning.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/log10.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.
```

----------------------------------------

TITLE: Configuring Proxy Settings for Elasticsearch Plugin Installation on Unix
DESCRIPTION: Demonstrates how to configure HTTP and HTTPS proxy settings for plugin installation on Unix-like systems by setting Java options through the CLI_JAVA_OPTS environment variable.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/_other_command_line_parameters.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
sudo CLI_JAVA_OPTS="-Dhttp.proxyHost=host_name -Dhttp.proxyPort=port_number -Dhttps.proxyHost=host_name -Dhttps.proxyPort=https_port_number" bin/elasticsearch-plugin install analysis-icu
```

----------------------------------------

TITLE: Indexing GeoJSON GeometryCollection in Elasticsearch
DESCRIPTION: Example of indexing a GeoJSON GeometryCollection in Elasticsearch. GeometryCollection contains an array of geometry objects of different types, in this case a Point and a LineString.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-shape.md#2025-04-21_snippet_16

LANGUAGE: json
CODE:
```
POST /example/_doc
{
  "location" : {
    "type": "GeometryCollection",
    "geometries": [
      {
        "type": "Point",
        "coordinates": [100.0, 0.0]
      },
      {
        "type": "LineString",
        "coordinates": [ [101.0, 0.0], [102.0, 1.0] ]
      }
    ]
  }
}
```

----------------------------------------

TITLE: Selecting Employee Data with ESQL
DESCRIPTION: This ESQL query selects all columns from the 'employees' table, specifically keeping columns that start with 'h' and all other columns. It demonstrates the use of the KEEP clause in ESQL for column selection.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/keepDoubleWildcard.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP h*, *
```

----------------------------------------

TITLE: Internal Representation of Nested Objects in Elasticsearch
DESCRIPTION: Shows how Elasticsearch internally flattens nested objects into a simple list of key-value pairs using dot notation to represent the hierarchy. Field names combine parent and child names.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/object.md#2025-04-21_snippet_1

LANGUAGE: js
CODE:
```
{
  "region":             "US",
  "manager.age":        30,
  "manager.name.first": "John",
  "manager.name.last":  "Smith"
}
```

----------------------------------------

TITLE: Filtering Data with QSTR Function in ESQL
DESCRIPTION: This code snippet demonstrates how to use the QSTR function in ESQL to filter data based on a query string. It searches the 'books' index for entries where the 'author' field contains the value 'Faulkner'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/qstr.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM books
| WHERE QSTR("author: Faulkner")
```

----------------------------------------

TITLE: Syntax for VAR_SAMP SQL function
DESCRIPTION: Shows the basic syntax for the VAR_SAMP aggregation function in Elasticsearch SQL. It requires a single numeric field name or expression as input. The function returns null if all input values are null, and ignores nulls otherwise.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_59

LANGUAGE: SQL
CODE:
```
VAR_SAMP(field_name) <1>
```

----------------------------------------

TITLE: Filtering Rare Terms with Regular Expressions in Elasticsearch
DESCRIPTION: Demonstrates how to filter rare terms aggregation results using regex patterns. The example shows including terms starting with 'swi' while excluding those starting with 'electro'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-rare-terms-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /_search
{
  "aggs": {
    "genres": {
      "rare_terms": {
        "field": "genre",
        "include": "swi*",
        "exclude": "electro*"
      }
    }
  }
}
```

----------------------------------------

TITLE: Performing Lookup Join and Filtering in ESQL
DESCRIPTION: This ESQL query retrieves employee data, performs a lookup join with a languages table, and filters the results based on employee numbers. It demonstrates the use of EVAL, LOOKUP JOIN, and WHERE clauses in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/lookup-join.csv-spec/filterOnRightSide.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| EVAL language_code = languages
| LOOKUP JOIN languages_lookup ON language_code
| WHERE emp_no >= 10091 AND emp_no < 10094
```

----------------------------------------

TITLE: Using IN Operator in Elasticsearch SQL
DESCRIPTION: Demonstrates using the IN operator to filter rows where a column's value matches any value in a provided comma-separated list. The query selects the last name for employees whose employee number is in the specified list.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-operators.md#_snippet_6

LANGUAGE: sql
CODE:
```
SELECT last_name l FROM "test_emp" WHERE emp_no IN (10000, 10001, 10002, 999) ORDER BY emp_no LIMIT 5;
```

----------------------------------------

TITLE: Full Analyze API Response with Filtered Tokens (Elasticsearch Console Result)
DESCRIPTION: This snippet displays the complete JSON output returned by the `_analyze` API call using the `predicate_token_filter`. It shows the structure of the response, including the filtered tokens ("jumps", "lazy") along with their original position and offset information.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-predicatefilter-tokenfilter.md#_snippet_2

LANGUAGE: console-result
CODE:
```
{
  "tokens" : [
    {
      "token" : "jumps",
      "start_offset" : 8,
      "end_offset" : 13,
      "type" : "word",
      "position" : 2
    },
    {
      "token" : "lazy",
      "start_offset" : 18,
      "end_offset" : 22,
      "type" : "word",
      "position" : 4
    }
  ]
}
```

----------------------------------------

TITLE: Disabling Entire Mapping
DESCRIPTION: Demonstrates how to disable the entire mapping configuration, which stores documents in _source without indexing any fields. Includes examples of document storage and retrieval.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/enabled.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "enabled": false
  }
}

PUT my-index-000001/_doc/session_1
{
  "user_id": "kimchy",
  "session_data": {
    "arbitrary_object": {
      "some_array": [ "foo", "bar", { "baz": 2 } ]
    }
  },
  "last_updated": "2015-12-06T18:20:22"
}

GET my-index-000001/_doc/session_1

GET my-index-000001/_mapping
```

----------------------------------------

TITLE: Creating and Querying Pass-through Objects in Elasticsearch
DESCRIPTION: Demonstrates how to create an index with a pass-through object mapping and query it both with direct field access and full path access.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/passthrough.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "attributes": {
        "type": "passthrough",
        "priority": 10,
        "properties": {
          "id": {
            "type": "keyword"
          }
        }
      }
    }
  }
}

PUT my-index-000001/_doc/1
{
  "attributes" : {
    "id": "foo",
    "zone": 10
  }
}

GET my-index-000001/_search
{
  "query": {
    "bool": {
      "must": [
        { "match": { "id": "foo" }},
        { "match": { "zone": 10 }}
      ]
    }
  }
}

GET my-index-000001/_search
{
  "query": {
    "bool": {
      "must": [
        { "match": { "attributes.id": "foo" }},
        { "match": { "attributes.zone": 10 }}
      ]
    }
  }
}
```

----------------------------------------

TITLE: Setting Allocated Processors in Elasticsearch
DESCRIPTION: Configuration for explicitly setting the number of processors available to Elasticsearch
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/thread-pool-settings.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
node.processors: 2
```

----------------------------------------

TITLE: Quoting ESQL Identifiers with Backticks
DESCRIPTION: Illustrates the use of backticks (`) to quote identifiers in ESQL, required when they don't start with a letter, `_`, or `@`, or contain characters other than letters, numbers, or `_`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-syntax.md#_snippet_2

LANGUAGE: esql
CODE:
```
FROM index
| KEEP `1.field`
```

----------------------------------------

TITLE: Elasticsearch Configuration Example in Yaml
DESCRIPTION: This YAML snippet outlines how to configure the Elastic network drive connector when connecting to a Dockerized instance of Elasticsearch and Kibana. It specifies connection details like host and API key.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-network-drive.md#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
# When connecting to your cloud deployment you should edit the host value
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: network_drive
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA> # Optional. If not provided, the connector will use the elasticsearch.api_key instead
```

----------------------------------------

TITLE: String Bit Length Function Documentation
DESCRIPTION: Documentation block explaining a function that calculates the bit length of UTF-8 strings. Notes that UTF-8 encoding means a single character may occupy multiple bytes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/bit_length.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.

**Description**

Returns the bit length of a string.

::::{note}
All strings are in UTF-8, so a single character can use multiple bytes.
::::
```

----------------------------------------

TITLE: Bitwise NOT with 'def' Type in Painless
DESCRIPTION: Demonstrates the bitwise NOT operator ('~') in Painless when used with the 'def' type. The 'def' type automatically casts values, so the bitwise NOT operation is performed on the integer representation of the 'def' value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_13

LANGUAGE: painless
CODE:
```
def d = 1;  <1>
def e = ~d; <2>
```

----------------------------------------

TITLE: Result Document after Key Modification
DESCRIPTION: The resulting document after the Foreach processor has renamed object keys based on display_name values, removing elements with empty display names.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/foreach-processor.md#2025-04-21_snippet_10

LANGUAGE: js
CODE:
```
{
  "products" : {
    "Wonderful Whizbangs" : {
      "total_sales" : 200,
      "unit_price" : 19.99,
      "display_name" : "Wonderful Whizbangs"
    },
    "Super Sprockets" : {
      "total_sales" : 100,
      "unit_price" : 9.99,
      "display_name" : "Super Sprockets"
    }
  }
}
```

----------------------------------------

TITLE: Single-Value Array Handling in Synthetic _source for Flattened Fields
DESCRIPTION: This example illustrates how synthetic _source handles single-value arrays in flattened fields. It creates an index with synthetic _source enabled and inserts a document with a single-value array, which is converted to a single value in the result.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/flattened.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "flattened": { "type": "flattened" }
    }
  }
}
PUT idx/_doc/1
{
  "flattened": {
    "field": [ "foo" ]
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  "flattened": {
    "field": "foo"
  }
}
```

----------------------------------------

TITLE: Syntax for DROP Command in ESQL
DESCRIPTION: Defines the syntax for the DROP command in ESQL, which is used to remove specified columns from the result set.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/drop.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
DROP columns
```

----------------------------------------

TITLE: Handling Non-Existent IP Addresses in Elasticsearch IP Location Processor
DESCRIPTION: This snippet illustrates how the IP location processor behaves when it cannot find information for a given IP address.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/ip-location-processor.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT _ingest/pipeline/ip_location
{
  "description" : "Add ip geolocation info",
  "processors" : [
    {
      "ip_location" : {
        "field" : "ip"
      }
    }
  ]
}

PUT my-index-000001/_doc/my_id?pipeline=ip_location
{
  "ip": "80.231.5.0"
}

GET my-index-000001/_doc/my_id
```

----------------------------------------

TITLE: Using Unary Positive Operator with 'def' Type in Painless
DESCRIPTION: This example shows how the unary positive operator '+' works with the 'def' type in Painless, demonstrating implicit casting and type handling.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_9

LANGUAGE: painless
CODE:
```
def z = +1;
int i = +z;
```

----------------------------------------

TITLE: Complex Query Profile Response
DESCRIPTION: Detailed profile response showing query execution breakdown, including timing for term queries, collectors, and aggregations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-profile.md#2025-04-21_snippet_7

LANGUAGE: console-result
CODE:
```
{
  "profile": {
    "shards": [
      {
        "id": "[P6xvulHtQRWuD4YnubWb7A][my-index-000001][0]",
        "node_id": "P6xvulHtQRWuD4YnubWb7A",
        "shard_id": 0,
        "index": "my-index-000001",
        "cluster": "(local)",
        "searches": [
          {
            "query": [
              {
                "type": "TermQuery",
                "description": "message:search",
                "time_in_nanos": 141618,
                "breakdown": {
                  "set_min_competitive_score_count": 0,
                  "match_count": 0,
                  "shallow_advance_count": 0,
                  "set_min_competitive_score": 0,
                  "next_doc": 0,
                  "match": 0,
                  "next_doc_count": 0,
                  "score_count": 0,
                  "compute_max_score_count": 0,
                  "compute_max_score": 0,
                  "advance": 3942,
                  "advance_count": 4,
                  "count_weight_count": 0,
                  "score": 0,
                  "build_scorer_count": 2,
                  "create_weight": 38380,
                  "shallow_advance": 0,
                  "count_weight": 0,
                  "create_weight_count": 1,
                  "build_scorer": 99296
                }
              },
              {
                "type": "TermQuery",
                "description": "user.id:elkbee",
                "time_in_nanos": 163081,
                "breakdown": {
                  "set_min_competitive_score_count": 0,
                  "match_count": 0,
                  "shallow_advance_count": 0,
                  "set_min_competitive_score": 0,
                  "next_doc": 2447,
                  "match": 0,
                  "next_doc_count": 4,
                  "score_count": 4,
                  "compute_max_score_count": 0,
                  "compute_max_score": 0,
                  "advance": 3552,
                  "advance_count": 1,
                  "score": 5027,
                  "count_weight_count": 0,
                  "build_scorer_count": 2,
                  "create_weight": 107840,
                  "shallow_advance": 0,
                  "count_weight": 0,
                  "create_weight_count": 1,
                  "build_scorer": 44215
                }
              }
            ],
            "rewrite_time": 4769,
            "collector": [
              {
                "name": "QueryPhaseCollector",
                "reason": "search_query_phase",
                "time_in_nanos": 1945072,
                "children": [
                  {
                    "name": "SimpleTopScoreDocCollector",
                    "reason": "search_top_hits",
                    "time_in_nanos": 22577
                  },
                  {
                    "name": "AggregatorCollector: [my_scoped_agg, my_global_agg]",
                    "reason": "aggregation",
                    "time_in_nanos": 867617
                  }
                ]
              }
            ]
          }
        ],
        "aggregations": [...],
        "fetch": {...}
      }
    ]
  }
}
```

----------------------------------------

TITLE: Viewing Embeddings Response from Elasticsearch ML API
DESCRIPTION: Example response from generating text embeddings, showing a vector representation of the input text. The embedding is a numerical representation that captures semantic meaning for use in vector search and other ML applications.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/repository-gcs/licenses/google-api-services-storage-NOTICE.txt#2025-04-21_snippet_8

LANGUAGE: json
CODE:
```
{
  "inference_results": [
    {
      "predicted_value": [ 0.0072580635, 0.014516129, ... ]
    }
  ]
}
```

----------------------------------------

TITLE: SHOW TABLES with Wildcard Pattern Matching
DESCRIPTION: Shows usage of multiple character wildcard pattern matching with LIKE clause.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-show-tables.md#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
SHOW TABLES LIKE 'emp%';
```

----------------------------------------

TITLE: Indexing Documents for Terms Lookup
DESCRIPTION: Shows how to index multiple documents with color values for terms lookup demonstration
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-terms-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1
{
  "color":   ["blue", "green"]
}
```

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/2
{
  "color":   "blue"
}
```

----------------------------------------

TITLE: Supported Grouping by Scalar Function on TIME Elasticsearch SQL
DESCRIPTION: Example demonstrating supported usage: grouping ('GROUP BY') by the result of applying a scalar function ('MINUTE') to a field cast to the 'TIME' data type is allowed, as the function returns a non-TIME type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-limitations.md#_snippet_9

LANGUAGE: SQL
CODE:
```
SELECT count(*) FROM test GROUP BY MINUTE((CAST(date_created AS TIME));
```

----------------------------------------

TITLE: Using Custom Config Directory with Elasticsearch Plugin Script
DESCRIPTION: Shows how to specify a custom location for the elasticsearch.yml configuration file when using the plugin script by setting the ES_PATH_CONF environment variable.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/_other_command_line_parameters.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
sudo ES_PATH_CONF=/path/to/conf/dir bin/elasticsearch-plugin install <plugin name>
```

----------------------------------------

TITLE: Truncating Numeric Values to Left of Decimal in Elasticsearch SQL
DESCRIPTION: This demonstrates the `TRUNCATE` (or `TRUNC`) function in Elasticsearch SQL, truncating a number to a specified number of decimal places to the left of the decimal point. A negative second argument specifies the number of places left of the decimal.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_18

LANGUAGE: SQL
CODE:
```
SELECT TRUNCATE(-345.153, -1) AS trimmed;
```

----------------------------------------

TITLE: Logging realm_authentication_failed Event in Elasticsearch
DESCRIPTION: Example of an audit log for the realm authentication failed event. This event is logged for every realm that fails to present a valid authentication token.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_16

LANGUAGE: javascript
CODE:
```
{"type":"audit", "timestamp":"2020-12-30T22:10:15,510+0200", "node.id":
"0RMNyghkQYCc_gVd1G6tZQ", "event.type":"rest", "event.action":
"realm_authentication_failed", "user.name":"elastic", "origin.type":"rest",
"origin.address":"[::1]:51504", "realm":"myTestRealm1", "url.path":
"/_security/user/user1", "url.query":"pretty", "request.method":"POST",
"request.id":"POv8p_qeTl2tb5xoFl0HIg"}
```

----------------------------------------

TITLE: Elasticsearch Response for Average Bucket Aggregation Query
DESCRIPTION: Example response from Elasticsearch for a query using the average bucket aggregation. This snippet shows the structure of the returned data, including the sales per month buckets and the calculated average monthly sales.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-avg-bucket-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console-result
CODE:
```
{
  "took": 11,
  "timed_out": false,
  "_shards": ...,
  "hits": ...,
  "aggregations": {
    "sales_per_month": {
      "buckets": [
        {
          "key_as_string": "2015/01/01 00:00:00",
          "key": 1420070400000,
          "doc_count": 3,
          "sales": {
            "value": 550.0
          }
        },
        {
          "key_as_string": "2015/02/01 00:00:00",
          "key": 1422748800000,
          "doc_count": 2,
          "sales": {
            "value": 60.0
          }
        },
        {
          "key_as_string": "2015/03/01 00:00:00",
          "key": 1425168000000,
          "doc_count": 2,
          "sales": {
            "value": 375.0
          }
        }
      ]
    },
    "avg_monthly_sales": {
      "value": 328.33333333333333,
      "value_as_string": "328.33"
    }
  }
}
```

----------------------------------------

TITLE: Defining Advanced Sync Rules in Elasticsearch JavaScript
DESCRIPTION: These JSON rules manage file indexing by ownership and extension criteria in Elasticsearch. They are executed during a full sync, emphasizing prioritizing specific ownerships while handling extensions strategically.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-onedrive.md#2025-04-21_snippet_9

LANGUAGE: JavaScript
CODE:
```
[
  {
    "owners": ["user1-domain@onmicrosoft.com", "user2-domain@onmicrosoft.com"]
  },
  {
    "skipFilesWithExtensions": [".py"]
  }
]
```

----------------------------------------

TITLE: Configuring Elasticsearch to Filter GCE Instances by Tags
DESCRIPTION: YAML configuration for elasticsearch.yml that sets up GCE discovery with tag filtering. This configuration specifies the GCE project and zone, enables GCE as the seed provider, and filters instances by the 'elasticsearch' and 'dev' tags.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-tags.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
cloud:
  gce:
    project_id: es-cloud
    zone: europe-west1-a
discovery:
  seed_providers: gce
    gce:
      tags: elasticsearch, dev
```

----------------------------------------

TITLE: Calculating Absolute Value in Elasticsearch SQL
DESCRIPTION: This snippet demonstrates the usage of the `ABS` function in Elasticsearch SQL. It calculates the absolute value of numeric expressions, showing results for both negative and positive inputs. The function returns a numeric value of the same type as the input.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_0

LANGUAGE: SQL
CODE:
```
SELECT ABS(-123.5), ABS(55);
```

----------------------------------------

TITLE: Running a Terms Aggregation on Pre-aggregated Data in Elasticsearch
DESCRIPTION: This snippet shows how to run a terms aggregation on the my_text field. The _doc_count field will be automatically respected when computing the document counts for each bucket.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-doc-count-field.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET /_search
{
    "aggs" : {
        "histogram_titles" : {
            "terms" : { "field" : "my_text" }
        }
    }
}
```

----------------------------------------

TITLE: Calculating Percentile with Different Methods in Elasticsearch SQL
DESCRIPTION: Illustrates calculating the 97.3rd percentile of the 'salary' field using both 'tdigest' and 'hdr' percentile algorithms with specified parameters, grouped by 'languages'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_42

LANGUAGE: SQL
CODE:
```
SELECT
    languages,
    PERCENTILE(salary, 97.3, 'tdigest', 100.0) AS "97.3_TDigest",
    PERCENTILE(salary, 97.3, 'hdr', 3) AS "97.3_HDR"
FROM emp
GROUP BY languages;
```

----------------------------------------

TITLE: EQL Sequence Search with Expiration Event in Elasticsearch
DESCRIPTION: Shows an EQL sequence search with an expiration event using the 'until' keyword, where matching sequences must end before a process termination event.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_11

LANGUAGE: console
CODE:
```
GET /my-data-stream/_eql/search
{
  "query": """
    sequence by process.pid with maxspan=1h
      [ process where process.name == "regsvr32.exe" ]
      [ file where stringContains(file.name, "scrobj.dll") ]
    until [ process where event.type == "termination" ]
  """
}
```

----------------------------------------

TITLE: Using Bitwise OR with Def Type in Painless
DESCRIPTION: Example demonstrating how the bitwise OR operator works with Painless's dynamic 'def' type. Shows implicit casting between def and integer types during operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_37

LANGUAGE: painless
CODE:
```
def x = 5 ^ 6; <1>
def y = x ^ 8; <2>
```

----------------------------------------

TITLE: Hexadecimal Formatting Utilities in Java
DESCRIPTION: This snippet defines the HexFormat class, which provides utility functions for formatting and parsing hexadecimal numbers. This includes methods for specifying delimiters and cases in hex representation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.util.txt#2025-04-21_snippet_21

LANGUAGE: Java
CODE:
```
class java.util.HexFormat {
  HexFormat of()
  HexFormat ofDelimiter(String)
  HexFormat withDelimiter(String)
  HexFormat withPrefix(String)
  HexFormat withSuffix(String)
  HexFormat withUpperCase()
  HexFormat withLowerCase()
  String delimiter()
  String prefix()
  String suffix()
  boolean isUpperCase()
  String formatHex(byte[])
  String formatHex(byte[],int,int)
  byte[] parseHex(CharSequence)
  byte[] parseHex(CharSequence,int,int)
}
```

----------------------------------------

TITLE: Avg Aggregation Result in Elasticsearch
DESCRIPTION: Shows the expected response format for an Avg aggregation, including the computed average value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-avg-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "avg_grade": {
      "value": 75.0
    }
  }
}
```

----------------------------------------

TITLE: Generating Seeded Random Number in Elasticsearch SQL
DESCRIPTION: This example uses the `RANDOM` (or `RAND`) function in Elasticsearch SQL. It generates a pseudo-random double value between 0.0 (inclusive) and 1.0 (exclusive), using an optional numeric seed. The snippet shows generating a value with a specific seed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_12

LANGUAGE: SQL
CODE:
```
SELECT RANDOM(123);
```

----------------------------------------

TITLE: Wildcard Field Pattern Searching
DESCRIPTION: Shows how to use wildcard notation to search within all fields of a specific object. This allows searching across all fields that match the pattern, including nested fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-query-string-query.md#2025-04-21_snippet_15

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "query_string" : {
      "fields" : ["city.*"],
      "query" : "this AND that OR thus"
    }
  }
}
```

----------------------------------------

TITLE: Named Query Explanation in RRF Elasticsearch Response
DESCRIPTION: Example response showing how named queries appear in the RRF explain output. The explanation references the query by name rather than by index, making it easier to understand.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reciprocal-rank-fusion.md#2025-04-21_snippet_11

LANGUAGE: js
CODE:
```
{
    "hits":
    [
        {
            "_index": "example-index",
            "_id": "3",
            "_score": 0.8333334,
            "_explanation":
            {
                "value": 0.8333334,
                "description": "rrf score: [0.8333334] computed for initial ranks [2, 1] with rankConstant: [1] as sum of [1 / (rank + rankConstant)] for each query",
                "details":
                [
                    {
                        "value": 2,
                        "description": "rrf score: [0.33333334], for rank [2] in query at index [0] computed as [1 / (2 + 1]), for matching query with score: ",
                        "details":
                        [
                            ...
                        ]
                    },
                    {
                        "value": 1,
                        "description": "rrf score: [0.5], for rank [1] in query [my_knn_query] computed as [1 / (1 + 1]), for matching query with score: ",                      <1>
                        "details":
                        [
                           ...
                        ]
                    }
                ]
            }
        }
        ...
    ]
}
```

----------------------------------------

TITLE: Logging put_user Event in Elasticsearch
DESCRIPTION: Example of an audit log for the create or update user event. This event is logged when the API is invoked to create or update a native user, which can also include password changes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_15

LANGUAGE: javascript
CODE:
```
{"type":"audit", "timestamp":"2020-12-30T22:10:09,749+0200", "node.id":
"0RMNyghkQYCc_gVd1G6tZQ", "event.type":"security_config_change",
"event.action":"put_user", "request.id":"VIiSvhp4Riim_tpkQCVSQA",
"put":{"user":{"name":"user1","enabled":false,"roles":["admin","other_role1"],
"full_name":"Jack Sparrow","email":"jack@blackpearl.com",
"has_password":true,"metadata":{"cunning":10}}}}
```

----------------------------------------

TITLE: Setting Mandatory Ingest Plugin in Elasticsearch Configuration
DESCRIPTION: Configuration example showing how to mark an ingest plugin as mandatory in elasticsearch.yml. When a plugin is marked as mandatory, Elasticsearch nodes will fail to start if the plugin is not installed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/index.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
plugin.mandatory: my-ingest-plugin
```

----------------------------------------

TITLE: Escaping Double Quotes in Identifiers - SQL
DESCRIPTION: Shows an example of escaping a double quote within a double-quoted identifier (e.g., "test""number") by repeating the double quote character, illustrating how to include a literal double quote in an identifier name.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-lexical-structure.md#_snippet_8

LANGUAGE: sql
CODE:
```
SELECT 123 AS "test""number"
```

----------------------------------------

TITLE: Defining Custom Headers for GraphQL Requests
DESCRIPTION: This JSON object example shows how to specify custom headers to be sent with each GraphQL request in the connector's configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-graphql.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
{
    "content-type": "Application/json"
}
```

----------------------------------------

TITLE: Defining Greater Than or Equal Function in ESQL
DESCRIPTION: This snippet defines the Greater Than or Equal (>=) function in ESQL. It checks if one field is greater than or equal to another, returning null for multivalued fields. The function can be optimized for search indices under certain conditions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/operators/greater_than_or_equal.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
### GREATER THAN OR EQUAL `>=`
Check if one field is greater than or equal to another. If either field is [multivalued](https://www.elastic.co/docs/reference/query-languages/esql/esql-multivalued-fields) then the result is `null`.

Note: This is pushed to the underlying search index if one side of the comparison is constant and the other side is a field in the index that has both an [mapping-index](https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/mapping-index) and [doc-values](https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/doc-values).
```

----------------------------------------

TITLE: Running Cross-Cluster EQL Search in Elasticsearch
DESCRIPTION: This snippet demonstrates how to run an EQL search across multiple clusters by targeting data streams on remote clusters using the '<cluster>:<target>' syntax.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_32

LANGUAGE: console
CODE:
```
GET /cluster_one:my-data-stream,cluster_two:my-data-stream/_eql/search
{
  "query": """
    process where process.name == "regsvr32.exe"
  """
}
```

----------------------------------------

TITLE: Indexing a LineString Shape in WKT Format
DESCRIPTION: This example demonstrates indexing a linestring shape using Well-Known Text (WKT) format. The linestring is specified with a series of x,y coordinates in a string format.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/shape.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
POST /example/_doc
{
  "location" : "LINESTRING (-377.03653 389.897676, -377.009051 389.889939)"
}
```

----------------------------------------

TITLE: Indexing a MultiPoint Shape in WKT Format
DESCRIPTION: This example demonstrates indexing a multipoint shape using Well-Known Text (WKT) format. Multiple points are specified within a single MULTIPOINT definition.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/shape.md#2025-04-21_snippet_11

LANGUAGE: console
CODE:
```
POST /example/_doc
{
  "location" : "MULTIPOINT (1002.0 2000.0, 1003.0 2000.0)"
}
```

----------------------------------------

TITLE: Terms Generated by Whitespace Tokenizer Example
DESCRIPTION: This example output illustrates the result of using the whitespace tokenizer on the provided text. The 'whitespace' tokenizer divides the text into tokens wherever it detects a whitespace character.

The expected output is a list of terms generated from the input text.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-whitespace-tokenizer.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
[ The, 2, QUICK, Brown-Foxes, jumped, over, the, lazy, dog's, bone. ]
```

----------------------------------------

TITLE: ST_WITHIN Function Documentation Structure
DESCRIPTION: Main documentation structure for the ST_WITHIN spatial function, including references to included documentation fragments and an SVG diagram.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/st_within.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.

## `ST_WITHIN` [esql-st_within]

**Syntax**

:::{image} ../../../images/functions/st_within.svg
:alt: Embedded
:class: text-center
:::


:::{include} ../parameters/st_within.md
:::

:::{include} ../description/st_within.md
:::

:::{include} ../types/st_within.md
:::

:::{include} ../examples/st_within.md
:::
```

----------------------------------------

TITLE: Uploading Extension with Multipart Form Data
DESCRIPTION: Alternative method for uploading extension file using multipart/form-data content type for clients without native zip handling.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-custom-bundles.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
curl -XPUT \
-H 'Expect:' \
-H 'content-type: multipart/form-data' \
-H "Authorization: ApiKey $EC_API_KEY" \
"https://api.elastic-cloud.com/api/v1/deployments/extensions/$extension_id" -F "file=@/tmp/synonyms.zip"
```

----------------------------------------

TITLE: Using Weight Function in Elasticsearch Query
DESCRIPTION: This snippet illustrates how to apply a weight to score functions in a function_score query, effectively allowing for the multiplication of scores with a specific float value, providing more control over the score normalization process.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-function-score-query.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
"weight" : number
```

----------------------------------------

TITLE: Creating Version String with CONCAT and Type Casting in ESQL
DESCRIPTION: Creates a version string by concatenating an incremented integer with string literals and casting the result to VERSION type. Converts 0 to INT, adds 1, casts to STRING, concatenates with '.2.3', and finally casts to VERSION type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/examples/cast.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW ver = CONCAT(("0"::INT + 1)::STRING, ".2.3")::VERSION
```

----------------------------------------

TITLE: Analyzing Text with Default Edge N-gram Tokenizer in Elasticsearch
DESCRIPTION: Example of using the default edge_ngram tokenizer which produces n-grams with min length 1 and max length 2. The example shows how 'Quick Fox' becomes the terms [Q, Qu].
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-edgengram-tokenizer.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST _analyze
{
  "tokenizer": "edge_ngram",
  "text": "Quick Fox"
}
```

----------------------------------------

TITLE: Unsupported Sorting by Operator on Aggregates Elasticsearch SQL
DESCRIPTION: Example demonstrating a limitation: sorting ('ORDER BY') cannot be applied to an expression that combines two or more aggregates using an operator ('-'), such as 'MAX(salary) - MIN(salary)'. This query will fail.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-limitations.md#_snippet_7

LANGUAGE: SQL
CODE:
```
SELECT age, MAX(salary) - MIN(salary) AS diff FROM test GROUP BY age ORDER BY diff;
```

----------------------------------------

TITLE: Detecting Direct Object Creation - Java
DESCRIPTION: This code snippet showcases another pattern where a new LinkPermission object is created and checked via the SecurityManager, indicating how the tool recognizes various permission instantiations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/libs/entitlement/tools/securitymanager-scanner/README.md#2025-04-21_snippet_1

LANGUAGE: java
CODE:
```
sm.checkPermission(new LinkPermission("symbolic"));
```

----------------------------------------

TITLE: Syntax for LAST/LAST_VALUE Function in Elasticsearch SQL
DESCRIPTION: This snippet shows the syntax for the LAST or LAST_VALUE function. It takes a target field and an optional ordering field to return the last non-null value based on the specified ordering (descending by default for the ordering field).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_20

LANGUAGE: SQL
CODE:
```
LAST(
    field_name               <1>
    [, ordering_field_name]) <2>
```

----------------------------------------

TITLE: Creating SharePoint Server Connector via Elasticsearch API
DESCRIPTION: Example of using the Elasticsearch API to create a new self-managed SharePoint Server connector. This snippet demonstrates the basic structure and required fields for connector creation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-sharepoint.md#2025-04-22_snippet_0

LANGUAGE: console
CODE:
```
PUT _connector/my-sharepoint_server-connector
{
  "index_name": "my-elasticsearch-index",
  "name": "Content synced from SharePoint Server",
  "service_type": "sharepoint_server"
}
```

----------------------------------------

TITLE: Fetch Documents with Standard Fields
DESCRIPTION: This code snippet demonstrates retrieving documents for a specified Salesforce object focusing on standard fields using a SOQL query. It outlines the expected input format and results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-salesforce.md#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
[
  {
    "query": "SELECT FIELDS(STANDARD) FROM Account",
    "language": "SOQL"
  }
]
```

----------------------------------------

TITLE: Filtering with Query DSL in EQL Search for Elasticsearch
DESCRIPTION: This example shows how to use the filter parameter with Query DSL to limit the documents on which an EQL query runs in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_22

LANGUAGE: console
CODE:
```
GET /my-data-stream/_eql/search
{
  "filter": {
    "range": {
      "@timestamp": {
        "gte": "now-1d/d",
        "lt": "now/d"
      }
    }
  },
  "query": """
    file where (file.type == "file" and file.name == "cmd.exe")
  """
}
```

----------------------------------------

TITLE: Documenting Hyperbolic Sine Function in ESQL
DESCRIPTION: This snippet provides a brief description of the hyperbolic sine function. It explains that the function returns the hyperbolic sine of a number and includes a link to the Wikipedia page for further information on hyperbolic functions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/sinh.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
**Description**

Returns the [hyperbolic sine](https://en.wikipedia.org/wiki/Hyperbolic_functions) of a number.
```

----------------------------------------

TITLE: Converting Multivalue to Single Value with MV_LAST in ESQL
DESCRIPTION: This snippet demonstrates how to use the MV_LAST function in ESQL to extract the last value from a multivalue expression. It combines the SPLIT function to create a multivalue column and then uses MV_LAST to select the last value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/mv_last.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a="foo;bar;baz"
| EVAL last_a = MV_LAST(SPLIT(a, ";"))
```

----------------------------------------

TITLE: Executing Span Not Query in Elasticsearch
DESCRIPTION: Demonstrates a span not query that filters documents containing 'hoya' while excluding those with 'la' preceding 'hoya'
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-span-not-query.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "span_not": {
      "include": {
        "span_term": { "field1": "hoya" }
      },
      "exclude": {
        "span_near": {
          "clauses": [
            { "span_term": { "field1": "la" } },
            { "span_term": { "field1": "hoya" } }
          ],
          "slop": 0,
          "in_order": true
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Analysis Response Example
DESCRIPTION: Response showing the tokens generated after analysis, demonstrating how the Korean numeral is removed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-nori-speech.md#2025-04-21_snippet_2

LANGUAGE: console-result
CODE:
```
{
  "tokens" : [ {
    "token" : "용",
    "start_offset" : 3,
    "end_offset" : 4,
    "type" : "word",
    "position" : 1
  }, {
    "token" : "이",
    "start_offset" : 4,
    "end_offset" : 5,
    "type" : "word",
    "position" : 2
  } ]
}
```

----------------------------------------

TITLE: EQL Sequence Search with Shared Field Values in Elasticsearch
DESCRIPTION: Illustrates an EQL sequence search where events share the same process.pid value, using the 'by' keyword for each event.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
GET /my-data-stream/_eql/search
{
  "query": """
    sequence with maxspan=1h
      [ process where process.name == "regsvr32.exe" ] by process.pid
      [ file where stringContains(file.name, "scrobj.dll") ] by process.pid
  """
}
```

----------------------------------------

TITLE: Performing DateTime Arithmetic in ESQL
DESCRIPTION: This ESQL query demonstrates datetime manipulation by adding and subtracting time durations. It uses type casting to convert strings to datetime and time_duration, and employs the EVAL clause for calculations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_timeduration.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW x = "2024-01-01"::datetime
| EVAL y = x + "3 hours"::time_duration, z = x - TO_TIMEDURATION("3 hours");
```

----------------------------------------

TITLE: Elasticsearch Document Security Filter Implementation Example
DESCRIPTION: Example showing how security filters are applied to documents in Elasticsearch. This demonstrates the internal transformation of a user query to include security constraints.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/vector-tile/licenses/protobuf-java-NOTICE.txt#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
{
  "bool": {
    "must": [
      {
        "match": {
          "title": "foo"
        }
      }
    ],
    "filter": [
      {
        "terms": {
          "access_group": ["group1", "group2", "group3"]
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Case-Sensitive String Contains Check - Elasticsearch
DESCRIPTION: Filters `process` events where the `process_name` contains the substring 'foo'. Uses Elasticsearch's `wildcard` query for case-sensitive matching with specified pattern.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_7

LANGUAGE: Elasticsearch
CODE:
```
{"bool":{"must":[{"term":{"event.category":{"value":"process"}}},{"wildcard":{"process_name":{"wildcard":"*foo*","boost":1.0}}}],"boost":1.0}}
```

----------------------------------------

TITLE: Applying TANH Function to a Numeric Value in ESQL
DESCRIPTION: This example demonstrates how to use the TANH function in ESQL to calculate the hyperbolic tangent of a numeric value. The snippet creates a row with a double value and applies the TANH function to it, returning the result.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/tanh.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=1.8
| EVAL tanh=TANH(a)
```

----------------------------------------

TITLE: Configuring Synonym Filter with Synonyms Set in Elasticsearch
DESCRIPTION: Example of configuring a synonym filter using a synonyms set created via Synonyms Management APIs. The 'updateable' option allows reloading search analyzers to pick up changes to synonym files.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-synonym-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "filter": {
    "synonyms_filter": {
      "type": "synonym",
      "synonyms_set": "my-synonym-set",
      "updateable": true
    }
  }
}
```

----------------------------------------

TITLE: Selecting Columns with KEEP Function in ESQL
DESCRIPTION: This ESQL query selects specific columns (emp_no, first_name, last_name, height) from the 'employees' table using the KEEP function. It demonstrates how to retain only the desired fields in the query result.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/docs.csv-spec/keep.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| KEEP emp_no, first_name, last_name, height
```

----------------------------------------

TITLE: Sorting Search Results with Multiple Fields in Elasticsearch
DESCRIPTION: Demonstrates a search query with multiple sort fields, including date formatting, ascending and descending orders, and sorting by score.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/sort-search-results.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search
{
  "sort" : [
    { "post_date" : {"order" : "asc", "format": "strict_date_optional_time_nanos"}},
    { "name" : "desc" },
    { "age" : "desc" },
    "user",
    "_score"
  ],
  "query" : {
    "term" : { "user" : "kimchy" }
  }
}
```

----------------------------------------

TITLE: Removing Leading and Trailing Whitespaces with TRIM in ESQL
DESCRIPTION: This snippet demonstrates the usage of the TRIM function in ESQL to remove leading and trailing whitespaces from string values. It processes two fields, 'message' and 'color', applying TRIM to both.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/trim.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW message = "   some text  ",  color = " red "
| EVAL message = TRIM(message)
| EVAL color = TRIM(color)
```

----------------------------------------

TITLE: Retrieving Flat Settings in Elasticsearch
DESCRIPTION: Demonstrates how to use the flat_settings flag to control the format of returned settings. When true, settings are returned in a flat format, and when false, they are returned in a more human-readable structured format.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/common-options.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET my-index-000001/_settings?flat_settings=true
```

LANGUAGE: console
CODE:
```
GET my-index-000001/_settings?flat_settings=false
```

----------------------------------------

TITLE: Def Type AND Using '&&': Painless Example
DESCRIPTION: Shows the implementation of the AND operator on 'def' types in Painless. The operation uses dynamically typed booleans, converting them to 'def' types for logical evaluations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_32

LANGUAGE: Painless
CODE:
```
def x = true;
def y = x && true;
x = false;
y = y && x;
```

----------------------------------------

TITLE: Configuring Terminate Processor in Elasticsearch
DESCRIPTION: Example of configuring a terminate processor that stops pipeline execution when an error field is present. The processor runs conditionally using the 'if' parameter to check for the existence of an error context variable.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/terminate-processor.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "description" : "terminates the current pipeline if the error field is present",
  "terminate": {
    "if": "ctx.error != null"
  }
}
```

----------------------------------------

TITLE: Displaying Supported Numeric Types Table in Markdown
DESCRIPTION: This markdown snippet presents a table showing the supported numeric types and their corresponding result types for an ESQL function. It includes double, integer, long, and unsigned_long types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/types/floor.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| number | result |
| --- | --- |
| double | double |
| integer | integer |
| long | long |
| unsigned_long | unsigned_long |
```

----------------------------------------

TITLE: Geo Bounding Box Query in Elasticsearch
DESCRIPTION: Query to find documents with geoshapes or geopoints intersecting a specified rectangular area. Supports matching points and shapes within a defined geographical boundary.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/geo-queries.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "query": {
    "geo_bounding_box": {
      "location": {
        "top_left": "40.715, -74.011",
        "bottom_right": "40.717, -73.988"
      }
    }
  }
}
```

----------------------------------------

TITLE: Setting decompound_mode to 'mixed' in Nori Tokenizer
DESCRIPTION: Example output when decompound_mode is set to 'mixed', which decomposes compounds while keeping the original form, preserving both the full token and its components.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-nori-tokenizer.md#2025-04-21_snippet_2

LANGUAGE: txt
CODE:
```
가곡역 => 가곡역, 가곡, 역
```

----------------------------------------

TITLE: Sibling Pipeline Aggregation with buckets_path
DESCRIPTION: Example of a max_bucket sibling pipeline aggregation that uses buckets_path to reference metrics in another aggregation at the same level.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/pipeline.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /_search
{
  "aggs": {
    "sales_per_month": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      },
      "aggs": {
        "sales": {
          "sum": {
            "field": "price"
          }
        }
      }
    },
    "max_monthly_sales": {
      "max_bucket": {
        "buckets_path": "sales_per_month>sales" <1>
      }
    }
  }
}
```

----------------------------------------

TITLE: Calculating Arccosine Using ACOS() Function in ESQL
DESCRIPTION: This snippet demonstrates how to use the ACOS() function in ESQL to calculate the arccosine of a value. It creates a row with a single field 'a' set to 0.9, then applies the ACOS() function to this value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/acos.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=.9
| EVAL acos=ACOS(a)
```

----------------------------------------

TITLE: Create Index with Text Field (Console)
DESCRIPTION: Creates an Elasticsearch index named `my-index-000001` with a mapping that defines a field `full_text` of type `text`, demonstrating a prerequisite for the following examples.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-term-query.md#_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "full_text": { "type": "text" }
    }
  }
}
```

----------------------------------------

TITLE: Output of Simple Analyzer
DESCRIPTION: Provides the output of the simple analyzer, displaying a list of tokens generated from the analyzed text. The output showcases how the analyzer processes and tokenizes the text, stripping non-letter characters and normalizing the case.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-simple-analyzer.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
[ the, quick, brown, foxes, jumped, over, the, lazy, dog, s, bone ]
```

----------------------------------------

TITLE: Removing an Elasticsearch Plugin
DESCRIPTION: Command to remove a specific Elasticsearch plugin using the elasticsearch-plugin utility. After removal of a Java plugin, the node must be restarted to complete the removal process. Configuration files are preserved by default.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/listing-removing-updating.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
sudo bin/elasticsearch-plugin remove [pluginname]
```

----------------------------------------

TITLE: Converting Multiple Values to Aggregate Metric Double in ESQL
DESCRIPTION: This example demonstrates converting an array of integer values to an aggregate_metric_double. The function calculates min, max, sum, and count from all values in the array.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_aggregate_metric_double.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
ROW x = [5032, 11111, 40814]
| EVAL agg_metric = TO_AGGREGATE_METRIC_DOUBLE(x)
```

----------------------------------------

TITLE: Configuring Set Security User Processor in Elasticsearch Ingest Pipeline
DESCRIPTION: This snippet demonstrates how to configure the Set Security User processor in an Elasticsearch ingest pipeline. It adds all user details for the current authenticated user to the 'user' field for all processed documents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/ingest-node-set-security-user-processor.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "processors" : [
    {
      "set_security_user": {
        "field": "user"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Standard Elasticsearch License Header
DESCRIPTION: Default license header required for most Java files in the Elasticsearch codebase except x-pack directory
SOURCE: https://github.com/elastic/elasticsearch/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7

LANGUAGE: java
CODE:
```
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */
```

----------------------------------------

TITLE: Minimum Should Match Script Implementation in Painless
DESCRIPTION: A Painless script that determines the minimum number of terms required to match based on the provided parameters. Uses Math.min to ensure the minimum actors requirement doesn't exceed the total number of terms.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-min-should-match-context.md#2025-04-21_snippet_0

LANGUAGE: painless
CODE:
```
Math.min(params['num_terms'], params['min_actors_to_see'])
```

----------------------------------------

TITLE: Creating a ROW with Mixed Data Types in ESQL
DESCRIPTION: This snippet demonstrates how to create a ROW in ESQL with integer, string, and null values. It initializes a row named 'a' with three columns of different data types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/row.csv-spec/example.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = 1, b = "two", c = null
```

----------------------------------------

TITLE: Defining ESQL Function Parameter in Markdown
DESCRIPTION: This snippet defines a parameter named 'field' for an ESQL function using Markdown syntax. The parameter description is left empty, indicating that no additional information is provided about its purpose or usage.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/parameters/st_centroid_agg.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
`field`
:   
```

----------------------------------------

TITLE: Type Support Matrix in Markdown
DESCRIPTION: A markdown table defining the supported field types and their result types for an ESQL function. Shows that ip, keyword, and text fields all result in ip type output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/types/to_ip.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| field | options | result |
| --- | --- | --- |
| ip | | ip |
| keyword | | ip |
| text | | ip |
```

----------------------------------------

TITLE: Analyzing Text with Keyword Tokenizer and Trim Filter in Elasticsearch
DESCRIPTION: This example uses the analyze API with both the keyword tokenizer and the trim filter. It demonstrates how the trim filter removes leading and trailing whitespace from the token.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-trim-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET _analyze
{
  "tokenizer" : "keyword",
  "filter" : ["trim"],
  "text" : " fox "
}
```

----------------------------------------

TITLE: Configuring Machine Learning Circuit Breaker in Elasticsearch
DESCRIPTION: Settings for the Machine Learning circuit breaker, which limits memory usage for trained models. It includes options for setting the memory limit, overhead factor, and breaker type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/circuit-breaker-settings.md#2025-04-21_snippet_7

LANGUAGE: yaml
CODE:
```
breaker.model_inference.limit: 50%
breaker.model_inference.overhead: 1
breaker.model_inference.type: memory
```

----------------------------------------

TITLE: Calculating Cosine Value with COS Function in ESQL
DESCRIPTION: This example demonstrates how to use the COS function in ESQL to calculate the cosine of a numeric value. It creates a row with a value of 1.8 and then applies the COS function to obtain the cosine of that value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/cos.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=1.8
| EVAL cos=COS(a)
```

----------------------------------------

TITLE: ESQL Function Parameter Documentation
DESCRIPTION: Documentation for the 'point' parameter which accepts geographic and cartesian data types. The parameter is nullable and returns null when null input is provided.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/parameters/st_xmax.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.

**Parameters**

`point`
:   Expression of type `geo_point`, `geo_shape`, `cartesian_point` or `cartesian_shape`. If `null`, the function returns `null`.
```

----------------------------------------

TITLE: Calculating Elapsed Time Using String 'Now' Parameter in Painless
DESCRIPTION: Painless script that parses a string representation of the current time passed as a parameter to calculate the elapsed time since a datetime field value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_26

LANGUAGE: painless
CODE:
```
String nowString = params['now'];
ZonedDateTime nowZdt = ZonedDateTime.parse(nowString);
long now = ZonedDateTime.toInstant().toEpochMilli();
ZonedDateTime inputDateTime = doc['input_datetime'];
long millisDateTime = zdt.toInstant().toEpochMilli();
long elapsedTime = now - millisDateTime;
```

----------------------------------------

TITLE: Configuring Role-based Audit Event Ignore Policy in Elasticsearch YAML
DESCRIPTION: This setting specifies a list of role names or wildcards for which audit events will not be printed. It only applies if all of the user's roles are covered by the policy. It is a dynamic cluster setting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/auding-settings.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
xpack.security.audit.logfile.events.ignore_filters.<policy_name>.roles
```

----------------------------------------

TITLE: Subtracting Seconds from Milliseconds
DESCRIPTION: Shows how to subtract seconds from a milliseconds-based datetime.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_10

LANGUAGE: painless
CODE:
```
long milliSinceEpoch = 434931330000L;
milliSinceEpoch = milliSinceEpoch - 1000L*3L;
```

----------------------------------------

TITLE: Elasticsearch Search Response: Specific Unmapped Fields (JSON)
DESCRIPTION: Displays the JSON response from the search request in Snippet 11. It shows the `hits` structure, including the `fields` object which contains only the `session_data.object.some_field` because it was requested with `include_unmapped: true`, while the unmapped `user_id` was not included.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_11

LANGUAGE: json
CODE:
```
{
  "took" : 2,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 1,
      "relation" : "eq"
    },
    "max_score" : 1.0,
    "hits" : [
      {
        "_index" : "my-index-000001",
        "_id" : "1",
        "_score" : 1.0,
        "fields" : {
          "session_data.object.some_field": [
            "some_value"
          ]
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Indexing Document with Aggregate Metric Data (Doc 2)
DESCRIPTION: Adds a second document with ID `2` to the `stats-index`, providing another set of pre-aggregated metric values for the `agg_metric` field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/aggregate-metric-double.md#_snippet_3

LANGUAGE: console
CODE:
```
PUT stats-index/_doc/2
{
  "agg_metric": {
    "min": -93.00,
    "max": 1702.30,
    "sum": 300.00,
    "value_count": 25
  }
}
```

----------------------------------------

TITLE: Metadata Class for Script Details
DESCRIPTION: This snippet defines a class for retrieving metadata related to scripts in Elasticsearch, including methods for obtaining the index, ID, routing, version, operation type, and current time.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.update.txt#2025-04-21_snippet_2

LANGUAGE: groovy
CODE:
```
class org.elasticsearch.script.Metadata {
    String getIndex()
    String getId()
    String getRouting()
    long getVersion()
    String getOp()
    void setOp(String)
    ZonedDateTime getNow()
}
```

----------------------------------------

TITLE: Example Elasticsearch Search Response with Runtime Field Aggregation (Console Result)
DESCRIPTION: This snippet shows the expected JSON response from the Elasticsearch search query. It confirms that no hits are returned (size: 0) but includes the aggregation results for the 'day_of_week' runtime field. The 'buckets' array contains the distinct values calculated by the runtime script ('TUESDAY', 'THURSDAY', 'MONDAY', 'SUNDAY') and their corresponding document counts.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-runtime-fields-context.md#_snippet_2

LANGUAGE: console-result
CODE:
```
{
  ...
  "hits" : {
    "total" : {
      "value" : 11,
      "relation" : "eq"
    },
    "max_score" : null,
    "hits" : [ ]
  },
  "aggregations" : {
    "day_of_week" : {
      "doc_count_error_upper_bound" : 0,
      "sum_other_doc_count" : 0,
      "buckets" : [
        {
          "key" : "TUESDAY",
          "doc_count" : 5
        },
        {
          "key" : "THURSDAY",
          "doc_count" : 4
        },
        {
          "key" : "MONDAY",
          "doc_count" : 1
        },
        {
          "key" : "SUNDAY",
          "doc_count" : 1
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Day-of-Week Aggregation Using Painless in Elasticsearch
DESCRIPTION: Example showing how to use a terms aggregation with a Painless script to group messages by day of the week using the getDayOfWeekEnum method.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_29

LANGUAGE: console
CODE:
```
GET /messages/_search?pretty=true
{
  "aggs": {
    "day-of-week-count": {
      "terms": {
        "script": "return doc[\"datetime\"].value.getDayOfWeekEnum();"
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining Bucket Sort Aggregation in Elasticsearch
DESCRIPTION: Demonstrates the basic syntax for a bucket sort aggregation, including sort fields, order, and optional from and size parameters for truncation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-bucket-sort-aggregation.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "bucket_sort": {
    "sort": [
      { "sort_field_1": { "order": "asc" } },
      { "sort_field_2": { "order": "desc" } },
      "sort_field_3"
    ],
    "from": 1,
    "size": 3
  }
}
```

----------------------------------------

TITLE: Date Histogram Aggregation with 19-Day Offset
DESCRIPTION: Example response showing date histogram buckets with a 19-day offset across different months in 2022.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-datehistogram-aggregation.md#2025-04-21_snippet_10

LANGUAGE: console
CODE:
```
"buckets": [
  { "key_as_string": "2022-01-20", "key": 1642636800000, "doc_count": 1 },
  { "key_as_string": "2022-02-20", "key": 1645315200000, "doc_count": 1 },
  { "key_as_string": "2022-03-20", "key": 1647734400000, "doc_count": 1 },
  { "key_as_string": "2022-04-20", "key": 1650412800000, "doc_count": 1 },
  { "key_as_string": "2022-05-20", "key": 1653004800000, "doc_count": 1 },
  { "key_as_string": "2022-06-20", "key": 1655683200000, "doc_count": 1 },
  { "key_as_string": "2022-07-20", "key": 1658275200000, "doc_count": 1 },
  { "key_as_string": "2022-08-20", "key": 1660953600000, "doc_count": 1 }
]
```

----------------------------------------

TITLE: Calculating Sine Value Using SIN Function in ESQL
DESCRIPTION: This example demonstrates how to use the SIN function in ESQL to calculate the sine of a numeric value. It creates a row with a double value and applies the SIN function to compute its sine.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/sin.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=1.8
| EVAL sin=SIN(a)
```

----------------------------------------

TITLE: Required Zoom API Scopes for Connector Configuration
DESCRIPTION: List of required granular scopes that need to be added to the Zoom Server-to-Server OAuth application to enable proper connector functionality.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-zoom.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
user:read:list_users:admin
meeting:read:list_meetings:admin
meeting:read:list_past_participants:admin
cloud_recording:read:list_user_recordings:admin
team_chat:read:list_user_channels:admin
team_chat:read:list_user_messages:admin
```

----------------------------------------

TITLE: Defining Hindi Stop Words
DESCRIPTION: Defines Hindi stop words for use in Elasticsearch, with links to the predefined stop words in Lucene.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_22

LANGUAGE: markdown
CODE:
```
`_hindi_`
:   [Hindi stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/hi/stopwords.txt)
```

----------------------------------------

TITLE: Calculating Natural Logarithm in ESQL
DESCRIPTION: This example shows how to calculate the natural logarithm (base e) of a value using the LOG function in ESQL. It computes the natural logarithm of 100.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/log.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
ROW value = 100
| EVAL s = LOG(value);
```

----------------------------------------

TITLE: Processed Document After Pipeline Execution in Elasticsearch
DESCRIPTION: Displays the final indexed document after both pipelines have processed it. The document contains the original field plus the fields added by both the inner and outer pipelines.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/pipeline-processor.md#2025-04-21_snippet_5

LANGUAGE: js
CODE:
```
{
  "field": "value",
  "inner_pipeline_set": "inner",
  "outer_pipeline_set": "outer"
}
```

----------------------------------------

TITLE: Mapping Unsigned Long Field Elasticsearch Console
DESCRIPTION: This snippet demonstrates how to create an index mapping in Elasticsearch that includes a field of the `unsigned_long` type. The mapping defines the `my_counter` field to store unsigned 64-bit integer values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/unsigned-long.md#_snippet_0

LANGUAGE: Console
CODE:
```
PUT my_index
{
  "mappings": {
    "properties": {
      "my_counter": {
        "type": "unsigned_long"
      }
    }
  }
}
```

----------------------------------------

TITLE: Syntax for FIRST/FIRST_VALUE Function in Elasticsearch SQL
DESCRIPTION: This snippet shows the syntax for the FIRST or FIRST_VALUE function. It takes a target field and an optional ordering field to return the first non-null value based on the specified ordering.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_11

LANGUAGE: SQL
CODE:
```
FIRST(
    field_name               <1>
    [, ordering_field_name]) <2>
```

----------------------------------------

TITLE: Setting Default Data Stream Retention Period
DESCRIPTION: Dynamic setting for the default retention period applied to data streams without explicit retention configuration. Must be greater than 10s and less than or equal to max retention.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/data-stream-lifecycle-settings.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
data_streams.lifecycle.retention.default: <time_value>
```

----------------------------------------

TITLE: Rollover Based on Primary Shard Document Count
DESCRIPTION: ILM policy configuration that triggers rollover when the largest primary shard contains 10 million documents.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-lifecycle-actions/ilm-rollover.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
PUT _ilm/policy/my_policy
{
  "policy": {
    "phases": {
      "hot": {
        "actions": {
          "rollover" : {
            "max_primary_shard_docs": 10000000
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: S3 Metric Example
DESCRIPTION: This snippet presents an example where a specific metric for s3 storage classes is created. It illustrates the usage of prefixed metric names when similar metrics have significantly different implementations/related metrics.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/apm/NAMING.md#2025-04-21_snippet_1

LANGUAGE: none
CODE:
```
"es.repositories.s3.deep_archive_access.total"
```

----------------------------------------

TITLE: Monthly Hire Count Histogram in ESQL
DESCRIPTION: Creates a histogram showing hire counts per month using the BUCKET function combined with COUNT aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/bucket.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM employees
| WHERE hire_date >= "1985-01-01T00:00:00Z" AND hire_date < "1986-01-01T00:00:00Z"
| STATS hires_per_month = COUNT(*) BY month = BUCKET(hire_date, 20, "1985-01-01T00:00:00Z", "1986-01-01T00:00:00Z")
| SORT month
```

----------------------------------------

TITLE: Configuring HTTP Client Certificate Authentication in Elasticsearch
DESCRIPTION: YAML configuration for TLS client certificate authentication in Elasticsearch. This setup requires clients to provide valid certificates and uses the PKI realm for authentication.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/watcher/licenses/failureaccess-NOTICE.txt#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
xpack.security.http.ssl.enabled: true
xpack.security.http.ssl.client_authentication: required
xpack.security.http.authentication.type: pki
xpack.security.http.authentication.realm: pki1
```

----------------------------------------

TITLE: ESQL Spatial Extent Function Documentation Comment
DESCRIPTION: Comment header explaining that this is an auto-generated file by ESQL's AbstractFunctionTestCase, with a warning not to edit directly and instructions for regeneration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/st_extent_agg.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.
```

----------------------------------------

TITLE: ESQL Weighted Average Parameters Definition
DESCRIPTION: Defines two parameters required for weighted average calculations: a numeric value and its corresponding weight. Part of ESQL's automated test case documentation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/parameters/weighted_avg.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.

**Parameters**

`number`
:   A numeric value.

`weight`
:   A numeric weight.
```

----------------------------------------

TITLE: Moving Min Function Example
DESCRIPTION: Example of using the pre-built min function in a moving function aggregation to find minimum values in the window.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-movfn-aggregation.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
POST /_search
{
  "size": 0,
  "aggs": {
    "my_date_histo": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "1M"
      },
      "aggs": {
        "the_sum": {
          "sum": { "field": "price" }
        },
        "the_moving_min": {
          "moving_fn": {
            "buckets_path": "the_sum",
            "window": 10,
            "script": "MovingFunctions.min(values)"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Importing Python Modules in Jinja2 Templates for Elasticsearch
DESCRIPTION: Shows how to import Python standard library modules for use in Jinja2 templates. This example imports the 'os' module to access operating system related functionality within templates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/distribution/tools/ansi-console/licenses/jansi-NOTICE.txt#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
import os
```

----------------------------------------

TITLE: Installing Elasticsearch GCE Discovery Plugin
DESCRIPTION: Uses the Elasticsearch plugin manager to install the GCE discovery plugin. This command should be run on the Elasticsearch instance after Elasticsearch is installed.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-long.md#2025-04-21_snippet_6

LANGUAGE: sh
CODE:
```
# Use Plugin Manager to install it
sudo bin/elasticsearch-plugin install discovery-gce
```

----------------------------------------

TITLE: Configuring Nested Document Mapping in Elasticsearch
DESCRIPTION: Example of setting up mappings for nested documents with a resellers array containing nested properties for reseller name and price.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-nested-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT /products
{
  "mappings": {
    "properties": {
      "resellers": {
        "type": "nested",
        "properties": {
          "reseller": {
            "type": "keyword"
          },
          "price": {
            "type": "double"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Custom Analyzer with Decimal Digit Filter in Elasticsearch
DESCRIPTION: Example of using the create index API to configure a custom analyzer that uses the decimal_digit filter with a whitespace tokenizer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-decimal-digit-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /decimal_digit_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "whitespace_decimal_digit": {
          "tokenizer": "whitespace",
          "filter": [ "decimal_digit" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Microsoft SQL Connector via API
DESCRIPTION: Demonstrates how to create a new self-managed Microsoft SQL connector using the Elasticsearch Create connector API. Specifies the index name, connector name, and service type.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-ms-sql.md#_snippet_0

LANGUAGE: console
CODE:
```
PUT _connector/my-mssql-connector
{
  "index_name": "my-elasticsearch-index",
  "name": "Content synced from Microsoft SQL",
  "service_type": "mssql"
}
```

----------------------------------------

TITLE: Custom Preference Search Query in Elasticsearch
DESCRIPTION: Demonstrates setting a custom preference string for search routing to consistently target the same shards for caching purposes. Uses a match query on user.id field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-shard-routing.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search?preference=my-custom-shard-string
{
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  }
}
```

----------------------------------------

TITLE: Grant Object Schema for Security Config Change Events in Elasticsearch
DESCRIPTION: Specifies the structure of a grant object in security configuration change events. It includes fields for the grant type, user information, and access token status.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_27

LANGUAGE: javascript
CODE:
```
{"type": <string>, "user": {"name": <string>, "has_password": <boolean>},
"has_access_token": <boolean>}
```

----------------------------------------

TITLE: Structuring Elasticsearch Entitlement Policy YAML
DESCRIPTION: Shows the basic structure required for a versioned entitlement policy used for patching via system properties. It must include a 'versions' list and a 'policy' object.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/libs/entitlement/README.md#_snippet_1

LANGUAGE: yaml
CODE:
```
versions:
  - version1
  - versionN
policy:
  <a standard entitlement policy>
```

----------------------------------------

TITLE: Enriching Data with Languages Policy in ESQL
DESCRIPTION: Demonstrates enriching a single row of data using a languages policy. The query takes a row with value '1' and enriches it using a languages_policy, resulting in language name mapping.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/enrich.csv-spec/enrich_on.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = "1"
| ENRICH languages_policy ON a
```

----------------------------------------

TITLE: Linking to Elasticsearch IP Functions Documentation
DESCRIPTION: Markdown links to the documentation for CIDR_MATCH and IP_PREFIX functions in Elasticsearch. These links point to detailed documentation on IP-related functions that can be used in Elasticsearch SQL/ESQL queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/lists/ip-functions.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
* [`CIDR_MATCH`](../../functions-operators/ip-functions.md#esql-cidr_match)
* [`IP_PREFIX`](../../functions-operators/ip-functions.md#esql-ip_prefix)
```

----------------------------------------

TITLE: RTRIM Function Section
DESCRIPTION: Main section defining the RTRIM function documentation with reference to syntax diagram and included content sections.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/rtrim.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
## `RTRIM` [esql-rtrim]

**Syntax**

:::{image} ../../../images/functions/rtrim.svg
:alt: Embedded
:class: text-center
:::


:::{include} ../parameters/rtrim.md
:::

:::{include} ../description/rtrim.md
:::

:::{include} ../types/rtrim.md
:::

:::{include} ../examples/rtrim.md
:::
```

----------------------------------------

TITLE: Type Support Table in Markdown
DESCRIPTION: Markdown table showing the mapping between string input types (keyword and text) and their result types in ESQL functions. This is an auto-generated reference meant for documentation purposes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/types/to_base64.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| string | result |
| --- | --- |
| keyword | keyword |
| text | keyword |
```

----------------------------------------

TITLE: Defining Mandatory Plugins in Elasticsearch YAML Configuration
DESCRIPTION: This YAML configuration snippet demonstrates how to specify mandatory plugins in the Elasticsearch config/elasticsearch.yml file. It ensures that the node will not start if the specified plugins are missing, enhancing system reliability.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/mandatory-plugins.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
plugin.mandatory: analysis-icu,lang-js
```

----------------------------------------

TITLE: Routing Formula for Shard Selection in Elasticsearch
DESCRIPTION: Formula showing how documents are routed to a particular shard in an index based on the routing value, number of routing shards, and number of primary shards.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-routing-field.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
routing_factor = num_routing_shards / num_primary_shards
shard_num = (hash(_routing) % num_routing_shards) / routing_factor
```

----------------------------------------

TITLE: Finding First Value Without Explicit Ordering (FIRST) - Example 1
DESCRIPTION: This query finds the first non-null value in column 'a' from index 't' without specifying an explicit ordering field. The result depends on the internal sorting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_12

LANGUAGE: SQL
CODE:
```
SELECT FIRST(a) FROM t
```

----------------------------------------

TITLE: Inefficient Wildcard Query for Percolator in Elasticsearch
DESCRIPTION: An example of an inefficient wildcard query pattern that should be avoided with the percolator. This query uses a direct wildcard expression which is more expensive to evaluate.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/percolator.md#2025-04-21_snippet_7

LANGUAGE: js
CODE:
```
{
  "query": {
    "wildcard": {
      "my_field": "abc*"
    }
  }
}
```

----------------------------------------

TITLE: Output of Letter Tokenizer in Elasticsearch
DESCRIPTION: This snippet shows the output produced by the letter tokenizer when applied to the sample text. It demonstrates how the tokenizer breaks the text into terms, separating words and removing non-letter characters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-letter-tokenizer.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
[ The, QUICK, Brown, Foxes, jumped, over, the, lazy, dog, s, bone ]
```

----------------------------------------

TITLE: Default Stoptags Configuration in Nori Token Filter
DESCRIPTION: Default configuration showing the array of part-of-speech tags that should be removed by the nori_part_of_speech filter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-nori-speech.md#2025-04-21_snippet_0

LANGUAGE: js
CODE:
```
"stoptags": [
    "E",
    "IC",
    "J",
    "MAG", "MAJ", "MM",
    "SP", "SSC", "SSO", "SC", "SE",
    "XPN", "XSA", "XSN", "XSV",
    "UNA", "NA", "VSV"
]
```

----------------------------------------

TITLE: Elasticsearch Shard Tool Command Syntax
DESCRIPTION: Shows the basic command syntax for the elasticsearch-shard tool with all available options for removing corrupted data from shards.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/shard-tool.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
bin/elasticsearch-shard remove-corrupted-data
  ([--index <Index>] [--shard-id <ShardId>] | [--dir <IndexPath>])
  [--truncate-clean-translog]
  [-E <KeyValuePair>]
  [-h, --help] ([-s, --silent] | [-v, --verbose])
```

----------------------------------------

TITLE: Deleting Async EQL Search in Elasticsearch
DESCRIPTION: This snippet demonstrates how to manually delete an async EQL search before its retention period ends using the delete async EQL search API.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_28

LANGUAGE: console
CODE:
```
DELETE /_eql/search/FmNJRUZ1YWZCU3dHY1BIOUhaenVSRkEaaXFlZ3h4c1RTWFNocDdnY2FSaERnUTozNDE=
```

----------------------------------------

TITLE: Sorting Across Multiple Indices with Numeric Type Casting in Elasticsearch
DESCRIPTION: Demonstrates how to use the 'numeric_type' option to force a specific type when sorting across indices with different field types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/sort-search-results.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
POST /index_long,index_double/_search
{
   "sort" : [
      {
        "field" : {
            "numeric_type" : "double"
        }
      }
   ]
}
```

----------------------------------------

TITLE: Creating Role Descriptor with Special Characters in Application Privileges for Elasticsearch
DESCRIPTION: This role descriptor focuses on application privileges for 'maps', including special characters as privileges and resources, along with run-as permissions and metadata.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/src/test/resources/org/elasticsearch/xpack/security/audit/logfile/audited_roles.txt#2025-04-22_snippet_3

LANGUAGE: JSON
CODE:
```
{"cluster":[],"indices":[],"applications":[{"application":"maps","privileges":["{",$"}",$"\n","\\","\""],"resources":["raster:*"]},{"application":"maps","privileges":["*:*"],"resources":["noooooo!!\n\n\f\\\\r","{"]}],"run_as":["jack","nich*","//\""],"metadata":{"some meta":42}}
```

----------------------------------------

TITLE: Computing Absolute Value using ABS Function in ESQL
DESCRIPTION: Demonstrates how to calculate the absolute value of a negative number using the ABS function in ESQL. The example takes a number value of -1.0 and returns its absolute value using the ABS function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/abs.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW number = -1.0
| EVAL abs_number = ABS(number)
```

----------------------------------------

TITLE: Example Search Response with Early Termination
DESCRIPTION: Shows the response format when using early termination in search queries, where total hits are not tracked.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/sorting.md#2025-04-21_snippet_5

LANGUAGE: console-result
CODE:
```
{
  "_shards": ...
   "hits" : {
      "max_score" : null,
      "hits" : []
  },
  "took": 20,
  "timed_out": false
}
```

----------------------------------------

TITLE: Defining ReflectiveOperationException in Java
DESCRIPTION: This snippet defines the java.lang.ReflectiveOperationException class, the common superclass of reflection-related exceptions. It includes a default constructor and a constructor that accepts a string message.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.lang.txt#2025-04-21_snippet_47

LANGUAGE: java
CODE:
```
class java.lang.ReflectiveOperationException {
  ()
  (String)
}
```

----------------------------------------

TITLE: Run PostgreSQL Connector E2E Tests (Shell)
DESCRIPTION: Provides the shell command to execute the end-to-end functional tests for the Elasticsearch PostgreSQL connector. This command uses the 'make ftest' target and specifies the 'postgresql' connector name.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-postgresql.md#_snippet_9

LANGUAGE: shell
CODE:
```
$ make ftest NAME=postgresql
```

----------------------------------------

TITLE: Calculating Angle with ATAN2 Function in ESQL
DESCRIPTION: This snippet demonstrates how to use the ATAN2 function in ESQL to calculate the angle between the positive x-axis and a point in the Cartesian plane. It creates a row with y and x values, then applies the ATAN2 function to compute the angle in radians.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/atan2.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW y=12.9, x=.6
| EVAL atan2=ATAN2(y, x)
```

----------------------------------------

TITLE: Setting Node Name in Elasticsearch YAML
DESCRIPTION: Configures the human-readable name for an Elasticsearch node by setting the `node.name` property in the `elasticsearch.yml` configuration file. This name appears in various API responses and logs, helping to identify specific node instances.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/node-settings.md#_snippet_0

LANGUAGE: yaml
CODE:
```
node.name: prod-data-2
```

----------------------------------------

TITLE: IP Range Aggregation with Custom Keys
DESCRIPTION: Shows how to assign custom keys to IP ranges in the aggregation results using the 'key' parameter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-iprange-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET /ip_addresses/_search
{
  "size": 0,
  "aggs": {
    "ip_ranges": {
      "ip_range": {
        "field": "ip",
        "ranges": [
          { "key": "infinity", "to": "10.0.0.5" },
          { "key": "and-beyond", "from": "10.0.0.5" }
        ],
        "keyed": true
      }
    }
  }
}
```

----------------------------------------

TITLE: Sigmoid Function in Script
DESCRIPTION: This snippet illustrates using the sigmoid function within a script for custom scoring. The sigmoid function `sigmoid(value, k, a) = value^a/ (k^a + value^a)` is used with the 'my-int' field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-script-score-query.md#2025-04-21_snippet_2

LANGUAGE: js
CODE:
```
"script" : {
    "source" : "sigmoid(doc['my-int'].value, 2, 1)"
}
```

----------------------------------------

TITLE: Writing Single-Line ESQL Queries
DESCRIPTION: Demonstrates that an ESQL query, although often written on multiple lines for readability, can also be written as a single line with commands separated by the pipe character.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-syntax.md#_snippet_1

LANGUAGE: esql
CODE:
```
source-command | processing-command1 | processing-command2
```

----------------------------------------

TITLE: Defining Greek Stop Words
DESCRIPTION: Defines the Greek stop words applicable in Elasticsearch analysis, with a link to the corresponding Lucene file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_21

LANGUAGE: markdown
CODE:
```
`_greek_`
:   [Greek stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/el/stopwords.txt)
```

----------------------------------------

TITLE: Defining Token Class Methods - Java
DESCRIPTION: This snippet defines a class named Token that includes various methods for accessing properties of a token in a text analysis context. It provides functionality to get the token's term, position, length, offsets, and type, as well as to check if it is a keyword.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/analysis-common/src/main/resources/org/elasticsearch/analysis/common/painless_whitelist.txt#2025-04-21_snippet_0

LANGUAGE: java
CODE:
```
class org.elasticsearch.analysis.common.AnalysisPredicateScript$Token {
  CharSequence getTerm()
  int getPosition()
  int getPositionIncrement()
  int getPositionLength()
  int getStartOffset()
  int getEndOffset()
  String getType()
  boolean isKeyword()
}
```

----------------------------------------

TITLE: Configuring Multiple Authentication Types for HTTP in Elasticsearch
DESCRIPTION: YAML configuration for setting up multiple authentication types in Elasticsearch. This establishes a fallback chain where if the first authentication type fails, Elasticsearch tries subsequent types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/watcher/licenses/failureaccess-NOTICE.txt#2025-04-21_snippet_9

LANGUAGE: yaml
CODE:
```
xpack.security.http.authentication.type: [pki, basic]
xpack.security.http.authentication.realm: [pki1, file]
```

----------------------------------------

TITLE: Defining Enum Class Methods in Java
DESCRIPTION: This snippet shows the public methods of the java.lang.Enum class. It includes methods for comparing enums, getting their names, and ordinal values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.lang.txt#2025-04-21_snippet_10

LANGUAGE: Java
CODE:
```
class java.lang.Enum {
  int compareTo(Enum)
  String name()
  int ordinal()
}
```

----------------------------------------

TITLE: Analyzing Text with Delimited Payload Filter
DESCRIPTION: Example of using the analyze API with the delimited_payload filter to process text containing token-payload pairs separated by the default '|' delimiter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-delimited-payload-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET _analyze
{
  "tokenizer": "whitespace",
  "filter": ["delimited_payload"],
  "text": "the|0 brown|10 fox|5 is|0 quick|10"
}
```

----------------------------------------

TITLE: Preventing Accidental DNS Lookups
DESCRIPTION: Restricts methods that can trigger DNS lookups, requiring explicit justification via SuppressWarnings annotation when used.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/build-tools-internal/src/main/resources/forbidden/jdk-signatures.txt#2025-04-21_snippet_9

LANGUAGE: plaintext
CODE:
```
@defaultMessage avoid DNS lookups by accident: if you have a valid reason, then @SuppressWarnings with that reason so its completely clear
java.net.InetAddress#getHostName()
java.net.InetAddress#getCanonicalHostName()
```

----------------------------------------

TITLE: Creating Random Points for Elasticsearch Geo Testing in Java
DESCRIPTION: This method generates a random point for geospatial testing in Elasticsearch. It uses randomDouble() to create latitude and longitude values within valid ranges.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/esql/arrow/licenses/checker-qual-NOTICE.txt#2025-04-22_snippet_1

LANGUAGE: Java
CODE:
```
public static Point randomPoint() {
    return new Point(randomLongitude(), randomLatitude());
}
```

----------------------------------------

TITLE: Debug Response for Goals Field
DESCRIPTION: Shows the response from Debug.explain revealing the internal class type of the goals field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-debugging.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
{
   "error": {
      "type": "script_exception",
      "to_string": "[1, 9, 27]",
      "painless_class": "org.elasticsearch.index.fielddata.ScriptDocValues.Longs",
      "java_class": "org.elasticsearch.index.fielddata.ScriptDocValues$Longs",
      ...
   },
   "status": 400
}
```

----------------------------------------

TITLE: Generating Random Longitude for Elasticsearch Geo Testing in Java
DESCRIPTION: This method creates a random longitude value for geospatial testing. It ensures the generated value is within the valid range of -180 to 180 degrees.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/esql/arrow/licenses/checker-qual-NOTICE.txt#2025-04-22_snippet_3

LANGUAGE: Java
CODE:
```
public static double randomLongitude() {
    return OpenSearchTestCase.randomDouble() * 360 - 180;
}
```

----------------------------------------

TITLE: Example Response with Cumulative Sums
DESCRIPTION: Shows the response format for a cumulative sum aggregation, including monthly sales figures and their running totals across three months.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-cumulative-sum-aggregation.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
   "took": 11,
   "timed_out": false,
   "_shards": ...,
   "hits": ...,
   "aggregations": {
      "sales_per_month": {
         "buckets": [
            {
               "key_as_string": "2015/01/01 00:00:00",
               "key": 1420070400000,
               "doc_count": 3,
               "sales": {
                  "value": 550.0
               },
               "cumulative_sales": {
                  "value": 550.0
               }
            },
            {
               "key_as_string": "2015/02/01 00:00:00",
               "key": 1422748800000,
               "doc_count": 2,
               "sales": {
                  "value": 60.0
               },
               "cumulative_sales": {
                  "value": 610.0
               }
            },
            {
               "key_as_string": "2015/03/01 00:00:00",
               "key": 1425168000000,
               "doc_count": 2,
               "sales": {
                  "value": 375.0
               },
               "cumulative_sales": {
                  "value": 985.0
               }
            }
         ]
      }
   }
}
```

----------------------------------------

TITLE: Defining Parameters for Spaces Function Test in Elasticsearch SQL
DESCRIPTION: This markdown snippet defines the parameters for the 'spaces' function test case. It specifies that the function takes a 'number' parameter, which determines the number of spaces in the result.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/parameters/space.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
**Parameters**

`number`
:   Number of spaces in result.
```

----------------------------------------

TITLE: Finding Maximum Salary with MAX in Elasticsearch SQL
DESCRIPTION: This example demonstrates using the MAX function to find the highest salary value present in the 'salary' field of the 'emp' index. The result is aliased as 'max'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_30

LANGUAGE: SQL
CODE:
```
SELECT MAX(salary) AS max FROM emp;
```

----------------------------------------

TITLE: Finding Minimum Salary with MIN in Elasticsearch SQL
DESCRIPTION: This example demonstrates using the MIN function to find the lowest salary value present in the 'salary' field of the 'emp' index. The result is aliased as 'min'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_33

LANGUAGE: SQL
CODE:
```
SELECT MIN(salary) AS min FROM emp;
```

----------------------------------------

TITLE: Deleting Snapshots in Elasticsearch Repository
DESCRIPTION: This method deletes a list of snapshots from an Elasticsearch repository. It uses the DeleteSnapshotRequest to perform the deletion.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/inference/licenses/slf4j-NOTICE.txt#2025-04-22_snippet_2

LANGUAGE: Java
CODE:
```
private void deleteSnapshots(String repoName, List<SnapshotId> snapshotIds, ActionListener<AcknowledgedResponse> listener) {
        DeleteSnapshotRequest deleteSnapshotRequest = new DeleteSnapshotRequest(repoName);
        deleteSnapshotRequest.snapshots(snapshotIds.stream().map(SnapshotId::getName).toArray(String[]::new));
        client.admin().cluster().deleteSnapshot(deleteSnapshotRequest, listener);
    }
```

----------------------------------------

TITLE: Setting decompound_mode to 'discard' in Nori Tokenizer
DESCRIPTION: Example output when decompound_mode is set to 'discard', which decomposes compounds and discards the original form, showing only component parts.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-nori-tokenizer.md#2025-04-21_snippet_1

LANGUAGE: txt
CODE:
```
가곡역 => 가곡, 역
```

----------------------------------------

TITLE: RoundingMode Enum Definition in Painless
DESCRIPTION: Defines the RoundingMode enumeration that specifies different rounding behaviors for decimal arithmetic.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.math.txt#2025-04-21_snippet_3

LANGUAGE: java
CODE:
```
class java.math.RoundingMode {
  RoundingMode CEILING
  RoundingMode DOWN
  RoundingMode FLOOR
  RoundingMode HALF_DOWN
  RoundingMode HALF_EVEN
  RoundingMode HALF_UP
  RoundingMode UNNECESSARY
  RoundingMode UP
  RoundingMode valueOf(String)
  RoundingMode[] values()
}
```

----------------------------------------

TITLE: Configuring Look Back Time in Elasticsearch
DESCRIPTION: Setting to define the interval for calculating the start_time of a TSDS's first backing index. Accepts values between 1m and 7d.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/time-series.md#2025-04-21_snippet_4

LANGUAGE: yaml
CODE:
```
index.look_back_time: 2h
```

----------------------------------------

TITLE: Updating Elasticsearch Index Priority Using Update Index Settings API
DESCRIPTION: This snippet demonstrates how to update the priority of an existing Elasticsearch index using the Update Index Settings API. It shows changing the index.priority setting for index_4 to 1.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/recovery-prioritization.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT index_4/_settings
{
  "index.priority": 1
}
```

----------------------------------------

TITLE: Uploading Extension File with HTTP PUT
DESCRIPTION: Uploads the actual extension file using PUT request with the extension ID obtained from metadata creation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-custom-bundles.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
curl -XPUT \
-H "Authorization: ApiKey $EC_API_KEY" \
"https://api.elastic-cloud.com/api/v1/deployments/extensions/$extension_id" \
-T /tmp/synonyms.zip
```

----------------------------------------

TITLE: SSH Configuration for Azure VMs
DESCRIPTION: SSH configuration for connecting to Azure VMs, including a direct command example and a configuration snippet for the ~/.ssh/config file to simplify connections.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-azure-classic-long.md#2025-04-21_snippet_8

LANGUAGE: text
CODE:
```
Host *.cloudapp.net
 User elasticsearch
 StrictHostKeyChecking no
 UserKnownHostsFile=/dev/null
 IdentityFile ~/.ssh/azure-private.key
```

----------------------------------------

TITLE: Enforcing System Properties Immutability
DESCRIPTION: Requires treating system properties as immutable, preventing direct modification and providing a read-only view alternative.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/build-tools-internal/src/main/resources/forbidden/jdk-signatures.txt#2025-04-21_snippet_15

LANGUAGE: plaintext
CODE:
```
@defaultMessage Treat system properties as immutable
java.lang.System#setProperties(java.util.Properties)
java.lang.System#setProperty(java.lang.String,java.lang.String)
java.lang.System#clearProperty(java.lang.String)
java.lang.System#getProperties() @ Use BootstrapInfo.getSystemProperties for a read-only view
```

----------------------------------------

TITLE: Checking Failed Reindex Data Stream Status (Console Result)
DESCRIPTION: Displays the status of a data stream reindex task that encountered an error. It shows `complete: false` and includes details about the failure in the `errors` array, such as which index caused the problem and the error message.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reindex-data-stream.md#_snippet_11

LANGUAGE: console-result
CODE:
```
{
  "start_time_millis": 1737676174349,
  "complete": false,
  "total_indices_in_data_stream": 4,
  "total_indices_requiring_upgrade": 3,
  "successes": 1,
  "in_progress": [],
  "pending": 1,
  "errors": [
    {
      "index": ".ds-my-data-stream-2025.01.23-000002",
      "message": "index [.ds-my-data-stream-2025.01.23-000002] does not exist"
    }
  ]
}
```

----------------------------------------

TITLE: Conversion and System Functions in Elasticsearch SQL
DESCRIPTION: A set of functions for type conversion and system information retrieval in Elasticsearch SQL. These functions allow for data type conversions and access to database and user information.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/qa/server/single-node/src/javaRestTest/resources/org/elasticsearch/xpack/sql/qa/single_node/ConsistentFunctionArgHandlingIT-non-tested-functions.txt#2025-04-21_snippet_2

LANGUAGE: SQL
CODE:
```
CAST
CONVERT
DATABASE
USER
```

----------------------------------------

TITLE: Result of Registered Domain Processor Simulation in Elasticsearch
DESCRIPTION: This snippet shows the output of the registered domain processor simulation. It displays the extracted domain components including subdomain, registered domain, top-level domain, and full domain.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/registered-domain-processor.md#2025-04-21_snippet_1

LANGUAGE: console-result
CODE:
```
{
  "docs": [
    {
      "doc": {
        ...
        "_source": {
          "fqdn": "www.example.ac.uk",
          "url": {
            "subdomain": "www",
            "registered_domain": "example.ac.uk",
            "top_level_domain": "ac.uk",
            "domain": "www.example.ac.uk"
          }
        }
      }
    }
  ]
}
```

----------------------------------------

TITLE: Min Bucket Aggregation Response Example
DESCRIPTION: Shows the response format for a min_bucket aggregation including the bucket data and minimum value result.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-min-bucket-aggregation.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
   "took": 11,
   "timed_out": false,
   "_shards": ...,
   "hits": ...,
   "aggregations": {
      "sales_per_month": {
         "buckets": [
            {
               "key_as_string": "2015/01/01 00:00:00",
               "key": 1420070400000,
               "doc_count": 3,
               "sales": {
                  "value": 550.0
               }
            },
            {
               "key_as_string": "2015/02/01 00:00:00",
               "key": 1422748800000,
               "doc_count": 2,
               "sales": {
                  "value": 60.0
               }
            },
            {
               "key_as_string": "2015/03/01 00:00:00",
               "key": 1425168000000,
               "doc_count": 2,
               "sales": {
                  "value": 375.0
               }
            }
         ]
      },
      "min_monthly_sales": {
          "keys": ["2015/02/01 00:00:00"],
          "value": 60.0
      }
   }
}
```

----------------------------------------

TITLE: Verifying Elasticsearch Index Version (Console)
DESCRIPTION: Uses the Get Index API to retrieve settings for a specific migrated index (`.migrated-ds-my-data-stream-2025.01.23-000001`). It filters the output to show only the `version.created_string` to confirm the Elasticsearch version it was created with.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reindex-data-stream.md#_snippet_9

LANGUAGE: console
CODE:
```
GET .migrated-ds-my-data-stream-2025.01.23-000001?human&filter_path=*.settings.index.version.created_string

```

----------------------------------------

TITLE: Converting Strings to IP Values with TO_IP in ESQL
DESCRIPTION: This snippet demonstrates the usage of the TO_IP function in ESQL to convert string representations of IP addresses to IP values. It also shows how to use the converted IP value in a CIDR_MATCH function for IP range checking.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/to_ip.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW str1 = "1.1.1.1", str2 = "foo"
| EVAL ip1 = TO_IP(str1), ip2 = TO_IP(str2)
| WHERE CIDR_MATCH(ip1, "1.0.0.0/8")
```

----------------------------------------

TITLE: Configuring GraphQL Variables in JSON
DESCRIPTION: This JSON object example shows how to define variables for a GraphQL query, which can be used in the connector's configuration to substitute values in the query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-graphql.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
{"id": "123"}
```

----------------------------------------

TITLE: Required GCE Instance Permissions
DESCRIPTION: Specifies the minimum required permissions scope (compute-rw) for GCE instances to work properly with Elasticsearch discovery plugin.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-long.md#2025-04-21_snippet_5

LANGUAGE: text
CODE:
```
scopes=compute-rw
```

----------------------------------------

TITLE: Head Pipe Syntax in EQL
DESCRIPTION: Defines the syntax for the 'head' pipe in EQL. The <max> parameter specifies the maximum number of matching events or sequences to return.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-pipe-ref.md#2025-04-21_snippet_1

LANGUAGE: txt
CODE:
```
head <max>
```

----------------------------------------

TITLE: Configuring Self-Generated License Type in Elasticsearch YAML
DESCRIPTION: Configuration setting that determines the type of self-generated license for Elasticsearch. Can be set to 'basic' for default X-Pack features or 'trial' for full feature access for 30 days.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/license-settings.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
xpack.license.self_generated.type: basic
```

----------------------------------------

TITLE: Computing Arccosine in ESQL
DESCRIPTION: Demonstrates calculating the arccosine of a value using ESQL's ACOS function. Takes a value (0.9 in this example) and returns its arccosine in radians. The result is stored in a variable named 'acos'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/acos.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=.9
| EVAL acos=ACOS(a)
```

----------------------------------------

TITLE: Setting Remote Cluster Port in Elasticsearch YAML
DESCRIPTION: Specifies the port for remote cluster client communication. Accepts a single value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/networking-settings.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
remote_cluster.port: 9443
```

----------------------------------------

TITLE: Implementing Custom fromXContent Parsing with Version Compatibility
DESCRIPTION: Advanced example of custom parsing logic in the fromXContent method that handles version compatibility. Demonstrates checking field names against a ParseField and conditionally processing based on the REST API version.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/REST_API_COMPATIBILITY.md#2025-04-21_snippet_5

LANGUAGE: java
CODE:
```
private static final ParseField limitField = new ParseField("maximum", "limit").forRestApiVersion(RestApiVersion.equalTo(RestApiVersion.V_7));

//call to fromXContent
MyExample.fromXContent(XContentType.JSON.xContent().createParser(XContentParserConfiguration.EMPTY.withDeprecationHandler(LoggingDeprecationHandler.INSTANCE).withRestApiVersion(request.getRestApiVersion()), " { \"limit\" : 99 }"));

//contents of a fromXContent
while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
        currentFieldName = parser.currentName();
    } else if (token.isValue()) {
        if (limitField.match(currentFieldName, LoggingDeprecationHandler.INSTANCE)) {
            if (parser.getRestApiVersion().matches(RestApiVersion.onOrAfter(RestApiVersion.V_8))
                && "maximum".equals(currentFieldName) == false) {
                throw new IllegalArgumentException("invalid parameter [limit], use [maximum] instead");
            } else {
                value = parser.intValue();
            }
        }
    }
}
```

----------------------------------------

TITLE: Syntax for DAY_NAME Function in Elasticsearch SQL
DESCRIPTION: Defines the syntax for the DAY_NAME function (also aliased as DAYNAME). It takes a date or datetime expression and extracts the name of the day of the week. Returns null if the input is null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_62

LANGUAGE: SQL
CODE:
```
DAY_NAME(datetime_exp) <1>
```

----------------------------------------

TITLE: Tail Pipe Syntax in EQL
DESCRIPTION: Defines the syntax for the 'tail' pipe in EQL. The <max> parameter specifies the maximum number of matching events or sequences to return.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-pipe-ref.md#2025-04-21_snippet_3

LANGUAGE: txt
CODE:
```
tail <max>
```

----------------------------------------

TITLE: Setting ILM Preference
DESCRIPTION: Dynamic index-level setting to determine whether ILM or data stream lifecycle manages the backing index. Defaults to true.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/data-stream-lifecycle-settings.md#2025-04-21_snippet_7

LANGUAGE: yaml
CODE:
```
index.lifecycle.prefer_ilm: true
```

----------------------------------------

TITLE: Configuring Network Interface in Elasticsearch YAML
DESCRIPTION: Uses the addresses of a specific network interface. This example uses the addresses of an interface called 'en0'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/networking-settings.md#2025-04-21_snippet_4

LANGUAGE: yaml
CODE:
```
network.host: "_en0_"
```

----------------------------------------

TITLE: Configure Regex Circuit Breaker Settings
DESCRIPTION: Settings to control and limit regex usage in Painless scripts. Includes regex enablement options and complexity limit factor.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/circuit-breaker-settings.md#2025-04-21_snippet_5

LANGUAGE: yaml
CODE:
```
script.painless.regex.enabled: "limited"
script.painless.regex.limit-factor: 6
```

----------------------------------------

TITLE: Array Length Access in Painless
DESCRIPTION: Demonstrates how to access the read-only length field of an array using the field access operator.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-array.md#2025-04-21_snippet_2

LANGUAGE: painless
CODE:
```
int[] x = new int[10];
int l = x.length;
```

----------------------------------------

TITLE: Basic Pattern Capture Example - Regular Expression Pattern
DESCRIPTION: Demonstrates a simple regular expression pattern that captures letter and number groups
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pattern-capture-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
"(([a-z]+)(\d*))"
```

----------------------------------------

TITLE: Non-Keyed Response Query
DESCRIPTION: Query that returns percentiles as an array instead of a hash by setting keyed to false.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-percentile-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
GET latency/_search
{
  "size": 0,
  "aggs": {
    "load_time_outlier": {
      "percentiles": {
        "field": "load_time",
        "keyed": false
      }
    }
  }
}
```

----------------------------------------

TITLE: User Agent Processor Response Example
DESCRIPTION: Example response showing the processed user agent information including browser name, version, operating system details, and device information.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/user-agent-processor.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
{
  "found": true,
  "_index": "my-index-000001",
  "_id": "my_id",
  "_version": 1,
  "_seq_no": 22,
  "_primary_term": 1,
  "_source": {
    "agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36",
    "user_agent": {
      "name": "Chrome",
      "original": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36",
      "version": "51.0.2704.103",
      "os": {
        "name": "Mac OS X",
        "version": "10.10.5",
        "full": "Mac OS X 10.10.5"
      },
      "device" : {
        "name" : "Mac"
      }
    }
  }
}
```

----------------------------------------

TITLE: Opening Elasticsearch Logging Configuration
DESCRIPTION: Opens the Elasticsearch logging configuration file to modify log levels for enhanced troubleshooting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-long.md#2025-04-21_snippet_11

LANGUAGE: sh
CODE:
```
sudo vi /etc/elasticsearch/log4j2.properties
```

----------------------------------------

TITLE: Non-Keyed Percentile Ranks Response in Elasticsearch
DESCRIPTION: Shows how to configure the percentile ranks aggregation to return results as an array instead of a hash by setting keyed to false.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-percentile-rank-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
GET latency/_search
{
  "size": 0,
  "aggs": {
    "load_time_ranks": {
      "percentile_ranks": {
        "field": "load_time",
        "values": [ 500, 600 ],
        "keyed": false
      }
    }
  }
}
```

----------------------------------------

TITLE: Inserting Histogram Data in Elasticsearch
DESCRIPTION: These snippets insert two documents with histogram data into the metrics index, representing latency metrics for different networks.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-sum-aggregation.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
PUT metrics_index/_doc/1?refresh
{
  "network.name" : "net-1",
  "latency_histo" : {
      "values" : [0.1, 0.2, 0.3, 0.4, 0.5],
      "counts" : [3, 7, 23, 12, 6]
   }
}

PUT metrics_index/_doc/2?refresh
{
  "network.name" : "net-2",
  "latency_histo" : {
      "values" :  [0.1, 0.2, 0.3, 0.4, 0.5],
      "counts" : [8, 17, 8, 7, 6]
   }
}
```

----------------------------------------

TITLE: Scripted Metric Aggregation Response in Elasticsearch
DESCRIPTION: This snippet shows the response format for a scripted metric aggregation, including the computed profit value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-scripted-metric-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console-result
CODE:
```
{
  "took": 218,
  ...
  "aggregations": {
    "profit": {
      "value": 240.0
    }
  }
}
```

----------------------------------------

TITLE: Logging invalidate_apikeys Event in Elasticsearch
DESCRIPTION: Example of an audit log for the invalidate API key event. This event is logged when the API is invoked to invalidate one or more API keys in the system.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
{"type":"audit", "timestamp":"2020-12-31T00:36:30,247+0200", "node.id":
"9clhpgjJRR-iKzOw20xBNQ", "event.type":"security_config_change", "event.
action":"invalidate_apikeys", "request.id":"7lyIQU9QTFqSrTxD0CqnTQ",
"invalidate":{"apikeys":{"owned_by_authenticated_user":false,
"user":{"name":"myuser","realm":"native1"}}}}
```

----------------------------------------

TITLE: Installing Elasticsearch Analysis Nori Plugin sh
DESCRIPTION: Installs the analysis-nori plugin for Elasticsearch using the plugin manager. This command must be run on every node in the cluster and requires a node restart after installation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-nori.md#_snippet_0

LANGUAGE: sh
CODE:
```
sudo bin/elasticsearch-plugin install analysis-nori
```

----------------------------------------

TITLE: Indexing Database Rows based on Checkbox - JSON Snippet - JavaScript
DESCRIPTION: This JSON snippet filters and indexes rows of a specific database where the 'Task completed' property is a checkbox that evaluates to true. This is key for dynamic content synchronization based on task status.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-notion.md#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
{
  "database_query_filters": [
    {
      "filter": {
          "property": "Task completed",
          "checkbox": {
            "equals": true
          }
      },
      "database_id": "database_id"
    }
  ]
}
```

----------------------------------------

TITLE: Subtraction with the Def Type in Painless
DESCRIPTION: This snippet illustrates how to perform subtraction with the def type in Painless, with implicit casting from integer to def when performing arithmetic operations. It includes error considerations and showcases type promotion rules.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_23

LANGUAGE: painless
CODE:
```
def x = 5-4; <1>
def y = x-2; <2>
```

----------------------------------------

TITLE: Bulk Inserting Data into threat_list Index - Console
DESCRIPTION: Adds sample threat intelligence data to the `threat_list` index using the Elasticsearch bulk API. Includes records with specific `source.ip`, `threat_level`, `threat_type`, and `last_updated` values to be used for lookups. Requires the `threat_list` index to exist.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-lookup-join.md#_snippet_2

LANGUAGE: console
CODE:
```
POST threat_list/_bulk
{"index":{}}
{"source.ip":"203.0.113.5","threat_level":"high","threat_type":"C2_SERVER","last_updated":"2025-04-22"}
{"index":{}}
{"source.ip":"198.51.100.2","threat_level":"medium","threat_type":"SCANNER","last_updated":"2025-04-23"}
```

----------------------------------------

TITLE: Result Document after Nested Object Processing
DESCRIPTION: The resulting document after the Foreach processor has uppercase the display_name field in each nested object.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/foreach-processor.md#2025-04-21_snippet_8

LANGUAGE: js
CODE:
```
{
  "products" : {
    "widgets" : {
      "total_sales" : 50,
      "unit_price" : 1.99,
      "display_name" : ""
    },
    "sprockets" : {
      "total_sales" : 100,
      "unit_price" : 9.99,
      "display_name" : "SUPER SPROCKETS"
    },
    "whizbangs" : {
      "total_sales" : 200,
      "unit_price" : 19.99,
      "display_name" : "WONDERFUL WHIZBANGS"
    }
  }
}
```

----------------------------------------

TITLE: Setting Max Concurrent Requests for Enrich Coordinator Proxy in Elasticsearch YAML
DESCRIPTION: Configures the maximum number of concurrent multi-search requests for document enrichment. The default value is 8.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/enrich-settings.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
enrich.coordinator_proxy.max_concurrent_requests: 8
```

----------------------------------------

TITLE: Defining TAU Function in ESQL for Elasticsearch
DESCRIPTION: This snippet defines the TAU function in ESQL, which returns the mathematical constant tau (τ), equivalent to 2π. It represents the ratio of a circle's circumference to its radius. The function takes no parameters and returns a single row containing the tau value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/tau.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW TAU()
```

----------------------------------------

TITLE: Output Document After Merging Conflicts
DESCRIPTION: Shows how the dot expander handles conflicts by default, merging the values into an array.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/dot-expand-processor.md#2025-04-21_snippet_4

LANGUAGE: js
CODE:
```
{
  "foo" : {
    "bar" : ["value1", "value2"]
  }
}
```

----------------------------------------

TITLE: Silent Mode Execution - Shell
DESCRIPTION: Example command showing how to run elasticsearch-certgen in silent mode using a YAML configuration file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/certgen.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
bin/elasticsearch-certgen -in instances.yml
```

----------------------------------------

TITLE: Monitoring Request Cache Usage by Node in Elasticsearch
DESCRIPTION: This command retrieves request cache statistics for all nodes using the nodes stats API. It specifically requests indices/request_cache metrics with human-readable formatting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/shard-request-cache.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET /_nodes/stats/indices/request_cache?human
```

----------------------------------------

TITLE: Executing elasticsearch-saml-metadata Command in Shell
DESCRIPTION: This snippet shows the synopsis for running the elasticsearch-saml-metadata command with various options to generate a SAML 2.0 Service Provider Metadata file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/saml-metadata.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
bin/elasticsearch-saml-metadata
[--realm <name>]
[--out <file_path>] [--batch]
[--attribute <name>] [--service-name <name>]
[--locale <name>] [--contacts]
([--organisation-name <name>] [--organisation-display-name <name>] [--organisation-url <url>])
([--signing-bundle <file_path>] | [--signing-cert <file_path>][--signing-key <file_path>])
[--signing-key-password <password>]
[-E <KeyValuePair>]
[-h, --help] ([-s, --silent] | [-v, --verbose])
```

----------------------------------------

TITLE: Example files Entitlement (YAML)
DESCRIPTION: This snippet illustrates how to grant the `files` entitlement in the `entitlement-policy.yaml` file, allowing a plugin module access to the filesystem. Access can be granted for absolute paths, relative paths anchored to Elasticsearch directories (`config`, `data`) or the user home (`home`), or paths defined by Elasticsearch settings, specifying `read` or `read_write` mode.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/extend/creating-classic-plugins.md#_snippet_8

LANGUAGE: YAML
CODE:
```
org.example.module: # or 'ALL-UNNAMED' if the plugin is non-modular
  - files:
    - path: "/absolute/path"
      mode: read
    - relative_path: "relative/file.txt"
      relative_to: data
      mode: read_write
    - path_setting: setting.name
      basedir_if_relative: data
      mode: read
```

----------------------------------------

TITLE: Output of Lowercase Tokenizer Processing in Elasticsearch
DESCRIPTION: Shows the resulting tokens after the lowercase tokenizer processes the input text. All terms are lowercased and separated at non-letter boundaries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-lowercase-tokenizer.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
[ the, quick, brown, foxes, jumped, over, the, lazy, dog, s, bone ]
```

----------------------------------------

TITLE: Removing Index Settings
DESCRIPTION: Shows how to remove problematic index settings that might prevent cluster formation. Includes examples of removing specific settings and using wildcards.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/node-tool.md#2025-04-21_snippet_6

LANGUAGE: txt
CODE:
```
node$ ./bin/elasticsearch-node remove-index-settings index.my_plugin.foo

    WARNING: Elasticsearch MUST be stopped before running this tool.

You should only run this tool if you have incompatible index settings in the
cluster state that prevent the cluster from forming.
This tool can cause data loss and its use should be your last resort.

Do you want to proceed?

Confirm [y/N] y

Index settings were successfully removed from the cluster state
```

LANGUAGE: txt
CODE:
```
node$ ./bin/elasticsearch-node remove-index-settings index.my_plugin.*
```

----------------------------------------

TITLE: Installing Azure Command-Line Tools
DESCRIPTION: Command to install the Azure Command-Line Interface (CLI) using npm, which allows for managing Azure resources from the command line.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-azure-classic-long.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
sudo npm install azure-cli -g
```

----------------------------------------

TITLE: Kuromoji Analysis Response Example
DESCRIPTION: Example response showing tokenization results from the kuromoji analyzer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-tokenizer.md#2025-04-21_snippet_7

LANGUAGE: console-result
CODE:
```
{
  "tokens" : [ {
    "token" : "東京",
    "start_offset" : 0,
    "end_offset" : 2,
    "type" : "word",
    "position" : 0
  }, {
    "token" : "スカイツリー",
    "start_offset" : 2,
    "end_offset" : 8,
    "type" : "word",
    "position" : 1
  } ]
}
```

----------------------------------------

TITLE: Literal Asterisk Interpretation in Elasticsearch EQL
DESCRIPTION: Demonstrates that == and != operators do not expand wildcard characters in Elasticsearch EQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_31

LANGUAGE: eql
CODE:
```
process_name == "cmd*.exe"
```

----------------------------------------

TITLE: Profiled Method References in Elasticsearch
DESCRIPTION: References to low-level Lucene methods that are instrumented during profiling operations. These methods (collect, advance, and next_doc) are called in tight loops and their instrumentation adds overhead.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-profile.md#2025-04-21_snippet_18

LANGUAGE: text
CODE:
```
collect, advance, next_doc
```

----------------------------------------

TITLE: Input Document Example for JSON Processor without Target Field
DESCRIPTION: Example of an input document for processing with the JSON processor when no target field is specified. The source_and_target field contains a serialized JSON string.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/json-processor.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
{
  "source_and_target": "{\"foo\": 2000}"
}
```

----------------------------------------

TITLE: Input Document for Nested Path Expansion
DESCRIPTION: Shows an example document with dotted fields nested within a non-dotted structure before processing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/dot-expand-processor.md#2025-04-21_snippet_11

LANGUAGE: js
CODE:
```
{
  "foo" : {
    "bar.one" : "value",
    "bar.two" : "value"
  }
}
```

----------------------------------------

TITLE: Creating Index for Terms Lookup Example
DESCRIPTION: Demonstrates creating an Elasticsearch index with a keyword field for terms lookup demonstration
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-terms-query.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "color": { "type": "keyword" }
    }
  }
}
```

----------------------------------------

TITLE: Equivalent Dis Max Query for Phrase Prefix Type in Elasticsearch
DESCRIPTION: Shows the equivalent dis_max query structure generated internally by Elasticsearch for the 'phrase_prefix' multi-match type. It wraps individual match_phrase_prefix queries for each field within a dis_max query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-multi-match-query.md#_snippet_9

LANGUAGE: json
CODE:
```
GET /_search
{
  "query": {
    "dis_max": {
      "queries": [
        { "match_phrase_prefix": { "subject": "quick brown f" }},
        { "match_phrase_prefix": { "message": "quick brown f" }}
      ]
    }
  }
}
```

----------------------------------------

TITLE: Map Access with Def Type in Painless
DESCRIPTION: Demonstrates the usage of map access with a def type in Painless, showcasing how dynamic typing can handle various data types. Includes correct usage of the operator for setting and getting values. Make sure an appropriate def instance is initialized to avoid errors.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-reference.md#2025-04-21_snippet_16

LANGUAGE: painless
CODE:
```
def d = new HashMap();
d['value2'] = 2;
d['value5'] = 5;
int x = d['value2'] + d['value5'];
String y = 'value5';
def z = d[y];
```

----------------------------------------

TITLE: Syntax for SECOND_OF_MINUTE Function in Elasticsearch SQL
DESCRIPTION: Defines the syntax for the SECOND_OF_MINUTE function (also aliased as SECOND). It takes a date or datetime expression and extracts the second component within the minute. Returns null if the input is null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_81

LANGUAGE: SQL
CODE:
```
SECOND_OF_MINUTE(datetime_exp) <1>
```

----------------------------------------

TITLE: Using Pre-Increment Operator with 'def' Type in Painless
DESCRIPTION: This example demonstrates how the pre-increment operator '++' works with the 'def' type in Painless, including implicit casting and type handling.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_5

LANGUAGE: painless
CODE:
```
def x = 1;
++x;
```

----------------------------------------

TITLE: Illustrating Identity Equals with Null Values in Painless
DESCRIPTION: Demonstrates the behavior of the identity equals operator when comparing null values and objects in Painless.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_24

LANGUAGE: painless
CODE:
```
Object a = null;        
Object b = null;        
boolean c = a === null; 
c = a === b;            
b = new Object();       
c = a === b;            
```

----------------------------------------

TITLE: Painless Script for Flattened Fields
DESCRIPTION: Example of a Painless script accessing values from flattened field sub-fields using dot notation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/flattened.md#2025-04-21_snippet_4

LANGUAGE: painless
CODE:
```
"script": {
  "source": """
    if (doc['labels.release'].value.equals('v1.3.0'))
    {emit(doc['labels.release'].value)}
    else{emit('Version mismatch')}
  """
```

----------------------------------------

TITLE: SELECT Expression Without Alias
DESCRIPTION: Example of a SELECT statement without an alias, where Elasticsearch SQL assigns a default name to the output column.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
SELECT 1 + 1;
```

----------------------------------------

TITLE: Defining MonthDay Class
DESCRIPTION: This code snippet defines the `java.time.MonthDay` class. The class represents the combination of a month and day-of-month, such as --12-24. This code lists the methods for working with just the Month and Day. Includes methods for formatting, parsing, comparing and adjusting the date.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.time.txt#2025-04-21_snippet_8

LANGUAGE: Java
CODE:
```
"class java.time.MonthDay {\n  LocalDate atYear(int)\n  int compareTo(MonthDay)\n  String format(DateTimeFormatter)\n  MonthDay from(TemporalAccessor)\n  int getMonthValue()\n  Month getMonth()\n  int getDayOfMonth()\n  boolean isAfter(MonthDay)\n  boolean isBefore(MonthDay)\n  boolean isValidYear(int)\n  MonthDay of(int,int)\n  MonthDay parse(CharSequence)\n  MonthDay parse(CharSequence,DateTimeFormatter)\n  MonthDay with(Month)\n  MonthDay withDayOfMonth(int)\n  MonthDay withMonth(int)\n}"
```

----------------------------------------

TITLE: Defining TextStyle Enum in Java
DESCRIPTION: The TextStyle enum represents styles for text formatting, including FULL, SHORT, and different standalone options. This allows date-time components to be displayed in various textual formats and supports both normal and standalone styles.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.time.format.txt#2025-04-21_snippet_6

LANGUAGE: java
CODE:
```
class java.time.format.TextStyle {
  TextStyle FULL
  TextStyle FULL_STANDALONE
  TextStyle NARROW
  TextStyle NARROW_STANDALONE
  TextStyle SHORT
  TextStyle SHORT_STANDALONE
  TextStyle asNormal()
  TextStyle asStandalone()
  boolean isStandalone()
  TextStyle valueOf(String)
  TextStyle[] values()
}
```

----------------------------------------

TITLE: Hunspell Analysis Results
DESCRIPTION: Shows the token output from the Hunspell filter analysis
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-hunspell-tokenfilter.md#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
[ the, fox, jump, quick ]
```

----------------------------------------

TITLE: Exploring Identity Equals with Def Type in Painless
DESCRIPTION: Shows how the identity equals operator behaves with the def type in Painless, including comparisons between different object types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_25

LANGUAGE: painless
CODE:
```
def a = new HashMap();   
def b = new ArrayList(); 
boolean c = a === b;     
b = a;                   
c = a === b;             
```

----------------------------------------

TITLE: Anonymous Access Denied Event Logging in Elasticsearch
DESCRIPTION: JSON structure for logging access attempts that are denied due to missing authentication credentials.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
{"type":"audit", "timestamp":"2020-12-30T21:56:43,608+0200", "node.id":"0RMNyghkQYCc_gVd1G6tZQ", "event.type":"rest", "event.action":"anonymous_access_denied", "origin.type":"rest", "origin.address":"[::1]:50543", "url.path":"/twitter/_async_search", "url.query":"pretty", "request.method":"POST", "request.id":"TqA9OisyQ8WTl1ivJUV1AA"}
```

----------------------------------------

TITLE: Output Document After JSON Processing with Target Field
DESCRIPTION: Example of the document after the JSON processor has parsed the string_source field. The original field is preserved, and the parsed JSON structure is stored in json_target.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/json-processor.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
{
  "string_source": "{\"foo\": 2000}",
  "json_target": {
    "foo": 2000
  }
}
```

----------------------------------------

TITLE: Importing ScoreScriptUtils Functions for Scoring Operations in Java
DESCRIPTION: This snippet demonstrates a static import statement that imports various scoring functions from the ScoreScriptUtils class. This enables the use of decay functions, saturation, normalization, and various similarity calculations directly within scoring scripts, enhancing their capabilities and flexibility.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.score.txt#2025-04-21_snippet_3

LANGUAGE: Java
CODE:
```
static_import {
    double saturation(double, double) from_class org.elasticsearch.script.ScoreScriptUtils
    double sigmoid(double, double, double) from_class org.elasticsearch.script.ScoreScriptUtils
    double randomScore(org.elasticsearch.script.ScoreScript, int, String) bound_to org.elasticsearch.script.ScoreScriptUtils$RandomScoreField
    double randomScore(org.elasticsearch.script.ScoreScript, int) bound_to org.elasticsearch.script.ScoreScriptUtils$RandomScoreDoc
    double decayGeoLinear(String, String, String, double, GeoPoint) bound_to org.elasticsearch.script.ScoreScriptUtils$DecayGeoLinear
    double decayGeoExp(String, String, String, double, GeoPoint) bound_to org.elasticsearch.script.ScoreScriptUtils$DecayGeoExp
    double decayGeoGauss(String, String, String, double, GeoPoint) bound_to org.elasticsearch.script.ScoreScriptUtils$DecayGeoGauss
    double decayNumericLinear(double, double, double, double, double)bound_to org.elasticsearch.script.ScoreScriptUtils$DecayNumericLinear
    double decayNumericExp(double, double, double, double, double) bound_to org.elasticsearch.script.ScoreScriptUtils$DecayNumericExp
    double decayNumericGauss(double, double, double, double, double) bound_to org.elasticsearch.script.ScoreScriptUtils$DecayNumericGauss
    double decayDateLinear(String, String, String, double, ZonedDateTime) bound_to org.elasticsearch.script.ScoreScriptUtils$DecayDateLinear
    double decayDateExp(String, String, String, double, ZonedDateTime) bound_to org.elasticsearch.script.ScoreScriptUtils$DecayDateExp
    double decayDateGauss(String, String, String, double, ZonedDateTime) bound_to org.elasticsearch.script.ScoreScriptUtils$DecayDateGauss
    double l1norm(org.elasticsearch.script.ScoreScript, Object, String) bound_to org.elasticsearch.script.VectorScoreScriptUtils$L1Norm
    double l2norm(org.elasticsearch.script.ScoreScript, Object, String) bound_to org.elasticsearch.script.VectorScoreScriptUtils$L2Norm
    double cosineSimilarity(org.elasticsearch.script.ScoreScript, Object, String) bound_to org.elasticsearch.script.VectorScoreScriptUtils$CosineSimilarity
    double dotProduct(org.elasticsearch.script.ScoreScript, Object, String) bound_to org.elasticsearch.script.VectorScoreScriptUtils$DotProduct
    double hamming(org.elasticsearch.script.ScoreScript, Object, String) bound_to org.elasticsearch.script.VectorScoreScriptUtils$Hamming
}
```

----------------------------------------

TITLE: Downloading sample configuration file using curl
DESCRIPTION: This command downloads the sample configuration file for the Elastic Connectors framework from GitHub using `curl`. The downloaded file can then be modified to configure the OneDrive connector.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-onedrive.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
curl https://raw.githubusercontent.com/elastic/connectors/main/config.yml.example --output ~/connectors-config/config.yml
```

----------------------------------------

TITLE: Extracting with Right Padding on Empty Key in DISSECT ESQL
DESCRIPTION: Shows how to use the `->` modifier on an empty `%{}` key to skip unwanted characters (variable spaces and surrounding brackets) after matching a field (`ts`) before moving on to the next field (`level`).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-process-data-with-dissect-grok.md#_snippet_3

LANGUAGE: ESQL
CODE:
```
ROW message="[1998-08-10T17:15:42]          [WARN]"
| DISSECT message """[%{ts}]%{->}[%{level}]"""
```

----------------------------------------

TITLE: HTTP Compression Settings in Elasticsearch
DESCRIPTION: Configuration for HTTP compression including compression level settings. Default is disabled for HTTPS traffic unless explicitly enabled.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/networking-settings.md#2025-04-21_snippet_8

LANGUAGE: yaml
CODE:
```
http.compression: true
http.compression_level: 3
```

----------------------------------------

TITLE: Computing Arctangent using ATAN in ESQL
DESCRIPTION: Demonstrates how to calculate the arctangent of a numeric value using the ATAN function. The function takes a numeric input and returns the angle in radians. In this example, it calculates the arctangent of 12.9.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/atan.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=12.9
| EVAL atan=ATAN(a)
```

----------------------------------------

TITLE: ESQL Numeric Type Combinations Table
DESCRIPTION: A markdown table showing all possible combinations of numeric types (double, integer, long, unsigned_long) and their resulting output types in ESQL operations. All numeric type combinations result in a double type output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/types/hypot.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| number1 | number2 | result |
| --- | --- | --- |
| double | double | double |
| double | integer | double |
| double | long | double |
| double | unsigned_long | double |
| integer | double | double |
| integer | integer | double |
| integer | long | double |
| integer | unsigned_long | double |
| long | double | double |
| long | integer | double |
| long | long | double |
| long | unsigned_long | double |
| unsigned_long | double | double |
| unsigned_long | integer | double |
| unsigned_long | long | double |
| unsigned_long | unsigned_long | double |
```

----------------------------------------

TITLE: Advanced Sync Rules for Redis Connector - Fetching Keys with Pattern
DESCRIPTION: JSON configuration for advanced sync rules to fetch Redis database records where keys start with 'test1', 'test2', or 'test3'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-redis.md#2025-04-21_snippet_5

LANGUAGE: js
CODE:
```
[
  {
    "database": 0,
    "key_pattern": "test[123]"
  }
```

----------------------------------------

TITLE: Analyzing Japanese Text with Kuromoji Completion Filter
DESCRIPTION: Demonstrates how to use the kuromoji_completion analyzer to process Japanese text. The example shows analyzing the word '寿司' (sushi), which returns both the original token and its romanized forms in Kunrei-shiki (susi) and Hepburn-shiki (sushi) formats.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-completion.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET _analyze
{
  "analyzer": "kuromoji_completion",
  "text": "寿司"
}
```

----------------------------------------

TITLE: Supported Media Types for REST API Compatibility
DESCRIPTION: List of the four supported media types that can be used with the compatible-with parameter in both Accept and Content-Type headers for REST API compatibility.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/REST_API_COMPATIBILITY.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
"application/vnd.elasticsearch+json;compatible-with=7"
"application/vnd.elasticsearch+yaml;compatible-with=7"
"application/vnd.elasticsearch+smile;compatible-with=7"
"application/vnd.elasticsearch+cbor;compatible-with=7"
```

----------------------------------------

TITLE: Querying Elasticsearch Rank Evaluation API with Expected Reciprocal Rank Metric
DESCRIPTION: This snippet shows how to use the Elasticsearch Rank Evaluation API with the Expected Reciprocal Rank metric. It sets the maximum relevance to 3 and the k value to 20.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-rank-eval.md#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
GET /my-index-000001/_rank_eval
{
  "requests": [
    {
      "id": "JFK query",
      "request": { "query": { "match_all": {} } },
      "ratings": []
    } ],
  "metric": {
    "expected_reciprocal_rank": {
      "maximum_relevance": 3,
      "k": 20
    }
  }
}
```

----------------------------------------

TITLE: Sorting and Deduplication in Synthetic _source for Flattened Fields
DESCRIPTION: This example demonstrates how synthetic _source sorts and deduplicates values in a flattened field. It creates an index with synthetic _source enabled and inserts a document with duplicate and unsorted values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/flattened.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "flattened": { "type": "flattened" }
    }
  }
}
PUT idx/_doc/1
{
  "flattened": {
    "field": [ "apple", "apple", "banana", "avocado", "10", "200", "AVOCADO", "Banana", "Tangerine" ]
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  "flattened": {
    "field": [ "10", "200", "AVOCADO", "Banana", "Tangerine", "apple", "avocado", "banana" ]
  }
}
```

----------------------------------------

TITLE: Trimming Leading Whitespace with LTRIM in ESQL
DESCRIPTION: This ESQL query demonstrates the usage of the LTRIM function to remove leading whitespace from string values. It also shows how to concatenate strings to add single quotes around the trimmed values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/ltrim.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW message = "   some text  ",  color = " red "
| EVAL message = LTRIM(message)
| EVAL color = LTRIM(color)
| EVAL message = CONCAT("'", message, "'")
| EVAL color = CONCAT("'", color, "'")
```

----------------------------------------

TITLE: Decoding Base64 String Using FROM_BASE64 Function in ESQL
DESCRIPTION: This snippet shows how to use the FROM_BASE64 function in ESQL to decode a Base64 encoded string. It creates a row with a Base64 encoded value and then decodes it using the FROM_BASE64 function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/from_base64.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = "ZWxhc3RpYw=="
| EVAL d = FROM_BASE64(a)
```

----------------------------------------

TITLE: Converting String to IP Value in Elasticsearch SQL
DESCRIPTION: This SQL query demonstrates the conversion of a string input to an IP value using a custom function in Elasticsearch SQL. It tests the functionality of the IP conversion function with various input formats.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/to_ip.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
SELECT TO_IP('192.168.1.1')           AS ip1,
       TO_IP('::1')                   AS ip2,
       TO_IP('2001:db8:0:0:0:0:2:1')   AS ip3,
       TO_IP('2001:db8::2:1')         AS ip4,
       TO_IP('0.0.0.0')               AS ip5,
       TO_IP('::')
```

----------------------------------------

TITLE: Encoding files as base64 in Unix systems
DESCRIPTION: Command to encode a file as base64 on Unix-like systems, which is required when attaching files to JSON documents in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/attachment.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
base64 -in myfile.rtf
```

----------------------------------------

TITLE: Configuring Top-Level Mapping with Subobjects Disabled in Elasticsearch
DESCRIPTION: This example demonstrates how to disable subobjects for the entire mapping, making the document only able to hold leaf fields without any nested object structure. Field names with dots are preserved throughout the document.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/subobjects.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT my-index-000001
{
  "mappings": {
    "subobjects": false <1>
  }
}

PUT my-index-000001/_doc/metric_1
{
  "time" : "100ms", <2>
  "time.min" : "10ms",
  "time.max" : "900ms"
}
```

----------------------------------------

TITLE: SQL SHOW TABLES Syntax Definition
DESCRIPTION: Defines the complete syntax for the SHOW TABLES command including optional catalog filtering, frozen indices inclusion, and pattern matching capabilities.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-show-tables.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
SHOW TABLES
    [CATALOG [catalog_identifier | 
              LIKE pattern]]?
    [INCLUDE FROZEN]?
    [table_identifier |
     LIKE pattern]?
```

----------------------------------------

TITLE: Using Quoted and Unquoted Identifiers - SQL
DESCRIPTION: Illustrates the use of both an unquoted identifier (ip_address) and a double-quoted identifier ("hosts-*") in a SELECT query. Double quotes are used for identifiers that contain special characters or could conflict with keywords.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-lexical-structure.md#_snippet_2

LANGUAGE: sql
CODE:
```
SELECT ip_address FROM "hosts-*"
```

----------------------------------------

TITLE: HTTP Body Tracer Log Output Example
DESCRIPTION: Shows the format of compressed and encoded HTTP body trace logs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/networking-settings.md#2025-04-21_snippet_14

LANGUAGE: text
CODE:
```
[TRACE][o.e.h.HttpBodyTracer     ] [master] [276] response body [part 1]: H4sIAAAAAAAA/9...
[TRACE][o.e.h.HttpBodyTracer     ] [master] [276] response body [part 2]: 2oJ93QyYLWWhcD...
[TRACE][o.e.h.HttpBodyTracer     ] [master] [276] response body (gzip compressed, base64-encoded, and split into 2 parts on preceding log lines)
```

----------------------------------------

TITLE: Sample Network Flow Source Document (JSON)
DESCRIPTION: This JSON object represents a sample source document containing network flow information formatted according to Elastic Common Schema (ECS). It includes fields for source and destination IP addresses, ports, and the transport protocol, serving as input for the Community ID processor.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/community-id-processor.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "_source": {
    "source": {
      "ip": "123.124.125.126",
      "port": 12345
    },
    "destination": {
      "ip": "55.56.57.58",
      "port": 80
    },
    "network": {
      "transport": "TCP"
    }
  }
}
```

----------------------------------------

TITLE: ZonedDateTime Methods and Fields
DESCRIPTION: Lists the methods and fields available in the java.time.ZonedDateTime class, including Painless API augmentations. The focus is on how to create, parse, and manipulate date and time instances with time zone information, along with methods to convert, compare, and adjust ZonedDateTime objects.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.time.txt#2025-04-21_snippet_15

LANGUAGE: java
CODE:
```
"class java.time.ZonedDateTime {
  int getDayOfMonth()
  DayOfWeek getDayOfWeek()
  DayOfWeek org.elasticsearch.painless.api.Augmentation getDayOfWeekEnum()
  int org.elasticsearch.painless.api.Augmentation getCenturyOfEra()
  int org.elasticsearch.painless.api.Augmentation getEra()
  int org.elasticsearch.painless.api.Augmentation getHourOfDay()
  int org.elasticsearch.painless.api.Augmentation getMillisOfDay()
  int org.elasticsearch.painless.api.Augmentation getMillisOfSecond()
  int org.elasticsearch.painless.api.Augmentation getMinuteOfDay()
  int org.elasticsearch.painless.api.Augmentation getMinuteOfHour()
  int org.elasticsearch.painless.api.Augmentation getMonthOfYear()
  int org.elasticsearch.painless.api.Augmentation getSecondOfDay()
  int org.elasticsearch.painless.api.Augmentation getSecondOfMinute()
  int org.elasticsearch.painless.api.Augmentation getWeekOfWeekyear()
  int org.elasticsearch.painless.api.Augmentation getWeekyear()
  int org.elasticsearch.painless.api.Augmentation getYearOfCentury()
  int org.elasticsearch.painless.api.Augmentation getYearOfEra()
  int getDayOfYear()
  int getHour()
  LocalDate toLocalDate()
  LocalDateTime toLocalDateTime()
  int getMinute()
  Month getMonth()
  int getMonthValue()
  int getNano()
  int getSecond()
  int getYear()
  ZonedDateTime from(TemporalAccessor)
  ZonedDateTime minus(TemporalAmount)
  ZonedDateTime minus(long,TemporalUnit)
  ZonedDateTime minusYears(long)
  ZonedDateTime minusMonths(long)
  ZonedDateTime minusWeeks(long)
  ZonedDateTime minusDays(long)
  ZonedDateTime minusHours(long)
  ZonedDateTime minusMinutes(long)
  ZonedDateTime minusSeconds(long)
  ZonedDateTime minusNanos(long)
  ZonedDateTime of(LocalDate,LocalTime,ZoneId)
  ZonedDateTime of(LocalDateTime,ZoneId)
  ZonedDateTime of(int,int,int,int,int,int,int,ZoneId)
  ZonedDateTime ofInstant(Instant,ZoneId)
  ZonedDateTime ofInstant(LocalDateTime,ZoneOffset,ZoneId)
  ZonedDateTime ofLocal(LocalDateTime,ZoneId,ZoneOffset)
  ZonedDateTime ofStrict(LocalDateTime,ZoneOffset,ZoneId)
  ZonedDateTime parse(CharSequence)
  ZonedDateTime parse(CharSequence,DateTimeFormatter)
  ZonedDateTime plus(TemporalAmount)
  ZonedDateTime plus(long,TemporalUnit)
  ZonedDateTime plusDays(long)
  ZonedDateTime plusHours(long)
  ZonedDateTime plusMinutes(long)
  ZonedDateTime plusMonths(long)
  ZonedDateTime plusNanos(long)
  ZonedDateTime plusSeconds(long)
  ZonedDateTime plusWeeks(long)
  ZonedDateTime plusYears(long)
  OffsetDateTime toOffsetDateTime()
  ZonedDateTime truncatedTo(TemporalUnit)
  ZonedDateTime with(TemporalAdjuster)
  ZonedDateTime with(TemporalField,long)
  ZonedDateTime withDayOfMonth(int)
  ZonedDateTime withDayOfYear(int)
  ZonedDateTime withEarlierOffsetAtOverlap()
  ZonedDateTime withFixedOffsetZone()
  ZonedDateTime withHour(int)
  ZonedDateTime withLaterOffsetAtOverlap()
  ZonedDateTime withMinute(int)
  ZonedDateTime withMonth(int)
  ZonedDateTime withNano(int)
  ZonedDateTime withSecond(int)
  ZonedDateTime withYear(int)
  ZonedDateTime withZoneSameLocal(ZoneId)
  ZonedDateTime withZoneSameInstant(ZoneId)
}"
```

----------------------------------------

TITLE: Logging change_apikeys Event in Elasticsearch
DESCRIPTION: Example of an audit log for the bulk update API keys event. This event is logged when the API is invoked to update attributes of multiple existing API keys.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
{"type":"audit","timestamp":"2020-12-31T00:33:52,521+0200","node.id":
"9clhpgjJRR-iKzOw20xBNQ","event.type":"security_config_change",
"event.action":"change_apikeys","request.id":"9FteCmovTzWHVI-9Gpa_vQ",
"change":{"apikeys":
{"ids":["zcwN3YEBBmnjw-K-hW5_","j7c0WYIBqecB5CbVR6Oq"],"role_descriptors":
[{"cluster":["monitor","manage_ilm"],"indices":[{"names":["index-a*"],"privileges":
["read","maintenance"]},{"names":["in*","alias*"],"privileges":["read"],
"field_security":{"grant":["field1*","@timestamp"],"except":["field11"]}}],
"applications":[],"run_as":[]},{"cluster":["all"],"indices":[{"names":
["index-b*"],"privileges":["all"]}],"applications":[],"run_as":[]}],
"metadata":{"application":"my-application","environment":{"level":1,
"tags":["dev","staging"]}},"expiration":"10d"}}}
```

----------------------------------------

TITLE: Result of Configured Pattern Analyzer
DESCRIPTION: Shows the result of applying the pattern analyzer configured to split based on non-word characters or underscore, and lowercasing. Demonstrates the output after splitting the email address.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pattern-analyzer.md#2025-04-21_snippet_3

LANGUAGE: text
CODE:
```
[ john, smith, foo, bar, com ]
```

----------------------------------------

TITLE: Advanced Sync Rule for Incident Service
DESCRIPTION: JSON configuration to filter and index ServiceNow Incident documents based on specific number prefix
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-servicenow.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
[
  {
    "service": "Incident",
    "query": "numberSTARTSWITHINC001"
  }
]
```

----------------------------------------

TITLE: API Key Object Schema for Security Config Change Events in Elasticsearch
DESCRIPTION: Defines the structure of an API key object in security configuration change events. It includes fields for the key's ID, name, expiration, role descriptors, and metadata.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_26

LANGUAGE: javascript
CODE:
```
{"id": <string>, "name": <string>, "expiration": <string>, "role_descriptors": [<object>],
"metadata": [<object>]}
```

----------------------------------------

TITLE: Boxplot Aggregation with High Accuracy Execution Hint in Elasticsearch
DESCRIPTION: This snippet shows how to use the execution_hint parameter to optimize the boxplot aggregation for accuracy at the expense of performance in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-boxplot-aggregation.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
GET latency/_search
{
  "size": 0,
  "aggs": {
    "load_time_boxplot": {
      "boxplot": {
        "field": "load_time",
        "execution_hint": "high_accuracy"
      }
    }
  }
}
```

----------------------------------------

TITLE: Unsupported Scalar Function on Nested Field in ORDER BY Elasticsearch SQL
DESCRIPTION: Example demonstrating a limitation: scalar functions like 'YEAR' are not supported when applied directly to nested fields within the 'ORDER BY' clause. This query will fail.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-limitations.md#_snippet_3

LANGUAGE: SQL
CODE:
```
SELECT * FROM test_emp ORDER BY YEAR(dep.start_date);
```

----------------------------------------

TITLE: Getting PI Value in Elasticsearch SQL
DESCRIPTION: This snippet shows the usage of the `PI()` function in Elasticsearch SQL. It returns the mathematical constant PI as a double value. The function requires no input parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_9

LANGUAGE: SQL
CODE:
```
SELECT PI();
```

----------------------------------------

TITLE: GeoIP Pipeline No Match Response
DESCRIPTION: Sample response showing a document where the IP address could not be found in the GeoIP database, resulting in no additional fields being added.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/geoip-processor.md#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
{
  "_index" : "my-index-000001",
  "_id" : "my_id",
  "_version" : 1,
  "_seq_no" : 71,
  "_primary_term": 1,
  "found" : true,
  "_source" : {
    "ip" : "80.231.5.0"
  }
}
```

----------------------------------------

TITLE: Retrieve Document with Sorted Long Array from Synthetic Source (console-result)
DESCRIPTION: Demonstrates the expected output when retrieving the document indexed with a long array via synthetic _source. The array values are returned in sorted order.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/number.md#_snippet_2

LANGUAGE: console-result
CODE:
```
{
  "long": [-123466, 0, 0, 87612]
}
```

----------------------------------------

TITLE: Getting Euler's Number in Elasticsearch SQL
DESCRIPTION: This demonstrates retrieving Euler's number using the `E()` function in Elasticsearch SQL. The function takes no input and returns the mathematical constant `e` as a double. It's often used in conjunction with other mathematical functions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_3

LANGUAGE: SQL
CODE:
```
SELECT E(), CEIL(E());
```

----------------------------------------

TITLE: ByteOrder Class Definition
DESCRIPTION: Defines the ByteOrder class with constants for big-endian and little-endian byte ordering.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.nio.txt#2025-04-21_snippet_0

LANGUAGE: java
CODE:
```
class java.nio.ByteOrder {
  ByteOrder BIG_ENDIAN
  ByteOrder LITTLE_ENDIAN
}
```

----------------------------------------

TITLE: Storing GCE Project ID Locally using gcloud CLI
DESCRIPTION: Demonstrates how to save a Google Cloud project ID locally in the gcloud configuration to avoid repeating it in subsequent commands.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-tips.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
gcloud config set project es-cloud
```

----------------------------------------

TITLE: Syntax for MINUTE_OF_DAY Function in Elasticsearch SQL
DESCRIPTION: Defines the syntax for the MINUTE_OF_DAY function. It takes a date or datetime expression and extracts the minute of the day (0-1439). Returns null if the input is null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_70

LANGUAGE: SQL
CODE:
```
MINUTE_OF_DAY(datetime_exp) <1>
```

----------------------------------------

TITLE: Escaping Special Characters in ESQL Regular Expressions
DESCRIPTION: This snippet demonstrates how to escape special characters like parentheses in ESQL regular expressions using backslashes. It shows that backslashes themselves need to be escaped in string literals.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/detailedDescription/rlike.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW message = "foo ( bar"
| WHERE message RLIKE "foo \\( bar"
```

----------------------------------------

TITLE: Date Histogram Aggregation with 28-Day Offset
DESCRIPTION: Example response showing date histogram buckets with a 28-day offset, demonstrating how bucket dates shift across months.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-datehistogram-aggregation.md#2025-04-21_snippet_11

LANGUAGE: console
CODE:
```
"buckets": [
  { "key_as_string": "2021-12-29", "key": 1640736000000, "doc_count": 1 },
  { "key_as_string": "2022-01-29", "key": 1643414400000, "doc_count": 1 },
  { "key_as_string": "2022-03-01", "key": 1646092800000, "doc_count": 1 },
  { "key_as_string": "2022-03-29", "key": 1648512000000, "doc_count": 1 },
  { "key_as_string": "2022-04-29", "key": 1651190400000, "doc_count": 1 },
  { "key_as_string": "2022-05-29", "key": 1653782400000, "doc_count": 1 },
  { "key_as_string": "2022-06-29", "key": 1656460800000, "doc_count": 1 },
  { "key_as_string": "2022-07-29", "key": 1659052800000, "doc_count": 1 }
]
```

----------------------------------------

TITLE: Adding Documents to Elasticsearch Index for Version 5 in JSON
DESCRIPTION: Inserts a document into the Elasticsearch index for version 5, including title, content, and created_at fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/qa/repository-old-versions-compatibility/src/javaRestTest/resources/README.md#2025-04-21_snippet_8

LANGUAGE: json
CODE:
```
POST /index/my_type
{
  "title": "Title 5",
  "content": "Elasticsearch is a powerful search engine.",
  "created_at": "2024-12-16"
}
```

----------------------------------------

TITLE: Defining Turkish Stop Words
DESCRIPTION: Specifies Turkish stop words for Elasticsearch analysis, including a link to the respective Lucene file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_39

LANGUAGE: markdown
CODE:
```
`_turkish_`
:   [Turkish stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/tr/stopwords.txt)
```

----------------------------------------

TITLE: Initializing Logger in Java for Elasticsearch
DESCRIPTION: Shows how to initialize a Logger instance for a class in Elasticsearch using Log4J.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/CONTRIBUTING.md#2025-04-21_snippet_9

LANGUAGE: java
CODE:
```
class Foo {
    private static final Logger logger = LogManager.getLogger(Foo.class);
}
```

----------------------------------------

TITLE: Calculating Arccosine in Elasticsearch SQL
DESCRIPTION: This example uses the `ACOS` function in Elasticsearch SQL to calculate the arccosine of a numeric expression. The result is an angle expressed in radians. The input should be between -1 and 1 (inclusive).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-math.md#_snippet_19

LANGUAGE: SQL
CODE:
```
SELECT ACOS(COS(PI())), PI();
```

----------------------------------------

TITLE: End-to-End Testing for ServiceNow Connector
DESCRIPTION: Shell command to run functional tests for the ServiceNow connector with optional performance and data size configurations
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-servicenow.md#2025-04-21_snippet_8

LANGUAGE: shell
CODE:
```
$ make ftest NAME=servicenow
```

----------------------------------------

TITLE: SQL Query for Y-Coordinate using ST_Y
DESCRIPTION: This SQL query selects points from a test table where the Y-coordinate is equal to 10.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_18

LANGUAGE: SQL
CODE:
```
SELECT ST_AsWKT(point) FROM test WHERE ST_Y(point) = 10;
```

----------------------------------------

TITLE: SharePoint App Permission XML Configuration
DESCRIPTION: XML configuration for setting up app permissions in SharePoint Online with full control access to content and read access to social features.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-sharepoint-online.md#2025-04-22_snippet_2

LANGUAGE: xml
CODE:
```
<AppPermissionRequests AllowAppOnlyPolicy="true">
<AppPermissionRequest Scope="http://sharepoint/content/tenant" Right="FullControl" />
<AppPermissionRequest Scope="http://sharepoint/social/tenant" Right="Read" />
</AppPermissionRequests>
```

----------------------------------------

TITLE: Examples of Single and Multi-line Comments - SQL
DESCRIPTION: Demonstrates the two styles of comments supported in Elasticsearch SQL: single-line comments starting with -- and multi-line comments enclosed in /* */, including an example showing support for nested multi-line comments.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-lexical-structure.md#_snippet_9

LANGUAGE: sql
CODE:
```
-- single line comment
/* multi
   line
   comment
   that supports /* nested comments */
   */
```

----------------------------------------

TITLE: Implementing Content-Type Header for REST API Compatibility
DESCRIPTION: Example of the Content-Type header required when making requests with a body while enabling REST API compatibility with Elasticsearch version 7.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/REST_API_COMPATIBILITY.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
Content-Type: "application/vnd.elasticsearch+json;compatible-with=7"
```

----------------------------------------

TITLE: ESQL Function Comment Header
DESCRIPTION: Auto-generated header comment for an ESQL function that combines multivalue fields with a delimiter. The comment indicates this is machine-generated code that should not be edited manually.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/mv_zip.md#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.
```

----------------------------------------

TITLE: Defining Czech Stop Words
DESCRIPTION: Lists the Czech stop words for use within Elasticsearch, complete with a relevant Lucene stop words link.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_12

LANGUAGE: markdown
CODE:
```
`_czech_`
:   [Czech stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/cz/stopwords.txt)
```

----------------------------------------

TITLE: Running Functional Tests (MS SQL Connector)
DESCRIPTION: This shell command executes the end-to-end functional test suite for the Microsoft SQL connector. It uses the 'make' build tool with the 'ftest' target and specifies the 'mssql' connector by name. This helps verify the connector's functionality against a real data source.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-ms-sql.md#_snippet_9

LANGUAGE: shell
CODE:
```
make ftest NAME=mssql
```

----------------------------------------

TITLE: Defining Dutch Stop Words
DESCRIPTION: Defines Dutch stop words for use in Elasticsearch, with links to the relevant Lucene text.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_14

LANGUAGE: markdown
CODE:
```
`_dutch_`
:   [Dutch stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/snowball/dutch_stop.txt)
```

----------------------------------------

TITLE: Adding Documents with Custom Analyzer for Version 5 in JSON
DESCRIPTION: Inserts a document into the Elasticsearch index using the custom analyzer for version 5, with only the content field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/qa/repository-old-versions-compatibility/src/javaRestTest/resources/README.md#2025-04-21_snippet_9

LANGUAGE: json
CODE:
```
POST /index/my_type
{
  "content": "Doc 1"
}
```

----------------------------------------

TITLE: Configuring YAML for Zoom Connector with Docker
DESCRIPTION: Sample YAML configuration for deploying the Zoom connector with Docker, including Elasticsearch connection details and connector specifications.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-zoom.md#2025-04-22_snippet_4

LANGUAGE: yaml
CODE:
```
# When connecting to your cloud deployment you should edit the host value
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: zoom
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA> # Optional. If not provided, the connector will use the elasticsearch.api_key instead
```

----------------------------------------

TITLE: EQL Sequence Search Result with Missing Events in Elasticsearch
DESCRIPTION: Displays the response format for an EQL sequence search that includes a missing event, indicated by 'missing': true.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_7

LANGUAGE: console-result
CODE:
```
{
  ...
  "hits": {
    "total": ...,
    "sequences": [
      {
        "events": [
          {
            "_index": ".ds-my-data-stream-2023.07.04-000001",
            "_id": "AnpTIYkBrVQ2QEgsWg94",
            "_source": {
              "@timestamp": "2099-12-07T11:06:07.000Z",
              "event": {
                "category": "process",
                "id": "cMyt5SZ2",
                "sequence": 3
              },
              "process": {
                "pid": 2012,
                "name": "cmd.exe",
                "executable": "C:\\Windows\\System32\\cmd.exe"
              }
            }
          },
          {
            "_index": "",
            "_id": "",
            "_source": {},
            "missing": true
          },
          {
            "_index": ".ds-my-data-stream-2023.07.04-000001",
            "_id": "BHpTIYkBrVQ2QEgsWg94",
            "_source": {
              "@timestamp": "2099-12-07T11:07:10.000Z",
              "event": {
                "category": "file",
                "id": "tZ1NWVOs",
                "sequence": 5
              },
              "process": {
                "pid": 2012,
                "name": "regsvr32.exe",
                "executable": "C:\\Windows\\System32\\regsvr32.exe"
              },
              "file": {
                "path": "C:\\Windows\\System32\\scrobj.dll",
                "name": "scrobj.dll"
              }
            }
          }
        ]
      }
    ]
  }
}
```

----------------------------------------

TITLE: Time-Series Aggregation Response Example
DESCRIPTION: Sample response showing the grouped geo-line data using time-series aggregation, with results organized by TSID and including GeoJSON Features.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-geo-line.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
{
  "aggregations": {
    "path": {
      "buckets": {
        "{city=Paris}": {
          "key": {
            "city": "Paris"
          },
          "doc_count": 2,
          "museum_tour": {
            "type": "Feature",
            "geometry": {
              "coordinates": [ [ 2.336389, 48.861111 ], [ 2.327, 48.86 ] ],
              "type": "LineString"
            },
            "properties": {
              "complete": true
            }
          }
        },
        "{city=Antwerp}": {
          "key": {
            "city": "Antwerp"
          },
          "doc_count": 3,
          "museum_tour": {
            "type": "Feature",
            "geometry": {
              "coordinates": [ [ 4.401384, 51.220292 ], [ 4.405819, 51.221758 ], [ 4.4052, 51.2229 ] ],
              "type": "LineString"
            },
            "properties": {
              "complete": true
            }
          }
        },
        "{city=Amsterdam}": {
          "key": {
            "city": "Amsterdam"
          },
          "doc_count": 5,
          "museum_tour": {
            "type": "Feature",
            "geometry": {
              "coordinates": [ [ 4.889187, 52.373184 ], [ 4.885057, 52.370159 ], [ 4.901618, 52.369219 ], [ 4.91235, 52.374081 ], [ 4.914722, 52.371667 ] ],
              "type": "LineString"
            },
            "properties": {
              "complete": true
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Storing Synchronous EQL Search in Elasticsearch
DESCRIPTION: This snippet shows how to store a synchronous EQL search by setting 'keep_on_completion' to true. It also sets a 2-second wait for completion timeout.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_29

LANGUAGE: console
CODE:
```
GET /my-data-stream/_eql/search
{
  "keep_on_completion": true,
  "wait_for_completion_timeout": "2s",
  "query": """
    process where process.name == "cmd.exe"
  """
}
```

----------------------------------------

TITLE: Configuring Routing Path in Elasticsearch
DESCRIPTION: Setting to specify keyword fields used for routing documents to index shards in a TSDS.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/time-series.md#2025-04-21_snippet_5

LANGUAGE: yaml
CODE:
```
index.routing_path: ["field1", "field2"]
```

----------------------------------------

TITLE: Configuring Elasticsearch Stable Plugin Descriptor Template
DESCRIPTION: Template for creating a stable-plugin-descriptor.properties file for Elasticsearch plugins. This configuration file defines essential metadata and requirements for the plugin including description, version, Java compatibility, and optional features like native controllers and licensing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/extend/plugin-descriptor-file-stable.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
# Elasticsearch plugin descriptor file
# This file must exist as 'plugin-descriptor.properties' or 'stable-plugin-descriptor.properties inside a plugin.
#
## example plugin for "foo"
#
# foo.zip <-- zip file for the plugin, with this structure:
# |____   <arbitrary name1>.jar <-- classes, resources, dependencies
# |____   <arbitrary nameN>.jar <-- any number of jars
# |____   plugin-descriptor.properties <-- example contents below:
#
# classname=foo.bar.BazPlugin
# description=My cool plugin
# version=6.0
# elasticsearch.version=6.0
# java.version=1.8
#
## mandatory elements for all plugins:
#
# 'description': simple summary of the plugin
description=${description}
#
# 'version': plugin's version
version=${version}
#
# 'name': the plugin name
name=${name}
#
# 'java.version': version of java the code is built against
# use the system property java.specification.version
# version string must be a sequence of nonnegative decimal integers
# separated by "."'s and may have leading zeros
java.version=${javaVersion}
#
# 'elasticsearch.version': version of elasticsearch compiled against.
# Plugins implementing plugin-api.jar this version only has to match a major version of the ES server
# For all other plugins it has to be the same as ES server version
elasticsearch.version=${elasticsearchVersion}
## optional elements for plugins:
<% if (classname) { %>
#
# 'classname': the name of the class to load, fully-qualified. Only applies to
# "isolated" plugins
classname=${classname}
<% } %>
<% if (modulename) { %>
#
# 'modulename': the name of the module to load classname from. Only applies to
# "isolated" plugins. This is optional. Specifying it causes the plugin
# to be loaded as a module.
modulename=${modulename}
<% } %>
<% if (extendedPlugins) { %>
#
#  'extended.plugins': other plugins this plugin extends through SPI
extended.plugins=${extendedPlugins}
<% } %>
<% if (hasNativeController) { %>
#
# 'has.native.controller': whether or not the plugin has a native controller
has.native.controller=${hasNativeController}
<% } %>
<% if (licensed) { %>
# This plugin requires that a license agreement be accepted before installation
licensed=${licensed}
<% } %>
```

----------------------------------------

TITLE: Demonstrating Less Than Or Equal Operator with Numeric Types in Painless
DESCRIPTION: Shows examples of using the less than or equal operator with different numeric types, including promotion and implicit casting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_5

LANGUAGE: painless
CODE:
```
boolean x = 5 <= 4; <1>
double y = 6.0;     <2>
x = 6 <= y;         <3>
```

----------------------------------------

TITLE: Creating API Key for Connector
DESCRIPTION: API call to generate a security API key with required permissions for the connector
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-dropbox.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /_security/api_key
{
  "name": "connector_name-connector-api-key",
  "role_descriptors": {
    "connector_name-connector-role": {
      "cluster": [
        "monitor",
        "manage_connector"
      ],
      "indices": [
        {
          "names": [
            "index_name",
            ".search-acl-filter-index_name",
            ".elastic-connectors*"
          ],
          "privileges": [
            "all"
          ],
          "allow_restricted_indices": false
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Sample Response for Bucket Selector Aggregation Query
DESCRIPTION: This snippet shows a sample response from an Elasticsearch query using bucket selector aggregation. It demonstrates how buckets with total sales less than 200 are excluded from the results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-bucket-selector-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console-result
CODE:
```
{
   "took": 11,
   "timed_out": false,
   "_shards": ...,
   "hits": ...,
   "aggregations": {
      "sales_per_month": {
         "buckets": [
            {
               "key_as_string": "2015/01/01 00:00:00",
               "key": 1420070400000,
               "doc_count": 3,
               "total_sales": {
                   "value": 550.0
               }
            },
            {
               "key_as_string": "2015/03/01 00:00:00",
               "key": 1425168000000,
               "doc_count": 2,
               "total_sales": {
                   "value": 375.0
               }
            }
         ]
      }
   }
}
```

----------------------------------------

TITLE: Running Zoom Connector Docker Container
DESCRIPTION: Docker command to run the Elastic connectors service container with the configured settings for the Zoom connector.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-zoom.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Double-Quoted String Examples
DESCRIPTION: Demonstrates string literals using double quotes with various escape sequences.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-literals.md#2025-04-21_snippet_6

LANGUAGE: painless
CODE:
```
"double-quoted string literal"
"\"double-quoted with escaped double-quotes\" and backslash: \\"
"double-quoted with non-escaped 'single-quotes'"
```

----------------------------------------

TITLE: Defining Null Role Descriptor in Elasticsearch
DESCRIPTION: This snippet defines a null role descriptor with empty permissions for cluster, indices, applications, and run-as fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/src/test/resources/org/elasticsearch/xpack/security/audit/logfile/audited_roles.txt#2025-04-22_snippet_0

LANGUAGE: JSON
CODE:
```
{"cluster":[],"indices":[],"applications":[],"run_as":[]}
```

----------------------------------------

TITLE: Static Import for IP Field Script Emit Callback
DESCRIPTION: Configures a static import for the `emit` callback method, which is used to collect values in IP field scripts with Painless scripting
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.ip_field.txt#2025-04-21_snippet_1

LANGUAGE: java
CODE:
```
static_import {
    void emit(org.elasticsearch.script.IpFieldScript, String) bound_to org.elasticsearch.script.IpFieldScript$Emit
}
```

----------------------------------------

TITLE: Defining Persian Stop Words
DESCRIPTION: Defines Persian stop words for use in Elasticsearch text analysis, referenced from the Lucene resource.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_30

LANGUAGE: markdown
CODE:
```
`_persian_`
:   [Persian stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/fa/stopwords.txt)
```

----------------------------------------

TITLE: JSON Operations Class Definition
DESCRIPTION: Defines JSON parsing and serialization methods for handling JSON data in scripts.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.ingest.txt#2025-04-21_snippet_1

LANGUAGE: java
CODE:
```
class org.elasticsearch.painless.api.Json {
  def load(String)
  String dump(def)
  String dump(def, boolean)
}
```

----------------------------------------

TITLE: Creating Nori Analyzer with Inline Dictionary Rules
DESCRIPTION: Example of creating a Nori tokenizer with user dictionary rules defined directly in the tokenizer configuration rather than in a separate file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-nori-tokenizer.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
PUT nori_sample
{
  "settings": {
    "index": {
      "analysis": {
        "tokenizer": {
          "nori_user_dict": {
            "type": "nori_tokenizer",
            "decompound_mode": "mixed",
            "user_dictionary_rules": ["c++", "C쁠쁠", "세종", "세종시 세종 시"]
          }
        },
        "analyzer": {
          "my_analyzer": {
            "type": "custom",
            "tokenizer": "nori_user_dict"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Example outbound_network Entitlement (YAML)
DESCRIPTION: This snippet illustrates how to grant the `outbound_network` entitlement in the `entitlement-policy.yaml` file. This entitlement is required for a plugin module to make outgoing network connections to external resources.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/extend/creating-classic-plugins.md#_snippet_4

LANGUAGE: YAML
CODE:
```
org.example.module: # or 'ALL-UNNAMED' if the plugin is non-modular
  - outbound_network
```

----------------------------------------

TITLE: Calculating Square Root Using SQRT Function in ESQL
DESCRIPTION: This snippet demonstrates the usage of the SQRT function in ESQL to calculate the square root of a numeric value. It creates a row with a double value and then applies the SQRT function to it.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/sqrt.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW d = 100.0
| EVAL s = SQRT(d)
```

----------------------------------------

TITLE: Multiplying Numbers in ESQL
DESCRIPTION: Performs multiplication of two numeric values with a special constraint that multivalued fields result in null. Part of Elasticsearch's Query Language (ESQL) functionality.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/operators/mul.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
MULTIPLY `*`
```

----------------------------------------

TITLE: Configuring Remote Clusters for Cross-Cluster EQL Search in Elasticsearch
DESCRIPTION: This snippet shows how to configure remote clusters 'cluster_one' and 'cluster_two' for cross-cluster EQL searches using the cluster update settings API.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql.md#2025-04-21_snippet_31

LANGUAGE: console
CODE:
```
PUT /_cluster/settings
{
  "persistent": {
    "cluster": {
      "remote": {
        "cluster_one": {
          "seeds": [
            "127.0.0.1:9300"
          ]
        },
        "cluster_two": {
          "seeds": [
            "127.0.0.1:9301"
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Syntax of DATABASE() Function (SQL)
DESCRIPTION: Provides the syntax for the `DATABASE()` system function in Elasticsearch SQL. This function is used to retrieve the name of the connected Elasticsearch cluster. It requires no input and returns a non-null string representing the cluster name.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-system.md#_snippet_0

LANGUAGE: sql
CODE:
```
DATABASE()
```

----------------------------------------

TITLE: Invalid Usage of SKEWNESS Function with Scalar Functions in Elasticsearch SQL
DESCRIPTION: Demonstrates an invalid attempt to use the SKEWNESS function on a scalar function (`ROUND(salary / 12.0, 2)`). The SKEWNESS function can only be applied directly to a field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_47

LANGUAGE: SQL
CODE:
```
SELECT SKEWNESS(ROUND(salary / 12.0, 2), gender FROM emp GROUP BY gender
```

----------------------------------------

TITLE: Elasticsearch Response for Frequent Items Aggregation with Runtime Field
DESCRIPTION: This is the response to the previous query, showing the most frequent combinations of categories, price ranges, and cities. It demonstrates how the runtime field 'price_range' is used in the aggregation results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-frequent-item-sets-aggregation.md#2025-04-21_snippet_5

LANGUAGE: console-result
CODE:
```
(...)
"aggregations" : {
    "my_agg" : {
      "buckets" : [
        {
          "key" : {
            "category.keyword" : [
              "Women's Clothing",
              "Women's Shoes"
            ],
            "price_range" : [
              "50-100"
            ],
            "geoip.city_name" : [
              "New York"
            ]
          },
          "doc_count" : 100,
          "support" : 0.0213903743315508
        },
        {
          "key" : {
            "category.keyword" : [
              "Women's Clothing",
              "Women's Shoes"
            ],
            "price_range" : [
              "50-100"
            ],
            "geoip.city_name" : [
              "Dubai"
            ]
          },
          "doc_count" : 59,
          "support" : 0.012620320855614974
        },
        {
          "key" : {
            "category.keyword" : [
              "Men's Clothing",
              "Men's Shoes"
            ],
            "price_range" : [
              "50-100"
            ],
            "geoip.city_name" : [
              "Marrakesh"
            ]
          },
          "doc_count" : 53,
          "support" : 0.011336898395721925
        }
      ],
    (...)
    }
  }
```

----------------------------------------

TITLE: Mapping Aggregate Metric Double with Synthetic Source
DESCRIPTION: Creates an index `idx` configured for synthetic `_source` mode and defines an `aggregate_metric_double` field `agg_metric` with standard metrics and default `max`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/aggregate-metric-double.md#_snippet_6

LANGUAGE: console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "agg_metric": {
        "type": "aggregate_metric_double",
        "metrics": [ "min", "max", "sum", "value_count" ],
        "default_metric": "max"
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing WKT Geometry Collection in Elasticsearch
DESCRIPTION: Example of indexing a WKT Geometry Collection in Elasticsearch. The collection combines a point and a linestring in a single WKT string format.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/shape.md#2025-04-21_snippet_17

LANGUAGE: json
CODE:
```
POST /example/_doc
{
  "location" : "GEOMETRYCOLLECTION (POINT (1000.0 100.0), LINESTRING (1001.0 100.0, 1002.0 100.0))"
}
```

----------------------------------------

TITLE: Configuring and Using nori_readingform Token Filter in Elasticsearch
DESCRIPTION: This snippet demonstrates how to configure an index with a custom analyzer using the nori_tokenizer and nori_readingform filter. It then shows how to use this analyzer to convert Hanja text to Hangul.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-nori-readingform.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT nori_sample
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "my_analyzer": {
            "tokenizer": "nori_tokenizer",
            "filter": [ "nori_readingform" ]
          }
        }
      }
    }
  }
}

GET nori_sample/_analyze
{
  "analyzer": "my_analyzer",
  "text": "鄕歌"
}
```

----------------------------------------

TITLE: Styled HTML Tags for Highlighting - HTML
DESCRIPTION: This snippet shows the default HTML `<em>` tags with specific classes (`hlt1` to `hlt10`) used by the `styled` `tags_schema` in Elasticsearch highlighting. These tags wrap the highlighted text segments in the search results when the styled schema is enabled.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/highlighting.md#_snippet_1

LANGUAGE: HTML
CODE:
```
<em class="hlt1">, <em class="hlt2">, <em class="hlt3">,
<em class="hlt4">, <em class="hlt5">, <em class="hlt6">,
<em class="hlt7">, <em class="hlt8">, <em class="hlt9">,
<em class="hlt10">
```

----------------------------------------

TITLE: Suggestion Response Format
DESCRIPTION: Example response from a suggestion request showing the structure of suggestion results. Each entry contains the original text, position information, and suggestion options with scores.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-suggesters.md#2025-04-21_snippet_1

LANGUAGE: console-result
CODE:
```
{
  "_shards": ...
  "hits": ...
  "took": 2,
  "timed_out": false,
  "suggest": {
    "my-suggest-1": [ {
      "text": "tring",
      "offset": 0,
      "length": 5,
      "options": [ {"text": "trying", "score": 0.8, "freq": 1 } ]
    }, {
      "text": "out",
      "offset": 6,
      "length": 3,
      "options": []
    }, {
      "text": "elasticsearch",
      "offset": 10,
      "length": 13,
      "options": []
    } ],
    "my-suggest-2": ...
  }
}
```

----------------------------------------

TITLE: Converting Certificates to PKCS#12 Format
DESCRIPTION: This snippet converts the generated certificates (cert1 and cert2) into PKCS#12 format, allowing for easier management and import into different keystores.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/libs/ssl-config/src/test/resources/certs/README.txt#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
# 8. Convert Certs to PKCS#12

for Cert in cert1 cert2 
do
    openssl pkcs12 -export -out $Cert/$Cert.p12 -inkey $Cert/$Cert.key -in $Cert/$Cert.crt -name $Cert -passout pass:p12-pass 
done
```

----------------------------------------

TITLE: Running Elastic Connector Service (Shell)
DESCRIPTION: This command executes the run target defined in the Makefile within the cloned elastic/connectors repository. It typically compiles or starts the Python connector application, allowing it to connect to Elasticsearch and await configuration and sync commands from Kibana.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-postgresql-connector-client-tutorial.md#_snippet_3

LANGUAGE: shell
CODE:
```
make run
```

----------------------------------------

TITLE: Current Non-Monotonic Metric Example
DESCRIPTION: This snippet shows how to use the 'current' suffix for non-monotonic metrics (gauges, upDownCounters) such as the number of classes currently loaded by the JVM.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/apm/NAMING.md#2025-04-21_snippet_9

LANGUAGE: none
CODE:
```
"es.process.jvm.classes.loaded.current"
```

LANGUAGE: none
CODE:
```
"es.process.jvm.classes.loaded.total"
```

----------------------------------------

TITLE: Decay Function with Timestamp Example
DESCRIPTION: Example of using a Gaussian decay function with a timestamp field, showing date-based origin and scale parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-function-score-query.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "function_score": {
      "gauss": {
        "@timestamp": {
          "origin": "2013-09-17",
          "scale": "10d",
          "offset": "5d",
          "decay": 0.5
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: EQL In Filter with String List
DESCRIPTION: Checks process names against a list of values. Validates translation into a terms query including multiple possible names.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_4

LANGUAGE: basic
CODE:
```
process where process_name in ("python.exe", "SMSS.exe", "explorer.exe")
;
"terms":{"process_name":["python.exe","SMSS.exe","explorer.exe"],
;
```

----------------------------------------

TITLE: ANYSTRING Operator Examples
DESCRIPTION: Examples showing the at sign operator which matches any entire string, and how to combine it with other operators for exclusion patterns.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/regexp-syntax.md#2025-04-21_snippet_17

LANGUAGE: text
CODE:
```
@&~(abc.+)  # matches everything except terms beginning with 'abc'
```

----------------------------------------

TITLE: Describing LEFT Function in Elasticsearch SQL
DESCRIPTION: This snippet provides a description of the LEFT function in Elasticsearch SQL. It explains that the function returns a substring by extracting a specified number of characters from the left side of a given string.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/left.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
Returns the substring that extracts *length* chars from *string* starting from the left.
```

----------------------------------------

TITLE: Analyzing Text with Classic Token Filter
DESCRIPTION: Demonstrates using the analyze API to show how the classic token filter processes text by removing possessives and modifying tokens
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-classic-tokenfilter.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_analyze
{
  "tokenizer" : "classic",
  "filter" : ["classic"],
  "text" : "The 2 Q.U.I.C.K. Brown-Foxes jumped over the lazy dog's bone."
}
```

----------------------------------------

TITLE: Extracting Date Field Values with Painless
DESCRIPTION: Uses Painless to extract the birth year from a date field for all hockey players using the script_fields feature.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/brief-painless-walkthrough.md#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
GET hockey/_search
{
  "script_fields": {
    "birth_year": {
      "script": {
        "source": "doc.born.value.year"
      }
    }
  }
}
```

----------------------------------------

TITLE: Running Faster GraphQL Connector End-to-End Tests
DESCRIPTION: This command runs a faster version of the GraphQL connector end-to-end test by using a smaller data size.  This is achieved by setting the `DATA_SIZE` flag to `small`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-graphql.md#2025-04-21_snippet_9

LANGUAGE: shell
CODE:
```
"make ftest NAME=graphql DATA_SIZE=small"
```

----------------------------------------

TITLE: Translating SQL Datetime Functions to Elasticsearch JSON
DESCRIPTION: This example shows how SQL datetime functions and operations are translated into Elasticsearch scripts. It includes date addition and comparison operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
SELECT int FROM test WHERE DATE_ADD('quarter',int, date) > '2018-09-04'::date;
```

LANGUAGE: json
CODE:
```
InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.gt(InternalSqlScriptUtils.dateAdd(params.v0,InternalQlScriptUtils.docValue(doc,params.v1),InternalQlScriptUtils.docValue(doc,params.v2),params.v3),InternalSqlScriptUtils.asDateTime(params.v4)))
"params":{"v0":"quarter","v1":"int","v2":"date","v3":"Z","v4":"2018-09-04T00:00:00.000Z"}
```

----------------------------------------

TITLE: Sorted Result of Synthetic Source for date_nanos Field in Elasticsearch
DESCRIPTION: The result of using synthetic source with a date_nanos field, showing how the values are automatically sorted.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/date_nanos.md#2025-04-21_snippet_3

LANGUAGE: console-result
CODE:
```
{
  "date": ["2014-01-01T12:10:30.000Z", "2015-01-01T12:10:30.000Z"]
}
```

----------------------------------------

TITLE: Filtering Functions with Multi-Character Wildcard in Elasticsearch SQL
DESCRIPTION: Example of using SHOW FUNCTIONS with LIKE clause using percent (%) wildcard to match zero or more characters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-show-functions.md#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
SHOW FUNCTIONS LIKE 'A%';

     name      |     type
---------------+---------------
AVG            |AGGREGATE
ABS            |SCALAR
ACOS           |SCALAR
ASIN           |SCALAR
ATAN           |SCALAR
ATAN2          |SCALAR
ASCII          |SCALAR
```

----------------------------------------

TITLE: Uploading Extension Using Python Requests
DESCRIPTION: Python implementation for uploading extension file using the requests library with multipart form data.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-custom-bundles.md#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
import requests
files = {'file': open('/tmp/synonyms.zip','rb')}
r = requests.put('https://api.elastic-cloud.com/api/v1/deployments/extensions/{}'.format(extension_id), files=files, headers= {'Authorization': 'ApiKey {}'.format(EC_API_KEY)})
```

----------------------------------------

TITLE: Calculating Count with ESQL
DESCRIPTION: This snippet demonstrates how to use the COUNT function in ESQL to count the number of 'height' values in the 'employees' table. The COUNT function is used within a STATS clause to perform the aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/count.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| STATS COUNT(height)
```

----------------------------------------

TITLE: Running Benchmark with Parameters
DESCRIPTION: Example of running a benchmark with specific parameters including rounder, range, zone, interval, and count settings
SOURCE: https://github.com/elastic/elasticsearch/blob/main/benchmarks/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
gradlew -p benchmarks/ run --args 'RoundingBenchmark.round -prounder=es -prange="2000-10-01 to 2000-11-01" -pzone=America/New_York -pinterval=10d -pcount=1000000'
```

----------------------------------------

TITLE: Syntax for COUNT(ALL) Function in Elasticsearch SQL
DESCRIPTION: This snippet shows the syntax for `COUNT(ALL <field_name>)`. This function counts all non-null values for the specified field name and is equivalent to `COUNT(<field_name>)`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_5

LANGUAGE: SQL
CODE:
```
COUNT(ALL field_name) <1>
```

----------------------------------------

TITLE: Float Literal Grammar Specification
DESCRIPTION: Defines the grammar rules for floating-point literals in Painless, including decimal and exponential notations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-literals.md#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
DECIMAL: '-'? ( '0' | [1-9] [0-9]* ) (DOT [0-9]+)? EXPONENT? [fFdD]?;
EXPONENT: ( [eE] [+\-]? [0-9]+ );
```

----------------------------------------

TITLE: Using Block Comments in ESQL (Single Line)
DESCRIPTION: Shows how to use `/*` and `*/` to create a block comment in ESQL, demonstrated here on a single line within a query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-syntax.md#_snippet_8

LANGUAGE: esql
CODE:
```
FROM /* Query the employees index */ employees
| WHERE height > 2
```

----------------------------------------

TITLE: Concatenating String Array with MV_CONCAT in ESQL
DESCRIPTION: This snippet demonstrates how to use MV_CONCAT to join elements of a string array into a single string, separated by a specified delimiter.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_concat.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=["foo", "zoo", "bar"]
| EVAL j = MV_CONCAT(a, ", ")
```

----------------------------------------

TITLE: Performing Sum Aggregation on Histogram Field in Elasticsearch
DESCRIPTION: This snippet demonstrates how to perform a sum aggregation on a histogram field, calculating the total latency across all networks.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-sum-aggregation.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
POST /metrics_index/_search?size=0&filter_path=aggregations
{
  "aggs" : {
    "total_latency" : { "sum" : { "field" : "latency_histo" } }
  }
}
```

----------------------------------------

TITLE: Documenting ESQL Function Parameter in Markdown
DESCRIPTION: This snippet defines the 'field' parameter for an ESQL function. It explains that the input can be a single- or multi-valued column or an expression.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/parameters/to_double.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
**Parameters**

`field`
:   Input value. The input can be a single- or multi-valued column or an expression.
```

----------------------------------------

TITLE: Combining MV_MAX with MEDIAN_ABSOLUTE_DEVIATION in ESQL
DESCRIPTION: Demonstrates how to calculate median absolute deviation on maximum values from a multivalued salary_change column, using MV_MAX as an inline function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/median_absolute_deviation.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
FROM employees
| STATS m_a_d_max_salary_change = MEDIAN_ABSOLUTE_DEVIATION(MV_MAX(salary_change))
```

----------------------------------------

TITLE: Cluster State Task Execution Context Restrictions
DESCRIPTION: Forbidden cluster state reaction patterns that obstruct task batching. Developers should use Runnable variants instead.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/build-tools-internal/src/main/resources/forbidden/es-server-signatures.txt#2025-04-21_snippet_6

LANGUAGE: java
CODE:
```
org.elasticsearch.cluster.ClusterStateTaskExecutor$TaskContext#success(java.util.function.Consumer)
org.elasticsearch.cluster.ClusterStateTaskExecutor$TaskContext#success(java.util.function.Consumer, org.elasticsearch.cluster.ClusterStateAckListener)
```

----------------------------------------

TITLE: Configuring ServiceNow Connector Configuration File
DESCRIPTION: Yaml configuration file for connecting to Elasticsearch and configuring the ServiceNow connector with necessary authentication and service details
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-servicenow.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: servicenow
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA>
```

----------------------------------------

TITLE: Configuring HTTP OIDC Authentication in Elasticsearch
DESCRIPTION: YAML configuration for OpenID Connect authentication in Elasticsearch. This setup enables OIDC-based authentication and specifies the OIDC realm to use for identity verification.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/watcher/licenses/failureaccess-NOTICE.txt#2025-04-21_snippet_8

LANGUAGE: yaml
CODE:
```
xpack.security.http.authentication.type: oidc
xpack.security.http.authentication.realm: oidc1
```

----------------------------------------

TITLE: Performing Subtraction in SQL (Infix)
DESCRIPTION: Illustrates the use of the infix subtraction operator (-) to find the difference between two numeric values in a SQL query. The result is returned as a column named 'x'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-operators-math.md#_snippet_1

LANGUAGE: sql
CODE:
```
SELECT 1 - 1 AS x;
```

----------------------------------------

TITLE: Remove Elasticsearch EC2 Discovery Plugin Shell
DESCRIPTION: Executes the command-line utility to remove the EC2 discovery plugin from Elasticsearch. The node must be stopped before executing this command. Requires appropriate user permissions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-ec2.md#_snippet_1

LANGUAGE: sh
CODE:
```
sudo bin/elasticsearch-plugin remove discovery-ec2
```

----------------------------------------

TITLE: Requesting Variable Width Histogram Aggregation in Elasticsearch
DESCRIPTION: This snippet demonstrates how to request a variable width histogram aggregation with a target of 2 buckets on the 'price' field in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-variablewidthhistogram-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "prices": {
      "variable_width_histogram": {
        "field": "price",
        "buckets": 2
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining Test Parameters for ESQL Function in Elasticsearch
DESCRIPTION: This snippet defines the parameters for an ESQL function test case. It specifies the 'input' parameter, which is the input to be hashed by the function being tested.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/parameters/md5.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
**Parameters**

`input`
:   Input to hash.
```

----------------------------------------

TITLE: GeoPoint Emit Function Static Import
DESCRIPTION: Defines static import for the emit callback function used to collect field values, binding it to the GeoPointFieldScript Emit implementation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.geo_point_field.txt#2025-04-21_snippet_2

LANGUAGE: painless
CODE:
```
static_import {
    void emit(org.elasticsearch.script.GeoPointFieldScript, double, double) bound_to org.elasticsearch.script.GeoPointFieldScript$Emit
}
```

----------------------------------------

TITLE: Restricting Default Temp File Creation Methods
DESCRIPTION: Forbids using temporary file/directory creation methods without explicitly specifying a location.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/build-tools-internal/src/main/resources/forbidden/jdk-signatures.txt#2025-04-21_snippet_3

LANGUAGE: plaintext
CODE:
```
@defaultMessage Specify a location for the temp file/directory instead.
java.nio.file.Files#createTempDirectory(java.lang.String,java.nio.file.attribute.FileAttribute[])
java.nio.file.Files#createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])
```

----------------------------------------

TITLE: Basic Extended Stats Aggregation Query in Elasticsearch
DESCRIPTION: Demonstrates how to perform a basic extended stats aggregation on a grade field to compute comprehensive statistics including variance and standard deviation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-extendedstats-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /exams/_search
{
  "size": 0,
  "aggs": {
    "grades_stats": { "extended_stats": { "field": "grade" } }
  }
}
```

----------------------------------------

TITLE: Translating SQL Term Equality Query to Elasticsearch JSON
DESCRIPTION: This snippet demonstrates the translation of a simple SQL term equality query into an Elasticsearch term query. It checks for an exact match on the 'some.string' field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
SELECT some.string FROM test WHERE some.string = 'value';
```

LANGUAGE: json
CODE:
```
"term":{"some.string.typical":{"value":"value"
```

----------------------------------------

TITLE: Defining Object Class Methods in Java
DESCRIPTION: This snippet shows the public methods of the java.lang.Object class. It includes the fundamental methods that all Java objects inherit.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.lang.txt#2025-04-21_snippet_16

LANGUAGE: Java
CODE:
```
class java.lang.Object {
  boolean equals(Object)
  int hashCode()
  String toString()
}
```

----------------------------------------

TITLE: Running Java Unit Tests for APM Data Plugin
DESCRIPTION: Gradle command to execute unit tests for the APM data plugin, covering low-level parsing and resource loading functionality
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/apm-data/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
./gradlew x-pack:plugin:apm-data:test
```

----------------------------------------

TITLE: Dropping Column Using ESQL
DESCRIPTION: Demonstrates how to remove the 'height' column from the 'employees' table using ESQL's DROP clause. The query performs a simple column removal operation on the specified table.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/examples/drop.csv-spec/height.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM employees
| DROP height
```

----------------------------------------

TITLE: ESQL Median Function Parameter Documentation
DESCRIPTION: Documentation for the 'number' parameter used in an ESQL median calculation function. The parameter accepts expressions that output values for median calculation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/parameters/median.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.

**Parameters**

`number`
:   Expression that outputs values to calculate the median of.
```

----------------------------------------

TITLE: Negating Queries in YAML using KQL
DESCRIPTION: This code shows how to negate queries in KQL using the 'not' keyword, useful for excluding specific documents from results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/kql.md#2025-04-21_snippet_4

LANGUAGE: yaml
CODE:
```
NOT http.request.method: GET
```

----------------------------------------

TITLE: Multiple Reference Points Geo Sort in Elasticsearch
DESCRIPTION: Demonstrates geo-distance sorting with multiple reference points for distance calculation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/sort-search-results.md#2025-04-21_snippet_17

LANGUAGE: console
CODE:
```
GET /_search
{
  "sort": [
    {
      "_geo_distance": {
        "pin.location": [ [ -70, 40 ], [ -71, 42 ] ],
        "order": "asc",
        "unit": "km"
      }
    }
  ],
  "query": {
    "term": { "user": "kimchy" }
  }
}
```

----------------------------------------

TITLE: MV_MAX Function Documentation Includes
DESCRIPTION: Markdown include directives for various documentation sections including parameters, description, types, and examples.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/mv_max.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
:::{include} ../parameters/mv_max.md\n:::\n\n:::{include} ../description/mv_max.md\n:::\n\n:::{include} ../types/mv_max.md\n:::\n\n:::{include} ../examples/mv_max.md\n:::
```

----------------------------------------

TITLE: Configuring Lowercase Processor in Elasticsearch
DESCRIPTION: This snippet demonstrates how to configure the lowercase processor in an Elasticsearch ingest pipeline. It specifies the 'field' option to indicate which field should be converted to lowercase.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/lowercase-processor.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
{
  "lowercase": {
    "field": "foo"
  }
}
```

----------------------------------------

TITLE: Multi-line Jinja2 Template for Elasticsearch Network Settings
DESCRIPTION: An example of a multi-line Jinja2 template for Elasticsearch network configuration. It demonstrates setting up network binding using host values with a default fallback to localhost.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/distribution/tools/ansi-console/licenses/jansi-NOTICE.txt#2025-04-21_snippet_5

LANGUAGE: text
CODE:
```
network:
  host: {{ network_host | default('_local_') }}
```

----------------------------------------

TITLE: Calculating Numeric Sign using SIGNUM in ESQL
DESCRIPTION: Demonstrates how to use the SIGNUM function to determine the sign of a numeric value. Returns -1 for negative numbers, 0 for zero, and 1 for positive numbers.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/signum.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW d = 100.0
| EVAL s = SIGNUM(d)
```

----------------------------------------

TITLE: ESQL Function Parameter Documentation
DESCRIPTION: Documentation template showing the 'field' parameter definition including type information and support for single/multi-valued inputs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/parameters/to_datetime.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.

**Parameters**

`field`
:   Input value. The input can be a single- or multi-valued column or an expression.
```

----------------------------------------

TITLE: Escaping Field Names in EQL
DESCRIPTION: Demonstrates how to escape field names that contain hyphens, spaces, or start with numerals using backticks, and how to escape backticks within field names.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_4

LANGUAGE: eql
CODE:
```
`my-field`
`my field`
`6myfield`
```

LANGUAGE: eql
CODE:
```
my`field -> `my``field`
```

----------------------------------------

TITLE: Convert Node Keystore to PKCS#12
DESCRIPTION: Converts the node's JKS keystore to PKCS#12 format for private key extraction
SOURCE: https://github.com/elastic/elasticsearch/blob/main/build-tools-internal/src/main/resources/test/ssl/README.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
keytool -importkeystore -srckeystore test-node.jks -srcstorepass keypass -destkeystore test-node.p12 -deststoretype PKCS12 -deststorepass keypass
```

----------------------------------------

TITLE: ESQL Function Documentation Comment
DESCRIPTION: Generated documentation header for the cosine function implementation, including a warning about manual edits and a link to mathematical reference.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/cos.md#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.
```

----------------------------------------

TITLE: Add Weeks with DATE_ADD - SQL
DESCRIPTION: Example using DATE_ADD to add 10 weeks to a datetime value. The output shows the resulting datetime.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_26

LANGUAGE: SQL
CODE:
```
SELECT DATE_ADD('week', 10, '2019-09-04T11:22:33.000Z'::datetime) AS "+10 weeks";
```

----------------------------------------

TITLE: Defining Modular Plugin Entitlements (YAML)
DESCRIPTION: This YAML snippet shows how to define security entitlements for a modular Elasticsearch plugin and its dependencies in the `entitlement-policy.yaml` file. Entitlements are granted to specific Java modules, allowing them to perform restricted actions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/extend/creating-classic-plugins.md#_snippet_1

LANGUAGE: YAML
CODE:
```
org.elasticsearch.example-plugin:
  - manage_threads
com.example.api.client:
  - set_https_connection_properties
  - outbound_network
```

----------------------------------------

TITLE: Bucket Key Calculation in Histogram Aggregation
DESCRIPTION: The formula used to calculate which bucket a value falls into in a histogram aggregation. The interval must be positive, and the offset must be between 0 and the interval.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-histogram-aggregation.md#2025-04-21_snippet_1

LANGUAGE: java
CODE:
```
bucket_key = Math.floor((value - offset) / interval) * interval + offset
```

----------------------------------------

TITLE: Running Connector Service Docker Image
DESCRIPTION: Shows a `docker run` command to start the Elastic Connector Service using its Docker image. It mounts the configuration file, connects to a network, and runs the ingestion command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-ms-sql.md#_snippet_4

LANGUAGE: sh
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: Max Aggregation with Missing Values
DESCRIPTION: Demonstrates how to handle missing values in max aggregation by specifying a default value for documents missing the aggregated field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-max-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
POST /sales/_search
{
  "aggs" : {
      "grade_max" : {
          "max" : {
              "field" : "grade",
              "missing": 10
          }
      }
  }
}
```

----------------------------------------

TITLE: Indexing Document with Search-as-you-type Field
DESCRIPTION: Demonstrates indexing a document with a search_as_you_type field. The text is automatically analyzed and indexed in all subfields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/search-as-you-type.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1?refresh
{
  "my_field": "quick brown fox jump lazy dog"
}
```

----------------------------------------

TITLE: Ordering by Multi-Value Sub-aggregation in Elasticsearch
DESCRIPTION: Example demonstrating bucket ordering using multi-value metrics sub-aggregation with playback statistics.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-terms-aggregation.md#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
GET /_search
{
  "aggs": {
    "genres": {
      "terms": {
        "field": "genre",
        "order": { "playback_stats.max": "desc" }
      },
      "aggs": {
        "playback_stats": { "stats": { "field": "play_count" } }
      }
    }
  }
}
```

----------------------------------------

TITLE: Describing Concat Function in Elasticsearch SQL
DESCRIPTION: This snippet provides a brief description of the Concat function in ESQL. It explains that the function concatenates two or more strings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/concat.md#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
**Description**

Concatenates two or more strings.
```

----------------------------------------

TITLE: Interactive Program License Notice
DESCRIPTION: Example notice text for interactive programs to display their copyright and license information at startup.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/ingest-attachment/licenses/tika-parser-html-module-NOTICE.txt#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
Gnomovision version 69, Copyright (C) year name of author
Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type
`show w'. This is free software, and you are welcome to redistribute
it under certain conditions; type `show c' for details.
```

----------------------------------------

TITLE: Basic ROW Command Syntax in ESQL
DESCRIPTION: Shows the basic syntax for creating a row with custom columns and values using the ROW command. Allows specification of multiple column-value pairs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/row.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW column1 = value1[, ..., columnN = valueN]
```

----------------------------------------

TITLE: Hourly Event Count in ESQL
DESCRIPTION: Creates hourly buckets for the last 24 hours and calculates event counts per hour.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/bucket.md#2025-04-21_snippet_6

LANGUAGE: esql
CODE:
```
FROM sample_data
| WHERE @timestamp >= NOW() - 1 day and @timestamp < NOW()
| STATS COUNT(*) BY bucket = BUCKET(@timestamp, 25, NOW() - 1 day, NOW())
```

----------------------------------------

TITLE: Configuring Transport Authentication in Elasticsearch
DESCRIPTION: YAML configuration for securing the Elasticsearch transport layer. This setup configures the authentication type for node-to-node communication using client certificates (PKI).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/watcher/licenses/failureaccess-NOTICE.txt#2025-04-21_snippet_11

LANGUAGE: yaml
CODE:
```
xpack.security.transport.authentication.type: pki
```

----------------------------------------

TITLE: Configuring Redis Connector for Docker Deployment
DESCRIPTION: YAML configuration for setting up the Redis connector as a self-managed connector using Docker. Includes Elasticsearch connection details and connector settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-redis.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: redis
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA> # Optional. If not provided, the connector will use the elasticsearch.api_key instead
```

----------------------------------------

TITLE: Equivalent Synonyms without Explicit Mapping
DESCRIPTION: Defines synonym groups where token replacement behavior depends on the expand parameter in token filter configuration
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/src/test/cluster/config/analysis/synonym.txt#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
ipod, i-pod, i pod
foozball , foosball
universe , cosmos
lol, laughing out loud
```

----------------------------------------

TITLE: Configuring Date Histogram with Calendar Interval in Elasticsearch
DESCRIPTION: This example demonstrates how to configure a date histogram aggregation with a calendar interval of one month in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-datehistogram-aggregation.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
POST /sales/_search?size=0
{
  "aggs": {
    "sales_over_time": {
      "date_histogram": {
        "field": "date",
        "calendar_interval": "month"
      }
    }
  }
}
```

----------------------------------------

TITLE: Example Usage of elasticsearch-syskeygen Command in Shell
DESCRIPTION: This example demonstrates how to generate a system_key file in the default Elasticsearch config directory. The command is executed without any additional parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/syskeygen.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
bin/elasticsearch-syskeygen
```

----------------------------------------

TITLE: Convert Functions in SQL Group By
DESCRIPTION: Examples of CONVERT functions used in GROUP BY clauses with date/time extractions and type casting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
SELECT CONVERT(ABS(EXTRACT(YEAR FROM date)), SQL_BIGINT)
FROM test
GROUP BY CONVERT(ABS(EXTRACT(YEAR FROM date)), SQL_BIGINT)
ORDER BY CONVERT(ABS(EXTRACT(YEAR FROM date)), SQL_BIGINT) NULLS FIRST;
```

LANGUAGE: json
CODE:
```
InternalSqlScriptUtils.cast(InternalSqlScriptUtils.abs(InternalSqlScriptUtils.dateTimeExtract(InternalQlScriptUtils.docValue(doc,params.v0),params.v1,params.v2)),params.v3)
```

----------------------------------------

TITLE: Time Zone Handling in Date Histogram Aggregation
DESCRIPTION: This code snippet illustrates how Elasticsearch processes dates for bucketing when a specific time zone is specified in a date histogram aggregation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-datehistogram-aggregation.md#2025-04-21_snippet_6

LANGUAGE: java
CODE:
```
bucket_key = localToUtc(Math.floor(utcToLocal(value) / interval) * interval))
```

----------------------------------------

TITLE: Analyzing annotated text in Elasticsearch
DESCRIPTION: Uses the _analyze API to demonstrate how annotated text is tokenized, including both text and annotation tokens.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/mapper-annotated-text-usage.md#2025-04-21_snippet_1

LANGUAGE: js
CODE:
```
GET my-index-000001/_analyze
{
  "field": "my_field",
  "text":"Investors in [Apple](Apple+Inc.) rejoiced."
}
```

LANGUAGE: js
CODE:
```
{
  "tokens": [
    {
      "token": "investors",
      "start_offset": 0,
      "end_offset": 9,
      "type": "<ALPHANUM>",
      "position": 0
    },
    {
      "token": "in",
      "start_offset": 10,
      "end_offset": 12,
      "type": "<ALPHANUM>",
      "position": 1
    },
    {
      "token": "Apple Inc.",
      "start_offset": 13,
      "end_offset": 18,
      "type": "annotation",
      "position": 2
    },
    {
      "token": "apple",
      "start_offset": 13,
      "end_offset": 18,
      "type": "<ALPHANUM>",
      "position": 2
    },
    {
      "token": "rejoiced",
      "start_offset": 19,
      "end_offset": 27,
      "type": "<ALPHANUM>",
      "position": 3
    }
  ]
}
```

----------------------------------------

TITLE: Calculating Percentile on Derived Value in Elasticsearch SQL
DESCRIPTION: Shows how to calculate the 95th percentile of a derived value (monthly salary: salary / 12.0), grouped by 'languages'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-aggs.md#_snippet_41

LANGUAGE: SQL
CODE:
```
SELECT languages, PERCENTILE(salary / 12.0, 95) AS "95th" FROM emp
       GROUP BY languages;
```

----------------------------------------

TITLE: Running OpenTelemetry Integration Tests with Gradle
DESCRIPTION: Executes YAML REST tests for index templates and ingest pipeline functionality in the OpenTelemetry Data plugin
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/otel-data/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
./gradlew :x-pack:plugin:otel-data:yamlRestTest
```

----------------------------------------

TITLE: Using TESTRESPONSE Marker with Modifiers in Elasticsearch Docs
DESCRIPTION: Examples of using the TESTRESPONSE marker with various modifiers for controlling response assertions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/README.md#2025-04-21_snippet_4

LANGUAGE: markdown
CODE:
```
% TESTRESPONSE[s/foo/bar/]
% TESTRESPONSE[s/"took": 25/"took": $body.took/]
% TESTRESPONSE[s/\d+/$body.$_path/]
% TESTRESPONSE[non_json]
% TESTRESPONSE[skip:reason]
```

----------------------------------------

TITLE: Querying Flattened Fields in Elasticsearch
DESCRIPTION: Examples of querying flattened fields using term queries, both for top-level field and specific keys using dot notation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/flattened.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST bug_reports/_search
{
  "query": {
    "term": {"labels": "urgent"}
  }
}
```

LANGUAGE: console
CODE:
```
POST bug_reports/_search
{
  "query": {
    "term": {"labels.release": "v1.3.0"}
  }
}
```

----------------------------------------

TITLE: Standard Analyzer in Elasticsearch
DESCRIPTION: Default analyzer that splits text on word boundaries, removes punctuation, lowercases terms, and supports stop word removal using Unicode Text Segmentation algorithm.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analyzer-reference.md#2025-04-21_snippet_0

LANGUAGE: elasticsearch
CODE:
```
"analyzer": "standard"
```

----------------------------------------

TITLE: Configuring Extraction Service in YAML
DESCRIPTION: Basic YAML configuration for enabling the self-hosted extraction service in the connector's config.yml file. Specifies the host endpoint for the extraction service.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-content-extraction.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
# data-extraction-service settings
extraction_service:
  host: http://localhost:8090
```

----------------------------------------

TITLE: Conditional Counting with WHERE Clause in ESQL
DESCRIPTION: This example demonstrates how to use a WHERE clause to filter rows before counting, effectively performing a conditional count operation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/count.md#2025-04-21_snippet_3

LANGUAGE: esql
CODE:
```
ROW n=1
| WHERE n < 0
| STATS COUNT(n)
```

----------------------------------------

TITLE: Retrieving Stored Payloads
DESCRIPTION: Uses the term vectors API to retrieve the stored tokens and their base64-encoded payloads.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-delimited-payload-tokenfilter.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
GET text_payloads/_termvectors/1
{
  "fields": [ "text" ],
  "payloads": true
}
```

----------------------------------------

TITLE: Interval Minimization Example in Elasticsearch
DESCRIPTION: Demonstrates the concept of interval minimization in Elasticsearch with a query searching for 'salty' contained within the phrase 'hot porridge'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-intervals-query.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
POST _search
{
  "query": {
    "intervals" : {
      "my_text" : {
        "match" : {
          "query" : "salty",
          "filter" : {
            "contained_by" : {
              "match" : {
                "query" : "hot porridge"
              }
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Ordering by Count Ascending in Terms Aggregation
DESCRIPTION: Example showing how to order terms by ascending document count (not recommended due to unbounded error).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-terms-aggregation.md#2025-04-21_snippet_9

LANGUAGE: json
CODE:
```
GET /_search
{
  "aggs": {
    "genres": {
      "terms": {
        "field": "genre",
        "order": { "_count": "asc" }
      }
    }
  }
}
```

----------------------------------------

TITLE: Calculating Number of Actors in Painless for Elasticsearch
DESCRIPTION: This script calculates the number of actors by getting the size of the 'actors' field, which is stored as a keyword array.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-field-context.md#2025-04-21_snippet_1

LANGUAGE: painless
CODE:
```
doc['actors'].size()
```

----------------------------------------

TITLE: Define TRIM Function Syntax - SQL
DESCRIPTION: Provides the standard SQL syntax definition for the TRIM string function as implemented in Elasticsearch SQL. It specifies the single string argument required for the function call.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-string.md#_snippet_2

LANGUAGE: sql
CODE:
```
TRIM(string_exp) <1>
```

----------------------------------------

TITLE: Defining Brazilian Stop Words
DESCRIPTION: Defines Brazilian Portuguese stop words for use in Elasticsearch analysis, linked to their Lucene definition.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_8

LANGUAGE: markdown
CODE:
```
`_brazilian_` (Brazilian Portuguese)
:   [Brazilian Portuguese stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/br/stopwords.txt)
```

----------------------------------------

TITLE: Example Content of Stemmer Override Rules File
DESCRIPTION: This snippet shows the content of a stemmer override rules file. It defines custom stemming rules for specific words.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stemmer-override-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
running, runs => run

stemmer => stemmer
```

----------------------------------------

TITLE: MPL 2.0 Secondary License Incompatibility Notice
DESCRIPTION: Notice text indicating that the source code is incompatible with secondary licenses under MPL 2.0.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/client/rest/licenses/httpclient-LICENSE.txt#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
This Source Code Form is "Incompatible With Secondary Licenses", as\ndefined by the Mozilla Public License, v. 2.0.
```

----------------------------------------

TITLE: Result Document after Object Array Processing
DESCRIPTION: The resulting document after the Foreach processor has removed the id field from each person object in the array.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/foreach-processor.md#2025-04-21_snippet_5

LANGUAGE: js
CODE:
```
{
  "persons" : [
    {
      "name" : "John Doe"
    },
    {
      "name" : "Jane Doe"
    }
  ]
}
```

----------------------------------------

TITLE: ESQL Function Parameter Documentation
DESCRIPTION: Documentation for a numeric parameter in an ESQL function. The parameter accepts numeric expressions and returns null if the input is null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/parameters/exp.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.

**Parameters**

`number`
:   Numeric expression. If `null`, the function returns `null`.
```

----------------------------------------

TITLE: Expand Parameter Synonym Behavior Demonstration
DESCRIPTION: Illustrates how the expand parameter affects synonym token expansion and replacement strategies
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/src/test/cluster/config/analysis/synonym.txt#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
# If expand==true
ipod, i-pod, i pod => ipod, i-pod, i pod

# If expand==false
ipod, i-pod, i pod => ipod
```

----------------------------------------

TITLE: Defining Lithuanian Stop Words
DESCRIPTION: Defines Lithuanian stop words to be used within Elasticsearch, providing a link to the Lucene document.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_28

LANGUAGE: markdown
CODE:
```
`_lithuanian_`
:   [Lithuanian stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/lt/stopwords.txt)
```

----------------------------------------

TITLE: Configuring Transport Tracer Patterns
DESCRIPTION: Configures which transport actions will be traced using include and exclude patterns.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/networking-settings.md#2025-04-21_snippet_17

LANGUAGE: console
CODE:
```
PUT _cluster/settings
{
   "persistent" : {
      "transport.tracer.include" : "*",
      "transport.tracer.exclude" : "internal:coordination/fault_detection/*"
   }
}
```

----------------------------------------

TITLE: GeoPoint Field Script Factory Declaration
DESCRIPTION: Declares the GeoPointFieldScript Factory class as whitelisted for painless scripting with no import required.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.geo_point_field.txt#2025-04-21_snippet_1

LANGUAGE: painless
CODE:
```
class org.elasticsearch.script.GeoPointFieldScript$Factory @no_import {}
```

----------------------------------------

TITLE: Defining Serbian Stop Words
DESCRIPTION: Lists Serbian stop words for use in Elasticsearch, directing to the corresponding Lucene stop words document.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_34

LANGUAGE: markdown
CODE:
```
`_serbian_`
:   [Serbian stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/sr/stopwords.txt)
```

----------------------------------------

TITLE: Output Document with Override Option
DESCRIPTION: Shows the result when the override option is true, replacing the existing nested value instead of merging.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/dot-expand-processor.md#2025-04-21_snippet_6

LANGUAGE: js
CODE:
```
{
  "foo" : {
    "bar" : "value2"
  }
}
```

----------------------------------------

TITLE: Creating Custom Analyzer with Elision Filter
DESCRIPTION: Example of creating a custom analyzer that uses the elision filter with a whitespace tokenizer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-elision-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT /elision_example
{
  "settings": {
    "analysis": {
      "analyzer": {
        "whitespace_elision": {
          "tokenizer": "whitespace",
          "filter": [ "elision" ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Rename Processor in Elasticsearch Ingest Pipeline
DESCRIPTION: This snippet demonstrates how to configure the Rename processor in an Elasticsearch ingest pipeline. It renames the 'provider' field to 'cloud.provider'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/rename-processor.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "rename": {
    "field": "provider",
    "target_field": "cloud.provider"
  }
}
```

----------------------------------------

TITLE: Defining Italian Stop Words
DESCRIPTION: Defines Italian stop words for use in Elasticsearch analysis, linking to the defined Lucene stop words.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_26

LANGUAGE: markdown
CODE:
```
`_italian_`
:   [Italian stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/snowball/italian_stop.txt)
```

----------------------------------------

TITLE: ST_ENVELOPE Function Documentation Header
DESCRIPTION: Markdown header and metadata for ST_ENVELOPE function documentation, including a note about auto-generation and link references.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/st_envelope.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.

## `ST_ENVELOPE` [esql-st_envelope]
```

----------------------------------------

TITLE: HDR Histogram Implementation for Percentile Ranks in Elasticsearch
DESCRIPTION: Shows how to use HDR Histogram implementation for percentile ranks calculation, which offers better performance for latency measurements with configurable precision.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-percentile-rank-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
GET latency/_search
{
  "size": 0,
  "aggs": {
    "load_time_ranks": {
      "percentile_ranks": {
        "field": "load_time",
        "values": [ 500, 600 ],
        "hdr": {
          "number_of_significant_value_digits": 3
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Running Elasticsearch MongoDB Connector Docker Image
DESCRIPTION: Docker command to run the Elasticsearch MongoDB connector service with configuration volume mount
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-mongodb.md#2025-04-21_snippet_6

LANGUAGE: sh
CODE:
```
docker run \
-v ~/connectors-config:/config \
--network "elastic" \
--tty \
--rm \
docker.elastic.co/integrations/elastic-connectors:9.0.0 \
/app/bin/elastic-ingest \
-c /config/config.yml
```

----------------------------------------

TITLE: EQL Single Numeric Filter Equality
DESCRIPTION: Filters processes based on a numeric field `serial_event_id` equaling 1. Checks for the transformation of EQL to JSON query containing the term condition.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_1

LANGUAGE: basic
CODE:
```
process where serial_event_id == 1
;
contains "term":{"serial_event_id":{"value":1}
;
```

----------------------------------------

TITLE: ESQL Change Point Detection Example
DESCRIPTION: Example showing how to detect step changes in a dataset using the CHANGE_POINT command
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/README.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
ROW key=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]
| MV_EXPAND key
| EVAL value = CASE(key<13, 0, 42)
| CHANGE_POINT value ON key
| WHERE type IS NOT NULL
```

----------------------------------------

TITLE: Equality Equals with Boolean Type in Painless
DESCRIPTION: Demonstrates the usage of the equality equals operator with boolean values in Painless.  It declares two boolean variables, assigns them values, and then uses the '==' operator to compare them, updating the variables with the results of the comparison.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_11

LANGUAGE: painless
CODE:
```
"boolean a = true;  <1>
boolean b = false; <2>
a = a == false;    <3>
b = a == b;        <4>"
```

----------------------------------------

TITLE: Boolean Compound Assignment Examples
DESCRIPTION: Shows compound assignments using boolean operators including AND, XOR, and OR operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-general.md#2025-04-21_snippet_7

LANGUAGE: painless
CODE:
```
boolean b = true;
b &= false;
b ^= false;
b |= true;
```

----------------------------------------

TITLE: Painless Script for Y-Coordinate Filtering
DESCRIPTION: This Painless script filters documents based on the Y-coordinate of a point field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_19

LANGUAGE: Painless
CODE:
```
InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.eq(InternalSqlScriptUtils.stY(InternalSqlScriptUtils.geoDocValue(doc,params.v0)),params.v1))
```

----------------------------------------

TITLE: Defining GraphQL Query for User Data
DESCRIPTION: This GraphQL query example demonstrates how to fetch user data with a variable ID, which can be used in the connector's configuration.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-graphql.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
query getUser($id: ID!) {
    user(id: $id) {
        name
        email
    }
}
```

----------------------------------------

TITLE: Defining DoubleStream Interface in Painless - Java
DESCRIPTION: Specifies the DoubleStream interface, which provides methods to handle streams of double values. It includes various operations such as filtering, mapping, reducing, and collecting in a double-specific manner.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.util.stream.txt#2025-04-21_snippet_2

LANGUAGE: Java
CODE:
```
class java.util.stream.DoubleStream {
  boolean allMatch(DoublePredicate)
  boolean anyMatch(DoublePredicate)
  OptionalDouble average()
  Stream boxed()
  DoubleStream.Builder builder()
  def collect(Supplier,ObjDoubleConsumer,BiConsumer)
  DoubleStream concat(DoubleStream,DoubleStream)
  long count()
  DoubleStream distinct()
  DoubleStream empty()
  DoubleStream filter(DoublePredicate)
  OptionalDouble findAny()
  OptionalDouble findFirst()
  DoubleStream flatMap(DoubleFunction)
  void forEach(DoubleConsumer)
  void forEachOrdered(DoubleConsumer)
  PrimitiveIterator.OfDouble iterator()
  DoubleStream limit(long)
  DoubleStream map(DoubleUnaryOperator)
  IntStream mapToInt(DoubleToIntFunction)
  LongStream mapToLong(DoubleToLongFunction)
  Stream mapToObj(DoubleFunction)
  OptionalDouble max()
  OptionalDouble min()
  boolean noneMatch(DoublePredicate)
  DoubleStream of(double[])
  DoubleStream peek(DoubleConsumer)
  OptionalDouble reduce(DoubleBinaryOperator)
  double reduce(double,DoubleBinaryOperator)
  DoubleStream sequential()
  DoubleStream skip(long)
  DoubleStream sorted()
  Spliterator.OfDouble spliterator()
  double sum()
  DoubleSummaryStatistics summaryStatistics()
  double[] toArray()
}
```

----------------------------------------

TITLE: Terms Aggregation Response with _doc_count in Elasticsearch
DESCRIPTION: This snippet shows the response from the terms aggregation, where the doc_count values reflect the _doc_count values from the indexed documents (62 and 45) rather than counting each document as 1.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-doc-count-field.md#2025-04-21_snippet_3

LANGUAGE: console-result
CODE:
```
{
    ...
    "aggregations" : {
        "histogram_titles" : {
            "doc_count_error_upper_bound": 0,
            "sum_other_doc_count": 0,
            "buckets" : [
                {
                    "key" : "histogram_2",
                    "doc_count" : 62
                },
                {
                    "key" : "histogram_1",
                    "doc_count" : 45
                }
            ]
        }
    }
}
```

----------------------------------------

TITLE: Unfiltered Significant Text Aggregation Results (JSON)
DESCRIPTION: Displays a JSON response snippet showing the `keywords` bucket from an Elasticsearch `significant_text` aggregation before filtering duplicate text. It illustrates how terms derived from repetitive content, such as 'pozmantier', can appear with high scores.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-significanttext-aggregation.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  ...
  "aggregations": {
    "sample": {
      "doc_count": 35,
      "keywords": {
        "doc_count": 35,
        "buckets": [
          {
            "key": "elasticsearch",
            "doc_count": 35,
            "score": 28570.428571428572,
            "bg_count": 35
          },
          ...
          {
            "key": "currensee",
            "doc_count": 8,
            "score": 6530.383673469388,
            "bg_count": 8
          },
          ...
          {
            "key": "pozmantier",
            "doc_count": 4,
            "score": 3265.191836734694,
            "bg_count": 4
          },
          ...

}
```

----------------------------------------

TITLE: Negating Year-Month Interval in Elasticsearch SQL
DESCRIPTION: This snippet shows how to negate a year-month `INTERVAL` value. It takes the interval '49 years and 1 month' and applies the negative unary operator, resulting in a negative interval which is aliased as `result`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_4

LANGUAGE: SQL
CODE:
```
SELECT - INTERVAL '49-1' YEAR TO MONTH result;
```

----------------------------------------

TITLE: Extended Stats Bucket Aggregation Response Example
DESCRIPTION: Shows the response format for an extended stats bucket aggregation, including various statistical measures like count, min, max, average, sum, variance, and standard deviation bounds.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-extended-stats-bucket-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
{
   "took": 11,
   "timed_out": false,
   "_shards": ...,
   "hits": ...,
   "aggregations": {
      "sales_per_month": {
         "buckets": [
            {
               "key_as_string": "2015/01/01 00:00:00",
               "key": 1420070400000,
               "doc_count": 3,
               "sales": {
                  "value": 550.0
               }
            },
            {
               "key_as_string": "2015/02/01 00:00:00",
               "key": 1422748800000,
               "doc_count": 2,
               "sales": {
                  "value": 60.0
               }
            },
            {
               "key_as_string": "2015/03/01 00:00:00",
               "key": 1425168000000,
               "doc_count": 2,
               "sales": {
                  "value": 375.0
               }
            }
         ]
      },
      "stats_monthly_sales": {
         "count": 3,
         "min": 60.0,
         "max": 550.0,
         "avg": 328.3333333333333,
         "sum": 985.0,
         "sum_of_squares": 446725.0,
         "variance": 41105.55555555556,
         "variance_population": 41105.55555555556,
         "variance_sampling": 61658.33333333334,
         "std_deviation": 202.74505063146563,
         "std_deviation_population": 202.74505063146563,
         "std_deviation_sampling": 248.3109609609156,
         "std_deviation_bounds": {
           "upper": 733.8234345962646,
           "lower": -77.15676792959795,
           "upper_population" : 733.8234345962646,
           "lower_population" : -77.15676792959795,
           "upper_sampling" : 824.9552552551645,
           "lower_sampling" : -168.28858858849787
         }
      }
   }
}
```

----------------------------------------

TITLE: Using Wrapper Query with Base64 Encoded Search Terms in Elasticsearch
DESCRIPTION: Example of the Wrapper query that accepts a base64 encoded query string. The encoded string represents a term query searching for documents where user.id equals "kimchy". This is particularly useful in Spring Data Elasticsearch when adding custom queries via @Query() annotations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-wrapper-query.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /_search
{
  "query": {
    "wrapper": {
      "query": "eyJ0ZXJtIiA6IHsgInVzZXIuaWQiIDogImtpbWNoeSIgfX0=" <1>
    }
  }
}
```

----------------------------------------

TITLE: Remainder with 'def' Type in Painless
DESCRIPTION: Demonstrates using the remainder operator ('%') with the 'def' type in Painless. The 'def' type dynamically infers the type, affecting the result of the remainder operation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_19

LANGUAGE: painless
CODE:
```
def x = 5%4; <1>
def y = x%2; <2>
```

----------------------------------------

TITLE: Defining Java Byte Class
DESCRIPTION: This snippet defines the Byte class in Java that serves as the wrapper for the byte primitive type. It includes methods for comparison, parsing byte values from strings, and converting byte values to their integer or long counterparts. The class provides constants like MAX_VALUE and MIN_VALUE for easy reference.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.lang.txt#2025-04-21_snippet_5

LANGUAGE: Java
CODE:
```
class java.lang.Byte {
  int BYTES
  byte MAX_VALUE
  byte MIN_VALUE
  int SIZE
  int compare(byte,byte)
  int compareTo(Byte)
  Byte decode(String)
  int hashCode(byte)
  byte parseByte(String)
  byte parseByte(String,int)
  String toString(byte)
  int toUnsignedInt(byte)
  long toUnsignedLong(byte)
  Byte valueOf(byte)
  Byte valueOf(String,int)
}
```

----------------------------------------

TITLE: Removing Elasticsearch Analysis Nori Plugin sh
DESCRIPTION: Removes the analysis-nori plugin for Elasticsearch using the plugin manager. This command requires the Elasticsearch node to be stopped before execution.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-nori.md#_snippet_1

LANGUAGE: sh
CODE:
```
sudo bin/elasticsearch-plugin remove analysis-nori
```

----------------------------------------

TITLE: Kuromoji Iteration Mark Configuration Properties
DESCRIPTION: Configuration settings for the kuromoji_iteration_mark character filter showing available parameters for controlling kanji and kana iteration mark normalization.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-charfilter.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
normalize_kanji: true
normalize_kana: true
```

----------------------------------------

TITLE: Finding Maximum String in Keyword Array using MV_MAX in ESQL
DESCRIPTION: Example demonstrating MV_MAX function usage with keyword (string) type arrays. Compares strings using their UTF-8 representation byte by byte, returning "zoo" as the maximum value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/mv_max.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
ROW a=["foo", "zoo", "bar"]
| EVAL max_a = MV_MAX(a)
```

----------------------------------------

TITLE: Using Wildcard in SELECT Statement
DESCRIPTION: Example of using the wildcard (*) to select all columns from a table, returning all top-level fields while ignoring sub-fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
SELECT * FROM emp LIMIT 1;
```

----------------------------------------

TITLE: Generating Disjunction of Function and Negated Function Query in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create a query combining a function and its negation in Elasticsearch. It checks for user length conditions with both positive and negative assertions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_27

LANGUAGE: eql
CODE:
```
process where not (length(user) == 1) and length(user) == 1
```

LANGUAGE: json
CODE:
```
{"bool":{"must":[{"script":{"script":{"source":"InternalQlScriptUtils.not(InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.eq(InternalEqlScriptUtils.length(X0),params.v1))))","params":{"v0":"user","v1":1}}}},{"script":{"script":{"source":"InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.eq(InternalEqlScriptUtils.length(X0),params.v1)))","params":{"v0":"user","v1":1}}}}]}}
```

----------------------------------------

TITLE: Calculating Hyperbolic Tangent in ESQL
DESCRIPTION: This snippet demonstrates how to use the TANH function in ESQL to calculate the hyperbolic tangent of a number. It creates a row with a single value and then applies the TANH function to that value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/tanh.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=1.8
| EVAL tanh=TANH(a)
```

----------------------------------------

TITLE: Defining Nori Analyzer Components in YAML
DESCRIPTION: Lists the components of the nori analyzer, including the nori_tokenizer and various token filters. It also mentions supported settings for customization.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-nori-analyzer.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
---
mapped_pages:
  - https://www.elastic.co/guide/en/elasticsearch/plugins/current/analysis-nori-analyzer.html
---
```

----------------------------------------

TITLE: HashMap Definition in Java
DESCRIPTION: This snippet defines the HashMap class which implements the Map interface. It provides methods for creating hash-based key-value pairs, including store, retrieve, and clone operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.util.txt#2025-04-21_snippet_18

LANGUAGE: Java
CODE:
```
class java.util.HashMap {
  ()
  (Map)
  def clone()
}
```

----------------------------------------

TITLE: Example Response for Normalize Aggregation Query
DESCRIPTION: Sample response from an Elasticsearch query using the Normalize aggregation to calculate percent of total sales, showing the structure of the returned aggregations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-normalize-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console-result
CODE:
```
{
   "took": 11,
   "timed_out": false,
   "_shards": ...,
   "hits": ...,
   "aggregations": {
      "sales_per_month": {
         "buckets": [
            {
               "key_as_string": "2015/01/01 00:00:00",
               "key": 1420070400000,
               "doc_count": 3,
               "sales": {
                  "value": 550.0
               },
               "percent_of_total_sales": {
                  "value": 0.5583756345177665,
                  "value_as_string": "55.84%"
               }
            },
            {
               "key_as_string": "2015/02/01 00:00:00",
               "key": 1422748800000,
               "doc_count": 2,
               "sales": {
                  "value": 60.0
               },
               "percent_of_total_sales": {
                  "value": 0.06091370558375635,
                  "value_as_string": "06.09%"
               }
            },
            {
               "key_as_string": "2015/03/01 00:00:00",
               "key": 1425168000000,
               "doc_count": 2,
               "sales": {
                  "value": 375.0
               },
               "percent_of_total_sales": {
                  "value": 0.38071065989847713,
                  "value_as_string": "38.07%"
               }
            }
         ]
      }
   }
}
```

----------------------------------------

TITLE: Creating Docker Network
DESCRIPTION: This command creates a Docker network named `elastic`. This allows the extraction service, self-managed connector, and Elasticsearch to communicate within the same network.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-content-extraction.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
$ docker network create elastic
```

----------------------------------------

TITLE: Processed Document Result
DESCRIPTION: Example response showing the processed document with extracted attachment information for each file in the array.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/attachment.md#2025-04-21_snippet_14

LANGUAGE: console-result
CODE:
```
{
  "_index" : "my-index-000001",
  "_id" : "my_id",
  "_version" : 1,
  "_seq_no" : 50,
  "_primary_term" : 1,
  "found" : true,
  "_source" : {
    "attachments" : [
      {
        "filename" : "ipsum.txt",
        "attachment" : {
          "content_type" : "text/plain; charset=ISO-8859-1",
          "language" : "en",
          "content" : "this is\njust some text",
          "content_length" : 24
        }
      },
      {
        "filename" : "test.txt",
        "attachment" : {
          "content_type" : "text/plain; charset=ISO-8859-1",
          "language" : "en",
          "content" : "This is a test",
          "content_length" : 16
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: More Compact Script Error Format in ElasticSearch
DESCRIPTION: This snippet shows a more compact error response format for script exceptions in ElasticSearch. It still includes the cause information but with a simplified structure, focusing on the core error details.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/vector-tile/licenses/slf4j-api-NOTICE.txt#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "error": {
    "root_cause": [...],
    "type": "script_exception",
    "reason": "runtime error",
    "script_stack": [...],
    "script": "...",
    "lang": "painless",
    "caused_by": {
      "type": "illegal_argument_exception",
      "reason": "Dynamic method [org.elasticsearch.compute.ann.VectorSimilarity, cosineSimilarity, [double[] #1<local>, double[] #2<local>]] not found"
    }
  },
  "status": 500
}
```

----------------------------------------

TITLE: Generating SSH Keys and Certificate for Azure with OpenSSL
DESCRIPTION: Commands to generate the SSH keys and certificate required for Azure authentication. This creates a private key, certificate file, and certificate in DER format.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-azure-classic-long.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
# You may want to use another dir than /tmp
cd /tmp
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout azure-private.key -out azure-certificate.pem
chmod 600 azure-private.key azure-certificate.pem
openssl x509 -outform der -in azure-certificate.pem -out azure-certificate.cer
```

----------------------------------------

TITLE: Local Preference Search Query in Elasticsearch
DESCRIPTION: Example of performing a search query with a _local preference parameter to restrict searches to shards on the local node. Includes a match query to find documents by user.id.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-shard-routing.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET /my-index-000001/_search?preference=_local
{
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  }
}
```

----------------------------------------

TITLE: Displaying NOW Function Syntax in ESQL
DESCRIPTION: This code snippet embeds an SVG image that illustrates the syntax of the NOW function in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/now.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
:::{image} ../../../images/functions/now.svg
:alt: Embedded
:class: text-center
:::
```

----------------------------------------

TITLE: Generating Function Documentation with Gradle
DESCRIPTION: Commands to regenerate documentation for specific ESQL functions or all functions using Gradle test execution
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
./gradlew :x-pack:plugin:esql:test -Dtests.class='CaseTests'
```

LANGUAGE: bash
CODE:
```
./gradlew :x-pack:plugin:esql:test
```

----------------------------------------

TITLE: Defining Basque Stop Words
DESCRIPTION: Specifies the Basque stop words for Elasticsearch text analysis and links to the stop words in Lucene.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_6

LANGUAGE: markdown
CODE:
```
`_basque_`
:   [Basque stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/eu/stopwords.txt)
```

----------------------------------------

TITLE: Identifying Missing Tests for Consistency in Elasticsearch
DESCRIPTION: This Markdown comment highlights an area where test coverage is lacking in the Elasticsearch project, specifically for consistency-related functionality.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/rest-api-spec/src/yamlRestTest/resources/rest-api-spec/test/create/TODO.txt#2025-04-22_snippet_0

LANGUAGE: Markdown
CODE:
```
# consistency
```

----------------------------------------

TITLE: Testing ESQL Round Function with Positive Precision
DESCRIPTION: This snippet tests the round function with a positive precision, rounding to a specified number of decimal places.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/round.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
SELECT round(1.23, 1);
```

----------------------------------------

TITLE: Testing ESQL Round Function with Negative Precision
DESCRIPTION: This snippet tests the round function with a negative precision, rounding to digits left of the decimal point.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/round.md#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
SELECT round(123.45, -1);
```

----------------------------------------

TITLE: Basic Cartesian Centroid Aggregation
DESCRIPTION: Demonstrates a simple cartesian_centroid aggregation that computes the centroid of all museum locations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-cartesian-centroid-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /museums/_search?size=0
{
  "aggs": {
    "centroid": {
      "cartesian_centroid": {
        "field": "location"
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining German Stop Words
DESCRIPTION: Defines German stop words used in Elasticsearch, directing to the respective Lucene documentation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_20

LANGUAGE: markdown
CODE:
```
`_german_`
:   [German stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/snowball/german_stop.txt)
```

----------------------------------------

TITLE: Basic Percentiles Aggregation Query
DESCRIPTION: Basic query to calculate default percentiles (1,5,25,50,75,95,99) on a numeric field load_time.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-percentile-aggregation.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
GET latency/_search
{
  "size": 0,
  "aggs": {
    "load_time_outlier": {
      "percentiles": {
        "field": "load_time"
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Azure Blob Storage Connector via Elasticsearch API
DESCRIPTION: API call to create a new self-managed Azure Blob Storage connector in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-azure-blob.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
PUT _connector/my-azure_blob_storage-connector
{
  "index_name": "my-elasticsearch-index",
  "name": "Content synced from Azure Blob Storage",
  "service_type": "azure_blob_storage"
}
```

----------------------------------------

TITLE: ESQL Query Exceeding Maximum Limit
DESCRIPTION: Illustrates an ESQL query attempting to return more than the maximum allowed 10,000 rows.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/common/result-set-size-limitation.md#2025-04-21_snippet_2

LANGUAGE: esql
CODE:
```
FROM index | WHERE field0 == "value" | LIMIT 20000
```

----------------------------------------

TITLE: Using _only_nodes Preference Parameter in Elasticsearch
DESCRIPTION: Demonstrates the _only_nodes preference parameter which restricts search operations to specific nodes identified by their node IDs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/licenses/slf4j-api-NOTICE.txt#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
preference=_only_nodes:abc,xyz
```

----------------------------------------

TITLE: Japanese Normal Tokenization Example
DESCRIPTION: Example output of kuromoji_tokenizer in normal mode showing basic segmentation without compound decomposition.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-kuromoji-tokenizer.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
関西国際空港
アブラカダブラ
```

----------------------------------------

TITLE: Basic Max Bucket Aggregation Syntax in Elasticsearch
DESCRIPTION: Shows the basic syntax structure for a max_bucket aggregation that finds maximum values in specified bucket paths.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-max-bucket-aggregation.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
{
  "max_bucket": {
    "buckets_path": "the_sum"
  }
}
```

----------------------------------------

TITLE: Aggregating on a Range Field with Histogram
DESCRIPTION: This snippet shows how to perform a histogram aggregation on the expected_attendees range field, demonstrating how a single document can appear in multiple buckets.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-range-field-note.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /range_index/_search?size=0
{
  "aggs": {
    "range_histo": {
      "histogram": {
        "field": "expected_attendees",
        "interval": 5
      }
    }
  }
}
```

----------------------------------------

TITLE: Indexing Document with Escaped Backslash
DESCRIPTION: Example of indexing a document with a backslash character that needs to be escaped in the JSON string.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/regexp-syntax.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1
{
  "my_field": "a\\b"
}
```

----------------------------------------

TITLE: Format Date with DATE_FORMAT - SQL
DESCRIPTION: Example using DATE_FORMAT to format a date value into a 'dd/MM/yyyy' string.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_39

LANGUAGE: SQL
CODE:
```
SELECT DATE_FORMAT(CAST('2020-04-05' AS DATE), '%d/%m/%Y') AS "date";
```

----------------------------------------

TITLE: Method Disassembly Command
DESCRIPTION: Gradle command for disassembling a specific method using JVM options
SOURCE: https://github.com/elastic/elasticsearch/blob/main/benchmarks/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
gradlew -p benchmarks run --args ' MemoryStatsBenchmark -jvmArgs "-XX:+UnlockDiagnosticVMOptions -XX:CompileCommand=print,*.yourMethodName -XX:PrintAssemblyOptions=intel"'
```

----------------------------------------

TITLE: Ingest Script Class Definition
DESCRIPTION: Defines core methods available in ingest scripts for accessing metadata and fields.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.ingest.txt#2025-04-21_snippet_3

LANGUAGE: java
CODE:
```
class org.elasticsearch.script.IngestScript {
    Metadata metadata()
    WriteField field(String)
}
```

----------------------------------------

TITLE: Grouping by Expressions in ESQL STATS
DESCRIPTION: Shows how to group by an expression, such as the first letter of a last name, in the STATS command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/stats-by.md#2025-04-21_snippet_10

LANGUAGE: esql
CODE:
```
FROM employees
STATS
  count(*)
BY SUBSTRING(last_name, 1, 1);
```

----------------------------------------

TITLE: Including GREATEST Function Parameters in Markdown
DESCRIPTION: This snippet includes the content of a separate Markdown file containing the parameters for the GREATEST function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/greatest.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
:::{include} ../parameters/greatest.md
:::
```

----------------------------------------

TITLE: Including LEAST Function Supported Types in Markdown
DESCRIPTION: This code snippet includes the supported types documentation for the LEAST function from a separate markdown file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/least.md#2025-04-21_snippet_2

LANGUAGE: markdown
CODE:
```
:::{include} ../types/least.md
:::
```

----------------------------------------

TITLE: Basic Cumulative Sum Aggregation Structure
DESCRIPTION: Shows the basic structure of a cumulative sum aggregation that references another metric via buckets_path.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-cumulative-sum-aggregation.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "cumulative_sum": {
    "buckets_path": "the_sum"
  }
}
```

----------------------------------------

TITLE: SQL Query for MAX Aggregation
DESCRIPTION: This SQL query selects the maximum value of the keyword field from the test table.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_27

LANGUAGE: SQL
CODE:
```
SELECT MAX(keyword) FROM test;
```

----------------------------------------

TITLE: SQL Query for MIN Aggregation
DESCRIPTION: This SQL query selects the minimum value of the keyword field from the test table.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_24

LANGUAGE: SQL
CODE:
```
SELECT MIN(keyword) FROM test;
```

----------------------------------------

TITLE: Including MAX Function Supported Types in Markdown
DESCRIPTION: This snippet includes the content of a markdown file containing the supported types for the MAX function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/max.md#2025-04-21_snippet_2

LANGUAGE: markdown
CODE:
```
:::{include} ../types/max.md
:::
```

----------------------------------------

TITLE: Calculating Hyperbolic Cosine using COSH in ESQL
DESCRIPTION: Demonstrates how to use the COSH function to calculate the hyperbolic cosine of a numeric value. The example creates a row with value 1.8 and applies the COSH function to compute its hyperbolic cosine.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/cosh.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=1.8
| EVAL cosh=COSH(a)
```

----------------------------------------

TITLE: Defining Exception Class in Java
DESCRIPTION: This snippet defines the java.lang.Exception class, which is the base class for checked exceptions. It includes constructors, a method for retrieving the localized message (`getLocalizedMessage`), a method for retrieving the message (`getMessage`), and a method for getting the stack trace (`getStackTrace`).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.lang.txt#2025-04-21_snippet_33

LANGUAGE: java
CODE:
```
class java.lang.Exception {
  ()
  (String)
  String getLocalizedMessage()
  String getMessage()
  StackTraceElement[] getStackTrace()
}
```

----------------------------------------

TITLE: Using Greater Than or Equal Operator in Painless
DESCRIPTION: Examples of the greater than or equal operator '>=' with different numeric types and def type. Shows type promotion and comparison results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_2

LANGUAGE: painless
CODE:
```
boolean x = 5 >= 4;
double y = 6.0;
x = 6 >= y;
```

LANGUAGE: painless
CODE:
```
int x = 5;
def y = 7.0;
def z = y >= 7.0;
def a = x >= y;
```

----------------------------------------

TITLE: SHA256 Function Documentation Header
DESCRIPTION: The header comment and function title for the SHA256 function documentation generated by AbstractFunctionTestCase.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/sha256.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.

## `SHA256` [esql-sha256]
```

----------------------------------------

TITLE: Testing Elasticsearch Connection
DESCRIPTION: cURL command to test the connection to the local Elasticsearch instance using basic authentication.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/api-tutorial.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
curl -s -X GET -u elastic:$ELASTIC_PASSWORD http://localhost:9200
```

----------------------------------------

TITLE: Defining Forbidden URL Methods in Elasticsearch
DESCRIPTION: Declaration of forbidden methods in java.net.URL class, recommending conversion to URI instead.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/build-tools-internal/src/main/resources/forbidden/jdk-signatures.txt#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
@defaultMessage Convert to URI
java.net.URL#getPath()
java.net.URL#getFile()
```

----------------------------------------

TITLE: Indexing Document with Payloads
DESCRIPTION: Adds a document containing delimited payload tokens to the index.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-delimited-payload-tokenfilter.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
POST text_payloads/_doc/1
{
  "text": "the|0 brown|3 fox|4 is|0 quick|10"
}
```

----------------------------------------

TITLE: Including ABS Function Types in Markdown
DESCRIPTION: Includes the content of a separate Markdown file containing type information for the ABS function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/abs.md#2025-04-21_snippet_3

LANGUAGE: markdown
CODE:
```
:::{include} ../types/abs.md
:::
```

----------------------------------------

TITLE: Including MV_SLICE Function Types in Markdown
DESCRIPTION: This snippet includes the markdown file containing the supported types for the MV_SLICE function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/mv_slice.md#2025-04-21_snippet_2

LANGUAGE: markdown
CODE:
```
:::{include} ../types/mv_slice.md
:::
```

----------------------------------------

TITLE: Including NOW Function Types in ESQL Documentation
DESCRIPTION: This snippet includes the types information for the NOW function from an external markdown file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/now.md#2025-04-21_snippet_3

LANGUAGE: markdown
CODE:
```
:::{include} ../types/now.md
:::
```

----------------------------------------

TITLE: Complex GROUP BY with Multiple ORDER BY
DESCRIPTION: Illustrates grouping by multiple columns with complex ordering criteria.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-select.md#2025-04-21_snippet_26

LANGUAGE: sql
CODE:
```
SELECT gender g, languages l, COUNT(*) c FROM "emp" GROUP BY g, l ORDER BY languages ASC, gender DESC;
```

----------------------------------------

TITLE: Dot Operator Examples in Regular Expressions
DESCRIPTION: Examples showing the dot operator which matches any character in Elasticsearch regular expressions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/regexp-syntax.md#2025-04-21_snippet_3

LANGUAGE: text
CODE:
```
ab.     # matches 'aba', 'abb', 'abz', etc.
```

----------------------------------------

TITLE: Including LEAST Function Parameters in Markdown
DESCRIPTION: This code snippet includes the parameters documentation for the LEAST function from a separate markdown file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/least.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
:::{include} ../parameters/least.md
:::
```

----------------------------------------

TITLE: Including Parameter Documentation for LOG Function
DESCRIPTION: This snippet includes the parameter documentation for the LOG function from an external markdown file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/log.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
:::{include} ../parameters/log.md
:::
```

----------------------------------------

TITLE: Markdown Link to Elasticsearch Release Notes
DESCRIPTION: A markdown link directing users to the official Elasticsearch release notes documentation in the reference manual.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/CHANGELOG.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# Elasticsearch Changelog

Please see the [release notes](https://www.elastic.co/guide/en/elasticsearch/reference/current/es-release-notes.html) in the reference manual.
```

----------------------------------------

TITLE: Creating ZIP Archive of Elasticsearch Snapshots in Bash
DESCRIPTION: Compresses the Elasticsearch snapshots directory into a ZIP file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/qa/repository-old-versions-compatibility/src/javaRestTest/resources/README.md#2025-04-21_snippet_14

LANGUAGE: bash
CODE:
```
zip -r snapshot.zip /tmp/sharedESData/snapshots/*
```

----------------------------------------

TITLE: Including Examples for LOG Function
DESCRIPTION: This snippet includes usage examples for the LOG function from an external markdown file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/log.md#2025-04-21_snippet_4

LANGUAGE: markdown
CODE:
```
:::{include} ../examples/log.md
:::
```

----------------------------------------

TITLE: Defining Less Than Or Equal Operator Grammar in Painless
DESCRIPTION: Specifies the grammar for the less than or equal operator in Painless scripting language.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-boolean.md#2025-04-21_snippet_4

LANGUAGE: text
CODE:
```
greater_than_or_equal: expression '<=' expression;
```

----------------------------------------

TITLE: Including ST_INTERSECTS Function Parameters in Markdown
DESCRIPTION: This code snippet includes the parameters documentation for the ST_INTERSECTS function from a separate markdown file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/st_intersects.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
:::{include} ../parameters/st_intersects.md
:::
```

----------------------------------------

TITLE: ATAN2 Function Documentation Header
DESCRIPTION: Documentation header indicating this is an auto-generated file for the ATAN2 function in ESQL.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/atan2.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.
```

----------------------------------------

TITLE: SVG Image Include
DESCRIPTION: Markdown syntax for including the TO_INTEGER function syntax diagram as an SVG image.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/to_integer.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
:::{image} ../../../images/functions/to_integer.svg
:alt: Embedded
:class: text-center
:::
```

----------------------------------------

TITLE: Including NOW Function Parameters in ESQL Documentation
DESCRIPTION: This snippet includes the parameters documentation for the NOW function from an external markdown file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/now.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
:::{include} ../parameters/now.md
:::
```

----------------------------------------

TITLE: Raw String Enclosure in Elasticsearch EQL
DESCRIPTION: Shows how to enclose raw strings in Elasticsearch EQL using triple double quotes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_36

LANGUAGE: eql
CODE:
```
process_name == """raw string example"""
```

----------------------------------------

TITLE: Including STD_DEV Function Description
DESCRIPTION: Includes the content of a separate file containing the description of the STD_DEV function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/layout/std_dev.md#2025-04-21_snippet_2

LANGUAGE: markdown
CODE:
```
:::{include} ../description/std_dev.md
:::
```

----------------------------------------

TITLE: Unsigned Right Shift with Different Integer Types in Painless
DESCRIPTION: This snippet explains the use of the unsigned right shift operator in Painless, showcasing its behavior with different integer types while detailing error handling and type promotions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_28

LANGUAGE: painless
CODE:
```
int i = -1 >>> 29; <1>
long l = i >>> 2L; <2>
```

----------------------------------------

TITLE: Type-Specific Buffer Class Definitions
DESCRIPTION: Defines buffer classes for specific primitive types (Char, Double, Float, Int, Long, Short) with get methods and TODO comments for array operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.nio.txt#2025-04-21_snippet_3

LANGUAGE: java
CODE:
```
class java.nio.CharBuffer {
  char get(int)
}

class java.nio.DoubleBuffer {
  double get(int)
}

class java.nio.FloatBuffer {
  float get(int)
}

class java.nio.IntBuffer {
  int get(int)
}

class java.nio.LongBuffer {
  long get(int)
}

class java.nio.ShortBuffer {
  short get(int)
}
```

----------------------------------------

TITLE: ESQL FROM Query with Date Math
DESCRIPTION: Shows how to use date math in an ESQL FROM command to query today's log index.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/from.md#2025-04-21_snippet_2

LANGUAGE: esql
CODE:
```
FROM <logs-{now/d}>
```

----------------------------------------

TITLE: Basic Jinja2 Template Expression Syntax in Elasticsearch
DESCRIPTION: Shows the basic syntax for including expressions in Jinja2 templates for Elasticsearch. The example demonstrates how to use double curly braces to embed variables and expressions in configuration files.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/distribution/tools/ansi-console/licenses/jansi-NOTICE.txt#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
{{ expression }}
```

----------------------------------------

TITLE: Logging Exceptions in Elasticsearch (Java)
DESCRIPTION: Shows how to log exceptions with their stack traces in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/CONTRIBUTING.md#2025-04-21_snippet_11

LANGUAGE: java
CODE:
```
logger.debug("operation failed", exception);
```

----------------------------------------

TITLE: Calculating Hypotenuse Using HYPOT Function in ESQL
DESCRIPTION: This example demonstrates using the HYPOT function to calculate the hypotenuse of a right triangle. It creates a row with two values (3.0 and 4.0) representing the sides of a right triangle, then applies HYPOT to calculate the hypotenuse (5.0).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/hypot.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = 3.0, b = 4.0
| EVAL c = HYPOT(a, b)
```

----------------------------------------

TITLE: Enable Debug Logging for Grok Processor
DESCRIPTION: Configuration to enable debug logging for the Grok processor in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/grok-processor.md#2025-04-21_snippet_3

LANGUAGE: js
CODE:
```
PUT _cluster/settings
{
  "persistent": {
    "logger.org.elasticsearch.ingest.common.GrokProcessor": "debug"
  }
}
```

----------------------------------------

TITLE: Running Backwards Compatibility Tests with Gradle
DESCRIPTION: Command for running the REST API backwards compatibility tests using Gradle. These tests execute prior version YAML tests against the current cluster version.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/REST_API_COMPATIBILITY.md#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
./gradlew :rest-api-spec:yamlRestCompatTest
```

----------------------------------------

TITLE: Downloading Sample Configuration File for Docker Deployment
DESCRIPTION: Instructions on downloading a sample connector configuration file using curl. The file serves as a template for configuring a custom self-managed connector setup.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-github.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
curl https://raw.githubusercontent.com/elastic/connectors/main/config.yml.example --output ~/connectors-config/config.yml
```

----------------------------------------

TITLE: Using ATAN2 Function in ESQL
DESCRIPTION: Demonstrates how to use the ATAN2 function in ESQL to calculate the arctangent of y/x. The function takes two parameters: y and x, and returns the angle in radians.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/atan2.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW y=12.9, x=.6
| EVAL atan2=ATAN2(y, x)
```

----------------------------------------

TITLE: Streaming a plugin from a download URL in Elasticsearch Service
DESCRIPTION: Creates an extension by streaming a plugin file from a publicly-accessible download URL. This approach is required for plugins larger than 200MB. The download URL must be directly accessible with http or https protocol.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-plugins-guide.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
curl -X POST \
  https://api.elastic-cloud.com/api/v1/deployments/extensions \
  -H "Authorization: ApiKey $CLOUD_API_KEY" \
  -H 'Content-Type: application/json' \
  -d '{
   "download_url" : "https://my_site/custom-plugin-8.4.3.zip",
   "extension_type" : "plugin",
   "name" : "custom-plugin",
   "version" : "8.4.3"
}'
```

----------------------------------------

TITLE: Defining Java StrictMath Class Methods
DESCRIPTION: This snippet outlines the available methods from the java.lang.StrictMath class for use in Painless scripting. It encompasses various mathematical operations like absolute value, trigonometric functions, logarithmic functions, power, rounding, and other utility functions. The `@nondeterministic` annotation indicates that `random()` method's result may vary.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.lang.txt#2025-04-21_snippet_19

LANGUAGE: java
CODE:
```
"class java.lang.StrictMath {\n  double E\n  double PI\n  double abs(double)\n  double acos(double)\n  double asin(double)\n  double atan(double)\n  double atan2(double,double)\n  double cbrt(double)\n  double ceil(double)\n  double copySign(double,double)\n  double cos(double)\n  double cosh(double)\n  double exp(double)\n  double expm1(double)\n  double floor(double)\n  double hypot(double,double)\n  double IEEEremainder(double,double)\n  double log(double)\n  double log10(double)\n  double log1p(double)\n  double max(double,double)\n  double min(double,double)\n  double nextAfter(double,double)\n  double nextDown(double)\n  double nextUp(double)\n  double pow(double,double)\n  double random() @nondeterministic\n  double rint(double)\n  long round(double)\n  double scalb(double,int)\n  double signum(double)\n  double sin(double)\n  double sinh(double)\n  double sqrt(double)\n  double tan(double)\n  double tanh(double)\n  double toDegrees(double)\n  double toRadians(double)\n  double ulp(double)\n}"
```

----------------------------------------

TITLE: YearMonth Methods and Fields
DESCRIPTION: Details the methods and fields within the java.time.YearMonth class. This section outlines how to create, parse, and manipulate YearMonth instances, enabling functionalities such as comparisons, formatting, retrieving month and year values, and performing date-related calculations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.time.txt#2025-04-21_snippet_14

LANGUAGE: java
CODE:
```
"class java.time.YearMonth {
  LocalDate atDay(int)
  LocalDate atEndOfMonth()
  int compareTo(YearMonth)
  String format(DateTimeFormatter)
  YearMonth from(TemporalAccessor)
  Month getMonth()
  int getMonthValue()
  int getYear()
  boolean isAfter(YearMonth)
  boolean isBefore(YearMonth)
  boolean isLeapYear()
  boolean isValidDay(int)
  int lengthOfMonth()
  int lengthOfYear()
  YearMonth minus(TemporalAmount)
  YearMonth minus(long,TemporalUnit)
  YearMonth minusYears(long)
  YearMonth minusMonths(long)
  YearMonth of(int,int)
  YearMonth parse(CharSequence)
  YearMonth parse(CharSequence,DateTimeFormatter)
  YearMonth plus(TemporalAmount)
  YearMonth plus(long,TemporalUnit)
  YearMonth plusYears(long)
  YearMonth plusMonths(long)
  YearMonth with(TemporalAdjuster)
  YearMonth with(TemporalField,long)
  YearMonth withYear(int)
  YearMonth withMonth(int)
}"
```

----------------------------------------

TITLE: Indexing a Polygon with Hole using GeoJSON in Elasticsearch
DESCRIPTION: Adds a document to the 'example' index with a Polygon geometry that includes a hole, specified in GeoJSON format. The first array represents the outer boundary, and the second array represents the interior hole.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-shape.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
POST /example/_doc
{
  "location" : {
    "type" : "Polygon",
    "coordinates" : [
      [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ],
      [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2] ]
    ]
  }
}
```

----------------------------------------

TITLE: Calculating Geographical Distance with ST_DISTANCE in ESQL
DESCRIPTION: This ESQL query filters for the Copenhagen airport (abbrev="CPH"), calculates the distance between the airport location and city center using ST_DISTANCE function, and returns selected fields including the calculated distance.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/st_distance.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
FROM airports
| WHERE abbrev == "CPH"
| EVAL distance = ST_DISTANCE(location, city_location)
| KEEP abbrev, name, location, city_location, distance
```

----------------------------------------

TITLE: Creating GCE Machine with knife google and Required Permissions
DESCRIPTION: Example of using knife google to create a server with the necessary compute permissions for the Elasticsearch GCE discovery plugin.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-tips.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
knife google server create www1 \
    -m n1-standard-1 \
    -I debian-8 \
    -Z us-central1-a \
    -i ~/.ssh/id_rsa \
    -x jdoe \
    --gce-service-account-scopes https://www.googleapis.com/auth/compute
```

----------------------------------------

TITLE: Using SHOW CATALOGS Command in Elasticsearch SQL
DESCRIPTION: The SHOW CATALOGS command lists all available catalogs in Elasticsearch along with their types. The result displays the name and type columns, indicating whether each catalog is local or remote.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-syntax-show-catalogs.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
SHOW CATALOGS
```

LANGUAGE: sql
CODE:
```
SHOW CATALOGS;

     name         |     type
------------------+---------------
javaRestTest         |local
my_remote_cluster |remote
```

----------------------------------------

TITLE: Scripted Metric Aggregation State After Init Script
DESCRIPTION: This JavaScript snippet represents the state of the scripted metric aggregation after the init_script is executed on each shard.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-scripted-metric-aggregation.md#2025-04-21_snippet_4

LANGUAGE: js
CODE:
```
"state" : {
    "transactions" : []
}
```

----------------------------------------

TITLE: Division Operator in Elasticsearch Script
DESCRIPTION: Implements division within a custom script, evaluating whether the quotient of `serial_event_id` and a constant equals a target value. Facilitates division operations within the Elasticsearch querying framework.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_19

LANGUAGE: Elasticsearch Painless
CODE:
```
"script":{"source":"InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.eq(InternalEqlScriptUtils.div(X0,params.v1),params.v2)))","params":{"v0":"serial_event_id","v1":2,"v2":41}}
```

----------------------------------------

TITLE: Installing the Elasticsearch Azure Discovery Plugin
DESCRIPTION: Commands to install the Azure Discovery plugin for Elasticsearch and open the configuration file for editing. This enables Elasticsearch to use Azure's API for node discovery.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-azure-classic-long.md#2025-04-21_snippet_10

LANGUAGE: sh
CODE:
```
# Install the plugin
sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install discovery-azure-classic

# Configure it
sudo vi /etc/elasticsearch/elasticsearch.yml
```

----------------------------------------

TITLE: Demonstrating Unary Negative Operator in Painless
DESCRIPTION: This snippet illustrates the usage of the unary negative operator '-' with different numeric types in Painless, showing its negation behavior.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_10

LANGUAGE: painless
CODE:
```
int x = -1;
long y = -x;
```

----------------------------------------

TITLE: Example Response for Percentiles Bucket Aggregation
DESCRIPTION: Illustrates the response format for a percentiles_bucket aggregation query. It includes the aggregation results showing the calculated percentiles for monthly sales.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-percentiles-bucket-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
{
   "took": 11,
   "timed_out": false,
   "_shards": ...,
   "hits": ...,
   "aggregations": {
      "sales_per_month": {
         "buckets": [
            {
               "key_as_string": "2015/01/01 00:00:00",
               "key": 1420070400000,
               "doc_count": 3,
               "sales": {
                  "value": 550.0
               }
            },
            {
               "key_as_string": "2015/02/01 00:00:00",
               "key": 1422748800000,
               "doc_count": 2,
               "sales": {
                  "value": 60.0
               }
            },
            {
               "key_as_string": "2015/03/01 00:00:00",
               "key": 1425168000000,
               "doc_count": 2,
               "sales": {
                  "value": 375.0
               }
            }
         ]
      },
      "percentiles_monthly_sales": {
        "values" : {
            "25.0": 375.0,
            "50.0": 375.0,
            "75.0": 550.0
         }
      }
   }
}
```

----------------------------------------

TITLE: Getting a specific extension in Elasticsearch Service
DESCRIPTION: API call to retrieve information about a specific extension using its ID. Returns metadata about the extension without the actual file content.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-plugins-guide.md#2025-04-21_snippet_8

LANGUAGE: sh
CODE:
```
curl -X GET \
  https://api.elastic-cloud.com/api/v1/deployments/extensions/EXTENSION_ID \
  -H 'Content-Type: application/json' \
  -H "Authorization: ApiKey $CLOUD_API_KEY" \
```

----------------------------------------

TITLE: OR Operator Examples in Regular Expressions
DESCRIPTION: Examples showing the pipe character as an OR operator that matches either pattern.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/regexp-syntax.md#2025-04-21_snippet_8

LANGUAGE: text
CODE:
```
abc|xyz  # matches 'abc' and 'xyz'
```

----------------------------------------

TITLE: Example KNN Search Results for Bit Vectors (Elasticsearch Console Result)
DESCRIPTION: Displays the expected output from the KNN search query against the `my-bit-vectors` index. It shows the `_score` for each hit, demonstrating the similarity calculation based on Hamming distance for bit vectors.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/dense-vector.md#_snippet_9

LANGUAGE: json
CODE:
```
{
    "hits": {
        "hits": [
            {
                "_index": "my-bit-vectors",
                "_id": "1",
                "_score": 1.0,
                "_source": {
                    "my_vector": [
                        127,
                        -127,
                        0,
                        1,
                        42
                    ]
                }
            },
            {
                "_index": "my-bit-vectors",
                "_id": "2",
                "_score": 0.55,
                "_source": {
                    "my_vector": "8100012a7f"
                }
            }
        ]
    }
}
```

----------------------------------------

TITLE: Calculating Arctangent using ATAN() in ESQL
DESCRIPTION: Example showing how to compute the arctangent of a numeric value using the ATAN function. The query creates a row with a value of 12.9 and calculates its arctangent, resulting in approximately 1.4934316673669235 radians.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/atan.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=12.9
| EVAL atan=ATAN(a)
```

----------------------------------------

TITLE: Using Alias for GCE Service Account Scopes with knife google
DESCRIPTION: Shows how to use the shorthand alias for specifying compute read-write scope when creating GCE instances with knife google.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-tips.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
    --gce-service-account-scopes compute-rw
```

----------------------------------------

TITLE: Defining Parameters for ESQL String Replacement Function
DESCRIPTION: This snippet defines the parameters for an ESQL function that performs string replacement using regular expressions. It specifies three parameters: the input string, the regex pattern, and the replacement string.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/parameters/replace.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
**Parameters**

`string`
:   String expression.

`regex`
:   Regular expression.

`newString`
:   Replacement string.
```

----------------------------------------

TITLE: Bitwise And with the Def Type in Painless
DESCRIPTION: This snippet showcases the use of the bitwise and operator with the def type in Painless, illustrating the implicit casting and resulting values from the operation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_31

LANGUAGE: painless
CODE:
```
def x = 15 & 6; <1>
def y = x & 5;  <2>
```

----------------------------------------

TITLE: Sample Document Set Structure in Elasticsearch
DESCRIPTION: Example document set showing the structure of documents with termA and termB fields used for demonstrating aggregations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/reciprocal-rank-fusion.md#2025-04-21_snippet_15

LANGUAGE: javascript
CODE:
```
{
    "_id": 1, "termA": "foo",
    "_id": 2, "termA": "foo", "termB": "bar",
    "_id": 3, "termA": "aardvark", "termB": "bar",
    "_id": 4, "termA": "foo", "termB": "bar"
}
```

----------------------------------------

TITLE: Creating an Index with Synthetic Source for Version Fields
DESCRIPTION: This example shows how to create an index with synthetic '_source' enabled and a 'version' field. It demonstrates the index settings for enabling synthetic source and the mapping for a 'version' field named 'versions'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/version.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "versions": { "type": "version" }
    }
  }
}
```

----------------------------------------

TITLE: Launching Multiple Elasticsearch Nodes on Azure (Shell)
DESCRIPTION: This script creates multiple Elasticsearch nodes on Azure using a previously created VM image. It demonstrates how to scale out the cluster by launching multiple instances in a loop.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-azure-classic-scale.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
for x in $(seq  2 10)
	do
		echo "Launching azure instance #$x..."
		azure vm create azure-elasticsearch-cluster \
		                esnode-image \
		                --vm-name myesnode$x \
		                --vm-size extrasmall \
		                --ssh $((21 + $x)) \
		                --ssh-cert /tmp/azure-certificate.pem \
		                --connect \
		                elasticsearch password1234\!\!
	done
```

----------------------------------------

TITLE: Token Filter Output Example
DESCRIPTION: Shows the output tokens produced by the hyphenation_decompounder filter when processing the word 'Kaffeetasse'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-hyp-decomp-tokenfilter.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
[ Kaffeetasse, Kaffee, tasse ]
```

----------------------------------------

TITLE: Installing GCE Discovery Plugin (sh)
DESCRIPTION: Installs the Elasticsearch GCE Discovery plugin using the built-in plugin manager. This command requires root privileges (`sudo`) and is executed from the Elasticsearch installation directory's `bin` folder. The node must be restarted after installation is complete.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce.md#_snippet_0

LANGUAGE: sh
CODE:
```
sudo bin/elasticsearch-plugin install discovery-gce
```

----------------------------------------

TITLE: Right Shift with Different Integer Types in Painless
DESCRIPTION: This snippet demonstrates the right shift operator in Painless, capturing how to right shift different integer types and the related type promotions and error checks.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_26

LANGUAGE: painless
CODE:
```
int i = 32 >> 1;  <1>
long l = i >> 2L; <2>
```

----------------------------------------

TITLE: Removing GCE Discovery Plugin (sh)
DESCRIPTION: Removes the Elasticsearch GCE Discovery plugin using the built-in plugin manager. This command requires root privileges (`sudo`) and is executed from the Elasticsearch installation directory's `bin` folder. The node must be stopped before executing this command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce.md#_snippet_1

LANGUAGE: sh
CODE:
```
sudo bin/elasticsearch-plugin remove discovery-gce
```

----------------------------------------

TITLE: Retrieving TAU Constant in ESQL
DESCRIPTION: Demonstrates how to return the mathematical constant tau (2π) using the TAU() function. Returns a double precision value approximately equal to 6.283185307179586.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/tau.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW TAU()
```

----------------------------------------

TITLE: Remove Mapper Annotated Text Plugin (sh)
DESCRIPTION: This shell command uses the Elasticsearch plugin manager to remove the `mapper-annotated-text` plugin from a node. It requires superuser privileges and the Elasticsearch `bin` directory. The node must be stopped before executing this command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/mapper-annotated-text.md#_snippet_1

LANGUAGE: sh
CODE:
```
sudo bin/elasticsearch-plugin remove mapper-annotated-text
```

----------------------------------------

TITLE: Equivalent Sequence Without Runs
DESCRIPTION: Shows the expanded form of the previous query without using 'with runs'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/eql/eql-syntax.md#2025-04-21_snippet_22

LANGUAGE: eql
CODE:
```
sequence
  [ process where event.type == "creation" ]
  [ library where process.name == "regsvr32.exe" ]
  [ library where process.name == "regsvr32.exe" ]
  [ library where process.name == "regsvr32.exe" ]
  [ registry where true ]
```

----------------------------------------

TITLE: Pattern Matching Type Support Matrix
DESCRIPTION: A markdown table showing supported data type combinations for pattern matching operations. Shows that both keyword and text type fields can be matched against keyword patterns, producing boolean results.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/types/not rlike.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| str | pattern | result |
| --- | --- | --- |
| keyword | keyword | boolean |
| text | keyword | boolean |
```

----------------------------------------

TITLE: Defining Arabic Stop Words
DESCRIPTION: Defines the Arabic stop words for use in Elasticsearch text analysis. It provides a link to the corresponding stop words text file in Lucene.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_4

LANGUAGE: markdown
CODE:
```
`_arabic_`
:   [Arabic stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/ar/stopwords.txt)
```

----------------------------------------

TITLE: Defining Supported Types for Logarithm Function in ESQL
DESCRIPTION: This markdown table specifies the input number types that are supported by the logarithm function in ESQL and their corresponding result types. It shows that double, integer, long, and unsigned_long input types all result in a double output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/types/sinh.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| number | result |
| --- | --- |
| double | double |
| integer | double |
| long | double |
| unsigned_long | double |
```

----------------------------------------

TITLE: Match Query Parameters Documentation
DESCRIPTION: Defines the required and optional parameters for the match query function in ESQL. Includes the field to search, query value, and optional match parameters.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/parameters/match.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
**Parameters**

`field`
:   Field that the query will target.

`query`
:   Value to find in the provided field.

`options`
:   (Optional) Match additional options as [function named parameters](/reference/query-languages/esql/esql-syntax.md#esql-function-named-params). See [match query](/reference/query-languages/query-dsl/query-dsl-match-query.md) for more information.
```

----------------------------------------

TITLE: Calculating Hyperbolic Cosine with COSH Function in ESQL
DESCRIPTION: This snippet demonstrates how to use the COSH function in ESQL to calculate the hyperbolic cosine of a numeric value. It creates a row with a double value and then applies the COSH function to compute the hyperbolic cosine of that value.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/cosh.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=1.8
| EVAL cosh=COSH(a)
```

----------------------------------------

TITLE: Geo Functions Implementation
DESCRIPTION: Geographic functions including ST_AsWKT, ST_WKTToSQL, and ST_Distance operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_13

LANGUAGE: sql
CODE:
```
SELECT ST_AsWKT(point) FROM test WHERE ST_AsWKT(point) = 'point (10 20)';
```

LANGUAGE: json
CODE:
```
InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.eq(InternalSqlScriptUtils.stAswkt(InternalSqlScriptUtils.geoDocValue(doc,params.v0)),params.v1)
```

----------------------------------------

TITLE: Method Overloading Example
DESCRIPTION: Shows how Painless handles Java standard library method overloading by renaming methods to avoid arity conflicts.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/how-painless-dispatches-function.md#2025-04-21_snippet_1

LANGUAGE: java
CODE:
```
group(int)
group(String)
namedGroup(String)
```

----------------------------------------

TITLE: Locale Builder Utility in Java
DESCRIPTION: Provides methods for dynamically constructing and modifying Locale instances with flexible configuration options
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.util.txt#2025-04-21_snippet_28

LANGUAGE: java
CODE:
```
class java.util.Locale$Builder {
  Locale build()
  Locale.Builder setLanguage(String)
  Locale.Builder setRegion(String)
}
```

----------------------------------------

TITLE: Calculating Tangent in ESQL
DESCRIPTION: This example demonstrates how to use the TAN() function in ESQL to calculate the tangent of a numeric value. The example creates a row with a double value 1.8 and then applies the TAN function to get a result of -4.286261674628062.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/tan.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=1.8
| EVAL tan=TAN(a)
```

----------------------------------------

TITLE: Escaping Backticks in Quoted Identifiers
DESCRIPTION: Shows how to reference a function alias that uses a quoted identifier by escaping the backticks within the quoted identifier using an additional backtick.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/esql-syntax.md#_snippet_3

LANGUAGE: esql
CODE:
```
FROM index
| STATS COUNT(`1.field`)
| EVAL my_count = `COUNT(``1.field``)`
```

----------------------------------------

TITLE: Routing to an Index Partition Formula in Elasticsearch
DESCRIPTION: Formula used when index.routing_partition_size is configured, showing how documents are routed to a subset of shards rather than a single shard.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/mapping-routing-field.md#2025-04-21_snippet_5

LANGUAGE: text
CODE:
```
routing_value = hash(_routing) + hash(_id) % routing_partition_size
shard_num = (routing_value % num_routing_shards) / routing_factor
```

----------------------------------------

TITLE: ESQL Less Than or Equal Operator Usage
DESCRIPTION: The <= operator compares if one field is less than or equal to another. When used with multivalued fields, the operation returns null. This is a fundamental comparison operator used in ESQL queries for numerical and ordinal comparisons.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/layout/less_than_or_equal.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
field1 <= field2
```

----------------------------------------

TITLE: Binding and Reverting with LDAPConnectionPool using String Credentials
DESCRIPTION: This snippet highlights the binding process using a string username, password, and optional control parameters while leveraging an LDAPConnectionPool. It allows for dynamic authentication changes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/security/forbidden/ldap-signatures.txt#2025-04-21_snippet_3

LANGUAGE: Java
CODE:
```
com.unboundid.ldap.sdk.LDAPConnectionPool#bindAndRevertAuthentication(java.lang.String, java.lang.String, com.unboundid.ldap.sdk.Control[])
```

----------------------------------------

TITLE: Listing Available Azure VM Images
DESCRIPTION: Command to list all available VM images in Azure, which helps in selecting the appropriate operating system for your Elasticsearch nodes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-azure-classic-long.md#2025-04-21_snippet_5

LANGUAGE: sh
CODE:
```
azure vm image list
```

----------------------------------------

TITLE: Performing Multiplication in SQL
DESCRIPTION: Demonstrates the use of the multiplication operator (*) to find the product of two numeric values in a SQL query. The result is returned as a column named 'x'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-operators-math.md#_snippet_3

LANGUAGE: sql
CODE:
```
SELECT 2 * 3 AS x;
```

----------------------------------------

TITLE: Substring Function in Elasticsearch
DESCRIPTION: A custom script that checks if the last four characters of the `file_name.keyword` field are '.exe'. Applies a Painless script for substring extraction and comparison.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_13

LANGUAGE: Elasticsearch Painless
CODE:
```
"script":{"script":{"source":"InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalQlScriptUtils.nullSafeFilter(InternalEqlScriptUtils.seq(InternalEqlScriptUtils.substring(X0,params.v1,params.v2),params.v3)))" "params":{"v0":"file_name.keyword","v1":-4,"v2":null,"v3":".exe"}
```

----------------------------------------

TITLE: Retrieve Document with Scaled Float from Synthetic Source (console-result)
DESCRIPTION: Shows the expected output when retrieving the document indexed with a scaled_float via synthetic _source. The value is displayed after applying the configured scaling factor.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/number.md#_snippet_4

LANGUAGE: console-result
CODE:
```
{
  "f": 100.0
}
```

----------------------------------------

TITLE: Converting Radians to Degrees Using TO_DEGREES in ESQL
DESCRIPTION: Demonstrates using the TO_DEGREES function to convert a list of radian values to degrees. Creates a ROW with an array of radian values (1.57, 3.14, 4.71) and converts them to their equivalent degree values using the EVAL command.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_degrees.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW rad = [1.57, 3.14, 4.71]
| EVAL deg = TO_DEGREES(rad)
```

----------------------------------------

TITLE: Text Parsing and Formatting Class Definitions and Methods
DESCRIPTION: Defines classes for text processing including ParsePosition, RuleBasedCollator, SimpleDateFormat, and StringCharacterIterator. Includes methods for managing parsing locations, collation rules, date formatting patterns, and string iteration. Exception handling is also covered with ParseException classes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.text.txt#2025-04-21_snippet_3

LANGUAGE: java
CODE:
```
class java.text.ParsePosition {
  (int)
  int getErrorIndex()
  int getIndex()
  void setErrorIndex(int)
  void setIndex(int)
}
```

LANGUAGE: java
CODE:
```
class java.text.RuleBasedCollator {
  (String)
  CollationElementIterator getCollationElementIterator(String)
  String getRules()
}
```

LANGUAGE: java
CODE:
```
class java.text.SimpleDateFormat {
  ()
  (String)
  (String,Locale)
  void applyLocalizedPattern(String)
  void applyPattern(String)
  Date get2DigitYearStart()
  DateFormatSymbols getDateFormatSymbols()
  void setDateFormatSymbols(DateFormatSymbols)
  void set2DigitYearStart(Date)
  String toLocalizedPattern()
  String toPattern()
}
```

LANGUAGE: java
CODE:
```
class java.text.StringCharacterIterator {
  (String)
  (String,int)
  (String,int,int,int)
  void setText(String)
}
```

LANGUAGE: java
CODE:
```
class java.text.Normalizer$Form {
  Normalizer.Form NFC
  Normalizer.Form NFD
  Normalizer.Form NFKC
  Normalizer.Form NFKD
  Normalizer.Form valueOf(String)
  Normalizer.Form[] values()
}
```

LANGUAGE: java
CODE:
```
class java.text.ParseException {
  (String,int)
  int getErrorOffset()
}
```

----------------------------------------

TITLE: ESQL Function Parameter Documentation
DESCRIPTION: Parameter documentation section defining input string, substring to search for, and start index position. The documentation appears to be auto-generated by ESQL's AbstractFunctionTestCase.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/parameters/locate.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.

**Parameters**

`string`
:   An input string

`substring`
:   A substring to locate in the input string

`start`
:   The start index
```

----------------------------------------

TITLE: Convert Client Keystore to PKCS#12
DESCRIPTION: Converts the client's JKS keystore to PKCS#12 format for private key extraction
SOURCE: https://github.com/elastic/elasticsearch/blob/main/build-tools-internal/src/main/resources/test/ssl/README.md#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
keytool -importkeystore -srckeystore test-client.jks -srcstorepass keypass -destkeystore test-client.p12 -deststoretype PKCS12 -deststorepass keypass
```

----------------------------------------

TITLE: EMPTY Operator Examples
DESCRIPTION: Examples showing the hash operator which matches no string, useful in programmatically constructed patterns when the EMPTY flag is enabled.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/regexp-syntax.md#2025-04-21_snippet_14

LANGUAGE: text
CODE:
```
#|abc  # matches 'abc' but nothing else, not even an empty string
```

----------------------------------------

TITLE: Returning String with Spaces in ESQL
DESCRIPTION: This snippet demonstrates the use of the SPACE function in ESQL, which generates a string composed of a specified number of spaces. The example shows concatenating two words 'Hello' and 'World!' with one space in between, effectively formatting the output string. The primary function used here is SPACE which accepts a numeric argument indicating the number of spaces to generate.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/space.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW message = CONCAT("Hello", SPACE(1), "World!");
```

----------------------------------------

TITLE: Input Document with Conflicting Fields
DESCRIPTION: Shows an example document with both a dotted field and an existing nested field that would conflict during expansion.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/dot-expand-processor.md#2025-04-21_snippet_3

LANGUAGE: js
CODE:
```
{
  "foo.bar" : "value2",
  "foo" : {
    "bar" : "value1"
  }
}
```

----------------------------------------

TITLE: End-to-end Testing Command - Shell
DESCRIPTION: This shell command is used to run functional tests for the Notion connector using Docker Compose. It doesn’t require a running Elasticsearch instance to facilitate testing.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-notion.md#2025-04-21_snippet_12

LANGUAGE: shell
CODE:
```
$ make ftest NAME=notion
```

----------------------------------------

TITLE: Gradle Configuration for Elasticsearch Metrics
DESCRIPTION: This Groovy snippet configures the Elasticsearch Gradle project to enable telemetry and set the secret token and server URL for the APM agent.  It modifies the `testClusters` configuration, enabling the security audit, telemetry metrics, and setting the agent's server URL and secret token.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/apm/METERING.md#2025-04-21_snippet_3

LANGUAGE: groovy
CODE:
```
rootProject {
    if (project.name == 'elasticsearch' && Boolean.getBoolean('metrics.enabled')) {
        afterEvaluate {
            testClusters.matching { it.name == "runTask" }.configureEach {
                setting 'xpack.security.audit.enabled', 'true'
                keystore 'telemetry.secret_token', 'TODO-REPLACE'
                setting 'telemetry.metrics.enabled', 'true'
                setting 'telemetry.agent.server_url', 'https://TODO-REPLACE-URL.apm.eastus2.staging.azure.foundit.no:443'
            }
        }
    }
}
```

----------------------------------------

TITLE: Logging with Placeholders and Exceptions in Elasticsearch (Java)
DESCRIPTION: Illustrates how to log messages with both placeholders and exceptions using a Supplier<String> and Strings.format in Elasticsearch.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/CONTRIBUTING.md#2025-04-21_snippet_12

LANGUAGE: java
CODE:
```
logger.debug(() -> Strings.format("failed at offset [%s]", offset), exception);
```

----------------------------------------

TITLE: Defining Estonian Stop Words
DESCRIPTION: Defines Estonian stop words for usage in Elasticsearch, linked to the respective Lucene document.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_16

LANGUAGE: markdown
CODE:
```
`_estonian_`
:   [Estonian stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/et/stopwords.txt)
```

----------------------------------------

TITLE: Defining Finnish Stop Words
DESCRIPTION: Provides Finnish stop words for use in Elasticsearch analysis, with a direct link to Lucene.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_17

LANGUAGE: markdown
CODE:
```
`_finnish_`
:   [Finnish stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/snowball/finnish_stop.txt)
```

----------------------------------------

TITLE: Security Exception Example for Reroute Processor
DESCRIPTION: Example of a security exception message when the client lacks necessary permissions for the target index.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/reroute-processor.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
{"type":"security_exception","reason":"action [indices:admin/auto_create] is unauthorized for API key id [8-dt9H8BqGblnY2uSI--] of user [elastic/fleet-server] on indices [logs-foo-default], this action is granted by the index privileges [auto_configure,create_index,manage,all]"}
```

----------------------------------------

TITLE: Defining Russian Stop Words
DESCRIPTION: Defines Russian stop words used in Elasticsearch analysis, providing a reference link to the Lucene source.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_33

LANGUAGE: markdown
CODE:
```
`_russian_`
:   [Russian stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/snowball/russian_stop.txt)
```

----------------------------------------

TITLE: Downloading Configuration File via Curl
DESCRIPTION: Command to download the sample configuration file for the Confluence connector
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-confluence.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
curl https://raw.githubusercontent.com/elastic/connectors/main/config.yml.example --output ~/connectors-config/config.yml
```

----------------------------------------

TITLE: Downloading Sample Configuration File using Curl
DESCRIPTION: This snippet demonstrates how to download a sample configuration file for the Elastic network drive connector using the curl command. It specifies the output directory where the configuration file will be saved.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-network-drive.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
curl https://raw.githubusercontent.com/elastic/connectors/main/config.yml.example --output ~/connectors-config/config.yml
```

----------------------------------------

TITLE: Date Function Transformations in Elasticsearch SQL
DESCRIPTION: Examples of date-related SQL functions (DATE_TRUNC, DATE_PART, DATETIME_FORMAT) and their translations into Elasticsearch internal scripts. Shows parameter handling and date formatting patterns.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
SELECT int FROM test WHERE DATE_TRUNC('month', date) > '2018-09-04'::date;
```

LANGUAGE: elasticsearch
CODE:
```
InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.gt(InternalSqlScriptUtils.dateTrunc(params.v0,InternalQlScriptUtils.docValue(doc,params.v1),params.v2),InternalSqlScriptUtils.asDateTime(params.v3)))
```

----------------------------------------

TITLE: Cartesian-bounds Aggregation Response for Point Data
DESCRIPTION: This snippet shows the response format for a cartesian-bounds aggregation on Point data, including the top-left and bottom-right coordinates of the bounding box.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-cartesian-bounds-aggregation.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "aggregations": {
    "viewport": {
      "bounds": {
        "top_left": {
          "x": 232.6999969482422,
          "y": 4886.111328125
        },
        "bottom_right": {
          "x": 233.63890075683594,
          "y": 4886.0
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Elasticsearch Cluster State Output Example
DESCRIPTION: Example output showing the term and version of a cluster state during unsafe bootstrap operation. The output displays the current node's cluster state information in the format (term, version).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/node-tool.md#2025-04-21_snippet_2

LANGUAGE: txt
CODE:
```
Current node cluster state (term, version) pair is (4, 12)
```

----------------------------------------

TITLE: Creating Configuration Directory and File
DESCRIPTION: This snippet creates a directory and a `config.yml` file to store Elasticsearch connector configurations. No specific dependencies are mentioned.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/api-tutorial.md#2025-04-21_snippet_11

LANGUAGE: sh
CODE:
```
mkdir -p ~/connectors-config
touch ~/connectors-config/config.yml
```

----------------------------------------

TITLE: Creating an Azure VM for Elasticsearch
DESCRIPTION: Command to create an Azure virtual machine for running Elasticsearch. This specifies VM size, location, SSH settings, and authentication method using the previously created certificate.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-azure-classic-long.md#2025-04-21_snippet_6

LANGUAGE: sh
CODE:
```
azure vm create azure-elasticsearch-cluster \
                b39f27a8b8c64d52b05eac6a62ebad85__Ubuntu-13_10-amd64-server-20130808-alpha3-en-us-30GB \
                --vm-name myesnode1 \
                --location "West Europe" \
                --vm-size extrasmall \
                --ssh 22 \
                --ssh-cert /tmp/azure-certificate.pem \
                elasticsearch password1234\!\!
```

----------------------------------------

TITLE: Terms Aggregation Response in Elasticsearch
DESCRIPTION: This snippet shows the response format for a Terms aggregation in Elasticsearch. It includes the doc_count_error_upper_bound, sum_other_doc_count, and buckets with keys and document counts.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-terms-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "genres": {
      "doc_count_error_upper_bound": 0,
      "sum_other_doc_count": 0,
      "buckets": [
        {
          "key": "electronic",
          "doc_count": 6
        },
        {
          "key": "rock",
          "doc_count": 3
        },
        {
          "key": "jazz",
          "doc_count": 2
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Creating Elasticsearch Index for Version 6 in JSON
DESCRIPTION: Defines an Elasticsearch index for version 6 with settings for shards and replicas, and mappings for document fields including title, content, and created_at.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/qa/repository-old-versions-compatibility/src/javaRestTest/resources/README.md#2025-04-21_snippet_6

LANGUAGE: json
CODE:
```
PUT /index
{
  "settings": {
    "number_of_shards": 1,
    "number_of_replicas": 1
  },
  "mappings": {
    "_doc": {
      "properties": {
        "title": {
          "type": "text"
        },
        "content": {
          "type": "text"
        },
        "created_at": {
          "type": "date"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: SharePoint Drive Items Path Example
DESCRIPTION: Example showing the structure of SharePoint drive items in different directories
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-sharepoint-online.md#2025-04-22_snippet_6

LANGUAGE: txt
CODE:
```
/Documents/Report.doc
/Documents/Spreadsheet.xls
/Presentations/Q4-2020-Report.pdf
/Presentations/Q4-2020-Report-Data.xls
/Personal/Documents/Sales.xls
```

----------------------------------------

TITLE: Defining Latvian Stop Words
DESCRIPTION: Specifies the Latvian stop words for use in Elasticsearch text analysis, with links to the relevant Lucene file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_27

LANGUAGE: markdown
CODE:
```
`_latvian_`
:   [Latvian stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/lv/stopwords.txt)
```

----------------------------------------

TITLE: Defining Portuguese Stop Words
DESCRIPTION: Specifies Portuguese stop words for Elasticsearch analysis, with links to the associated Lucene file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_31

LANGUAGE: markdown
CODE:
```
`_portuguese_`
:   [Portuguese stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/snowball/portuguese_stop.txt)
```

----------------------------------------

TITLE: Defining Indonesian Stop Words
DESCRIPTION: Defines Indonesian stop words used in Elasticsearch analysis and includes a link to the Lucene resource.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_24

LANGUAGE: markdown
CODE:
```
`_indonesian_`
:   [Indonesian stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/id/stopwords.txt)
```

----------------------------------------

TITLE: Defining Bulgarian Stop Words
DESCRIPTION: Defines Bulgarian stop words within Elasticsearch, providing a link to the Lucene file.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_9

LANGUAGE: markdown
CODE:
```
`_bulgarian_`
:   [Bulgarian stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/bg/stopwords.txt)
```

----------------------------------------

TITLE: Auto-Flattened Mapping Response in Elasticsearch
DESCRIPTION: This console result shows the auto-flattened mapping after configuring nested objects under a field with 'subobjects: false'. The mapping shows how object hierarchies are converted to dot notation fields automatically.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/subobjects.md#2025-04-21_snippet_4

LANGUAGE: console-result
CODE:
```
{
  "my-index-000002" : {
    "mappings" : {
      "properties" : {
        "metrics" : {
          "subobjects" : false,
          "properties" : {
            "time.min" : { <1>
              "type" : "long"
            },
            "time.max" : {
              "type" : "long"
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Response from Variable Width Histogram Aggregation in Elasticsearch
DESCRIPTION: This snippet shows the expected response format from a variable width histogram aggregation in Elasticsearch, including bucket information with min, max, key, and doc_count.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-variablewidthhistogram-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "prices": {
      "buckets": [
        {
          "min": 10.0,
          "key": 30.0,
          "max": 50.0,
          "doc_count": 2
        },
        {
          "min": 150.0,
          "key": 185.0,
          "max": 200.0,
          "doc_count": 5
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Using Synthetic _source with Date Fields in Elasticsearch
DESCRIPTION: Example showing how synthetic _source handles date fields, specifically how it sorts date field values. The example creates an index with synthetic source enabled and inserts a document with an array of dates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/date.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
PUT idx
{
  "settings": {
    "index": {
      "mapping": {
        "source": {
          "mode": "synthetic"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "date": { "type": "date" }
    }
  }
}
PUT idx/_doc/1
{
  "date": ["2015-01-01T12:10:30Z", "2014-01-01T12:10:30Z"]
}
```

----------------------------------------

TITLE: Authenticating with Google Cloud
DESCRIPTION: Initiates the authentication process with Google Cloud. This command opens a browser window where you sign in to your Google account and authorize the Google Cloud SDK to access cloud resources.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-long.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
gcloud auth login
```

----------------------------------------

TITLE: Building an Elasticsearch Plugin with Gradle
DESCRIPTION: Command to build and package an Elasticsearch plugin into a ZIP file using Gradle. The plugin bundle is output to the build/distributions directory.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/extend/creating-stable-plugins.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
gradle bundlePlugin
```

----------------------------------------

TITLE: Defining Romanian Stop Words
DESCRIPTION: Defines Romanian stop words applicable for Elasticsearch text analysis, linking to the Lucene documentation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-stop-tokenfilter.md#2025-04-21_snippet_32

LANGUAGE: markdown
CODE:
```
`_romanian_`
:   [Romanian stop words](https://github.com/apache/lucene/blob/main/lucene/analysis/common/src/resources/org/apache/lucene/analysis/ro/stopwords.txt)
```

----------------------------------------

TITLE: Indexing All Connected Pages and Databases - JSON Snippet - JavaScript
DESCRIPTION: This JSON snippet indexes all pages and databases associated with a Notion workspace, allowing for comprehensive data indexing without specific queries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-notion.md#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
{
  "searches":[
    {
      "query":""
    }
  ]
}
```

----------------------------------------

TITLE: Setting Time Series Start Time in Elasticsearch
DESCRIPTION: Configuration for the earliest acceptable @timestamp value in a time series index.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/index-settings/time-series.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
index.time_series.start_time: "2023-01-01T00:00:00Z"
```

----------------------------------------

TITLE: Indexing a GeoJSON Polygon with Custom Orientation in Elasticsearch
DESCRIPTION: Example of indexing a GeoJSON polygon with a LEFT orientation that crosses the international dateline. The orientation parameter overrides the default RIGHT orientation specified in the GeoJSON specification.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/geo-shape.md#2025-04-21_snippet_9

LANGUAGE: json
CODE:
```
POST /example/_doc
{
  "location" : {
    "type" : "Polygon",
    "orientation" : "LEFT",
    "coordinates" : [
      [ [-177.0, 10.0], [176.0, 15.0], [172.0, 0.0], [176.0, -15.0], [-177.0, -10.0], [-177.0, 10.0] ]
    ]
  }
}
```

----------------------------------------

TITLE: Defining KEEP Command Syntax in Elasticsearch SQL
DESCRIPTION: Specifies the basic syntax for the KEEP command, which is used to select and order columns in the output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/keep.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
KEEP columns
```

----------------------------------------

TITLE: Int Summary Statistics Gathering in Java
DESCRIPTION: This snippet defines the IntSummaryStatistics class, which compiles statistics such as count, sum, min, max, and average for int values.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.util.txt#2025-04-21_snippet_23

LANGUAGE: Java
CODE:
```
class java.util.IntSummaryStatistics {
  ()
  void combine(IntSummaryStatistics)
  double getAverage()
  long getCount()
  int getMax()
  int getMin()
  long getSum()
}
```

----------------------------------------

TITLE: Capturing Run As Denied Event in Elasticsearch
DESCRIPTION: Example JSON audit log entry for when a run-as authentication request is denied. Shows fields like timestamp, node ID, user details, and request information.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_17

LANGUAGE: json
CODE:
```
{"type":"audit", "timestamp":"2020-12-30T22:49:34,859+0200", "node.id": "0RMNyghkQYCc_gVd1G6tZQ", "event.type":"transport", "event.action": "run_as_denied", "user.name":"user1", "user.run_as.name":"user1", "user.realm":"default_native", "user.run_as.realm":"default_native", "user.roles":["test_role"], "origin.type":"rest", "origin.address": "[::1]:52662", "request.id":"RcaSt872RG-R_WJBEGfYXA", "action":"indices:data/read/search", "request.name":"SearchRequest", "indices":["alias1"]}
```

----------------------------------------

TITLE: Define DATE_ADD/TIMESTAMP_ADD Function - SQL
DESCRIPTION: Defines the syntax for the DATE_ADD/TIMESTAMP_ADD function, which adds a specified interval (unit and integer value) to a date, datetime, or timestamp expression.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_24

LANGUAGE: SQL
CODE:
```
DATE_ADD(
    string_exp, <1>
    integer_exp, <2>
    datetime_exp) <3>
```

----------------------------------------

TITLE: ReindexScript Class for Reindex Operations
DESCRIPTION: This snippet defines the org.elasticsearch.script.ReindexScript class. It provides a method to retrieve metadata related to the reindexing script, allowing users to manage the associated information effectively. The class interacts with the Metadata class for operational details.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.reindex.txt#2025-04-21_snippet_3

LANGUAGE: groovy
CODE:
```
class org.elasticsearch.script.ReindexScript {
    Metadata metadata()
    WriteField field(String)
}
```

----------------------------------------

TITLE: Converting IP Strings with Leading Zeros as Decimal in ESQL
DESCRIPTION: Demonstrates parsing IPv4 addresses with leading zeros as decimal values using the 'leading_zeros' parameter set to 'decimal'. This matches Java's InetAddress.getByName behavior.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/to_ip.md#2025-04-21_snippet_2

LANGUAGE: esql
CODE:
```
ROW s = "1.1.010.1" | EVAL ip = TO_IP(s, {"leading_zeros":"decimal"})
```

----------------------------------------

TITLE: Testing Log Function with Base e in ESQL
DESCRIPTION: This SQL query tests the natural logarithm function (base e) for various input values. It covers positive numbers, zero, and negative numbers, demonstrating the function's behavior and null handling.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/log.md#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
SELECT
    log(null::LONG) AS null_long,
    log(null::DOUBLE) AS null_double,
    log(null::INTEGER) AS null_integer,
    log(1) AS one,
    log(2.718281828459045) AS e,
    log(7.389056098930650) AS e_squared,
    log(0.3678794411714423) AS reciprocal_e,
    log(0) AS zero,
    log(-1) AS negative;
```

----------------------------------------

TITLE: Generating Conjunction of Multi-Field Functions Query in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create a conjunction query using multiple field functions in Elasticsearch. It combines string concatenation and numeric addition operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_21

LANGUAGE: eql
CODE:
```
process where concat(file_name, ".", process_name) == "foo" and add(pid, ppid) > 100
```

LANGUAGE: json
CODE:
```
{"bool":{"must":[{"script":{"script":{"source":"InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalEqlScriptUtils.multiValueDocValues(doc,params.v1,X1->InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.eq(InternalEqlScriptUtils.concat([X0,params.v2,X1]),params.v3))))","params":{"v0":"file_name.keyword","v1":"process_name","v2":".","v3":"foo"}}}},{"script":{"script":{"source":"InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalEqlScriptUtils.multiValueDocValues(doc,params.v1,X1->InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.gt(InternalQlScriptUtils.add(X0,X1),params.v2))))","params":{"v0":"pid","v1":"ppid","v2":100}}}}]}
```

----------------------------------------

TITLE: Calculating Tangent in ESQL
DESCRIPTION: This snippet demonstrates how to use the TAN function in ESQL to calculate the tangent of an angle. It creates a row with a value 'a' and then applies the TAN function to it.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/tan.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a=1.8
| EVAL tan=TAN(a)
```

----------------------------------------

TITLE: Invalid Dynamic Type Casts in Painless
DESCRIPTION: Demonstrates invalid dynamic type casts in Painless that result in errors, specifically when trying to implicitly cast from `def` to `short` or `HashMap` to `List`. These examples highlight the limitations of implicit casting.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-casting.md#2025-04-21_snippet_7

LANGUAGE: painless
CODE:
```
def d = 1;                  <1>
short s = d;       // error <2>
d = new HashMap();          <3>
List l = d;        // error <4>
```

----------------------------------------

TITLE: Illustrating Invalid Reference Type Casts in Painless
DESCRIPTION: Examples of invalid reference type casts in Painless that result in errors, demonstrating cases where implicit or explicit casts are not allowed between unrelated types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-casting.md#2025-04-21_snippet_4

LANGUAGE: painless
CODE:
```
List x = new ArrayList();          
ArrayList y = x;          // error 
Map m = (Map)x;           // error 
```

----------------------------------------

TITLE: Indexing a Second Document with Different Programming Languages
DESCRIPTION: This snippet shows how to index another document with a different set of programming languages while still requiring 2 matches. This provides another document for demonstrating the terms set query.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/query-dsl/query-dsl-terms-set-query.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
PUT /job-candidates/_doc/2?refresh
{
  "name": "Jason Response",
  "programming_languages": [ "java", "php" ],
  "required_matches": 2
}
```

----------------------------------------

TITLE: Update By Query Script Interaction
DESCRIPTION: Provides script interaction methods for accessing metadata and manipulating fields during update by query operations
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.update_by_query.txt#2025-04-21_snippet_3

LANGUAGE: java
CODE:
```
class org.elasticsearch.script.UpdateByQueryScript {
    Metadata metadata()
    WriteField field(String)
}
```

----------------------------------------

TITLE: Unsupported HISTOGRAM on TIME Data Type Elasticsearch SQL
DESCRIPTION: Example demonstrating a limitation: the 'HISTOGRAM' grouping function is not supported when applied to a field cast to the 'TIME' data type. This query will fail.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-limitations.md#_snippet_10

LANGUAGE: SQL
CODE:
```
SELECT HISTOGRAM(CAST(birth_date AS TIME), INTERVAL '10' MINUTES) as h, COUNT(*) FROM t GROUP BY h
```

----------------------------------------

TITLE: Creating and Uploading Elasticsearch Instance Image on GCP
DESCRIPTION: This snippet demonstrates how to create an image of a running Elasticsearch instance, upload it to Google Cloud Storage, and add it to the images collection. It uses gcimagebundle, gsutil, and gcloud commands.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage-cloning.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
# Create an image of your current instance
sudo /usr/bin/gcimagebundle -d /dev/sda -o /tmp/

# An image has been created in `/tmp` directory:
ls /tmp
e4686d7f5bf904a924ae0cfeb58d0827c6d5b966.image.tar.gz

# Upload your image to Google Cloud Storage:
# Create a bucket to hold your image, let's say `esimage`:
gsutil mb gs://esimage

# Copy your image to this bucket:
gsutil cp /tmp/e4686d7f5bf904a924ae0cfeb58d0827c6d5b966.image.tar.gz gs://esimage

# Then add your image to images collection:
gcloud compute images create elasticsearch-2-0-0 --source-uri gs://esimage/e4686d7f5bf904a924ae0cfeb58d0827c6d5b966.image.tar.gz

# If the previous command did not work for you, logout from your instance
# and launch the same command from your local machine.
```

----------------------------------------

TITLE: Creating Index Mappings for DateTime Examples in Elasticsearch
DESCRIPTION: Console command to create a 'messages' index with mappings for priority, datetime, and message fields for use in the datetime examples.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/using-datetime-in-painless.md#2025-04-21_snippet_27

LANGUAGE: console
CODE:
```
PUT /messages
{
  "mappings": {
    "properties": {
      "priority": {
        "type": "integer"
      },
      "datetime": {
        "type": "date"
      },
      "message": {
        "type": "text"
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Index for DFS Profiling in Elasticsearch (Console)
DESCRIPTION: Sets up an index with multiple shards and indexes documents with different values on a keyword field for demonstrating DFS profiling.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-profile.md#2025-04-21_snippet_13

LANGUAGE: console
CODE:
```
PUT my-dfs-index
{
  "settings": {
    "number_of_shards": 2,
    "number_of_replicas": 1
  },
  "mappings": {
      "properties": {
        "my-keyword": { "type": "keyword" }
      }
    }
}

POST my-dfs-index/_bulk?refresh=true
{ "index" : { "_id" : "1" } }
{ "my-keyword" : "a" }
{ "index" : { "_id" : "2" } }
{ "my-keyword" : "b" }
```

----------------------------------------

TITLE: Invalid Function Application on HISTOGRAM Output SQL
DESCRIPTION: Provides an example of an invalid SQL query that attempts to apply another function (`MONTH`) directly to the output of the `HISTOGRAM` function within the `GROUP BY` clause. This is not supported as it implies a nested grouping operation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-grouping.md#_snippet_4

LANGUAGE: SQL
CODE:
```
SELECT MONTH(HISTOGRAM(birth_date), 2)) AS h, COUNT(*) as c FROM emp GROUP BY h ORDER BY h DESC;
```

----------------------------------------

TITLE: Month Enum Methods and Fields
DESCRIPTION: Describes the enum constants and methods of java.time.Month. Outlines how to represent and manipulate months of the year, including obtaining a Month from a value, retrieving localized names, and performing arithmetic operations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.time.txt#2025-04-21_snippet_19

LANGUAGE: java
CODE:
```
"class java.time.Month {
  Month APRIL
  Month AUGUST
  Month DECEMBER
  Month FEBRUARY
  Month JANUARY
  Month JULY
  Month JUNE
  Month MARCH
  Month MAY
  Month NOVEMBER
  Month OCTOBER
  Month SEPTEMBER
  Month from(TemporalAccessor)
  int firstDayOfYear(boolean)
  Month firstMonthOfQuarter()
  int getValue()
  String getDisplayName(TextStyle,Locale)
  int length(boolean)
  int maxLength()
  int minLength()
  Month minus(long)
  Month of(int)
  Month plus(long)
  Month valueOf(String)
  Month[] values()
}"
```

----------------------------------------

TITLE: Cloud Service Metric Paths Definition
DESCRIPTION: Defines the metric paths and configurations for monitoring various AWS and Azure cloud services. Includes paths for Lambda functions, networking components, storage services, database metrics, and application monitoring.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/test/framework/src/main/resources/org/elasticsearch/common/xcontent/support/many_filters.txt#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
aws.lambda.metrics.IteratorAge.avg
aws.lambda.metrics.ProvisionedConcurrencyInvocations.sum
aws.lambda.metrics.ProvisionedConcurrencySpilloverInvocations.sum
aws.lambda.metrics.ProvisionedConcurrencyUtilization.max
aws.lambda.metrics.ProvisionedConcurrentExecutions.max
aws.lambda.metrics.Throttles.avg
aws.lambda.metrics.UnreservedConcurrentExecutions.avg
```

----------------------------------------

TITLE: Using COUNT Function in ESQL
DESCRIPTION: Shows the parameter syntax for the COUNT function in ESQL. The function can be used with a field expression to count specific values, or without parameters to count the number of rows (COUNT(*)).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/parameters/count.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
`field`
:   Expression that outputs values to be counted. If omitted, equivalent to `COUNT(*)` (the number of rows).
```

----------------------------------------

TITLE: Creating a CancellableCollector with explicit context checking
DESCRIPTION: This snippet demonstrates how to create a CancellableCollector that periodically checks a TaskCancellationContext to determine if the collection operation should be cancelled.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/vector-tile/licenses/slf4j-nop-NOTICE.txt#2025-04-21_snippet_0

LANGUAGE: java
CODE:
```
CancellableCollector<SomeType> cancellableCollector = CancellableCollector.newCollector(
    Collectors.toList(),  // The underlying collector
    taskCancellationContext::checkForCancel  // Function that throws if cancelled
);
```

----------------------------------------

TITLE: HDFS Repository Plugin Configuration Note for Windows Users
DESCRIPTION: This note provides guidance for Windows users attempting to use Apache Hadoop with the HDFS plugin. It advises on placing 'winutils.exe' in the plugin folder and setting the HADOOP_HOME environment variable to minimize permission requirements.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/repository-hdfs-usage.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
Windows Users
:   Using Apache Hadoop on Windows is problematic and thus it is not recommended. For those *really* wanting to use it, make sure you place the elusive `winutils.exe` under the plugin folder and point `HADOOP_HOME` variable to it; this should minimize the amount of permissions Hadoop requires (though one would still have to add some more).
```

----------------------------------------

TITLE: Granting write_system_properties Entitlement in YAML
DESCRIPTION: This snippet shows the YAML configuration required in a security policy file (e.g., `plugin-security.policy`) to grant the `write_system_properties` entitlement to a specific module or plugin. It allows the code associated with `org.example.module` (or `ALL-UNNAMED`) to set the system properties `property.one` and `property.two`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/extend/creating-classic-plugins.md#_snippet_9

LANGUAGE: yaml
CODE:
```
org.example.module: # or 'ALL-UNNAMED' if the plugin is non-modular
  - write_system_properties:
      properties:
        - property.one
        - property.two
```

----------------------------------------

TITLE: Example Output from Pattern Analyzer in Elasticsearch
DESCRIPTION: This snippet shows the example output from the Elasticsearch `pattern` analyzer, demonstrating how the input text is split into terms based on the default pattern (`\W+`). The output is a list of terms extracted from the input string.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/text-analysis/analysis-pattern-analyzer.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
[ the, 2, quick, brown, foxes, jumped, over, the, lazy, dog, s, bone ]
```

----------------------------------------

TITLE: Sample Log Line Format for Dissect Parsing
DESCRIPTION: An example log line that would be matched by the dissect pattern. This represents a typical HTTP access log entry with IP address, timestamp, HTTP method, URL, and status code.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/dissect-processor.md#2025-04-21_snippet_1

LANGUAGE: txt
CODE:
```
1.2.3.4 - - [30/Apr/1998:22:00:52 +0000] \"GET /english/venues/cities/images/montpellier/18.gif HTTP/1.0\" 200 3171
```

----------------------------------------

TITLE: Shape Fields Centroid Aggregation
DESCRIPTION: Demonstrates centroid aggregation with shape fields, including both point and polygon geometries.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-cartesian-centroid-aggregation.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
PUT /places
{
  "mappings": {
    "properties": {
      "geometry": {
        "type": "shape"
      }
    }
  }
}

POST /places/_bulk?refresh
{"index":{"_id":1}}
{"name": "NEMO Science Museum", "geometry": "POINT(491.2350 5237.4081)" }
{"index":{"_id":2}}
{"name": "Sportpark De Weeren", "geometry": { "type": "Polygon", "coordinates": [ [ [ 496.5305328369141, 5239.347642069457 ], [ 496.6979026794433, 5239.1721758934835 ], [ 496.9425201416015, 5239.238958618537 ], [ 496.7944622039794, 5239.420969150824 ], [ 496.5305328369141, 5239.347642069457 ] ] ] } }

POST /places/_search?size=0
{
  "aggs": {
    "centroid": {
      "cartesian_centroid": {
        "field": "geometry"
      }
    }
  }
}
```

----------------------------------------

TITLE: Geometric Functions in Elasticsearch SQL
DESCRIPTION: A list of geometric functions supported in Elasticsearch SQL. These functions provide capabilities for working with spatial data, including geometry conversions, distance calculations, and coordinate extraction.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/qa/server/single-node/src/javaRestTest/resources/org/elasticsearch/xpack/sql/qa/single_node/ConsistentFunctionArgHandlingIT-non-tested-functions.txt#2025-04-21_snippet_3

LANGUAGE: SQL
CODE:
```
ST_ASTEXT
ST_ASWKT
ST_DISTANCE
ST_GEOMETRYTYPE
ST_GEOMFROMTEXT
ST_WKTTOSQL
ST_X
ST_Y
ST_Z
```

----------------------------------------

TITLE: ESQL Type Compatibility Table in Markdown
DESCRIPTION: A markdown table showing the input type combinations (lhs and rhs) and their resulting output types for ESQL operations. Includes numeric types like double, integer, long, and unsigned_long.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/operators/types/div.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| lhs | rhs | result |
| --- | --- | --- |
| double | double | double |
| double | integer | double |
| double | long | double |
| integer | double | double |
| integer | integer | integer |
| integer | long | long |
| long | double | double |
| long | integer | long |
| long | long | long |
| unsigned_long | unsigned_long | unsigned_long |
```

----------------------------------------

TITLE: Example load_native_libraries Entitlement (YAML)
DESCRIPTION: This snippet illustrates how to grant the `load_native_libraries` entitlement in the `entitlement-policy.yaml` file. This entitlement allows a plugin module to load native code, which provides significant power and should be used with caution.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/extend/creating-classic-plugins.md#_snippet_7

LANGUAGE: YAML
CODE:
```
org.example.module: # or 'ALL-UNNAMED' if the plugin is non-modular
  - load_native_libraries
```

----------------------------------------

TITLE: Indexing Documents with Multi-field Mapping in Elasticsearch
DESCRIPTION: This snippet shows how to index two documents into the previously created index with multi-field mapping.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/multi-fields.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
PUT my-index-000001/_doc/1
{
  "city": "New York"
}

PUT my-index-000001/_doc/2
{
  "city": "York"
}
```

----------------------------------------

TITLE: Syntax for DAY_OF_YEAR Function in Elasticsearch SQL
DESCRIPTION: Defines the syntax for the DAY_OF_YEAR function (also aliased as DOY). It takes a date or datetime expression and extracts the day of the year. Returns null if the input is null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-functions-datetime.md#_snippet_60

LANGUAGE: SQL
CODE:
```
DAY_OF_YEAR(datetime_exp) <1>
```

----------------------------------------

TITLE: ESQL Function Parameter Documentation
DESCRIPTION: Parameter documentation for an ESQL function that processes angles in radians. The function accepts a single parameter 'angle' which can be null, in which case the function returns null.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/parameters/tan.md#2025-04-21_snippet_0

LANGUAGE: asciidoc
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.

**Parameters**

`angle`
:   An angle, in radians. If `null`, the function returns `null`.
```

----------------------------------------

TITLE: Installing Elasticsearch Stempel Plugin - Shell
DESCRIPTION: This command installs the Elasticsearch Stempel analysis plugin using the built-in plugin manager. It requires superuser privileges (`sudo`) and should be run from the Elasticsearch installation directory's `bin` subdirectory. The plugin must be installed on all cluster nodes, and each node requires a restart after installation.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/analysis-stempel.md#_snippet_0

LANGUAGE: sh
CODE:
```
sudo bin/elasticsearch-plugin install analysis-stempel
```

----------------------------------------

TITLE: Computing Weighted Sum with MV PSERIES in ESQL
DESCRIPTION: This snippet calculates a weighted sum for a row of values using the MV PSERIES WEIGHTED SUM function in ESQL. Dependencies include a defined row input and P-series terms. The key parameter, a, is an array of numerical values, and the snippet outputs the computed sum as a single-valued column. Limitations include that it requires a pre-defined array of floats. The function is typically used in Elasticsearch within data pipelines for value transformations.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/mv_pseries_weighted_sum.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW a = [70.0, 45.0, 21.0, 21.0, 21.0]
| EVAL sum = MV_PSERIES_WEIGHTED_SUM(a, 1.5)
| KEEP sum
```

----------------------------------------

TITLE: Creating Azure Keystore for Plugin Authentication
DESCRIPTION: Commands to create a PKCS12 keystore that will be used by the Azure Discovery plugin to authenticate API calls. This involves converting keys to PEM format and creating a password-protected keystore.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-azure-classic-long.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
# Generate a keystore (azurekeystore.pkcs12)
# Transform private key to PEM format
openssl pkcs8 -topk8 -nocrypt -in azure-private.key -inform PEM -out azure-pk.pem -outform PEM
# Transform certificate to PEM format
openssl x509 -inform der -in azure-certificate.cer -out azure-cert.pem
cat azure-cert.pem azure-pk.pem > azure.pem.txt
# You MUST enter a password!
openssl pkcs12 -export -in azure.pem.txt -out azurekeystore.pkcs12 -name azure -noiter -nomaciter
```

----------------------------------------

TITLE: User Enable/Disable Object Schema for Security Config Change Events in Elasticsearch
DESCRIPTION: Specifies the structure of a user enable or disable object in security configuration change events. It includes the user's name.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_25

LANGUAGE: javascript
CODE:
```
{"user":{"name": <string>}}
```

----------------------------------------

TITLE: Elasticsearch Top Hits Aggregation for FIRST
DESCRIPTION: This JSON snippet shows the Elasticsearch aggregation equivalent to the SQL FIRST function.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_23

LANGUAGE: JSON
CODE:
```
"top_hits":{"from":0,"size":1,"version":false,"seq_no_primary_term":false,"explain":false,"docvalue_fields":[{"field":"keyword"}],"sort":[{"keyword":{"order":"asc","missing":"_last","unmapped_type":"keyword"}}]}}}}
```

----------------------------------------

TITLE: Defining List Access Grammar in Painless
DESCRIPTION: Specifies the grammar for the list access operator in Painless, which is used to access or modify elements in a List.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-reference.md#2025-04-21_snippet_8

LANGUAGE: text
CODE:
```
list_access: '[' expression ']'
```

----------------------------------------

TITLE: Logging delete_privileges Event in Elasticsearch
DESCRIPTION: Example of an audit log for the delete application privileges event. This event is logged when the API is invoked to remove one or more application privileges.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
{"type":"audit", "timestamp":"2020-12-31T00:39:30,246+0200", "node.id":
"9clhpgjJRR-iKzOw20xBNQ", "event.type":"security_config_change", "event.
action":"delete_privileges", "request.id":"7wRWVxxqTzCKEspeSP7J8g",
"delete":{"privileges":{"application":"myapp","privileges":["read"]}}}
```

----------------------------------------

TITLE: Faster Tests Command - Shell
DESCRIPTION: This shell command modifies the end-to-end testing command by adding a flag for small data size, allowing for quicker testing processes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-notion.md#2025-04-21_snippet_13

LANGUAGE: shell
CODE:
```
make ftest NAME=notion DATA_SIZE=small
```

----------------------------------------

TITLE: Providing Number Parameters as Strings in Elasticsearch Requests
DESCRIPTION: Shows an example of how a numeric parameter, such as the `size` parameter in a search request, can be provided as a string value within the JSON request body instead of a native numeric type. This is supported for numeric parameters in request bodies.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/api-conventions.md#_snippet_14

LANGUAGE: sh
CODE:
```
POST /_search
{
  "size": "1000"
}
```

----------------------------------------

TITLE: Generating Conjunction of Same Field Same Function Query in Elasticsearch
DESCRIPTION: This snippet demonstrates how to create a conjunction query using the same function on the same field in Elasticsearch. It applies length conditions on the file_name field.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/eql/src/test/resources/querytranslator_tests.txt#2025-04-21_snippet_23

LANGUAGE: eql
CODE:
```
process where length(file_name) > 5 and length(file_name) < 10
```

LANGUAGE: json
CODE:
```
{"bool":{"must":[{"script":{"script":{"source":"InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.gt(InternalEqlScriptUtils.length(X0),params.v1)))","params":{"v0":"file_name.keyword","v1":5}}}},{"script":{"script":{"source":"InternalEqlScriptUtils.multiValueDocValues(doc,params.v0,X0->InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.lt(InternalEqlScriptUtils.length(X0),params.v1)))","params":{"v0":"file_name.keyword","v1":10}}}}]}
```

----------------------------------------

TITLE: Defining ESQL Date Parsing Function
DESCRIPTION: This snippet defines the description of an ESQL function that parses dates using a specified format. It outlines the function's purpose of returning a date by parsing the second argument according to the format provided in the first argument.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/description/date_parse.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
% This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.

**Description**

Returns a date by parsing the second argument using the format specified in the first argument.
```

----------------------------------------

TITLE: SHOW INFO Example
DESCRIPTION: Example of using SHOW INFO command to retrieve deployment version, build date, and hash information.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/commands/layout/show.md#2025-04-21_snippet_1

LANGUAGE: esql
CODE:
```
SHOW INFO
```

----------------------------------------

TITLE: Demonstrating Case-Insensitive Keywords - SQL
DESCRIPTION: Provides an example query using mixed case for keywords (select, fRoM) to show that Elasticsearch SQL keywords are not case-sensitive. The semicolon terminator is also shown.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-lexical-structure.md#_snippet_1

LANGUAGE: sql
CODE:
```
select * fRoM table;
```

----------------------------------------

TITLE: Non-recommended REST Endpoint URL Examples
DESCRIPTION: Examples of REST endpoint patterns that should be avoided in Elasticsearch. These examples use plural nouns which go against the Elasticsearch convention of using singular nouns in URLs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
/_ingest/pipelines
/_ingest/pipelines/{id}
```

----------------------------------------

TITLE: Global Aggregation Response Format in Elasticsearch
DESCRIPTION: The response format for a global aggregation query, showing both the total document count in the global bucket and the calculated metrics. It displays the average price for all products alongside the average price just for t-shirts (filtered by the query).
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-global-aggregation.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  ...
  "aggregations": {
    "all_products": {
      "doc_count": 7, <1>
      "avg_price": {
        "value": 140.71428571428572 <2>
      }
    },
    "t_shirts": {
      "value": 128.33333333333334 <3>
    }
  }
}
```

----------------------------------------

TITLE: SQL Query for LAST Aggregation with Two Arguments
DESCRIPTION: This SQL query selects the last value of the date field, sorted by the int field, from the test table.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/sql/src/test/resources/org/elasticsearch/xpack/sql/planner/querytranslator_tests.txt#2025-04-21_snippet_30

LANGUAGE: SQL
CODE:
```
SELECT LAST(date, int) FROM test;
```

----------------------------------------

TITLE: Field Access Grammar Definition in Painless
DESCRIPTION: Grammar specification for field access operator in Painless scripting language.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-reference.md#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
field_access: '.' ID;
```

----------------------------------------

TITLE: Configuring Queue Capacity for Enrich Coordinator Proxy in Elasticsearch YAML
DESCRIPTION: Sets the coordinator queue capacity. By default, it's calculated as max_concurrent_requests * max_lookups_per_request.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/enrich-settings.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
enrich.coordinator_proxy.queue_capacity: 1024
```

----------------------------------------

TITLE: Logging delete_role Event in Elasticsearch
DESCRIPTION: Example of an audit log for the delete role event. This event is logged when the delete role API is invoked to delete a role in the security system.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
{"type":"audit", "timestamp":"2020-12-31T00:08:11,678+0200", "node.id":
"0RMNyghkQYCc_gVd1G6tZQ", "event.type":"security_config_change", "event.action":
"delete_role", "request.id":"155IKq3zQdWq-12dgKZRnw",
"delete":{"role":{"name":"my_admin_role"}}}
```

----------------------------------------

TITLE: Role Mapping Object Schema for Security Config Change Events in Elasticsearch
DESCRIPTION: Defines the structure of a role mapping object in security configuration change events. It includes fields for the mapping name, roles, role templates, rules, enabled status, and metadata.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/elasticsearch-audit-events.md#2025-04-21_snippet_22

LANGUAGE: javascript
CODE:
```
{"name": <string>, "roles": <string_list>, "role_templates": [{"template": <string>,
"format": <string>}], "rules": <object>, "enabled": <boolean>, "metadata": <object>}
```

----------------------------------------

TITLE: Elasticsearch Mapping Response with Preserved Dot Field Names
DESCRIPTION: This console result shows the mapping after configuring fields with 'subobjects' set to false. The output demonstrates how dots in field names are preserved, allowing fields like 'time.min' and 'time.max' to exist alongside 'time' as direct properties.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/mapping-reference/subobjects.md#2025-04-21_snippet_1

LANGUAGE: console-result
CODE:
```
{
  "my-index-000001" : {
    "mappings" : {
      "properties" : {
        "metrics" : {
          "subobjects" : false,
          "properties" : {
            "time" : {
              "type" : "long"
            },
            "time.min" : { <1>
              "type" : "long"
            },
            "time.max" : {
              "type" : "long"
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Elasticsearch Aggregation Profile Output
DESCRIPTION: This snippet shows the aggregation profile output from an Elasticsearch search query. It includes detailed timing information for each aggregation, breakdown of execution times, and debug information for expert users.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/search-profile.md#2025-04-21_snippet_9

LANGUAGE: console
CODE:
```
{
  "profile": {
    "shards": [
      {
        "aggregations": [
          {
            "type": "NumericTermsAggregator",
            "description": "my_scoped_agg",
            "time_in_nanos": 79294,
            "breakdown": {
              "reduce": 0,
              "build_aggregation": 30885,
              "build_aggregation_count": 1,
              "initialize": 2623,
              "initialize_count": 1,
              "reduce_count": 0,
              "collect": 45786,
              "collect_count": 4,
              "build_leaf_collector": 18211,
              "build_leaf_collector_count": 1,
              "post_collection": 929,
              "post_collection_count": 1
            },
            "debug": {
              "total_buckets": 1,
              "result_strategy": "long_terms",
              "built_buckets": 1
            }
          },
          {
            "type": "GlobalAggregator",
            "description": "my_global_agg",
            "time_in_nanos": 104325,
            "breakdown": {
              "reduce": 0,
              "build_aggregation": 22470,
              "build_aggregation_count": 1,
              "initialize": 12454,
              "initialize_count": 1,
              "reduce_count": 0,
              "collect": 69401,
              "collect_count": 4,
              "build_leaf_collector": 8150,
              "build_leaf_collector_count": 1,
              "post_collection": 1584,
              "post_collection_count": 1
            },
            "debug": {
              "built_buckets": 1
            },
            "children": [
              {
                "type": "NumericTermsAggregator",
                "description": "my_level_agg",
                "time_in_nanos": 76876,
                "breakdown": {
                  "reduce": 0,
                  "build_aggregation": 13824,
                  "build_aggregation_count": 1,
                  "initialize": 1441,
                  "initialize_count": 1,
                  "reduce_count": 0,
                  "collect": 61611,
                  "collect_count": 4,
                  "build_leaf_collector": 5564,
                  "build_leaf_collector_count": 1,
                  "post_collection": 471,
                  "post_collection_count": 1
                },
                "debug": {
                  "total_buckets": 1,
                  "result_strategy": "long_terms",
                  "built_buckets": 1
                }
              }
            ]
          }
        ]
      }
    ]
  }
}
```

----------------------------------------

TITLE: Creating Elasticsearch Index with Custom Analyzer for Version 6 in JSON
DESCRIPTION: Sets up an Elasticsearch index for version 6 with a custom analyzer using standard tokenizer and lowercase filter, and applies it to the content field in the mapping.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/qa/repository-old-versions-compatibility/src/javaRestTest/resources/README.md#2025-04-21_snippet_7

LANGUAGE: json
CODE:
```
PUT /index
{
  "settings": {
    "analysis": {
      "analyzer": {
        "custom_analyzer": {
          "type": "custom",
          "tokenizer": "standard",
          "filter": [
            "standard",
            "lowercase"
          ]
        }
      }
    }
  },
  "mappings": {
    "doc": {
      "properties": {
        "content": {
          "type": "text",
          "analyzer": "custom_analyzer"
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Returning Pi Using ESQL
DESCRIPTION: This snippet demonstrates how to return the constant Pi, the ratio of a circle's circumference to its diameter, using ESQL. It is generated by ESQL's AbstractFunctionTestCase and is not meant to be edited manually. There are no specific dependencies, and the output is the mathematical constant Pi.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/kibana/docs/functions/pi.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW PI()
```

----------------------------------------

TITLE: Elasticsearch Settings Configuration with Jinja2 Template
DESCRIPTION: Example of using Jinja2 templates in Elasticsearch settings configuration. This snippet shows how to include the allocated processors value with a default of 16 if not explicitly set.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/distribution/tools/ansi-console/licenses/jansi-NOTICE.txt#2025-04-21_snippet_3

LANGUAGE: text
CODE:
```
processors: {{ processors | default(16) }}
```

----------------------------------------

TITLE: Single-line Comments in Painless
DESCRIPTION: Examples of single-line comments in Painless scripts. Shows how to create standalone comments and how to add comments at the end of code lines.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-comments.md#2025-04-21_snippet_1

LANGUAGE: painless
CODE:
```
// single-line comment

int value; // single-line comment
```

----------------------------------------

TITLE: Error Response for Deleting an In-Use Extension in JSON
DESCRIPTION: This JSON snippet shows the error response received when attempting to delete an extension that is currently in use by a deployment. It includes an error message and code indicating which deployment is using the extension.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-plugins-guide.md#2025-04-21_snippet_20

LANGUAGE: json
CODE:
```
{
    "errors": [
        {
            "message": "Cannot delete extension [EXTENSION_ID]. It is used by deployments [DEPLOYMENT_NAME].",
            "code": "extensions.extension_in_use"
        }
    ]
}
```

----------------------------------------

TITLE: Invalid Date Math Positioning/Parentheses (ESQL)
DESCRIPTION: These snippets illustrate common mistakes in ESQL date math syntax, specifically when the datetime expression is not the leftmost element or when parentheses are used around time unit additions. Such syntax is currently not supported and will result in query failure.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/limitations.md#_snippet_7

LANGUAGE: ESQL
CODE:
```
1year + 2hour + now()
```

LANGUAGE: ESQL
CODE:
```
now() + (1year + 2hour)
```

----------------------------------------

TITLE: Project ID Derivation Note
DESCRIPTION: Important note about project ID derivation limitations, specifically that system properties and environment variables are not supported for this purpose.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/discovery-gce-usage.md#2025-04-21_snippet_1

LANGUAGE: plaintext
CODE:
```
Note: Deriving the project id from system properties or environment variables
(`GOOGLE_CLOUD_PROJECT` or `GCLOUD_PROJECT`) is not supported.
```

----------------------------------------

TITLE: Uploading extension file from local path in Elasticsearch Service
DESCRIPTION: Uploads the actual extension file from a local path using the extension ID obtained from the metadata creation step. Uses the PUT method with the -T option for reliable file transfer.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch-plugins/cloud/ec-plugins-guide.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
curl -v -X PUT "https://api.elastic-cloud.com/api/v1/deployments/extensions/EXTENSION_ID" \
-H 'Content-type:application/zip' \
-H "Authorization: ApiKey $CLOUD_API_KEY" \
-H 'Expect:' \
-T "/path_to/custom-plugin-8.4.3.zip"
```

----------------------------------------

TITLE: Exporting All Keys from PKCS12 Keystore
DESCRIPTION: Extracts all private keys from a PKCS12 keystore file using openssl. The output is directed to a file named 'all_keys'.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/x-pack/plugin/identity-provider/src/test/resources/org/elasticsearch/xpack/idp/saml/idp/README.txt#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
openssl pkcs12 -in multi_signing.p12 -nocerts -nodes -out all_keys
```

----------------------------------------

TITLE: Using Unary Negative Operator with 'def' Type in Painless
DESCRIPTION: This example demonstrates how the unary negative operator '-' functions with the 'def' type in Painless, showing implicit casting and type handling.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-operators-numeric.md#2025-04-21_snippet_11

LANGUAGE: painless
CODE:
```
def z = -1;
int i = -z;
```

----------------------------------------

TITLE: Query Without Sampler Aggregation
DESCRIPTION: Shows how querying without sampler aggregation considers all matches, including low-quality ones, resulting in less focused significant terms.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-bucket-sampler-aggregation.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
POST /stackoverflow/_search?size=0
{
  "query": {
    "query_string": {
      "query": "tags:kibana OR tags:javascript"
    }
  },
  "aggs": {
    "low_quality_keywords": {
      "significant_terms": {
        "field": "tags",
        "size": 3,
        "exclude": [ "kibana", "javascript" ]
      }
    }
  }
}
```

LANGUAGE: console-result
CODE:
```
{
  ...
  "aggregations": {
    "low_quality_keywords": {
      "doc_count": 600,
      "bg_count": 650,
      "buckets": [
        {
          "key": "angular",
          "doc_count": 200,
          "score": 0.02777,
          "bg_count": 200
        },
        {
          "key": "jquery",
          "doc_count": 200,
          "score": 0.02777,
          "bg_count": 200
        },
        {
          "key": "logstash",
          "doc_count": 50,
          "score": 0.0069,
          "bg_count": 50
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Cron Expression Examples - Range Triggers - TXT
DESCRIPTION: These examples show how to use ranges (`-`) and wildcards (`?`) in cron expressions. They trigger at 9:05 AM UTC Monday through Friday, and every minute between 9:00 AM and 9:05 AM UTC daily, respectively.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/api-conventions.md#_snippet_2

LANGUAGE: txt
CODE:
```
0 5 9 ? * MON-FRI
0 0-5 9 * * ?
```

----------------------------------------

TITLE: Using SIGNUM Function in ESQL to Determine Number Sign
DESCRIPTION: This example demonstrates how to use the SIGNUM function in ESQL to determine the sign of a numeric value. The SIGNUM function returns 1.0 for positive numbers, -1.0 for negative numbers, and 0.0 for zero. In this case, it returns 1.0 for the value 100.0.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/examples/signum.md#2025-04-21_snippet_0

LANGUAGE: esql
CODE:
```
ROW d = 100.0
| EVAL s = SIGNUM(d)
```

----------------------------------------

TITLE: Cartesian-bounds Aggregation Response for Shape Data
DESCRIPTION: This snippet shows the response format for a cartesian-bounds aggregation on Shape data, including the top-left and bottom-right coordinates of the bounding box encompassing all shapes.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-metrics-cartesian-bounds-aggregation.md#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
{
  "aggregations": {
    "viewport": {
      "bounds": {
        "top_left": {
          "x": 491.2349853515625,
          "y": 5239.4208984375
        },
        "bottom_right": {
          "x": 496.9425048828125,
          "y": 5237.408203125
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Elasticsearch Search Response: Selected Fields (JSON)
DESCRIPTION: Displays the JSON response from an Elasticsearch search request using the `fields` parameter. It shows the `hits` structure, including the `_index`, `_id`, `_score`, and the `fields` object containing the requested fields with their values as arrays.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/rest-apis/retrieve-selected-fields.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  "hits" : {
    "total" : {
      "value" : 1,
      "relation" : "eq"
    },
    "max_score" : 1.0,
    "hits" : [
      {
        "_index" : "my-index-000001",
        "_id" : "0",
        "_score" : 1.0,
        "fields" : {
          "user.id" : [
            "kimchy"
          ],
          "@timestamp" : [
            "4098435132000"
          ],
          "http.response.bytes": [
            1070000
          ],
          "http.response.status_code": [
            200
          ]
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Using Multiline Regex Flag in Painless
DESCRIPTION: Demonstrates the use of the multiline flag 'm' in a Painless regex pattern. This example checks if 'b' is at the start of any line in a multiline string.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/painless-regexes.md#2025-04-21_snippet_2

LANGUAGE: painless
CODE:
```
'a\nb\nc' =~ /^b$/m
```

----------------------------------------

TITLE: Implementing Conditional Response Serialization for REST API Compatibility
DESCRIPTION: Example Java code showing how to conditionally serialize fields in a response based on the requested API version, maintaining compatibility with version 7 while enabling new fields in version 8.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/REST_API_COMPATIBILITY.md#2025-04-21_snippet_3

LANGUAGE: java
CODE:
```
    if (builder.getRestApiVersion() == RestApiVersion.V_7) {
        builder.field("limit", max);
    } else {
        builder.field("maximum,", max);
        builder.field("minimum", min);
    }
```

----------------------------------------

TITLE: Configure HTTP Exporter Headers YAML
DESCRIPTION: Specifies optional HTTP headers to be included with every request sent by the 'http' monitoring exporter. This can be useful for routing requests through proxies. Headers can be defined as single string values or arrays.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/configuration-reference/monitoring-settings.md#_snippet_3

LANGUAGE: YAML
CODE:
```
xpack.monitoring.exporters.my_remote:
  headers:
    X-My-Array: [abc, def, xyz]
    X-My-Header: abc123
```

----------------------------------------

TITLE: BigInteger Class Definition in Painless
DESCRIPTION: Defines the available methods and constants for BigInteger class including arithmetic, bitwise operations, and number theory functions.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.math.txt#2025-04-21_snippet_1

LANGUAGE: java
CODE:
```
class java.math.BigInteger {
  BigInteger ONE
  BigInteger TEN
  BigInteger ZERO
  (String)
  (String,int)
  BigInteger abs()
  BigInteger add(BigInteger)
  BigInteger and(BigInteger)
  BigInteger andNot(BigInteger)
  int bitCount()
  int bitLength()
  byte byteValueExact()
  BigInteger clearBit(int)
  int compareTo(BigInteger)
  BigInteger divide(BigInteger)
  BigInteger[] divideAndRemainder(BigInteger)
  BigInteger flipBit(int)
  BigInteger gcd(BigInteger)
  int getLowestSetBit()
  int intValueExact()
  long longValueExact()
  BigInteger max(BigInteger)
  BigInteger min(BigInteger)
  BigInteger mod(BigInteger)
  BigInteger modInverse(BigInteger)
  BigInteger modPow(BigInteger,BigInteger)
  BigInteger multiply(BigInteger)
  BigInteger negate()
  BigInteger not()
  BigInteger or(BigInteger)
  BigInteger pow(int)
  BigInteger remainder(BigInteger)
  BigInteger setBit(int)
  BigInteger shiftLeft(int)
  BigInteger shiftRight(int)
  short shortValueExact()
  int signum()
  BigInteger subtract(BigInteger)
  boolean testBit(int)
  byte[] toByteArray()
  String toString(int)
  BigInteger valueOf(long)
  BigInteger xor(BigInteger)
}
```

----------------------------------------

TITLE: Using Emit Callback in Painless for Double Fields
DESCRIPTION: This snippet defines a static import for the `emit` callback which collects values that are bound to `DoubleFieldScript` instances. It allows users to emit double values when script execution occurs.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.script.double_field.txt#2025-04-21_snippet_1

LANGUAGE: Java
CODE:
```
static_import {
    # The `emit` callback to collect values for the field
    void emit(org.elasticsearch.script.DoubleFieldScript, double) bound_to org.elasticsearch.script.DoubleFieldScript$Emit
}
```

----------------------------------------

TITLE: Elasticsearch Connector Configuration
DESCRIPTION: YAML configuration example for setting up the Google Cloud Storage connector with Elasticsearch. Includes host configuration, API keys, and connector settings.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/es-connectors-google-cloud.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
# When connecting to your cloud deployment you should edit the host value
elasticsearch.host: http://host.docker.internal:9200
elasticsearch.api_key: <ELASTICSEARCH_API_KEY>

connectors:
  -
    connector_id: <CONNECTOR_ID_FROM_KIBANA>
    service_type: google_cloud_storage
    api_key: <CONNECTOR_API_KEY_FROM_KIBANA> # Optional. If not provided, the connector will use the elasticsearch.api_key instead
```

----------------------------------------

TITLE: Unsupported Scalar Function on Nested Field in WHERE Elasticsearch SQL
DESCRIPTION: Example demonstrating a limitation: scalar functions like 'LENGTH' are not supported when applied directly to nested fields within the 'WHERE' clause. This query will fail due to this restriction.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/sql/sql-limitations.md#_snippet_2

LANGUAGE: SQL
CODE:
```
SELECT * FROM test_emp WHERE LENGTH(dep.dep_name.keyword) > 5;
```

----------------------------------------

TITLE: Synopsis of elasticsearch-syskeygen Command in Shell
DESCRIPTION: The synopsis shows the basic structure and available options for the elasticsearch-syskeygen command. It includes options for configuring settings, getting help, and controlling output verbosity.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/elasticsearch/command-line-tools/syskeygen.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
bin/elasticsearch-syskeygen
[-E <KeyValuePair>] [-h, --help]
([-s, --silent] | [-v, --verbose])
```

----------------------------------------

TITLE: Method Call Example in Painless
DESCRIPTION: Demonstrates how Painless resolves method calls by examining the receiver class, method name, and parameter count.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/scripting-languages/painless/how-painless-dispatches-function.md#2025-04-21_snippet_0

LANGUAGE: painless
CODE:
```
s.foo(a, b)
```

----------------------------------------

TITLE: Preparing Snapshot Recovery Process in Elasticsearch
DESCRIPTION: Method that prepares recovery of an index from a snapshot. It extracts the repository name and snapshot name from the action request, verifies the repository access, and sets up the recovery process.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/repository-azure/licenses/siv-mode-NOTICE.txt#2025-04-22_snippet_2

LANGUAGE: java
CODE:
```
@Override
protected void doExecute(Task task, RecoverySnapshotRequest request, ActionListener<SnapshotInfo> actionListener) {
    Repository repository = repository(request.repositoryName);
    repository.getSnapshotInfo(
        threadPool.executor(ThreadPool.Names.SNAPSHOT),
        request.snapshotName,
        ActionListener.wrap(
            snapshotInfo -> {
                prepareRecovery(task, request, snapshotInfo, actionListener);
            },
            e -> {
                actionListener.onFailure(e);
            }
        )
    );
}
```

----------------------------------------

TITLE: Running Elasticsearch with Patched Policy via Gradle Shell
DESCRIPTION: Illustrates how to start Elasticsearch using the `./gradlew run` command, passing a base64 encoded entitlement policy patch via a system property. The property format is `-Des.entitlements.policy.<plugin name>=<base64_string>`.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/libs/entitlement/README.md#_snippet_4

LANGUAGE: shell
CODE:
```
./gradlew run --debug-jvm -Dtests.jvm.argline="-Des.entitlements.policy.repository-gcs=dmVyc2lvbnM6CiAgLSA5LjEuMApwb2xpY3k6CiAgQUxMLVVOTkFNRUQ6CiAgICAtIHNldF9odHRwc19jb25uZWN0aW9uX3Byb3BlcnRpZXMKICAgIC0gb3V0Ym91bmRfbmV0d29yawogICAgLSBmaWxlczoKICAgICAgLSByZWxhdGl2ZV9wYXRoOiAiLmNvbmZpZy9nY2xvdWQiCiAgICAgICAgcmVsYXRpdmVfdG86IGhvbWUKICAgICAgICBtb2RlOiByZWFkCg=="
```

----------------------------------------

TITLE: Defining DoubleStream.Builder Interface in Painless - Java
DESCRIPTION: Represents a builder for DoubleStream, useful for constructing streams incrementally. It allows adding elements one by one and then building the complete stream.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.util.stream.txt#2025-04-21_snippet_3

LANGUAGE: Java
CODE:
```
class java.util.stream.DoubleStream$Builder {
  DoubleStream.Builder add(double)
  DoubleStream build()
}
```

----------------------------------------

TITLE: Sample Response for T-Shirt Sales Percentage Calculation
DESCRIPTION: Illustrates the response format for the t-shirt sales percentage calculation query. It shows how the results are structured, including the date, total sales, t-shirt sales, and calculated percentage for each month.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/aggregations/search-aggregations-pipeline-bucket-script-aggregation.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
{
   "took": 11,
   "timed_out": false,
   "_shards": ...,
   "hits": ...,
   "aggregations": {
      "sales_per_month": {
         "buckets": [
            {
               "key_as_string": "2015/01/01 00:00:00",
               "key": 1420070400000,
               "doc_count": 3,
               "total_sales": {
                   "value": 550.0
               },
               "t-shirts": {
                   "doc_count": 1,
                   "sales": {
                       "value": 200.0
                   }
               },
               "t-shirt-percentage": {
                   "value": 36.36363636363637
               }
            },
            {
               "key_as_string": "2015/02/01 00:00:00",
               "key": 1422748800000,
               "doc_count": 2,
               "total_sales": {
                   "value": 60.0
               },
               "t-shirts": {
                   "doc_count": 1,
                   "sales": {
                       "value": 10.0
                   }
               },
               "t-shirt-percentage": {
                   "value": 16.666666666666664
               }
            },
            {
               "key_as_string": "2015/03/01 00:00:00",
               "key": 1425168000000,
               "doc_count": 2,
               "total_sales": {
                   "value": 375.0
               },
               "t-shirts": {
                   "doc_count": 1,
                   "sales": {
                       "value": 175.0
                   }
               },
               "t-shirt-percentage": {
                   "value": 46.666666666666664
               }
            }
         ]
      }
   }
}
```

----------------------------------------

TITLE: Using TESTSETUP and TEARDOWN Markers in Elasticsearch Docs
DESCRIPTION: Examples of using TESTSETUP and TEARDOWN markers for setting up and cleaning up test environments.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/README.md#2025-04-21_snippet_5

LANGUAGE: markdown
CODE:
```
% TESTSETUP
// TEARDOWN
```

----------------------------------------

TITLE: Executing Search Benchmark with Gradle
DESCRIPTION: Gradle command to run a search benchmark on Elasticsearch. It defines client type, benchmark type, target host, index name, search query, and target throughput rates.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/client/benchmark/README.md#2025-04-21_snippet_3

LANGUAGE: gradle
CODE:
```
./gradlew -p client/benchmark run --args ' rest search localhost geonames {"query":{"match_phrase":{"name":"Sankt Georgen"}}} 500,1000,1100,1200'
```

----------------------------------------

TITLE: ESQL Coordinate Type Combinations Table
DESCRIPTION: Markdown table showing valid input type combinations for y_coordinate and x_coordinate parameters, along with their resulting output type. All combinations result in double type output.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/types/atan2.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| y_coordinate | x_coordinate | result |
| --- | --- | --- |
| double | double | double |
| double | integer | double |
| double | long | double |
| double | unsigned_long | double |
| integer | double | double |
| integer | integer | double |
| integer | long | double |
| integer | unsigned_long | double |
| long | double | double |
| long | integer | double |
| long | long | double |
| long | unsigned_long | double |
| unsigned_long | double | double |
| unsigned_long | integer | double |
| unsigned_long | long | double |
| unsigned_long | unsigned_long | double |
```

----------------------------------------

TITLE: Writing YAML REST Test for Custom Token Filter
DESCRIPTION: This YAML file defines a REST test for the custom 'hello_world' token filter. It uses the indices.analyze API to verify the filter's behavior.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/extend/example-text-analysis-plugin.md#2025-04-21_snippet_6

LANGUAGE: yaml
CODE:
```
## Sample rest test
---
"Hello world plugin test - removes all tokens except hello and world":
  - do:
      indices.analyze:
        body:
          text: hello to everyone except the world
          tokenizer: standard
          filter:
            - type: "hello_world"
  - length: { tokens: 2 }
  - match:  { tokens.0.token: "hello" }
  - match:  { tokens.1.token: "world" }
```

----------------------------------------

TITLE: Running PostgreSQL in Docker
DESCRIPTION: Docker command to start a PostgreSQL instance with a custom user and password, exposing it on port 5432.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/search-connectors/api-tutorial.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
docker run --name postgres -e POSTGRES_USER=myuser -e POSTGRES_PASSWORD=mypassword -p 5432:5432 -d postgres
```

----------------------------------------

TITLE: GeoIP Pipeline Response with Country Database
DESCRIPTION: Sample response showing the enriched document with country-level geographical information after processing with the GeoIP processor using the country database.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/enrich-processor/geoip-processor.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
  "found": true,
  "_index": "my-index-000001",
  "_id": "my_id",
  "_version": 1,
  "_seq_no": 65,
  "_primary_term": 1,
  "_source": {
    "ip": "89.160.20.128",
    "geo": {
      "continent_name": "Europe",
      "country_name": "Sweden",
      "country_iso_code": "SE"
    }
  }
}
```

----------------------------------------

TITLE: Displaying Supported Type Combinations for ESQL Power Function
DESCRIPTION: This markdown table shows the supported input types for base and exponent, and the resulting output type for ESQL's power function. It covers combinations of double, integer, long, and unsigned_long types.
SOURCE: https://github.com/elastic/elasticsearch/blob/main/docs/reference/query-languages/esql/_snippets/functions/types/pow.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| base | exponent | result |
| --- | --- | --- |
| double | double | double |
| double | integer | double |
| double | long | double |
| double | unsigned_long | double |
| integer | double | double |
| integer | integer | double |
| integer | long | double |
| integer | unsigned_long | double |
| long | double | double |
| long | integer | double |
| long | long | double |
| long | unsigned_long | double |
| unsigned_long | double | double |
| unsigned_long | integer | double |
| unsigned_long | long | double |
| unsigned_long | unsigned_long | double |
```