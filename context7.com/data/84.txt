TITLE: Starting the Vite Dev Server via CLI - Bash
DESCRIPTION: This snippet demonstrates how to start the Vite development server from the command line, optionally specifying a root directory. It assumes Node.js and Vite are installed in the environment. The command can be run as shown to serve the project in the current directory or another folder, and supports multiple CLI options for customization. Input: optional [root] parameter specifying the project directory; Output: Vite dev server running locally.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/cli.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
vite [root]
```

----------------------------------------

TITLE: Running Development Server with npm
DESCRIPTION: Runs the Vite application in development mode. The server is hosted locally at port 5173, allowing developers to test their applications during development. It requires a functional npm environment.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/template-solid/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Scaffolding a Vite Project with Package Managers
DESCRIPTION: Provides commands to create a new Vite project using different package managers. This requires Node.js version 18+ or 20+.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm create vite@latest
```

LANGUAGE: bash
CODE:
```
yarn create vite
```

LANGUAGE: bash
CODE:
```
pnpm create vite
```

LANGUAGE: bash
CODE:
```
bun create vite
```

LANGUAGE: bash
CODE:
```
deno init --npm vite
```

----------------------------------------

TITLE: Running the Development Server using npm in Bash
DESCRIPTION: This Bash command executes the `dev` script defined in the project's `package.json` file using npm. This typically starts a local development server (often on http://localhost:5173 for Vite projects) with features like hot module replacement, allowing developers to view and test the application in a browser during development.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/template-qwik/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
### `npm run dev`
```

----------------------------------------

TITLE: Using the 'create-vite' Scaffolding Tool
DESCRIPTION: Refers to the `create-vite` scaffolding tool, typically invoked via package managers like npm, yarn, or pnpm (e.g., `pnpm create vite`). It sets up a Vite project, offering choices for frameworks (like Vue, React, Svelte) and providing access to extra templates (including those from `create-vite-extra`) under an 'Others' option. It also provides shortcuts to setup official starters from frameworks like `create-vue`, `Nuxt 3`, `SvelteKit`, etc.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/blog/announcing-vite6.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
create vite
```

----------------------------------------

TITLE: Installing Vite with NPM
DESCRIPTION: Command to scaffold a new Vite application using NPM.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/CHANGELOG.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
$ npm init vite@latest
```

----------------------------------------

TITLE: Accessing VITE_ Prefixed Env Variables (JavaScript)
DESCRIPTION: Shows how to access environment variables exposed by Vite using import.meta.env. This example corresponds to the .env file shown previously, illustrating that only VITE_SOME_KEY is accessible, while DB_PASSWORD is not due to the VITE_ prefix requirement. Note that values are exposed as strings.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/env-and-mode.md#_snippet_1

LANGUAGE: js
CODE:
```
console.log(import.meta.env.VITE_SOME_KEY) // "123"
console.log(import.meta.env.DB_PASSWORD) // undefined
```

----------------------------------------

TITLE: Example package.json Scripts
DESCRIPTION: Common npm scripts defined in `package.json` for running Vite commands (`dev`, `build`, `preview`). These scripts provide convenient aliases for the Vite CLI.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/index.md#_snippet_6

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "dev": "vite", // start dev server, aliases: `vite dev`, `vite serve`
    "build": "vite build", // build for production
    "preview": "vite preview" // locally preview production build"
  }
}
```

----------------------------------------

TITLE: Creating a Vite Project with NPM
DESCRIPTION: This snippet demonstrates how to scaffold a new Vite project using NPM. Ensure Node.js version 18+ is installed. Follow the prompts after running the command to complete the setup.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm create vite@latest
```

----------------------------------------

TITLE: Initializing a Vite Project with npm
DESCRIPTION: Command to create a new Vite-powered project using npm. This command initializes a new project with Vite 2.0, allowing developers to quickly start building their application.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/blog/announcing-vite2.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm init @vitejs/app
```

----------------------------------------

TITLE: Configuring Basic SPA/MPA Environment in Vite
DESCRIPTION: Example of a basic Vite configuration for a single-page or multi-page application. This configuration implicitly applies to the 'client' environment.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default defineConfig({
  build: {
    sourcemap: false,
  },
  optimizeDeps: {
    include: ['lib'],
  },
})
```

----------------------------------------

TITLE: Building the Application for Production using npm in Bash
DESCRIPTION: This Bash command executes the `build` script defined in the project's `package.json` file using npm. This script typically compiles and bundles the application's assets (JavaScript, CSS, etc.) into an optimized format suitable for deployment. The output is usually placed in a `dist` directory.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/template-qwik/README.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
### `npm run build`
```

----------------------------------------

TITLE: Building the Project for Production via Vite CLI - Bash
DESCRIPTION: This snippet shows how to build a Vite project for production using the CLI. Node.js and Vite must be installed before running this command. The command takes an optional [root] parameter to define the working directory and offers various CLI options for customizing the build (output directory, minification, etc.). Input: optional [root] parameter; Output: production-ready build assets in the output directory (default: dist).
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/cli.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
vite build [root]
```

----------------------------------------

TITLE: Building with default mode in Vite
DESCRIPTION: This command executes the Vite build process using the default configuration. By default, the `NODE_ENV` and the Vite mode are both set to "production" when running `vite build`. This is suitable for creating production-ready bundles.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/env-and-mode.md#_snippet_11

LANGUAGE: Shell
CODE:
```
vite build
```

----------------------------------------

TITLE: Running Vite Development Server
DESCRIPTION: Start the Vite development server to serve your project files. The command depends on the package manager used to install Vite.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/index.md#_snippet_5

LANGUAGE: bash
CODE:
```
npx vite
```

LANGUAGE: bash
CODE:
```
yarn vite
```

LANGUAGE: bash
CODE:
```
pnpm vite
```

LANGUAGE: bash
CODE:
```
bunx vite
```

LANGUAGE: bash
CODE:
```
deno run -A npm:vite
```

----------------------------------------

TITLE: Scaffolding Vite + Vue Project
DESCRIPTION: These commands show how to scaffold a Vite project with a Vue template using different package managers. Ensure that Node.js version 18+ is installed.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/README.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
# npm 7+, extra double-dash is needed:
npm create vite@latest my-vue-app -- --template vue

# yarn
yarn create vite my-vue-app --template vue

# pnpm
pnpm create vite my-vue-app --template vue

# Bun
bun create vite my-vue-app --template vue
```

----------------------------------------

TITLE: Installing Project Dependencies using NPM (Bash)
DESCRIPTION: This command installs all the necessary project dependencies defined in the `package.json` file using the Node Package Manager (NPM). The surrounding text notes that `pnpm install` or `yarn install` can be used as alternatives depending on the preferred package manager.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/template-solid-ts/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ npm install # or pnpm install or yarn install
```

----------------------------------------

TITLE: Augmenting ImportMetaEnv for Vite TypeScript IntelliSense
DESCRIPTION: This TypeScript code snippet shows how to create a vite-env.d.ts file to augment the ImportMetaEnv interface. This allows TypeScript to provide IntelliSense for user-defined environment variables prefixed with VITE_, improving type safety and developer experience. It also includes an optional line to make ImportMetaEnv strict.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/env-and-mode.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
/// <reference types="vite/client" />

interface ViteTypeOptions {
  // By adding this line, you can make the type of ImportMetaEnv strict
  // to disallow unknown keys.
  // strictImportMetaEnv: unknown
}

interface ImportMetaEnv {
  readonly VITE_APP_TITLE: string
  // more env variables...
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}
```

----------------------------------------

TITLE: Building the Application for Production using NPM (Bash)
DESCRIPTION: Executes the `build` script defined in the `package.json`, which bundles the SolidJS application for production using Vite. This process optimizes the code for performance, minifies it, and outputs the final assets (including hashed filenames) to the `dist` folder, ready for deployment.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/template-solid-ts/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npm run build
```

----------------------------------------

TITLE: Running the Development Server using NPM (Bash)
DESCRIPTION: Executes the `dev` script defined in the `package.json` file, typically using Vite. This command starts the application in development mode with features like hot module replacement. The application becomes accessible in the browser, usually at `http://localhost:5173`.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/template-solid-ts/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Installing Project Dependencies with npm
DESCRIPTION: This command installs all project dependencies using npm as the package manager. Alternatively, pnpm or yarn can be used. It is a prerequisite to ensure all necessary packages are available for development and production.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/template-solid/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ npm install # or pnpm install or yarn install
```

----------------------------------------

TITLE: Implementing Conditional Logic with Vite SSR
DESCRIPTION: Demonstrates how to use `import.meta.env.SSR` to execute code conditionally based on whether it's running on the server or the client. This variable is statically replaced during the build process, enabling effective tree-shaking of unused code branches.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/ssr.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import 'vite/client'
// ---cut---
if (import.meta.env.SSR) {
  // ... server only logic
}
```

----------------------------------------

TITLE: Building for Production with npm
DESCRIPTION: This command builds the Vite application for production by generating optimized bundles in the `dist` directory. It ensures Solid components are minified and the build is optimized for performance, ready for deployment.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/template-solid/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npm run build
```

----------------------------------------

TITLE: Creating Vite Project with Template
DESCRIPTION: Use the `create-vite` tool to quickly scaffold a new Vite project based on a predefined template (e.g., Vue). The command varies slightly depending on the package manager used.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/index.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm create vite@latest my-vue-app -- --template vue
```

LANGUAGE: bash
CODE:
```
yarn create vite my-vue-app --template vue
```

LANGUAGE: bash
CODE:
```
pnpm create vite my-vue-app --template vue
```

LANGUAGE: bash
CODE:
```
bun create vite my-vue-app --template vue
```

LANGUAGE: bash
CODE:
```
deno init --npm vite my-vue-app --template vue
```

----------------------------------------

TITLE: Defining Application Entry HTML in Vite (HTML)
DESCRIPTION: This HTML snippet illustrates a standard Vite entry HTML file, including favicon and stylesheet references in the <head> section, an image asset, and a module-based script import for the application entry. External assets referenced by src or href will be processed and bundled by Vite. Relevant dependencies include the referenced CSS and JavaScript files, as well as image assets. Inputs include typical HTML attributes for resource linking; output is a complete, Vite-compatible static HTML file. Ensure paths match your actual project structure.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<!doctype html>\n<html>\n  <head>\n    <link rel=\"icon\" href=\"/favicon.ico\" />\n    <link rel=\"stylesheet\" href=\"/src/styles.css\" />\n  </head>\n  <body>\n    <img src=\"/src/images/logo.svg\" alt=\"logo\" />\n    <script type=\"module\" src=\"/src/main.js\"></script>\n  </body>\n</html>
```

----------------------------------------

TITLE: Installing Dependencies for Qwik Project - Bash
DESCRIPTION: This shell command installs all necessary dependencies for a Qwik project using the package manager specified (npm, pnpm, or yarn). The command must be executed in the project root directory. No external dependencies beyond a Node-compatible package manager are required. Input is the project directory; output is a ready environment with all packages installed, suitable for running and building the Qwik app. This step is a prerequisite before using any of the npm scripts (`dev`, `build`, etc.).
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/template-qwik-ts/README.md#2025-04-22_snippet_1

LANGUAGE: Bash
CODE:
```
$ npm install # or pnpm install or yarn install
```

----------------------------------------

TITLE: Configuring CSS Pre-Processor Options in Vite - JavaScript
DESCRIPTION: This snippet demonstrates how to use defineConfig to customize options for CSS pre-processors in Vite, such as less, styl, and scss. It sets options like Less math parsing, Stylus color definitions, and SCSS API mode and importers list. Requires Vite as a dependency and relevant pre-processor packages installed. Inputs are pre-processor option objects, output is a config object passed to Vite.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/shared-options.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
export default defineConfig({
  css: {
    preprocessorOptions: {
      less: {
        math: 'parens-division',
      },
      styl: {
        define: {
          $specialColor: new stylus.nodes.RGBA(51, 197, 255, 1),
        },
      },
      scss: {
        api: 'modern-compiler', // or "modern", "legacy"
        importers: [
          // ...
        ],
      },
    },
  },
})
```

----------------------------------------

TITLE: Configuring server.proxy in Vite (JS)
DESCRIPTION: This snippet provides various examples of configuring proxy rules for the Vite development server using the 'server.proxy' option. It shows string shorthand, object options with target and rewrite, RegExp matching, accessing the proxy instance, and configuring websocket proxying.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/server-options.md#_snippet_2

LANGUAGE: js
CODE:
```
export default defineConfig({
  server: {
    proxy: {
      // string shorthand:
      // http://localhost:5173/foo
      //   -> http://localhost:4567/foo
      '/foo': 'http://localhost:4567',
      // with options:
      // http://localhost:5173/api/bar
      //   -> http://jsonplaceholder.typicode.com/bar
      '/api': {
        target: 'http://jsonplaceholder.typicode.com',
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, ''),
      },
      // with RegExp:
      // http://localhost:5173/fallback/
      //   -> http://jsonplaceholder.typicode.com/
      '^\/fallback\/.*': {
        target: 'http://jsonplaceholder.typicode.com',
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/fallback/, ''),
      },
      // Using the proxy instance
      '/api': {
        target: 'http://jsonplaceholder.typicode.com',
        changeOrigin: true,
        configure: (proxy, options) => {
          // proxy will be an instance of 'http-proxy'
        },
      },
      // Proxying websockets or socket.io:
      // ws://localhost:5173/socket.io
      //   -> ws://localhost:5174/socket.io
      // Exercise caution using `rewriteWsOrigin` as it can leave the
      // proxying open to CSRF attacks.
      '/socket.io': {
        target: 'ws://localhost:5174',
        ws: true,
        rewriteWsOrigin: true,
      },
    },
  },
})
```

----------------------------------------

TITLE: Configuring package.json for Vite Build and Preview Scripts
DESCRIPTION: Basic package.json configuration with build and preview scripts for a Vite application. These scripts allow building the production version and previewing it locally.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/static-deploy.md#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "build": "vite build",
    "preview": "vite preview"
  }
}
```

----------------------------------------

TITLE: Manually Installing Vite
DESCRIPTION: Install Vite as a development dependency in an existing project using your preferred package manager. This allows you to use the Vite CLI commands.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/index.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm install -D vite
```

LANGUAGE: bash
CODE:
```
yarn add -D vite
```

LANGUAGE: bash
CODE:
```
pnpm add -D vite
```

LANGUAGE: bash
CODE:
```
bun add -D vite
```

LANGUAGE: bash
CODE:
```
deno add -D npm:vite
```

----------------------------------------

TITLE: Example index.html File
DESCRIPTION: A basic `index.html` file structure for a Vite project. Vite treats this file as the entry point during development.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/index.md#_snippet_4

LANGUAGE: html
CODE:
```
<p>Hello Vite!</p>
```

----------------------------------------

TITLE: Defining VITE_ Prefixed Env Variables (.env)
DESCRIPTION: Demonstrates how to define environment variables in a .env file. Only variables prefixed with VITE_ (or the configured envPrefix) will be exposed to the client-side code via import.meta.env. DB_PASSWORD will not be exposed.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/env-and-mode.md#_snippet_0

LANGUAGE: .env
CODE:
```
VITE_SOME_KEY=123
DB_PASSWORD=foobar
```

----------------------------------------

TITLE: Building a Vite Application for Production
DESCRIPTION: Command to build a Vite application for production. This generates optimized static files in the dist directory by default.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/static-deploy.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ npm run build
```

----------------------------------------

TITLE: Defining Production Environment Variables in Vite
DESCRIPTION: This snippet shows the content of a .env.production file, which defines environment variables specifically for the production build mode in Vite. Variables defined here, like VITE_APP_TITLE, are loaded when running vite build by default.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/env-and-mode.md#_snippet_7

LANGUAGE: Configuration
CODE:
```
VITE_APP_TITLE=My App
```

----------------------------------------

TITLE: Quick Start with Vite 5 using pnpm
DESCRIPTION: Command to scaffold a Vite project using pnpm create vite or pnpm create vite-extra for additional templates.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/blog/announcing-vite5.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
pnpm create vite
```

LANGUAGE: shell
CODE:
```
pnpm create vite-extra
```

----------------------------------------

TITLE: Configuring Plugins in Vite
DESCRIPTION: Example of how to configure plugins in a Vite project's configuration file. It demonstrates adding both Vite-specific and Rollup plugins.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-plugin.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import vitePlugin from 'vite-plugin-feature'
import rollupPlugin from 'rollup-plugin-feature'

export default defineConfig({
  plugins: [vitePlugin(), rollupPlugin()],
})
```

----------------------------------------

TITLE: Structuring HTML for Vite SSR
DESCRIPTION: Defines the basic structure for the `index.html` file in a Vite SSR application. It includes a placeholder comment (`<!--ssr-outlet-->`) where the server-rendered HTML will be injected and links the client-side entry point script.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/ssr.md#_snippet_0

LANGUAGE: html
CODE:
```
<div id="app"><!--ssr-outlet--></div>
<script type="module" src="/src/entry-client.js"></script>
```

----------------------------------------

TITLE: Creating a Vite Project with Yarn
DESCRIPTION: This snippet demonstrates how to scaffold a new Vite project using Yarn as the package manager. Follow the interactive setup prompts after executing the command.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
yarn create vite
```

----------------------------------------

TITLE: Demonstrating Bare Module Import in JavaScript
DESCRIPTION: This snippet shows a bare module import that Vite will detect and process. Vite pre-bundles dependencies and rewrites imports to valid URLs for proper browser importing.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { someMethod } from 'my-dep'
```

----------------------------------------

TITLE: Using Environment Variables in Vite Config
DESCRIPTION: Loading environment variables using the loadEnv helper and using them in the Vite configuration.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/index.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
import { defineConfig, loadEnv } from 'vite'

export default defineConfig(({ mode }) => {
  // Load env file based on `mode` in the current working directory.
  // Set the third parameter to '' to load all env regardless of the
  // `VITE_` prefix.
  const env = loadEnv(mode, process.cwd(), '')
  return {
    // vite config
    define: {
      __APP_ENV__: JSON.stringify(env.APP_ENV),
    },
  }
})
```

----------------------------------------

TITLE: Adding Production Build Scripts (JSON)
DESCRIPTION: Defines the production build scripts within the `scripts` section of `package.json`. It includes `build:client` for a standard client-side build (`vite build --outDir dist/client`) and `build:server` for the SSR server bundle (`vite build --outDir dist/server --ssr src/entry-server.js`), specifying output directories and the SSR entry point.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/ssr.md#_snippet_5

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "dev": "node server",
    "build:client": "vite build --outDir dist/client",
    "build:server": "vite build --outDir dist/server --ssr src/entry-server.js"
  }
}
```

----------------------------------------

TITLE: Installing Project Dependencies using npm/pnpm/yarn in Bash
DESCRIPTION: This Bash command is used to install the project's dependencies defined in the `package.json` file. It shows the command using `npm`, but mentions that `pnpm install` or `yarn install` can be used as alternatives depending on the package manager chosen for the project.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/template-qwik/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
```bash
$ npm install # or pnpm install or yarn install
```
```

----------------------------------------

TITLE: Configuring package.json for a Single-Entry Vite Library
DESCRIPTION: Recommended `package.json` structure for a library built with Vite using a single entry point. It specifies the package name, sets `type` to `module`, lists distributable files (`dist`), and defines `main` (for CJS/UMD), `module` (for ESM), and `exports` fields pointing to the generated UMD and ES module bundles produced by the Vite build.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/build.md#2025-04-22_snippet_7

LANGUAGE: json
CODE:
```
```json [package.json (single entry)]
{
  "name": "my-lib",
  "type": "module",
  "files": ["dist"],
  "main": "./dist/my-lib.umd.cjs",
  "module": "./dist/my-lib.js",
  "exports": {
    ".": {
      "import": "./dist/my-lib.js",
      "require": "./dist/my-lib.umd.cjs"
    }
  }
}
```
```

----------------------------------------

TITLE: Installing CSS Pre-Processors for Vite Projects (Bash)
DESCRIPTION: This set of bash commands shows how to install various CSS pre-processors (Sass embedded, Less, Stylus) needed for Vite to handle .scss, .sass, .less, .styl, and .stylus files. Each command installs the dev-dependency required for that pre-processor. No additional Vite plugin is needed; these packages must be present in your node_modules. Input is npm add commands, output is the installation of the pre-processor.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
# .scss and .sass\nnpm add -D sass-embedded # or sass\n\n# .less\nnpm add -D less\n\n# .styl and .stylus\nnpm add -D stylus
```

----------------------------------------

TITLE: Adding Vite Client Types to TypeScript Project
DESCRIPTION: This snippet shows how to add Vite's client-side type definitions to a TypeScript project. It uses a triple-slash directive to reference the Vite client types, providing type information for Vite-specific features.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
/// <reference types="vite/client" />
```

----------------------------------------

TITLE: Creating a Virtual Module Plugin
DESCRIPTION: An example of a plugin that creates a virtual module. This demonstrates how to use the resolveId and load hooks to create a module that doesn't exist on the file system.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-plugin.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
export default function myPlugin() {
  const virtualModuleId = 'virtual:my-module'
  const resolvedVirtualModuleId = '\0' + virtualModuleId

  return {
    name: 'my-plugin', // required, will show up in warnings and errors
    resolveId(id) {
      if (id === virtualModuleId) {
        return resolvedVirtualModuleId
      }
    },
    load(id) {
      if (id === resolvedVirtualModuleId) {
        return `export const msg = "from virtual module"`
      }
    },
  }
}
```

----------------------------------------

TITLE: Defining a CSS Module with Custom Class in Vite (CSS)
DESCRIPTION: This CSS snippet demonstrates how to define a CSS module in Vite by using the .module.css extension. The example illustrates a single class named .red which sets the text color to red. To use this, import the CSS module in your JavaScript files. The primary dependency is the Vite build tool which enables CSS modules processing. Input is a standard CSS file and output is a JavaScript object mapping class names.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_6

LANGUAGE: css
CODE:
```
.red {\n  color: red;\n}
```

----------------------------------------

TITLE: Transforming Custom File Types Plugin
DESCRIPTION: A simple example of a Vite plugin that transforms custom file types. It uses the transform hook to compile files with a specific extension to JavaScript.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-plugin.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
const fileRegex = /\.(my-file-ext)$/

export default function myPlugin() {
  return {
    name: 'transform-file',

    transform(src, id) {
      if (fileRegex.test(id)) {
        return {
          code: compileFileToJS(src),
          map: null, // provide source map if available
        }
      }
    },
  }
}
```

----------------------------------------

TITLE: Basic Vite Configuration in JavaScript
DESCRIPTION: The most basic Vite config file structure using JavaScript. It exports a default object with configuration options.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/index.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // config options
}
```

----------------------------------------

TITLE: Defining Global Constants in Vite Configuration
DESCRIPTION: Example of configuring global constant replacements in Vite using the define option. This shows how to define version strings and API URLs that will be statically replaced during build.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/shared-options.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
export default defineConfig({
  define: {
    __APP_VERSION__: JSON.stringify('v1.0.0'),
    __API_URL__: 'window.__backend_api_url',
  },
})
```

----------------------------------------

TITLE: Exposing Environment Variables via Define Option in Vite - JavaScript
DESCRIPTION: This snippet shows how to expose an unprefixed environment variable to client-side code by using the define option in Vite's configuration. It leverages JSON.stringify for serialization. Inputs are environment variable values from process.env; outputs are replacements accessible at compile time. Ensures sensitive variables are not accidentally exposed.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/shared-options.md#2025-04-22_snippet_12

LANGUAGE: js
CODE:
```
define: {
  'import.meta.env.ENV_VARIABLE': JSON.stringify(process.env.ENV_VARIABLE)
}
```

----------------------------------------

TITLE: Basic Glob Import in Vite
DESCRIPTION: Demonstrates how to use import.meta.glob to import multiple modules from a directory. The code shows both the input pattern and how Vite transforms it into lazy-loaded dynamic imports.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_18

LANGUAGE: javascript
CODE:
```
const modules = import.meta.glob('./dir/*.js')
```

LANGUAGE: javascript
CODE:
```
// code produced by vite
const modules = {
  './dir/bar.js': () => import('./dir/bar.js'),
  './dir/foo.js': () => import('./dir/foo.js')
}
```

----------------------------------------

TITLE: Installing Legacy Browser Support Plugin for Vite
DESCRIPTION: This snippet shows how to install the @vitejs/plugin-legacy package using npm to add support for legacy browsers in a Vite project.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/using-plugins.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ npm add -D @vitejs/plugin-legacy
```

----------------------------------------

TITLE: Rendering Asset Links in HTML Template for Production
DESCRIPTION: Demonstrates how to use the manifest file to render proper asset links in the HTML template for production builds.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/backend-integration.md#2025-04-22_snippet_5

LANGUAGE: html
CODE:
```
<!-- if production -->

<!-- for cssFile of manifest[name].css -->
<link rel="stylesheet" href="/{{ cssFile }}" />

<!-- for chunk of importedChunks(manifest, name) -->
<!-- for cssFile of chunk.css -->
<link rel="stylesheet" href="/{{ cssFile }}" />

<script type="module" src="/{{ manifest[name].file }}"></script>

<!-- for chunk of importedChunks(manifest, name) -->
<link rel="modulepreload" href="/{{ chunk.file }}" />
```

----------------------------------------

TITLE: Injecting Vite Scripts in HTML Template for Development
DESCRIPTION: Adds necessary script tags to the HTML template for development, including Vite client and main entry point.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/backend-integration.md#2025-04-22_snippet_2

LANGUAGE: html
CODE:
```
<!-- if development -->
<script type="module" src="http://localhost:5173/@vite/client"></script>
<script type="module" src="http://localhost:5173/main.js"></script>
```

----------------------------------------

TITLE: Adding SSR Manifest Flag to Vite Build Script (package.json)
DESCRIPTION: This snippet shows how to modify the client build script in `package.json` to include the `--ssrManifest` flag. This flag instructs Vite to generate the `.vite/ssr-manifest.json` file, which maps module IDs to their corresponding client chunks and assets, enabling features like preload directives.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/ssr.md#_snippet_6

LANGUAGE: diff
CODE:
```
-
"build:client": "vite build --outDir dist/client",
+
"build:client": "vite build --outDir dist/client --ssrManifest",
```

----------------------------------------

TITLE: Illustrating Type-Only Imports and Exports in TypeScript
DESCRIPTION: This TypeScript example demonstrates the use of type-only imports and exports to avoid potential bundling issues with type information. This syntax is recommended when working with TypeScript in Vite.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type { T } from 'only/types'
export type { T }
```

----------------------------------------

TITLE: Configuring Vite Dev Server with Custom Middleware in JavaScript
DESCRIPTION: This snippet outlines using the `configureServer` hook to add custom middleware to the Vite development server. It shows how to insert middleware to handle requests and store the server instance for use in other hooks. It also provides an example of injecting middleware after internal middlewares are installed by returning a closure. Vite's development server and relevant plugins are dependencies.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-plugin.md#2025-04-22_snippet_7

LANGUAGE: JavaScript
CODE:
```
const myPlugin = () => ({
  name: 'configure-server',
  configureServer(server) {
    server.middlewares.use((req, res, next) => {
      // custom handle request...
    })
  },
})
```

LANGUAGE: JavaScript
CODE:
```
const myPlugin = () => ({
  name: 'configure-server',
  configureServer(server) {
    // return a post hook that is called after internal middlewares are
    // installed
    return () => {
      server.middlewares.use((req, res, next) => {
        // custom handle request...
      })
    }
  },
})
```

LANGUAGE: JavaScript
CODE:
```
const myPlugin = () => {
  let server
  return {
    name: 'configure-server',
    configureServer(_server) {
      server = _server
    },
    transform(code, id) {
      if (server) {
        // use server...
      }
    },
  }
}
```

----------------------------------------

TITLE: Injecting JSX Helpers Automatically in Vite (JavaScript)
DESCRIPTION: This snippet showcases how to inject JSX helpers (such as React imports) globally across all JSX files in a Vite project, by using the jsxInject property of esbuild configuration within vite.config.js. This avoids repetitive imports in each file. Input is the configuration object, where jsxInject is a string of code to inject; output is that the specified code is prepended to all transpiled files. Dependencies are Vite (with esbuild) and the imported package (e.g. React).
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
import { defineConfig } from 'vite'\n\nexport default defineConfig({\n  esbuild: {\n    jsxInject: `import React from 'react'`,\n  },\n})
```

----------------------------------------

TITLE: Package.json Conditional Exports Example
DESCRIPTION: JSON configuration example showing how to set up conditional exports in a package.json file, demonstrating module format selection based on import conditions.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/shared-options.md#2025-04-22_snippet_2

LANGUAGE: json
CODE:
```
{
  "exports": {
    ".": {
      "import": "./index.mjs",
      "require": "./index.js"
    }
  }
}
```

----------------------------------------

TITLE: Vite Config Hook Plugin Example
DESCRIPTION: Examples of plugins using the Vite-specific 'config' hook to modify the Vite configuration. It shows both returning a partial config and directly mutating the config object.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-plugin.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
// return partial config (recommended)
const partialConfigPlugin = () => ({
  name: 'return-partial',
  config: () => ({
    resolve: {
      alias: {
        foo: 'bar',
      },
    },
  }),
})

// mutate the config directly (use only when merging doesn't work)
const mutateConfigPlugin = () => ({
  name: 'mutate-config',
  config(config, { command }) {
    if (command === 'build') {
      config.root = 'foo'
    }
  },
})
```

----------------------------------------

TITLE: Defining Environment Variables for Vite Project - Shell
DESCRIPTION: This snippet demonstrates how to declare an environment variable (KEY) with the value 'safe' using shell script syntax. Such declarations are typically placed in .env files for Vite, enabling the build process to inject or utilize environment-specific values. Dependencies include the node environment for reading .env files; no input or output is processed directly by this snippet. KEY can be accessed in Vite configuration or source code via process.env.KEY. No complex parameters or logic are present.
SOURCE: https://github.com/vitejs/vite/blob/main/playground/fs-serve/root/src/special characters åäö/safe.txt#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
KEY=safe
```

----------------------------------------

TITLE: Correct File Case Sensitivity (JavaScript)
DESCRIPTION: Demonstrates a common issue where importing a file with incorrect casing (`Foo.js` instead of `foo.js`) can prevent HMR from working correctly, especially on case-insensitive file systems or when running Vite with WSL2.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/troubleshooting.md#_snippet_9

LANGUAGE: javascript
CODE:
```
import './Foo.js' // should be './foo.js'
```

----------------------------------------

TITLE: Enabling Eager Imports in import.meta.glob
DESCRIPTION: Shows how to use the new eager flag in import.meta.glob to perform eager imports of matched modules.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/blog/announcing-vite3.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import.meta.glob('./dir/*.js', { eager: true })
```

----------------------------------------

TITLE: Customizing Rollup Options in Vite Build Configuration
DESCRIPTION: Demonstrates how to customize the build by adjusting Rollup options in the Vite configuration file. This allows developers to fine-tune the bundling process according to their specific needs.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/build.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default defineConfig({
  build: {
    rollupOptions: {
      // https://rollupjs.org/configuration-options/
    },
  },
})
```

----------------------------------------

TITLE: Implementing importedChunks Function in TypeScript
DESCRIPTION: Provides a TypeScript implementation of the importedChunks function to recursively retrieve imported chunks from the manifest.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/backend-integration.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
import type { Manifest, ManifestChunk } from 'vite'

export default function importedChunks(
  manifest: Manifest,
  name: string,
): ManifestChunk[] {
  const seen = new Set<string>()

  function getImportedChunks(chunk: ManifestChunk): ManifestChunk[] {
    const chunks: ManifestChunk[] = []
    for (const file of chunk.imports ?? []) {
      const importee = manifest[file]
      if (seen.has(file)) {
        continue
      }
      seen.add(file)

      chunks.push(...getImportedChunks(importee))
      chunks.push(importee)
    }

    return chunks
  }

  return getImportedChunks(manifest[name])
}
```

----------------------------------------

TITLE: Vite Config in TypeScript with satisfies Operator
DESCRIPTION: Using TypeScript for Vite configuration with the satisfies operator for type checking.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/index.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
import type { UserConfig } from 'vite'

export default {
  // ...
} satisfies UserConfig
```

----------------------------------------

TITLE: Importing Asset as URL in JavaScript
DESCRIPTION: Demonstrates how to import an image asset as a URL and set it as the source of an img element. The imported URL will be resolved to the correct path during development and production.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/assets.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import imgUrl from './img.png'
document.getElementById('hero-img').src = imgUrl
```

----------------------------------------

TITLE: Customizing ESBuild Transform Options for JSX in Vite - JavaScript
DESCRIPTION: This snippet customizes the ESBuild transform options in Vite through defineConfig, specifically altering JSX factory and fragment identifiers. Useful for projects not using React's default createElement/Fragment symbols (e.g., Preact). Requires Vite and ESBuild. Input parameters alter how JSX is compiled in the build process.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/shared-options.md#2025-04-22_snippet_5

LANGUAGE: js
CODE:
```
export default defineConfig({
  esbuild: {
    jsxFactory: 'h',
    jsxFragment: 'Fragment',
  },
})
```

----------------------------------------

TITLE: Configuring JSX Factory and Fragment in Vite with esbuild (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to customize the JSX factory and fragment elements for a Vite project, using the esbuild configuration in vite.config.js. This is useful when integrating frameworks such as Preact that use custom JSX pragma. It relies on the Vite and esbuild libraries, and is intended for use in the project's Vite configuration file. Key parameters are jsxFactory and jsxFragment; input is the defineConfig function, and output is an exportable Vite config object. Requires the relevant framework and proper package setup.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { defineConfig } from 'vite'\n\nexport default defineConfig({\n  esbuild: {\n    jsxFactory: 'h',\n    jsxFragment: 'Fragment',\n  },\n})
```

----------------------------------------

TITLE: Preview Vite Build (Bash)
DESCRIPTION: Serves the production build output locally using a static file server. This is the recommended way to test the build and avoid CORS errors when opening the `index.html` directly with the `file://` protocol.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/troubleshooting.md#_snippet_11

LANGUAGE: bash
CODE:
```
npx vite preview
```

----------------------------------------

TITLE: Running Vite Preview Command in Bash
DESCRIPTION: This snippet provides the command to locally preview the production build using Vite. The user can specify various options like hostname, port, output directory, and more. The command should not be used as a production server due to its limitations in production settings.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/cli.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
vite preview [root]
```

----------------------------------------

TITLE: Configuring Vite Library Mode for a Single Entry Point in JavaScript
DESCRIPTION: Defines a Vite configuration (`vite.config.js`) for building a library with a single entry point (`lib/main.js`). It specifies the library name (`MyLib`), output filename (`my-lib`), and externalizes the 'vue' dependency using `rollupOptions`. It also configures global variables (`globals`) for the UMD build format to ensure external dependencies like Vue are correctly referenced.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/build.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
```js twoslash [vite.config.js (single entry)]
import { dirname, resolve } from 'node:path'
import { fileURLToPath } from 'node:url'
import { defineConfig } from 'vite'

const __dirname = dirname(fileURLToPath(import.meta.url))

export default defineConfig({
  build: {
    lib: {
      entry: resolve(__dirname, 'lib/main.js'),
      name: 'MyLib',
      // the proper extensions will be added
      fileName: 'my-lib',
    },
    rollupOptions: {
      // make sure to externalize deps that shouldn't be bundled
      // into your library
      external: ['vue'],
      output: {
        // Provide global variables to use in the UMD build
        // for externalized deps
        globals: {
          vue: 'Vue',
        },
      },
    },
  },
})
```
```

----------------------------------------

TITLE: Creating a Framework Plugin Preset
DESCRIPTION: Example of creating a plugin preset that combines multiple plugins for a framework integration. This allows users to add multiple related plugins as a single element in the configuration.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-plugin.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
// framework-plugin
import frameworkRefresh from 'vite-plugin-framework-refresh'
import frameworkDevtools from 'vite-plugin-framework-devtools'

export default function framework(config) {
  return [frameworkRefresh(config), frameworkDevTools(config)]
}
```

LANGUAGE: javascript
CODE:
```
import { defineConfig } from 'vite'
import framework from 'vite-plugin-framework'

export default defineConfig({
  plugins: [framework()],
})
```

----------------------------------------

TITLE: Guarding HMR API Usage in JavaScript
DESCRIPTION: This snippet demonstrates how to conditionally guard HMR API usage to ensure the code can be tree-shaken in production builds.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-hmr.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
if (import.meta.hot) {
  // HMR code
}
```

----------------------------------------

TITLE: Accepting Updates from Dependencies in JavaScript
DESCRIPTION: This snippet demonstrates how a module can accept updates from its direct dependencies without reloading itself, using import.meta.hot.accept with dependency paths.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-hmr.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { foo } from './foo.js'

foo()

if (import.meta.hot) {
  import.meta.hot.accept('./foo.js', (newFoo) => {
    // the callback receives the updated './foo.js' module
    newFoo?.foo()
  })

  // Can also accept an array of dep modules:
  import.meta.hot.accept(
    ['./foo.js', './bar.js'],
    ([newFooModule, newBarModule]) => {
      // The callback receives an array where only the updated module is
      // non null. If the update was not successful (syntax error for ex.),
      // the array is empty
    },
  )
}
```

----------------------------------------

TITLE: Setting Up Vite in Middleware Mode with Express (JS)
DESCRIPTION: Demonstrates how to integrate Vite as middleware into an existing server framework like Express, specifically for custom app types where the user handles HTML serving. It highlights the use of `createServer` with `middlewareMode: true` and `appType: 'custom'` to prevent Vite's default HTML handling.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/server-options.md#_snippet_4

LANGUAGE: js
CODE:
```
import express from 'express'
import { createServer as createViteServer } from 'vite'

async function createServer() {
  const app = express()

  // Create Vite server in middleware mode
  const vite = await createViteServer({
    server: { middlewareMode: true },
    // don't include Vite's default HTML handling middlewares
    appType: 'custom',
  })
  // Use vite's connect instance as middleware
  app.use(vite.middlewares)

  app.use('*', async (req, res) => {
    // Since `appType` is `'custom'`, should serve response here.
    // Note: if `appType` is `'spa'` or `'mpa'`, Vite includes middlewares
    // to handle HTML requests and 404s so user middlewares should be added
    // before Vite's middlewares to take effect instead
  })
}

createServer()
```

----------------------------------------

TITLE: Configuring Multi-Page Applications in Vite
DESCRIPTION: Shows how to set up multiple HTML entry points for a multi-page application in Vite. This configuration uses Node.js path utilities to resolve file paths and specifies multiple HTML files as entry points for the build process.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/build.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { dirname, resolve } from 'node:path'
import { fileURLToPath } from 'node:url'
import { defineConfig } from 'vite'

const __dirname = dirname(fileURLToPath(import.meta.url))

export default defineConfig({
  build: {
    rollupOptions: {
      input: {
        main: resolve(__dirname, 'index.html'),
        nested: resolve(__dirname, 'nested/index.html'),
      },
    },
  },
})
```

----------------------------------------

TITLE: Configuring Legacy Browser Support Plugin in Vite
DESCRIPTION: This code demonstrates how to configure the @vitejs/plugin-legacy plugin in the vite.config.js file to target specific browser versions.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/using-plugins.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import legacy from '@vitejs/plugin-legacy'
import { defineConfig } from 'vite'

export default defineConfig({
  plugins: [
    legacy({
      targets: ['defaults', 'not IE 11'],
    }),
  ],
})
```

----------------------------------------

TITLE: Importing Assets as Raw Strings in Vite (JavaScript)
DESCRIPTION: This code example shows how to import an asset (such as a GLSL shader file) as a plain string by adding ?raw to the import path. This is helpful for assets that you want to process or parse as text at runtime. Input is the import with ?raw; output is a string variable containing the file contents. Depends on Vite asset loader configuration.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_14

LANGUAGE: javascript
CODE:
```
import 'vite/client'\n// ---cut---\n// Load assets as strings\nimport assetAsString from './shader.glsl?raw'
```

----------------------------------------

TITLE: Importing React Components in JavaScript
DESCRIPTION: Demonstrates how Vite's CommonJS conversion allows named imports from CommonJS modules to work as expected, even with dynamically assigned exports.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/dep-pre-bundling.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
// works as expected
import React, { useState } from 'react'
```

----------------------------------------

TITLE: Explicitly Loading Assets as URL in Vite (JavaScript)
DESCRIPTION: This snippet shows how to explicitly import a JavaScript file (or other resource) as a URL by appending ?url to the import path. Vite treats the import as a URL string rather than attempting to process it as a module. The input is the import with query; the output is the resource's public URL.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
import 'vite/client'\n// ---cut---\n// Explicitly load assets as URL\nimport assetAsURL from './asset.js?url'
```

----------------------------------------

TITLE: Netlify Production Deployment Command
DESCRIPTION: Command to deploy a Vite application to production on Netlify using the CLI with the --prod flag.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/static-deploy.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
# Deploy the site into production
$ ntl deploy --prod
```

----------------------------------------

TITLE: Exporting Bundled CSS from a Vite Library in package.json
DESCRIPTION: Illustrates how to update the `exports` field in `package.json` to include an entry for the bundled CSS file (`dist/my-lib.css`) generated during the Vite library build. This allows consumers of the library to directly import the styles using an explicit path like `my-lib/style.css`.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/build.md#2025-04-22_snippet_9

LANGUAGE: json
CODE:
```
```json {12}
{
  "name": "my-lib",
  "type": "module",
  "files": ["dist"],
  "main": "./dist/my-lib.umd.cjs",
  "module": "./dist/my-lib.js",
  "exports": {
    ".": {
      "import": "./dist/my-lib.js",
      "require": "./dist/my-lib.umd.cjs"
    },
    "./style.css": "./dist/my-lib.css"
  }
}
```
```

----------------------------------------

TITLE: Creating a Vite Dev Server in TypeScript
DESCRIPTION: Demonstrates how to create and start a Vite dev server using the createServer function. It includes configuration options and shows how to listen for connections and print server URLs.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-javascript.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { fileURLToPath } from 'node:url'
import { createServer } from 'vite'

const __dirname = fileURLToPath(new URL('.', import.meta.url))

const server = await createServer({
  // any valid user config options, plus `mode` and `configFile`
  configFile: false,
  root: __dirname,
  server: {
    port: 1337,
  },
})
await server.listen()

server.printUrls()
server.bindCLIShortcuts({ print: true })
```

----------------------------------------

TITLE: Adding React-Specific ESLint Plugins in Vite
DESCRIPTION: This snippet demonstrates the integration of React-specific ESLint plugins `eslint-plugin-react-x` and `eslint-plugin-react-dom` in a Vite project. The configuration file imports these plugins and includes their recommended rules for TypeScript. The setup enhances linting with React-specific guidelines. It requires the installation of the plugins via NPM or similar package management systems.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/template-react-ts/README.md#2025-04-22_snippet_1

LANGUAGE: JavaScript
CODE:
```
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```

----------------------------------------

TITLE: Web Worker Import in Vite
DESCRIPTION: Shows different methods of importing Web Workers in Vite, including using the Worker constructor and query suffixes for both basic and inline workers.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_21

LANGUAGE: typescript
CODE:
```
const worker = new Worker(new URL('./worker.js', import.meta.url))
```

LANGUAGE: javascript
CODE:
```
import MyWorker from './worker?worker'

const worker = new MyWorker()
```

----------------------------------------

TITLE: SSR Entrypoint with HMR
DESCRIPTION: Imports and initializes an SSR request handler. It sets up a hot module replacement (HMR) listener (import.meta.hot.on('request')) to process incoming requests, call the handler, and send the response back via HMR. It also shows a basic handler call for the root path.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-frameworks.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const { createHandler } = await import('./entrypoint.js')
const handler = createHandler(input)

import.meta.hot.on('request', (data) => {
  const { req, uniqueId } = deserialize(data)
  const res = handler(req)
  import.meta.hot.send('response', serialize({ res: res, uniqueId }))
})

const response = handler(new Request('/'))
```

----------------------------------------

TITLE: Importing Script as Web Worker in JavaScript
DESCRIPTION: Shows how to import scripts as web workers using the ?worker suffix. The imported worker will be in a separate chunk in the production build.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/assets.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
import Worker from './shader.js?worker'
const worker = new Worker()
```

----------------------------------------

TITLE: Using Vite's Build Function in TypeScript
DESCRIPTION: Shows how to use Vite's build function to create a production build. It includes configuration options such as setting the root directory, base URL, and Rollup options.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-javascript.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import path from 'node:path'
import { fileURLToPath } from 'node:url'
import { build } from 'vite'

const __dirname = fileURLToPath(new URL('.', import.meta.url))

await build({
  root: path.resolve(__dirname, './project'),
  base: '/foo/',
  build: {
    rollupOptions: {
      // ...
    },
  },
})
```

----------------------------------------

TITLE: Defining Staging Environment Variables in Vite
DESCRIPTION: This snippet shows the content of a .env.staging file, used to define environment variables for a custom staging mode in Vite. This file is loaded when building the project using vite build --mode staging, allowing for mode-specific configurations like a different application title.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/env-and-mode.md#_snippet_9

LANGUAGE: Configuration
CODE:
```
VITE_APP_TITLE=My App (staging)
```

----------------------------------------

TITLE: Expanding ESLint Configuration for TypeScript in Vite
DESCRIPTION: This code snippet expands the ESLint configuration to enable type-aware lint rules in a React and TypeScript Vite project. It utilizes the `tseslint.config` function with options for recommended, strict, and stylistic type-checked rules. The configuration requires a proper setup of `tsconfig.node.json` and `tsconfig.app.json` files. Inputs include TypeScript configuration files, and it outputs enhanced ESLint settings. External dependencies include `@vitejs/eslint` packages for recommended configurations.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/template-react-ts/README.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

----------------------------------------

TITLE: Accessing Environments in Vite Dev Server
DESCRIPTION: Demonstrates how to access and use environment instances in a Vite dev server. It shows creating a server, accessing client and SSR environments, and using environment methods.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-instances.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
// create the server, or get it from the configureServer hook
const server = await createServer(/* options */)

const environment = server.environments.client
environment.transformRequest(url)
console.log(server.environments.ssr.moduleGraph)
```

----------------------------------------

TITLE: Configuring Build Command and Publish Directory for Render Deployment
DESCRIPTION: Specifies the necessary build command and publish directory settings when deploying a Vite application as a Static Site on Render. The build command uses npm to install dependencies and run the build script defined in `package.json`. The publish directory indicates that the built static assets are located in the `dist` folder.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/static-deploy.md#2025-04-22_snippet_11

LANGUAGE: shell
CODE:
```
# Build Command for Render
npm install && npm run build
```

LANGUAGE: plaintext
CODE:
```
# Publish Directory for Render
dist
```

----------------------------------------

TITLE: Setting Up Vite Dev Server Middleware (JS)
DESCRIPTION: Demonstrates how to initialize an Express application and create a Vite development server instance in middleware mode (`middlewareMode: true`, `appType: 'custom'`). It then attaches Vite's middleware stack (`vite.middlewares`) to the Express app, allowing Vite to handle module serving, HMR, and plugin transforms during development.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/ssr.md#_snippet_2

LANGUAGE: js
CODE:
```
import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';
import express from 'express';
import { createServer as createViteServer } from 'vite';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

async function createServer() {
  const app = express();

  // Create Vite server in middleware mode and configure the app type as
  // 'custom', disabling Vite's own HTML serving logic so parent server
  // can take control
  const vite = await createViteServer({
    server: { middlewareMode: true },
    appType: 'custom'
  });

  // Use vite's connect instance as middleware. If you use your own
  // express router (express.Router()), you should use router.use
  // When the server restarts (for example after the user modifies
  // vite.config.js), `vite.middlewares` is still going to be the same
  // reference (with a new internal stack of Vite and plugin-injected
  // middlewares). The following is valid even after restarts.
  app.use(vite.middlewares);

  app.use('*all', async (req, res) => {
    // serve index.html - we will tackle this next
  });

  app.listen(5173);
}

createServer();
```

----------------------------------------

TITLE: Importing Static Assets as URLs in Vite (JavaScript)
DESCRIPTION: This snippet demonstrates importing an image from the local filesystem, which returns a resolved URL string suitable for use in HTML (e.g., as an <img src> attribute). Vite processes and provides the optimized URL at runtime. Inputs are the static file and import path; output is a string URL assigned to a DOM element. Requires Vite asset handling.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
import 'vite/client'\n// ---cut---\nimport imgUrl from './img.png'\ndocument.getElementById('hero-img').src = imgUrl
```

----------------------------------------

TITLE: Conditional Vite Config based on Command and Mode
DESCRIPTION: Exporting a function to conditionally determine Vite options based on the command, mode, and other factors.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/index.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
export default defineConfig(({ command, mode, isSsrBuild, isPreview }) => {
  if (command === 'serve') {
    return {
      // dev specific config
    }
  } else {
    // command === 'build'
    return {
      // build specific config
    }
  }
})
```

----------------------------------------

TITLE: Building Vite Project with a Specific Mode via CLI
DESCRIPTION: This bash command demonstrates how to use the --mode option flag with the vite build command. This allows overriding the default build mode (production) to use a different mode, such as staging, which will load environment variables from the corresponding .env.staging file.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/env-and-mode.md#_snippet_8

LANGUAGE: Bash
CODE:
```
vite build --mode staging
```

----------------------------------------

TITLE: Configuring a Rollup Plugin in Vite
DESCRIPTION: Shows how to augment an existing Rollup plugin with Vite-specific properties using the defineConfig function.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-plugin.md#2025-04-22_snippet_11

LANGUAGE: javascript
CODE:
```
import example from 'rollup-plugin-example'
import { defineConfig } from 'vite'

export default defineConfig({
  plugins: [
    {
      ...example(),
      enforce: 'post',
      apply: 'build',
    },
  ],
})
```

----------------------------------------

TITLE: Creating an External Svelte Store in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates how to create a simple external Svelte store using the `writable` function from the `svelte/store` module. This approach is suggested as a way to maintain state across Hot Module Replacement (HMR) updates, as component-local state might be lost. The store is initialized with the value 0 and exported as the default export from `store.ts`.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/template-svelte-ts/README.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// store.ts
// An extremely simple external store
import { writable } from 'svelte/store'
export default writable(0)
```

----------------------------------------

TITLE: Handling Config Resolved Hook in Vite with JavaScript
DESCRIPTION: This snippet demonstrates how to handle the `configResolved` hook in a Vite plugin to store the final resolved configuration for further actions within other hooks. The plugin checks the 'command' configuration to determine if it is in serve (development) or build (Rollup) mode, affecting behavior accordingly. Dependencies are assumed to be Vite and any related plugins.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-plugin.md#2025-04-22_snippet_6

LANGUAGE: JavaScript
CODE:
```
const examplePlugin = () => {
  let config

  return {
    name: 'read-config',

    configResolved(resolvedConfig) {
      // store the resolved config
      config = resolvedConfig
    },

    // use stored config in other hooks
    transform(code, id) {
      if (config.command === 'serve') {
        // dev: plugin invoked by dev server
      } else {
        // build: plugin invoked by Rollup
      }
    },
  }
}
```

----------------------------------------

TITLE: Creating a Vite Project with Bun
DESCRIPTION: This snippet outlines the command to scaffold a new Vite project using Bun. Once executed, you will need to follow the prompts to complete the project setup.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/README.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
bun create vite
```

----------------------------------------

TITLE: TypeScript Declaration for Global Constants
DESCRIPTION: Example of adding type declarations for globally defined constants in TypeScript environment declaration file to enable type checking and IntelliSense support.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/shared-options.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
// vite-env.d.ts
declare const __APP_VERSION__: string
```

----------------------------------------

TITLE: Using new URL with import.meta.url in JavaScript
DESCRIPTION: Demonstrates how to use the new URL constructor with import.meta.url to obtain the full, resolved URL of a static asset using a relative path.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/assets.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
const imgUrl = new URL('./img.png', import.meta.url).href

document.getElementById('hero-img').src = imgUrl
```

----------------------------------------

TITLE: Previewing a Built Vite Application Locally
DESCRIPTION: Command to preview the production build locally using Vite's built-in preview server, which serves the static files from the dist directory.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/static-deploy.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ npm run preview
```

----------------------------------------

TITLE: Transforming HTML Entry Points in Vite Using JavaScript
DESCRIPTION: This example utilizes the `transformIndexHtml` hook for altering HTML entry files like `index.html`. The hook allows asynchronous transformations of the HTML, providing modified HTML as a string or injecting new tags. It supports both pre-processing and post-processing orders in the transformation pipeline.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-plugin.md#2025-04-22_snippet_9

LANGUAGE: JavaScript
CODE:
```
const htmlPlugin = () => {
  return {
    name: 'html-transform',
    transformIndexHtml(html) {
      return html.replace(
        /<title>(.*?)<\/title>/,
        `<title>Title replaced!<\/title>`,
      )
    },
  }
}
```

LANGUAGE: TypeScript
CODE:
```
type IndexHtmlTransformHook = (
  html: string,
  ctx: {
    path: string
    filename: string
    server?: ViteDevServer
    bundle?: import('rollup').OutputBundle
    chunk?: import('rollup').OutputChunk
  },
) =>
  | IndexHtmlTransformResult
  | void
  | Promise<IndexHtmlTransformResult | void>

type IndexHtmlTransformResult =
  | string
  | HtmlTagDescriptor[]
  | {
      html: string
      tags: HtmlTagDescriptor[]
    }

interface HtmlTagDescriptor {
  tag: string
  attrs?: Record<string, string | boolean>
  children?: string | HtmlTagDescriptor[]
  /**
   * default: 'head-prepend'
   */
  injectTo?: 'head' | 'body' | 'head-prepend' | 'body-prepend'
}
```

----------------------------------------

TITLE: Creating a Vite Project with PNPM
DESCRIPTION: This snippet shows how to use PNPM for scaffolding a Vite project. After running the command, respond to the prompts to configure the project.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create vite
```

----------------------------------------

TITLE: Starting Vite Dev Server for SSR - Shell
DESCRIPTION: Use the standard `vite dev` command to start the development server for a Server-Side Rendering application. Custom SSR middleware can be added using the `configureServer` plugin hook.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/ssr.md#_snippet_9

LANGUAGE: shell
CODE:
```
$ vite dev
```

----------------------------------------

TITLE: Importing Web Workers in Vite (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates importing a JavaScript module as a Web Worker by appending ?worker to the import path. Vite bundles and returns the worker constructor. Input is the import with ?worker; output is a Worker instance ready for use. Requires Vite's built-in worker loader.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
import 'vite/client'\n// ---cut---\n// Load Web Workers\nimport Worker from './worker.js?worker'
```

----------------------------------------

TITLE: Enforcing Plugin Order in Vite Configuration
DESCRIPTION: This snippet shows how to enforce the order of a plugin in the Vite configuration by using the 'enforce' property, in this case applying the @rollup/plugin-image plugin before Vite core plugins.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/using-plugins.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import image from '@rollup/plugin-image'
import { defineConfig } from 'vite'

export default defineConfig({
  plugins: [
    {
      ...image(),
      enforce: 'pre',
    },
  ],
})
```

----------------------------------------

TITLE: Installing Vite with PNPM
DESCRIPTION: Command to scaffold a new Vite application using PNPM.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/CHANGELOG.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
$ pnpm dlx create-vite
```

----------------------------------------

TITLE: Installing Vite with Yarn
DESCRIPTION: Command to scaffold a new Vite application using Yarn.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/CHANGELOG.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
$ yarn create vite
```

----------------------------------------

TITLE: Disabling Automatic CSS Injection in Vite (JavaScript)
DESCRIPTION: This code snippet illustrates how to import a CSS file to inject styles automatically and how to import a CSS file with ?inline to avoid style injection, obtaining a processed CSS string at runtime instead. This relies on Vite's handling of the ?inline query. Inputs are import statements with and without the query; output is injected style or imported CSS string.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
import 'vite/client'\n// ---cut---\nimport './foo.css' // will be injected into the page\nimport otherStyles from './bar.css?inline' // will not be injected
```

----------------------------------------

TITLE: Configuring Server Warmup for Frequently Used Files in Vite
DESCRIPTION: Configuration example showing how to use the server.warmup option to pre-transform frequently used files, reducing request waterfalls and improving loading times.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/performance.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default defineConfig({
  server: {
    warmup: {
      clientFiles: [
        './src/components/BigComponent.vue',
        './src/utils/big-utils.js',
      ],
    },
  },
})
```

----------------------------------------

TITLE: Configuring SSR External Dependencies in Vite
DESCRIPTION: Specifies how to externalize dependencies for SSR. Can be an array of strings or true to externalize all dependencies. Takes precedence over noExternal for explicitly listed dependencies.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/ssr-options.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
## ssr.external

- **Type:** `string[] | true`
- **Related:** [SSR Externals](/guide/ssr#ssr-externals)
```

----------------------------------------

TITLE: Example Barrel File in JavaScript
DESCRIPTION: An example of a barrel file that re-exports APIs from multiple files in the same directory. This pattern can cause performance issues as it loads all files even when only one export is needed.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/performance.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export * from './color.js'
export * from './dom.js'
export * from './slash.js'
```

----------------------------------------

TITLE: Configuring package.json for a Multi-Entry Vite Library
DESCRIPTION: Recommended `package.json` structure for a library built with Vite using multiple entry points. It includes `main` and `module` fields for the primary entry point, and the `exports` field is configured to expose both the primary entry (`.`) and any secondary entries (e.g., `./secondary`) via their respective CJS and ES module builds generated by Vite.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/build.md#2025-04-22_snippet_8

LANGUAGE: json
CODE:
```
```json [package.json (multiple entries)]
{
  "name": "my-lib",
  "type": "module",
  "files": ["dist"],
  "main": "./dist/my-lib.cjs",
  "module": "./dist/my-lib.js",
  "exports": {
    ".": {
      "import": "./dist/my-lib.js",
      "require": "./dist/my-lib.cjs"
    },
    "./secondary": {
      "import": "./dist/secondary.js",
      "require": "./dist/secondary.cjs"
    }
  }
}
```
```

----------------------------------------

TITLE: Configuring TypeScript Lib Field for Browser Environments
DESCRIPTION: This JSON snippet shows how to update the lib field in the tsconfig.json file. This configuration is necessary if your code relies on types from specific browser environments like DOM or WebWorker, ensuring that TypeScript includes the correct type definitions during compilation.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/env-and-mode.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{
  "lib": ["WebWorker"]
}
```

----------------------------------------

TITLE: Cleaning Up Side Effects with hot.dispose in JavaScript
DESCRIPTION: This example shows how to use hot.dispose to clean up any persistent side effects created by a module when it's about to be replaced.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-hmr.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
function setupSideEffect() {}

setupSideEffect()

if (import.meta.hot) {
  import.meta.hot.dispose((data) => {
    // cleanup side effect
  })
}
```

----------------------------------------

TITLE: Async Vite Config with defineConfig
DESCRIPTION: Using an async function with defineConfig for asynchronous configuration setup in Vite.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/index.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
export default defineConfig(async ({ command, mode }) => {
  const data = await asyncFunction()
  return {
    // vite config
  }
})
```

----------------------------------------

TITLE: Importing Module Preload Polyfill in Vite Entry
DESCRIPTION: Imports the module preload polyfill at the beginning of the app entry if not disabled in the configuration.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/backend-integration.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
// add the beginning of your app entry
import 'vite/modulepreload-polyfill'
```

----------------------------------------

TITLE: Registering Cleanup Callback with hot.prune in JavaScript
DESCRIPTION: This snippet demonstrates how to use hot.prune to register a callback that will be called when the module is no longer imported on the page, useful for cleaning up side effects.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-hmr.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
function setupOrReuseSideEffect() {}

setupOrReuseSideEffect()

if (import.meta.hot) {
  import.meta.hot.prune((data) => {
    // cleanup side effect
  })
}
```

----------------------------------------

TITLE: Dynamic URL Generation with Template Literals in JavaScript
DESCRIPTION: Shows how to create a function that generates dynamic URLs using template literals and the new URL constructor with import.meta.url.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/assets.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
function getImageUrl(name) {
  // note that this does not include files in subdirectories
  return new URL(`./dir/${name}.png`, import.meta.url).href
}
```

----------------------------------------

TITLE: Initializing Svelte Store in JavaScript
DESCRIPTION: This snippet demonstrates how to create a very simple writable store in Svelte, using the 'writable' function from 'svelte/store'. It exports a store with an initial value of 0, allowing components to interact with the shared state. No additional dependencies are required beyond what Svelte provides. This store setup is crucial when local component state needs to be preserved outside of HMR (Hot Module Replacement) sessions.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/template-svelte/README.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
// store.js
// An extremely simple external store
import { writable } from 'svelte/store'
export default writable(0)
```

----------------------------------------

TITLE: Implementing Server-to-Client Communication in Vite
DESCRIPTION: Shows how to configure a plugin to send messages from server to client using WebSocket.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-plugin.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
export default defineConfig({
  plugins: [
    {
      // ...
      configureServer(server) {
        server.ws.on('connection', () => {
          server.ws.send('my:greetings', { msg: 'hello' })
        })
      },
    },
  ],
})
```

----------------------------------------

TITLE: Inlining SVG URL in JavaScript
DESCRIPTION: Shows how to use an imported SVG URL within a manually constructed url() function for setting a background style. The URL needs to be wrapped in double quotes.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/assets.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import imgUrl from './img.svg'
document.getElementById('hero-img').style.background = `url("${imgUrl}")`
```

----------------------------------------

TITLE: Configuring Vite for Backend Integration
DESCRIPTION: Sets up Vite configuration for backend integration, enabling CORS, build manifest, and custom entry point.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/backend-integration.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default defineConfig({
  server: {
    cors: {
      // the origin you will be accessing via browser
      origin: 'http://my-backend.example.com',
    },
  },
  build: {
    // generate .vite/manifest.json in outDir
    manifest: true,
    rollupOptions: {
      // overwrite default .html entry
      input: '/path/to/main.js',
    },
  },
})
```

----------------------------------------

TITLE: Eager Glob Import in Vite
DESCRIPTION: Shows how to use eager loading with glob imports by passing the eager:true option. This causes Vite to transform the imports into direct module imports rather than lazy-loaded chunks.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_19

LANGUAGE: javascript
CODE:
```
const modules = import.meta.glob('./dir/*.js', { eager: true })
```

LANGUAGE: javascript
CODE:
```
// code produced by vite
import * as __vite_glob_0_0 from './dir/bar.js'
import * as __vite_glob_0_1 from './dir/foo.js'
const modules = {
  './dir/bar.js': __vite_glob_0_0,
  './dir/foo.js': __vite_glob_0_1
}
```

----------------------------------------

TITLE: Force Dependency Re-optimization (Bash)
DESCRIPTION: Starts the Vite development server and forces the re-bundling of optimized dependencies. Use this after changing linked packages or when dependency resolution seems inconsistent.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/troubleshooting.md#_snippet_12

LANGUAGE: bash
CODE:
```
vite --force
```

----------------------------------------

TITLE: Netlify CLI Commands for Deployment
DESCRIPTION: Sequence of Netlify CLI commands to install the CLI, initialize a new site, and deploy a Vite application to Netlify.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/static-deploy.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
# Install the Netlify CLI
$ npm install -g netlify-cli

# Create a new site in Netlify
$ ntl init

# Deploy to a unique preview URL
$ ntl deploy
```

----------------------------------------

TITLE: Vite Config using defineConfig Helper
DESCRIPTION: Using the defineConfig helper function to provide intellisense without JSDoc annotations in JavaScript.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/index.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { defineConfig } from 'vite'

export default defineConfig({
  // ...
})
```

----------------------------------------

TITLE: Using Import Meta Env Variables in Vite HTML
DESCRIPTION: This HTML snippet demonstrates how to use environment variables from import.meta.env directly within an HTML file in a Vite project. Variables are referenced using a special %CONST_NAME% syntax, which Vite replaces during the build process.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/env-and-mode.md#_snippet_6

LANGUAGE: HTML
CODE:
```
<h1>Vite is running in %MODE%</h1>
<p>Using data from %VITE_API_URL%</p>
```

----------------------------------------

TITLE: Explicit Inline and No-Inline Asset Imports in JavaScript
DESCRIPTION: Shows how to use the ?inline and ?no-inline suffixes to explicitly control whether assets are inlined or not during import.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/assets.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import imgUrl1 from './img.svg?no-inline'
import imgUrl2 from './img.png?inline'
```

----------------------------------------

TITLE: Configuring Vite Library Mode for Multiple Entry Points in JavaScript
DESCRIPTION: Demonstrates a Vite configuration (`vite.config.js`) for building a library with multiple entry points (`lib/main.js` and `lib/secondary.js`). It sets the library name (`MyLib`) and externalizes 'vue' via `rollupOptions`, providing globals for the UMD build. The `entry` option is an object mapping entry names to their file paths.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/build.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
```js twoslash [vite.config.js (multiple entries)]
import { dirname, resolve } from 'node:path'
import { fileURLToPath } from 'node:url'
import { defineConfig } from 'vite'

const __dirname = dirname(fileURLToPath(import.meta.url))

export default defineConfig({
  build: {
    lib: {
      entry: {
        'my-lib': resolve(__dirname, 'lib/main.js'),
        secondary: resolve(__dirname, 'lib/secondary.js'),
      },
      name: 'MyLib',
    },
    rollupOptions: {
      // make sure to externalize deps that shouldn't be bundled
      // into your library
      external: ['vue'],
      output: {
        // Provide global variables to use in the UMD build
        // for externalized deps
        globals: {
          vue: 'Vue',
        },
      },
    },
  },
})
```
```

----------------------------------------

TITLE: Vite Config with TypeScript Intellisense using JSDoc
DESCRIPTION: Using JSDoc type hints to leverage IDE intellisense for Vite configuration in JavaScript.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/index.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
/** @type {import('vite').UserConfig} */
export default {
  // ...
}
```

----------------------------------------

TITLE: Specifying Named Imports in import.meta.glob for Tree-Shaking
DESCRIPTION: Illustrates how to use named imports in import.meta.glob to improve tree-shaking by importing only specific exports from matched modules.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/blog/announcing-vite3.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import.meta.glob('./dir/*.js', { import: 'setup' })
```

----------------------------------------

TITLE: Implementing SSR-Specific Logic in Vite Plugin Transform Hook (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to check if a Vite plugin hook is being executed during an SSR build or development server context. The `options` object passed to hooks like `transform` includes an `ssr` boolean property, allowing plugins to apply conditional logic or transformations specifically for SSR.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/ssr.md#_snippet_8

LANGUAGE: js
CODE:
```
/** @type {() => import('vite').Plugin} */
// ---cut---
export function mySSRPlugin() {
  return {
    name: 'my-ssr',
    transform(code, id, options) {
      if (options?.ssr) {
        // perform ssr-specific transform...
      }
    }
  }
}
```

----------------------------------------

TITLE: Updating package.json Dev Script (Diff)
DESCRIPTION: Shows the necessary modification to the `scripts.dev` entry in `package.json`. It changes the command from directly running `vite` to executing the custom Node.js server script (`node server.js`) responsible for managing the Vite development server in middleware mode.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/ssr.md#_snippet_4

LANGUAGE: diff
CODE:
```
  "scripts": {
-   "dev": "vite"
+   "dev": "node server"
  }
```

----------------------------------------

TITLE: Implementing Negative Patterns in import.meta.glob
DESCRIPTION: Shows how to use negative patterns (prefixed with !) in import.meta.glob to exclude specific files from the glob import.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/blog/announcing-vite3.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import.meta.glob(['./dir/*.js', '!**/bar.js'])
```

----------------------------------------

TITLE: Implementing Vite SSR Middleware using Node Environment
DESCRIPTION: This code snippet demonstrates setting up a Vite development server in middleware mode (`appType: 'custom'`) and using its default `node` environment runner (`server.environments.node`) to handle SSR requests. It shows the process of reading the HTML template, applying Vite transforms, importing the server entry (`/src/entry-server.js`) via `environment.runner.import`, rendering the application HTML, and injecting it into the template before sending the response. This setup leverages Vite's environment API for executing server-side code.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-frameworks.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import fs from 'node:fs'
import path from 'node:path'
import { fileURLToPath } from 'node:url'
import { createServer } from 'vite'

const __dirname = path.dirname(fileURLToPath(import.meta.url))

const server = await createServer({
  server: { middlewareMode: true },
  appType: 'custom',
  environments: {
    server: {
      // by default, modules are run in the same process as the vite server
    },
  },
})

// You might need to cast this to RunnableDevEnvironment in TypeScript or
// use isRunnableDevEnvironment to guard the access to the runner
const environment = server.environments.node

app.use('*', async (req, res, next) => {
  const url = req.originalUrl

  // 1. Read index.html
  const indexHtmlPath = path.resolve(__dirname, 'index.html')
  let template = fs.readFileSync(indexHtmlPath, 'utf-8')

  // 2. Apply Vite HTML transforms. This injects the Vite HMR client,
  //    and also applies HTML transforms from Vite plugins, e.g. global
  //    preambles from @vitejs/plugin-react
  template = await server.transformIndexHtml(url, template)

  // 3. Load the server entry. import(url) automatically transforms
  //    ESM source code to be usable in Node.js! There is no bundling
  //    required, and provides full HMR support.
  const { render } = await environment.runner.import('/src/entry-server.js')

  // 4. render the app HTML. This assumes entry-server.js's exported
  //     `render` function calls appropriate framework SSR APIs,
  //    e.g. ReactDOMServer.renderToString()
  const appHtml = await render(url)

  // 5. Inject the app-rendered HTML into the template.
  const html = template.replace(`<!--ssr-outlet-->`, appHtml)

  // 6. Send the rendered HTML back.
  res.status(200).set({ 'Content-Type': 'text/html' }).end(html)
})
```

----------------------------------------

TITLE: Configuring Non-External SSR Dependencies in Vite
DESCRIPTION: Prevents listed dependencies from being externalized for SSR. Can be a string, RegExp, array of either, or true to prevent all externalization. Takes precedence over external when set to true.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/ssr-options.md#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
## ssr.noExternal

- **Type:** `string | RegExp | (string | RegExp)[] | true`
- **Related:** [SSR Externals](/guide/ssr#ssr-externals)
```

----------------------------------------

TITLE: Consuming CSS Modules in Vite Projects (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates importing a CSS module and applying a defined class to an HTML element by assigning classes.red to className. It is dependent on the Vite CSS modules loader and assumes an HTML element with the id 'foo' exists in the DOM. Input is the imported module and its class names; output is dynamic style assignment at runtime.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
import 'vite/client'\n// ---cut---\nimport classes from './example.module.css'\ndocument.getElementById('foo').className = classes.red
```

----------------------------------------

TITLE: Updating package.json CSS file reference for library mode
DESCRIPTION: Example showing how to update the CSS file reference in package.json exports field when migrating from Vite 5 to Vite 6. In Vite 6, CSS output filenames in library mode are based on the package name rather than the fixed 'style.css'.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/migration.md#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{
  "name": "my-lib",
  "exports": {
    "./style.css": "./dist/style.css" // [!code --]
    "./style.css": "./dist/my-lib.css" // [!code ++]
  }
}
```

----------------------------------------

TITLE: Rendering SVG Images in Vue Template
DESCRIPTION: This Vue template code renders the imported SVG images using a custom 'svg-image' component. It shows how to use imported assets in a Vue template with Vite.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/why.md#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<svg-image :svg="bundlerSvg" />
<svg-image :svg="esmSvg" />
```

----------------------------------------

TITLE: Configuring server.warmup in Vite
DESCRIPTION: This code snippet demonstrates how to configure the `server.warmup` option in a Vite project. It specifies arrays of glob patterns for `clientFiles` and `ssrFiles` to pre-transform and cache frequently used files, improving initial page load performance.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/server-options.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
export default defineConfig({
  server: {
    warmup: {
      clientFiles: ['./src/components/*.vue', './src/utils/big-utils.js'],
      ssrFiles: ['./src/server/modules/*.js'],
    },
  },
})
```

----------------------------------------

TITLE: Configuring SSR Resolve Conditions in Vite
DESCRIPTION: Sets conditions used in the plugin pipeline for non-externalized dependencies during SSR build. Defaults vary based on the ssr.target setting.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/ssr-options.md#2025-04-22_snippet_3

LANGUAGE: markdown
CODE:
```
## ssr.resolve.conditions

- **Type:** `string[]`
- **Default:** `['module', 'node', 'development|production']` (`defaultServerConditions`) (`['module', 'browser', 'development|production']` (`defaultClientConditions`) for `ssr.target === 'webworker'`)
- **Related:** [Resolve Conditions](./shared-options.md#resolve-conditions)
```

----------------------------------------

TITLE: Handling SSR Requests in Dev Mode (JS)
DESCRIPTION: Implements an Express route handler (`app.use('*all', ...)`) for catching all requests in development. It reads the `index.html` template, applies Vite's `transformIndexHtml`, loads the server entry module (`/src/entry-server.js`) using `ssrLoadModule`, renders the application via the loaded module's `render` function, injects the result into the template, and serves the final HTML. Includes error handling with `vite.ssrFixStacktrace`.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/ssr.md#_snippet_3

LANGUAGE: js
CODE:
```
// @noErrors
import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

/** @type {import('express').Express} */
var app;
/** @type {import('vite').ViteDevServer}  */
var vite;

// ---cut---
app.use('*all', async (req, res, next) => {
  const url = req.originalUrl;

  try {
    // 1. Read index.html
    let template = fs.readFileSync(
      path.resolve(__dirname, 'index.html'),
      'utf-8',
    );

    // 2. Apply Vite HTML transforms. This injects the Vite HMR client,
    //    and also applies HTML transforms from Vite plugins, e.g. global
    //    preambles from @vitejs/plugin-react
    template = await vite.transformIndexHtml(url, template);

    // 3. Load the server entry. ssrLoadModule automatically transforms
    //    ESM source code to be usable in Node.js! There is no bundling
    //    required, and provides efficient invalidation similar to HMR.
    const { render } = await vite.ssrLoadModule('/src/entry-server.js');

    // 4. render the app HTML. This assumes entry-server.js's exported
    //     `render` function calls appropriate framework SSR APIs,
    //    e.g. ReactDOMServer.renderToString()
    const appHtml = await render(url);

    // 5. Inject the app-rendered HTML into the template.
    const html = template.replace(`<!--ssr-outlet-->`, () => appHtml);

    // 6. Send the rendered HTML back.
    res.status(200).set({ 'Content-Type': 'text/html' }).end(html);
  } catch (e) {
    // If an error is caught, let Vite fix the stack trace so it maps back
    // to your actual source code.
    vite.ssrFixStacktrace(e);
    next(e);
  }
});
```

----------------------------------------

TITLE: Conditionally Applying Plugins in Vite Configuration
DESCRIPTION: This code example demonstrates how to conditionally apply a plugin only during the build process using the 'apply' property in the Vite configuration file.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/using-plugins.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import typescript2 from 'rollup-plugin-typescript2'
import { defineConfig } from 'vite'

export default defineConfig({
  plugins: [
    {
      ...typescript2(),
      apply: 'build',
    },
  ],
})
```

----------------------------------------

TITLE: Importing JSON Files and Named Fields in Vite (JavaScript)
DESCRIPTION: This snippet demonstrates how to import JSON files as modules in a Vite project, including importing the entire object or just named fields for tree-shaking efficiency. Inputs are .json files; outputs are JavaScript objects or destructured fields. No special Vite configuration is required beyond the default setup.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_17

LANGUAGE: javascript
CODE:
```
import 'vite/client'\n// ---cut---\n// import the entire object\nimport json from './example.json'\n// import a root field as named exports - helps with tree-shaking!\nimport { field } from './example.json'
```

----------------------------------------

TITLE: Building with explicit NODE_ENV and mode=development in Vite
DESCRIPTION: This command runs the Vite build process with both the `NODE_ENV` environment variable and the Vite mode explicitly set to "development". This configuration is useful for performing a build using environment variables and configurations specifically tailored for a development environment. Both `process.env.NODE_ENV` and `import.meta.env.MODE` will reflect "development".
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/env-and-mode.md#_snippet_14

LANGUAGE: Shell
CODE:
```
NODE_ENV=development vite build --mode development
```

----------------------------------------

TITLE: Configuring Dependency Optimization in Vite (JavaScript)
DESCRIPTION: Example of configuring Vite's dependency optimization options. It shows how to include specific dependencies for pre-bundling and set esbuild options.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/dep-optimization-options.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { defineConfig } from 'vite'

export default defineConfig({
  optimizeDeps: {
    include: ['esm-dep > cjs-dep'],
  },
})
```

----------------------------------------

TITLE: Configuring Library Build in Vite
DESCRIPTION: This configuration snippet shows how to set up a library build in Vite, specifying entry points, file naming, and CSS output.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/build-options.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { defineConfig } from 'vite'

export default defineConfig({
  build: {
    lib: {
      entry: ['src/main.js'],
      fileName: (format, entryName) => `my-lib-${entryName}.${format}.js`,
      cssFileName: 'my-lib-style',
    },
  },
})
```

----------------------------------------

TITLE: Importing Web Workers as Inlined Base64 Strings in Vite (JavaScript)
DESCRIPTION: This code snippet imports a Web Worker but instructs Vite to inline the worker code as a base64 string at build time by appending both ?worker and &inline to the import path. The result is a Worker initialized from an inlined script, useful for optimizing bundle size and loading behavior. Inputs and outputs are similar to the worker import. Ensure this pattern fits browser memory/bundle limitations.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_16

LANGUAGE: javascript
CODE:
```
import 'vite/client'\n// ---cut---\n// Web Workers inlined as base64 strings at build time\nimport InlineWorker from './worker.js?worker&inline'
```

----------------------------------------

TITLE: Pull Request Review Workflow Visualization - Mermaid
DESCRIPTION: This Mermaid diagram details the workflow for reviewing pull requests in the Vite project, clarifying how bug fixes and feature requests are triaged, reviewed, labeled, and merged. It distinguishes between 'strict fixes' and broader changes, with different approval and merging paths required for each. The flowchart serves as onboarding/reference documentation for maintainers. No runtime dependencies. Inputs: PR status. Outputs: Visual graph.
SOURCE: https://github.com/vitejs/vite/blob/main/CONTRIBUTING.md#2025-04-22_snippet_8

LANGUAGE: mermaid
CODE:
```
flowchart TD
    start{Bug fix
        or
        feature}
    start --BUG FIX--> strict_bug{"Is this a 'strict fix'?
        i.e. fixes an obvious oversight with no side effects"}
    start --FEATURE--> feature[• Discuss feature necessity
        • Is there a better way to address the need?
        • Review code quality
        • Add labels
        • Add to milestone
        • Add to Team Board]
    feature -.-> approve_non_strict[• Run vite-ecosystem-ci if needed
        • Approve if you feel strongly that the PR is needed and add to milestone]
    strict_bug --YES--> strict[• Verify the fix locally
        • Review code quality
        • Require test case if applicable
        • Request changes if necessary
        • Add labels]
    strict_bug --NO--> non_strict[Discuss the potential side effects of the fix, e.g.
        • Could it introduce implicit behavior changes in other cases?
        • Does it introduce too much changes?
        • Add labels
        • Add to Team Board]
    non_strict -.-> approve_non_strict
    strict --> approve_strict[Approve if ready to be merged]
    approve_strict --> merge_strict[Merge if approved by 2 or more team members]
    approve_non_strict -.-> merge_non_strict[Merge if approved by 2 or more team members and the PR has been discussed in a team meeting]
    merge_non_strict -.-> merge_extra
    merge_strict --> merge_extra["• Use 'Squash and Merge'
        • Edit commit message to follow convention
        • In commit message body, list relevant issues being fixed e.g. 'fix #1234, fix #1235'"]
```

----------------------------------------

TITLE: Injecting Global JSX Helper with ESBuild in Vite - JavaScript
DESCRIPTION: This snippet demonstrates adding a jsxInject option to the esbuild configuration in Vite, causing every ESBuild-processed file to automatically import React. This is useful to reduce repetitive imports in large codebases. Requires Vite, ESBuild, and React as dependencies; input is a string of import code.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/shared-options.md#2025-04-22_snippet_6

LANGUAGE: js
CODE:
```
export default defineConfig({
  esbuild: {
    jsxInject: `import React from 'react'`,
  },
})
```

----------------------------------------

TITLE: Loading Environment Variables in TypeScript
DESCRIPTION: This function loads '.env' files from a given directory. By default, it only loads environment variables prefixed with 'VITE_', but this can be altered by specifying different prefixes.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-javascript.md#2025-04-22_snippet_4

LANGUAGE: TypeScript
CODE:
```
function loadEnv(
  mode: string,
  envDir: string,
  prefixes: string | string[] = 'VITE_',
): Record<string, string>
```

----------------------------------------

TITLE: Configuring Development Mode for Vite Build via Env File
DESCRIPTION: This snippet shows the content of a .env.testing file. By setting NODE_ENV=development in this file, you can configure Vite to run a development build when using a custom mode like testing with the vite build --mode testing command, overriding the default production build behavior.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/env-and-mode.md#_snippet_10

LANGUAGE: Configuration
CODE:
```
NODE_ENV=development
```

----------------------------------------

TITLE: Override Vite Dependency via npm Overrides (JSON)
DESCRIPTION: Shows how to use npm's `overrides` feature in `package.json` to globally replace the `vite` package dependency with `npm:rolldown-vite@latest`, necessary when `vite` is a transitive or peer dependency in frameworks. Requires npm v8.3 or higher.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/rolldown.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "overrides": {
    "vite": "npm:rolldown-vite@latest"
  }
}
```

----------------------------------------

TITLE: Setting Vite server.origin for Asset URLs (JS)
DESCRIPTION: Demonstrates configuring the `server.origin` option in the Vite configuration to define the base URL used for generating asset URLs during the development server runtime.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/server-options.md#_snippet_7

LANGUAGE: js
CODE:
```
export default defineConfig({
  server: {
    origin: 'http://127.0.0.1:8080',
  },
})
```

----------------------------------------

TITLE: Configuring server.open in Vite (JS)
DESCRIPTION: This snippet demonstrates how to configure the Vite development server to automatically open the browser to a specific URL path ('/docs/index.html') when the server starts. This is achieved by setting the 'open' property within the 'server' configuration object.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/server-options.md#_snippet_1

LANGUAGE: js
CODE:
```
export default defineConfig({
  server: {
    open: '/docs/index.html',
  },
})
```

----------------------------------------

TITLE: Importing a Virtual Module
DESCRIPTION: Example of how to import and use a virtual module created by a plugin in a JavaScript file.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-plugin.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { msg } from 'virtual:my-module'

console.log(msg)
```

----------------------------------------

TITLE: Consuming Named CSS Module Exports with camelCase in Vite (JavaScript)
DESCRIPTION: This snippet illustrates how to use named imports from a CSS module file in Vite, utilizing camelCase export names when css.modules.localsConvention is set to 'camelCaseOnly'. This enables importing CSS classes as named exports corresponding to the camelized name. The input is the camelCase-named class, and the output is applying it to an element. Requires proper CSS module configuration in Vite config.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
import 'vite/client'\n// ---cut---\n// .apply-color -> applyColor\nimport { applyColor } from './example.module.css'\ndocument.getElementById('foo').className = applyColor
```

----------------------------------------

TITLE: Importing CSS Inline to Avoid Double Load - Vite - TypeScript
DESCRIPTION: This code demonstrates how to import a CSS file as a string using the '?inline' modifier in Vite 4 and later. The '?inline' query ensures that the imported CSS string is not emitted as a separate stylesheet, thus avoiding the double loading issue present in earlier approaches. Applicable when you need programmatic access to CSS content, such as injecting it through JavaScript.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/blog/announcing-vite4.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import stuff from './global.css?inline'

```

----------------------------------------

TITLE: Firebase Hosting Configuration for Vite
DESCRIPTION: Firebase hosting configuration file (firebase.json) that sets up hosting for a Vite application, including SPA-style routing via the rewrites section.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/static-deploy.md#2025-04-22_snippet_9

LANGUAGE: json
CODE:
```
{
  "hosting": {
    "public": "dist",
    "ignore": [],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ]
  }
}
```

----------------------------------------

TITLE: Exporting Components from a JavaScript Library Entry File
DESCRIPTION: Example of a library entry file (`lib/main.js`) that imports components (`Foo.vue`, `Bar.vue`) from other files within the library and exports them. This makes the components available for consumption by users importing the library. This file corresponds to the `entry` path specified in the Vite build configuration.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/build.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
```js [lib/main.js]
import Foo from './Foo.vue'
import Bar from './Bar.vue'
export { Foo, Bar }
```
```

----------------------------------------

TITLE: Increase File Descriptor Limit (Shell)
DESCRIPTION: Temporarily increases the soft limit for open file descriptors to 10000 for the current shell session. This may help resolve request stalling issues caused by reaching the file descriptor limit.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/troubleshooting.md#_snippet_3

LANGUAGE: shell
CODE:
```
ulimit -Sn 10000
```

----------------------------------------

TITLE: Importing CSS Modules as Strings with Inline Query - Vite - TypeScript
DESCRIPTION: This snippet illustrates how to import a CSS file as a string using the deprecated default export in Vite 3. Importing as shown may cause the CSS to be loaded twice when the framework or runtime also injects styles, leading to redundancy issues. The import demonstrates the previous pattern now discouraged in Vite 4 and above.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/blog/announcing-vite4.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import cssString from './global.css'

```

----------------------------------------

TITLE: Injecting Additional Data for CSS Pre-Processor in Vite - JavaScript
DESCRIPTION: This snippet shows how to inject extra CSS, such as variable declarations, into every SCSS file processed by Vite using the additionalData option. It utilizes defineConfig and expects Vite and SCSS dependencies. Input is a string of SCSS code; result is injection at build-time into all processed SCSS files.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/shared-options.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
export default defineConfig({
  css: {
    preprocessorOptions: {
      scss: {
        additionalData: `$injectedColor: orange;`,
      },
    },
  },
})
```

----------------------------------------

TITLE: Configuring Vite server.sourcemapIgnoreList in JavaScript
DESCRIPTION: Example demonstrating the default configuration for `server.sourcemapIgnoreList` in a Vite configuration file (`vite.config.js`). This function receives the source path and sourcemap path and returns `true` if the source path should be ignored, by default excluding paths containing 'node_modules'.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/server-options.md#_snippet_8

LANGUAGE: js
CODE:
```
export default defineConfig({
  server: {
    // This is the default value, and will add all files with node_modules
    // in their paths to the ignore list.
    sourcemapIgnoreList(sourcePath, sourcemapPath) {
      return sourcePath.includes('node_modules')
    },
  },
})
```

----------------------------------------

TITLE: Configuring Vite server.fs.allow for Parent Directory (JS)
DESCRIPTION: Illustrates how to use the `server.fs.allow` option in the Vite configuration to explicitly permit access to files located outside the default project root, specifically allowing access to the parent directory by specifying '..'.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/server-options.md#_snippet_5

LANGUAGE: js
CODE:
```
export default defineConfig({
  server: {
    fs: {
      // Allow serving files from one level up to the project root
      allow: ['..'],
    },
  },
})
```

----------------------------------------

TITLE: Increase Inotify User Instances (Shell)
DESCRIPTION: Temporarily increases the maximum number of inotify instances per user allowed. This command requires superuser privileges. It helps manage file watching resources.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/troubleshooting.md#_snippet_6

LANGUAGE: shell
CODE:
```
sudo sysctl fs.inotify.max_user_instances=8192
```

----------------------------------------

TITLE: Custom HMR Handling in HotUpdate Hook (JavaScript)
DESCRIPTION: Shows how to implement custom HMR handling in the hotUpdate hook. This example sends a custom 'special-update' event to the client for the client environment.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-plugins.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
hotUpdate() {
  if (this.environment.name !== 'client')
    return

  this.environment.hot.send({
    type: 'custom',
    event: 'special-update',
    data: {}
  })
  return []
}
```

----------------------------------------

TITLE: Importing SVG Images in Vue Component
DESCRIPTION: This Vue component setup script imports SVG images as raw strings for use in the template. It demonstrates how Vite handles asset imports in Vue components.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/why.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
<script setup>
import bundlerSvg from '../images/bundler.svg?raw'
import esmSvg from '../images/esm.svg?raw'
</script>
```

----------------------------------------

TITLE: Accessing Extra Vite Templates using PNPM
DESCRIPTION: This command uses pnpm to run the `create-vite-extra` package. It provides access to additional community and framework templates beyond the default ones offered by `create-vite`, including options for different runtimes like Solid, Deno, SSR setups, and library starters.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/blog/announcing-vite6.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
pnpm create vite-extra
```

----------------------------------------

TITLE: Example Vite Manifest JSON Structure
DESCRIPTION: Shows the structure of the manifest.json file generated by Vite build, including file mappings and dependencies.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/backend-integration.md#2025-04-22_snippet_4

LANGUAGE: json
CODE:
```
{
  "_shared-B7PI925R.js": {
    "file": "assets/shared-B7PI925R.js",
    "name": "shared",
    "css": ["assets/shared-ChJ_j-JJ.css"]
  },
  "_shared-ChJ_j-JJ.css": {
    "file": "assets/shared-ChJ_j-JJ.css",
    "src": "_shared-ChJ_j-JJ.css"
  },
  "baz.js": {
    "file": "assets/baz-B2H3sXNv.js",
    "name": "baz",
    "src": "baz.js",
    "isDynamicEntry": true
  },
  "views/bar.js": {
    "file": "assets/bar-gkvgaI9m.js",
    "name": "bar",
    "src": "views/bar.js",
    "isEntry": true,
    "imports": ["_shared-B7PI925R.js"],
    "dynamicImports": ["baz.js"]
  },
  "views/foo.js": {
    "file": "assets/foo-BRBmoGS9.js",
    "name": "foo",
    "src": "views/foo.js",
    "isEntry": true,
    "imports": ["_shared-B7PI925R.js"],
    "css": ["assets/foo-5UjPuW-k.css"]
  }
}
```

----------------------------------------

TITLE: Handling HMR for SSR-only Modules in Vite with TypeScript
DESCRIPTION: This snippet demonstrates a custom Vite plugin for handling hot module replacement (HMR) updates. The plugin specifically targets SSR-only modules to prevent unnecessary client-side reloading. It requires the 'vite' library, and uses the Plugin and EnvironmentModuleNode types from Vite. Inputs include a list of modules, and the server and timestamp context. The output is a server-sent 'full-reload' signal if SSR-only modules are invalidated.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/migration.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type { Plugin, EnvironmentModuleNode } from 'vite'\n\nfunction hmrReload(): Plugin {\n  return {\n    name: 'hmr-reload',\n    enforce: 'post',\n    hotUpdate: {\n      order: 'post',\n      handler({ modules, server, timestamp }) {\n        if (this.environment.name !== 'ssr') return\n\n        let hasSsrOnlyModules = false\n\n        const invalidatedModules = new Set<EnvironmentModuleNode>()\n        for (const mod of modules) {\n          if (mod.id == null) continue\n          const clientModule =\n            server.environments.client.moduleGraph.getModuleById(mod.id)\n          if (clientModule != null) continue\n\n          this.environment.moduleGraph.invalidateModule(\n            mod,\n            invalidatedModules,\n            timestamp,\n            true,\n          )\n          hasSsrOnlyModules = true\n        }\n\n        if (hasSsrOnlyModules) {\n          server.ws.send({ type: 'full-reload' })\n          return []\n        }\n      },\n    },\n  }\n}
```

----------------------------------------

TITLE: Configuring Preview and Server Ports in Vite
DESCRIPTION: This snippet demonstrates how to set different ports for the Vite development server and the preview server using the defineConfig function.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/preview-options.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default defineConfig({
  server: {
    port: 3030,
  },
  preview: {
    port: 8080,
  },
})
```

----------------------------------------

TITLE: Scaffolding Project with degit
DESCRIPTION: Use `degit` to clone a project template from a Git repository, install its dependencies, and start the development server. This is useful for community-maintained templates.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/index.md#_snippet_2

LANGUAGE: bash
CODE:
```
npx degit user/project#main my-project
cd my-project

npm install
npm run dev
```

----------------------------------------

TITLE: Collecting Used Module IDs in Vue SSR Context (JavaScript)
DESCRIPTION: This JavaScript snippet illustrates how `@vitejs/plugin-vue` integrates with Vue SSR. After rendering the application (`app`) to a string using `vueServerRenderer.renderToString`, the `ctx` object is automatically populated with a `modules` property, which is a Set containing the module IDs of components used during the render.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/ssr.md#_snippet_7

LANGUAGE: js
CODE:
```
const ctx = {}
const html = await vueServerRenderer.renderToString(app, ctx)
// ctx.modules is now a Set of module IDs that were used during the render
```

----------------------------------------

TITLE: Accessing Environment Config in Transform Hook (TypeScript)
DESCRIPTION: Demonstrates how to access the environment configuration within a plugin's transform hook. This snippet shows how to log the resolve conditions for the current environment.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-plugins.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
transform(code, id) {
  console.log(this.environment.config.resolve.conditions)
}
```

----------------------------------------

TITLE: Extending Vite server.fs.allow with Workspace Root and Custom Paths (JS)
DESCRIPTION: Shows how to combine the automatically detected workspace root using `searchForWorkspaceRoot` with custom directory and file paths in the `server.fs.allow` configuration to define permitted file access during development.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/server-options.md#_snippet_6

LANGUAGE: js
CODE:
```
import { defineConfig, searchForWorkspaceRoot } from 'vite'

export default defineConfig({
  server: {
    fs: {
      allow: [
        // search up for workspace root
        searchForWorkspaceRoot(process.cwd()),
        // your custom rules
        '/path/to/custom/allow_directory',
        '/path/to/custom/allow_file.demo',
      ],
    },
  },
})
```

----------------------------------------

TITLE: Starting a Vite Preview Server in TypeScript
DESCRIPTION: Demonstrates how to start a Vite preview server using the preview function. It includes configuration options for port and automatic browser opening.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-javascript.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { preview } from 'vite'

const previewServer = await preview({
  // any valid user config options, plus `mode` and `configFile`
  preview: {
    port: 8080,
    open: true,
  },
})

previewServer.printUrls()
previewServer.bindCLIShortcuts({ print: true })
```

----------------------------------------

TITLE: Importing and Rendering Raw SVG Asset in Vite Playground - JavaScript
DESCRIPTION: This JavaScript snippet demonstrates importing a raw SVG asset using Vite's ?raw import feature and rendering its content into a DOM element with the .raw class. The imported rawSvg variable contains the file's raw string content, and the text utility function is used to update the UI. Dependencies: Vite's asset import processing, working browser DOM, and the text utility function. Inputs: SVG file; Outputs: SVG string forcibly injected into the page.
SOURCE: https://github.com/vitejs/vite/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
import rawSvg from './nested/fragment.svg?raw'
text('.raw', rawSvg)
```

----------------------------------------

TITLE: Network Request Flow in Vite's Optimized Async Chunk Loading
DESCRIPTION: Demonstrates how Vite rewrites code-split dynamic import calls with a preload step to fetch chunk A and common chunk C in parallel, eliminating extra network roundtrips.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_23

LANGUAGE: plaintext
CODE:
```
Entry ---> (A + C)
```

----------------------------------------

TITLE: Specifying JavaScript Module Type in Load Hook - JavaScript
DESCRIPTION: This snippet illustrates how to explicitly set the `moduleType` to 'js' when returning code from a `load` or `transform` hook that converts non-JavaScript content into JavaScript. This is required in Rolldown because it supports various module types and defaults to inference, ensuring the generated code is correctly treated as a JavaScript module.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/rolldown.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
const plugin = {
  name: 'txt-loader',
  load(id) {
    if (id.endsWith('.txt')) {
      const content = fs.readFile(id, 'utf-8')
      return {
        code: `export default ${JSON.stringify(content)}`,
        moduleType: 'js', // [!code ++]
      }
    }
  },
}
```

----------------------------------------

TITLE: Handling Preload Errors in Vite Applications
DESCRIPTION: Shows how to handle dynamic import failures by listening to the 'vite:preloadError' event. This is useful for managing scenarios where assets from previous deployments are deleted, causing import errors for users with outdated assets.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/build.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
window.addEventListener('vite:preloadError', (event) => {
  window.location.reload() // for example, refresh the page
})
```

----------------------------------------

TITLE: Start Vite Dev Server Profiling (Bash)
DESCRIPTION: This command starts the Vite development server with Node.js inspector profiling enabled. The --profile flag generates a CPU profile file, and --open automatically opens the application in the default browser for easy access and testing.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/troubleshooting.md#_snippet_13

LANGUAGE: bash
CODE:
```
vite --profile --open
```

----------------------------------------

TITLE: Configuring Multiple Environments in Vite
DESCRIPTION: Example of configuring multiple environments (client, server, and edge) in Vite. This demonstrates how to use the new 'environments' configuration option.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  build: {
    sourcemap: false,
  },
  optimizeDeps: {
    include: ['lib'],
  },
  environments: {
    server: {},
    edge: {
      resolve: {
        noExternal: true,
      },
    },
  },
}
```

----------------------------------------

TITLE: Previewing Vite Build for SSR - Shell
DESCRIPTION: Use the standard `vite preview` command to preview the production build of a Server-Side Rendering application. Custom SSR middleware can be added to the preview server using the `configurePreviewServer` plugin hook.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/ssr.md#_snippet_10

LANGUAGE: shell
CODE:
```
$ vite preview
```

----------------------------------------

TITLE: Logging Resolved Configuration Options - JavaScript
DESCRIPTION: This snippet shows how to access and log the resolved configuration object within the `configResolved` hook of a Vite plugin. It specifically demonstrates accessing `config.optimizeDeps` and `config.oxc`, which can show options potentially influenced by Rolldown's compatibility layer or specific Oxc settings.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/rolldown.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
const plugin = {
  name: 'log-config',
  configResolved(config) {
    console.log('options', config.optimizeDeps, config.oxc)
  },
}
```

----------------------------------------

TITLE: GitLab CI/CD Configuration for Vite Deployment
DESCRIPTION: GitLab CI/CD configuration file (.gitlab-ci.yml) that sets up automated building and deployment of a Vite application to GitLab Pages.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/static-deploy.md#2025-04-22_snippet_4

LANGUAGE: yaml
CODE:
```
image: node:lts
pages:
  stage: deploy
  cache:
    key:
      files:
        - package-lock.json
      prefix: npm
    paths:
      - node_modules/
  script:
    - npm install
    - npm run build
    - cp -a dist/. public/
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
```

----------------------------------------

TITLE: Configuring Watch Options for Vite Build
DESCRIPTION: Demonstrates how to enable and configure Rollup's watcher options in the Vite configuration file. This allows developers to set up automatic rebuilds when source files change.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/build.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
export default defineConfig({
  build: {
    watch: {
      // https://rollupjs.org/configuration-options/#watch
    },
  },
})
```

----------------------------------------

TITLE: Configuring Preview Port in package.json
DESCRIPTION: Modified package.json that sets a custom port (8080) for the Vite preview server using the --port flag.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/static-deploy.md#2025-04-22_snippet_3

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "preview": "vite preview --port 8080"
  }
}
```

----------------------------------------

TITLE: Explicit Asset Inclusion Pattern Configuration in Vite - JavaScript
DESCRIPTION: This snippet adds a custom file extension match pattern to assetsInclude using defineConfig so that .gltf files are processed as static assets by Vite. Requires Vite and picomatch. Useful for including 3D model files and other custom assets in the build pipeline.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/shared-options.md#2025-04-22_snippet_7

LANGUAGE: js
CODE:
```
export default defineConfig({
  assetsInclude: ['**/*.gltf'],
})
```

----------------------------------------

TITLE: Handling Client Messages on the Server Side
DESCRIPTION: Shows how to listen for client messages and respond to them in a Vite plugin.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-plugin.md#2025-04-22_snippet_16

LANGUAGE: javascript
CODE:
```
export default defineConfig({
  plugins: [
    {
      // ...
      configureServer(server) {
        server.ws.on('my:from-client', (data, client) => {
          console.log('Message from client:', data.msg) // Hey!
          // reply only to the client (if needed)
          client.send('my:ack', { msg: 'Hi! I got your message!' })
        })
      },
    },
  ],
})
```

----------------------------------------

TITLE: Using Virtual Modules for Runtime Agnostic SSR (TypeScript)
DESCRIPTION: This example shows how to use a virtual module (`virtual:entrypoint`) to decouple user code from Vite API code, enabling runtime-agnostic SSR. It demonstrates checking the environment type (`RunnableDevEnvironment`, `CustomDevEnvironment`) to use the appropriate method for running the entrypoint.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-frameworks.md#_snippet_4

LANGUAGE: typescript
CODE:
```
// code using the Vite's APIs
import { createServer } from 'vite'

const server = createServer({
  plugins: [
    // a plugin that handles `virtual:entrypoint`
    {
      name: 'virtual-module',
      /* plugin implementation */
    },
  ],
})
const ssrEnvironment = server.environment.ssr
const input = {}

// use exposed functions by each environment factories that runs the code
// check for each environment factories what they provide
if (ssrEnvironment instanceof RunnableDevEnvironment) {
  ssrEnvironment.runner.import('virtual:entrypoint')
} else if (ssrEnvironment instanceof CustomDevEnvironment) {
  ssrEnvironment.runEntrypoint('virtual:entrypoint')
} else {
  throw new Error(`Unsupported runtime for ${ssrEnvironment.name}`)
}

// -------------------------------------
// virtual:entrypoint
const { createHandler } = await import('./entrypoint.js')
const handler = createHandler(input)
const response = handler(new Request('/'))

// -------------------------------------
// ./entrypoint.js
export function createHandler(input) {
  return function handler(req) {
    return new Response('hello')
  }
}
```

----------------------------------------

TITLE: Including Deep Imports for Pre-bundling in Vite (JavaScript)
DESCRIPTION: Demonstrates how to use glob patterns to include deep imports from a library for pre-bundling in Vite. This can improve performance by avoiding constant pre-bundling of new deep imports.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/dep-optimization-options.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { defineConfig } from 'vite'

export default defineConfig({
  optimizeDeps: {
    include: ['my-lib/components/**/*.vue'],
  },
})
```

----------------------------------------

TITLE: Customizing Vite Multi-Environment Build
DESCRIPTION: Shows how to configure the Vite builder to customize the build process for multiple environments. The buildApp function receives the builder instance and demonstrates building all configured environments concurrently using Promise.all.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-frameworks.md#_snippet_10

LANGUAGE: javascript
CODE:
```
export default {
  builder: {
    buildApp: async (builder) => {
      const environments = Object.values(builder.environments)
      return Promise.all(
        environments.map((environment) => builder.build(environment)),
      )
    },
  },
}
```

----------------------------------------

TITLE: Detecting Rolldown in Vite Plugin Hook Context - JavaScript
DESCRIPTION: This snippet shows how to detect if a Vite plugin hook is running within a `rolldown-vite` environment by checking for the existence of `this.meta.rolldownVersion`. This allows for conditional logic within the plugin's hooks based on the underlying build tool.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/rolldown.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
const plugin = {
  resolveId() {
    if (this.meta.rolldownVersion) {
      // logic for rolldown-vite
    } else {
      // logic for rollup-vite
    }
  },
}
```

----------------------------------------

TITLE: Cloudflare Pages Deployment with Wrangler CLI
DESCRIPTION: Series of commands to set up and deploy a Vite application to Cloudflare Pages using the Wrangler CLI.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/static-deploy.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
# Install Wrangler CLI
$ npm install -g wrangler

# Login to Cloudflare account from CLI
$ wrangler login

# Run your build command
$ npm run build

# Create new deployment
$ npx wrangler pages deploy dist
```

----------------------------------------

TITLE: Communicating with Vite APIs via ssrEnvironment.send (TypeScript)
DESCRIPTION: This snippet illustrates using `ssrEnvironment.send` to communicate from the user module's runtime back to the code using Vite's APIs. This approach is useful when user modules require Node.js-specific APIs, although its behavior might differ after the build process.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-frameworks.md#_snippet_6

LANGUAGE: typescript
CODE:
```
// code using the Vite's APIs
import { createServer } from 'vite'

const server = createServer({
  plugins: [
    // a plugin that handles `virtual:entrypoint`
    {
      name: 'virtual-module',
      /* plugin implementation */
    },
  ],
})
const ssrEnvironment = server.environment.ssr
const input = {}

// use exposed functions by each environment factories that runs the code
// check for each environment factories what they provide
if (ssrEnvironment instanceof RunnableDevEnvironment) {
  ssrEnvironment.runner.import('virtual:entrypoint')
} else if (ssrEnvironment instanceof CustomDevEnvironment) {
  ssrEnvironment.runEntrypoint('virtual:entrypoint')
} else {
  throw new Error(`Unsupported runtime for ${ssrEnvironment.name}`)
}

const req = new Request('/')

const uniqueId = 'a-unique-id'
ssrEnvironment.send('request', serialize({ req, uniqueId }))
```

----------------------------------------

TITLE: DevEnvironment Class Structure in TypeScript
DESCRIPTION: Defines the structure of the DevEnvironment class used in Vite. It includes properties like name, hot channel, module graph, plugins, and methods for transforming and warming up requests.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-instances.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
class DevEnvironment {
  /**
   * Unique identifier for the environment in a Vite server.
   * By default Vite exposes 'client' and 'ssr' environments.
   */
  name: string
  /**
   * Communication channel to send and receive messages from the
   * associated module runner in the target runtime.
   */
  hot: NormalizedHotChannel
  /**
   * Graph of module nodes, with the imported relationship between
   * processed modules and the cached result of the processed code.
   */
  moduleGraph: EnvironmentModuleGraph
  /**
   * Resolved plugins for this environment, including the ones
   * created using the per-environment `create` hook
   */
  plugins: Plugin[]
  /**
   * Allows to resolve, load, and transform code through the
   * environment plugins pipeline
   */
  pluginContainer: EnvironmentPluginContainer
  /**
   * Resolved config options for this environment. Options at the server
   * global scope are taken as defaults for all environments, and can
   * be overridden (resolve conditions, external, optimizedDeps)
   */
  config: ResolvedConfig & ResolvedDevEnvironmentOptions

  constructor(
    name: string,
    config: ResolvedConfig,
    context: DevEnvironmentContext,
  )

  /**
   * Resolve the URL to an id, load it, and process the code using the
   * plugins pipeline. The module graph is also updated.
   */
  async transformRequest(url: string): Promise<TransformResult | null>

  /**
   * Register a request to be processed with low priority. This is useful
   * to avoid waterfalls. The Vite server has information about the
   * imported modules by other requests, so it can warmup the module graph
   * so the modules are already processed when they are requested.
   */
  async warmupRequest(url: string): Promise<void>
}
```

----------------------------------------

TITLE: Configuring Dependency Optimization in Vite
DESCRIPTION: Shows how to configure Vite for handling linked dependencies in a monorepo setup, including them in the optimization and commonjs processes.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/dep-pre-bundling.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { defineConfig } from 'vite'
// ---cut---
export default defineConfig({
  optimizeDeps: {
    include: ['linked-dep'],
  },
  build: {
    commonjsOptions: {
      include: [/linked-dep/, /node_modules/],
    },
  },
})
```

----------------------------------------

TITLE: Installing Terser for Vite Build Minification
DESCRIPTION: This shell command installs the Terser JavaScript minifier as a development dependency using npm. This installation is required if you configure Vite's `build.minify` option to use `'terser'` instead of the default 'esbuild'.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/build-options.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
npm add -D terser
```

----------------------------------------

TITLE: Ignore Vite CJS Warning (Bash)
DESCRIPTION: Runs the Vite development server while suppressing the warning about deprecated CJS Node API usage. This is a temporary workaround to ignore the warning.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/troubleshooting.md#_snippet_1

LANGUAGE: bash
CODE:
```
VITE_CJS_IGNORE_WARNING=true vite dev
```

----------------------------------------

TITLE: Implementing an Environment-Aware Plugin Counter in JavaScript
DESCRIPTION: This snippet shows how to modify the plugin to count transformed modules for each environment separately. It uses a Map to store counts for different environments and accesses the current environment through 'this.environment'.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/changes/shared-plugins-during-build.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
function PerEnvironmentCountTransformedModulesPlugin() {
  const state = new Map<Environment, { count: number }>()
  return {
    name: 'count-transformed-modules',
    perEnvironmentStartEndDuringDev: true,
    buildStart() {
      state.set(this.environment, { count: 0 })
    }
    transform(id) {
      state.get(this.environment).count++
    },
    buildEnd() {
      console.log(this.environment.name, state.get(this.environment).count)
    }
  }
}
```

----------------------------------------

TITLE: Importing Vue Components for Vite Landing Page
DESCRIPTION: This script imports various Vue components that make up the different sections of the Vite landing page. Each component represents a specific section like hero, features, frameworks, community, sponsors, and getting started.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/index.md#2025-04-22_snippet_0

LANGUAGE: vue
CODE:
```
<script setup>
import Hero from '.vitepress/theme/components/landing/1. hero-section/HeroSection.vue'
import FeatureSection from './.vitepress/theme/components/landing/2. feature-section/FeatureSection.vue'
import FrameworksSection from './.vitepress/theme/components/landing/3. frameworks-section/FrameworksSection.vue'
import CommunitySection from './.vitepress/theme/components/landing/4. community-section/CommunitySection.vue'
import SponsorSection from './.vitepress/theme/components/landing/5. sponsor-section/SponsorSection.vue'
import GetStartedSection from '.vitepress/theme/components/landing/6. get-started-section/GetStartedSection.vue'
import FeatureInstantServerStart from './.vitepress/theme/components/landing/2. feature-section/FeatureInstantServerStart.vue'
import FeatureHMR from './.vitepress/theme/components/landing/2. feature-section/FeatureHMR.vue'
import FeatureRichFeatures from './.vitepress/theme/components/landing/2. feature-section/FeatureRichFeatures.vue'
import FeatureOptimizedBuild from './.vitepress/theme/components/landing/2. feature-section/FeatureOptimizedBuild.vue'
import FeatureFlexiblePlugins from './.vitepress/theme/components/landing/2. feature-section/FeatureFlexiblePlugins.vue'
import FeatureTypedAPI from './.vitepress/theme/components/landing/2. feature-section/FeatureTypedAPI.vue'
import FeatureSSRSupport from './.vitepress/theme/components/landing/2. feature-section/FeatureSSRSupport.vue'
import FeatureCI from './.vitepress/theme/components/landing/2. feature-section/FeatureCI.vue'
</script>
```

----------------------------------------

TITLE: Searching for Workspace Root in TypeScript
DESCRIPTION: This function searches for the root of the potential workspace if it meets certain conditions. It checks for a 'workspaces' field in 'package.json' or the presence of 'lerna.json' or 'pnpm-workspace.yaml' files. If conditions are not met, it falls back to a specified root.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-javascript.md#2025-04-22_snippet_3

LANGUAGE: TypeScript
CODE:
```
function searchForWorkspaceRoot(
  current: string,
  root = searchForPackageRoot(current),
): string
```

----------------------------------------

TITLE: Running Vite with Custom Config File
DESCRIPTION: Command to run Vite with a custom configuration file specified using the --config CLI option.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/index.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
vite --config my-config.js
```

----------------------------------------

TITLE: TypeScript Interface for HotUpdateOptions in hotUpdate Hook
DESCRIPTION: TypeScript interface that defines the structure of the HotUpdateOptions object passed to the hotUpdate hook, which extends the previous context with a type field indicating the watch event type (create, update, or delete) and environment-specific module nodes.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/changes/hotupdate-hook.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
interface HotUpdateOptions {
  type: 'create' | 'update' | 'delete'
  file: string
  timestamp: number
  modules: Array<EnvironmentModuleNode>
  read: () => string | Promise<string>
  server: ViteDevServer
}
```

----------------------------------------

TITLE: Injecting React Refresh Runtime for Development
DESCRIPTION: Adds React Refresh runtime script to the HTML template when using @vitejs/plugin-react in development.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/backend-integration.md#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<script type="module">
  import RefreshRuntime from 'http://localhost:5173/@react-refresh'
  RefreshRuntime.injectIntoGlobalHook(window)
  window.$RefreshReg$ = () => {}
  window.$RefreshSig$ = () => (type) => type
  window.__vite_plugin_react_preamble_installed__ = true
</script>
```

----------------------------------------

TITLE: Configuring SSR Package.json Main Fields in Vite
DESCRIPTION: Lists fields in package.json to try when resolving a package's entry point for non-externalized dependencies. Takes lower precedence than conditional exports resolved from the exports field.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/ssr-options.md#2025-04-22_snippet_5

LANGUAGE: markdown
CODE:
```
### ssr.resolve.mainFields

- **Type:** `string[]`
- **Default:** `['module', 'jsnext:main', 'jsnext']`
```

----------------------------------------

TITLE: Add Trusted SSL Cert (macOS Shell)
DESCRIPTION: Adds a self-signed SSL certificate to the login keychain and marks it as trusted on macOS. This helps resolve dev server issues related to self-signed certificates not being trusted by the browser.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/troubleshooting.md#_snippet_8

LANGUAGE: shell
CODE:
```
security add-trusted-cert -d -r trustRoot -k ~/Library/Keychains/login.keychain-db your-cert.cer
```

----------------------------------------

TITLE: Using hot.invalidate for Forceful Update Propagation in JavaScript
DESCRIPTION: This example shows how to use hot.invalidate within the accept callback to forcefully propagate updates to importers when a module can't handle an HMR update.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-hmr.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
import.meta.hot.accept((module) => {
  // You may use the new module instance to decide whether to invalidate.
  if (cannotHandleUpdate(module)) {
    import.meta.hot.invalidate()
  }
})
```

----------------------------------------

TITLE: Building with explicit development mode in Vite
DESCRIPTION: This command runs the Vite build process but explicitly sets the Vite mode to "development". While the mode is "development", the `NODE_ENV` remains the default "production" for the build command. This allows building with development-specific configurations or environment variables defined for the development mode.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/env-and-mode.md#_snippet_12

LANGUAGE: Shell
CODE:
```
vite build --mode development
```

----------------------------------------

TITLE: Using Degit with Main Branch
DESCRIPTION: This snippet shows how to scaffold a project using degit when the repository uses 'main' as the default branch. Modify 'user/project' with the actual user and project names.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/README.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
npx degit user/project#main my-project
```

----------------------------------------

TITLE: WebAssembly Import in Vite
DESCRIPTION: Demonstrates how to import and initialize WebAssembly modules in Vite using the ?init suffix. Shows both basic initialization and passing import objects.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_20

LANGUAGE: javascript
CODE:
```
import init from './example.wasm?init'

init().then((instance) => {
  instance.exports.test()
})
```

LANGUAGE: javascript
CODE:
```
import init from './example.wasm?init'

init({
  imports: {
    someFunc: () => {
      /* ... */
    },
  },
}).then(() => {
  /* ... */
})
```

----------------------------------------

TITLE: Scaffolding a Project with Community Templates using Degit
DESCRIPTION: This snippet details how to use degit for setting up projects with Vite community templates. Ensure that tools like degit and Node.js are installed.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/README.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
npx degit user/project my-project
cd my-project

npm install
npm run dev
```

----------------------------------------

TITLE: Defining ViteHotContext Interface in TypeScript
DESCRIPTION: This snippet defines the TypeScript interface for the ViteHotContext, which is exposed via the import.meta.hot object. It includes methods for accepting updates, disposing of modules, and handling custom events.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-hmr.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
interface ImportMeta {
  readonly hot?: ViteHotContext
}

interface ViteHotContext {
  readonly data: any

  accept(): void
  accept(cb: (mod: ModuleNamespace | undefined) => void): void
  accept(dep: string, cb: (mod: ModuleNamespace | undefined) => void): void
  accept(
    deps: readonly string[],
    cb: (mods: Array<ModuleNamespace | undefined>) => void,
  ): void

  dispose(cb: (data: any) => void): void
  prune(cb: (data: any) => void): void
  invalidate(message?: string): void

  on<T extends CustomEventName>(
    event: T,
    cb: (payload: InferCustomEventPayload<T>) => void,
  ): void
  off<T extends CustomEventName>(
    event: T,
    cb: (payload: InferCustomEventPayload<T>) => void,
  ): void
  send<T extends CustomEventName>(
    event: T,
    data?: InferCustomEventPayload<T>,
  ): void
}
```

----------------------------------------

TITLE: Quoting Environment Variables with Special Characters - Vite - Diff
DESCRIPTION: This diff snippet illustrates the change required in .env files for Vite 4 when environment variable values contain characters like '#' or backticks. With dotenv 16 and dotenv-expand 9, such values must be wrapped in quotes to be parsed correctly. The diff shows both the old, incompatible syntax and the new, compliant format.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/blog/announcing-vite4.md#2025-04-22_snippet_2

LANGUAGE: diff
CODE:
```
-VITE_APP=ab#cd`ef
+VITE_APP="ab#cd`ef"

```

----------------------------------------

TITLE: Lightning CSS Configuration Object Example for Vite - JavaScript
DESCRIPTION: This partial snippet supplies a typed shape for configuring Lightning CSS in Vite. The object shows available options—including targets, features, drafts, and modules—matching Lightning CSS documentation. Useful for guiding users in constructing their configuration object, ensures valid fields are supplied.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/shared-options.md#2025-04-22_snippet_11

LANGUAGE: js
CODE:
```
{
  targets?: Targets
  include?: Features
  exclude?: Features
  drafts?: Drafts
  nonStandard?: NonStandard
  pseudoClasses?: PseudoClasses
  unusedSymbols?: string[]
  cssModules?: CSSModulesConfig,
  // ...
}
```

----------------------------------------

TITLE: Migration Example: Full Page Reload Implementation
DESCRIPTION: Example showing how to migrate from handleHotUpdate to hotUpdate when needing to perform a full page reload. The key difference is using this.environment to access the moduleGraph and hot APIs instead of using the server directly.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/changes/hotupdate-hook.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
handleHotUpdate({ server, modules, timestamp }) {
  // Invalidate modules manually
  const invalidatedModules = new Set()
  for (const mod of modules) {
    server.moduleGraph.invalidateModule(
      mod,
      invalidatedModules,
      timestamp,
      true
    )
  }
  server.ws.send({ type: 'full-reload' })
  return []
}

// Migrate to:

hotUpdate({ modules, timestamp }) {
  // Invalidate modules manually
  const invalidatedModules = new Set()
  for (const mod of modules) {
    this.environment.moduleGraph.invalidateModule(
      mod,
      invalidatedModules,
      timestamp,
      true
    )
  }
  this.environment.hot.send({ type: 'full-reload' })
  return []
}
```

----------------------------------------

TITLE: Configuring qwikVite Plugin for CSR Mode in TypeScript
DESCRIPTION: This TypeScript snippet shows how to configure the Vite build tool using `defineConfig`. It specifically demonstrates enabling Client-Side Rendering (CSR) for a Qwik application by passing `{ csr: true }` as an option to the `qwikVite` plugin within the `plugins` array. This setup ensures the application is fully bootstrapped in the browser.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/template-qwik/README.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
```ts
export default defineConfig({
  plugins: [
    qwikVite({
      csr: true,
    }),
  ],
})
```
```

----------------------------------------

TITLE: Debug Vite HMR (Bash)
DESCRIPTION: Runs the Vite development server with detailed HMR debugging output. This can help identify why a full reload is happening instead of an HMR update or reveal circular dependency paths.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/troubleshooting.md#_snippet_10

LANGUAGE: bash
CODE:
```
vite --debug hmr
```

----------------------------------------

TITLE: Managing Preview Server Configuration in Vite with JavaScript
DESCRIPTION: This snippet demonstrates the `configurePreviewServer` hook, which parallels `configureServer` but targets the Vite preview server. It allows injecting middleware before or after other middlewares by returning a function. The snippet highlights adding post-middlewares, depending on whether they should run before or after server setup.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-plugin.md#2025-04-22_snippet_8

LANGUAGE: JavaScript
CODE:
```
const myPlugin = () => ({
  name: 'configure-preview-server',
  configurePreviewServer(server) {
    // return a post hook that is called after other middlewares are
    // installed
    return () => {
      server.middlewares.use((req, res, next) => {
        // custom handle request...
      })
    }
  },
})
```

----------------------------------------

TITLE: Using import.meta.glob with Multiple Patterns in JavaScript
DESCRIPTION: Demonstrates how to use import.meta.glob with multiple file patterns passed as an array. This new feature allows for more flexible glob imports.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/blog/announcing-vite3.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import.meta.glob(['./dir/*.js', './another/*.js'])
```

----------------------------------------

TITLE: Configuring Qwik CSR Mode in Vite - TypeScript
DESCRIPTION: This TypeScript snippet configures Vite to use the Qwik plugin with client-side rendering (CSR) enabled. It uses 'defineConfig' to export the configuration object, where the 'qwikVite' plugin is initialized with 'csr: true'. Dependencies include Vite, the Qwik Vite plugin, and the project's environment must support TypeScript. Key parameter 'csr: true' enables CSR, making the application fully browser-bootstrapped. The output of this configuration enables development or build of a pure client-rendered Qwik app; server-side rendering features are not enabled here.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/template-qwik-ts/README.md#2025-04-22_snippet_0

LANGUAGE: TypeScript
CODE:
```
export default defineConfig({
  plugins: [
    qwikVite({
      csr: true,
    }),
  ],
})
```

----------------------------------------

TITLE: Importing and Initializing WebAssembly Modules with Vite - JavaScript
DESCRIPTION: This snippet demonstrates how to import and initialize a WebAssembly (WASM) module using Vite's revised import API with the '?init' query. The 'init' function asynchronously loads the compiled WASM asset and provides an instance with exported functions, such as 'test'. To use this, ensure you have a compatible wasm module and Vite 3 or later. The main parameter is the path to the WASM file, and the output is an instance with accessible WASM exports. This approach avoids future specification conflicts and improves flexibility, but requires the project's build system to be Vite with relevant WASM plugin support.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/blog/announcing-vite3.md#2025-04-22_snippet_5

LANGUAGE: JavaScript
CODE:
```
import init from './example.wasm?init'

init().then((instance) => {
  instance.exports.test()
})
```

----------------------------------------

TITLE: Expanding and Escaping Variables (.env)
DESCRIPTION: Illustrates how dotenv-expand handles variable expansion within .env files. Shows that $variable expands to the value of variable, \$ escapes the dollar sign, and $KEY expands using a previously defined variable KEY.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/env-and-mode.md#_snippet_2

LANGUAGE: .env
CODE:
```
KEY=123
NEW_KEY1=test$foo   # test
NEW_KEY2=test\$foo  # test$foo
NEW_KEY3=test$KEY   # test123
```

----------------------------------------

TITLE: Loading Vite Configuration from a File in TypeScript
DESCRIPTION: Manually loads a Vite configuration file using esbuild. It processes configuration details, allowing direct manipulation or inspection by developers.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-javascript.md#2025-04-22_snippet_7

LANGUAGE: TypeScript
CODE:
```
async function loadConfigFromFile(
  configEnv: ConfigEnv,
  configFile?: string,
  configRoot: string = process.cwd(),
  logLevel?: LogLevel,
  customLogger?: Logger,
): Promise<{
  path: string
  config: UserConfig
  dependencies: string[]
} | null>
```

----------------------------------------

TITLE: Firebase Project Configuration
DESCRIPTION: Firebase project configuration file (.firebaserc) that specifies which Firebase project to use for deployment.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/static-deploy.md#2025-04-22_snippet_10

LANGUAGE: js
CODE:
```
{
  "projects": {
    "default": "<YOUR_FIREBASE_ID>"
  }
}
```

----------------------------------------

TITLE: Importing Asset as String in JavaScript
DESCRIPTION: Demonstrates how to import an asset as a string using the ?raw suffix, which is useful for importing text-based assets like shaders.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/assets.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import shaderString from './shader.glsl?raw'
```

----------------------------------------

TITLE: Configuring Future Deprecation Warnings in Vite
DESCRIPTION: Configuration options to enable warning messages for deprecated server methods that will be removed in Vite v7.0. Sets warnings for server.moduleGraph and server.transformRequest usage.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/changes/per-environment-apis.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
future: {
  removeServerModuleGraph: 'warn',
  removeServerTransformRequest: 'warn',
}
```

----------------------------------------

TITLE: Accessing Environment in Server Code
DESCRIPTION: Demonstrates how to access the SSR environment from the server context.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-runtimes.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
const ssrEnvironment = server.environments.ssr
```

----------------------------------------

TITLE: Setting SSR Build Target in Vite
DESCRIPTION: Specifies the build target for the SSR server. Can be either 'node' or 'webworker'. Defaults to 'node'.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/ssr-options.md#2025-04-22_snippet_2

LANGUAGE: markdown
CODE:
```
## ssr.target

- **Type:** `'node' | 'webworker'`
- **Default:** `node`
```

----------------------------------------

TITLE: Explicit URL Import for Paint Worklet in JavaScript
DESCRIPTION: Demonstrates how to explicitly import a file as a URL using the ?url suffix, which is useful for importing special assets like Houdini Paint Worklets.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/assets.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import workletURL from 'extra-scalloped-border/worklet.js?url'
CSS.paintWorklet.addModule(workletURL)
```

----------------------------------------

TITLE: Importing Inlined Web Worker in JavaScript
DESCRIPTION: Shows how to import a web worker that will be inlined as a base64 string using both the ?worker and ?inline suffixes.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/assets.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
import InlineWorker from './shader.js?worker&inline'
```

----------------------------------------

TITLE: Building with explicit NODE_ENV=development in Vite
DESCRIPTION: This command executes the Vite build process while explicitly setting the `NODE_ENV` environment variable to "development" at the command line level. Although `NODE_ENV` is "development", the Vite mode defaults to "production" for the build command unless explicitly specified. Setting `NODE_ENV` this way allows Vite config files to read `process.env.NODE_ENV` early.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/env-and-mode.md#_snippet_13

LANGUAGE: Shell
CODE:
```
NODE_ENV=development vite build
```

----------------------------------------

TITLE: Writing Browser-Based Playwright Tests in Vitest - JavaScript
DESCRIPTION: This snippet demonstrates a basic asynchronous Vitest test that uses Playwright's page object (imported from ~utils) to check the text content of an element in the DOM. Dependencies: Vitest for the test runner, Playwright for browser automation, and test utilities provided by the Vite playground/test-utils.ts file. The test expects the .foo element to have text 'foo', and showcases the use of the expect API and async/await. Inputs: DOM rendered in the test environment. Outputs: Passes or fails based on DOM content.
SOURCE: https://github.com/vitejs/vite/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
import { page } from '~utils'

test('should work', async () => {
  expect(await page.textContent('.foo')).toMatch('foo')
})
```

----------------------------------------

TITLE: Scaffolding a Vite App using PNPM
DESCRIPTION: This command uses pnpm to execute the `create-vite` package, which interactively scaffolds a new Vite project. It allows users to choose a framework and variant to set up a basic development environment for testing Vite or starting a new application.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/blog/announcing-vite6.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
pnpm create vite
```

----------------------------------------

TITLE: Using perEnvironmentPlugin Helper (JavaScript)
DESCRIPTION: Demonstrates the use of the perEnvironmentPlugin helper to simplify creating per-environment plugins. This example creates a new instance of a non-shareable plugin for each environment.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-plugins.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
import { nonShareablePlugin } from 'non-shareable-plugin'

export default defineConfig({
  plugins: [
    perEnvironmentPlugin('per-environment-plugin', (environment) =>
      nonShareablePlugin({ outputName: environment.name }),
    ),
  ],
})
```

----------------------------------------

TITLE: Creating a Vite Plugin for Virtual Index HTML (TypeScript)
DESCRIPTION: This Vite plugin demonstrates how to create a virtual module (`virtual:index-html`) that loads and transforms the `index.html` file. It handles both development (using `server.transformIndexHtml`) and build environments, reading the file content and exporting it as a string.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-frameworks.md#_snippet_5

LANGUAGE: typescript
CODE:
```
function vitePluginVirtualIndexHtml(): Plugin {
  let server: ViteDevServer | undefined
  return {
    name: vitePluginVirtualIndexHtml.name,
    configureServer(server_) {
      server = server_
    },
    resolveId(source) {
      return source === 'virtual:index-html' ? '\0' + source : undefined
    },
    async load(id) {
      if (id === '\0' + 'virtual:index-html') {
        let html: string
        if (server) {
          this.addWatchFile('index.html')
          html = fs.readFileSync('index.html', 'utf-8')
          html = await server.transformIndexHtml('/', html)
        } else {
          html = fs.readFileSync('dist/client/index.html', 'utf-8')
        }
        return `export default ${JSON.stringify(html)}`
      }
      return
    },
  }
}
```

----------------------------------------

TITLE: Vercel CLI Installation and Project Setup
DESCRIPTION: Commands to install Vercel CLI globally and initialize a new Vite project for deployment to Vercel.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/static-deploy.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
$ npm i -g vercel
$ vercel init vite
Vercel CLI
> Success! Initialized "vite" example in ~/your-folder.
- To deploy, `cd vite` and run `vercel`.
```

----------------------------------------

TITLE: Trace Vite CJS Usage (Bash)
DESCRIPTION: Runs the Vite development server with tracing enabled for CJS module usage. Use this to identify where the deprecated CJS Node API is being imported.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/troubleshooting.md#_snippet_0

LANGUAGE: bash
CODE:
```
VITE_CJS_TRACE=true vite dev
```

----------------------------------------

TITLE: Custom Logger Filtering in Vite Configuration - TypeScript
DESCRIPTION: This snippet customizes Vite's logging behavior using the createLogger API; it overrides the warn method to suppress warnings about empty CSS files. The config is returned via defineConfig. Inputs include warning messages; output is filtered console logging. Requires Vite's TypeScript types and APIs.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/shared-options.md#2025-04-22_snippet_8

LANGUAGE: ts
CODE:
```
import { createLogger, defineConfig } from 'vite'

const logger = createLogger()
const loggerWarn = logger.warn

logger.warn = (msg, options) => {
  // Ignore empty CSS files warning
  if (msg.includes('vite:css') && msg.includes(' is empty')) return
  loggerWarn(msg, options)
}

export default defineConfig({
  customLogger: logger,
})
```

----------------------------------------

TITLE: Defining UserConfig Interface in TypeScript
DESCRIPTION: TypeScript interface definition for UserConfig, extending EnvironmentOptions and including the new 'environments' configuration option.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
interface UserConfig extends EnvironmentOptions {
  environments: Record<string, EnvironmentOptions>
  // other options
}
```

----------------------------------------

TITLE: Visualizing the Forked Deadlock Loop (Text Diagram)
DESCRIPTION: This diagram visually represents the circular wait condition forming the deadlock. Module [X] waits for [Y], which waits for [A], which waits for [B], which in turn waits for [X], completing the cycle. This visualization helps understand the chain of dependencies leading to the deadlock.
SOURCE: https://github.com/vitejs/vite/blob/main/playground/ssr/src/forked-deadlock/README.md#2025-04-22_snippet_1

LANGUAGE: text
CODE:
```
[X] is waiting for [Y] to resolve
 ↑                  ↳ is waiting for [A] to resolve
 │                                    ↳ is waiting for [B] to resolve
 │                                                      ↳ is waiting for [X] to resolve
 └────────────────────────────────────────────────────────────────────────┘
```

----------------------------------------

TITLE: Custom Hot Module Replacement Handling in Vite with JavaScript
DESCRIPTION: This code snippet shows how to implement custom HMR (Hot Module Replacement) handling using the `handleHotUpdate` hook within a Vite plugin. The hook allows filtering and modifying affected modules or performing a full reload by sending specific messages to the client. The provided code demonstrates both module invalidation and custom event handling strategies.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-plugin.md#2025-04-22_snippet_10

LANGUAGE: TypeScript
CODE:
```
interface HmrContext {
  file: string
  timestamp: number
  modules: Array<ModuleNode>
  read: () => string | Promise<string>
  server: ViteDevServer
}
```

LANGUAGE: JavaScript
CODE:
```
handleHotUpdate({ server, modules, timestamp }) {
  // Invalidate modules manually
  const invalidatedModules = new Set()
  for (const mod of modules) {
    server.moduleGraph.invalidateModule(
      mod,
      invalidatedModules,
      timestamp,
      true
    )
  }
  server.ws.send({ type: 'full-reload' })
  return []
}
```

LANGUAGE: JavaScript
CODE:
```
handleHotUpdate({ server }) {
  server.ws.send({
    type: 'custom',
    event: 'special-update',
    data: {}
  })
  return []
}
```

LANGUAGE: JavaScript
CODE:
```
if (import.meta.hot) {
  import.meta.hot.on('special-update', (data) => {
    // perform custom update
  })
}
```

----------------------------------------

TITLE: Creating a Basic SSR Handler
DESCRIPTION: Defines a function createHandler that takes an input and returns a request handler function. The returned handler function takes a request (req) and returns a simple Response object with the text "hello".
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-frameworks.md#_snippet_9

LANGUAGE: javascript
CODE:
```
export function createHandler(input) {
  return function handler(req) {
    return new Response('hello')
  }
}
```

----------------------------------------

TITLE: Testing Asset Import and DOM Manipulation in Vitest - JavaScript
DESCRIPTION: This Vitest test asserts that importing an SVG as raw text and writing it to the page results in the DOM containing the expected 'SVG' substring. It uses async/await to retrieve the text content of a .raw element as setup in the HTML, integrating Playwright to interface with the browser. Dependencies: Vitest, Playwright, and a properly set up test scenario. Inputs: Rendered environment with injected SVG contents. Outputs: Test passes if injection succeeded.
SOURCE: https://github.com/vitejs/vite/blob/main/CONTRIBUTING.md#2025-04-22_snippet_6

LANGUAGE: js
CODE:
```
test('?raw import', async () => {
  expect(await page.textContent('.raw')).toMatch('SVG')
})
```

----------------------------------------

TITLE: Implementing Shared Plugin During Build (JavaScript)
DESCRIPTION: Shows how to implement a shared plugin that maintains state across all environments during both dev and build. This example uses the sharedDuringBuild flag to opt-in to sharing.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-plugins.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
function myPlugin() {
  // Share state among all environments in dev and build
  const sharedState = ...
  return {
    name: 'shared-plugin',
    transform(code, id) { ... },

    // Opt-in into a single instance for all environments
    sharedDuringBuild: true,
  }
}
```

----------------------------------------

TITLE: Defining EnvironmentOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for EnvironmentOptions, showing the structure of environment-specific configuration options in Vite.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
interface EnvironmentOptions {
  define?: Record<string, any>
  resolve?: EnvironmentResolveOptions
  optimizeDeps: DepOptimizationOptions
  consumer?: 'client' | 'server'
  dev: DevOptions
  build: BuildOptions
}
```

----------------------------------------

TITLE: Implementing an Environment-Aware Plugin Counter Using Vite Helper in JavaScript
DESCRIPTION: This snippet demonstrates the use of Vite's 'perEnvironmentState' helper to simplify the implementation of an environment-aware plugin. It provides a more concise way to manage state across different environments.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/changes/shared-plugins-during-build.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
function PerEnvironmentCountTransformedModulesPlugin() {
  const state = perEnvironmentState<{ count: number }>(() => ({ count: 0 }))
  return {
    name: 'count-transformed-modules',
    perEnvironmentStartEndDuringDev: true,
    buildStart() {
      state(this).count = 0
    }
    transform(id) {
      state(this).count++
    },
    buildEnd() {
      console.log(this.environment.name, state(this).count)
    }
  }
}
```

----------------------------------------

TITLE: Detecting Rolldown Using Vite Package Export - JavaScript
DESCRIPTION: This snippet demonstrates detecting the `rolldown-vite` environment by checking for the `rolldownVersion` export directly on the imported `vite` object. This method is useful when `vite` is a dependency (not just a peer dependency) and detection is needed outside of plugin hooks.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/rolldown.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
import * as vite from 'vite'

if (vite.rolldownVersion) {
  // logic for rolldown-vite
} else {
  // logic for rollup-vite
}
```

----------------------------------------

TITLE: Structuring the Vite Landing Page with Vue Components
DESCRIPTION: This HTML structure defines the layout of the Vite landing page. It uses the imported Vue components to create a structured page with multiple sections, including feature sections with different themes and content.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/index.md#2025-04-22_snippet_1

LANGUAGE: vue
CODE:
```
<div class="VPHome">
  <Hero/>
  <FeatureSection title="Redefining developer experience" description="Vite makes web development simple again" type="blue">
    <FeatureInstantServerStart />
    <FeatureHMR />
    <FeatureRichFeatures />
    <FeatureOptimizedBuild />
  </FeatureSection>
  <FeatureSection title="A shared foundation to build upon" type="pink" class="feature-section--flip">
    <FeatureFlexiblePlugins />
    <FeatureTypedAPI />
    <FeatureSSRSupport />
    <FeatureCI />
  </FeatureSection>
  <FrameworksSection />
  <CommunitySection />
  <SponsorSection />
  <GetStartedSection />
</div>
```

----------------------------------------

TITLE: Implementing a Basic Plugin Counter in JavaScript
DESCRIPTION: This snippet demonstrates a simple Vite plugin that counts the number of transformed modules across all environments. It initializes a counter, increments it during transformation, and logs the total at the end of the build.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/changes/shared-plugins-during-build.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
function CountTransformedModulesPlugin() {
  let transformedModules
  return {
    name: 'count-transformed-modules',
    buildStart() {
      transformedModules = 0
    },
    transform(id) {
      transformedModules++
    },
    buildEnd() {
      console.log(transformedModules)
    },
  }
}
```

----------------------------------------

TITLE: Preprocessing CSS Files in TypeScript
DESCRIPTION: Pre-processes various CSS file types into plain CSS. This step is needed before using in browsers or further parsing by tools. The pre-processor is chosen based on the file extension, supporting formats like '.scss', '.less', etc.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-javascript.md#2025-04-22_snippet_8

LANGUAGE: TypeScript
CODE:
```
async function preprocessCSS(
  code: string,
  filename: string,
  config: ResolvedConfig,
): Promise<PreprocessCSSResult>

interface PreprocessCSSResult {
  code: string
  map?: SourceMapInput
  modules?: Record<string, string>
  deps?: Set<string>
}
```

----------------------------------------

TITLE: Displaying Import Stack for Module [B] (Text)
DESCRIPTION: This snippet presents the import stack for module [B]. It shows that [B] was imported by [A], which was imported by [H]. This stack, particularly the presence of [H], is key to identifying the potential deadlock when [B] waits for [X].
SOURCE: https://github.com/vitejs/vite/blob/main/playground/ssr/src/forked-deadlock/README.md#2025-04-22_snippet_5

LANGUAGE: text
CODE:
```
[B] stack:
	[A]
	[H]
```

----------------------------------------

TITLE: Profile Vite Build Process (Bash)
DESCRIPTION: This command triggers the Vite build process with Node.js inspector profiling enabled. The --profile flag allows for capturing CPU performance data during the build, which can help identify performance bottlenecks in the build tooling itself.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/troubleshooting.md#_snippet_14

LANGUAGE: bash
CODE:
```
vite build --profile
```

----------------------------------------

TITLE: Configure Node.js DNS Resolution Order in Vite
DESCRIPTION: This snippet demonstrates how to configure Node.js to use the 'verbatim' DNS result order. This is useful in Vite development when using 'localhost' on Node.js versions prior to v17 to prevent DNS reordering issues that might cause browsers to resolve 'localhost' to a different address than the one Vite is listening on.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/server-options.md#_snippet_0

LANGUAGE: js
CODE:
```
import { defineConfig } from 'vite'
import dns from 'node:dns'

dns.setDefaultResultOrder('verbatim')

export default defineConfig({
  // omit
})
```

----------------------------------------

TITLE: Self-Accepting Module with HMR in JavaScript
DESCRIPTION: This example shows how to create a self-accepting module using import.meta.hot.accept with a callback that receives the updated module.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-hmr.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
export const count = 1

if (import.meta.hot) {
  import.meta.hot.accept((newModule) => {
    if (newModule) {
      // newModule is undefined when SyntaxError happened
      console.log('updated: count is now ', newModule.count)
    }
  })
}
```

----------------------------------------

TITLE: Awaiting SSR Response in Dev
DESCRIPTION: Waits for a specific SSR response event ('response') from the ssrEnvironment instance. It deserializes the received data and resolves the promise when the uniqueId matches, returning the response payload (data.res).
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-frameworks.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const response = await new Promise((resolve) => {
  ssrEnvironment.on('response', (data) => {
    data = deserialize(data)
    if (data.uniqueId === uniqueId) {
      resolve(data.res)
    }
  })
})
```

----------------------------------------

TITLE: Setting SSR External Resolve Conditions in Vite
DESCRIPTION: Specifies conditions used during SSR import of externalized direct dependencies. Requires matching Node --conditions flag for consistent behavior in dev and build.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/ssr-options.md#2025-04-22_snippet_4

LANGUAGE: markdown
CODE:
```
## ssr.resolve.externalConditions

- **Type:** `string[]`
- **Default:** `['node']`
```

----------------------------------------

TITLE: Migration Example: Custom HMR Events
DESCRIPTION: Example showing how to migrate from handleHotUpdate to hotUpdate when sending custom events to the client. The key change is using this.environment.hot.send instead of server.ws.send to send custom events.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/changes/hotupdate-hook.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
handleHotUpdate({ server }) {
  server.ws.send({
    type: 'custom',
    event: 'special-update',
    data: {}
  })
  return []
}

// Migrate to...

hotUpdate() {
  this.environment.hot.send({
    type: 'custom',
    event: 'special-update',
    data: {}
  })
  return []
}
```

----------------------------------------

TITLE: VS Code Debug Configuration for Vite Config
DESCRIPTION: VS Code settings to enable breakpoint debugging in the Vite config file by resolving source map locations.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/index.md#2025-04-22_snippet_8

LANGUAGE: json
CODE:
```
{
  "debug.javascript.terminalOptions": {
    "resolveSourceMapLocations": [
      "${workspaceFolder}/**",
      "!**/node_modules/**",
      "**/node_modules/.vite-temp/**"
    ]
  }
}
```

----------------------------------------

TITLE: Using Environment Factory in Vite Config
DESCRIPTION: Shows how to use the workerd environment factory in a Vite configuration file to set up SSR and RSC environments.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-runtimes.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { createWorkerdEnvironment } from 'vite-environment-workerd'

export default {
  environments: {
    ssr: createWorkerdEnvironment({
      build: {
        outDir: '/dist/ssr',
      },
    }),
    rsc: createWorkerdEnvironment({
      build: {
        outDir: '/dist/rsc',
      },
    }),
  },
}
```

----------------------------------------

TITLE: Implementing Full Reload in HotUpdate Hook (JavaScript)
DESCRIPTION: Demonstrates how to implement a full reload in the hotUpdate hook for the client environment. This snippet invalidates modules and sends a full-reload event.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-plugins.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
hotUpdate({ modules, timestamp }) {
  if (this.environment.name !== 'client')
    return

  // Invalidate modules manually
  const invalidatedModules = new Set()
  for (const mod of modules) {
    this.environment.moduleGraph.invalidateModule(
      mod,
      invalidatedModules,
      timestamp,
      true
    )
  }
  this.environment.hot.send({ type: 'full-reload' })
  return []
}
```

----------------------------------------

TITLE: Registering Custom HMR Handler in Client Code (JavaScript)
DESCRIPTION: Demonstrates how to register a custom HMR handler in client-side code using the HMR API. This snippet listens for the 'special-update' event.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-plugins.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
if (import.meta.hot) {
  import.meta.hot.on('special-update', (data) => {
    // perform custom update
  })
}
```

----------------------------------------

TITLE: Migration Example: Filtering Modules for HMR
DESCRIPTION: Example showing how to migrate from handleHotUpdate to hotUpdate when filtering affected modules. The basic pattern remains the same, but the context of the modules changes to be environment-specific.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/changes/hotupdate-hook.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
handleHotUpdate({ modules }) {
  return modules.filter(condition)
}

// Migrate to:

hotUpdate({ modules }) {
  return modules.filter(condition)
}
```

----------------------------------------

TITLE: Transforming Code with Esbuild in TypeScript
DESCRIPTION: Transforms JavaScript or TypeScript code using esbuild. This function helps plugins align with Vite's internal transformations, enhancing consistency across tools.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-javascript.md#2025-04-22_snippet_6

LANGUAGE: TypeScript
CODE:
```
async function transformWithEsbuild(
  code: string,
  filename: string,
  options?: EsbuildTransformOptions,
  inMap?: object,
): Promise<ESBuildTransformResult>
```

----------------------------------------

TITLE: Increase Inotify User Watches (Shell)
DESCRIPTION: Temporarily increases the maximum number of files a user can watch using inotify. This command requires superuser privileges. Increasing this limit is often necessary for large projects.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/troubleshooting.md#_snippet_7

LANGUAGE: shell
CODE:
```
sudo sysctl fs.inotify.max_user_watches=524288
```

----------------------------------------

TITLE: Check File Descriptor Limit (Shell)
DESCRIPTION: Checks the current soft limit for the number of open file descriptors allowed for the current user's processes. Useful for diagnosing "Requests are stalled forever" issues on Linux.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/troubleshooting.md#_snippet_2

LANGUAGE: shell
CODE:
```
ulimit -Sn
```

----------------------------------------

TITLE: Referencing Future Options in Vite Config
DESCRIPTION: This snippet demonstrates how to reference the 'future' option in the Vite configuration file. The 'future' option is used to opt-in to breaking changes.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/changes/index.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
[`future` option](/config/shared-options.html#future)
```

----------------------------------------

TITLE: Receiving Server Messages in Client-Side Code
DESCRIPTION: Shows how to listen for custom events sent from the server in client-side code using the Hot Module Replacement API.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-plugin.md#2025-04-22_snippet_14

LANGUAGE: typescript
CODE:
```
// client side
if (import.meta.hot) {
  import.meta.hot.on('my:greetings', (data) => {
    console.log(data.msg) // hello
  })
}
```

----------------------------------------

TITLE: Increase Inotify Queued Events (Shell)
DESCRIPTION: Temporarily increases the maximum number of queued inotify events allowed. This command requires superuser privileges. It can help prevent file watching issues.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/troubleshooting.md#_snippet_5

LANGUAGE: shell
CODE:
```
sudo sysctl fs.inotify.max_queued_events=16384
```

----------------------------------------

TITLE: Commit Reference Formatting in Markdown
DESCRIPTION: Example of how commit references and issue links are formatted in the changelog using Markdown.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/CHANGELOG.md#2025-04-22_snippet_2

LANGUAGE: markdown
CODE:
```
* chore: enable prettier trailing commas (#11167) ([134ce68](https://github.com/vitejs/vite/commit/134ce6817984bad0f5fb043481502531fee9b1db)), closes [#11167](https://github.com/vitejs/vite/issues/11167)
```

----------------------------------------

TITLE: Creating Custom Dev Environment
DESCRIPTION: Example of creating a custom development environment with hot reload transport implementation.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-runtimes.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
function createWorkerdDevEnvironment(
  name: string,
  config: ResolvedConfig,
  context: DevEnvironmentContext
) {
  const connection = /* ... */
  const transport: HotChannel = {
    on: (listener) => { connection.on('message', listener) },
    send: (data) => connection.send(data),
  }

  const workerdDevEnvironment = new DevEnvironment(name, config, {
    options: {
      resolve: { conditions: ['custom'] },
      ...context.options,
    },
    hot: true,
    transport,
  })
  return workerdDevEnvironment
}
```

----------------------------------------

TITLE: Lightning CSS Configuration Type Imports for Vite - JavaScript
DESCRIPTION: This snippet imports type definitions (such as CSSModulesConfig, Features, etc.) from the lightningcss package for TypeScript type safety in Lightning CSS configuration. Requires Vite and lightningcss as dependencies; used to ensure correct configuration shapes in Lightning CSS integration with Vite. This block is purely for typing and not runtime code.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/shared-options.md#2025-04-22_snippet_10

LANGUAGE: js
CODE:
```
import type {
  CSSModulesConfig,
  Drafts,
  Features,
  NonStandard,
  PseudoClasses,
  Targets,
} from 'lightningcss'
```

----------------------------------------

TITLE: Building and Linking Vite Locally
DESCRIPTION: Alternatively, clone the Vite repository, build it locally using pnpm, and then link it globally to your system. Finally, link the global package into your project to use the local build.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/index.md#_snippet_8

LANGUAGE: bash
CODE:
```
git clone https://github.com/vitejs/vite.git
cd vite
pnpm install
cd packages/vite
pnpm run build
pnpm link --global # use your preferred package manager for this step
```

----------------------------------------

TITLE: Worker Rollup Options Type Reference
DESCRIPTION: Type reference to Rollup configuration options for building worker bundles, linking to the full Rollup options documentation.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/worker-options.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
RollupOptions
```

----------------------------------------

TITLE: Adapting Non-Shareable Plugin for Per-Environment Use (JavaScript)
DESCRIPTION: Illustrates how to adapt a non-shareable plugin for per-environment use using the applyToEnvironment hook. This example creates a new instance of the plugin for each environment.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-plugins.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
import { nonShareablePlugin } from 'non-shareable-plugin'

export default defineConfig({
  plugins: [
    {
      name: 'per-environment-plugin',
      applyToEnvironment(environment) {
        return nonShareablePlugin({ outputName: environment.name })
      },
    },
  ],
})
```

----------------------------------------

TITLE: Configuring Custom Environment Instances in Vite
DESCRIPTION: Example of using a custom environment provider to configure a specific environment (SSR in this case) with custom build options.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { customEnvironment } from 'vite-environment-provider'

export default {
  build: {
    outDir: '/dist/client',
  },
  environments: {
    ssr: customEnvironment({
      build: {
        outDir: '/dist/ssr',
      },
    }),
  },
}
```

----------------------------------------

TITLE: Using TypeScript Type Inference for Custom Events
DESCRIPTION: Demonstrates how to use TypeScript type inference for custom event payloads in Vite HMR API.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-plugin.md#2025-04-22_snippet_18

LANGUAGE: typescript
CODE:
```
type CustomFooPayload = InferCustomEventPayload<'custom:foo'>
import.meta.hot?.on('custom:foo', (payload) => {
  // The type of payload will be { msg: string }
})
import.meta.hot?.on('unknown:event', (payload) => {
  // The type of payload will be any
})
```

----------------------------------------

TITLE: Configuring Environment in ConfigEnvironment Hook (TypeScript)
DESCRIPTION: Illustrates how to configure a specific environment using the configEnvironment hook. This example sets resolve conditions for the 'rsc' environment.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-plugins.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
configEnvironment(name: string, options: EnvironmentOptions) {
  if (name === 'rsc') {
    options.resolve.conditions = // ...

```

----------------------------------------

TITLE: Attaching Custom Queries to import.meta.glob
DESCRIPTION: Demonstrates how to pass custom queries to import.meta.glob, allowing for the attachment of metadata to glob imports.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/blog/announcing-vite3.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import.meta.glob('./dir/*.js', { query: { custom: 'data' } })
```

----------------------------------------

TITLE: Implementing Per-Environment Plugin (JavaScript)
DESCRIPTION: Shows how to implement a per-environment plugin using the applyToEnvironment function. This example demonstrates initializing per-environment state and applying the plugin selectively.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-plugins.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
const UnoCssPlugin = () => {
  // shared global state
  return {
    buildStart() {
      // init per-environment state with WeakMap<Environment,Data>
      // using this.environment
    },
    configureServer() {
      // use global hooks normally
    },
    applyToEnvironment(environment) {
      // return true if this plugin should be active in this environment,
      // or return a new plugin to replace it.
      // if the hook is not used, the plugin is active in all environments
    },
    resolveId(id, importer) {
      // only called for environments this plugin apply to
    },
  }
}
```

----------------------------------------

TITLE: Sending Messages from Client to Server in Vite
DESCRIPTION: Demonstrates how to send events from the client to the server using the HMR API.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-plugin.md#2025-04-22_snippet_15

LANGUAGE: typescript
CODE:
```
// client side
if (import.meta.hot) {
  import.meta.hot.send('my:from-client', { msg: 'Hey!' })
}
```

----------------------------------------

TITLE: TypeScript Interface for HmrContext in handleHotUpdate Hook
DESCRIPTION: TypeScript interface that defines the structure of the HmrContext object passed to the handleHotUpdate hook, which includes information about the changed file, timestamp, affected modules, a read function, and the ViteDevServer instance.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/changes/hotupdate-hook.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
interface HmrContext {
  file: string
  timestamp: number
  modules: Array<ModuleNode>
  read: () => string | Promise<string>
  server: ViteDevServer
}
```

----------------------------------------

TITLE: Normalizing Paths in TypeScript
DESCRIPTION: This function normalizes file paths so they can be used smoothly across different Vite plugins, ensuring compatibility.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-javascript.md#2025-04-22_snippet_5

LANGUAGE: TypeScript
CODE:
```
function normalizePath(id: string): string
```

----------------------------------------

TITLE: Configuring Git Blame to Ignore Formatting Revisions
DESCRIPTION: Command to configure git to ignore formatting changes when using git blame by using the .git-blame-ignore-revs file.
SOURCE: https://github.com/vitejs/vite/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
git config --local blame.ignoreRevsFile .git-blame-ignore-revs
```

----------------------------------------

TITLE: Importing Script as Shared Worker in JavaScript
DESCRIPTION: Demonstrates how to import a script as a shared worker using the ?sharedworker suffix.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/assets.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
import SharedWorker from './shader.js?sharedworker'
const sharedWorker = new SharedWorker()
```

----------------------------------------

TITLE: Version Header Formatting in Markdown
DESCRIPTION: Example of version header formatting using Markdown syntax for the changelog.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/CHANGELOG.md#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
## 4.0.0-beta.0 (2022-12-07)
```

----------------------------------------

TITLE: Importing Module Preload Polyfill in JavaScript
DESCRIPTION: This snippet shows how to manually import the module preload polyfill in a custom entry point when not using HTML entries.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/build-options.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import 'vite/modulepreload-polyfill'
```

----------------------------------------

TITLE: EnvironmentModuleNode Class in TypeScript
DESCRIPTION: Defines the EnvironmentModuleNode class representing a module in the environment's module graph. It includes properties for module identification, imports, exports, and HMR-related information.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-instances.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
class EnvironmentModuleNode {
  environment: string

  url: string
  id: string | null = null
  file: string | null = null

  type: 'js' | 'css'

  importers = new Set<EnvironmentModuleNode>()
  importedModules = new Set<EnvironmentModuleNode>()
  importedBindings: Map<string, Set<string>> | null = null

  info?: ModuleInfo
  meta?: Record<string, any>
  transformResult: TransformResult | null = null

  acceptedHmrDeps = new Set<EnvironmentModuleNode>()
  acceptedHmrExports: Set<string> | null = null
  isSelfAccepting?: boolean
  lastHMRTimestamp = 0
  lastInvalidationTimestamp = 0
}
```

----------------------------------------

TITLE: Configuring Module Preload Dependencies Resolution in Vite
DESCRIPTION: This configuration example demonstrates how to use the experimental resolveDependencies function to control module preloading behavior in Vite.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/build-options.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
/** @type {import('vite').UserConfig} */
const config = {
  // prettier-ignore
  build: {
modulePreload: {
  resolveDependencies: (filename, deps, { hostId, hostType }) => {
    return deps.filter(condition)
  },
},
  },
}
```

----------------------------------------

TITLE: Check Inotify Limits (Shell)
DESCRIPTION: Displays the current kernel limits for inotify, including queued events, user instances, and user watches. These limits can affect Vite's ability to watch files for changes on Linux.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/troubleshooting.md#_snippet_4

LANGUAGE: shell
CODE:
```
sysctl fs.inotify
```

----------------------------------------

TITLE: Using renderBuiltUrl for Runtime Asset URL Generation in TypeScript
DESCRIPTION: Demonstrates the experimental `experimental.renderBuiltUrl` Vite configuration option in TypeScript (`vite.config.ts`). This function customizes how asset URLs are rendered in the built output based on context. For JavaScript files (`hostType === 'js'`), it returns an object with a `runtime` property containing JavaScript code (`window.__toCdnUrl(...)`) to dynamically determine the URL at runtime. For other asset types, it returns `{ relative: true }` to use relative paths.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/build.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
```ts twoslash
import type { UserConfig } from 'vite'
// prettier-ignore
const config: UserConfig = {
// ---cut-before---
experimental: {
  renderBuiltUrl(filename, { hostType }) {
    if (hostType === 'js') {
      return { runtime: `window.__toCdnUrl(${JSON.stringify(filename)})` }
    } else {
      return { relative: true }
    }
  },
},
// ---cut-after---
}
```
```

----------------------------------------

TITLE: Using Path Normalization in Vite
DESCRIPTION: Demonstrates how to use Vite's path normalization utility to convert Windows-style paths to POSIX format.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-plugin.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
import { normalizePath } from 'vite'

normalizePath('foo\\bar') // 'foo/bar'
normalizePath('foo/bar') // 'foo/bar'
```

----------------------------------------

TITLE: Registering New Environment in Config Hook (TypeScript)
DESCRIPTION: Shows how to register a new environment (e.g., RSC) in a plugin's config hook. This snippet adds an 'rsc' environment if it doesn't already exist.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-plugins.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
config(config: UserConfig) {
  config.environments.rsc ??= {}
}
```

----------------------------------------

TITLE: Creating Environment Factory in TypeScript
DESCRIPTION: Example of creating a workerd environment factory that configures dev and build environments with custom hot reloading.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-runtimes.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
function createWorkerdEnvironment(
  userConfig: EnvironmentOptions,
): EnvironmentOptions {
  return mergeConfig(
    {
      resolve: {
        conditions: [
          /*...*/
        ],
      },
      dev: {
        createEnvironment(name, config) {
          return createWorkerdDevEnvironment(name, config, {
            hot: true,
            transport: customHotChannel(),
          })
        },
      },
      build: {
        createEnvironment(name, config) {
          return createWorkerdBuildEnvironment(name, config)
        },
      },
    },
    userConfig,
  )
}
```

----------------------------------------

TITLE: DevEnvironmentContext Interface in TypeScript
DESCRIPTION: Defines the DevEnvironmentContext interface used in the DevEnvironment class constructor. It includes properties for hot reloading, transport, options, remote runner, and dependencies optimizer.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-instances.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
interface DevEnvironmentContext {
  hot: boolean
  transport?: HotChannel | WebSocketServer
  options?: EnvironmentOptions
  remoteRunner?: {
    inlineSourceMap?: boolean
  }
  depsOptimizer?: DepsOptimizer
}
```

----------------------------------------

TITLE: Worker Plugins Type Definition
DESCRIPTION: Type definition for worker-specific plugins that return either a single plugin or an array of plugins. These plugins are specifically applied to worker bundles during build.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/worker-options.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
() => (Plugin | Plugin[])[]
```

----------------------------------------

TITLE: Customizing Asset URLs Based on Type with renderBuiltUrl in TypeScript
DESCRIPTION: Shows an advanced usage of the experimental `experimental.renderBuiltUrl` option in a TypeScript Vite configuration (`vite.config.ts`). It differentiates URL generation based on the asset `type` and `hostId`. Public files (`type === 'public'`) are prefixed with a static domain. Assets referenced from JavaScript files (`path.extname(hostId) === '.js'`) generate runtime code (`window.__assetsPath(...)`) for dynamic URL resolution. Other assets (like CSS referenced from HTML) are prefixed with a separate CDN URL.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/build.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
```ts twoslash
import type { UserConfig } from 'vite'
import path from 'node:path'
// prettier-ignore
const config: UserConfig = {
// ---cut-before---
experimental: {
  renderBuiltUrl(filename, { hostId, hostType, type }) {
    if (type === 'public') {
      return 'https://www.domain.com/' + filename
    } else if (path.extname(hostId) === '.js') {
      return {
        runtime: `window.__assetsPath(${JSON.stringify(filename)})`
      }
    } else {
      return 'https://cdn.domain.com/assets/' + filename
    }
  },
},
// ---cut-after---
}
```
```

----------------------------------------

TITLE: Enabling Experimental Lightning CSS in Vite (Bash)
DESCRIPTION: This one-line bash command allows installation of Lightning CSS as a devDependency, enabling experimental support for an alternative CSS transformer/minifier in Vite. Requires additional configuration in vite.config.js to activate related options. Input is the npm add command; output is Lightning CSS installed in node_modules.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_11

LANGUAGE: bash
CODE:
```
npm add -D lightningcss
```

----------------------------------------

TITLE: Module Runner Implementation Example
DESCRIPTION: Shows how to create and use a ModuleRunner instance with custom transport and evaluator.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-runtimes.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { ModuleRunner, ESModulesEvaluator } from 'vite/module-runner'
import { transport } from './rpc-implementation.js'

const moduleRunner = new ModuleRunner(
  {
    transport,
  },
  new ESModulesEvaluator(),
)

await moduleRunner.import('/src/entry-point.js')
```

----------------------------------------

TITLE: Network Request Flow in Unoptimized Async Chunk Loading
DESCRIPTION: Illustrates the network request pattern in an unoptimized scenario where async chunk A is imported and the browser must request and parse A before discovering it needs the common chunk C, resulting in an extra network roundtrip.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/features.md#2025-04-22_snippet_22

LANGUAGE: plaintext
CODE:
```
Entry ---> A ---> C
```

----------------------------------------

TITLE: Resolve Vite Dependency via Yarn Resolutions (JSON)
DESCRIPTION: Explains how to use Yarn's `resolutions` feature in `package.json` to force all instances of the `vite` package dependency to resolve to `npm:rolldown-vite@latest`, essential for overriding peer or transitive dependencies in frameworks. Applicable to Yarn classic (v1) and Berry (v2+).
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/rolldown.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "resolutions": {
    "vite": "npm:rolldown-vite@latest"
  }
}
```

----------------------------------------

TITLE: Installing Specific Vite Commits via pkg.pr.new
DESCRIPTION: Install a specific unreleased commit of Vite using the pkg.pr.new service. Replace 'SHA' with the desired commit hash. Note that only recent commits are available.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/index.md#_snippet_7

LANGUAGE: bash
CODE:
```
$ npm install -D https://pkg.pr.new/vite@SHA
```

LANGUAGE: bash
CODE:
```
$ yarn add -D https://pkg.pr.new/vite@SHA
```

LANGUAGE: bash
CODE:
```
$ pnpm add -D https://pkg.pr.new/vite@SHA
```

LANGUAGE: bash
CODE:
```
$ bun add -D https://pkg.pr.new/vite@SHA
```

----------------------------------------

TITLE: Migrating Vite Plugin to Use this.environment API
DESCRIPTION: This snippet demonstrates how to migrate a Vite plugin from using the `options.ssr` argument to the new `this.environment.name` property in the `resolveId` hook. It checks if the current environment is not 'client' to determine if it's an SSR context.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/changes/this-environment-in-hooks.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { Plugin } from 'vite'

export function myPlugin(): Plugin {
  return {
    name: 'my-plugin',
    resolveId(id, importer, options) {
      const isSSR = options.ssr // [!code --]
      const isSSR = this.environment.name !== 'client' // [!code ++]

      if (isSSR) {
        // SSR specific logic
      } else {
        // Client specific logic
      }
    },
  }
}
```

----------------------------------------

TITLE: Override Vite Dependency via pnpm Overrides (JSON)
DESCRIPTION: Provides the pnpm-specific method using `pnpm.overrides` in `package.json` to globally replace the `vite` dependency with `npm:rolldown-vite@latest`, typically used for overriding peer or transitive dependencies in frameworks. Requires pnpm.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/rolldown.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
  "pnpm": {
    "overrides": {
      "vite": "npm:rolldown-vite@latest"
    }
  }
}
```

----------------------------------------

TITLE: Wrap Vite Plugin with withFilter (JavaScript)
DESCRIPTION: Demonstrates using the `withFilter` helper in `vite.config.ts` to apply a Vite plugin (like `vite-plugin-svgr`) only to specific module IDs or conditions, optimizing performance by reducing communication between Rust and JavaScript runtimes. Requires the `withFilter` helper from `rolldown-vite` and the plugin to be wrapped.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/rolldown.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
// In your vite.config.ts
import { withFilter, defineConfig } from 'vite'
import svgr from 'vite-plugin-svgr'

export default defineConfig({
  plugins: [
    // Load the `svgr` plugin only for files which end in `.svg?react`
    withFilter(
      svgr({
        /*...*/
      }),
      { load: { id: /\.svg\?react$/ } },
    ),
  ],
})
```

----------------------------------------

TITLE: Using RunnableDevEnvironment Runner Import (TypeScript)
DESCRIPTION: Shows the structure of `RunnableDevEnvironment` and its `ModuleRunner`. It includes an example of how to check if an environment is runnable using `isRunnableDevEnvironment` and then use the `runner.import` method to load a module, similar to `ssrLoadModule`.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-frameworks.md#_snippet_0

LANGUAGE: ts
CODE:
```
export class RunnableDevEnvironment extends DevEnvironment {
  public readonly runner: ModuleRunner
}

class ModuleRunner {
  /**
   * URL to execute.
   * Accepts file path, server path, or id relative to the root.
   * Returns an instantiated module (same as in ssrLoadModule)
   */
  public async import(url: string): Promise<Record<string, any>>
  /**
   * Other ModuleRunner methods...
   */
}

if (isRunnableDevEnvironment(server.environments.ssr)) {
  await server.environments.ssr.runner.import('/entry-point.js')
}
```

----------------------------------------

TITLE: Override Vite Dependency via Bun Overrides (JSON)
DESCRIPTION: Illustrates how to use Bun's `overrides` feature in `package.json` to force all resolutions of the `vite` package dependency to point to `npm:rolldown-vite@latest`, commonly used for overriding peer or transitive dependencies in frameworks. Requires Bun.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/rolldown.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "overrides": {
    "vite": "npm:rolldown-vite@latest"
  }
}
```

----------------------------------------

TITLE: Depicting Two-File Cyclic Import with Entry using Mermaid (mermaid)
DESCRIPTION: This Mermaid code snippet presents another cyclic import situation, contrasting two JavaScript modules (dep1.js and dep2.js) that import each other, with a final import into a main module (index.js). The diagram is designed to visualize potential issues from sustained cycles and dependencies in the module graph. Rendering requires Mermaid support; no other runtime dependencies are required. The expected output is a flowchart diagram showing the bidirectional link and the entry path.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/vite/src/node/ssr/runtime/__tests__/fixtures/cyclic2/README.md#2025-04-22_snippet_1

LANGUAGE: mermaid
CODE:
```
flowchart TD\n    A(dep1.js) -->|dep1| B\n    B(dep2.js) -->|dep2| A\n    A -->|dep1| C(index.js)
```

----------------------------------------

TITLE: Demonstrating Reverse Order Variable Expansion (.env)
DESCRIPTION: Shows an example of variable expansion where a variable (VITE_FOO) references another variable (VITE_BAR) defined later in the file. Vite's use of dotenv-expand supports this reverse order expansion, although it is noted as potentially causing interop issues and is not recommended.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/env-and-mode.md#_snippet_3

LANGUAGE: .env
CODE:
```
VITE_FOO=foo${VITE_BAR}
VITE_BAR=bar
```

----------------------------------------

TITLE: Alias Vite to Rolldown-Vite in Dependencies (JSON)
DESCRIPTION: Demonstrates how to directly alias the `vite` package to `npm:rolldown-vite@latest` within the `dependencies` section of `package.json`, enabling package managers supporting this feature to use the experimental Rolldown integration. Requires the `rolldown-vite` package to be available.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/rolldown.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "dependencies": {
    "vite": "^6.0.0", // [!code --]
    "vite": "npm:rolldown-vite@latest" // [!code ++]
  }
}
```

----------------------------------------

TITLE: Displaying Import Stack for Module [A] (Text)
DESCRIPTION: This snippet details the import stack for module [A], indicating it was directly imported by the entry module [H]. Comparing this stack with others helps illustrate the 'forked' import path.
SOURCE: https://github.com/vitejs/vite/blob/main/playground/ssr/src/forked-deadlock/README.md#2025-04-22_snippet_4

LANGUAGE: text
CODE:
```
[A] stack:
	[H]
```

----------------------------------------

TITLE: Configuring a Worker Thread Transport for Module Runner in JavaScript
DESCRIPTION: Implements a ModuleRunnerTransport for Vite using worker threads, where the transport object passes messages between the parent thread and the worker using Node.js worker APIs. Requires 'node:worker_threads', 'node:url', and Vite's module-runner and is used for isolated evaluation or hot-reloading within a process. Handlers are attached for message and close events, and the runner is instantiated using the configured transport and ESModulesEvaluator.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-runtimes.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
import { parentPort } from 'node:worker_threads'\nimport { fileURLToPath } from 'node:url'\nimport { ESModulesEvaluator, ModuleRunner } from 'vite/module-runner'\n\n/** @type {import('vite/module-runner').ModuleRunnerTransport} */\nconst transport = {\n  connect({ onMessage, onDisconnection }) {\n    parentPort.on('message', onMessage)\n    parentPort.on('close', onDisconnection)\n  },\n  send(data) {\n    parentPort.postMessage(data)\n  },\n}\n\nconst runner = new ModuleRunner(\n  {\n    transport,\n  },\n  new ESModulesEvaluator(),\n)
```

----------------------------------------

TITLE: ModuleEvaluator Interface Definition
DESCRIPTION: TypeScript interface definition for custom module evaluators that handle code execution in different contexts.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-runtimes.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
export interface ModuleEvaluator {
  startOffset?: number
  runInlinedModule(
    context: ModuleRunnerContext,
    code: string,
    id: string,
  ): Promise<any>
  runExternalModule(file: string): Promise<any>
}
```

----------------------------------------

TITLE: Defining ModuleRunnerTransport Interface in TypeScript
DESCRIPTION: Defines the interface for transport objects that interact with the Vite module runner, specifying optional asynchronous methods for connecting, disconnecting, sending, or invoking using hot payloads. Requires TypeScript and expects dependencies from 'vite/module-runner'. The primary input/output is the HotPayload object, and certain methods (like send or invoke) must be implemented depending on the intended use, especially for HMR support.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-runtimes.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
import type { ModuleRunnerTransportHandlers } from 'vite/module-runner'\n/** an object */\ntype HotPayload = unknown\n// ---cut---\ninterface ModuleRunnerTransport {\n  connect?(handlers: ModuleRunnerTransportHandlers): Promise<void> | void\n  disconnect?(): Promise<void> | void\n  send?(data: HotPayload): Promise<void> | void\n  invoke?(data: HotPayload): Promise<{ result: any } | { error: any }>\n  timeout?: number\n}
```

----------------------------------------

TITLE: EnvironmentModuleGraph Class in TypeScript
DESCRIPTION: Defines the EnvironmentModuleGraph class representing the module graph for an environment. It includes methods for managing modules, resolving URLs, and handling file changes and invalidations.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-instances.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
export class EnvironmentModuleGraph {
  environment: string

  urlToModuleMap = new Map<string, EnvironmentModuleNode>()
  idToModuleMap = new Map<string, EnvironmentModuleNode>()
  etagToModuleMap = new Map<string, EnvironmentModuleNode>()
  fileToModulesMap = new Map<string, Set<EnvironmentModuleNode>>()

  constructor(
    environment: string,
    resolveId: (url: string) => Promise<PartialResolvedId | null>,
  )

  async getModuleByUrl(
    rawUrl: string,
  ): Promise<EnvironmentModuleNode | undefined>

  getModuleById(id: string): EnvironmentModuleNode | undefined

  getModulesByFile(file: string): Set<EnvironmentModuleNode> | undefined

  onFileChange(file: string): void

  onFileDelete(file: string): void

  invalidateModule(
    mod: EnvironmentModuleNode,
    seen: Set<EnvironmentModuleNode> = new Set(),
    timestamp: number = Date.now(),
    isHmr: boolean = false,
  ): void

  invalidateAll(): void

  async ensureEntryFromUrl(
    rawUrl: string,
    setIsSelfAccepting = true,
  ): Promise<EnvironmentModuleNode>

  createFileOnlyEntry(file: string): EnvironmentModuleNode

  async resolveUrl(url: string): Promise<ResolvedUrl>

  updateModuleTransformResult(
    mod: EnvironmentModuleNode,
    result: TransformResult | null,
  ): void

  getModuleByEtag(etag: string): EnvironmentModuleNode | undefined
}
```

----------------------------------------

TITLE: Configuring VitePress Page with Vue Component for Blog Index
DESCRIPTION: This snippet configures a VitePress page to display the Vite blog posts. It imports and uses the BlogIndex component while disabling standard VitePress features like sidebar, edit links, and outline.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/blog.md#2025-04-22_snippet_0

LANGUAGE: vue
CODE:
```
<script setup>
import BlogIndex from './.vitepress/theme/components/BlogIndex.vue'
</script>

# Latest From the Vite Blog

<BlogIndex/>
```

----------------------------------------

TITLE: TransformResult Interface in TypeScript
DESCRIPTION: Defines the TransformResult interface returned by the transformRequest method. It includes properties for transformed code, source map, etag, and dependencies.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-instances.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
interface TransformResult {
  code: string
  map: SourceMap | { mappings: '' } | null
  etag?: string
  deps?: string[]
  dynamicDeps?: string[]
}
```

----------------------------------------

TITLE: Handling HTTP Invoke Requests on Vite Server in TypeScript
DESCRIPTION: Shows a server handler in Vite that listens for HTTP requests to the '/invoke' endpoint, parses the request body as HotPayload, hands it off to the DevEnvironment's hot channel, and returns the result as a JSON response. Expects a Request object (from Node.js or web framework), and relies on DevEnvironment and its hot.handleInvoke method. For non-invoke paths, a generic error response is returned. This code is intended for environments using the HTTP-based runner transport.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-runtimes.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
const customEnvironment = new DevEnvironment(name, config, context)\n\nserver.onRequest((request: Request) => {\n  const url = new URL(request.url)\n  if (url.pathname === '/invoke') {\n    const payload = (await request.json()) as HotPayload\n    const result = customEnvironment.hot.handleInvoke(payload)\n    return new Response(JSON.stringify(result))\n  }\n  return Response.error()\n})
```

----------------------------------------

TITLE: TypeScript Logger Interface for Vite CustomLogger Option - TypeScript
DESCRIPTION: This code block declares the Logger interface used by Vite for the customLogger configuration option. It defines the shape of the logger object along with all supported logging methods and properties. Intended for advanced users extending or typing custom loggers; no runtime code, only type/interface declaration.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/shared-options.md#2025-04-22_snippet_9

LANGUAGE: ts
CODE:
```
interface Logger {
  info(msg: string, options?: LogOptions): void
  warn(msg: string, options?: LogOptions): void
  warnOnce(msg: string, options?: LogOptions): void
  error(msg: string, options?: LogErrorOptions): void
  clearScreen(type: LogType): void
  hasErrorLogged(error: Error | RollupError): boolean
  hasWarned: boolean
}
```

----------------------------------------

TITLE: Pre-bundling Dependencies with Vite Optimize (Deprecated) - Bash
DESCRIPTION: This code snippet shows how to invoke the (now deprecated) `vite optimize` command to manually pre-bundle dependencies. Pre-bundling is now handled automatically by Vite, so this command is typically unnecessary. Input: optional [root] parameter; Output: pre-bundled dependencies (behavior subject to deprecation, and this feature may be removed in future versions).
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/cli.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
vite optimize [root]
```

----------------------------------------

TITLE: ModuleRunnerOptions Interface Definition
DESCRIPTION: TypeScript interface definition for ModuleRunner configuration options including transport, sourcemap handling, and HMR settings.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-runtimes.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
interface ModuleRunnerOptions {
  transport: ModuleRunnerTransport
  sourcemapInterceptor?: false | 'node' | 'prepareStackTrace' | InterceptorOptions
  hmr?: boolean | ModuleRunnerHmr
  evaluatedModules?: EvaluatedModules
}
```

----------------------------------------

TITLE: Structuring Team Page Layout with Vue and VitePress Components
DESCRIPTION: This HTML template code, part of a Vue component, uses imported VitePress components (`VPTeamPage`, `VPTeamPageTitle`, `VPTeamMembers`, `VPTeamPageSection`) to structure a 'Meet the Team' page. It sets the main title and lead text, displays the core team members by passing the `core` data array to `VPTeamMembers`, and creates a separate section for emeritus members, similarly passing the `emeriti` data array.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/team.md#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<VPTeamPage>
  <VPTeamPageTitle>
    <template #title>Meet the Team</template>
    <template #lead>
      The development of Vite is guided by an international team, some of whom
      have chosen to be featured below.
    </template>
  </VPTeamPageTitle>
  <VPTeamMembers :members="core" />
  <VPTeamPageSection>
    <template #title>Team Emeriti</template>
    <template #lead>
      Here we honor some no-longer-active team members who have made valuable
      contributions in the past.
    </template>
    <template #members>
      <VPTeamMembers size="small" :members="emeriti" />
    </template>
  </VPTeamPageSection>
</VPTeamPage>
```

----------------------------------------

TITLE: Establishing Worker-Based DevEnvironment Communication in Vite using JavaScript
DESCRIPTION: Demonstrates creating an environment in Vite through a DevEnvironment, where communication with a worker is handled via message passing using worker.on and worker.postMessage. A custom hot channel is created for managing event listeners and sending data between server and worker contexts using Node.js BroadcastChannel and worker_threads. The code requires Vite server APIs and manages event subscriptions and clean-up for hot-module reload scenarios.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-runtimes.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
import { BroadcastChannel } from 'node:worker_threads'\nimport { createServer, RemoteEnvironmentTransport, DevEnvironment } from 'vite'\n\nfunction createWorkerEnvironment(name, config, context) {\n  const worker = new Worker('./worker.js')\n  const handlerToWorkerListener = new WeakMap()\n\n  const workerHotChannel = {\n    send: (data) => worker.postMessage(data),\n    on: (event, handler) => {\n      if (event === 'connection') return\n\n      const listener = (value) => {\n        if (value.type === 'custom' && value.event === event) {\n          const client = {\n            send(payload) {\n              worker.postMessage(payload)\n            },\n          }\n          handler(value.data, client)\n        }\n      }\n      handlerToWorkerListener.set(handler, listener)\n      worker.on('message', listener)\n    },\n    off: (event, handler) => {\n      if (event === 'connection') return\n      const listener = handlerToWorkerListener.get(handler)\n      if (listener) {\n        worker.off('message', listener)\n        handlerToWorkerListener.delete(handler)\n      }\n    },\n  }\n\n  return new DevEnvironment(name, config, {\n    transport: workerHotChannel,\n  })\n}\n\nawait createServer({\n  environments: {\n    worker: {\n      dev: {\n        createEnvironment: createWorkerEnvironment,\n      },\n    },\n  },\n})
```

----------------------------------------

TITLE: Visualizing Cyclic Imports with Mermaid in JavaScript (mermaid)
DESCRIPTION: This Mermaid diagram models a cyclic dependency scenario involving three JavaScript modules (dep1.js, dep2.js, index.js) and an entry point (entry.js). It demonstrates how cyclical relationships arise when modules reference each other directly or indirectly. No extra dependencies are needed, but viewing requires rendering the diagram with Mermaid. Inputs are the depicted modules and their relationships; output is a flowchart visual. The snippet highlights the risk of import cycles affecting module graph traversal or bundling.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/vite/src/node/ssr/runtime/__tests__/fixtures/cyclic2/README.md#2025-04-22_snippet_0

LANGUAGE: mermaid
CODE:
```
flowchart TD\n    B(dep1.js) -->|dep1| A(index.js)\n    A -->|dep1| C(dep2.js)\n    C -->|dep2| A\n    A -->|dep1, dep2| entry.js
```

----------------------------------------

TITLE: Worker Format Configuration Type Definition
DESCRIPTION: Type definition for the worker bundle output format option. Can be set to either 'es' (ECMAScript modules) or 'iife' (Immediately Invoked Function Expression), with 'iife' as the default.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/config/worker-options.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
'es' | 'iife'
```

----------------------------------------

TITLE: Type Definitions for Custom Vite Events
DESCRIPTION: Shows how to define TypeScript types for custom events by extending the CustomEventMap interface.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-plugin.md#2025-04-22_snippet_17

LANGUAGE: typescript
CODE:
```
import 'vite/types/customEvent.d.ts'

declare module 'vite/types/customEvent.d.ts' {
  interface CustomEventMap {
    'custom:foo': { msg: string }
    // 'event-key': payload
  }
}
```

----------------------------------------

TITLE: Configuring HTTP-Based Transport for ModuleRunner Using TypeScript
DESCRIPTION: Implements a ModuleRunner transport in Vite that uses HTTP requests for invoking actions on the server, disabling HMR as it requires connect/send. The code depends on Vite's module-runner and the browser 'fetch' API. It posts the HotPayload as JSON and expects a response of either a result or error, to be passed back to the ModuleRunner. The runner is then used to import an entry JavaScript module from the server.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-runtimes.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
import { ESModulesEvaluator, ModuleRunner } from 'vite/module-runner'\n\nexport const runner = new ModuleRunner(\n  {\n    transport: {\n      async invoke(data) {\n        const response = await fetch(`http://my-vite-server/invoke`, {\n          method: 'POST',\n          body: JSON.stringify(data),\n        })\n        return response.json()\n      },\n    },\n    hmr: false, // disable HMR as HMR requires transport.connect\n  },\n  new ESModulesEvaluator(),\n)\n\nawait runner.import('/entry.js')
```

----------------------------------------

TITLE: Importing Module Value with RunnableDevEnvironment (TypeScript)
DESCRIPTION: This snippet demonstrates how to use `ssrEnvironment.runner.import` with `RunnableDevEnvironment` to directly import and use the value exported by a user module (`./entrypoint.js`) within the code that utilizes Vite's APIs. This method requires the Vite server runtime to be compatible with the user module's runtime.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-frameworks.md#_snippet_3

LANGUAGE: typescript
CODE:
```
// code using the Vite's APIs
import { createServer } from 'vite'

const server = createServer()
const ssrEnvironment = server.environment.ssr
const input = {}

const { createHandler } = await ssrEnvironment.runner.import('./entrypoint.js')
const handler = createHandler(input)
const response = handler(new Request('/'))

// -------------------------------------
// ./entrypoint.js
export function createHandler(input) {
  return function handler(req) {
    return new Response('hello')
  }
}
```

----------------------------------------

TITLE: Issue Triaging Workflow Visualization - Mermaid
DESCRIPTION: This Mermaid diagram visualizes the decision process for triaging issues in the Vite project, including checks for duplicate reports, proper reproduction steps, bug validity, and priority assignment. The flowchart graphically documents reviewer actions, including when to close, label, or escalate issues. No runtime dependencies; interpreted by Markdown or tools supporting Mermaid. Inputs: Issue report status per node. Outputs: Visual workflow.
SOURCE: https://github.com/vitejs/vite/blob/main/CONTRIBUTING.md#2025-04-22_snippet_7

LANGUAGE: mermaid
CODE:
```
flowchart TD
    start{Followed issue
        template?}
    start --NO--> close1["Close and ask to
        follow template"]
    start --YES--> dupe{Is duplicate?}
    dupe --YES--> close2[Close and point
        to duplicate]
    dupe --NO--> repro{Has proper
      reproduction?}
    repro --NO--> close3[Label: 'needs reproduction'
        bot will auto close if no update
        has been made in 3 days]
    repro --YES--> real{Is actually a bug?}
    real --NO--> intended{Is the intended
        behaviour?}
    intended --YES--> explain[Explain and close
        point to docs if needed]
    intended --NO--> open[Keep open for discussion
        Remove 'pending triage' label]
    real --YES--> real2["① Remove 'pending triage' label
        ② Add related feature label if applicable
        (e.g. 'feat: ssr')
        ③ Add priority and meta labels (see below)"]
    real2 --> unusable{Does the
        bug make Vite
        unusable?}
    unusable --YES--> maj{Does the bug
        affect the majority
        of Vite users?}
    maj --YES--> p5[p5: urgent]
    maj --NO--> p4[p4: important]
    unusable --NO--> workarounds{Are there
        workarounds for
        the bug?}
    workarounds --NO--> p3[p3: minor bug]
    workarounds --YES--> p2[p2: edge case
        has workaround]
```

----------------------------------------

TITLE: Creating and Dispatching FetchableDevEnvironment Requests (TypeScript)
DESCRIPTION: Illustrates how to create a `FetchableDevEnvironment` using `createFetchableDevEnvironment` within the Vite server configuration. It shows how to provide a `handleRequest` function and how consumers can use `isFetchableDevEnvironment` and `dispatchFetch` to send requests to the environment.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/guide/api-environment-frameworks.md#_snippet_1

LANGUAGE: ts
CODE:
```
import {
  createServer,
  createFetchableDevEnvironment,
  isFetchableDevEnvironment,
} from 'vite'

const server = await createServer({
  server: { middlewareMode: true },
  appType: 'custom',
  environments: {
    custom: {
      dev: {
        createEnvironment(name, config) {
          return createFetchableDevEnvironment(name, config, {
            handleRequest(request: Request): Promise<Response> | Response {
              // handle Request and return a Response
            },
          })
        },
      },
    },
  },
})

// Any consumer of the environment API can now call `dispatchFetch`
if (isFetchableDevEnvironment(server.environments.custom)) {
  const response: Response = await server.environments.custom.dispatchFetch(
    new Request('/request-to-handle'),
  )
}
```

----------------------------------------

TITLE: Updating Text Content in the DOM Utility Function - JavaScript
DESCRIPTION: This snippet defines a utility function for updating a DOM element's text content. It receives a selector and a text string, then assigns the textContent property accordingly. Designed for test environments or runtime manipulations of test UIs. Dependencies: Standard DOM APIs. Inputs: el (selector string), text (string to insert). Outputs: DOM updated. Limitations: Assumes the element exists in DOM.
SOURCE: https://github.com/vitejs/vite/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5

LANGUAGE: js
CODE:
```
function text(el, text) {
  document.querySelector(el).textContent = text
}
```

----------------------------------------

TITLE: Representing Module Dependencies and Wait States (Text Diagram)
DESCRIPTION: This textual diagram illustrates the relationships between different modules (H, X, Y, A, B) involved in a potential deadlock scenario. 'A -> B' signifies that B is imported by A and B has A in its import stack. 'A ... B' indicates that module A is waiting for module B to complete its `ssrLoadModule()` execution.
SOURCE: https://github.com/vitejs/vite/blob/main/playground/ssr/src/forked-deadlock/README.md#2025-04-22_snippet_0

LANGUAGE: text
CODE:
```
A -> B means: B is imported by A and B has A in its stack
A ... B means: A is waiting for B to ssrLoadModule()

H -> X ... Y
H -> X -> Y ... B
H -> A ... B
H -> A -> B ... X
```

----------------------------------------

TITLE: Markdown Release Notes Entries
DESCRIPTION: Changelog entries detailing version releases, bug fixes, features, and dependency updates for create-vite. Includes commit hashes and issue references.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/CHANGELOG.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
## 4.3.0 (2023-04-20)

* fix(create-vite): update template-lit-ts tsconfig (fix #12854) (#12855) ([c186815])
* feat(create-vite): add eslint to React templates (#12801) ([d84460a])
* feat(create-vite): move TypeScript ones up (#12057) ([313712d])
* chore(create-vite): remove unnecessary App class Reference (#12771) ([1607f4a])
* chore(create-vite): remove wrapper div for react template (#12867) ([3679bd7])
* chore(deps): update dependency @tsconfig/svelte to v4 (#12879) ([79619a9])
* docs: update link to svelte-hmr (#12893) ([2ddeead])
```

LANGUAGE: markdown
CODE:
```
## 4.3.0-beta.0 (2023-04-06)

* chore: use @vitejs/release-scripts (#12682) ([9c37cc1])
* feat(create-vite): lit templates will create application instead of library (#12459) ([8186b9b])
* feat(create-vite): stricter TS configs in templates (#12604) ([4ffaeee])
* feat(create-vite): use typescript 5.0 in templates (#12481) ([8582e2d])
* fix(create-vite): skip lib check in tsconfig templates (#12591) ([a59914c])
```

----------------------------------------

TITLE: Configuring Package Overrides for Testing Local Vite Changes
DESCRIPTION: JSON configuration for package.json to use a locally modified version of Vite in another project using pnpm overrides.
SOURCE: https://github.com/vitejs/vite/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{
  "dependencies": {
    "vite": "^6.0.0"
  },
  "pnpm": {
    "overrides": {
      "vite": "link:../path/to/vite/packages/vite"
    }
  }
}
```

----------------------------------------

TITLE: Defining HTML Sections for Testing Static Asset Imports - HTML
DESCRIPTION: This HTML snippet defines a section of an index.html file used to test the ?raw import feature in the Vite assets playground. The <h2> heading denotes the feature, and a <code> element (with class 'raw') is present to be filled during the test; it acts as a placeholder for dynamically inserted content. This structure enables automated tests to locate and verify injected file contents. No dependencies other than a browser environment. Inputs: Any runtime JavaScript can write to .raw element. Outputs: Section in rendered HTML.
SOURCE: https://github.com/vitejs/vite/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<h2>?raw import</h2>
<code class="raw"></code>
```

----------------------------------------

TITLE: Displaying Import Stack for Module [Y] (Text)
DESCRIPTION: This snippet displays the import stack for module [Y]. It shows that [Y] was imported by [X], which was imported by [H]. This stack provides context for the dependencies shown in the deadlock diagrams.
SOURCE: https://github.com/vitejs/vite/blob/main/playground/ssr/src/forked-deadlock/README.md#2025-04-22_snippet_3

LANGUAGE: text
CODE:
```
[Y] stack:
	[X]
	[H]
```

----------------------------------------

TITLE: Displaying Import Stack for Module [X] (Text)
DESCRIPTION: This snippet shows the import stack for module [X] at the point of the deadlock analysis. It indicates that [X] was initially imported by [H]. This specific stack configuration is crucial for understanding the 'forked' nature of the deadlock.
SOURCE: https://github.com/vitejs/vite/blob/main/playground/ssr/src/forked-deadlock/README.md#2025-04-22_snippet_2

LANGUAGE: text
CODE:
```
[X] stack:
	[H]
```

----------------------------------------

TITLE: Setting VitePress Frontmatter Options
DESCRIPTION: This YAML frontmatter configuration disables common VitePress features including sidebar, edit links, and outline for this specific page.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/blog.md#2025-04-22_snippet_1

LANGUAGE: yaml
CODE:
```
---
sidebar: false
editLink: false
outline: false
---
```

----------------------------------------

TITLE: Importing VitePress Components and Team Data in Vue Setup
DESCRIPTION: This JavaScript code block, within a Vue `<script setup>` context, imports specific UI components (`VPTeamPage`, `VPTeamPageTitle`, `VPTeamPageSection`, `VPTeamMembers`) from the `vitepress/theme` library and team member data arrays (`core`, `emeriti`) from a local relative path `./_data/team`. These imports make the components and data available for use within the component's template.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/team.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
<script setup>
import {
  VPTeamPage,
  VPTeamPageTitle,
  VPTeamPageSection,
  VPTeamMembers
} from 'vitepress/theme'
import { core, emeriti } from './_data/team'
</script>
```

----------------------------------------

TITLE: Small Version Header Formatting
DESCRIPTION: Example of version header formatting for minor releases using Markdown small text syntax.
SOURCE: https://github.com/vitejs/vite/blob/main/packages/create-vite/CHANGELOG.md#2025-04-22_snippet_3

LANGUAGE: markdown
CODE:
```
## <small>3.2.1 (2022-11-07)</small>
```

----------------------------------------

TITLE: Linking to Experimental Features Discussion on GitHub
DESCRIPTION: This markdown link points to the GitHub Discussions page for Vite, filtered to show experimental features. It's used to provide users with more information about potential future changes.
SOURCE: https://github.com/vitejs/vite/blob/main/docs/changes/index.md#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
[Experimental Label in Vite GitHub Discussions](https://github.com/vitejs/vite/discussions/categories/feedback?discussions_q=label%3Aexperimental+category%3AFeedback)
```