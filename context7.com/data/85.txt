TITLE: Using Test Assertions with expect in JavaScript
DESCRIPTION: Shows how to use the expect function for creating test assertions. This is a crucial part of writing effective tests to verify expected behaviors.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_25

LANGUAGE: javascript
CODE:
```
test('example', async ({ page }) => {
  await test.expect(page).toHaveTitle('Title');
});
```

----------------------------------------

TITLE: Running Playwright Tests via npx - Bash
DESCRIPTION: Runs all Playwright tests in the configured browsers using npx, executing in headless mode by default. Requires a project initialized with Playwright and associated test/spec files present. Outputs test results to the console. Suitable for running both initial example and user-written tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
npx playwright test
```

----------------------------------------

TITLE: Get Element by Test ID
DESCRIPTION: Shows how to locate elements using test IDs added to the DOM elements
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_32

LANGUAGE: javascript
CODE:
```
await page.getByTestId('orange').click();
```

LANGUAGE: python
CODE:
```
await page.get_by_test_id("orange").click()
```

LANGUAGE: java
CODE:
```
page.getByTestId("orange").click();
```

LANGUAGE: csharp
CODE:
```
await page.GetByTestId("orange").ClickAsync();
```

----------------------------------------

TITLE: Retrieving and Applying Authentication State in Playwright (Python)
DESCRIPTION: This code snippet demonstrates how to retrieve the authentication state from an APIRequestContext and apply it to a new BrowserContext. It uses HTTP credentials to authenticate, saves the storage state, and then creates a new context with that state.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-python.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
request_context = playwright.request.new_context(http_credentials={"username": "test", "password": "test"})
request_context.get("https://api.example.com/login")
# Save storage state into a variable.
state = request_context.storage_state()

# Create a new context with the saved storage state.
context = browser.new_context(storage_state=state)
```

----------------------------------------

TITLE: Authentication Configuration Setup
DESCRIPTION: Configuration for authentication including global setup, base URL, and storage state settings.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';
export default defineConfig({
  globalSetup: require.resolve('./global-setup'),
  use: {
    baseURL: 'http://localhost:3000/',
    storageState: 'state.json',
  },
});
```

----------------------------------------

TITLE: Navigating to a URL in Playwright
DESCRIPTION: Shows how to navigate to a URL using the goto method in both JavaScript and Python. This is typically the first step in most Playwright tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-js.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
await page.goto('https://playwright.dev/');
```

LANGUAGE: python
CODE:
```
page.goto("https://playwright.dev/")
```

----------------------------------------

TITLE: Using Role Selectors in Playwright
DESCRIPTION: Shows how to use Playwright's role selectors to select elements by their ARIA role, attributes, and accessible name. This example clicks a button with the accessible name 'log in'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_48

LANGUAGE: javascript
CODE:
```
// Click a button with accessible name "log in"
await page.locator('role=button[name="log in"]').click();
```

----------------------------------------

TITLE: Basic Playwright Test Declaration in JavaScript
DESCRIPTION: Demonstrates how to import the test and expect functions from Playwright and write a basic test that navigates to a page and verifies content.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('basic test', async ({ page }) => {
  await page.goto('https://playwright.dev/');
  const name = await page.innerText('.navbar__title');
  expect(name).toBe('Playwright');
});
```

----------------------------------------

TITLE: Initializing Playwright Project via npm - Bash
DESCRIPTION: Initializes a new Playwright end-to-end testing project using npm, creating a ready-to-use folder structure and configuration. Requires Node.js and npm installed. Prompts for setup options like test folder, language, GitHub Actions, and browser installation. Runs interactively and sets up Playwright dependencies in the current directory.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm init playwright@latest
```

----------------------------------------

TITLE: Installing Required Browsers for Playwright
DESCRIPTION: Command to install the required browsers for Playwright after installing the Pytest plugin.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-python.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
playwright install
```

----------------------------------------

TITLE: Using Basic CSS Locator in Playwright
DESCRIPTION: Demonstrates how to use a basic CSS selector to locate and click a button element across different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
await page.locator('css=button').click();
```

LANGUAGE: java
CODE:
```
page.locator("css=button").click();
```

LANGUAGE: python
CODE:
```
await page.locator("css=button").click()
```

LANGUAGE: python
CODE:
```
page.locator("css=button").click()
```

LANGUAGE: csharp
CODE:
```
await page.Locator("css=button").ClickAsync();
```

----------------------------------------

TITLE: Basic Playwright Test Configuration Setup in JavaScript
DESCRIPTION: Demonstrates the most common configuration options for Playwright tests including test directory specification, parallel execution settings, retry behavior, reporter selection, base URL configuration, and browser project setup.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-configuration-js.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  // Look for test files in the "tests" directory, relative to this configuration file.
  testDir: 'tests',

  // Run all tests in parallel.
  fullyParallel: true,

  // Fail the build on CI if you accidentally left test.only in the source code.
  forbidOnly: !!process.env.CI,

  // Retry on CI only.
  retries: process.env.CI ? 2 : 0,

  // Opt out of parallel tests on CI.
  workers: process.env.CI ? 1 : undefined,

  // Reporter to use
  reporter: 'html',

  use: {
    // Base URL to use in actions like `await page.goto('/')`.
    baseURL: 'http://localhost:3000',

    // Collect trace when retrying the failed test.
    trace: 'on-first-retry',
  },
  // Configure projects for major browsers.
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
  ],
  // Run your local dev server before starting the tests.
  webServer: {
    command: 'npm run start',
    url: 'http://localhost:3000',
    reuseExistingServer: !process.env.CI,
  },
});
```

----------------------------------------

TITLE: Using Locator.fill() to Set Input Values in Playwright
DESCRIPTION: Demonstrates how to fill input fields using Playwright's Locator.fill() method. This method waits for element actionability, focuses it, fills it with the provided value, and triggers an input event. Works with <input>, <textarea>, and contenteditable elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_59

LANGUAGE: javascript
CODE:
```
await page.getByRole('textbox').fill('example value');
```

LANGUAGE: java
CODE:
```
page.getByRole(AriaRole.TEXTBOX).fill("example value");
```

LANGUAGE: python
CODE:
```
await page.get_by_role("textbox").fill("example value")
```

LANGUAGE: python
CODE:
```
page.get_by_role("textbox").fill("example value")
```

LANGUAGE: csharp
CODE:
```
await page.GetByRole(AriaRole.Textbox).FillAsync("example value");
```

----------------------------------------

TITLE: Making API Requests with Playwright APIRequestContext (Async) in Python
DESCRIPTION: Demonstrates how to use the asynchronous `APIRequestContext` in Playwright (Python) to make API calls (POST to create, DELETE to remove) to the GitHub API. It shows initializing the context from a browser context (sharing cookies) or manually, setting headers (including authorization), and asserting response status and content. Dependencies include `playwright.async_api`, `os`, and `asyncio`. Requires a GitHub API token set as an environment variable (`GITHUB_API_TOKEN`).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
```python async
import os
import asyncio
from playwright.async_api import async_playwright, Playwright

REPO = "test-repo-1"
USER = "github-username"
API_TOKEN = os.getenv("GITHUB_API_TOKEN")

async def run(playwright: Playwright):
    # This will launch a new browser, create a context and page. When making HTTP
    # requests with the internal APIRequestContext (e.g. `context.request` or `page.request`)
    # it will automatically set the cookies to the browser page and vice versa.
    browser = await playwright.chromium.launch()
    context = await browser.new_context(base_url="https://api.github.com")
    api_request_context = context.request
    page = await context.new_page()

    # Alternatively you can create a APIRequestContext manually without having a browser context attached:
    # api_request_context = await playwright.request.new_context(base_url="https://api.github.com")

    # Create a repository.
    response = await api_request_context.post(
        "/user/repos",
        headers={
            "Accept": "application/vnd.github.v3+json",
            # Add GitHub personal access token.
            "Authorization": f"token {API_TOKEN}",
        },
        data={"name": REPO},
    )
    assert response.ok
    assert response.json()["name"] == REPO

    # Delete a repository.
    response = await api_request_context.delete(
        f"/repos/{USER}/{REPO}",
        headers={
            "Accept": "application/vnd.github.v3+json",
            # Add GitHub personal access token.
            "Authorization": f"token {API_TOKEN}",
        },
    )
    assert response.ok
    assert await response.body() == '{"status": "ok"}'

async def main():
    async with async_playwright() as playwright:
        await run(playwright)

asyncio.run(main())
```
```

----------------------------------------

TITLE: Using URLSearchParams for API Request Query Parameters in Playwright
DESCRIPTION: This snippet shows how to use URLSearchParams or a string to pass query parameters to an API request using Playwright's APIRequestContext.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
test('query params', async ({ request }) => {
  const searchParams = new URLSearchParams();
  searchParams.set('userId', 1);
  const response = await request.get(
      'https://jsonplaceholder.typicode.com/posts',
      {
        params: searchParams // or as a string: 'userId=1'
      }
  );
  // ...
});
```

----------------------------------------

TITLE: Launching Browser with Playwright - Basic Example
DESCRIPTION: Basic examples of launching a browser instance using Playwright across different programming languages. Shows initialization, page creation, navigation, and cleanup.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-playwright.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const { chromium, firefox, webkit } = require('playwright');

(async () => {
  const browser = await chromium.launch();  // Or 'firefox' or 'webkit'.
  const page = await browser.newPage();
  await page.goto('http://example.com');
  // other actions...
  await browser.close();
})();
```

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      BrowserType chromium = playwright.chromium();
      Browser browser = chromium.launch();
      Page page = browser.newPage();
      page.navigate("http://example.com");
      // other actions...
      browser.close();
    }
  }
}
```

LANGUAGE: python
CODE:
```
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    chromium = playwright.chromium # or "firefox" or "webkit".
    browser = await chromium.launch()
    page = await browser.new_page()
    await page.goto("http://example.com")
    # other actions...
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())
```

----------------------------------------

TITLE: Catching TimeoutException in Playwright (.NET/C#)
DESCRIPTION: This C# example uses the Playwright .NET library (`Microsoft.Playwright`) to asynchronously launch a Chromium browser and create a page. It demonstrates how to specify a 100ms timeout directly within the `ClickAsync` method call for the 'Example' selector and how to catch the standard .NET `TimeoutException` when the operation fails to complete within the allotted time.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-timeouterror.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
```csharp
using Microsoft.Playwright;

using var playwright = await Playwright.CreateAsync();
await using var browser = await playwright.Chromium.LaunchAsync();
var page = await browser.NewPageAsync();
try
{
    await page.ClickAsync("text=Example", new() { Timeout = 100 });
}
catch (TimeoutException)
{
    Console.WriteLine("Timeout!");
}
```
```

----------------------------------------

TITLE: Waiting for and Saving Downloads in Playwright (Python Async)
DESCRIPTION: Shows the asynchronous Python pattern using the `async with page.expect_download()` context manager. The download action is performed within the context, and the `Download` object is retrieved from `download_info.value`. The file is saved using `download.save_as()` and `download.suggested_filename`. Requires an async Playwright `page` object and an element that initiates a download.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-download.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
# Start waiting for the download
async with page.expect_download() as download_info:
    # Perform the action that initiates download
    await page.get_by_text("Download file").click()
download = await download_info.value

# Wait for the download process to complete and save the downloaded file somewhere
await download.save_as("/path/to/save/at/" + download.suggested_filename)
```

----------------------------------------

TITLE: Setting Base URL for Navigation in Playwright Tests
DESCRIPTION: Example showing how to configure a base URL that will be prepended to relative URLs in navigation actions like page.goto('/').
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  use: {
    /* Base URL to use in actions like `await page.goto('/')`. */
    baseURL: 'http://localhost:3000',
  },
});
```

----------------------------------------

TITLE: Filling Text Input Fields using Playwright Locators
DESCRIPTION: Demonstrates using the `Locator.fill` (or `FillAsync` in C#) method in Playwright to input text into various types of input fields, including standard text boxes, date, time, and local datetime inputs. Locators like `getByRole` and `getByLabel` are used to target the specific elements. This method focuses the element and triggers an `input` event.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
```js
// Text input
await page.getByRole('textbox').fill('Peter');

// Date input
await page.getByLabel('Birth date').fill('2020-02-02');

// Time input
await page.getByLabel('Appointment time').fill('13:15');

// Local datetime input
await page.getByLabel('Local time').fill('2020-03-02T05:15');
```
```

LANGUAGE: java
CODE:
```
```java
// Text input
page.getByRole(AriaRole.TEXTBOX).fill("Peter");

// Date input
page.getByLabel("Birth date").fill("2020-02-02");

// Time input
page.getByLabel("Appointment time").fill("13-15");

// Local datetime input
page.getByLabel("Local time").fill("2020-03-02T05:15");
```
```

LANGUAGE: python
CODE:
```
```python async
# Text input
await page.get_by_role("textbox").fill("Peter")

# Date input
await page.get_by_label("Birth date").fill("2020-02-02")

# Time input
await page.get_by_label("Appointment time").fill("13:15")

# Local datetime input
await page.get_by_label("Local time").fill("2020-03-02T05:15")
```
```

LANGUAGE: python
CODE:
```
```python sync
# Text input
page.get_by_role("textbox").fill("Peter")

# Date input
page.get_by_label("Birth date").fill("2020-02-02")

# Time input
page.get_by_label("Appointment time").fill("13:15")

# Local datetime input
page.get_by_label("Local time").fill("2020-03-02T05:15")
```
```

LANGUAGE: csharp
CODE:
```
```csharp
// Text input
await page.GetByRole(AriaRole.Textbox).FillAsync("Peter");

// Date input
await page.GetByLabel("Birth date").FillAsync("2020-02-02");

// Time input
await page.GetByLabel("Appointment time").FillAsync("13-15");

// Local datetime input
await page.GetByLabel("Local time").FillAsync("2020-03-02T05:15");
```
```

----------------------------------------

TITLE: Basic Playwright Browser Launch with TypeScript
DESCRIPTION: Sets up a basic browser instance and context with Playwright using TypeScript. It launches a browser, creates a context and page, navigates to a URL, and then closes resources afterward.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/file-to-upload-2.txt#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { chromium } from 'playwright';

async function run() {
  const browser = await chromium.launch();
  const context = await browser.newContext();
  const page = await context.newPage();
  await page.goto('https://example.com');
  // Do something with the page
  await browser.close();
}

run();
```

----------------------------------------

TITLE: Making Assertions in Playwright Tests (Python)
DESCRIPTION: Shows how to use Playwright's expect API to make assertions in tests. This example waits for the page title to contain 'Playwright'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-python.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
import re
from playwright.sync_api import expect

expect(page).to_have_title(re.compile("Playwright"))
```

----------------------------------------

TITLE: Launching Chromium and Checking Page Title with Playwright Library (JavaScript/TypeScript)
DESCRIPTION: This snippet demonstrates how to use Playwright Library to launch Chromium, navigate to a page, and check its title. It includes setup, routing, navigation, assertion, and teardown steps.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-js.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { chromium, devices } from 'playwright';
import assert from 'node:assert';

(async () => {
  // Setup
  const browser = await chromium.launch();
  const context = await browser.newContext(devices['iPhone 11']);
  const page = await context.newPage();

  // The actual interesting bit
  await context.route('**.jpg', route => route.abort());
  await page.goto('https://example.com/');

  assert(await page.title() === 'Example Domain'); // 👎 not a Web First assertion

  // Teardown
  await context.close();
  await browser.close();
})();
```

----------------------------------------

TITLE: Defining Custom Test Options in TypeScript
DESCRIPTION: This TypeScript code defines a custom test option 'person' with a default value and proper type annotations. It extends the base test object with this new option.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
import { test as base } from '@playwright/test';

export type TestOptions = {
  person: string;
};

export const test = base.extend<TestOptions>({
  // Define an option and provide a default value.
  // We can later override it in the config.
  person: ['John', { option: true }],
});
```

----------------------------------------

TITLE: Iterating Over Locator Results Using Playwright C#
DESCRIPTION: Demonstrates how to asynchronously access and click all elements with the 'listitem' role in C# using Playwright. You must have the C# Playwright library and a properly instantiated `page`. This uses an async enumerable and awaits each click.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_4

LANGUAGE: C#
CODE:
```
foreach (var li in await page.GetByRole("listitem").AllAsync())
  await li.ClickAsync();
```

----------------------------------------

TITLE: Configuring Mobile Emulation in Playwright Tests
DESCRIPTION: Example showing how to configure isMobile flag to emulate a mobile device, which affects user agent, viewport, and touch events behavior in tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_19

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    isMobile: false,
  },
});
```

----------------------------------------

TITLE: Making API Requests with Playwright APIRequestContext (Sync) in Python
DESCRIPTION: Demonstrates how to use the synchronous `APIRequestContext` in Playwright (Python) to make API calls (POST to create, DELETE to remove) to the GitHub API. It shows initializing the context from a browser context (sharing cookies) or manually, setting headers (including authorization), and asserting response status and content. Dependencies include `playwright.sync_api` and `os`. Requires a GitHub API token set as an environment variable (`GITHUB_API_TOKEN`).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
```python sync
import os
from playwright.sync_api import sync_playwright

REPO = "test-repo-1"
USER = "github-username"
API_TOKEN = os.getenv("GITHUB_API_TOKEN")

with sync_playwright() as p:
    # This will launch a new browser, create a context and page. When making HTTP
    # requests with the internal APIRequestContext (e.g. `context.request` or `page.request`)
    # it will automatically set the cookies to the browser page and vice versa.
    browser = p.chromium.launch()
    context = browser.new_context(base_url="https://api.github.com")
    api_request_context = context.request
    page = context.new_page()

    # Alternatively you can create a APIRequestContext manually without having a browser context attached:
    # api_request_context = p.request.new_context(base_url="https://api.github.com")


    # Create a repository.
    response = api_request_context.post(
        "/user/repos",
        headers={
            "Accept": "application/vnd.github.v3+json",
            # Add GitHub personal access token.
            "Authorization": f"token {API_TOKEN}",
        },
        data={"name": REPO},
    )
    assert response.ok
    assert response.json()["name"] == REPO

    # Delete a repository.
    response = api_request_context.delete(
        f"/repos/{USER}/{REPO}",
        headers={
            "Accept": "application/vnd.github.v3+json",
            # Add GitHub personal access token.
            "Authorization": f"token {API_TOKEN}",
        },
    )
    assert response.ok
    assert await response.body() == '{"status": "ok"}'
```
```

----------------------------------------

TITLE: Reusing Signed-in State with Playwright - Python Async
DESCRIPTION: This Python (async) code snippet demonstrates how to save storage state into a file and create new contexts pre-loaded with the saved state using Playwright. It aims to improve efficiency by bypassing login processes in subsequent tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_12

LANGUAGE: python async
CODE:
```
# Save storage state into the file.
storage = await context.storage_state(path="state.json")

# Create a new context with the saved storage state.
context = await browser.new_context(storage_state="state.json")

```

----------------------------------------

TITLE: Navigating to a URL in Playwright (Python)
DESCRIPTION: Shows how to navigate to a URL using Playwright in Python. Playwright automatically waits for the page to load before proceeding.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-python.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
page.goto("https://playwright.dev/")
```

----------------------------------------

TITLE: Creating a Basic Playwright Test
DESCRIPTION: A simple Playwright test that navigates to the Playwright website, extracts text content from an element, and verifies it matches the expected value using assertions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_69

LANGUAGE: js
CODE:
```
import { test, expect } from '@playwright/test';

test('basic test', async ({ page }) => {
  await page.goto('https://playwright.dev/');
  const name = await page.innerText('.navbar__title');
  expect(name).toBe('Playwright');
});
```

----------------------------------------

TITLE: Handling File Upload with FileChooser in Python (Async)
DESCRIPTION: Illustrates how to handle file upload asynchronously using FileChooser in Playwright with Python.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-filechooser.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
async with page.expect_file_chooser() as fc_info:
    await page.get_by_text("Upload file").click()
file_chooser = await fc_info.value
await file_chooser.set_files("myfile.pdf")
```

----------------------------------------

TITLE: Installing Playwright Test Dependencies | Shell
DESCRIPTION: These shell commands demonstrate manual installation of Playwright Test. The first installs the `@playwright/test` NPM package as a development dependency, and the second downloads the necessary browser binaries for Chromium, Firefox, and WebKit. Specific browsers can be selected.
SOURCE: https://github.com/microsoft/playwright/blob/main/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
npm i -D @playwright/test
```

LANGUAGE: Shell
CODE:
```
npx playwright install
```

----------------------------------------

TITLE: Asserting Checkbox Checked State with Playwright TypeScript
DESCRIPTION: Asserts that the checkbox element located by the locator is checked. This assertion automatically retries until the checkbox is checked or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toBeChecked()
```

----------------------------------------

TITLE: Creating a Page and Taking a Screenshot in Java
DESCRIPTION: This snippet shows how to create a new page, navigate to a URL, and save a screenshot using Playwright in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      BrowserType webkit = playwright.webkit();
      Browser browser = webkit.launch();
      BrowserContext context = browser.newContext();
      Page page = context.newPage();
      page.navigate("https://example.com");
      page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get("screenshot.png")));
      browser.close();
    }
  }
}
```

----------------------------------------

TITLE: Using toHaveValues Assertion in Playwright
DESCRIPTION: Demonstrates how to validate multiple selected values in a multi-select element using toHaveValues assertion.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_37

LANGUAGE: html
CODE:
```
<select id="favorite-colors" multiple>
  <option value="R">Red</option>
  <option value="G">Green</option>
  <option value="B">Blue</option>
</select>
```

LANGUAGE: javascript
CODE:
```
const locator = page.locator('id=favorite-colors');
await locator.selectOption(['R', 'G']);
await expect(locator).toHaveValues([/R/, /G/]);
```

----------------------------------------

TITLE: Launching and Navigating with Playwright Java API - Java
DESCRIPTION: Demonstrates launching a Chromium browser with Playwright in Java, navigating to a web page, and printing its title to the console. Requires the com.microsoft.playwright dependency and Java 8+. Key parameters include the browser type (chromium), and the URL loaded. The main output is the printed page title. No explicit error handling for navigation failures is shown; the snippet runs headlessly by default.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-java.md#2025-04-22_snippet_0

LANGUAGE: java
CODE:
```
package org.example;

import com.microsoft.playwright.*;

public class App {
    public static void main(String[] args) {
        try (Playwright playwright = Playwright.create()) {
            Browser browser = playwright.chromium().launch();
            Page page = browser.newPage();
            page.navigate("https://playwright.dev");
            System.out.println(page.title());
        }
    }
}
```

----------------------------------------

TITLE: Writing Basic Playwright Test with Page Fixture
DESCRIPTION: This snippet demonstrates a basic Playwright test using the built-in `page` fixture. The `{ page }` argument injects an isolated `Page` instance into the test function, which is then used to navigate to a URL and assert the page title.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { test, expect } from '@playwright/test';

test('basic test', async ({ page }) => {
  await page.goto('https://playwright.dev/');

  await expect(page).toHaveTitle(/Playwright/);
});
```

----------------------------------------

TITLE: Interacting with an Element using Locator (Recommended) in Python (Sync)
DESCRIPTION: Demonstrates the recommended approach using Playwright Locators (`page.get_by_text`) in synchronous Python to interact with elements. Locators automatically re-fetch the element before each action (e.g., hover, click), avoiding staleness issues.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_23

LANGUAGE: python
CODE:
```
```python sync
locator = page.get_by_text("Submit")
locator.hover()
locator.click()
```
```

----------------------------------------

TITLE: Launching Browser and Navigating Page in Playwright JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates how to use Playwright to launch a Firefox browser, create a new page, navigate to a website, and finally close the browser. It requires the Playwright package and a Node.js runtime. The snippet is asynchronous and uses features specific to Node.js such as async/await.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
const { firefox } = require('playwright');  // Or 'chromium' or 'webkit'.

(async () => {
  const browser = await firefox.launch();
  const page = await browser.newPage();
  await page.goto('https://example.com');
  await browser.close();
})();
```

----------------------------------------

TITLE: Setting up Playwright with JUnit in Java
DESCRIPTION: Example of integrating Playwright with JUnit for browser automation testing. It demonstrates how to initialize Playwright and Browser instances in @BeforeAll, create new BrowserContext and Page for each test, and release resources properly in @AfterAll and @AfterEach methods.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-java.md#2025-04-22_snippet_0

LANGUAGE: java
CODE:
```
package org.example;

import com.microsoft.playwright.Browser;
import com.microsoft.playwright.BrowserContext;
import com.microsoft.playwright.Page;
import com.microsoft.playwright.Playwright;
import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class TestExample {
  // Shared between all tests in this class.
  static Playwright playwright;
  static Browser browser;

  // New instance for each test method.
  BrowserContext context;
  Page page;

  @BeforeAll
  static void launchBrowser() {
    playwright = Playwright.create();
    browser = playwright.chromium().launch();
  }

  @AfterAll
  static void closeBrowser() {
    playwright.close();
  }

  @BeforeEach
  void createContextAndPage() {
    context = browser.newContext();
    page = context.newPage();
  }

  @AfterEach
  void closeContext() {
    context.close();
  }

  @Test
  void shouldClickButton() {
    page.navigate("data:text/html,<script>var result;</script><button onclick='result=\"Clicked\"'>Go</button>");
    page.locator("button").click();
    assertEquals("Clicked", page.evaluate("result"));
  }

  @Test
  void shouldCheckTheBox() {
    page.setContent("<input id='checkbox' type='checkbox'></input>");
    page.locator("input").check();
    assertTrue((Boolean) page.evaluate("() => window['checkbox'].checked"));
  }

  @Test
  void shouldSearchWiki() {
    page.navigate("https://www.wikipedia.org/");
    page.locator("input[name=\"search\"]").click();
    page.locator("input[name=\"search\"]").fill("playwright");
    page.locator("input[name=\"search\"]").press("Enter");
    assertEquals("https://en.wikipedia.org/wiki/Playwright", page.url());
  }
}
```

----------------------------------------

TITLE: Basic Playwright Test Example in Java
DESCRIPTION: Demonstrates a complete test script using Playwright's core features including assertions, locators, and page navigation. Shows how to launch a browser, create a page, and perform basic test operations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-java.md#2025-04-22_snippet_0

LANGUAGE: java
CODE:
```
package org.example;

import java.util.regex.Pattern;
import com.microsoft.playwright.*;
import com.microsoft.playwright.options.AriaRole;

import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

public class App {
    public static void main(String[] args) {
        try (Playwright playwright = Playwright.create()) {
            Browser browser = playwright.chromium().launch();
            Page page = browser.newPage();
            page.navigate("https://playwright.dev");

            // Expect a title "to contain" a substring.
            assertThat(page).hasTitle(Pattern.compile("Playwright"));

            // create a locator
            Locator getStarted = page.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName("Get Started"));

            // Expect an attribute "to be strictly equal" to the value.
            assertThat(getStarted).hasAttribute("href", "/docs/intro");

            // Click the get started link.
            getStarted.click();

            // Expects page to have a heading with the name of Installation.
            assertThat(page.getByRole(AriaRole.HEADING,
               new Page.GetByRoleOptions().setName("Installation"))).isVisible();
        }
    }
}
```

----------------------------------------

TITLE: Basic Locator Usage in Playwright Python
DESCRIPTION: Locator represents a view to the element(s) on the page. It captures the logic sufficient to retrieve the element at any given moment. Locators are "strict" by default!
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_49

LANGUAGE: Python
CODE:
```
locator = page.locator("button")
locator.click()
```

----------------------------------------

TITLE: Locating Elements by Test ID
DESCRIPTION: Shows how to locate elements using data-testid attribute. Includes examples of clicking a button identified by test ID and configuring custom test ID attributes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_127

LANGUAGE: html
CODE:
```
<button data-testid="directions">Itinéraire</button>
```

LANGUAGE: javascript
CODE:
```
await page.getByTestId('directions').click();
```

----------------------------------------

TITLE: Configuring Setup and Teardown Projects in Playwright
DESCRIPTION: Demonstrates how to set up projects with dependencies and teardown in a Playwright configuration file. It includes setup, teardown, and browser-specific projects.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testproject.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'setup',
      testMatch: /global.setup\.ts/,
      teardown: 'teardown',
    },
    {
      name: 'teardown',
      testMatch: /global.teardown\.ts/,
    },
    {
      name: 'chromium',
      use: devices['Desktop Chrome'],
      dependencies: ['setup'],
    },
    {
      name: 'firefox',
      use: devices['Desktop Firefox'],
      dependencies: ['setup'],
    },
    {
      name: 'webkit',
      use: devices['Desktop Safari'],
      dependencies: ['setup'],
    },
  ],
});
```

----------------------------------------

TITLE: Asserting Element Hidden State with Playwright TypeScript
DESCRIPTION: Asserts that the element located by the locator is not visible. This assertion automatically retries until the element is hidden or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_9

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toBeHidden()
```

----------------------------------------

TITLE: Using a Page Object as a Playwright Fixture (JavaScript)
DESCRIPTION: This code demonstrates how to extend the base Playwright `test` object to create a custom fixture named `todoPage`. The fixture uses the `TodoPage` class to navigate to the page, add initial items (setup), yield the `TodoPage` instance to the test, and then remove all items (teardown). Tests can then simply request the `todoPage` fixture to get a pre-configured page object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import { test as base } from '@playwright/test';
import { TodoPage } from './todo-page';

// Extend basic test by providing a "todoPage" fixture.
const test = base.extend<{ todoPage: TodoPage }> ({
  todoPage: async ({ page }, use) => {
    const todoPage = new TodoPage(page);
    await todoPage.goto();
    await todoPage.addToDo('item1');
    await todoPage.addToDo('item2');
    await use(todoPage);
    await todoPage.removeAll();
  },
});

test('should add an item', async ({ todoPage }) => {
  await todoPage.addToDo('my item');
  // ...
});

test('should remove an item', async ({ todoPage }) => {
  await todoPage.remove('item1');
  // ...
});
```

----------------------------------------

TITLE: Configuring GitHub Actions for Playwright Tests (JavaScript/Node.js)
DESCRIPTION: This YAML configuration defines a GitHub Actions workflow for running Playwright tests within a Node.js project. The workflow triggers on pushes and pull requests to the main/master branches. It checks out the code, sets up the LTS version of Node.js, installs project dependencies using `npm ci`, installs Playwright browsers with dependencies, executes tests via `npx playwright test`, and finally uploads the generated `playwright-report/` directory as an artifact, retaining it for 30 days.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci-intro.md#2025-04-22_snippet_0

LANGUAGE: yml
CODE:
```
name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    - name: Run Playwright tests
      run: npx playwright test
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

```

----------------------------------------

TITLE: Reusing Signed-in State with Playwright - Python Sync
DESCRIPTION: This Python (sync) code example illustrates saving the authentication state to a JSON file and using it for new browser contexts with Playwright, enabling tests to run faster by avoiding repetitive login actions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_13

LANGUAGE: python sync
CODE:
```
# Save storage state into the file.
storage = context.storage_state(path="state.json")

# Create a new context with the saved storage state.
context = browser.new_context(storage_state="state.json")

```

----------------------------------------

TITLE: Using Web-First Assertions in Playwright Python
DESCRIPTION: Illustrates how to use web-first assertions with expect and locators. Playwright automatically retries the assertion until the condition is met or a timeout occurs, making tests more robust against dynamic content.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_43

LANGUAGE: python
CODE:
```
from playwright.async_api import Page, expect

async def test_status_becomes_submitted(page: Page) -> None:
    # ..
    await page.locator("#submit-button").click()
    await expect(page.locator(".status")).to_have_text("Submitted")
```

LANGUAGE: python
CODE:
```
from playwright.sync_api import Page, expect

def test_status_becomes_submitted(page: Page) -> None:
    # ..
    page.locator("#submit-button").click()
    expect(page.locator(".status")).to_have_text("Submitted")
```

----------------------------------------

TITLE: Creating a Page and Taking a Screenshot in JavaScript
DESCRIPTION: This snippet demonstrates how to create a new page, navigate to a URL, and save a screenshot using Playwright in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.

(async () => {
  const browser = await webkit.launch();
  const context = await browser.newContext();
  const page = await context.newPage();
  await page.goto('https://example.com');
  await page.screenshot({ path: 'screenshot.png' });
  await browser.close();
})();
```

----------------------------------------

TITLE: Fetching and Modifying API Response in JavaScript
DESCRIPTION: Shows how to fetch an API response, modify its JSON content, and then fulfill the route with the modified response using Playwright in JavaScript. This example adds a new breed to the dog API response.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_21

LANGUAGE: javascript
CODE:
```
await page.route('https://dog.ceo/api/breeds/list/all', async route => {
  const response = await route.fetch();
  const json = await response.json();
  json.message['big_red_dog'] = [];
  await route.fulfill({ response, json });
});
```

----------------------------------------

TITLE: Basic Page Navigation in C#
DESCRIPTION: Navigates to a URL and waits for the page's load event to fire using Playwright in C#.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_4

LANGUAGE: csharp
CODE:
```
// Navigate the page
await page.GotoAsync("https://example.com");
```

----------------------------------------

TITLE: Defining TodoPage POM Class in Playwright
DESCRIPTION: Defines a Page Object Model class for the TodoMVC application, providing methods to interact with elements like adding, removing, and navigating. It encapsulates selectors and actions for the todo list page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
import type { Page, Locator } from '@playwright/test';

export class TodoPage {
  private readonly inputBox: Locator;
  private readonly todoItems: Locator;

  constructor(public readonly page: Page) {
    this.inputBox = this.page.locator('input.new-todo');
    this.todoItems = this.page.getByTestId('todo-item');
  }

  async goto() {
    await this.page.goto('https://demo.playwright.dev/todomvc/');
  }

  async addToDo(text: string) {
    await this.inputBox.fill(text);
    await this.inputBox.press('Enter');
  }

  async remove(text: string) {
    const todo = this.todoItems.filter({ hasText: text });
    await todo.hover();
    await todo.getByLabel('Delete').click();
  }

  async removeAll() {
    while ((await this.todoItems.count()) > 0) {
      await this.todoItems.first().hover();
      await this.todoItems.getByLabel('Delete').first().click();
    }
  }
}
```

----------------------------------------

TITLE: Launching a Browser Using Playwright Python (Async)
DESCRIPTION: Shows how to launch Chromium asynchronously using Playwright's async API, create a new page, perform actions, and close the browser. Requires 'playwright' Python package and async environment. Key parameters include browser type and the Playwright instance. The function expects no input, and browser automation is the output. Limitations: must be run within an asyncio event loop.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
import asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nasync def run(playwright: Playwright):\n    chromium = playwright.chromium\n    browser = await chromium.launch()\n    page = await browser.new_page()\n    await page.goto(\"https://example.com\")\n    # other actions...\n    await browser.close()\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())
```

----------------------------------------

TITLE: Extending Playwright Test with Custom Fixtures
DESCRIPTION: Demonstrates how to extend the base Playwright `test` object using `test.extend` to define custom fixtures (`todoPage`, `settingsPage`) with setup and teardown logic. This allows reusing complex setup across multiple tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_7

LANGUAGE: TypeScript
CODE:
```
import { test as base } from '@playwright/test';
import { TodoPage } from './todo-page';
import { SettingsPage } from './settings-page';

// Declare the types of your fixtures.
type MyFixtures = {
  todoPage: TodoPage;
  settingsPage: SettingsPage;
};

// Extend base test by providing "todoPage" and "settingsPage".
// This new "test" can be used in multiple test files, and each of them will get the fixtures.
export const test = base.extend<MyFixtures>({
  todoPage: async ({ page }, use) => {
    // Set up the fixture.
    const todoPage = new TodoPage(page);
    await todoPage.goto();
    await todoPage.addToDo('item1');
    await todoPage.addToDo('item2');

    // Use the fixture value in the test.
    await use(todoPage);

    // Clean up the fixture.
    await todoPage.removeAll();
  },

  settingsPage: async ({ page }, use) => {
    await use(new SettingsPage(page));
  },
});
export { expect } from '@playwright/test';
```

----------------------------------------

TITLE: Fetching and Using an ElementHandle with WaitForSelectorAsync in C#
DESCRIPTION: Shows how to obtain an [ElementHandle] for a DOM element (`#box`) using `page.WaitForSelectorAsync` in C#, which waits for visibility. It then demonstrates asserting the element's bounding box dimensions and class attribute. Note: Using [ElementHandle] is discouraged in favor of [Locator].
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_9

LANGUAGE: csharp
CODE:
```
```csharp
// Get the element handle
var jsHandle = await page.WaitForSelectorAsync("#box");
var elementHandle = jsHandle as ElementHandle;

// Assert bounding box for the element
var boundingBox = await elementHandle.BoundingBoxAsync();
Assert.AreEqual(100, boundingBox.Width);

// Assert attribute for the element
var classNames = await elementHandle.GetAttributeAsync("class");
Assert.True(classNames.Contains("highlighted"));
```
```

----------------------------------------

TITLE: Creating and Navigating a Page in Playwright
DESCRIPTION: Examples of creating a new page in a browser context, navigating to a URL, interacting with page elements, and retrieving the current URL.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pages.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
// Create a page.
const page = await context.newPage();

// Navigate explicitly, similar to entering a URL in the browser.
await page.goto('http://example.com');
// Fill an input.
await page.locator('#search').fill('query');

// Navigate implicitly by clicking a link.
await page.locator('#submit').click();
// Expect a new url.
console.log(page.url());
```

LANGUAGE: java
CODE:
```
// Create a page.
Page page = context.newPage();

// Navigate explicitly, similar to entering a URL in the browser.
page.navigate("http://example.com");
// Fill an input.
page.locator("#search").fill("query");

// Navigate implicitly by clicking a link.
page.locator("#submit").click();
// Expect a new url.
System.out.println(page.url());
```

LANGUAGE: python
CODE:
```
# Async version
page = await context.new_page()

# Navigate explicitly, similar to entering a URL in the browser.
await page.goto('http://example.com')
# Fill an input.
await page.locator('#search').fill('query')

# Navigate implicitly by clicking a link.
await page.locator('#submit').click()
# Expect a new url.
print(page.url)
```

LANGUAGE: python
CODE:
```
# Sync version
page = context.new_page()

# Navigate explicitly, similar to entering a URL in the browser.
page.goto('http://example.com')
# Fill an input.
page.locator('#search').fill('query')

# Navigate implicitly by clicking a link.
page.locator('#submit').click()
# Expect a new url.
print(page.url)
```

LANGUAGE: csharp
CODE:
```
// Create a page.
var page = await context.NewPageAsync();

// Navigate explicitly, similar to entering a URL in the browser.
await page.GotoAsync("http://example.com");
// Fill an input.
await page.Locator("#search").FillAsync("query");

// Navigate implicitly by clicking a link.
await page.Locator("#submit").ClickAsync();
// Expect a new url.
Console.WriteLine(page.Url);
```

----------------------------------------

TITLE: Writing Basic Playwright Tests in JavaScript
DESCRIPTION: Demonstrates how to write two basic Playwright tests: one to check the page title and another to interact with a link and verify navigation. Uses the test and expect functions from the @playwright/test module.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-js.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('has title', async ({ page }) => {
  await page.goto('https://playwright.dev/');

  // Expect a title "to contain" a substring.
  await expect(page).toHaveTitle(/Playwright/);
});

test('get started link', async ({ page }) => {
  await page.goto('https://playwright.dev/');

  // Click the get started link.
  await page.getByRole('link', { name: 'Get started' }).click();

  // Expects page to have a heading with the name of Installation.
  await expect(page.getByRole('heading', { name: 'Installation' })).toBeVisible();
});
```

----------------------------------------

TITLE: Basic Web Server Configuration in Playwright
DESCRIPTION: Basic configuration for launching a local development web server during Playwright tests, including server command, URL, and reuse options.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-webserver-js.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  webServer: {
    command: 'npm run start',
    url: 'http://localhost:3000',
    reuseExistingServer: !process.env.CI,
    stdout: 'ignore',
    stderr: 'pipe',
  },
});
```

----------------------------------------

TITLE: Defining Worker-Scoped and Page Fixtures in Playwright Test (JS/TS)
DESCRIPTION: This snippet demonstrates how to define a worker-scoped fixture (`account`) that is set up once per worker process and shared by tests within that worker. It also shows how to override the default `page` fixture to automatically log in using the account created by the worker fixture. It utilizes `workerInfo.workerIndex` for unique account creation and the `{scope: 'worker'}` option.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
import { test as base } from '@playwright/test';

type Account = {
  username: string;
  password: string;
};

// Note that we pass worker fixture types as a second template parameter.
export const test = base.extend<{}, { account: Account }> ({
  account: [async ({ browser }, use, workerInfo) => {
    // Unique username.
    const username = 'user' + workerInfo.workerIndex;
    const password = 'verysecure';

    // Create the account with Playwright.
    const page = await browser.newPage();
    await page.goto('/signup');
    await page.getByLabel('User Name').fill(username);
    await page.getByLabel('Password').fill(password);
    await page.getByText('Sign up').click();
    // Make sure everything is ok.
    await expect(page.getByTestId('result')).toHaveText('Success');
    // Do not forget to cleanup.
    await page.close();

    // Use the account value.
    await use({ username, password });
  }, { scope: 'worker' }],

  page: async ({ page, account }, use) => {
    // Sign in with our account.
    const { username, password } = account;
    await page.goto('/signin');
    await page.getByLabel('User Name').fill(username);
    await page.getByLabel('Password').fill(password);
    await page.getByText('Sign in').click();
    await expect(page.getByTestId('userinfo')).toHaveText(username);

    // Use signed-in page in the test.
    await use(page);
  },
});
export { expect } from '@playwright/test';
```

----------------------------------------

TITLE: Using beforeEach Hook with Title in Playwright Tests
DESCRIPTION: Demonstrates how to create a beforeEach hook with a descriptive title. This example navigates to a starting URL before each test and logs the test title.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_11

LANGUAGE: javascript
CODE:
```
test.beforeEach('Open start URL', async ({ page }) => {
  console.log(`Running ${test.info().title}`);
  await page.goto('https://my.start.url/');
});
```

----------------------------------------

TITLE: Configuring Storage State for Browser Context in JavaScript and Python
DESCRIPTION: Defines the storageState option for initializing a browser context with logged-in information. It includes settings for cookies and localStorage.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_37

LANGUAGE: javascript
CODE:
```
{
  storageState: {
    cookies: [
      {
        name: "cookie_name",
        value: "cookie_value",
        domain: ".example.com",
        path: "/",
        expires: 1234567890,
        httpOnly: true,
        secure: true,
        sameSite: "Strict"
      }
    ],
    origins: [
      {
        origin: "https://example.com",
        localStorage: [
          {
            name: "local_storage_key",
            value: "local_storage_value"
          }
        ]
      }
    ]
  }
}
```

----------------------------------------

TITLE: Basic Configuration with defineConfig in Playwright Test
DESCRIPTION: Example of a basic Playwright Test configuration file that sets timeout, globalTimeout, reporter, and testDir options.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  timeout: 30000,
  globalTimeout: 600000,
  reporter: 'list',
  testDir: './tests',
});
```

----------------------------------------

TITLE: Installing Playwright with Dotnet Bash
DESCRIPTION: This snippet showcases Playwright installation for C# projects on CI using dotnet and PowerShell. It builds the project and installs Playwright dependencies for running tests successfully in a .NET environment.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
dotnet build\npwsh bin/Debug/netX/playwright.ps1 install --with-deps
```

----------------------------------------

TITLE: Conditional Test Skipping in Playwright
DESCRIPTION: Shows how to conditionally skip tests based on runtime conditions like browser type.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-annotations-js.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
test('skip this test', async ({ page, browserName }) => {
  test.skip(browserName === 'firefox', 'Still working on it');
});
```

----------------------------------------

TITLE: Skipping Tests in Playwright
DESCRIPTION: This example demonstrates various ways to skip tests in Playwright, including declaring skipped tests, conditionally skipping tests, and skipping multiple tests based on a condition.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_35

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.skip('never run', async ({ page }) => {
  // ...
});

test('Safari-only test', async ({ page, browserName }) => {
  test.skip(browserName !== 'webkit', 'This feature is Safari-only');
  // ...
});

test.skip(({ browserName }) => browserName !== 'webkit', 'Safari-only');

test('Safari-only test 1', async ({ page }) => {
  // ...
});
test('Safari-only test 2', async ({ page }) => {
  // ...
});
```

----------------------------------------

TITLE: Debugging All Tests
DESCRIPTION: Commands to enable Playwright Inspector for debugging all tests across different shells.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
PWDEBUG=1 pytest -s
```

LANGUAGE: batch
CODE:
```
set PWDEBUG=1
pytest -s
```

LANGUAGE: powershell
CODE:
```
$env:PWDEBUG=1
pytest -s
```

----------------------------------------

TITLE: Setting isMobile via Context Options (Python Sync)
DESCRIPTION: This synchronous Python snippet shows setting the `isMobile` property when creating a new browser context using `playwright.sync_api`. The `isMobile` parameter is passed directly to `browser.new_context`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_18

LANGUAGE: python
CODE:
```
```python sync
context = browser.new_context(
  isMobile=false
)
```
```

----------------------------------------

TITLE: Complete Page Fixture Example with Form Interaction
DESCRIPTION: A complete example showing how to use the page fixture to navigate to a page, fill in a form, and interact with elements. This is the most commonly used fixture in Playwright tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-fixtures.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('basic test', async ({ page }) => {
  await page.goto('/signin');
  await page.getByLabel('User Name').fill('user');
  await page.getByLabel('Password').fill('password');
  await page.getByText('Sign in').click();
  // ...
});
```

----------------------------------------

TITLE: Making Assertions in Playwright Tests
DESCRIPTION: Shows how to use Playwright's expect function for making assertions. Includes examples of both synchronous and asynchronous assertions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-js.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
expect(success).toBeTruthy();

await expect(page).toHaveTitle(/Playwright/);
```

----------------------------------------

TITLE: Reusing Authentication State Across API and Browser Contexts in Playwright (C#)
DESCRIPTION: Shows how to capture storage state from an authenticated API context and initialize a new browser context with that state using Playwright for .NET in C#. The code first authenticates via API with HTTP credentials, saves the resulting state, and applies it to a browser context to maintain login sessions across testing boundaries. Requires Playwright installed and suitable API endpoints; input parameters include authentication credentials and target URLs, with state sharing limited to compatible browser/API contexts.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-csharp.md#2025-04-22_snippet_6

LANGUAGE: csharp
CODE:
```
var requestContext = await Playwright.APIRequest.NewContextAsync(new()
{
    HttpCredentials = new()
    {
        Username = "user",
        Password = "passwd"
    },
});
await requestContext.GetAsync("https://api.example.com/login");
// Save storage state into a variable.
var state = await requestContext.StorageStateAsync();

// Create a new context with the saved storage state.
var context = await Browser.NewContextAsync(new() { StorageState = state });

```

----------------------------------------

TITLE: Configuring Playwright Projects for Multiple Browsers
DESCRIPTION: This configuration demonstrates how to set up Playwright projects to run tests across different browsers including Chromium, Firefox, WebKit, mobile viewports, and branded browsers like Microsoft Edge and Google Chrome.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-projects-js.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },

    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
    },

    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
    },

    /* Test against mobile viewports. */
    {
      name: 'Mobile Chrome',
      use: { ...devices['Pixel 5'] },
    },
    {
      name: 'Mobile Safari',
      use: { ...devices['iPhone 12'] },
    },

    /* Test against branded browsers. */
    {
      name: 'Microsoft Edge',
      use: {
        ...devices['Desktop Edge'],
        channel: 'msedge'
      },
    },
    {
      name: 'Google Chrome',
      use: {
        ...devices['Desktop Chrome'],
        channel: 'chrome'
      },
    },
  ],
});
```

----------------------------------------

TITLE: Accessing and Interacting with Frame Objects in Playwright Python (Async)
DESCRIPTION: This async Python code shows how to use Playwright to get a frame by name or URL pattern and then fill an input inside that frame. It leverages the async API and keyword arguments for URL filtering. Dependencies include Playwright Python (async), and requires an initialized 'page'. The snippet demonstrates filling the '#username-input' field in the selected frame.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/frames.md#2025-04-22_snippet_7

LANGUAGE: python async
CODE:
```
# Get frame using the frame's name attribute
frame = page.frame('frame-login')

# Get frame using frame's URL
frame = page.frame(url=r'.*domain.*')

# Interact with the frame
await frame.fill('#username-input', 'John')
```

----------------------------------------

TITLE: Setting Storage State in Playwright Test
DESCRIPTION: Configures the storage state for tests using the TestOptions.storageState property in the Playwright configuration file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_28

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    storageState: 'storage-state.json',
  },
});
```

----------------------------------------

TITLE: Using waitForURL in JavaScript
DESCRIPTION: This snippet shows how to use the waitForURL method to wait for the main frame to navigate to a specific URL after clicking a link in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_151

LANGUAGE: javascript
CODE:
```
await page.click('a.delayed-navigation'); // Clicking the link will indirectly cause a navigation
await page.waitForURL('**/target.html');
```

----------------------------------------

TITLE: Sign In Test with Synchronous Python for Playwright
DESCRIPTION: A synchronous Python example using Playwright to automate logging into GitHub. It involves interactions such as filling input fields and clicking buttons to achieve authenticated state in tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_9

LANGUAGE: python
CODE:
```
page = context.new_page()
page.goto('https://github.com/login')

page.get_by_label("Username or email address").fill("username")
page.get_by_label("Password").fill("password")
page.get_by_role("button", name="Sign in").click()
```

----------------------------------------

TITLE: Launching a Browser Using Playwright JavaScript
DESCRIPTION: Demonstrates how to programmatically launch a Chromium browser using Playwright in Node.js, navigate to a webpage, perform actions, and close the browser. Requires the 'playwright' Node.js package. Key parameters include the browser type ('chromium', 'firefox', or 'webkit'). Inputs depend on actions executed, and the main output is browser automation. Limitations may include the requirement that Playwright and the target browser version are compatible.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.\n\n(async () => {\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n  await page.goto('https://example.com');\n  // other actions...\n  await browser.close();\n})();
```

----------------------------------------

TITLE: Asserting Element Visible State with Playwright TypeScript
DESCRIPTION: Asserts that the element located by the locator is visible. This assertion automatically retries until the element is visible or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_11

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toBeVisible()
```

----------------------------------------

TITLE: Setting up and Tearing Down GitHub Test Repository with Playwright MSTest in C#
DESCRIPTION: This snippet illustrates how to automate the creation and deletion of a GitHub test repository as test setup and teardown actions using Playwright's APIRequestContext in C#. The CreateTestRepository and DeleteTestRepository private methods issue POST and DELETE requests to the relevant GitHub API endpoints. The hooks ensure that resource state is managed automatically at the start and end of test classes. Dependencies include Playwright, MSTest, GITHUB_USER, and GITHUB_API_TOKEN environment variables.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-csharp.md#2025-04-22_snippet_2

LANGUAGE: csharp
CODE:
```
using System.Text.Json;
using Microsoft.Playwright;
using Microsoft.Playwright.MSTest;

namespace PlaywrightTests;

[TestClass]
public class TestGitHubAPI : PlaywrightTest
{
    // ...
    [TestInitialize]
    public async Task SetUpAPITesting()
    {
        await CreateAPIRequestContext();
        await CreateTestRepository();
    }

    private async Task CreateTestRepository()
    {
        var resp = await Request.PostAsync("/user/repos", new()
        {
            DataObject = new Dictionary<string, string>()
            {
                ["name"] = REPO,
            },
        });
        await Expect(resp).ToBeOKAsync();
    }

    [TestCleanup]
    public async Task TearDownAPITesting()
    {
        await DeleteTestRepository();
        await Request.DisposeAsync();
    }

    private async Task DeleteTestRepository()
    {
        var resp = await Request.DeleteAsync("/repos/" + USER + "/" + REPO);
        await Expect(resp).ToBeOKAsync();
    }
}

```

----------------------------------------

TITLE: Taking Page Screenshot | Playwright Test TypeScript
DESCRIPTION: This Playwright Test snippet written in TypeScript demonstrates how to navigate to a specific URL and capture a screenshot of the current page content. It uses the `page.goto()` method for navigation and `page.screenshot()` to save the image.
SOURCE: https://github.com/microsoft/playwright/blob/main/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { test } from '@playwright/test';

test('Page Screenshot', async ({ page }) => {
  await page.goto('https://playwright.dev/');
  await page.screenshot({ path: `example.png` });
});
```

----------------------------------------

TITLE: Pausing Execution for Debugging in Playwright
DESCRIPTION: This snippet shows how to set a breakpoint in your test by pausing execution using the Page.pause() method, which helps with interactive debugging.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
await page.pause();
```

LANGUAGE: java
CODE:
```
page.pause();
```

LANGUAGE: python async
CODE:
```
await page.pause()
```

LANGUAGE: python sync
CODE:
```
page.pause()
```

LANGUAGE: csharp
CODE:
```
await page.PauseAsync();
```

----------------------------------------

TITLE: Saving/Restoring Storage State with IndexedDB in C#
DESCRIPTION: Illustrates how to save the browser context's storage state, including IndexedDB content, to a file using StorageStateAsync with the IndexedDB option set to true. It then shows how to create a new context loading this state from the file using StorageStatePath.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_2

LANGUAGE: csharp
CODE:
```
// Save storage state into the file. Make sure to include IndexedDB.
await context.StorageStateAsync(new()
{
    Path = "../../../playwright/.auth/state.json",
    IndexedDB = true
});

// Create a new context with the saved storage state.
var context = await browser.NewContextAsync(new()
{
    StorageStatePath = "../../../playwright/.auth/state.json"
});
```

----------------------------------------

TITLE: Writing API Tests for GitHub Issues with Playwright in Java
DESCRIPTION: This snippet shows how to write specific API tests using the configured APIRequestContext. It includes two JUnit @Test methods that send POST requests to create GitHub issues (a bug report and a feature request) and then send GET requests to verify their successful creation by checking the response status and parsing the JSON body using Gson. Assertions validate the API responses and the content of the created issues. Requires GITHUB_USER and GITHUB_API_TOKEN environment variables.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-java.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
package org.example;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.microsoft.playwright.APIRequest;
import com.microsoft.playwright.APIRequestContext;
import com.microsoft.playwright.APIResponse;
import com.microsoft.playwright.Playwright;
import com.microsoft.playwright.options.RequestOptions;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class TestGitHubAPI {
  private static final String REPO = "test-repo-2";
  private static final String USER = System.getenv("GITHUB_USER");
  private static final String API_TOKEN = System.getenv("GITHUB_API_TOKEN");

  private Playwright playwright;
  private APIRequestContext request;

  // ... (Previous setup code assumed here)

  @Test
  void shouldCreateBugReport() {
    Map<String, String> data = new HashMap<>();
    data.put("title", "[Bug] report 1");
    data.put("body", "Bug description");
    APIResponse newIssue = request.post("/repos/" + USER + "/" + REPO + "/issues",
      RequestOptions.create().setData(data));
    assertTrue(newIssue.ok());

    APIResponse issues = request.get("/repos/" + USER + "/" + REPO + "/issues");
    assertTrue(issues.ok());
    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);
    JsonObject issue = null;
    for (JsonElement item : json) {
      JsonObject itemObj = item.getAsJsonObject();
      if (!itemObj.has("title")) {
        continue;
      }
      if ("[Bug] report 1".equals(itemObj.get("title").getAsString())) {
        issue = itemObj;
        break;
      }
    }
    assertNotNull(issue);
    assertEquals("Bug description", issue.get("body").getAsString(), issue.toString());
  }

  @Test
  void shouldCreateFeatureRequest() {
    Map<String, String> data = new HashMap<>();
    data.put("title", "[Feature] request 1");
    data.put("body", "Feature description");
    APIResponse newIssue = request.post("/repos/" + USER + "/" + REPO + "/issues",
      RequestOptions.create().setData(data));
    assertTrue(newIssue.ok());

    APIResponse issues = request.get("/repos/" + USER + "/" + REPO + "/issues");
    assertTrue(issues.ok());
    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);
    JsonObject issue = null;
    for (JsonElement item : json) {
      JsonObject itemObj = item.getAsJsonObject();
      if (!itemObj.has("title")) {
        continue;
      }
      if ("[Feature] request 1".equals(itemObj.get("title").getAsString())) {
        issue = itemObj;
        break;
      }
    }
    assertNotNull(issue);
    assertEquals("Feature description", issue.get("body").getAsString(), issue.toString());
  }
}


```

----------------------------------------

TITLE: Selecting Options in C#
DESCRIPTION: Examples of selecting options in a <select> element using Page.SelectOptionAsync method in C#. It shows single and multiple selections using various selection criteria.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_105

LANGUAGE: csharp
CODE:
```
// Single selection matching the value or label
await page.SelectOptionAsync("select#colors", new[] { "blue" });
// single selection matching both the value and the label
await page.SelectOptionAsync("select#colors", new[] { new SelectOptionValue() { Label = "blue" } });
// multiple
await page.SelectOptionAsync("select#colors", new[] { "red", "green", "blue" });
```

----------------------------------------

TITLE: File Upload Operations in Playwright
DESCRIPTION: Demonstrates various file upload scenarios including single file, multiple files, directories, and in-memory file uploads using setInputFiles method.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
await page.getByLabel('Upload file').setInputFiles(path.join(__dirname, 'myfile.pdf'));

await page.getByLabel('Upload files').setInputFiles([
  path.join(__dirname, 'file1.txt'),
  path.join(__dirname, 'file2.txt'),
]);

await page.getByLabel('Upload directory').setInputFiles(path.join(__dirname, 'mydir'));

await page.getByLabel('Upload file').setInputFiles([]);

await page.getByLabel('Upload file').setInputFiles({
  name: 'file.txt',
  mimeType: 'text/plain',
  buffer: Buffer.from('this is test')
});
```

LANGUAGE: java
CODE:
```
page.getByLabel("Upload file").setInputFiles(Paths.get("myfile.pdf"));

page.getByLabel("Upload files").setInputFiles(new Path[] {Paths.get("file1.txt"), Paths.get("file2.txt")});

page.getByLabel("Upload directory").setInputFiles(Paths.get("mydir"));

page.getByLabel("Upload file").setInputFiles(new Path[0]);

page.getByLabel("Upload file").setInputFiles(new FilePayload(
  "file.txt", "text/plain", "this is test".getBytes(StandardCharsets.UTF_8)));
```

----------------------------------------

TITLE: Initializing Playwright Test Project | Shell
DESCRIPTION: These shell commands provide the easiest way to start a new Playwright Test project. The first command initializes in the current directory, while the second creates a new project directory. They set up configuration, examples, and a GitHub Actions workflow.
SOURCE: https://github.com/microsoft/playwright/blob/main/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
npm init playwright@latest
```

LANGUAGE: Shell
CODE:
```
npm init playwright@latest new-project
```

----------------------------------------

TITLE: Declaring a Playwright Test with Page Navigation
DESCRIPTION: Shows the basic structure of a Playwright test that navigates to a URL. This demonstrates the minimal code needed for a functional test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('basic test', async ({ page }) => {
  await page.goto('https://playwright.dev/');
  // ...
});
```

----------------------------------------

TITLE: Using Playwright Locators in JavaScript
DESCRIPTION: Demonstrates how to use Playwright's built-in locators for finding elements on a web page. The snippet includes chaining and filtering techniques to refine locator selection, enhancing test stability and reliability by avoiding direct reliance on CSS selectors which might change frequently.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_2

LANGUAGE: JavaScript
CODE:
```
const product = page.getByRole('listitem').filter({ hasText: 'Product 2' });
```

LANGUAGE: JavaScript
CODE:
```
await page
    .getByRole('listitem')
    .filter({ hasText: 'Product 2' })
    .getByRole('button', { name: 'Add to cart' })
    .click();
```

LANGUAGE: JavaScript
CODE:
```
page.locator('button.buttonIcon.episode-actions-later');
```

LANGUAGE: JavaScript
CODE:
```
page.getByRole('button', { name: 'submit' });
```

----------------------------------------

TITLE: Waiting for Specific URL After Click in JavaScript
DESCRIPTION: Demonstrates how to explicitly wait for navigation to a specific URL pattern after clicking an element in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
await page.getByText('Click me').click();
await page.waitForURL('**/login');
```

----------------------------------------

TITLE: Click Element with Strict Mode in Playwright Java
DESCRIPTION: Demonstrates how to use the `setStrict(true)` option with `page.click` in Playwright Java. This ensures that the selector targets exactly one element, throwing an error if multiple elements match.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_53

LANGUAGE: java
CODE:
```
// This will throw if you have more than one button!
page.click("button", new Page.ClickOptions().setStrict(true));
```

----------------------------------------

TITLE: Configuring Device Emulation in Playwright Test (JavaScript)
DESCRIPTION: This snippet shows how to configure Playwright Test projects to emulate specific devices using the `devices` object. It demonstrates setting up projects for 'Desktop Chrome' and 'iPhone 13' by spreading the device properties into the `use` configuration.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
```js tab=js-test title="playwright.config.ts"
import { defineConfig, devices } from '@playwright/test'; // import devices

export default defineConfig({
  projects: [
    {
      name: 'chromium',
      use: {
        ...devices['Desktop Chrome'],
      },
    },
    {
      name: 'Mobile Safari',
      use: {
        ...devices['iPhone 13'],
      },
    },
  ],
});
```
```

----------------------------------------

TITLE: Text Locator Parameters in Playwright
DESCRIPTION: Defines the `text` and `exact` parameters for locating elements by their text content. The exact option enables case-sensitive, whole-string matching.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_116

LANGUAGE: typescript
CODE:
```
* since: v1.27
- `text` <[string]|[RegExp]>
```

LANGUAGE: typescript
CODE:
```
* since: v1.27
- `exact` <[boolean]>
```

----------------------------------------

TITLE: Creating a Page and Taking a Screenshot in Python (Async)
DESCRIPTION: This snippet illustrates how to create a new page, navigate to a URL, and save a screenshot using Playwright in Python with async/await syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = await webkit.launch()
    context = await browser.new_context()
    page = await context.new_page()
    await page.goto("https://example.com")
    await page.screenshot(path="screenshot.png")
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())
```

----------------------------------------

TITLE: Using Playwright's Web-First Assertions in C#
DESCRIPTION: Example of using Playwright's assertion library to validate page elements with automatic retrying until conditions are met or timeout is reached.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-csharp.md#2025-04-23_snippet_3

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using static Microsoft.Playwright.Assertions;

// Change the default 5 seconds timeout if you'd like.
SetDefaultExpectTimeout(10_000);

using var playwright = await Playwright.CreateAsync();
await using var browser = await playwright.Chromium.LaunchAsync();
var page = await browser.NewPageAsync();
await page.GotoAsync("https://playwright.dev/dotnet");
await Expect(page.GetByRole(AriaRole.Link, new() { Name = "Get started" })).ToBeVisibleAsync();
```

----------------------------------------

TITLE: Setting Default Action Timeout in Playwright Tests
DESCRIPTION: Example showing how to configure a default timeout for Playwright actions like click(). This sets the maximum time each action can take before timing out.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  use: {
    /* Maximum time each action such as `click()` can take. Defaults to 0 (no limit). */
    actionTimeout: 0,
  },
});
```

----------------------------------------

TITLE: Selecting Options in Form Elements - Multiple Languages
DESCRIPTION: Examples showing how to select single and multiple options in form elements using different selection methods across languages. Demonstrates value-based, label-based and multiple selection approaches.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_43

LANGUAGE: javascript
CODE:
```
// Single selection matching the value or label
handle.selectOption('blue');

// single selection matching the label
handle.selectOption({ label: 'Blue' });

// multiple selection
handle.selectOption(['red', 'green', 'blue']);
```

LANGUAGE: java
CODE:
```
// Single selection matching the value or label
handle.selectOption("blue");
// single selection matching the label
handle.selectOption(new SelectOption().setLabel("Blue"));
// multiple selection
handle.selectOption(new String[] {"red", "green", "blue"});
```

LANGUAGE: python
CODE:
```
# Single selection matching the value or label
await handle.select_option("blue")
# single selection matching the label
await handle.select_option(label="blue")
# multiple selection
await handle.select_option(value=["red", "green", "blue"])
```

LANGUAGE: csharp
CODE:
```
// Single selection matching the value or label
await handle.SelectOptionAsync(new[] { "blue" });
// single selection matching the label
await handle.SelectOptionAsync(new[] { new SelectOptionValue() { Label = "blue" } });
// multiple selection
await handle.SelectOptionAsync(new[] { "red", "green", "blue" });
// multiple selection for blue, red and second option
await handle.SelectOptionAsync(new[] {
    new SelectOptionValue() { Label = "blue" },
    new SelectOptionValue() { Index = 2 },
    new SelectOptionValue() { Value = "red" }});
```

----------------------------------------

TITLE: Get Element by Text Content
DESCRIPTION: Shows how to locate and click an element using its text content across different programming languages
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_30

LANGUAGE: javascript
CODE:
```
await page.getByText('orange').click();
```

LANGUAGE: python
CODE:
```
await page.get_by_text("orange").click()
```

LANGUAGE: java
CODE:
```
page.getByText("orange").click();
```

LANGUAGE: csharp
CODE:
```
await page.GetByText("orange").ClickAsync();
```

----------------------------------------

TITLE: Scanning Entire Page for Accessibility with Playwright and axe-core - JavaScript CommonJS
DESCRIPTION: This snippet shows how to run a full-page accessibility scan using Playwright and @axe-core/playwright with CommonJS (require) syntax. It sets up a Playwright Test suite, navigates to a specified URL, performs an accessibility scan with AxeBuilder, and asserts that there are no violations. Requires @playwright/test and @axe-core/playwright as dependencies, and expects the page context to be provided by Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
const { test, expect } = require('@playwright/test');
const AxeBuilder = require('@axe-core/playwright').default; // 1

test.describe('homepage', () => { // 2
  test('should not have any automatically detectable accessibility issues', async ({ page }) => {
    await page.goto('https://your-site.com/'); // 3

    const accessibilityScanResults = await new AxeBuilder({ page }).analyze(); // 4

    expect(accessibilityScanResults.violations).toEqual([]); // 5
  });
});
```

----------------------------------------

TITLE: Adding Breakpoints with Page.pause() in Playwright Tests
DESCRIPTION: Code snippets showing how to add a pause breakpoint in Playwright tests across different programming languages. This allows you to run a test up to a specific point for debugging.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_4

LANGUAGE: js
CODE:
```
await page.pause();
```

LANGUAGE: java
CODE:
```
page.pause();
```

LANGUAGE: python
CODE:
```
await page.pause()
```

LANGUAGE: python
CODE:
```
page.pause()
```

LANGUAGE: csharp
CODE:
```
await page.PauseAsync();
```

----------------------------------------

TITLE: Implementing Web First Assertions with Playwright
DESCRIPTION: Illustrates the use of web-first assertions provided by Playwright to ensure that conditions are met before proceeding with test execution. This technique reduces flakiness in tests by waiting for necessary elements to appear or change state on the DOM before asserting their properties.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_4

LANGUAGE: JavaScript
CODE:
```
await expect(page.getByText('welcome')).toBeVisible();
```

LANGUAGE: JavaScript
CODE:
```
expect(await page.getByText('welcome').isVisible()).toBe(true);
```

----------------------------------------

TITLE: Modifying Network Responses in JavaScript
DESCRIPTION: Demonstrates how to modify network responses in JavaScript. The example fetches the original response, modifies the HTML content, and then fulfills the request with the modified response.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_27

LANGUAGE: javascript
CODE:
```
await page.route('**/title.html', async route => {
  // Fetch original response.
  const response = await route.fetch();
  // Add a prefix to the title.
  let body = await response.text();
  body = body.replace('<title>', '<title>My prefix:');
  await route.fulfill({
    // Pass all fields from the response.
    response,
    // Override response body.
    body,
    // Force content type to be html.
    headers: {
      ...response.headers(),
      'content-type': 'text/html'
    }
  });
});
```

----------------------------------------

TITLE: Testing Across All Browsers by Configuring Playwright Projects (JavaScript)
DESCRIPTION: Provides a sample Playwright configuration file (playwright.config.ts) to enable running test projects across Chromium, Firefox, and WebKit using device emulation. Uses the defineConfig and devices utilities from the Playwright test module. Input: none (config file structure). Output: configuration object specifying browser projects. Requires dependencies: '@playwright/test' and device descriptors.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
import { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n  ],\n});
```

----------------------------------------

TITLE: Asserting Element In Viewport with Playwright TypeScript
DESCRIPTION: Asserts that the element located by the locator intersects the viewport. This assertion automatically retries until the element is in the viewport or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_10

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toBeInViewport()
```

----------------------------------------

TITLE: Waiting for Response in Java
DESCRIPTION: Shows how to wait for HTTP responses in Java using both URL matching and predicate-based conditions. Includes examples of response handling with callbacks.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_141

LANGUAGE: java
CODE:
```
// Waits for the next response with the specified url
Response response = page.waitForResponse("https://example.com/resource", () -> {
  // Triggers the response
  page.getByText("trigger response").click();
});

// Waits for the next response matching some conditions
Response response = page.waitForResponse(response -> "https://example.com".equals(response.url()) && response.status() == 200 && "GET".equals(response.request().method()), () -> {
  // Triggers the response
  page.getByText("trigger response").click();
});
```

----------------------------------------

TITLE: Intercepting and Modifying API Responses with Playwright Python
DESCRIPTION: Demonstrates how to intercept network requests using `page.route`, fetch the original response data with `route.fetch`, modify the JSON payload, and then fulfill the request with the modified data using `route.fulfill`. This is useful for mocking or altering API responses during testing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_26

LANGUAGE: python
CODE:
```
def handle_route(route: Route):
  # Fetch original settings.
  response = route.fetch()

  # Force settings theme to a predefined value.
  json = response.json()
  json["theme"] = "Solorized"

  # Fulfill with modified data.
  route.fulfill(json=json)


page.route("**/api/settings", handle_route)
```

----------------------------------------

TITLE: Running Playwright Tests in UI Mode via pnpm - Bash
DESCRIPTION: Invokes Playwright's UI mode through pnpm, giving access to an enhanced interface for running tests interactively. Supports advanced features like watch mode and inspection. Useful for developers iterating on tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_12

LANGUAGE: bash
CODE:
```
pnpm exec playwright test --ui
```

----------------------------------------

TITLE: Asserting Hidden DOM Elements in Playwright
DESCRIPTION: Examples of using toBeHidden assertion to verify if a locator either doesn't resolve to any DOM node or resolves to a non-visible one.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
const locator = page.locator('.my-element');
await expect(locator).toBeHidden();
```

LANGUAGE: java
CODE:
```
assertThat(page.locator(".my-element")).isHidden();
```

LANGUAGE: python
CODE:
```
from playwright.async_api import expect

locator = page.locator('.my-element')
await expect(locator).to_be_hidden()
```

LANGUAGE: csharp
CODE:
```
var locator = Page.Locator(".my-element");
await Expect(locator).ToBeHiddenAsync();
```

----------------------------------------

TITLE: Selecting Options from Dropdown using Frame.SelectOptionAsync in C#
DESCRIPTION: Examples of how to select options from a dropdown element using the Frame.SelectOptionAsync method in C#. Shows single selection by value/label or multiple selections.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_34

LANGUAGE: csharp
CODE:
```
// Single selection matching the value or label
await frame.SelectOptionAsync("select#colors", new[] { "blue" });
// single selection matching both the value and the label
await frame.SelectOptionAsync("select#colors", new[] { new SelectOptionValue() { Label = "blue" } });
// multiple selection
await frame.SelectOptionAsync("select#colors", new[] { "red", "green", "blue" });
```

----------------------------------------

TITLE: Waiting for Locator Element in Playwright Python
DESCRIPTION: Wait for a locator to resolve to a single element with a given state. Defaults to the 'state: 'visible''. Comes especially handy when working with lists.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_47

LANGUAGE: Python
CODE:
```
order_sent = page.locator("#order-sent")
order_sent.wait_for()
```

----------------------------------------

TITLE: JavaScript Text Content Assertions
DESCRIPTION: Example showing text content assertions using Playwright's expect API with both direct text and regular expressions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_22

LANGUAGE: javascript
CODE:
```
const locator = page.locator('.title');
await expect(locator).toContainText('substring');
await expect(locator).toContainText(/\d messages/);
```

----------------------------------------

TITLE: Opening Playwright HTML Test Report
DESCRIPTION: Open the HTML report of Playwright tests, which provides a detailed view of test results including filters for browsers and test status.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_14

LANGUAGE: bash
CODE:
```
npx playwright show-report
```

----------------------------------------

TITLE: Handling Newsletter Dialog with Locator Handler in Python (Synchronous)
DESCRIPTION: Synchronous Python implementation of a locator handler that automatically closes a newsletter signup dialog when it appears. The handler detects text matching 'Sign up to the newsletter' and clicks the 'No thanks' button.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_78

LANGUAGE: python
CODE:
```
# Setup the handler.
def handler():
  page.get_by_role("button", name="No thanks").click()
page.add_locator_handler(page.get_by_text("Sign up to the newsletter"), handler)

# Write the test as usual.
page.goto("https://example.com")
page.get_by_role("button", name="Start here").click()
```

----------------------------------------

TITLE: Installing Playwright and Dependencies with NPM Bash
DESCRIPTION: The snippet installs necessary NPM packages and Playwright dependencies on a CI agent. It requires npm and npx, and installs the Playwright environment using the command `npx playwright install --with-deps`. It ensures the environment is ready for running Playwright tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
# Install NPM packages\nnpm ci\n\n# Install Playwright browsers and dependencies\nnpx playwright install --with-deps
```

----------------------------------------

TITLE: Using Locator.waitFor to Wait for Element State
DESCRIPTION: Example showing how to use the waitFor method on locators to wait for an element to reach a specified state (visible by default), which is useful when working with dynamic elements and lists.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_64

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('context fetch', async ({ page }) => {
  const completeness = page.locator('text=Success');
  await completeness.waitFor();
  expect(await page.screenshot()).toMatchSnapshot('screen.png');
});
```

----------------------------------------

TITLE: Creating Browser Context with Geolocation in JavaScript
DESCRIPTION: Creates a new browser context with geolocation settings and permissions using the Playwright JavaScript library. This sets up the browser environment to emulate a specific geographic location.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_45

LANGUAGE: javascript
CODE:
```
const context = await browser.newContext({
  geolocation: { longitude: 41.890221, latitude: 12.492348 },
  permissions: ['geolocation']
});

```

----------------------------------------

TITLE: Asserting Locator Text with Playwright Test in JavaScript
DESCRIPTION: Demonstrates using `expect(locator).toHaveText()` within a Playwright test to assert that an element located by `.status` has the exact text "Submitted" after a button click. This relies on the `@playwright/test` package.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
```js
import { test, expect } from '@playwright/test';

test('status becomes submitted', async ({ page }) => {
  // ...
  await page.getByRole('button').click();
  await expect(page.locator('.status')).toHaveText('Submitted');
});
```
```

----------------------------------------

TITLE: Overriding Playwright Page Fixture for Base URL Navigation
DESCRIPTION: Illustrates how to override the default Playwright `page` fixture to automatically navigate to a `baseURL` before the test runs. This simplifies test code by removing repetitive navigation calls.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
import { test as base } from '@playwright/test';

export const test = base.extend({
  page: async ({ baseURL, page }, use) => {
    await page.goto(baseURL);
    await use(page);
  },
});
```

----------------------------------------

TITLE: Snapshot Comparison with Playwright Expect (JavaScript)
DESCRIPTION: This snippet demonstrates how to use Playwright's expect assertions to compare a screenshot's output with a stored snapshot file. The function toMatchSnapshot verifies that the obtained screenshot matches the specified snapshot (e.g., 'landing-page.png'), and will throw if differences are detected. It requires Playwright's test runner and the snapshot file to exist (or be generated), and is intended for visual regression testing outputs.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-snapshotassertions.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
expect(screenshot).toMatchSnapshot('landing-page.png');
```

----------------------------------------

TITLE: Basic Page Navigation in JavaScript
DESCRIPTION: Navigates to a URL and waits for the page's load event to fire using Playwright in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
// Navigate the page
await page.goto('https://example.com');
```

----------------------------------------

TITLE: Implementing JUnit Tests with Playwright in Java
DESCRIPTION: A complete JUnit test class example showing how to set up Playwright with proper test fixtures. The class demonstrates initializing Playwright and Browser objects in @BeforeAll, creating new BrowserContext and Page for each test method, and implementing three different test scenarios including button clicks, checkbox interactions, and web navigation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-java.md#2025-04-22_snippet_0

LANGUAGE: java
CODE:
```
package org.example;

import com.microsoft.playwright.Browser;
import com.microsoft.playwright.BrowserContext;
import com.microsoft.playwright.Page;
import com.microsoft.playwright.Playwright;
import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class TestExample {
  // Shared between all tests in this class.
  static Playwright playwright;
  static Browser browser;

  // New instance for each test method.
  BrowserContext context;
  Page page;

  @BeforeAll
  static void launchBrowser() {
    playwright = Playwright.create();
    browser = playwright.chromium().launch();
  }

  @AfterAll
  static void closeBrowser() {
    playwright.close();
  }

  @BeforeEach
  void createContextAndPage() {
    context = browser.newContext();
    page = context.newPage();
  }

  @AfterEach
  void closeContext() {
    context.close();
  }

  @Test
  void shouldClickButton() {
    page.navigate("data:text/html,<script>var result;</script><button onclick='result=\"Clicked\"'>Go</button>");
    page.locator("button").click();
    assertEquals("Clicked", page.evaluate("result"));
  }

  @Test
  void shouldCheckTheBox() {
    page.setContent("<input id='checkbox' type='checkbox'></input>");
    page.locator("input").check();
    assertTrue((Boolean) page.evaluate("() => window['checkbox'].checked"));
  }

  @Test
  void shouldSearchWiki() {
    page.navigate("https://www.wikipedia.org/");
    page.locator("input[name=\"search\"]").click();
    page.locator("input[name=\"search\"]").fill("playwright");
    page.locator("input[name=\"search\"]").press("Enter");
    assertEquals("https://en.wikipedia.org/wiki/Playwright", page.url());
  }
}
```

----------------------------------------

TITLE: Configure Global Base URL in Playwright
DESCRIPTION: This snippet demonstrates setting a default base URL globally for all tests by adding the 'baseURL' option to the 'use' property in the Playwright configuration file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#_snippet_12

LANGUAGE: TypeScript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    baseURL: 'https://playwright.dev'
  }
});
```

----------------------------------------

TITLE: Launching a Browser Using Playwright Java
DESCRIPTION: Shows how to use Playwright's Java API to instantiate a Chromium browser, create a new page, and navigate to a specified URL. Requires 'com.microsoft.playwright' Java library. The main parameter is the browser type and configuration. Output is browser/webpage control; errors may occur if Playwright binaries are misconfigured.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      BrowserType chromium = playwright.chromium();\n      Browser browser = chromium.launch();\n      Page page = browser.newPage();\n      page.navigate(\"https://example.com\");\n      // other actions...\n      browser.close();\n    }\n  }\n}
```

----------------------------------------

TITLE: Setting Up Authentication in Playwright Tests with JavaScript
DESCRIPTION: This JavaScript snippet authenticates a user in Playwright by mimicking a login process and storing the authenticated session state. It's designed to streamline test dependencies by reusing authenticated states.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { test as setup, expect } from '@playwright/test';
import path from 'path';

const authFile = path.join(__dirname, '../playwright/.auth/user.json');

setup('authenticate', async ({ page }) => {
  await page.goto('https://github.com/login');
  await page.getByLabel('Username or email address').fill('username');
  await page.getByLabel('Password').fill('password');
  await page.getByRole('button', { name: 'Sign in' }).click();
  await page.waitForURL('https://github.com/');
  await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();

  await page.context().storageState({ path: authFile });
});
```

----------------------------------------

TITLE: Locating Elements within a Specific Context in Playwright
DESCRIPTION: Demonstrates how to search for an element within another element's context. This example creates a save button locator and then finds it within a specific dialog, allowing for contextual element selection.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_23

LANGUAGE: javascript
CODE:
```
const saveButton = page.getByRole('button', { name: 'Save' });
// ...
const dialog = page.getByTestId('settings-dialog');
await dialog.locator(saveButton).click();
```

LANGUAGE: python-async
CODE:
```
save_button = page.get_by_role("button", name="Save")
# ...
dialog = page.get_by_test_id("settings-dialog")
await dialog.locator(save_button).click()
```

LANGUAGE: python-sync
CODE:
```
save_button = page.get_by_role("button", name="Save")
# ...
dialog = page.get_by_test_id("settings-dialog")
dialog.locator(save_button).click()
```

LANGUAGE: java
CODE:
```
Locator saveButton = page.getByRole(AriaRole.BUTTON,
                                    new Page.GetByRoleOptions().setName("Save"));
// ...
Locator dialog = page.getByTestId("settings-dialog");
dialog.locator(saveButton).click();
```

LANGUAGE: csharp
CODE:
```
var saveButton = page.GetByRole(AriaRole.Button, new() { Name = "Save" });
// ...
var dialog = page.GetByTestId("settings-dialog");
await dialog.Locator(saveButton).ClickAsync();
```

----------------------------------------

TITLE: Modifying API Responses in C#
DESCRIPTION: This C# example demonstrates intercepting an API response, modifying it by adding a new fruit to the data, and fulfilling the route with the modified response. It shows how to use RouteAsync to handle the request, fetch the original response, add a new fruit to the array, and verify the modified content.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_8

LANGUAGE: csharp
CODE:
```
await page.RouteAsync("*/**/api/v1/fruits", async (route) => {
    var response = await route.FetchAsync();
    var fruits = await response.JsonAsync<Fruit[]>();
    fruits.Add(new Fruit() { Name = "Loquat", Id = 100 });
    // Fulfill using the original response, while patching the response body
    // with the given JSON object.
    await route.FulfillAsync(new ()
    {
      Response = response,
      Json = fruits
    });
  }
);
// Go to the page
await page.GotoAsync("https://demo.playwright.dev/api-mocking");

// Assert that the Loquat fruit is visible
await Expect(page.GetByTextAsync("Loquat", new () { Exact = true })).ToBeVisibleAsync();
```

----------------------------------------

TITLE: Asserting Element Enabled State using Playwright LocatorAssertions
DESCRIPTION: Ensures the Playwright Locator points to an element that is currently enabled (i.e., not disabled). It accepts an optional `enabled` boolean parameter (v1.26+) to explicitly assert for enabled or non-enabled states. A `timeout` option (placeholder `%%-js-assertions-timeout-%%` or `%%-csharp-java-python-assertions-timeout-%%`) is available.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
```js
const locator = page.locator('button.submit');
await expect(locator).toBeEnabled();
```
```

LANGUAGE: java
CODE:
```
```java
assertThat(page.locator("button.submit")).isEnabled();
```
```

LANGUAGE: python
CODE:
```
```python async
from playwright.async_api import expect

locator = page.locator("button.submit")
await expect(locator).to_be_enabled()
```
```

LANGUAGE: python
CODE:
```
```python sync
from playwright.sync_api import expect

locator = page.locator("button.submit")
expect(locator).to_be_enabled()
```
```

LANGUAGE: csharp
CODE:
```
```csharp
var locator = Page.Locator("button.submit");
await Expect(locator).ToBeEnabledAsync();
```
```

----------------------------------------

TITLE: Hover and Click on Locator Object in Python Async
DESCRIPTION: Demonstrates using a locator in async Python to perform hover and click actions on a text element. Ensures the element is freshly queried before interaction.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_12

LANGUAGE: Python
CODE:
```
locator = page.get_by_text("Submit")
await locator.hover()
await locator.click()
```

----------------------------------------

TITLE: Emulating Mobile Device & Geolocation | Playwright Test TypeScript
DESCRIPTION: This TypeScript Playwright Test example configures the test context to emulate an iPhone 13 Pro with a specific locale and geolocation. It then navigates to Google Maps, simulates a click on 'Your location', waits for a network request, and captures a screenshot showcasing the emulated environment.
SOURCE: https://github.com/microsoft/playwright/blob/main/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { test, devices } from '@playwright/test';

test.use({
  ...devices['iPhone 13 Pro'],
  locale: 'en-US',
  geolocation: { longitude: 12.492507, latitude: 41.889938 },
  permissions: ['geolocation'],
})

test('Mobile and geolocation', async ({ page }) => {
  await page.goto('https://maps.google.com');
  await page.getByText('Your location').click();
  await page.waitForRequest(/.*preview\/pwa/);
  await page.screenshot({ path: 'colosseum-iphone.png' });
});
```

----------------------------------------

TITLE: Using Locator with 'has' Option in Playwright
DESCRIPTION: Shows how to use the new 'has' option with locators to ensure one locator contains another. This example clicks an article element that contains a highlight class.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_54

LANGUAGE: javascript
CODE:
```
await page.locator('article', {
  has: page.locator('.highlight'),
}).click();
```

----------------------------------------

TITLE: Performing Various Mouse Clicks in Playwright
DESCRIPTION: Demonstrates various mouse click interactions using `Locator.click` (or `ClickAsync`/`DblClickAsync`/`HoverAsync` in C#). Covers standard clicks, double clicks (`dblclick`), right clicks (specifying `button: 'right'`), clicks with modifier keys like Shift or Ctrl/Meta (`modifiers` option), hovering over elements (`hover`), and clicking at specific coordinates within an element (`position` option). Playwright performs actionability checks (visibility, stability, pointer events) before clicking.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
```js
// Generic click
await page.getByRole('button').click();

// Double click
await page.getByText('Item').dblclick();

// Right click
await page.getByText('Item').click({ button: 'right' });

// Shift + click
await page.getByText('Item').click({ modifiers: ['Shift'] });

// Ctrl + click on Windows and Linux
// Meta + click on macOS
await page.getByText('Item').click({ modifiers: ['ControlOrMeta'] });

// Hover over element
await page.getByText('Item').hover();

// Click the top left corner
await page.getByText('Item').click({ position: { x: 0, y: 0 } });
```
```

LANGUAGE: java
CODE:
```
```java
// Generic click
page.getByRole(AriaRole.BUTTON).click();

// Double click
page.getByText("Item").dblclick();

// Right click
page.getByText("Item").click(new Locator.ClickOptions().setButton(MouseButton.RIGHT));

// Shift + click
page.getByText("Item").click(new Locator.ClickOptions().setModifiers(Arrays.asList(KeyboardModifier.SHIFT)));

// Ctrl + click on Windows and Linux
// Meta + click on macOS
page.getByText("Item").click(new Locator.ClickOptions().setModifiers(Arrays.asList(KeyboardModifier.CONTROL_OR_META)));

// Hover over element
page.getByText("Item").hover();

// Click the top left corner
page.getByText("Item").click(new Locator.ClickOptions().setPosition(0, 0));
```
```

LANGUAGE: python
CODE:
```
```python async
# Generic click
await page.get_by_role("button").click()

# Double click
await page.get_by_text("Item").dblclick()

# Right click
await page.get_by_text("Item").click(button="right")

# Shift + click
await page.get_by_text("Item").click(modifiers=["Shift"])

# Ctrl + click on Windows and Linux
# Meta + click on macOS
await page.get_by_text("Item").click(modifiers=["ControlOrMeta"])

# Hover over element
await page.get_by_text("Item").hover()

# Click the top left corner
await page.get_by_text("Item").click(position={ "x": 0, "y": 0})
```
```

LANGUAGE: python
CODE:
```
```python sync
# Generic click
page.get_by_role("button").click()

# Double click
page.get_by_text("Item").dblclick()

# Right click
page.get_by_text("Item").click(button="right")

# Shift + click
page.get_by_text("Item").click(modifiers=["Shift"])

# Hover over element
page.get_by_text("Item").hover()

# Click the top left corner
page.get_by_text("Item").click(position={ "x": 0, "y": 0})
```
```

LANGUAGE: csharp
CODE:
```
```csharp
// Generic click
await page.GetByRole(AriaRole.Button).ClickAsync();

// Double click
await page.GetByText("Item").DblClickAsync();

// Right click
await page.GetByText("Item").ClickAsync(new() { Button = MouseButton.Right });

// Shift + click
await page.GetByText("Item").ClickAsync(new() { Modifiers = new[] { KeyboardModifier.Shift } });

// Ctrl + click on Windows and Linux
// Meta + click on macOS
await page.GetByText("Item").ClickAsync(new() { Modifiers = new[] { KeyboardModifier.ControlOrMeta } });

// Hover over element
await page.GetByText("Item").HoverAsync();

// Click the top left corner
await page.GetByText("Item").ClickAsync(new() { position = new Position { X = 0, Y = 0 } });
```
```

----------------------------------------

TITLE: Creating Multiple Browser Contexts with Playwright Library (JavaScript)
DESCRIPTION: Illustrates creating multiple, isolated `BrowserContext` instances (`userContext`, `adminContext`) directly from a browser instance (`browser.newContext()`) using the Playwright library in JavaScript. This allows testing interactions between different user sessions or roles within the same script, independent of the test runner.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_7

LANGUAGE: js
CODE:
```
const { chromium } = require('playwright');

// Create a Chromium browser instance
const browser = await chromium.launch();

// Create two isolated browser contexts
const userContext = await browser.newContext();
const adminContext = await browser.newContext();

// Create pages and interact with contexts independently
const adminPage = await adminContext.newPage();
const userPage = await userContext.newPage();
```

----------------------------------------

TITLE: Basic JavaScript Evaluation in Browser Context
DESCRIPTION: Demonstrates how to run a JavaScript function in the browser context to retrieve the current page URL. This basic example shows the core functionality of the evaluate API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const href = await page.evaluate(() => document.location.href);
```

LANGUAGE: java
CODE:
```
String href = (String) page.evaluate("document.location.href");
```

LANGUAGE: python
CODE:
```
href = await page.evaluate('() => document.location.href')
```

LANGUAGE: csharp
CODE:
```
var href = await page.EvaluateAsync<string>("document.location.href");
```

----------------------------------------

TITLE: Launching Browser in Headed Mode with Slow Motion
DESCRIPTION: Code to launch browsers in headed (non-headless) mode with slow motion to help with visual debugging by slowing down the execution.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
// Chromium, Firefox, or WebKit
await chromium.launch({ headless: false, slowMo: 100 });
```

LANGUAGE: java
CODE:
```
// Chromium, Firefox, or WebKit
chromium.launch(new BrowserType.LaunchOptions()
  .setHeadless(false)
  .setSlowMo(100));
```

LANGUAGE: python async
CODE:
```
# Chromium, Firefox, or WebKit
await chromium.launch(headless=False, slow_mo=100)
```

LANGUAGE: python sync
CODE:
```
# Chromium, Firefox, or WebKit
chromium.launch(headless=False, slow_mo=100)
```

LANGUAGE: csharp
CODE:
```
// Chromium, Firefox, or WebKit
await using var browser = await playwright.Chromium.LaunchAsync(new()
{
    Headless = false,
    SlowMo = 100
});
```

----------------------------------------

TITLE: Reusing Signed-in State with Playwright - Java
DESCRIPTION: This Java snippet shows how to save and reuse the authenticated state in Playwright tests. The code saves the state into a JSON file and uses it to create new browser contexts with prepopulated states, optimizing test setup time by avoiding repeated logins.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_11

LANGUAGE: java
CODE:
```
// Save storage state into the file.
context.storageState(new BrowserContext.StorageStateOptions().setPath(Paths.get("state.json")));

// Create a new context with the saved storage state.
BrowserContext context = browser.newContext(
  new Browser.NewContextOptions().setStorageStatePath(Paths.get("state.json")));

```

----------------------------------------

TITLE: Locating Form Elements by Label
DESCRIPTION: Demonstrates locating form inputs using associated label text, aria-labelledby, or aria-label attributes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_130

LANGUAGE: html
CODE:
```
<input aria-label="Username">
<label for="password-input">Password:</label>
<input id="password-input">
```

LANGUAGE: javascript
CODE:
```
await page.getByLabel('Username').fill('john');
await page.getByLabel('Password').fill('secret');
```

----------------------------------------

TITLE: Declaring Test Steps in Playwright
DESCRIPTION: Shows how to use test.step() to declare test steps in Playwright. It includes examples of basic usage, nested steps, and returning values from steps.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_37

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('test', async ({ page }) => {
  await test.step('Log in', async () => {
    // ...
  });

  await test.step('Outer step', async () => {
    // ...
    // You can nest steps inside each other.
    await test.step('Inner step', async () => {
      // ...
    });
  });
});

test('test', async ({ page }) => {
  const user = await test.step('Log in', async () => {
    // ...
    return 'john';
  });
  expect(user).toBe('john');
});
```

----------------------------------------

TITLE: Handling Dynamic Overlays with Locator Handler (Java)
DESCRIPTION: Shows how to use the new `page.addLocatorHandler` method to automatically handle elements that might appear dynamically and block actions, such as cookie consent dialogs. It registers a callback that clicks an 'Accept' button when a specific cookie banner locator becomes visible.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_22

LANGUAGE: java
CODE:
```
// Setup the handler.
page.addLocatorHandler(
    page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Hej! You are in control of your cookies.")),
    () -> {
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Accept all")).click();
    });
// Write the test as usual.
page.navigate("https://www.ikea.com/");
page.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName("Collection of blue and white")).click();
assertThat(page.getByRole(AriaRole.HEADING, new Page.GetByRoleOptions().setName("Light and easy"))).isVisible();
```

----------------------------------------

TITLE: Creating a New Playwright Project Using NPM Init
DESCRIPTION: Commands for initializing a new Playwright project or adding Playwright to an existing project using npm init, which sets up configuration, examples, and GitHub Actions workflow.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_57

LANGUAGE: bash
CODE:
```
# Run from your project's root directory
npm init playwright@latest
# Or create a new project
npm init playwright@latest new-project
```

----------------------------------------

TITLE: Configuring Bitbucket Pipelines for Playwright Tests (Multiple Languages)
DESCRIPTION: These YAML snippets configure Bitbucket Pipelines to use Playwright Docker images for running tests in JavaScript, Python, Java, and C# projects.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_35

LANGUAGE: yml
CODE:
```
image: mcr.microsoft.com/playwright:v%%VERSION%%-noble
```

LANGUAGE: yml
CODE:
```
image: mcr.microsoft.com/playwright/python:v%%VERSION%%-noble
```

LANGUAGE: yml
CODE:
```
image: mcr.microsoft.com/playwright/java:v%%VERSION%%-noble
```

LANGUAGE: yml
CODE:
```
image: mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble
```

----------------------------------------

TITLE: Using Playwright C# Locators
DESCRIPTION: Demonstrates how to use various Playwright C# locator methods like GetByLabel, GetByRole, and GetByText to interact with elements and assert their visibility.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_31

LANGUAGE: csharp
CODE:
```
await page.GetByLabel("User Name").FillAsync("John");

await page.GetByLabel("Password").FillAsync("secret-password");

await page.GetByRole(AriaRole.Button, new() { NameString = "Sign in" }).ClickAsync();

await Expect(Page.GetByText("Welcome, John!")).ToBeVisibleAsync();
```

----------------------------------------

TITLE: Launching Browser and Navigating Page in Playwright C#
DESCRIPTION: This C# snippet demonstrates using Playwright for browser automation to launch a Firefox browser and open a webpage. It requires .NET and the Playwright C# library. The code is asynchronous, leveraging C# async/await features to manage browser operations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_4

LANGUAGE: C#
CODE:
```
using Microsoft.Playwright;

using var playwright = await Playwright.CreateAsync();
var firefox = playwright.Firefox;
var browser = await firefox.LaunchAsync(new() { Headless = false });
var page = await browser.NewPageAsync();
await page.GotoAsync("https://www.bing.com");
await browser.CloseAsync();
```

----------------------------------------

TITLE: Creating Multiple Browser Contexts in Playwright (.NET/C#)
DESCRIPTION: Shows the C# code for creating multiple independent `BrowserContext` instances (`userContext`, `adminContext`) from a single browser object using `browser.NewContextAsync()`. This is essential for testing scenarios involving multiple users or roles concurrently in C# applications using the `Microsoft.Playwright` library.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_11

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using System.Threading.Tasks;

class Program
{
    public static async Task Main()
    {
        using var playwright = await Playwright.CreateAsync();
        // Create a Chromium browser instance
        await using var browser = await playwright.Chromium.LaunchAsync();
        await using var userContext = await browser.NewContextAsync();
        await using var adminContext = await browser.NewContextAsync();
        // Create pages and interact with contexts independently.
    }
}
```

----------------------------------------

TITLE: Modifying API Responses in JavaScript
DESCRIPTION: This JavaScript example demonstrates how to intercept an API response, modify it by adding a new fruit to the JSON data, and then fulfill the route with the modified response. It shows how to make the actual API request, transform the response, and verify the modified data appears on the page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
test('gets the json from api and adds a new fruit', async ({ page }) => {
  // Get the response and add to it
  await page.route('*/**/api/v1/fruits', async route => {
    const response = await route.fetch();
    const json = await response.json();
    json.push({ name: 'Loquat', id: 100 });
    // Fulfill using the original response, while patching the response body
    // with the given JSON object.
    await route.fulfill({ response, json });
  });

  // Go to the page
  await page.goto('https://demo.playwright.dev/api-mocking');

  // Assert that the new fruit is visible
  await expect(page.getByText('Loquat', { exact: true })).toBeVisible();
});
```

----------------------------------------

TITLE: Auto-waiting Navigation and Interaction in JavaScript
DESCRIPTION: Demonstrates how Playwright in JavaScript automatically waits for elements to be actionable before interacting with them after navigation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
// Navigate and click element
// Click will auto-wait for the element
await page.goto('https://example.com');
await page.getByText('Example Domain').click();
```

----------------------------------------

TITLE: Using dotenv for Environment Variables in Configuration
DESCRIPTION: This configuration file shows how to use the dotenv package to load environment variables from a .env file, making it easier to manage different configurations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_12

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';
import dotenv from 'dotenv';
import path from 'path';

// Read from ".env" file.
dotenv.config({ path: path.resolve(__dirname, '.env') });

// Alternatively, read from "../my.env" file.
dotenv.config({ path: path.resolve(__dirname, '..', 'my.env') });

export default defineConfig({
  use: {
    baseURL: process.env.STAGING === '1' ? 'http://staging.example.test/' : 'http://example.test/',
  }
});
```

----------------------------------------

TITLE: Configure Locale for a Describe Block in Playwright
DESCRIPTION: This snippet illustrates how to apply configuration options, like locale, to all tests contained within a specific 'describe' block by calling 'test.use()' inside the block.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
import { test, expect } from '@playwright/test';

test.describe('french language block', () => {

  test.use({ locale: 'fr-FR' });

  test('example', async ({ page }) => {
    // ...
  });
});
```

----------------------------------------

TITLE: Selecting Options in Dropdown Menus using Playwright
DESCRIPTION: Shows how to use the `Locator.selectOption` (or `SelectOptionAsync` in C#) method in Playwright to select one or multiple options within a `<select>` HTML element. Options can be selected by their `value` attribute or their visible text label. Examples cover single selection by value/label and multiple selections.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
```js
// Single selection matching the value or label
await page.getByLabel('Choose a color').selectOption('blue');

// Single selection matching the label
await page.getByLabel('Choose a color').selectOption({ label: 'Blue' });

// Multiple selected items
await page.getByLabel('Choose multiple colors').selectOption(['red', 'green', 'blue']);
```
```

LANGUAGE: java
CODE:
```
```java
// Single selection matching the value or label
page.getByLabel("Choose a color").selectOption("blue");

// Single selection matching the label
page.getByLabel("Choose a color").selectOption(new SelectOption().setLabel("Blue"));

// Multiple selected items
page.getByLabel("Choose multiple colors").selectOption(new String[] {"red", "green", "blue"});
```
```

LANGUAGE: python
CODE:
```
```python async
# Single selection matching the value or label
await page.get_by_label('Choose a color').select_option('blue')

# Single selection matching the label
await page.get_by_label('Choose a color').select_option(label='Blue')

# Multiple selected items
await page.get_by_label('Choose multiple colors').select_option(['red', 'green', 'blue'])
```
```

LANGUAGE: python
CODE:
```
```python sync
# Single selection matching the value or label
page.get_by_label('Choose a color').select_option('blue')

# Single selection matching the label
page.get_by_label('Choose a color').select_option(label='Blue')

# Multiple selected items
page.get_by_label('Choose multiple colors').select_option(['red', 'green', 'blue'])
```
```

LANGUAGE: csharp
CODE:
```
```csharp
// Single selection matching the value or label
await page.GetByLabel("Choose a color").SelectOptionAsync("blue");

// Single selection matching the label
await page.GetByLabel("Choose a color").SelectOptionAsync(new SelectOptionValue { Label = "blue" });

// Multiple selected items
await page.GetByLabel("Choose multiple colors").SelectOptionAsync(new[] { "blue", "green", "red" });
```
```

----------------------------------------

TITLE: Skipping Tests in Playwright
DESCRIPTION: Demonstrates how to skip tests using test.skip() annotation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-annotations-js.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
test.skip('skip this test', async ({ page }) => {
  // This test is not run
});
```

----------------------------------------

TITLE: Asserting Element Attribute with Playwright TypeScript
DESCRIPTION: Asserts that the element located by the locator has a specific DOM attribute. This assertion automatically retries until the condition is met or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_16

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toHaveAttribute()
```

----------------------------------------

TITLE: Waiting for Load State After Button Click in Python (Async)
DESCRIPTION: Demonstrates how to wait for a page to reach the 'load' state after a button click in Python using async syntax. The method resolves after the 'load' event is fired.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_122

LANGUAGE: python
CODE:
```
await page.get_by_role("button").click() # click triggers navigation.
await page.wait_for_load_state() # the promise resolves after "load" event.
```

----------------------------------------

TITLE: Mocking HTTP Requests with Playwright
DESCRIPTION: This snippet shows how to use Playwright to mock HTTP responses, ensuring that tests are not dependent on third-party systems. By routing requests to a specific URL and fulfilling them with fake data, tests can be executed quickly and predictably without waiting for real network traffic or handling external site changes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_1

LANGUAGE: JavaScript
CODE:
```
await page.route('**/api/fetch_data_third_party_dependency', route => route.fulfill({
  status: 200,
  body: testData,
}));
await page.goto('https://example.com');
```

----------------------------------------

TITLE: Using selectOption in Playwright with JavaScript
DESCRIPTION: Demonstrates how to select options in a <select> element using different selection methods in JavaScript. Shows single selection by value, single selection by label, and multiple selection.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_78

LANGUAGE: javascript
CODE:
```
// single selection matching the value or label
element.selectOption('blue');

// single selection matching the label
element.selectOption({ label: 'Blue' });

// multiple selection for red, green and blue options
element.selectOption(['red', 'green', 'blue']);
```

----------------------------------------

TITLE: GitHub Actions Workflow for Python Playwright
DESCRIPTION: This GitHub Actions workflow sets up a Python environment for running Playwright tests. Triggered on push or pull requests, it handles dependencies, installs browsers using Playwright CLI, and runs tests via `pytest`, retaining traces on failure.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_10

LANGUAGE: yml
CODE:
```
name: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n    - name: Ensure browsers are installed\n      run: python -m playwright install --with-deps\n    - name: Run your tests\n      run: pytest --tracing=retain-on-failure\n    - uses: actions/upload-artifact@v4\n      if: ${{ !cancelled() }}\n      with:\n        name: playwright-traces\n        path: test-results/
```

----------------------------------------

TITLE: Setting Global Test Options
DESCRIPTION: Configures global options for all tests, such as browserName. These settings apply as default test options across the test suite.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    browserName: 'chromium',
  },
});
```

----------------------------------------

TITLE: Using Page.evaluate in Java
DESCRIPTION: Examples of using the evaluate method in Java to execute JavaScript expressions in the page context. This method can accept arguments, evaluate strings, and work with ElementHandle objects.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_52

LANGUAGE: java
CODE:
```
Object result = page.evaluate("([x, y]) => {\n" +
  "  return Promise.resolve(x * y);\n" +
  "}", Arrays.asList(7, 8));
System.out.println(result); // prints "56"
```

LANGUAGE: java
CODE:
```
System.out.println(page.evaluate("1 + 2")); // prints "3"
```

LANGUAGE: java
CODE:
```
ElementHandle bodyHandle = page.evaluate("document.body");
String html = (String) page.evaluate("([body, suffix]) => body.innerHTML + suffix", Arrays.asList(bodyHandle, "hello"));
bodyHandle.dispose();
```

----------------------------------------

TITLE: Running Playwright Tests in Debug Mode with Environment Variables (Python)
DESCRIPTION: Commands to run Playwright tests in debug mode by setting the PWDEBUG environment variable. This configures Playwright for debugging, opens the inspector, runs browsers in headed mode, and sets timeout to 0.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
PWDEBUG=1 pytest -s
```

LANGUAGE: batch
CODE:
```
set PWDEBUG=1
pytest -s
```

LANGUAGE: powershell
CODE:
```
$env:PWDEBUG=1
pytest -s
```

----------------------------------------

TITLE: Using New `getBy*` Locators and Assertions in Playwright Python
DESCRIPTION: Provides examples of using the new `getBy*` locator methods like `getByLabel`, `getByRole`, and `getByText` to locate elements based on their accessible properties. It also includes an assertion using `expect` and `to_be_visible` to verify element visibility.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_29

LANGUAGE: python
CODE:
```
page.get_by_label("User Name").fill("John")

page.get_by_label("Password").fill("secret-password")

page.get_by_role("button", name="Sign in").click()

expect(page.get_by_text("Welcome, John!")).to_be_visible()
```

----------------------------------------

TITLE: Extend Playwright Test with Custom Option and Fixture (TypeScript)
DESCRIPTION: Extends the base Playwright test object to define a custom option 'defaultItem' and a fixture 'todoPage'. The 'todoPage' fixture depends on the 'defaultItem' option, demonstrating how options can influence fixture setup.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_16

LANGUAGE: TypeScript
CODE:
```
import { test as base } from '@playwright/test';
import { TodoPage } from './todo-page';

// Declare your options to type-check your configuration.
export type MyOptions = {
  defaultItem: string;
};
type MyFixtures = {
  todoPage: TodoPage;
};

// Specify both option and fixture types.
export const test = base.extend<MyOptions & MyFixtures>({
  // Define an option and provide a default value.
  // We can later override it in the config.
  defaultItem: ['Something nice', { option: true }],

  // Our "todoPage" fixture depends on the option.
  todoPage: async ({ page, defaultItem }, use) => {
    const todoPage = new TodoPage(page);
    await todoPage.goto();
    await todoPage.addToDo(defaultItem);
    await use(todoPage);
    await todoPage.removeAll();
  },
});
export { expect } from '@playwright/test';
```

----------------------------------------

TITLE: Testing with Playwright using Page Object and Hooks
DESCRIPTION: This JavaScript snippet demonstrates writing Playwright tests using a Page Object Model (`TodoPage`) and traditional `beforeEach`/`afterEach` hooks for setup and teardown. It shows how to initialize the Page Object and perform common setup (adding items) and teardown (removing all items) before and after each test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const { test } = require('@playwright/test');
const { TodoPage } = require('./todo-page');

test.describe('todo tests', () => {
  let todoPage;

  test.beforeEach(async ({ page }) => {
    todoPage = new TodoPage(page);
    await todoPage.goto();
    await todoPage.addToDo('item1');
    await todoPage.addToDo('item2');
  });

  test.afterEach(async () => {
    await todoPage.removeAll();
  });

  test('should add an item', async () => {
    await todoPage.addToDo('my item');
    // ...
  });

  test('should remove an item', async () => {
    await todoPage.remove('item1');
    // ...
  });
});
```

----------------------------------------

TITLE: Basic Page Navigation in Python (Async)
DESCRIPTION: Navigates to a URL and waits for the page's load event to fire using Playwright's async API in Python.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
# Navigate the page
await page.goto("https://example.com")
```

----------------------------------------

TITLE: Using toHaveText Assertion in Playwright
DESCRIPTION: Demonstrates how to use toHaveText assertion to validate element text content using both string and regular expression matching. Shows usage with single elements and arrays of elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_35

LANGUAGE: javascript
CODE:
```
const locator = page.locator('.title');
await expect(locator).toHaveText(/Welcome, Test User/);
await expect(locator).toHaveText(/Welcome, .*/);
```

LANGUAGE: java
CODE:
```
assertThat(page.locator(".title")).hasText("Welcome, Test User");
assertThat(page.locator(".title")).hasText(Pattern.compile("Welcome, .*"));
```

LANGUAGE: html
CODE:
```
<ul>
  <li>Text 1</li>
  <li>Text 2</li>
  <li>Text 3</li>
</ul>
```

----------------------------------------

TITLE: Locating Element by Test ID in HTML
DESCRIPTION: Example showing HTML button element with data-testid attribute for testing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_8

LANGUAGE: html
CODE:
```
<button data-testid="directions">Itinéraire</button>
```

----------------------------------------

TITLE: Configure Playwright Test with Conditional Reporter for CI
DESCRIPTION: Define different reporters based on the environment, such as using a concise 'dot' reporter on CI and the default 'list' reporter locally. This is achieved by checking the `process.env.CI` environment variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_3

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  // Concise 'dot' for CI, default 'list' when running locally
  reporter: process.env.CI ? 'dot' : 'list',
});
```

----------------------------------------

TITLE: GitHub Actions Workflow for Java Playwright
DESCRIPTION: This YAML script configures a GitHub Actions workflow for Java Playwright tests. It sets up a Java environment upon push or pull requests, installs dependencies, configures Playwright via Maven, and executes tests, optimizing for CI setups.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_11

LANGUAGE: yml
CODE:
```
name: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: '17'\n    - name: Build & Install\n      run: mvn -B install -D skipTests --no-transfer-progress\n    - name: Ensure browsers are installed\n      run: mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install --with-deps\"\n    - name: Run tests\n      run: mvn test
```

----------------------------------------

TITLE: Mocking API Endpoints in Java
DESCRIPTION: Demonstrates intercepting and mocking API endpoints by handling network requests in Java. The code fulfills a request with a custom status code and body data.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_9

LANGUAGE: java
CODE:
```
page.route("**/api/fetch_data", route -> route.fulfill(new Route.FulfillOptions()
  .setStatus(200)
  .setBody(testData)));
page.navigate("https://example.com");
```

----------------------------------------

TITLE: Setting Base URL with Web Server Configuration
DESCRIPTION: Configuration showing how to set up both web server and baseURL for simplified URL handling in tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-webserver-js.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  webServer: {
    command: 'npm run start',
    url: 'http://localhost:3000',
    reuseExistingServer: !process.env.CI,
  },
  use: {
    baseURL: 'http://localhost:3000',
  },
});
```

----------------------------------------

TITLE: Installing Playwright via pip
DESCRIPTION: Commands to install Playwright Python package using pip package manager and download browser binaries
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-python.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
pip install --upgrade pip
pip install playwright
playwright install
```

----------------------------------------

TITLE: GitHub Actions Workflow for Python Playwright in Containers
DESCRIPTION: This snippet configures running Python Playwright tests using a container-enabled GitHub Actions workflow. It ensures environment consistency and executes tests using a Playwright Docker image for Python, optimizing for CI scenarios.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_14

LANGUAGE: yml
CODE:
```
name: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  playwright:\n    name: 'Playwright Tests'\n    runs-on: ubuntu-latest\n    container:\n      image: mcr.microsoft.com/playwright/python:v%%VERSION%%-noble\n      options: --user 1001\n    steps:\n      - uses: actions/checkout@v4\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r local-requirements.txt\n          pip install -e .\n      - name: Run your tests\n        run: pytest
```

----------------------------------------

TITLE: Configuring Playwright Projects for Multiple Environments
DESCRIPTION: Configuration to run tests against different environments (staging and production) with different retry settings. This setup allows testing the same test suite against multiple target environments.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-projects-js.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  timeout: 60000, // Timeout is shared between all tests.
  projects: [
    {
      name: 'staging',
      use: {
        baseURL: 'staging.example.com',
      },
      retries: 2,
    },
    {
      name: 'production',
      use: {
        baseURL: 'production.example.com',
      },
      retries: 0,
    },
  ],
});
```

----------------------------------------

TITLE: Implementing Accessibility Assertions in Playwright
DESCRIPTION: Examples of using new accessibility assertion methods including toHaveAccessibleName, toHaveAccessibleDescription, and toHaveRole
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_16

LANGUAGE: javascript
CODE:
```
const locator = page.getByRole('button');
await expect(locator).toHaveAccessibleName('Submit');
```

LANGUAGE: javascript
CODE:
```
const locator = page.getByRole('button');
await expect(locator).toHaveAccessibleDescription('Upload a photo');
```

LANGUAGE: javascript
CODE:
```
const locator = page.getByTestId('save-button');
await expect(locator).toHaveRole('button');
```

----------------------------------------

TITLE: Basic Playwright Login Form Interaction
DESCRIPTION: Example showing how to interact with a login form using Playwright's built-in locators to fill username, password and click sign in button.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
await page.getByLabel('User Name').fill('John');

await page.getByLabel('Password').fill('secret-password');

await page.getByRole('button', { name: 'Sign in' }).click();

await expect(page.getByText('Welcome, John!')).toBeVisible();
```

LANGUAGE: java
CODE:
```
page.getByLabel("User Name").fill("John");

page.getByLabel("Password").fill("secret-password");

page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Sign in"))
    .click();

assertThat(page.getByText("Welcome, John!")).isVisible();
```

----------------------------------------

TITLE: Configuring Parallel Test Execution in Playwright
DESCRIPTION: This snippet demonstrates how to configure Playwright tests to run in parallel within a single file. It uses the test.describe.configure method to set the mode to 'parallel'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
import { test } from '@playwright/test';

test.describe.configure({ mode: 'parallel' });

test('runs in parallel 1', async ({ page }) => { /* ... */ });
test('runs in parallel 2', async ({ page }) => { /* ... */ });
```

----------------------------------------

TITLE: Global Teardown Implementation
DESCRIPTION: Example of a global teardown test file that cleans up the database after all tests have completed.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
import { test as teardown } from '@playwright/test';

teardown('delete database', async ({ }) => {
  console.log('deleting test database...');
  // Delete the database
});
```

----------------------------------------

TITLE: Preparing Server State with Playwright API and UI Checks in Python
DESCRIPTION: This test function demonstrates hybrid API and UI automation using Playwright in Python. It programmatically creates issues via API, then uses browser automation to verify the latest created issue appears first in the web UI, checking via a Locator and assertion. Dependencies: Playwright sync API, expect assertions, necessary fixtures and environment variables.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-python.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
def test_last_created_issue_should_be_first_in_the_list(api_request_context: APIRequestContext, page: Page) -> None:\n    def create_issue(title: str) -> None:\n        data = {\n            \"title\": title,\n            \"body\": \"Feature description\",\n        }\n        new_issue = api_request_context.post(\n            f\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\", data=data\n        )\n        assert new_issue.ok\n    create_issue(\"[Feature] request 1\")\n    create_issue(\"[Feature] request 2\")\n    page.goto(f\"https://github.com/{GITHUB_USER}/{GITHUB_REPO}/issues\")\n    first_issue = page.locator(\"a[data-hovercard-type='issue']\").first\n    expect(first_issue).to_have_text(\"[Feature] request 2\")\n
```

----------------------------------------

TITLE: Repository Setup and Teardown for GitHub API Tests with Playwright in Python
DESCRIPTION: This snippet defines a session-scoped, autouse pytest fixture that creates a GitHub test repository before any tests run and deletes it afterwards. It uses Playwright\'s APIRequestContext for issuing POST and DELETE requests to the GitHub API, and enforces valid repository state using assertions. Dependencies: pytest, Playwright sync API, api_request_context fixture, GitHub credentials.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-python.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
# ...\n@pytest.fixture(scope=\"session\", autouse=True)\ndef create_test_repository(\n    api_request_context: APIRequestContext,\n) -> Generator[None, None, None]:\n    # Before all\n    new_repo = api_request_context.post(\"/user/repos\", data={\"name\": GITHUB_REPO})\n    assert new_repo.ok\n    yield\n    # After all\n    deleted_repo = api_request_context.delete(f\"/repos/{GITHUB_USER}/{GITHUB_REPO}\")\n    assert deleted_repo.ok\n
```

----------------------------------------

TITLE: Reusing Signed-in State with Playwright - C#
DESCRIPTION: This snippet demonstrates the process of storing and retrieving authentication states in C# with Playwright. The storage state is saved in a file and used to initialize new browser contexts, allowing tests to reuse logged-in sessions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_14

LANGUAGE: csharp
CODE:
```
// Save storage state into the file.
// Tests are executed in <TestProject>\bin\Debug\netX.0\ therefore relative path is used to reference playwright/.auth created in project root
await context.StorageStateAsync(new()
{
    Path = "../../../playwright/.auth/state.json"
});

// Create a new context with the saved storage state.
var context = await browser.NewContextAsync(new()
{
    StorageStatePath = "../../../playwright/.auth/state.json"
});

```

----------------------------------------

TITLE: Basic JUnit Test Example with Playwright in Java
DESCRIPTION: Demonstrates basic test methods using Playwright fixtures with JUnit annotations for browser automation testing. Shows examples of button clicking, checkbox checking, and Wikipedia search testing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/junit-java.md#2025-04-22_snippet_0

LANGUAGE: java
CODE:
```
package org.example;

import com.microsoft.playwright.Page;
import com.microsoft.playwright.junit.UsePlaywright;
import org.junit.jupiter.api.Test;

import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;

@UsePlaywright
public class TestExample {
  @Test
  void shouldClickButton(Page page) {
    page.navigate("data:text/html,<script>var result;</script><button onclick='result=\"Clicked\"'>Go</button>");
    page.locator("button").click();
    assertEquals("Clicked", page.evaluate("result"));
  }

  @Test
  void shouldCheckTheBox(Page page) {
    page.setContent("<input id='checkbox' type='checkbox'></input>");
    page.locator("input").check();
    assertEquals(true, page.evaluate("window['checkbox'].checked"));
  }

  @Test
  void shouldSearchWiki(Page page) {
    page.navigate("https://www.wikipedia.org/");
    page.locator("input[name=\"search\"]").click();
    page.locator("input[name=\"search\"]").fill("playwright");
    page.locator("input[name=\"search\"]").press("Enter");
    assertThat(page).hasURL("https://en.wikipedia.org/wiki/Playwright");
  }
}
```

----------------------------------------

TITLE: Setting Checkbox State in Playwright with JavaScript
DESCRIPTION: Demonstrates how to set the checked state of a checkbox element using the setChecked method in JavaScript. This example sets the checkbox to checked (true).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_84

LANGUAGE: javascript
CODE:
```
await page.getByRole('checkbox').setChecked(true);
```

----------------------------------------

TITLE: Checking a Checkbox or Radio via Playwright Python (Sync)
DESCRIPTION: Shows the synchronous Python Playwright method for checking a checkbox, including error handling for incorrect element types and detached DOM nodes, ensuring statefulness.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_33

LANGUAGE: Python
CODE:
```
page.get_by_role("checkbox").check()
```

----------------------------------------

TITLE: Checking Element Editability in Playwright
DESCRIPTION: Demonstrates how to verify if an element is editable using Playwright's isEditable method across different programming languages. Returns a boolean indicating whether the element can be edited.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_66

LANGUAGE: javascript
CODE:
```
const editable = await page.getByRole('textbox').isEditable();
```

LANGUAGE: java
CODE:
```
boolean editable = page.getByRole(AriaRole.TEXTBOX).isEditable();
```

LANGUAGE: python-async
CODE:
```
editable = await page.get_by_role("textbox").is_editable()
```

LANGUAGE: python-sync
CODE:
```
editable = page.get_by_role("textbox").is_editable()
```

LANGUAGE: csharp
CODE:
```
Boolean editable = await page.GetByRole(AriaRole.Textbox).IsEditableAsync();
```

----------------------------------------

TITLE: Using SearchPage in C# Tests
DESCRIPTION: Example of how to use the SearchPage class in C# tests. The code demonstrates creating a new instance of the page object and using its async methods to navigate and perform searches.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_11

LANGUAGE: csharp
CODE:
```
using BigEcommerceApp.Tests.Models;

// in the test
var page = new SearchPage(await browser.NewPageAsync());
await page.GotoAsync();
await page.SearchAsync("search query");
```

----------------------------------------

TITLE: Installing Playwright in VS Code
DESCRIPTION: This command is used within Visual Studio Code to install Playwright using the command palette. It sets up the necessary testing environment with Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/getting-started-vscode-js.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
Install Playwright
```

----------------------------------------

TITLE: Serving Static Files in Python (Sync)
DESCRIPTION: Demonstrates how to serve static files as responses to specific routes using Playwright in Python with synchronous syntax. This example shows serving a JSON file for a specific endpoint.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_34

LANGUAGE: python
CODE:
```
page.route("**/xhr_endpoint", lambda route: route.fulfill(path="mock_data.json"))
```

----------------------------------------

TITLE: Combining Locators via Logical 'And' in Playwright Java
DESCRIPTION: In Playwright Java, creates a locator that matches both a 'button' role and the title 'Subscribe'. This narrows the selection for tighter element identification.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_16

LANGUAGE: Java
CODE:
```
Locator button = page.getByRole(AriaRole.BUTTON).and(page.getByTitle("Subscribe"));
```

----------------------------------------

TITLE: Polling for Conditions in Playwright Tests
DESCRIPTION: Demonstrates the new expect.poll method for waiting on arbitrary conditions in tests. This example polls an API endpoint until it returns a 200 status code.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_51

LANGUAGE: javascript
CODE:
```
// Poll the method until it returns an expected result.
await expect.poll(async () => {
  const response = await page.request.get('https://api.example.com');
  return response.status();
}).toBe(200);
```

----------------------------------------

TITLE: Defining Playwright Page Object Model Class
DESCRIPTION: This TypeScript class defines a Page Object Model for a 'todo list' page. It encapsulates interactions with page elements using Playwright's `Locator` and provides methods for common actions like navigating, adding, and removing todo items. It depends on the Playwright `Page` object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import type { Page, Locator } from '@playwright/test';

export class TodoPage {
  private readonly inputBox: Locator;
  private readonly todoItems: Locator;

  constructor(public readonly page: Page) {
    this.inputBox = this.page.locator('input.new-todo');
    this.todoItems = this.page.getByTestId('todo-item');
  }

  async goto() {
    await this.page.goto('https://demo.playwright.dev/todomvc/');
  }

  async addToDo(text: string) {
    await this.inputBox.fill(text);
    await this.inputBox.press('Enter');
  }

  async remove(text: string) {
    const todo = this.todoItems.filter({ hasText: text });
    await todo.hover();
    await todo.getByLabel('Delete').click();
  }

  async removeAll() {
    while ((await this.todoItems.count()) > 0) {
      await this.todoItems.first().hover();
      await this.todoItems.getByLabel('Delete').first().click();
    }
  }
}
```

----------------------------------------

TITLE: Handling Security Details Confirmation with Locator Handler in JavaScript
DESCRIPTION: Sets up a locator handler to automatically skip a security details confirmation page when it appears. The handler activates when text matching 'Confirm your security details' is detected and clicks 'Remind me later' button.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_81

LANGUAGE: javascript
CODE:
```
// Setup the handler.
await page.addLocatorHandler(page.getByText('Confirm your security details'), async () => {
  await page.getByRole('button', { name: 'Remind me later' }).click();
});

// Write the test as usual.
await page.goto('https://example.com');
await page.getByRole('button', { name: 'Start here' }).click();
```

----------------------------------------

TITLE: Configuring axe-core to Scan a Specific Part of a Page with Playwright - JavaScript
DESCRIPTION: This example demonstrates how to limit an accessibility scan to a specific section of the page using AxeBuilder.include. The test navigates to a page, interacts with the UI to reveal a navigation menu, waits for the desired element to be present, and then restricts the accessibility analysis to the #navigation-menu-flyout element. Useful for targeting dynamic or interactive regions; dependencies are Playwright and @axe-core/playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
test('navigation menu should not have automatically detectable accessibility violations', async ({
  page,
}) => {
  await page.goto('https://your-site.com/');

  await page.getByRole('button', { name: 'Navigation Menu' }).click();

  // It is important to waitFor() the page to be in the desired
  // state *before* running analyze(). Otherwise, axe might not
  // find all the elements your test expects it to scan.
  await page.locator('#navigation-menu-flyout').waitFor();

  const accessibilityScanResults = await new AxeBuilder({ page })
      .include('#navigation-menu-flyout')
      .analyze();

  expect(accessibilityScanResults.violations).toEqual([]);
});
```

----------------------------------------

TITLE: Changing Test Timeout in Playwright
DESCRIPTION: This snippet demonstrates how to change the timeout for a test using test.setTimeout. It shows examples of changing timeout for individual tests, hooks, and test groups.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_34

LANGUAGE: javascript
CODE:
```
test('very slow test', async ({ page }) => {
  test.setTimeout(120000);
  // ...
});

test.beforeEach(async ({ page }, testInfo) => {
  // Extend timeout for all tests running this hook by 30 seconds.
  test.setTimeout(testInfo.timeout + 30000);
});

test.beforeAll(async () => {
  // Set timeout for this hook.
  test.setTimeout(60000);
});

test.describe('group', () => {
  // Applies to all tests in this group.
  test.describe.configure({ timeout: 60000 });

  test('test one', async () => { /* ... */ });
  test('test two', async () => { /* ... */ });
  test('test three', async () => { /* ... */ });
});
```

----------------------------------------

TITLE: Filtering Locators in Playwright
DESCRIPTION: Shows how to use Locator.filter() to narrow down element selection based on criteria like text content or the presence of child elements. The method can be chained to apply multiple filters sequentially.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_60

LANGUAGE: javascript
CODE:
```
const rowLocator = page.locator('tr');
// ...
await rowLocator
    .filter({ hasText: 'text in column 1' })
    .filter({ has: page.getByRole('button', { name: 'column 2 button' }) })
    .screenshot();
```

LANGUAGE: java
CODE:
```
Locator rowLocator = page.locator("tr");
// ...
rowLocator
    .filter(new Locator.FilterOptions().setHasText("text in column 1"))
    .filter(new Locator.FilterOptions().setHas(
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("column 2 button"))
    ))
    .screenshot();
```

LANGUAGE: python
CODE:
```
row_locator = page.locator("tr")
# ...
await row_locator.filter(has_text="text in column 1").filter(
    has=page.get_by_role("button", name="column 2 button")
).screenshot()
```

LANGUAGE: python
CODE:
```
row_locator = page.locator("tr")
# ...
row_locator.filter(has_text="text in column 1").filter(
    has=page.get_by_role("button", name="column 2 button")
).screenshot()
```

LANGUAGE: csharp
CODE:
```
var rowLocator = page.Locator("tr");
// ...
await rowLocator
    .Filter(new() { HasText = "text in column 1" })
    .Filter(new() {
        Has = page.GetByRole(AriaRole.Button, new() { Name = "column 2 button" } )
    })
    .ScreenshotAsync();
```

----------------------------------------

TITLE: Interacting with an Element using Locator (Recommended) in C#
DESCRIPTION: Demonstrates the recommended approach using Playwright Locators (`page.GetByText`) in C# to interact with elements. Locators automatically re-fetch the element before each action (e.g., hover, click), avoiding staleness issues.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_24

LANGUAGE: csharp
CODE:
```
```csharp
var locator = page.GetByText("Submit");
await locator.HoverAsync();
await locator.ClickAsync();
```
```

----------------------------------------

TITLE: Handling Popups and Waiting for DOM Content in Java
DESCRIPTION: Shows how to wait for a popup to be triggered by a button click and then wait for the 'domcontentloaded' state before interacting with the popup in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_126

LANGUAGE: java
CODE:
```
Page popup = page.waitForPopup(() -> {
  page.getByRole(AriaRole.BUTTON).click(); // Click triggers a popup.
});
// Wait for the "DOMContentLoaded" event
popup.waitForLoadState(LoadState.DOMCONTENTLOADED);
System.out.println(popup.title()); // Popup is ready to use.
```

----------------------------------------

TITLE: Basic Playwright Trace Recording (JavaScript)
DESCRIPTION: Demonstrates the fundamental workflow for recording a Playwright trace in JavaScript. It initializes a browser context, starts tracing with screenshots and snapshots enabled, navigates a page, and then stops tracing, saving the output to 'trace.zip'. Requires a Playwright browser context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
const browser = await chromium.launch();
const context = await browser.newContext();
await context.tracing.start({ screenshots: true, snapshots: true });
const page = await context.newPage();
await page.goto('https://playwright.dev');
await context.tracing.stop({ path: 'trace.zip' });
```

----------------------------------------

TITLE: Fetching and Modifying API Response in Python (Sync)
DESCRIPTION: Demonstrates how to fetch an API response, modify its JSON content, and then fulfill the route with the modified response using Playwright in Python with synchronous syntax. This example adds a new breed to the dog API response.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_24

LANGUAGE: python
CODE:
```
def handle(route):
    response = route.fetch()
    json = response.json()
    json["message"]["big_red_dog"] = []
    route.fulfill(response=response, json=json)

page.route("https://dog.ceo/api/breeds/list/all", handle)
```

----------------------------------------

TITLE: Initializing Playwright Project via pnpm - Bash
DESCRIPTION: Creates a Playwright test project using pnpm, generating configuration and example tests interactively. Requires Node.js and pnpm installed. Allows customization of test folder, test language, browser download, and CI workflow setup. Installs Playwright-related packages as development dependencies within the project.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create playwright
```

----------------------------------------

TITLE: Asserting Element Attribute Existence in JavaScript
DESCRIPTION: Example of using toHaveAttribute to assert the presence of an attribute without checking its value. This is useful for verifying boolean attributes like 'disabled' or 'hidden'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_26

LANGUAGE: javascript
CODE:
```
const locator = page.locator('input');
// Assert attribute existence.
await expect(locator).toHaveAttribute('disabled');
await expect(locator).not.toHaveAttribute('open');
```

----------------------------------------

TITLE: Waiting for Navigation After Timeout Click in Java
DESCRIPTION: Demonstrates how to wait for navigation that happens after a timeout-based click in Java. This method returns after navigation has finished.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_131

LANGUAGE: java
CODE:
```
// The method returns after navigation has finished
Response response = page.waitForNavigation(() -> {
  // This action triggers the navigation after a timeout.
  page.getByText("Navigate after timeout").click();
});
```

----------------------------------------

TITLE: Interacting with an Element using Locator (Recommended) in Java
DESCRIPTION: Demonstrates the recommended approach using Playwright Locators (`page.getByText`) in Java to interact with elements. Locators automatically re-fetch the element before each action (e.g., hover, click), avoiding staleness issues.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_21

LANGUAGE: java
CODE:
```
```java
Locator locator = page.getByText("Submit");
locator.hover();
locator.click();
```
```

----------------------------------------

TITLE: Running Playwright Codegen in JavaScript
DESCRIPTION: This command runs the Playwright code generator for testing a specified URL in JavaScript. It launches a browser where you can interact with the site, recording actions and assertions to build test scripts. No external dependencies are specified, and the URL to be tested is optional.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen-intro.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx playwright codegen demo.playwright.dev/todomvc
```

----------------------------------------

TITLE: Testing Status Text with Playwright
Java
DESCRIPTION: This Java snippet showcases an example of using Playwright Assertions to verify that a status element has the text 'Submitted' following a button click. It imports static Playwright assertions for functionality.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-playwrightassertions.md#2025-04-22_snippet_3

LANGUAGE: java
CODE:
```
import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

public class TestExample {
  // ...
  @Test
  void statusBecomesSubmitted() {
    // ...
    page.locator("#submit-button").click();
    assertThat(page.locator(".status")).hasText("Submitted");
  }
}
```

----------------------------------------

TITLE: Using the Context Fixture in Playwright Test
DESCRIPTION: Shows how to use the context fixture to configure the browser context for a test, such as setting up route interception. Each test gets an isolated BrowserContext instance.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-fixtures.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
test('example test', async ({ page, context }) => {
  await context.route('*external.com/*', route => route.abort());
  // ...
});
```

----------------------------------------

TITLE: Running Playwright Tests with NPM Bash
DESCRIPTION: This snippet executes Playwright tests using npm command `npx playwright test`. It assumes the environment has been set up, with all dependencies installed. It is essential for validating code changes through automated tests in JavaScript projects.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
npx playwright test
```

----------------------------------------

TITLE: Setting Viewport via Context Options (JavaScript Library)
DESCRIPTION: This snippet shows how to create a new browser context with a specific viewport size using the Playwright JavaScript library. The `viewport` option is passed directly to `browser.newContext`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
```js tab=js-library
// Create context with given viewport
const context = await browser.newContext({
  viewport: { width: 1280, height: 1024 }
});
```
```

----------------------------------------

TITLE: Filter Elements by Text
DESCRIPTION: Demonstrates filtering elements by role and text content using chained locator methods
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_31

LANGUAGE: javascript
CODE:
```
await page
    .getByRole('listitem')
    .filter({ hasText: 'orange' })
    .click();
```

LANGUAGE: python
CODE:
```
await page.get_by_role("listitem").filter(has_text="orange").click()
```

LANGUAGE: java
CODE:
```
page.getByRole(AriaRole.LISTITEM)
    .filter(new Locator.FilterOptions().setHasText("orange"))
    .click();
```

LANGUAGE: csharp
CODE:
```
await page
    .GetByRole(AriaRole.Listitem)
    .Filter(new() { HasText = "orange" })
    .ClickAsync();
```

----------------------------------------

TITLE: Configure Playwright Network Options (TypeScript)
DESCRIPTION: This snippet illustrates how to configure network-related options within the Playwright test configuration, such as controlling automatic downloads, adding extra HTTP headers, setting HTTP credentials, ignoring HTTPS errors, emulating offline mode, and configuring a proxy. These settings affect how the browser context interacts with the network.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    // Whether to automatically download all the attachments.
    acceptDownloads: false,

    // An object containing additional HTTP headers to be sent with every request.
    extraHTTPHeaders: {
      'X-My-Header': 'value',
    },

    // Credentials for HTTP authentication.
    httpCredentials: {
      username: 'user',
      password: 'pass',
    },

    // Whether to ignore HTTPS errors during navigation.
    ignoreHTTPSErrors: true,

    // Whether to emulate network being offline.
    offline: true,

    // Proxy settings used for all pages in the test.
    proxy: {
      server: 'http://myproxy.com:3128',
      bypass: 'localhost',
    },
  },
});
```

----------------------------------------

TITLE: Setting Viewport and High-DPI via Context/Page (JavaScript Library)
DESCRIPTION: This snippet provides examples using the Playwright JavaScript library for: creating a context with a specific viewport, resizing the viewport for an individual page using `page.setViewportSize`, and creating a context that emulates a high-DPI screen by setting both `viewport` and `deviceScaleFactor`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
```js tab=js-library
// Create context with given viewport
const context = await browser.newContext({
  viewport: { width: 1280, height: 1024 }
});

// Resize viewport for individual page
await page.setViewportSize({ width: 1600, height: 1200 });

// Emulate high-DPI
const context = await browser.newContext({
  viewport: { width: 2560, height: 1440 },
  deviceScaleFactor: 2,
});
```
```

----------------------------------------

TITLE: Using selectOption in Playwright with Python (async)
DESCRIPTION: Demonstrates how to select options in a <select> element using different selection methods in Python with async syntax. Shows single selection by value, by label, and multiple selection.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_80

LANGUAGE: python
CODE:
```
# single selection matching the value or label
await element.select_option("blue")
# single selection matching the label
await element.select_option(label="blue")
# multiple selection for blue, red and second option
await element.select_option(value=["red", "green", "blue"])
```

----------------------------------------

TITLE: Error Handling in Playwright
DESCRIPTION: Examples showing how to handle timeouts and other errors in Playwright using try-catch blocks and specific error classes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-playwright.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
try {
  await page.locator('.foo').waitFor();
} catch (e) {
  if (e instanceof playwright.errors.TimeoutError) {
    // Do something if this is a timeout.
  }
}
```

LANGUAGE: python
CODE:
```
try:
  await page.wait_for_selector(".foo")
except TimeoutError as e:
  pass
  # do something if this is a timeout.
```

----------------------------------------

TITLE: Launching Browser and Navigating Page in Sync Playwright Python
DESCRIPTION: This Python code snippet uses synchronous Playwright API to automate browser tasks. It requires the Playwright package and Python environment, demonstrating how to launch a Firefox browser, create a new page, and navigate to a webpage synchronously.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_3

LANGUAGE: Python
CODE:
```
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    firefox = playwright.firefox
    browser = firefox.launch()
    page = browser.new_page()
    page.goto("https://example.com")
    browser.close()

with sync_playwright() as playwright:
    run(playwright)
```

----------------------------------------

TITLE: Testing Status Text with Playwright
JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to use Playwright's expect function to wait for a status element to have a specific text after a button click. It uses the Page object and relies on the Playwright test library for structure.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-playwrightassertions.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
import { test, expect } from '@playwright/test';

test('status becomes submitted', async ({ page }) => {
  // ...
  await page.locator('#submit-button').click();
  await expect(page.locator('.status')).toHaveText('Submitted');
});
```

----------------------------------------

TITLE: Auto-waiting Navigation and Interaction in C#
DESCRIPTION: Demonstrates how Playwright in C# automatically waits for elements to be actionable before interacting with them after navigation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_9

LANGUAGE: csharp
CODE:
```
// Navigate and click element
// Click will auto-wait for the element
await page.GotoAsync("https://example.com");
await page.GetByText("Example Domain").ClickAsync();
```

----------------------------------------

TITLE: Device Emulation in Playwright
DESCRIPTION: Examples demonstrating how to use device emulation for responsive testing across different browsers and devices using Playwright's device presets.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-playwright.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
const { webkit, devices } = require('playwright');
const iPhone = devices['iPhone 6'];

(async () => {
  const browser = await webkit.launch();
  const context = await browser.newContext({
    ...iPhone
  });
  const page = await context.newPage();
  await page.goto('http://example.com');
  // other actions...
  await browser.close();
})();
```

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using System.Threading.Tasks;

class PlaywrightExample
{
    public static async Task Main()
    {
        using var playwright = await Playwright.CreateAsync();
        await using var browser = await playwright.Webkit.LaunchAsync();
        await using var context = await browser.NewContextAsync(playwright.Devices["iPhone 6"]);

        var page = await context.NewPageAsync();
        await page.GotoAsync("https://www.theverge.com");
        // other actions...
    }
}
```

----------------------------------------

TITLE: Sending POST Request with JSON Data using Playwright APIRequestContext `fetch`
DESCRIPTION: Demonstrates how to send an HTTP POST request with a JSON payload using the `fetch` method of Playwright's `APIRequestContext` across multiple languages. The request body is typically provided via the `data` (or `DataObject` in C#) option, which handles serialization. Requires an initialized `APIRequestContext`. Returns an `APIResponse` (or equivalent Promise/Task).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
```js
await request.fetch('https://example.com/api/createBook', {
  method: 'post',
  data: {
    title: 'Book Title',
    author: 'John Doe',
  }
});
```
```

LANGUAGE: java
CODE:
```
```java
Map<String, Object> data = new HashMap();
data.put("title", "Book Title");
data.put("body", "John Doe");
request.fetch("https://example.com/api/createBook", RequestOptions.create().setMethod("post").setData(data));
```
```

LANGUAGE: python
CODE:
```
```python
data = {
    "title": "Book Title",
    "body": "John Doe",
}
api_request_context.fetch("https://example.com/api/createBook", method="post", data=data)
```
```

LANGUAGE: csharp
CODE:
```
```csharp
var data = new Dictionary<string, object>() {
  { "title", "Book Title" },
  { "body", "John Doe" }
};
await Request.FetchAsync("https://example.com/api/createBook", new() { Method = "post", DataObject = data });
```
```

----------------------------------------

TITLE: Writing Basic Playwright Tests in Python
DESCRIPTION: Demonstrates how to write two simple Playwright tests in Python. The first test checks the page title, while the second test clicks a link and verifies a heading.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-python.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
import re
from playwright.sync_api import Page, expect

def test_has_title(page: Page):
    page.goto("https://playwright.dev/")

    # Expect a title "to contain" a substring.
    expect(page).to_have_title(re.compile("Playwright"))

def test_get_started_link(page: Page):
    page.goto("https://playwright.dev/")

    # Click the get started link.
    page.get_by_role("link", name="Get started").click()

    # Expects page to have a heading with the name of Installation.
    expect(page.get_by_role("heading", name="Installation")).to_be_visible()
```

----------------------------------------

TITLE: Asserting Element Contains Class with Playwright TypeScript
DESCRIPTION: Asserts that the element located by the locator has the specified CSS classes. This assertion automatically retries until the element has the classes or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_13

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toContainClass()
```

----------------------------------------

TITLE: Intercepting Network Requests | Playwright Test TypeScript
DESCRIPTION: This Playwright Test snippet, written in TypeScript, shows how to intercept and handle network requests made by the page. It uses `page.route('**', ...)` to match all URLs, logs the URL of each request to the console, and then allows the request to proceed using `route.continue()`.
SOURCE: https://github.com/microsoft/playwright/blob/main/README.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
import { test } from '@playwright/test';

test('Intercept network requests', async ({ page }) => {
  // Log and continue all network requests
  await page.route('**', route => {
    console.log(route.request().url());
    route.continue();
  });
  await page.goto('http://todomvc.com');
});
```

----------------------------------------

TITLE: Asserting Text Content with Playwright Async Matcher (JavaScript)
DESCRIPTION: Illustrates an asynchronous web assertion in Playwright using the `toHaveText` matcher on a `Locator`. Playwright will automatically wait and re-check the element until it contains the specified text or the assertion timeout is reached.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
await expect(page.getByTestId('status')).toHaveText('Submitted');
```

----------------------------------------

TITLE: Clearing Input Fields with Playwright Locator
DESCRIPTION: Demonstrates how to clear an input field using Playwright's Locator API across different programming languages. The method waits for actionability checks, focuses the element, clears it and triggers an input event.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_35

LANGUAGE: javascript
CODE:
```
await page.getByRole('textbox').clear();
```

LANGUAGE: java
CODE:
```
page.getByRole(AriaRole.TEXTBOX).clear();
```

LANGUAGE: python
CODE:
```
await page.get_by_role("textbox").clear()
```

LANGUAGE: csharp
CODE:
```
await page.GetByRole(AriaRole.Textbox).ClearAsync();
```

----------------------------------------

TITLE: Filtering Locators by Child Element using Playwright
DESCRIPTION: This code shows how to filter locators based on the presence of a child element and click a specific button using Playwright in different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_19

LANGUAGE: javascript
CODE:
```
await page
    .getByRole('listitem')
    .filter({ has: page.getByRole('heading', { name: 'Product 2' }) })
    .getByRole('button', { name: 'Add to cart' })
    .click();
```

LANGUAGE: java
CODE:
```
page.getByRole(AriaRole.LISTITEM)
    .filter(new Locator.FilterOptions()
        .setHas(page.GetByRole(AriaRole.HEADING, new Page.GetByRoleOptions()
        .setName("Product 2"))))
    .getByRole(AriaRole.BUTTON,
               new Page.GetByRoleOptions().setName("Add to cart"))
    .click();
```

LANGUAGE: python
CODE:
```
await page.get_by_role("listitem").filter(
    has=page.get_by_role("heading", name="Product 2")
).get_by_role("button", name="Add to cart").click()
```

LANGUAGE: csharp
CODE:
```
await page
    .GetByRole(AriaRole.Listitem)
    .Filter(new() {
        Has = page.GetByRole(AriaRole.Heading, new() {
            Name = "Product 2"
        })
    })
    .GetByRole(AriaRole.Button, new() { Name = "Add to cart" })
    .ClickAsync();
```

----------------------------------------

TITLE: Configuring GitHub Actions for Playwright Tests (Python)
DESCRIPTION: This YAML configuration defines a GitHub Actions workflow for executing Playwright tests within a Python project. It triggers on pushes and pull requests to main/master branches. The workflow checks out code, sets up Python 3.11, installs dependencies listed in `requirements.txt` using pip, installs Playwright browsers and their dependencies, runs tests using `pytest` while retaining traces on failure, and uploads the contents of the `test-results/` directory (containing traces) as an artifact named `playwright-traces`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci-intro.md#2025-04-22_snippet_1

LANGUAGE: yml
CODE:
```
name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Ensure browsers are installed
      run: python -m playwright install --with-deps
    - name: Run your tests
      run: pytest --tracing=retain-on-failure
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-traces
        path: test-results/

```

----------------------------------------

TITLE: Basic Playwright Locator Usage in C#
DESCRIPTION: Shows how to create a Locator for an element using page.Locator and perform an action like ClickAsync on it. Locators represent the logic to find an element and are strict by default.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_53

LANGUAGE: csharp
CODE:
```
var locator = page.Locator("button");
await locator.ClickAsync();
```

----------------------------------------

TITLE: Asserting Locator Text with Playwright Assertions in Java
DESCRIPTION: Shows how to use `assertThat(locator).hasText()` from `com.microsoft.playwright.assertions.PlaywrightAssertions` in a Java JUnit test method to verify that an element found by `.status` contains the text "Submitted" after clicking a button. Requires the Playwright Java library and its assertions module.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
```java
// ...
import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

public class TestLocator {
  // ...
  @Test
  void statusBecomesSubmitted() {
    // ...
    page.getByRole(AriaRole.BUTTON).click();
    assertThat(page.locator(".status")).hasText("Submitted");
  }
}
```
```

----------------------------------------

TITLE: Waiting for Specific URL After Click in Python (Sync)
DESCRIPTION: Demonstrates how to explicitly wait for navigation to a specific URL pattern after clicking an element using Playwright's synchronous API in Python.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
page.get_by_text("Click me").click()
page.wait_for_url("**/login")
```

----------------------------------------

TITLE: Recording Playwright Trace (Python)
DESCRIPTION: Demonstrates how to use the Playwright BrowserContext.tracing API in Python to record a trace of browser interactions. This includes launching a browser, creating a context, starting tracing with screenshot and snapshot options, navigating to a URL, and stopping the trace to save it to a zip file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_55

LANGUAGE: python
CODE:
```
browser = chromium.launch()
context = browser.new_context()

# Start tracing before creating / navigating a page.
context.tracing.start(screenshots=True, snapshots=True)

page.goto("https://playwright.dev")

# Stop tracing and export it into a zip archive.
context.tracing.stop(path = "trace.zip")
```

----------------------------------------

TITLE: Verifying Element Visibility in Playwright
DESCRIPTION: Shows how to check if an element is visible using Playwright's isVisible method across different programming languages. Returns a boolean indicating whether the element is visible.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_69

LANGUAGE: javascript
CODE:
```
const visible = await page.getByRole('button').isVisible();
```

LANGUAGE: java
CODE:
```
boolean visible = page.getByRole(AriaRole.BUTTON).isVisible();
```

LANGUAGE: python-async
CODE:
```
visible = await page.get_by_role("button").is_visible()
```

LANGUAGE: python-sync
CODE:
```
visible = page.get_by_role("button").is_visible()
```

LANGUAGE: csharp
CODE:
```
Boolean visible = await page.GetByRole(AriaRole.Button).IsVisibleAsync();
```

----------------------------------------

TITLE: Using beforeEach Hook for Page Navigation in Playwright Tests
DESCRIPTION: Shows how to use the beforeEach hook to navigate to a starting URL before each test. This pattern enables DRY test code by centralizing common setup operations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.beforeEach(async ({ page }) => {
  console.log(`Running ${test.info().title}`);
  await page.goto('https://my.start.url/');
});

test('my test', async ({ page }) => {
  expect(page.url()).toBe('https://my.start.url/');
});
```

----------------------------------------

TITLE: Using SnapshotAssertions.toMatchSnapshot for Customizable Screenshot Assertions (JavaScript)
DESCRIPTION: This set of examples illustrates calling toMatchSnapshot with various parameters in Playwright. The first usage shows basic usage with a named snapshot, while others pass an options object to customize the allowable difference in pixels ('maxDiffPixels'), a threshold for image matching, and the ability to organize snapshots into client directories. Calls are made with the result of page.screenshot() and are meant for automated UI tests with Playwright's built-in snapshot comparison system.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-snapshotassertions.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
// Basic usage.
expect(await page.screenshot()).toMatchSnapshot('landing-page.png');
```

LANGUAGE: js
CODE:
```
// Pass options to customize the snapshot comparison and have a generated name.
expect(await page.screenshot()).toMatchSnapshot('landing-page.png', {
  maxDiffPixels: 27, // allow no more than 27 different pixels.
});
```

LANGUAGE: js
CODE:
```
// Configure image matching threshold.
expect(await page.screenshot()).toMatchSnapshot('landing-page.png', { threshold: 0.3 });
```

LANGUAGE: js
CODE:
```
// Bring some structure to your snapshot files by passing file path segments.
expect(await page.screenshot()).toMatchSnapshot(['landing', 'step2.png']);
expect(await page.screenshot()).toMatchSnapshot(['landing', 'step3.png']);
```

----------------------------------------

TITLE: Playwright Assertions Example
DESCRIPTION: Shows how to use Playwright's assertThat functionality to perform assertions on page elements. Demonstrates title verification using pattern matching.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-java.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
import java.util.regex.Pattern;
import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

assertThat(page).hasTitle(Pattern.compile("Playwright"));
```

----------------------------------------

TITLE: Using to_match_aria_snapshot with an inline snapshot in Python (async)
DESCRIPTION: Asynchronous Python example of verifying accessibility structure using to_match_aria_snapshot. The method confirms that the body element contains the expected accessibility elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_39

LANGUAGE: python
CODE:
```
await page.goto("https://demo.playwright.dev/todomvc/")
await expect(page.locator('body')).to_match_aria_snapshot('''
  - heading "todos"
  - textbox "What needs to be done?"
''')
```

----------------------------------------

TITLE: Checking/Unchecking Checkboxes and Radio Buttons in Playwright
DESCRIPTION: Illustrates using the `Locator.check` (or `CheckAsync` in C#) method to check or uncheck checkboxes (`input[type=checkbox]`, `[role=checkbox]`) and select radio buttons (`input[type=radio]`). Includes examples of asserting the checked state of an element using Playwright's assertion capabilities (`expect().toBeChecked()`, `assertTrue().isChecked()`, `expect().to_be_checked()`, `Expect().ToBeCheckedAsync()`).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
```js
// Check the checkbox
await page.getByLabel('I agree to the terms above').check();

// Assert the checked state
expect(page.getByLabel('Subscribe to newsletter')).toBeChecked();

// Select the radio button
await page.getByLabel('XL').check();
```
```

LANGUAGE: java
CODE:
```
```java
// Check the checkbox
page.getByLabel("I agree to the terms above").check();

// Assert the checked state
assertTrue(page.getByLabel("Subscribe to newsletter")).isChecked();

// Select the radio button
page.getByLabel("XL").check();
```
```

LANGUAGE: python
CODE:
```
```python async
# Check the checkbox
await page.get_by_label('I agree to the terms above').check()

# Assert the checked state
await expect(page.get_by_label('Subscribe to newsletter')).to_be_checked()

# Select the radio button
await page.get_by_label('XL').check()
```
```

LANGUAGE: python
CODE:
```
```python sync
# Check the checkbox
page.get_by_label('I agree to the terms above').check()

# Assert the checked state
expect(page.get_by_label('Subscribe to newsletter')).to_be_checked()

# Select the radio button
page.get_by_label('XL').check()
```
```

LANGUAGE: csharp
CODE:
```
```csharp
// Check the checkbox
await page.GetByLabel("I agree to the terms above").CheckAsync();

// Assert the checked state
await Expect(page.GetByLabel("Subscribe to newsletter")).ToBeCheckedAsync();

// Select the radio button
await page.GetByLabel("XL").CheckAsync();
```
```

----------------------------------------

TITLE: GitHub Actions Workflow for JavaScript Playwright
DESCRIPTION: This snippet defines a GitHub Actions workflow that triggers on push or pull requests to specific branches. It installs dependencies, sets up Playwright, executes tests, and uploads a report. The setup uses Ubuntu and is tailored for Node.js applications.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_9

LANGUAGE: yml
CODE:
```
name: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-node@v4\n      with:\n        node-version: lts/*\n    - name: Install dependencies\n      run: npm ci\n    - name: Install Playwright Browsers\n      run: npx playwright install --with-deps\n    - name: Run Playwright tests\n      run: npx playwright test\n    - uses: actions/upload-artifact@v4\n      if: ${{ !cancelled() }}\n      with:\n        name: playwright-report\n        path: playwright-report/\n        retention-days: 30
```

----------------------------------------

TITLE: Using toContain Method for String and Array Checking
DESCRIPTION: Demonstrates two uses of the 'toContain' method: one for checking substrings in a string, and another for checking if an array or Set contains a specific item.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
const value = 'Hello, World';
expect(value).toContain('World');
expect(value).toContain(',');
```

LANGUAGE: javascript
CODE:
```
const value = [1, 2, 3];
expect(value).toContain(2);
expect(new Set(value)).toContain(2);
```

----------------------------------------

TITLE: Creating Multiple Contexts with Sync Playwright (Python)
DESCRIPTION: Provides the synchronous Python code using `playwright.sync_api` to launch a browser and create two separate, isolated `BrowserContext` instances (`user_context`, `admin_context`) via `browser.new_context()`. This facilitates testing multi-user interactions in synchronous Python scripts.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_10

LANGUAGE: python
CODE:
```
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    # create a chromium browser instance
    chromium = playwright.chromium
    browser = chromium.launch()

    # create two isolated browser contexts
    user_context = browser.new_context()
    admin_context = browser.new_context()

    # create pages and interact with contexts independently

with sync_playwright() as playwright:
    run(playwright)
```

----------------------------------------

TITLE: Configuring Test Hooks with Playwright in JavaScript
DESCRIPTION: This snippet demonstrates how to use the 'beforeEach' hook to perform actions before each test, such as navigating to a login page and authenticating the user. Dependencies include the Playwright library, and it assumes a test account when accessing external URLs. Each test begins with the page in a signed-in state, allowing for isolated test cases.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { test } from '@playwright/test';

test.beforeEach(async ({ page }) => {
  // Runs before each test and signs in each page.
  await page.goto('https://github.com/login');
  await page.getByLabel('Username or email address').fill('username');
  await page.getByLabel('Password').fill('password');
  await page.getByRole('button', { name: 'Sign in' }).click();
});

test('first', async ({ page }) => {
  // page is signed in.
});

test('second', async ({ page }) => {
  // page is signed in.
});
```

----------------------------------------

TITLE: Running Playwright Tests in UI Mode via npx - Bash
DESCRIPTION: Starts Playwright tests in UI mode using npx, providing a graphical interface for debugging and monitoring test execution. Offers features such as time travel debugging, watch mode, and step-by-step inspection. Requires project setup and available test files.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_10

LANGUAGE: bash
CODE:
```
npx playwright test --ui
```

----------------------------------------

TITLE: Hover and Click on Locator Object in Python Sync
DESCRIPTION: Utilizes a locator in sync Python to hover and click on 'Submit'. Each method call queries the DOM for the most current element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_13

LANGUAGE: Python
CODE:
```
locator = page.get_by_text("Submit")
locator.hover()
locator.click()
```

----------------------------------------

TITLE: Running Playwright Tests via CLI
DESCRIPTION: Examples of common Playwright test execution commands, including running all tests, specific files, and tests matching certain criteria.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-cli-js.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx playwright test
```

LANGUAGE: bash
CODE:
```
npx playwright test tests/todo-page.spec.ts
```

LANGUAGE: bash
CODE:
```
npx playwright test tests/todo-page/ tests/landing-page/
```

LANGUAGE: bash
CODE:
```
npx playwright test my-spec my-spec-2
```

LANGUAGE: bash
CODE:
```
npx playwright test my-spec.ts:42
```

LANGUAGE: bash
CODE:
```
npx playwright test -g "add a todo item"
```

----------------------------------------

TITLE: Routing from a HAR File in Playwright Java
DESCRIPTION: Demonstrates using the `context.routeFromHAR` method to serve matching network responses directly from a previously recorded HAR file, enabling offline testing or mocking.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_39

LANGUAGE: java
CODE:
```
context.routeFromHAR(Paths.get("example.har"));
```

----------------------------------------

TITLE: Registering Locator Handler in Playwright C#
DESCRIPTION: Demonstrates how to use `Page.AddLocatorHandlerAsync` to register a callback that handles elements like cookie dialogs when they become visible. The handler accepts a locator and an async action to perform when the element is found.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_21

LANGUAGE: csharp
CODE:
```
// Setup the handler.
await Page.AddLocatorHandlerAsync(
    Page.GetByRole(AriaRole.Heading, new() { Name = "Hej! You are in control of your cookies." }),
    async () =>
    {
        await Page.GetByRole(AriaRole.Button, new() { Name = "Accept all" }).ClickAsync();
    });
// Write the test as usual.
await Page.GotoAsync("https://www.ikea.com/");
await Page.GetByRole(AriaRole.Link, new() { Name = "Collection of blue and white" }).ClickAsync();
await Expect(Page.GetByRole(AriaRole.Heading, new() { Name = "Light and easy" })).ToBeVisibleAsync();
```

----------------------------------------

TITLE: Verifying Issue Creation via UI and API with Playwright in C#
DESCRIPTION: Illustrates creating a GitHub issue through browser automation using Playwright's Page API and confirming its existence via an API GET request in C#. The test simulates user interaction to fill in and submit a new issue, then checks the server state with an authenticated API request and appropriate string assertions. Dependencies include Playwright for .NET, a browser context, and matching authentication states across UI and API clients; it requires repository and user information provided in variables.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-csharp.md#2025-04-22_snippet_5

LANGUAGE: csharp
CODE:
```
// Make sure to extend from PageTest if you want to use the Page class.
class GitHubTests : PageTest
{
    [TestMethod]
    public async Task LastCreatedIssueShouldBeOnTheServer()
    {
        await Page.GotoAsync("https://github.com/" + USER + "/" + REPO + "/issues");
        await Page.Locator("text=New Issue").ClickAsync();
        await Page.Locator("[aria-label='Title']").FillAsync("Bug report 1");
        await Page.Locator("[aria-label='Comment body']").FillAsync("Bug description");
        await Page.Locator("text=Submit new issue").ClickAsync();
        var issueId = Page.Url.Substring(Page.Url.LastIndexOf('/'));

        var newIssue = await Request.GetAsync("https://github.com/" + USER + "/" + REPO + "/issues/" + issueId);
        await Expect(newIssue).ToBeOKAsync();
        StringAssert.Contains(await newIssue.TextAsync(), "Bug report 1");
    }
}

```

----------------------------------------

TITLE: Locating Elements by Text Content
DESCRIPTION: Demonstrates different ways to locate elements by their text content, including exact matches, substrings, and regular expressions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_128

LANGUAGE: html
CODE:
```
<div>Hello <span>world</span></div>
<div>Hello</div>
```

LANGUAGE: javascript
CODE:
```
// Matches <span>
page.getByText('world');

// Matches first <div>
page.getByText('Hello world');

// Matches second <div>
page.getByText('Hello', { exact: true });

// Matches both <div>s
page.getByText(/Hello/);

// Matches second <div>
page.getByText(/^hello$/i);
```

----------------------------------------

TITLE: Creating Multiple Browser Contexts in Playwright (Java)
DESCRIPTION: Demonstrates the Java implementation for creating multiple isolated `BrowserContext` objects (`userContext`, `adminContext`) from a single `Browser` instance using `browser.newContext()`. This enables testing scenarios requiring separate user sessions within a Java application using Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_8

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      BrowserType chromium = playwright.chromium();
      // Create a Chromium browser instance
      Browser browser = chromium.launch();
      // Create two isolated browser contexts
      BrowserContext userContext = browser.newContext();
      BrowserContext adminContext = browser.newContext();
      // Create pages and interact with contexts independently
    }
  }
}
```

----------------------------------------

TITLE: Configuring Playwright Context Options (JS)
DESCRIPTION: Shows how to set default context options like `userAgent` and `viewport` in `playwright.config.ts` within the `use` section. These options are inherited by contexts created using the built-in `browser` fixture.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    userAgent: 'some custom ua',
    viewport: { width: 100, height: 100 },
  },
});
```

----------------------------------------

TITLE: Generating Screenshot Comparison in Playwright Test (JavaScript)
DESCRIPTION: This snippet demonstrates how to use the `toHaveScreenshot()` method to generate and compare screenshots in a Playwright test. It navigates to a page and expects the screenshot to match a reference.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-snapshots-js.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('example test', async ({ page }) => {
  await page.goto('https://playwright.dev');
  await expect(page).toHaveScreenshot();
});
```

----------------------------------------

TITLE: Defining Test Groups and Hooks in Playwright
DESCRIPTION: Illustrates how to use test.describe for grouping tests and test.beforeEach for setting up common test conditions. The example shows a navigation test group with a beforeEach hook.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-js.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.describe('navigation', () => {
  test.beforeEach(async ({ page }) => {
    // Go to the starting url before each test.
    await page.goto('https://playwright.dev/');
  });

  test('main navigation', async ({ page }) => {
    // Assertions use the expect API.
    await expect(page).toHaveURL('https://playwright.dev/');
  });
});
```

----------------------------------------

TITLE: Specifying Playwright Input Element Selector
DESCRIPTION: Defines the `selector` string parameter used to find an element for an input action in Playwright. If the selector matches multiple elements, the first one found will be used.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_11

LANGUAGE: markdown
CODE:
```
- `selector` <[string]>
```

----------------------------------------

TITLE: Installing Playwright with Pip Bash
DESCRIPTION: This snippet installs Playwright for Python environments using pip. It involves installing the Playwright dependencies necessary by executing `playwright install --with-deps`. This is essential to run Playwright tests within a CI environment efficiently.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
pip install playwright\nplaywright install --with-deps
```

----------------------------------------

TITLE: Interacting with an Element using Locator (Recommended) in Python (Async)
DESCRIPTION: Demonstrates the recommended approach using Playwright Locators (`page.get_by_text`) in asynchronous Python to interact with elements. Locators automatically re-fetch the element before each action (e.g., hover, click), avoiding staleness issues.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_22

LANGUAGE: python
CODE:
```
```python async
locator = page.get_by_text("Submit")
await locator.hover()
await locator.click()
```
```

----------------------------------------

TITLE: TestID Locator Parameter in Playwright
DESCRIPTION: Defines the `testId` parameter for locating elements by test ID, supporting both string and regular expression values.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_115

LANGUAGE: typescript
CODE:
```
* since: v1.27
- `testId` <[string]|[RegExp]>
```

----------------------------------------

TITLE: Using CSS :visible Pseudo-class in Playwright
DESCRIPTION: Shows how to use the :visible pseudo-class to match only visible elements on the page, which helps avoid strictness violations when multiple similar elements exist.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
await page.locator('button').click();
```

LANGUAGE: java
CODE:
```
page.locator("button").click();
```

LANGUAGE: python
CODE:
```
await page.locator("button").click()
```

LANGUAGE: python
CODE:
```
page.locator("button").click()
```

LANGUAGE: csharp
CODE:
```
await page.Locator("button").ClickAsync();
```

----------------------------------------

TITLE: Configuring Base URL for Playwright Tests
DESCRIPTION: Command to run tests with a specified base URL which will be prepended to relative navigation URLs.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
pytest --base-url http://localhost:8080
```

----------------------------------------

TITLE: Configure Base URL in Playwright Config (TypeScript)
DESCRIPTION: A basic Playwright configuration file demonstrating how to set a default 'baseURL' for all tests using the 'use' property at the top level.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_19

LANGUAGE: TypeScript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    baseURL: 'https://playwright.dev',
  },
});
```

----------------------------------------

TITLE: Configuring Global Setup in Playwright Test
DESCRIPTION: Configuration to specify a global setup file that runs before all tests, useful for environment preparation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  globalSetup: './global-setup',
});
```

----------------------------------------

TITLE: Setting Up Authentication Directory and .gitignore Entry with Bash
DESCRIPTION: Creates a directory named 'playwright/.auth' and adds the directory path to the '.gitignore' file, preventing it from being tracked by git. This setup is essential to securely store the authenticated browser state required for testing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
mkdir -p playwright/.auth
echo $'\nplaywright/.auth' >> .gitignore
```

----------------------------------------

TITLE: File Upload Operations in C#
DESCRIPTION: Shows various file upload scenarios in C# including single file, multiple files, directory upload, clearing files, and uploading from memory buffer. Uses Playwright's SetInputFilesAsync method.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_94

LANGUAGE: csharp
CODE:
```
// Select one file
await page.GetByLabel("Upload file").SetInputFilesAsync("myfile.pdf");

// Select multiple files
await page.GetByLabel("Upload files").SetInputFilesAsync(new[] { "file1.txt", "file12.txt" });

// Select a directory
await page.GetByLabel("Upload directory").SetInputFilesAsync("mydir");

// Remove all the selected files
await page.GetByLabel("Upload file").SetInputFilesAsync(new[] {});

// Upload buffer from memory
await page.GetByLabel("Upload file").SetInputFilesAsync(new FilePayload
{
    Name = "file.txt",
    MimeType = "text/plain",
    Buffer = System.Text.Encoding.UTF8.GetBytes("this is a test"),
});
```

----------------------------------------

TITLE: Setting Input Files in Playwright with Python (sync)
DESCRIPTION: Demonstrates various ways to upload files using set_input_files method in Python with synchronous syntax, including uploading a single file, multiple files, a directory, and removing selected files.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_92

LANGUAGE: python
CODE:
```
# Select one file
page.get_by_label("Upload file").set_input_files('myfile.pdf')

# Select multiple files
page.get_by_label("Upload files").set_input_files(['file1.txt', 'file2.txt'])

# Select a directory
page.get_by_label("Upload directory").set_input_files('mydir')

# Remove all the selected files
page.get_by_label("Upload file").set_input_files([])
```

----------------------------------------

TITLE: Selecting Nth Element in Playwright
DESCRIPTION: Shows how to select the nth matching element using Playwright's nth method across different programming languages. Returns a locator to the n-th matching element (zero-based index).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_71

LANGUAGE: javascript
CODE:
```
const banana = await page.getByRole('listitem').nth(2);
```

LANGUAGE: python-async
CODE:
```
banana = await page.get_by_role("listitem").nth(2)
```

LANGUAGE: python-sync
CODE:
```
banana = page.get_by_role("listitem").nth(2)
```

LANGUAGE: java
CODE:
```
Locator banana = page.getByRole(AriaRole.LISTITEM).nth(2);
```

LANGUAGE: csharp
CODE:
```
var banana = await page.GetByRole(AriaRole.Listitem).Nth(2);
```

----------------------------------------

TITLE: Using CSS :has-text() Pseudo-class in Playwright
DESCRIPTION: Shows how to use the :has-text() CSS pseudo-class to find elements containing specific text, with examples of correct and incorrect usage patterns.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
// Wrong, will match many elements including <body>
await page.locator(':has-text("Playwright")').click();
// Correct, only matches the <article> element
await page.locator('article:has-text("Playwright")').click();
```

LANGUAGE: java
CODE:
```
// Wrong, will match many elements including <body>
page.locator(":has-text(\"Playwright\")").click();
// Correct, only matches the <article> element
page.locator("article:has-text(\"Playwright\")").click();
```

LANGUAGE: python
CODE:
```
# Wrong, will match many elements including <body>
await page.locator(':has-text("Playwright")').click()
# Correct, only matches the <article> element
await page.locator('article:has-text("Playwright")').click()
```

LANGUAGE: python
CODE:
```
# Wrong, will match many elements including <body>
page.locator(':has-text("Playwright")').click()
# Correct, only matches the <article> element
page.locator('article:has-text("All products")').click()
```

LANGUAGE: csharp
CODE:
```
// Wrong, will match many elements including <body>
await page.Locator(":has-text(\"Playwright\")").ClickAsync();
// Correct, only matches the <article> element
await page.Locator("article:has-text(\"Playwright\")").ClickAsync();
```

----------------------------------------

TITLE: Validating Server State After UI Actions using Playwright API and Browser Automation in Python
DESCRIPTION: This test automates the creation of a GitHub issue using the browser UI with Playwright, then verifies via an API request that the issue was created with correct title and body. It demonstrates cross-verification of UI and backend, leveraging page automation for issue submission and the API for state validation. Dependencies: Playwright sync API, environment variables, necessary fixtures.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-python.md#2025-04-22_snippet_5

LANGUAGE: python
CODE:
```
def test_last_created_issue_should_be_on_the_server(api_request_context: APIRequestContext, page: Page) -> None:\n    page.goto(f\"https://github.com/{GITHUB_USER}/{GITHUB_REPO}/issues\")\n    page.locator(\"text=New issue\").click()\n    page.locator(\"[aria-label='Title']\").fill(\"Bug report 1\")\n    page.locator(\"[aria-label='Comment body']\").fill(\"Bug description\")\n    page.locator(\"text=Submit new issue\").click()\n    issue_id = page.url.split(\"/\")[-1]\n\n    new_issue = api_request_context.get(f\"https://github.com/{GITHUB_USER}/{GITHUB_REPO}/issues/{issue_id}\")\n    assert new_issue.ok\n    assert new_issue.json()[\"title\"] == \"[Bug] report 1\"\n    assert new_issue.json()[\"body\"] == \"Bug description\"\n
```

----------------------------------------

TITLE: Iterating Over Multiple Elements with Playwright C#
DESCRIPTION: Shows how to use the Locator.AllAsync method to retrieve all elements matching a given locator and then iterate through the collection to perform an action on each individual element, such as checking multiple checkboxes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_29

LANGUAGE: C#
CODE:
```
// Check all checkboxes!
var checkboxes = Page.GetByRole(AriaRole.Checkbox);
foreach (var checkbox in await checkboxes.AllAsync())
  await checkbox.CheckAsync();
```

----------------------------------------

TITLE: Basic Page Navigation in Java
DESCRIPTION: Navigates to a URL and waits for the page's load event to fire using Playwright in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_1

LANGUAGE: java
CODE:
```
// Navigate the page
page.navigate("https://example.com");
```

----------------------------------------

TITLE: Initializing GenericAssertions in Playwright Test
DESCRIPTION: Shows how to import and use the GenericAssertions class in a Playwright test. It demonstrates a simple assertion using the 'toBe' method.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('assert a value', async ({ page }) => {
  const value = 1;
  expect(value).toBe(2);
});
```

----------------------------------------

TITLE: Running tests on different browsers using Playwright for C#
DESCRIPTION: This C# snippet demonstrates how to run Playwright tests on specific browsers using the `dotnet test` command. The browser is specified using either the `BROWSER` environment variable or a `runsettings` file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
dotnet test -- Playwright.BrowserName=webkit
```

LANGUAGE: bash
CODE:
```
dotnet test --settings:chromium.runsettings
dotnet test --settings:firefox.runsettings
dotnet test --settings:webkit.runsettings
```

LANGUAGE: xml
CODE:
```
<?xml version=\"1.0\" encoding=\"utf-8\"?>
  <RunSettings>
    <Playwright>
      <BrowserName>chromium</BrowserName>
    </Playwright>
  </RunSettings>
```

----------------------------------------

TITLE: Implementing SearchPage in Java
DESCRIPTION: Java implementation of a SearchPage class that wraps a Playwright Page object. It provides methods for navigating to a search engine and performing searches, demonstrating page object model pattern in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_4

LANGUAGE: java
CODE:
```
package models;

import com.microsoft.playwright;

public class SearchPage {
  private final Page page;
  private final Locator searchTermInput;

  public SearchPage(Page page) {
    this.page = page;
    this.searchTermInput = page.locator("[aria-label='Enter your search term']");
  }

  public void navigate() {
    page.navigate("https://bing.com");
  }

  public void search(String text) {
    searchTermInput.fill(text);
    searchTermInput.press("Enter");
  }
}
```

----------------------------------------

TITLE: Counting List Items in Playwright
DESCRIPTION: Demonstrates how to count items in a list using assertions. This example checks that a list contains exactly 3 items by targeting all elements with the 'listitem' role.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_27

LANGUAGE: javascript
CODE:
```
await expect(page.getByRole('listitem')).toHaveCount(3);
```

LANGUAGE: python-async
CODE:
```
await expect(page.get_by_role("listitem")).to_have_count(3)
```

LANGUAGE: python-sync
CODE:
```
expect(page.get_by_role("listitem")).to_have_count(3)
```

LANGUAGE: java
CODE:
```
assertThat(page.getByRole(AriaRole.LISTITEM)).hasCount(3);
```

LANGUAGE: csharp
CODE:
```
await Expect(Page.GetByRole(AriaRole.Listitem)).ToHaveCountAsync(3);
```

----------------------------------------

TITLE: Waiting for Load State After Button Click in Java
DESCRIPTION: Demonstrates how to wait for a page to reach the 'load' state after a button click in Java. The method resolves after the 'load' event is fired.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_121

LANGUAGE: java
CODE:
```
page.getByRole(AriaRole.BUTTON).click(); // Click triggers navigation.
page.waitForLoadState(); // The promise resolves after "load" event.
```

----------------------------------------

TITLE: Starting Playwright Tracing (Python Async)
DESCRIPTION: Demonstrates starting asynchronous Playwright tracing in Python using `await context.tracing.start()`. Options like `screenshots` and `snapshots` can be passed as arguments. Recording continues until `await context.tracing.stop()` is called.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
await context.tracing.start(screenshots=True, snapshots=True)
page = await context.new_page()
await page.goto("https://playwright.dev")
await context.tracing.stop(path = "trace.zip")
```

----------------------------------------

TITLE: Recording Network Traffic to HAR via Playwright CLI
DESCRIPTION: Illustrates how to record network traffic into a HAR file using the Playwright CLI executed via Maven. The `--save-har` option specifies the output file, and `--save-har-glob` filters URLs to include in the recording.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_37

LANGUAGE: bash
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="open --save-har=example.har --save-har-glob='**/api/**' https://example.com"
```

----------------------------------------

TITLE: Using selectOption in Playwright with Java
DESCRIPTION: Shows how to select options in a <select> element using different selection methods in Java. Demonstrates single selection by value, single selection by label, and multiple selection.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_79

LANGUAGE: java
CODE:
```
// single selection matching the value or label
element.selectOption("blue");
// single selection matching the label
element.selectOption(new SelectOption().setLabel("Blue"));
// multiple selection for blue, red and second option
element.selectOption(new String[] {"red", "green", "blue"});
```

----------------------------------------

TITLE: Running Basic Playwright Tests
DESCRIPTION: Basic command to run Playwright tests using pytest. Tests run in headless mode on Chromium by default.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
pytest
```

----------------------------------------

TITLE: Launching Browser and Navigating Page in Playwright Java
DESCRIPTION: This Java snippet shows how to automate a Firefox browser using Playwright to navigate to a webpage. It highlights needing the Playwright Java library and a Java development environment. The snippet follows a try-with-resources pattern to ensure resources are appropriately cleaned up.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_1

LANGUAGE: Java
CODE:
```
import com.microsoft.playwright.*;

public class Example {
 public static void main(String[] args) {
   try (Playwright playwright = Playwright.create()) {
     BrowserType firefox = playwright.firefox();
     Browser browser = firefox.launch();
     Page page = browser.newPage();
     page.navigate("https://example.com");
     browser.close();
   }
 }
}
```

----------------------------------------

TITLE: Using Page.evaluate in JavaScript
DESCRIPTION: Examples of using the evaluate method in JavaScript to execute JavaScript expressions in the page context. This method can accept arguments, return promises, and work with strings or functions expressions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_51

LANGUAGE: javascript
CODE:
```
const result = await page.evaluate(([x, y]) => {
  return Promise.resolve(x * y);
}, [7, 8]);
console.log(result); // prints "56"
```

LANGUAGE: javascript
CODE:
```
console.log(await page.evaluate('1 + 2')); // prints "3"
const x = 10;
console.log(await page.evaluate(`1 + ${x}`)); // prints "11"
```

LANGUAGE: javascript
CODE:
```
const bodyHandle = await page.evaluate('document.body');
const html = await page.evaluate<string, HTMLElement>(([body, suffix]) =>
  body.innerHTML + suffix, [bodyHandle, 'hello']
);
await bodyHandle.dispose();
```

----------------------------------------

TITLE: Resetting Storage State for Specific Tests in Playwright
DESCRIPTION: Demonstrates how to reset storage state for a specific test file to avoid being authenticated.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_29

LANGUAGE: typescript
CODE:
```
import { test } from '@playwright/test';

// Reset storage state for this file to avoid being authenticated
test.use({ storageState: { cookies: [], origins: [] } });

test('not signed in test', async ({ page }) => {
  // ...
});
```

----------------------------------------

TITLE: Frame Locator Strictness Examples
DESCRIPTION: Shows how frame locators handle multiple matching elements and demonstrates proper usage with first() selector.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-framelocator.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
// Throws if there are several frames in DOM:
await page.locator('.result-frame').contentFrame().getByRole('button').click();

// Works because we explicitly tell locator to pick the first frame:
await page.locator('.result-frame').contentFrame().first().getByRole('button').click();
```

LANGUAGE: python
CODE:
```
# Throws if there are several frames in DOM:
await page.locator('.result-frame').content_frame.get_by_role('button').click()

# Works because we explicitly tell locator to pick the first frame:
await page.locator('.result-frame').first.content_frame.get_by_role('button').click()
```

LANGUAGE: java
CODE:
```
// Throws if there are several frames in DOM:
page.locator(".result-frame").contentFrame().getByRole(AriaRole.BUTTON).click();

// Works because we explicitly tell locator to pick the first frame:
page.locator(".result-frame").first().contentFrame().getByRole(AriaRole.BUTTON).click();
```

LANGUAGE: csharp
CODE:
```
// Throws if there are several frames in DOM:
await page.Locator(".result-frame").ContentFrame.GetByRole(AriaRole.Button).ClickAsync();

// Works because we explicitly tell locator to pick the first frame:
await page.Locator(".result-frame").First.ContentFrame.getByRole(AriaRole.Button).ClickAsync();
```

----------------------------------------

TITLE: Locating Elements Inside Frames with Playwright JavaScript
DESCRIPTION: This snippet demonstrates how to use Playwright's frameLocator API in JavaScript to locate an element within an iframe using a CSS selector and label. It shows chaining locator queries and performing an asynchronous fill operation. Requires the Playwright JavaScript library and an active page object. The '.frame-class' selector identifies the iframe, while 'User Name' is the element's accessible label.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/frames.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
// Locate element inside frame
const username = await page.frameLocator('.frame-class').getByLabel('User Name');
await username.fill('John');
```

----------------------------------------

TITLE: Asserting Input Value with Playwright TypeScript
DESCRIPTION: Asserts that the input element located by the locator has a specific value. This assertion automatically retries until the condition is met or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_25

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toHaveValue()
```

----------------------------------------

TITLE: Text Location Examples in Multiple Languages
DESCRIPTION: Code examples showing how to locate elements by text content in different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
await expect(page.getByText('Welcome, John')).toBeVisible();
```

LANGUAGE: java
CODE:
```
assertThat(page.getByText("Welcome, John")).isVisible();
```

LANGUAGE: python
CODE:
```
await expect(page.get_by_text("Welcome, John")).to_be_visible()
```

LANGUAGE: csharp
CODE:
```
await Expect(Page.GetByText("Welcome, John")).ToBeVisibleAsync();
```

----------------------------------------

TITLE: Using PlaywrightDevPage in TypeScript Tests
DESCRIPTION: Example of how to use the PlaywrightDevPage class in TypeScript tests. The test verifies that the getting started page contains expected table of contents items and that the Page Object Model article is displayed correctly.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { test, expect } from '@playwright/test';
import { PlaywrightDevPage } from './playwright-dev-page';

test('getting started should contain table of contents', async ({ page }) => {
  const playwrightDev = new PlaywrightDevPage(page);
  await playwrightDev.goto();
  await playwrightDev.getStarted();
  await expect(playwrightDev.tocList).toHaveText([
    `How to install Playwright`,
    `What's Installed`,
    `How to run the example test`,
    `How to open the HTML test report`,
    `Write tests using web first assertions, page fixtures and locators`,
    `Run single test, multiple tests, headed mode`,
    `Generate tests with Codegen`,
    `See a trace of your tests`
  ]);
});

test('should show Page Object Model article', async ({ page }) => {
  const playwrightDev = new PlaywrightDevPage(page);
  await playwrightDev.goto();
  await playwrightDev.pageObjectModel();
  await expect(page.locator('article')).toContainText('Page Object Model is a common pattern');
});
```

----------------------------------------

TITLE: Asserting Text Content in Shadow DOM using Playwright
DESCRIPTION: This code demonstrates how to assert that the 'x-details' element contains the text 'Details' using Playwright in different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_14

LANGUAGE: javascript
CODE:
```
await expect(page.locator('x-details')).toContainText('Details');
```

LANGUAGE: java
CODE:
```
assertThat(page.locator("x-details")).containsText("Details");
```

LANGUAGE: python
CODE:
```
await expect(page.locator("x-details")).to_contain_text("Details")
```

LANGUAGE: csharp
CODE:
```
await Expect(Page.Locator("x-details")).ToContainTextAsync("Details");
```

----------------------------------------

TITLE: Using Playwright Strict Mode in C#
DESCRIPTION: Demonstrates how to use the 'Strict = true' option with page.Locator in C# to ensure a selector matches only a single element, throwing an error otherwise. This helps prevent ambiguity in element selection.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_52

LANGUAGE: csharp
CODE:
```
// This will throw if you have more than one button!
await page.Locator("button", new() { Strict = true });
```

----------------------------------------

TITLE: Using APIResponseAssertions to verify API response in JavaScript
DESCRIPTION: Example of making a GET request to a website and asserting that the response is OK (status code 200-299) using JavaScript in Playwright Test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponseassertions.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('navigates to login', async ({ page }) => {
  // ...
  const response = await page.request.get('https://playwright.dev');
  await expect(response).toBeOK();
});
```

----------------------------------------

TITLE: Debugging All Playwright Tests with Inspector
DESCRIPTION: Debug all tests using the Playwright Inspector by running the test command with the --debug flag.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_11

LANGUAGE: bash
CODE:
```
npx playwright test --debug
```

----------------------------------------

TITLE: Filtering Elements by Visibility in Playwright
DESCRIPTION: Shows how to filter elements based on their visibility status. This example selects only visible buttons from a set of elements, which helps avoid strictness violations when multiple elements match a selector but some are hidden.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_26

LANGUAGE: javascript
CODE:
```
await page.locator('button').filter({ visible: true }).click();
```

LANGUAGE: java
CODE:
```
page.locator("button").filter(new Locator.FilterOptions.setVisible(true)).click();
```

LANGUAGE: python-async
CODE:
```
await page.locator("button").filter(visible=True).click()
```

LANGUAGE: python-sync
CODE:
```
page.locator("button").filter(visible=True).click()
```

LANGUAGE: csharp
CODE:
```
await page.Locator("button").Filter(new() { Visible = true }).ClickAsync();
```

----------------------------------------

TITLE: Performing API Requests with Playwright Python
DESCRIPTION: Demonstrates how to use the new page.request API in Playwright for Python to send HTTP requests directly from your test code, useful for testing server APIs or managing test state.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_42

LANGUAGE: python
CODE:
```
# Do a GET request on behalf of page
res = await page.request.get("http://example.com/foo.json")
```

LANGUAGE: python
CODE:
```
# Do a GET request on behalf of page
res = page.request.get("http://example.com/foo.json")
```

----------------------------------------

TITLE: Using Locator.press() to Simulate Keyboard Input in Playwright
DESCRIPTION: Focuses an element and presses specified keys, supporting both single keys and key combinations. Useful for keyboard interactions like pressing Backspace, Enter, or modifier keys with shortcuts.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_73

LANGUAGE: javascript
CODE:
```
await page.getByRole('textbox').press('Backspace');
```

LANGUAGE: java
CODE:
```
page.getByRole(AriaRole.TEXTBOX).press("Backspace");
```

LANGUAGE: python
CODE:
```
await page.get_by_role("textbox").press("Backspace")
```

LANGUAGE: python
CODE:
```
page.get_by_role("textbox").press("Backspace")
```

LANGUAGE: csharp
CODE:
```
await page.GetByRole(AriaRole.Textbox).PressAsync("Backspace");
```

----------------------------------------

TITLE: Using APIResponse with Sync Python in Playwright
DESCRIPTION: Example of making an HTTP request using Playwright's synchronous API, then validating and processing the response. Demonstrates checking response status, headers, and accessing JSON data from the response.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponse.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
from playwright.sync_api import sync_playwright

with sync_playwright() as p:
    context = playwright.request.new_context()
    response = context.get("https://example.com/user/repos")
    assert response.ok
    assert response.status == 200
    assert response.headers["content-type"] == "application/json; charset=utf-8"
    assert response.json()["name"] == "foobar"
    assert response.body() == '{"status": "ok"}'
```

----------------------------------------

TITLE: Creating a Reusable AxeBuilder Configuration Fixture in Java
DESCRIPTION: This Java snippet defines a test fixture class `AxeTestFixtures` extending a base `TestFixtures` class. It includes a method `makeAxeBuilder` that creates and returns an `AxeBuilder` instance pre-configured with specific WCAG tags using `withTags()` and excludes a common element with a known accessibility issue using `exclude()`. This promotes configuration reuse across multiple tests, ensuring consistency. Requires Playwright and Axe core.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-java.md#2025-04-22_snippet_6

LANGUAGE: java
CODE:
```
class AxeTestFixtures extends TestFixtures {
 AxeBuilder makeAxeBuilder() {
   return new AxeBuilder(page)
     .withTags(new String[]{"wcag2a", "wcag2aa", "wcag21a", "wcag21aa"})
     .exclude("#commonly-reused-element-with-known-issue");
 }
}
```

----------------------------------------

TITLE: Playwright Element Visibility Check
DESCRIPTION: Shows how to verify element visibility using Playwright's assertion API with text locator.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-java.md#2025-04-22_snippet_3

LANGUAGE: java
CODE:
```
import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

assertThat(page.locator("text=Installation")).isVisible();
```

----------------------------------------

TITLE: Using Frame Locators in Playwright Python
DESCRIPTION: Demonstrates how to use page.frame_locator to target an iframe and then locate elements within that specific frame, simplifying interaction with framed content.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_45

LANGUAGE: python
CODE:
```
locator = page.frame_locator("my-frame").locator("text=Submit")
locator.click()
```

----------------------------------------

TITLE: Using afterEach Hook with Title in Playwright Tests
DESCRIPTION: Demonstrates how to create an afterEach hook with a descriptive title. This example checks if the test ran as expected by comparing the actual and expected status.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
test.afterEach('Status check', async ({ page }) => {
  if (test.info().status !== test.info().expectedStatus)
    console.log(`Did not run as expected, ended up at ${page.url()}`);
});
```

----------------------------------------

TITLE: GitHub Actions Workflow for C# Playwright
DESCRIPTION: This document snippet provides a GitHub Actions workflow for running Playwright tests in C# projects. It handles setup and execution on push/pull to main branches, manages dependencies and test execution, particularly for the .NET environment.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_12

LANGUAGE: yml
CODE:
```
name: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - name: Setup dotnet\n      uses: actions/setup-dotnet@v4\n      with:\n        dotnet-version: 8.0.x\n    - name: Build & Install\n      run: dotnet build\n    - name: Ensure browsers are installed\n      run: pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps\n    - name: Run your tests\n      run: dotnet test
```

----------------------------------------

TITLE: Route Requests from HAR File in Playwright Python
DESCRIPTION: Shows how to use the `context.route_from_har` method in Playwright Python to serve network responses from a previously recorded HAR file, allowing for network mocking. Both async and sync versions are provided.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_34

LANGUAGE: python
CODE:
```
await context.route_from_har("github.har.zip")
```

LANGUAGE: python
CODE:
```
context.route_from_har("github.har.zip")
```

----------------------------------------

TITLE: Configuring Trace Recording in Playwright Config (JavaScript)
DESCRIPTION: This snippet shows how to configure trace recording in the Playwright config file. It sets up tracing to run on the first retry of a failed test, with different retry settings for CI and local environments.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-js.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';
export default defineConfig({
  retries: process.env.CI ? 2 : 0, // set to 2 when running on CI
  // ...
  use: {
    trace: 'on-first-retry', // record traces on first retry of each test
  },
});
```

----------------------------------------

TITLE: Using Page.evaluate in Python (Sync)
DESCRIPTION: Examples of using the evaluate method in Python with synchronous calls to execute JavaScript expressions in the page context. This method can accept arguments, evaluate strings with variables, and work with ElementHandle objects.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_54

LANGUAGE: python
CODE:
```
result = page.evaluate("([x, y]) => Promise.resolve(x * y)", [7, 8])
print(result) # prints "56"
```

LANGUAGE: python
CODE:
```
print(page.evaluate("1 + 2")) # prints "3"
x = 10
print(page.evaluate(f"1 + {x}")) # prints "11"
```

LANGUAGE: python
CODE:
```
body_handle = page.evaluate("document.body")
html = page.evaluate("([body, suffix]) => body.innerHTML + suffix", [body_handle, "hello"])
body_handle.dispose()
```

----------------------------------------

TITLE: Handling Alternative Element Scenarios with OR Operator in Playwright
DESCRIPTION: Demonstrates using the 'or' method to create a locator that matches any of multiple possible elements. Useful for situations where different UI states may appear, such as handling a possible security dialog before clicking a button.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_25

LANGUAGE: javascript
CODE:
```
const newEmail = page.getByRole('button', { name: 'New' });
const dialog = page.getByText('Confirm security settings');
await expect(newEmail.or(dialog).first()).toBeVisible();
if (await dialog.isVisible())
  await page.getByRole('button', { name: 'Dismiss' }).click();
await newEmail.click();
```

LANGUAGE: java
CODE:
```
Locator newEmail = page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("New"));
Locator dialog = page.getByText("Confirm security settings");
assertThat(newEmail.or(dialog).first()).isVisible();
if (dialog.isVisible())
  page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Dismiss")).click();
newEmail.click();
```

LANGUAGE: python-async
CODE:
```
new_email = page.get_by_role("button", name="New")
dialog = page.get_by_text("Confirm security settings")
await expect(new_email.or_(dialog).first).to_be_visible()
if (await dialog.is_visible()):
  await page.get_by_role("button", name="Dismiss").click()
await new_email.click()
```

LANGUAGE: python-sync
CODE:
```
new_email = page.get_by_role("button", name="New")
dialog = page.get_by_text("Confirm security settings")
expect(new_email.or_(dialog).first).to_be_visible()
if (dialog.is_visible()):
  page.get_by_role("button", name="Dismiss").click()
new_email.click()
```

LANGUAGE: csharp
CODE:
```
var newEmail = page.GetByRole(AriaRole.Button, new() { Name = "New" });
var dialog = page.GetByText("Confirm security settings");
await Expect(newEmail.Or(dialog).First).ToBeVisibleAsync();
if (await dialog.IsVisibleAsync())
  await page.GetByRole(AriaRole.Button, new() { Name = "Dismiss" }).ClickAsync();
await newEmail.ClickAsync();
```

----------------------------------------

TITLE: Running Playwright Tests from Command Line
DESCRIPTION: Execute all tests configured in the playwright.config file using the playwright test command. Tests run in headless mode by default.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx playwright test
```

----------------------------------------

TITLE: Writing API Tests for GitHub Issue Creation using Playwright and Pytest in Python
DESCRIPTION: This snippet implements pytest test functions that use Playwright\'s APIRequestContext to create and verify issues in a GitHub repository via REST API. It includes two tests: one for submitting a bug report and another for a feature request, both asserting server-side creation and correctness of issue data. Dependencies: pytest, Playwright sync API, configured api_request_context fixture, required GitHub credentials in environment.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-python.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
import os\nfrom typing import Generator\n\nimport pytest\nfrom playwright.sync_api import Playwright, APIRequestContext\n\nGITHUB_API_TOKEN = os.getenv(\"GITHUB_API_TOKEN\")\nassert GITHUB_API_TOKEN, \"GITHUB_API_TOKEN is not set\"\n\nGITHUB_USER = os.getenv(\"GITHUB_USER\")\nassert GITHUB_USER, \"GITHUB_USER is not set\"\n\nGITHUB_REPO = \"test\"\n\n# ...\n\ndef test_should_create_bug_report(api_request_context: APIRequestContext) -> None:\n    data = {\n        \"title\": \"[Bug] report 1\",\n        \"body\": \"Bug description\",\n    }\n    new_issue = api_request_context.post(f\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\", data=data)\n    assert new_issue.ok\n\n    issues = api_request_context.get(f\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\")\n    assert issues.ok\n    issues_response = issues.json()\n    issue = list(filter(lambda issue: issue[\"title\"] == \"[Bug] report 1\", issues_response))[0]\n    assert issue\n    assert issue[\"body\"] == \"Bug description\"\n\ndef test_should_create_feature_request(api_request_context: APIRequestContext) -> None:\n    data = {\n        \"title\": \"[Feature] request 1\",\n        \"body\": \"Feature description\",\n    }\n    new_issue = api_request_context.post(f\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\", data=data)\n    assert new_issue.ok\n\n    issues = api_request_context.get(f\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\")\n    assert issues.ok\n    issues_response = issues.json()\n    issue = list(filter(lambda issue: issue[\"title\"] == \"[Feature] request 1\", issues_response))[0]\n    assert issue\n    assert issue[\"body\"] == \"Feature description\"\n
```

----------------------------------------

TITLE: Hovering Over Elements in Playwright
DESCRIPTION: Shows how to hover over elements using the Locator.hover() method. This method waits for element actionability, scrolls it into view if needed, and moves the mouse to hover over the element's center or specified position.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_62

LANGUAGE: javascript
CODE:
```
await page.getByRole('link').hover();
```

LANGUAGE: python
CODE:
```
await page.get_by_role("link").hover()
```

LANGUAGE: python
CODE:
```
page.get_by_role("link").hover()
```

LANGUAGE: java
CODE:
```
page.getByRole(AriaRole.LINK).hover();
```

LANGUAGE: csharp
CODE:
```
await page.GetByRole(AriaRole.Link).HoverAsync();
```

----------------------------------------

TITLE: Testing Multiple Roles Together - JavaScript
DESCRIPTION: This JavaScript snippet illustrates testing interactions between multiple authenticated roles using separate browser contexts in a single Playwright test, enhancing test scenarios for role-based features.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_18

LANGUAGE: js
CODE:
```
import { test } from '@playwright/test';

test('admin and user', async ({ browser }) => {
  const adminContext = await browser.newContext({ storageState: 'playwright/.auth/admin.json' });
  const adminPage = await adminContext.newPage();

  const userContext = await browser.newContext({ storageState: 'playwright/.auth/user.json' });
  const userPage = await userContext.newPage();

  await adminContext.close();
  await userContext.close();
});

```

----------------------------------------

TITLE: Opening Playwright HTML Report (Bash)
DESCRIPTION: This command shows how to open the Playwright HTML report, which displays test results and provides access to traces.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-js.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npx playwright show-report
```

----------------------------------------

TITLE: Hover and Click on Locator Object in Java
DESCRIPTION: Shows how to use a locator in Java to hover and click a text element. This involves dynamically querying the element before each interaction.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_11

LANGUAGE: Java
CODE:
```
Locator locator = page.getByText("Submit");
locator.hover();
locator.click();
```

----------------------------------------

TITLE: Testing Button Component Click Event in JavaScript
DESCRIPTION: This snippet demonstrates how to test a button component's click event using Playwright Test. It mounts the component, asserts its text content, simulates a click, and verifies the event was triggered.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
test('event should work', async ({ mount }) => {
  let clicked = false;

  // Mount a component. Returns locator pointing to the component.
  const component = await mount(
    <Button title="Submit" onClick={() => { clicked = true }}></Button>
  );

  // As with any Playwright test, assert locator text.
  await expect(component).toContainText('Submit');

  // Perform locator click. This will trigger the event.
  await component.click();

  // Assert that respective events have been fired.
  expect(clicked).toBeTruthy();
});
```

----------------------------------------

TITLE: Using Base URL in Playwright Tests
DESCRIPTION: Example of navigating to a relative URL that will be combined with the base URL specified in the pytest command.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_10

LANGUAGE: python
CODE:
```
def test_visit_example(page):
    page.goto("/admin")
    # -> Will result in http://localhost:8080/admin
```

----------------------------------------

TITLE: Asserting Page Title with Playwright TypeScript
DESCRIPTION: Asserts that the page has a specific title. This assertion automatically retries until the condition is met or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_29

LANGUAGE: TypeScript
CODE:
```
await expect(page).toHaveTitle()
```

----------------------------------------

TITLE: Modifying API Responses in Python (Async)
DESCRIPTION: This Python async example shows how to fetch the original API response, modify it by adding a new fruit to the JSON data, and then fulfill the route with the modified response. It demonstrates intercepting, transforming, and fulfilling a request while preserving the original response metadata.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
async def test_gets_the_json_from_api_and_adds_a_new_fruit(page: Page):
    async def handle(route: Route):
        response = await route.fetch()
        json = await response.json()
        json.append({ "name": "Loquat", "id": 100})
        # Fulfill using the original response, while patching the response body
        # with the given JSON object.
        await route.fulfill(response=response, json=json)

    await page.route("https://demo.playwright.dev/api-mocking/api/v1/fruits", handle)

    # Go to the page
    await page.goto("https://demo.playwright.dev/api-mocking")

    # Assert that the new fruit is visible
    await expect(page.get_by_text("Loquat", exact=True)).to_be_visible()
```

----------------------------------------

TITLE: Adding and Removing Event Listeners in Playwright (JavaScript)
DESCRIPTION: Demonstrates adding persistent event listeners using `page.on` and removing them using `page.off` in Playwright for JavaScript. Listeners are added for 'request' and 'requestfinished' events. After navigating, the 'requestfinished' listener is removed using the stored listener function reference.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
```js
page.on('request', request => console.log(`Request sent: ${request.url()}`));
const listener = request => console.log(`Request finished: ${request.url()}`);
page.on('requestfinished', listener);
await page.goto('https://wikipedia.org');

page.off('requestfinished', listener);
await page.goto('https://www.openstreetmap.org/');
```
```

----------------------------------------

TITLE: Asserting Error Throwing with toThrowError Alias in JavaScript
DESCRIPTION: Provides an example of using `expect().toThrowError()`, which is an alias for `expect().toThrow()`. It asserts that the provided function throws an error when called. Like `toThrow`, it can optionally take an argument to match the error details.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_25

LANGUAGE: javascript
CODE:
```
```js
expect(() => {
  throw new Error('Something bad');
}).toThrowError();
```
```

----------------------------------------

TITLE: Using SearchPage in Python Sync Tests
DESCRIPTION: Example of how to use the synchronous SearchPage class in Python tests. It demonstrates initializing the page object with a browser page and using its methods for navigation and search in a synchronous manner.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_10

LANGUAGE: python
CODE:
```
from models.search import SearchPage

# in the test
page = browser.new_page()
search_page = SearchPage(page)
search_page.navigate()
search_page.search("search query")
```

----------------------------------------

TITLE: Setting Up Routes on Browser Context in Python (Async)
DESCRIPTION: Shows how to set up route handling on the entire browser context in asynchronous Python. This method applies to popup windows and opened links.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_14

LANGUAGE: python
CODE:
```
await context.route(
    "**/api/login",
    lambda route: route.fulfill(status=200, body="accept"))
await page.goto("https://example.com")
```

----------------------------------------

TITLE: Implementing SearchPage in Python (Async)
DESCRIPTION: Asynchronous Python implementation of a SearchPage class for Playwright. It encapsulates page navigation and search functionality, demonstrating the page object model pattern in Python using async/await syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_5

LANGUAGE: python
CODE:
```
class SearchPage:
    def __init__(self, page):
        self.page = page
        self.search_term_input = page.locator('[aria-label="Enter your search term"]')

    async def navigate(self):
        await self.page.goto("https://bing.com")

    async def search(self, text):
        await self.search_term_input.fill(text)
        await self.search_term_input.press("Enter")
```

----------------------------------------

TITLE: Using waitForSelector across navigations in Java
DESCRIPTION: This snippet shows how to use the waitForSelector method to wait for an image element across multiple page navigations in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_145

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      BrowserType chromium = playwright.chromium();
      Browser browser = chromium.launch();
      Page page = browser.newPage();
      for (String currentURL : Arrays.asList("https://google.com", "https://bbc.com")) {
        page.navigate(currentURL);
        ElementHandle element = page.waitForSelector("img");
        System.out.println("Loaded image: " + element.getAttribute("src"));
      }
      browser.close();
    }
  }
}
```

----------------------------------------

TITLE: Setting Global Timeout in Playwright Config (TypeScript)
DESCRIPTION: This snippet demonstrates how to set a global timeout for the entire test run in the Playwright configuration file. It sets a timeout of 1 hour (3,600,000 milliseconds) for the whole test suite.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-timeouts-js.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  globalTimeout: 3_600_000,
});
```

----------------------------------------

TITLE: Recording HAR File in JavaScript
DESCRIPTION: Example of recording network traffic to a HAR file using Playwright in JavaScript. Shows how to route requests through a HAR file with update option enabled.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
test('records or updates the HAR file', async ({ page }) => {
  // Get the response from the HAR file
  await page.routeFromHAR('./hars/fruit.har', {
    url: '*/**/api/v1/fruits',
    update: true,
  });

  // Go to the page
  await page.goto('https://demo.playwright.dev/api-mocking');

  // Assert that the fruit is visible
  await expect(page.getByText('Strawberry')).toBeVisible();
});
```

----------------------------------------

TITLE: Run Playwright Tests with HTML Reporter (CLI)
DESCRIPTION: Command to execute Playwright tests and specify the 'html' reporter using the command line interface. This generates a self-contained HTML report folder after the test run.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_12

LANGUAGE: bash
CODE:
```
npx playwright test --reporter=html
```

----------------------------------------

TITLE: Accepting Standard Dialogs with Playwright (Python Async)
DESCRIPTION: Registers an asynchronous handler for the 'dialog' event on a Playwright Page object. The lambda function automatically accepts any dialog (`alert`, `confirm`, `prompt`) that appears. This listener must be registered *before* the asynchronous action that triggers the dialog (e.g., clicking a button).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
```python async
page.on("dialog", lambda dialog: dialog.accept())
await page.get_by_role("button".click())
```
```

----------------------------------------

TITLE: Waiting for a Popup Window in Playwright (JavaScript)
DESCRIPTION: Shows how to wait for a popup window event using `page.waitForEvent('popup')` in Playwright for JavaScript. The waiting is initiated before the action (`page.getByText(...).click()`) that triggers the popup. The resolved promise yields the `Page` object representing the popup.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
```js
// Start waiting for popup before clicking. Note no await.
const popupPromise = page.waitForEvent('popup');
await page.getByText('open the popup').click();
const popup = await popupPromise;
await popup.goto('https://wikipedia.org');
```
```

----------------------------------------

TITLE: Using Soft Assertions in Playwright Tests
DESCRIPTION: Shows how to use soft assertions in Playwright Test v1.19. Soft assertions do not terminate test execution when they fail, but still mark the test as failed.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_52

LANGUAGE: javascript
CODE:
```
// Make a few checks that will not stop the test when failed...
await expect.soft(page.locator('#status')).toHaveText('Success');
await expect.soft(page.locator('#eta')).toHaveText('1 day');

// ... and continue the test to check more things.
await page.locator('#next-page').click();
await expect.soft(page.locator('#title')).toHaveText('Make another order');
```

----------------------------------------

TITLE: Basic Playwright Test Example with MSTest
DESCRIPTION: Shows how to implement Playwright tests using MSTest framework, including page navigation and assertions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-csharp.md#2025-04-22_snippet_1

LANGUAGE: csharp
CODE:
```
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Microsoft.Playwright;
using Microsoft.Playwright.MSTest;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace PlaywrightTests;

[TestClass]
public class ExampleTest : PageTest
{
    [TestMethod]
    public async Task HasTitle()
    {
        await Page.GotoAsync("https://playwright.dev");

        // Expect a title "to contain" a substring.
        await Expect(Page).ToHaveTitleAsync(new Regex("Playwright"));
    }

    [TestMethod]
    public async Task GetStartedLink()
    {
        await Page.GotoAsync("https://playwright.dev");

        // Click the get started link.
        await Page.GetByRole(AriaRole.Link, new() { Name = "Get started" }).ClickAsync();

        // Expects page to have a heading with the name of Installation.
        await Expect(Page.GetByRole(AriaRole.Heading, new() { Name = "Installation" })).ToBeVisibleAsync();
    } 
}
```

----------------------------------------

TITLE: Waiting for a Popup Window in Playwright (.NET/C#)
DESCRIPTION: Shows how to wait for a popup window using `page.RunAndWaitForPopupAsync` in Playwright for .NET (C#). This method takes an asynchronous lambda expression containing the action (`page.GetByText(...).ClickAsync()`) that is expected to trigger the popup. It returns the `IPage` object for the popup window.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_9

LANGUAGE: csharp
CODE:
```
```csharp
var popup = await page.RunAndWaitForPopupAsync(async =>
{
    await page.GetByText("open the popup").ClickAsync();
});
await popup.GotoAsync("https://wikipedia.org");
```
```

----------------------------------------

TITLE: Asserting Locator Text Asynchronously with Playwright in Python
DESCRIPTION: Illustrates using `await expect(locator).to_have_text()` in an asynchronous Python test function using `playwright.async_api` to assert that an element located by `.status` has the text "Submitted" following a button click. Depends on the `playwright` Python package.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
```python async
from playwright.async_api import Page, expect

async def test_status_becomes_submitted(page: Page) -> None:
    # ..
    await page.get_by_role("button").click()
    await expect(page.locator(".status")).to_have_text("Submitted")
```
```

----------------------------------------

TITLE: Asserting Multiple Elements' CSS Classes using LocatorAssertions in Multiple Languages
DESCRIPTION: Examples of using toHaveClass/hasClass with arrays to verify that a list of elements have corresponding expected CSS classes. This is useful for testing collections of similar elements with varying states.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_28

LANGUAGE: javascript
CODE:
```
const locator = page.locator('list > .component');
await expect(locator).toHaveClass(['component', 'component selected', 'component']);
```

LANGUAGE: java
CODE:
```
assertThat(page.locator("list > .component")).hasClass(new String[] {"component", "component selected", "component"});
```

LANGUAGE: python
CODE:
```
from playwright.async_api import expect

locator = page.locator("list > .component")
await expect(locator).to_have_class(["component", "component selected", "component"])
```

LANGUAGE: python
CODE:
```
from playwright.sync_api import expect

locator = page.locator("list > .component")
expect(locator).to_have_class(["component", "component selected", "component"])
```

LANGUAGE: csharp
CODE:
```
var locator = Page.Locator("list > .component");
await Expect(locator).ToHaveClassAsync(new string[]{"component", "component selected", "component"});
```

----------------------------------------

TITLE: Handling Popups and Waiting for DOM Content in JavaScript
DESCRIPTION: Shows how to wait for a popup to be triggered by a button click and then wait for the 'domcontentloaded' state before interacting with the popup in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_125

LANGUAGE: javascript
CODE:
```
const popupPromise = page.waitForEvent('popup');
await page.getByRole('button').click(); // Click triggers a popup.
const popup = await popupPromise;
await popup.waitForLoadState('domcontentloaded'); // Wait for the 'DOMContentLoaded' event.
console.log(await popup.title()); // Popup is ready to use.
```

----------------------------------------

TITLE: Auto-waiting Navigation and Interaction in Python (Async)
DESCRIPTION: Demonstrates how Playwright's async API in Python automatically waits for elements to be actionable before interacting with them after navigation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
# Navigate and click element
# Click will auto-wait for the element
await page.goto("https://example.com")
await page.get_by_text("example domain").click()
```

----------------------------------------

TITLE: Waiting for a Specific Network Request in Playwright (JavaScript)
DESCRIPTION: Demonstrates how to wait for a specific network request matching a URL pattern (containing 'logo' and ending in '.png') using `page.waitForRequest` in Playwright for JavaScript. The waiting is initiated before the navigation action (`page.goto`) to ensure the event listener is active when the request occurs. The resolved promise yields the `request` object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
```js
// Start waiting for request before goto. Note no await.
const requestPromise = page.waitForRequest('**/*logo*.png');
await page.goto('https://wikipedia.org');
const request = await requestPromise;
console.log(request.url());
```
```

----------------------------------------

TITLE: Defining Custom Playwright Fixtures
DESCRIPTION: This code snippet demonstrates how to extend the base Playwright `test` object to define custom fixtures. It includes examples of worker-scoped and test-scoped fixtures, some marked as `auto: true` for automatic execution, and one (`unusedFixture`) that is not used to show it's skipped. Fixtures can also declare dependencies on other fixtures.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_22

LANGUAGE: javascript
CODE:
```
import { test as base } from '@playwright/test';

const test = base.extend<{
  testFixture: string,
  autoTestFixture: string,
  unusedFixture: string,
}, {
  workerFixture: string,
  autoWorkerFixture: string,
}>({
  workerFixture: [async ({ browser }) => {
    // workerFixture setup...
    await use('workerFixture');
    // workerFixture teardown...
  }, { scope: 'worker' }],

  autoWorkerFixture: [async ({ browser }) => {
    // autoWorkerFixture setup...
    await use('autoWorkerFixture');
    // autoWorkerFixture teardown...
  }, { scope: 'worker', auto: true }],

  testFixture: [async ({ page, workerFixture }) => {
    // testFixture setup...
    await use('testFixture');
    // testFixture teardown...
  }, { scope: 'test' }],

  autoTestFixture: [async () => {
    // autoTestFixture setup...
    await use('autoTestFixture');
    // autoTestFixture teardown...
  }, { scope: 'test', auto: true }],

  unusedFixture: [async ({ page }) => {
    // unusedFixture setup...
    await use('unusedFixture');
    // unusedFixture teardown...
  }, { scope: 'test' }],
});

test.beforeAll(async () => { /* ... */ });
test.beforeEach(async ({ page }) => { /* ... */ });
test('first test', async ({ page }) => { /* ... */ });
test('second test', async ({ testFixture }) => { /* ... */ });
test.afterEach(async () => { /* ... */ });
test.afterAll(async () => { /* ... */ });
```

----------------------------------------

TITLE: Debugging Playwright Tests in UI Mode
DESCRIPTION: Debug tests in UI mode for a better developer experience with visual step-by-step debugging and additional features.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_10

LANGUAGE: bash
CODE:
```
npx playwright test --ui
```

----------------------------------------

TITLE: Advanced Playwright Test Configuration Options
DESCRIPTION: Demonstrates advanced configuration options including output directory for test artifacts, global setup and teardown hooks, and test timeout settings.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-configuration-js.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  // Folder for test artifacts such as screenshots, videos, traces, etc.
  outputDir: 'test-results',

  // path to the global setup files.
  globalSetup: require.resolve('./global-setup'),

  // path to the global teardown files.
  globalTeardown: require.resolve('./global-teardown'),

  // Each test is given 30 seconds.
  timeout: 30000,

});
```

----------------------------------------

TITLE: Creating Incognito Browser Context - Multiple Languages
DESCRIPTION: Demonstrates how to create a new incognito browser context, create a page within it, navigate to a URL, and properly dispose of the context when finished.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
// Create a new incognito browser context
const context = await browser.newContext();
// Create a new page inside context.
const page = await context.newPage();
await page.goto('https://example.com');
// Dispose context once it's no longer needed.
await context.close();
```

LANGUAGE: java
CODE:
```
// Create a new incognito browser context
BrowserContext context = browser.newContext();
// Create a new page inside context.
Page page = context.newPage();
page.navigate("https://example.com");
// Dispose context once it is no longer needed.
context.close();
```

LANGUAGE: python
CODE:
```
# create a new incognito browser context
context = browser.new_context()
# create a new page inside context.
page = context.new_page()
page.goto("https://example.com")
# dispose context once it is no longer needed.
context.close()
```

LANGUAGE: csharp
CODE:
```
using var playwright = await Playwright.CreateAsync();
var browser = await playwright.Firefox.LaunchAsync(new() { Headless = false });
// Create a new incognito browser context
var context = await browser.NewContextAsync();
// Create a new page inside context.
var page = await context.NewPageAsync();
await page.GotoAsync("https://bing.com");
// Dispose context once it is no longer needed.
await context.CloseAsync();
```

----------------------------------------

TITLE: Setting Test Timeout for Individual Tests (TypeScript)
DESCRIPTION: This snippet shows how to set timeouts for individual tests using the test.slow() and test.setTimeout() methods. It demonstrates both tripling the default timeout and setting a specific timeout value.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-timeouts-js.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { test, expect } from '@playwright/test';

test('slow test', async ({ page }) => {
  test.slow(); // Easy way to triple the default timeout
  // ...
});

test('very slow test', async ({ page }) => {
  test.setTimeout(120_000);
  // ...
});
```

----------------------------------------

TITLE: Selecting Options in JavaScript
DESCRIPTION: Examples of selecting options in a <select> element using Page.selectOption method in JavaScript. It shows single and multiple selections using various selection criteria.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_101

LANGUAGE: javascript
CODE:
```
// Single selection matching the value or label
page.selectOption('select#colors', 'blue');

// single selection matching the label
page.selectOption('select#colors', { label: 'Blue' });

// multiple selection
page.selectOption('select#colors', ['red', 'green', 'blue']);
```

----------------------------------------

TITLE: Using the Page Fixture in Playwright Test
DESCRIPTION: Demonstrates basic usage of the page fixture in a Playwright Test. The page fixture is automatically set up before the test and torn down afterward.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-fixtures.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('basic test', async ({ page }) => {
  // ...
});
```

----------------------------------------

TITLE: Basic Frame Locator Usage
DESCRIPTION: Demonstrates basic usage of FrameLocator to locate and click elements within an iframe across different languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-framelocator.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const locator = page.locator('#my-frame').contentFrame().getByText('Submit');
await locator.click();
```

LANGUAGE: java
CODE:
```
Locator locator = page.locator("#my-frame").contentFrame().getByText("Submit");
locator.click();
```

LANGUAGE: python
CODE:
```
locator = page.locator("#my-frame").content_frame.get_by_text("Submit")
await locator.click()
```

LANGUAGE: csharp
CODE:
```
var locator = page.Locator("#my-frame").ContentFrame.GetByText("Submit");
await locator.ClickAsync();
```

----------------------------------------

TITLE: Playwright Browser Context Setup
DESCRIPTION: Demonstrates how to set up an isolated browser context for test isolation in Playwright. Shows creation of browser, context, and page objects.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-java.md#2025-04-22_snippet_4

LANGUAGE: java
CODE:
```
Browser browser = playwright.chromium().launch();
BrowserContext context = browser.newContext();
Page page = context.newPage();
```

----------------------------------------

TITLE: Serving Static Files in JavaScript
DESCRIPTION: Shows how to serve static files as responses to specific routes using Playwright in JavaScript. This example demonstrates serving a JSON file for a specific endpoint.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_31

LANGUAGE: javascript
CODE:
```
await page.route('**/xhr_endpoint', route => route.fulfill({ path: 'mock_data.json' }));
```

----------------------------------------

TITLE: Waiting for URL Navigation in JavaScript
DESCRIPTION: This snippet shows how to use Frame.waitForURL to wait for navigation to a specific URL after clicking a link in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_50

LANGUAGE: javascript
CODE:
```
await frame.click('a.delayed-navigation'); // Clicking the link will indirectly cause a navigation
await frame.waitForURL('**/target.html');
```

----------------------------------------

TITLE: Modifying API Responses with Playwright C# Routing
DESCRIPTION: Illustrates how to intercept a network request using Page.RouteAsync, fetch the original response, parse its JSON content, modify the data, and then fulfill the request with the altered JSON payload.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_28

LANGUAGE: C#
CODE:
```
await Page.RouteAsync("**/api/settings", async route => {
  // Fetch original settings.
  var response = await route.FetchAsync();

  // Force settings theme to a predefined value.
  var json = await response.JsonAsync<MyDataType>();
  json.Theme = "Solarized";

  // Fulfill with modified data.
  await route.FulfillAsync(new() {
    Json = json
  });
});
```

----------------------------------------

TITLE: Selecting Options in Python (Async)
DESCRIPTION: Examples of selecting options in a <select> element using Page.select_option method in Python with async syntax. It shows single and multiple selections using various selection criteria.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_103

LANGUAGE: python
CODE:
```
# Single selection matching the value or label
await page.select_option("select#colors", "blue")
# single selection matching the label
await page.select_option("select#colors", label="blue")
# multiple selection
await page.select_option("select#colors", value=["red", "green", "blue"])
```

----------------------------------------

TITLE: Asserting Element Attachment with Playwright TypeScript
DESCRIPTION: Asserts that the element located by the locator is attached to the DOM. This assertion automatically retries until the element is attached or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toBeAttached()
```

----------------------------------------

TITLE: Configuring GitHub Actions for Playwright Tests on Deployment (Python)
DESCRIPTION: This YAML configuration sets up GitHub Actions to run Playwright tests with Python after a successful deployment. It installs Python dependencies, sets up the environment, and runs the tests with the deployment URL as the base URL.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_18

LANGUAGE: yml
CODE:
```
name: Playwright Tests
on:
  deployment_status:
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    if: github.event.deployment_status.state == 'success'
    steps:
    - uses: actions/checkout@v4
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Ensure browsers are installed
      run: python -m playwright install --with-deps
    - name: Run tests
      run: pytest
      env:
        # This might depend on your test-runner
        PLAYWRIGHT_TEST_BASE_URL: ${{ github.event.deployment_status.target_url }}
```

----------------------------------------

TITLE: Running Pytest with Parallelism using pytest-xdist
DESCRIPTION: Commands to install pytest-xdist and run tests in parallel across multiple processes for faster execution.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
# install dependency
pip install pytest-xdist
# use the --numprocesses flag
pytest --numprocesses auto
```

----------------------------------------

TITLE: Asserting Element Contains Text with Playwright TypeScript
DESCRIPTION: Asserts that the element located by the locator contains the specified text. This assertion automatically retries until the element contains the text or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_12

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toContainText()
```

----------------------------------------

TITLE: Combining Locators via Logical 'And' in Playwright C#
DESCRIPTION: Combines 'button' role and a 'Subscribe' title locator into a single locator using Playwright for C#. Produces a locator narrowed by both role and title, suitable for detailed element selection.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_19

LANGUAGE: C#
CODE:
```
var button = page.GetByRole(AriaRole.Button).And(page.GetByTitle("Subscribe"));
```

----------------------------------------

TITLE: Example Test Using Screenshot Assertion
DESCRIPTION: Shows a test file implementing toHaveScreenshot assertion with custom snapshot path arguments.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_135

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.describe('suite', () => {
  test('test should work', async ({ page }) => {
    await expect(page).toHaveScreenshot(['foo', 'bar', 'baz.png']);
  });
});
```

----------------------------------------

TITLE: Running Playwright Tests in Debug Mode with Environment Variables (C#)
DESCRIPTION: Commands to run Playwright tests in debug mode by setting the PWDEBUG environment variable for C# projects. This opens the inspector and configures helpful debugging defaults.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
PWDEBUG=1 dotnet test
```

LANGUAGE: batch
CODE:
```
set PWDEBUG=1
dotnet test
```

LANGUAGE: powershell
CODE:
```
$env:PWDEBUG=1
dotnet test
```

----------------------------------------

TITLE: Configuring Playwright Authentication Projects with JavaScript
DESCRIPTION: Defines a Playwright configuration file to manage multiple test projects, including setups for different browsers and authentication states. This ensures tests start in an authenticated state as specified.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  projects: [
    { name: 'setup', testMatch: /.*\.setup\.ts/ },
    {
      name: 'chromium',
      use: {
        ...devices['Desktop Chrome'],
        storageState: 'playwright/.auth/user.json',
      },
      dependencies: ['setup'],
    },
    {
      name: 'firefox',
      use: {
        ...devices['Desktop Firefox'],
        storageState: 'playwright/.auth/user.json',
      },
      dependencies: ['setup'],
    },
  ],
});
```

----------------------------------------

TITLE: Waiting for Network Responses in Playwright
DESCRIPTION: Demonstrates how to wait for specific network responses after a user action, using different matching criteria like URL patterns and predicates.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
// Use a glob URL pattern. Note no await.
const responsePromise = page.waitForResponse('**/api/fetch_data');
await page.getByText('Update').click();
const response = await responsePromise;
```

LANGUAGE: java
CODE:
```
// Use a glob URL pattern
Response response = page.waitForResponse("**/api/fetch_data", () -> {
  page.getByText("Update").click();
});
```

LANGUAGE: python
CODE:
```
# Use a glob url pattern
async with page.expect_response("**/api/fetch_data") as response_info:
    await page.get_by_text("Update").click()
response = await response_info.value
```

LANGUAGE: csharp
CODE:
```
// Use a glob URL pattern
var waitForResponseTask = page.WaitForResponseAsync("**/api/fetch_data");
await page.GetByText("Update").ClickAsync();
var response = await waitForResponseTask;
```

LANGUAGE: javascript
CODE:
```
// Use a RegExp. Note no await.
const responsePromise = page.waitForResponse(/\.jpeg$/);
await page.getByText('Update').click();
const response = await responsePromise;

// Use a predicate taking a Response object. Note no await.
const responsePromise = page.waitForResponse(response => response.url().includes(token));
await page.getByText('Update').click();
const response = await responsePromise;
```

LANGUAGE: java
CODE:
```
// Use a RegExp
Response response = page.waitForResponse(Pattern.compile("\\.jpeg$"), () -> {
  page.getByText("Update").click();
});

// Use a predicate taking a Response object
Response response = page.waitForResponse(r -> r.url().contains(token), () -> {
  page.getByText("Update").click();
});
```

----------------------------------------

TITLE: Locating Elements Inside Frames with Playwright Java
DESCRIPTION: This Java code shows how to work with Playwright to locate elements inside an iframe using the frameLocator API. It chains frame locator selection and label-based queries, then fills the located input. Requires Playwright for Java, and assumes 'page' is initialized. The example uses '.frame-class' for the iframe and 'User Name' as the label.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/frames.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
// Locate element inside frame
Locator username = page.frameLocator(".frame-class").getByLabel("User Name");
username.fill("John");
```

----------------------------------------

TITLE: Setting Extra HTTP Headers in Playwright Tests
DESCRIPTION: Example showing how to configure additional HTTP headers that will be sent with every request from the browser during tests, useful for authentication and custom request configurations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    extraHTTPHeaders: {
      'X-My-Header': 'value',
    },
  },
});
```

----------------------------------------

TITLE: Using Custom Options in Fixtures in JavaScript
DESCRIPTION: This code demonstrates how to use a custom option 'person' within a fixture, overriding the default 'page' fixture to set up a chat room with the person's name before each test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
const base = require('@playwright/test');

exports.test = base.test.extend({
  // Define an option and provide a default value.
  // We can later override it in the config.
  person: ['John', { option: true }],

  // Override default "page" fixture.
  page: async ({ page, person }, use) => {
    await page.goto('/chat');
    // We use "person" parameter as a "name" for the chat room.
    await page.getByLabel('User Name').fill(person);
    await page.getByText('Enter chat room').click();
    // Each test will get a "page" that already has the person name.
    await use(page);
  },
});
```

----------------------------------------

TITLE: Sign In Test with Asynchronous Python for Playwright
DESCRIPTION: This Python script demonstrates using asynchronous API calls in Playwright to automate a login process on GitHub. The script accesses and interacts with form fields before proceeding with authenticated test actions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
page = await context.new_page()
await page.goto('https://github.com/login')

await page.get_by_label("Username or email address").fill("username")
await page.get_by_label("Password").fill("password")
await page.get_by_role("button", name="Sign in").click()
```

----------------------------------------

TITLE: Injecting Initialization Scripts into Playwright BrowserContext (JS, Java, Python, C#)
DESCRIPTION: Shows how to use `addInitScript` to add a script (specified by path or content) that runs early in the lifecycle of any new page or frame within the BrowserContext. This example loads the `preload.js` script to modify the environment. The script executes after the document is created but before other scripts run.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
// In your playwright script, assuming the preload.js file is in same directory.
await browserContext.addInitScript({
  path: 'preload.js'
});
```

LANGUAGE: java
CODE:
```
// In your playwright script, assuming the preload.js file is in same directory.
browserContext.addInitScript(Paths.get("preload.js"));
```

LANGUAGE: python
CODE:
```
# in your playwright script, assuming the preload.js file is in same directory.
await browser_context.add_init_script(path="preload.js")
```

LANGUAGE: python
CODE:
```
# in your playwright script, assuming the preload.js file is in same directory.
browser_context.add_init_script(path="preload.js")
```

LANGUAGE: csharp
CODE:
```
await Context.AddInitScriptAsync(scriptPath: "preload.js");
```

----------------------------------------

TITLE: Configuring Project Dependencies in Playwright
DESCRIPTION: Configuration that sets up a dependency structure where browser-specific projects depend on a common setup project. This ensures setup tasks run before the actual tests across different browsers.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-projects-js.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'setup',
      testMatch: '**/*.setup.ts',
    },
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
      dependencies: ['setup'],
    },
    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
      dependencies: ['setup'],
    },
    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
      dependencies: ['setup'],
    },
  ],
});
```

----------------------------------------

TITLE: Using Web-First Assertions with NUnit in C#
DESCRIPTION: Provides an example of a Playwright for .NET test using NUnit and Web-First Assertions. It shows how to wait for an element with the class ".status" to have the text "Submitted", with Playwright automatically retrying until the condition is met or a timeout occurs.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_45

LANGUAGE: csharp
CODE:
```
using System.Threading.Tasks;
using Microsoft.Playwright.NUnit;
using NUnit.Framework;

namespace PlaywrightTests;

[TestFixture]
public class ExampleTests : PageTest
{
    [Test]
    public async Task StatusBecomesSubmitted()
    {
        await Expect(Page.Locator(".status")).ToHaveTextAsync("Submitted");
    }
}
```

----------------------------------------

TITLE: Polling with Playwright Expect Poll (JS)
DESCRIPTION: Shows how to use `expect.poll` to repeatedly execute an asynchronous function and assert its return value until the assertion passes or the specified timeout is reached. Includes options for a custom message and timeout.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_39

LANGUAGE: js
CODE:
```
await expect.poll(async () => {
  const response = await page.request.get('https://api.example.com');
  return response.status();
}, {
  // Custom expect message for reporting, optional.
  message: 'make sure API eventually succeeds',
  // Poll for 10 seconds; defaults to 5 seconds. Pass 0 to disable timeout.
  timeout: 10000,
}).toBe(200);
```

----------------------------------------

TITLE: Waiting for and Saving Downloads in Playwright (Python Sync)
DESCRIPTION: Shows the synchronous Python pattern using the `with page.expect_download()` context manager. Similar to the async version, the download action occurs within the context, the `Download` object is obtained from `download_info.value`, and the file is saved using `download.save_as()` and `download.suggested_filename`. Requires a sync Playwright `page` object and an element that initiates a download.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-download.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
# Start waiting for the download
with page.expect_download() as download_info:
    # Perform the action that initiates download
    page.get_by_text("Download file").click()
download = download_info.value

# Wait for the download process to complete and save the downloaded file somewhere
download.save_as("/path/to/save/at/" + download.suggested_filename)
```

----------------------------------------

TITLE: Running All Playwright Tests in C#
DESCRIPTION: Command to run all Playwright tests using the dotnet CLI.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
dotnet test
```

----------------------------------------

TITLE: Viewing Playwright HTML Report Locally (JavaScript)
DESCRIPTION: This Bash command utilizes the Playwright CLI to serve a previously generated HTML report. It requires Node.js and Playwright to be installed. Execute this command in your terminal, replacing `name-of-my-extracted-playwright-report` with the actual path to the folder containing the extracted report files downloaded from CI artifacts. It starts a local web server, allowing you to view the interactive report in your browser.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci-intro.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
npx playwright show-report name-of-my-extracted-playwright-report

```

----------------------------------------

TITLE: Waiting for Event in Playwright (Multiple Languages)
DESCRIPTION: Demonstrates how to wait for a specific event in Playwright using different programming languages. This method waits for an event to fire and handles it accordingly.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_22

LANGUAGE: javascript
CODE:
```
const pagePromise = context.waitForEvent('page');
await page.getByRole('button').click();
const page = await pagePromise;
```

LANGUAGE: java
CODE:
```
Page newPage = context.waitForPage(() -> page.getByRole(AriaRole.BUTTON).click());
```

LANGUAGE: python
CODE:
```
async with context.expect_event("page") as event_info:
    await page.get_by_role("button").click()
page = await event_info.value
```

LANGUAGE: csharp
CODE:
```
var page = await context.RunAndWaitForPageAsync(async () =>
{
    await page.GetByRole(AriaRole.Button).ClickAsync();
});
```

----------------------------------------

TITLE: Open Playwright Trace Viewer (Bash)
DESCRIPTION: Shows the command-line instruction using the Playwright PowerShell script (`playwright.ps1`) to launch the Playwright Trace Viewer. Users can then drag and drop trace files into the viewer to analyze test runs.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_51

LANGUAGE: bash
CODE:
```
pwsh bin/Debug/netX/playwright.ps1 show-trace
```

----------------------------------------

TITLE: Filtering Locator by Text and Chaining in C#
DESCRIPTION: Illustrates filtering a list item (`li`) by its text content ("My Item") using the `HasTextString` option in Playwright for .NET. After finding the correct list item, it chains another locator to find and click a "button" within that specific list item.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_47

LANGUAGE: csharp
CODE:
```
await Page.Locator("li", new() { HasTextString = "My Item" })
              .Locator("button").click();
```

----------------------------------------

TITLE: Configuring Project Setup and Teardown in Playwright Config
DESCRIPTION: Shows how to define a project configuration with setup, teardown, and dependencies between projects.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_26

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'setup',
      testMatch: /global.setup\.ts/,
      teardown: 'teardown',
    },
    {
      name: 'teardown',
      testMatch: /global.teardown\.ts/,
    },
    {
      name: 'chromium',
      use: devices['Desktop Chrome'],
      dependencies: ['setup'],
    },
    {
      name: 'firefox',
      use: devices['Desktop Firefox'],
      dependencies: ['setup'],
    },
    {
      name: 'webkit',
      use: devices['Desktop Safari'],
      dependencies: ['setup'],
    },
  ],
});
```

----------------------------------------

TITLE: Chaining Locators to Target Specific Elements in Playwright
DESCRIPTION: Shows how to narrow down element selection by chaining locator methods. This example creates a product locator by finding list items with specific text, then targets a button within that element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_22

LANGUAGE: javascript
CODE:
```
const product = page.getByRole('listitem').filter({ hasText: 'Product 2' });

await product.getByRole('button', { name: 'Add to cart' }).click();

await expect(product).toHaveCount(1);
```

LANGUAGE: python-async
CODE:
```
product = page.get_by_role("listitem").filter(has_text="Product 2")

await product.get_by_role("button", name="Add to cart").click()
```

LANGUAGE: python-sync
CODE:
```
product = page.get_by_role("listitem").filter(has_text="Product 2")

product.get_by_role("button", name="Add to cart").click()
```

LANGUAGE: java
CODE:
```
Locator product = page
    .getByRole(AriaRole.LISTITEM)
    .filter(new Locator.FilterOptions().setHasText("Product 2"));

product
    .getByRole(AriaRole.BUTTON,
               new Locator.GetByRoleOptions().setName("Add to cart"))
    .click();
```

LANGUAGE: csharp
CODE:
```
var product = page
    .GetByRole(AriaRole.Listitem)
    .Filter(new() { HasText = "Product 2" });

await product
    .GetByRole(AriaRole.Button, new() { Name = "Add to cart" })
    .ClickAsync();
```

----------------------------------------

TITLE: Implement Global beforeEach/afterEach Hooks with Playwright Auto Fixtures - JS
DESCRIPTION: Illustrates how to create hooks that run before and after every test globally by defining an auto fixture (`auto: true`). This pattern is useful for common test setup and teardown logic that applies to all tests, such as navigating to a base URL.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_26

LANGUAGE: TypeScript
CODE:
```
import { test as base } from '@playwright/test';

export const test = base.extend<{ forEachTest: void }>({
  forEachTest: [async ({ page }, use) => {
    // This code runs before every test.
    await page.goto('http://localhost:8000');
    await use();
    // This code runs after every test.
    console.log('Last URL:', page.url());
  }, { auto: true }],  // automatically starts for every test.
});
```

LANGUAGE: TypeScript
CODE:
```
import { test } from './fixtures';
import { expect } from '@playwright/test';

test('basic', async ({ page }) => {
  expect(page).toHaveURL('http://localhost:8000');
  await page.goto('https://playwright.dev');
});
```

----------------------------------------

TITLE: Define TodoPage Class in Playwright Test (TypeScript)
DESCRIPTION: Defines a Page Object Model (POM) for the TodoMVC application. It encapsulates interactions with the page elements like adding, removing, and clearing todo items. This class is used by the custom fixture.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_15

LANGUAGE: TypeScript
CODE:
```
import type { Page, Locator } from '@playwright/test';

export class TodoPage {
  private readonly inputBox: Locator;
  private readonly todoItems: Locator;

  constructor(public readonly page: Page) {
    this.inputBox = this.page.locator('input.new-todo');
    this.todoItems = this.page.getByTestId('todo-item');
  }

  async goto() {
    await this.page.goto('https://demo.playwright.dev/todomvc/');
  }

  async addToDo(text: string) {
    await this.inputBox.fill(text);
    await this.inputBox.press('Enter');
  }

  async remove(text: string) {
    const todo = this.todoItems.filter({ hasText: text });
    await todo.hover();
    await todo.getByLabel('Delete').click();
  }

  async removeAll() {
    while ((await this.todoItems.count()) > 0) {
      await this.todoItems.first().hover();
      await this.todoItems.getByLabel('Delete').first().click();
    }
  }
}
```

----------------------------------------

TITLE: Launching Browser and Navigating Page in Async Playwright Python
DESCRIPTION: This Python snippet demonstrates asynchronous browser automation using Playwright to launch a Firefox browser and navigate to a URL. It requires the use of Playwright's async API and Python's asyncio library. Ensures the browser is closed after use.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_2

LANGUAGE: Python
CODE:
```
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    firefox = playwright.firefox
    browser = await firefox.launch()
    page = await browser.new_page()
    await page.goto("https://example.com")
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())
```

----------------------------------------

TITLE: Mocking API Requests in JavaScript
DESCRIPTION: This code intercepts calls to a fruit API endpoint and returns a custom mock response without making the actual API call. It demonstrates how to define a route handler, fulfill with mock JSON data, and assert that the mocked data appears on the page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
test("mocks a fruit and doesn't call api", async ({ page }) => {
  // Mock the api call before navigating
  await page.route('*/**/api/v1/fruits', async route => {
    const json = [{ name: 'Strawberry', id: 21 }];
    await route.fulfill({ json });
  });
  // Go to the page
  await page.goto('https://demo.playwright.dev/api-mocking');

  // Assert that the Strawberry fruit is visible
  await expect(page.getByText('Strawberry')).toBeVisible();
});
```

----------------------------------------

TITLE: Navigation Example in Playwright
DESCRIPTION: Shows how to perform basic page navigation in Playwright tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-csharp.md#2025-04-22_snippet_2

LANGUAGE: csharp
CODE:
```
await Page.GotoAsync("https://playwright.dev");
```

----------------------------------------

TITLE: Using to_have_title Assertion in Python (Sync)
DESCRIPTION: Example of using to_have_title assertion in synchronous Python to verify page title matches a pattern. This checks if the page title contains 'checkout' using a regular expression.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
import re
from playwright.sync_api import expect

# ...
expect(page).to_have_title(re.compile(r".*checkout"))
```

----------------------------------------

TITLE: Chaining Route Handlers with Route.abort and Route.fallback - Java
DESCRIPTION: Shows the equivalent handler chaining in Java using Playwright. Multiple handlers registered; fallback passes control, abort terminates the chain. This facilitates structured request processing and is valuable for scenarios needing extensibility or prioritized middleware.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_6

LANGUAGE: java
CODE:
```
page.route("**/*", route -> {
  // Runs last.
  route.abort();
});

page.route("**/*", route -> {
  // Runs second.
  route.fallback();
});

page.route("**/*", route -> {
  // Runs first.
  route.fallback();
});
```

----------------------------------------

TITLE: Validating UI Created Issue via API in JavaScript
DESCRIPTION: This snippet shows how to create an issue using the Playwright UI and then validate its creation via an API call. Ensures synchronization between UI actions and backend state. Requires Playwright and GitHub access tokens.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-js.md#2025-04-22_snippet_6

LANGUAGE: JavaScript
CODE:
```
import { test, expect } from '@playwright/test';

const REPO = 'test-repo-1';
const USER = 'github-username';

// Request context is reused by all tests in the file.
let apiContext;

test.beforeAll(async ({ playwright }) => {
  apiContext = await playwright.request.newContext({
    // All requests we send go to this API endpoint.
    baseURL: 'https://api.github.com',
    extraHTTPHeaders: {
      // We set this header per GitHub guidelines.
      'Accept': 'application/vnd.github.v3+json',
      // Add authorization token to all requests.
      // Assuming personal access token available in the environment.
      'Authorization': `token ${process.env.API_TOKEN}`,
    },
  });
});

test.afterAll(async ({ }) => {
  // Dispose all responses.
  await apiContext.dispose();
});

test('last created issue should be on the server', async ({ page }) => {
  await page.goto(`https://github.com/${USER}/${REPO}/issues`);
  await page.getByText('New Issue').click();
  await page.getByRole('textbox', { name: 'Title' }).fill('Bug report 1');
  await page.getByRole('textbox', { name: 'Comment body' }).fill('Bug description');
  await page.getByText('Submit new issue').click();
  const issueId = new URL(page.url()).pathname.split('/').pop();

  const newIssue = await apiContext.get(
      `https://api.github.com/repos/${USER}/${REPO}/issues/${issueId}`
  );
  expect(newIssue.ok()).toBeTruthy();
  expect(newIssue.json()).toEqual(expect.objectContaining({
    title: 'Bug report 1'
  }));
});
```

----------------------------------------

TITLE: Creating a Custom Fixture for Database User Isolation (TypeScript)
DESCRIPTION: Defines a custom fixture that creates and manages isolated database users for each test worker, ensuring data isolation in parallel test runs.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
import { test as baseTest, expect } from '@playwright/test';
// Import project utils for managing users in the test database.
import { createUserInTestDatabase, deleteUserFromTestDatabase } from './my-db-utils';

export * from '@playwright/test';
export const test = baseTest.extend<{}, { dbUserName: string }>({
  // Returns db user name unique for the worker.
  dbUserName: [async ({ }, use) => {
    // Use workerIndex as a unique identifier for each worker.
    const userName = `user-${test.info().workerIndex}`;
    // Initialize user in the database.
    await createUserInTestDatabase(userName);
    await use(userName);
    // Clean up after the tests are done.
    await deleteUserFromTestDatabase(userName);
  }, { scope: 'worker' }],
});
```

----------------------------------------

TITLE: Configuring Jenkins for Playwright Tests (Multiple Languages)
DESCRIPTION: These Groovy scripts configure Jenkins pipelines to run Playwright tests using Docker agents for JavaScript, Python, Java, and C# projects. Each configuration uses the appropriate Playwright Docker image and runs the necessary build and test commands.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_34

LANGUAGE: groovy
CODE:
```
pipeline {
   agent { docker { image 'mcr.microsoft.com/playwright:v%%VERSION%%-noble' } }
   stages {
      stage('e2e-tests') {
         steps {
            sh 'npm ci'
            sh 'npx playwright test'
         }
      }
   }
}
```

LANGUAGE: groovy
CODE:
```
pipeline {
   agent { docker { image 'mcr.microsoft.com/playwright/python:v%%VERSION%%-noble' } }
   stages {
      stage('e2e-tests') {
         steps {
            sh 'pip install -r requirements.txt'
            sh 'pytest'
         }
      }
   }
}
```

LANGUAGE: groovy
CODE:
```
pipeline {
   agent { docker { image 'mcr.microsoft.com/playwright/java:v%%VERSION%%-noble' } }
   stages {
      stage('e2e-tests') {
         steps {
            sh 'mvn -B install -D skipTests --no-transfer-progress'
            sh 'mvn test'
         }
      }
   }
}
```

LANGUAGE: groovy
CODE:
```
pipeline {
   agent { docker { image 'mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble' } }
   stages {
      stage('e2e-tests') {
         steps {
            sh 'dotnet build'
            sh 'dotnet test'
         }
      }
   }
}
```

----------------------------------------

TITLE: Running Playwright Tests with Preset Authentication in JavaScript
DESCRIPTION: This code snippet illustrates how to write a Playwright test that assumes a pre-authenticated state, leveraging the stored authentication states defined in configuration setups.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
import { test } from '@playwright/test';

test('test', async ({ page }) => {
  // page is authenticated
});
```

----------------------------------------

TITLE: Validating Backend State after UI Actions with Playwright in Java
DESCRIPTION: This snippet illustrates using Playwright for Java to create an issue via API, then validate its appearance in the GitHub UI using browser automation and LocatorAssertions. It requires Playwright for Java, an authenticated API context, and a setup repository. Inputs include issue data, while outputs are visible issues in the GitHub web UI. Navigation, locator use, and assertion combine API and browser testing in one workflow.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-java.md#2025-04-22_snippet_4

LANGUAGE: java
CODE:
```
public class TestGitHubAPI {
  @Test
  void lastCreatedIssueShouldBeFirstInTheList() {
    Map<String, String> data = new HashMap<>();
    data.put("title", "[Feature] request 1");
    data.put("body", "Feature description");
    APIResponse newIssue = request.post("/repos/" + USER + "/" + REPO + "/issues",
      RequestOptions.create().setData(data));
    assertTrue(newIssue.ok());

    page.navigate("https://github.com/" + USER + "/" + REPO + "/issues");
    Locator firstIssue = page.locator("a[data-hovercard-type='issue']").first();
    assertThat(firstIssue).hasText("[Feature] request 1");
  }
}

```

----------------------------------------

TITLE: Configuring Web Server for Tests
DESCRIPTION: Sets up a development web server during test execution with custom configuration for command, URL, timeout, and server reuse options.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_21

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';
export default defineConfig({
  webServer: {
    command: 'npm run start',
    url: 'http://localhost:3000',
    timeout: 120 * 1000,
    reuseExistingServer: !process.env.CI,
  },
  use: {
    baseURL: 'http://localhost:3000/',
  },
});
```

----------------------------------------

TITLE: Configuring Playwright Navigation Timeout (JavaScript)
DESCRIPTION: Specifies the maximum time in milliseconds for navigation operations in Playwright for JavaScript. It defaults to 0 (no timeout). The default value can be modified through the `navigationTimeout` option in the configuration file or by using methods like `BrowserContext.setDefaultNavigationTimeout` or `Page.setDefaultNavigationTimeout`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_2

LANGUAGE: markdown
CODE:
```
- `timeout` <[float]>
```

----------------------------------------

TITLE: Locating Elements Inside Frames with Playwright C#
DESCRIPTION: This C# Playwright sample demonstrates frame element location and interaction inside an iframe, using FrameLocator and GetByLabel. The code awaits both the locator and the fill operation. Requires the Microsoft.Playwright NuGet package and an initialized page instance.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/frames.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
// Locate element inside frame
var username = await page.FrameLocator(".frame-class").GetByLabel("User Name");
await username.FillAsync("John");
```

----------------------------------------

TITLE: Locate Element within Frame using Playwright Java
DESCRIPTION: Shows how to use `page.frameLocator()` to target an iframe by its selector ('#my-frame'), then locate an element ('text=Submit') within that frame, and finally click the located element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_50

LANGUAGE: Java
CODE:
```
Locator locator = page.frameLocator("#my-frame").locator("text=Submit");
locator.click();
```

----------------------------------------

TITLE: Locating Elements Inside Frames with Playwright Python (Async)
DESCRIPTION: This async Python snippet utilizes Playwright's frame_locator and get_by_label APIs to find and interact with an element within a frame. It awaits both the locator and fill operation, making it suitable for asynchronous contexts. Dependencies include Playwright Python (async flavor), with '.frame-class' as the frame selector and 'User Name' as the label.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/frames.md#2025-04-22_snippet_2

LANGUAGE: python async
CODE:
```
# Locate element inside frame
username = await page.frame_locator('.frame-class').get_by_label('User Name')
await username.fill('John')
```

----------------------------------------

TITLE: Running Tests with Chromium Headless via dotnet CLI
DESCRIPTION: Shows how to launch tests using the `dotnet test` command line interface while specifying the 'chromium' browser and channel to utilize the new Chromium headless mode directly from the command line.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_7

LANGUAGE: bash
CODE:
```
dotnet test -- Playwright.BrowserName=chromium Playwright.LaunchOptions.Channel=chromium
```

----------------------------------------

TITLE: Manual Time Control with Playwright in Java
DESCRIPTION: Demonstrates manual time control in Java using Playwright's clock API with SimpleDateFormat for parsing dates. The example initializes a clock, pauses time at a specific point, and then advances time while verifying the UI updates correctly.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_19

LANGUAGE: java
CODE:
```
SimpleDateFormat format = new SimpleDateFormat("yyy-MM-dd'T'HH:mm:ss");
// Initialize clock with a specific time, let the page load naturally.
page.clock().install(new Clock.InstallOptions()
    .setTime(format.parse("2024-02-02T08:00:00")));
page.navigate("http://localhost:3333");
Locator locator = page.getByTestId("current-time");

// Pause the time flow, stop the timers, you now have manual control
// over the page time.
page.clock().pauseAt(format.parse("2024-02-02T10:00:00"));
assertThat(locator).hasText("2/2/2024, 10:00:00 AM");

// Tick through time manually, firing all timers in the process.
// In this case, time will be updated in the screen 2 times.
page.clock().runFor(2000);
assertThat(locator).hasText("2/2/2024, 10:00:02 AM");
```

----------------------------------------

TITLE: Accessing WorkerInfo Configuration in JavaScript
DESCRIPTION: Retrieves the processed configuration from the configuration file. This property provides access to the full configuration object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-workerinfo.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
workerInfo.config
```

----------------------------------------

TITLE: Using Frame Locators to Interact with Elements in iframes
DESCRIPTION: Example showing how to use frame locators in Playwright to locate and interact with elements inside iframes, which can wait for iframe to appear and be used in Web-First assertions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_60

LANGUAGE: javascript
CODE:
```
const locator = page.frameLocator('#my-iframe').locator('text=Submit');
await locator.click();
```

----------------------------------------

TITLE: Using Fixtures in Playwright Tests (Python)
DESCRIPTION: Demonstrates how to use pytest fixtures with Playwright tests. This example shows a function-scoped fixture that runs before and after each test, navigating to a starting URL.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-python.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
import pytest
from playwright.sync_api import Page, expect

@pytest.fixture(scope="function", autouse=True)
def before_each_after_each(page: Page):
    
    print("before the test runs")

    # Go to the starting url before each test.
    page.goto("https://playwright.dev/")
    yield
    
    print("after the test runs")

def test_main_navigation(page: Page):
    # Assertions use the expect API.
    expect(page).to_have_url("https://playwright.dev/")
```

----------------------------------------

TITLE: Running Playwright Codegen from Command Line - JavaScript - Bash
DESCRIPTION: This snippet illustrates how to invoke Playwright's test code generator for a given URL using the Node.js-based CLI. The 'npx playwright codegen' command launches the interactive code generation session in a browser for a specified site. Requires Playwright to be installed in the current project, and 'npx' to be available. The first argument is the target URL for which to generate tests. Outputs a browser and inspector window for user-driven test recording.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx playwright codegen demo.playwright.dev/todomvc
```

----------------------------------------

TITLE: Waiting for and Saving Downloads in Playwright (JavaScript)
DESCRIPTION: Shows the asynchronous pattern in JavaScript using `page.waitForEvent('download')` to capture the `Download` object after triggering the download action (e.g., a click). It then saves the downloaded file to a specified path using `download.saveAs()` and `download.suggestedFilename()`. Requires a Playwright `page` object and an element that initiates a download.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-download.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
// Start waiting for download before clicking. Note no await.
const downloadPromise = page.waitForEvent('download');
await page.getByText('Download file').click();
const download = await downloadPromise;

// Wait for the download process to complete and save the downloaded file somewhere.
await download.saveAs('/path/to/save/at/' + download.suggestedFilename());
```

----------------------------------------

TITLE: Using to_have_url Assertion in Python (Sync)
DESCRIPTION: Example of using to_have_url assertion in synchronous Python to verify page URL matches a pattern. This checks if the page URL contains 'checkout' using a regular expression.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
import re
from playwright.sync_api import expect

# ...
expect(page).to_have_url(re.compile(".*checkout"))
```

----------------------------------------

TITLE: Using PageAssertions to Verify URL Pattern in C#
DESCRIPTION: Example of using Expect assertions in C# to verify URL pattern after clicking a sign-in button. Uses System.Text.RegularExpressions for pattern matching in the URL assertion.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_4

LANGUAGE: csharp
CODE:
```
using System.Text.RegularExpressions;
using Microsoft.Playwright;
using Microsoft.Playwright.MSTest;

namespace PlaywrightTests;

[TestClass]
public class ExampleTests : PageTest
{
    [TestMethod]
    public async Task NavigateToLoginPage()
    {
        await Page.GetByRole(AriaRole.Button, new() { Name = "Sign In" }).ClickAsync();
        await Expect(Page).ToHaveURLAsync(new Regex(".*/login"));
    }
}
```

----------------------------------------

TITLE: Handling Console Messages in Multiple Languages
DESCRIPTION: These snippets show how to handle console messages emitted by the page in JavaScript, Java, Python, and C#.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
page.on('console', async msg => {
  const values = [];
  for (const arg of msg.args())
    values.push(await arg.jsonValue());
  console.log(...values);
});
await page.evaluate(() => console.log('hello', 5, { foo: 'bar' }));
```

LANGUAGE: java
CODE:
```
page.onConsoleMessage(msg -> {
  for (int i = 0; i < msg.args().size(); ++i)
    System.out.println(i + ": " + msg.args().get(i).jsonValue());
});
page.evaluate("() => console.log('hello', 5, { foo: 'bar' })");
```

LANGUAGE: python
CODE:
```
async def print_args(msg):
    values = []
    for arg in msg.args:
        values.append(await arg.json_value())
    print(values)

page.on("console", print_args)
await page.evaluate("console.log('hello', 5, { foo: 'bar' })")
```

LANGUAGE: csharp
CODE:
```
page.Console += async (_, msg) =>
{
    foreach (var arg in msg.Args)
        Console.WriteLine(await arg.JsonValueAsync<object>());
};

await page.EvaluateAsync("console.log('hello', 5, { foo: 'bar' })");
```

----------------------------------------

TITLE: Asserting Element Text with Playwright TypeScript
DESCRIPTION: Asserts that the element located by the locator matches the specified text. This assertion automatically retries until the condition is met or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_24

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toHaveText()
```

----------------------------------------

TITLE: Debugging Specific Test Function
DESCRIPTION: Commands to debug a specific test function using Playwright Inspector across different shells.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_10

LANGUAGE: bash
CODE:
```
PWDEBUG=1 pytest -s -k test_get_started_link
```

LANGUAGE: batch
CODE:
```
set PWDEBUG=1
pytest -s -k test_get_started_link
```

LANGUAGE: powershell
CODE:
```
$env:PWDEBUG=1
pytest -s -k test_get_started_link
```

----------------------------------------

TITLE: Verify Response Success
DESCRIPTION: The `Response.ok` method checks if the HTTP status code signifies a successful request (status range 200-299). It returns a boolean indicating success.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
const success = response.ok();\nconsole.log('Success:', success);
```

----------------------------------------

TITLE: Verifying Element Disabled State in Playwright
DESCRIPTION: Shows how to check if an element is disabled using Playwright's isDisabled method across different programming languages. Returns a boolean indicating whether the element is disabled.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_65

LANGUAGE: javascript
CODE:
```
const disabled = await page.getByRole('button').isDisabled();
```

LANGUAGE: java
CODE:
```
boolean disabled = page.getByRole(AriaRole.BUTTON).isDisabled();
```

LANGUAGE: python-async
CODE:
```
disabled = await page.get_by_role("button").is_disabled()
```

LANGUAGE: python-sync
CODE:
```
disabled = page.get_by_role("button").is_disabled()
```

LANGUAGE: csharp
CODE:
```
Boolean disabled = await page.GetByRole(AriaRole.Button).IsDisabledAsync();
```

----------------------------------------

TITLE: Configuring Test Timeout in Playwright
DESCRIPTION: Sets the base timeout for all tests in milliseconds. Default is 30 seconds. Can be overridden per test using Test.setTimeout().
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_17

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  timeout: 5 * 60 * 1000,
});
```

----------------------------------------

TITLE: Checking a Checkbox or Radio via Playwright Java
DESCRIPTION: Uses Java Playwright to programmatically check an input of type checkbox. Only works with elements matching the role. Action is performed atomically and throws on mismatches.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_31

LANGUAGE: Java
CODE:
```
page.getByRole(AriaRole.CHECKBOX).check();
```

----------------------------------------

TITLE: Configuring GitHub Actions for Playwright Tests (C#/.NET)
DESCRIPTION: This YAML configuration defines a GitHub Actions workflow for running Playwright tests within a C#/.NET project. It activates on pushes and pull requests to the main/master branches. The workflow checks out the repository, sets up the .NET 8.0.x SDK, builds the project using `dotnet build`, installs the necessary Playwright browsers and their dependencies using the generated PowerShell script (`playwright.ps1`), and executes the tests using `dotnet test`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci-intro.md#2025-04-22_snippet_3

LANGUAGE: yml
CODE:
```
name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Build & Install
      run: dotnet build
    - name: Ensure browsers are installed
      run: pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps
    - name: Run your tests
      run: dotnet test

```

----------------------------------------

TITLE: Configuring Base URL with test.use in Playwright
DESCRIPTION: Shows how to configure the `baseURL` option for tests using `test.use`. This setting can be applied per file or globally in the Playwright configuration.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
test.use({ baseURL: 'https://playwright.dev' });
```

----------------------------------------

TITLE: GitHub Actions Workflow for C# Playwright in Containers
DESCRIPTION: The YAML configuration defines a workflow for running C# Playwright tests using Docker containers in GitHub Actions, ensuring a controlled environment. The setup is efficient for CI operations, triggered upon main branch activities.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_16

LANGUAGE: yml
CODE:
```
name: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  playwright:\n    name: 'Playwright Tests'\n    runs-on: ubuntu-latest\n    container:\n      image: mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble\n      options: --user 1001\n    steps:\n      - uses: actions/checkout@v4\n      - name: Setup dotnet\n        uses: actions/setup-dotnet@v4\n        with:\n          dotnet-version: 8.0.x\n      - run: dotnet build\n      - name: Run your tests\n        run: dotnet test
```

----------------------------------------

TITLE: Taking a Screenshot with Playwright Library (JavaScript)
DESCRIPTION: This snippet demonstrates how to use Playwright Library to launch WebKit, navigate to a page, and take a screenshot. It includes browser launch, page creation, navigation, and screenshot capture.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-js.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
const { webkit } = require('playwright');

(async () => {
  const browser = await webkit.launch();
  const page = await browser.newPage();
  await page.goto('https://playwright.dev/');
  await page.screenshot({ path: `example.png` });
  await browser.close();
})();
```

----------------------------------------

TITLE: Manually Creating a Browser Context in Playwright (Java)
DESCRIPTION: Shows the Java syntax for launching a browser (`chromium.launch()`), creating a new isolated `BrowserContext` (`browser.newContext()`), and then creating a `Page` (`context.newPage()`) within that context using the Playwright Java library. This demonstrates manual isolation setup.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_2

LANGUAGE: java
CODE:
```
Browser browser = chromium.launch();
BrowserContext context = browser.newContext();
Page page = context.newPage();
```

----------------------------------------

TITLE: Auto-waiting Navigation and Interaction in Java
DESCRIPTION: Demonstrates how Playwright in Java automatically waits for elements to be actionable before interacting with them after navigation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_6

LANGUAGE: java
CODE:
```
// Navigate and click element
// Click will auto-wait for the element
page.navigate("https://example.com");
page.getByText("Example Domain").click();
```

----------------------------------------

TITLE: Running Playwright Tests in UI Mode via yarn - Bash
DESCRIPTION: Executes Playwright test suites in UI mode with yarn, supplying a visual environment for managing and debugging tests. Useful for development and troubleshooting. Requires Playwright installed and configured.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_11

LANGUAGE: bash
CODE:
```
yarn playwright test --ui
```

----------------------------------------

TITLE: Handling Dialog Events in Java
DESCRIPTION: Demonstrates how to add a one-time dialog handler in Java using Playwright. The handler accepts the dialog with a predefined value.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_67

LANGUAGE: java
CODE:
```
page.onceDialog(dialog -> {
  dialog.accept("foo");
});

// prints 'foo'
System.out.println(page.evaluate("prompt('Enter string:')"));

// prints 'null' as the dialog will be auto-dismissed because there are no handlers.
System.out.println(page.evaluate("prompt('Enter string:'"));
```

----------------------------------------

TITLE: Using Web-First Assertions for Text Content - Playwright Java
DESCRIPTION: Illustrates a web-first assertion using assertThat from PlaywrightAssertions. It clicks a submit button and then asserts that an element with class 'status' eventually has the text 'Submitted', automatically retrying until the condition is met or timeout occurs.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_48

LANGUAGE: Java
CODE:
```
import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

public class TestExample {
  @Test
  void statusBecomesSubmitted() {
    // ...
    page.locator("#submit-button").click();
    assertThat(page.locator(".status")).hasText("Submitted");
  }
}
```

----------------------------------------

TITLE: ElementHandle Screenshot Implementation
DESCRIPTION: Method for capturing screenshots of specific elements, with support for clipping, masks and styling options. The method handles scrolling and actionability checks before taking the screenshot.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_42

LANGUAGE: typescript
CODE:
```
async screenshot(options?: ScreenshotOptions): Promise<Buffer>;
```

----------------------------------------

TITLE: Routing from HAR File with Playwright .NET
DESCRIPTION: Explains how to use a previously recorded HAR file to serve responses for matching network requests in Playwright for .NET. The context.RouteFromHARAsync method is used to configure the browser context to intercept requests and serve responses from the specified HAR file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_38

LANGUAGE: csharp
CODE:
```
await context.RouteFromHARAsync("example.har");
```

----------------------------------------

TITLE: Configuring Project Dependencies in Playwright
DESCRIPTION: Demonstrates how to configure dependencies between test projects using the new TestProject.dependencies property in the Playwright configuration file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_32

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'setup',
      testMatch: /global.setup\.ts/,
    },
    {
      name: 'chromium',
      use: devices['Desktop Chrome'],
      dependencies: ['setup'],
    },
    {
      name: 'firefox',
      use: devices['Desktop Firefox'],
      dependencies: ['setup'],
    },
    {
      name: 'webkit',
      use: devices['Desktop Safari'],
      dependencies: ['setup'],
    },
  ],
});
```

----------------------------------------

TITLE: Accessing TestInfo Properties in Playwright JavaScript
DESCRIPTION: This snippet shows how to access the test title from the testInfo object and how to use testInfo.outputPath to generate a file path within the test's unique output directory for saving artifacts like screenshots. It requires importing test and expect from @playwright/test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfo.md#_snippet_0

LANGUAGE: js
CODE:
```
import { test, expect } from '@playwright/test';

test('basic test', async ({ page }, testInfo) => {
  expect(testInfo.title).toBe('basic test');
  await page.screenshot(testInfo.outputPath('screenshot.png'));
});
```

----------------------------------------

TITLE: Configuring Test Options in Playwright Configuration File
DESCRIPTION: Example showing how to configure test options like headless mode, viewport size, HTTPS error handling, and video recording in the Playwright configuration file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';
export default defineConfig({
  use: {
    headless: false,
    viewport: { width: 1280, height: 720 },
    ignoreHTTPSErrors: true,
    video: 'on-first-retry',
  },
});
```

----------------------------------------

TITLE: Setting Input Files in Playwright with Python (async)
DESCRIPTION: Shows various ways to upload files using set_input_files method in Python with async syntax, including uploading a single file, multiple files, a directory, removing selected files, and uploading a buffer from memory.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_91

LANGUAGE: python
CODE:
```
# Select one file
await page.get_by_label("Upload file").set_input_files('myfile.pdf')

# Select multiple files
await page.get_by_label("Upload files").set_input_files(['file1.txt', 'file2.txt'])

# Select a directory
await page.get_by_label("Upload directory").set_input_files('mydir')

# Remove all the selected files
await page.get_by_label("Upload file").set_input_files([])

# Upload buffer from memory
await page.get_by_label("Upload file").set_input_files(
    files=[
        {"name": "test.txt", "mimeType": "text/plain", "buffer": b"this is a test"}
    ],
)
```

----------------------------------------

TITLE: Handling Popups and Waiting for DOM Content in Python (Sync)
DESCRIPTION: Shows how to wait for a popup to be triggered by a button click and then wait for the 'domcontentloaded' state before interacting with the popup in Python using synchronous syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_128

LANGUAGE: python
CODE:
```
with page.expect_popup() as page_info:
    page.get_by_role("button").click() # click triggers a popup.
popup = page_info.value
# Wait for the "DOMContentLoaded" event.
popup.wait_for_load_state("domcontentloaded")
print(popup.title()) # popup is ready to use.
```

----------------------------------------

TITLE: Using toHaveValue Assertion in Playwright
DESCRIPTION: Shows how to validate input element values using toHaveValue assertion with regular expressions across different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_36

LANGUAGE: javascript
CODE:
```
const locator = page.locator('input[type=number]');
await expect(locator).toHaveValue(/[0-9]/);
```

LANGUAGE: python
CODE:
```
locator = page.locator("input[type=number]")
await expect(locator).to_have_value(re.compile(r"[0-9]"))
```

----------------------------------------

TITLE: Catching TimeoutError in Playwright (Async Python)
DESCRIPTION: This asynchronous Python example uses `async_playwright` to launch a Chromium browser and create a page. It demonstrates catching the `PlaywrightTimeoutError` (aliased from `playwright.async_api.TimeoutError`) within a try-except block when attempting to click an element ('Example') with a short timeout of 100ms.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-timeouterror.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
```python async
import asyncio
from playwright.async_api import async_playwright, TimeoutError as PlaywrightTimeoutError, Playwright

async def run(playwright: Playwright):
    browser = await playwright.chromium.launch()
    page = await browser.new_page()
    try:
      await page.locator("text=Example").click(timeout=100)
    except PlaywrightTimeoutError:
      print("Timeout!")
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)

asyncio.run(main())
```
```

----------------------------------------

TITLE: Automated Drag and Drop Operations
DESCRIPTION: Shows how to perform automated drag and drop operations using Playwright's dragTo() method. The operation includes hovering, pressing mouse button, moving to target, and releasing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
await page.locator('#item-to-be-dragged').dragTo(page.locator('#item-to-drop-at'));
```

LANGUAGE: java
CODE:
```
page.locator("#item-to-be-dragged").dragTo(page.locator("#item-to-drop-at"));
```

LANGUAGE: python
CODE:
```
await page.locator("#item-to-be-dragged").drag_to(page.locator("#item-to-drop-at"))
```

LANGUAGE: csharp
CODE:
```
await page.Locator("#item-to-be-dragged").DragToAsync(page.Locator("#item-to-drop-at"));
```

----------------------------------------

TITLE: Opening Trace Files with Playwright CLI
DESCRIPTION: Command line example showing how to open a recorded trace file using the Playwright CLI tool.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-csharp.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
pwsh bin/Debug/net8.0/playwright.ps1 show-trace bin/Debug/net8.0/playwright-traces/PlaywrightTests.ExampleTest.GetStartedLink.zip
```

----------------------------------------

TITLE: Grouping Trace Actions with test.step (JavaScript)
DESCRIPTION: Recommends using `test.step` (typically available within the Playwright Test runner) instead of `Tracing.group` for logically grouping actions in JavaScript tests. This approach integrates better with test reporting and provides clear steps in the trace view.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_15

LANGUAGE: js
CODE:
```
// use test.step instead
await test.step('Log in', async () => {
  // ...
});
```

----------------------------------------

TITLE: Adding and Removing Event Listeners in Playwright (Async Python)
DESCRIPTION: Illustrates adding event listeners using `page.on` and removing them using `page.remove_listener` in asynchronous Playwright for Python. Separate functions handle 'request' and 'requestfinished' events. The 'requestfinished' listener is removed by passing the event name and the function reference.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_12

LANGUAGE: python
CODE:
```
```python async
def print_request_sent(request):
  print("Request sent: " + request.url)

def print_request_finished(request):
  print("Request finished: " + request.url)

page.on("request", print_request_sent)
page.on("requestfinished", print_request_finished)
await page.goto("https://wikipedia.org")

page.remove_listener("requestfinished", print_request_finished)
await page.goto("https://www.openstreetmap.org/")
```
```

----------------------------------------

TITLE: Creating Emulated Context with Playwright Library (JavaScript)
DESCRIPTION: This snippet demonstrates using the Playwright library to create a new browser context that emulates an 'iPhone 13'. It retrieves the device parameters from `playwright.devices` and applies them when creating the context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
```js tab=js-library
const { chromium, devices } = require('playwright');
const browser = await chromium.launch();

const iphone13 = devices['iPhone 13'];
const context = await browser.newContext({
  ...iphone13,
});
```
```

----------------------------------------

TITLE: Saving a Downloaded File using saveAs in Playwright (JavaScript)
DESCRIPTION: This snippet specifically demonstrates how to call the `download.saveAs()` method in JavaScript to save a previously obtained `Download` object to a specified path, using the `download.suggestedFilename()` for the file name. Assumes a `download` object is already available.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-download.md#2025-04-22_snippet_5

LANGUAGE: js
CODE:
```
await download.saveAs('/path/to/save/at/' + download.suggestedFilename());
```

----------------------------------------

TITLE: Asserting Page URL with Playwright TypeScript
DESCRIPTION: Asserts that the page has a specific URL. This assertion automatically retries until the condition is met or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_30

LANGUAGE: TypeScript
CODE:
```
await expect(page).toHaveURL()
```

----------------------------------------

TITLE: Enabling Verbose API Logs in Playwright
DESCRIPTION: Commands to enable verbose API logging in Playwright using the DEBUG environment variable, which helps with detailed debugging of API calls.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
DEBUG=pw:api npx playwright test
```

LANGUAGE: batch
CODE:
```
set DEBUG=pw:api
npx playwright test
```

LANGUAGE: powershell
CODE:
```
$env:DEBUG="pw:api"
npx playwright test
```

----------------------------------------

TITLE: Asserting Element Editability using Playwright LocatorAssertions
DESCRIPTION: Ensures the Playwright Locator points to an element that is currently editable by the user. It accepts an optional `editable` boolean parameter (v1.26+) to explicitly assert for editable or non-editable states. A `timeout` option (placeholder `%%-js-assertions-timeout-%%` or `%%-csharp-java-python-assertions-timeout-%%`) is also available.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_11

LANGUAGE: javascript
CODE:
```
```js
const locator = page.getByRole('textbox');
await expect(locator).toBeEditable();
```
```

LANGUAGE: java
CODE:
```
```java
assertThat(page.getByRole(AriaRole.TEXTBOX)).isEditable();
```
```

LANGUAGE: python
CODE:
```
```python async
from playwright.async_api import expect

locator = page.get_by_role("textbox")
await expect(locator).to_be_editable()
```
```

LANGUAGE: python
CODE:
```
```python sync
from playwright.sync_api import expect

locator = page.get_by_role("textbox")
expect(locator).to_be_editable()
```
```

LANGUAGE: csharp
CODE:
```
```csharp
var locator = Page.GetByRole(AriaRole.Textbox);
await Expect(locator).ToBeEditableAsync();
```
```

----------------------------------------

TITLE: Selecting Option by Label in Playwright Java
DESCRIPTION: Demonstrates using Locator.selectOption to select an option in a <select> element by its visible text label. Requires Playwright Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_33

LANGUAGE: Java
CODE:
```
element.selectOption("Red");
```

----------------------------------------

TITLE: Sharding Playwright Tests for Multi-Machine Execution
DESCRIPTION: These snippets show how to shard Playwright tests for execution across multiple machines using different package managers (npm, yarn, pnpm). The --shard flag is used to specify the shard number and total shards.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_14

LANGUAGE: bash
CODE:
```
npx playwright test --shard=1/3
```

LANGUAGE: bash
CODE:
```
yarn playwright test --shard=1/3
```

LANGUAGE: bash
CODE:
```
pnpm exec playwright test --shard=1/3
```

----------------------------------------

TITLE: Using waitForSelector across navigations in JavaScript
DESCRIPTION: This snippet demonstrates how to use the waitForSelector method to wait for an image element across multiple page navigations in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_144

LANGUAGE: javascript
CODE:
```
const { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.

(async () => {
  const browser = await chromium.launch();
  const page = await browser.newPage();
  for (const currentURL of ['https://google.com', 'https://bbc.com']) {
    await page.goto(currentURL);
    const element = await page.waitForSelector('img');
    console.log('Loaded image: ' + await element.getAttribute('src'));
  }
  await browser.close();
})();
```

----------------------------------------

TITLE: Using Keyboard.press for Key Simulation and Screenshots in Playwright (Java)
DESCRIPTION: This Java snippet demonstrates the usage of `page.keyboard().press()` to simulate pressing different keys ('A', 'ArrowLeft', 'Shift+O') on a webpage (`https://keycode.info`). It navigates to the page, simulates key presses, and takes screenshots after each press to visually verify the event. This method simulates a full key press, including `keydown` and `keyup` events.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_21

LANGUAGE: java
CODE:
```
```java
Page page = browser.newPage();
page.navigate("https://keycode.info");
page.keyboard().press("A");
page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get("A.png")));
page.keyboard().press("ArrowLeft");
page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get("ArrowLeft.png")));
page.keyboard().press("Shift+O");
page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get("O.png")));
browser.close();
```
```

----------------------------------------

TITLE: Exposing SHA256 Function to BrowserContext in C#
DESCRIPTION: This C# example demonstrates how to expose a SHA256 hashing function to all pages in a browser context using Playwright. It creates a new context, exposes the function, and then uses it in a page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_19

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using System;
using System.Security.Cryptography;
using System.Threading.Tasks;

class BrowserContextExamples
{
    public static async Task Main()
    {
        using var playwright = await Playwright.CreateAsync();
        var browser = await playwright.Webkit.LaunchAsync(new() { Headless = false });
        var context = await browser.NewContextAsync();

        await context.ExposeFunctionAsync("sha256", (string input) =>
        {
            return Convert.ToBase64String(
                SHA256.Create().ComputeHash(System.Text.Encoding.UTF8.GetBytes(input)));
        });

        var page = await context.NewPageAsync();
        await page.SetContentAsync("<script>\n" +
        "  async function onClick() {\n" +
        "    document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');\n" +
        "  }\n" +
        "</script>\n" +
        "<button onclick=\"onClick()\">Click me</button>\n" +
        "<div></div>");

        await page.GetByRole(AriaRole.Button).ClickAsync();
        Console.WriteLine(await page.TextContentAsync("div"));
    }
}
```

----------------------------------------

TITLE: Intercepting and Modifying Route Response in Playwright Java
DESCRIPTION: Demonstrates how to intercept a network request using page.route, fetch the original response, modify its body (e.g., change a theme setting), and then fulfill the request with the modified data. Requires Playwright Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_30

LANGUAGE: Java
CODE:
```
page.route("**/api/settings", route -> {
  // Fetch original settings.
  APIResponse response = route.fetch();
  // Force settings theme to a predefined value.
  String body = response.text().replace("\"theme\":\"default\"",
    "\"theme\":\"Solorized\"");
  // Fulfill with modified data.
  route.fulfill(new Route.FulfillOptions().setResponse(response).setBody(body));
});
```

----------------------------------------

TITLE: Sharding Playwright Tests in GitLab CI (JavaScript)
DESCRIPTION: This YAML configuration demonstrates how to set up sharding for Playwright tests in GitLab CI using JavaScript. It uses the 'parallel' keyword to split the job into multiple parallel jobs and passes the shard information to the test command.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_37

LANGUAGE: yml
CODE:
```
stages:
  - test

tests:
  stage: test
  image: mcr.microsoft.com/playwright:v%%VERSION%%-noble
  parallel: 7
  script:
    - npm ci
    - npx playwright test --shard=$CI_NODE_INDEX/$CI_NODE_TOTAL
```

----------------------------------------

TITLE: Configuring Playwright Launch Options (JS)
DESCRIPTION: Illustrates how to configure browser launch options directly in `playwright.config.ts` using the `launchOptions` property within the `use` section. This allows passing options accepted by `BrowserType.launch`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    launchOptions: {
      slowMo: 50,
    },
  },
});
```

----------------------------------------

TITLE: Configuring Expect Assertions in Playwright Tests
DESCRIPTION: Shows how to configure the expect assertion library in Playwright, including timeout settings for assertions and configuration options for screenshot and snapshot comparisons.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-configuration-js.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  expect: {
    // Maximum time expect() should wait for the condition to be met.
    timeout: 5000,

    toHaveScreenshot: {
      // An acceptable amount of pixels that could be different, unset by default.
      maxDiffPixels: 10,
    },

    toMatchSnapshot: {
      // An acceptable ratio of pixels that are different to the
      // total amount of pixels, between 0 and 1.
      maxDiffPixelRatio: 0.1,
    },
  },

});
```

----------------------------------------

TITLE: Testing Sign-in Flow with Testing Library in JavaScript
DESCRIPTION: Example showing how to test a sign-in page component using Testing Library with React, including user interactions and assertions
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/testing-library-js.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';

test('sign in', async () => {
  // Setup the page.
  const user = userEvent.setup();
  render(<SignInPage />);

  // Perform actions.
  await user.type(screen.getByLabelText('Username'), 'John');
  await user.type(screen.getByLabelText('Password'), 'secret');
  await user.click(screen.getByRole('button', { name: 'Sign in' }));

  // Verify signed in state by waiting until "Welcome" message appears.
  expect(await screen.findByText('Welcome, John')).toBeInTheDocument();
});
```

----------------------------------------

TITLE: Verifying Element Enabled State in Playwright
DESCRIPTION: Shows how to check if an element is enabled using Playwright's isEnabled method across different programming languages. Returns a boolean indicating whether the element is enabled.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_67

LANGUAGE: javascript
CODE:
```
const enabled = await page.getByRole('button').isEnabled();
```

LANGUAGE: java
CODE:
```
boolean enabled = page.getByRole(AriaRole.BUTTON).isEnabled();
```

LANGUAGE: python-async
CODE:
```
enabled = await page.get_by_role("button").is_enabled()
```

LANGUAGE: python-sync
CODE:
```
enabled = page.get_by_role("button").is_enabled()
```

LANGUAGE: csharp
CODE:
```
Boolean enabled = await page.GetByRole(AriaRole.Button).IsEnabledAsync();
```

----------------------------------------

TITLE: Using wait_for_selector across navigations in Python (sync)
DESCRIPTION: This snippet shows how to use the wait_for_selector method to wait for an image element across multiple page navigations in Python using the synchronous API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_147

LANGUAGE: python
CODE:
```
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = chromium.launch()
    page = browser.new_page()
    for current_url in ["https://google.com", "https://bbc.com"]:
        page.goto(current_url, wait_until="domcontentloaded")
        element = page.wait_for_selector("img")
        print("Loaded image: " + str(element.get_attribute("src")))
    browser.close()

with sync_playwright() as playwright:
    run(playwright)
```

----------------------------------------

TITLE: Waiting for Network Requests in C#
DESCRIPTION: Shows how to wait for specific network requests in C# using both URL matching and predicate functions. Useful for ensuring requests have been made before proceeding with the test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_139

LANGUAGE: csharp
CODE:
```
// Waits for the next request with the specified url.
await page.RunAndWaitForRequestAsync(async () =>
{
    await page.GetByText("trigger request").ClickAsync();
}, "http://example.com/resource");

// Alternative way with a predicate.
await page.RunAndWaitForRequestAsync(async () =>
{
    await page.GetByText("trigger request").ClickAsync();
}, request => request.Url == "https://example.com" && request.Method == "GET");
```

----------------------------------------

TITLE: Monitoring Popups with Event Listeners in Playwright
DESCRIPTION: Examples of monitoring all popups in a page using event listeners, which is useful when the action triggering popups is unknown.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pages.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
// Get all popups when they open
page.on('popup', async popup => {
  await popup.waitForLoadState();
  console.log(await popup.title());
});
```

LANGUAGE: java
CODE:
```
// Get all popups when they open
page.onPopup(popup -> {
  popup.waitForLoadState();
  System.out.println(popup.title());
});
```

LANGUAGE: python
CODE:
```
# Get all popups when they open (async)
async def handle_popup(popup):
    await popup.wait_for_load_state()
    print(await popup.title())

page.on("popup", handle_popup)
```

LANGUAGE: python
CODE:
```
# Get all popups when they open (sync)
def handle_popup(popup):
    popup.wait_for_load_state()
    print(popup.title())

page.on("popup", handle_popup)
```

LANGUAGE: csharp
CODE:
```
// Get all popups when they open
page.Popup += async  (_, popup) => {
    await popup.WaitForLoadStateAsync();
    Console.WriteLine(await page.TitleAsync());
};
```

----------------------------------------

TITLE: Waiting for a Specific Network Request in Playwright (Async Python)
DESCRIPTION: Illustrates waiting for a specific network request using the `page.expect_request` async context manager in Playwright for Python. The code within the `async with` block (`page.goto`) is executed, and the context manager waits for a request matching the pattern ('**/*logo*.png'). The awaited value of the context manager (`first.value`) is the `Request` object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
```python async
async with page.expect_request("**/*logo*.png") as first:
  await page.goto("https://wikipedia.org")
first_request = await first.value
print(first_request.url)
```
```

----------------------------------------

TITLE: Selecting Dropdown Option by Label or Value with Playwright Python
DESCRIPTION: Illustrates how to select an option in a `<select>` element using `locator.select_option()`. This method can now match options by either their `value` attribute or their text label, as shown in the preceding HTML example.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_28

LANGUAGE: python
CODE:
```
element.select_option("Red")
```

----------------------------------------

TITLE: Running Playwright Tests in Debug Mode with Playwright Inspector (Bash)
DESCRIPTION: Demonstrates how to run Playwright tests in debug mode using the Playwright Inspector. Supported across NPM, Yarn, and PNPM, these commands will start tests with debugging support enabled, pausing on breakpoints and providing interactive inspection capabilities. Dependencies: Playwright installed via the respective package manager. Key parameter: the --debug flag. Input: test suite or file. Output: interactive debugging session.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
npx playwright test --debug
```

LANGUAGE: bash
CODE:
```
yarn playwright test --debug
```

LANGUAGE: bash
CODE:
```
pnpm exec playwright test --debug
```

----------------------------------------

TITLE: Setting Action and Navigation Timeouts in Playwright Config (TypeScript)
DESCRIPTION: This code shows how to set action and navigation timeouts in the Playwright configuration file. It sets a 10-second timeout for actions and a 30-second timeout for navigation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-timeouts-js.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    actionTimeout: 10 * 1000,
    navigationTimeout: 30 * 1000,
  },
});
```

----------------------------------------

TITLE: Asserting Element Attribute using LocatorAssertions in Multiple Languages
DESCRIPTION: Examples of using toHaveAttribute/hasAttribute to verify that an element has a specific attribute with an expected value. This is useful for testing element properties like input types, ARIA attributes, or data attributes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_25

LANGUAGE: javascript
CODE:
```
const locator = page.locator('input');
await expect(locator).toHaveAttribute('type', 'text');
```

LANGUAGE: java
CODE:
```
assertThat(page.locator("input")).hasAttribute("type", "text");
```

LANGUAGE: python
CODE:
```
from playwright.async_api import expect

locator = page.locator("input")
await expect(locator).to_have_attribute("type", "text")
```

LANGUAGE: python
CODE:
```
from playwright.sync_api import expect

locator = page.locator("input")
expect(locator).to_have_attribute("type", "text")
```

LANGUAGE: csharp
CODE:
```
var locator = Page.Locator("input");
await Expect(locator).ToHaveAttributeAsync("type", "text");
```

----------------------------------------

TITLE: Setting Up Authentication Directory and .gitignore Entry with PowerShell
DESCRIPTION: Uses PowerShell to create an 'playwright\.auth' directory and to append its path to '.gitignore'. This ensures authentication states are not stored in version control systems.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_2

LANGUAGE: powershell
CODE:
```
New-Item -ItemType Directory -Force -Path playwright\.auth
Add-Content -path .gitignore "`r`nplaywright/.auth"
```

----------------------------------------

TITLE: Using PageAssertions to Verify URL Pattern in Python (Async)
DESCRIPTION: Example of using expect assertions with async/await in Python to verify URL pattern after clicking a sign-in button. Uses regular expressions for pattern matching in the URL assertion.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
import re
from playwright.async_api import Page, expect

async def test_navigates_to_login_page(page: Page) -> None:
    # ..
    await page.get_by_text("Sign in").click()
    await expect(page).to_have_url(re.compile(r".*/login"))
```

----------------------------------------

TITLE: Save and Restore Storage State with IndexedDB (Python)
DESCRIPTION: Provides an example of saving the browser context's storage state, including IndexedDB content, to a file and then creating a new context using the saved state. Useful for preserving authentication across sessions. Requires a Playwright `context` and `browser` object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_2

LANGUAGE: python
CODE:
```
# Save storage state into the file. Make sure to include IndexedDB.
storage = await context.storage_state(path="state.json", indexed_db=True)

# Create a new context with the saved storage state.
context = await browser.new_context(storage_state="state.json")
```

----------------------------------------

TITLE: Configuring Azure Pipelines for Playwright Tests (Python)
DESCRIPTION: This YAML configuration sets up Azure Pipelines to run Playwright tests with Python. It sets up the Python environment, installs dependencies, installs Playwright browsers, and runs the tests using pytest.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_23

LANGUAGE: yml
CODE:
```
trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.11'
  displayName: 'Use Python'
- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Install dependencies'
- script: playwright install --with-deps
  displayName: 'Install Playwright browsers'
- script: pytest
  displayName: 'Run Playwright tests'
```

----------------------------------------

TITLE: Using the Browser Fixture in Playwright Test
DESCRIPTION: Shows how to use the browser fixture in a beforeAll hook. The browser instance is shared between all tests in the same worker for efficiency.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-fixtures.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
test.beforeAll(async ({ browser }) => {
  const page = await browser.newPage();
  // ...
});
```

----------------------------------------

TITLE: Asserting Visible DOM Elements in Playwright
DESCRIPTION: Examples of using toBeVisible assertion to verify if a locator points to an attached and visible DOM node. Includes examples for checking single elements and lists.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_17

LANGUAGE: javascript
CODE:
```
// A specific element is visible.
await expect(page.getByText('Welcome')).toBeVisible();

// At least one item in the list is visible.
await expect(page.getByTestId('todo-item').first()).toBeVisible();

// At least one of the two elements is visible, possibly both.
await expect(
    page.getByRole('button', { name: 'Sign in' })
        .or(page.getByRole('button', { name: 'Sign up' }))
        .first()
).toBeVisible();
```

LANGUAGE: java
CODE:
```
// A specific element is visible.
assertThat(page.getByText("Welcome")).isVisible();

// At least one item in the list is visible.
assertThat(page.getByTestId("todo-item").first()).isVisible();

// At least one of the two elements is visible, possibly both.
assertThat(
  page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Sign in"))
    .or(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Sign up")))
    .first()
).isVisible();
```

LANGUAGE: python
CODE:
```
# A specific element is visible.
await expect(page.get_by_text("Welcome")).to_be_visible()

# At least one item in the list is visible.
await expect(page.get_by_test_id("todo-item").first).to_be_visible()

# At least one of the two elements is visible, possibly both.
await expect(
    page.get_by_role("button", name="Sign in")
    .or_(page.get_by_role("button", name="Sign up"))
    .first
).to_be_visible()
```

LANGUAGE: csharp
CODE:
```
// A specific element is visible.
await Expect(Page.GetByText("Welcome")).ToBeVisibleAsync();

// At least one item in the list is visible.
await Expect(Page.GetByTestId("todo-item").First).ToBeVisibleAsync();

// At least one of the two elements is visible, possibly both.
await Expect(
  Page.GetByRole(AriaRole.Button, new() { Name = "Sign in" })
    .Or(Page.GetByRole(AriaRole.Button, new() { Name = "Sign up" }))
    .First
).ToBeVisibleAsync();
```

----------------------------------------

TITLE: Using selectOption in Playwright with C#
DESCRIPTION: Demonstrates how to select options in a <select> element using different selection methods in C#. Shows single selection by value, single selection by label, and multiple selection.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_82

LANGUAGE: csharp
CODE:
```
// single selection matching the value or label
await element.SelectOptionAsync(new[] { "blue" });
// single selection matching the label
await element.SelectOptionAsync(new[] { new SelectOptionValue() { Label = "blue" } });
// multiple selection for blue, red and second option
await element.SelectOptionAsync(new[] { "red", "green", "blue" });
```

----------------------------------------

TITLE: Locating Element Containing Another Locator in C#
DESCRIPTION: Shows how to use the `has` option with Playwright Locators in C#. This snippet locates an "article" element that contains another element matching the ".highlight" locator, and then clicks the found article element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_46

LANGUAGE: csharp
CODE:
```
await Page.Locator("article", new() { Has = Page.Locator(".highlight") }).ClickAsync();
```

----------------------------------------

TITLE: Declaring a Focused Test in Playwright
DESCRIPTION: This example shows how to declare a focused test using test.only. When there are focused tests, only those tests will be run in the entire project.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_33

LANGUAGE: javascript
CODE:
```
test.only('focus this test', async ({ page }) => {
  // Run only focused tests in the entire project.
});
```

----------------------------------------

TITLE: Locating Elements Containing Other Locators in Playwright (Python)
DESCRIPTION: Illustrates using the `has` option with Playwright locators to find an element (e.g., an article) that contains another specified element (e.g., an element with class 'highlight').
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_41

LANGUAGE: python async
CODE:
```
await page.locator("article", has=page.locator(".highlight")).click()
```

LANGUAGE: python sync
CODE:
```
page.locator("article", has=page.locator(".highlight")).click()
```

----------------------------------------

TITLE: Running Playwright Tests with Multiple Configurations
DESCRIPTION: Commands to run Playwright tests on multiple browsers or configurations using separate runsettings files.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
dotnet test --settings:chromium.runsettings
dotnet test --settings:firefox.runsettings
dotnet test --settings:webkit.runsettings
```

----------------------------------------

TITLE: Opening Trace Files Using CLI Commands
DESCRIPTION: Commands to open saved trace files using Playwright CLI across different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx playwright show-trace path/to/trace.zip
```

LANGUAGE: bash
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="show-trace trace.zip"
```

LANGUAGE: bash
CODE:
```
playwright show-trace trace.zip
```

LANGUAGE: bash
CODE:
```
pwsh bin/Debug/netX/playwright.ps1 show-trace trace.zip
```

----------------------------------------

TITLE: Running TypeScript Checks in GitHub Actions Workflow
DESCRIPTION: This YAML snippet shows how to set up a GitHub Actions workflow to run TypeScript type checks and Playwright tests. It includes steps for running the TypeScript compiler and Playwright tests separately.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-typescript-js.md#2025-04-22_snippet_0

LANGUAGE: yaml
CODE:
```
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    ...
    - name: Run type checks
      run: npx tsc -p tsconfig.json --noEmit
    - name: Run Playwright tests
      run: npx playwright test
```

----------------------------------------

TITLE: Using Locator.filter with Negative Matching
DESCRIPTION: Demonstrates how to use Locator.filter with hasNot and hasNotText options to find elements that don't match certain conditions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_31

LANGUAGE: javascript
CODE:
```
const rowLocator = page.locator('tr');
await rowLocator
    .filter({ hasNotText: 'text in column 1' })
    .filter({ hasNot: page.getByRole('button', { name: 'column 2 button' }) })
    .screenshot();
```

----------------------------------------

TITLE: Waiting for a Specific Network Request in Playwright (.NET/C#)
DESCRIPTION: Demonstrates how to asynchronously wait for a specific network request matching a URL pattern ('**/*logo*.png') using `page.WaitForRequestAsync` in Playwright for .NET (C#). The waiting task is started before the navigation action (`page.GotoAsync`) that triggers the request. The awaited task result is the `IRequest` object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
```csharp
var waitForRequestTask = page.WaitForRequestAsync("**/*logo*.png");
await page.GotoAsync("https://wikipedia.org");
var request = await waitForRequestTask;
Console.WriteLine(request.Url);
```
```

----------------------------------------

TITLE: Configuring Multiple Web Servers
DESCRIPTION: Sets up multiple web servers or background processes with different configurations for frontend and backend services.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_23

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';
export default defineConfig({
  webServer: [
    {
      command: 'npm run start',
      url: 'http://localhost:3000',
      name: 'Frontend',
      timeout: 120 * 1000,
      reuseExistingServer: !process.env.CI,
    },
    {
      command: 'npm run backend',
      url: 'http://localhost:3333',
      name: 'Backend',
      timeout: 120 * 1000,
      reuseExistingServer: !process.env.CI,
    }
  ],
  use: {
    baseURL: 'http://localhost:3000',
  },
});
```

----------------------------------------

TITLE: Starting and Stopping Chromium Tracing with Playwright - Java
DESCRIPTION: Illustrates how to use Playwright's browser tracing capabilities in Java. The browser.startTracing method activates tracing with configurable options including the output path. Following navigation or other actions, browser.stopTracing is called to save trace data. Dependencies include Playwright for Java, Browser, Page, and java.nio.file.Paths. Parameters are analogous to the JavaScript version, supporting optional page-based tracing and custom output location. Resulting trace files can be loaded in Chrome DevTools.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_16

LANGUAGE: java
CODE:
```
browser.startTracing(page, new Browser.StartTracingOptions()
  .setPath(Paths.get("trace.json")));
page.navigate("https://www.google.com");
browser.stopTracing();
```

----------------------------------------

TITLE: Performing API GET Request with Playwright .NET
DESCRIPTION: Demonstrates how to use the Page.APIRequest property in Playwright for .NET to send a GET request to a specified URL. It shows how to access the response status, headers, text, and JSON content. Requires a Playwright Page instance.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_35

LANGUAGE: csharp
CODE:
```
// Do a GET request on behalf of page
var response = await Page.APIRequest.GetAsync("http://example.com/foo.json");
Console.WriteLine(response.Status);
Console.WriteLine(response.StatusText);
Console.WriteLine(response.Ok);
Console.WriteLine(response.Headers["Content-Type"]);
Console.WriteLine(await response.TextAsync());
Console.WriteLine((await response.JsonAsync())?.GetProperty("foo").GetString());
```

----------------------------------------

TITLE: Defining a Playwright Page Object Class (JavaScript)
DESCRIPTION: This JavaScript class, `TodoPage`, implements the Page Object Model pattern for the TodoMVC demo application. It encapsulates locators for page elements and methods for common interactions like navigating, adding, removing, and clearing todo items. This class serves as a reusable component for tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import type { Page, Locator } from '@playwright/test';

export class TodoPage {
  private readonly inputBox: Locator;
  private readonly todoItems: Locator;

  constructor(public readonly page: Page) {
    this.inputBox = this.page.locator('input.new-todo');
    this.todoItems = this.page.getByTestId('todo-item');
  }

  async goto() {
    await this.page.goto('https://demo.playwright.dev/todomvc/');
  }

  async addToDo(text: string) {
    await this.inputBox.fill(text);
    await this.inputBox.press('Enter');
  }

  async remove(text: string) {
    const todo = this.todoItems.filter({ hasText: text });
    await todo.hover();
    await todo.getByLabel('Delete').click();
  }

  async removeAll() {
    while ((await this.todoItems.count()) > 0) {
      await this.todoItems.first().hover();
      await this.todoItems.getByLabel('Delete').first().click();
    }
  }
}
```

----------------------------------------

TITLE: Asserting Screenshots with toHaveScreenshot in JavaScript
DESCRIPTION: Shows how to use the toHaveScreenshot method to compare a locator's screenshot with an expected image. This method waits for two consecutive screenshots to be the same before comparison. Note that this only works with the Playwright test runner.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_34

LANGUAGE: javascript
CODE:
```
const locator = page.getByRole('button');
await expect(locator).toHaveScreenshot('image.png');
```

----------------------------------------

TITLE: Creating Compound Locators with Locator.or() in Playwright
DESCRIPTION: Creates a locator that matches elements from either of two locators, handling conditional UI elements like buttons or dialogs. Useful for scenarios where alternative UI paths might appear.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_72

LANGUAGE: javascript
CODE:
```
const newEmail = page.getByRole('button', { name: 'New' });
const dialog = page.getByText('Confirm security settings');
await expect(newEmail.or(dialog).first()).toBeVisible();
if (await dialog.isVisible())
  await page.getByRole('button', { name: 'Dismiss' }).click();
await newEmail.click();
```

LANGUAGE: java
CODE:
```
Locator newEmail = page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("New"));
Locator dialog = page.getByText("Confirm security settings");
assertThat(newEmail.or(dialog).first()).isVisible();
if (dialog.isVisible())
  page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Dismiss")).click();
newEmail.click();
```

LANGUAGE: python
CODE:
```
new_email = page.get_by_role("button", name="New")
dialog = page.get_by_text("Confirm security settings")
await expect(new_email.or_(dialog).first).to_be_visible()
if (await dialog.is_visible()):
  await page.get_by_role("button", name="Dismiss").click()
await new_email.click()
```

LANGUAGE: python
CODE:
```
new_email = page.get_by_role("button", name="New")
dialog = page.get_by_text("Confirm security settings")
expect(new_email.or_(dialog).first).to_be_visible()
if (dialog.is_visible()):
  page.get_by_role("button", name="Dismiss").click()
new_email.click()
```

LANGUAGE: csharp
CODE:
```
var newEmail = page.GetByRole(AriaRole.Button, new() { Name = "New" });
var dialog = page.GetByText("Confirm security settings");
await Expect(newEmail.Or(dialog).First).ToBeVisibleAsync();
if (await dialog.IsVisibleAsync())
  await page.GetByRole(AriaRole.Button, new() { Name = "Dismiss" }).ClickAsync();
await newEmail.ClickAsync();
```

----------------------------------------

TITLE: Select Options Configuration (Java, JavaScript, C#)
DESCRIPTION: Defines options for selecting elements in dropdowns. Supports selection by value, label, index, or element handle.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_88

LANGUAGE: javascript
CODE:
```
- `values` <[null]|[string]|[ElementHandle]|[Array]<[string]>|[Object]|[Array]<[ElementHandle]>|[Array]<[Object]>>
  - `value` ?<[string]> Matches by `option.value`. Optional.
  - `label` ?<[string]> Matches by `option.label`. Optional.
  - `index` ?<[int]> Matches by the index. Optional.
```

----------------------------------------

TITLE: Sending POST Request with JSON Data in Python
DESCRIPTION: Example of sending a POST request with JSON data using Playwright's API request context in Python. The data dictionary is automatically serialized to JSON in the request body.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
data = {
    "title": "Book Title",
    "body": "John Doe",
}
api_request_context.post("https://example.com/api/createBook", data=data)
```

----------------------------------------

TITLE: Configuring Parameterized Projects in JavaScript
DESCRIPTION: This configuration file defines multiple test projects with different values for the custom 'person' option, allowing tests to be run in multiple configurations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
// @ts-check

module.exports = defineConfig({
  projects: [
    {
      name: 'alice',
      use: { person: 'Alice' },
    },
    {
      name: 'bob',
      use: { person: 'Bob' },
    },
  ]
});
```

----------------------------------------

TITLE: Locating Elements by ARIA Role and Name in Playwright (Python)
DESCRIPTION: Shows how to select elements using Playwright's role selectors, targeting elements based on their ARIA role and accessible name for robust element identification.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_39

LANGUAGE: py
CODE:
```
# Click a button with accessible name "log in"
page.locator("role=button[name='log in']").click()
```

LANGUAGE: python async
CODE:
```
# Click a button with accessible name "log in"
await page.locator("role=button[name='log in']").click()
```

LANGUAGE: python sync
CODE:
```
# Click a button with accessible name "log in"
page.locator("role=button[name='log in']").click()
```

----------------------------------------

TITLE: Creating a Page and Taking a Screenshot in Python (Sync)
DESCRIPTION: This snippet shows how to create a new page, navigate to a URL, and save a screenshot using Playwright in Python with synchronous syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = webkit.launch()
    context = browser.new_context()
    page = context.new_page()
    page.goto("https://example.com")
    page.screenshot(path="screenshot.png")
    browser.close()

with sync_playwright() as playwright:
    run(playwright)
```

----------------------------------------

TITLE: Taking a Screenshot with Playwright WebKit Driver - Java
DESCRIPTION: Navigates to 'https://playwright.dev/' using Playwright's WebKit driver, takes a screenshot, and saves it as 'example.png'. Assumes Maven and Playwright Java are configured as per prior snippets. Accepts URL and screenshot path as key parameters. The output is a PNG screenshot file. The code uses headless browser mode by default and demonstrates options for capturing visual snapshots in tests or automation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-java.md#2025-04-22_snippet_3

LANGUAGE: java
CODE:
```
package org.example;

import com.microsoft.playwright.*;
import java.nio.file.Paths;

public class App {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      Browser browser = playwright.webkit().launch();
      Page page = browser.newPage();
      page.navigate("https://playwright.dev/");
      page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get("example.png")));
    }
  }
}
```

----------------------------------------

TITLE: Configure Locale for a Specific Test File in Playwright
DESCRIPTION: This snippet shows how to apply specific configuration options, such as locale, to all tests within a single test file using the 'test.use()' method at the top level of the file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
import { test, expect } from '@playwright/test';

test.use({ locale: 'fr-FR' });

test('example', async ({ page }) => {
  // ...
});
```

----------------------------------------

TITLE: Multiple Signed in Roles in Playwright - JavaScript
DESCRIPTION: This JavaScript code demonstrates handling multiple user roles in Playwright, including setting up different authentication states for roles like 'admin' and 'user', allowing tests to run as various roles efficiently.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_17

LANGUAGE: js
CODE:
```
import { test as setup, expect } from '@playwright/test';

const adminFile = 'playwright/.auth/admin.json';

setup('authenticate as admin', async ({ page }) => {
  await page.goto('https://github.com/login');
  await page.getByLabel('Username or email address').fill('admin');
  await page.getByLabel('Password').fill('password');
  await page.getByRole('button', { name: 'Sign in' }).click();
  await page.waitForURL('https://github.com/');
  await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();

  await page.context().storageState({ path: adminFile });
});

const userFile = 'playwright/.auth/user.json';

setup('authenticate as user', async ({ page }) => {
  await page.goto('https://github.com/login');
  await page.getByLabel('Username or email address').fill('user');
  await page.getByLabel('Password').fill('password');
  await page.getByRole('button', { name: 'Sign in' }).click();
  await page.waitForURL('https://github.com/');
  await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();

  await page.context().storageState({ path: userFile });
});

```

----------------------------------------

TITLE: Clicking Custom Element with Shadow DOM using Playwright
DESCRIPTION: This code shows how to click the custom 'x-details' element containing Shadow DOM using Playwright in different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
await page.locator('x-details', { hasText: 'Details' }).click();
```

LANGUAGE: java
CODE:
```
page.locator("x-details", new Page.LocatorOptions().setHasText("Details"))
    .click();
```

LANGUAGE: python
CODE:
```
await page.locator("x-details", has_text="Details").click()
```

LANGUAGE: csharp
CODE:
```
await page
    .Locator("x-details", new() { HasText = "Details" })
    .ClickAsync();
```

----------------------------------------

TITLE: Using to_have_url Assertion in Python (Async)
DESCRIPTION: Example of using to_have_url assertion in async Python to verify page URL matches a pattern. This checks if the page URL contains 'checkout' using a regular expression.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
import re
from playwright.async_api import expect

# ...
await expect(page).to_have_url(re.compile(".*checkout"))
```

----------------------------------------

TITLE: Running tests on different browsers using Playwright for Python
DESCRIPTION: This snippet demonstrates how to execute tests on specific or multiple browsers using pytest for Playwright in Python. The browser specification is provided via command line arguments.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
pytest test_login.py --browser webkit
```

LANGUAGE: bash
CODE:
```
pytest test_login.py --browser webkit --browser firefox
```

LANGUAGE: bash
CODE:
```
pytest test_login.py --device=\"iPhone 13\"
```

LANGUAGE: bash
CODE:
```
pytest test_login.py --browser-channel msedge
```

----------------------------------------

TITLE: Using the Request Fixture for API Testing
DESCRIPTION: Demonstrates how to use the request fixture to make API calls in tests. The APIRequestContext instance is isolated for each test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-fixtures.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('basic test', async ({ request }) => {
  await request.post('/signin', {
    data: {
      username: 'user',
      password: 'password'
    }
  });
  // ...
});
```

----------------------------------------

TITLE: Using Playwright Soft Assertions (JS)
DESCRIPTION: Illustrates the use of soft assertions (`expect.soft`) in Playwright tests. Soft assertions allow tests to continue execution even if the assertion fails, marking the test as failed but not terminating it immediately.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_33

LANGUAGE: JavaScript
CODE:
```
// Make a few checks that will not stop the test when failed...
await expect.soft(page.getByTestId('status')).toHaveText('Success');
await expect.soft(page.getByTestId('eta')).toHaveText('1 day');

// ... and continue the test to check more things.
await page.getByRole('link', { name: 'next page' }).click();
await expect.soft(page.getByRole('heading', { name: 'Make another order' })).toBeVisible();
```

----------------------------------------

TITLE: Clicking Elements with Playwright Locator
DESCRIPTION: Shows how to click elements using Playwright's Locator API, including basic button clicks and advanced clicking with modifiers and specific positions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_36

LANGUAGE: javascript
CODE:
```
await page.getByRole('button').click();

await page.locator('canvas').click({
  button: 'right',
  modifiers: ['Shift'],
  position: { x: 23, y: 32 },
});
```

LANGUAGE: java
CODE:
```
page.getByRole(AriaRole.BUTTON).click();

page.locator("canvas").click(new Locator.ClickOptions()
  .setButton(MouseButton.RIGHT)
  .setModifiers(Arrays.asList(KeyboardModifier.SHIFT))
  .setPosition(23, 32));
```

LANGUAGE: python
CODE:
```
await page.get_by_role("button").click()

await page.locator("canvas").click(
    button="right", modifiers=["Shift"], position={"x": 23, "y": 32}
)
```

----------------------------------------

TITLE: Running Playwright Tests in Parallel with JUnit
DESCRIPTION: Implementation pattern for running Playwright tests in parallel using JUnit. It creates a base TestFixtures class with shared Playwright and Browser instances per class instance, allowing multiple test classes to run concurrently while ensuring thread safety.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-java.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
// Subclasses will inherit PER_CLASS behavior.
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class TestFixtures {
  // Shared between all tests in the class.
  Playwright playwright;
  Browser browser;

  @BeforeAll
  void launchBrowser() {
    playwright = Playwright.create();
    browser = playwright.chromium().launch();
  }

  @AfterAll
  void closeBrowser() {
    playwright.close();
  }

  // New instance for each test method.
  BrowserContext context;
  Page page;

  @BeforeEach
  void createContextAndPage() {
    context = browser.newContext();
    page = context.newPage();
  }

  @AfterEach
  void closeContext() {
    context.close();
  }
}

class Test1 extends TestFixtures {
  @Test
  void shouldClickButton() {
    page.navigate("data:text/html,<script>var result;</script><button onclick='result=\"Clicked\"'>Go</button>");
    page.locator("button").click();
    assertEquals("Clicked", page.evaluate("result"));
  }

  @Test
  void shouldCheckTheBox() {
    page.setContent("<input id='checkbox' type='checkbox'></input>");
    page.locator("input").check();
    assertTrue((Boolean) page.evaluate("() => window['checkbox'].checked"));
  }

  @Test
  void shouldSearchWiki() {
    page.navigate("https://www.wikipedia.org/");
    page.locator("input[name=\"search\"]").click();
    page.locator("input[name=\"search\"]").fill("playwright");
    page.locator("input[name=\"search\"]").press("Enter");
    assertEquals("https://en.wikipedia.org/wiki/Playwright", page.url());
  }
}

class Test2 extends TestFixtures {
  @Test
  void shouldReturnInnerHTML() {
    page.setContent("<div>hello</div>");
    assertEquals("hello", page.innerHTML("css=div"));
  }

  @Test
  void shouldClickButton() {
    Page popup = page.waitForPopup(() -> {
      page.evaluate("window.open('about:blank');");
    });
    assertEquals("about:blank", popup.url());
  }
}
```

----------------------------------------

TITLE: Repository Setup and Teardown with Playwright Hooks
DESCRIPTION: This snippet uses Playwright hooks to create a GitHub repository before tests run and delete it afterwards. It demonstrates the use of beforeAll and afterAll for setup and teardown operations. Requires Playwright and a GitHub access token.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-js.md#2025-04-22_snippet_3

LANGUAGE: JavaScript
CODE:
```
test.beforeAll(async ({ request }) => {
  // Create a new repository
  const response = await request.post('/user/repos', {
    data: {
      name: REPO
    }
  });
  expect(response.ok()).toBeTruthy();
});

test.afterAll(async ({ request }) => {
  // Delete the repository
  const response = await request.delete(`/repos/${USER}/${REPO}`);
  expect(response.ok()).toBeTruthy();
});
```

----------------------------------------

TITLE: Parse Response Body as JSON
DESCRIPTION: The `Response.json` method converts the response body to a JSON object. This can throw an error if parsing fails. It's implemented in JavaScript and Python, with C# having similar functionality.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
async function parseJson() {\n  const json = await response.json();\n  console.log('JSON:', json);\n}
```

----------------------------------------

TITLE: Handling Popups and Waiting for DOM Content in Python (Async)
DESCRIPTION: Shows how to wait for a popup to be triggered by a button click and then wait for the 'domcontentloaded' state before interacting with the popup in Python using async syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_127

LANGUAGE: python
CODE:
```
async with page.expect_popup() as page_info:
    await page.get_by_role("button").click() # click triggers a popup.
popup = await page_info.value
# Wait for the "DOMContentLoaded" event.
await popup.wait_for_load_state("domcontentloaded")
print(await popup.title()) # popup is ready to use.
```

----------------------------------------

TITLE: Viewing Playwright Trace (Shell)
DESCRIPTION: Provides the command-line instruction to open a recorded Playwright trace file (trace.zip) using the Playwright CLI. This command launches the Playwright Trace Viewer GUI for interactive analysis of the trace.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_56

LANGUAGE: sh
CODE:
```
playwright show-trace trace.zip
```

----------------------------------------

TITLE: Serving Static Files in Java
DESCRIPTION: Demonstrates how to serve static files as responses to specific routes using Playwright in Java. This example shows serving a JSON file for a specific endpoint.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_32

LANGUAGE: java
CODE:
```
page.route("**/xhr_endpoint", route -> route.fulfill(
  new Route.FulfillOptions().setPath(Paths.get("mock_data.json"))));
```

----------------------------------------

TITLE: Element Interaction Examples in Playwright
DESCRIPTION: Demonstrates different ways to interact with page elements using Playwright's Locator API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-csharp.md#2025-04-22_snippet_3

LANGUAGE: csharp
CODE:
```
// Create a locator.
var getStarted = Page.GetByRole(AriaRole.Link, new() { Name = "Get started" });

// Click it.
await getStarted.ClickAsync();
```

----------------------------------------

TITLE: Waiting for download events with JavaScript
DESCRIPTION: Demonstrates how to wait for a download event before clicking a download button using Playwright's waitForEvent method. This pattern allows you to set up event listeners before triggering actions that will emit those events.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_107

LANGUAGE: javascript
CODE:
```
// Start waiting for download before clicking. Note no await.
const downloadPromise = page.waitForEvent('download');
await page.getByText('Download file').click();
const download = await downloadPromise;
```

----------------------------------------

TITLE: Implement Advanced Routing with Fallback in Playwright Python
DESCRIPTION: Provides examples of using `Route.fallback` within request handlers to modify requests (like removing headers) or conditionally abort requests (like images) while allowing other handlers or default behavior to proceed. Both async and sync implementations are shown.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_35

LANGUAGE: python
CODE:
```
# Remove a header from all requests
async def remove_header_handler(route: Route) -> None:
    headers = await route.request.all_headers()
    if "if-none-match" in headers:
        del headers["if-none-match"]
    await route.fallback(headers=headers)

await page.route("**/*", remove_header_handler)

# Abort all images
async def abort_images_handler(route: Route) -> None:
    if route.request.resource_type == "image":
        await route.abort()
    else:
        await route.fallback()

await page.route("**/*", abort_images_handler)
```

LANGUAGE: python
CODE:
```
# Remove a header from all requests
def remove_header_handler(route: Route) -> None:
    headers = route.request.all_headers()
    if "if-none-match" in headers:
        del headers["if-none-match"]
    route.fallback(headers=headers)

page.route("**/*", remove_header_handler)

# Abort all images
def abort_images_handler(route: Route) -> None:
    if route.request.resource_type == "image":
        route.abort()
    else:
        route.fallback()

page.route("**/*", abort_images_handler)
```

----------------------------------------

TITLE: Checking Element State in Playwright
DESCRIPTION: Demonstrates how to check if a checkbox element is checked using Playwright's isChecked method across different programming languages. This method returns a boolean indicating whether the element is checked.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_64

LANGUAGE: javascript
CODE:
```
const checked = await page.getByRole('checkbox').isChecked();
```

LANGUAGE: java
CODE:
```
boolean checked = page.getByRole(AriaRole.CHECKBOX).isChecked();
```

LANGUAGE: python-async
CODE:
```
checked = await page.get_by_role("checkbox").is_checked()
```

LANGUAGE: python-sync
CODE:
```
checked = page.get_by_role("checkbox").is_checked()
```

LANGUAGE: csharp
CODE:
```
var isChecked = await page.GetByRole(AriaRole.Checkbox).IsCheckedAsync();
```

----------------------------------------

TITLE: Simulating Keyboard Input with Shift Modifier in Playwright (C#)
DESCRIPTION: This C# snippet demonstrates how to use the Playwright Keyboard API to simulate complex keyboard interactions. It types initial text, moves the cursor, holds the 'Shift' key down, moves the cursor again (selecting text), releases 'Shift', and presses 'Backspace' to delete the selected text. It relies on the `page.Keyboard` object and its asynchronous methods `TypeAsync`, `PressAsync`, `DownAsync`, and `UpAsync`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
```csharp
await page.Keyboard.TypeAsync("Hello World!");
await page.Keyboard.PressAsync("ArrowLeft");

await page.Keyboard.DownAsync("Shift");
for (int i = 0; i < " World".Length; i++)
    await page.Keyboard.PressAsync("ArrowLeft");

await page.Keyboard.UpAsync("Shift");

await page.Keyboard.PressAsync("Backspace");
// Result text will end up saying "Hello!"
```
```

----------------------------------------

TITLE: Basic Playwright Trace Recording (Python Sync)
DESCRIPTION: Illustrates the synchronous approach to recording a Playwright trace in Python. It launches a browser, creates a context, starts tracing (enabling screenshots and snapshots), navigates a page, and finally stops tracing, saving the result to 'trace.zip'. Uses the synchronous Playwright API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
browser = chromium.launch()
context = browser.new_context()
context.tracing.start(screenshots=True, snapshots=True)
page = context.new_page()
page.goto("https://playwright.dev")
context.tracing.stop(path = "trace.zip")
```

----------------------------------------

TITLE: Emulating Viewport Size with Playwright Codegen - Python - Bash
DESCRIPTION: In Python setups, this command invokes Playwright's codegen tool with a custom viewport size using the '--viewport-size' option. Enter the target website as the next argument. Requires Playwright Python to be installed and accessible via command line. The browser launches at the specified resolution, providing a controlled environment to record and test UI behavior.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
playwright codegen --viewport-size=\"800,600\" playwright.dev
```

----------------------------------------

TITLE: Using afterAll Hook in Playwright Tests
DESCRIPTION: Shows how to use the afterAll hook that runs once per worker after all tests are complete. The hook can be used for cleanup operations or logging.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
test.afterAll(async () => {
  console.log('Done with tests');
  // ...
});
```

----------------------------------------

TITLE: Creating Multiple Browser Contexts in Playwright Test Runner (JavaScript)
DESCRIPTION: Shows how to create multiple independent `BrowserContext` instances (`adminContext`, `userContext`) within a single Playwright test using the `browser` fixture (`browser.newContext()`). This is useful for simulating multi-user scenarios like chats, ensuring each user operates in a separate, isolated environment.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_6

LANGUAGE: js
CODE:
```
import { test } from '@playwright/test';

test('admin and user', async ({ browser }) => {
  // Create two isolated browser contexts
  const adminContext = await browser.newContext();
  const userContext = await browser.newContext();

  // Create pages and interact with contexts independently
  const adminPage = await adminContext.newPage();
  const userPage = await userContext.newPage();
});
```

----------------------------------------

TITLE: Configuring Authenticated APIRequestContext for GitHub API using Playwright in C#
DESCRIPTION: This snippet shows how to configure and initialize a Playwright APIRequestContext with authorization headers for GitHub REST API access. It includes environment variable retrieval for the API token and utilizes Playwright's MSTest integration. The code ensures all HTTP requests specify JSON accept headers and the appropriate personal access token. You must install Microsoft.Playwright and Microsoft.Playwright.MSTest and provide GITHUB_API_TOKEN as an environment variable. The initialized context is disposed during test cleanup to release resources.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-csharp.md#2025-04-22_snippet_0

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using Microsoft.Playwright.MSTest;

namespace PlaywrightTests;

[TestClass]
public class TestGitHubAPI : PlaywrightTest
{
    static string? API_TOKEN = Environment.GetEnvironmentVariable("GITHUB_API_TOKEN");

    private IAPIRequestContext Request = null!;

    [TestInitialize]
    public async Task SetUpAPITesting()
    {
        await CreateAPIRequestContext();
    }

    private async Task CreateAPIRequestContext()
    {
        var headers = new Dictionary<string, string>();
        // We set this header per GitHub guidelines.
        headers.Add("Accept", "application/vnd.github.v3+json");
        // Add authorization token to all requests.
        // Assuming personal access token available in the environment.
        headers.Add("Authorization", "token " + API_TOKEN);

        Request = await this.Playwright.APIRequest.NewContextAsync(new() {
            // All requests we send go to this API endpoint.
            BaseURL = "https://api.github.com",
            ExtraHTTPHeaders = headers,
        });
    }

    [TestCleanup]
    public async Task TearDownAPITesting()
    {
        await Request.DisposeAsync();
    }
}

```

----------------------------------------

TITLE: Using Playwright Locator API in Java
DESCRIPTION: Shows the basic usage of the new Locator API in Playwright Java. A Locator is created for a selector and then actions like `click()` are performed on the Locator, which automatically enforces strict mode by default.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_54

LANGUAGE: java
CODE:
```
Locator locator = page.locator("button");
locator.click();
```

----------------------------------------

TITLE: Configuring GitHub API Access with Playwright Fixtures in Python
DESCRIPTION: This snippet sets up a pytest fixture to configure an APIRequestContext for authenticated requests to GitHub\'s REST API via Playwright in Python. It uses environment variables for the authorization token and attaches required headers to all requests. The fixture provides a session-scoped reusable context for multiple tests, ensuring correct initialization and disposal. Dependencies: pytest, playwright sync API, GitHub personal access token in environment variables.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-python.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
import os\nfrom typing import Generator\n\nimport pytest\nfrom playwright.sync_api import Playwright, APIRequestContext\n\nGITHUB_API_TOKEN = os.getenv(\"GITHUB_API_TOKEN\")\nassert GITHUB_API_TOKEN, \"GITHUB_API_TOKEN is not set\"\n\n\n@pytest.fixture(scope=\"session\")\ndef api_request_context(\n    playwright: Playwright,\n) -> Generator[APIRequestContext, None, None]:\n    headers = {\n        # We set this header per GitHub guidelines.\n        \"Accept\": \"application/vnd.github.v3+json\",\n        # Add authorization token to all requests.\n        # Assuming personal access token available in the environment.\n        \"Authorization\": f\"token {GITHUB_API_TOKEN}\",\n    }\n    request_context = playwright.request.new_context(\n        base_url=\"https://api.github.com\", extra_http_headers=headers\n    )\n    yield request_context\n    request_context.dispose()\n
```

----------------------------------------

TITLE: GitHub Actions Workflow for JavaScript Playwright in Containers
DESCRIPTION: Configures a GitHub Actions workflow to run JavaScript Playwright tests inside a container, ensuring a consistent environment. The workflow executes tests using a Playwright Docker image and is triggered on push/pull requests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_13

LANGUAGE: yml
CODE:
```
name: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  playwright:\n    name: 'Playwright Tests'\n    runs-on: ubuntu-latest\n    container:\n      image: mcr.microsoft.com/playwright:v%%VERSION%%-noble\n      options: --user 1001\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: lts/*\n      - name: Install dependencies\n        run: npm ci\n      - name: Run your tests\n        run: npx playwright test
```

----------------------------------------

TITLE: Filtering Locators by Text and Clicking Button using Playwright
DESCRIPTION: This code demonstrates how to filter locators by text and click a specific button using Playwright in different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_16

LANGUAGE: javascript
CODE:
```
await page
    .getByRole('listitem')
    .filter({ hasText: 'Product 2' })
    .getByRole('button', { name: 'Add to cart' })
    .click();
```

LANGUAGE: java
CODE:
```
page.getByRole(AriaRole.LISTITEM)
    .filter(new Locator.FilterOptions().setHasText("Product 2"))
    .getByRole(AriaRole.BUTTON,
               new Page.GetByRoleOptions().setName("Add to cart"))
    .click();
```

LANGUAGE: python
CODE:
```
await page.get_by_role("listitem").filter(has_text="Product 2").get_by_role(
    "button", name="Add to cart"
).click()
```

LANGUAGE: csharp
CODE:
```
await page
    .GetByRole(AriaRole.Listitem)
    .Filter(new() { HasText = "Product 2" })
    .GetByRole(AriaRole.Button, new() { Name = "Add to cart" })
    .ClickAsync();
```

----------------------------------------

TITLE: Combining Locators via Logical 'And' in Playwright JavaScript
DESCRIPTION: Shows how to chain Playwright's locators by combining a 'button' role locator and a locator for specific title text using the `and` method. Returns a combined locator to refine element targeting. Playwright must be installed for JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_15

LANGUAGE: JavaScript
CODE:
```
const button = page.getByRole('button').and(page.getByTitle('Subscribe'));
```

----------------------------------------

TITLE: Running tests on different browsers using Playwright for Java
DESCRIPTION: This Java snippet illustrates how to run tests across different browsers utilizing Playwright. The choice of browser is determined by an environment variable `BROWSER`, allowing flexibility in browser selection.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_8

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      // Launch chromium, firefox or webkit.
      Browser browser = playwright.chromium().launch();
      Page page = browser.newPage();
      // ...
    }
  }
}
```

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      Browser browser = null;
      String browserName = System.getenv(\"BROWSER\");
      if (browserName.equals(\"chromium\")) {
        browser = playwright.chromium().launch();
      } else if (browserName.equals(\"firefox\")) {
        browser = playwright.firefox().launch();
      } else if (browserName.equals(\"webkit\")) {
        browser = playwright.webkit().launch();
      }
      Page page = browser.newPage();
      // ...
    }
  }
}
```

----------------------------------------

TITLE: Asserting Element Class Property with Playwright TypeScript
DESCRIPTION: Asserts that the element located by the locator has the specified CSS class property. This assertion automatically retries until the condition is met or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_17

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toHaveClass()
```

----------------------------------------

TITLE: Basic Page Navigation in Python (Sync)
DESCRIPTION: Navigates to a URL and waits for the page's load event to fire using Playwright's synchronous API in Python.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
# Navigate the page
page.goto("https://example.com")
```

----------------------------------------

TITLE: Modifying Network Responses in Python (Async)
DESCRIPTION: Demonstrates how to modify network responses in asynchronous Python. The example fetches the original response, modifies the HTML content, and then fulfills the request with the modified response.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_29

LANGUAGE: python
CODE:
```
async def handle_route(route: Route) -> None:
    # Fetch original response.
    response = await route.fetch()
    # Add a prefix to the title.
    body = await response.text()
    body = body.replace("<title>", "<title>My prefix:")
    await route.fulfill(
        # Pass all fields from the response.
        response=response,
        # Override response body.
        body=body,
        # Force content type to be html.
        headers={**response.headers, "content-type": "text/html"},
    )

await page.route("**/title.html", handle_route)
```

----------------------------------------

TITLE: Filtering Locators by Regular Expression using Playwright
DESCRIPTION: This code shows how to filter locators using a regular expression and click a specific button using Playwright in different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_17

LANGUAGE: javascript
CODE:
```
await page
    .getByRole('listitem')
    .filter({ hasText: /Product 2/ })
    .getByRole('button', { name: 'Add to cart' })
    .click();
```

LANGUAGE: java
CODE:
```
page.getByRole(AriaRole.LISTITEM)
    .filter(new Locator.FilterOptions()
        .setHasText(Pattern.compile("Product 2")))
    .getByRole(AriaRole.BUTTON,
               new Page.GetByRoleOptions().setName("Add to cart"))
    .click();
```

LANGUAGE: python
CODE:
```
await page.get_by_role("listitem").filter(has_text=re.compile("Product 2")).get_by_role(
    "button", name="Add to cart"
).click()
```

LANGUAGE: csharp
CODE:
```
await page
    .GetByRole(AriaRole.Listitem)
    .Filter(new() { HasTextRegex = new Regex("Product 2") })
    .GetByRole(AriaRole.Button, new() { Name = "Add to cart" })
    .ClickAsync();
```

----------------------------------------

TITLE: Configuring Web Server for Playwright Tests
DESCRIPTION: Shows how to configure a web server to launch before running tests using the webServer option in Playwright config. The server will wait for the specified URL before starting tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_67

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';
export default defineConfig({
  webServer: {
    command: 'npm run start', // command to launch
    url: 'http://127.0.0.1:3000', // url to await for
    timeout: 120 * 1000,
    reuseExistingServer: !process.env.CI,
  },
});
```

----------------------------------------

TITLE: Using Worker Fixture for Authentication - JavaScript
DESCRIPTION: This JavaScript code showcases authenticating using a worker-scoped fixture in Playwright. It highlights the approach for handling unique accounts per test worker and saving state to a JSON file for concurrent test execution.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_16

LANGUAGE: js
CODE:
```
import { test as baseTest, request } from '@playwright/test';
import fs from 'fs';
import path from 'path';

export * from '@playwright/test';
export const test = baseTest.extend<{}, { workerStorageState: string }>({
  // Use the same storage state for all tests in this worker.
  storageState: ({ workerStorageState }, use) => use(workerStorageState),

  // Authenticate once per worker with a worker-scoped fixture.
  workerStorageState: [async ({}, use) => {
    // Use parallelIndex as a unique identifier for each worker.
    const id = test.info().parallelIndex;
    const fileName = path.resolve(test.info().project.outputDir, `.auth/${id}.json`);

    if (fs.existsSync(fileName)) {
      // Reuse existing authentication state if any.
      await use(fileName);
      return;
    }

    // Important: make sure we authenticate in a clean environment by unsetting storage state.
    const context = await request.newContext({ storageState: undefined });

    // Acquire a unique account, for example create a new one.
    const account = await acquireAccount(id);

    // Send authentication request. Replace with your own.
    await context.post('https://github.com/login', {
      form: {
        'user': 'user',
        'password': 'password'
      }
    });

    await context.storageState({ path: fileName });
    await context.dispose();
    await use(fileName);
  }, { scope: 'worker' }],
});

```

----------------------------------------

TITLE: Setting Storage State for Browser Context in C# and Java
DESCRIPTION: Specifies how to set the storage state for initializing a browser context in C# and Java using a file path.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_38

LANGUAGE: csharp
CODE:
```
{
  storageState: "path/to/storage/state.json",
  storageStatePath: "path/to/storage/state.json"
}
```

----------------------------------------

TITLE: Fetching and Modifying API Response in C#
DESCRIPTION: Shows how to fetch an API response, modify its JSON content, and then fulfill the route with the modified response using Playwright in C#. This example adds a new breed to the dog API response.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_25

LANGUAGE: csharp
CODE:
```
await page.RouteAsync("https://dog.ceo/api/breeds/list/all", async route =>
{
    var response = await route.FetchAsync();
    dynamic json = await response.JsonAsync();
    json.message.big_red_dog = new string[] {};
    await route.FulfillAsync(new() { Response = response, Json = json });
});
```

----------------------------------------

TITLE: Creating a Page and Taking a Screenshot in C#
DESCRIPTION: This snippet demonstrates how to create a new page, navigate to a URL, and save a screenshot using Playwright in C#.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using System.Threading.Tasks;

class PageExamples
{
    public static async Task Run()
    {
        using var playwright = await Playwright.CreateAsync();
        await using var browser = await playwright.Webkit.LaunchAsync();
        var page = await browser.NewPageAsync();
        await page.GotoAsync("https://www.theverge.com");
        await page.ScreenshotAsync(new() { Path = "theverge.png" });
    }
}
```

----------------------------------------

TITLE: Configuring Trace Recording in Playwright Tests
DESCRIPTION: JavaScript configuration for enabling trace recording in Playwright tests, including retry scenarios.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';
export default defineConfig({
  retries: 1,
  use: {
    trace: 'on-first-retry',
  },
});
```

----------------------------------------

TITLE: Handling Popups in Playwright
DESCRIPTION: Examples of handling popup windows opened by a page, using waitForEvent and expect_popup methods to capture and interact with popups triggered by specific actions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pages.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
// Start waiting for popup before clicking. Note no await.
const popupPromise = page.waitForEvent('popup');
await page.getByText('open the popup').click();
const popup = await popupPromise;
// Interact with the new popup normally.
await popup.getByRole('button').click();
console.log(await popup.title());
```

LANGUAGE: java
CODE:
```
// Get popup after a specific action (e.g., click)
Page popup = page.waitForPopup(() -> {
  page.getByText("open the popup").click();
});
// Interact with the popup normally
popup.getByRole(AriaRole.BUTTON).click();
System.out.println(popup.title());
```

LANGUAGE: python
CODE:
```
# Get popup after a specific action (async) (e.g., click)
async with page.expect_popup() as popup_info:
    await page.get_by_text("open the popup").click()
popup = await popup_info.value

# Interact with the popup normally
await popup.get_by_role("button").click()
print(await popup.title())
```

LANGUAGE: python
CODE:
```
# Get popup after a specific action (sync) (e.g., click)
with page.expect_popup() as popup_info:
    page.get_by_text("open the popup").click()
popup = popup_info.value

# Interact with the popup normally
popup.get_by_role("button").click()
print(popup.title())
```

LANGUAGE: csharp
CODE:
```
// Get popup after a specific action (e.g., click)
var popup = await page.RunAndWaitForPopupAsync(async () =>
{
    await page.GetByText("open the popup").ClickAsync();
});
// Interact with the popup normally
await popup.GetByRole(AriaRole.Button).ClickAsync();
Console.WriteLine(await popup.TitleAsync());
```

----------------------------------------

TITLE: Typing into a Password Field with Playwright
DESCRIPTION: Example of typing text into a password field and submitting a form by pressing Enter. Demonstrates sequential text input combined with a form submission action.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_75

LANGUAGE: javascript
CODE:
```
const locator = page.getByLabel('Password');
await locator.pressSequentially('my password');
await locator.press('Enter');
```

LANGUAGE: java
CODE:
```
Locator locator = page.getByLabel("Password");
locator.pressSequentially("my password");
locator.press("Enter");
```

LANGUAGE: python
CODE:
```
locator = page.get_by_label("Password")
await locator.press_sequentially("my password")
await locator.press("Enter")
```

LANGUAGE: python
CODE:
```
locator = page.get_by_label("Password")
locator.press_sequentially("my password")
locator.press("Enter")
```

LANGUAGE: csharp
CODE:
```
var locator = page.GetByLabel("Password");
await locator.PressSequentiallyAsync("my password");
await locator.PressAsync("Enter");
```

----------------------------------------

TITLE: Serving Static Files in C#
DESCRIPTION: Shows how to serve static files as responses to specific routes using Playwright in C#. This example demonstrates serving a JSON file for a specific endpoint.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_35

LANGUAGE: csharp
CODE:
```
await page.RouteAsync("**/xhr_endpoint", route => route.FulfillAsync(new() { Path = "mock_data.json" }));
```

----------------------------------------

TITLE: Querying All Text Contents with Playwright Python (Sync)
DESCRIPTION: Demonstrates a synchronous call to acquire textContent for each element with the 'link' role via Playwright Python, resulting in a list of text strings.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_12

LANGUAGE: Python
CODE:
```
texts = page.get_by_role("link").all_text_contents()
```

----------------------------------------

TITLE: Filtering Visible Elements with Playwright v1.51
DESCRIPTION: Code example showing how to use the visible option with Locator.filter to match only visible elements in the DOM.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
test('some test', async ({ page }) => {
  // Ignore invisible todo items.
  const todoItems = page.getByTestId('todo-item').filter({ visible: true });
  // Check there are exactly 3 visible ones.
  await expect(todoItems).toHaveCount(3);
});
```

----------------------------------------

TITLE: Using Playwright Clock API to Control Time (C#)
DESCRIPTION: Illustrates how to use the Clock API to manipulate time within tests. This includes installing the clock at a specific time, pausing time, and fast-forwarding time to test time-dependent application behavior.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_10

LANGUAGE: csharp
CODE:
```
// Initialize clock with some time before the test time and let the page load naturally.
// `Date.now` will progress as the timers fire.
await Page.Clock.InstallAsync(new()
{
  TimeDate = new DateTime(2024, 2, 2, 8, 0, 0)
});
await Page.GotoAsync("http://localhost:3333");

// Pretend that the user closed the laptop lid and opened it again at 10am.
// Pause the time once reached that point.
await Page.Clock.PauseAtAsync(new DateTime(2024, 2, 2, 10, 0, 0));

// Assert the page state.
await Expect(Page.GetByTestId("current-time")).ToHaveTextAsync("2/2/2024, 10:00:00 AM");

// Close the laptop lid again and open it at 10:30am.
await Page.Clock.FastForwardAsync("30:00");
await Expect(Page.GetByTestId("current-time")).ToHaveTextAsync("2/2/2024, 10:30:00 AM");
```

----------------------------------------

TITLE: Handling Failed HTTP Requests (Python)
DESCRIPTION: Adds an event handler to Playwright for Python's page object to print out the URL and error text of any failed HTTP requests. Used for diagnostics and test debugging. Python bindings for Playwright must be installed.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_20

LANGUAGE: python
CODE:
```
page.on("requestfailed", lambda request: print(request.url + " " + request.failure.error_text))
```

----------------------------------------

TITLE: Handling Console Messages in Java
DESCRIPTION: Shows how to capture console messages, filter error messages, wait for console events, and extract argument values in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-consolemessage.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
// Listen for all console messages and print them to the standard output.
page.onConsoleMessage(msg -> System.out.println(msg.text()));

// Listen for all console messages and print errors to the standard output.
page.onConsoleMessage(msg -> {
  if ("error".equals(msg.type()))
    System.out.println("Error text: " + msg.text());
});

// Get the next console message
ConsoleMessage msg = page.waitForConsoleMessage(() -> {
  // Issue console.log inside the page
  page.evaluate("console.log('hello', 42, { foo: 'bar' });");
});

// Deconstruct console.log arguments
msg.args().get(0).jsonValue(); // hello
msg.args().get(1).jsonValue(); // 42
```

----------------------------------------

TITLE: Watching viewport size changes in C#
DESCRIPTION: Example of using WaitForFunctionAsync in C# to monitor viewport size changes. The function resolves when the window's inner width is less than 100 pixels, after setting the viewport size.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_114

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using System.Threading.Tasks;

class FrameExamples
{
  public static async Task WaitForFunction()
  {
    using var playwright = await Playwright.CreateAsync();
    await using var browser = await playwright.Webkit.LaunchAsync();
    var page = await browser.NewPageAsync();
    await page.SetViewportSizeAsync(50, 50);
    await page.MainFrame.WaitForFunctionAsync("window.innerWidth < 100");
  }
}
```

----------------------------------------

TITLE: Extending Test Object with Fixtures and Options in JavaScript
DESCRIPTION: Demonstrates how to extend the test object by defining custom fixtures and options. This allows for creating reusable setups and configurations for tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_26

LANGUAGE: javascript
CODE:
```
const base = require('@playwright/test');
const { TodoPage } = require('./todo-page');

exports.test = base.test.extend({
  defaultItem: ['Do stuff', { option: true }],

  todoPage: async ({ page, defaultItem }, use) => {
    const todoPage = new TodoPage(page);
    await todoPage.goto();
    await todoPage.addToDo(defaultItem);
    await use(todoPage);
    await todoPage.removeAll();
  },
});
```

----------------------------------------

TITLE: Managing Multiple Pages in Playwright
DESCRIPTION: Examples of creating and managing multiple pages within a browser context, including creating multiple pages and accessing all pages in a context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pages.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
// Create two pages
const pageOne = await context.newPage();
const pageTwo = await context.newPage();

// Get pages of a browser context
const allPages = context.pages();
```

LANGUAGE: java
CODE:
```
// Create two pages
Page pageOne = context.newPage();
Page pageTwo = context.newPage();

// Get pages of a browser context
List<Page> allPages = context.pages();
```

LANGUAGE: python
CODE:
```
# create two pages (async)
page_one = await context.new_page()
page_two = await context.new_page()

# get pages of a browser context
all_pages = context.pages
```

LANGUAGE: python
CODE:
```
# create two pages (sync)
page_one = context.new_page()
page_two = context.new_page()

# get pages of a browser context
all_pages = context.pages
```

LANGUAGE: csharp
CODE:
```
// Create two pages
var pageOne = await context.NewPageAsync();
var pageTwo = await context.NewPageAsync();

// Get pages of a browser context
var allPages = context.Pages;
```

----------------------------------------

TITLE: Interacting with GitHub Login Page in Playwright - C#
DESCRIPTION: This C# snippet demonstrates how to automate interactions with the GitHub login page using Playwright. It includes navigating to the login page and filling in the username and password fields before clicking the sign-in button.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_10

LANGUAGE: csharp
CODE:
```
var page = await context.NewPageAsync();
await page.GotoAsync("https://github.com/login");
// Interact with login form
await page.GetByLabel("Username or email address").FillAsync("username");
await page.GetByLabel("Password").FillAsync("password");
await page.GetByRole(AriaRole.Button, new() { Name = "Sign in" }).ClickAsync();
// Continue with the test
```

----------------------------------------

TITLE: Using Test Steps API with test.step()
DESCRIPTION: Shows how to organize tests into logical steps using the test.step() API. This helps in better structuring long tests and provides step-level information in test reports.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_66

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('test', async ({ page }) => {
  await test.step('Log in', async () => {
    // ...
  });
  await test.step('news feed', async () => {
    // ...
  });
});
```

----------------------------------------

TITLE: Saving Authentication State with Playwright Codegen for JavaScript
DESCRIPTION: Command to generate code for GitHub while saving authentication state (cookies, localStorage, IndexedDB) to auth.json using JavaScript. This allows reusing authentication in subsequent test recordings.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_20

LANGUAGE: bash
CODE:
```
npx playwright codegen github.com/microsoft/playwright --save-storage=auth.json
```

----------------------------------------

TITLE: Writing and Validating Issue Creation API Tests with Playwright MSTest in C#
DESCRIPTION: This snippet demonstrates creating and validating GitHub issues with the Playwright APIRequestContext in C#. It features test methods for submitting new issue data via POST requests and then fetching all issues to confirm via assertions that the submitted issues exist and have the correct body content. Usage requires prior initialization of the authorized Request context. The code leverages JSON parsing for server response validation and expects GITHUB_API_TOKEN and GITHUB_USER in the environment. The class is set up for the MSTest runner.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-csharp.md#2025-04-22_snippet_1

LANGUAGE: csharp
CODE:
```
using System.Text.Json;
using Microsoft.Playwright;
using Microsoft.Playwright.MSTest;

namespace PlaywrightTests;

[TestClass]
public class TestGitHubAPI : PlaywrightTest
{
    static string REPO = "test";
    static string USER = Environment.GetEnvironmentVariable("GITHUB_USER");
    static string? API_TOKEN = Environment.GetEnvironmentVariable("GITHUB_API_TOKEN");

    private IAPIRequestContext Request = null!;

    [TestMethod]
    public async Task ShouldCreateBugReport()
    {
        var data = new Dictionary<string, string>
        {
            { "title", "[Bug] report 1" },
            { "body", "Bug description" }
        };
        var newIssue = await Request.PostAsync("/repos/" + USER + "/" + REPO + "/issues", new() { DataObject = data });
        await Expect(newIssue).ToBeOKAsync();

        var issues = await Request.GetAsync("/repos/" + USER + "/" + REPO + "/issues");
        await Expect(newIssue).ToBeOKAsync();
        var issuesJsonResponse = await issues.JsonAsync();
        JsonElement? issue = null;
        foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())
        {
            if (issueObj.TryGetProperty("title", out var title) == true)
            {
                if (title.GetString() == "[Bug] report 1")
                {
                    issue = issueObj;
                }
            }
        }
        Assert.IsNotNull(issue);
        Assert.AreEqual("Bug description", issue?.GetProperty("body").GetString());
    }

    [TestMethod]
    public async Task ShouldCreateFeatureRequests()
    {
        var data = new Dictionary<string, string>
        {
            { "title", "[Feature] request 1" },
            { "body", "Feature description" }
        };
        var newIssue = await Request.PostAsync("/repos/" + USER + "/" + REPO + "/issues", new() { DataObject = data });
        await Expect(newIssue).ToBeOKAsync();

        var issues = await Request.GetAsync("/repos/" + USER + "/" + REPO + "/issues");
        await Expect(newIssue).ToBeOKAsync();
        var issuesJsonResponse = await issues.JsonAsync();

        JsonElement? issue = null;
        foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())
        {
            if (issueObj.TryGetProperty("title", out var title) == true)
            {
                if (title.GetString() == "[Feature] request 1")
                {
                    issue = issueObj;
                }
            }
        }
        Assert.IsNotNull(issue);
        Assert.AreEqual("Feature description", issue?.GetProperty("body").GetString());
    }

    // ...
}

```

----------------------------------------

TITLE: Handling File Upload with FileChooser in JavaScript
DESCRIPTION: Demonstrates how to wait for a file chooser event, trigger it, and set a file for upload using Playwright in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-filechooser.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
// Start waiting for file chooser before clicking. Note no await.
const fileChooserPromise = page.waitForEvent('filechooser');
await page.getByText('Upload file').click();
const fileChooser = await fileChooserPromise;
await fileChooser.setFiles(path.join(__dirname, 'myfile.pdf'));
```

----------------------------------------

TITLE: Testing Automatic Logout after Inactivity in Java
DESCRIPTION: Tests automatic user logout by simulating user inactivity with Playwright's clock.fastForward method. This example shows installing a clock, navigating to a page, interacting with it, then fast-forwarding time by 5 minutes to trigger inactivity logout.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_13

LANGUAGE: java
CODE:
```
// Initial time does not matter for the test, so we can pick current time.
page.clock().install();
page.navigate("http://localhost:3333");
Locator locator = page.getByRole("button");

// Interact with the page
locator.click();

// Fast forward time 5 minutes as if the user did not do anything.
// Fast forward is like closing the laptop lid and opening it after 5 minutes.
// All the timers due will fire once immediately, as in the real browser.
page.clock().fastForward("05:00");

// Check that the user was logged out automatically.
assertThat(page.getByText("You have been logged out due to inactivity.")).isVisible();
```

----------------------------------------

TITLE: Configuring CircleCI for Playwright Tests (Multiple Languages)
DESCRIPTION: This YAML configuration defines CircleCI executors for running Playwright tests in Docker containers for JavaScript, Python, Java, and C# projects. It specifies the appropriate Playwright Docker image for each language.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_32

LANGUAGE: yml
CODE:
```
executors:
  pw-noble-development:
    docker:
      - image: mcr.microsoft.com/playwright:v%%VERSION%%-noble
```

LANGUAGE: yml
CODE:
```
executors:
  pw-noble-development:
    docker:
      - image: mcr.microsoft.com/playwright/python:v%%VERSION%%-noble
```

LANGUAGE: yml
CODE:
```
executors:
  pw-noble-development:
    docker:
      - image: mcr.microsoft.com/playwright/java:v%%VERSION%%-noble
```

LANGUAGE: yml
CODE:
```
executors:
  pw-noble-development:
    docker:
      - image: mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble
```

----------------------------------------

TITLE: Handling Uncaught Page Errors with Playwright Events (JavaScript)
DESCRIPTION: Registers a callback to log uncaught exceptions in the page using the Playwright 'pageerror' event in JavaScript. Requires a Playwright page instance. The snippet also demonstrates triggering an error by navigating to a page that throws. The exception is logged to the terminal. No additional dependencies needed beyond Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_8

LANGUAGE: js
CODE:
```
// Log all uncaught errors to the terminal
page.on('pageerror', exception => {
  console.log(`Uncaught exception: "${exception}"`);
});

// Navigate to a page with an exception.
await page.goto('data:text/html,<script>throw new Error("Test")<\/script>');
```

----------------------------------------

TITLE: Configuring Screenshot Comparison with maxDiffPixels (JavaScript)
DESCRIPTION: This example shows how to configure the `toHaveScreenshot()` method with the `maxDiffPixels` option to allow for a certain number of pixel differences in the comparison.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-snapshots-js.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('example test', async ({ page }) => {
  await page.goto('https://playwright.dev');
  await expect(page).toHaveScreenshot({ maxDiffPixels: 100 });
});
```

----------------------------------------

TITLE: Test Using Authentication State
DESCRIPTION: Example test that uses the authenticated state set up by global setup.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
import { test } from '@playwright/test';

test('test', async ({ page }) => {
  await page.goto('/');
  // You are signed in!
});
```

----------------------------------------

TITLE: Playwright Asynchronous API Usage
DESCRIPTION: Example demonstrating asynchronous API usage with asyncio for modern Python projects
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-python.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
import asyncio
from playwright.async_api import async_playwright

async def main():
    async with async_playwright() as p:
        browser = await p.chromium.launch()
        page = await browser.new_page()
        await page.goto("https://playwright.dev")
        print(await page.title())
        await browser.close()

asyncio.run(main())
```

----------------------------------------

TITLE: Clearing Cookies from Playwright BrowserContext (JS, Java, Python, C#)
DESCRIPTION: Illustrates clearing cookies using `clearCookies`. This method can remove all cookies within the context or selectively remove cookies based on provided filters like name, domain, or path. Multiple filter options can be combined.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
await context.clearCookies();
await context.clearCookies({ name: 'session-id' });
await context.clearCookies({ domain: 'my-origin.com' });
await context.clearCookies({ domain: /.*my-origin\.com/ });
await context.clearCookies({ path: '/api/v1' });
await context.clearCookies({ name: 'session-id', domain: 'my-origin.com' });
```

LANGUAGE: java
CODE:
```
context.clearCookies();
context.clearCookies(new BrowserContext.ClearCookiesOptions().setName("session-id"));
context.clearCookies(new BrowserContext.ClearCookiesOptions().setDomain("my-origin.com"));
context.clearCookies(new BrowserContext.ClearCookiesOptions().setPath("/api/v1"));
context.clearCookies(new BrowserContext.ClearCookiesOptions()
                         .setName("session-id")
                         .setDomain("my-origin.com"));
```

LANGUAGE: python
CODE:
```
await context.clear_cookies()
await context.clear_cookies(name="session-id")
await context.clear_cookies(domain="my-origin.com")
await context.clear_cookies(path="/api/v1")
await context.clear_cookies(name="session-id", domain="my-origin.com")
```

LANGUAGE: python
CODE:
```
context.clear_cookies()
context.clear_cookies(name="session-id")
context.clear_cookies(domain="my-origin.com")
context.clear_cookies(path="/api/v1")
context.clear_cookies(name="session-id", domain="my-origin.com")
```

LANGUAGE: csharp
CODE:
```
await context.ClearCookiesAsync();
await context.ClearCookiesAsync(new() { Name = "session-id" });
await context.ClearCookiesAsync(new() { Domain = "my-origin.com" });
await context.ClearCookiesAsync(new() { Path = "/api/v1" });
await context.ClearCookiesAsync(new() { Name = "session-id", Domain = "my-origin.com" });
```

----------------------------------------

TITLE: Uploading Files with Multipart Form Data in JavaScript
DESCRIPTION: Example of uploading files using multipart/form-data encoding in JavaScript. The example demonstrates how to create FormData with text fields and file attachments and submit it via a POST request.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
const form = new FormData();
form.set('name', 'John');
form.append('name', 'Doe');
// Send two file fields with the same name.
form.append('file', new File(['console.log(2024);'], 'f1.js', { type: 'text/javascript' }));
form.append('file', new File(['hello'], 'f2.txt', { type: 'text/plain' }));
await request.post('https://example.com/api/uploadForm', {
  multipart: form
});
```

----------------------------------------

TITLE: Using New getBy* Locators and Assertions in Playwright Java
DESCRIPTION: Illustrates the usage of various new locator methods like getByLabel, getByRole, and assertions like assertThat and isVisible to interact with form elements and verify visibility. Requires Playwright Java and assertions library.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_34

LANGUAGE: Java
CODE:
```
page.getByLabel("User Name").fill("John");

page.getByLabel("Password").fill("secret-password");

page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Sign in")).click();

assertThat(page.getByText("Welcome, John!")).isVisible();
```

----------------------------------------

TITLE: Handling GET and POST Requests in Python
DESCRIPTION: Demonstrates how to handle GET and POST requests separately using Playwright in Python. The code sets up route handlers that check the request method and either handle the request or fall back to the default behavior.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_14

LANGUAGE: python
CODE:
```
# Handle POST requests.
def handle_post(route):
    if route.request.method != "POST":
        route.fallback()
        return
  # Handling POST only.
  # ...

page.route("**/*", handle_get)
page.route("**/*", handle_post)
```

----------------------------------------

TITLE: Conditional Routing by HTTP Method (GET/POST) with Route.fallback - JavaScript
DESCRIPTION: Illustrates splitting request handlers in Playwright JavaScript based on HTTP method. Each handler checks route.request().method() and either falls back or processes the request. This allows modular request logic for GET vs POST or API vs static assets. Inputs: route object. Outputs: specific processing based on HTTP method. Limitations: must ensure fallback logic to prevent double-handling.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
// Handle GET requests.
await page.route('**/*', async route => {
  if (route.request().method() !== 'GET') {
    await route.fallback();
    return;
  }
  // Handling GET only.
  // ...
});

// Handle POST requests.
await page.route('**/*', async route => {
  if (route.request().method() !== 'POST') {
    await route.fallback();
    return;
  }
  // Handling POST only.
  // ...
});
```

----------------------------------------

TITLE: Running Python Tests with Console Debugging
DESCRIPTION: Commands to run Playwright Python tests with console debugging enabled using pytest.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
PWDEBUG=console pytest -s
```

LANGUAGE: batch
CODE:
```
set PWDEBUG=console
pytest -s
```

LANGUAGE: powershell
CODE:
```
$env:PWDEBUG=console
pytest -s
```

----------------------------------------

TITLE: Setting Browser Options for a Specific Project in Playwright
DESCRIPTION: Demonstrates how to set browser options for a specific project in the Playwright configuration file. This example sets the browserName to 'chromium' for a project named 'Chromium'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testproject.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'Chromium',
      use: {
        browserName: 'chromium',
      },
    },
  ],
});
```

----------------------------------------

TITLE: Selecting Options in Java
DESCRIPTION: Examples of selecting options in a <select> element using Page.selectOption method in Java. It demonstrates single and multiple selections using different selection criteria.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_102

LANGUAGE: java
CODE:
```
// Single selection matching the value or label
page.selectOption("select#colors", "blue");
// single selection matching both the value and the label
page.selectOption("select#colors", new SelectOption().setLabel("Blue"));
// multiple selection
page.selectOption("select#colors", new String[] {"red", "green", "blue"});
```

----------------------------------------

TITLE: Recording Traces with NUnit in Playwright C#
DESCRIPTION: Implements trace recording in NUnit tests using Playwright. Sets up tracing with screenshots, snapshots, and source capturing, saving traces to a specified directory.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer.md#2025-04-22_snippet_6

LANGUAGE: csharp
CODE:
```
namespace PlaywrightTests;

[Parallelizable(ParallelScope.Self)]
[TestFixture]
public class Tests : PageTest
{
    [SetUp]
    public async Task Setup()
    {
        await Context.Tracing.StartAsync(new()
        {
            Title = TestContext.CurrentContext.Test.ClassName + "." + TestContext.CurrentContext.Test.Name,
            Screenshots = true,
            Snapshots = true,
            Sources = true
        });
    }

    [TearDown]
    public async Task TearDown()
    {
        await Context.Tracing.StopAsync(new()
        {
            Path = Path.Combine(
                TestContext.CurrentContext.WorkDirectory,
                "playwright-traces",
                $"{TestContext.CurrentContext.Test.ClassName}.{TestContext.CurrentContext.Test.Name}.zip"
            )
        });
    }

    [Test]
    public async Task TestYourOnlineShop()
    {
        // ..
    }
}
```

----------------------------------------

TITLE: Java Trace Recording Implementation
DESCRIPTION: Java example showing how to record traces using the BrowserContext tracing API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer.md#2025-04-22_snippet_5

LANGUAGE: java
CODE:
```
Browser browser = browserType.launch();
BrowserContext context = browser.newContext();

// Start tracing before creating / navigating a page.
context.tracing().start(new Tracing.StartOptions()
  .setScreenshots(true)
  .setSnapshots(true)
  .setSources(true));

Page page = context.newPage();
page.navigate("https://playwright.dev");

// Stop tracing and export it into a zip archive.
context.tracing().stop(new Tracing.StopOptions()
  .setPath(Paths.get("trace.zip")));
```

----------------------------------------

TITLE: Asserting DOM Element Focus in Playwright
DESCRIPTION: Examples of using toBeFocused assertion to verify if a locator points to a focused DOM element. Shows implementation across different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_14

LANGUAGE: javascript
CODE:
```
const locator = page.getByRole('textbox');
await expect(locator).toBeFocused();
```

LANGUAGE: java
CODE:
```
assertThat(page.getByRole(AriaRole.TEXTBOX)).isFocused();
```

LANGUAGE: python
CODE:
```
from playwright.async_api import expect

locator = page.get_by_role("textbox")
await expect(locator).to_be_focused()
```

LANGUAGE: csharp
CODE:
```
var locator = Page.GetByRole(AriaRole.Textbox);
await Expect(locator).ToBeFocusedAsync();
```

----------------------------------------

TITLE: Implementing PlaywrightDevPage in JavaScript
DESCRIPTION: A JavaScript implementation of PlaywrightDevPage that provides methods for navigating and interacting with the playwright.dev page. It defines locators for important page elements and exports the class for use in tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
class PlaywrightDevPage {
  /**
   * @param {import('playwright').Page} page
   */
  constructor(page) {
    this.page = page;
    this.getStartedLink = page.locator('a', { hasText: 'Get started' });
    this.gettingStartedHeader = page.locator('h1', { hasText: 'Installation' });
    this.pomLink = page.locator('li', {
      hasText: 'Playwright Test',
    }).locator('a', {
      hasText: 'Page Object Model',
    });
    this.tocList = page.locator('article div.markdown ul > li > a');
  }
  async getStarted() {
    await this.getStartedLink.first().click();
    await expect(this.gettingStartedHeader).toBeVisible();
  }

  async pageObjectModel() {
    await this.getStarted();
    await this.pomLink.click();
  }
}
module.exports = { PlaywrightDevPage };
```

----------------------------------------

TITLE: Mocking API Endpoints in C#
DESCRIPTION: Shows how to intercept and mock API endpoints by handling network requests in C#. The example fulfills a request with custom status code and body data.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_16

LANGUAGE: csharp
CODE:
```
await page.RouteAsync("**/api/fetch_data", async route => {
  await route.FulfillAsync(new() { Status = 200, Body = testData });
});
await page.GotoAsync("https://example.com");
```

----------------------------------------

TITLE: Checking a Checkbox or Radio via Playwright C#
DESCRIPTION: Relies on the Playwright C# library to ensure a checkbox is in the checked state, including all Playwright actionability steps. Throws if locator is not a checkbox/radio input or is removed during the operation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_34

LANGUAGE: C#
CODE:
```
await page.GetByRole(AriaRole.Checkbox).CheckAsync();
```

----------------------------------------

TITLE: Recording Trace in Java
DESCRIPTION: Demonstrates trace recording implementation in Java using the BrowserContext.tracing API. Includes configuration for screenshots, snapshots, and source capture.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-java-python.md#2025-04-22_snippet_3

LANGUAGE: java
CODE:
```
Browser browser = browserType.launch();
BrowserContext context = browser.newContext();

// Start tracing before creating / navigating a page.
context.tracing().start(new Tracing.StartOptions()
  .setScreenshots(true)
  .setSnapshots(true)
  .setSources(true));

Page page = context.newPage();
page.navigate("https://playwright.dev");

// Stop tracing and export it into a zip archive.
context.tracing().stop(new Tracing.StopOptions()
  .setPath(Paths.get("trace.zip")));
```

----------------------------------------

TITLE: Python Trace Recording Implementation
DESCRIPTION: Python examples for recording traces using both async and sync APIs in Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
browser = chromium.launch()
context = browser.new_context()

# Start tracing before creating / navigating a page.
context.tracing.start(screenshots=True, snapshots=True, sources=True)

page = context.new_page()
page.goto("https://playwright.dev")

# Stop tracing and export it into a zip archive.
context.tracing.stop(path = "trace.zip")
```

----------------------------------------

TITLE: Implementing Before and After Hooks for Parameterized Tests in JavaScript
DESCRIPTION: This code shows how to implement beforeEach and afterEach hooks outside of the forEach loop to ensure they are executed only once for all parameterized tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
test.beforeEach(async ({ page }) => {
  // ...
});

test.afterEach(async ({ page }) => {
  // ...
});

[
  { name: 'Alice', expected: 'Hello, Alice!' },
  { name: 'Bob', expected: 'Hello, Bob!' },
  { name: 'Charlie', expected: 'Hello, Charlie!' },
].forEach(({ name, expected }) => {
  test(`testing with ${name}`, async ({ page }) => {
    await page.goto(`https://example.com/greet?name=${name}`);
    await expect(page.getByRole('heading')).toHaveText(expected);
  });
});
```

----------------------------------------

TITLE: Configuring Multiple Test Projects with Different Browsers in Playwright
DESCRIPTION: Example configuration that runs every test in Chromium, Firefox and WebKit, both Desktop and Mobile versions. This shows how to set up multiple test projects in the configuration file, with shared options and project-specific settings.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testproject.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  // Options shared for all projects.
  timeout: 30000,
  use: {
    ignoreHTTPSErrors: true,
  },

  // Options specific to each project.
  projects: [
    {
      name: 'chromium',
      use: devices['Desktop Chrome'],
    },
    {
      name: 'firefox',
      use: devices['Desktop Firefox'],
    },
    {
      name: 'webkit',
      use: devices['Desktop Safari'],
    },
    {
      name: 'Mobile Chrome',
      use: devices['Pixel 5'],
    },
    {
      name: 'Mobile Safari',
      use: devices['iPhone 12'],
    },
  ],
});
```

----------------------------------------

TITLE: Aborting Network Requests in Java
DESCRIPTION: Demonstrates how to abort specific network requests in Java. Examples include aborting image requests and conditionally aborting requests based on resource type.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_23

LANGUAGE: java
CODE:
```
page.route("**/*.{png,jpg,jpeg}", route -> route.abort());

// Abort based on the request type
page.route("**/*", route -> {
  if ("image".equals(route.request().resourceType()))
    route.abort();
  else
    route.resume();
});
```

----------------------------------------

TITLE: Sharding Tests Between Multiple Machines (Bash)
DESCRIPTION: Command to run a specific shard of tests, allowing distribution of test execution across multiple machines.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
npx playwright test --shard=2/3
```

----------------------------------------

TITLE: Validating Top Issue Placement via UI and API with Playwright in C#
DESCRIPTION: Demonstrates creating a GitHub issue via API and verifying through the browser that it is the first in the issue list using Playwright in C#. This snippet sets up POST requests for issue creation and utilizes built-in locators with assertion helpers to check GUI state. Requires Playwright, proper authentication setup, and an existing repository context in which issues can be created; input parameters include repository and user credentials.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-csharp.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
class TestGitHubAPI : PageTest
{
    [TestMethod]
    public async Task LastCreatedIssueShouldBeFirstInTheList()
    {
        var data = new Dictionary<string, string>
        {
            { "title", "[Feature] request 1" },
            { "body", "Feature description" }
        };
        var newIssue = await Request.PostAsync("/repos/" + USER + "/" + REPO + "/issues", new() { DataObject = data });
        await Expect(newIssue).ToBeOKAsync();

        // When inheriting from 'PlaywrightTest' it only gives you a Playwright instance. To get a Page instance, either start
        // a browser, context, and page manually or inherit from 'PageTest' which will launch it for you.
        await Page.GotoAsync("https://github.com/" + USER + "/" + REPO + "/issues");
        var firstIssue = Page.Locator("a[data-hovercard-type='issue']").First;
        await Expect(firstIssue).ToHaveTextAsync("[Feature] request 1");
    }
}

```

----------------------------------------

TITLE: Setting Per Assertion Timeout in Python
DESCRIPTION: This Python example demonstrates how to set a specific timeout for a single assertion using Playwright's `expect` function. The `to_be_visible` assertion is given a timeout of 10,000 milliseconds via the `timeout` parameter.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-csharp-java-python.md#_snippet_5

LANGUAGE: python
CODE:
```
from playwright.sync_api import expect

def test_foobar(page: Page) -> None:
    expect(page.get_by_text("Name")).to_be_visible(timeout=10_000)
```

----------------------------------------

TITLE: Using selectOption in Playwright with Python (sync)
DESCRIPTION: Shows how to select options in a <select> element using different selection methods in Python with synchronous syntax. Demonstrates single selection by value, by label, and multiple selection.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_81

LANGUAGE: python
CODE:
```
# single selection matching the value or label
element.select_option("blue")
# single selection matching the label
element.select_option(label="blue")
# multiple selection for blue, red and second option
element.select_option(value=["red", "green", "blue"])
```

----------------------------------------

TITLE: Running Playwright Tests for Specific Projects
DESCRIPTION: Commands to run Playwright tests on all configured projects or on a specific project. The output shows how test results are displayed with project names.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-projects-js.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx playwright test

Running 7 tests using 5 workers

  ✓ [chromium] › example.spec.ts:3:1 › basic test (2s)
  ✓ [firefox] › example.spec.ts:3:1 › basic test (2s)
  ✓ [webkit] › example.spec.ts:3:1 › basic test (2s)
  ✓ [Mobile Chrome] › example.spec.ts:3:1 › basic test (2s)
  ✓ [Mobile Safari] › example.spec.ts:3:1 › basic test (2s)
  ✓ [Microsoft Edge] › example.spec.ts:3:1 › basic test (2s)
  ✓ [Google Chrome] › example.spec.ts:3:1 › basic test (2s)
```

----------------------------------------

TITLE: Waiting for Network Responses with Regular Expressions in Python (Async)
DESCRIPTION: Demonstrates how to wait for a network response using a regular expression pattern or a predicate function in asynchronous Python. The example shows waiting for a response that ends with .jpeg or contains a specific token.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_5

LANGUAGE: python
CODE:
```
# Use a regular expression
async with page.expect_response(re.compile(r"\.jpeg$")) as response_info:
    await page.get_by_text("Update").click()
response = await response_info.value

# Use a predicate taking a response object
async with page.expect_response(lambda response: token in response.url) as response_info:
    await page.get_by_text("Update").click()
response = await response_info.value
```

----------------------------------------

TITLE: Filtering Playwright Locators by Text (Python)
DESCRIPTION: Demonstrates how to filter a collection of Playwright locators (e.g., all buttons) to find a specific element based on its text content using the `filter` method.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_40

LANGUAGE: py
CODE:
```
buttons = page.locator("role=button")
# ...
submit_button = buttons.filter(has_text="Submit")
submit_button.click()
```

----------------------------------------

TITLE: Appending FormData for API Requests in Playwright C#
DESCRIPTION: Demonstrates how to use `Context.APIRequest.CreateFormData()` and `FormData.Append` to build multipart form data with repeating fields (like multiple files) for use with `Context.APIRequest.PostAsync`. Useful for simulating file uploads or complex form submissions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_17

LANGUAGE: C#
CODE:
```
var formData = Context.APIRequest.CreateFormData();
formData.Append("file", new FilePayload()
{
    Name = "f1.js",
    MimeType = "text/javascript",
    Buffer = System.Text.Encoding.UTF8.GetBytes("var x = 2024;")
});
formData.Append("file", new FilePayload()
{
    Name = "f2.txt",
    MimeType = "text/plain",
    Buffer = System.Text.Encoding.UTF8.GetBytes("hello")
});
var response = await Context.APIRequest.PostAsync("https://example.com/uploadFiles", new() { Multipart = formData });
```

----------------------------------------

TITLE: Launching Playwright Firefox Browser in Headed and Slow-Mo Mode - Java
DESCRIPTION: Configures and launches Playwright Firefox browser with the UI visible (headless mode off) and a slow-motion delay per action. Requires previous Playwright Java setup. Key parameters include headless set to false and slowMo set to 50ms, aiding in debugging or observing test execution. No navigation or further operations are executed in this snippet.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-java.md#2025-04-22_snippet_4

LANGUAGE: java
CODE:
```
playwright.firefox().launch(new BrowserType.LaunchOptions().setHeadless(false).setSlowMo(50));
```

----------------------------------------

TITLE: Fulfilling Routes with Custom Responses in Java
DESCRIPTION: Shows how to fulfill routes with custom responses using Playwright in Java. This example demonstrates responding with a 404 status code and a custom message for all requests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_27

LANGUAGE: java
CODE:
```
page.route("**/*", route -> {
  route.fulfill(new Route.FulfillOptions()
    .setStatus(404)
    .setContentType("text/plain")
    .setBody("Not Found!"));
});
```

----------------------------------------

TITLE: Using Page.waitForTimeout() Instead of Thread.sleep() for Event Handling in Playwright Java
DESCRIPTION: Example demonstrating how to properly pause execution while allowing Playwright events to be dispatched. This snippet shows the difference between Thread.sleep() (which blocks event dispatching) and Page.waitForTimeout() (which maintains event handling during the pause).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/threading-java.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
page.onResponse(response -> System.out.println(response.url()));
page.navigate("https://playwright.dev");
System.out.println("-- did navigate --");
// Block current thread for 60s and ensure the events are dispatched.
page.waitForTimeout(60_000);
```

----------------------------------------

TITLE: Convert Response Body to Text
DESCRIPTION: The `Response.text` async method retrieves the textual representation of the response body, suitable for working with text-based responses like HTML or JSON. It must be called within an asynchronous context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_16

LANGUAGE: javascript
CODE:
```
async function responseBodyText() {\n  const text = await response.text();\n  console.log('Response Text:', text);\n}
```

----------------------------------------

TITLE: Sign In Test with Java for Playwright
DESCRIPTION: Illustrates using Java to automate GitHub login with Playwright, filling out the login form fields, and simulating button clicks. This sets up the browser context for subsequent interactions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_7

LANGUAGE: java
CODE:
```
Page page = context.newPage();
page.navigate("https://github.com/login");
page.getByLabel("Username or email address").fill("username");
page.getByLabel("Password").fill("password");
page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Sign in"))
    .click();
```

----------------------------------------

TITLE: Debugging Single Test File
DESCRIPTION: Commands to debug a specific test file using Playwright Inspector across different shells.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
PWDEBUG=1 pytest -s test_example.py
```

LANGUAGE: batch
CODE:
```
set PWDEBUG=1
pytest -s test_example.py
```

LANGUAGE: powershell
CODE:
```
$env:PWDEBUG=1
pytest -s test_example.py
```

----------------------------------------

TITLE: Generate Playwright Test with Assertions (Python)
DESCRIPTION: This Python code snippet demonstrates a test generated by the Playwright Test Generator. It shows how to navigate a page, interact with elements, and use assertions like `to_contain_text`, `to_be_visible`, and `to_have_value` to verify element properties.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_20

LANGUAGE: python
CODE:
```
from playwright.sync_api import Page, expect

def test_example(page: Page) -> None:
    page.goto("https://playwright.dev/")
    page.get_by_role("link", name="Get started").click()
    expect(page.get_by_label("Breadcrumbs").get_by_role("list")).to_contain_text("Installation")
    expect(page.get_by_label("Search")).to_be_visible()
    page.get_by_label("Search").click()
    page.get_by_placeholder("Search docs").fill("locator")
    expect(page.get_by_placeholder("Search docs")).to_have_value("locator");
```

----------------------------------------

TITLE: Configuring Browser Name in Playwright Tests
DESCRIPTION: Example showing how to specify which browser (chromium, firefox, or webkit) should be used to run tests, with firefox configured in this example.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  use: {
    browserName: 'firefox',
  },
});
```

----------------------------------------

TITLE: Asserting ARIA Role with Playwright Python
DESCRIPTION: Illustrates the use of the `toHaveRole` assertion on a Locator object to verify if an element has a specific ARIA role. Requires a Playwright page and locator.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_14

LANGUAGE: python
CODE:
```
locator = page.get_by_test_id("save-button")
expect(locator).to_have_role("button")
```

----------------------------------------

TITLE: Setting Viewport for a Test Suite in Playwright Test (JavaScript)
DESCRIPTION: This snippet shows how to apply a specific viewport size to a group of tests (a suite) using `test.describe` and `test.use` in a Playwright Test file (`example.spec.ts`). All tests within this describe block will use the specified viewport.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
```js tab=js-test title="tests/example.spec.ts"
import { test, expect } from '@playwright/test';

test.describe('specific viewport block', () => {
  test.use({ viewport: { width: 1600, height: 1200 } });

  test('my test', async ({ page }) => {
    // ...
  });
});
```
```

----------------------------------------

TITLE: Recording Playwright Traces for Debugging
DESCRIPTION: Code snippet demonstrating how to record Playwright traces with screenshots and DOM snapshots for later inspection using the Trace Viewer tool.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_71

LANGUAGE: js
CODE:
```
const browser = await chromium.launch();
const context = await browser.newContext();

// Start tracing before creating / navigating a page.
await context.tracing.start({ screenshots: true, snapshots: true });

const page = await context.newPage();
await page.goto('https://playwright.dev');

// Stop tracing and export it into a zip archive.
await context.tracing.stop({ path: 'trace.zip' });
```

----------------------------------------

TITLE: Uploading Files with Multipart Form Data in C#
DESCRIPTION: Example of uploading files using multipart/form-data encoding in C#. The example demonstrates creating a FilePayload with file name, MIME type, and content, then adding it to a multipart form for submission.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_16

LANGUAGE: csharp
CODE:
```
var file = new FilePayload()
{
    Name = "f.js",
    MimeType = "text/javascript",
    Buffer = System.Text.Encoding.UTF8.GetBytes("console.log(2022);")
};
var multipart = Context.APIRequest.CreateFormData();
multipart.Set("fileField", file);
await request.PostAsync("https://example.com/api/uploadScript", new() { Multipart = multipart });
```

----------------------------------------

TITLE: Opening Playwright HTML Report via yarn - Bash
DESCRIPTION: Uses yarn to launch the Playwright HTML test report for interactive review. Requires prior test execution and an available report. Allows filtering and investigation of test runs by various criteria such as result type or browser.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
yarn playwright show-report
```

----------------------------------------

TITLE: Configuring Azure Pipelines for Playwright Tests (JavaScript)
DESCRIPTION: This YAML configuration sets up Azure Pipelines to run Playwright tests in a containerized environment for a JavaScript project. It uses the official Playwright Docker image, installs Node.js, runs npm ci, and executes the tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_28

LANGUAGE: yml
CODE:
```
trigger:
- main

pool:
  vmImage: ubuntu-latest
container: mcr.microsoft.com/playwright:v%%VERSION%%-noble

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '18'
  displayName: 'Install Node.js'

- script: npm ci
  displayName: 'npm ci'
- script: npx playwright test
  displayName: 'Run Playwright tests'
  env:
    CI: 'true'
```

----------------------------------------

TITLE: Creating Multiple Contexts with Async Playwright (Python)
DESCRIPTION: Provides the asynchronous Python code using `playwright.async_api` to launch a browser and create two distinct, isolated `BrowserContext` instances (`user_context`, `admin_context`) via `browser.new_context()`. This pattern is used for simulating concurrent, independent user sessions in async Python tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_9

LANGUAGE: python
CODE:
```
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    # create a chromium browser instance
    chromium = playwright.chromium
    browser = await chromium.launch()

    # create two isolated browser contexts
    user_context = await browser.new_context()
    admin_context = await browser.new_context()

    # create pages and interact with contexts independently

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())
```

----------------------------------------

TITLE: Asserting Element CSS Classes using LocatorAssertions in Multiple Languages
DESCRIPTION: Examples of using toHaveClass/hasClass to verify that an element has specific CSS classes. This can be used with strings to match exact class attributes or with regular expressions to match patterns within class names.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_27

LANGUAGE: javascript
CODE:
```
const locator = page.locator('#component');
await expect(locator).toHaveClass('middle selected row');
await expect(locator).toHaveClass(/(^|\s)selected(\s|$)/);
```

LANGUAGE: java
CODE:
```
assertThat(page.locator("#component")).hasClass("middle selected row");
assertThat(page.locator("#component")).hasClass(Pattern.compile("(^|\\s)selected(\\s|$)"));
```

LANGUAGE: python
CODE:
```
from playwright.async_api import expect

locator = page.locator("#component")
await expect(locator).to_have_class("middle selected row")
await expect(locator).to_have_class(re.compile(r"(^|\\s)selected(\\s|$)"))
```

LANGUAGE: python
CODE:
```
from playwright.sync_api import expect

locator = page.locator("#component")
expect(locator).to_have_class("middle selected row")
expect(locator).to_have_class(re.compile(r"(^|\\s)selected(\\s|$)"))
```

LANGUAGE: csharp
CODE:
```
var locator = Page.Locator("#component");
await Expect(locator).ToHaveClassAsync("middle selected row");
await Expect(locator).ToHaveClassAsync(new Regex("(^|\\s)selected(\\s|$)"));
```

----------------------------------------

TITLE: Using Keyboard.PressAsync for Key Simulation and Screenshots in Playwright (C#)
DESCRIPTION: This C# snippet demonstrates the usage of `page.Keyboard.PressAsync` to simulate pressing different keys ('A', 'ArrowLeft', 'Shift+O') on a webpage (`https://keycode.info`). It navigates to the page, simulates key presses, and takes screenshots after each press to visually verify the event. This method simulates a full key press, including `keydown` and `keyup` events.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_24

LANGUAGE: csharp
CODE:
```
```csharp
await page.GotoAsync("https://keycode.info");
await page.Keyboard.PressAsync("A");
await page.ScreenshotAsync(new() { Path = "A.png" });
await page.Keyboard.PressAsync("ArrowLeft");
await page.ScreenshotAsync(new() { Path = "ArrowLeft.png" });
await page.Keyboard.PressAsync("Shift+O");
await page.ScreenshotAsync(new() { Path = "O.png" });
await browser.CloseAsync();
```
```

----------------------------------------

TITLE: Focusing Tests with test.only in Playwright
DESCRIPTION: Shows how to focus specific tests using test.only() so that only those tests run in the entire project.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-annotations-js.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
test.only('focus this test', async ({ page }) => {
  // Run only focused tests in the entire project.
});
```

----------------------------------------

TITLE: Running Playwright Test with Specific Title
DESCRIPTION: Execute a test with a specific title using the -g flag followed by the test title.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
npx playwright test -g "add a todo item"
```

----------------------------------------

TITLE: Asserting Page Screenshot with Playwright TypeScript
DESCRIPTION: Asserts that the page matches a screenshot. This assertion automatically retries until the condition is met or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_28

LANGUAGE: TypeScript
CODE:
```
await expect(page).toHaveScreenshot()
```

----------------------------------------

TITLE: Setting Viewport in Playwright Test
DESCRIPTION: Configures the viewport size for tests using the TestOptions.viewport property in the Playwright configuration file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_35

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    viewport: { width: 100, height: 100 },
  },
});
```

----------------------------------------

TITLE: Modifying API Responses in Python (Sync)
DESCRIPTION: This Python synchronous example demonstrates fetching an API response, adding a new fruit to the JSON data, and fulfilling the route with the modified response. It uses synchronous methods to intercept the API call, transform the data, and then verify the modified content appears on the page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
def test_gets_the_json_from_api_and_adds_a_new_fruit(page: Page):
    def handle(route: Route):
        response = route.fetch()
        json = response.json()
        json.append({ "name": "Loquat", "id": 100})
        # Fulfill using the original response, while patching the response body
        # with the given JSON object.
        route.fulfill(response=response, json=json)

    page.route("https://demo.playwright.dev/api-mocking/api/v1/fruits", handle)

    # Go to the page
    page.goto("https://demo.playwright.dev/api-mocking")

    # Assert that the new fruit is visible
    expect(page.get_by_text("Loquat", exact=True)).to_be_visible()
```

----------------------------------------

TITLE: Parameterizing Tests with forEach Loop in JavaScript
DESCRIPTION: This snippet demonstrates how to create parameterized tests using a forEach loop. It iterates over an array of test cases, creating a unique test for each set of parameters.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
[
  { name: 'Alice', expected: 'Hello, Alice!' },
  { name: 'Bob', expected: 'Hello, Bob!' },
  { name: 'Charlie', expected: 'Hello, Charlie!' },
].forEach(({ name, expected }) => {
  // You can also do it with test.describe() or with multiple tests as long the test name is unique.
  test(`testing with ${name}`, async ({ page }) => {
    await page.goto(`https://example.com/greet?name=${name}`);
    await expect(page.getByRole('heading')).toHaveText(expected);
  });
});
```

----------------------------------------

TITLE: Fetching and Modifying API Response in Python (Async)
DESCRIPTION: Shows how to fetch an API response, modify its JSON content, and then fulfill the route with the modified response using Playwright in Python with async/await syntax. This example adds a new breed to the dog API response.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_23

LANGUAGE: python
CODE:
```
async def handle(route):
    response = await route.fetch()
    json = await response.json()
    json["message"]["big_red_dog"] = []
    await route.fulfill(response=response, json=json)

await page.route("https://dog.ceo/api/breeds/list/all", handle)
```

----------------------------------------

TITLE: Overriding Playwright storageState Fixture for Authentication
DESCRIPTION: Provides an example of overriding the `storageState` fixture to provide custom authentication data, such as a cookie obtained from an external function. This allows tests to start in an authenticated state.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
import { test as base } from '@playwright/test';

export const test = base.extend({
  storageState: async ({}, use) => {
    const cookie = await getAuthCookie();
    await use({ cookies: [cookie] });
  },
});
```

----------------------------------------

TITLE: Creating an Automatic Fixture in Playwright Test (JS/TS)
DESCRIPTION: This example illustrates how to create an automatic fixture (`saveLogs`) using the `{ auto: true }` option. Automatic fixtures run for every test or worker without being explicitly listed. The snippet shows how to use the `testInfo` object to check test status and attach debug logs to the test report upon failure.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
import debug from 'debug';
import fs from 'fs';
import { test as base } from '@playwright/test';

export const test = base.extend<{ saveLogs: void }>( {
  saveLogs: [async ({}, use, testInfo) => {
    // Collecting logs during the test.
    const logs = [];
    debug.log = (...args) => logs.push(args.map(String).join(''));
    debug.enable('myserver');

    await use();

    // After the test we can check whether the test passed or failed.
    if (testInfo.status !== testInfo.expectedStatus) {
      // outputPath() API guarantees a unique file name.
      const logFile = testInfo.outputPath('logs.txt');
      await fs.promises.writeFile(logFile, logs.join('\n'), 'utf8');
      testInfo.attachments.push({ name: 'logs', contentType: 'text/plain', path: logFile });
    }
  }, { auto: true }],
});
export { expect } from '@playwright/test';
```

----------------------------------------

TITLE: Integrating API Setup in Browser-based Playwright Tests
DESCRIPTION: Describes integrating API requests into Playwright browser tests. It reuses a request context to create an issue, navigate the browser to the issues page, and validate the new issue. Requires Playwright and a GitHub token.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-js.md#2025-04-22_snippet_5

LANGUAGE: JavaScript
CODE:
```
import { test, expect } from '@playwright/test';

const REPO = 'test-repo-1';
const USER = 'github-username';

// Request context is reused by all tests in the file.
let apiContext;

test.beforeAll(async ({ playwright }) => {
  apiContext = await playwright.request.newContext({
    // All requests we send go to this API endpoint.
    baseURL: 'https://api.github.com',
    extraHTTPHeaders: {
      // We set this header per GitHub guidelines.
      'Accept': 'application/vnd.github.v3+json',
      // Add authorization token to all requests.
      // Assuming personal access token available in the environment.
      'Authorization': `token ${process.env.API_TOKEN}`,
    },
  });
});

test.afterAll(async ({ }) => {
  // Dispose all responses.
  await apiContext.dispose();
});

test('last created issue should be first in the list', async ({ page }) => {
  const newIssue = await apiContext.post(`/repos/${USER}/${REPO}/issues`, {
    data: {
      title: '[Feature] request 1',
    }
  });
  expect(newIssue.ok()).toBeTruthy();

  await page.goto(`https://github.com/${USER}/${REPO}/issues`);
  const firstIssue = page.locator(`a[data-hovercard-type='issue']`).first();
  await expect(firstIssue).toHaveText('[Feature] request 1');
});
```

----------------------------------------

TITLE: Load State Configuration for Navigation Waiting
DESCRIPTION: Defines which page load state to wait for. Supports load, domcontentloaded, or networkidle states.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_91

LANGUAGE: javascript
CODE:
```
- `state` ?<[LoadState]<"load"|"domcontentloaded"|"networkidle">>
```

----------------------------------------

TITLE: Combining Locators via Logical 'And' in Playwright Python (Async)
DESCRIPTION: Demonstrates use of the `and_` method in async Python Playwright to combine two locators, selecting a button with a specific title. Returns a locator instance representing the intersection of the given locators.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_17

LANGUAGE: Python
CODE:
```
button = page.get_by_role("button").and_(page.getByTitle("Subscribe"))
```

----------------------------------------

TITLE: Defining Selector for Playwright Query Operations
DESCRIPTION: Defines the `selector` string parameter used in various Playwright methods to query for DOM elements based on a CSS or other supported selector syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_25

LANGUAGE: markdown
CODE:
```
- `selector` <[string]>
```

----------------------------------------

TITLE: Modifying Network Requests in C#
DESCRIPTION: Demonstrates how to modify outgoing network requests in C#. Examples include deleting headers from requests and changing the HTTP method to POST.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_21

LANGUAGE: csharp
CODE:
```
// Delete header
await page.RouteAsync("**/*", async route => {
    var headers = new Dictionary<string, string>(route.Request.Headers.ToDictionary(x => x.Key, x => x.Value));
    headers.Remove("X-Secret");
    await route.ContinueAsync(new() { Headers = headers });
});

// Continue requests as POST.
await Page.RouteAsync("**/*", async route => await route.ContinueAsync(new() { Method = "POST" }));
```

----------------------------------------

TITLE: Negating Playwright Assertions (JS)
DESCRIPTION: Demonstrates how to negate Playwright assertions using the `.not` property to check for the opposite condition. Shows examples with `toEqual` and `toContainText`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_32

LANGUAGE: JavaScript
CODE:
```
expect(value).not.toEqual(0);
await expect(locator).not.toContainText('some text');
```

----------------------------------------

TITLE: Handling Newsletter Dialog with Locator Handler in JavaScript
DESCRIPTION: Sets up a locator handler to automatically close a newsletter signup dialog when it appears, allowing tests to continue without interruption. The handler activates when text matching 'Sign up to the newsletter' is detected on the page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_76

LANGUAGE: javascript
CODE:
```
// Setup the handler.
await page.addLocatorHandler(page.getByText('Sign up to the newsletter'), async () => {
  await page.getByRole('button', { name: 'No thanks' }).click();
});

// Write the test as usual.
await page.goto('https://example.com');
await page.getByRole('button', { name: 'Start here' }).click();
```

----------------------------------------

TITLE: Handling Failed Requests with Playwright Request Event Listener (Multi-Language)
DESCRIPTION: Demonstrates how to subscribe to the 'requestfailed' event on a Playwright Page. When a request fails, the provided callback function is executed, logging the URL of the failed request and the associated error information obtained via the `request.failure()` method.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
```js
page.on('requestfailed', request => {
  console.log(request.url() + ' ' + request.failure().errorText);
});
```
```

LANGUAGE: java
CODE:
```
```java
page.onRequestFailed(request -> {
  System.out.println(request.url() + " " + request.failure());
});
```
```

LANGUAGE: python
CODE:
```
```py
page.on("requestfailed", lambda request: print(request.url + " " + request.failure))
```
```

LANGUAGE: csharp
CODE:
```
```csharp
page.RequestFailed += (_, request) =>
{
    Console.WriteLine(request.Failure);
};
```
```

----------------------------------------

TITLE: Generated Playwright C# Test with Assertions
DESCRIPTION: An example of a Playwright test generated by the Test Generator, showcasing navigation (`GotoAsync`, `ClickAsync`), element interaction (`GetByRole`, `GetByLabel`, `GetByPlaceholder`, `FillAsync`), and assertions (`Expect`, `ToContainTextAsync`, `ToBeVisibleAsync`, `ToHaveValueAsync`).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_22

LANGUAGE: csharp
CODE:
```
await Page.GotoAsync("https://playwright.dev/");
await Page.GetByRole(AriaRole.Link, new() { Name = "Get started" }).ClickAsync();
await Expect(Page.GetByLabel("Breadcrumbs").GetByRole(AriaRole.List)).ToContainTextAsync("Installation");
await Expect(Page.GetByLabel("Search")).ToBeVisibleAsync();
await Page.GetByLabel("Search").ClickAsync();
await Page.GetByPlaceholder("Search docs").FillAsync("locator");
await Expect(Page.GetByPlaceholder("Search docs")).ToHaveValueAsync("locator");
```

----------------------------------------

TITLE: Create and Use a Custom Test Fixture for AxeBuilder in TypeScript
DESCRIPTION: Shows how to extend base test with a custom fixture that configures AxeBuilder with common tags and exclusion patterns in TypeScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_8

LANGUAGE: TypeScript
CODE:
```
import { test as base } from '@playwright/test';
import AxeBuilder from '@axe-core/playwright';

type AxeFixture = {
  makeAxeBuilder: () => AxeBuilder;
};

// Extend base test by providing "makeAxeBuilder"
//
// This new "test" can be used in multiple test files, and each of them will get
// a consistently configured AxeBuilder instance.
export const test = base.extend<AxeFixture>({
  makeAxeBuilder: async ({ page }, use) => {
    const makeAxeBuilder = () => new AxeBuilder({ page })
        .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])
        .exclude('#commonly-reused-element-with-known-issue');

    await use(makeAxeBuilder);
  }
});
export { expect } from '@playwright/test';
```

----------------------------------------

TITLE: Running Playwright Tests in Headed Mode (Bash)
DESCRIPTION: Command to run Playwright tests in headed mode, opening a browser window for each test, using Bash.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_1

LANGUAGE: csharp
CODE:
```
HEADED=1 dotnet test
```

----------------------------------------

TITLE: Enabling Verbose API Logs in Python
DESCRIPTION: Commands to enable verbose API logging in Playwright Python tests using the DEBUG environment variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_12

LANGUAGE: bash
CODE:
```
DEBUG=pw:api pytest -s
```

LANGUAGE: batch
CODE:
```
set DEBUG=pw:api
pytest -s
```

LANGUAGE: powershell
CODE:
```
$env:DEBUG="pw:api"
pytest -s
```

----------------------------------------

TITLE: Reusing Authentication State Across API and Browser Contexts with Playwright in Java
DESCRIPTION: This code snippet shows how to retrieve authentication (storage) state from an authenticated Playwright APIRequestContext and reuse it in a new browser context, enabling seamless cross-context authentication. It requires Playwright for Java and a browser instance. Parameters include credentials for HTTP authentication, and the storage state string is transferred between API and browser. This approach facilitates tests that require a pre-authenticated state across both API and UI automation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-java.md#2025-04-22_snippet_6

LANGUAGE: java
CODE:
```
APIRequestContext requestContext = playwright.request().newContext(
  new APIRequest.NewContextOptions().setHttpCredentials("user", "passwd"));
requestContext.get("https://api.example.com/login");
// Save storage state into a variable.
String state = requestContext.storageState();

// Create a new context with the saved storage state.
BrowserContext context = browser.newContext(new Browser.NewContextOptions().setStorageState(state));

```

----------------------------------------

TITLE: Running tests on different browsers using Playwright for JavaScript
DESCRIPTION: This snippet is a configuration file to setup multiple test projects using Playwright for running tests across various browsers and devices. Each project specifies a different browser or device configuration. No dependencies are specifically required beyond Playwright itself.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_6

LANGUAGE: js
CODE:
```
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  projects: [
    /* Test against desktop browsers */
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
    },
    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
    },
    /* Test against mobile viewports. */
    {
      name: 'Mobile Chrome',
      use: { ...devices['Pixel 5'] },
    },
    {
      name: 'Mobile Safari',
      use: { ...devices['iPhone 12'] },
    },
    /* Test against branded browsers. */
    {
      name: 'Google Chrome',
      use: { ...devices['Desktop Chrome'], channel: 'chrome' }, // or 'chrome-beta'
    },
    {
      name: 'Microsoft Edge',
      use: { ...devices['Desktop Edge'], channel: 'msedge' }, // or 'msedge-dev'
    },
  ],
});
```

----------------------------------------

TITLE: Running Playwright Tests via yarn - Bash
DESCRIPTION: Executes Playwright test suites through yarn, running them across all enabled browsers using default settings. Requires a Playwright setup and at least one test file. Provides logs and results in the terminal and runs tests headlessly unless otherwise configured.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
yarn playwright test
```

----------------------------------------

TITLE: Using to_be_ok assertion with Python Sync
DESCRIPTION: Usage example of the to_be_ok method which ensures the response status code is within 200-299 range in Python sync API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponseassertions.md#2025-04-22_snippet_9

LANGUAGE: python
CODE:
```
import re
from playwright.sync_api import expect

# ...
expect(response).to_be_ok()
```

----------------------------------------

TITLE: Using SearchPage in Python Async Tests
DESCRIPTION: Example of how to use the asynchronous SearchPage class in Python tests. It shows how to initialize the page object with a browser page and use it to navigate and search asynchronously.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_9

LANGUAGE: python
CODE:
```
from models.search import SearchPage

# in the test
page = await browser.new_page()
search_page = SearchPage(page)
await search_page.navigate()
await search_page.search("search query")
```

----------------------------------------

TITLE: Waiting for Response in Python
DESCRIPTION: Demonstrates Python implementations for waiting on HTTP responses using both async and sync patterns. Shows usage with URL matching and lambda predicates.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_142

LANGUAGE: python
CODE:
```
async with page.expect_response("https://example.com/resource") as response_info:
    await page.get_by_text("trigger response").click()
response = await response_info.value
return response.ok

# or with a lambda
async with page.expect_response(lambda response: response.url == "https://example.com" and response.status == 200 and response.request.method == "get") as response_info:
    await page.get_by_text("trigger response").click()
response = await response_info.value
return response.ok
```

LANGUAGE: python
CODE:
```
with page.expect_response("https://example.com/resource") as response_info:
    page.get_by_text("trigger response").click()
response = response_info.value
return response.ok

# or with a lambda
with page.expect_response(lambda response: response.url == "https://example.com" and response.status == 200 and response.request.method == "get") as response_info:
    page.get_by_text("trigger response").click()
response = response_info.value
return response.ok
```

----------------------------------------

TITLE: Waiting for Load State After Button Click in JavaScript
DESCRIPTION: Demonstrates how to wait for a page to reach the 'load' state after a button click in JavaScript. The method resolves after the 'load' event is fired.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_120

LANGUAGE: javascript
CODE:
```
await page.getByRole('button').click(); // Click triggers navigation.
await page.waitForLoadState(); // The promise resolves after 'load' event.
```

----------------------------------------

TITLE: Testing GitHub API Workflows with Playwright and JUnit in Java
DESCRIPTION: This snippet provides a complete JUnit-based test suite for GitHub repository and issue workflows using Playwright's Java API. It manages test lifecycle with @BeforeAll and @AfterAll, creates and deletes a test repository, and defines tests to create and validate issues through API calls. Dependencies include Playwright for Java, Gson for JSON parsing, JUnit 5 for assertions, and valid GitHub credentials in environment variables. Inputs are environment variables for user/token, outputs are created repositories and issues, and constraints include correct environment setup and network access to GitHub.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-java.md#2025-04-22_snippet_3

LANGUAGE: java
CODE:
```
package org.example;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.microsoft.playwright.APIRequest;
import com.microsoft.playwright.APIRequestContext;
import com.microsoft.playwright.APIResponse;
import com.microsoft.playwright.Playwright;
import com.microsoft.playwright.options.RequestOptions;
import org.junit.jupiter.api.*;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class TestGitHubAPI {
  private static final String REPO = "test-repo-2";
  private static final String USER = System.getenv("GITHUB_USER");
  private static final String API_TOKEN = System.getenv("GITHUB_API_TOKEN");

  private Playwright playwright;
  private APIRequestContext request;

  void createPlaywright() {
    playwright = Playwright.create();
  }

  void createAPIRequestContext() {
    Map<String, String> headers = new HashMap<>();
    // We set this header per GitHub guidelines.
    headers.put("Accept", "application/vnd.github.v3+json");
    // Add authorization token to all requests.
    // Assuming personal access token available in the environment.
    headers.put("Authorization", "token " + API_TOKEN);

    request = playwright.request().newContext(new APIRequest.NewContextOptions()
      // All requests we send go to this API endpoint.
      .setBaseURL("https://api.github.com")
      .setExtraHTTPHeaders(headers));
  }

  void createTestRepository() {
    APIResponse newRepo = request.post("/user/repos",
      RequestOptions.create().setData(Collections.singletonMap("name", REPO)));
    assertTrue(newRepo.ok(), newRepo.text());
  }

  @BeforeAll
  void beforeAll() {
    createPlaywright();
    createAPIRequestContext();
    createTestRepository();
  }

  void deleteTestRepository() {
    if (request != null) {
      APIResponse deletedRepo = request.delete("/repos/" + USER + "/" + REPO);
      assertTrue(deletedRepo.ok());
    }
  }

  void disposeAPIRequestContext() {
    if (request != null) {
      request.dispose();
      request = null;
    }
  }

  void closePlaywright() {
    if (playwright != null) {
      playwright.close();
      playwright = null;
    }
  }

  @AfterAll
  void afterAll() {
    deleteTestRepository();
    disposeAPIRequestContext();
    closePlaywright();
  }

  @Test
  void shouldCreateBugReport() {
    Map<String, String> data = new HashMap<>();
    data.put("title", "[Bug] report 1");
    data.put("body", "Bug description");
    APIResponse newIssue = request.post("/repos/" + USER + "/" + REPO + "/issues",
      RequestOptions.create().setData(data));
    assertTrue(newIssue.ok());

    APIResponse issues = request.get("/repos/" + USER + "/" + REPO + "/issues");
    assertTrue(issues.ok());
    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);
    JsonObject issue = null;
    for (JsonElement item : json) {
      JsonObject itemObj = item.getAsJsonObject();
      if (!itemObj.has("title")) {
        continue;
      }
      if ("[Bug] report 1".equals(itemObj.get("title").getAsString())) {
        issue = itemObj;
        break;
      }
    }
    assertNotNull(issue);
    assertEquals("Bug description", issue.get("body").getAsString(), issue.toString());
  }

  @Test
  void shouldCreateFeatureRequest() {
    Map<String, String> data = new HashMap<>();
    data.put("title", "[Feature] request 1");
    data.put("body", "Feature description");
    APIResponse newIssue = request.post("/repos/" + USER + "/" + REPO + "/issues",
      RequestOptions.create().setData(data));
    assertTrue(newIssue.ok());

    APIResponse issues = request.get("/repos/" + USER + "/" + REPO + "/issues");
    assertTrue(issues.ok());
    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);
    JsonObject issue = null;
    for (JsonElement item : json) {
      JsonObject itemObj = item.getAsJsonObject();
      if (!itemObj.has("title")) {
        continue;
      }
      if ("[Feature] request 1".equals(itemObj.get("title").getAsString())) {
        issue = itemObj;
        break;
      }
    }
    assertNotNull(issue);
    assertEquals("Feature description", issue.get("body").getAsString(), issue.toString());
  }
}

```

----------------------------------------

TITLE: Waiting for a Popup Window in Playwright (Java)
DESCRIPTION: Demonstrates waiting for a popup window using `page.waitForPopup` in Playwright for Java. This method accepts a lambda expression containing the code (`page.getByText(...).click()`) expected to open the popup. It returns the `Page` object for the newly opened popup window.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_6

LANGUAGE: java
CODE:
```
```java
// The callback lambda defines scope of the code that is expected to
// create popup window.
Page popup = page.waitForPopup(() -> {
  page.getByText("open the popup").click();
});
popup.navigate("https://wikipedia.org");
```
```

----------------------------------------

TITLE: Implementing SearchPage in Python (Sync)
DESCRIPTION: Synchronous Python implementation of a SearchPage class for Playwright. It provides methods for page navigation and searching, demonstrating the page object model pattern with synchronous API in Python.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
class SearchPage:
    def __init__(self, page):
        self.page = page
        self.search_term_input = page.locator('[aria-label="Enter your search term"]')

    def navigate(self):
        self.page.goto("https://bing.com")

    def search(self, text):
        self.search_term_input.fill(text)
        self.search_term_input.press("Enter")
```

----------------------------------------

TITLE: Avoid Fragile Accessibility Snapshot Expectations in JavaScript
DESCRIPTION: Illustrates capturing a less fragile snapshot of accessibility scan results by using violation fingerprints rather than the entire violations array.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_6

LANGUAGE: JavaScript
CODE:
```
// Don't do this! This is fragile.
expect(accessibilityScanResults.violations).toMatchSnapshot();
```

LANGUAGE: JavaScript
CODE:
```
// This is less fragile than snapshotting the entire violations array.
expect(violationFingerprints(accessibilityScanResults)).toMatchSnapshot();

// my-test-utils.js
function violationFingerprints(accessibilityScanResults) {
  const violationFingerprints = accessibilityScanResults.violations.map(violation => ({
    rule: violation.id,
    // These are CSS selectors which uniquely identify each element with
    // a violation of the rule in question.
    targets: violation.nodes.map(node => node.target),
  }));

  return JSON.stringify(violationFingerprints, null, 2);
}
```

----------------------------------------

TITLE: Using Strict Mode with Page Click in Playwright Python
DESCRIPTION: Pass strict=true into your action calls to opt in. This will throw if you have more than one button!
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_48

LANGUAGE: Python
CODE:
```
page.click("button", strict=True)
```

----------------------------------------

TITLE: Waiting for Network Requests in Java
DESCRIPTION: Shows how to wait for specific network requests in Java using both URL matching and predicate functions. Useful for ensuring requests have been made before proceeding.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_136

LANGUAGE: java
CODE:
```
// Waits for the next request with the specified url
Request request = page.waitForRequest("https://example.com/resource", () -> {
  // Triggers the request
  page.getByText("trigger request").click();
});

// Waits for the next request matching some conditions
Request request = page.waitForRequest(request -> "https://example.com".equals(request.url()) && "GET".equals(request.method()), () -> {
  // Triggers the request
  page.getByText("trigger request").click();
});
```

----------------------------------------

TITLE: Modifying API Responses in Java
DESCRIPTION: This Java example demonstrates intercepting a fruit API response, parsing and modifying the JSON by adding a new fruit, and fulfilling the route with the modified data. It shows how to handle the original request, transform the response body using Gson, and verify the added content appears on the page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_9

LANGUAGE: java
CODE:
```
page.route("*/**/api/v1/fruits", route -> {
  Response response = route.fetch();
  byte[] json = response.body();
  JsonObject parsed = new Gson().fromJson(new String(json), JsonObject.class);
  parsed.add(new JsonObject().add("name", "Loquat").add("id", 100));
  // Fulfill using the original response, while patching the response body
  // with the given JSON object.
  route.fulfill(new Route.FulfillOptions().setResponse(response).setBody(parsed.toString()));
});

// Go to the page
page.navigate("https://demo.playwright.dev/api-mocking");

// Assert that the Loquat fruit is visible
assertThat(page.getByText("Loquat", new Page.GetByTextOptions().setExact(true))).isVisible();
```

----------------------------------------

TITLE: Verifying API Calls with Logging
DESCRIPTION: Shows how to track and verify API calls using exposed functions to log interactions between the page and the mock API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock-browser-js.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
test('log battery calls', async ({ page }) => {
  const log = [];
  // Expose function for pushing messages to the Node.js script.
  await page.exposeFunction('logCall', msg => log.push(msg));
  await page.addInitScript(() => {
    const mockBattery = {
      level: 0.75,
      charging: true,
      chargingTime: 1800,
      dischargingTime: Infinity,
      // Log addEventListener calls.
      addEventListener: (name, cb) => logCall(`addEventListener:${name}`)
    };
    // Override the method to always return mock battery info.
    window.navigator.getBattery = async () => {
      logCall('getBattery');
      return mockBattery;
    };
  });

  await page.goto('/');
  await expect(page.locator('.battery-percentage')).toHaveText('75%');

  // Compare actual calls with golden.
  expect(log).toEqual([
    'getBattery',
    'addEventListener:chargingchange',
    'addEventListener:levelchange'
  ]);
});
```

----------------------------------------

TITLE: Implement Global beforeAll/afterAll Hooks with Playwright Worker-Scoped Auto Fixtures - JS
DESCRIPTION: Explains how to create hooks that run once before and after all tests within each worker process globally. This is achieved by defining an auto fixture (`auto: true`) with `scope: 'worker'`, suitable for worker-level setup/teardown like logging worker start/stop.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_27

LANGUAGE: TypeScript
CODE:
```
import { test as base } from '@playwright/test';

export const test = base.extend<{}, { forEachWorker: void }>({
  forEachWorker: [async ({}, use) => {
    // This code runs before all the tests in the worker process.
    console.log(`Starting test worker ${test.info().workerIndex}`);
    await use();
    // This code runs after all the tests in the worker process.
    console.log(`Stopping test worker ${test.info().workerIndex}`);
  }, { scope: 'worker', auto: true }],  // automatically starts for every worker.
});
```

LANGUAGE: TypeScript
CODE:
```
import { test } from './fixtures';
import { expect } from '@playwright/test';

test('basic', async ({ }) => {
  // ...
});
```

----------------------------------------

TITLE: Capturing Element Screenshots in Playwright
DESCRIPTION: Examples of taking screenshots of specific DOM elements. This is useful when you need to capture only a particular part of the page identified by a CSS selector.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/screenshots.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
await page.locator('.header').screenshot({ path: 'screenshot.png' });
```

LANGUAGE: java
CODE:
```
page.locator(".header").screenshot(new Locator.ScreenshotOptions().setPath(Paths.get("screenshot.png")));
```

LANGUAGE: python
CODE:
```
await page.locator(".header").screenshot(path="screenshot.png")
```

LANGUAGE: python
CODE:
```
page.locator(".header").screenshot(path="screenshot.png")
```

LANGUAGE: csharp
CODE:
```
await page.Locator(".header").ScreenshotAsync(new() { Path = "screenshot.png" });
```

----------------------------------------

TITLE: Defining a Test Suite with Flaky Tests in Playwright
DESCRIPTION: This snippet demonstrates how to define a test suite with beforeAll and afterAll hooks, and multiple tests including a potentially flaky one. It showcases the structure of a typical Playwright test file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-retries-js.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { test } from '@playwright/test';

test.describe('suite', () => {
  test.beforeAll(async () => { /* ... */ });
  test('first good', async ({ page }) => { /* ... */ });
  test('second flaky', async ({ page }) => { /* ... */ });
  test('third good', async ({ page }) => { /* ... */ });
  test.afterAll(async () => { /* ... */ });
});
```

----------------------------------------

TITLE: Using Multiple Browser Contexts in Playwright Tests
DESCRIPTION: Example of creating multiple browser contexts to simulate different users within a single test using the new_context fixture.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
from playwright.sync_api import Page, BrowserContext
from pytest_playwright.pytest_playwright import CreateContextCallback

def test_foo(page: Page, new_context: CreateContextCallback) -> None:
    page.goto("https://example.com")
    context = new_context()
    page2 = context.new_page()
    # page and page2 are in different contexts
```

----------------------------------------

TITLE: Simulating Keyboard Input with Shift Modifier in Playwright (Python Async)
DESCRIPTION: This asynchronous Python snippet demonstrates how to use the Playwright Keyboard API to simulate complex keyboard interactions. It types initial text, moves the cursor, holds the 'Shift' key down, moves the cursor again (selecting text), releases 'Shift', and presses 'Backspace' to delete the selected text. It utilizes the `page.keyboard` object and its asynchronous methods `type`, `press`, `down`, and `up`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
```python async
await page.keyboard.type("Hello World!")
await page.keyboard.press("ArrowLeft")
await page.keyboard.down("Shift")
for i in range(6):
    await page.keyboard.press("ArrowLeft")
await page.keyboard.up("Shift")
await page.keyboard.press("Backspace")
# result text will end up saying "Hello!"
```
```

----------------------------------------

TITLE: Using toBeOK assertion with JavaScript
DESCRIPTION: Usage example of the toBeOK method which ensures the response status code is within 200-299 range in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponseassertions.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
await expect(response).toBeOK();
```

----------------------------------------

TITLE: Debugging a Specific Playwright Test File/Line (Bash)
DESCRIPTION: Illustrates how to debug a specific test by providing the test filename and line number to the Playwright CLI, combined with the --debug flag. Works for NPM, Yarn, and PNPM setups and requires Playwright to be installed. Main use case: interactively debug targeted test cases. Inputs: test file path and line number. Output: inspector session focused on specified test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
npx playwright test example.spec.ts:9 --debug
```

LANGUAGE: bash
CODE:
```
yarn playwright test example.spec.ts:9 --debug
```

LANGUAGE: bash
CODE:
```
pnpm exec playwright test example.spec.ts:9 --debug
```

----------------------------------------

TITLE: Test Isolation Example
DESCRIPTION: Demonstrates how to set up test isolation in Playwright tests using different test frameworks.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-csharp.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
using System.Threading.Tasks;
using Microsoft.Playwright.NUnit;
using NUnit.Framework;

namespace PlaywrightTests;

[Parallelizable(ParallelScope.Self)]
[TestFixture]
public class ExampleTest : PageTest
{
    [Test]
    public async Task BasicTest()
    {
        await Page.GotoAsync("https://playwright.dev");
    }
}
```

----------------------------------------

TITLE: Opening Playwright HTML Report via pnpm - Bash
DESCRIPTION: Invokes the Playwright HTML test report using pnpm, enabling detailed review of browser test results, steps, and errors. The HTML report file must exist from a previous test run. Useful for sharing test outcomes with the team.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
pnpm exec playwright show-report
```

----------------------------------------

TITLE: Opening Playwright Trace with CLI (Maven)
DESCRIPTION: Provides the Maven command to execute the Playwright CLI's `show-trace` command. This command is used to open and view a previously recorded trace file (`trace.zip`) in the Playwright Trace Viewer GUI.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_58

LANGUAGE: sh
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="show-trace trace.zip"
```

----------------------------------------

TITLE: Reusing Authenticated State Between Playwright Contexts
DESCRIPTION: Demonstrates how to save an authenticated state from an API context and reuse it in a browser context using Playwright. Useful for tests that require authentication continuity across different testing contexts.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-js.md#2025-04-22_snippet_7

LANGUAGE: JavaScript
CODE:
```
const requestContext = await request.newContext({
  httpCredentials: {
    username: 'user',
    password: 'passwd'
  }
});
await requestContext.get(`https://api.example.com/login`);
// Save storage state into the file.
await requestContext.storageState({ path: 'state.json' });

// Create a new context with the saved storage state.
const context = await browser.newContext({ storageState: 'state.json' });
```

----------------------------------------

TITLE: Opening Playwright UI Mode
DESCRIPTION: Command to launch Playwright's UI Mode for test exploration and debugging
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-ui-mode-js.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx playwright test --ui
```

----------------------------------------

TITLE: Handling File Downloads in Playwright JavaScript
DESCRIPTION: Demonstrates how to initiate and handle file downloads in a Playwright script using JavaScript by waiting for download events and saving files. Requires Playwright and a running browser instance with a page context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/downloads.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
// Start waiting for download before clicking. Note no await.
const downloadPromise = page.waitForEvent('download');
await page.getByText('Download file').click();
const download = await downloadPromise;

// Wait for the download process to complete and save the downloaded file somewhere.
await download.saveAs('/path/to/save/at/' + download.suggestedFilename());
```

LANGUAGE: javascript
CODE:
```
page.on('download', download => download.path().then(console.log));
```

----------------------------------------

TITLE: Fulfilling Routes with Custom Responses in Python (Sync)
DESCRIPTION: Shows how to fulfill routes with custom responses using Playwright in Python with synchronous syntax. This example demonstrates responding with a 404 status code and a custom message for all requests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_29

LANGUAGE: python
CODE:
```
page.route("**/*", lambda route: route.fulfill(
    status=404,
    content_type="text/plain",
    body="not found!"))
```

----------------------------------------

TITLE: Accepting Standard Dialogs with Playwright (JavaScript)
DESCRIPTION: Registers a handler for the 'dialog' event on a Playwright Page object. The handler automatically accepts any dialog (`alert`, `confirm`, `prompt`) that appears. This listener must be registered *before* the action that triggers the dialog (e.g., clicking a button).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
```js
page.on('dialog', dialog => dialog.accept());
await page.getByRole('button').click();
```
```

----------------------------------------

TITLE: Authenticate with API Request in Playwright - JavaScript
DESCRIPTION: The JavaScript example uses Playwright to authenticate through API requests. It captures the authenticated state in a JSON file for reuse, offering an efficient alternative to interacting with a web page UI in tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_15

LANGUAGE: js
CODE:
```
import { test as setup } from '@playwright/test';

const authFile = 'playwright/.auth/user.json';

setup('authenticate', async ({ request }) => {
  // Send authentication request. Replace with your own.
  await request.post('https://github.com/login', {
    form: {
      'user': 'user',
      'password': 'password'
    }
  });
  await request.storageState({ path: authFile });
});

```

----------------------------------------

TITLE: Running Playwright Tests with Pytest Bash
DESCRIPTION: The snippet illustrates how to run Python Playwright tests using Pytest, suitable for CI environments. Running `pytest` executes the test suite, useful for continuous checks and verification of software functionality.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
pytest
```

----------------------------------------

TITLE: Running Playwright Codegen from Command Line - Java - Bash
DESCRIPTION: This Java-oriented command uses Maven to execute Playwright's CLI, specifying the main CLI class and passing arguments to trigger code generation for a testable site. Requires Maven and the Java version of Playwright included as a dependency in the project. The URL provided is the target web application for test recording. Launches a browser and the Playwright Inspector in a Java runtime context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"codegen demo.playwright.dev/todomvc\"
```

----------------------------------------

TITLE: Setting Checkbox State in Playwright with C#
DESCRIPTION: Demonstrates how to set the checked state of a checkbox element using the SetCheckedAsync method in C#. This example sets the checkbox to checked (true).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_88

LANGUAGE: csharp
CODE:
```
await page.GetByRole(AriaRole.Checkbox).SetCheckedAsync(true);
```

----------------------------------------

TITLE: Using Frame Locator with iframes - Multiple Languages
DESCRIPTION: Shows how to locate and interact with elements inside an iframe using frame locator across different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_29

LANGUAGE: javascript
CODE:
```
const locator = frame.frameLocator('#my-iframe').getByText('Submit');
await locator.click();
```

LANGUAGE: java
CODE:
```
Locator locator = frame.frameLocator("#my-iframe").getByText("Submit");
locator.click();
```

LANGUAGE: python
CODE:
```
locator = frame.frame_locator("#my-iframe").get_by_text("Submit")
await locator.click()
```

LANGUAGE: csharp
CODE:
```
var locator = frame.FrameLocator("#my-iframe").GetByText("Submit");
await locator.ClickAsync();
```

----------------------------------------

TITLE: Configuring Azure Pipelines for Playwright Tests (Python)
DESCRIPTION: This YAML configuration sets up Azure Pipelines to run Playwright tests in a containerized environment for a Python project. It uses the official Playwright Python Docker image, sets up Python 3.11, installs dependencies, and runs the tests using pytest.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_29

LANGUAGE: yml
CODE:
```
trigger:
- main

pool:
  vmImage: ubuntu-latest
container: mcr.microsoft.com/playwright/python:v%%VERSION%%-noble

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.11'
  displayName: 'Use Python'

- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Install dependencies'
- script: pytest
  displayName: 'Run tests'
```

----------------------------------------

TITLE: Configure Basic Playwright Test Options (TypeScript)
DESCRIPTION: This snippet demonstrates how to set fundamental options like the base URL for navigation and the storage state for authentication within the Playwright test configuration file. These settings apply to all tests using this configuration.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    // Base URL to use in actions like `await page.goto('/')`.
    baseURL: 'http://localhost:3000',

    // Populates context with given storage state.
    storageState: 'state.json',
  },
});
```

----------------------------------------

TITLE: Testing Sign-in Flow with Playwright in JavaScript
DESCRIPTION: Equivalent example showing how to test a sign-in page component using Playwright Test with React, demonstrating the migration path from Testing Library
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/testing-library-js.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
const { test, expect } = require('@playwright/experimental-ct-react');

test('sign in', async ({ mount }) => {
  // Setup the page.
  const component = await mount(<SignInPage />);

  // Perform actions.
  await component.getByLabel('Username').fill('John');
  await component.getByLabel('Password').fill('secret');
  await component.getByRole('button', { name: 'Sign in' }).click();

  // Verify signed in state by waiting until "Welcome" message appears.
  await expect(component.getByText('Welcome, John')).toBeVisible();
});
```

----------------------------------------

TITLE: Snapshot Assertions Without Explicit Names Using SnapshotAssertions.toMatchSnapshot (JavaScript)
DESCRIPTION: These examples cover using toMatchSnapshot without passing a file name, letting Playwright derive the snapshot name from the test context. Options can be supplied for customizing maxDiffPixels and threshold or providing an explicit name within the options object. This style supports organizing and parameterizing snapshots in tests run under the Playwright test runner, helping automate pixel-perfect UI verification.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-snapshotassertions.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
// Basic usage and the file name is derived from the test name.
expect(await page.screenshot()).toMatchSnapshot();
```

LANGUAGE: js
CODE:
```
// Pass options to customize the snapshot comparison and have a generated name.
expect(await page.screenshot()).toMatchSnapshot({
  maxDiffPixels: 27, // allow no more than 27 different pixels.
});
```

LANGUAGE: js
CODE:
```
// Configure image matching threshold and snapshot name.
expect(await page.screenshot()).toMatchSnapshot({
  name: 'landing-page.png',
  threshold: 0.3,
});
```

----------------------------------------

TITLE: Catching TimeoutError in Playwright (Sync Python)
DESCRIPTION: This synchronous Python example uses `sync_playwright` to launch a Chromium browser and manage a page. It illustrates handling the `PlaywrightTimeoutError` (aliased from `playwright.sync_api.TimeoutError`) within a try-except block when an element click operation on 'Example' exceeds the specified 100ms timeout.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-timeouterror.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
```python sync
from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError

with sync_playwright() as p:
    browser = p.chromium.launch()
    page = browser.new_page()
    try:
      page.locator("text=Example").click(timeout=100)
    except PlaywrightTimeoutError:
      print("Timeout!")
    browser.close()
```
```

----------------------------------------

TITLE: Filter Locator by Text in Playwright Java
DESCRIPTION: Demonstrates how to filter a locator (e.g., 'li') based on the text it contains ('my item') using `Page.LocatorOptions().setHasText()`, and then locate and click a nested element ('button').
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_49

LANGUAGE: Java
CODE:
```
page.locator("li", new Page.LocatorOptions().setHasText("my item"))
    .locator("button").click();
```

----------------------------------------

TITLE: Key Press Example - Python
DESCRIPTION: Demonstrates keyboard input simulation using Playwright in Python with both async and sync implementations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_75

LANGUAGE: python
CODE:
```
page = browser.new_page()
page.goto("https://keycode.info")
page.press("body", "A")
page.screenshot(path="a.png")
page.press("body", "ArrowLeft")
page.screenshot(path="arrow_left.png")
page.press("body", "Shift+O")
page.screenshot(path="o.png")
browser.close()
```

----------------------------------------

TITLE: Querying All Text Contents with Playwright C#
DESCRIPTION: Fetches the textContent of all 'link' role nodes using Playwright for C#. The asynchronous result is a list of strings, each representing the text content of a matched node.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_14

LANGUAGE: C#
CODE:
```
var texts = await page.GetByRole(AriaRole.Link).AllTextContentsAsync();
```

----------------------------------------

TITLE: Attaching File from Disk with TestInfo in Playwright JS
DESCRIPTION: This snippet illustrates attaching a file located at a temporary path (tmpPath) to the test report using testInfo.attach. It specifies the attachment name and the file path. It relies on an external download helper function to obtain the file path.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfo.md#_snippet_2

LANGUAGE: js
CODE:
```
import { test, expect } from '@playwright/test';
import { download } from './my-custom-helpers';

test('basic test', async ({}, testInfo) => {
  const tmpPath = await download('a');
  await testInfo.attach('downloaded', { path: tmpPath });
});
```

----------------------------------------

TITLE: Extending Test Timeout in Playwright JS
DESCRIPTION: Shows how to use the `testInfo.setTimeout` method within a `beforeEach` hook to dynamically increase the timeout for tests. This is useful for scenarios where specific tests or groups of tests require more time than the default configuration. Requires the `testInfo` fixture.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfo.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.beforeEach(async ({ page }, testInfo) => {
  // Extend timeout for all tests running this hook by 30 seconds.
  testInfo.setTimeout(testInfo.timeout + 30000);
});
```

----------------------------------------

TITLE: Waiting for Load State After Button Click in C#
DESCRIPTION: Demonstrates how to wait for a page to reach the 'load' state after a button click in C#. The method resolves after the 'load' event is fired.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_124

LANGUAGE: csharp
CODE:
```
await page.GetByRole(AriaRole.Button).ClickAsync(); // Click triggers navigation.
await page.WaitForLoadStateAsync(); // The promise resolves after 'load' event.
```

----------------------------------------

TITLE: Configuring Test Retries and Timeout with Test.describe.configure in JavaScript
DESCRIPTION: Shows how to configure retries and timeout for each test using test.describe.configure.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_17

LANGUAGE: javascript
CODE:
```
// Each test in the file will be retried twice and have a timeout of 20 seconds.
test.describe.configure({ retries: 2, timeout: 20_000 });
test('runs first', async ({ page }) => {});
test('runs second', async ({ page }) => {});
```

----------------------------------------

TITLE: Save and Restore Storage State with IndexedDB (Java)
DESCRIPTION: Provides a Java example demonstrating how to save the browser context's storage state, including IndexedDB content, to a file and then create a new browser context using the saved state file. Useful for preserving authentication.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_2

LANGUAGE: Java
CODE:
```
// Save storage state into the file. Make sure to include IndexedDB.
context.storageState(new BrowserContext.StorageStateOptions()
    .setPath(Paths.get("state.json"))
    .setIndexedDB(true));

// Create a new context with the saved storage state.
BrowserContext context = browser.newContext(new Browser.NewContextOptions()
    .setStorageStatePath(Paths.get("state.json")));
```

----------------------------------------

TITLE: Using Custom Playwright Fixtures in Tests and Hooks
DESCRIPTION: Shows how to use the custom `settingsPage` fixture in a `beforeEach` hook and the `todoPage` fixture in a test function by including them as arguments. Playwright automatically provides the fixture instances.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
import { test, expect } from './my-test';

test.beforeEach(async ({ settingsPage }) => {
  await settingsPage.switchToDarkMode();
});

test('basic test', async ({ todoPage, page }) => {
  await todoPage.addToDo('something nice');
  await expect(page.getByTestId('todo-title')).toContainText(['something nice']);
});
```

----------------------------------------

TITLE: Configuring GitHub Actions for Playwright Tests (Java/Maven)
DESCRIPTION: This YAML configuration sets up a GitHub Actions workflow for running Playwright tests in a Java project managed by Maven. Triggered by pushes and pull requests to main/master, it checks out the code, sets up Java 17 (Temurin distribution), builds the project and installs dependencies using `mvn install` (skipping tests during this phase), installs Playwright browsers via the Playwright CLI invoked through Maven's exec plugin, and finally runs the tests using `mvn test`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci-intro.md#2025-04-22_snippet_2

LANGUAGE: yml
CODE:
```
name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    - name: Build & Install
      run: mvn -B install -D skipTests --no-transfer-progress
    - name: Ensure browsers are installed
      run: mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install --with-deps"
    - name: Run tests
      run: mvn test

```

----------------------------------------

TITLE: Using Regex for Text Matching in Playwright
DESCRIPTION: Demonstrates how to use JavaScript-like regex for text matching in Playwright. This allows for more flexible text matching patterns.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_19

LANGUAGE: javascript
CODE:
```
await page.locator('text=/Log\\s*in/i').click();
```

LANGUAGE: java
CODE:
```
page.locator("text=/Log\\s*in/i").click();
```

LANGUAGE: python
CODE:
```
await page.locator("text=/Log\s*in/i").click()
```

LANGUAGE: csharp
CODE:
```
await page.Locator("text=/Log\\s*in/i").ClickAsync();
```

----------------------------------------

TITLE: Clicking Element by Role and Name in C#
DESCRIPTION: Demonstrates how to use a role selector in Playwright for .NET to locate and click a button element based on its ARIA role ("button") and accessible name ("log in"). This utilizes the new role selector feature.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_43

LANGUAGE: csharp
CODE:
```
// Click a button with accessible name "log in"
await page.Locator("role=button[name='log in']").ClickAsync();
```

----------------------------------------

TITLE: Using wait_for_selector across navigations in Python (async)
DESCRIPTION: This snippet demonstrates how to use the wait_for_selector method to wait for an image element across multiple page navigations in Python using async/await.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_146

LANGUAGE: python
CODE:
```
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = await chromium.launch()
    page = await browser.new_page()
    for current_url in ["https://google.com", "https://bbc.com"]:
        await page.goto(current_url, wait_until="domcontentloaded")
        element = await page.wait_for_selector("img")
        print("Loaded image: " + str(await element.get_attribute("src")))
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())
```

----------------------------------------

TITLE: Routing from HAR File in Playwright
DESCRIPTION: Example of using routeFromHAR to serve responses from a previously recorded HAR file. This allows mocking network responses based on recorded traffic.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_42

LANGUAGE: javascript
CODE:
```
await context.routeFromHAR('github.har.zip');
```

----------------------------------------

TITLE: Overriding Request Headers with Playwright Route.continue_ - Python (Async)
DESCRIPTION: Illustrates asynchronous header override in Playwright using Python. Requires Playwright's async API and a valid event loop. The route handler merges original headers, adds foo, removes bar, and calls await route.continue_ to send the modified request. Used with page.route helper. The 'Cookie' header is not overridable via this method.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
async def handle(route, request):
    # override headers
    headers = {
        **request.headers,
        "foo": "foo-value", # set "foo" header
        "bar": None # remove "bar" header
    }
    await route.continue_(headers=headers)

await page.route("**/*", handle)
```

----------------------------------------

TITLE: Global Setup/Teardown Configuration
DESCRIPTION: Basic configuration for global setup and teardown using configuration file options.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  globalSetup: require.resolve('./global-setup'),
  globalTeardown: require.resolve('./global-teardown'),
});
```

----------------------------------------

TITLE: Launching a Browser Using Playwright Python (Sync)
DESCRIPTION: Demonstrates synchronous usage of Playwright to launch a Chromium browser, open a webpage, and close the browser. Requires the 'playwright' Python package and sync API. The Playwright context manager manages resources automatically. No direct inputs; expected output is automated browsing actions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
from playwright.sync_api import sync_playwright, Playwright\n\ndef run(playwright: Playwright):\n    chromium = playwright.chromium\n    browser = chromium.launch()\n    page = browser.new_page()\n    page.goto(\"https://example.com\")\n    # other actions...\n    browser.close()\n\nwith sync_playwright() as playwright:\n    run(playwright)
```

----------------------------------------

TITLE: Waiting for a Specific Network Request in Playwright (Sync Python)
DESCRIPTION: Illustrates waiting for a specific network request using the `page.expect_request` synchronous context manager in Playwright for Python. The code within the `with` block (`page.goto`) is executed, and the context manager waits for a request matching the pattern ('**/*logo*.png'). The value of the context manager (`first.value`) is the `Request` object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
```python sync
with page.expect_request("**/*logo*.png") as first:
  page.goto("https://wikipedia.org")
print(first.value.url)
```
```

----------------------------------------

TITLE: Viewing Playwright HTML Report (Bash)
DESCRIPTION: Shows how to launch the Playwright HTML report, enabling users to review test results, traces, and other artifacts. Compatible with NPM, Yarn, and PNPM environments. Requires Playwright tests to have been executed and report artifacts to be present. Input: none. Output: starts local web server for the HTML report.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
npx playwright show-report
```

LANGUAGE: bash
CODE:
```
yarn playwright show-report
```

LANGUAGE: bash
CODE:
```
pnpm exec playwright show-report
```

----------------------------------------

TITLE: Asserting Element Editable State with Playwright TypeScript
DESCRIPTION: Asserts that the element located by the locator is editable. This assertion automatically retries until the element is editable or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toBeEditable()
```

----------------------------------------

TITLE: Using Negated PageAssertions in Java
DESCRIPTION: Example of using the .not() method to negate an assertion in Java, checking that a page URL doesn't contain 'error'. This demonstrates how to verify the absence of a pattern.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_6

LANGUAGE: java
CODE:
```
assertThat(page).not().hasURL("error");
```

----------------------------------------

TITLE: Mocking Network Requests in Playwright Tests (JavaScript)
DESCRIPTION: Demonstrates how to mock network requests by defining custom routes for a browser context or page. Includes examples of blocking CSS and image requests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.beforeEach(async ({ context }) => {
  // Block any css requests for each test in this file.
  await context.route(/.css$/, route => route.abort());
});

test('loads page without css', async ({ page }) => {
  await page.goto('https://playwright.dev');
  // ... test goes here
});
```

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('loads page without images', async ({ page }) => {
  // Block png and jpeg images.
  await page.route(/(png|jpeg)$/, route => route.abort());

  await page.goto('https://playwright.dev');
  // ... test goes here
});
```

----------------------------------------

TITLE: Waiting for URL Navigation in C#
DESCRIPTION: This snippet shows how to use Frame.WaitForURLAsync to wait for navigation to a specific URL after clicking a link in C#.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_54

LANGUAGE: csharp
CODE:
```
await frame.ClickAsync("a.delayed-navigation"); // clicking the link will indirectly cause a navigation
await frame.WaitForURLAsync("**/target.html");
```

----------------------------------------

TITLE: Using PlaywrightDevPage in JavaScript Tests
DESCRIPTION: Example of how to use the PlaywrightDevPage class in JavaScript tests. The code demonstrates importing the page object model and using it to navigate to the documentation and verify table of contents elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
const { PlaywrightDevPage } = require('./playwright-dev-page');

// In the test
const page = await browser.newPage();
await playwrightDev.goto();
await playwrightDev.getStarted();
await expect(playwrightDev.tocList).toHaveText([
  `How to install Playwright`,
  `What's Installed`,
  `How to run the example test`,
  `How to open the HTML test report`,
  `Write tests using web first assertions, page fixtures and locators`,
  `Run single test, multiple tests, headed mode`,
  `Generate tests with Codegen`,
  `See a trace of your tests`
]);
```

----------------------------------------

TITLE: Running Playwright Tests from Command Line
DESCRIPTION: Command to execute Playwright tests using the CLI runner, which will automatically run the tests across configured browsers.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_70

LANGUAGE: bash
CODE:
```
npx playwright test
```

----------------------------------------

TITLE: Asserting Locator Text Synchronously with Playwright in Python
DESCRIPTION: Provides an example of using `expect(locator).to_have_text()` in a synchronous Python test function with `playwright.sync_api` to check if the element identified by `.status` contains the text "Submitted" after a button interaction. Depends on the `playwright` Python package.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
```python sync
from playwright.sync_api import Page, expect

def test_status_becomes_submitted(page: Page) -> None:
    # ..
    page.get_by_role("button").click()
    expect(page.locator(".status")).to_have_text("Submitted")
```
```

----------------------------------------

TITLE: Waiting for and Saving Downloads in Playwright (C#)
DESCRIPTION: Presents the C# asynchronous approach. It starts the `page.WaitForDownloadAsync()` task *before* triggering the download with `page.GetByText(...).ClickAsync()`. It then awaits both the click and the download task completion. The file is saved using `download.SaveAsAsync()` and `download.SuggestedFilename`. Requires a Playwright `IPage` object and an element that initiates a download.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-download.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
// Start the task of waiting for the download before clicking
var waitForDownloadTask = page.WaitForDownloadAsync();
await page.GetByText("Download file").ClickAsync();
var download = await waitForDownloadTask;

// Wait for the download process to complete and save the downloaded file somewhere
await download.SaveAsAsync("/path/to/save/at/" + download.SuggestedFilename);
```

----------------------------------------

TITLE: Adding Tags to Tests in Playwright
DESCRIPTION: Shows two methods for tagging tests in Playwright: using the test details object or including tags in the test title. Tags can be used for filtering tests during execution.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('basic test', {
  tag: '@smoke',
}, async ({ page }) => {
  await page.goto('https://playwright.dev/');
  // ...
});

test('another test @smoke', async ({ page }) => {
  await page.goto('https://playwright.dev/');
  // ...
});
```

----------------------------------------

TITLE: Aborting Network Requests in Python (Sync)
DESCRIPTION: Demonstrates how to abort specific network requests in synchronous Python. Examples include aborting image requests and conditionally aborting requests based on resource type.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_25

LANGUAGE: python
CODE:
```
page.route("**/*.{png,jpg,jpeg}", lambda route: route.abort())

# Abort based on the request type
page.route("**/*", lambda route: route.abort() if route.request.resource_type == "image"  else route.continue_())
```

----------------------------------------

TITLE: Setting Timeout for Test Steps in Playwright v1.50
DESCRIPTION: Example showing how to set a timeout for an individual test step using the new timeout option.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
test('some test', async ({ page }) => {
  await test.step('a step', async () => {
    // This step can time out separately from the test
  }, { timeout: 1000 });
});
```

----------------------------------------

TITLE: Asserting Element Count using LocatorAssertions in Multiple Languages
DESCRIPTION: Examples of using toHaveCount/hasCount to verify that a locator resolves to an exact number of DOM nodes. This is useful for testing lists, tables, or other collections of elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_29

LANGUAGE: javascript
CODE:
```
const list = page.locator('list > .component');
await expect(list).toHaveCount(3);
```

LANGUAGE: java
CODE:
```
assertThat(page.locator("list > .component")).hasCount(3);
```

LANGUAGE: python
CODE:
```
from playwright.async_api import expect

locator = page.locator("list > .component")
await expect(locator).to_have_count(3)
```

LANGUAGE: python
CODE:
```
from playwright.sync_api import expect

locator = page.locator("list > .component")
expect(locator).to_have_count(3)
```

LANGUAGE: csharp
CODE:
```
var locator = Page.Locator("list > .component");
await Expect(locator).ToHaveCountAsync(3);
```

----------------------------------------

TITLE: Running Specific Test Function
DESCRIPTION: Command to run a specific test function using the -k flag.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
pytest -k test_add_a_todo_item
```

----------------------------------------

TITLE: Retrying Code Block with Playwright ToPass (JS)
DESCRIPTION: Demonstrates using `expect(...).toPass()` to repeatedly execute an asynchronous function containing assertions until all assertions within it pass or the default timeout is reached. This is useful for waiting for a complex state.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_42

LANGUAGE: js
CODE:
```
await expect(async () => {
  const response = await page.request.get('https://api.example.com');
  expect(response.status()).toBe(200);
}).toPass();
```

----------------------------------------

TITLE: Running Tests on Specific Browser
DESCRIPTION: Command to run tests on a specific browser using the --browser flag.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
pytest --browser webkit
```

----------------------------------------

TITLE: Overriding Request Headers with Playwright Route.resume - Java
DESCRIPTION: Shows how to intercept and override headers for network requests in Playwright using Java. Requires the Playwright Java API. The handler receives a Route object, creates a copy of headers, adds foo and removes bar, and invokes route.resume with the new headers. Input: route object. Output: modified request sent to the network. Cannot override 'Cookie' header using this method.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
page.route("**/*", route -> {
  // Override headers
  Map<String, String> headers = new HashMap<>(route.request().headers());
  headers.put("foo", "foo-value"); // set "foo" header
  headers.remove("bar"); // remove "bar" header
  route.resume(new Route.ResumeOptions().setHeaders(headers));
});
```

----------------------------------------

TITLE: Using PageAssertions to Verify URL Pattern in JavaScript
DESCRIPTION: Example of using the expect assertion to verify a page URL pattern after clicking a sign-in button. This demonstrates basic page navigation testing in Playwright Test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('navigates to login', async ({ page }) => {
  // ...
  await page.getByText('Sign in').click();
  await expect(page).toHaveURL(/.*\/login/);
});
```

----------------------------------------

TITLE: Retrieve Response Status Code
DESCRIPTION: Access the HTTP status code of a response using the `Response.status` method. This is useful for logging and response validation purposes, with the return being an integer code.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_14

LANGUAGE: javascript
CODE:
```
const statusCode = response.status();\nconsole.log('Status Code:', statusCode);
```

----------------------------------------

TITLE: Running Playwright Tests with Pytest
DESCRIPTION: Command to run Playwright tests using Pytest. By default, tests run on Chromium in headless mode.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-python.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
pytest
```

----------------------------------------

TITLE: Uploading Files with Multipart Form Data in Python
DESCRIPTION: Example of uploading files using multipart/form-data encoding in Python. The example shows how to create a file payload with name, MIME type, and binary content and send it in a multipart form request.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_15

LANGUAGE: python
CODE:
```
api_request_context.post(
  "https://example.com/api/uploadScript'",
  multipart={
    "fileField": {
      "name": "f.js",
      "mimeType": "text/javascript",
      "buffer": b"console.log(2022);",
    },
  })
```

----------------------------------------

TITLE: Implementing SearchPage in C#
DESCRIPTION: C# implementation of a SearchPage class for Playwright. It demonstrates the page object model pattern with async/await in C#, providing methods for navigating to a search engine and performing searches.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_7

LANGUAGE: csharp
CODE:
```
using System.Threading.Tasks;
using Microsoft.Playwright;

namespace BigEcommerceApp.Tests.Models;

public class SearchPage
{
  private readonly IPage _page;
  private readonly ILocator _searchTermInput;

  public SearchPage(IPage page)
  {
    _page = page;
    _searchTermInput = page.Locator("[aria-label='Enter your search term']");
  }

  public async Task GotoAsync()
  {
    await _page.GotoAsync("https://bing.com");
  }

  public async Task SearchAsync(string text)
  {
    await _searchTermInput.FillAsync(text);
    await _searchTermInput.PressAsync("Enter");
  }
}
```

----------------------------------------

TITLE: Routing WebSocket Connections in Playwright
DESCRIPTION: This example demonstrates how to intercept and mock WebSocket connections using the new routeWebSocket method, responding to a 'request' message with a 'response'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_11

LANGUAGE: javascript
CODE:
```
await page.routeWebSocket('/ws', ws => {
  ws.onMessage(message => {
    if (message === 'request')
      ws.send('response');
  });
});
```

----------------------------------------

TITLE: Example Electron Automation Script using Playwright in JavaScript
DESCRIPTION: Provides a complete asynchronous IIFE (Immediately Invoked Function Expression) example demonstrating how to automate an Electron application using Playwright. It covers launching the app (specifying the main script via `args`), evaluating code within the Electron main process to get the app path, obtaining the first application window, retrieving the window title, capturing a screenshot, redirecting Electron console output to the Node terminal, simulating a click on an element, and finally closing the Electron application.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-electron.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
const { _electron: electron } = require('playwright');

(async () => {
  // Launch Electron app.
  const electronApp = await electron.launch({ args: ['main.js'] });

  // Evaluation expression in the Electron context.
  const appPath = await electronApp.evaluate(async ({ app }) => {
    // This runs in the main Electron process, parameter here is always
    // the result of the require('electron') in the main app script.
    return app.getAppPath();
  });
  console.log(appPath);

  // Get the first window that the app opens, wait if necessary.
  const window = await electronApp.firstWindow();
  // Print the title.
  console.log(await window.title());
  // Capture a screenshot.
  await window.screenshot({ path: 'intro.png' });
  // Direct Electron console to Node terminal.
  window.on('console', console.log);
  // Click button.
  await window.click('text=Click me');
  // Exit app.
  await electronApp.close();
})();
```

----------------------------------------

TITLE: Using toHaveTitle Assertion in JavaScript
DESCRIPTION: Example of using toHaveTitle assertion in JavaScript to verify page title matches a pattern. This checks if the page title contains 'checkout' using a regular expression.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
await expect(page).toHaveTitle(/.*checkout/);
```

----------------------------------------

TITLE: Configure Playwright Projects with Custom Option (TypeScript)
DESCRIPTION: Demonstrates how to configure different Playwright projects ('shopping', 'wellbeing') by providing specific values for the custom 'defaultItem' option defined in 'my-test.ts' using the 'use' property in the config file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_17

LANGUAGE: TypeScript
CODE:
```
import { defineConfig } from '@playwright/test';
import type { MyOptions } from './my-test';

export default defineConfig<MyOptions>({
  projects: [
    {
      name: 'shopping',
      use: { defaultItem: 'Buy milk' },
    },
    {
      name: 'wellbeing',
      use: { defaultItem: 'Exercise!' },
    },
  ]
});
```

----------------------------------------

TITLE: Running Parallel Tests in Playwright Test
DESCRIPTION: Demonstrates how to run tests in parallel within the same file using the test.describe.parallel() function. This allows independent tests to execute simultaneously rather than sequentially.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_65

LANGUAGE: javascript
CODE:
```
test.describe.parallel('group', () => {
  test('runs in parallel 1', async ({ page }) => {
  });
  test('runs in parallel 2', async ({ page }) => {
  });
});
```

----------------------------------------

TITLE: Waiting for Network Requests in Python (Sync)
DESCRIPTION: Shows how to wait for specific network requests in Python using synchronous syntax with both URL matching and lambda functions. Useful for ensuring requests have been made before proceeding.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_138

LANGUAGE: python
CODE:
```
with page.expect_request("http://example.com/resource") as first:
    page.get_by_text("trigger request").click()
first_request = first.value

# or with a lambda
with page.expect_request(lambda request: request.url == "http://example.com" and request.method == "get") as second:
    page.get_by_text("trigger request").click()
second_request = second.value
```

----------------------------------------

TITLE: Pressing an Uppercase Character using Shift in Playwright (Python Sync)
DESCRIPTION: Demonstrates pressing an uppercase 'A' using the Playwright Keyboard API in synchronous Python. It shows two ways to achieve this using `page.keyboard.press`: combining 'Shift' with the specific key code 'KeyA', or combining 'Shift' with the character 'A'. Both methods simulate pressing Shift, then A, then releasing both.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
```python sync
page.keyboard.press("Shift+KeyA")
# or
page.keyboard.press("Shift+A")
```
```

----------------------------------------

TITLE: Customizing Playwright Test Output and Debugging
DESCRIPTION: Commands showing how to customize test output, use different reporters, run in debug mode, and access the interactive UI mode.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-cli-js.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npx playwright test --reporter=dot
```

LANGUAGE: bash
CODE:
```
npx playwright test --debug
```

LANGUAGE: bash
CODE:
```
npx playwright test --ui
```

LANGUAGE: bash
CODE:
```
npx playwright test --help
```

----------------------------------------

TITLE: Export Accessibility Scan Results as Test Attachment in JavaScript
DESCRIPTION: Demonstrates adding complete accessibility scan results as a test attachment using the `testInfo.attach` method in Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_7

LANGUAGE: JavaScript
CODE:
```
test('example with attachment', async ({ page }, testInfo) => {
  await page.goto('https://your-site.com/');

  const accessibilityScanResults = await new AxeBuilder({ page }).analyze();

  await testInfo.attach('accessibility-scan-results', {
    body: JSON.stringify(accessibilityScanResults, null, 2),
    contentType: 'application/json'
  });

  expect(accessibilityScanResults.violations).toEqual([]);
});
```

----------------------------------------

TITLE: Capturing Full Page Screenshots in Playwright
DESCRIPTION: Examples of taking full page screenshots that capture the entire scrollable page content. The fullPage parameter is set to true to capture the complete page regardless of viewport size.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/screenshots.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
await page.screenshot({ path: 'screenshot.png', fullPage: true });
```

LANGUAGE: java
CODE:
```
page.screenshot(new Page.ScreenshotOptions()
  .setPath(Paths.get("screenshot.png"))
  .setFullPage(true));
```

LANGUAGE: python
CODE:
```
await page.screenshot(path="screenshot.png", full_page=True)
```

LANGUAGE: python
CODE:
```
page.screenshot(path="screenshot.png", full_page=True)
```

LANGUAGE: csharp
CODE:
```
await Page.ScreenshotAsync(new()
{
    Path = "screenshot.png",
    FullPage = true,
});
```

----------------------------------------

TITLE: Asserting Element Screenshot with Playwright TypeScript
DESCRIPTION: Asserts that the element located by the locator matches a screenshot. This assertion automatically retries until the condition is met or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_23

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toHaveScreenshot()
```

----------------------------------------

TITLE: Configuring Browser Context Options in JavaScript and Java
DESCRIPTION: Demonstrates various browser context options including viewport settings, HTTPS error handling, and Content-Security-Policy bypassing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_39

LANGUAGE: javascript
CODE:
```
{
  viewport: { width: 1280, height: 720 },
  screen: { width: 1920, height: 1080 },
  acceptDownloads: true,
  ignoreHTTPSErrors: false,
  bypassCSP: false,
  baseURL: "http://localhost:3000"
}
```

----------------------------------------

TITLE: Running Playwright Tests with Maven Bash
DESCRIPTION: Executes Java-based Playwright tests using Maven. The command `mvn test` runs the tests in the existing project. It's essential for integration in CI workflows where Java applications are tested.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
mvn test
```

----------------------------------------

TITLE: Tagging Tests in Playwright
DESCRIPTION: Shows different ways to tag tests for filtering and organization, including single tags and multiple tags.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-annotations-js.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('test login page', {
  tag: '@fast',
}, async ({ page }) => {
  // ...
});

test('test full report @slow', async ({ page }) => {
  // ...
});
```

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.describe('group', {
  tag: '@report',
}, () => {
  test('test report header', async ({ page }) => {
    // ...
  });

  test('test full report', {
    tag: ['@slow', '@vrt'],
  }, async ({ page }) => {
    // ...
  });
});
```

----------------------------------------

TITLE: Implementing Test Hooks with MSTest in Playwright
DESCRIPTION: Example of using TestInitialize and TestCleanup hooks in MSTest with Playwright. The test navigates to playwright.dev and performs URL verification using the expect API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-csharp.md#2025-04-22_snippet_6

LANGUAGE: csharp
CODE:
```
using System.Threading.Tasks;
using Microsoft.Playwright.MSTest;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace PlaywrightTests;

[TestClass]
public class ExampleTest : PageTest
{
    [TestMethod]
    public async Task MainNavigation()
    {
        // Assertions use the expect API.
        await Expect(Page).ToHaveURLAsync("https://playwright.dev/");
    }

    [TestInitialize]
    public async Task TestInitialize()
    {
        await Page.GotoAsync("https://playwright.dev");
    }
}
```

----------------------------------------

TITLE: Handling File Downloads in Playwright C#
DESCRIPTION: Demonstrates the use of async/await patterns in C# to manage file downloads in Playwright. The snippet waits for download initiation, then saves the file upon download completion. Requires Playwright and a .NET environment.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/downloads.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
// Start the task of waiting for the download before clicking
var waitForDownloadTask = page.WaitForDownloadAsync();
await page.GetByText("Download file").ClickAsync();
var download = await waitForDownloadTask;

// Wait for the download process to complete and save the downloaded file somewhere
await download.SaveAsAsync("/path/to/save/at/" + download.SuggestedFilename);
```

LANGUAGE: csharp
CODE:
```
page.Download += (sender, download) => Console.WriteLine(download.Url);
```

----------------------------------------

TITLE: Uploading Playwright Report in Azure Pipelines (JavaScript)
DESCRIPTION: This YAML configuration sets up Azure Pipelines to run Playwright tests, publish test results, and upload the playwright-report as an artifact. It uses the PublishTestResults and PublishPipelineArtifact tasks to integrate test results with Azure DevOps.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_26

LANGUAGE: yml
CODE:
```
trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '18'
  displayName: 'Install Node.js'

- script: npm ci
  displayName: 'npm ci'
- script: npx playwright install --with-deps
  displayName: 'Install Playwright browsers'
- script: npx playwright test
  displayName: 'Run Playwright tests'
  env:
    CI: 'true'
- task: PublishTestResults@2
  displayName: 'Publish test results'
  inputs:
    searchFolder: 'test-results'
    testResultsFormat: 'JUnit'
    testResultsFiles: 'e2e-junit-results.xml'
    mergeTestResults: true
    failTaskOnFailedTests: true
    testRunTitle: 'My End-To-End Tests'
  condition: succeededOrFailed()
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: playwright-report
    artifact: playwright-report
    publishLocation: 'pipeline'
  condition: succeededOrFailed()
```

----------------------------------------

TITLE: Modifying Request Headers in Python (Async)
DESCRIPTION: Demonstrates how to modify request headers while falling back to the subsequent handler in Playwright using Python with async/await syntax. This allows for intermediate route handlers to modify the URL, method, headers, and post data of the request.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_18

LANGUAGE: python
CODE:
```
async def handle(route, request):
    # override headers
    headers = {
        **request.headers,
        "foo": "foo-value", # set "foo" header
        "bar": None # remove "bar" header
    }
    await route.fallback(headers=headers)

await page.route("**/*", handle)
```

----------------------------------------

TITLE: Monitoring Network Events in Playwright
DESCRIPTION: Shows how to subscribe to and handle network request and response events in Playwright across different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
// Subscribe to 'request' and 'response' events.
page.on('request', request => console.log('>>', request.method(), request.url()));
page.on('response', response => console.log('<<', response.status(), response.url()));

await page.goto('https://example.com');
```

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      BrowserType chromium = playwright.chromium();
      Browser browser = chromium.launch();
      Page page = browser.newPage();
      page.onRequest(request -> System.out.println(">> " + request.method() + " " + request.url()));
      page.onResponse(response -> System.out.println("<<" + response.status() + " " + response.url()));
      page.navigate("https://example.com");
      browser.close();
    }
  }
}
```

LANGUAGE: python
CODE:
```
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = await chromium.launch()
    page = await browser.new_page()
    # Subscribe to "request" and "response" events.
    page.on("request", lambda request: print(">>", request.method, request.url))
    page.on("response", lambda response: print("<<", response.status, response.url))
    await page.goto("https://example.com")
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())
```

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;

using var playwright = await Playwright.CreateAsync();
await using var browser = await playwright.Chromium.LaunchAsync();
var page = await browser.NewPageAsync();
page.Request += (_, request) => Console.WriteLine(">> " + request.Method + " " + request.Url);
page.Response += (_, response) => Console.WriteLine("<< " + response.Status + " " + response.Url);
await page.GotoAsync("https://example.com");
```

----------------------------------------

TITLE: Running Playwright Tests in Debug Mode with Command Line (JavaScript)
DESCRIPTION: Commands to run Playwright tests in debug mode using the command line. The --debug flag opens the inspector, runs browsers in headed mode, and sets the default timeout to 0.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npx playwright test --debug
```

LANGUAGE: bash
CODE:
```
npx playwright test example.spec.ts:10 --debug
```

LANGUAGE: bash
CODE:
```
npx playwright test --project=chromium --debug
npx playwright test --project="Mobile Safari" --debug
npx playwright test --project="Microsoft Edge" --debug
```

LANGUAGE: bash
CODE:
```
npx playwright test example.spec.ts:10 --project=webkit --debug
```

----------------------------------------

TITLE: Testing Automatic Logout after Inactivity in C#
DESCRIPTION: Tests automatic user logout by simulating user inactivity using C# with Playwright's Clock API. The example installs a clock, navigates to a page, interacts with it, then fast-forwards time by 5 minutes to trigger and verify the inactivity logout message.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_14

LANGUAGE: csharp
CODE:
```
// Initial time does not matter for the test, so we can pick current time.
await Page.Clock.InstallAsync();
await page.GotoAsync("http://localhost:3333");

// Interact with the page
await page.GetByRole("button").ClickAsync();

// Fast forward time 5 minutes as if the user did not do anything.
// Fast forward is like closing the laptop lid and opening it after 5 minutes.
// All the timers due will fire once immediately, as in the real browser.
await Page.Clock.FastForwardAsync("05:00");

// Check that the user was logged out automatically.
await Expect(Page.GetByText("You have been logged out due to inactivity.")).ToBeVisibleAsync();
```

----------------------------------------

TITLE: Authentication Global Setup Example
DESCRIPTION: Implementation of global setup that handles authentication and stores the authentication state for tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
import { chromium, type FullConfig } from '@playwright/test';

async function globalSetup(config: FullConfig) {
  const { baseURL, storageState } = config.projects[0].use;
  const browser = await chromium.launch();
  const page = await browser.newPage();
  await page.goto(baseURL!);
  await page.getByLabel('User Name').fill('user');
  await page.getByLabel('Password').fill('password');
  await page.getByText('Sign in').click();
  await page.context().storageState({ path: storageState as string });
  await browser.close();
}

export default globalSetup;
```

----------------------------------------

TITLE: Configuring Playwright General Options (JS)
DESCRIPTION: Shows how to set various general configuration options in `playwright.config.ts` within the `use` section. This includes settings for action timeouts, browser name, bypassing CSP, browser channel, headless mode, and the test ID attribute.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    // Maximum time each action such as `click()` can take. Defaults to 0 (no limit).
    actionTimeout: 0,

    // Name of the browser that runs tests. For example `chromium`, `firefox`, `webkit`.
    browserName: 'chromium',

    // Toggles bypassing Content-Security-Policy.
    bypassCSP: true,

    // Channel to use, for example "chrome", "chrome-beta", "msedge", "msedge-beta".
    channel: 'chrome',

    // Run browser in headless mode.
    headless: false,

    // Change the default data-testid attribute.
    testIdAttribute: 'pw-test-id',
  },
});
```

----------------------------------------

TITLE: Creating New Browser Context in Sync Playwright Python
DESCRIPTION: This Python snippet, using Playwright's sync API, shows creation of a new browser context and page, demonstrating context isolation. It emphasizes correct cleanup to release resources, requiring Python environment and Playwright sync API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_13

LANGUAGE: Python
CODE:
```
browser = playwright.firefox.launch() # or "chromium" or "webkit".
# create a new incognito browser context.
context = browser.new_context()
# create a new page in a pristine context.
page = context.new_page()
page.goto("https://example.com")

# gracefully close up everything
context.close()
browser.close()
```

----------------------------------------

TITLE: Handling Newsletter Dialog with Locator Handler in Python (Asynchronous)
DESCRIPTION: Asynchronous Python implementation of a locator handler that automatically closes a newsletter signup dialog when it appears. The handler detects text matching 'Sign up to the newsletter' and clicks the 'No thanks' button.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_79

LANGUAGE: python
CODE:
```
# Setup the handler.
def handler():
  await page.get_by_role("button", name="No thanks").click()
await page.add_locator_handler(page.get_by_text("Sign up to the newsletter"), handler)

# Write the test as usual.
await page.goto("https://example.com")
await page.get_by_role("button", name="Start here").click()
```

----------------------------------------

TITLE: Running Playwright Tests with Tracing Enabled (Bash)
DESCRIPTION: This command demonstrates how to run Playwright tests with tracing enabled locally. It uses the --trace on flag to force tracing for all tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-js.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx playwright test --trace on
```

----------------------------------------

TITLE: Asserting Element Enabled State with Playwright TypeScript
DESCRIPTION: Asserts that the element located by the locator is enabled. This assertion automatically retries until the element is enabled or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_7

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toBeEnabled()
```

----------------------------------------

TITLE: Working with iframes Using FrameLocator in Playwright
DESCRIPTION: Demonstrates how to use frameLocator to interact with elements inside an iframe. The frameLocator method creates a locator that enters the iframe context, allowing you to find and interact with elements inside that iframe.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_61

LANGUAGE: javascript
CODE:
```
const locator = page.frameLocator('iframe').getByText('Submit');
await locator.click();
```

LANGUAGE: java
CODE:
```
Locator locator = page.frameLocator("iframe").getByText("Submit");
locator.click();
```

LANGUAGE: python
CODE:
```
locator = page.frame_locator("iframe").get_by_text("Submit")
await locator.click()
```

LANGUAGE: python
CODE:
```
locator = page.frame_locator("iframe").get_by_text("Submit")
locator.click()
```

LANGUAGE: csharp
CODE:
```
var locator = page.FrameLocator("iframe").GetByText("Submit");
await locator.ClickAsync();
```

----------------------------------------

TITLE: Waiting for and Accessing Popup Windows (Python Sync)
DESCRIPTION: Uses Playwright's sync Python API to block on popup creation. The code manages the event context to wait for the popup after a click, then prints the URL of the popup page. Assumes the target element exists and is actionable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_16

LANGUAGE: python sync
CODE:
```
with page.expect_event("popup") as page_info:
    page.get_by_text("open the popup").click()
popup = page_info.value
print(popup.evaluate("location.href"))
```

----------------------------------------

TITLE: Comparing Object Subsets with toMatchObject in JavaScript
DESCRIPTION: Demonstrates using `expect().toMatchObject()` in Playwright tests to perform a deep equality check between an actual value and an expected object or array. This assertion allows the actual value to have extra properties not present in the expected value, making it suitable for checking subsets of data. When comparing arrays, the number of items must match, and each item is checked recursively.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_22

LANGUAGE: javascript
CODE:
```
```js
const value = {
  a: 1,
  b: 2,
  c: true,
};
expect(value).toMatchObject({ a: 1, c: true });
expect(value).toMatchObject({ b: 2, c: true });

expect([{ a: 1, b: 2 }]).toMatchObject([{ a: 1 }]);
```
```

----------------------------------------

TITLE: Using Base URL in Playwright Tests
DESCRIPTION: Example test demonstrating how to use relative paths with configured baseURL.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-webserver-js.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { test } from '@playwright/test';

test('test', async ({ page }) => {
  // This will navigate to http://localhost:3000/login
  await page.goto('./login');
});
```

----------------------------------------

TITLE: Setting Checkbox State in Playwright with Java
DESCRIPTION: Shows how to set the checked state of a checkbox element using the setChecked method in Java. This example sets the checkbox to checked (true).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_85

LANGUAGE: java
CODE:
```
page.getByRole(AriaRole.CHECKBOX).setChecked(true);
```

----------------------------------------

TITLE: Using CSS :visible Selector for Visible Elements Only
DESCRIPTION: Demonstrates how to specifically target only visible elements using the :visible pseudo-class, which is useful for distinguishing between hidden and displayed elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
await page.locator('button:visible').click();
```

LANGUAGE: java
CODE:
```
page.locator("button:visible").click();
```

LANGUAGE: python
CODE:
```
await page.locator("button:visible").click()
```

LANGUAGE: python
CODE:
```
page.locator("button:visible").click()
```

LANGUAGE: csharp
CODE:
```
await page.Locator("button:visible").ClickAsync();
```

----------------------------------------

TITLE: Asserting Element ID with Playwright TypeScript
DESCRIPTION: Asserts that the element located by the locator has a specific ID. This assertion automatically retries until the condition is met or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_20

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toHaveId()
```

----------------------------------------

TITLE: Iterating Over Locator Results Using Playwright JavaScript
DESCRIPTION: This snippet demonstrates iterating over a list of elements returned by Playwright's `all()` method, performing a click on each 'listitem' role. Requires Playwright for JavaScript and assumes an initialized `page` object. Inputs are the role selector, output is sequential clicks on all list items. All elements should be loaded and present on the page to avoid flakiness.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
for (const li of await page.getByRole('listitem').all())
  await li.click();
```

----------------------------------------

TITLE: Using Page.evaluate in Python (Async)
DESCRIPTION: Examples of using the evaluate method in Python with async/await to execute JavaScript expressions in the page context. This async method can accept arguments, evaluate strings with variables, and work with ElementHandle objects.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_53

LANGUAGE: python
CODE:
```
result = await page.evaluate("([x, y]) => Promise.resolve(x * y)", [7, 8])
print(result) # prints "56"
```

LANGUAGE: python
CODE:
```
print(await page.evaluate("1 + 2")) # prints "3"
x = 10
print(await page.evaluate(f"1 + {x}")) # prints "11"
```

LANGUAGE: python
CODE:
```
body_handle = await page.evaluate("document.body")
html = await page.evaluate("([body, suffix]) => body.innerHTML + suffix", [body_handle, "hello"])
await body_handle.dispose()
```

----------------------------------------

TITLE: Declaring a Group of Tests with Test.describe in JavaScript
DESCRIPTION: Demonstrates how to use test.describe to group tests with a title. The title will be visible in the test report as part of each test's title.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
test.describe('two tests', () => {
  test('one', async ({ page }) => {
    // ...
  });

  test('two', async ({ page }) => {
    // ...
  });
});
```

----------------------------------------

TITLE: Configuring Viewport in Python Browser Context
DESCRIPTION: Defines the viewport option for browser contexts in Python. This sets a consistent viewport size for each page, with defaults to 1280x720 pixels.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_48

LANGUAGE: python
CODE:
```
- `viewport` <[null]|[Object]>
  - `width` <[int]> page width in pixels.
  - `height` <[int]> page height in pixels.

Sets a consistent viewport for each page. Defaults to an 1280x720 viewport. `no_viewport` disables the fixed viewport. Learn more about [viewport emulation](../emulation.md#viewport).
```

----------------------------------------

TITLE: Waiting for Response in JavaScript
DESCRIPTION: Demonstrates how to wait for specific HTTP responses using URL matching or predicates in JavaScript. Shows both promise-based approaches for handling response waiting.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_140

LANGUAGE: javascript
CODE:
```
// Start waiting for response before clicking. Note no await.
const responsePromise = page.waitForResponse('https://example.com/resource');
await page.getByText('trigger response').click();
const response = await responsePromise;

// Alternative way with a predicate. Note no await.
const responsePromise = page.waitForResponse(response =>
  response.url() === 'https://example.com' && response.status() === 200
      && response.request().method() === 'GET'
);
await page.getByText('trigger response').click();
const response = await responsePromise;
```

----------------------------------------

TITLE: Using SearchPage in Java Tests
DESCRIPTION: Example of how to use the SearchPage class in Java tests. The code demonstrates initializing the page object with a browser page and using its methods to navigate and perform searches.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_8

LANGUAGE: java
CODE:
```
import models.SearchPage;
import com.microsoft.playwright.*;
// ...

// In the test
Page page = browser.newPage();
SearchPage searchPage = new SearchPage(page);
searchPage.navigate();
searchPage.search("search query");
```

----------------------------------------

TITLE: Comprehensive GitHub API Test Suite with Setup, Teardown, and Issue Creation using Playwright in Python
DESCRIPTION: This code shows the full workflow of GitHub API testing using Playwright and pytest in Python. It includes fixtures for API context and repository management, ensuring the repo\'s lifecycle is handled automatically, along with test functions to verify creation of bug reports and feature requests using API calls. Tests assert both the existence and content of issues. Dependencies: pytest, Playwright sync API, relevant environment variables (GITHUB_API_TOKEN, GITHUB_USER).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-python.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
from enum import auto\nimport os\nfrom typing import Generator\n\nimport pytest\nfrom playwright.sync_api import Playwright, Page, APIRequestContext, expect\n\nGITHUB_API_TOKEN = os.getenv(\"GITHUB_API_TOKEN\")\nassert GITHUB_API_TOKEN, \"GITHUB_API_TOKEN is not set\"\n\nGITHUB_USER = os.getenv(\"GITHUB_USER\")\nassert GITHUB_USER, \"GITHUB_USER is not set\"\n\nGITHUB_REPO = \"test\"\n\n\n@pytest.fixture(scope=\"session\")\ndef api_request_context(\n    playwright: Playwright,\n) -> Generator[APIRequestContext, None, None]:\n    headers = {\n        # We set this header per GitHub guidelines.\n        \"Accept\": \"application/vnd.github.v3+json\",\n        # Add authorization token to all requests.\n        # Assuming personal access token available in the environment.\n        \"Authorization\": f\"token {GITHUB_API_TOKEN}\",\n    }\n    request_context = playwright.request.new_context(\n        base_url=\"https://api.github.com\", extra_http_headers=headers\n    )\n    yield request_context\n    request_context.dispose()\n\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef create_test_repository(\n    api_request_context: APIRequestContext,\n) -> Generator[None, None, None]:\n    # Before all\n    new_repo = api_request_context.post(\"/user/repos\", data={\"name\": GITHUB_REPO})\n    assert new_repo.ok\n    yield\n    # After all\n    deleted_repo = api_request_context.delete(f\"/repos/{GITHUB_USER}/{GITHUB_REPO}\")\n    assert deleted_repo.ok\n\n\ndef test_should_create_bug_report(api_request_context: APIRequestContext) -> None:\n    data = {\n        \"title\": \"[Bug] report 1\",\n        \"body\": \"Bug description\",\n    }\n    new_issue = api_request_context.post(\n        f\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\", data=data\n    )\n    assert new_issue.ok\n\n    issues = api_request_context.get(f\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\")\n    assert issues.ok\n    issues_response = issues.json()\n    issue = list(\n        filter(lambda issue: issue[\"title\"] == \"[Bug] report 1\", issues_response)\n    )[0]\n    assert issue\n    assert issue[\"body\"] == \"Bug description\"\n\n\ndef test_should_create_feature_request(api_request_context: APIRequestContext) -> None:\n    data = {\n        \"title\": \"[Feature] request 1\",\n        \"body\": \"Feature description\",\n    }\n    new_issue = api_request_context.post(\n        f\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\", data=data\n    )\n    assert new_issue.ok\n\n    issues = api_request_context.get(f\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\")\n    assert issues.ok\n    issues_response = issues.json()\n    issue = list(\n        filter(lambda issue: issue[\"title\"] == \"[Feature] request 1\", issues_response)\n    )[0]\n    assert issue\n    assert issue[\"body\"] == \"Feature description\"\n
```

----------------------------------------

TITLE: Waiting for Response in C#
DESCRIPTION: Shows C# implementation for waiting on HTTP responses using RunAndWaitForResponseAsync method. Demonstrates both URL-based and predicate-based approaches.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_143

LANGUAGE: csharp
CODE:
```
// Waits for the next response with the specified url.
await page.RunAndWaitForResponseAsync(async () =>
{
    await page.GetByText("trigger response").ClickAsync();
}, "http://example.com/resource");

// Alternative way with a predicate.
await page.RunAndWaitForResponseAsync(async () =>
{
    await page.GetByText("trigger response").ClickAsync();
}, response => response.Url == "https://example.com" && response.Status == 200 && response.Request.Method == "GET");
```

----------------------------------------

TITLE: Implementing Soft Assertions in Playwright Tests
DESCRIPTION: This snippet demonstrates the use of soft assertions in Playwright tests. Soft assertions do not immediately terminate test execution upon failure, allowing for multiple checks within a single test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
// Make a few checks that will not stop the test when failed...
await expect.soft(page.getByTestId('status')).toHaveText('Success');

// ... and continue the test to check more things.
await page.getByRole('link', { name: 'next page' }).click();
```

----------------------------------------

TITLE: Annotating Tests with Test.describe in JavaScript
DESCRIPTION: Shows how to annotate all tests in a group by providing additional details, including type and description.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.describe('two annotated tests', {
  annotation: {
    type: 'issue',
    description: 'https://github.com/microsoft/playwright/issues/23180',
  },
}, () => {
  test('one', async ({ page }) => {
    // ...
  });

  test('two', async ({ page }) => {
    // ...
  });
});
```

----------------------------------------

TITLE: Waiting for a Popup Window in Playwright (Async Python)
DESCRIPTION: Illustrates waiting for a popup window using the `page.expect_popup` async context manager in Playwright for Python. The code within the `async with` block (`page.get_by_text(...).click()`) triggers the popup, and the context manager waits for it. The awaited value (`popup.value`) is the `Page` object of the popup.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
```python async
async with page.expect_popup() as popup:
  await page.get_by_text("open the popup").click()
child_page = await popup.value
await child_page.goto("https://wikipedia.org")
```
```

----------------------------------------

TITLE: GitHub Actions Workflow for Sharded Tests
DESCRIPTION: GitHub Actions workflow configuration for running Playwright tests across multiple shards and uploading blob reports as artifacts for later merging.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-sharding-js.md#2025-04-22_snippet_3

LANGUAGE: yaml
CODE:
```
name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  playwright-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3, 4]
        shardTotal: [4]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Run Playwright tests
      run: npx playwright test --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}

    - name: Upload blob report to GitHub Actions Artifacts
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: blob-report-${{ matrix.shardIndex }}
        path: blob-report
        retention-days: 1
```

----------------------------------------

TITLE: Defining Files for Playwright File Input Actions
DESCRIPTION: Defines the `files` parameter for Playwright file input actions. It accepts a single file path, an array of file paths, a single file object (`{ name, mimeType, buffer }`), or an array of file objects.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_17

LANGUAGE: markdown
CODE:
```
- `files` <[path]|[Array]<[path]>|[Object]|[Array]<[Object]>>
  - `name` <[string]> File name
  - `mimeType` <[string]> File type
  - `buffer` <[Buffer]> File content
```

----------------------------------------

TITLE: Setting Checkbox State in Playwright with Python (sync)
DESCRIPTION: Shows how to set the checked state of a checkbox element using the set_checked method in Python with synchronous syntax. This example sets the checkbox to checked (True).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_87

LANGUAGE: python
CODE:
```
page.get_by_role("checkbox").set_checked(True)
```

----------------------------------------

TITLE: Checking Page Title with Playwright Test (JavaScript/TypeScript)
DESCRIPTION: This snippet shows how to achieve similar functionality using Playwright Test. It demonstrates the simplified setup, built-in fixtures, and web-first assertions provided by the test framework.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-js.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { expect, test, devices } from '@playwright/test';

test.use(devices['iPhone 11']);

test('should be titled', async ({ page, context }) => {
  await context.route('**.jpg', route => route.abort());
  await page.goto('https://example.com/');

  await expect(page).toHaveTitle('Example');
});
```

----------------------------------------

TITLE: Fulfilling Routes with Custom Responses in Python (Async)
DESCRIPTION: Demonstrates how to fulfill routes with custom responses using Playwright in Python with async/await syntax. This example shows how to respond with a 404 status code and a custom message for all requests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_28

LANGUAGE: python
CODE:
```
await page.route("**/*", lambda route: route.fulfill(
    status=404,
    content_type="text/plain",
    body="not found!"))
```

----------------------------------------

TITLE: Advanced URL Assertion Examples in JavaScript
DESCRIPTION: Examples of different ways to use toHaveURL assertion in JavaScript, including exact matching, pattern matching with regex, and using a predicate function to check URL parameters.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
// Check for the page URL to be 'https://playwright.dev/docs/intro' (including query string)
await expect(page).toHaveURL('https://playwright.dev/docs/intro');

// Check for the page URL to contain 'doc', followed by an optional 's', followed by '/'
await expect(page).toHaveURL(/docs?\//);

// Check for the predicate to be satisfied
// For example: verify query strings
await expect(page).toHaveURL(url => {
  const params = url.searchParams;
  return params.has('search') && params.has('options') && params.get('id') === '5';
});
```

----------------------------------------

TITLE: Selecting Dropdown Options by Text or Value in Playwright C#
DESCRIPTION: Demonstrates the usage of Locator.SelectOptionAsync to select an option within a <select> element. This method can match options based on their visible text content or their 'value' attribute.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_30

LANGUAGE: C#
CODE:
```
await element.SelectOptionAsync("Red");
```

----------------------------------------

TITLE: Configuring Test Workers
DESCRIPTION: Sets the maximum number of concurrent worker processes for test parallelization. Can be specified as absolute number or percentage of CPU cores.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_24

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  workers: 3,
});
```

----------------------------------------

TITLE: Running Playwright Tests and Collecting Traces Locally (Bash)
DESCRIPTION: Explains how to run Playwright tests with tracing enabled on all tests for local development. The --trace on flag triggers trace recording to aid in debugging. Supported by NPM, Yarn, and PNPM. Dependency: Playwright installed, relevant config enabled for tracing. Input: entire test suite. Output: trace files viewable in the HTML report.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
npx playwright test --trace on
```

LANGUAGE: bash
CODE:
```
yarn playwright test --trace on
```

LANGUAGE: bash
CODE:
```
pnpm exec playwright test --trace on
```

----------------------------------------

TITLE: Capturing Basic Screenshots in Playwright
DESCRIPTION: Basic example of capturing a screenshot and saving it to a file. This demonstrates the simplest form of screenshot capture across different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/screenshots.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
await page.screenshot({ path: 'screenshot.png' });
```

LANGUAGE: python
CODE:
```
await page.screenshot(path="screenshot.png")
```

LANGUAGE: python
CODE:
```
page.screenshot(path="screenshot.png")
```

LANGUAGE: java
CODE:
```
page.screenshot(new Page.ScreenshotOptions()
      .setPath(Paths.get("screenshot.png")));
```

LANGUAGE: csharp
CODE:
```
await Page.ScreenshotAsync(new()
{
    Path = "screenshot.png",
});
```

----------------------------------------

TITLE: Typing Text with Playwright Keyboard in C#
DESCRIPTION: Illustrates the use of the Keyboard.TypeAsync method in C# for inputting text, both instantly and with a delay to simulate user typing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_29

LANGUAGE: csharp
CODE:
```
await page.Keyboard.TypeAsync("Hello"); // types instantly
await page.Keyboard.TypeAsync("World", new() { Delay = 100 }); // types slower, like a user
```

----------------------------------------

TITLE: Asserting Text Content of List Items in Playwright
DESCRIPTION: Shows how to verify the text content of all items in a list. This example uses the toHaveText assertion to check that list items contain specific text values in the expected order.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_28

LANGUAGE: javascript
CODE:
```
await expect(page
    .getByRole('listitem'))
    .toHaveText(['apple', 'banana', 'orange']);
```

LANGUAGE: python-async
CODE:
```
await expect(page.get_by_role("listitem")).to_have_text(["apple", "banana", "orange"])
```

LANGUAGE: python-sync
CODE:
```
expect(page.get_by_role("listitem")).to_have_text(["apple", "banana", "orange"])
```

LANGUAGE: java
CODE:
```
assertThat(page
    .getByRole(AriaRole.LISTITEM))
    .hasText(new String[] { "apple", "banana", "orange" });
```

LANGUAGE: csharp
CODE:
```
await Expect(Page
    .GetByRole(AriaRole.Listitem))
    .ToHaveTextAsync(new string[] {"apple", "banana", "orange"});
```

----------------------------------------

TITLE: Setting Custom User Agent in Python (Sync)
DESCRIPTION: Creates a new browser context with a custom user agent string using the Playwright Python sync API. This allows testing how websites respond to different browser identifications.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_67

LANGUAGE: python
CODE:
```
context = browser.new_context(
  user_agent='My user agent'
)
```

----------------------------------------

TITLE: Configuring Azure Pipelines for Playwright Tests (JavaScript)
DESCRIPTION: This YAML configuration sets up Azure Pipelines to run Playwright tests with Node.js. It installs dependencies, sets up Node.js, installs Playwright browsers, and runs the tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_22

LANGUAGE: yml
CODE:
```
trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '18'
  displayName: 'Install Node.js'
- script: npm ci
  displayName: 'npm ci'
- script: npx playwright install --with-deps
  displayName: 'Install Playwright browsers'
- script: npx playwright test
  displayName: 'Run Playwright tests'
  env:
    CI: 'true'
```

----------------------------------------

TITLE: Waiting for and Saving Downloads in Playwright (Java)
DESCRIPTION: Illustrates the Java approach using `page.waitForDownload()` which accepts a lambda function to perform the action that triggers the download. The returned `Download` object is then used to save the file via `download.saveAs()`, constructing the path using `Paths.get()` and `download.suggestedFilename()`. Requires a Playwright `Page` object and an element that initiates a download.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-download.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
// Wait for the download to start
Download download = page.waitForDownload(() -> {
    // Perform the action that initiates download
    page.getByText("Download file").click();
});

// Wait for the download process to complete and save the downloaded file somewhere
download.saveAs(Paths.get("/path/to/save/at/", download.suggestedFilename()));
```

----------------------------------------

TITLE: Modifying Request Headers in JavaScript
DESCRIPTION: Demonstrates how to modify request headers while falling back to the subsequent handler in Playwright using JavaScript. This allows for intermediate route handlers to modify the URL, method, headers, and post data of the request.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_16

LANGUAGE: javascript
CODE:
```
await page.route('**/*', async (route, request) => {
  // Override headers
  const headers = {
    ...request.headers(),
    foo: 'foo-value', // set "foo" header
    bar: undefined, // remove "bar" header
  };
  await route.fallback({ headers });
});
```

----------------------------------------

TITLE: Playwright Locators Usage Example
DESCRIPTION: Demonstrates how to create and use Playwright locators for finding and interacting with page elements. Shows assertion and click operations using locators.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-java.md#2025-04-22_snippet_2

LANGUAGE: java
CODE:
```
import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

Locator getStarted = page.locator("text=Get Started");

assertThat(getStarted).hasAttribute("href", "/docs/intro");
getStarted.click();
```

----------------------------------------

TITLE: Configuring Test Retries via Command Line in Playwright
DESCRIPTION: This bash command shows how to run Playwright tests with a specified number of retry attempts for failing tests using the command line interface.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-retries-js.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
# Give failing tests 3 retry attempts
npx playwright test --retries=3
```

----------------------------------------

TITLE: Accepting Standard Dialogs with Playwright (Python Sync)
DESCRIPTION: Registers a synchronous handler for the 'dialog' event on a Playwright Page object. The lambda function automatically accepts any dialog (`alert`, `confirm`, `prompt`) that appears. This listener must be registered *before* the synchronous action that triggers the dialog (e.g., clicking a button).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
```python sync
page.on("dialog", lambda dialog: dialog.accept())
page.get_by_role("button").click()
```
```

----------------------------------------

TITLE: Opening Playwright HTML Report via npx - Bash
DESCRIPTION: Opens the Playwright-generated HTML report after test execution using npx. Shows interactive details on test outcomes, including pass/fail status, steps, and browser-specific results. Assumes tests have already been run. Useful for inspecting results visually post-test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
npx playwright show-report
```

----------------------------------------

TITLE: Handling Dialog Events - Multiple Languages
DESCRIPTION: Shows how to handle JavaScript dialogs (alert, prompt, confirm) in the browser context to prevent page freezing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
context.on('dialog', dialog => {
  dialog.accept();
});
```

LANGUAGE: java
CODE:
```
context.onDialog(dialog -> {
  dialog.accept();
});
```

LANGUAGE: python
CODE:
```
context.on("dialog", lambda dialog: dialog.accept())
```

LANGUAGE: csharp
CODE:
```
Context.Dialog += async (_, dialog) =>
{
    await dialog.AcceptAsync();
};
```

----------------------------------------

TITLE: Creating Combined Locator with AND in Playwright Java
DESCRIPTION: Demonstrates how to use the `Locator.and()` method in Playwright Java to create a new locator that matches elements satisfying the conditions of both original locators. Requires a `Page` object and existing `Locator` instances.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_26

LANGUAGE: java
CODE:
```
Locator button = page.getByRole(AriaRole.BUTTON).and(page.getByTitle("Subscribe"));
```

----------------------------------------

TITLE: Filtering Locators in Playwright
DESCRIPTION: Demonstrates how to use the new Locator.filter API to refine an existing locator. This example filters button elements to find one with specific text.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_49

LANGUAGE: javascript
CODE:
```
const buttons = page.locator('role=button');
// ...
const submitButton = buttons.filter({ hasText: 'Submit' });
await submitButton.click();
```

----------------------------------------

TITLE: Configuring Trace Recording in Playwright Test
DESCRIPTION: Sets up trace recording for tests using the TestOptions.trace property in the Playwright configuration file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_32

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    trace: 'on-first-retry'
  },
});
```

----------------------------------------

TITLE: Basic Playwright Component Test Structure
DESCRIPTION: Shows the basic structure of a component test using Playwright's test fixtures.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_22

LANGUAGE: javascript
CODE:
```
test('…', async ({ mount, page, context }) => {
  // …
});
```

----------------------------------------

TITLE: Filtering Playwright Tests with Pattern Matching
DESCRIPTION: Shows how to configure Playwright to include or exclude specific test files using glob patterns or regular expressions through testMatch and testIgnore properties.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-configuration-js.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  // Glob patterns or regular expressions to ignore test files.
  testIgnore: '*test-assets',

  // Glob patterns or regular expressions that match test files.
  testMatch: '*todo-tests/*.spec.ts',
});
```

----------------------------------------

TITLE: Configure Page Navigation Wait in Playwright Python
DESCRIPTION: Demonstrates how to use the `wait_until` option with `page.goto` in Playwright Python to control when the navigation is considered complete. The example shows waiting for the `domcontentloaded` event.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_31

LANGUAGE: python
CODE:
```
page.goto("https://playwright.dev", wait_until="domcontentloaded")
```

----------------------------------------

TITLE: Asserting Truthiness with Playwright Generic Matcher (JavaScript)
DESCRIPTION: Demonstrates a basic generic assertion in Playwright using the `toBeTruthy` matcher to check if a value is truthy. This type of assertion does not involve waiting on web elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
expect(success).toBeTruthy();
```

----------------------------------------

TITLE: Accessing and Interacting with Frame Objects in Playwright C#
DESCRIPTION: This C# snippet shows multiple ways to access frame objects in Playwright: by frame name, URL, and by evaluating selectors via JavaScript, then interacting with the frame content. It includes creating the page, obtaining frames through various APIs, and filling an input element. Prerequisite: Microsoft.Playwright and an available 'context' object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/frames.md#2025-04-22_snippet_9

LANGUAGE: csharp
CODE:
```
// Create a page.
var page = await context.NewPageAsync();

// Get frame using the frame's name attribute
var frame = page.Frame("frame-login");

// Get frame using frame's URL
var frame = page.FrameByUrl("*domain.");

// Get frame using any other selector
var frameElementHandle = await page.EvaluateAsync("window.frames[1]");
var frame = await frameElementHandle.ContentFrameAsync();

// Interact with the frame
await frame.FillAsync("#username-input", "John");
```

----------------------------------------

TITLE: Accessing and Interacting with Frame Objects in Playwright JavaScript
DESCRIPTION: This JavaScript snippet provides examples of obtaining frame objects by name or matching the frame's URL, then interacting with elements inside them using Playwright. It demonstrates use of page.frame() and page.frame({ url: ... }) patterns, followed by a fill action. Requires Playwright JS and an initialized 'page' object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/frames.md#2025-04-22_snippet_5

LANGUAGE: js
CODE:
```
// Get frame using the frame's name attribute
const frame = page.frame('frame-login');

// Get frame using frame's URL
const frame = page.frame({ url: /.*domain.*/ });

// Interact with the frame
await frame.fill('#username-input', 'John');
```

----------------------------------------

TITLE: Configuring Download Acceptance in Playwright
DESCRIPTION: Example showing how to configure acceptDownloads option to control whether the browser accepts downloads in tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    acceptDownloads: false,
  },
});
```

----------------------------------------

TITLE: Asserting Element Disabled State using Playwright LocatorAssertions
DESCRIPTION: Ensures the Playwright Locator points to a disabled element. An element is considered disabled if it has the 'disabled' attribute or is disabled via 'aria-disabled'. Note that the 'disabled' attribute is only effective on native control elements (button, input, select, textarea, option, optgroup). A `timeout` option (placeholder `%%-js-assertions-timeout-%%` or `%%-csharp-java-python-assertions-timeout-%%`) is available.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
```js
const locator = page.locator('button.submit');
await expect(locator).toBeDisabled();
```
```

LANGUAGE: java
CODE:
```
```java
assertThat(page.locator("button.submit")).isDisabled();
```
```

LANGUAGE: python
CODE:
```
```python async
from playwright.async_api import expect

locator = page.locator("button.submit")
await expect(locator).to_be_disabled()
```
```

LANGUAGE: python
CODE:
```
```python sync
from playwright.sync_api import expect

locator = page.locator("button.submit")
expect(locator).to_be_disabled()
```
```

LANGUAGE: csharp
CODE:
```
```csharp
var locator = Page.Locator("button.submit");
await Expect(locator).ToBeDisabledAsync();
```
```

----------------------------------------

TITLE: API Testing with Page.request in Playwright
DESCRIPTION: Example showing how to perform API testing by making HTTP requests on behalf of a page using the page.request API, which allows testing server APIs within the browser context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_61

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('context fetch', async ({ page }) => {
  // Do a GET request on behalf of page
  const response = await page.request.get('http://example.com/foo.json');
  // ...
});
```

----------------------------------------

TITLE: Configuring Azure Pipelines for Playwright Tests (C#)
DESCRIPTION: This YAML configuration sets up Azure Pipelines to run Playwright tests with C#. It sets up the .NET environment, builds the project, installs Playwright browsers, and runs the tests using dotnet test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_25

LANGUAGE: yml
CODE:
```
trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: UseDotNet@2
  inputs:
    packageType: sdk
    version: '8.0.x'
  displayName: 'Use .NET SDK'
- script: dotnet build --configuration Release
  displayName: 'Build'
- script: pwsh bin/Release/net8.0/playwright.ps1 install --with-deps
  displayName: 'Install Playwright browsers'
- script: dotnet test --configuration Release
  displayName: 'Run tests'
```

----------------------------------------

TITLE: Waiting for Network Requests in Python (Async)
DESCRIPTION: Shows how to wait for specific network requests in Python using async syntax with both URL matching and lambda functions. Useful for ensuring requests have been made before proceeding.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_137

LANGUAGE: python
CODE:
```
async with page.expect_request("http://example.com/resource") as first:
    await page.get_by_text("trigger request").click()
first_request = await first.value

# or with a lambda
async with page.expect_request(lambda request: request.url == "http://example.com" and request.method == "get") as second:
    await page.get_by_text("trigger request").click()
second_request = await second.value
```

----------------------------------------

TITLE: Waiting for and Accessing Popup Windows (JavaScript)
DESCRIPTION: Shows how to use Playwright's 'popup' event and waitForEvent API to handle popups created by user actions (e.g., clicking a link). Registers a promise for a popup, clicks to trigger it, waits for the new page, and logs its URL. Requires a Playwright page object ready for interaction.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_13

LANGUAGE: js
CODE:
```
// Start waiting for popup before clicking. Note no await.
const popupPromise = page.waitForEvent('popup');
await page.getByText('open the popup').click();
const popup = await popupPromise;
console.log(await popup.evaluate('location.href'));
```

----------------------------------------

TITLE: Disabling JavaScript in JavaScript
DESCRIPTION: Creates a new browser context with JavaScript disabled using the Playwright JavaScript library. This allows testing how web applications behave in environments without JavaScript support.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_75

LANGUAGE: javascript
CODE:
```
const context = await browser.newContext({
  javaScriptEnabled: false
});
```

----------------------------------------

TITLE: Configuring Playwright Recording Options (JS)
DESCRIPTION: Demonstrates how to configure screenshot, trace, and video recording options within the `use` section of the `playwright.config.ts` file. Options like 'only-on-failure' and 'on-first-retry' control when artifacts are captured.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    // Capture screenshot after each test failure.
    screenshot: 'only-on-failure',

    // Record trace only when retrying a test for the first time.
    trace: 'on-first-retry',

    // Record video only when retrying a test for the first time.
    video: 'on-first-retry'
  },
});
```

----------------------------------------

TITLE: Launching a Browser Using Playwright C#
DESCRIPTION: Illustrates launching Chromium with C# Playwright bindings, opening a page, navigating to a site, and closing the browser. Requires 'Microsoft.Playwright' NuGet package and async Task context. Inputs are limited to Playwright instance and browser options. Outputs are automated browser actions. Code must run in an async-compatible environment.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;\nusing System.Threading.Tasks;\n\nclass BrowserTypeExamples\n{\n    public static async Task Run()\n    {\n        using var playwright = await Playwright.CreateAsync();\n        var chromium = playwright.Chromium;\n        var browser = await chromium.LaunchAsync();\n        var page = await browser.NewPageAsync();\n        await page.GotoAsync(\"https://www.bing.com\");\n        // other actions\n        await browser.CloseAsync();\n    }\n}
```

----------------------------------------

TITLE: Accepting Standard Dialogs with Playwright (Java)
DESCRIPTION: Registers a handler for the 'dialog' event on a Playwright Page object using `onDialog`. The handler automatically accepts any dialog (`alert`, `confirm`, `prompt`) that appears. This listener must be registered *before* the action that triggers the dialog (e.g., clicking a button).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
```java
page.onDialog(dialog -> dialog.accept());
page.getByRole(AriaRole.BUTTON).click();
```
```

----------------------------------------

TITLE: Running Playwright Tests with Pytest CLI
DESCRIPTION: Example of using the pytest command line interface to run Playwright tests with specific options.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
pytest --browser webkit --headed
```

----------------------------------------

TITLE: Setting up Playwright with TestNG in Java
DESCRIPTION: Example of integrating Playwright with TestNG for browser automation testing. It demonstrates how to initialize Playwright and Browser instances in @BeforeClass, create new BrowserContext and Page for each test, and release resources properly in @AfterClass and @AfterMethod methods.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-java.md#2025-04-22_snippet_5

LANGUAGE: java
CODE:
```
package org.example;

import com.microsoft.playwright.Browser;
import com.microsoft.playwright.BrowserContext;
import com.microsoft.playwright.Page;
import com.microsoft.playwright.Playwright;
import org.testng.annotations.*;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertTrue;

public class TestExample {
  // Shared between all tests in this class.
  Playwright playwright;
  Browser browser;

  // New instance for each test method.
  BrowserContext context;
  Page page;

  @BeforeClass
  void launchBrowser() {
    playwright = Playwright.create();
    browser = playwright.chromium().launch();
  }

  @AfterClass
  void closeBrowser() {
    playwright.close();
  }

  @BeforeMethod
  void createContextAndPage() {
    context = browser.newContext();
    page = context.newPage();
  }

  @AfterMethod
  void closeContext() {
    context.close();
  }

  @Test
  void shouldClickButton() {
    page.navigate("data:text/html,<script>var result;</script><button onclick='result=\"Clicked\"'>Go</button>");
    page.locator("button").click();
    assertEquals("Clicked", page.evaluate("result"));
  }

  @Test
  void shouldCheckTheBox() {
    page.setContent("<input id='checkbox' type='checkbox'></input>");
    page.locator("input").check();
    assertTrue((Boolean) page.evaluate("() => window['checkbox'].checked"));
  }

  @Test
  void shouldSearchWiki() {
    page.navigate("https://www.wikipedia.org/");
    page.locator("input[name=\"search\"]").click();
    page.locator("input[name=\"search\"]").fill("playwright");
    page.locator("input[name=\"search\"]").press("Enter");
    assertEquals("https://en.wikipedia.org/wiki/Playwright", page.url());
  }
}
```

----------------------------------------

TITLE: Setting Viewport Size in Playwright
DESCRIPTION: Examples of setting the viewport size for a page before navigation. This method resizes the page and resets the screen size. It's recommended to set the viewport size before navigating to a page as many websites don't expect devices to change size.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_106

LANGUAGE: javascript
CODE:
```
const page = await browser.newPage();
await page.setViewportSize({
  width: 640,
  height: 480,
});
await page.goto('https://example.com');
```

LANGUAGE: java
CODE:
```
Page page = browser.newPage();
page.setViewportSize(640, 480);
page.navigate("https://example.com");
```

LANGUAGE: python_async
CODE:
```
page = await browser.new_page()
await page.set_viewport_size({"width": 640, "height": 480})
await page.goto("https://example.com")
```

LANGUAGE: python_sync
CODE:
```
page = browser.new_page()
page.set_viewport_size({"width": 640, "height": 480})
page.goto("https://example.com")
```

LANGUAGE: csharp
CODE:
```
var page = await browser.NewPageAsync();
await page.SetViewportSizeAsync(640, 480);
await page.GotoAsync("https://www.microsoft.com");
```

----------------------------------------

TITLE: Configuring Custom Viewport Size for Playwright Tests
DESCRIPTION: Example of setting a custom viewport size for all browser contexts created during tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_12

LANGUAGE: python
CODE:
```
import pytest

@pytest.fixture(scope="session")
def browser_context_args(browser_context_args):
    return {
        **browser_context_args,
        "viewport": {
            "width": 1920,
            "height": 1080,
        }
    }
```

----------------------------------------

TITLE: Implementing PlaywrightDevPage in TypeScript
DESCRIPTION: Defines a PlaywrightDevPage class in TypeScript that encapsulates common operations on the playwright.dev page. The class contains locators for key elements and methods for navigation and interaction.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { expect, type Locator, type Page } from '@playwright/test';

export class PlaywrightDevPage {
  readonly page: Page;
  readonly getStartedLink: Locator;
  readonly gettingStartedHeader: Locator;
  readonly pomLink: Locator;
  readonly tocList: Locator;

  constructor(page: Page) {
    this.page = page;
    this.getStartedLink = page.locator('a', { hasText: 'Get started' });
    this.gettingStartedHeader = page.locator('h1', { hasText: 'Installation' });
    this.pomLink = page.locator('li', {
      hasText: 'Guides',
    }).locator('a', {
      hasText: 'Page Object Model',
    });
    this.tocList = page.locator('article div.markdown ul > li > a');
  }

  async goto() {
    await this.page.goto('https://playwright.dev');
  }

  async getStarted() {
    await this.getStartedLink.first().click();
    await expect(this.gettingStartedHeader).toBeVisible();
  }

  async pageObjectModel() {
    await this.getStarted();
    await this.pomLink.click();
  }
}
```

----------------------------------------

TITLE: Setting Navigation Timeout in Playwright Tests
DESCRIPTION: Example showing how to configure a timeout for navigation actions in tests, after which the test will fail if navigation hasn't completed.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_23

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    navigationTimeout: 3000,
  },
});
```

----------------------------------------

TITLE: Asserting Checkbox/Radio State using Playwright LocatorAssertions
DESCRIPTION: Ensures the Playwright Locator points to a checked input element (checkbox or radio button). It supports checking for a specific checked state (`checked` option, boolean) or an indeterminate state (`indeterminate` option, boolean, v1.50+). These options are mutually exclusive. A `timeout` option (placeholder `%%-js-assertions-timeout-%%` or `%%-csharp-java-python-assertions-timeout-%%`) is also available.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
```js
const locator = page.getByLabel('Subscribe to newsletter');
await expect(locator).toBeChecked();
```
```

LANGUAGE: java
CODE:
```
```java
assertThat(page.getByLabel("Subscribe to newsletter")).isChecked();
```
```

LANGUAGE: python
CODE:
```
```python async
from playwright.async_api import expect

locator = page.get_by_label("Subscribe to newsletter")
await expect(locator).to_be_checked()
```
```

LANGUAGE: python
CODE:
```
```python sync
from playwright.sync_api import expect

locator = page.get_by_label("Subscribe to newsletter")
expect(locator).to_be_checked()
```
```

LANGUAGE: csharp
CODE:
```
```csharp
var locator = Page.GetByLabel("Subscribe to newsletter");
await Expect(locator).ToBeCheckedAsync();
```
```

----------------------------------------

TITLE: Using Relative URLs in Tests
DESCRIPTION: Demonstrates how to use relative URLs in tests when baseURL is configured in the web server settings.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_22

LANGUAGE: javascript
CODE:
```
import { test } from '@playwright/test';

test('test', async ({ page }) => {
  // This will result in http://localhost:3000/foo
  await page.goto('/foo');
});
```

----------------------------------------

TITLE: Asserting Accessible Name using LocatorAssertions in Multiple Languages
DESCRIPTION: Examples of using toHaveAccessibleName/hasAccessibleName to verify that an element has the expected accessible name. This is important for ensuring screen reader compatibility and accessibility compliance.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_24

LANGUAGE: javascript
CODE:
```
const locator = page.getByTestId('save-button');
await expect(locator).toHaveAccessibleName('Save to disk');
```

LANGUAGE: java
CODE:
```
Locator locator = page.getByTestId("save-button");
assertThat(locator).hasAccessibleName("Save to disk");
```

LANGUAGE: python
CODE:
```
locator = page.get_by_test_id("save-button")
await expect(locator).to_have_accessible_name("Save to disk")
```

LANGUAGE: python
CODE:
```
locator = page.get_by_test_id("save-button")
expect(locator).to_have_accessible_name("Save to disk")
```

LANGUAGE: csharp
CODE:
```
var locator = Page.GetByTestId("save-button");
await Expect(locator).ToHaveAccessibleNameAsync("Save to disk");
```

----------------------------------------

TITLE: Retrieving Input Value in Playwright
DESCRIPTION: Demonstrates how to retrieve the value of an input element using Playwright's inputValue method across different programming languages. This method returns the value for matching input, textarea, or select elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_63

LANGUAGE: javascript
CODE:
```
const value = await page.getByRole('textbox').inputValue();
```

LANGUAGE: python-async
CODE:
```
value = await page.get_by_role("textbox").input_value()
```

LANGUAGE: python-sync
CODE:
```
value = page.get_by_role("textbox").input_value()
```

LANGUAGE: java
CODE:
```
String value = page.getByRole(AriaRole.TEXTBOX).inputValue();
```

LANGUAGE: csharp
CODE:
```
String value = await page.GetByRole(AriaRole.Textbox).InputValueAsync();
```

----------------------------------------

TITLE: Checking Test Retry Count in Playwright JS
DESCRIPTION: Demonstrates how to access the `testInfo.retry` property within a `beforeEach` hook and a test function to determine if a test is being retried after a failure. It shows how to log a message or perform cleanup actions based on the retry count. Requires the `testInfo` fixture.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfo.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.beforeEach(async ({}, testInfo) => {
  // You can access testInfo.retry in any hook or fixture.
  if (testInfo.retry > 0)
    console.log(`Retrying!`);
});

test('my test', async ({ page }, testInfo) => {
  // Here we clear some server-side state when retrying.
  if (testInfo.retry)
    await cleanSomeCachesOnTheServer();
  // ...
});
```

----------------------------------------

TITLE: Testing Automatic Logout after Inactivity in Python
DESCRIPTION: Tests automatic user logout functionality after a period of inactivity by checking for a logout message. Uses Playwright's expect assertions to verify the logout text is visible after fast-forwarding time.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_12

LANGUAGE: python
CODE:
```
# Check that the user was logged out automatically.
expect(page.get_by_text("You have been logged out due to inactivity.")).to_be_visible()
```

----------------------------------------

TITLE: Selecting Options in Python (Sync)
DESCRIPTION: Examples of selecting options in a <select> element using Page.select_option method in Python with synchronous syntax. It demonstrates single and multiple selections using different selection criteria.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_104

LANGUAGE: python
CODE:
```
# Single selection matching the value or label
page.select_option("select#colors", "blue")
# single selection matching both the label
page.select_option("select#colors", label="blue")
# multiple selection
page.select_option("select#colors", value=["red", "green", "blue"])
```

----------------------------------------

TITLE: Configuring Video Recording in Playwright Test (JavaScript)
DESCRIPTION: This snippet shows how to configure video recording options in the Playwright Test configuration file. It demonstrates setting the video mode to 'on-first-retry'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';
export default defineConfig({
  use: {
    video: 'on-first-retry',
  },
});
```

----------------------------------------

TITLE: Running Tests on Multiple Browsers
DESCRIPTION: Command to run tests on multiple browsers by specifying multiple --browser flags.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
pytest --browser webkit --browser firefox
```

----------------------------------------

TITLE: Configuring Playwright Input Action Timeout (Python/Java/CSharp)
DESCRIPTION: Specifies the maximum time in milliseconds for input actions in Playwright for Python, Java, and C#. Defaults to 30000 ms (30 seconds). Setting it to 0 disables the timeout. The default value can be changed using `BrowserContext.setDefaultTimeout` or `Page.setDefaultTimeout`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_6

LANGUAGE: markdown
CODE:
```
- `timeout` <[float]>
```

----------------------------------------

TITLE: Specifying State for Playwright `waitForSelector`
DESCRIPTION: Defines the `state` parameter for Playwright's `waitForSelector` method, determining the condition to wait for. Options are 'attached' (in DOM), 'detached' (not in DOM), 'visible' (in DOM, non-empty bounding box, not hidden), or 'hidden' (detached, empty bounding box, or hidden). Defaults to 'visible'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_28

LANGUAGE: markdown
CODE:
```
- `state` <[WaitForSelectorState]<"attached"|"detached"|"visible"|"hidden">>
```

----------------------------------------

TITLE: Emulating Viewport Size with Playwright Codegen - C# - Bash
DESCRIPTION: This command shows launching the Playwright codegen session with a specific viewport size on a .NET platform via PowerShell. Replace 'netX' with your .NET target. Requires Playwright for .NET built and accessible. The '--viewport-size' parameter controls the browser window size during test recording.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
pwsh bin/Debug/netX/playwright.ps1 codegen --viewport-size=\"800,600\" playwright.dev
```

----------------------------------------

TITLE: Focusing Elements with Playwright
DESCRIPTION: Demonstrates how to programmatically focus an element using Playwright's focus() method. Shows implementation across different programming languages targeting a password input field.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
await page.getByLabel('Password').focus();
```

LANGUAGE: java
CODE:
```
page.getByLabel("Password").focus();
```

LANGUAGE: python
CODE:
```
await page.get_by_label('password').focus()
```

LANGUAGE: csharp
CODE:
```
await page.GetByLabel("Password").FocusAsync();
```

----------------------------------------

TITLE: Handling File Downloads in Playwright Java
DESCRIPTION: This snippet illustrates download management in Playwright using Java. It waits for a file download event, initiates the download, and then saves the file. Necessary setup includes a Playwright page object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/downloads.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
// Wait for the download to start
Download download = page.waitForDownload(() -> {
    // Perform the action that initiates download
    page.getByText("Download file").click();
});

// Wait for the download process to complete and save the downloaded file somewhere
download.saveAs(Paths.get("/path/to/save/at/", download.suggestedFilename()));
```

LANGUAGE: java
CODE:
```
page.onDownload(download -> System.out.println(download.path()));
```

----------------------------------------

TITLE: Checking a Checkbox or Radio via Playwright JavaScript
DESCRIPTION: Ensures a checkbox or radio input is checked using Playwright for JavaScript. Throws if the locator does not point to a checkbox/radio, or if the node is detached during the operation. Takes a selector for the 'checkbox' role as input, checks it with robust error handling.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_30

LANGUAGE: JavaScript
CODE:
```
await page.getByRole('checkbox').check();
```

----------------------------------------

TITLE: Advanced Element Screenshot Options in Playwright
DESCRIPTION: Takes a screenshot with customized options like disabling animations and specifying a file path. Demonstrates the advanced capabilities of the screenshot API for elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_77

LANGUAGE: javascript
CODE:
```
await page.getByRole('link').screenshot({ animations: 'disabled', path: 'link.png' });
```

LANGUAGE: java
CODE:
```
page.getByRole(AriaRole.LINK).screenshot(new Locator.ScreenshotOptions()
    .setAnimations(ScreenshotAnimations.DISABLED)
    .setPath(Paths.get("example.png")));
```

LANGUAGE: python
CODE:
```
await page.get_by_role("link").screenshot(animations="disabled", path="link.png")
```

LANGUAGE: python
CODE:
```
page.get_by_role("link").screenshot(animations="disabled", path="link.png")
```

LANGUAGE: csharp
CODE:
```
await page.GetByRole(AriaRole.Link).ScreenshotAsync(new() {
  Animations = ScreenshotAnimations.Disabled,
  Path = "link.png"
});
```

----------------------------------------

TITLE: Updating Playwright via npm - Bash
DESCRIPTION: Updates Playwright test dependencies and browser binaries using npm. Installs the latest @playwright/test package (as a dev dependency) and fetches browser binaries with updated dependencies. Required for staying current with Playwright features/releases.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_13

LANGUAGE: bash
CODE:
```
npm install -D @playwright/test@latest
# Also download new browser binaries and their dependencies:
npx playwright install --with-deps
```

----------------------------------------

TITLE: Matching Text in Locators with TypeScript
DESCRIPTION: Defines locator options for matching elements based on text content. The `hasNotText` option matches elements that do not contain the specified text.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_100

LANGUAGE: typescript
CODE:
```
- `hasNotText` <[string]|[RegExp]>
```

----------------------------------------

TITLE: Handle Multiple Possible Elements with Or (C#)
DESCRIPTION: Illustrates the use of `Locator.Or` in C# to create a locator that matches either of two conditions. The example demonstrates waiting for either a "New email" button or a security settings dialog to become visible and then taking action based on which element is present.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_25

LANGUAGE: csharp
CODE:
```
var newEmail = Page.GetByRole(AriaRole.Button, new() { Name = "New email" });
var dialog = Page.GetByText("Confirm security settings");
await Expect(newEmail.Or(dialog)).ToBeVisibleAsync();
if (await dialog.IsVisibleAsync())
  await Page.GetByRole(AriaRole.Button, new() { Name = "Dismiss" }).ClickAsync();
await newEmail.ClickAsync();
```

----------------------------------------

TITLE: Generating Tests from CSV File in TypeScript
DESCRIPTION: This code demonstrates how to dynamically generate tests based on data from a CSV file using the csv-parse library. It reads the CSV file, parses its contents, and creates a test for each row in the file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_13

LANGUAGE: typescript
CODE:
```
import fs from 'fs';
import path from 'path';
import { test } from '@playwright/test';
import { parse } from 'csv-parse/sync';

const records = parse(fs.readFileSync(path.join(__dirname, 'input.csv')), {
  columns: true,
  skip_empty_lines: true
});

for (const record of records) {
  test(`foo: ${record.test_case}`, async ({ page }) => {
    console.log(record.test_case, record.some_value, record.some_other_value);
  });
}
```

----------------------------------------

TITLE: Handling File Upload with FileChooser in C#
DESCRIPTION: Shows how to wait for a file chooser, trigger it, and set a file for upload using Playwright in C#.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-filechooser.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
var fileChooser = await page.RunAndWaitForFileChooserAsync(async () =>
{
    await page.GetByText("Upload file").ClickAsync();
});
await fileChooser.SetFilesAsync("temp.txt");
```

----------------------------------------

TITLE: Overriding Test Options for Specific Test Files
DESCRIPTION: Example demonstrating how to override test options for a specific test file using test.use(), configuring a portrait-like viewport for tests in that file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

// Run tests in this file with portrait-like viewport.
test.use({ viewport: { width: 600, height: 900 } });

test('my portrait test', async ({ page }) => {
  // ...
});
```

----------------------------------------

TITLE: Configuring GitHub Actions for Playwright Tests on Deployment (JavaScript)
DESCRIPTION: This YAML configuration sets up GitHub Actions to run Playwright tests after a successful deployment. It installs dependencies, sets up Node.js, and runs the tests with the deployment URL as the base URL.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_17

LANGUAGE: yml
CODE:
```
name: Playwright Tests
on:
  deployment_status:
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    if: github.event.deployment_status.state == 'success'
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright
      run: npx playwright install --with-deps
    - name: Run Playwright tests
      run: npx playwright test
      env:
        PLAYWRIGHT_TEST_BASE_URL: ${{ github.event.deployment_status.target_url }}
```

----------------------------------------

TITLE: Parallelizing Tests in a Single File (JavaScript)
DESCRIPTION: Configures a test suite to run tests in parallel within a single file using test.describe.configure.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { test } from '@playwright/test';

test.describe.configure({ mode: 'parallel' });

test('runs in parallel 1', async ({ page }) => { /* ... */ });
test('runs in parallel 2', async ({ page }) => { /* ... */ });
```

----------------------------------------

TITLE: JUnit Parallel Execution Configuration
DESCRIPTION: Configuration settings for enabling parallel test execution in JUnit with Playwright
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/junit-java.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
junit.jupiter.execution.parallel.enabled = true
junit.jupiter.execution.parallel.mode.default = same_thread
junit.jupiter.execution.parallel.mode.classes.default = concurrent
junit.jupiter.execution.parallel.config.strategy=dynamic
junit.jupiter.execution.parallel.config.dynamic.factor=0.5
```

----------------------------------------

TITLE: Handling New Pages in Playwright
DESCRIPTION: Examples of handling new pages opened by actions like clicking links with target="_blank", using waitForEvent and event listeners to capture and interact with new pages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pages.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
// Start waiting for new page before clicking. Note no await.
const pagePromise = context.waitForEvent('page');
await page.getByText('open new tab').click();
const newPage = await pagePromise;
// Interact with the new page normally.
await newPage.getByRole('button').click();
console.log(await newPage.title());
```

LANGUAGE: java
CODE:
```
// Get page after a specific action (e.g. clicking a link)
Page newPage = context.waitForPage(() -> {
  page.getByText("open new tab").click(); // Opens a new tab
});
// Interact with the new page normally
newPage.getByRole(AriaRole.BUTTON).click();
System.out.println(newPage.title());
```

LANGUAGE: python
CODE:
```
# Get page after a specific action (async) (e.g. clicking a link)
async with context.expect_page() as new_page_info:
    await page.get_by_text("open new tab").click() # Opens a new tab
new_page = await new_page_info.value

# Interact with the new page normally
await new_page.get_by_role("button").click()
print(await new_page.title())
```

LANGUAGE: python
CODE:
```
# Get page after a specific action (sync) (e.g. clicking a link)
with context.expect_page() as new_page_info:
    page.get_by_text("open new tab").click() # Opens a new tab
new_page = new_page_info.value

# Interact with the new page normally
new_page.get_by_role("button").click()
print(new_page.title())
```

LANGUAGE: csharp
CODE:
```
// Get page after a specific action (e.g. clicking a link)
var newPage = await context.RunAndWaitForPageAsync(async () =>
{
    await page.GetByText("open new tab").ClickAsync();
});
// Interact with the new page normally
await newPage.GetByRole(AriaRole.Button).ClickAsync();
Console.WriteLine(await newPage.TitleAsync());
```

----------------------------------------

TITLE: Evaluating Script in Browser Context | Playwright Test TypeScript
DESCRIPTION: This TypeScript Playwright Test snippet demonstrates how to execute arbitrary JavaScript code directly within the context of the browser page. It navigates to a URL and then uses `page.evaluate()` to run a script that retrieves and returns the page's dimensions and device scale factor.
SOURCE: https://github.com/microsoft/playwright/blob/main/README.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
import { test } from '@playwright/test';

test('Evaluate in browser context', async ({ page }) => {
  await page.goto('https://www.example.com/');
  const dimensions = await page.evaluate(() => {
    return {
      width: document.documentElement.clientWidth,
      height: document.documentElement.clientHeight,
      deviceScaleFactor: window.devicePixelRatio
    }
  });
  console.log(dimensions);
});
```

----------------------------------------

TITLE: Creating Emulated Context with Playwright (.NET/C#)
DESCRIPTION: This C# snippet shows how to use the `Microsoft.Playwright` library to launch a Chromium browser and create a new context emulating an 'iPhone 13'. Device parameters are obtained from `playwright.Devices` and passed to `browser.NewContextAsync`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
```csharp
using Microsoft.Playwright;
using System.Threading.Tasks;

using var playwright = await Playwright.CreateAsync();
await using var browser = await playwright.Chromium.LaunchAsync(new()
{
    Headless = false
});
var iphone13 = playwright.Devices["iPhone 13"];
await using var context = await browser.NewContextAsync(iphone13);
```
```

----------------------------------------

TITLE: Configuring Playwright Navigation Timeout (Python/Java/CSharp)
DESCRIPTION: Specifies the maximum time in milliseconds for navigation operations in Playwright for Python, Java, and C#. It defaults to 30000 ms (30 seconds). Setting it to 0 disables the timeout. This default can be overridden using methods like `BrowserContext.setDefaultNavigationTimeout` or `Page.setDefaultNavigationTimeout`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
- `timeout` <[float]>
```

----------------------------------------

TITLE: Typing Text with Playwright Keyboard in JavaScript
DESCRIPTION: Demonstrates how to use the Keyboard.type method to input text, both instantly and with a delay to simulate user typing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_25

LANGUAGE: javascript
CODE:
```
await page.keyboard.type('Hello'); // Types instantly
await page.keyboard.type('World', { delay: 100 }); // Types slower, like a user
```

----------------------------------------

TITLE: Handling Dialog Events with Python Sync in Playwright
DESCRIPTION: Example of handling a browser dialog event in Playwright using Python's synchronous API. The code defines a dialog handler function, launches Chromium, registers the handler, and triggers an alert dialog.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-dialog.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
from playwright.sync_api import sync_playwright, Playwright

def handle_dialog(dialog):
    print(dialog.message)
    dialog.dismiss()

def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = chromium.launch()
    page = browser.new_page()
    page.on("dialog", handle_dialog)
    page.evaluate("alert('1')")
    browser.close()

with sync_playwright() as playwright:
    run(playwright)
```

----------------------------------------

TITLE: Manually Creating a Browser Context with Async Playwright (Python)
DESCRIPTION: Provides the asynchronous Python code for launching a browser (`playwright.chromium.launch()`), creating an isolated `BrowserContext` (`browser.new_context()`), and obtaining a `Page` (`context.new_page()`) using the `playwright.async_api`. This showcases manual context creation in an async Python environment.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
browser = await playwright.chromium.launch()
context = await browser.new_context()
page = await context.new_page()
```

----------------------------------------

TITLE: Asserting element class in C#
DESCRIPTION: Demonstrates using the new ToContainClassAsync assertion method on a Locator to check if an element has a specific CSS class name. This is a more ergonomic way to assert individual classes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_0

LANGUAGE: csharp
CODE:
```
await Expect(Page.GetByRole(AriaRole.Listitem, new() { Name = "Ship v1.52" })).ToContainClassAsync("done");
```

----------------------------------------

TITLE: Asserting Element ID with toHaveId in Java
DESCRIPTION: Shows how to use the toHaveId method (aliased as hasId in Java) to ensure that a locator points to an element with a specific DOM Node ID. This example checks if a textbox element has the ID 'lastname'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_31

LANGUAGE: java
CODE:
```
assertThat(page.getByRole(AriaRole.TEXTBOX)).hasId("lastname");
```

----------------------------------------

TITLE: Running Playwright Tests on Multiple Browsers
DESCRIPTION: Execute tests on multiple browsers by using the --project flag multiple times with different browser names.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
npx playwright test --project webkit --project firefox
```

----------------------------------------

TITLE: Overriding Fixtures with Custom Functions in Playwright Tests
DESCRIPTION: Shows how to override a fixture by providing a custom function. In this example, the locale is read from a configuration file before being used in the tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_43

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.use({
  locale: async ({}, use) => {
    // Read locale from some configuration file.
    const locale = await fs.promises.readFile('test-locale', 'utf-8');
    await use(locale);
  },
});

test('test with locale', async ({ page }) => {
  // Default context and page have locale as specified
});
```

----------------------------------------

TITLE: Combining Multiple Conditions with AND Operator in Playwright
DESCRIPTION: Shows how to use the 'and' method to match elements that satisfy multiple conditions simultaneously. This example finds a button that has both a specific role and title attribute.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_24

LANGUAGE: javascript
CODE:
```
const button = page.getByRole('button').and(page.getByTitle('Subscribe'));
```

LANGUAGE: java
CODE:
```
Locator button = page.getByRole(AriaRole.BUTTON).and(page.getByTitle("Subscribe"));
```

LANGUAGE: python-async
CODE:
```
button = page.get_by_role("button").and_(page.getByTitle("Subscribe"))
```

LANGUAGE: python-sync
CODE:
```
button = page.get_by_role("button").and_(page.getByTitle("Subscribe"))
```

LANGUAGE: csharp
CODE:
```
var button = page.GetByRole(AriaRole.Button).And(page.GetByTitle("Subscribe"));
```

----------------------------------------

TITLE: Combine Locators with and_ Playwright Python
DESCRIPTION: Illustrates the usage of the new `Locator.and_` method in Playwright Python version 1.34. This method creates a new locator that matches elements that satisfy the conditions of *both* the original locator and the locator passed as an argument.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_22

LANGUAGE: python
CODE:
```
button = page.get_by_role("button").and_(page.get_by_title("Subscribe"))
```

----------------------------------------

TITLE: Getting Frame Element and Content Frame - Multiple Languages
DESCRIPTION: Demonstrates how to get a frame element handle and verify it matches the content frame across different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_28

LANGUAGE: javascript
CODE:
```
const frameElement = await frame.frameElement();
const contentFrame = await frameElement.contentFrame();
console.log(frame === contentFrame);  // -> true
```

LANGUAGE: java
CODE:
```
ElementHandle frameElement = frame.frameElement();
Frame contentFrame = frameElement.contentFrame();
System.out.println(frame == contentFrame);  // -> true
```

LANGUAGE: python
CODE:
```
frame_element = await frame.frame_element()
content_frame = await frame_element.content_frame()
assert frame == content_frame
```

LANGUAGE: csharp
CODE:
```
var frameElement = await frame.FrameElementAsync();
var contentFrame = await frameElement.ContentFrameAsync();
Console.WriteLine(frame == contentFrame); // -> True
```

----------------------------------------

TITLE: Using Negated PageAssertions in JavaScript
DESCRIPTION: Example of using the .not property to negate an assertion in JavaScript, checking that a page URL doesn't contain 'error'. This demonstrates how to verify the absence of a pattern.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
await expect(page).not.toHaveURL('error');
```

----------------------------------------

TITLE: Strict Equality Check with toStrictEqual in JavaScript
DESCRIPTION: Illustrates the usage of `expect().toStrictEqual()` for comparing both the contents and types of values in Playwright tests. Unlike `toEqual`, `toStrictEqual` checks for keys with undefined properties, array sparseness, and object types, ensuring a stricter comparison. The example shows a simple object comparison.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_23

LANGUAGE: javascript
CODE:
```
```js
const value = { prop: 1 };
expect(value).toStrictEqual({ prop: 1 });
```
```

----------------------------------------

TITLE: Querying All Text Contents with Playwright Python (Async)
DESCRIPTION: Collects the textContent from all 'link' role nodes using Playwright in async Python. The result is a list of textContent strings. Best used for DOM content assertions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_11

LANGUAGE: Python
CODE:
```
texts = await page.get_by_role("link").all_text_contents()
```

----------------------------------------

TITLE: Configuring Forbid Only Option in Playwright Test
DESCRIPTION: Configuration to exit with an error if tests are marked as .only, preventing accidental inclusion of focused tests in CI.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  forbidOnly: !!process.env.CI,
});
```

----------------------------------------

TITLE: Using Attribute Selectors in Playwright
DESCRIPTION: Shows how to use attribute selectors for id, data-testid, data-test-id, and data-test in Playwright. These selectors provide a shorthand for selecting elements with specific attributes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_20

LANGUAGE: javascript
CODE:
```
// Fill an input with the id "username"
await page.locator('id=username').fill('value');

// Click an element with data-test-id "submit"
await page.locator('data-test-id=submit').click();
```

LANGUAGE: java
CODE:
```
// Fill an input with the id "username"
page.locator("id=username").fill("value");

// Click an element with data-test-id "submit"
page.locator("data-test-id=submit").click();
```

LANGUAGE: python
CODE:
```
# Fill an input with the id "username"
await page.locator('id=username').fill('value')

# Click an element with data-test-id "submit"
await page.locator('data-test-id=submit').click()
```

LANGUAGE: csharp
CODE:
```
// Fill an input with the id "username"
await page.Locator("id=username").FillAsync("value");

// Click an element with data-test-id "submit"
await page.Locator("data-test-id=submit").ClickAsync();
```

----------------------------------------

TITLE: Keyboard Shortcuts and Special Keys in Playwright
DESCRIPTION: Examples of handling keyboard shortcuts, special keys, and key combinations including Enter, Control combinations, and symbol keys.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
await page.getByText('Submit').press('Enter');

await page.getByRole('textbox').press('Control+ArrowRight');

await page.getByRole('textbox').press('$');
```

LANGUAGE: java
CODE:
```
page.getByText("Submit").press("Enter");

page.getByRole(AriaRole.TEXTBOX).press("Control+ArrowRight");

page.getByRole(AriaRole.TEXTBOX).press("$");
```

----------------------------------------

TITLE: Handling Failed HTTP Requests (JavaScript)
DESCRIPTION: Attaches a handler to the Playwright page's 'requestfailed' event to log the URL and failure reason of any failed requests. Prints to the terminal when network or other transport errors occur. Dependencies: Playwright and an instantiated page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_18

LANGUAGE: js
CODE:
```
page.on('requestfailed', request => {
  console.log(request.url() + ' ' + request.failure().errorText);
});
```

----------------------------------------

TITLE: Matching Strings Containing Substrings with expect.stringContaining in JavaScript
DESCRIPTION: Illustrates `expect.stringContaining(expectedSubstring)` used within `expect().toEqual()` in Playwright tests. This matcher asserts that the received string contains the specified `expectedSubstring`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_31

LANGUAGE: javascript
CODE:
```
```js
expect('Hello world!').toEqual(expect.stringContaining('Hello'));
```
```

----------------------------------------

TITLE: Querying All Inner Texts with Playwright Java
DESCRIPTION: Demonstrates the method to acquire all innerText strings from 'link' role elements in Java with Playwright. Returns an array of strings.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_8

LANGUAGE: Java
CODE:
```
String[] texts = page.getByRole(AriaRole.LINK).allInnerTexts();
```

----------------------------------------

TITLE: Running Playwright Tests with JSON Reporter Output File (Batch)
DESCRIPTION: Executes Playwright tests using the 'json' reporter in a Windows Batch environment. It sets the PLAYWRIGHT_JSON_OUTPUT_NAME environment variable to results.json to redirect the JSON report output from standard output to the specified file before running the Playwright test command.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_21

LANGUAGE: batch
CODE:
```
set PLAYWRIGHT_JSON_OUTPUT_NAME=results.json
npx playwright test --reporter=json
```

----------------------------------------

TITLE: Debugging Specific Playwright Test File with Inspector
DESCRIPTION: Debug a specific test file using the Playwright Inspector by specifying the file name and using the --debug flag.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_12

LANGUAGE: bash
CODE:
```
npx playwright test example.spec.ts --debug
```

----------------------------------------

TITLE: Using Page.evaluate in C#
DESCRIPTION: Examples of using the EvaluateAsync method in C# to execute JavaScript expressions in the page context. This method can accept arguments, evaluate strings, and work with ElementHandle objects, returning typed results.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_55

LANGUAGE: csharp
CODE:
```
var result = await page.EvaluateAsync<int>("([x, y]) => Promise.resolve(x * y)", new[] { 7, 8 });
Console.WriteLine(result);
```

LANGUAGE: csharp
CODE:
```
Console.WriteLine(await page.EvaluateAsync<int>("1 + 2")); // prints "3"
```

LANGUAGE: csharp
CODE:
```
var bodyHandle = await page.EvaluateAsync("document.body");
var html = await page.EvaluateAsync<string>("([body, suffix]) => body.innerHTML + suffix", new object [] { bodyHandle, "hello" });
await bodyHandle.DisposeAsync();
```

----------------------------------------

TITLE: Asserting Element Disabled State with Playwright TypeScript
DESCRIPTION: Asserts that the element located by the locator is disabled. This assertion automatically retries until the element is disabled or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toBeDisabled()
```

----------------------------------------

TITLE: Modifying Network Responses in C#
DESCRIPTION: Demonstrates how to modify network responses in C#. The example fetches the original response, modifies the HTML content, and then fulfills the request with the modified response.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_31

LANGUAGE: csharp
CODE:
```
await Page.RouteAsync("**/title.html", async route =>
{
    // Fetch original response.
    var response = await route.FetchAsync();
    // Add a prefix to the title.
    var body = await response.TextAsync();
    body = body.Replace("<title>", "<title>My prefix:");

    var headers = response.Headers;
    headers.Add("Content-Type", "text/html");

    await route.FulfillAsync(new()
    {
        // Pass all fields from the response.
        Response = response,
        // Override response body.
        Body = body,
        // Force content type to be html.
        Headers = headers,
    });
});
```

----------------------------------------

TITLE: Modifying Network Responses in Python (Sync)
DESCRIPTION: Shows how to modify network responses in synchronous Python. The example fetches the original response, modifies the HTML content, and then fulfills the request with the modified response.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_30

LANGUAGE: python
CODE:
```
def handle_route(route: Route) -> None:
    # Fetch original response.
    response = route.fetch()
    # Add a prefix to the title.
    body = response.text()
    body = body.replace("<title>", "<title>My prefix:")
    route.fulfill(
        # Pass all fields from the response.
        response=response,
        # Override response body.
        body=body,
        # Force content type to be html.
        headers={**response.headers, "content-type": "text/html"},
    )

page.route("**/title.html", handle_route)
```

----------------------------------------

TITLE: React Component Testing Example
DESCRIPTION: Demonstrates how to test a React component using Playwright's experimental React testing package.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_23

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/experimental-ct-react';
import HelloWorld from './HelloWorld';

test.use({ viewport: { width: 500, height: 500 } });

test('should work', async ({ mount }) => {
  const component = await mount(<HelloWorld msg="greetings" />);
  await expect(component).toContainText('Greetings');
});
```

----------------------------------------

TITLE: Negating Locator Assertions with '.not()' in Java
DESCRIPTION: Illustrates using the `.not()` method with Playwright Assertions (`assertThat`) in Java to check for the opposite condition. This code asserts that the specified `locator` does *not* contain the text "error".
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_6

LANGUAGE: java
CODE:
```
```java
assertThat(locator).not().containsText("error");
```
```

----------------------------------------

TITLE: Iterating Over Locator Results Using Playwright Python (Async)
DESCRIPTION: Illustrates Playwright's async Python syntax for accessing all matched 'listitem' nodes and clicking each one in sequence. `page` must be an async context, and Playwright for Python installed. Input is the role selector; output is the effect of clicked items. Dynamic page content during iteration may yield flaky results.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_1

LANGUAGE: Python
CODE:
```
for li in await page.get_by_role('listitem').all():
  await li.click();
```

----------------------------------------

TITLE: Asserting API Response Status with Playwright TypeScript
DESCRIPTION: Asserts that the API response has an OK status (status code 200-299). This assertion automatically retries until the condition is met or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_31

LANGUAGE: TypeScript
CODE:
```
await expect(response).toBeOK()
```

----------------------------------------

TITLE: Waiting for and Accessing Popup Windows (C#)
DESCRIPTION: Uses Playwright's RunAndWaitForPopupAsync method in C# to handle popups triggered by a click event. Awaits both the popup and its evaluation for the location URL. Playwright for .NET is required.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_17

LANGUAGE: csharp
CODE:
```
var popup = await page.RunAndWaitForPopupAsync(async () =>
{
    await page.GetByText("open the popup").ClickAsync();
});
Console.WriteLine(await popup.EvaluateAsync<string>("location.href"));
```

----------------------------------------

TITLE: Adding Cookies to Playwright BrowserContext (JS, Java, Python, C#)
DESCRIPTION: Demonstrates how to add an array of cookie objects to the current Playwright BrowserContext. These cookies will be available to all pages subsequently opened within this context. This method requires an array of cookie objects, each potentially specifying name, value, domain, path, expiry, etc.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
await browserContext.addCookies([cookieObject1, cookieObject2]);
```

LANGUAGE: java
CODE:
```
browserContext.addCookies(Arrays.asList(cookieObject1, cookieObject2));
```

LANGUAGE: python
CODE:
```
await browser_context.add_cookies([cookie_object1, cookie_object2])
```

LANGUAGE: python
CODE:
```
browser_context.add_cookies([cookie_object1, cookie_object2])
```

LANGUAGE: csharp
CODE:
```
await context.AddCookiesAsync(new[] { cookie1, cookie2 });
```

----------------------------------------

TITLE: Using Page.evalOnSelector in Python (Async)
DESCRIPTION: Examples of using the eval_on_selector method in Python with async/await to evaluate expressions on elements matching a selector. This async method finds an element and passes it to the provided JavaScript expression.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_43

LANGUAGE: python
CODE:
```
search_value = await page.eval_on_selector("#search", "el => el.value")
preload_href = await page.eval_on_selector("link[rel=preload]", "el => el.href")
html = await page.eval_on_selector(".main-container", "(e, suffix) => e.outer_html + suffix", "hello")
```

----------------------------------------

TITLE: Using toBe Method in GenericAssertions
DESCRIPTION: Shows various uses of the 'toBe' method for strict equality comparisons. It demonstrates comparing objects by reference and primitive values.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
const value = { prop: 1 };
expect(value).toBe(value);
expect(value).not.toBe({});
expect(value.prop).toBe(1);
```

----------------------------------------

TITLE: Negating Locator Assertions with '.not' in JavaScript
DESCRIPTION: Shows how to use the `.not` property with Playwright Test assertions in JavaScript to invert the assertion logic. This specific example asserts that the given `locator` does *not* contain the text "error".
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
```js
await expect(locator).not.toContainText('error');
```
```

----------------------------------------

TITLE: Declaring a Parallel Test Group with Test.describe.parallel in JavaScript
DESCRIPTION: Demonstrates how to use test.describe.parallel to declare a group of tests that could be run in parallel.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_20

LANGUAGE: javascript
CODE:
```
test.describe.parallel('group', () => {
  test('runs in parallel 1', async ({ page }) => {});
  test('runs in parallel 2', async ({ page }) => {});
});
```

----------------------------------------

TITLE: GitHub Actions Workflow for Java Playwright in Containers
DESCRIPTION: Sets up a GitHub Actions workflow to run Java-based Playwright tests within a Docker container. This setup ensures a consistent testing environment using a dedicated Playwright image and is triggered on branch changes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_15

LANGUAGE: yml
CODE:
```
name: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  playwright:\n    name: 'Playwright Tests'\n    runs-on: ubuntu-latest\n    container:\n      image: mcr.microsoft.com/playwright/java:v%%VERSION%%-noble\n      options: --user 1001\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n      - name: Build & Install\n        run: mvn -B install -D skipTests --no-transfer-progress\n      - name: Run tests\n        run: mvn test
```

----------------------------------------

TITLE: Asserting Element Focused State with Playwright TypeScript
DESCRIPTION: Asserts that the element located by the locator is focused. This assertion automatically retries until the element is focused or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_8

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toBeFocused()
```

----------------------------------------

TITLE: Handling File Downloads in Playwright Python (Sync)
DESCRIPTION: Illustrates synchronous handling of file downloads in Playwright Python. Involves triggering the download, waiting for it to complete, and saving the file. Requires the Playwright module and Python's synchronous capabilities.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/downloads.md#2025-04-22_snippet_3

LANGUAGE: python sync
CODE:
```
# Start waiting for the download
with page.expect_download() as download_info:
    # Perform the action that initiates download
    page.get_by_text("Download file").click()
download = download_info.value

# Wait for the download process to complete and save the downloaded file somewhere
download.save_as("/path/to/save/at/" + download.suggested_filename)
```

LANGUAGE: python sync
CODE:
```
page.on("download", lambda download: print(download.path()))
```

----------------------------------------

TITLE: Capturing Element Screenshots with Locator.screenshot() in Playwright
DESCRIPTION: Takes a screenshot of a specific element on the page. Supports options for disabling animations and saving to a file. The method handles scrolling the element into view before capturing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_76

LANGUAGE: javascript
CODE:
```
await page.getByRole('link').screenshot();
```

LANGUAGE: java
CODE:
```
page.getByRole(AriaRole.LINK).screenshot();
```

LANGUAGE: python
CODE:
```
await page.get_by_role("link").screenshot()
```

LANGUAGE: python
CODE:
```
page.get_by_role("link").screenshot()
```

LANGUAGE: csharp
CODE:
```
await page.GetByRole(AriaRole.Link).ScreenshotAsync();
```

----------------------------------------

TITLE: Configuring Azure Pipelines for Playwright Tests (Java)
DESCRIPTION: This YAML configuration sets up Azure Pipelines to run Playwright tests in a containerized environment for a Java project. It uses the official Playwright Java Docker image, sets up Java 17, builds the project with Maven, and runs the tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_30

LANGUAGE: yml
CODE:
```
trigger:
- main

pool:
  vmImage: ubuntu-latest
container: mcr.microsoft.com/playwright/java:v%%VERSION%%-noble

steps:
- task: JavaToolInstaller@0
  inputs:
    versionSpec: '17'
    jdkArchitectureOption: 'x64'
    jdkSourceOption: AzureStorage

- script: mvn -B install -D skipTests --no-transfer-progress
  displayName: 'Build and install'
- script: mvn test
  displayName: 'Run tests'
```

----------------------------------------

TITLE: Handling Uncaught Page Errors with Playwright Events (Python Sync)
DESCRIPTION: Handles and prints uncaught exceptions in Playwright's synchronous Python API by registering a 'pageerror' event handler. The code sets up the handler and navigates to a page that throws a JavaScript error. Output is printed to the terminal, and Playwright sync Python bindings are required.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_11

LANGUAGE: python sync
CODE:
```
# Log all uncaught errors to the terminal
page.on("pageerror", lambda exc: print(f"uncaught exception: {exc}"))

# Navigate to a page with an exception.
page.goto("data:text/html,<script>throw new Error('test')<\/script>")
```

----------------------------------------

TITLE: Correct Parameter Passing Between Environments
DESCRIPTION: Shows the correct way to pass variables from test environment to browser context by explicitly passing them as arguments to the evaluate function.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
const data = 'some data';
// Pass |data| as a parameter.
const result = await page.evaluate(data => {
  window.myApp.use(data);
}, data);
```

LANGUAGE: java
CODE:
```
String data = "some data";
// Pass |data| as a parameter.
Object result = page.evaluate("data => {\n" +
  "  window.myApp.use(data);\n" +
  "}", data);
```

LANGUAGE: python
CODE:
```
data = "some data"
# Pass |data| as a parameter.
result = await page.evaluate("""data => {
  window.myApp.use(data)
}""", data)
```

LANGUAGE: csharp
CODE:
```
var data = "some data";
// Pass |data| as a parameter.
var result = await page.EvaluateAsync("data => { window.myApp.use(data); }", data);
```

----------------------------------------

TITLE: Handling Page Load Event in Multiple Languages
DESCRIPTION: These snippets show how to listen for the 'load' event on a page in JavaScript, Java, Python, and C#.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
page.once('load', () => console.log('Page loaded!'));
```

LANGUAGE: java
CODE:
```
page.onLoad(p -> System.out.println("Page loaded!"));
```

LANGUAGE: python
CODE:
```
page.once("load", lambda: print("page loaded!"))
```

LANGUAGE: csharp
CODE:
```
page.Load += (_, _) => Console.WriteLine("Page loaded!");
```

----------------------------------------

TITLE: Fulfilling Routes with Custom Responses in C#
DESCRIPTION: Demonstrates how to fulfill routes with custom responses using Playwright in C#. This example shows how to respond with a 404 status code and a custom message for all requests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_30

LANGUAGE: csharp
CODE:
```
await page.RouteAsync("**/*", route => route.FulfillAsync(new ()
{
    Status = 404,
    ContentType = "text/plain",
    Body = "Not Found!"
}));
```

----------------------------------------

TITLE: Waiting for URL Navigation in Java
DESCRIPTION: This snippet demonstrates how to use Frame.waitForURL to wait for navigation to a specific URL after clicking a link in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_51

LANGUAGE: java
CODE:
```
frame.click("a.delayed-navigation"); // Clicking the link will indirectly cause a navigation
frame.waitForURL("**/target.html");
```

----------------------------------------

TITLE: Configure HTML Reporter Output Folder (JS)
DESCRIPTION: Example configuration in playwright.config.ts to set the output directory for the generated HTML report to a custom folder instead of the default 'playwright-report'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_14

LANGUAGE: js
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: [['html', { outputFolder: 'my-report' }]],
});
```

----------------------------------------

TITLE: MSTest Test Class with Custom Context Options
DESCRIPTION: Example of an MSTest test class that customizes BrowserContext options including color scheme, viewport size, and base URL.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-csharp.md#2025-04-22_snippet_2

LANGUAGE: csharp
CODE:
```
using System.Threading.Tasks;
using Microsoft.Playwright;
using Microsoft.Playwright.MSTest;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace PlaywrightTests;

[TestClass]
public class ExampleTest : PageTest
{
    [TestMethod]
    public async Task TestWithCustomContextOptions()
    {
        // The following Page (and BrowserContext) instance has the custom colorScheme, viewport and baseURL set:
        await Page.GotoAsync("/login");
    }

    public override BrowserNewContextOptions ContextOptions()
    {
        return new BrowserNewContextOptions()
        {
            ColorScheme = ColorScheme.Light,
            ViewportSize = new()
            {
                Width = 1920,
                Height = 1080
            },
            BaseURL = "https://github.com",
        };
    }
}
```

----------------------------------------

TITLE: Handling Dialog Events with JavaScript in Playwright
DESCRIPTION: Example of handling a browser dialog event in Playwright using JavaScript. The code launches Chromium, sets up a dialog event listener that logs the message and dismisses the dialog, then triggers an alert via page evaluation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-dialog.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.

(async () => {
  const browser = await chromium.launch();
  const page = await browser.newPage();
  page.on('dialog', async dialog => {
    console.log(dialog.message());
    await dialog.dismiss();
  });
  await page.evaluate(() => alert('1'));
  await browser.close();
})();
```

----------------------------------------

TITLE: Handling Dialog Events with Java in Playwright
DESCRIPTION: Example of handling a browser dialog event in Playwright using Java. The code creates a Playwright instance, launches Chromium, registers a dialog handler that prints the message and dismisses the dialog, then triggers an alert.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-dialog.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      BrowserType chromium = playwright.chromium();
      Browser browser = chromium.launch();
      Page page = browser.newPage();
      page.onDialog(dialog -> {
        System.out.println(dialog.message());
        dialog.dismiss();
      });
      page.evaluate("alert('1')");
      browser.close();
    }
  }
}
```

----------------------------------------

TITLE: Assert Element In Viewport toBeInViewport Playwright Python
DESCRIPTION: Illustrates the usage of the new `LocatorAssertions.to_be_in_viewport` assertion in Playwright Python version 1.31. This assertion verifies if the element pointed to by the locator intersects the viewport, with an optional `ratio` parameter to specify the required intersection percentage.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_25

LANGUAGE: python
CODE:
```
from playwright.sync_api import expect

locator = page.get_by_role("button")

# Make sure at least some part of element intersects viewport.
expect(locator).to_be_in_viewport()

# Make sure element is fully outside of viewport.
expect(locator).not_to_be_in_viewport()

# Make sure that at least half of the element intersects viewport.
expect(locator).to_be_in_viewport(ratio=0.5)
```

----------------------------------------

TITLE: Using APIResponseAssertions to verify API response in Java
DESCRIPTION: Example of making a GET request to a website and asserting that the response is OK (status code 200-299) using Java in Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponseassertions.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
// ...
import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

public class TestPage {
  // ...
  @Test
  void navigatesToLoginPage() {
    // ...
    APIResponse response = page.request().get("https://playwright.dev");
    assertThat(response).isOK();
  }
}
```

----------------------------------------

TITLE: Using Async Fixtures with Playwright
DESCRIPTION: Example of configuring and using async fixtures with Playwright using pytest-playwright-asyncio and pytest-asyncio.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_16

LANGUAGE: python
CODE:
```
import pytest
from playwright.async_api import Page

@pytest.mark.asyncio(loop_scope="session")
async def test_foo(page: Page):
    await page.goto("https://github.com")
    # ...
```

----------------------------------------

TITLE: Waiting for and Accessing Popup Windows (Python Async)
DESCRIPTION: Demonstrates async context management in Playwright for Python to wait for popup creation. Uses 'async with' and expect_event to block until the popup appears, then evaluates its location. Requires an async environment and a valid page object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_15

LANGUAGE: python async
CODE:
```
async with page.expect_event("popup") as page_info:
    await page.get_by_text("open the popup").click()
popup = await page_info.value
print(await popup.evaluate("location.href"))
```

----------------------------------------

TITLE: Selecting Options from Dropdown using Frame.selectOption in Java
DESCRIPTION: Examples of how to select options from a dropdown element using the Frame.selectOption method in Java. Shows single selection by value/label or multiple selections.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_31

LANGUAGE: java
CODE:
```
// Single selection matching the value or label
frame.selectOption("select#colors", "blue");
// single selection matching both the value and the label
frame.selectOption("select#colors", new SelectOption().setLabel("Blue"));
// multiple selection
frame.selectOption("select#colors", new String[] {"red", "green", "blue"});
```

----------------------------------------

TITLE: Configuring Hooks for Vue Component Testing with Playwright
DESCRIPTION: Shows how to use beforeMount and afterMount hooks to configure the app for Vue component testing. It provides an example of setting up a router.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_14

LANGUAGE: javascript
CODE:
```
import { beforeMount, afterMount } from '@playwright/experimental-ct-vue/hooks';
import { router } from '../src/router';

export type HooksConfig = {
  enableRouting?: boolean;
}

beforeMount<HooksConfig>(async ({ app, hooksConfig }) => {
  if (hooksConfig?.enableRouting)
    app.use(router);
});
```

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/experimental-ct-vue';
import type { HooksConfig } from '../playwright';
import ProductsPage from './pages/ProductsPage.vue';

test('configure routing through hooks config', async ({ page, mount }) => {
  const component = await mount<HooksConfig>(ProductsPage, {
    hooksConfig: { enableRouting: true },
  });
  await expect(component.getByRole('link')).toHaveAttribute('href', '/products/42');
});
```

----------------------------------------

TITLE: Project Dependencies with Chrome Configuration
DESCRIPTION: Extended playwright config showing how to set up Chrome project with database dependencies and device configurations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  testDir: './tests',
  // ...
  projects: [
    {
      name: 'setup db',
      testMatch: /global\.setup\.ts/,
    },
    {
      name: 'chromium with db',
      use: { ...devices['Desktop Chrome'] },
      dependencies: ['setup db'],
    },
  ]
});
```

----------------------------------------

TITLE: Basic Playwright Trace Recording (C#)
DESCRIPTION: Demonstrates recording a Playwright trace in C#. It involves creating a Playwright instance, launching a browser, creating a context, starting tracing asynchronously with specified options (screenshots, snapshots), performing page navigation, and stopping the trace asynchronously, saving it to 'trace.zip'. Requires `async/await` and using declarations for resource management.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
using var playwright = await Playwright.CreateAsync();
var browser = await playwright.Chromium.LaunchAsync();
await using var context = await browser.NewContextAsync();
await context.Tracing.StartAsync(new()
{
  Screenshots = true,
  Snapshots = true
});
var page = await context.NewPageAsync();
await page.GotoAsync("https://playwright.dev");
await context.Tracing.StopAsync(new()
{
  Path = "trace.zip"
});
```

----------------------------------------

TITLE: Mocking API Endpoints in Python (Sync)
DESCRIPTION: Demonstrates intercepting and mocking API endpoints by handling network requests in synchronous Python. The example fulfills a request with custom status code and body data.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_11

LANGUAGE: python
CODE:
```
page.route(
    "**/api/fetch_data",
    lambda route: route.fulfill(status=200, body=test_data))
page.goto("https://example.com")
```

----------------------------------------

TITLE: Asserting Element Viewport Visibility with Playwright C#
DESCRIPTION: Demonstrates how to use the ToBeInViewportAsync assertion to check if a locator points to an element that intersects the viewport. It shows examples for checking any intersection, being fully outside, or intersecting by a specific ratio.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_27

LANGUAGE: C#
CODE:
```
var locator = Page.GetByRole(AriaRole.Button);

// Make sure at least some part of element intersects viewport.
await Expect(locator).ToBeInViewportAsync();

// Make sure element is fully outside of viewport.
await Expect(locator).Not.ToBeInViewportAsync();

// Make sure that at least half of the element intersects viewport.
await Expect(locator).ToBeInViewportAsync(new() { Ratio = 0.5 });
```

----------------------------------------

TITLE: Navigating with WaitUntilState.DOMContentLoaded in Playwright C#
DESCRIPTION: Illustrates how to use the WaitUntil option with Page.GotoAsync in Playwright C# to wait for the DOMContentLoaded event on the target frame.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_33

LANGUAGE: csharp
CODE:
```
await Page.GotoAsync("https://playwright.dev", new() { WaitUntil = WaitUntilState.DOMContentLoaded });
```

----------------------------------------

TITLE: Using APIResponseAssertions to verify API response in Python Sync
DESCRIPTION: Example of making a GET request to a website and asserting that the response is OK (status code 200-299) using Python's synchronous API in Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponseassertions.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
from playwright.sync_api import Page, expect

def test_navigates_to_login_page(page: Page) -> None:
    # ..
    response = page.request.get('https://playwright.dev')
    expect(response).to_be_ok()
```

----------------------------------------

TITLE: Sending Form URL-encoded Data in JavaScript
DESCRIPTION: Example of sending a POST request with URL-encoded form data using Playwright's API request context in JavaScript. The form data is passed in the form option and encoded with application/x-www-form-urlencoded content type.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
await request.post('https://example.com/api/findBook', {
  form: {
    title: 'Book Title',
    author: 'John Doe',
  }
});
```

----------------------------------------

TITLE: Locating Elements by ARIA Role
DESCRIPTION: Demonstrates locating elements by their ARIA roles and accessible names, supporting web accessibility standards.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_132

LANGUAGE: html
CODE:
```
<h3>Sign up</h3>
<label>
  <input type="checkbox" /> Subscribe
</label>
<br/>
<button>Submit</button>
```

LANGUAGE: javascript
CODE:
```
await expect(page.getByRole('heading', { name: 'Sign up' })).toBeVisible();

await page.getByRole('checkbox', { name: 'Subscribe' }).check();

await page.getByRole('button', { name: /submit/i }).click();
```

----------------------------------------

TITLE: Configuring Azure Pipelines for Playwright Tests (C#)
DESCRIPTION: This YAML configuration sets up Azure Pipelines to run Playwright tests in a containerized environment for a C# project. It uses the official Playwright .NET Docker image, sets up .NET SDK 8.0, builds the project, and runs the tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_31

LANGUAGE: yml
CODE:
```
trigger:
- main

pool:
  vmImage: ubuntu-latest
container: mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble

steps:
- task: UseDotNet@2
  inputs:
    packageType: sdk
    version: '8.0.x'
  displayName: 'Use .NET SDK'

- script: dotnet build --configuration Release
  displayName: 'Build'
- script: dotnet test --configuration Release
  displayName: 'Run tests'
```

----------------------------------------

TITLE: Configuring Playwright Test Execution
DESCRIPTION: Commands demonstrating how to configure Playwright test execution, including running in headed mode, specifying projects, and controlling parallelization.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-cli-js.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx playwright test --headed
```

LANGUAGE: bash
CODE:
```
npx playwright test --project=chromium
```

LANGUAGE: bash
CODE:
```
npx playwright test --workers=1
```

----------------------------------------

TITLE: Running Playwright Tests with Specific Keywords
DESCRIPTION: Execute tests with specific keywords in their file names by passing those keywords to the playwright test command.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
npx playwright test landing login
```

----------------------------------------

TITLE: Implementing Advanced Routing with Fallback in Playwright Java
DESCRIPTION: Provides an example of setting up multiple route handlers using `page.route`. The first handler removes a specific header, and the second handler aborts image requests or uses `route.fallback()` to pass control to the next handler.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_40

LANGUAGE: java
CODE:
```
// Remove a header from all requests.
page.route("**/*", route -> {
  Map<String, String> headers = new HashMap<>(route.request().headers());
  headers.remove("X-Secret");
  route.resume(new Route.ResumeOptions().setHeaders(headers));
});

// Abort all images.
page.route("**/*", route -> {
  if ("image".equals(route.request().resourceType()))
    route.abort();
  else
    route.fallback();
});
```

----------------------------------------

TITLE: Configuring GitHub Actions for Playwright Tests on Deployment (C#)
DESCRIPTION: This YAML configuration sets up GitHub Actions to run Playwright tests with C# after a successful deployment. It sets up the .NET environment, builds the project, installs Playwright, and runs the tests with the deployment URL as the base URL.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_20

LANGUAGE: yml
CODE:
```
name: Playwright Tests
on:
  deployment_status:
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    if: github.event.deployment_status.state == 'success'
    steps:
    - uses: actions/checkout@v4
    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - run: dotnet build
    - name: Ensure browsers are installed
      run: pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps
    - name: Run tests
      run: dotnet test
      env:
        # This might depend on your test-runner
        PLAYWRIGHT_TEST_BASE_URL: ${{ github.event.deployment_status.target_url }}
```

----------------------------------------

TITLE: Handling Cookie Dialogs with Playwright Python Locator Handler
DESCRIPTION: Provides an example of using `page.addLocatorHandler` to automatically close a cookie consent dialog when it appears during navigation or actions. The handler is set up once and triggered when the specified heading becomes visible.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_19

LANGUAGE: python
CODE:
```
# Setup the handler.
page.add_locator_handler(
    page.get_by_role("heading", name="Hej! You are in control of your cookies."),
    lambda: page.get_by_role("button", name="Accept all").click(),
)
# Write the test as usual.
page.goto("https://www.ikea.com/")
page.get_by_role("link", name="Collection of blue and white").click()
expect(page.get_by_role("heading", name="Light and easy")).to_be_visible()
```

----------------------------------------

TITLE: Using toEqual Method for Deep Equality Comparison
DESCRIPTION: Demonstrates the use of 'toEqual' method for comparing contents of objects or arrays. It performs a deep equality check rather than comparing references.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_17

LANGUAGE: javascript
CODE:
```
const value = { prop: 1 };
expect(value).toEqual({ prop: 1 });
```

----------------------------------------

TITLE: Splitting Playwright Tests into Different Projects
DESCRIPTION: Configuration that splits tests into separate projects based on file patterns. This example defines a 'Smoke' project for critical tests with no retries and a 'Default' project for all other tests with retries.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-projects-js.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  timeout: 60000, // Timeout is shared between all tests.
  projects: [
    {
      name: 'Smoke',
      testMatch: /.*smoke.spec.ts/,
      retries: 0,
    },
    {
      name: 'Default',
      testIgnore: /.*smoke.spec.ts/,
      retries: 2,
    },
  ],
});
```

----------------------------------------

TITLE: Filtering Elements by Not Having Child/Descendant in Playwright
DESCRIPTION: Demonstrates filtering elements to exclude those that contain specific content. The snippet uses the 'filter' method with 'hasNot' option to select list items that don't contain 'Product 2'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_21

LANGUAGE: javascript
CODE:
```
await expect(page
    .getByRole('listitem')
    .filter({ hasNot: page.getByText('Product 2') }))
    .toHaveCount(1);
```

LANGUAGE: java
CODE:
```
assertThat(page
    .getByRole(AriaRole.LISTITEM)
    .filter(new Locator.FilterOptions().setHasNot(page.getByText("Product 2"))))
    .hasCount(1);
```

LANGUAGE: python-async
CODE:
```
await expect(
    page.get_by_role("listitem").filter(
        has_not=page.get_by_role("heading", name="Product 2")
    )
).to_have_count(1)
```

LANGUAGE: python-sync
CODE:
```
expect(
    page.get_by_role("listitem").filter(
        has_not=page.get_by_role("heading", name="Product 2")
    )
).to_have_count(1)
```

LANGUAGE: csharp
CODE:
```
await Expect(Page
    .GetByRole(AriaRole.Listitem)
    .Filter(new() {
        HasNot = page.GetByRole(AriaRole.Heading, new() { Name = "Product 2" })
    }))
    .ToHaveCountAsync(1);
```

----------------------------------------

TITLE: Configuring Playwright Wait For Function Timeout (Python/Java/CSharp)
DESCRIPTION: Sets the maximum waiting time in milliseconds for `waitForFunction` operations in Playwright for Python, Java, and C#. It defaults to 30000 ms (30 seconds). A value of 0 disables the timeout. The default can be changed using `BrowserContext.setDefaultTimeout` or `Page.setDefaultTimeout` methods.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_3

LANGUAGE: markdown
CODE:
```
- `timeout` <[float]>
```

----------------------------------------

TITLE: Sharding Playwright Tests in CircleCI (JavaScript)
DESCRIPTION: This YAML configuration demonstrates how to set up sharding for Playwright tests in CircleCI using JavaScript. It uses parallelism and adjusts the shard index to run tests across multiple nodes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_33

LANGUAGE: yml
CODE:
```
playwright-job-name:
  executor: pw-noble-development
  parallelism: 4
  steps:
    - run: SHARD="$((${CIRCLE_NODE_INDEX}+1))"; npx playwright test --shard=${SHARD}/${CIRCLE_NODE_TOTAL}
```

----------------------------------------

TITLE: Set Global Assertion Timeout in Playwright C# MSTest
DESCRIPTION: Configures the default timeout for all Playwright assertions globally within an MSTest test class in C#. This is achieved by calling `SetDefaultExpectTimeout` in the `[ClassInitialize]` method of a class inheriting from `PageTest`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-csharp-java-python.md#_snippet_3

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using Microsoft.Playwright.MSTest;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace PlaywrightTests;

[TestClass]
public class UnitTest1 : PageTest
{
    [ClassInitialize]
    public static void GlobalSetup(TestContext context)
    {
        SetDefaultExpectTimeout(10_000);
    }
    // ...
}
```

----------------------------------------

TITLE: Defining Custom Test Options in JavaScript
DESCRIPTION: This code defines a custom test option 'person' with a default value, which can be overridden in the configuration. It extends the base test object with this new option.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
const base = require('@playwright/test');

exports.test = base.test.extend({
  // Define an option and provide a default value.
  // We can later override it in the config.
  person: ['John', { option: true }],
});
```

----------------------------------------

TITLE: Setting Input Files in Playwright with JavaScript
DESCRIPTION: Shows various ways to upload files using setInputFiles method in JavaScript, including uploading a single file, multiple files, a directory, removing selected files, and uploading a buffer from memory.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_89

LANGUAGE: javascript
CODE:
```
// Select one file
await page.getByLabel('Upload file').setInputFiles(path.join(__dirname, 'myfile.pdf'));

// Select multiple files
await page.getByLabel('Upload files').setInputFiles([
  path.join(__dirname, 'file1.txt'),
  path.join(__dirname, 'file2.txt'),
]);

// Select a directory
await page.getByLabel('Upload directory').setInputFiles(path.join(__dirname, 'mydir'));

// Remove all the selected files
await page.getByLabel('Upload file').setInputFiles([]);

// Upload buffer from memory
await page.getByLabel('Upload file').setInputFiles({
  name: 'file.txt',
  mimeType: 'text/plain',
  buffer: Buffer.from('this is test')
});
```

----------------------------------------

TITLE: Running Playwright Tests on Specific Browser
DESCRIPTION: Execute tests on a specific browser using the --project flag followed by the browser name.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
npx playwright test --project webkit
```

----------------------------------------

TITLE: Handling Newsletter Dialog with Locator Handler in Java
DESCRIPTION: Java implementation of a locator handler that automatically closes a newsletter signup dialog when it appears. The handler detects text matching 'Sign up to the newsletter' and clicks the 'No thanks' button.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_77

LANGUAGE: java
CODE:
```
// Setup the handler.
page.addLocatorHandler(page.getByText("Sign up to the newsletter"), () -> {
  page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("No thanks")).click();
});

// Write the test as usual.
page.navigate("https://example.com");
page.getByRole("button", Page.GetByRoleOptions().setName("Start here")).click();
```

----------------------------------------

TITLE: Running Last Failed Playwright Tests
DESCRIPTION: Execute only the tests that failed in the last test run using the --last-failed flag.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
npx playwright test --last-failed
```

----------------------------------------

TITLE: Limiting Workers in Playwright Test Configuration (TypeScript)
DESCRIPTION: Configures the number of worker processes for Playwright Test, limiting workers on CI environments while using default locally.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  // Limit the number of workers on CI, use default locally
  workers: process.env.CI ? 2 : undefined,
});
```

----------------------------------------

TITLE: Recording Traces with MSTest in Playwright C#
DESCRIPTION: Implements trace recording in MSTest tests using Playwright. Configures tracing with screenshots, snapshots, and source capturing, saving traces to a specified directory.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer.md#2025-04-22_snippet_7

LANGUAGE: csharp
CODE:
```
using System.Text.RegularExpressions;
using Microsoft.Playwright;
using Microsoft.Playwright.MSTest;

namespace PlaywrightTestsMSTest;

[TestClass]
public class UnitTest1 : PageTest
{
    [TestInitialize]
    public async Task TestInitialize()
    {
         await Context.Tracing.StartAsync(new()
        {
            Title = TestContext.TestName,
            Screenshots = true,
            Snapshots = true,
            Sources = true
        });
    }

    [TestCleanup]
    public async Task TestCleanup()
    {
        await Context.Tracing.StopAsync(new()
        {
            Path = Path.Combine(
                Environment.CurrentDirectory,
                "playwright-traces",
                $"{TestContext.FullyQualifiedTestClassName}.zip"
            )
        });
    }

    [TestMethod]
    public async Task TestYourOnlineShop()
    {
        // ...
    }
}
```

----------------------------------------

TITLE: Aborting Network Requests in JavaScript
DESCRIPTION: Shows how to abort specific network requests in JavaScript. Examples include aborting image requests and conditionally aborting requests based on resource type.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_22

LANGUAGE: javascript
CODE:
```
await page.route('**/*.{png,jpg,jpeg}', route => route.abort());

// Abort based on the request type
await page.route('**/*', route => {
  return route.request().resourceType() === 'image' ? route.abort() : route.continue();
});
```

----------------------------------------

TITLE: Viewing Recorded Playwright Traces
DESCRIPTION: Command to open the Playwright Trace Viewer GUI tool, which allows examination of recorded traces including DOM state, page rendering, and network activity.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_72

LANGUAGE: bash
CODE:
```
npx playwright show-trace trace.zip
```

----------------------------------------

TITLE: Configuring Global Teardown in Playwright Test
DESCRIPTION: Configuration to specify a global teardown file that runs after all tests, useful for environment cleanup.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  globalTeardown: './global-teardown',
});
```

----------------------------------------

TITLE: Waiting for Specific URL After Click in Python (Async)
DESCRIPTION: Demonstrates how to explicitly wait for navigation to a specific URL pattern after clicking an element using Playwright's async API in Python.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
await page.get_by_text("Click me").click()
await page.wait_for_url("**/login")
```

----------------------------------------

TITLE: Setting Form Fields with Files in Java
DESCRIPTION: Example of using the set method to add various types of fields to a FormData object in Java, including text values, file uploads using file paths, and file uploads using FilePayload objects.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-formdata.md#2025-04-22_snippet_3

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.options.FormData;
// ...
FormData form = FormData.create()
    // Only name and value are set.
    .set("firstName", "John")
    // Name and value are set, filename and Content-Type are inferred from the file path.
    .set("profilePicture1", Paths.get("john.jpg"))
    // Name, value, filename and Content-Type are set.
    .set("profilePicture2", new FilePayload("john.jpg", "image/jpeg", Files.readAllBytes(Paths.get("john.jpg"))))
    .set("age", 30);
page.request().post("http://localhost/submit", RequestOptions.create().setForm(form));
```

----------------------------------------

TITLE: Iterating Over Multiple Locators in Playwright Java
DESCRIPTION: Shows how to use Locator.all() to get a list of all elements matching a locator and then iterate through them to perform an action, such as checking multiple checkboxes. Requires Playwright Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_31

LANGUAGE: Java
CODE:
```
// Check all checkboxes!
Locator checkboxes = page.getByRole(AriaRole.CHECKBOX);
for (Locator checkbox : checkboxes.all())
  checkbox.check();
```

----------------------------------------

TITLE: Grouping Tests in Playwright
DESCRIPTION: Demonstrates how to group related tests using test.describe() for logical organization.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-annotations-js.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.describe('two tests', () => {
  test('one', async ({ page }) => {
    // ...
  });

  test('two', async ({ page }) => {
    // ...
  });
});
```

----------------------------------------

TITLE: Configuring Test Retries in Playwright Configuration File
DESCRIPTION: This JavaScript snippet demonstrates how to configure test retries in the Playwright configuration file. It sets the number of retry attempts for failing tests to 3.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-retries-js.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  // Give failing tests 3 retry attempts
  retries: 3,
});
```

----------------------------------------

TITLE: Taking Screenshot with WebKit
DESCRIPTION: Script showing how to navigate to a website and take a screenshot using WebKit browser
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-python.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
from playwright.sync_api import sync_playwright

with sync_playwright() as p:
    browser = p.webkit.launch()
    page = browser.new_page()
    page.goto("https://playwright.dev/")
    page.screenshot(path="example.png")
    browser.close()
```

----------------------------------------

TITLE: Inserting Text with Keyboard.insertText in Playwright (Java)
DESCRIPTION: Demonstrates using `page.keyboard().insertText()` in Java to dispatch an `input` event with the specified text ('嗨'). This method bypasses `keydown`, `keyup`, and `keypress` events and is useful for directly inserting text, including non-ASCII characters. Modifier keys do not affect this method.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_16

LANGUAGE: java
CODE:
```
```java
page.keyboard().insertText("嗨");
```
```

----------------------------------------

TITLE: Asserting Accessible Description with Playwright C#
DESCRIPTION: Shows how to use the `LocatorAssertions.toHaveAccessibleDescription` method in C# to check if a locator element has a particular accessible description. This helps in validating accessibility attributes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_14

LANGUAGE: C#
CODE:
```
var locator = Page.GetByRole(AriaRole.Button);
await Expect(locator).ToHaveAccessibleDescriptionAsync("Upload a photo");
```

----------------------------------------

TITLE: Implementing Fail-Fast Strategy for Playwright Tests in GitHub Actions
DESCRIPTION: This YAML configuration sets up a fail-fast strategy for Playwright tests in GitHub Actions. It runs tests on changed files first using the --only-changed flag, followed by a full test run. This approach provides faster feedback on pull requests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_21

LANGUAGE: yml
CODE:
```
name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        # Force a non-shallow checkout, so that we can reference $GITHUB_BASE_REF.
        # See https://github.com/actions/checkout for more details.
        fetch-depth: 0
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    - name: Run changed Playwright tests
      run: npx playwright test --only-changed=$GITHUB_BASE_REF
      if: github.event_name == 'pull_request'
    - name: Run Playwright tests
      run: npx playwright test
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
```

----------------------------------------

TITLE: Using TestInfo.outputPath with Segments in Playwright JS
DESCRIPTION: This snippet demonstrates how to use testInfo.outputPath with multiple path segments to create a nested directory structure within the test's unique output directory and write a file there. It requires the fs module for file operations. The generated path is guaranteed to be within the test's designated output directory.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfo.md#_snippet_4

LANGUAGE: js
CODE:
```
import { test, expect } from '@playwright/test';
import fs from 'fs';

test('example test', async ({}, testInfo) => {
  const file = testInfo.outputPath('dir', 'temporary-file.txt');
  await fs.promises.writeFile(file, 'Put some data to the dir/temporary-file.txt', 'utf8');
});
```

----------------------------------------

TITLE: Direct Browser Control Example - Python
DESCRIPTION: Python example showing direct browser control using Playwright API
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_18

LANGUAGE: python
CODE:
```
from playwright.sync_api import sync_playwright

with sync_playwright() as p:
    # Channel can be "chrome", "msedge", "chrome-beta", "msedge-beta" or "msedge-dev".
    browser = p.chromium.launch(channel="msedge")
    page = browser.new_page()
    page.goto("https://playwright.dev")
    print(page.title())
    browser.close()
```

----------------------------------------

TITLE: Using toBeLessThanOrEqual Method for Numeric Comparisons
DESCRIPTION: Shows how to use the 'toBeLessThanOrEqual' method to check if a value is less than or equal to another value.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
const value = 42;
expect(value).toBeLessThanOrEqual(42);
```

----------------------------------------

TITLE: Sending Form URL-encoded Data in Python
DESCRIPTION: Example of sending a POST request with URL-encoded form data using Playwright's API request context in Python. The form data is passed as a dictionary to the form parameter and encoded appropriately.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_11

LANGUAGE: python
CODE:
```
formData = {
    "title": "Book Title",
    "body": "John Doe",
}
api_request_context.post("https://example.com/api/findBook", form=formData)
```

----------------------------------------

TITLE: Locating Image by Alt Text in HTML
DESCRIPTION: HTML example showing an image with alt text attribute that can be used for locating.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_6

LANGUAGE: html
CODE:
```
<img alt="playwright logo" src="/img/playwright-logo.svg" width="100" />
```

----------------------------------------

TITLE: Performing HTTP Requests Using Playwright's APIRequest in JavaScript
DESCRIPTION: This standalone script shows how to create an API request context manually with Playwright for higher control, including making HTTP requests to create and delete a GitHub repository. Requires Playwright and a GitHub token.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-js.md#2025-04-22_snippet_4

LANGUAGE: JavaScript
CODE:
```
import { request } from '@playwright/test';
const REPO = 'test-repo-1';
const USER = 'github-username';

(async () => {
  // Create a context that will issue http requests.
  const context = await request.newContext({
    baseURL: 'https://api.github.com',
  });

  // Create a repository.
  await context.post('/user/repos', {
    headers: {
      'Accept': 'application/vnd.github.v3+json',
      // Add GitHub personal access token.
      'Authorization': `token ${process.env.API_TOKEN}`,
    },
    data: {
      name: REPO
    }
  });

  // Delete a repository.
  await context.delete(`/repos/${USER}/${REPO}`, {
    headers: {
      'Accept': 'application/vnd.github.v3+json',
      // Add GitHub personal access token.
      'Authorization': `token ${process.env.API_TOKEN}`,
    }
  });
})();
```

----------------------------------------

TITLE: Setting Up Routes on Browser Context in Python (Sync)
DESCRIPTION: Demonstrates setting up route handling on the entire browser context in synchronous Python. This method applies to popup windows and opened links.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_15

LANGUAGE: python
CODE:
```
context.route(
    "**/api/login",
    lambda route: route.fulfill(status=200, body="accept"))
page.goto("https://example.com")
```

----------------------------------------

TITLE: Running Playwright Codegen from Command Line - C# - Bash
DESCRIPTION: This PowerShell command launches Playwright's code generator from the .NET build output. The path should be adjusted to your build's runtime version (\"netX\"). Requires the C# version of Playwright to be built and available, plus PowerShell support. Takes a URL parameter as the target for recorded actions, and opens the interactive test recording windows.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
pwsh bin/Debug/netX/playwright.ps1 codegen demo.playwright.dev/todomvc
```

----------------------------------------

TITLE: Incorrect Dialog Handling Causing Stall (JavaScript)
DESCRIPTION: Demonstrates incorrect usage where a 'dialog' listener is registered but does not handle the dialog (e.g., by accepting or dismissing it). This causes the script execution to hang at the action that triggered the dialog because web dialogs are modal.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
```js
page.on('dialog', dialog => console.log(dialog.message()));
await page.getByRole('button').click(); // Will hang here
```
```

----------------------------------------

TITLE: Waiting for Navigation After Timeout Click in C#
DESCRIPTION: Demonstrates how to wait for navigation that happens after a timeout-based click in C#. The method continues execution after navigation has finished.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_134

LANGUAGE: csharp
CODE:
```
await page.RunAndWaitForNavigationAsync(async () =>
{
    // This action triggers the navigation after a timeout.
    await page.GetByText("Navigate after timeout").ClickAsync();
});

// The method continues after navigation has finished
```

----------------------------------------

TITLE: Combine Playwright Fixtures from Multiple Modules - JS
DESCRIPTION: Demonstrates how to use the `mergeTests` utility from `@playwright/test` to combine custom fixtures defined in separate modules. This allows a single test file to import and utilize fixtures from multiple sources simultaneously.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_23

LANGUAGE: TypeScript
CODE:
```
import { mergeTests } from '@playwright/test';
import { test as dbTest } from 'database-test-utils';
import { test as a11yTest } from 'a11y-test-utils';

export const test = mergeTests(dbTest, a11yTest);
```

LANGUAGE: TypeScript
CODE:
```
import { test } from './fixtures';

test('passes', async ({ database, page, a11y }) => {
  // use database and a11y fixtures.
});
```

----------------------------------------

TITLE: Using ElementHandle.waitForSelector in Python (async)
DESCRIPTION: Demonstrates the usage of waitForSelector method on an ElementHandle in async Python to wait for a child element to appear in the DOM.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_46

LANGUAGE: python
CODE:
```
await page.set_content("<div><span></span></div>")
div = await page.query_selector("div")
# waiting for the "span" selector relative to the div.
span = await div.wait_for_selector("span", state="attached")
```

----------------------------------------

TITLE: Running Playwright Docker for Java E2E Tests
DESCRIPTION: Command to run the Playwright Docker container for Java end-to-end testing where code is trusted.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
docker run -it --rm --ipc=host mcr.microsoft.com/playwright/java:v%%VERSION%%-noble /bin/bash
```

----------------------------------------

TITLE: Simple Playwright Fixture Usage in JUnit
DESCRIPTION: Shows basic usage of Playwright fixtures in JUnit tests using the @UsePlaywright annotation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/junit-java.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
@UsePlaywright
public class TestExample {

  @Test
  void basicTest(Page page) {
    page.navigate("https://playwright.dev/");

    assertThat(page).hasTitle(Pattern.compile("Playwright"));
  }
}
```

----------------------------------------

TITLE: Starting and Stopping Chromium Tracing with Playwright (async) - Python
DESCRIPTION: Shows usage of Playwright's browser tracing methods in Python with async syntax. The await browser.start_tracing function begins a new trace for the given page and writes output to the specified path. After navigation, await browser.stop_tracing completes the capture. Requires the async Playwright package for Python and asyncio-compatible code. Accepts page and path as inputs, returning a trace file buffer. Options for screenshots and categories are available.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_17

LANGUAGE: python
CODE:
```
await browser.start_tracing(page, path="trace.json")
await page.goto("https://www.google.com")
await browser.stop_tracing()
```

----------------------------------------

TITLE: Handling a One-Off Dialog Event in Playwright (Java)
DESCRIPTION: Demonstrates using `page.onceDialog` in Playwright for Java to register a handler that executes only the first time a dialog event occurs. The lambda expression provided handles the dialog by accepting it with the value '2021', triggered by `page.evaluate`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_16

LANGUAGE: java
CODE:
```
```java
page.onceDialog(dialog -> dialog.accept("2021"));
page.evaluate("prompt('Enter a number:')");
```
```

----------------------------------------

TITLE: Running Java Tests with Console Debugging
DESCRIPTION: Commands to run Playwright Java tests with console debugging enabled, including setting the Java source directories for proper source mapping.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
# Source directories in the list are separated by : on macos and linux and by ; on win.
PWDEBUG=console PLAYWRIGHT_JAVA_SRC=<java source dirs> mvn test
```

LANGUAGE: batch
CODE:
```
# Source directories in the list are separated by : on macos and linux and by ; on win.
set PLAYWRIGHT_JAVA_SRC=<java source dirs>
set PWDEBUG=console
mvn test
```

LANGUAGE: powershell
CODE:
```
# Source directories in the list are separated by : on macos and linux and by ; on win.
$env:PLAYWRIGHT_JAVA_SRC="<java source dirs>"
$env:PWDEBUG=console
mvn test
```

----------------------------------------

TITLE: Setting Geolocation for Specific Test in Playwright
DESCRIPTION: Configures geolocation and required permissions for a specific test using Playwright Test. This enables testing location-based features by emulating a specific geographic position.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_44

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.use({
  geolocation: { longitude: 41.890221, latitude: 12.492348 },
  permissions: ['geolocation'],
});

test('my test with geolocation', async ({ page }) => {
  // ...
});
```

----------------------------------------

TITLE: Setting Locale and Timezone via Context Options (JavaScript Library)
DESCRIPTION: This snippet shows how to create a new browser context with a specific locale (`de-DE`) and timezone (`Europe/Berlin`) using the Playwright JavaScript library. These options are passed directly to `browser.newContext`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_22

LANGUAGE: javascript
CODE:
```
```js tab=js-library
const context = await browser.newContext({
  locale: 'de-DE',
  timezoneId: 'Europe/Berlin',
});
```
```

----------------------------------------

TITLE: Saving a Downloaded File using saveAs in Playwright (Java)
DESCRIPTION: This snippet shows the Java syntax for calling `download.saveAs()`. It uses `Paths.get()` to construct the file path and `download.suggestedFilename()` for the file name. Assumes a `Download` object is already available.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-download.md#2025-04-22_snippet_6

LANGUAGE: java
CODE:
```
download.saveAs(Paths.get("/path/to/save/at/", download.suggestedFilename()));
```

----------------------------------------

TITLE: Automatic Scrolling with Element Interaction
DESCRIPTION: Demonstrates Playwright's automatic scrolling behavior when interacting with elements. No explicit scroll commands needed for basic interactions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
await page.getByRole('button').click();
```

LANGUAGE: java
CODE:
```
page.getByRole(AriaRole.BUTTON).click();
```

LANGUAGE: python
CODE:
```
await page.get_by_role("button").click()
```

LANGUAGE: csharp
CODE:
```
await page.GetByRole(AriaRole.Button).ClickAsync();
```

----------------------------------------

TITLE: JavaScript Browser Preload Script
DESCRIPTION: Example of a preload script that mocks Math.random() function
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
// preload.js
Math.random = () => 42;
```

----------------------------------------

TITLE: Using toBeGreaterThanOrEqual Method for Numeric Comparisons
DESCRIPTION: Demonstrates the use of 'toBeGreaterThanOrEqual' method to check if a value is greater than or equal to another value.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
const value = 42;
expect(value).toBeGreaterThanOrEqual(42);
```

----------------------------------------

TITLE: Running Playwright Docker for JavaScript E2E Tests
DESCRIPTION: Command to run the Playwright Docker container for JavaScript end-to-end testing where code is trusted.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
docker run -it --rm --ipc=host mcr.microsoft.com/playwright:v%%VERSION%%-noble /bin/bash
```

----------------------------------------

TITLE: Querying All Text Contents with Playwright JavaScript
DESCRIPTION: Obtains the `textContent` property from every node matched by the 'link' role selector with Playwright's JS API. Returns an array of textContent strings.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_10

LANGUAGE: JavaScript
CODE:
```
const texts = await page.getByRole('link').allTextContents();
```

----------------------------------------

TITLE: Configuring Multiple Test Projects with Different Directories in Playwright
DESCRIPTION: Shows how to configure multiple test projects in Playwright, including smoke tests for different browsers and a separate project for Chrome stable. Each project uses a different test directory.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testproject.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'Smoke Chromium',
      testDir: './smoke-tests',
      use: {
        browserName: 'chromium',
      }
    },
    {
      name: 'Smoke WebKit',
      testDir: './smoke-tests',
      use: {
        browserName: 'webkit',
      }
    },
    {
      name: 'Smoke Firefox',
      testDir: './smoke-tests',
      use: {
        browserName: 'firefox',
      }
    },
    {
      name: 'Chrome Stable',
      testDir: './',
      use: {
        browserName: 'chromium',
        channel: 'chrome',
      }
    },
  ],
});
```

----------------------------------------

TITLE: Using ToHaveURLAsync Assertion in C#
DESCRIPTION: Example of using ToHaveURLAsync assertion in C# to verify page URL matches a regular expression pattern. This checks if the page URL contains 'checkout'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_18

LANGUAGE: csharp
CODE:
```
await Expect(Page).ToHaveURLAsync(new Regex(".*checkout"));
```

----------------------------------------

TITLE: Upload File Buffer from Memory in Python
DESCRIPTION: Demonstrates how to upload a file buffer directly from memory using Playwright's Python API. The code creates a file with specified name, MIME type, and content buffer.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_93

LANGUAGE: python
CODE:
```
page.get_by_label("Upload file").set_input_files(
    files=[
        {"name": "test.txt", "mimeType": "text/plain", "buffer": b"this is a test"}
    ],
)
```

----------------------------------------

TITLE: Overriding isMobile in Device Emulation Config (JavaScript)
DESCRIPTION: This snippet demonstrates overriding the default `isMobile` property provided by a device preset in the Playwright Test configuration (`playwright.config.ts`). It spreads the 'Desktop Chrome' device settings and then explicitly sets `isMobile` to `false`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
```js title="playwright.config.ts"
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'chromium',
      use: {
        ...devices['Desktop Chrome'],
        // It is important to define the `isMobile` property after destructuring `devices`,
        // since devices also define the `isMobile` for that device.
        isMobile: false,
      },
    },
  ]
});
```
```

----------------------------------------

TITLE: Configuring Server Timeout in Playwright
DESCRIPTION: Configuration example showing how to set a custom timeout for the web server startup process.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-webserver-js.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  webServer: {
    command: 'npm run start',
    url: 'http://localhost:3000',
    reuseExistingServer: !process.env.CI,
    timeout: 120 * 1000,
  },
});
```

----------------------------------------

TITLE: Recording Trace with Pytest Command
DESCRIPTION: Shows how to enable trace recording using the Pytest CLI flag. The trace will be saved as trace.zip in the test-results directory.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-java-python.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
pytest --tracing on
```

----------------------------------------

TITLE: Saving Authentication State with Playwright Codegen for Python
DESCRIPTION: Command to generate code for GitHub while saving authentication state (cookies, localStorage, IndexedDB) to auth.json using Python. This allows reusing authentication in subsequent test recordings.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_22

LANGUAGE: bash
CODE:
```
playwright codegen github.com/microsoft/playwright --save-storage=auth.json
```

----------------------------------------

TITLE: Hover and Click on Locator Object in CSharp
DESCRIPTION: Shows how to use locators in CSharp to hover and click a text element. Each interaction dynamically fetches the DOM element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_14

LANGUAGE: CSharp
CODE:
```
var locator = page.GetByText("Submit");
await locator.HoverAsync();
await locator.ClickAsync();
```

----------------------------------------

TITLE: Filtering Locator by Text Content - Playwright Java
DESCRIPTION: Illustrates the use of the Locator.filter method to refine an existing locator. It first finds all buttons and then filters the results to find the one containing the text 'Submit'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_45

LANGUAGE: Java
CODE:
```
Locator buttonsLocator = page.locator("role=button");
// ...
Locator submitButton = buttonsLocator.filter(new Locator.FilterOptions().setHasText("Submit"));
submitButton.click();
```

----------------------------------------

TITLE: Filtering Locators by Not Having Text using Playwright
DESCRIPTION: This code demonstrates how to filter locators by not having specific text and assert the count using Playwright in different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_18

LANGUAGE: javascript
CODE:
```
await expect(page.getByRole('listitem').filter({ hasNotText: 'Out of stock' })).toHaveCount(5);
```

LANGUAGE: java
CODE:
```
assertThat(page.getByRole(AriaRole.LISTITEM)
    .filter(new Locator.FilterOptions().setHasNotText("Out of stock")))
    .hasCount(5);
```

LANGUAGE: python
CODE:
```
await expect(page.get_by_role("listitem").filter(has_not_text="Out of stock")).to_have_count(5)
```

LANGUAGE: csharp
CODE:
```
await Expect(Page.getByRole(AriaRole.Listitem).Filter(new() { HasNotText = "Out of stock" }))
    .ToHaveCountAsync(5);
```

----------------------------------------

TITLE: Waiting for and Accessing Popup Windows (Java)
DESCRIPTION: Illustrates Playwright for Java's waitForPopup to handle popups. Clicks UI to trigger the popup, acquires the page object for the popup, and evaluates its URL. Requires Playwright Java context and a clickable element matching the locator.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_14

LANGUAGE: java
CODE:
```
Page popup = page.waitForPopup(() -> {
  page.getByText("open the popup").click();
});
System.out.println(popup.evaluate("location.href"));
```

----------------------------------------

TITLE: Configuring Default Screenshot Options in Playwright Config (JavaScript)
DESCRIPTION: This snippet demonstrates how to set default options for screenshot comparisons in the Playwright configuration file, applying to all tests in the project.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-snapshots-js.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';
export default defineConfig({
  expect: {
    toHaveScreenshot: { maxDiffPixels: 100 },
  },
});
```

----------------------------------------

TITLE: Interacting with Page Elements in Playwright (Python)
DESCRIPTION: Demonstrates how to create a locator and use it to click an element on the page. Playwright automatically waits for the element to be actionable before performing the click.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-python.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
# Create a locator.
get_started = page.get_by_role("link", name="Get started")

# Click it.
get_started.click()
```

----------------------------------------

TITLE: Declaring a Focused Test Group with Test.describe.only in JavaScript
DESCRIPTION: Shows how to use test.describe.only to declare a focused group of tests. If there are some focused tests or suites, all of them will be run but nothing else.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_19

LANGUAGE: javascript
CODE:
```
test.describe.only('focused group', () => {
  test('in the focused group', async ({ page }) => {
    // This test will run
  });
});
test('not in the focused group', async ({ page }) => {
  // This test will not run
});
```

----------------------------------------

TITLE: Asserting Accessible Name with Playwright Python
DESCRIPTION: Demonstrates how to use the `toHaveAccessibleName` assertion on a Locator object to verify if an element has a specific accessible name. Requires a Playwright page and locator.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_12

LANGUAGE: python
CODE:
```
locator = page.get_by_role("button")
expect(locator).to_have_accessible_name("Submit")
```

----------------------------------------

TITLE: Basic Playwright Test Example with NUnit
DESCRIPTION: Demonstrates a basic test setup using Playwright with NUnit, including page navigation and assertions. Shows how to check page title and interact with page elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-csharp.md#2025-04-22_snippet_0

LANGUAGE: csharp
CODE:
```
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Microsoft.Playwright;
using Microsoft.Playwright.NUnit;
using NUnit.Framework;

namespace PlaywrightTests;

[Parallelizable(ParallelScope.Self)]
[TestFixture]
public class ExampleTest : PageTest
{
    [Test]
    public async Task HasTitle()
    {
        await Page.GotoAsync("https://playwright.dev");

        // Expect a title "to contain" a substring.
        await Expect(Page).ToHaveTitleAsync(new Regex("Playwright"));
    }

    [Test]
    public async Task GetStartedLink()
    {
        await Page.GotoAsync("https://playwright.dev");

        // Click the get started link.
        await Page.GetByRole(AriaRole.Link, new() { Name = "Get started" }).ClickAsync();

        // Expects page to have a heading with the name of Installation.
        await Expect(Page.GetByRole(AriaRole.Heading, new() { Name = "Installation" })).ToBeVisibleAsync();
    } 
}
```

----------------------------------------

TITLE: Simulating Text Input using Keyboard.PressAsync in Playwright (C#)
DESCRIPTION: This C# snippet demonstrates inserting text ('嗨') using `page.Keyboard.PressAsync`. Although presented in the context of `insertText`, `PressAsync` typically simulates full key press events (`keydown`, `keypress`/`input`, `keyup`). It can be used for inserting characters, including non-ASCII ones.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_19

LANGUAGE: csharp
CODE:
```
```csharp
await page.Keyboard.PressAsync("嗨");
```
```

----------------------------------------

TITLE: Catching TimeoutError in Playwright (Java)
DESCRIPTION: This Java example demonstrates using the Playwright library (`com.microsoft.playwright`) to launch a Firefox browser and create a page. It shows how to set a timeout of 100ms for a click operation on the 'Example' locator using `Locator.ClickOptions` and how to catch the specific `com.microsoft.playwright.TimeoutError` if the operation exceeds this limit, printing "Timeout!" to the console.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-timeouterror.md#2025-04-22_snippet_3

LANGUAGE: java
CODE:
```
```java
package org.example;

import com.microsoft.playwright.*;

public class TimeoutErrorExample {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      Browser browser = playwright.firefox().launch();
      BrowserContext context = browser.newContext();
      Page page = context.newPage();
      try {
        page.locator("text=Example").click(new Locator.ClickOptions().setTimeout(100));
      } catch (TimeoutError e) {
        System.out.println("Timeout!");
      }
    }
  }
}
```
```

----------------------------------------

TITLE: Selecting Options from Dropdown using Frame.select_option in Python (Sync)
DESCRIPTION: Examples of how to select options from a dropdown element using the Frame.select_option method in Python's synchronous mode. Shows single and multiple selections.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_33

LANGUAGE: python
CODE:
```
# Single selection matching the value or label
frame.select_option("select#colors", "blue")
# single selection matching both the label
frame.select_option("select#colors", label="blue")
# multiple selection
frame.select_option("select#colors", value=["red", "green", "blue"])
```

----------------------------------------

TITLE: Handling Console Events - Multiple Languages
DESCRIPTION: Demonstrates how to capture and process console messages from the browser context, including handling different argument types and formats.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
context.on('console', async msg => {
  const values = [];
  for (const arg of msg.args())
    values.push(await arg.jsonValue());
  console.log(...values);
});
await page.evaluate(() => console.log('hello', 5, { foo: 'bar' }));
```

LANGUAGE: java
CODE:
```
context.onConsoleMessage(msg -> {
  for (int i = 0; i < msg.args().size(); ++i)
    System.out.println(i + ": " + msg.args().get(i).jsonValue());
});
page.evaluate("() => console.log('hello', 5, { foo: 'bar' })");
```

LANGUAGE: python
CODE:
```
def print_args(msg):
    for arg in msg.args:
        print(arg.json_value())

context.on("console", print_args)
page.evaluate("console.log('hello', 5, { foo: 'bar' })")
```

LANGUAGE: csharp
CODE:
```
context.Console += async (_, msg) =>
{
    foreach (var arg in msg.Args)
        Console.WriteLine(await arg.JsonValueAsync<object>());
};

await page.EvaluateAsync("console.log('hello', 5, { foo: 'bar' })");
```

----------------------------------------

TITLE: Sending POST Request with JSON Data in Java
DESCRIPTION: Example of sending a POST request with JSON data using Playwright's API request context in Java. The data is passed as a Map which is then converted to JSON in the request body.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_6

LANGUAGE: java
CODE:
```
Map<String, Object> data = new HashMap();
data.put("title", "Book Title");
data.put("body", "John Doe");
request.post("https://example.com/api/createBook", RequestOptions.create().setData(data));
```

----------------------------------------

TITLE: Waiting for Image Elements Across Multiple URLs in Python (Sync)
DESCRIPTION: This snippet shows how to use Frame.wait_for_selector to wait for and retrieve image elements across multiple URLs in a Playwright script using Python's sync API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_48

LANGUAGE: python
CODE:
```
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = chromium.launch()
    page = browser.new_page()
    for current_url in ["https://google.com", "https://bbc.com"]:
        page.goto(current_url, wait_until="domcontentloaded")
        element = page.main_frame.wait_for_selector("img")
        print("Loaded image: " + str(element.get_attribute("src")))
    browser.close()

with sync_playwright() as playwright:
    run(playwright)
```

----------------------------------------

TITLE: Implementing Setup/Teardown for GitHub Repository in Playwright API Tests (Java)
DESCRIPTION: This snippet enhances the test class by adding setup and teardown logic for managing a GitHub repository specific to the test run. It introduces `createTestRepository` (using POST to `/user/repos`) called in `@BeforeAll` and `deleteTestRepository` (using DELETE to `/repos/{user}/{repo}`) called in `@AfterAll`. This ensures a clean environment for the tests by creating the necessary repository before tests start and removing it afterward. Requires GITHUB_USER environment variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-java.md#2025-04-22_snippet_2

LANGUAGE: java
CODE:
```
public class TestGitHubAPI {
  // ... (Previous setup and test code assumed here)

  void createTestRepository() {
    APIResponse newRepo = request.post("/user/repos",
      RequestOptions.create().setData(Collections.singletonMap("name", REPO)));
    assertTrue(newRepo.ok(), newRepo.text());
  }

  @BeforeAll
  void beforeAll() {
    createPlaywright();
    createAPIRequestContext();
    createTestRepository();
  }

  void deleteTestRepository() {
    if (request != null) {
      APIResponse deletedRepo = request.delete("/repos/" + USER + "/" + REPO);
      assertTrue(deletedRepo.ok());
    }
  }
  // ...

  @AfterAll
  void afterAll() {
    deleteTestRepository();
    disposeAPIRequestContext();
    closePlaywright();
  }
}

```

----------------------------------------

TITLE: Simulating Keyboard Input with Shift Modifier in Playwright (Python Sync)
DESCRIPTION: This synchronous Python snippet demonstrates how to use the Playwright Keyboard API to simulate complex keyboard interactions. It types initial text, moves the cursor, holds the 'Shift' key down, moves the cursor again (selecting text), releases 'Shift', and presses 'Backspace' to delete the selected text. It utilizes the `page.keyboard` object and its synchronous methods `type`, `press`, `down`, and `up`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
```python sync
page.keyboard.type("Hello World!")
page.keyboard.press("ArrowLeft")
page.keyboard.down("Shift")
for i in range(6):
    page.keyboard.press("ArrowLeft")
page.keyboard.up("Shift")
page.keyboard.press("Backspace")
# result text will end up saying "Hello!"
```
```

----------------------------------------

TITLE: Using the 'not' Property in GenericAssertions
DESCRIPTION: Demonstrates how to use the 'not' property to invert an assertion. This example shows a passing test where a value is not equal to 2.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
const value = 1;
expect(value).not.toBe(2);
```

----------------------------------------

TITLE: Configuring Playwright Navigation WaitUntil State
DESCRIPTION: Defines the `waitUntil` option for Playwright navigation methods, specifying the condition under which a navigation operation is considered complete. It accepts 'load', 'domcontentloaded', 'networkidle', or 'commit'. The default value is 'load'. Using 'networkidle' is generally discouraged for testing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
- `waitUntil` <[WaitUntilState]<"load"|"domcontentloaded"|"networkidle"|"commit">>
```

----------------------------------------

TITLE: Basic Playwright Synchronous Usage
DESCRIPTION: Example showing basic synchronous usage of Playwright to launch Chromium browser and navigate to a page
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-python.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
from playwright.sync_api import sync_playwright

with sync_playwright() as p:
    browser = p.chromium.launch()
    page = browser.new_page()
    page.goto("https://playwright.dev")
    print(page.title())
    browser.close()
```

----------------------------------------

TITLE: Running Playwright Tests with Multiple Workers (NUnit)
DESCRIPTION: Command to run Playwright tests with multiple workers using NUnit.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_13

LANGUAGE: bash
CODE:
```
dotnet test -- NUnit.NumberOfTestWorkers=5
```

----------------------------------------

TITLE: Chaining Route Handlers with Route.AbortAsync and Route.FallbackAsync - C#
DESCRIPTION: Exhibits C# idioms for ordering multiple Playwright route handlers, using async lambdas for abort and fallback. Can be used for layered request interception, prioritization, or central error handling.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_9

LANGUAGE: csharp
CODE:
```
await page.RouteAsync("**/*", route => {
    // Runs last.
    await route.AbortAsync();
});

await page.RouteAsync("**/*", route => {
    // Runs second.
    await route.FallbackAsync();
});

await page.RouteAsync("**/*", route => {
    // Runs first.
    await route.FallbackAsync();
});
```

----------------------------------------

TITLE: Querying All Inner Texts with Playwright Python (Async)
DESCRIPTION: Asynchronously collects the `innerText` of all 'link' role elements via Playwright's Python async API. The output is a list of strings, one for each matched link. Requires Playwright installed and async context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_6

LANGUAGE: Python
CODE:
```
texts = await page.get_by_role("link").all_inner_texts()
```

----------------------------------------

TITLE: Using Non-Image Snapshots for Text Comparison (JavaScript)
DESCRIPTION: This example demonstrates how to use the `toMatchSnapshot()` method for comparing text content against a reference snapshot in Playwright Test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-snapshots-js.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('example test', async ({ page }) => {
  await page.goto('https://playwright.dev');
  expect(await page.textContent('.hero__title')).toMatchSnapshot('hero.txt');
});
```

----------------------------------------

TITLE: Testing Callbacks and Events in React Components with Playwright
DESCRIPTION: Demonstrates how to test callbacks and events in React components using Playwright's component testing framework. It shows how to mount a component with an onClick callback.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
import { test } from '@playwright/experimental-ct-react';

test('callback', async ({ mount }) => {
  const component = await mount(<Component onClick={() => {}} />);
});
```

----------------------------------------

TITLE: GitHub Actions Workflow for Publishing Playwright Reports
DESCRIPTION: GitHub Actions workflow step to upload Playwright HTML reports to Azure Storage using azcopy. Includes environment configuration for service principal authentication.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci-intro.md#2025-04-22_snippet_6

LANGUAGE: yaml
CODE:
```
- name: Upload HTML report to Azure
  shell: bash
  run: |
    REPORT_DIR='run-${{ github.run_id }}-${{ github.run_attempt }}'
    azcopy cp --recursive "./playwright-report/*" "https://<STORAGE_ACCOUNT_NAME>.blob.core.windows.net/$web/$REPORT_DIR"
    echo "::notice title=HTML report url::https://<STORAGE_ACCOUNT_NAME>.z1.web.core.windows.net/$REPORT_DIR/index.html"
  env:
    AZCOPY_AUTO_LOGIN_TYPE: SPN
    AZCOPY_SPA_APPLICATION_ID: '${{ secrets.AZCOPY_SPA_APPLICATION_ID }}'
    AZCOPY_SPA_CLIENT_SECRET: '${{ secrets.AZCOPY_SPA_CLIENT_SECRET }}'
    AZCOPY_TENANT_ID: '${{ secrets.AZCOPY_TENANT_ID }}'
```

----------------------------------------

TITLE: Configuring Hooks for React Component Testing with Playwright
DESCRIPTION: Demonstrates how to use beforeMount and afterMount hooks to configure the app for React component testing. It shows an example of setting up a router using BrowserRouter.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
import { beforeMount, afterMount } from '@playwright/experimental-ct-react/hooks';
import { BrowserRouter } from 'react-router-dom';

export type HooksConfig = {
  enableRouting?: boolean;
}

beforeMount<HooksConfig>(async ({ App, hooksConfig }) => {
  if (hooksConfig?.enableRouting)
    return <BrowserRouter><App /></BrowserRouter>;
});
```

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/experimental-ct-react';
import type { HooksConfig } from '../playwright';
import { ProductsPage } from './pages/ProductsPage';

test('configure routing through hooks config', async ({ page, mount }) => {
  const component = await mount<HooksConfig>(<ProductsPage />, {
    hooksConfig: { enableRouting: true },
  });
  await expect(component.getByRole('link')).toHaveAttribute('href', '/products/42');
});
```

----------------------------------------

TITLE: Fetch Specific Header Value by Name
DESCRIPTION: This async method, `Response.headerValue`, fetches the value of a specified header name, handling multiple values with appropriate delimiters. If the header is absent, it returns `null`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
async function headerValue(headerName) {\n  const value = await response.headerValue(headerName);\n  console.log(`${headerName}:`, value);\n}
```

----------------------------------------

TITLE: Generating Locators with Playwright's Codegen
DESCRIPTION: This snippet explains how to use Playwright's code generation tool to automatically generate locators by inspecting elements on a web page. It uses a command-line tool to open a browser and capture interactions, enhancing development productivity by reducing manually crafting locator queries.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_3

LANGUAGE: Bash
CODE:
```
npx playwright codegen playwright.dev
```

LANGUAGE: Bash
CODE:
```
yarn playwright codegen playwright.dev
```

LANGUAGE: Bash
CODE:
```
pnpm exec playwright codegen playwright.dev
```

----------------------------------------

TITLE: Configuring Playwright Input Action Timeout (JavaScript)
DESCRIPTION: Specifies the maximum time in milliseconds for input actions in Playwright for JavaScript. Defaults to 0 (no timeout). The default value can be changed via the `actionTimeout` option in the config or by using `BrowserContext.setDefaultTimeout` or `Page.setDefaultTimeout`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_7

LANGUAGE: markdown
CODE:
```
- `timeout` <[float]>
```

----------------------------------------

TITLE: Defining Selector or Locator for Playwright Element Resolution
DESCRIPTION: Defines the `selectorOrLocator` parameter, which accepts either a string selector or a Playwright `Locator` object, used for resolving a DOM element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_27

LANGUAGE: markdown
CODE:
```
- `selectorOrLocator` <[string]|[Locator]>
```

----------------------------------------

TITLE: Creating New Browser Context in Playwright Java
DESCRIPTION: This Java code sample shows how to create a new browser context using Playwright. It demonstrates context isolation and proper cleanup after browsing, requiring the Playwright Java library and a setup for Java development.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_11

LANGUAGE: Java
CODE:
```
Browser browser = playwright.firefox().launch();  // Or 'chromium' or 'webkit'.
// Create a new incognito browser context.
BrowserContext context = browser.newContext();
// Create a new page in a pristine context.
Page page = context.newPage();
page.navigate("https://example.com");

// Graceful close up everything
context.close();
browser.close();
```

----------------------------------------

TITLE: Using Playwright React and Vue Selectors in C#
DESCRIPTION: Provides examples of using experimental React ('_react') and Vue ('_vue') selector engines in C# to locate elements based on component names and properties. The syntax is similar to CSS attribute selectors.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_54

LANGUAGE: csharp
CODE:
```
await page.Locator("_react=SubmitButton[enabled=true]").ClickAsync();
await page.Locator("_vue=submit-button[enabled=true]").ClickAsync();
```

----------------------------------------

TITLE: Global Setup Test Implementation
DESCRIPTION: Example of a global setup test file that initializes a database before test execution.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { test as setup } from '@playwright/test';

setup('create new database', async ({ }) => {
  console.log('creating new database...');
  // Initialize the database
});
```

----------------------------------------

TITLE: Creating Fixtures for Extension Testing - Python
DESCRIPTION: This Python test configuration file demonstrates how to create fixtures for running and testing extensions using Playwright. It prepares a browser context, retrieves the extension ID, and includes test functions to evaluate the extension's functionality. It depends on pytest and Playwright libraries.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/chrome-extensions-js-python.md#2025-04-22_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Generator
from pathlib import Path
from playwright.sync_api import Playwright, BrowserContext
import pytest


@pytest.fixture()
def context(playwright: Playwright) -> Generator[BrowserContext, None, None]:
    path_to_extension = Path(__file__).parent.joinpath("my-extension")
    context = playwright.chromium.launch_persistent_context(
        "",
        channel="chromium",
        args=[
            f"--disable-extensions-except={path_to_extension}",
            f"--load-extension={path_to_extension}",
        ],
    )
    yield context
    context.close()


@pytest.fixture()
def extension_id(context) -> Generator[str, None, None]:
    # for manifest v2:
    # background = context.background_pages[0]
    # if not background:
    #     background = context.wait_for_event("backgroundpage")

    # for manifest v3:
    background = context.service_workers[0]
    if not background:
        background = context.wait_for_event("serviceworker")

    extension_id = background.url.split("/")[2]
    yield extension_id

```

----------------------------------------

TITLE: Updating Playwright via yarn - Bash
DESCRIPTION: Upgrades Playwright packages to the latest version using yarn and installs updated browser binaries and dependencies. Ensures the project is aligned with the latest Playwright release. The two commands install the package and then fetch browser assets.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_14

LANGUAGE: bash
CODE:
```
yarn add --dev @playwright/test@latest
# Also download new browser binaries and their dependencies:
yarn playwright install --with-deps
```

----------------------------------------

TITLE: Installing Playwright with Maven Bash
DESCRIPTION: The code installs Playwright and its dependencies in Java projects within a CI environment using Maven. With `mvn exec:java`, it configures the Java environment to be ready for Playwright testing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install --with-deps\"
```

----------------------------------------

TITLE: Using hasURL Assertion in Java
DESCRIPTION: Example of using hasURL assertion in Java to verify page URL contains a specific string pattern. This checks if the page URL contains '.com'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_15

LANGUAGE: java
CODE:
```
assertThat(page).hasURL(".com");
```

----------------------------------------

TITLE: Running Playwright Docker for Python E2E Tests
DESCRIPTION: Command to run the Playwright Docker container for Python end-to-end testing where code is trusted.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
docker run -it --rm --ipc=host mcr.microsoft.com/playwright/python:v%%VERSION%%-noble /bin/bash
```

----------------------------------------

TITLE: Locating Element in Frame using FrameLocator (C#)
DESCRIPTION: Demonstrates how to use the FrameLocator API in C# to first locate an iframe by its selector ('#my-frame') and then locate an element ('text=Submit') within that frame. Finally, it performs a click action on the located element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_48

LANGUAGE: csharp
CODE:
```
var locator = page.FrameLocator("#my-frame").Locator("text=Submit");
await locator.ClickAsync();
```

----------------------------------------

TITLE: Scanning Entire Page for Accessibility Violations with Playwright and Axe
DESCRIPTION: Example showing how to test a complete web page for accessibility violations using Playwright and Axe. The test creates a browser instance, navigates to a page, runs an accessibility scan, and verifies there are no violations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-java.md#2025-04-22_snippet_0

LANGUAGE: java
CODE:
```
import com.deque.html.axecore.playwright.*;
import com.deque.html.axecore.utilities.axeresults.*;

import org.junit.jupiter.api.*;
import com.microsoft.playwright.*;

import static org.junit.jupiter.api.Assertions.*;

public class HomepageTests {
  @Test
  void shouldNotHaveAutomaticallyDetectableAccessibilityIssues() throws Exception {
    Playwright playwright = Playwright.create();
    Browser browser = playwright.chromium().launch();
    BrowserContext context = browser.newContext();
    Page page = context.newPage();

    page.navigate("https://your-site.com/");

    AxeResults accessibilityScanResults = new AxeBuilder(page).analyze();

    assertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());
  }
}
```

----------------------------------------

TITLE: Configuring Playwright for GitHub API Interaction in JavaScript
DESCRIPTION: The code configures Playwright to interact with the GitHub API by setting a base URL and authorization headers. It shows how to define this in a configuration file or using test.use(). Dependencies include Node.js and Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-js.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { defineConfig } from '@playwright/test';
export default defineConfig({
  use: {
    // All requests we send go to this API endpoint.
    baseURL: 'https://api.github.com',
    extraHTTPHeaders: {
      // We set this header per GitHub guidelines.
      'Accept': 'application/vnd.github.v3+json',
      // Add authorization token to all requests.
      // Assuming personal access token available in the environment.
      'Authorization': `token ${process.env.API_TOKEN}`,
    },
  }
});
```

----------------------------------------

TITLE: Pulling Playwright Docker Image for JavaScript
DESCRIPTION: Command to pull the Playwright Docker image for JavaScript applications from Microsoft Artifact Registry.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
docker pull mcr.microsoft.com/playwright:v%%VERSION%%-noble
```

----------------------------------------

TITLE: Using ToHaveTitleAsync Assertion in C#
DESCRIPTION: Example of using ToHaveTitleAsync assertion in C# to verify page title matches a string. This checks if the page title exactly matches 'Playwright'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_13

LANGUAGE: csharp
CODE:
```
await Expect(Page).ToHaveTitleAsync("Playwright");
```

----------------------------------------

TITLE: Clicking Element by ARIA Role and Name - Playwright Java
DESCRIPTION: Demonstrates how to locate and click an element using Playwright's role selector. It targets a button element based on its ARIA role 'button' and its accessible name 'log in'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_44

LANGUAGE: Java
CODE:
```
page.locator("role=button[name='log in']").click();
```

----------------------------------------

TITLE: Checking API State after Browser Issue Creation using Playwright in Java
DESCRIPTION: This example demonstrates using Playwright for Java to create an issue in the GitHub web UI, extract the issue ID from the URL, and then validate its existence and content via API call. Prerequisites include an initialized Playwright browser and API context, as well as an existing GitHub repository. The test ensures UI actions reflect immediately in backend state, focusing on end-to-end validation with page navigation, locators, and API assertions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-java.md#2025-04-22_snippet_5

LANGUAGE: java
CODE:
```
public class TestGitHubAPI {
  @Test
  void lastCreatedIssueShouldBeOnTheServer() {
    page.navigate("https://github.com/" + USER + "/" + REPO + "/issues");
    page.locator("text=New Issue").click();
    page.locator("[aria-label='Title']").fill("Bug report 1");
    page.locator("[aria-label='Comment body']").fill("Bug description");
    page.locator("text=Submit new issue").click();
    String issueId = page.url().substring(page.url().lastIndexOf('/'));

    APIResponse newIssue = request.get("https://github.com/" + USER + "/" + REPO + "/issues/" + issueId);
    assertThat(newIssue).isOK();
    assertTrue(newIssue.text().contains("Bug report 1"));
  }
}

```

----------------------------------------

TITLE: Running Tests with Console Debugging Enabled
DESCRIPTION: Commands to run Playwright tests with the PWDEBUG=console environment variable which enables access to the playwright object in browser developer tools.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
PWDEBUG=console npx playwright test
```

LANGUAGE: batch
CODE:
```
set PWDEBUG=console
npx playwright test
```

LANGUAGE: powershell
CODE:
```
$env:PWDEBUG="console"
npx playwright test
```

----------------------------------------

TITLE: Configuring Playwright Wait For Function Timeout (JavaScript)
DESCRIPTION: Sets the maximum waiting time in milliseconds for `waitForFunction` operations in Playwright for JavaScript. It defaults to 0 (no timeout). This default can be altered via the `actionTimeout` option in the configuration or by using `BrowserContext.setDefaultTimeout` or `Page.setDefaultTimeout` methods.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_4

LANGUAGE: markdown
CODE:
```
- `timeout` <[float]>
```

----------------------------------------

TITLE: Installing Playwright Pytest via PyPI
DESCRIPTION: Command to install the Playwright Pytest plugin using pip package manager.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-python.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
pip install pytest-playwright
```

----------------------------------------

TITLE: Uploading Files via Multipart Form Data using Playwright APIRequestContext `fetch`
DESCRIPTION: Shows how to upload files using the `fetch` method with `multipart/form-data` encoding in Playwright's `APIRequestContext`. This involves specifying file details (name, type, content/path) using language-specific constructs passed via the `multipart` option. Requires an initialized `APIRequestContext`. Returns an `APIResponse` (or equivalent Promise/Task).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
```js
const form = new FormData();
form.set('name', 'John');
form.append('name', 'Doe');
// Send two file fields with the same name.
form.append('file', new File(['console.log(2024);'], 'f1.js', { type: 'text/javascript' }));
form.append('file', new File(['hello'], 'f2.txt', { type: 'text/plain' }));
await request.fetch('https://example.com/api/uploadForm', {
  multipart: form
});
```
```

LANGUAGE: java
CODE:
```
```java
// Pass file path to the form data constructor:
Path file = Paths.get("team.csv");
APIResponse response = request.fetch("https://example.com/api/uploadTeamList",
  RequestOptions.create().setMethod("post").setMultipart(
    FormData.create().set("fileField", file)));

// Or you can pass the file content directly as FilePayload object:
FilePayload filePayload = new FilePayload("f.js", "text/javascript",
      "console.log(2022);".getBytes(StandardCharsets.UTF_8));
APIResponse response = request.fetch("https://example.com/api/uploadScript",
  RequestOptions.create().setMethod("post").setMultipart(
    FormData.create().set("fileField", filePayload)));
```
```

LANGUAGE: python
CODE:
```
```python
api_request_context.fetch(
  "https://example.com/api/uploadScript",  method="post",
  multipart={
    "fileField": {
      "name": "f.js",
      "mimeType": "text/javascript",
      "buffer": b"console.log(2022);",
    },
  })
```
```

LANGUAGE: csharp
CODE:
```
```csharp
var file = new FilePayload()
{
    Name = "f.js",
    MimeType = "text/javascript",
    Buffer = System.Text.Encoding.UTF8.GetBytes("console.log(2022);")
};
var multipart = Context.APIRequest.CreateFormData();
multipart.Set("fileField", file);
await Request.FetchAsync("https://example.com/api/uploadScript", new() { Method = "post", Multipart = multipart });
```
```

----------------------------------------

TITLE: Dragging Elements with Locator.dragTo in JavaScript
DESCRIPTION: Demonstrates how to drag a source element to a target element in JavaScript using Playwright's Locator.dragTo method. Can specify exact positions relative to the top-left corners of the elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_39

LANGUAGE: javascript
CODE:
```
const source = page.locator('#source');
const target = page.locator('#target');

await source.dragTo(target);
// or specify exact positions relative to the top-left corners of the elements:
await source.dragTo(target, {
  sourcePosition: { x: 34, y: 7 },
  targetPosition: { x: 10, y: 20 },
});
```

----------------------------------------

TITLE: Debugging Specific Playwright Test at Line Number
DESCRIPTION: Debug a specific test from a particular line number using the Playwright Inspector by specifying the file name, line number, and --debug flag.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_13

LANGUAGE: bash
CODE:
```
npx playwright test example.spec.ts:10 --debug
```

----------------------------------------

TITLE: Matching Arrays Containing Elements with expect.arrayContaining in JavaScript
DESCRIPTION: Illustrates `expect.arrayContaining(expectedArray)` used within `expect().toEqual()` in Playwright. This matcher asserts that the received array contains all elements from the `expectedArray`, regardless of order. The received array can contain additional elements not present in the expected array.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_28

LANGUAGE: javascript
CODE:
```
```js
expect([1, 2, 3]).toEqual(expect.arrayContaining([3, 1]));
expect([1, 2, 3]).not.toEqual(expect.arrayContaining([1, 4]));
```
```

----------------------------------------

TITLE: Upgrading Playwright Dependency to Latest Version (Bash)
DESCRIPTION: Shows commands to upgrade '@playwright/test' to the latest version for NPM, Yarn, and PNPM environments. This ensures compatibility with the newest browser versions and features. Dependencies: existing Playwright setup and access to relevant package manager. Required parameter: @latest. Output: updated dependency version in project.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_10

LANGUAGE: bash
CODE:
```
npm install -D @playwright/test@latest
```

LANGUAGE: bash
CODE:
```
yarn add --dev @playwright/test@latest
```

LANGUAGE: bash
CODE:
```
pnpm install --save-dev @playwright/test@latest
```

----------------------------------------

TITLE: Run Playwright Test with List Reporter via CLI
DESCRIPTION: Execute Playwright tests using the 'list' reporter from the command line. This reporter prints a line for each test as it runs.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_4

LANGUAGE: bash
CODE:
```
npx playwright test --reporter=list
```

----------------------------------------

TITLE: Using Keyboard.press for Key Simulation and Screenshots in Playwright (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates the usage of `page.keyboard.press` to simulate pressing different keys ('A', 'ArrowLeft', 'Shift+O') on a webpage (`https://keycode.info`). It navigates to the page, simulates key presses, and takes screenshots after each press to visually verify the event. This method simulates a full key press, including `keydown` and `keyup` events.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_20

LANGUAGE: javascript
CODE:
```
```js
const page = await browser.newPage();
await page.goto('https://keycode.info');
await page.keyboard.press('A');
await page.screenshot({ path: 'A.png' });
await page.keyboard.press('ArrowLeft');
await page.screenshot({ path: 'ArrowLeft.png' });
await page.keyboard.press('Shift+O');
await page.screenshot({ path: 'O.png' });
await browser.close();
```
```

----------------------------------------

TITLE: Configuring Global Locale and Timezone (JavaScript)
DESCRIPTION: This snippet shows how to set the default browser locale and timezone for all tests globally within the Playwright Test configuration file (`playwright.config.ts`). The `locale` and `timezoneId` properties are set within the `use` object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_20

LANGUAGE: javascript
CODE:
```
```js title="playwright.config.ts"
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    // Emulates the browser locale.
    locale: 'en-GB',

    // Emulates the browser timezone.
    timezoneId: 'Europe/Paris',
  },
});
```
```

----------------------------------------

TITLE: Converting Playwright Python Locator to FrameLocator
DESCRIPTION: Demonstrates using the `Locator.contentFrame` property to convert a Locator pointing to an iframe element into a FrameLocator, allowing interaction with the iframe's content. Requires a Playwright page and a locator for an iframe.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_17

LANGUAGE: python
CODE:
```
locator = page.locator("iframe[name='embedded']")
# ...
frame_locator = locator.content_frame
frame_locator.getByRole("button").click()
```

----------------------------------------

TITLE: Unique Authentication Per Worker with JavaScript
DESCRIPTION: Demonstrates an approach in which each Playwright parallel worker authenticates using a unique account. This ensures isolated state management for tests modifying server-side states.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
import { test as baseTest, expect } from '@playwright/test';
import fs from 'fs';
import path from 'path';

export * from '@playwright/test';
export const test = baseTest.extend<{}, { workerStorageState: string }>({
  storageState: ({ workerStorageState }, use) => use(workerStorageState),
  workerStorageState: [async ({ browser }, use) => {
    const id = test.info().parallelIndex;
    const fileName = path.resolve(test.info().project.outputDir, `.auth/${id}.json`);

    if (fs.existsSync(fileName)) {
      await use(fileName);
      return;
    }

    const page = await browser.newPage({ storageState: undefined });
    const account = await acquireAccount(id);

    await page.goto('https://github.com/login');
    await page.getByLabel('Username or email address').fill(account.username);
    await page.getByLabel('Password').fill(account.password);
    await page.getByRole('button', { name: 'Sign in' }).click();
    await page.waitForURL('https://github.com/');
    await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();

    await page.context().storageState({ path: fileName });
    await page.close();
    await use(fileName);
  }, { scope: 'worker' }],
});
```

----------------------------------------

TITLE: Uploading Files with Multipart Form Data in Java
DESCRIPTION: Example of uploading files using multipart/form-data encoding in Java. The example shows two approaches: passing a file path directly to the FormData constructor, and creating a FilePayload object with file content.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_14

LANGUAGE: java
CODE:
```
// Pass file path to the form data constructor:
Path file = Paths.get("team.csv");
APIResponse response = request.post("https://example.com/api/uploadTeamList",
  RequestOptions.create().setMultipart(
    FormData.create().set("fileField", file)));

// Or you can pass the file content directly as FilePayload object:
FilePayload filePayload1 = new FilePayload("f1.js", "text/javascript",
      "console.log(2022);".getBytes(StandardCharsets.UTF_8));
APIResponse response = request.post("https://example.com/api/uploadScript",
  RequestOptions.create().setMultipart(
    FormData.create().set("fileField", filePayload)));
```

----------------------------------------

TITLE: Sending Form URL-encoded Data in C#
DESCRIPTION: Example of sending a POST request with URL-encoded form data using Playwright's API request context in C#. The form data is created using CreateFormData() method and passed in the request options.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_12

LANGUAGE: csharp
CODE:
```
var formData = Context.APIRequest.CreateFormData();
formData.Set("title", "Book Title");
formData.Set("body", "John Doe");
await request.PostAsync("https://example.com/api/findBook", new() { Form = formData });
```

----------------------------------------

TITLE: Setting Domain-Specific Permissions in Playwright Test
DESCRIPTION: Configures notification permissions for a specific domain (skype.com) in a beforeEach hook for Playwright tests. This sets permissions only for the specified origin rather than globally.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_32

LANGUAGE: javascript
CODE:
```
import { test } from '@playwright/test';

test.beforeEach(async ({ context }) => {
  // Runs before each test and signs in each page.
  await context.grantPermissions(['notifications'], { origin: 'https://skype.com' });
});

test('first', async ({ page }) => {
  // page has notifications permission for https://skype.com.
});
```

----------------------------------------

TITLE: Setting isMobile via Context Options (Python Async)
DESCRIPTION: This asynchronous Python snippet demonstrates setting the `isMobile` property when creating a new browser context using `playwright.async_api`. The `isMobile` parameter is passed directly to `browser.new_context`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_17

LANGUAGE: python
CODE:
```
```python async
context = await browser.new_context(
  isMobile=false
)
```
```

----------------------------------------

TITLE: Dragging Elements with Locator.dragTo in Java
DESCRIPTION: Shows how to drag a source element to a target element in Java using Playwright's Locator.dragTo method. Also demonstrates specifying exact positions for drag source and target.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_40

LANGUAGE: java
CODE:
```
Locator source = page.locator("#source");
Locator target = page.locator("#target");

source.dragTo(target);
// or specify exact positions relative to the top-left corners of the elements:
source.dragTo(target, new Locator.DragToOptions()
  .setSourcePosition(34, 7).setTargetPosition(10, 20));
```

----------------------------------------

TITLE: Sending GET Request with Query Parameters using Playwright APIRequestContext `get`
DESCRIPTION: Illustrates how to send an HTTP GET request and include URL query parameters using the `get` method of Playwright's `APIRequestContext`. Parameters are usually passed via the `params` option (or `setQueryParam` in Java) using various formats like objects, maps, or strings depending on the language. Requires an initialized `APIRequestContext`. Returns an `APIResponse` (or equivalent Promise/Task).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
```js
// Passing params as object
await request.get('https://example.com/api/getText', {
  params: {
    'isbn': '1234',
    'page': 23,
  }
});

// Passing params as URLSearchParams
const searchParams = new URLSearchParams();
searchParams.set('isbn', '1234');
searchParams.append('page', 23);
searchParams.append('page', 24);
await request.get('https://example.com/api/getText', { params: searchParams });

// Passing params as string
const queryString = 'isbn=1234&page=23&page=24';
await request.get('https://example.com/api/getText', { params: queryString });
```
```

LANGUAGE: java
CODE:
```
```java
request.get("https://example.com/api/getText", RequestOptions.create()
  .setQueryParam("isbn", "1234")
  .setQueryParam("page", 23));
```
```

LANGUAGE: python
CODE:
```
```python
query_params = {
  "isbn": "1234",
  "page": "23"
}
api_request_context.get("https://example.com/api/getText", params=query_params)
```
```

LANGUAGE: csharp
CODE:
```
```csharp
var queryParams = new Dictionary<string, object>()
{
  { "isbn", "1234" },
  { "page", 23 },
};
await request.GetAsync("https://example.com/api/getText", new() { Params = queryParams });
```
```

----------------------------------------

TITLE: React Component Test Setup with Playwright
DESCRIPTION: This snippet shows how to set up a basic component test for a React app using Playwright Test. It demonstrates mounting the App component and asserting its content.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { test, expect } from '@playwright/experimental-ct-react';
import App from './App';

test('should work', async ({ mount }) => {
  const component = await mount(<App />);
  await expect(component).toContainText('Learn React');
});
```

----------------------------------------

TITLE: Grouping Actions in Trace Viewer using C#
DESCRIPTION: This snippet shows how to group actions in the Playwright trace viewer using C#. It performs the same actions as the Python example, navigating to the Playwright website and clicking on the API link, with all actions between GroupAsync and GroupEndAsync shown as a group in the trace viewer.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_19

LANGUAGE: csharp
CODE:
```
// All actions between GroupAsync and GroupEndAsync
// will be shown in the trace viewer as a group.
await Page.Context.Tracing.GroupAsync("Open Playwright.dev > API");
await Page.GotoAsync("https://playwright.dev/");
await Page.GetByRole(AriaRole.Link, new() { Name = "API" }).ClickAsync();
await Page.Context.Tracing.GroupEndAsync();
```

----------------------------------------

TITLE: Testing Status Text with Playwright
Python Sync
DESCRIPTION: This snippet illustrates a synchronous Playwright test in Python to check that a status element contains the text 'Submitted' after clicking a button. It uses the playwright.sync_api package.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-playwrightassertions.md#2025-04-22_snippet_2

LANGUAGE: python sync
CODE:
```
from playwright.sync_api import Page, expect

def test_status_becomes_submitted(page: Page) -> None:
    # ..
    page.locator("#submit-button").click()
    expect(page.locator(".status")).to_have_text("Submitted")
```

----------------------------------------

TITLE: Configuring Automatic Screenshots in Playwright Test
DESCRIPTION: Sets up automatic screenshot capture after each test using the TestOptions.screenshot property in the Playwright configuration file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_27

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    screenshot: 'only-on-failure',
  },
});
```

----------------------------------------

TITLE: Run Playwright Tests with Dot Reporter (CLI)
DESCRIPTION: Command to execute Playwright tests and specify the 'dot' reporter using the command line interface. This provides concise output during the test run, showing a single character per test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_9

LANGUAGE: bash
CODE:
```
npx playwright test --reporter=dot
```

----------------------------------------

TITLE: Using Environment Variables in Tests
DESCRIPTION: This snippet shows how to use environment variables within a test to pass sensitive information like username and password without hardcoding them in the source code.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
test(`example test`, async ({ page }) => {
  // ...
  await page.getByLabel('User Name').fill(process.env.USER_NAME);
  await page.getByLabel('Password').fill(process.env.PASSWORD);
});
```

----------------------------------------

TITLE: Installing system dependencies for Playwright browsers
DESCRIPTION: This snippet provides commands to install system dependencies required for Playwright-supported browsers. This is especially important for CI environments to ensure all dependencies are met before running tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
npx playwright install-deps
```

LANGUAGE: java
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install-deps\"
```

LANGUAGE: python
CODE:
```
playwright install-deps
```

LANGUAGE: csharp
CODE:
```
pwsh bin/Debug/netX/playwright.ps1 install-deps
```

----------------------------------------

TITLE: Configuring GitLab CI for Playwright Tests (Multiple Languages)
DESCRIPTION: These YAML configurations set up GitLab CI to run Playwright tests using Docker images for JavaScript, Python, Java, and C# projects. Each configuration specifies the appropriate Playwright Docker image for the test stage.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_36

LANGUAGE: yml
CODE:
```
stages:
  - test

tests:
  stage: test
  image: mcr.microsoft.com/playwright:v%%VERSION%%-noble
  script:
  ...
```

LANGUAGE: yml
CODE:
```
stages:
  - test

tests:
  stage: test
  image: mcr.microsoft.com/playwright/python:v%%VERSION%%-noble
  script:
  ...
```

LANGUAGE: yml
CODE:
```
stages:
  - test

tests:
  stage: test
  image: mcr.microsoft.com/playwright/java:v%%VERSION%%-noble
  script:
  ...
```

LANGUAGE: yml
CODE:
```
stages:
  - test

tests:
  stage: test
  image: mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble
  script:
  ...
```

----------------------------------------

TITLE: Basic Playwright Browser Automation in C#
DESCRIPTION: A simple C# program that navigates to the Playwright .NET documentation page and takes a screenshot using Chromium.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-csharp.md#2025-04-23_snippet_1

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;

using var playwright = await Playwright.CreateAsync();
await using var browser = await playwright.Chromium.LaunchAsync();
var page = await browser.NewPageAsync();
await page.GotoAsync("https://playwright.dev/dotnet");
await page.ScreenshotAsync(new()
{
    Path = "screenshot.png"
});
```

----------------------------------------

TITLE: Using Keyboard.press for Key Simulation and Screenshots in Playwright (Python Sync)
DESCRIPTION: This synchronous Python snippet demonstrates the usage of `page.keyboard.press` to simulate pressing different keys ('a', 'ArrowLeft', 'Shift+O') on a webpage (`https://keycode.info`). It navigates to the page, simulates key presses, and takes screenshots after each press to visually verify the event. This method simulates a full key press, including `keydown` and `keyup` events.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_23

LANGUAGE: python
CODE:
```
```python sync
page = browser.new_page()
page.goto("https://keycode.info")
page.keyboard.press("a")
page.screenshot(path="a.png")
page.keyboard.press("ArrowLeft")
page.screenshot(path="arrow_left.png")
page.keyboard.press("Shift+O")
page.screenshot(path="o.png")
browser.close()
```
```

----------------------------------------

TITLE: Fast Forwarding and Pausing Time - Playwright JavaScript
DESCRIPTION: Showcases installing the clock, pausing execution at a specific time, fast forwarding the virtual clock, and verifying the updated time in tests using Playwright. The snippet demonstrates a workflow of loading a page, manipulating time, and asserting time-dependent UI changes. Requires Playwright and a proper page context; key parameters include date objects and durations in string format.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
// Initialize clock with some time before the test time and let the page load
// naturally. `Date.now` will progress as the timers fire.
await page.clock.install({ time: new Date('2024-02-02T08:00:00') });
await page.goto('http://localhost:3333');

// Pretend that the user closed the laptop lid and opened it again at 10am,
// Pause the time once reached that point.
await page.clock.pauseAt(new Date('2024-02-02T10:00:00'));

// Assert the page state.
await expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:00 AM');

// Close the laptop lid again and open it at 10:30am.
await page.clock.fastForward('30:00');
await expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:30:00 AM');
```

----------------------------------------

TITLE: Intercepting and Modifying WebSocket Messages in JavaScript
DESCRIPTION: This code snippet shows how to connect to the actual WebSocket server while intercepting and modifying messages in JavaScript. It modifies 'request' messages to 'request2' and passes through other messages unmodified.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_21

LANGUAGE: javascript
CODE:
```
await page.routeWebSocket('wss://example.com/ws', ws => {
  const server = ws.connectToServer();
  ws.onMessage(message => {
    if (message === 'request')
      server.send('request2');
    else
      server.send(message);
  });
});
```

----------------------------------------

TITLE: Skipping Tests by Browser Type in Playwright
DESCRIPTION: Example of using the skip_browser marker to skip tests on specific browsers.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_5

LANGUAGE: python
CODE:
```
import pytest

@pytest.mark.skip_browser("firefox")
def test_visit_example(page):
    page.goto("https://example.com")
    # ...
```

----------------------------------------

TITLE: Running Playwright Codegen from Command Line - Python - Bash
DESCRIPTION: This snippet demonstrates launching the Playwright code generator in Python environments. By running 'playwright codegen' with the desired URL, a recording session is started for the specified site. Requires the Playwright Python package to be installed and accessible in the system's PATH. Outputs: opens browser and inspector windows for interactive test creation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
playwright codegen demo.playwright.dev/todomvc
```

----------------------------------------

TITLE: Generating Playwright Tests with Assertions (Java)
DESCRIPTION: Demonstrates how the Playwright Test Generator creates tests including navigation, element interaction, and assertions for visibility, value, and text content using the Java API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_23

LANGUAGE: Java
CODE:
```
page.navigate("https://playwright.dev/");
page.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName("Get started")).click();
assertThat(page.getByLabel("Breadcrumbs").getByRole(AriaRole.LIST)).containsText("Installation");
assertThat(page.getByLabel("Search")).isVisible();
page.getByLabel("Search").click();
page.getByPlaceholder("Search docs").fill("locator");
assertThat(page.getByPlaceholder("Search docs")).hasValue("locator");
```

----------------------------------------

TITLE: Running Tests in Headed Mode
DESCRIPTION: Command to run tests with browser window visible using the --headed flag.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
pytest --headed
```

----------------------------------------

TITLE: Recording Traces Using Playwright Library API
DESCRIPTION: Code example showing how to programmatically record traces using the Playwright library API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
const browser = await chromium.launch();
const context = await browser.newContext();

// Start tracing before creating / navigating a page.
await context.tracing.start({ screenshots: true, snapshots: true });

const page = await context.newPage();
await page.goto('https://playwright.dev');

// Stop tracing and export it into a zip archive.
await context.tracing.stop({ path: 'trace.zip' });
```

----------------------------------------

TITLE: Modifying Network Requests in Python (Async)
DESCRIPTION: Demonstrates how to modify outgoing network requests in asynchronous Python. Examples include deleting headers from requests and changing the HTTP method to POST.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_19

LANGUAGE: python
CODE:
```
# Delete header
async def handle_route(route):
    headers = route.request.headers
    del headers["x-secret"]
    await route.continue_(headers=headers)
await page.route("**/*", handle_route)

# Continue requests as POST.
await page.route("**/*", lambda route: route.continue_(method="POST"))
```

----------------------------------------

TITLE: Modifying Request Headers in Python (Sync)
DESCRIPTION: Shows how to modify request headers while falling back to the subsequent handler in Playwright using Python with synchronous syntax. This allows for intermediate route handlers to modify the URL, method, headers, and post data of the request.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_19

LANGUAGE: python
CODE:
```
def handle(route, request):
    # override headers
    headers = {
        **request.headers,
        "foo": "foo-value", # set "foo" header
        "bar": None # remove "bar" header
    }
    route.fallback(headers=headers)

page.route("**/*", handle)
```

----------------------------------------

TITLE: Asserting Element JavaScript Property with Playwright TypeScript
DESCRIPTION: Asserts that the element located by the locator has a specific JavaScript property. This assertion automatically retries until the condition is met or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_21

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toHaveJSProperty()
```

----------------------------------------

TITLE: Testing Slots in Vue Components with Playwright
DESCRIPTION: Shows how to test slots in Vue components using Playwright's component testing framework. It demonstrates two approaches: using the options API and the JSX-style syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
import { test } from '@playwright/experimental-ct-vue';

test('slot', async ({ mount }) => {
  const component = await mount(Component, { slots: { default: 'Slot' } });
});
```

LANGUAGE: javascript
CODE:
```
// Or alternatively, using the `jsx` style
import { test } from '@playwright/experimental-ct-vue';

test('children', async ({ mount }) => {
  const component = await mount(<Component>Child</Component>);
});
```

----------------------------------------

TITLE: Modifying Network Responses in Java
DESCRIPTION: Shows how to modify network responses in Java. The example fetches the original response, modifies the HTML content, and then fulfills the request with the modified response.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_28

LANGUAGE: java
CODE:
```
page.route("**/title.html", route -> {
  // Fetch original response.
  APIResponse response = route.fetch();
  // Add a prefix to the title.
  String body = response.text();
  body = body.replace("<title>", "<title>My prefix:");
  Map<String, String> headers = response.headers();
  headers.put("content-type", "text/html");
  route.fulfill(new Route.FulfillOptions()
    // Pass all fields from the response.
    .setResponse(response)
    // Override response body.
    .setBody(body)
    // Force content type to be html.
    .setHeaders(headers));
});
```

----------------------------------------

TITLE: Handling Console Messages in C#
DESCRIPTION: Demonstrates how to work with console messages in C#, including event subscription, error filtering, and argument extraction.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-consolemessage.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
// Listen for all console messages and print them to the standard output.
page.Console += (_, msg) => Console.WriteLine(msg.Text);

// Listen for all console messages and print errors to the standard output.
page.Console += (_, msg) =>
{
    if ("error".Equals(msg.Type))
        Console.WriteLine("Error text: " + msg.Text);
};

// Get the next console message
var waitForMessageTask = page.WaitForConsoleMessageAsync();
await page.EvaluateAsync("console.log('hello', 42, { foo: 'bar' });");
var message = await waitForMessageTask;
// Deconstruct console.log arguments
await message.Args.ElementAt(0).JsonValueAsync<string>(); // hello
await message.Args.ElementAt(1).JsonValueAsync<int>(); // 42
```

----------------------------------------

TITLE: Incorrect Dialog Handling Causing Stall (Python Async)
DESCRIPTION: Demonstrates incorrect usage where an asynchronous 'dialog' listener is registered but does not handle the dialog (e.g., by accepting or dismissing it). This causes the script execution to hang at the asynchronous action that triggered the dialog because web dialogs are modal.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
```python async
page.on("dialog", lambda dialog: print(dialog.message))
await page.get_by_role("button").click() # Will hang here
```
```

----------------------------------------

TITLE: Configuring Playwright Dependency with Maven - XML
DESCRIPTION: Defines a Maven project structure including the Playwright Java client as a dependency. The pom.xml configures artifact details, dependency version, and builds/compiles options for Java 8 compatibility. Requires Maven and Java 8+ as prerequisites. The dependency on Playwright enables Java automation scripting and browser management. Users should replace %%VERSION%% with an actual release version.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-java.md#2025-04-22_snippet_1

LANGUAGE: xml
CODE:
```
<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"
  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.example</groupId>
  <artifactId>examples</artifactId>
  <version>0.1-SNAPSHOT</version>
  <name>Playwright Client Examples</name>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  <dependencies>
    <dependency>
      <groupId>com.microsoft.playwright</groupId>
      <artifactId>playwright</artifactId>
      <version>%%VERSION%%</version>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.10.1</version>
        <!-- References to interface static methods are allowed only at source level 1.8 or above -->
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
```

----------------------------------------

TITLE: Key Press Example - JavaScript
DESCRIPTION: Example of using page.press() to simulate keyboard input on a webpage, including taking screenshots after each key press.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_74

LANGUAGE: javascript
CODE:
```
const page = await browser.newPage();
await page.goto('https://keycode.info');
await page.press('body', 'A');
await page.screenshot({ path: 'A.png' });
await page.press('body', 'ArrowLeft');
await page.screenshot({ path: 'ArrowLeft.png' });
await page.press('body', 'Shift+O');
await page.screenshot({ path: 'O.png' });
await browser.close();
```

----------------------------------------

TITLE: Merging Custom Playwright Matchers and Tests (TypeScript)
DESCRIPTION: This snippet illustrates how to combine custom matchers and tests defined in different modules using `mergeExpects` and `mergeTests` from `@playwright/test`. It imports `expect` and `test` from separate utility files (`database-test-utils`, `a11y-test-utils`) and merges them into a single exported `expect` and `test` object for use in test files, allowing the use of matchers from both sources.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_46

LANGUAGE: typescript
CODE:
```
import { mergeTests, mergeExpects } from '@playwright/test';
import { test as dbTest, expect as dbExpect } from 'database-test-utils';
import { test as a11yTest, expect as a11yExpect } from 'a11y-test-utils';

export const expect = mergeExpects(dbExpect, a11yExpect);
export const test = mergeTests(dbTest, a11yTest);
```

----------------------------------------

TITLE: Using First Locator Property in Playwright Python
DESCRIPTION: If you are using locators, you can use first, nth() and last. Select the first button among all buttons.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_53

LANGUAGE: Python
CODE:
```
page.locator("button").first.click()
```

----------------------------------------

TITLE: Accessing Isolated Contexts in Playwright Test Runner (JavaScript)
DESCRIPTION: Demonstrates how the Playwright Test Runner automatically provides an isolated `BrowserContext` (`context`) and a `Page` (`page`) for each test, ensuring complete test isolation. The example shows two separate tests, each receiving its own unique context and page, highlighting the default isolation behavior.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
import { test } from '@playwright/test';

test('example test', async ({ page, context }) => {
  // "context" is an isolated BrowserContext, created for this specific test.
  // "page" belongs to this context.
});

test('another test', async ({ page, context }) => {
  // "context" and "page" in this second test are completely
  // isolated from the first test.
});
```

----------------------------------------

TITLE: Evaluating Asynchronous JavaScript in Browser
DESCRIPTION: Shows how to run asynchronous JavaScript code in the browser context, including fetching data. The evaluate function automatically waits for promises to resolve before returning the result.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
const status = await page.evaluate(async () => {
  const response = await fetch(location.href);
  return response.status;
});
```

LANGUAGE: java
CODE:
```
int status = (int) page.evaluate("async () => {\n" +
  "  const response = await fetch(location.href);\n" +
  "  return response.status;\n" +
  "}");
```

LANGUAGE: python
CODE:
```
status = await page.evaluate("""async () => {
  response = await fetch(location.href)
  return response.status
}""")
```

LANGUAGE: csharp
CODE:
```
int status = await page.EvaluateAsync<int>(@"async () => {
  const response = await fetch(location.href);
  return response.status;
}");
```

----------------------------------------

TITLE: Implementing Global Setup with Tracing in Playwright Tests (JavaScript)
DESCRIPTION: This code snippet demonstrates how to implement a global setup function for Playwright tests with tracing enabled. It launches a browser, creates a new context and page, performs login actions, and captures traces for both successful and failed setups. The function uses a try-catch block to ensure tracing is stopped and a trace is saved even if an error occurs.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
import { chromium, type FullConfig } from '@playwright/test';

async function globalSetup(config: FullConfig) {
  const { baseURL, storageState } = config.projects[0].use;
  const browser = await chromium.launch();
  const context = await browser.newContext();
  const page = await context.newPage();
  try {
    await context.tracing.start({ screenshots: true, snapshots: true });
    await page.goto(baseURL!);
    await page.getByLabel('User Name').fill('user');
    await page.getByLabel('Password').fill('password');
    await page.getByText('Sign in').click();
    await context.storageState({ path: storageState as string });
    await context.tracing.stop({
      path: './test-results/setup-trace.zip',
    });
    await browser.close();
  } catch (error) {
    await context.tracing.stop({
      path: './test-results/failed-setup-trace.zip',
    });
    await browser.close();
    throw error;
  }
}

export default globalSetup;
```

----------------------------------------

TITLE: Waiting for a Popup Window in Playwright (Sync Python)
DESCRIPTION: Illustrates waiting for a popup window using the `page.expect_popup` synchronous context manager in Playwright for Python. The code within the `with` block (`page.get_by_text(...).click()`) triggers the popup, and the context manager waits for it. The value (`popup.value`) is the `Page` object of the popup.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
```python sync
with page.expect_popup() as popup:
  page.get_by_text("open the popup").click()
popup.value.goto("https://wikipedia.org")
```
```

----------------------------------------

TITLE: Debugging Playwright Tests with Inspector (Batch)
DESCRIPTION: Commands to debug Playwright tests using the Playwright Inspector in Batch.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_17

LANGUAGE: csharp
CODE:
```
set PWDEBUG=1
dotnet test
```

----------------------------------------

TITLE: Sharding Tests with Playwright CLI
DESCRIPTION: Commands for splitting test suites into multiple shards. Each command runs a portion of the tests, allowing them to be executed in parallel across different machines to speed up the testing process.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-sharding-js.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx playwright test --shard=1/4
npx playwright test --shard=2/4
npx playwright test --shard=3/4
npx playwright test --shard=4/4
```

----------------------------------------

TITLE: Evaluating JavaScript on All Matching Elements with Locator.evaluateAll in JavaScript
DESCRIPTION: Shows how to execute JavaScript code on all matching elements using Locator.evaluateAll in JavaScript. Passes the array of matching elements to the evaluation function.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_54

LANGUAGE: javascript
CODE:
```
const locator = page.locator('div');
const moreThanTen = await locator.evaluateAll((divs, min) => divs.length > min, 10);
```

----------------------------------------

TITLE: Asserting ARIA Role with Playwright C#
DESCRIPTION: Illustrates the usage of the `LocatorAssertions.toHaveRole` method in C# to assert that a locator element possesses a specific ARIA role. Essential for verifying semantic structure.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_15

LANGUAGE: C#
CODE:
```
var locator = Page.GetByTestId("save-button");
await Expect(locator).ToHaveRoleAsync(AriaRole.Button);
```

----------------------------------------

TITLE: Implementing Hooks for Each Parameterized Test in JavaScript
DESCRIPTION: This snippet demonstrates how to implement hooks for each individual parameterized test by placing them inside a test.describe() block within the forEach loop.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
[
  { name: 'Alice', expected: 'Hello, Alice!' },
  { name: 'Bob', expected: 'Hello, Bob!' },
  { name: 'Charlie', expected: 'Hello, Charlie!' },
].forEach(({ name, expected }) => {
  test.describe(() => {
    test.beforeEach(async ({ page }) => {
      await page.goto(`https://example.com/greet?name=${name}`);
    });
    test(`testing with ${expected}`, async ({ page }) => {
      await expect(page.getByRole('heading')).toHaveText(expected);
    });
  });
});
```

----------------------------------------

TITLE: Auto-waiting Navigation and Interaction in Python (Sync)
DESCRIPTION: Demonstrates how Playwright's synchronous API in Python automatically waits for elements to be actionable before interacting with them after navigation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
# Navigate and click element
# Click will auto-wait for the element
page.goto("https://example.com")
page.get_by_text("example domain").click()
```

----------------------------------------

TITLE: Using Keyboard.press for Key Simulation and Screenshots in Playwright (Python Async)
DESCRIPTION: This asynchronous Python snippet demonstrates the usage of `page.keyboard.press` to simulate pressing different keys ('a', 'ArrowLeft', 'Shift+O') on a webpage (`https://keycode.info`). It navigates to the page, simulates key presses, and takes screenshots after each press to visually verify the event. This method simulates a full key press, including `keydown` and `keyup` events.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_22

LANGUAGE: python
CODE:
```
```python async
page = await browser.new_page()
await page.goto("https://keycode.info")
await page.keyboard.press("a")
await page.screenshot(path="a.png")
await page.keyboard.press("ArrowLeft")
await page.screenshot(path="arrow_left.png")
await page.keyboard.press("Shift+O")
await page.screenshot(path="o.png")
await browser.close()
```
```

----------------------------------------

TITLE: Serving Static Files in Python (Async)
DESCRIPTION: Shows how to serve static files as responses to specific routes using Playwright in Python with async/await syntax. This example demonstrates serving a JSON file for a specific endpoint.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_33

LANGUAGE: python
CODE:
```
await page.route("**/xhr_endpoint", lambda route: route.fulfill(path="mock_data.json"))
```

----------------------------------------

TITLE: Querying All Inner Texts with Playwright Python (Sync)
DESCRIPTION: Synchronously retrieves all innerText values from 'link' elements using Playwright Python. The method returns a list of strings. Works in a sync Playwright session.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_7

LANGUAGE: Python
CODE:
```
texts = page.get_by_role("link").all_inner_texts()
```

----------------------------------------

TITLE: Attaching Screenshots to Test Steps
DESCRIPTION: Shows how to capture and attach screenshots to test steps during execution.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-teststepinfo.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('basic test', async ({ page }) => {
  await page.goto('https://playwright.dev');
  await test.step('check page rendering', async step => {
    const screenshot = await page.screenshot();
    await step.attach('screenshot', { body: screenshot, contentType: 'image/png' });
  });
});
```

----------------------------------------

TITLE: Using toBeFalsy Method in GenericAssertions
DESCRIPTION: Demonstrates the use of 'toBeFalsy' method to check if a value is falsy in a boolean context. This is useful when you don't care about the specific falsy value.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
const value = null;
expect(value).toBeFalsy();
```

----------------------------------------

TITLE: Clearing Specific Cookies by Name or Domain in Playwright Java
DESCRIPTION: Illustrates the new filtering capabilities of BrowserContext.clearCookies in Playwright Java. It shows how to clear all cookies, and how to clear only cookies matching a specific name or domain using BrowserContext.ClearCookiesOptions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_17

LANGUAGE: java
CODE:
```
// Clear all cookies.
context.clearCookies();
// New: clear cookies with a particular name.
context.clearCookies(new BrowserContext.ClearCookiesOptions().setName("session-id"));
// New: clear cookies for a particular domain.
context.clearCookies(new BrowserContext.ClearCookiesOptions().setDomain("my-origin.com"));
```

----------------------------------------

TITLE: Recording Video with Browser Context (Python)
DESCRIPTION: These snippets show how to create a new browser context with video recording enabled in Python, using both async and sync syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
context = await browser.new_context(record_video_dir="videos/")
# Make sure to await close, so that videos are saved.
await context.close()
```

LANGUAGE: python
CODE:
```
context = browser.new_context(record_video_dir="videos/")
# Make sure to close, so that videos are saved.
context.close()
```

----------------------------------------

TITLE: Asserting Missing Attribute with ToHaveAttributeAsync C#
DESCRIPTION: Shows how to use Expect(...).ToHaveAttributeAsync("attribute", "") in Playwright C# to assert that an element does not have a specific attribute.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_32

LANGUAGE: csharp
CODE:
```
await Expect(Page.GetByRole(AriaRole.Button)).ToHaveAttributeAsync("disabled", "");
```

----------------------------------------

TITLE: Handling beforeunload Dialogs with Playwright (JavaScript)
DESCRIPTION: Registers a handler for the 'dialog' event specifically to handle `beforeunload` dialogs triggered by `page.close({ runBeforeUnload: true })`. The handler asserts the dialog type and then dismisses it.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
```js
page.on('dialog', async dialog => {
  assert(dialog.type() === 'beforeunload');
  await dialog.dismiss();
});
await page.close({ runBeforeUnload: true });
```
```

----------------------------------------

TITLE: Modifying Network Requests in JavaScript
DESCRIPTION: Demonstrates how to modify outgoing network requests in JavaScript. Examples include deleting headers from requests and changing the HTTP method to POST.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_17

LANGUAGE: javascript
CODE:
```
// Delete header
await page.route('**/*', async route => {
  const headers = route.request().headers();
  delete headers['X-Secret'];
  await route.continue({ headers });
});

// Continue requests as POST.
await page.route('**/*', route => route.continue({ method: 'POST' }));
```

----------------------------------------

TITLE: Enabling Mobile Emulation in Browser Context
DESCRIPTION: Defines the isMobile option for browser contexts. This controls whether the meta viewport tag is respected and touch events are enabled, used for mobile device emulation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_53

LANGUAGE: js
CODE:
```
- `isMobile` <[boolean]>

Whether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device, so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more about [mobile emulation](../emulation.md#ismobile).
```

----------------------------------------

TITLE: Using Page.evalOnSelector in Python (Sync)
DESCRIPTION: Examples of using the eval_on_selector method in Python with synchronous calls to evaluate expressions on elements matching a selector. This method finds an element and passes it to the provided JavaScript expression.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_44

LANGUAGE: python
CODE:
```
search_value = page.eval_on_selector("#search", "el => el.value")
preload_href = page.eval_on_selector("link[rel=preload]", "el => el.href")
html = page.eval_on_selector(".main-container", "(e, suffix) => e.outer_html + suffix", "hello")
```

----------------------------------------

TITLE: Configuring Playwright Workers in CI JavaScript
DESCRIPTION: The configuration file sets Playwright to run tests sequentially in CI by setting workers to 1. It avoids resource conflicts in CI, facilitating stable execution. The setup is based on environment variables, with an optional parallel setup depending on resources.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_8

LANGUAGE: js
CODE:
```
import { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  // Opt out of parallel tests on CI.\n  workers: process.env.CI ? 1 : undefined,\n});
```

----------------------------------------

TITLE: Creating and Submitting Basic FormData in Java
DESCRIPTION: Example of creating a FormData object with basic text fields and submitting it via an API request in Java. This demonstrates setting simple field values like strings and numbers.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-formdata.md#2025-04-22_snippet_0

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.options.FormData;
// ...
FormData form = FormData.create()
    .set("firstName", "John")
    .set("lastName", "Doe")
    .set("age", 30);
page.request().post("http://localhost/submit", RequestOptions.create().setForm(form));
```

----------------------------------------

TITLE: Using toHaveLength Method for Length Checking
DESCRIPTION: Demonstrates the use of 'toHaveLength' method to check the length property of strings and arrays.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_19

LANGUAGE: javascript
CODE:
```
expect('Hello, World').toHaveLength(12);
expect([1, 2, 3]).toHaveLength(3);
```

----------------------------------------

TITLE: Handling File Upload with FileChooser in Java
DESCRIPTION: Shows how to wait for a file chooser, trigger it, and set a file for upload using Playwright in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-filechooser.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
FileChooser fileChooser = page.waitForFileChooser(() -> page.getByText("Upload file").click());
fileChooser.setFiles(Paths.get("myfile.pdf"));
```

----------------------------------------

TITLE: Locating Elements by Placeholder Text
DESCRIPTION: Shows how to locate input elements using their placeholder text attribute.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_131

LANGUAGE: html
CODE:
```
<input type="email" placeholder="name@example.com" />
```

LANGUAGE: javascript
CODE:
```
await page
    .getByPlaceholder('name@example.com')
    .fill('playwright@microsoft.com');
```

----------------------------------------

TITLE: Waiting for Image Elements Across Multiple URLs in Python (Async)
DESCRIPTION: This snippet demonstrates how to use Frame.wait_for_selector to wait for and retrieve image elements across multiple URLs in a Playwright script using Python's async API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_47

LANGUAGE: python
CODE:
```
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = await chromium.launch()
    page = await browser.new_page()
    for current_url in ["https://google.com", "https://bbc.com"]:
        await page.goto(current_url, wait_until="domcontentloaded")
        element = await page.main_frame.wait_for_selector("img")
        print("Loaded image: " + str(await element.get_attribute("src")))
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())
```

----------------------------------------

TITLE: Asserting Text Content on Label Elements
DESCRIPTION: While label-to-control retargeting works for input operations, assertions like toHaveText will target the label itself. This example demonstrates asserting the text content of a label element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_16

LANGUAGE: javascript
CODE:
```
// Fill the input by targeting the label.
await expect(page.locator('label')).toHaveText('Password');
```

LANGUAGE: java
CODE:
```
// Fill the input by targeting the label.
assertThat(page.locator("label")).hasText("Password");
```

LANGUAGE: python
CODE:
```
# Fill the input by targeting the label.
await expect(page.locator("label")).to_have_text("Password")
```

LANGUAGE: python
CODE:
```
# Fill the input by targeting the label.
expect(page.locator("label")).to_have_text("Password")
```

LANGUAGE: csharp
CODE:
```
// Fill the input by targeting the label.
await Expect(Page.Locator("label")).ToHaveTextAsync("Password");
```

----------------------------------------

TITLE: Configuring Playwright Soft Expect Default (JS)
DESCRIPTION: Demonstrates creating a new `expect` instance where assertions are soft by default using `expect.configure({ soft: true })`. This is useful for applying soft assertion behavior to multiple checks.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_38

LANGUAGE: js
CODE:
```
const softExpect = expect.configure({ soft: true });
await softExpect(locator).toHaveText('Submit');
```

----------------------------------------

TITLE: Asserting Banner ARIA Snapshot using Playwright C#
DESCRIPTION: This C# snippet shows how to perform an asynchronous ARIA snapshot test. It navigates to 'https://playwright.dev/', locates the 'banner' element, and uses `Expect(...).ToMatchAriaSnapshotAsync()` to assert its accessibility tree against the provided verbatim string literal representing the YAML snapshot template.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
```csharp
await page.GotoAsync("https://playwright.dev/");
await Expect(page.Locator("banner")).ToMatchAriaSnapshotAsync(@"
  - banner:
    - heading ""Playwright enables reliable end-to-end testing for modern web apps."" [level=1]
    - link ""Get started""
    - link ""Star microsoft/playwright on GitHub""
    - link /[\\d]+k\\+ stargazers on GitHub/
");
```
```

----------------------------------------

TITLE: Running Playwright Tests with Dotnet Bash
DESCRIPTION: This snippet demonstrates running C# Playwright tests using the `dotnet test` command. Ideal for CI setups for .NET projects, it ensures that the code is verified through comprehensive test execution.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
dotnet test
```

----------------------------------------

TITLE: Handling File Upload with FileChooser in Python (Sync)
DESCRIPTION: Demonstrates synchronous file upload handling using FileChooser in Playwright with Python.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-filechooser.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
with page.expect_file_chooser() as fc_info:
    page.get_by_text("Upload file").click()
file_chooser = fc_info.value
file_chooser.set_files("myfile.pdf")
```

----------------------------------------

TITLE: Configuring Blob Reporter in Playwright Config
DESCRIPTION: Configuration for using the blob reporter in Playwright config file. This setup enables blob reporting when running in CI environments, which is necessary for later merging reports from multiple shards.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-sharding-js.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
export default defineConfig({
  testDir: './tests',
  reporter: process.env.CI ? 'blob' : 'html',
});
```

----------------------------------------

TITLE: Filling Input Fields on AndroidDevice with Playwright JS
DESCRIPTION: AndroidDevice.fill fills an input field located by selector with the specified text. Parameters are selector (AndroidSelector) and text (string). Timeout may be set. The method automates text entry for form fields and credentials. Inputs: selector and text values. No outputs except UI state change.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
// Fills an input box with text.
await androidDevice.fill({
  selector: mySelector,
  text: 'Hello World',
  timeout: 3000 // Optional
});
```

----------------------------------------

TITLE: Managing Color Scheme and Media in Python (Sync)
DESCRIPTION: Creates browser contexts and pages with specific color schemes, and demonstrates how to update color scheme and media type during test execution using the Playwright Python sync API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_61

LANGUAGE: python
CODE:
```
# Create context with dark mode
context = browser.new_context(
  color_scheme='dark' # or 'light'
)

# Create page with dark mode
page = browser.new_page(
  color_scheme='dark' # or 'light'
)

# Change color scheme for the page
page.emulate_media(color_scheme='dark')

# Change media for page
page.emulate_media(media='print')
```

----------------------------------------

TITLE: Using nth Element Locator in Playwright
DESCRIPTION: Demonstrates how to use the nth= locator to select specific elements from a list of matches, including the first and last elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
// Click first button
await page.locator('button').locator('nth=0').click();

// Click last button
await page.locator('button').locator('nth=-1').click();
```

LANGUAGE: java
CODE:
```
// Click first button
page.locator("button").locator("nth=0").click();

// Click last button
page.locator("button").locator("nth=-1").click();
```

LANGUAGE: python
CODE:
```
# Click first button
await page.locator("button").locator("nth=0").click()

# Click last button
await page.locator("button").locator("nth=-1").click()
```

LANGUAGE: csharp
CODE:
```
// Click first button
await page.Locator("button").Locator("nth=0").ClickAsync();

// Click last button
await page.Locator("button").Locator("nth=-1").ClickAsync();
```

----------------------------------------

TITLE: Using Locator.or Method for Alternative Matching
DESCRIPTION: Shows how to use the Locator.or method to create a locator that matches either of two locators, with a practical scenario.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_30

LANGUAGE: javascript
CODE:
```
const newEmail = page.getByRole('button', { name: 'New email' });
const dialog = page.getByText('Confirm security settings');
await expect(newEmail.or(dialog)).toBeVisible();
if (await dialog.isVisible())
  await page.getByRole('button', { name: 'Dismiss' }).click();
await newEmail.click();
```

----------------------------------------

TITLE: Filtering Locators by Absence of Text or Element in Playwright Java
DESCRIPTION: Illustrates using `Locator.filter()` with the new `hasNotText` and `hasNot` options in Playwright Java. This allows filtering a set of elements to exclude those that contain specific text or contain another specified locator. Requires a `Page` object and existing `Locator` instances.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_28

LANGUAGE: java
CODE:
```
Locator rowLocator = page.locator("tr");
rowLocator
    .filter(new Locator.FilterOptions().setHasNotText("text in column 1"))
    .filter(new Locator.FilterOptions().setHasNot(
      page.getByRole(AriaRole.BUTTON,
        new Page.GetByRoleOptions().setName("column 2 button" ))))
    .screenshot();
```

----------------------------------------

TITLE: Using Locator.and Method for Combining Locators
DESCRIPTION: Demonstrates how to use the Locator.and method to create a locator that matches both specified locators.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_29

LANGUAGE: javascript
CODE:
```
const button = page.getByRole('button').and(page.getByTitle('Subscribe'));
```

----------------------------------------

TITLE: Updating React Components in Playwright Tests
DESCRIPTION: Demonstrates how to update props, children, and callbacks of a mounted React component in Playwright component tests. This is useful for testing component behavior with changing inputs.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_18

LANGUAGE: javascript
CODE:
```
import { test } from '@playwright/experimental-ct-react';

test('update', async ({ mount }) => {
  const component = await mount(<Component/>);
  await component.update(
      <Component msg="greetings" onClick={() => {}}>Child</Component>
  );
});
```

----------------------------------------

TITLE: Using Frame Locator in Playwright
DESCRIPTION: Demonstrates how to locate and interact with elements inside an iframe using frameLocator method across different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_65

LANGUAGE: javascript
CODE:
```
const locator = page.frameLocator('#my-iframe').getByText('Submit');
await locator.click();
```

LANGUAGE: java
CODE:
```
Locator locator = page.frameLocator("#my-iframe").getByText("Submit");
locator.click();
```

LANGUAGE: python
CODE:
```
locator = page.frame_locator("#my-iframe").get_by_text("Submit")
await locator.click()
```

LANGUAGE: csharp
CODE:
```
var locator = page.FrameLocator("#my-iframe").GetByText("Submit");
await locator.ClickAsync();
```

----------------------------------------

TITLE: Asserting Element Emptiness using Playwright LocatorAssertions
DESCRIPTION: Ensures the Playwright Locator points to an empty editable element (like an input with no value) or a DOM node that contains no text content. A `timeout` option (placeholder `%%-js-assertions-timeout-%%` or `%%-csharp-java-python-assertions-timeout-%%`) is available.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
```js
const locator = page.locator('div.warning');
await expect(locator).toBeEmpty();
```
```

LANGUAGE: java
CODE:
```
```java
assertThat(page.locator("div.warning")).isEmpty();
```
```

LANGUAGE: python
CODE:
```
```python async
from playwright.async_api import expect

locator = page.locator("div.warning")
await expect(locator).to_be_empty()
```
```

LANGUAGE: python
CODE:
```
```python sync
from playwright.sync_api import expect

locator = page.locator("div.warning")
expect(locator).to_be_empty()
```
```

LANGUAGE: csharp
CODE:
```
```csharp
var locator = Page.Locator("div.warning");
await Expect(locator).ToBeEmptyAsync();
```
```

----------------------------------------

TITLE: Running Multiple Test Files
DESCRIPTION: Command to run multiple specific test files by providing their paths.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
pytest tests/test_todo_page.py tests/test_landing_page.py
```

----------------------------------------

TITLE: Installing Playwright Package Dependencies
DESCRIPTION: Commands to add Playwright NuGet packages for different test frameworks
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-csharp.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
dotnet add package Microsoft.Playwright.NUnit
```

LANGUAGE: bash
CODE:
```
dotnet add package Microsoft.Playwright.MSTest
```

LANGUAGE: bash
CODE:
```
dotnet add package Microsoft.Playwright.Xunit
```

----------------------------------------

TITLE: Handling a One-Off Dialog Event in Playwright (Async Python)
DESCRIPTION: Illustrates using `page.once` in asynchronous Playwright for Python to handle the 'dialog' event just once. A lambda function is used to accept the dialog with '2021' when the prompt is triggered by `page.evaluate`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_17

LANGUAGE: python
CODE:
```
```python async
page.once("dialog", lambda dialog: dialog.accept("2021"))
await page.evaluate("prompt('Enter a number:')")
```
```

----------------------------------------

TITLE: Setting Locale and Timezone via Context Options (Python Async)
DESCRIPTION: This asynchronous Python snippet shows setting the locale and timezone when creating a new browser context using `playwright.async_api`. The `locale` and `timezone_id` parameters are passed to `browser.new_context`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_24

LANGUAGE: python
CODE:
```
```python async
context = await browser.new_context(
  locale='de-DE',
  timezone_id='Europe/Berlin',
)
```
```

----------------------------------------

TITLE: Declaring Skipped Test Group in JavaScript
DESCRIPTION: Demonstrates how to declare a skipped test group using test.describe.skip(). Tests in this group will never be run, which is useful for temporarily disabling a set of tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_24

LANGUAGE: javascript
CODE:
```
test.describe.skip('skipped group', () => {
  test('example', async ({ page }) => {
    // This test will not run
  });
});
```

----------------------------------------

TITLE: Filter Visible Elements Using Locator (Python)
DESCRIPTION: Illustrates using the `filter` method on a Playwright Locator with the `visible=True` option to select only elements that are currently visible on the page. Followed by an assertion to check the count of visible elements. Requires a Playwright `page` object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_3

LANGUAGE: python
CODE:
```
# Ignore invisible todo items.
todo_items = page.get_by_test_id("todo-item").filter(visible=True)
# Check there are exactly 3 visible ones.
await expect(todo_items).to_have_count(3)
```

----------------------------------------

TITLE: Asserting CSS Properties with toHaveCSS in JavaScript
DESCRIPTION: Demonstrates how to use the toHaveCSS method to assert that a locator resolves to an element with a specific computed CSS style. This example checks if a button element has a 'display' property set to 'flex'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_30

LANGUAGE: javascript
CODE:
```
const locator = page.getByRole('button');
await expect(locator).toHaveCSS('display', 'flex');
```

----------------------------------------

TITLE: Fetching and Modifying API Response in Java
DESCRIPTION: Demonstrates how to fetch an API response, modify its JSON content, and then fulfill the route with the modified response using Playwright in Java. This example adds a new breed to the dog API response.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_22

LANGUAGE: java
CODE:
```
page.route("https://dog.ceo/api/breeds/list/all", route -> {
  APIResponse response = route.fetch();
  JsonObject json = new Gson().fromJson(response.text(), JsonObject.class);
  JsonObject message = itemObj.get("json").getAsJsonObject();
  message.set("big_red_dog", new JsonArray());
  route.fulfill(new Route.FulfillOptions()
    .setResponse(response)
    .setBody(json.toString()));
});
```

----------------------------------------

TITLE: Excluding Elements from Accessibility Scan with axe-core and Playwright - JavaScript
DESCRIPTION: This code demonstrates how to use AxeBuilder.exclude to prevent specific elements (and their descendants) from being included in the accessibility scan, useful when suppressing known violations temporarily. The test targets a page with a known issue, excludes the problematic selector, runs the scan, and asserts zero violations. Dependencies include Playwright and @axe-core/playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
test('should not have any accessibility violations outside of elements with known issues', async ({
  page,
}) => {
  await page.goto('https://your-site.com/page-with-known-issues');

  const accessibilityScanResults = await new AxeBuilder({ page })
      .exclude('#element-with-known-issue')
      .analyze();

  expect(accessibilityScanResults.violations).toEqual([]);
});
```

----------------------------------------

TITLE: Launching Browser with UI and Slow Motion
DESCRIPTION: Example of launching Firefox browser in non-headless mode with slow motion execution
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-python.md#2025-04-22_snippet_5

LANGUAGE: python
CODE:
```
firefox.launch(headless=False, slow_mo=50)
```

----------------------------------------

TITLE: Record Network Traffic via Playwright CLI Bash
DESCRIPTION: Shows how to use the Playwright command-line interface (`npx playwright open`) to record network traffic into a HAR file (`github.har.zip`) while opening a URL.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_32

LANGUAGE: bash
CODE:
```
npx playwright open --save-har=github.har.zip https://github.com/microsoft
```

----------------------------------------

TITLE: Fast Forwarding and Pausing Time - Playwright Java
DESCRIPTION: Illustrates Playwright's Java API for installing, pausing, and fast forwarding the clock in browser-based tests. The code fragment creates and parses date strings, interacts with test elements, and performs text assertions. Requires Playwright for Java, proper date formatting, and runtime context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_6

LANGUAGE: java
CODE:
```
// Initialize clock with some time before the test time and let the page load
// naturally. `Date.now` will progress as the timers fire.
SimpleDateFormat format = new SimpleDateFormat("yyy-MM-dd'T'HH:mm:ss");
page.clock().install(new Clock.InstallOptions().setTime(format.parse("2024-02-02T08:00:00")));
page.navigate("http://localhost:3333");
Locator locator = page.getByTestId("current-time");

// Pretend that the user closed the laptop lid and opened it again at 10am.
// Pause the time once reached that point.
page.clock().pauseAt(format.parse("2024-02-02T10:00:00"));

// Assert the page state.
assertThat(locator).hasText("2/2/2024, 10:00:00 AM");

// Close the laptop lid again and open it at 10:30am.
page.clock().fastForward("30:00");
assertThat(locator).hasText("2/2/2024, 10:30:00 AM");
```

----------------------------------------

TITLE: Running Playwright Tests with JSON Reporter Output File (Bash)
DESCRIPTION: Runs Playwright tests using the 'json' reporter and directs the output to a specified file (results.json) by setting the PLAYWRIGHT_JSON_OUTPUT_NAME environment variable before executing the test command. This is a common way to capture JSON report output to a file from the command line in bash.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_20

LANGUAGE: bash
CODE:
```
PLAYWRIGHT_JSON_OUTPUT_NAME=results.json npx playwright test --reporter=json
```

----------------------------------------

TITLE: Using beforeAll Hook with Title in Playwright Tests
DESCRIPTION: Demonstrates how to create a beforeAll hook with a descriptive title, making test reports more readable and providing better context for the hook's purpose.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
test.beforeAll('Setup', async () => {
  console.log('Before tests');
});
```

----------------------------------------

TITLE: Asserting Container Empty State with Playwright TypeScript
DESCRIPTION: Asserts that the container element located by the locator is empty. This assertion automatically retries until the container is empty or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_6

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toBeEmpty()
```

----------------------------------------

TITLE: Defining Custom Playwright Matcher (TypeScript)
DESCRIPTION: This snippet demonstrates how to extend Playwright's `expect` object with a custom asynchronous matcher named `toHaveAmount`. It checks if a locator has a specific `data-amount` attribute value. The matcher returns a `pass` flag and a `message` function for failure reporting, handling both positive and negative assertions (`this.isNot`). It relies on `expect.extend` and `Locator` from `@playwright/test`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_44

LANGUAGE: typescript
CODE:
```
import { expect as baseExpect } from '@playwright/test';
import type { Locator } from '@playwright/test';

export { test } from '@playwright/test';

export const expect = baseExpect.extend({
  async toHaveAmount(locator: Locator, expected: number, options?: { timeout?: number }) {
    const assertionName = 'toHaveAmount';
    let pass: boolean;
    let matcherResult: any;
    try {
      const expectation = this.isNot ? baseExpect(locator).not : baseExpect(locator);
      await expectation.toHaveAttribute('data-amount', String(expected), options);
      pass = true;
    } catch (e: any) {
      matcherResult = e.matcherResult;
      pass = false;
    }

    if (this.isNot) {
      pass =!pass;
    }

    const message = pass
      ? () => this.utils.matcherHint(assertionName, undefined, undefined, { isNot: this.isNot }) +
          '\n\n' +
          `Locator: ${locator}\n` +
          `Expected: not ${this.utils.printExpected(expected)}\n` +
          (matcherResult ? `Received: ${this.utils.printReceived(matcherResult.actual)}` : '')
      : () =>  this.utils.matcherHint(assertionName, undefined, undefined, { isNot: this.isNot }) +
          '\n\n' +
          `Locator: ${locator}\n` +
          `Expected: ${this.utils.printExpected(expected)}\n` +
          (matcherResult ? `Received: ${this.utils.printReceived(matcherResult.actual)}` : '');

    return {
      message,
      pass,
      name: assertionName,
      expected,
      actual: matcherResult?.actual,
    };
  },
});
```

----------------------------------------

TITLE: Handling beforeunload Dialogs with Playwright (Python Async)
DESCRIPTION: Registers an asynchronous handler for the 'dialog' event to manage `beforeunload` dialogs triggered by `page.close(run_before_unload=True)`. The handler function asserts the dialog type and then dismisses it.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_12

LANGUAGE: python
CODE:
```
```python async
async def handle_dialog(dialog):
    assert dialog.type == 'beforeunload'
    await dialog.dismiss()

page.on('dialog', lambda: handle_dialog)
await page.close(run_before_unload=True)
```
```

----------------------------------------

TITLE: Handling Multiple Locator Possibilities with OR in Playwright Java
DESCRIPTION: Shows how to use `Locator.or()` in Playwright Java to create a locator that matches elements matching either of the two original locators. Useful for scenarios where multiple elements could appear, allowing you to wait for and interact with the first one that becomes visible. Requires a `Page` object and existing `Locator` instances.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_27

LANGUAGE: java
CODE:
```
Locator newEmail = page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("New email"));
Locator dialog = page.getByText("Confirm security settings");
assertThat(newEmail.or(dialog)).isVisible();
if (dialog.isVisible())
  page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Dismiss")).click();
newEmail.click();
```

----------------------------------------

TITLE: Asserting Element Attachment using Playwright LocatorAssertions
DESCRIPTION: Ensures that a Playwright Locator points to an element that is connected to a Document or a ShadowRoot. This assertion is available across multiple languages. It accepts an optional `attached` boolean parameter (defaulting implicitly to true) and a `timeout` option (placeholder `%%-js-assertions-timeout-%%` or `%%-csharp-java-python-assertions-timeout-%%`).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
```js
await expect(page.getByText('Hidden text')).toBeAttached();
```
```

LANGUAGE: java
CODE:
```
```java
assertThat(page.getByText("Hidden text")).isAttached();
```
```

LANGUAGE: python
CODE:
```
```python async
await expect(page.get_by_text("Hidden text")).to_be_attached()
```
```

LANGUAGE: python
CODE:
```
```python sync
expect(page.get_by_text("Hidden text")).to_be_attached()
```
```

LANGUAGE: csharp
CODE:
```
```csharp
await Expect(Page.GetByText("Hidden text")).ToBeAttachedAsync();
```
```

----------------------------------------

TITLE: Setting Up Routes on Browser Context in Java
DESCRIPTION: Demonstrates setting up route handling on the entire browser context using browserContext.route() in Java. This applies to popup windows and opened links.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_13

LANGUAGE: java
CODE:
```
browserContext.route("**/api/login", route -> route.fulfill(new Route.FulfillOptions()
  .setStatus(200)
  .setBody("accept")));
page.navigate("https://example.com");
```

----------------------------------------

TITLE: Emulating Offline Mode in Java
DESCRIPTION: Creates a new browser context with offline mode enabled using the Playwright Java client. This allows testing how applications handle network unavailability.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_70

LANGUAGE: java
CODE:
```
BrowserContext context = browser.newContext(new Browser.NewContextOptions()
  .setOffline(true));
```

----------------------------------------

TITLE: Handling File Downloads in Playwright Python (Async)
DESCRIPTION: Shows how to use async/await pattern in Python with Playwright to handle file downloads. Involves waiting for download events and saving files. Requires the Playwright Python package and an asynchronous execution environment.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/downloads.md#2025-04-22_snippet_2

LANGUAGE: python async
CODE:
```
# Start waiting for the download
async with page.expect_download() as download_info:
    # Perform the action that initiates download
    await page.get_by_text("Download file").click()
download = await download_info.value

# Wait for the download process to complete and save the downloaded file somewhere
await download.save_as("/path/to/save/at/" + download.suggested_filename)
```

LANGUAGE: python async
CODE:
```
async def handle_download(download):
    print(await download.path())
page.on("download", handle_download)
```

----------------------------------------

TITLE: Enforcing Single Element Resolution with Playwright Input Strict Mode
DESCRIPTION: Defines the `strict` boolean option for Playwright input actions. When set to true, it mandates that the provided selector must resolve to exactly one element. If the selector matches multiple elements, an exception is thrown.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_5

LANGUAGE: markdown
CODE:
```
- `strict` <[boolean]>
```

----------------------------------------

TITLE: Setting Viewport and High-DPI via Context/Page (Python Sync)
DESCRIPTION: This synchronous Python snippet demonstrates using `playwright.sync_api` for: creating a context with a specific viewport, resizing a page's viewport with `page.set_viewport_size`, and creating a high-DPI context using `viewport` and `device_scale_factor` options.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_13

LANGUAGE: python
CODE:
```
```python sync
# Create context with given viewport
context = browser.new_context(
  viewport={ 'width': 1280, 'height': 1024 }
)

# Resize viewport for individual page
page.set_viewport_size({"width": 1600, "height": 1200})

# Emulate high-DPI
context = browser.new_context(
  viewport={ 'width': 2560, 'height': 1440 },
  device_scale_factor=2,
)
```
```

----------------------------------------

TITLE: Starting and Stopping Chromium Tracing with Playwright (sync) - Python
DESCRIPTION: Provides a synchronous example of using Playwright's Chromium tracing in Python. The synchronous browser.start_tracing function initializes the trace session for a specific page, writing trace output to a designated file. The trace is ended with browser.stop_tracing after actions are performed. Prerequisites are Playwright's synchronous Python bindings. Parameters mirror those of the asynchronous variant, supporting output paths and optional configuration.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_18

LANGUAGE: python
CODE:
```
browser.start_tracing(page, path="trace.json")
page.goto("https://www.google.com")
browser.stop_tracing()
```

----------------------------------------

TITLE: Event Monitoring with Predicate - Python
DESCRIPTION: Alternative event monitoring implementation specifically for Python, providing event context management. Includes predicate function support and timeout configuration.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_25

LANGUAGE: python
CODE:
```
async def wait_for_event(event, predicate=None, timeout=None):
    # Implementation details
    pass
```

----------------------------------------

TITLE: Page Creation Monitoring - Java/Python/C#
DESCRIPTION: Async method that monitors and waits for new page creation in the browser context. Can be configured with a predicate function to filter specific page events and includes timeout functionality.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_24

LANGUAGE: typescript
CODE:
```
interface WaitForPageOptions {
  predicate?: (page: Page) => boolean;
  timeout?: number;
}
```

----------------------------------------

TITLE: Running Playwright Tests with Multiple Workers (xUnit)
DESCRIPTION: Command to run Playwright tests with multiple workers using xUnit.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_15

LANGUAGE: bash
CODE:
```
dotnet test -- xUnit.MaxParallelThreads=5
```

----------------------------------------

TITLE: Filter Locators by Visibility (Java)
DESCRIPTION: Illustrates using the new `setVisible(true)` option with `locator.filter` in Java to select only visible elements, followed by an assertion to check the count of the filtered elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_3

LANGUAGE: Java
CODE:
```
// Ignore invisible todo items.
Locator todoItems = page.getByTestId("todo-item")
    .filter(new Locator.FilterOptions().setVisible(true));
// Check there are exactly 3 visible ones.
assertThat(todoItems).hasCount(3);
```

----------------------------------------

TITLE: Matching Objects Containing Properties with expect.objectContaining in JavaScript
DESCRIPTION: Shows how `expect.objectContaining(expectedObject)` works inside `expect().toEqual()` in Playwright assertions. It matches any object that contains all the properties defined in `expectedObject`. The received object can have additional properties. Matchers can be nested within the `expectedObject` for more complex pattern matching.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_30

LANGUAGE: javascript
CODE:
```
```js
// Assert some of the properties.
expect({ foo: 1, bar: 2 }).toEqual(expect.objectContaining({ foo: 1 }));

// Matchers can be used on the properties as well.
expect({ foo: 1, bar: 2 }).toEqual(expect.objectContaining({ bar: expect.any(Number) }));

// Complex matching of sub-properties.
expect({
  list: [1, 2, 3],
  obj: { prop: 'Hello world!', another: 'some other value' },
  extra: 'extra',
}).toEqual(expect.objectContaining({
  list: expect.arrayContaining([2, 3]),
  obj: expect.objectContaining({ prop: expect.stringContaining('Hello') }),
}));
```
```

----------------------------------------

TITLE: Configuring GitHub Actions for Playwright Tests on Deployment (Java)
DESCRIPTION: This YAML configuration sets up GitHub Actions to run Playwright tests with Java after a successful deployment. It sets up the Java environment, builds the project, installs Playwright, and runs the tests with the deployment URL as the base URL.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_19

LANGUAGE: yml
CODE:
```
name: Playwright Tests
on:
  deployment_status:
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    if: github.event.deployment_status.state == 'success'
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    - name: Build & Install
      run: mvn -B install -D skipTests --no-transfer-progress
    - name: Install Playwright
      run: mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install --with-deps"
    - name: Run tests
      run: mvn test
      env:
        # This might depend on your test-runner
        PLAYWRIGHT_TEST_BASE_URL: ${{ github.event.deployment_status.target_url }}
```

----------------------------------------

TITLE: Clearing Playwright Python Cookies with Filters
DESCRIPTION: Shows how to use the updated `BrowserContext.clearCookies` method to clear all cookies or filter them by name or domain. Requires a Playwright browser context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_16

LANGUAGE: python
CODE:
```
# Clear all cookies.
context.clear_cookies()
# New: clear cookies with a particular name.
context.clear_cookies(name="session-id")
# New: clear cookies for a particular domain.
context.clear_cookies(domain="my-origin.com")
```

----------------------------------------

TITLE: Recording Multiple Trace Chunks (JavaScript)
DESCRIPTION: Illustrates recording multiple trace segments into separate files within the same browser context using `tracing.startChunk()` and `tracing.stopChunk()` in JavaScript. Global tracing must be initiated first with `tracing.start()`. Each chunk captures actions performed between its respective start/stop calls.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_10

LANGUAGE: js
CODE:
```
await context.tracing.start({ screenshots: true, snapshots: true });
const page = await context.newPage();
await page.goto('https://playwright.dev');

await context.tracing.startChunk();
await page.getByText('Get Started').click();
// Everything between startChunk and stopChunk will be recorded in the trace.
await context.tracing.stopChunk({ path: 'trace1.zip' });

await context.tracing.startChunk();
await page.goto('http://example.com');
// Save a second trace file with different actions.
await context.tracing.stopChunk({ path: 'trace2.zip' });
```

----------------------------------------

TITLE: Using Page.evalOnSelectorAll in Python (Async)
DESCRIPTION: Example of using the eval_on_selector_all method in Python with async/await to evaluate expressions on all elements matching a selector. This async method finds all matching elements and passes them to the provided JavaScript expression.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_48

LANGUAGE: python
CODE:
```
div_counts = await page.eval_on_selector_all("div", "(divs, min) => divs.length >= min", 10)
```

----------------------------------------

TITLE: Handling Worker Events in Playwright using JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to subscribe to the 'worker' event on a Playwright Page object to detect when a new WebWorker is created. It also shows how to subscribe to the 'close' event on the Worker instance to detect when it's destroyed. Additionally, it iterates through the currently active workers associated with the page and logs their URLs.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-worker.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
page.on('worker', worker => {
  console.log('Worker created: ' + worker.url());
  worker.on('close', worker => console.log('Worker destroyed: ' + worker.url()));
});

console.log('Current workers:');
for (const worker of page.workers())
  console.log('  ' + worker.url());
```

----------------------------------------

TITLE: Typing Text with Playwright Keyboard in Python (Async)
DESCRIPTION: Demonstrates the usage of the Keyboard.type method in Python with async syntax, showing both instant typing and delayed typing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_27

LANGUAGE: python
CODE:
```
await page.keyboard.type("Hello") # types instantly
await page.keyboard.type("World", delay=100) # types slower, like a user
```

----------------------------------------

TITLE: Waiting for URL Navigation in Python (Async)
DESCRIPTION: This snippet shows how to use Frame.wait_for_url to wait for navigation to a specific URL after clicking a link in Python using the async API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_52

LANGUAGE: python
CODE:
```
await frame.click("a.delayed-navigation") # clicking the link will indirectly cause a navigation
await frame.wait_for_url("**/target.html")
```

----------------------------------------

TITLE: Multiple Web Servers Configuration
DESCRIPTION: Advanced configuration showing how to set up multiple web servers running simultaneously for frontend and backend services.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-webserver-js.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  webServer: [
    {
      command: 'npm run start',
      url: 'http://localhost:3000',
      name: 'Frontend',
      timeout: 120 * 1000,
      reuseExistingServer: !process.env.CI,
    },
    {
      command: 'npm run backend',
      url: 'http://localhost:3333',
      name: 'Backend',
      timeout: 120 * 1000,
      reuseExistingServer: !process.env.CI,
    }
  ],
  use: {
    baseURL: 'http://localhost:3000',
  },
});
```

----------------------------------------

TITLE: Iterating Over All Matching Locators with Playwright Python
DESCRIPTION: Shows how to find all elements matching a locator using `locator.all()`. It then iterates through the list of found locators and performs an action, such as checking each checkbox found by role.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_27

LANGUAGE: python
CODE:
```
# Check all checkboxes!
checkboxes = page.get_by_role("checkbox")
for checkbox in checkboxes.all():
  checkbox.check()
```

----------------------------------------

TITLE: Configuring MSTest Playwright Tests with .runsettings
DESCRIPTION: This XML configuration specifies MSTest-specific settings for parallelization, environment variables for debugging, and Playwright options such as browser selection and launch parameters.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-csharp.md#2025-04-22_snippet_7

LANGUAGE: XML
CODE:
```
<RunSettings>
  <!-- MSTest adapter -->  
  <MSTest>
    <Parallelize>
      <Workers>4</Workers>
      <Scope>ClassLevel</Scope>
    </Parallelize>
  </MSTest>
  <!-- General run configuration -->
  <RunConfiguration>
    <EnvironmentVariables>
      <!-- For debugging selectors, it's recommend to set the following environment variable -->
      <DEBUG>pw:api</DEBUG>
    </EnvironmentVariables>
  </RunConfiguration>
  <!-- Playwright -->  
  <Playwright>
    <BrowserName>chromium</BrowserName>
    <ExpectTimeout>5000</ExpectTimeout>
    <LaunchOptions>
      <Headless>false</Headless>
      <Channel>msedge</Channel>
    </LaunchOptions>
  </Playwright>
</RunSettings>
```

----------------------------------------

TITLE: Accessing and Interacting with Frame Objects in Playwright Python (Sync)
DESCRIPTION: This synchronous Python snippet details accessing frames by name or URL regex, and performing a fill operation using Playwright's sync API. It's suitable when asynchronous programming isn't needed, and assumes 'page' is already created. Uses 'frame-login' and a regex URL to select frames, and fills an input field.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/frames.md#2025-04-22_snippet_8

LANGUAGE: python sync
CODE:
```
# Get frame using the frame's name attribute
frame = page.frame('frame-login')

# Get frame using frame's URL
frame = page.frame(url=r'.*domain.*')

# Interact with the frame
frame.fill('#username-input', 'John')
```

----------------------------------------

TITLE: Querying All Inner Texts with Playwright C#
DESCRIPTION: Illustrates retrieving all innerText values from 'link' role nodes in C# using Playwright. The result is a collection of string values per matched node.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_9

LANGUAGE: C#
CODE:
```
var texts = await page.GetByRole(AriaRole.Link).AllInnerTextsAsync();
```

----------------------------------------

TITLE: Running Playwright Tests with Multiple Workers (MSTest)
DESCRIPTION: Command to run Playwright tests with multiple workers using MSTest.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_14

LANGUAGE: bash
CODE:
```
dotnet test -- MSTest.Parallelize.Workers=5
```

----------------------------------------

TITLE: Vue Component Testing Example
DESCRIPTION: Shows how to test a Vue component using Playwright's experimental Vue testing package.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_24

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/experimental-ct-vue';
import HelloWorld from './HelloWorld.vue';

test.use({ viewport: { width: 500, height: 500 } });

test('should work', async ({ mount }) => {
  const component = await mount(HelloWorld, {
    props: {
      msg: 'Greetings',
    },
  });
  await expect(component).toContainText('Greetings');
});
```

----------------------------------------

TITLE: Open Last HTML Report (CLI)
DESCRIPTION: Command to open the most recently generated HTML report in the default web browser. By default, it looks for the report in the 'playwright-report' folder.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_16

LANGUAGE: bash
CODE:
```
npx playwright show-report
```

----------------------------------------

TITLE: Overriding Locale and Timezone Per Test (JavaScript)
DESCRIPTION: This snippet demonstrates overriding the globally configured locale and timezone for a specific test using `test.use` in a Playwright Test file (`example.spec.ts`). This test will run emulating a German locale (`de-DE`) and Berlin timezone.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_21

LANGUAGE: javascript
CODE:
```
```js tab=js-test title="tests/example.spec.ts"
import { test, expect } from '@playwright/test';

test.use({
  locale: 'de-DE',
  timezoneId: 'Europe/Berlin',
});

test('my test for de lang in Berlin timezone', async ({ page }) => {
  await page.goto('https://www.bing.com');
  // ...
});
```
```

----------------------------------------

TITLE: Creating Emulated Context with Playwright Async API (Python)
DESCRIPTION: This asynchronous Python snippet shows how to use `playwright.async_api` to launch a WebKit browser and create a new context emulating an 'iPhone 13'. Device parameters are retrieved from `playwright.devices` and passed to `browser.new_context`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
```python async
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    iphone_13 = playwright.devices['iPhone 13']
    browser = await playwright.webkit.launch(headless=False)
    context = await browser.new_context(
        **iphone_13,
    )

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())
```
```

----------------------------------------

TITLE: Testing Inactivity Logout - Playwright Python Sync
DESCRIPTION: Uses Playwright Python synchronous API to test inactivity-logout triggers by manipulating the clock and simulating inactivity. The snippet includes clock installation, interaction, fast forwarding, and verifying logout. Dependencies and behaviors match those in the async variant.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_11

LANGUAGE: python
CODE:
```
# Initial time does not matter for the test, so we can pick current time.
page.clock.install()
page.goto("http://localhost:3333")
# Interact with the page
page.get_by_role("button").click()

# Fast forward time 5 minutes as if the user did not do anything.
# Fast forward is like closing the laptop lid and opening it after 5 minutes.
# All the timers due will fire once immediately, as in the real browser.
page.clock.fast_forward("05:00")

```

----------------------------------------

TITLE: Simulating Touch Pan Gesture with Playwright Java
DESCRIPTION: This snippet provides Java code for simulating a touch pan gesture on a Playwright `Locator`. It includes helper methods to dispatch `touchstart`, `touchmove`, and `touchend` events based on a starting point and delta values. It also shows an example test case using this functionality to pan a map element on Google Maps.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#_snippet_3

LANGUAGE: Java
CODE:
```
        .setUserAgent("Mozilla/5.0 (Linux; Android 12; Pixel 7 Build/SP1A.210812.015) AppleWebKit/537.36" +
          " (KHTML, like Gecko) Chrome/94.0.4606.71 Mobile Safari/537.36")
        .setHasTouch(true)
        .setIsMobile(true)
      );
      Page page = context.newPage();

      page.navigate("https://www.google.com/maps/place/@37.4117722,-122.0713234,15z", new Page.NavigateOptions().setWaitUntil(WaitUntilState.COMMIT));
      page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Keep using web")).click();
      page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Keep using web")).waitFor(
        new Locator.WaitForOptions().setState(WaitForSelectorState.HIDDEN));

      Locator met = page.locator("[data-test-id='met']");
      for (int i = 0; i < 5; i++) {
        pan(met, 200, 100);
      }
      page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get("screenshot.png")));
    }
  }

  public static void pan(Locator locator, int deltaX, int deltaY) {
    pan(locator, deltaX, deltaY, 5);
  }

  public static void pan(Locator locator, int deltaX, int deltaY, int steps) {
    BoundingBox bounds = locator.boundingBox();
    double centerX = bounds.x + bounds.width / 2;
    double centerY = bounds.y + bounds.height / 2;

    List<Map<String, Object>> touches = List.of(Map.of(
      "identifier", 0,
      "clientX", centerX,
      "clientY", centerY
    ));
    locator.dispatchEvent("touchstart", Map.of(
      "touches", touches,
      "changedTouches", touches,
      "targetTouches", touches
    ));

    for (int i = 1; i <= steps; i++) {
      touches = List.of(Map.of(
        "identifier", 0,
        "clientX", centerX + deltaX * i / steps,
        "clientY", centerY + deltaY * i / steps
      ));
      locator.dispatchEvent("touchmove", Map.of(
        "touches", touches,
        "changedTouches", touches,
        "targetTouches", touches
      ));
    }

    locator.dispatchEvent("touchend");
  }
```

----------------------------------------

TITLE: Intercepting WebSocket Messages with Playwright in JavaScript
DESCRIPTION: Use Playwright to route WebSocket messages to a server and intercept and modify certain messages before sending them. JavaScript environment is required along with Playwright page instance.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
await page.routeWebSocket('/ws', ws => {
  const server = ws.connectToServer();
  ws.onMessage(message => {
    if (message === 'request')
      server.send('request2');
    else
      server.send(message);
  });
});
```

----------------------------------------

TITLE: Using CSS Layout Pseudo-classes in Playwright
DESCRIPTION: Demonstrates how to use CSS layout pseudo-classes like :right-of, :left-of, :above, :below, and :near to select elements based on their position relative to other elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
// Fill an input to the right of "Username".
await page.locator('input:right-of(:text("Username"))').fill('value');

// Click a button near the promo card.
await page.locator('button:near(.promo-card)').click();

// Click the radio input in the list closest to the "Label 3".
await page.locator('[type=radio]:left-of(:text("Label 3"))').first().click();
```

LANGUAGE: java
CODE:
```
// Fill an input to the right of "Username".
page.locator("input:right-of(:text(\"Username\"))").fill("value");

// Click a button near the promo card.
page.locator("button:near(.promo-card)").click();

// Click the radio input in the list closest to the "Label 3".
page.locator("[type=radio]:left-of(:text(\"Label 3\"))").first().click();
```

LANGUAGE: python
CODE:
```
# Fill an input to the right of "Username".
await page.locator("input:right-of(:text(\"Username\"))").fill("value")

# Click a button near the promo card.
await page.locator("button:near(.promo-card)").click()

# Click the radio input in the list closest to the "Label 3".
await page.locator("[type=radio]:left-of(:text(\"Label 3\"))").first.click()
```

LANGUAGE: csharp
CODE:
```
// Fill an input to the right of "Username".
await page.Locator("input:right-of(:text(\"Username\"))").FillAsync("value");

// Click a button near the promo card.
await page.Locator("button:near(.promo-card)").ClickAsync();

// Click the radio input in the list closest to the "Label 3".
await page.Locator("[type=radio]:left-of(:text(\"Label 3\"))").First.ClickAsync();
```

----------------------------------------

TITLE: Updating Geolocation in Python (Sync)
DESCRIPTION: Changes the geolocation of a browser context using the Playwright Python sync API. This allows testing how an application responds to location changes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_54

LANGUAGE: python
CODE:
```
context.set_geolocation({"longitude": 48.858455, "latitude": 2.294474})
```

----------------------------------------

TITLE: Fast Forward Clock Example
DESCRIPTION: Demonstrates advancing the clock by a specified duration in milliseconds or time string format
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-clock.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
await page.clock.fastForward(1000);
await page.clock.fastForward('30:00');
```

LANGUAGE: python
CODE:
```
await page.clock.fast_forward(1000)
await page.clock.fast_forward("30:00")
```

LANGUAGE: java
CODE:
```
page.clock().fastForward(1000);
page.clock().fastForward("30:00");
```

LANGUAGE: csharp
CODE:
```
await page.Clock.FastForwardAsync(1000);
await page.Clock.FastForwardAsync("30:00");
```

----------------------------------------

TITLE: Character-by-Character Text Input in Playwright
DESCRIPTION: Shows how to input text character by character using pressSequentially method, simulating real keyboard input with optional delay.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
await page.locator('#area').pressSequentially('Hello World!');
```

LANGUAGE: java
CODE:
```
page.locator("#area").pressSequentially("Hello World!");
```

LANGUAGE: python
CODE:
```
await page.locator('#area').press_sequentially('Hello World!')
```

LANGUAGE: csharp
CODE:
```
await Page.Locator("#area").PressSequentiallyAsync("Hello World!");
```

----------------------------------------

TITLE: Time Manipulation Using Clock API
DESCRIPTION: Demonstrates usage of the new Clock API for controlling time within tests, including setting predefined times and fast-forwarding through time intervals.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
// Initialize clock and let the page load naturally.
await page.clock.install({ time: new Date('2024-02-02T08:00:00') });
await page.goto('http://localhost:3333');

// Pretend that the user closed the laptop lid and opened it again at 10am,
// Pause the time once reached that point.
await page.clock.pauseAt(new Date('2024-02-02T10:00:00'));

// Assert the page state.
await expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:00 AM');

// Close the laptop lid again and open it at 10:30am.
await page.clock.fastForward('30:00');
await expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:30:00 AM');
```

----------------------------------------

TITLE: Converting Locator to FrameLocator with contentFrame in JavaScript
DESCRIPTION: Demonstrates how to convert a Locator object to a FrameLocator using the contentFrame method to interact with content inside an iframe in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_44

LANGUAGE: javascript
CODE:
```
const locator = page.locator('iframe[name="embedded"]');
// ...
const frameLocator = locator.contentFrame();
await frameLocator.getByRole('button').click();
```

----------------------------------------

TITLE: Configuring Project Dependencies in Playwright Config
DESCRIPTION: Configuration example showing how to set up project dependencies for global setup in playwright.config.ts. Demonstrates setting up a database project that other test projects depend on.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  testDir: './tests',
  // ...
  projects: [
    {
      name: 'setup db',
      testMatch: /global\.setup\.ts/,
    },
    // {
    //   other project
    // }
  ]
});
```

----------------------------------------

TITLE: Running Playwright Tests in Headed Mode
DESCRIPTION: Execute tests in headed mode to visually see how Playwright interacts with the website during test execution.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npx playwright test --headed
```

----------------------------------------

TITLE: Enabling Fully Parallel Mode in Playwright Config (TypeScript)
DESCRIPTION: Configures Playwright Test to run all tests in fully parallel mode across all files and projects.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  fullyParallel: true,
});
```

----------------------------------------

TITLE: Handling Popups and Waiting for DOM Content in C#
DESCRIPTION: Shows how to wait for a popup to be triggered by a button click and then wait for the 'domcontentloaded' state before interacting with the popup in C#.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_129

LANGUAGE: csharp
CODE:
```
var popup = await page.RunAndWaitForPopupAsync(async () =>
{
    await page.GetByRole(AriaRole.Button).ClickAsync(); // click triggers the popup
});
// Wait for the "DOMContentLoaded" event.
await popup.WaitForLoadStateAsync(LoadState.DOMContentLoaded);
Console.WriteLine(await popup.TitleAsync()); // popup is ready to use.
```

----------------------------------------

TITLE: Enabling Fully Parallel Test Execution in Playwright Test
DESCRIPTION: Configuration to run all tests in all files concurrently, rather than just parallelizing at the file level.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  fullyParallel: true,
});
```

----------------------------------------

TITLE: Running Playwright Tests in Headed Mode (Batch)
DESCRIPTION: Commands to run Playwright tests in headed mode, opening a browser window for each test, using Batch.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_2

LANGUAGE: csharp
CODE:
```
set HEADED=1
dotnet test
```

----------------------------------------

TITLE: Running Playwright Test with Specific Title
DESCRIPTION: Command to run a Playwright test with a specific title using the filter flag.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_12

LANGUAGE: bash
CODE:
```
dotnet test --filter "Name~GetStartedLink"
```

----------------------------------------

TITLE: Using PageAssertions to Verify URL Pattern in Python (Sync)
DESCRIPTION: Example of using expect assertions in synchronous Python to verify URL pattern after clicking a sign-in button. Uses regular expressions for pattern matching in the URL assertion.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
import re
from playwright.sync_api import Page, expect

def test_navigates_to_login_page(page: Page) -> None:
    # ..
    page.get_by_text("Sign in").click()
    expect(page).to_have_url(re.compile(r".*/login"))
```

----------------------------------------

TITLE: Parallel Test Execution Example with Playwright
DESCRIPTION: Shows how to structure test classes for parallel execution with Playwright and JUnit, demonstrating multiple test classes running concurrently.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/junit-java.md#2025-04-22_snippet_3

LANGUAGE: java
CODE:
```
@UsePlaywright
class Test1 {
  @Test
  void shouldClickButton(Page page) {
    page.navigate("data:text/html,<script>var result;</script><button onclick='result=\"Clicked\"'>Go</button>");
    page.locator("button").click();
    assertEquals("Clicked", page.evaluate("result"));
  }

  @Test
  void shouldCheckTheBox(Page page) {
    page.setContent("<input id='checkbox' type='checkbox'></input>");
    page.locator("input").check();
    assertEquals(true, page.evaluate("window['checkbox'].checked"));
  }

  @Test
  void shouldSearchWiki(Page page) {
    page.navigate("https://www.wikipedia.org/");
    page.locator("input[name=\"search\"]").click();
    page.locator("input[name=\"search\"]").fill("playwright");
    page.locator("input[name=\"search\"]").press("Enter");
    assertThat(page).hasURL("https://en.wikipedia.org/wiki/Playwright");
  }
}

@UsePlaywright
class Test2 {
  @Test
  void shouldReturnInnerHTML(Page page) {
    page.setContent("<div>hello</div>");
    assertEquals("hello", page.innerHTML("css=div"));
  }

  @Test
  void shouldClickButton(Page page) {
    Page popup = page.waitForPopup(() -> {
      page.evaluate("window.open('about:blank');");
    });
    assertEquals("about:blank", popup.url());
  }
}
```

----------------------------------------

TITLE: Asserting Filtered Locator Count using Playwright
DESCRIPTION: This code demonstrates how to assert the count of filtered locators using Playwright in different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_20

LANGUAGE: javascript
CODE:
```
await expect(page
    .getByRole('listitem')
    .filter({ has: page.getByRole('heading', { name: 'Product 2' }) }))
    .toHaveCount(1);
```

LANGUAGE: java
CODE:
```
assertThat(page
    .getByRole(AriaRole.LISTITEM)
    .filter(new Locator.FilterOptions()
        .setHas(page.GetByRole(AriaRole.HEADING,
                               new Page.GetByRoleOptions().setName("Product 2")))))
    .hasCount(1);
```

LANGUAGE: python
CODE:
```
await expect(
    page.get_by_role("listitem").filter(
        has=page.get_by_role("heading", name="Product 2")
    )
).to_have_count(1)
```

LANGUAGE: csharp
CODE:
```
await Expect(Page
    .GetByRole(AriaRole.Listitem)
    .Filter(new() {
        Has = page.GetByRole(AriaRole.Heading, new() { Name = "Product 2" })
    }))
    .ToHaveCountAsync(1);
```

----------------------------------------

TITLE: Svelte Component Test Setup with Playwright
DESCRIPTION: This code snippet illustrates how to set up a component test for a Svelte app using Playwright Test. It demonstrates mounting the App component and checking its content.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
import { test, expect } from '@playwright/experimental-ct-svelte';
import App from './App.svelte';

test('should work', async ({ mount }) => {
  const component = await mount(App);
  await expect(component).toContainText('Learn Svelte');
});
```

----------------------------------------

TITLE: Using APIResponse with Async Python in Playwright
DESCRIPTION: Example of making an HTTP request using Playwright's async API, then validating and processing the response. Shows how to check response status, headers, and parse JSON data from the response body.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponse.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    context = await playwright.request.new_context()
    response = await context.get("https://example.com/user/repos")
    assert response.ok
    assert response.status == 200
    assert response.headers["content-type"] == "application/json; charset=utf-8"
    json_data = await response.json()
    assert json_data["name"] == "foobar"
    assert await response.body() == '{"status": "ok"}'


async def main():
    async with async_playwright() as playwright:
        await run(playwright)

asyncio.run(main())
```

----------------------------------------

TITLE: Asserting Element Viewport Intersection in Playwright Java
DESCRIPTION: Demonstrates using the `LocatorAssertions.toBeInViewport()` assertion in Playwright Java to check if an element intersects the viewport. It shows how to assert partial intersection, full non-intersection (`not().isInViewport()`), and intersection with a specific ratio. Requires a `Locator` instance.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_29

LANGUAGE: java
CODE:
```
Locator locator = page.getByRole(AriaRole.BUTTON);

// Make sure at least some part of element intersects viewport.
assertThat(locator).isInViewport();

// Make sure element is fully outside of viewport.
assertThat(locator).not().isInViewport();

// Make sure that at least half of the element intersects viewport.
assertThat(locator).isInViewport(new LocatorAssertions.IsInViewportOptions().setRatio(0.5));
```

----------------------------------------

TITLE: Simulating Pinch Gesture - Playwright Python Sync
DESCRIPTION: Defines a synchronous function to simulate a pinch gesture on a given Playwright locator. It calculates touch points based on the locator's bounding box and dispatches 'touchstart', 'touchmove', and 'touchend' events with appropriate touch data to simulate the gesture. Requires a Playwright Locator object and an argument dictionary specifying deltaX, steps, and direction ('in' or 'out').
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#_snippet_16

LANGUAGE: Python
CODE:
```
from playwright.sync_api import sync_playwright, expect

def pinch(locator, arg):
    bounds = locator.bounding_box()
    centerX = bounds['x'] + bounds['width'] / 2
    centerY = bounds['y'] + bounds['height'] / 2

    deltaX = arg.get('deltaX', 50)
    steps = arg.get('steps', 5)
    stepDeltaX = deltaX / (steps + 1)

    touches = [
        {
            'identifier': 0,
            'clientX': centerX - (deltaX if arg.get('direction') == 'in' else stepDeltaX),
            'clientY': centerY,
        },
        {
            'identifier': 1,
            'clientX': centerX + (deltaX if arg.get('direction') == 'in' else stepDeltaX),
            'clientY': centerY,
        },
    ]
    locator.dispatch_event('touchstart', {
        'touches': touches,
        'changedTouches': touches,
        'targetTouches': touches
    })

    for i in range(1, steps + 1):
        offset = deltaX - i * stepDeltaX if arg.get('direction') == 'in' else stepDeltaX * (i + 1)
        touches = [
            {
                'identifier': 0,
                'clientX': centerX - offset,
                'clientY': centerY,
            },
            {
                'identifier': 1,
                'clientX': centerX + offset,
                'clientY': centerY,
            },
        ]
        locator.dispatch_event('touchmove', {
            'touches': touches,
            'changedTouches': touches,
            'targetTouches': touches
        })

    locator.dispatch_event('touchend', {
        'touches': [],
        'changedTouches': [],
        'targetTouches': []
    })
```

----------------------------------------

TITLE: Scanning for Specific WCAG Violations with axe-core and Playwright - JavaScript
DESCRIPTION: This snippet shows how to use AxeBuilder.withTags to restrict an accessibility scan to only those rules matching provided WCAG A and AA tags. After navigating to a URL, the scan runs using the specified tags and asserts that no violations are found. Requires Playwright and @axe-core/playwright, and uses tags for selective coverage according to WCAG guideline levels.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
test('should not have any automatically detectable WCAG A or AA violations', async ({ page }) => {
  await page.goto('https://your-site.com/');

  const accessibilityScanResults = await new AxeBuilder({ page })
      .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])
      .analyze();

  expect(accessibilityScanResults.violations).toEqual([]);
});
```

----------------------------------------

TITLE: Evaluating Selectors on Frame in Java
DESCRIPTION: Shows how to use the evalOnSelectorAll method in Java to evaluate a selector on a frame and return a boolean result based on the number of matching elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_14

LANGUAGE: java
CODE:
```
boolean divsCounts = (boolean) page.evalOnSelectorAll("div", "(divs, min) => divs.length >= min", 10);
```

----------------------------------------

TITLE: Recording HAR Programmatically with Playwright .NET
DESCRIPTION: Illustrates how to record network traffic into a HAR file programmatically in Playwright for .NET. It uses browser.NewContextAsync with RecordHarPath and RecordHarUrlFilterString options. The context must be closed to ensure the HAR file is saved.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_37

LANGUAGE: csharp
CODE:
```
var context = await browser.NewContextAsync(new()
{
  RecordHarPath = harPath,
  RecordHarUrlFilterString = "**/api/**",
});

// ... Perform actions ...

// Close context to ensure HAR is saved to disk.
context.CloseAsync();
```

----------------------------------------

TITLE: Setting Global Timeout in Playwright Test
DESCRIPTION: Configuration to set a maximum time for the entire test suite to run, useful for preventing hanging tests in CI.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  globalTimeout: process.env.CI ? 60 * 60 * 1000 : undefined,
});
```

----------------------------------------

TITLE: Dragging Elements with Locator.drag_to in Python (Async)
DESCRIPTION: Shows how to drag a source element to a target element in Python using Playwright's async drag_to method. Includes specifying custom positions for more precise dragging.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_41

LANGUAGE: python
CODE:
```
source = page.locator("#source")
target = page.locator("#target")

await source.drag_to(target)
# or specify exact positions relative to the top-left corners of the elements:
await source.drag_to(
  target,
  source_position={"x": 34, "y": 7},
  target_position={"x": 10, "y": 20}
)
```

----------------------------------------

TITLE: Testing Status Text with Playwright
Python Async
DESCRIPTION: This Python snippet demonstrates an asynchronous test using the Playwright library to assert that a status element has the text 'Submitted' after a button click. It requires the playwright.async_api module.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-playwrightassertions.md#2025-04-22_snippet_1

LANGUAGE: python async
CODE:
```
from playwright.async_api import Page, expect

async def test_status_becomes_submitted(page: Page) -> None:
    # ..
    await page.locator("#submit-button").click()
    await expect(page.locator(".status")).to_have_text("Submitted")
```

----------------------------------------

TITLE: Waiting for Network Responses with Regular Expressions in C#
DESCRIPTION: Demonstrates how to wait for a network response using a regular expression pattern or a predicate function in C#. The example creates a task to wait for a response matching the criteria and then clicks on an element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_7

LANGUAGE: csharp
CODE:
```
// Use a regular expression
var waitForResponseTask = page.WaitForResponseAsync(new Regex("\\.jpeg$"));
await page.GetByText("Update").ClickAsync();
var response = await waitForResponseTask;

// Use a predicate taking a Response object
var waitForResponseTask = page.WaitForResponseAsync(r => r.Url.Contains(token));
await page.GetByText("Update").ClickAsync();
var response = await waitForResponseTask;
```

----------------------------------------

TITLE: Create and Use a Custom Test Fixture for AxeBuilder in JavaScript
DESCRIPTION: Shows how to extend base test with a custom fixture that configures AxeBuilder with common tags and exclusion patterns in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_9

LANGUAGE: JavaScript
CODE:
```
const base = require('@playwright/test');
const AxeBuilder = require('@axe-core/playwright').default;

// Extend base test by providing "makeAxeBuilder"
//
// This new "test" can be used in multiple test files, and each of them will get
// a consistently configured AxeBuilder instance.
exports.test = base.test.extend({
  makeAxeBuilder: async ({ page }, use) => {
    const makeAxeBuilder = () => new AxeBuilder({ page })
        .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])
        .exclude('#commonly-reused-element-with-known-issue');

    await use(makeAxeBuilder);
  }
});
exports.expect = base.expect;
```

----------------------------------------

TITLE: Verifying Redirect Chain Relationship in Playwright Request (Multi-Language)
DESCRIPTION: Illustrates the relationship between the `redirectedFrom()` and `redirectedTo()` methods of the Playwright Request object. It shows that calling `redirectedTo()` on the request returned by `redirectedFrom()` yields the original request object, confirming their inverse relationship within a redirect chain.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
```js
console.log(request.redirectedFrom().redirectedTo() === request); // true
```
```

LANGUAGE: java
CODE:
```
```java
System.out.println(request.redirectedFrom().redirectedTo() == request); // true
```
```

LANGUAGE: python
CODE:
```
```py
assert request.redirected_from.redirected_to == request
```
```

LANGUAGE: csharp
CODE:
```
```csharp
Console.WriteLine(request.RedirectedFrom?.RedirectedTo == request); // True
```
```

----------------------------------------

TITLE: Using Locator.pressSequentially() to Type Text in Playwright
DESCRIPTION: Types text character by character into an element, allowing for configurable delay between keypresses to simulate human typing. Useful for forms or inputs with special keyboard handling.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_74

LANGUAGE: javascript
CODE:
```
await locator.pressSequentially('Hello'); // Types instantly
await locator.pressSequentially('World', { delay: 100 }); // Types slower, like a user
```

LANGUAGE: java
CODE:
```
locator.pressSequentially("Hello"); // Types instantly
locator.pressSequentially("World", new Locator.pressSequentiallyOptions().setDelay(100)); // Types slower, like a user
```

LANGUAGE: python
CODE:
```
await locator.press_sequentially("hello") # types instantly
await locator.press_sequentially("world", delay=100) # types slower, like a user
```

LANGUAGE: python
CODE:
```
locator.press_sequentially("hello") # types instantly
locator.press_sequentially("world", delay=100) # types slower, like a user
```

LANGUAGE: csharp
CODE:
```
await locator.PressSequentiallyAsync("Hello"); // Types instantly
await locator.PressSequentiallyAsync("World", new() { Delay = 100 }); // Types slower, like a user
```

----------------------------------------

TITLE: Configure Base URL per File and Reset in Playwright
DESCRIPTION: This snippet shows how to set a base URL for an entire test file using 'test.use()' and how to reset an option (like baseURL) back to the value defined in the global config within a 'describe' block by setting it to 'undefined'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#_snippet_13

LANGUAGE: TypeScript
CODE:
```
import { test } from '@playwright/test';

// Configure baseURL for this file.
test.use({ baseURL: 'https://playwright.dev/docs/intro' });

test('check intro contents', async ({ page }) => {
  // This test will use "https://playwright.dev/docs/intro" base url as defined above.
});

test.describe(() => {
  // Reset the value to a config-defined one.
  test.use({ baseURL: undefined });

  test('can navigate to intro from the home page', async ({ page }) => {
    // This test will use "https://playwright.dev" base url as defined in the config.
  });
});
```

----------------------------------------

TITLE: Starting Playwright Tracing (Java)
DESCRIPTION: Shows how to start Playwright tracing in Java using `context.tracing().start()` with `Tracing.StartOptions` to configure features like screenshots and snapshots. This begins the trace recording, which is later finalized and saved using `context.tracing().stop()`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_6

LANGUAGE: java
CODE:
```
context.tracing().start(new Tracing.StartOptions()
  .setScreenshots(true)
  .setSnapshots(true));
Page page = context.newPage();
page.navigate("https://playwright.dev");
context.tracing().stop(new Tracing.StopOptions()
  .setPath(Paths.get("trace.zip")));
```

----------------------------------------

TITLE: Conditional Routing by HTTP Method (GET/POST) with Route.fallback - Python (Async)
DESCRIPTION: Provides Playwright Python async handlers for GET/POST method-specific routing. Each function checks the route.request.method, falls back if not handled, and continues otherwise. Structured for concurrent request handling. Input: route object. Output: method-specific logic executed or fallback continues. Constraints: care needed to avoid unhandled requests if all handlers fallback.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_12

LANGUAGE: python
CODE:
```
# Handle GET requests.
async def handle_get(route):
    if route.request.method != "GET":
        await route.fallback()
        return
  # Handling GET only.
  # ...

# Handle POST requests.
async def handle_post(route):
    if route.request.method != "POST":
        await route.fallback()
        return
  # Handling POST only.
  # ...

await page.route("**/*", handle_get)
await page.route("**/*", handle_post)
```

----------------------------------------

TITLE: Evaluating Expressions on Frame in JavaScript
DESCRIPTION: Shows how to use the evaluate method to execute a JavaScript expression within a frame and return its result, including handling of promises.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_18

LANGUAGE: javascript
CODE:
```
const result = await frame.evaluate(([x, y]) => {
  return Promise.resolve(x * y);
}, [7, 8]);
console.log(result); // prints "56"
```

----------------------------------------

TITLE: Creating Emulated Context with Playwright Sync API (Python)
DESCRIPTION: This synchronous Python snippet demonstrates using `playwright.sync_api` to launch a WebKit browser and create a new context emulating an 'iPhone 13'. It retrieves device parameters from `playwright.devices` and applies them using `browser.new_context`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
```python sync
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    iphone_13 = playwright.devices['iPhone 13']
    browser = playwright.webkit.launch(headless=False)
    context = browser.new_context(
        **iphone_13,
    )

with sync_playwright() as playwright:
    run(playwright)
```
```

----------------------------------------

TITLE: Running Specific Playwright Test File
DESCRIPTION: Execute a single test file by passing the file name to the playwright test command.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
npx playwright test landing-page.spec.ts
```

----------------------------------------

TITLE: Recording HAR Files in Browser Context (JavaScript)
DESCRIPTION: Configures HAR (HTTP Archive) recording options for browser context in JavaScript. Controls content management, file path, mode, and URL filtering.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_74

LANGUAGE: javascript
CODE:
```
- `recordHar` <[Object]>
  - `omitContent` ?<[boolean]> Optional setting to control whether to omit request content from the HAR. Defaults to
    `false`. Deprecated, use `content` policy instead.
  - `content` ?<[HarContentPolicy]<"omit"|"embed"|"attach">> Optional setting to control resource content management. If `omit` is specified, content is not persisted. If `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is specified, content is stored inline the HAR file as per HAR specification. Defaults to `attach` for `.zip` output files and to `embed` for all other file extensions.
  - `path` <[path]> Path on the filesystem to write the HAR file to. If the file name ends with `.zip`, `content: 'attach'` is used by default.
  - `mode` ?<[HarMode]<"full"|"minimal">> When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.
  - `urlFilter` ?<[string]|[RegExp]> A glob or regex pattern to filter requests that are stored in the HAR. When a [`option: Browser.newContext.baseURL`] via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor. Defaults to none.
```

----------------------------------------

TITLE: Configure Playwright Test with Multiple Reporters
DESCRIPTION: Set up Playwright Test to use multiple reporters simultaneously in the configuration file. This example uses the 'list' reporter for terminal output and the 'json' reporter to generate a results file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: [
    ['list'],
    ['json', {  outputFile: 'test-results.json' }]
  ],
});
```

----------------------------------------

TITLE: Configuring Sharded Playwright Tests in Azure Pipelines (JavaScript)
DESCRIPTION: This YAML configuration sets up Azure Pipelines to run sharded Playwright tests across multiple projects (chromium, firefox, webkit) with three shards each. It uses a matrix strategy to parallelize the test execution.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_27

LANGUAGE: yaml
CODE:
```
trigger:
- main

pool:
  vmImage: ubuntu-latest

strategy:
  matrix:
    chromium-1:
      project: chromium
      shard: 1/3
    chromium-2:
      project: chromium
      shard: 2/3
    chromium-3:
      project: chromium
      shard: 3/3
    firefox-1:
      project: firefox
      shard: 1/3
    firefox-2:
      project: firefox
      shard: 2/3
    firefox-3:
      project: firefox
      shard: 3/3
    webkit-1:
      project: webkit
      shard: 1/3
    webkit-2:
      project: webkit
      shard: 2/3
    webkit-3:
      project: webkit
      shard: 3/3
steps:
- task: NodeTool@0
  inputs:
    versionSpec: '18'
  displayName: 'Install Node.js'

- script: npm ci
  displayName: 'npm ci'
- script: npx playwright install --with-deps
  displayName: 'Install Playwright browsers'
- script: npx playwright test --project=$(project) --shard=$(shard)
  displayName: 'Run Playwright tests'
  env:
    CI: 'true'
```

----------------------------------------

TITLE: Installing Playwright Headless Shell - Python
DESCRIPTION: Python command to install Playwright with headless shell dependencies
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_12

LANGUAGE: bash
CODE:
```
playwright install --with-deps --only-shell
```

----------------------------------------

TITLE: Configuring Azure Pipelines for Playwright Tests (Java)
DESCRIPTION: This YAML configuration sets up Azure Pipelines to run Playwright tests with Java. It sets up the Java environment, builds and installs the project, installs Playwright browsers, and runs the tests using Maven.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_24

LANGUAGE: yml
CODE:
```
trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: JavaToolInstaller@0
  inputs:
    versionSpec: '17'
    jdkArchitectureOption: 'x64'
    jdkSourceOption: AzureStorage
- script: mvn -B install -D skipTests --no-transfer-progress
  displayName: 'Build and install'
- script: mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install --with-deps"
  displayName: 'Install Playwright browsers'
- script: mvn test
  displayName: 'Run tests'
```

----------------------------------------

TITLE: Testing GitHub API Scenarios with Playwright and MSTest in C#
DESCRIPTION: Implements a suite of API and UI test methods for GitHub issues using Playwright and MSTest in C#. The code demonstrates setup and teardown of API request contexts, creation and validation of both bug and feature issues by direct API requests, as well as repository lifecycle management through GitHub's REST API. Dependencies include Playwright for .NET, MSTest, and environment variables for GitHub credentials; required methods handle API requests, browser navigation, and assertions with proper cleanup between runs.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-csharp.md#2025-04-22_snippet_3

LANGUAGE: csharp
CODE:
```
using System.Text.Json;
using Microsoft.Playwright;
using Microsoft.Playwright.MSTest;

namespace PlaywrightTests;

[TestClass]
public class TestGitHubAPI : PlaywrightTest
{
    static string REPO = "test-repo-2";
    static string USER = Environment.GetEnvironmentVariable("GITHUB_USER");
    static string? API_TOKEN = Environment.GetEnvironmentVariable("GITHUB_API_TOKEN");

    private IAPIRequestContext Request = null!;

    [TestMethod]
    public async Task ShouldCreateBugReport()
    {
        var data = new Dictionary<string, string>
        {
            { "title", "[Bug] report 1" },
            { "body", "Bug description" }
        };
        var newIssue = await Request.PostAsync("/repos/" + USER + "/" + REPO + "/issues", new() { DataObject = data });
        await Expect(newIssue).ToBeOKAsync();

        var issues = await Request.GetAsync("/repos/" + USER + "/" + REPO + "/issues");
        await Expect(newIssue).ToBeOKAsync();
        var issuesJsonResponse = await issues.JsonAsync();
        JsonElement? issue = null;
        foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())
        {
            if (issueObj.TryGetProperty("title", out var title) == true)
            {
                if (title.GetString() == "[Bug] report 1")
                {
                    issue = issueObj;
                }
            }
        }
        Assert.IsNotNull(issue);
        Assert.AreEqual("Bug description", issue?.GetProperty("body").GetString());
    }

    [TestMethod]
    public async Task ShouldCreateFeatureRequests()
    {
        var data = new Dictionary<string, string>
        {
            { "title", "[Feature] request 1" },
            { "body", "Feature description" }
        };
        var newIssue = await Request.PostAsync("/repos/" + USER + "/" + REPO + "/issues", new() { DataObject = data });
        await Expect(newIssue).ToBeOKAsync();

        var issues = await Request.GetAsync("/repos/" + USER + "/" + REPO + "/issues");
        await Expect(newIssue).ToBeOKAsync();
        var issuesJsonResponse = await issues.JsonAsync();

        JsonElement? issue = null;
        foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())
        {
            if (issueObj.TryGetProperty("title", out var title) == true)
            {
                if (title.GetString() == "[Feature] request 1")
                {
                    issue = issueObj;
                }
            }
        }
        Assert.IsNotNull(issue);
        Assert.AreEqual("Feature description", issue?.GetProperty("body").GetString());
    }

    [TestInitialize]
    public async Task SetUpAPITesting()
    {
        await CreateAPIRequestContext();
        await CreateTestRepository();
    }

    private async Task CreateAPIRequestContext()
    {
        var headers = new Dictionary<string, string>
        {
            // We set this header per GitHub guidelines.
            { "Accept", "application/vnd.github.v3+json" },
            // Add authorization token to all requests.
            // Assuming personal access token available in the environment.
            { "Authorization", "token " + API_TOKEN }
        };

        Request = await Playwright.APIRequest.NewContextAsync(new()
        {
            // All requests we send go to this API endpoint.
            BaseURL = "https://api.github.com",
            ExtraHTTPHeaders = headers,
        });
    }

    private async Task CreateTestRepository()
    {
        var resp = await Request.PostAsync("/user/repos", new()
        {
            DataObject = new Dictionary<string, string>()
            {
                ["name"] = REPO,
            },
        });
        await Expect(resp).ToBeOKAsync();
    }

    [TestCleanup]
    public async Task TearDownAPITesting()
    {
        await DeleteTestRepository();
        await Request.DisposeAsync();
    }

    private async Task DeleteTestRepository()
    {
        var resp = await Request.DeleteAsync("/repos/" + USER + "/" + REPO);
        await Expect(resp).ToBeOKAsync();
    }
}

```

----------------------------------------

TITLE: Debugging Playwright Tests with PDB
DESCRIPTION: Example of using the breakpoint() statement to pause test execution and enter the Python debugger for interactive debugging.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_15

LANGUAGE: python
CODE:
```
def test_bing_is_working(page):
    page.goto("https://bing.com")
    breakpoint()
    # ...
```

----------------------------------------

TITLE: Assert Element Contains Class (Java)
DESCRIPTION: Demonstrates using the new `LocatorAssertions.toContainClass` method in Java to assert that a specific element identified by its role and name contains a particular CSS class.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_0

LANGUAGE: Java
CODE:
```
assertThat(page.getByRole(AriaRole.LISTITEM, new Page.GetByRoleOptions().setName("Ship v1.52"))).containsClass("done");
```

----------------------------------------

TITLE: Configuring Geolocation in Playwright Config
DESCRIPTION: Sets up geolocation and required permissions in the Playwright Test configuration file. This allows testing location-based features by emulating a specific geographic position.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_43

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    // Context geolocation
    geolocation: { longitude: 12.492507, latitude: 41.889938 },
    permissions: ['geolocation'],
  },
});
```

----------------------------------------

TITLE: Using Custom Options in Fixtures in TypeScript
DESCRIPTION: This TypeScript code demonstrates how to use a custom option 'person' within a fixture, overriding the default 'page' fixture to set up a chat room with the person's name before each test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
import { test as base } from '@playwright/test';

export type TestOptions = {
  person: string;
};

export const test = base.extend<TestOptions>({
  // Define an option and provide a default value.
  // We can later override it in the config.
  person: ['John', { option: true }],

  // Override default "page" fixture.
  page: async ({ page, person }, use) => {
    await page.goto('/chat');
    // We use "person" parameter as a "name" for the chat room.
    await page.getByLabel('User Name').fill(person);
    await page.getByText('Enter chat room').click();
    // Each test will get a "page" that already has the person name.
    await use(page);
  },
});
```

----------------------------------------

TITLE: Saving a Downloaded File using save_as in Playwright (Python Async)
DESCRIPTION: This snippet demonstrates calling the asynchronous `download.save_as()` method in Python to save a file. It uses `download.suggested_filename` to get the file name. Assumes a `download` object is available within an async function.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-download.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
await download.save_as("/path/to/save/at/" + download.suggested_filename)
```

----------------------------------------

TITLE: Querying All Inner Texts with Playwright JavaScript
DESCRIPTION: Retrieves the innerText from all elements matching the 'link' role using Playwright's JavaScript API. Requires Playwright for JavaScript and a live `page` object. The only input is the selector, yielding an array of innerText strings for further use.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_5

LANGUAGE: JavaScript
CODE:
```
const texts = await page.getByRole('link').allInnerTexts();
```

----------------------------------------

TITLE: Incorrect Dialog Handling Causing Stall (Python Sync)
DESCRIPTION: Demonstrates incorrect usage where a synchronous 'dialog' listener is registered but does not handle the dialog (e.g., by accepting or dismissing it). This causes the script execution to hang at the synchronous action that triggered the dialog because web dialogs are modal.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
```python sync
page.on("dialog", lambda dialog: print(dialog.message))
page.get_by_role("button").click() # Will hang here
```
```

----------------------------------------

TITLE: Overriding Request Headers with Playwright Route.ContinueAsync - C#
DESCRIPTION: Demonstrates interception and modification of HTTP request headers in C# using Playwright's RouteAsync and ContinueAsync methods. Needs Playwright C# bindings. The handler creates a new dictionary of headers, adds foo, removes origin, and forwards the request with altered headers. Cannot modify the 'Cookie' header in this way.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
await page.RouteAsync("**/*", async route =>
{
    var headers = new Dictionary<string, string>(route.Request.Headers) { { "foo", "bar" } };
    headers.Remove("origin");
    await route.ContinueAsync(new() { Headers = headers });
});
```

----------------------------------------

TITLE: Skipping Test Steps in Playwright
DESCRIPTION: Demonstrates how to use test.step.skip() to temporarily disable the execution of a test step. This is useful for steps that are currently failing and planned for a near-term fix.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_41

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('my test', async ({ page }) => {
  // ...
  await test.step.skip('not yet ready', async () => {
    // ...
  });
});
```

----------------------------------------

TITLE: Monitoring New Pages with Event Listeners in Playwright
DESCRIPTION: Examples of monitoring all new pages in a context using event listeners, which is useful when the action triggering new pages is unknown.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pages.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
// Get all new pages (including popups) in the context
context.on('page', async page => {
  await page.waitForLoadState();
  console.log(await page.title());
});
```

LANGUAGE: java
CODE:
```
// Get all new pages (including popups) in the context
context.onPage(page -> {
  page.waitForLoadState();
  System.out.println(page.title());
});
```

LANGUAGE: python
CODE:
```
# Get all new pages (including popups) in the context (async)
async def handle_page(page):
    await page.wait_for_load_state()
    print(await page.title())

context.on("page", handle_page)
```

LANGUAGE: python
CODE:
```
# Get all new pages (including popups) in the context (sync)
def handle_page(page):
    page.wait_for_load_state()
    print(page.title())

context.on("page", handle_page)
```

LANGUAGE: csharp
CODE:
```
// Get all new pages (including popups) in the context
context.Page += async  (_, page) => {
    await page.WaitForLoadStateAsync();
    Console.WriteLine(await page.TitleAsync());
};
```

----------------------------------------

TITLE: Browser Context Request Cookie Sharing Example
DESCRIPTION: Demonstrates how APIRequestContext associated with a browser context automatically shares and updates cookies between API requests and the browser context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-js.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
test('context request will share cookie storage with its browser context', async ({
  page,
  context,
}) => {
  await context.route('https://www.github.com/', async route => {
    // Send an API request that shares cookie storage with the browser context.
    const response = await context.request.fetch(route.request());
    const responseHeaders = response.headers();

    // The response will have 'Set-Cookie' header.
    const responseCookies = new Map(responseHeaders['set-cookie']
        .split('\n')
        .map(c => c.split(';', 2)[0].split('=')));
    // The response will have 3 cookies in 'Set-Cookie' header.
    expect(responseCookies.size).toBe(3);
    const contextCookies = await context.cookies();
    // The browser context will already contain all the cookies from the API response.
    expect(new Map(contextCookies.map(({ name, value }) =>
      [name, value])
    )).toEqual(responseCookies);

    await route.fulfill({
      response,
      headers: { ...responseHeaders, foo: 'bar' },
    });
  });
  await page.goto('https://www.github.com/');
});
```

----------------------------------------

TITLE: Mocking WebSocket Responses in Python (Sync)
DESCRIPTION: This code snippet shows how to intercept WebSocket connections and mock the entire communication in Python using synchronous syntax. It responds to a 'request' message with a 'response'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_19

LANGUAGE: python
CODE:
```
def message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    ws.send("response")

page.route_web_socket("wss://example.com/ws", lambda ws: ws.on_message(
    lambda message: message_handler(ws, message)
))
```

----------------------------------------

TITLE: Using Custom Fixture in Test File (TypeScript)
DESCRIPTION: Demonstrates how to import and use a custom fixture in a test file, utilizing the isolated database user created for each worker.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
// Important: import our fixtures.
import { test, expect } from '../playwright/fixtures';

test('test', async ({ dbUserName }) => {
  // Use the user name in the test.
});
```

----------------------------------------

TITLE: Emulating Mobile Devices with Playwright Codegen for Python
DESCRIPTION: Command to generate code while emulating an iPhone 13 for the playwright.dev website using Python. This sets appropriate viewport size, user agent, and other device-specific configurations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_10

LANGUAGE: bash
CODE:
```
playwright codegen --device="iPhone 13" playwright.dev
```

----------------------------------------

TITLE: Setting Up Authentication Directory and .gitignore Entry with Batch
DESCRIPTION: Creates a directory named 'playwright\.auth' with batch commands and adds the path to '.gitignore' to avoid version control. This is crucial for securely storing authentication states.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_1

LANGUAGE: batch
CODE:
```
md playwright\.auth
echo. >> .gitignore
echo "playwright/.auth" >> .gitignore
```

----------------------------------------

TITLE: Triggering Select-All Keyboard Shortcut in Playwright (JavaScript)
DESCRIPTION: This JavaScript snippet shows how to simulate the 'Select All' keyboard shortcut (Ctrl+A or Cmd+A) using Playwright's `page.keyboard.press` method. The 'ControlOrMeta' modifier automatically resolves to 'Control' on Windows/Linux and 'Meta' (Command) on macOS.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
```js
await page.keyboard.press('ControlOrMeta+A');
```
```

----------------------------------------

TITLE: Passing arguments to WaitForFunctionAsync in C#
DESCRIPTION: Shows how to pass a selector argument to the WaitForFunctionAsync predicate in C#. The function waits until an element matching the selector appears in the DOM.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_119

LANGUAGE: csharp
CODE:
```
var selector = ".foo";
await page.WaitForFunctionAsync("selector => !!document.querySelector(selector)", selector);
```

----------------------------------------

TITLE: Testing Events in Svelte Components with Playwright
DESCRIPTION: Shows how to test events in Svelte components using Playwright's component testing framework. It demonstrates mounting a component with a click event handler.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
import { test } from '@playwright/experimental-ct-svelte';

test('event', async ({ mount }) => {
  const component = await mount(Component, { on: { click() {} } });
});
```

----------------------------------------

TITLE: Accessing and Interacting with Frame Objects in Playwright Java
DESCRIPTION: This Java code illustrates getting frame objects by their name or a regular expression-matched URL with Playwright. It covers both frame selection methods and performing a fill operation. Dependencies include Playwright for Java and an initialized page object. The snippet uses 'frame-login' as the frame name, a regex for URL, and fills the username input.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/frames.md#2025-04-22_snippet_6

LANGUAGE: java
CODE:
```
// Get frame using the frame\"s name attribute
Frame frame = page.frame("frame-login");

// Get frame using frame\"s URL
Frame frame = page.frameByUrl(Pattern.compile(".*domain.*"));

// Interact with the frame
frame.fill("#username-input", "John");
```

----------------------------------------

TITLE: Starting Playwright Tracing (C#)
DESCRIPTION: Shows how to initiate asynchronous Playwright tracing in C# using `await context.Tracing.StartAsync()`. Options like `Screenshots` and `Snapshots` are set within a new anonymous object or `TracingStartOptions` instance. Recording is completed with `await context.Tracing.StopAsync()`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_9

LANGUAGE: csharp
CODE:
```
using var playwright = await Playwright.CreateAsync();
var browser = await playwright.Chromium.LaunchAsync();
await using var context = await browser.NewContextAsync();
await context.Tracing.StartAsync(new()
{
  Screenshots = true,
  Snapshots = true
});
var page = await context.NewPageAsync();
await page.GotoAsync("https://playwright.dev");
await context.Tracing.StopAsync(new()
{
  Path = "trace.zip"
});
```

----------------------------------------

TITLE: Using PageAssertions to Verify URL Pattern in Java
DESCRIPTION: Example of using assertThat to verify a page URL pattern after clicking a sign-in button in Java. Uses static import from PlaywrightAssertions and regular expression pattern matching.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_1

LANGUAGE: java
CODE:
```
// ...
import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

public class TestPage {
  // ...
  @Test
  void navigatesToLoginPage() {
    // ...
    page.getByText("Sign in").click();
    assertThat(page).hasURL(Pattern.compile(".*/login"));
  }
}
```

----------------------------------------

TITLE: Vue Component Test Setup with Playwright
DESCRIPTION: This example demonstrates setting up a component test for a Vue app using Playwright Test. It shows how to mount the App component and verify its content.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { test, expect } from '@playwright/experimental-ct-vue';
import App from './App.vue';

test('should work', async ({ mount }) => {
  const component = await mount(App);
  await expect(component).toContainText('Learn Vue');
});
```

----------------------------------------

TITLE: Waiting for Navigation After Timeout Click in Python (Sync)
DESCRIPTION: Demonstrates how to wait for navigation that happens after a timeout-based click in Python using synchronous syntax. Resolves after navigation has finished.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_133

LANGUAGE: python
CODE:
```
with page.expect_navigation():
    # This action triggers the navigation after a timeout.
    page.get_by_text("Navigate after timeout").click()
# Resolves after navigation has finished
```

----------------------------------------

TITLE: Simulating Keyboard Input with Shift Modifier in Playwright (Java)
DESCRIPTION: This snippet demonstrates how to use the Playwright Keyboard API in Java to simulate complex keyboard interactions. It types initial text, moves the cursor, holds the 'Shift' key down, moves the cursor again (selecting text), releases 'Shift', and presses 'Backspace' to delete the selected text. It relies on the `page.keyboard()` object and its methods `type()`, `press()`, `down()`, and `up()`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
```java
page.keyboard().type("Hello World!");
page.keyboard().press("ArrowLeft");
page.keyboard().down("Shift");
for (int i = 0; i < " World".length(); i++)
  page.keyboard().press("ArrowLeft");
page.keyboard().up("Shift");
page.keyboard().press("Backspace");
// Result text will end up saying "Hello!"
```
```

----------------------------------------

TITLE: Implementing Test Hooks with xUnit in Playwright
DESCRIPTION: Example of using InitializeAsync and DisposeAsync hooks in xUnit with Playwright. Demonstrates initialization, test execution, and cleanup phases with custom disposal handling.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-csharp.md#2025-04-22_snippet_7

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using Microsoft.Playwright.Xunit;

namespace PlaywrightTests;

public class UnitTest1: PageTest
{
    [Fact]
    public async Task MainNavigation()
    {
        // Assertions use the expect API.
        await Expect(Page).ToHaveURLAsync("https://playwright.dev/");
    }

    override public async Task InitializeAsync()
    {
        await base.InitializeAsync();
        await Page.GotoAsync("https://playwright.dev");
    }

    public override async Task DisposeAsync()
    {
        Console.WriteLine("After each test cleanup");
        await base.DisposeAsync();
    }
}
```

----------------------------------------

TITLE: Creating Browser Context with Geolocation in Java
DESCRIPTION: Creates a new browser context with geolocation settings and permissions using the Playwright Java client. This sets up the browser environment to emulate a specific geographic location.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_46

LANGUAGE: java
CODE:
```
BrowserContext context = browser.newContext(new Browser.NewContextOptions()
  .setGeolocation(41.890221, 12.492348)
  .setPermissions(Arrays.asList("geolocation")));
```

----------------------------------------

TITLE: Configuring NUnit Playwright Tests with .runsettings
DESCRIPTION: This XML configuration specifies NUnit-specific settings, environment variables for debugging, and Playwright options such as browser selection and launch parameters.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-csharp.md#2025-04-22_snippet_6

LANGUAGE: XML
CODE:
```
<?xml version="1.0" encoding="utf-8"?>
<RunSettings>
  <!-- NUnit adapter -->  
  <NUnit>
    <NumberOfTestWorkers>24</NumberOfTestWorkers>
  </NUnit>
  <!-- General run configuration -->
  <RunConfiguration>
    <EnvironmentVariables>
      <!-- For debugging selectors, it's recommend to set the following environment variable -->
      <DEBUG>pw:api</DEBUG>
    </EnvironmentVariables>
  </RunConfiguration>
  <!-- Playwright -->  
  <Playwright>
    <BrowserName>chromium</BrowserName>
    <ExpectTimeout>5000</ExpectTimeout>
    <LaunchOptions>
      <Headless>false</Headless>
      <Channel>msedge</Channel>
    </LaunchOptions>
  </Playwright>
</RunSettings>
```

----------------------------------------

TITLE: Launching Browser Server using Playwright JavaScript
DESCRIPTION: This snippet demonstrates how to launch a browser server using Playwright's Chromium instance in JavaScript. It requires the Playwright library and showcases connecting to the browser server using a WebSocket endpoint. The required library is the Playwright package, supporting browsers like Chromium, WebKit, and Firefox. The code establishes a connection to the browser server and ensures a clean shutdown.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_15

LANGUAGE: JavaScript
CODE:
```
const { chromium } = require('playwright');  // Or 'webkit' or 'firefox'.\n\n(async () => {\n  const browserServer = await chromium.launchServer();\n  const wsEndpoint = browserServer.wsEndpoint();\n  // Use web socket endpoint later to establish a connection.\n  const browser = await chromium.connect(wsEndpoint);\n  // Close browser instance.\n  await browserServer.close();\n})();
```

----------------------------------------

TITLE: Overriding Request Headers with Playwright Route.continue - JavaScript
DESCRIPTION: Demonstrates how to intercept and override HTTP headers during a network request using Playwright's page.route in JavaScript. Dependencies include the Playwright library and proper async handling. The route handler receives route and request objects; the headers object merges originals, adds a new foo header, and removes bar. The code immediately continues the request with modified headers. Input: route and request objects. Output: request sent to the network with possibly altered headers. Limitations include inability to override the 'Cookie' header (must use addCookies instead).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
await page.route('**/*', async (route, request) => {
  // Override headers
  const headers = {
    ...request.headers(),
    foo: 'foo-value', // set "foo" header
    bar: undefined, // remove "bar" header
  };
  await route.continue({ headers });
});
```

----------------------------------------

TITLE: Configuring Google Cloud Build for Playwright Tests (JavaScript)
DESCRIPTION: This YAML configuration sets up Google Cloud Build to run Playwright tests using the official Playwright Docker image for JavaScript projects. It specifies the Docker image and sets the CI environment variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_39

LANGUAGE: yml
CODE:
```
steps:
- name: mcr.microsoft.com/playwright:v%%VERSION%%-noble
  script: 
  ...
  env:
  - 'CI=true'
```

----------------------------------------

TITLE: Recording Traces with xUnit in Playwright
DESCRIPTION: Example showing how to configure trace recording in an xUnit test class using Playwright. Implements custom test name tracking and trace recording in initialization and disposal methods.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-csharp.md#2025-04-22_snippet_2

LANGUAGE: csharp
CODE:
```
using System.Reflection;
using Microsoft.Playwright;
using Microsoft.Playwright.Xunit;
using Xunit.Sdk;

namespace PlaywrightTests;

[WithTestName]
public class UnitTest1 : PageTest
{
    public override async Task InitializeAsync()
    {
        await base.InitializeAsync().ConfigureAwait(false);
        await Context.Tracing.StartAsync(new()
        {
            Title = $"{WithTestNameAttribute.CurrentClassName}.{WithTestNameAttribute.CurrentTestName}",
            Screenshots = true,
            Snapshots = true,
            Sources = true
        });
    }

    public override async Task DisposeAsync()
    {
        await Context.Tracing.StopAsync(new()
        {
            Path = Path.Combine(
                Environment.CurrentDirectory,
                "playwright-traces",
               $"{WithTestNameAttribute.CurrentClassName}.{WithTestNameAttribute.CurrentTestName}.zip"
            )
        });
        await base.DisposeAsync().ConfigureAwait(false);
    }

    [Fact]
    public async Task GetStartedLink()
    {
        // ...
        await Page.GotoAsync("https://playwright.dev/dotnet/docs/intro");
    }
}

public class WithTestNameAttribute : BeforeAfterTestAttribute
{
    public static string CurrentTestName = string.Empty;
    public static string CurrentClassName = string.Empty;

    public override void Before(MethodInfo methodInfo)
    {
        CurrentTestName = methodInfo.Name;
        CurrentClassName = methodInfo.DeclaringType!.Name;
    }

    public override void After(MethodInfo methodInfo)
    {
    }
}
```

----------------------------------------

TITLE: Recording Traces with NUnit in Playwright
DESCRIPTION: Example showing how to configure trace recording in a NUnit test class using Playwright. Sets up tracing in SetUp and TearDown methods to capture screenshots, snapshots and source code for each test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-csharp.md#2025-04-22_snippet_0

LANGUAGE: csharp
CODE:
```
namespace PlaywrightTests;

[Parallelizable(ParallelScope.Self)]
[TestFixture]
public class Tests : PageTest
{
    [SetUp]
    public async Task Setup()
    {
        await Context.Tracing.StartAsync(new()
        {
            Title = $"{TestContext.CurrentContext.Test.ClassName}.{TestContext.CurrentContext.Test.Name}",
            Screenshots = true,
            Snapshots = true,
            Sources = true
        });
    }

    [TearDown]
    public async Task TearDown()
    {
        await Context.Tracing.StopAsync(new()
        {
            Path = Path.Combine(
                TestContext.CurrentContext.WorkDirectory,
                "playwright-traces",
                $"{TestContext.CurrentContext.Test.ClassName}.{TestContext.CurrentContext.Test.Name}.zip"
            )
        });
    }

    [Test]
    public async Task GetStartedLink()
    {
        // ..
    }
}
```

----------------------------------------

TITLE: Using CSS :text() Pseudo-class in Playwright
DESCRIPTION: Demonstrates how to use the :text() pseudo-class to match the smallest element containing specific text, shown across multiple programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
await page.locator('#nav-bar :text("Home")').click();
```

LANGUAGE: java
CODE:
```
page.locator("#nav-bar :text('Home')").click();
```

LANGUAGE: python
CODE:
```
await page.locator("#nav-bar :text('Home')").click()
```

LANGUAGE: python
CODE:
```
page.locator("#nav-bar :text('Home')").click()
```

LANGUAGE: csharp
CODE:
```
await page.Locator("#nav-bar :text('Home')").ClickAsync();
```

----------------------------------------

TITLE: Configuring HTTP Authentication in Playwright
DESCRIPTION: Shows how to set up HTTP authentication credentials for Playwright tests and browser contexts across different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';
export default defineConfig({
  use: {
    httpCredentials: {
      username: 'bill',
      password: 'pa55w0rd',
    }
  }
});
```

LANGUAGE: javascript
CODE:
```
const context = await browser.newContext({
  httpCredentials: {
    username: 'bill',
    password: 'pa55w0rd',
  },
});
const page = await context.newPage();
await page.goto('https://example.com');
```

LANGUAGE: java
CODE:
```
BrowserContext context = browser.newContext(new Browser.NewContextOptions()
  .setHttpCredentials("bill", "pa55w0rd"));
Page page = context.newPage();
page.navigate("https://example.com");
```

LANGUAGE: python
CODE:
```
context = await browser.new_context(
    http_credentials={"username": "bill", "password": "pa55w0rd"}
)
page = await context.new_page()
await page.goto("https://example.com")
```

LANGUAGE: csharp
CODE:
```
using var context = await Browser.NewContextAsync(new()
{
    HttpCredentials = new HttpCredentials
    {
        Username = "bill",
        Password = "pa55w0rd"
    },
});
var page = await context.NewPageAsync();
await page.GotoAsync("https://example.com");
```

----------------------------------------

TITLE: Using Page.evalOnSelector in C#
DESCRIPTION: Examples of using the EvalOnSelectorAsync method in C# to evaluate expressions on elements matching a selector. This method finds an element and passes it to the provided JavaScript expression, returning the expression's typed result.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_45

LANGUAGE: csharp
CODE:
```
var searchValue = await page.EvalOnSelectorAsync<string>("#search", "el => el.value");
var preloadHref = await page.EvalOnSelectorAsync<string>("link[rel=preload]", "el => el.href");
var html = await page.EvalOnSelectorAsync(".main-container", "(e, suffix) => e.outerHTML + suffix", "hello");
```

----------------------------------------

TITLE: Sending Form URL-encoded Data in Java
DESCRIPTION: Example of sending a POST request with URL-encoded form data using Playwright's API request context in Java. The form data is created using FormData.create() and submitted with application/x-www-form-urlencoded content type.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_10

LANGUAGE: java
CODE:
```
request.post("https://example.com/api/findBook", RequestOptions.create().setForm(
    FormData.create().set("title", "Book Title").set("body", "John Doe")
));
```

----------------------------------------

TITLE: Passing Arguments to Frame.waitForFunction in Java
DESCRIPTION: This Java snippet demonstrates how to pass an argument to the predicate function in Frame.waitForFunction. It waits for an element matching a specific selector to appear in the document.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_41

LANGUAGE: java
CODE:
```
String selector = ".foo";
frame.waitForFunction("selector => !!document.querySelector(selector)", selector);
```

----------------------------------------

TITLE: Performing GET Request via Page - Playwright Java
DESCRIPTION: Demonstrates how to use the Page.request() API to send an HTTP GET request. This is useful for API testing or preparing server state directly from a Playwright test context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_47

LANGUAGE: Java
CODE:
```
APIResponse res = page.request().get("http://example.com/foo.json");
```

----------------------------------------

TITLE: Dragging Elements with Locator.drag_to in Python (Sync)
DESCRIPTION: Demonstrates how to drag a source element to a target element in Python using Playwright's synchronous drag_to method. Includes custom position specification.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_42

LANGUAGE: python
CODE:
```
source = page.locator("#source")
target = page.locator("#target")

source.drag_to(target)
# or specify exact positions relative to the top-left corners of the elements:
source.drag_to(
  target,
  source_position={"x": 34, "y": 7},
  target_position={"x": 10, "y": 20}
)
```

----------------------------------------

TITLE: Using APIResponseAssertions with negation in JavaScript
DESCRIPTION: Example of using the .not property to negate an assertion and check that a response is not OK in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponseassertions.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
await expect(response).not.toBeOK();
```

----------------------------------------

TITLE: Configuring GitHub Actions Reporter in Playwright Config (JS/TS)
DESCRIPTION: Configures the Playwright reporter to use the built-in `github` reporter when running in a CI environment (detected via `process.env.CI`) to generate annotations, falling back to the `list` reporter locally.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_26

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  // 'github' for GitHub Actions CI to generate annotations, plus a concise 'dot'
  // default 'list' when running locally
  reporter: process.env.CI ? 'github' : 'list',
});
```

----------------------------------------

TITLE: Disabling JavaScript in Python (Async)
DESCRIPTION: Creates a new browser context with JavaScript disabled using the Playwright Python async API. This allows testing how web applications behave in environments without JavaScript support.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_77

LANGUAGE: python
CODE:
```
context = await browser.new_context(
  java_script_enabled=False
)
```

----------------------------------------

TITLE: Configuring Video Recording in Playwright Test
DESCRIPTION: Sets up video recording for tests using the TestOptions.video property in the Playwright configuration file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_34

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    video: 'on-first-retry',
  },
});
```

----------------------------------------

TITLE: Pulling Playwright Docker Image for .NET
DESCRIPTION: Command to pull the Playwright Docker image for .NET applications from Microsoft Artifact Registry.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
docker pull mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble
```

----------------------------------------

TITLE: Configuring Project Dependencies in Playwright Tests
DESCRIPTION: Setting up project dependencies to run certain tests before others. This example shows how to configure a setup project that must run before any browser-specific projects, allowing global setup to produce traces and artifacts.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testproject.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'setup',
      testMatch: /global.setup\.ts/,
    },
    {
      name: 'chromium',
      use: devices['Desktop Chrome'],
      dependencies: ['setup'],
    },
    {
      name: 'firefox',
      use: devices['Desktop Firefox'],
      dependencies: ['setup'],
    },
    {
      name: 'webkit',
      use: devices['Desktop Safari'],
      dependencies: ['setup'],
    },
  ],
});
```

----------------------------------------

TITLE: Injecting Initialization Function with Serializable Arg (JavaScript)
DESCRIPTION: Shows how to use Playwright's addInitScript to inject an in-line function with a serializable argument into the browser context. The window object is extended via the injected function. Used for advanced test setup or mocking prior to page scripts. Requires Playwright in a Node.js environment.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_23

LANGUAGE: js
CODE:
```
await page.addInitScript(mock => {
  window.mock = mock;
}, mock);
```

----------------------------------------

TITLE: Filtering Locators with Text in JavaScript
DESCRIPTION: Code example showing how to filter a locator by text content using the hasText option, which allows targeting elements that contain specific text.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_55

LANGUAGE: javascript
CODE:
```
await page.locator('li', { hasText: 'my item' }).locator('button').click();
```

----------------------------------------

TITLE: Adding and Removing Event Listeners in Playwright (Java)
DESCRIPTION: Shows how to add event listeners using methods like `page.onRequest` and `page.onRequestFinished`, and remove them using corresponding `off*` methods (`page.offRequestFinished`) in Playwright for Java. A listener (Consumer<Request>) is added for 'requestFinished' and later removed using its reference.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_11

LANGUAGE: java
CODE:
```
```java
page.onRequest(request -> System.out.println("Request sent: " + request.url()));
Consumer<Request> listener = request -> System.out.println("Request finished: " + request.url());
page.onRequestFinished(listener);
page.navigate("https://wikipedia.org");

// Remove previously added listener, each on* method has corresponding off*
page.offRequestFinished(listener);
page.navigate("https://www.openstreetmap.org/");
```
```

----------------------------------------

TITLE: JUnit Parallel Execution Configuration
DESCRIPTION: Configuration settings for JUnit parallel test execution with Playwright. This configuration enables parallel execution at the class level while ensuring tests within the same class run sequentially for thread safety.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-java.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
junit.jupiter.execution.parallel.enabled = true
junit.jupiter.execution.parallel.mode.default = same_thread
junit.jupiter.execution.parallel.mode.classes.default = concurrent
junit.jupiter.execution.parallel.config.strategy=dynamic
junit.jupiter.execution.parallel.config.dynamic.factor=0.5
```

----------------------------------------

TITLE: Setting Custom User Agent in JavaScript
DESCRIPTION: Creates a new browser context with a custom user agent string using the Playwright JavaScript library. This allows testing how websites respond to different browser identifications.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_64

LANGUAGE: javascript
CODE:
```
const context = await browser.newContext({
  userAgent: 'My user agent'
});
```

----------------------------------------

TITLE: Using to_have_title Assertion in Python (Async)
DESCRIPTION: Example of using to_have_title assertion in async Python to verify page title matches a pattern. This checks if the page title contains 'checkout' using a regular expression.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
import re
from playwright.async_api import expect

# ...
await expect(page).to_have_title(re.compile(r".*checkout"))
```

----------------------------------------

TITLE: Filtering visible elements in C#
DESCRIPTION: Demonstrates using the Filter method on a Locator with the Visible option set to true to select only visible elements matching the locator. It then asserts the count of the filtered visible elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_3

LANGUAGE: csharp
CODE:
```
// Ignore invisible todo items.
var todoItems = Page.GetByTestId("todo-item").Filter(new() { Visible = true });
// Check there are exactly 3 visible ones.
await Expect(todoItems).ToHaveCountAsync(3);
```

----------------------------------------

TITLE: Setting Locale for Browser Context
DESCRIPTION: Defines the locale option for browser contexts. This affects navigator.language, Accept-Language header, and formatting rules, defaulting to the system locale.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_58

LANGUAGE: js
CODE:
```
- `locale` <[string]>

Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default locale. Learn more about emulation in our [emulation guide](../emulation.md#locale--timezone).
```

----------------------------------------

TITLE: Recording Playwright Traces with Java
DESCRIPTION: Demonstrates how to start and stop tracing using the Playwright Java API. It shows launching a browser, creating a context, starting tracing with screenshot and snapshot options, navigating to a page, and stopping tracing to export the trace to a zip file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_57

LANGUAGE: java
CODE:
```
Browser browser = playwright.chromium().launch();
BrowserContext context = browser.newContext();

// Start tracing before creating / navigating a page.
context.tracing().start(new Tracing.StartOptions()
  .setScreenshots(true)
  .setSnapshots(true));

Page page = context.newPage();
page.navigate("https://playwright.dev");

// Stop tracing and export it into a zip archive.
context.tracing().stop(new Tracing.StopOptions()
  .setPath(Paths.get("trace.zip")));
```

----------------------------------------

TITLE: Assert Element Contains Class (Python)
DESCRIPTION: Demonstrates using the new `to_contain_class` assertion on a Playwright Locator to verify if an element has a specific CSS class name. Requires a Playwright `page` object and a Locator.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_0

LANGUAGE: python
CODE:
```
expect(page.get_by_role('listitem', name='Ship v1.52')).to_contain_class('done')
```

----------------------------------------

TITLE: Conditional Routing by HTTP Method (GET/POST) with Route.fallback - Java
DESCRIPTION: Shows Java implementation of method-based request handler splitting using Playwright. First handler processes GET requests, second handles POST. Others fall back to allow specific per-method processing. Inputs/outputs are similar to the JavaScript version, but written with strong typing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_11

LANGUAGE: java
CODE:
```
// Handle GET requests.
page.route("**/*", route -> {
  if (!route.request().method().equals("GET")) {
    route.fallback();
    return;
  }
  // Handling GET only.
  // ...
});

// Handle POST requests.
page.route("**/*", route -> {
  if (!route.request().method().equals("POST")) {
    route.fallback();
    return;
  }
  // Handling POST only.
  // ...
});
```

----------------------------------------

TITLE: Configuring HTTP Proxy in Playwright
DESCRIPTION: Demonstrates how to set up HTTP proxy settings for Playwright browsers and contexts, including examples for global and per-context proxy configuration.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';
export default defineConfig({
  use: {
    proxy: {
      server: 'http://myproxy.com:3128',
      username: 'usr',
      password: 'pwd'
    }
  }
});
```

LANGUAGE: javascript
CODE:
```
const browser = await chromium.launch({
  proxy: {
    server: 'http://myproxy.com:3128',
    username: 'usr',
    password: 'pwd'
  }
});
```

LANGUAGE: java
CODE:
```
Browser browser = chromium.launch(new BrowserType.LaunchOptions()
  .setProxy(new Proxy("http://myproxy.com:3128")
  .setUsername("usr")
  .setPassword("pwd")));
```

LANGUAGE: python
CODE:
```
browser = await chromium.launch(proxy={
  "server": "http://myproxy.com:3128",
  "username": "usr",
  "password": "pwd"
})
```

LANGUAGE: csharp
CODE:
```
var proxy = new Proxy
{
    Server = "http://myproxy.com:3128",
    Username = "user",
    Password = "pwd"
};
await using var browser = await BrowserType.LaunchAsync(new()
{
    Proxy = proxy
});
```

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('should use custom proxy on a new context', async ({ browser }) => {
  const context = await browser.newContext({
    proxy: {
      server: 'http://myproxy.com:3128',
    }
  });
  const page = await context.newPage();

  await context.close();
});
```

----------------------------------------

TITLE: Using expect_event with async context in Python
DESCRIPTION: Shows how to use Python's async context manager to wait for a framenavigated event while performing an action. The function returns the navigation event data after completion.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_108

LANGUAGE: python
CODE:
```
async with page.expect_event("framenavigated") as event_info:
    await page.get_by_role("button")
frame = await event_info.value
```

----------------------------------------

TITLE: Waiting for Network Requests in JavaScript
DESCRIPTION: Shows how to wait for specific network requests in JavaScript using both URL matching and predicate functions. Useful for ensuring requests have been made before proceeding.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_135

LANGUAGE: javascript
CODE:
```
// Start waiting for request before clicking. Note no await.
const requestPromise = page.waitForRequest('https://example.com/resource');
await page.getByText('trigger request').click();
const request = await requestPromise;

// Alternative way with a predicate. Note no await.
const requestPromise = page.waitForRequest(request =>
  request.url() === 'https://example.com' && request.method() === 'GET',
);
await page.getByText('trigger request').click();
const request = await requestPromise;
```

----------------------------------------

TITLE: Running Playwright Tests
DESCRIPTION: Command to execute the Playwright tests using dotnet test runner
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-csharp.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
dotnet test
```

----------------------------------------

TITLE: Match Either Locator with or_ Playwright Python
DESCRIPTION: Shows how to use the `Locator.or_` method in Playwright Python version 1.33. This method creates a locator that matches elements that satisfy the conditions of *either* the original locator or the locator passed as an argument, useful for handling alternative UI states.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_23

LANGUAGE: python
CODE:
```
new_email = page.get_by_role("button", name="New email")
dialog = page.get_by_text("Confirm security settings")
expect(new_email.or_(dialog)).is_visible()
if (dialog.is_visible()):
  page.get_by_role("button", name="Dismiss").click()
new_email.click()
```

----------------------------------------

TITLE: Setting Geolocation in Playwright (Multiple Languages)
DESCRIPTION: Demonstrates how to set geolocation for a browser context in Playwright using different programming languages. This method emulates the browser's geographic location.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_20

LANGUAGE: javascript
CODE:
```
await browserContext.setGeolocation({ latitude: 59.95, longitude: 30.31667 });
```

LANGUAGE: java
CODE:
```
browserContext.setGeolocation(new Geolocation(59.95, 30.31667));
```

LANGUAGE: python
CODE:
```
await browser_context.set_geolocation({"latitude": 59.95, "longitude": 30.31667})
```

LANGUAGE: csharp
CODE:
```
await context.SetGeolocationAsync(new Geolocation()
{
    Latitude = 59.95f,
    Longitude = 30.31667f
});
```

----------------------------------------

TITLE: Handling Uncaught Page Errors with Playwright Events (C#)
DESCRIPTION: Uses Playwright's C# bindings to subscribe to the PageError event and log exceptions. A lambda callback logs uncaught exceptions to the console. Requires a Playwright page instance. No navigation is included. Outputs error strings for further reporting or diagnostics.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_12

LANGUAGE: csharp
CODE:
```
// Log all uncaught errors to the terminal
page.PageError += (_, exception) =>
{
  Console.WriteLine("Uncaught exception: " + exception);
};
```

----------------------------------------

TITLE: Modifying Request Headers in Java
DESCRIPTION: Shows how to modify request headers while falling back to the subsequent handler in Playwright using Java. This allows for intermediate route handlers to modify the URL, method, headers, and post data of the request.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_17

LANGUAGE: java
CODE:
```
page.route("**/*", route -> {
  // Override headers
  Map<String, String> headers = new HashMap<>(route.request().headers());
  headers.put("foo", "foo-value"); // set "foo" header
  headers.remove("bar"); // remove "bar" header
  route.fallback(new Route.ResumeOptions().setHeaders(headers));
});
```

----------------------------------------

TITLE: Recording Network Traffic to HAR File in Playwright
DESCRIPTION: Example of recording network traffic to a HAR file programmatically in Playwright. This allows capturing network interactions for later replay or analysis.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_41

LANGUAGE: javascript
CODE:
```
const context = await browser.newContext({
  recordHar: { path: 'github.har.zip' }
});
// ... do stuff ...
await context.close();
```

----------------------------------------

TITLE: Test Using Environment Variables
DESCRIPTION: Example test that accesses environment variables set in global setup.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
import { test } from '@playwright/test';

test('test', async ({ page }) => {
  // environment variables which are set in globalSetup are only available inside test().
  const { FOO, BAR } = process.env;

  // FOO and BAR properties are populated.
  expect(FOO).toEqual('some data');

  const complexData = JSON.parse(BAR);
  expect(BAR).toEqual({ some: 'data' });
});
```

----------------------------------------

TITLE: Overriding Viewport in Device Emulation Config (JavaScript)
DESCRIPTION: This snippet demonstrates overriding the default viewport size provided by a device preset in the Playwright Test configuration (`playwright.config.ts`). It spreads the 'Desktop Chrome' device settings and then explicitly sets a custom `viewport` property.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
```js tab=js-test title="playwright.config.ts"
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'chromium',
      use: {
        ...devices['Desktop Chrome'],
        // It is important to define the `viewport` property after destructuring `devices`,
        // since devices also define the `viewport` for that device.
        viewport: { width: 1280, height: 720 },
      },
    },
  ]
});
```
```

----------------------------------------

TITLE: Creating Test Module with Helper Function and Test Configuration in Playwright (Feature B)
DESCRIPTION: This TypeScript file defines tests for 'feature-b' with custom viewport settings using the wrapper function pattern. It includes test.use() for configuration and exports a function containing the test definitions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
import { test, expect } from '@playwright/test';

export default function createTests() {
  test.use({ viewport: { width: 500, height: 500 } });

  test('feature-b example test', async ({ page }) => {
    // ... test goes here
  });
}
```

----------------------------------------

TITLE: Setting Test Timeout in Playwright Config (TypeScript)
DESCRIPTION: This code snippet demonstrates how to set a global test timeout in the Playwright configuration file. It sets the timeout to 120,000 milliseconds (2 minutes) for all tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-timeouts-js.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  timeout: 120_000,
});
```

----------------------------------------

TITLE: Waiting for Browser Context Events - JavaScript
DESCRIPTION: Method for waiting on browser context events with optional predicate function and timeout settings. The predicate function receives event data and should resolve to a truthy value when waiting condition is met.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_23

LANGUAGE: typescript
CODE:
```
interface WaitForEventOptions {
  predicate?: function;
  timeout?: number;
}
```

----------------------------------------

TITLE: Setting User Agent for Browser Context
DESCRIPTION: Defines the userAgent option for browser contexts. This allows specifying a custom user agent string to be used in the context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_51

LANGUAGE: js
CODE:
```
- `userAgent` <[string]>

Specific user agent to use in this context.
```

----------------------------------------

TITLE: Asserting Element ARIA Role with Playwright TypeScript
DESCRIPTION: Asserts that the element located by the locator has a specific ARIA role. This assertion automatically retries until the condition is met or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_22

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toHaveRole()
```

----------------------------------------

TITLE: Retrieving the Redirect Source URL using Playwright Request (Multi-Language)
DESCRIPTION: Shows how to use the `request.redirectedFrom()` method to find the original request that was redirected to the current one. This example demonstrates accessing the URL of the redirected-from request after navigating to a URL known to cause a redirect (e.g., HTTP to HTTPS).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
```js
const response = await page.goto('http://example.com');
console.log(response.request().redirectedFrom().url()); // 'http://example.com'
```
```

LANGUAGE: java
CODE:
```
```java
Response response = page.navigate("http://example.com");
System.out.println(response.request().redirectedFrom().url()); // "http://example.com"
```
```

LANGUAGE: python
CODE:
```
```python async
response = await page.goto("http://example.com")
print(response.request.redirected_from.url) # "http://example.com"
```
```

LANGUAGE: python
CODE:
```
```python sync
response = page.goto("http://example.com")
print(response.request.redirected_from.url) # "http://example.com"
```
```

LANGUAGE: csharp
CODE:
```
```csharp
var response = await page.GotoAsync("http://www.microsoft.com");
Console.WriteLine(response.Request.RedirectedFrom?.Url); // http://www.microsoft.com
```
```

----------------------------------------

TITLE: Mocking WebSocket Messages with Playwright in Java
DESCRIPTION: Uses Playwright for Java to set up a WebSocket route where incoming messages are intercepted and responded to based on conditions. Requires setting up a page instance to route WebSockets.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
page.routeWebSocket("wss://example.com/ws", ws -> {
  ws.onMessage(frame -> {
    if ("request".equals(frame.text()))
      ws.send("response");
  });
});
```

----------------------------------------

TITLE: Asserting Accessible Error Message using LocatorAssertions in Multiple Languages
DESCRIPTION: Examples of using toHaveAccessibleErrorMessage/hasAccessibleErrorMessage to ensure a locator points to an element with a given aria errormessage attribute. This is useful for verifying accessibility compliance in form validation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_23

LANGUAGE: javascript
CODE:
```
const locator = page.getByTestId('username-input');
await expect(locator).toHaveAccessibleErrorMessage('Username is required.');
```

LANGUAGE: java
CODE:
```
Locator locator = page.getByTestId("username-input");
assertThat(locator).hasAccessibleErrorMessage("Username is required.");
```

LANGUAGE: python
CODE:
```
locator = page.get_by_test_id("username-input")
await expect(locator).to_have_accessible_error_message("Username is required.")
```

LANGUAGE: python
CODE:
```
locator = page.get_by_test_id("username-input")
expect(locator).to_have_accessible_error_message("Username is required.")
```

LANGUAGE: csharp
CODE:
```
var locator = Page.GetByTestId("username-input");
await Expect(locator).ToHaveAccessibleErrorMessageAsync("Username is required.");
```

----------------------------------------

TITLE: Setting Per Assertion Timeout in C#
DESCRIPTION: This C# example illustrates setting a per-assertion timeout for the `ToBeVisibleAsync` assertion in Playwright. A new options object is passed to the assertion method, specifying the timeout value in milliseconds using the `Timeout` property.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-csharp-java-python.md#_snippet_6

LANGUAGE: csharp
CODE:
```
await Expect(Page.GetByText("Name")).ToBeVisibleAsync(new() { Timeout = 10_000 });
```

----------------------------------------

TITLE: Basic Playwright Trace Recording (Python Async)
DESCRIPTION: Illustrates the asynchronous approach to recording a Playwright trace in Python. It launches a browser, creates a context, starts tracing (enabling screenshots and snapshots), navigates a page using `await`, and finally stops tracing, saving the result to 'trace.zip'. Requires an asynchronous Playwright setup.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
browser = await chromium.launch()
context = await browser.new_context()
await context.tracing.start(screenshots=True, snapshots=True)
page = await context.new_page()
await page.goto("https://playwright.dev")
await context.tracing.stop(path = "trace.zip")
```

----------------------------------------

TITLE: Configuring Device Emulation in Playwright Tests
DESCRIPTION: Example of emulating a specific device by overriding browser context arguments with predefined device settings.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_13

LANGUAGE: python
CODE:
```
import pytest

@pytest.fixture(scope="session")
def browser_context_args(browser_context_args, playwright):
    iphone_11 = playwright.devices['iPhone 11 Pro']
    return {
        **browser_context_args,
        **iphone_11,
    }
```

----------------------------------------

TITLE: Writing Basic Playwright JUnit Tests (Java)
DESCRIPTION: Demonstrates how to use the experimental `@UsePlaywright` annotation in JUnit 5 tests to automatically inject Playwright fixtures like `Page`. It shows examples of navigation, element interaction, and assertions using the injected `Page` object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_20

LANGUAGE: java
CODE:
```
package org.example;

import com.microsoft.playwright.Page;
import com.microsoft.playwright.junit.UsePlaywright;
import org.junit.jupiter.api.Test;

import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;

@UsePlaywright
public class TestExample {
  void shouldNavigateToInstallationGuide(Page page) {
    page.navigate("https://playwright.dev/java/");
    page.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName("Docs")).click();
    assertThat(page.getByRole(AriaRole.HEADING, new Page.GetByRoleOptions().setName("Installation"))).isVisible();
  }

  @Test
  void shouldCheckTheBox(Page page) {
    page.setContent("<input id='checkbox' type='checkbox'></input>");
    page.locator("input").check();
    assertEquals(true, page.evaluate("window['checkbox'].checked"));
  }

  @Test
  void shouldSearchWiki(Page page) {
    page.navigate("https://www.wikipedia.org/");
    page.locator("input[name=\"search\"]").click();
    page.locator("input[name=\"search\"]").fill("playwright");
    page.locator("input[name=\"search\"]").press("Enter");
    assertThat(page).hasURL("https://en.wikipedia.org/wiki/Playwright");
  }
}
```

----------------------------------------

TITLE: Setting Color Scheme in Playwright Config
DESCRIPTION: Configures the color scheme for all tests in the Playwright Test configuration file. This allows testing the site's appearance in dark or light mode.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_56

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    colorScheme: 'dark',
  },
});
```

----------------------------------------

TITLE: Simulating Touch Pan Gesture with Playwright Python Sync
DESCRIPTION: This snippet provides synchronous Python code for simulating a touch pan gesture on a Playwright `Locator`. It includes a helper function `pan` that dispatches `touchstart`, `touchmove`, and `touchend` events to simulate the gesture. An example test function demonstrates its usage by panning a map element on Google Maps within a synchronous Playwright context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#_snippet_4

LANGUAGE: python sync
CODE:
```
from playwright.sync_api import sync_playwright, expect

def pan(locator, deltaX=0, deltaY=0, steps=5):
    bounds = locator.bounding_box()
    centerX = bounds['x'] + bounds['width'] / 2
    centerY = bounds['y'] + bounds['height'] / 2

    touches = [{
        'identifier': 0,
        'clientX': centerX,
        'clientY': centerY,
    }]
    locator.dispatch_event('touchstart', {
        'touches': touches,
        'changedTouches': touches,
        'targetTouches': touches
    })

    for i in range(1, steps + 1):
        touches = [{
            'identifier': 0,
            'clientX': centerX + deltaX * i / steps,
            'clientY': centerY + deltaY * i / steps,
        }]
        locator.dispatch_event('touchmove', {
            'touches': touches,
            'changedTouches': touches,
            'targetTouches': touches
        })

    locator.dispatch_event('touchend')

def test_pan_gesture_to_move_the_map(page):
    page.goto('https://www.google.com/maps/place/@37.4117722,-122.0713234,15z', wait_until='commit')
    page.get_by_role('button', name='Keep using web').click()
    expect(page.get_by_role('button', name='Keep using web')).not_to_be_visible()
    met = page.locator('[data-test-id="met"]')
    for _ in range(5):
        pan(met, 200, 100)
    page.screenshot(path="screenshot.png")

with sync_playwright() as p:
    browser = p.chromium.launch()
    context = browser.new_context(**p.devices['Pixel 7'])
    page = context.new_page()
    test_pan_gesture_to_move_the_map(page)
    browser.close()
```

----------------------------------------

TITLE: Checking Element Hidden State in Playwright
DESCRIPTION: Demonstrates how to check if an element is hidden using Playwright's isHidden method across different programming languages. Returns a boolean indicating whether the element is hidden.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_68

LANGUAGE: javascript
CODE:
```
const hidden = await page.getByRole('button').isHidden();
```

LANGUAGE: java
CODE:
```
boolean hidden = page.getByRole(AriaRole.BUTTON).isHidden();
```

LANGUAGE: python-async
CODE:
```
hidden = await page.get_by_role("button").is_hidden()
```

LANGUAGE: python-sync
CODE:
```
hidden = page.get_by_role("button").is_hidden()
```

LANGUAGE: csharp
CODE:
```
Boolean hidden = await page.GetByRole(AriaRole.Button).IsHiddenAsync();
```

----------------------------------------

TITLE: Clicking Anchor Element with ElementHandle in Python Sync
DESCRIPTION: Demonstrates the use of ElementHandle to click on an anchor ('a') DOM element in sync Python. Retrieves the element and performs a click action.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_3

LANGUAGE: Python
CODE:
```
href_element = page.query_selector("a")
href_element.click()
```

----------------------------------------

TITLE: Asserting Locator Text Asynchronously with Playwright MSTest in C#
DESCRIPTION: Demonstrates using `await Expect(locator).ToHaveTextAsync()` within an MSTest `TestMethod` leveraging `Microsoft.Playwright.MSTest`. This asserts that the element located by `.status` has the text "Submitted" after an asynchronous button click operation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
```csharp
using Microsoft.Playwright;
using Microsoft.Playwright.MSTest;

namespace PlaywrightTests;

[TestClass]
public class ExampleTests : PageTest
{
    [TestMethod]
    public async Task StatusBecomesSubmitted()
    {
        // ...
        await Page.GetByRole(AriaRole.Button, new() { Name = "Sign In" }).ClickAsync();
        await Expect(Page.Locator(".status")).ToHaveTextAsync("Submitted");
    }
}
```
```

----------------------------------------

TITLE: NUnit Test Class with Custom Context Options
DESCRIPTION: Example of a NUnit test class that customizes BrowserContext options including color scheme, viewport size, and base URL.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-csharp.md#2025-04-22_snippet_1

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright.NUnit;

namespace PlaywrightTests;

[Parallelizable(ParallelScope.Self)]
[TestFixture]
public class MyTest : PageTest
{
    [Test]
    public async Task TestWithCustomContextOptions()
    {
        // The following Page (and BrowserContext) instance has the custom colorScheme, viewport and baseURL set:
        await Page.GotoAsync("/login");
    }

    public override BrowserNewContextOptions ContextOptions()
    {
        return new BrowserNewContextOptions()
        {
            ColorScheme = ColorScheme.Light,
            ViewportSize = new()
            {
                Width = 1920,
                Height = 1080
            },
            BaseURL = "https://github.com",
        };
    }
```

----------------------------------------

TITLE: Setting Custom User Agent in C#
DESCRIPTION: Creates a new browser context with a custom user agent string using the Playwright C# client. This allows testing how websites respond to different browser identifications.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_68

LANGUAGE: csharp
CODE:
```
var context = await browser.NewContextAsync(new() { UserAgent = "My User Agent" });
```

----------------------------------------

TITLE: Clearing Cookies with Filters in Playwright
DESCRIPTION: Examples of using the clearCookies method with various filtering options
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_19

LANGUAGE: javascript
CODE:
```
// Clear all cookies.
await context.clearCookies();
// New: clear cookies with a particular name.
await context.clearCookies({ name: 'session-id' });
// New: clear cookies for a particular domain.
await context.clearCookies({ domain: 'my-origin.com' });
```

----------------------------------------

TITLE: Dragging and Dropping Elements in Playwright
DESCRIPTION: Demonstrates how to use the dragAndDrop method to move elements on a page. It shows examples of basic usage and specifying exact positions for source and target elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_38

LANGUAGE: javascript
CODE:
```
await page.dragAndDrop('#source', '#target');
// or specify exact positions relative to the top-left corners of the elements:
await page.dragAndDrop('#source', '#target', {
  sourcePosition: { x: 34, y: 7 },
  targetPosition: { x: 10, y: 20 },
});
```

LANGUAGE: java
CODE:
```
page.dragAndDrop("#source", "#target");
// or specify exact positions relative to the top-left corners of the elements:
page.dragAndDrop("#source", "#target", new Page.DragAndDropOptions()
  .setSourcePosition(34, 7).setTargetPosition(10, 20));
```

LANGUAGE: python
CODE:
```
await page.drag_and_drop("#source", "#target")
# or specify exact positions relative to the top-left corners of the elements:
await page.drag_and_drop(
  "#source",
  "#target",
  source_position={"x": 34, "y": 7},
  target_position={"x": 10, "y": 20}
)
```

LANGUAGE: csharp
CODE:
```
await Page.DragAndDropAsync("#source", "#target");
// or specify exact positions relative to the top-left corners of the elements:
await Page.DragAndDropAsync("#source", "#target", new()
{
    SourcePosition = new() { X = 34, Y = 7 },
    TargetPosition = new() { X = 10, Y = 20 },
});
```

----------------------------------------

TITLE: Handling a One-Off Dialog Event in Playwright (JavaScript)
DESCRIPTION: Shows how to use `page.once` in Playwright for JavaScript to handle a specific event ('dialog') exactly once. This is useful for automatically handling prompts or alerts. Here, it accepts a prompt dialog with the value '2021' when triggered by `page.evaluate`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
```js
page.once('dialog', dialog => dialog.accept('2021'));
await page.evaluate("prompt('Enter a number:')");
```
```

----------------------------------------

TITLE: Using hasTitle Assertion in Java
DESCRIPTION: Example of using hasTitle assertion in Java to verify page title matches a string. This checks if the page title exactly matches 'Playwright'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_10

LANGUAGE: java
CODE:
```
assertThat(page).hasTitle("Playwright");
```

----------------------------------------

TITLE: Advanced Evaluation Arguments in JavaScript
DESCRIPTION: Comprehensive examples of passing different types of arguments to evaluate, including primitives, arrays, objects, and JSHandles. Shows various techniques for working with complex data structures and object destructuring.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
// A primitive value.
await page.evaluate(num => num, 42);

// An array.
await page.evaluate(array => array.length, [1, 2, 3]);

// An object.
await page.evaluate(object => object.foo, { foo: 'bar' });

// A single handle.
const button = await page.evaluateHandle('window.button');
await page.evaluate(button => button.textContent, button);

// Alternative notation using JSHandle.evaluate.
await button.evaluate((button, from) => button.textContent.substring(from), 5);

// Object with multiple handles.
const button1 = await page.evaluateHandle('window.button1');
const button2 = await page.evaluateHandle('window.button2');
await page.evaluate(
    o => o.button1.textContent + o.button2.textContent,
    { button1, button2 });

// Object destructuring works. Note that property names must match
// between the destructured object and the argument.
// Also note the required parenthesis.
await page.evaluate(
    ({ button1, button2 }) => button1.textContent + button2.textContent,
    { button1, button2 });

// Array works as well. Arbitrary names can be used for destructuring.
// Note the required parenthesis.
await page.evaluate(
    ([b1, b2]) => b1.textContent + b2.textContent,
    [button1, button2]);

// Any mix of serializables and handles works.
await page.evaluate(
    x => x.button1.textContent + x.list[0].textContent + String(x.foo),
    { button1, list: [button2], foo: null });
```

LANGUAGE: java
CODE:
```
// A primitive value.
page.evaluate("num => num", 42);

// An array.
page.evaluate("array => array.length", Arrays.asList(1, 2, 3));

// An object.
Map<String, Object> obj = new HashMap<>();
obj.put("foo", "bar");
page.evaluate("object => object.foo", obj);

// A single handle.
ElementHandle button = page.evaluateHandle("window.button");
page.evaluate("button => button.textContent", button);

// Alternative notation using JSHandle.evaluate.
button.evaluate("(button, from) => button.textContent.substring(from)", 5);

// Object with multiple handles.
ElementHandle button1 = page.evaluateHandle("window.button1");
ElementHandle button2 = page.evaluateHandle("window.button2");
Map<String, ElementHandle> arg = new HashMap<>();
arg.put("button1", button1);
arg.put("button2", button2);
page.evaluate("o => o.button1.textContent + o.button2.textContent", arg);

// Object destructuring works. Note that property names must match
// between the destructured object and the argument.
// Also note the required parenthesis.
Map<String, ElementHandle> arg = new HashMap<>();
arg.put("button1", button1);
arg.put("button2", button2);
page.evaluate("({ button1, button2 }) => button1.textContent + button2.textContent", arg);

// Array works as well. Arbitrary names can be used for destructuring.
// Note the required parenthesis.
page.evaluate(
  "([b1, b2]) => b1.textContent + b2.textContent",
  Arrays.asList(button1, button2));

// Any mix of serializables and handles works.
Map<String, Object> arg = new HashMap<>();
arg.put("button1", button1);
arg.put("list", Arrays.asList(button2));
arg.put("foo", 0);
page.evaluate(
  "x => x.button1.textContent + x.list[0].textContent + String(x.foo)",
  arg);
```

LANGUAGE: python
CODE:
```
# A primitive value.
await page.evaluate('num => num', 42)

# An array.
await page.evaluate('array => array.length', [1, 2, 3])

# An object.
await page.evaluate('object => object.foo', { 'foo': 'bar' })

# A single handle.
button = await page.evaluate_handle('button')
await page.evaluate('button => button.textContent', button)

# Alternative notation using JSHandle.evaluate.
await button.evaluate('(button, from) => button.textContent.substring(from)', 5)

# Object with multiple handles.
button1 = await page.evaluate_handle('window.button1')
button2 = await page.evaluate_handle('window.button2')
await page.evaluate("""
    o => o.button1.textContent + o.button2.textContent""",
    { 'button1': button1, 'button2': button2 })

# Object destructuring works. Note that property names must match
# between the destructured object and the argument.
# Also note the required parenthesis.
await page.evaluate("""
    ({ button1, button2 }) => button1.textContent + button2.textContent""",
    { 'button1': button1, 'button2': button2 })

# Array works as well. Arbitrary names can be used for destructuring.
# Note the required parenthesis.
await page.evaluate("""
    ([b1, b2]) => b1.textContent + b2.textContent""",
    [button1, button2])

# Any mix of serializables and handles works.
await page.evaluate("""
    x => x.button1.textContent + x.list[0].textContent + String(x.foo)""",
    { 'button1': button1, 'list': [button2], 'foo': None })
```

----------------------------------------

TITLE: Running Playwright with Detailed Logs
DESCRIPTION: Commands to run Playwright tests with detailed debug logs using the DEBUG environment variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/selenium-grid.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
DEBUG=pw:browser* SELENIUM_REMOTE_URL=http://internal.grid:4444 npx playwright test
```

LANGUAGE: bash
CODE:
```
DEBUG=pw:browser* SELENIUM_REMOTE_URL=http://internal.grid:4444 pytest --browser chromium
```

LANGUAGE: bash
CODE:
```
DEBUG=pw:browser* SELENIUM_REMOTE_URL=http://internal.grid:4444 mvn test
```

LANGUAGE: bash
CODE:
```
DEBUG=pw:browser* SELENIUM_REMOTE_URL=http://internal.grid:4444 dotnet test
```

----------------------------------------

TITLE: Combining Locators via Logical 'And' in Playwright Python (Sync)
DESCRIPTION: Shows a sync Playwright Python call combining 'button' role and title locator via `and_`, yielding a new locator reflecting both constraints.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_18

LANGUAGE: Python
CODE:
```
button = page.get_by_role("button").and_(page.getByTitle("Subscribe"))
```

----------------------------------------

TITLE: Locating Elements Inside Frames with Playwright Python (Sync)
DESCRIPTION: This synchronous Python snippet illustrates how to locate and fill an element inside a frame using Playwright. It demonstrates frame_locator and get_by_label APIs without async/await, useful for script-only scenarios or synchronous tests. Relies on Playwright for Python (sync), with '.frame-class' and 'User Name' as selectors.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/frames.md#2025-04-22_snippet_3

LANGUAGE: python sync
CODE:
```
# Locate element inside frame
# Get frame using any other selector
username = page.frame_locator('.frame-class').get_by_label('User Name')
username.fill('John')
```

----------------------------------------

TITLE: Gradle Configuration for Playwright in Groovy
DESCRIPTION: Gradle build configuration script in Groovy for a Playwright Java project. It sets up dependencies, defines the main class, and creates a custom task for running Playwright CLI commands.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-java.md#2025-04-22_snippet_3

LANGUAGE: groovy
CODE:
```
plugins {
  application
  id 'java'
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'com.microsoft.playwright:playwright:%%VERSION%%'
}

application {
  mainClass = 'org.example.App'
}

// Usage: ./gradlew playwright --args="help"
task playwright(type: JavaExec) {
  classpath sourceSets.test.runtimeClasspath
  mainClass = 'com.microsoft.playwright.CLI'
}

test {
  useJUnitPlatform()
}
```

----------------------------------------

TITLE: Running Playwright Tests with JSON Reporter Output File (PowerShell)
DESCRIPTION: Runs Playwright tests using the 'json' reporter in a PowerShell environment. It sets the PLAYWRIGHT_JSON_OUTPUT_NAME environment variable to results.json using the $env: syntax to redirect the JSON report output from standard output to the specified file before executing the Playwright test command.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_22

LANGUAGE: powershell
CODE:
```
$env:PLAYWRIGHT_JSON_OUTPUT_NAME="results.json"
npx playwright test --reporter=json
```

----------------------------------------

TITLE: Standalone API Testing with Request Fixture in Playwright
DESCRIPTION: Example showing how to perform standalone API testing using the request fixture, which allows making HTTP requests directly from Node.js without a browser context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_62

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('context fetch', async ({ request }) => {
  // Do a GET request on behalf of page
  const response = await request.get('http://example.com/foo.json');
  // ...
});
```

----------------------------------------

TITLE: Asserting Viewport Intersection in Playwright
DESCRIPTION: Examples of using toBeInViewport assertion to verify if an element intersects with the viewport using intersection observer API. Includes ratio parameter for controlling intersection threshold.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_16

LANGUAGE: javascript
CODE:
```
const locator = page.getByRole('button');
// Make sure at least some part of element intersects viewport.
await expect(locator).toBeInViewport();
// Make sure element is fully outside of viewport.
await expect(locator).not.toBeInViewport();
// Make sure that at least half of the element intersects viewport.
await expect(locator).toBeInViewport({ ratio: 0.5 });
```

LANGUAGE: java
CODE:
```
Locator locator = page.getByRole(AriaRole.BUTTON);
// Make sure at least some part of element intersects viewport.
assertThat(locator).isInViewport();
// Make sure element is fully outside of viewport.
assertThat(locator).not().isInViewport();
// Make sure that at least half of the element intersects viewport.
assertThat(locator).isInViewport(new LocatorAssertions.IsInViewportOptions().setRatio(0.5));
```

LANGUAGE: python
CODE:
```
from playwright.async_api import expect

locator = page.get_by_role("button")
# Make sure at least some part of element intersects viewport.
await expect(locator).to_be_in_viewport()
# Make sure element is fully outside of viewport.
await expect(locator).not_to_be_in_viewport()
# Make sure that at least half of the element intersects viewport.
await expect(locator).to_be_in_viewport(ratio=0.5)
```

----------------------------------------

TITLE: Handling beforeunload Dialogs with Playwright (Java)
DESCRIPTION: Registers a handler using `onDialog` specifically to handle `beforeunload` dialogs triggered by `page.close(new Page.CloseOptions().setRunBeforeUnload(true))`. The handler asserts the dialog type and then dismisses it.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_11

LANGUAGE: java
CODE:
```
```java
page.onDialog(dialog -> {
  assertEquals("beforeunload", dialog.type());
  dialog.dismiss();
});
page.close(new Page.CloseOptions().setRunBeforeUnload(true));
```
```

----------------------------------------

TITLE: Using Page.evalOnSelector in Java
DESCRIPTION: Examples of using the evalOnSelector method in Java to evaluate expressions on elements matching a selector. This method finds an element and passes it to the provided JavaScript expression, returning the expression's result.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_42

LANGUAGE: java
CODE:
```
String searchValue = (String) page.evalOnSelector("#search", "el => el.value");
String preloadHref = (String) page.evalOnSelector("link[rel=preload]", "el => el.href");
String html = (String) page.evalOnSelector(".main-container", "(e, suffix) => e.outerHTML + suffix", "hello");
```

----------------------------------------

TITLE: Calculating Locator Bounding Box in Playwright Java
DESCRIPTION: Uses Playwright for Java to get the bounding box of a 'button' role node and trigger a mouse click at its center. The bounding box is relative to the main frame's viewport. Handling is required for the null return value if the element is invisible.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_26

LANGUAGE: Java
CODE:
```
BoundingBox box = page.getByRole(AriaRole.BUTTON).boundingBox();
page.mouse().click(box.x + box.width / 2, box.y + box.height / 2);
```

----------------------------------------

TITLE: Verifying Accessibility Tree with Python Playwright
DESCRIPTION: Demonstrates how to use the `toMatchAriaSnapshot` assertion in Playwright for Python to verify the accessibility tree structure of a page element against a YAML representation. This helps ensure the page's structure is accessible.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_4

LANGUAGE: python
CODE:
```
page.goto("https://playwright.dev")
expect(page.locator('body')).to_match_aria_snapshot('''
  - banner:
    - heading /Playwright enables reliable/ [level=1]
    - link "Get started"
    - link "Star microsoft/playwright on GitHub"
  - main:
    - img "Browsers (Chromium, Firefox, WebKit)"
    - heading "Any browser • Any platform • One API"
''')
```

----------------------------------------

TITLE: Testing Status Text with Playwright
CSharp
DESCRIPTION: This C# code snippet demonstrates a method-laden approach using Playwright to test if an HTML element's status text becomes 'Submitted' after interacting with a button. It uses MSTest with Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-playwrightassertions.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using Microsoft.Playwright.MSTest;

namespace PlaywrightTests;

[TestClass]
public class ExampleTests : PageTest
{
    [TestMethod]
    public async Task StatusBecomesSubmitted()
    {
        await Page.GetByRole(AriaRole.Button, new() { Name = "Submit" }).ClickAsync();
        await Expect(Page.Locator(".status")).ToHaveTextAsync("Submitted");
    }
}
```

----------------------------------------

TITLE: Recording Multiple Trace Chunks (Python Async)
DESCRIPTION: Shows how to record separate trace chunks asynchronously in Python using `await context.tracing.start_chunk()` and `await context.tracing.stop_chunk()`. Global tracing must be active (`await context.tracing.start()`). Each chunk captures intermediate actions and saves them to a specified file path.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_12

LANGUAGE: python
CODE:
```
await context.tracing.start(screenshots=True, snapshots=True)
page = await context.new_page()
await page.goto("https://playwright.dev")

await context.tracing.start_chunk()
await page.get_by_text("Get Started").click()
# Everything between start_chunk and stop_chunk will be recorded in the trace.
await context.tracing.stop_chunk(path = "trace1.zip")

await context.tracing.start_chunk()
await page.goto("http://example.com")
# Save a second trace file with different actions.
await context.tracing.stop_chunk(path = "trace2.zip")
```

----------------------------------------

TITLE: Soft Polling with Playwright Expect Poll (JS)
DESCRIPTION: Combines `expect.configure({ soft: true })` with `expect.poll` to perform polling assertions that are soft. If the assertion inside the poll fails, the test will continue instead of stopping immediately.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_41

LANGUAGE: js
CODE:
```
const softExpect = expect.configure({ soft: true });
await softExpect.poll(async () => {
  const response = await page.request.get('https://api.example.com');
  return response.status();
}, {}).toBe(200);
```

----------------------------------------

TITLE: Running Specific Playwright Test by Class Name
DESCRIPTION: Command to run a single Playwright test file using the filter flag with the class name.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_10

LANGUAGE: bash
CODE:
```
dotnet test --filter "ExampleTest"
```

----------------------------------------

TITLE: Granting Domain-Specific Permissions in Python (Async)
DESCRIPTION: Grants notification permissions for a specific domain (skype.com) using the Playwright Python async API. This allows showing notifications only for the specified origin.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_35

LANGUAGE: python
CODE:
```
await context.grant_permissions(['notifications'], origin='https://skype.com')
```

----------------------------------------

TITLE: Handling Uncaught Page Exceptions in Playwright (Java)
DESCRIPTION: This Java snippet shows how to handle uncaught exceptions using Playwright's `onWebError` method on the BrowserContext. It defines a listener that prints the error message obtained from `webError.error()` to the standard output when an exception occurs in the page. The example includes navigating to a page that throws an error to demonstrate the functionality.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-weberror.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
// Log all uncaught errors to the terminal
context.onWebError(webError -> {
  System.out.println("Uncaught exception: " + webError.error());
});

// Navigate to a page with an exception.
page.navigate("data:text/html,<script>throw new Error('Test')</script>");
```

----------------------------------------

TITLE: Evaluating JavaScript with Locator.evaluate in Python (Sync)
DESCRIPTION: Shows how to execute JavaScript code on a matched element using the evaluate method in Python sync mode. Demonstrates passing arguments to the evaluation function.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_52

LANGUAGE: python
CODE:
```
result = page.get_by_testid("myId").evaluate("(element, [x, y]) => element.textContent + ' ' + x * y", [7, 8])
print(result) # prints "myId text 56"
```

----------------------------------------

TITLE: Handling Security Details Confirmation with Locator Handler in Python (Synchronous)
DESCRIPTION: Synchronous Python implementation of a locator handler to automatically skip a security details confirmation page. The handler detects text matching 'Confirm your security details' and clicks the 'Remind me later' button.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_83

LANGUAGE: python
CODE:
```
# Setup the handler.
def handler():
  page.get_by_role("button", name="Remind me later").click()
page.add_locator_handler(page.get_by_text("Confirm your security details"), handler)

# Write the test as usual.
page.goto("https://example.com")
page.get_by_role("button", name="Start here").click()
```

----------------------------------------

TITLE: Opting Out of Fully Parallel Mode (JavaScript)
DESCRIPTION: Demonstrates how to override the fully parallel mode for specific test describes, running them in default mode instead.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
test.describe('runs in parallel with other describes', () => {
  test.describe.configure({ mode: 'default' });
  test('in order 1', async ({ page }) => {});
  test('in order 2', async ({ page }) => {});
});
```

----------------------------------------

TITLE: Running Playwright Tests via pnpm - Bash
DESCRIPTION: Runs all Playwright end-to-end tests using pnpm, leveraging 'exec' to invoke the CLI. Requires Playwright dependencies installed in the project. Executes tests on browsers according to configuration and outputs results in the terminal.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
pnpm exec playwright test
```

----------------------------------------

TITLE: Using toMatch Method for Regular Expression Matching
DESCRIPTION: Demonstrates how to use the 'toMatch' method to check if a string matches a given regular expression pattern.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_21

LANGUAGE: javascript
CODE:
```
const value = 'Is 42 enough?';
expect(value).toMatch(/Is \d+ enough/);
```

----------------------------------------

TITLE: Alternative Dialog Handling in Java
DESCRIPTION: Shows an alternative way to handle dialogs in Java using Playwright, equivalent to the onceDialog method.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_68

LANGUAGE: java
CODE:
```
Consumer<Dialog> handler = new Consumer<Dialog>() {
  @Override
  public void accept(Dialog dialog) {
    dialog.accept("foo");
    page.offDialog(this);
  }
};
page.onDialog(handler);

// prints 'foo'
System.out.println(page.evaluate("prompt('Enter string:')"));

// prints 'null' as the dialog will be auto-dismissed because there are no handlers.
System.out.println(page.evaluate("prompt('Enter string:'"));
```

----------------------------------------

TITLE: Pressing an Uppercase Character using Shift in Playwright (Java)
DESCRIPTION: Demonstrates pressing an uppercase 'A' using the Playwright Keyboard API in Java. It shows two ways to achieve this using `page.keyboard().press()`: combining 'Shift' with the specific key code 'KeyA', or combining 'Shift' with the character 'A'. Both methods simulate pressing Shift, then A, then releasing both.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_6

LANGUAGE: java
CODE:
```
```java
page.keyboard().press("Shift+KeyA");
// or
page.keyboard().press("Shift+A");
```
```

----------------------------------------

TITLE: Response Interception with Image Processing in Playwright
DESCRIPTION: Example showing how to intercept and modify responses by combining API testing with request interception, specifically demonstrating how to blur JPEG images using the jimp library.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_63

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';
import jimp from 'jimp'; // image processing library

test('response interception', async ({ page }) => {
  await page.route('**/*.jpeg', async route => {
    const response = await page._request.fetch(route.request());
    const image = await jimp.read(await response.body());
    await image.blur(5);
    await route.fulfill({
      response,
      body: await image.getBufferAsync('image/jpeg'),
    });
  });
  const response = await page.goto('https://playwright.dev');
  expect(response.status()).toBe(200);
});
```

----------------------------------------

TITLE: Implementing Test Hooks with NUnit in Playwright
DESCRIPTION: Example of using SetUp and TearDown hooks in NUnit with Playwright. The test navigates to playwright.dev and verifies the URL using the expect API. Demonstrates proper test fixture setup with parallelization support.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-csharp.md#2025-04-22_snippet_5

LANGUAGE: csharp
CODE:
```
using System.Threading.Tasks;
using Microsoft.Playwright.NUnit;
using NUnit.Framework;

namespace PlaywrightTests;

[Parallelizable(ParallelScope.Self)]
[TestFixture]
public class ExampleTest : PageTest
{
    [Test]
    public async Task MainNavigation()
    {
        // Assertions use the expect API.
        await Expect(Page).ToHaveURLAsync("https://playwright.dev/");
    }

    [SetUp]
    public async Task SetUp()
    {
        await Page.GotoAsync("https://playwright.dev");
    }
}
```

----------------------------------------

TITLE: Chaining Route Handlers with Route.abort and Route.fallback - Python (Sync)
DESCRIPTION: Synchronous handler order chaining in Playwright Python, illustrating sequential registration and fallback/abort control for advanced request handling pipelines.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
page.route("**/*", lambda route: route.abort())  # Runs last.
page.route("**/*", lambda route: route.fallback())  # Runs second.
page.route("**/*", lambda route: route.fallback())  # Runs first.
```

----------------------------------------

TITLE: Tracing a Square with Mouse Movements in C#
DESCRIPTION: This snippet demonstrates how to use the 'Page.Mouse' object in C# to trace a 100x100 square by moving the mouse and performing click actions using async methods.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-mouse.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
await Page.Mouse.MoveAsync(0, 0);
await Page.Mouse.DownAsync();
await Page.Mouse.MoveAsync(0, 100);
await Page.Mouse.MoveAsync(100, 100);
await Page.Mouse.MoveAsync(100, 0);
await Page.Mouse.MoveAsync(0, 0);
await Page.Mouse.UpAsync();
```

----------------------------------------

TITLE: Saving a Downloaded File using save_as in Playwright (Python Sync)
DESCRIPTION: This snippet shows the synchronous `download.save_as()` method call in Python. It constructs the path using `download.suggested_filename`. Assumes a `download` object is available.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-download.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
download.save_as("/path/to/save/at/" + download.suggested_filename)
```

----------------------------------------

TITLE: Handling JSON WebSocket Messages with Playwright in Python (Synchronous)
DESCRIPTION: Synchronously processes JSON messages using Playwright in Python, checking message content and responding with JSON. Requires json module and page setup.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
def message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  json_message = json.loads(message)
  if json_message["request"] == "question":
    ws.send(json.dumps({ "response": "answer" }))

page.route_web_socket("wss://example.com/ws", lambda ws: ws.on_message(
    lambda message: message_handler(ws, message)
))
```

----------------------------------------

TITLE: Evaluating Expressions on Frame in Java
DESCRIPTION: Demonstrates the usage of the evaluate method in Java to execute a JavaScript expression within a frame and return its result.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_19

LANGUAGE: java
CODE:
```
Object result = frame.evaluate("([x, y]) => {\n" +
  "  return Promise.resolve(x * y);\n" +
  "}", Arrays.asList(7, 8));
System.out.println(result); // prints "56"
```

----------------------------------------

TITLE: Handling WebSocket Events in JavaScript
DESCRIPTION: This snippet demonstrates how to listen for WebSocket events in Playwright using JavaScript. It shows how to log WebSocket opening, frame sending/receiving, and closing events.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_32

LANGUAGE: javascript
CODE:
```
page.on('websocket', ws => {
  console.log(`WebSocket opened: ${ws.url()}>');
  ws.on('framesent', event => console.log(event.payload));
  ws.on('framereceived', event => console.log(event.payload));
  ws.on('close', () => console.log('WebSocket closed'));
});
```

----------------------------------------

TITLE: Capturing Screenshots to Buffer in Playwright
DESCRIPTION: Examples of capturing screenshots to a buffer instead of a file. This allows for post-processing or sending the image data to other services, with examples of converting to base64 encoding.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/screenshots.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
const buffer = await page.screenshot();
console.log(buffer.toString('base64'));
```

LANGUAGE: java
CODE:
```
byte[] buffer = page.screenshot();
System.out.println(Base64.getEncoder().encodeToString(buffer));
```

LANGUAGE: python
CODE:
```
# Capture into Image
screenshot_bytes = await page.screenshot()
print(base64.b64encode(screenshot_bytes).decode())
```

LANGUAGE: python
CODE:
```
screenshot_bytes = page.screenshot()
print(base64.b64encode(screenshot_bytes).decode())
```

LANGUAGE: csharp
CODE:
```
var bytes = await page.ScreenshotAsync();
Console.WriteLine(Convert.ToBase64String(bytes));
```

----------------------------------------

TITLE: Enabling Offline Mode in Playwright Tests
DESCRIPTION: Example showing how to simulate offline mode in the browser for tests, which can be useful for testing offline functionality and fallback behavior of web applications.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_24

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    offline: true
  },
});
```

----------------------------------------

TITLE: Emulate Pan Gesture with Playwright (JavaScript)
DESCRIPTION: This JavaScript snippet defines a 'pan' function that simulates a touch pan gesture on a given locator by dispatching 'touchstart', 'touchmove', and 'touchend' events. It calculates the center coordinates and updates 'clientX/clientY' for each step of the movement. It also includes a test case demonstrating its usage on Google Maps.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { test, expect, devices, type Locator } from '@playwright/test';

test.use({ ...devices['Pixel 7'] });

async function pan(locator: Locator, deltaX?: number, deltaY?: number, steps?: number) {
  const { centerX, centerY } = await locator.evaluate((target: HTMLElement) => {
    const bounds = target.getBoundingClientRect();
    const centerX = bounds.left + bounds.width / 2;
    const centerY = bounds.top + bounds.height / 2;
    return { centerX, centerY };
  });

  // Providing only clientX and clientY as the app only cares about those.
  const touches = [{
    identifier: 0,
    clientX: centerX,
    clientY: centerY,
  }];
  await locator.dispatchEvent('touchstart',
      { touches, changedTouches: touches, targetTouches: touches });

  steps = steps ?? 5;
  deltaX = deltaX ?? 0;
  deltaY = deltaY ?? 0;
  for (let i = 1; i <= steps; i++) {
    const touches = [{
      identifier: 0,
      clientX: centerX + deltaX * i / steps,
      clientY: centerY + deltaY * i / steps,
    }];
    await locator.dispatchEvent('touchmove',
        { touches, changedTouches: touches, targetTouches: touches });
  }

  await locator.dispatchEvent('touchend');
}

test(`pan gesture to move the map`, async ({ page }) => {
  await page.goto('https://www.google.com/maps/place/@37.4117722,-122.0713234,15z',
      { waitUntil: 'commit' });
  await page.getByRole('button', { name: 'Keep using web' }).click();
  await expect(page.getByRole('button', { name: 'Keep using web' })).not.toBeVisible();
  // Get the map element.
  const met = page.locator('[data-test-id="met"]');
  for (let i = 0; i < 5; i++)
    await pan(met, 200, 100);
  // Ensure the map has been moved.
  await expect(met).toHaveScreenshot();
});
```

----------------------------------------

TITLE: Exposing SHA256 Function in Playwright Page (JavaScript)
DESCRIPTION: This code snippet demonstrates how to expose a custom SHA256 function to the browser page using Playwright in JavaScript. It creates a new page, exposes the function, sets page content with a button, and handles the button click to display the hash.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_60

LANGUAGE: javascript
CODE:
```
const { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.
const crypto = require('crypto');

(async () => {
  const browser = await webkit.launch({ headless: false });
  const page = await browser.newPage();
  await page.exposeFunction('sha256', text =>
    crypto.createHash('sha256').update(text).digest('hex'),
  );
  await page.setContent(`
    <script>
      async function onClick() {
        document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');
      }
    </script>
    <button onclick="onClick()">Click me</button>
    <div></div>
  `);
  await page.click('button');
})();
```

----------------------------------------

TITLE: Evaluating JavaScript on All Matching Elements with Locator.evaluate_all in Python (Async)
DESCRIPTION: Shows how to execute JavaScript code on all matching elements using the evaluate_all method in Python async mode. Passes the array of matching elements to the evaluation function.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_56

LANGUAGE: python
CODE:
```
locator = page.locator("div")
more_than_ten = await locator.evaluate_all("(divs, min) => divs.length > min", 10)
```

----------------------------------------

TITLE: Setting Fixed Time for Page Testing - Playwright JavaScript
DESCRIPTION: Demonstrates the use of Playwright's Clock API to set and validate a fixed time within a web page test. Uses setFixedTime to control Date.now() output, navigates to a test page, and asserts that the displayed time updates as expected. Dependencies include Playwright and a running test server; it expects page fixture objects and updates DOM elements displaying time.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
await page.clock.setFixedTime(new Date('2024-02-02T10:00:00'));
await page.goto('http://localhost:3333');
await expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:00 AM');

await page.clock.setFixedTime(new Date('2024-02-02T10:30:00'));
// We know that the page has a timer that updates the time every second.
await expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:30:00 AM');
```

----------------------------------------

TITLE: Specifying Relative Position for Playwright Input Actions
DESCRIPTION: Defines the `position` object parameter for Playwright input actions, allowing specification of coordinates (`x`, `y`) relative to the top-left corner of the target element's padding box. If omitted, Playwright targets a visible point within the element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_14

LANGUAGE: markdown
CODE:
```
- `position` <[Object]>
  - `x` <[float]>
  - `y` <[float]>
```

----------------------------------------

TITLE: Running Playwright Tests on Specific Browser (Bash)
DESCRIPTION: Command to run Playwright tests on a specific browser (WebKit in this example) using environment variable in Bash.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
BROWSER=webkit dotnet test
```

----------------------------------------

TITLE: Configuring Type Annotations for Playwright Pages in Python
DESCRIPTION: Example of using type annotations with Playwright's Page object for better IDE auto-completion and type checking.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
from playwright.sync_api import Page

def test_visit_admin_dashboard(page: Page):
    page.goto("/admin")
    # ...
```

----------------------------------------

TITLE: Retrieving Storage State in APIRequestContext (JavaScript/Python/TypeScript)
DESCRIPTION: Returns the current storage state for an API request context, including cookies and localStorage. This method returns the state as an object with cookies and origins properties.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_17

LANGUAGE: markdown
CODE:
```
## async method: APIRequestContext.storageState
* since: v1.16
- returns: <[Object]>
  - `cookies` <[Array]<[Object]>>
    - `name` <[string]>
    - `value` <[string]>
    - `domain` <[string]>
    - `path` <[string]>
    - `expires` <[float]> Unix time in seconds.
    - `httpOnly` <[boolean]>
    - `secure` <[boolean]>
    - `sameSite` <[SameSiteAttribute]<"Strict"|"Lax"|"None">>
  - `origins` <[Array]<[Object]>>
    - `origin` <[string]>
    - `localStorage` <[Array]<[Object]>>
      - `name` <[string]>
      - `value` <[string]>

Returns storage state for this request context, contains current cookies and local storage snapshot if it was passed to the constructor.
```

----------------------------------------

TITLE: Emulating Geolocation, Language and Timezone with Playwright Codegen for C#
DESCRIPTION: Command to generate code while emulating Rome, Italy location, Italian language, and European/Rome timezone for Bing Maps using C#. This PowerShell execution demonstrates testing location-aware applications.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_19

LANGUAGE: bash
CODE:
```
pwsh bin/Debug/netX/playwright.ps1 codegen --timezone="Europe/Rome" --geolocation="41.890221,12.492348" --lang="it-IT" bing.com/maps
```

----------------------------------------

TITLE: Handling Uncaught Page Errors with Playwright Events (Java)
DESCRIPTION: Uses Playwright for Java to capture and print uncaught page exceptions using the onPageError handler. Expects a Page object. Navigates to a page that immediately throws a JavaScript exception, which is then printed to the console. Only Playwright for Java is required.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_9

LANGUAGE: java
CODE:
```
// Log all uncaught errors to the terminal
page.onPageError(exception -> {
  System.out.println("Uncaught exception: " + exception);
});

// Navigate to a page with an exception.
page.navigate("data:text/html,<script>throw new Error('Test')<\/script>");
```

----------------------------------------

TITLE: Iterating Over Locator Results Using Playwright Java
DESCRIPTION: Uses Java Playwright's locator system to access and click all 'listitem' elements. Requires Playwright for Java with an initialized `page`. The snippet selects all 'listitem' role nodes, iterating with a for-each and calling `click()`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_3

LANGUAGE: Java
CODE:
```
for (Locator li : page.getByRole("listitem").all())
  li.click();
```

----------------------------------------

TITLE: Setting Browser Permissions in Playwright Config
DESCRIPTION: Configures browser permissions for notifications using Playwright Test configuration file. This allows the browser to show system notifications during test execution.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_27

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    // Grants specified permissions to the browser context.
    permissions: ['notifications'],
  },
});
```

----------------------------------------

TITLE: Pattern Matching Any Type with expect.any in JavaScript
DESCRIPTION: Demonstrates `expect.any(constructor)` used within `expect().toEqual()` for pattern matching in Playwright tests. It matches any object instance created from the specified constructor (like a class) or a corresponding primitive type (like `Number` or `String`), allowing flexible assertions where the exact value is unknown but the type is expected.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_26

LANGUAGE: javascript
CODE:
```
```js
// Match instance of a class.
class Example {}
expect(new Example()).toEqual(expect.any(Example));

// Match any number.
expect({ prop: 1 }).toEqual({ prop: expect.any(Number) });

// Match any string.
expect('abc').toEqual(expect.any(String));
```
```

----------------------------------------

TITLE: Filter Locators Using HasNot and HasNotText (C#)
DESCRIPTION: Shows how to use the new `HasNotText` and `HasNot` options within the `Locator.Filter` method in C#. This allows filtering a set of elements (here, table rows) to exclude those that contain specific text or a specific nested element (a button).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_26

LANGUAGE: csharp
CODE:
```
var rowLocator = Page.Locator("tr");
await rowLocator
    .Filter(new() { HasNotText = "text in column 1" })
    .Filter(new() { HasNot = Page.GetByRole(AriaRole.Button, new() { Name = "column 2 button" })})
    .ScreenshotAsync();
```

----------------------------------------

TITLE: Adding and Removing Event Listeners in Playwright (.NET/C#)
DESCRIPTION: Demonstrates adding event handlers using the standard C# event pattern (`+=`) and removing them (`-=`) in Playwright for .NET. Handlers are attached to the `page.Request` and `page.RequestFinished` events. The `RequestFinished` handler is later detached using the stored delegate reference.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_14

LANGUAGE: csharp
CODE:
```
```csharp
page.Request += (_, request) => Console.WriteLine("Request sent: " + request.Url);
void listener(object sender, IRequest request)
{
    Console.WriteLine("Request finished: " + request.Url);
};
page.RequestFinished += listener;
await page.GotoAsync("https://wikipedia.org");

// Remove previously added listener.
page.RequestFinished -= listener;
await page.GotoAsync("https://www.openstreetmap.org/");
```
```

----------------------------------------

TITLE: Adding Metadata to Playwright Test Reports
DESCRIPTION: Configuration to include custom metadata in test reports that will be displayed in HTML and JSON formats.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_14

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  metadata: { title: 'acceptance tests' },
});
```

----------------------------------------

TITLE: Index-based Selection for Python
DESCRIPTION: Python-specific option for selecting dropdown options by index. Allows selecting one or multiple options by their position.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_95

LANGUAGE: python
CODE:
```
- `index` ?<[int]|[Array]<[int]>>
```

----------------------------------------

TITLE: Passing a JSHandle as an Argument to EvaluateAsync in C#
DESCRIPTION: Illustrates creating a JavaScript array in the page using `page.EvaluateHandleAsync`, obtaining a [JSHandle] to it. Subsequently demonstrates passing this handle into `page.EvaluateAsync` to interact with the array (get length, add elements) and finally disposing of the handle using `DisposeAsync()`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_14

LANGUAGE: csharp
CODE:
```
```csharp
// Create new array in page.
var myArrayHandle = await page.EvaluateHandleAsync(@"() => {
    window.myArray = [1];
    return myArray;
}");

// Get the length of the array.
var length = await page.EvaluateAsync<int>("a => a.length", myArrayHandle);

// Add one more element to the array using the handle
await page.EvaluateAsync("arg => arg.myArray.add(arg.newElement)",
    new { myArray = myArrayHandle, newElement = 2 });

// Release the object when it is no longer needed.
await myArrayHandle.DisposeAsync();
```
```

----------------------------------------

TITLE: Setting Video Size with Browser Context (Java)
DESCRIPTION: This snippet demonstrates how to create a new browser context with video recording enabled in Java, specifying both the directory and the video size.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_6

LANGUAGE: java
CODE:
```
BrowserContext context = browser.newContext(new Browser.NewContextOptions()
  .setRecordVideoDir(Paths.get("videos/"))
  .setRecordVideoSize(640, 480));
```

----------------------------------------

TITLE: Locating Element Containing Another Locator - Playwright Java
DESCRIPTION: Shows how to use the 'has' option with Page.locator to find an element that contains another specified element. This example finds an 'article' element that contains an element with the class 'highlight'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_46

LANGUAGE: Java
CODE:
```
page.locator("article", new Page.LocatorOptions().setHas(page.locator(".highlight"))).click();
```

----------------------------------------

TITLE: Skipping Browser Download in Bash
DESCRIPTION: Prevents browser downloads during package installation by setting the PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD environment variable in Bash
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-js.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 npm install
```

----------------------------------------

TITLE: Using Page.evalOnSelector in JavaScript
DESCRIPTION: Examples of using the evalOnSelector (alias $eval) method in JavaScript to evaluate expressions on elements matching a selector. This method finds an element and passes it to the provided function expression, returning the expression's result.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_41

LANGUAGE: javascript
CODE:
```
const searchValue = await page.$eval('#search', el => el.value);
const preloadHref = await page.$eval('link[rel=preload]', el => el.href);
const html = await page.$eval('.main-container', (e, suffix) => e.outerHTML + suffix, 'hello');
// In TypeScript, this example requires an explicit type annotation (HTMLLinkElement) on el:
const preloadHrefTS = await page.$eval('link[rel=preload]', (el: HTMLLinkElement) => el.href);
```

----------------------------------------

TITLE: Using Page.evalOnSelectorAll in C#
DESCRIPTION: Example of using the EvalOnSelectorAllAsync method in C# to evaluate expressions on all elements matching a selector. This method finds all matching elements and passes them to the provided JavaScript expression, returning the expression's typed result.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_50

LANGUAGE: csharp
CODE:
```
var divsCount = await page.EvalOnSelectorAllAsync<bool>("div", "(divs, min) => divs.length >= min", 10);
```

----------------------------------------

TITLE: Using toMatchAriaSnapshot with file-based snapshots in JavaScript
DESCRIPTION: JavaScript example of using toMatchAriaSnapshot with file-based snapshots instead of inline ones. This approach stores snapshots in .aria.yml files and can use sequential or custom naming for the snapshot files.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_43

LANGUAGE: javascript
CODE:
```
await expect(page.locator('body')).toMatchAriaSnapshot();
await expect(page.locator('body')).toMatchAriaSnapshot({ name: 'body.aria.yml' });
```

----------------------------------------

TITLE: Use Custom AxeBuilder Fixture in JavaScript Test
DESCRIPTION: Demonstrates using the custom AxeBuilder fixture in a test to analyze a specific page element and verify no violations exist.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_10

LANGUAGE: JavaScript
CODE:
```
const { test, expect } = require('./axe-test');

test('example using custom fixture', async ({ page, makeAxeBuilder }) => {
  await page.goto('https://your-site.com/');

  const accessibilityScanResults = await makeAxeBuilder()
      // Automatically uses the shared AxeBuilder configuration,
      // but supports additional test-specific configuration too
      .include('#specific-element-under-test')
      .analyze();

  expect(accessibilityScanResults.violations).toEqual([]);
});
```

----------------------------------------

TITLE: Configuring Worker Limits for Projects in Playwright
DESCRIPTION: Shows how to set worker limits for different projects in Playwright. It demonstrates setting a global worker limit and a specific limit for one project.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testproject.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  workers: 10,  // total workers limit

  projects: [
    {
      name: 'runs in parallel',
    },
    {
      name: 'one at a time',
      workers: 1,  // workers limit for this project
    },
  ],
});
```

----------------------------------------

TITLE: Selecting Options from Dropdown using Frame.select_option in Python (Async)
DESCRIPTION: Examples of how to select options from a dropdown element using the Frame.select_option method in Python's async mode. Shows single and multiple selections.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_32

LANGUAGE: python
CODE:
```
# Single selection matching the value or label
await frame.select_option("select#colors", "blue")
# single selection matching the label
await frame.select_option("select#colors", label="blue")
# multiple selection
await frame.select_option("select#colors", value=["red", "green", "blue"])
```

----------------------------------------

TITLE: Launching Chromium with New Headless Mode (Java)
DESCRIPTION: Demonstrates how to launch the Chromium browser in Playwright Java using the new headless mode by setting the channel to `'chromium'` in the `LaunchOptions`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_6

LANGUAGE: java
CODE:
```
Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setChannel("chromium"));
```

----------------------------------------

TITLE: Handling Multipart Form Data in Playwright
DESCRIPTION: Example of using FormData with apiRequestContext.fetch() for handling multiple file uploads
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_18

LANGUAGE: javascript
CODE:
```
const formData = new FormData();
formData.append('file', new File(['let x = 2024;'], 'f1.js', { type: 'text/javascript' }));
formData.append('file', new File(['hello'], 'f2.txt', { type: 'text/plain' }));
context.request.post('https://example.com/uploadFiles', {
  multipart: formData
});
```

----------------------------------------

TITLE: Limited-Use Locator Handler with Times Option in Python (Asynchronous)
DESCRIPTION: Asynchronous Python implementation of a locator handler that automatically removes itself after one use by setting the times parameter to 1. This handler clicks on a close button when it appears.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_94

LANGUAGE: python
CODE:
```
def handler(locator):
  await locator.click()
await page.add_locator_handler(page.get_by_label("Close"), handler, times=1)
```

----------------------------------------

TITLE: Asserting Select Options Selected with Playwright TypeScript
DESCRIPTION: Asserts that the select element located by the locator has specific options selected. This assertion automatically retries until the condition is met or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_26

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toHaveValues()
```

----------------------------------------

TITLE: Using TypeScript Decorators for Test Steps in Playwright
DESCRIPTION: Demonstrates how to use TypeScript method decorators to create test steps in Playwright. This approach allows each method call to appear as a step in the test report.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_38

LANGUAGE: typescript
CODE:
```
function step(target: Function, context: ClassMethodDecoratorContext) {
  return function replacementMethod(...args: any) {
    const name = this.constructor.name + '.' + (context.name as string);
    return test.step(name, async () => {
      return await target.call(this, ...args);
    });
  };
}

class LoginPage {
  constructor(readonly page: Page) {}

  @step
  async login() {
    const account = { username: 'Alice', password: 's3cr3t' };
    await this.page.getByLabel('Username or email address').fill(account.username);
    await this.page.getByLabel('Password').fill(account.password);
    await this.page.getByRole('button', { name: 'Sign in' }).click();
    await expect(this.page.getByRole('button', { name: 'View profile and more' })).toBeVisible();
  }
}

test('example', async ({ page }) => {
  const loginPage = new LoginPage(page);
  await loginPage.login();
});
```

----------------------------------------

TITLE: Setting Delay Between Mouse Down and Up in Playwright
DESCRIPTION: Defines the `delay` float parameter for Playwright click actions, specifying the time in milliseconds to wait between the `mousedown` and `mouseup` events. Defaults to 0 ms.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_18

LANGUAGE: markdown
CODE:
```
- `delay` <[float]>
```

----------------------------------------

TITLE: Saving a Downloaded File using SaveAsAsync in Playwright (C#)
DESCRIPTION: This snippet illustrates how to use the asynchronous `download.SaveAsAsync()` method in C# to save the downloaded file, incorporating `download.SuggestedFilename` into the target path. Assumes a `Download` object is available and is called within an async method.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-download.md#2025-04-22_snippet_9

LANGUAGE: csharp
CODE:
```
await download.SaveAsAsync("/path/to/save/at/" + download.SuggestedFilename);
```

----------------------------------------

TITLE: Using Custom Test Options in a Test
DESCRIPTION: This snippet demonstrates how to use a custom test option 'person' within a test, similar to using fixtures in Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
import { test } from './my-test';

test('test 1', async ({ page, person }) => {
  await page.goto(`/index.html`);
  await expect(page.locator('#node')).toContainText(person);
  // ...
});
```

----------------------------------------

TITLE: Configuring Multiple Web Servers in Playwright Config
DESCRIPTION: Example of configuring multiple web servers in the Playwright config file. This allows launching multiple servers, databases, or processes for testing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_37

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';
export default defineConfig({
  webServer: [
    {
      command: 'npm run start',
      url: 'http://127.0.0.1:3000',
      timeout: 120 * 1000,
      reuseExistingServer: !process.env.CI,
    },
    {
      command: 'npm run backend',
      url: 'http://127.0.0.1:3333',
      timeout: 120 * 1000,
      reuseExistingServer: !process.env.CI,
    }
  ],
  use: {
    baseURL: 'http://localhost:3000/',
  },
});
```

----------------------------------------

TITLE: Handling Dialog Events with C# in Playwright
DESCRIPTION: Example of handling a browser dialog event in Playwright using C#. The code creates a Playwright instance, launches Chromium, sets up a dialog event handler that logs the message and dismisses the dialog, then triggers an alert.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-dialog.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using System.Threading.Tasks;

class DialogExample
{
    public static async Task Run()
    {
        using var playwright = await Playwright.CreateAsync();
        await using var browser = await playwright.Chromium.LaunchAsync();
        var page = await browser.NewPageAsync();

        page.Dialog += async (_, dialog) =>
        {
            System.Console.WriteLine(dialog.Message);
            await dialog.DismissAsync();
        };

        await page.EvaluateAsync("alert('1');");
    }
}
```

----------------------------------------

TITLE: Checking ARIA Role with Playwright Java
DESCRIPTION: Illustrates the usage of LocatorAssertions.toHaveRole in Playwright Java to verify if a locator element possesses a specific ARIA role. Requires a Locator object and the expected AriaRole enum value.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_14

LANGUAGE: java
CODE:
```
Locator locator = page.getByTestId("save-button");
assertThat(locator).hasRole(AriaRole.BUTTON);
```

----------------------------------------

TITLE: Loading Authentication State with Playwright Codegen for Java
DESCRIPTION: Command to generate code for GitHub while loading previously saved authentication state from auth.json using Java. This Maven execution maintains login sessions without requiring re-authentication.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_25

LANGUAGE: bash
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="codegen --load-storage=auth.json github.com/microsoft/playwright"
```

----------------------------------------

TITLE: Evaluating JavaScript Functions in Page Context
DESCRIPTION: Defines the pageFunction parameter for evaluation functions in JavaScript. Allows executing JavaScript functions in the page context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_43

LANGUAGE: js
CODE:
```
- `pageFunction` <[function]|[string]>

Function to be evaluated in the page context.
```

----------------------------------------

TITLE: Modifying Network Requests in Java
DESCRIPTION: Shows how to modify outgoing network requests in Java. Examples include deleting headers from requests and changing the HTTP method to POST.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_18

LANGUAGE: java
CODE:
```
// Delete header
page.route("**/*", route -> {
  Map<String, String> headers = new HashMap<>(route.request().headers());
  headers.remove("X-Secret");
    route.resume(new Route.ResumeOptions().setHeaders(headers));
});

// Continue requests as POST.
page.route("**/*", route -> route.resume(new Route.ResumeOptions().setMethod("POST")));
```

----------------------------------------

TITLE: Setting Checkbox State in Playwright with Python (async)
DESCRIPTION: Demonstrates how to set the checked state of a checkbox element using the set_checked method in Python with async syntax. This example sets the checkbox to checked (True).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_86

LANGUAGE: python
CODE:
```
await page.get_by_role("checkbox").set_checked(True)
```

----------------------------------------

TITLE: Disabling Parallelism in Playwright Test (Bash)
DESCRIPTION: Command to run Playwright Test with parallelism disabled by setting the number of workers to 1.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx playwright test --workers=1
```

----------------------------------------

TITLE: Mocking API Requests in Python (Sync)
DESCRIPTION: This Python synchronous version demonstrates API mocking by intercepting a fruit API route and fulfilling it with custom data. It uses a synchronous route handler to provide mock JSON data, navigates to the target page, and verifies the mocked content.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
def test_mock_the_fruit_api(page: Page):
    def handle(route: Route):
        json = [{"name": "Strawberry", "id": 21}]
        # fulfill the route with the mock data
        route.fulfill(json=json)

    # Intercept the route to the fruit API
    page.route("*/**/api/v1/fruits", handle)

    # Go to the page
    page.goto("https://demo.playwright.dev/api-mocking")

    # Assert that the Strawberry fruit is visible
    expect(page.get_by_text("Strawberry")).to_be_visible()
```

----------------------------------------

TITLE: Mocking API Requests in C#
DESCRIPTION: This C# example intercepts calls to a fruit API and returns mock data. It uses the RouteAsync method to handle the route, fulfills it with custom JSON representing a strawberry fruit, and then verifies the mocked content appears on the page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_3

LANGUAGE: csharp
CODE:
```
// Intercept the route to the fruit API
await page.RouteAsync("*/**/api/v1/fruits", async route => {
  var json = new[] { new { name = "Strawberry", id = 21 } };
  // fulfill the route with the mock data
  await route.FulfillAsync(new()
  {
    Json = json
  });
});

// Go to the page
await page.GotoAsync("https://demo.playwright.dev/api-mocking");

// Assert that the Strawberry fruit is visible
await Expect(page.GetByTextAsync("Strawberry")).ToBeVisibleAsync();
```

----------------------------------------

TITLE: Mocking API Requests in Python (Async)
DESCRIPTION: This Python async example shows how to intercept a fruit API route and fulfill it with mock data. It defines an async handler function that provides a custom JSON response, then navigates to the page and verifies the mocked data is displayed.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
async def test_mock_the_fruit_api(page: Page):
    async def handle(route: Route):
        json = [{"name": "Strawberry", "id": 21}]
        # fulfill the route with the mock data
        await route.fulfill(json=json)

    # Intercept the route to the fruit API
    await page.route("*/**/api/v1/fruits", handle)

    # Go to the page
    await page.goto("https://demo.playwright.dev/api-mocking")

    # Assert that the Strawberry fruit is visible
    await expect(page.get_by_text("Strawberry")).to_be_visible()
```

----------------------------------------

TITLE: Run Playwright Test with Line Reporter via CLI
DESCRIPTION: Execute Playwright tests using the 'line' reporter directly from the command line. This provides a concise output showing the last finished test and inline failures.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx playwright test --reporter=line
```

----------------------------------------

TITLE: Matrix Sharding for Playwright Tests in GitLab CI (JavaScript)
DESCRIPTION: This YAML configuration sets up matrix sharding for Playwright tests in GitLab CI using JavaScript. It defines a matrix of projects and shards, resulting in multiple parallel jobs with different combinations of project and shard values.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_38

LANGUAGE: yml
CODE:
```
stages:
  - test

tests:
  stage: test
  image: mcr.microsoft.com/playwright:v%%VERSION%%-noble
  parallel:
    matrix:
      - PROJECT: ['chromium', 'webkit']
        SHARD: ['1/10', '2/10', '3/10', '4/10', '5/10', '6/10', '7/10', '8/10', '9/10', '10/10']
  script:
    - npm ci
    - npx playwright test --project=$PROJECT --shard=$SHARD
```

----------------------------------------

TITLE: Aborting Network Requests in Python (Async)
DESCRIPTION: Shows how to abort specific network requests in asynchronous Python. Examples include aborting image requests and conditionally aborting requests based on resource type.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_24

LANGUAGE: python
CODE:
```
await page.route("**/*.{png,jpg,jpeg}", lambda route: route.abort())

# Abort based on the request type
await page.route("**/*", lambda route: route.abort() if route.request.resource_type == "image"  else route.continue_())
```

----------------------------------------

TITLE: Installing specific browsers using Playwright CLI
DESCRIPTION: This snippet demonstrates how to install a specific browser in Playwright by specifying it as an argument. This is useful when you need only a particular browser for your testing environment.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
npx playwright install webkit
```

LANGUAGE: java
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install webkit\"
```

LANGUAGE: python
CODE:
```
playwright install webkit
```

LANGUAGE: csharp
CODE:
```
pwsh bin/Debug/netX/playwright.ps1 install webkit
```

----------------------------------------

TITLE: Getting Snapshot File Path in Playwright JS
DESCRIPTION: Illustrates how to use the `testInfo.snapshotPath` method to obtain the file path Playwright uses for different types of snapshots (screenshots, aria snapshots, generic snapshots). It shows how to pass the snapshot name and an optional `kind` parameter. Requires the `testInfo` fixture and Playwright assertions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfo.md#_snippet_7

LANGUAGE: javascript
CODE:
```
await expect(page).toHaveScreenshot('header.png');
// Screenshot assertion above expects screenshot at this path:
const screenshotPath = test.info().snapshotPath('header.png', { kind: 'screenshot' });

await expect(page.getByRole('main')).toMatchAriaSnapshot({ name: 'main.aria.yml' });
// Aria snapshot assertion above expects snapshot at this path:
const ariaSnapshotPath = test.info().snapshotPath('main.aria.yml', { kind: 'aria' });

expect('some text').toMatchSnapshot('snapshot.txt');
// Snapshot assertion above expects snapshot at this path:
const snapshotPath = test.info().snapshotPath('snapshot.txt');

expect('some text').toMatchSnapshot(['dir', 'subdir', 'snapshot.txt']);
// Snapshot assertion above expects snapshot at this path:
const nestedPath = test.info().snapshotPath('dir', 'subdir', 'snapshot.txt');
```

----------------------------------------

TITLE: Compiling and Running Playwright Java Programs with Maven - Bash
DESCRIPTION: Shows the Maven command-line invocation to compile and execute the Playwright Java example main class. Requires Maven, an appropriate pom.xml, and a main Java class under the specified path. The key input is the exec.mainClass property set to org.example.App, and the output is execution of the main Playwright script, which may include browser automation tasks.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-java.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
mvn compile exec:java -D exec.mainClass=\"org.example.App\"
```

----------------------------------------

TITLE: Overriding Context Options for a Single Test
DESCRIPTION: Example of using the browser_context_args marker to customize browser context options for a specific test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_17

LANGUAGE: python
CODE:
```
import pytest

@pytest.mark.browser_context_args(timezone_id="Europe/Berlin", locale="en-GB")
def test_browser_context_args(page):
    assert page.evaluate("window.navigator.userAgent") == "Europe/Berlin"
    assert page.evaluate("window.navigator.languages") == ["de-DE"]
```

----------------------------------------

TITLE: Checking Test Status in Playwright JS
DESCRIPTION: Shows how to access the `testInfo.status` and `testInfo.expectedStatus` properties within an `afterEach` hook to compare the test's actual outcome with its anticipated outcome. This is useful for reporting or taking actions based on whether a test finished as expected (e.g., passed when expected to pass, or skipped when expected to skip). Requires the `testInfo` fixture.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfo.md#_snippet_8

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.afterEach(async ({}, testInfo) => {
  if (testInfo.status !== testInfo.expectedStatus)
    console.log(`${testInfo.title} did not run as expected!`);
});
```

----------------------------------------

TITLE: Manual Time Control with Playwright in JavaScript
DESCRIPTION: Demonstrates fine-grained control over time in tests using Playwright's clock API in JavaScript. The example initializes a clock with a specific time, pauses time flow to take control, and then manually ticks through time while verifying the UI updates correctly.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_16

LANGUAGE: javascript
CODE:
```
// Initialize clock with a specific time, let the page load naturally.
await page.clock.install({ time: new Date('2024-02-02T08:00:00') });
await page.goto('http://localhost:3333');

// Pause the time flow, stop the timers, you now have manual control
// over the page time.
await page.clock.pauseAt(new Date('2024-02-02T10:00:00'));
await expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:00 AM');

// Tick through time manually, firing all timers in the process.
// In this case, time will be updated in the screen 2 times.
await page.clock.runFor(2000);
await expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:02 AM');
```

----------------------------------------

TITLE: Catching TimeoutError in Playwright (JavaScript/Node.js)
DESCRIPTION: This Node.js example demonstrates launching a Chromium browser, creating a page context, and attempting to click an element ('Foo') with a very short timeout (100ms). It shows how to use a try-catch block to specifically check for and handle the `playwright.errors.TimeoutError` if the click operation fails to complete within the given time.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-timeouterror.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
```js
const playwright = require('playwright');

(async () => {
  const browser = await playwright.chromium.launch();
  const context = await browser.newContext();
  const page = await context.newPage();
  try {
    await page.locator('text=Foo').click({
      timeout: 100,
    });
  } catch (error) {
    if (error instanceof playwright.errors.TimeoutError)
      console.log('Timeout!');
  }
  await browser.close();
})();
```
```

----------------------------------------

TITLE: Using Environment Variables in Configuration
DESCRIPTION: This configuration file demonstrates how to use environment variables to dynamically set the baseURL based on whether the tests are running in staging or production environment.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    baseURL: process.env.STAGING === '1' ? 'http://staging.example.test/' : 'http://example.test/',
  }
});
```

----------------------------------------

TITLE: Filtering Locators by Text in Playwright Python
DESCRIPTION: Shows how to use the has_text option with page.locator to filter a set of elements based on the text they contain before performing further actions or locating child elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_44

LANGUAGE: python
CODE:
```
await page.locator("li", has_text="my item").locator("button").click()
```

LANGUAGE: python
CODE:
```
page.locator("li", has_text="my item").locator("button").click()
```

----------------------------------------

TITLE: Retrieving Request Timing with Playwright in CSharp
DESCRIPTION: Demonstrates using Playwright in CSharp to wait for a request to finish during page navigation, capture the request object, and write the responseEnd timing property to the console. Requires Playwright .NET and an initialized page object. Uses RunAndWaitForRequestFinishedAsync for combined navigation and waiting. Outputs the responseEnd value of the timing object. Timing metrics are only accurate after request completion.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_10

LANGUAGE: csharp
CODE:
```
var request = await page.RunAndWaitForRequestFinishedAsync(async () =>\n{\n    await page.GotoAsync(\"https://www.microsoft.com\");\n});\nConsole.WriteLine(request.Timing.ResponseEnd);
```

----------------------------------------

TITLE: Retrieving Request Timing with Playwright in Python (Asynchronous)
DESCRIPTION: Demonstrates asynchronous usage of Playwright to listen for a finished request, navigate to a page, capture the request object, and print its timing information. Requires Playwright installed, an async-capable environment, and a page object. Uses "expect_event" context manager and "await" for async flow. The timing data is accessed after the request completes. Limitations: Only works in async Python contexts.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
async with page.expect_event(\"requestfinished\") as request_info:\n    await page.goto(\"http://example.com\")\nrequest = await request_info.value\nprint(request.timing)
```

----------------------------------------

TITLE: Basic POST Request with RequestOptions in Java
DESCRIPTION: Demonstrates how to create a basic POST request with query parameters and data using RequestOptions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-requestoptions.md#2025-04-22_snippet_0

LANGUAGE: java
CODE:
```
context.request().post(
  "https://example.com/submit",
  RequestOptions.create()
    .setQueryParam("page", 1)
    .setData("My data"));
```

----------------------------------------

TITLE: Mocking WebSocket Responses in Python (Async)
DESCRIPTION: This code snippet demonstrates how to intercept WebSocket connections and mock the entire communication in Python using async syntax. It responds to a 'request' message with a 'response'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_18

LANGUAGE: python
CODE:
```
def message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    ws.send("response")

await page.route_web_socket("wss://example.com/ws", lambda ws: ws.on_message(
    lambda message: message_handler(ws, message)
))
```

----------------------------------------

TITLE: Setting Custom User Agent in Playwright Test
DESCRIPTION: Configures a custom user agent string for a specific test using Playwright Test. This allows testing how websites respond to different browser identifications.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_63

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.use({ userAgent: 'My user agent' });

test('my user agent test', async ({ page }) => {
  // ...
});
```

----------------------------------------

TITLE: Mocking WebSocket Responses in Java
DESCRIPTION: This code snippet shows how to intercept WebSocket connections and mock the entire communication in Java. It responds to a 'request' message with a 'response'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_17

LANGUAGE: java
CODE:
```
page.routeWebSocket("wss://example.com/ws", ws -> {
  ws.onMessage(frame -> {
    if ("request".equals(frame.text()))
      ws.send("response");
  });
});
```

----------------------------------------

TITLE: Using WaitForSelectorAsync across navigations in C#
DESCRIPTION: This snippet demonstrates how to use the WaitForSelectorAsync method to wait for an image element across multiple page navigations in C#.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_148

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using System;
using System.Threading.Tasks;

class FrameExamples
{
  public static async Task Images()
  {
      using var playwright = await Playwright.CreateAsync();
      await using var browser = await playwright.Chromium.LaunchAsync();
      var page = await browser.NewPageAsync();

      foreach (var currentUrl in new[] { "https://www.google.com", "https://bbc.com" })
      {
          await page.GotoAsync(currentUrl);
          var element = await page.WaitForSelectorAsync("img");
          Console.WriteLine($"Loaded image: {await element.GetAttributeAsync("src")}");
      }

      await browser.CloseAsync();
  }
}
```

----------------------------------------

TITLE: Chaining Route Handlers with Route.abort and Route.fallback - JavaScript
DESCRIPTION: Demonstrates how multiple route handlers can be chained in Playwright (JavaScript) to intercept and control request handling order. Handlers are registered in order, but executed in reverse: the last registered runs first. The code shows aborting a request, then two fallback passes. This setup is commonly used to implement layered or prioritized request handling. Inputs: route object. Outputs: request is aborted. Additional handlers may be executed before abort depending on the chain.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
await page.route('**/*', async route => {
  // Runs last.
  await route.abort();
});
await page.route('**/*', async route => {
  // Runs second.
  await route.fallback();
});
await page.route('**/*', async route => {
  // Runs first.
  await route.fallback();
});
```

----------------------------------------

TITLE: ARIA Role Parameter for Accessibility Selectors
DESCRIPTION: Defines the `role` parameter that accepts standard ARIA role values for finding elements based on their accessibility roles.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_117

LANGUAGE: typescript
CODE:
```
- `role` <[AriaRole]<"alert"|"alertdialog"|"application"|"article"|"banner"|"blockquote"|"button"|"caption"|"cell"|"checkbox"|"code"|"columnheader"|"combobox"|"complementary"|"contentinfo"|"definition"|"deletion"|"dialog"|"directory"|"document"|"emphasis"|"feed"|"figure"|"form"|"generic"|"grid"|"gridcell"|"group"|"heading"|"img"|"insertion"|"link"|"list"|"listbox"|"listitem"|"log"|"main"|"marquee"|"math"|"meter"|"menu"|"menubar"|"menuitem"|"menuitemcheckbox"|"menuitemradio"|"navigation"|"none"|"note"|"option"|"paragraph"|"presentation"|"progressbar"|"radio"|"radiogroup"|"region"|"row"|"rowgroup"|"rowheader"|"scrollbar"|"search"|"searchbox"|"separator"|"slider"|"spinbutton"|"status"|"strong"|"subscript"|"superscript"|"switch"|"tab"|"table"|"tablist"|"tabpanel"|"term"|"textbox"|"time"|"timer"|"toolbar"|"tooltip"|"tree"|"treegrid"|"treeitem">>
```

----------------------------------------

TITLE: Handling Uncaught Page Exceptions in Playwright (Python Async)
DESCRIPTION: This asynchronous Python snippet demonstrates subscribing to the 'weberror' event on a Playwright context. It uses a lambda function as a handler to print the error message from `web_error.error` when an uncaught exception is detected. The `await page.goto` command navigates to a test page that intentionally throws an error, triggering the event handler in an async environment.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-weberror.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
# Log all uncaught errors to the terminal
context.on("weberror", lambda web_error: print(f"uncaught exception: {web_error.error}"))

# Navigate to a page with an exception.
await page.goto("data:text/html,<script>throw new Error('test')</script>")
```

----------------------------------------

TITLE: Attaching Screenshots to Test Information in Playwright
DESCRIPTION: This snippet demonstrates how to use test.info() to attach a screenshot to the test information during test execution.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_32

LANGUAGE: javascript
CODE:
```
test('example test', async ({ page }) => {
  // ...
  await test.info().attach('screenshot', {
    body: await page.screenshot(),
    contentType: 'image/png',
  });
});
```

----------------------------------------

TITLE: Updating Geolocation in JavaScript
DESCRIPTION: Changes the geolocation of a browser context using the Playwright JavaScript library. This allows testing how an application responds to location changes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_51

LANGUAGE: javascript
CODE:
```
await context.setGeolocation({ longitude: 48.858455, latitude: 2.294474 });
```

----------------------------------------

TITLE: Manual Time Control with Playwright in Python (Async)
DESCRIPTION: Demonstrates manual time control in tests using Playwright's clock API with Python async/await. This example initializes a clock with a specific time, pauses time flow, and manually advances time while verifying the UI updates correctly.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_17

LANGUAGE: python
CODE:
```
# Initialize clock with a specific time, let the page load naturally.
await page.clock.install(time=
    datetime.datetime(2024, 2, 2, 8, 0, 0, tzinfo=datetime.timezone.pst),
)
await page.goto("http://localhost:3333")
locator = page.get_by_test_id("current-time")

# Pause the time flow, stop the timers, you now have manual control
# over the page time.
await page.clock.pause_at(datetime.datetime(2024, 2, 2, 10, 0, 0))
await expect(locator).to_have_text("2/2/2024, 10:00:00 AM")

# Tick through time manually, firing all timers in the process.
# In this case, time will be updated in the screen 2 times.
await page.clock.run_for(2000)
await expect(locator).to_have_text("2/2/2024, 10:00:02 AM")
```

----------------------------------------

TITLE: Checking Accessible Name with Playwright Java
DESCRIPTION: Demonstrates how to use LocatorAssertions.toHaveAccessibleName in Playwright Java to verify if a locator element has a specific accessible name. Requires a Locator object and the expected name string.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_12

LANGUAGE: java
CODE:
```
Locator locator = page.getByRole(AriaRole.BUTTON);
assertThat(locator).hasAccessibleName("Submit");
```

----------------------------------------

TITLE: Iterating Over Locator Results Using Playwright Python (Sync)
DESCRIPTION: Uses sync Python Playwright API to find all 'listitem' elements and perform clicks. Requires Playwright for Python and a synchronous page context. It selects all 'listitem' roles and iterates for clicks. Should be run after content load for reliability.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_2

LANGUAGE: Python
CODE:
```
for li in page.get_by_role('listitem').all():
  li.click();
```

----------------------------------------

TITLE: Aborting Network Requests in C#
DESCRIPTION: Shows how to abort specific network requests in C#. Examples include aborting image requests and conditionally aborting requests based on resource type.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_26

LANGUAGE: csharp
CODE:
```
await page.RouteAsync("**/*.{png,jpg,jpeg}", route => route.AbortAsync());

// Abort based on the request type
await page.RouteAsync("**/*", async route => {
if ("image".Equals(route.Request.ResourceType))
    await route.AbortAsync();
else
    await route.ContinueAsync();
});
```

----------------------------------------

TITLE: Creating Fixtures for Extension Testing - JavaScript
DESCRIPTION: This JavaScript fixture file defines custom test workers to run browser contexts with extensions for testing using Playwright. It includes an example test to validate the extension's impact on a web page using an extension ID. It requires @playwright/test and Node.js path module.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/chrome-extensions-js-python.md#2025-04-22_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { test as base, chromium, type BrowserContext } from '@playwright/test';
import path from 'path';

export const test = base.extend<{
  context: BrowserContext;
  extensionId: string;
}>({
  context: async ({ }, use) => {
    const pathToExtension = path.join(__dirname, 'my-extension');
    const context = await chromium.launchPersistentContext('', {
      channel: 'chromium',
      args: [
        `--disable-extensions-except=${pathToExtension}`,
        `--load-extension=${pathToExtension}`,
      ],
    });
    await use(context);
    await context.close();
  },
  extensionId: async ({ context }, use) => {
    /*
    // for manifest v2:
    let [background] = context.backgroundPages()
    if (!background)
      background = await context.waitForEvent('backgroundpage')
    */

    // for manifest v3:
    let [background] = context.serviceWorkers();
    if (!background)
      background = await context.waitForEvent('serviceworker');

    const extensionId = background.url().split('/')[2];
    await use(extensionId);
  },
});
export const expect = test.expect;
```

----------------------------------------

TITLE: Testing Pinch Zoom Out - Playwright Python Async
DESCRIPTION: An asynchronous test function that navigates to Google Maps, handles the consent dialog, locates the map element, and repeatedly calls the `pinch` function to simulate a pinch-in gesture, effectively zooming out. It uses Playwright's page navigation, element location, and assertion capabilities. Requires a Playwright Page object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#_snippet_14

LANGUAGE: Python
CODE:
```
async def test_pinch_in_gesture_to_zoom_out_the_map(page):
    await page.goto('https://www.google.com/maps/place/@37.4117722,-122.0713234,15z', wait_until='commit')
    await page.get_by_role('button', name='Keep using web').click()
    await expect(page.get_by_role('button', name='Keep using web')).not_to_be_visible()
    met = page.locator('[data-test-id="met"]')
    for _ in range(5):
        await pinch(met, {'deltaX': 40, 'direction': 'in'})
    await page.screenshot(path="screenshot.png")
```

----------------------------------------

TITLE: Conditional Group Skipping in Playwright
DESCRIPTION: Demonstrates how to conditionally skip groups of tests based on browser type.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-annotations-js.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
test.describe('chromium only', () => {
  test.skip(({ browserName }) => browserName !== 'chromium', 'Chromium only!');

  test.beforeAll(async () => {
    // This hook is only run in Chromium.
  });

  test('test 1', async ({ page }) => {
    // This test is only run in Chromium.
  });

  test('test 2', async ({ page }) => {
    // This test is only run in Chromium.
  });
});
```

----------------------------------------

TITLE: Handling WebSocket Events in C#
DESCRIPTION: This snippet demonstrates how to handle WebSocket events in Playwright using C#. It shows logging for WebSocket opening, frame sending/receiving, and closing events.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_35

LANGUAGE: csharp
CODE:
```
page.WebSocket += (_, ws) =>
{
    Console.WriteLine("WebSocket opened: " + ws.Url);
    ws.FrameSent += (_, f) => Console.WriteLine(f.Text);
    ws.FrameReceived += (_, f) => Console.WriteLine(f.Text);
    ws.Close += (_, ws1) => Console.WriteLine("WebSocket closed");
};
```

----------------------------------------

TITLE: Passing arguments to wait_for_function in async Python
DESCRIPTION: Shows how to pass a selector argument to the wait_for_function predicate in async Python. The function waits until an element matching the selector appears in the DOM.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_117

LANGUAGE: python
CODE:
```
selector = ".foo"
await page.wait_for_function("selector => !!document.querySelector(selector)", selector)
```

----------------------------------------

TITLE: Installing Microsoft Edge with Playwright CLI
DESCRIPTION: Provides the command-line instruction using npx playwright install to download and install the stable version of Microsoft Edge for use with Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_46

LANGUAGE: bash
CODE:
```
npx playwright install msedge
```

----------------------------------------

TITLE: Configuring Blob Reporter Output File in Playwright (JS)
DESCRIPTION: Demonstrates how to configure the 'blob' reporter within the Playwright configuration file (playwright.config.ts). It sets a custom outputFile path for the generated blob report, incorporating the operating system name into the filename. Requires importing defineConfig from @playwright/test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_19

LANGUAGE: js
CODE:
```
import { defineConfig } from '@playwright/test';
import os from 'os';

export default defineConfig({
  reporter: [['blob', { outputFile: `./blob-report/report-${os.platform()}.zip` }]],
});
```

----------------------------------------

TITLE: Global Setup with Environment Variables
DESCRIPTION: Example showing how to pass data from global setup to tests using environment variables.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
import type { FullConfig } from '@playwright/test';

async function globalSetup(config: FullConfig) {
  process.env.FOO = 'some data';
  // Or a more complicated data structure as JSON:
  process.env.BAR = JSON.stringify({ some: 'data' });
}

export default globalSetup;
```

----------------------------------------

TITLE: Using a Custom Reporter in Playwright Config (JS/TS)
DESCRIPTION: Shows how to configure Playwright to use a custom reporter defined in a local file (e.g., `./my-awesome-reporter.ts`) by specifying its path in the `reporter` option within the `playwright.config.ts` file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_28

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: './my-awesome-reporter.ts',
});
```

----------------------------------------

TITLE: Incorrect Dialog Handling Causing Stall (C#)
DESCRIPTION: Demonstrates incorrect usage where a `Page.Dialog` event handler is registered but does not handle the dialog (e.g., by accepting or dismissing it). This causes the script execution to hang at the asynchronous action that triggered the dialog because web dialogs are modal.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_9

LANGUAGE: csharp
CODE:
```
```csharp
page.Dialog += (_, dialog) => Console.WriteLine(dialog.Message);
await page.GetByRole(AriaRole.Button).ClickAsync(); // Will hang here
```
```

----------------------------------------

TITLE: Evaluating Expressions on Frame in C#
DESCRIPTION: Shows how to use the EvaluateAsync method in C# to execute a JavaScript expression within a frame and return its result as a specific type.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_22

LANGUAGE: csharp
CODE:
```
var result = await frame.EvaluateAsync<int>("([x, y]) => Promise.resolve(x * y)", new[] { 7, 8 });
Console.WriteLine(result);
```

----------------------------------------

TITLE: Defining a Preload Script for Playwright (JavaScript)
DESCRIPTION: Example JavaScript preload script (`preload.js`) intended to be used with `BrowserContext.addInitScript`. This script overrides the global `Math.random` function to always return 42. It demonstrates how to modify the JavaScript environment before page scripts run.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
// preload.js
Math.random = () => 42;
```

----------------------------------------

TITLE: Using Playwright nth and visible Selectors in C#
DESCRIPTION: Demonstrates how to use the 'nth' and 'visible' selector engines in C# to select elements based on their index among matches or their visibility status. Examples show both string selector syntax and Locator methods like First.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_55

LANGUAGE: csharp
CODE:
```
// select the first button among all buttons
await button.ClickAsync("button >> nth=0");
// or if you are using locators, you can use First, Nth() and Last
await page.Locator("button").First.ClickAsync();

// click a visible button
await button.ClickAsync("button >> visible=true");
```

----------------------------------------

TITLE: ARIA Checked Option for Role Selectors
DESCRIPTION: Defines the `checked` option for role-based selectors to match elements with a specific checked state.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_118

LANGUAGE: typescript
CODE:
```
* since: v1.27
- `checked` <[boolean]>
```

----------------------------------------

TITLE: Opening Trace in Python
DESCRIPTION: Command to open and view a recorded trace file using Playwright CLI with Python.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-java-python.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
playwright show-trace trace.zip
```

----------------------------------------

TITLE: Querying All Text Contents with Playwright Java
DESCRIPTION: Uses Playwright Java API to get an array of textContent values from all nodes with the 'link' role. Outputs an array of strings mapped from textContent properties.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_13

LANGUAGE: Java
CODE:
```
String[] texts = page.getByRole(AriaRole.LINK).allTextContents();
```

----------------------------------------

TITLE: Manual Time Control with Playwright in C#
DESCRIPTION: Demonstrates manual time control in C# using Playwright's Clock API. This example initializes a clock with a specific date and timezone, pauses time flow, and manually advances time while verifying the UI updates correctly.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_20

LANGUAGE: csharp
CODE:
```
// Initialize clock with a specific time, let the page load naturally.
await Page.Clock.InstallAsync(new()
{
  TimeDate = new DateTime(2024, 2, 2, 8, 0, 0, DateTimeKind.Pst)
});
await page.GotoAsync("http://localhost:3333");
var locator = page.GetByTestId("current-time");

// Pause the time flow, stop the timers, you now have manual control
// over the page time.
await Page.Clock.PauseAtAsync(new DateTime(2024, 2, 2, 10, 0, 0));
await Expect(locator).ToHaveTextAsync("2/2/2024, 10:00:00 AM");

// Tick through time manually, firing all timers in the process.
// In this case, time will be updated in the screen 2 times.
await Page.Clock.RunForAsync(2000);
await Expect(locator).ToHaveTextAsync("2/2/2024, 10:00:02 AM");
```

----------------------------------------

TITLE: Chaining Route Handlers with Route.abort and Route.fallback - Python (Async)
DESCRIPTION: Demonstrates reversing handler execution order with Playwright async API in Python. Each lambda or handler either aborts or falls back. Facilitates complex or multi-step request handling including prioritization or filtering logic.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
await page.route("**/*", lambda route: route.abort())  # Runs last.
await page.route("**/*", lambda route: route.fallback())  # Runs second.
await page.route("**/*", lambda route: route.fallback())  # Runs first.
```

----------------------------------------

TITLE: Saving Authentication State with Playwright Codegen for Java
DESCRIPTION: Command to generate code for GitHub while saving authentication state (cookies, localStorage, IndexedDB) to auth.json using Java. This Maven execution allows reusing authentication in subsequent test recordings.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_21

LANGUAGE: bash
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="codegen github.com/microsoft/playwright  --save-storage=auth.json"
```

----------------------------------------

TITLE: Converting Locator to FrameLocator in Playwright Java
DESCRIPTION: Demonstrates the usage of the new Locator.contentFrame method in Playwright Java. This method converts a Locator pointing to an iframe element into a FrameLocator, allowing interaction with elements inside that specific frame.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_18

LANGUAGE: java
CODE:
```
Locator locator = page.locator("iframe[name='embedded']");
// ...
FrameLocator frameLocator = locator.contentFrame();
frameLocator.getByRole(AriaRole.BUTTON).click();
```

----------------------------------------

TITLE: Running Playwright Tests from Multiple Directories
DESCRIPTION: Execute tests from multiple directories by passing the directory names to the playwright test command.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
npx playwright test tests/todo-page/ tests/landing-page/
```

----------------------------------------

TITLE: Wait for Locator Visibility in Playwright Java
DESCRIPTION: Illustrates how to use `locator.waitFor()` on a specific locator (`#order-sent`) to pause execution until the element represented by the locator becomes visible on the page. This is the default state waited for.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_52

LANGUAGE: Java
CODE:
```
Locator orderSent = page.locator("#order-sent");
orderSent.waitFor();
```

----------------------------------------

TITLE: Configuring Snapshot Ignoring in Playwright Tests
DESCRIPTION: Configuration to skip snapshot expectations based on environment conditions using ignoreSnapshots property.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  ignoreSnapshots: !process.env.CI,
});
```

----------------------------------------

TITLE: Configuring Headless Mode in Playwright Tests
DESCRIPTION: Example showing how to disable headless mode for tests, which makes the browser visible during test execution. Useful for debugging and visual inspection of test behavior.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_16

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    headless: false
  },
});
```

----------------------------------------

TITLE: Clicking Anchor Element with ElementHandle in JavaScript
DESCRIPTION: Demonstrates how to click on an anchor ('a') DOM element using ElementHandle in JavaScript. Requires a Playwright Page instance. The snippet waits for a DOM element matching the 'a' selector then clicks it.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
const hrefElement = await page.$('a');
await hrefElement.click();
```

----------------------------------------

TITLE: Using to_be_ok assertion with Python Async
DESCRIPTION: Usage example of the to_be_ok method which ensures the response status code is within 200-299 range in Python async API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponseassertions.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
from playwright.async_api import expect

# ...
await expect(response).to_be_ok()
```

----------------------------------------

TITLE: Asserting Banner ARIA Snapshot using Playwright JS
DESCRIPTION: This JavaScript snippet demonstrates how to perform an ARIA snapshot test on a banner element. It navigates to 'https://playwright.dev/', selects the element with the role 'banner', and asserts that its accessibility tree matches the provided YAML snapshot template using `toMatchAriaSnapshot`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
```js
await page.goto('https://playwright.dev/');
await expect(page.getByRole('banner')).toMatchAriaSnapshot(`
  - banner:
    - heading /Playwright enables reliable end-to-end/ [level=1]
    - link "Get started"
    - link "Star microsoft/playwright on GitHub"
    - link /[\\d]+k\\+ stargazers on GitHub/
`);
```
```

----------------------------------------

TITLE: Waiting for URL Navigation in Python (Sync)
DESCRIPTION: This snippet demonstrates how to use Frame.wait_for_url to wait for navigation to a specific URL after clicking a link in Python using the sync API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_53

LANGUAGE: python
CODE:
```
frame.click("a.delayed-navigation") # clicking the link will indirectly cause a navigation
frame.wait_for_url("**/target.html")
```

----------------------------------------

TITLE: Creating Basic Browser API Mock in Playwright
DESCRIPTION: Demonstrates how to create a basic mock for the browser's battery API using Page.addInitScript(). Sets up mock battery information with predefined values.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock-browser-js.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
await page.addInitScript(() => {
  const mockBattery = {
    level: 0.75,
    charging: true,
    chargingTime: 1800,
    dischargingTime: Infinity,
    addEventListener: () => { }
  };
  // Override the method to always return mock battery info.
  window.navigator.getBattery = async () => mockBattery;
});
```

----------------------------------------

TITLE: Recording Playwright Tests with Custom Setup in Java
DESCRIPTION: Java implementation for using Playwright's recording features with custom configurations. The code launches Chrome in headed mode, sets up a browser context with custom routing, and pauses for manual recording via the page.pause() method.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_29

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      BrowserType chromium = playwright.chromium();
      // Make sure to run headed.
      Browser browser = chromium.launch(new BrowserType.LaunchOptions().setHeadless(false));
      // Setup context however you like.
      BrowserContext context = browser.newContext(/* pass any options */);
      context.route("**/*", route -> route.resume());
      // Pause the page, and start recording manually.
      Page page = context.newPage();
      page.pause();
    }
  }
}
```

----------------------------------------

TITLE: Matching Strings Against Patterns with expect.stringMatching in JavaScript
DESCRIPTION: Demonstrates `expect.stringMatching(expectedPattern)` used inside `expect().toEqual()` in Playwright. This matcher asserts that the received string matches the provided regular expression or string pattern. It allows for more complex string validation than simple substring checks.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_32

LANGUAGE: javascript
CODE:
```
```js
expect('123ms').toEqual(expect.stringMatching(/\d+m?s/));

// Inside another matcher.
expect({
  status: 'passed',
  time: '123ms',
}).toEqual({
  status: expect.stringMatching(/passed|failed/),
  time: expect.stringMatching(/\d+m?s/),
});
```
```

----------------------------------------

TITLE: Using APIResponseAssertions with negation in Java
DESCRIPTION: Example of using the .not() method to negate an assertion and check that a response is not OK in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponseassertions.md#2025-04-22_snippet_5

LANGUAGE: java
CODE:
```
assertThat(response).not().isOK();
```

----------------------------------------

TITLE: Routing WebSocket Connections in Python (Sync)
DESCRIPTION: Example of routing WebSocket connections using Page.route_web_socket method in Python with synchronous syntax. It shows how to handle WebSocket messages synchronously.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_99

LANGUAGE: python
CODE:
```
def message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    ws.send("response")

def handler(ws: WebSocketRoute):
  ws.on_message(lambda message: message_handler(ws, message))

page.route_web_socket("/ws", handler)
```

----------------------------------------

TITLE: Pause Clock At Specific Time
DESCRIPTION: Demonstrates pausing the clock at a specific date and time, including initialization best practices
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-clock.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
await page.clock.install({ time: new Date('2024-12-10T08:00:00') });
await page.goto('http://localhost:3333');
await page.clock.pauseAt(new Date('2024-12-10T10:00:00'));
```

LANGUAGE: python
CODE:
```
await page.clock.install(time=datetime.datetime(2024, 12, 10, 8, 0, 0))
await page.goto("http://localhost:3333")
await page.clock.pause_at(datetime.datetime(2024, 12, 10, 10, 0, 0))
```

LANGUAGE: java
CODE:
```
SimpleDateFormat format = new SimpleDateFormat("yyy-MM-dd'T'HH:mm:ss");
page.clock().install(new Clock.InstallOptions().setTime(format.parse("2024-12-10T08:00:00")));
page.navigate("http://localhost:3333");
page.clock().pauseAt(format.parse("2024-12-10T10:00:00"));
```

----------------------------------------

TITLE: Setting HTTP Authentication Credentials in Playwright Tests
DESCRIPTION: Example showing how to configure HTTP authentication credentials for websites that require Basic HTTP authentication, providing username and password.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_17

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    httpCredentials: {
      username: 'user',
      password: 'pass',
    },
  },
});
```

----------------------------------------

TITLE: Mocking API Endpoints in Python (Async)
DESCRIPTION: Shows how to intercept and mock API endpoints by handling network requests in asynchronous Python. The code fulfills a request with custom status code and body data.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_10

LANGUAGE: python
CODE:
```
await page.route(
    "**/api/fetch_data",
    lambda route: route.fulfill(status=200, body=test_data))
await page.goto("https://example.com")
```

----------------------------------------

TITLE: Waiting for a Specific Network Request in Playwright (Java)
DESCRIPTION: Shows how to wait for a specific network request matching a URL pattern ('**/*logo*.png') using `page.waitForRequest` in Playwright for Java. This method takes a URL pattern and a lambda expression containing the code (`page.navigate`) expected to trigger the request. It returns the matching `Request` object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
```java
// The callback lambda defines scope of the code that is expected to
// trigger request.
Request request = page.waitForRequest("**/*logo*.png", () -> {
  page.navigate("https://wikipedia.org");
});
System.out.println(request.url());
```
```

----------------------------------------

TITLE: Setting Input Files in Playwright with Java
DESCRIPTION: Demonstrates various ways to upload files using setInputFiles method in Java, including uploading a single file, multiple files, a directory, removing selected files, and uploading a buffer from memory.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_90

LANGUAGE: java
CODE:
```
// Select one file
page.getByLabel("Upload file").setInputFiles(Paths.get("myfile.pdf"));

// Select multiple files
page.getByLabel("Upload files").setInputFiles(new Path[] {Paths.get("file1.txt"), Paths.get("file2.txt")});

// Select a directory
page.getByLabel("Upload directory").setInputFiles(Paths.get("mydir"));

// Remove all the selected files
page.getByLabel("Upload file").setInputFiles(new Path[0]);

// Upload buffer from memory
page.getByLabel("Upload file").setInputFiles(new FilePayload(
  "file.txt", "text/plain", "this is test".getBytes(StandardCharsets.UTF_8)));
```

----------------------------------------

TITLE: Testing Children in React Components with Playwright
DESCRIPTION: Demonstrates how to test children in React components using Playwright's component testing framework. It shows how to mount a component with child content.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
import { test } from '@playwright/experimental-ct-react';

test('children', async ({ mount }) => {
  const component = await mount(<Component>Child</Component>);
});
```

----------------------------------------

TITLE: Opening UI Mode and Trace Viewer in Browser Tabs
DESCRIPTION: Shows how to open Playwright's UI mode and trace viewer in browser tabs by specifying a port.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_24

LANGUAGE: bash
CODE:
```
$ npx playwright test --ui-port 0 # open UI mode in a tab on a random port
$ npx playwright show-trace --port 0 # open trace viewer in tab on a random port
```

----------------------------------------

TITLE: Running Playwright Tests on a Single Project
DESCRIPTION: Command to run tests on a specific Playwright project using the --project flag, which allows targeting tests to a particular browser or configuration.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-projects-js.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npx playwright test --project=firefox

Running 1 test using 1 worker

  ✓ [firefox] › example.spec.ts:3:1 › basic test (2s)
```

----------------------------------------

TITLE: Launching a Browser with Custom Arguments Using Playwright Python (Sync)
DESCRIPTION: Demonstrates synchronous launch of a Playwright browser while disabling selected default arguments with the 'ignore_default_args' option. Requires Playwright sync API. Arguments customize the browser's launch behavior. Outputs a browser instance.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_13

LANGUAGE: python
CODE:
```
browser = playwright.chromium.launch( # or \"firefox\" or \"webkit\".\n    ignore_default_args=[\"--mute-audio\"]\n)
```

----------------------------------------

TITLE: Running TypeScript Compiler in Watch Mode
DESCRIPTION: This shell command demonstrates how to run the TypeScript compiler in watch mode during local development. It uses the tsconfig.json file and the --noEmit flag to check types without generating output files.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-typescript-js.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
npx tsc -p tsconfig.json --noEmit -w
```

----------------------------------------

TITLE: Running Playwright Codegen in Java
DESCRIPTION: This command executes the Playwright code generator through Maven for a specified URL using Java. It generates test scripts based on user interactions in the browser. Prerequisites include a Maven setup with Playwright dependency, and the target URL is optional.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen-intro.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"codegen demo.playwright.dev/todomvc\"
```

----------------------------------------

TITLE: Exposing Page URL Using Java in Playwright
DESCRIPTION: Java implementation of exposing a page URL through browser context binding. Shows how to create a context, expose the binding, and use it in a web page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_11

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      BrowserType webkit = playwright.webkit();
      Browser browser = webkit.launch(new BrowserType.LaunchOptions().setHeadless(false));
      BrowserContext context = browser.newContext();
      context.exposeBinding("pageURL", (source, args) -> source.page().url());
      Page page = context.newPage();
      page.setContent("<script>\n" +
        "  async function onClick() {\n" +
        "    document.querySelector('div').textContent = await window.pageURL();\n" +
        "  }\n" +
        "</script>\n" +
        "<button onclick=\"onClick()\">Click me</button>\n" +
        "<div></div>");
      page.getByRole(AriaRole.BUTTON).click();
    }
  }
}
```

----------------------------------------

TITLE: Setting Viewport and High-DPI via Context/Page (Python Async)
DESCRIPTION: This asynchronous Python snippet shows using `playwright.async_api` for: creating a context with a specific viewport, resizing a page's viewport with `page.set_viewport_size`, and creating a high-DPI context using `viewport` and `device_scale_factor` options.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_12

LANGUAGE: python
CODE:
```
```python async
# Create context with given viewport
context = await browser.new_context(
  viewport={ 'width': 1280, 'height': 1024 }
)

# Resize viewport for individual page
await page.set_viewport_size({"width": 1600, "height": 1200})

# Emulate high-DPI
context = await browser.new_context(
  viewport={ 'width': 2560, 'height': 1440 },
  device_scale_factor=2,
)
```
```

----------------------------------------

TITLE: Retrieving Error Message in JavaScript
DESCRIPTION: Gets the error message. This is set when an Error (or its subclass) has been thrown during test execution.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfoerror.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
testInfoError.message
```

----------------------------------------

TITLE: Adding Custom Message to Playwright Soft Expect (JS)
DESCRIPTION: Shows how to provide a custom message for soft assertions using `expect.soft`. The message is included in the report if the soft assertion fails.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_36

LANGUAGE: js
CODE:
```
expect.soft(value, 'my soft assertion').toBe(56);
```

----------------------------------------

TITLE: Reusing a Single Page Between Tests in Playwright (TypeScript)
DESCRIPTION: This TypeScript code shows how to reuse a single Page object between multiple tests in Playwright. It creates a page in beforeAll, uses it in tests, and closes it in afterAll, with proper TypeScript typing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-retries-js.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
import { test, type Page } from '@playwright/test';

test.describe.configure({ mode: 'serial' });

let page: Page;

test.beforeAll(async ({ browser }) => {
  page = await browser.newPage();
});

test.afterAll(async () => {
  await page.close();
});

test('runs first', async () => {
  await page.goto('https://playwright.dev/');
});

test('runs second', async () => {
  await page.getByText('Get Started').click();
});
```

----------------------------------------

TITLE: Configuring Geolocation in Playwright Tests
DESCRIPTION: Example showing how to spoof geolocation for tests to simulate a user visiting from a specific location, providing longitude and latitude coordinates.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_14

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    geolocation: { longitude: 12.492507, latitude: 41.889938 },
  },
});
```

----------------------------------------

TITLE: Handling a One-Off Dialog Event in Playwright (Sync Python)
DESCRIPTION: Illustrates using `page.once` in synchronous Playwright for Python to handle the 'dialog' event just once. A lambda function is used to accept the dialog with '2021' when the prompt is triggered by `page.evaluate`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_18

LANGUAGE: python
CODE:
```
```python sync
page.once("dialog", lambda dialog: dialog.accept("2021"))
page.evaluate("prompt('Enter a number:')")
```
```

----------------------------------------

TITLE: Grouping Playwright Actions in Trace Viewer (Java)
DESCRIPTION: Illustrates how to use `page.context().tracing().group()` and `groupEnd()` in Playwright Java to visually group a sequence of actions in the trace viewer, making it easier to analyze specific workflows.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_5

LANGUAGE: java
CODE:
```
// All actions between group and groupEnd
// will be shown in the trace viewer as a group.
page.context().tracing().group("Open Playwright.dev > API");
page.navigate("https://playwright.dev/");
page.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName("API")).click();
page.context().tracing().groupEnd();
```

----------------------------------------

TITLE: Handling Retries in Playwright Test Code
DESCRIPTION: This JavaScript code snippet shows how to detect retries at runtime within a Playwright test. It uses the TestInfo object to check if the test is being retried and performs a cleanup action if so.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-retries-js.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('my test', async ({ page }, testInfo) => {
  if (testInfo.retry)
    await cleanSomeCachesOnTheServer();
  // ...
});
```

----------------------------------------

TITLE: Updating Geolocation in Python (Async)
DESCRIPTION: Changes the geolocation of a browser context using the Playwright Python async API. This allows testing how an application responds to location changes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_53

LANGUAGE: python
CODE:
```
await context.set_geolocation({"longitude": 48.858455, "latitude": 2.294474})
```

----------------------------------------

TITLE: Handling Frame Unavailability for Playwright Requests in JavaScript
DESCRIPTION: Provides a JavaScript example demonstrating how to safely handle cases where `request.frame()` might not be available. It checks if the request originated from a Service Worker using `request.serviceWorker()` or if it's a navigation request using `request.isNavigationRequest()` before attempting to access `request.frame().url()`. This prevents errors when the frame context is not applicable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
```js
if (request.serviceWorker())
  console.log(`request ${request.url()} from a service worker`);
else if (request.isNavigationRequest())
  console.log(`request ${request.url()} is a navigation request`);
else
  console.log(`request ${request.url()} from a frame ${request.frame().url()}`);
```
```

----------------------------------------

TITLE: Manual Time Control with Playwright in Python (Sync)
DESCRIPTION: Demonstrates manual time control in tests using Playwright's clock API with synchronous Python. This example initializes a clock with a specific timezone, pauses time flow, and manually advances time while verifying the UI updates correctly.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_18

LANGUAGE: python
CODE:
```
# Initialize clock with a specific time, let the page load naturally.
page.clock.install(
    time=datetime.datetime(2024, 2, 2, 8, 0, 0, tzinfo=datetime.timezone.pst),
)
page.goto("http://localhost:3333")
locator = page.get_by_test_id("current-time")

# Pause the time flow, stop the timers, you now have manual control
# over the page time.
page.clock.pause_at(datetime.datetime(2024, 2, 2, 10, 0, 0))
expect(locator).to_have_text("2/2/2024, 10:00:00 AM")

# Tick through time manually, firing all timers in the process.
# In this case, time will be updated in the screen 2 times.
page.clock.run_for(2000)
expect(locator).to_have_text("2/2/2024, 10:00:02 AM")
```

----------------------------------------

TITLE: Obtaining a JSHandle using evaluateHandle in JavaScript
DESCRIPTION: Demonstrates how to get a reference ([JSHandle]) to the global `window` object within the browser context using the `page.evaluateHandle` method in JavaScript. This handle can subsequently be used for further JavaScript evaluations within the page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
```js
const jsHandle = await page.evaluateHandle('window');
//  Use jsHandle for evaluations.
```
```

----------------------------------------

TITLE: Checking for Playwright Soft Assertion Failures (JS)
DESCRIPTION: Shows how to check if any soft assertions (`expect.soft`) have failed during test execution by inspecting the `test.info().errors` array. This allows conditional logic based on soft assertion outcomes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_34

LANGUAGE: JavaScript
CODE:
```
// Make a few checks that will not stop the test when failed...
await expect.soft(page.getByTestId('status')).toHaveText('Success');
await expect.soft(page.getByTestId('eta')).toHaveText('1 day');

// Avoid running further if there were soft assertion failures.
expect(test.info().errors).toHaveLength(0);
```

----------------------------------------

TITLE: Recording Playwright Tests with Custom Setup in Python (Async)
DESCRIPTION: Asynchronous Python example for Playwright recording with custom setup. It launches Chrome in headed mode, sets up context with custom routing, and uses page.pause() to enable manual recording through the codegen UI.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_30

LANGUAGE: python
CODE:
```
import asyncio
from playwright.async_api import async_playwright

async def main():
    async with async_playwright() as p:
        # Make sure to run headed.
        browser = await p.chromium.launch(headless=False)

        # Setup context however you like.
        context = await browser.new_context() # Pass any options
        await context.route('**/*', lambda route: route.continue_())

        # Pause the page, and start recording manually.
        page = await context.new_page()
        await page.pause()

asyncio.run(main())
```

----------------------------------------

TITLE: Using React Locator in Playwright
DESCRIPTION: React locator allows finding elements by their component name and property values. Component names are transcribed with CamelCase. This example demonstrates clicking on a BookItem component.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_11

LANGUAGE: javascript
CODE:
```
await page.locator('_react=BookItem').click();
```

LANGUAGE: java
CODE:
```
page.locator("_react=BookItem").click();
```

LANGUAGE: python
CODE:
```
await page.locator("_react=BookItem").click()
```

LANGUAGE: python
CODE:
```
page.locator("_react=BookItem").click()
```

LANGUAGE: csharp
CODE:
```
await page.Locator("_react=BookItem").ClickAsync();
```

----------------------------------------

TITLE: Handling Worker Events in Playwright using Python
DESCRIPTION: This Python snippet demonstrates handling Playwright worker events. It defines a handler function `handle_worker` which is registered with the page's 'worker' event. Inside the handler, it prints the worker's URL upon creation and registers another listener (using a lambda) for the worker's 'close' event to print upon destruction. Finally, it iterates through the `page.workers` list to display the URLs of existing workers.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-worker.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
def handle_worker(worker):
    print("worker created: " + worker.url)
    worker.on("close", lambda: print("worker destroyed: " + worker.url))

page.on('worker', handle_worker)

print("current workers:")
for worker in page.workers:
    print("    " + worker.url)
```

----------------------------------------

TITLE: Running Playwright Codegen in Python
DESCRIPTION: This command utilizes Playwright's codegen feature for a specified URL in the Python environment, facilitating interaction recording to create test scripts. It operates without additional prerequisites and accommodates an optional URL.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen-intro.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
playwright codegen demo.playwright.dev/todomvc
```

----------------------------------------

TITLE: Match Aria Snapshot with Children and URL (Python)
DESCRIPTION: Shows how to use `to_match_aria_snapshot` with the new `/children` for strict matching and `/url` for asserting link URLs within an aria snapshot. Requires a Playwright `locator` object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_1

LANGUAGE: python
CODE:
```
expect(locator).to_match_aria_snapshot("""
  - list
    - /children: equal
    - listitem: Feature A
    - listitem:
      - link "Feature B":
        - /url: "https://playwright.dev"
""")
```

----------------------------------------

TITLE: Setting Locale and Timezone via Context Options (Python Sync)
DESCRIPTION: This synchronous Python snippet demonstrates setting the locale and timezone when creating a new browser context using `playwright.sync_api`. The `locale` and `timezone_id` parameters are passed to `browser.new_context`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_25

LANGUAGE: python
CODE:
```
```python sync
context = browser.new_context(
  locale='de-DE',
  timezone_id='Europe/Berlin',
)
```
```

----------------------------------------

TITLE: Injecting Initialization Script via Path (Python Async)
DESCRIPTION: Illustrates how to inject a pre-existing JavaScript file into all navigated pages/frames before their scripts run, using add_init_script in Playwright's async Python API. The path is resolved relative to the running script. Suitable for deterministic setup. Python async Playwright binding required.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_25

LANGUAGE: python async
CODE:
```
# in your playwright script, assuming the preload.js file is in same directory
await page.add_init_script(path="./preload.js")
```

----------------------------------------

TITLE: Monitoring JavaScript variables with async Python
DESCRIPTION: Demonstrates how to wait for a JavaScript variable to change using wait_for_function in async Python. The script sets a timer to change a variable and waits for that change to occur.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_112

LANGUAGE: python
CODE:
```
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = await webkit.launch()
    page = await browser.new_page()
    await page.evaluate("window.x = 0; setTimeout(() => { window.x = 100 }, 1000);")
    await page.wait_for_function("() => window.x > 0")
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())
```

----------------------------------------

TITLE: Handling Uncaught Page Errors with Playwright Events (Python Async)
DESCRIPTION: Registers a lambda callback with Playwright's async Python API to print uncaught page exceptions. The example shows setting up the event handler and navigating to a page that throws an error. Requires an async Playwright context. Outputs are printed to the terminal.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_10

LANGUAGE: python async
CODE:
```
# Log all uncaught errors to the terminal
page.on("pageerror", lambda exc: print(f"uncaught exception: {exc}"))

# Navigate to a page with an exception.
await page.goto("data:text/html,<script>throw new Error('test')<\/script>")
```

----------------------------------------

TITLE: Handling Uncaught Page Exceptions in Playwright (Python Sync)
DESCRIPTION: This synchronous Python snippet shows how to listen for the 'weberror' event on a Playwright context. A lambda function is registered as the event handler, which prints the uncaught exception's message using `web_error.error`. The `page.goto` command is used to navigate to a page designed to throw an error, thereby demonstrating the error handling mechanism in a synchronous context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-weberror.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
# Log all uncaught errors to the terminal
context.on("weberror", lambda web_error: print(f"uncaught exception: {web_error.error}"))

# Navigate to a page with an exception.
page.goto("data:text/html,<script>throw new Error('test')</script>")
```

----------------------------------------

TITLE: Using React Selector in Playwright Python
DESCRIPTION: React and Vue selectors allow selecting elements by its component name and/or property values. The syntax is very similar to attribute selectors and supports all attribute selector operators.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_50

LANGUAGE: Python
CODE:
```
page.locator("_react=SubmitButton[enabled=true]").click()
```

----------------------------------------

TITLE: Emulating Color Scheme in Playwright
DESCRIPTION: Demonstrates how to use the emulateMedia method to change the color scheme preference. It shows examples of setting the color scheme to 'dark' and checking the results using matchMedia.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_40

LANGUAGE: javascript
CODE:
```
await page.emulateMedia({ colorScheme: 'dark' });
await page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);
// → true
await page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);
// → false
```

LANGUAGE: java
CODE:
```
page.emulateMedia(new Page.EmulateMediaOptions().setColorScheme(ColorScheme.DARK));
page.evaluate("() => matchMedia('(prefers-color-scheme: dark)').matches");
// → true
page.evaluate("() => matchMedia('(prefers-color-scheme: light)').matches");
// → false
```

LANGUAGE: python
CODE:
```
await page.emulate_media(color_scheme="dark")
await page.evaluate("matchMedia('(prefers-color-scheme: dark)').matches")
# → True
await page.evaluate("matchMedia('(prefers-color-scheme: light)').matches")
# → False
```

LANGUAGE: csharp
CODE:
```
await page.EmulateMediaAsync(new() { ColorScheme = ColorScheme.Dark });
await page.EvaluateAsync("matchMedia('(prefers-color-scheme: dark)').matches");
// → true
await page.EvaluateAsync("matchMedia('(prefers-color-scheme: light)').matches");
// → false
```

----------------------------------------

TITLE: Using a Custom AxeBuilder Fixture in Java Playwright Tests
DESCRIPTION: This Java test class `HomepageTests` extends `AxeTestFixtures` to utilize the shared configuration. The test method `exampleUsingCustomFixture` calls the inherited `makeAxeBuilder()` fixture to get a pre-configured `AxeBuilder`. It then applies additional test-specific configurations (e.g., `include("#specific-element-under-test")`) before running the accessibility analysis with `analyze()` and asserting the results (expecting no violations after shared exclusions and specific inclusions). Requires Playwright, Axe core, JUnit, and the `AxeTestFixtures` class.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-java.md#2025-04-22_snippet_7

LANGUAGE: java
CODE:
```
public class HomepageTests extends AxeTestFixtures {
  @Test
  void exampleUsingCustomFixture() throws Exception {
    page.navigate("https://your-site.com/");

    AxeResults accessibilityScanResults = makeAxeBuilder()
      // Automatically uses the shared AxeBuilder configuration,
      // but supports additional test-specific configuration too
      .include("#specific-element-under-test")
      .analyze();

    assertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());
  }
}
```

----------------------------------------

TITLE: Configuring Test Execution Mode with Test.describe.configure in JavaScript
DESCRIPTION: Demonstrates how to configure the execution mode for tests using test.describe.configure. This example shows how to run tests in parallel.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_16

LANGUAGE: javascript
CODE:
```
// Run all the tests in the file concurrently using parallel workers.
test.describe.configure({ mode: 'parallel' });
test('runs in parallel 1', async ({ page }) => {});
test('runs in parallel 2', async ({ page }) => {});
```

----------------------------------------

TITLE: Using Playwright Clock API in Python
DESCRIPTION: Illustrates how to use the Playwright Clock API in Python to control time within tests. It shows methods like `install` to set an initial time, `pause_at` to pause time at a specific point, and `fast_forward` to advance time by a duration, useful for testing time-dependent features.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_9

LANGUAGE: python
CODE:
```
# Initialize clock with some time before the test time and let the page load
# naturally. `Date.now` will progress as the timers fire.
page.clock.install(time=datetime.datetime(2024, 2, 2, 8, 0, 0))
page.goto("http://localhost:3333")

# Pretend that the user closed the laptop lid and opened it again at 10am.
# Pause the time once reached that point.
page.clock.pause_at(datetime.datetime(2024, 2, 2, 10, 0, 0))

# Assert the page state.
expect(page.get_by_test_id("current-time")).to_have_text("2/2/2024, 10:00:00 AM")

# Close the laptop lid again and open it at 10:30am.
page.clock.fast_forward("30:00")
expect(page.get_by_test_id("current-time")).to_have_text("2/2/2024, 10:30:00 AM")
```

----------------------------------------

TITLE: Skipping Test Steps in Playwright v1.50
DESCRIPTION: Code example demonstrating how to skip execution of a test step using the new step.skip method.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
test('some test', async ({ page }) => {
  await test.step('before running step', async () => {
    // Normal step
  });

  await test.step.skip('not yet ready', async () => {
    // This step is skipped
  });

  await test.step('after running step', async () => {
    // This step still runs even though the previous one was skipped
  });
});
```

----------------------------------------

TITLE: Set Global Assertion Timeout in Playwright C# xUnit
DESCRIPTION: Configures the default timeout for all Playwright assertions globally within an xUnit test class in C#. This is achieved by calling `SetDefaultExpectTimeout` in the constructor of a class inheriting from `PageTest`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-csharp-java-python.md#_snippet_4

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using Microsoft.Playwright.Xunit;

namespace PlaywrightTests;

public class UnitTest1: PageTest
{
    UnitTest1()
    {
        SetDefaultExpectTimeout(10_000);
    }
    // ...
}
```

----------------------------------------

TITLE: Evaluating Handles on Frame in C#
DESCRIPTION: Demonstrates how to use the EvaluateHandleAsync method in C# to evaluate an expression and return a JSHandle for the window object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_27

LANGUAGE: csharp
CODE:
```
// Handle for the window object.
var aWindowHandle = await frame.EvaluateHandleAsync("() => Promise.resolve(window)");
```

----------------------------------------

TITLE: Grouping Actions in Trace Viewer using Python
DESCRIPTION: This snippet demonstrates how to group actions in the Playwright trace viewer using Python. It navigates to the Playwright website and clicks on the API link, with all actions between group and group_end shown as a group in the trace viewer.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_18

LANGUAGE: python
CODE:
```
# will be shown in the trace viewer as a group.
await page.context.tracing.group("Open Playwright.dev > API")
await page.goto("https://playwright.dev/")
await page.get_by_role("link", name="API").click()
await page.context.tracing.group_end()
```

----------------------------------------

TITLE: Testing Inactivity Logout - Playwright Python Async
DESCRIPTION: Presents Playwright's Python async approach to testing inactivity logout using controlled time. Clock installation, simulated user interaction, fast forwarding, and assertion are all covered. Relies on Playwright's async Python API, with dependencies and parameters similar to the JavaScript approach.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_10

LANGUAGE: python
CODE:
```
# Initial time does not matter for the test, so we can pick current time.
await page.clock.install()
await page.goto("http://localhost:3333")
# Interact with the page
await page.get_by_role("button").click()

# Fast forward time 5 minutes as if the user did not do anything.
# Fast forward is like closing the laptop lid and opening it after 5 minutes.
# All the timers due will fire once immediately, as in the real browser.
await page.clock.fast_forward("05:00")

# Check that the user was logged out automatically.
await expect(page.getByText("You have been logged out due to inactivity.")).toBeVisible()
```

----------------------------------------

TITLE: Setting Color Scheme Emulation for JavaScript Browser Context
DESCRIPTION: Defines the colorScheme option for browser contexts in JavaScript and Java. This emulates the prefers-color-scheme media feature with values 'light' or 'dark'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_63

LANGUAGE: js
CODE:
```
- `colorScheme` <null|[ColorScheme]<"light"|"dark"|"no-preference">>

Emulates [prefers-colors-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme) media feature, supported values are `'light'` and `'dark'`. See
[`method: Page.emulateMedia`] for more details. Passing `null` resets emulation to system defaults. Defaults to `'light'`.
```

----------------------------------------

TITLE: Appending Form Fields with Files in Java
DESCRIPTION: Demonstrates how to append multiple values to the same key in a FormData object in Java, including text fields and file uploads using both file paths and direct file payloads.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-formdata.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.options.FormData;
// ...
FormData form = FormData.create()
    // Only name and value are set.
    .append("firstName", "John")
    // Name and value are set, filename and Content-Type are inferred from the file path.
    .append("attachment", Paths.get("pic.jpg"))
    // Name, value, filename and Content-Type are set.
    .append("attachment", new FilePayload("table.csv", "text/csv", Files.readAllBytes(Paths.get("my-tble.csv"))));
page.request().post("http://localhost/submit", RequestOptions.create().setForm(form));
```

----------------------------------------

TITLE: Evaluating JSHandle in Java
DESCRIPTION: Demonstrates evaluating a JSHandle to get the innerText of a tweet's retweets element in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_6

LANGUAGE: java
CODE:
```
ElementHandle tweetHandle = page.querySelector(".tweet .retweets");
assertEquals("10 retweets", tweetHandle.evaluate("node => node.innerText"));
```

----------------------------------------

TITLE: Configuring Serial Mode for Dependent Tests in Playwright
DESCRIPTION: This JavaScript snippet shows how to use test.describe.configure to set up serial mode for a group of dependent tests in Playwright. This ensures tests run in order and are retried together if any test fails.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-retries-js.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
import { test } from '@playwright/test';

test.describe.configure({ mode: 'serial' });

test.beforeAll(async () => { /* ... */ });
test('first good', async ({ page }) => { /* ... */ });
test('second flaky', async ({ page }) => { /* ... */ });
test('third good', async ({ page }) => { /* ... */ });
```

----------------------------------------

TITLE: Passing arguments to waitForFunction in JavaScript
DESCRIPTION: Shows how to pass a selector argument to the waitForFunction predicate in JavaScript. The function waits until an element matching the selector appears in the DOM.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_115

LANGUAGE: javascript
CODE:
```
const selector = '.foo';
await page.waitForFunction(selector => !!document.querySelector(selector), selector);
```

----------------------------------------

TITLE: Customizing Playwright Options in JUnit
DESCRIPTION: Demonstrates how to customize Playwright options by implementing an OptionsFactory interface for configuring browser and context options.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/junit-java.md#2025-04-22_snippet_2

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.junit.Options;
import com.microsoft.playwright.junit.OptionsFactory;
import com.microsoft.playwright.junit.UsePlaywright;

@UsePlaywright(MyTest.CustomOptions.class)
public class MyTest {

  public static class CustomOptions implements OptionsFactory {
    @Override
    public Options getOptions() {
      return new Options()
          .setHeadless(false)
          .setContextOption(new Browser.NewContextOptions()
              .setBaseURL("https://github.com"))
          .setApiRequestOptions(new APIRequest.NewContextOptions()
              .setBaseURL("https://playwright.dev"));
    }
  }

  @Test
  public void testWithCustomOptions(Page page, APIRequestContext request) {
    page.navigate("/");
    assertThat(page).hasURL(Pattern.compile("github"));

    APIResponse response = request.get("/");
    assertTrue(response.text().contains("Playwright"));
  }
}
```

----------------------------------------

TITLE: Managing Color Scheme and Media in C#
DESCRIPTION: Creates browser contexts and pages with specific color schemes, and demonstrates how to update color scheme and media type during test execution using the Playwright C# client.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_62

LANGUAGE: csharp
CODE:
```
// Create context with dark mode
await using var context = await browser.NewContextAsync(new()
{
    ColorScheme = ColorScheme.Dark
});

// Create page with dark mode
var page = await browser.NewPageAsync(new()
{
    ColorScheme = ColorScheme.Dark
});

// Change color scheme for the page
await page.EmulateMediaAsync(new()
{
    ColorScheme = ColorScheme.Dark
});

// Change media for page
await page.EmulateMediaAsync(new()
{
    Media = Media.Print
});
```

----------------------------------------

TITLE: Sending POST Request with JSON Data in C#
DESCRIPTION: Example of sending a POST request with JSON data using Playwright's API request context in C#. The dictionary is passed as DataObject in the request options and automatically serialized to JSON.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_8

LANGUAGE: csharp
CODE:
```
var data = new Dictionary<string, object>() {
  { "firstName", "John" },
  { "lastName", "Doe" }
};
await request.PostAsync("https://example.com/api/createBook", new() { DataObject = data });
```

----------------------------------------

TITLE: Waiting for Load State After Button Click in Python (Sync)
DESCRIPTION: Demonstrates how to wait for a page to reach the 'load' state after a button click in Python using synchronous syntax. The method resolves after the 'load' event is fired.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_123

LANGUAGE: python
CODE:
```
page.get_by_role("button").click() # click triggers navigation.
page.wait_for_load_state() # the promise resolves after "load" event.
```

----------------------------------------

TITLE: Configuring Serial Mode for Tests (JavaScript)
DESCRIPTION: Sets up a test suite to run in serial mode, where tests are executed sequentially and dependent on each other's success.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { test, type Page } from '@playwright/test';

// Annotate entire file as serial.
test.describe.configure({ mode: 'serial' });

let page: Page;

test.beforeAll(async ({ browser }) => {
  page = await browser.newPage();
});

test.afterAll(async () => {
  await page.close();
});

test('runs first', async () => {
  await page.goto('https://playwright.dev/');
});

test('runs second', async () => {
  await page.getByText('Get Started').click();
});
```

----------------------------------------

TITLE: Watching viewport size changes in Java
DESCRIPTION: Shows how to use waitForFunction in Java to monitor viewport size changes. The function resolves when the window's inner width becomes less than 100 pixels after setting the viewport size.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_111

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      BrowserType webkit = playwright.webkit();
      Browser browser = webkit.launch();
      Page page = browser.newPage();
      page.setViewportSize(50,  50);
      page.waitForFunction("() => window.innerWidth < 100");
      browser.close();
    }
  }
}
```

----------------------------------------

TITLE: Running Multiple Specific Playwright Tests
DESCRIPTION: Command to run a set of Playwright test files using the filter flag with multiple class names.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_11

LANGUAGE: bash
CODE:
```
dotnet test --filter "ExampleTest1|ExampleTest2"
```

----------------------------------------

TITLE: Dumping Frame Tree using Playwright Async API in Python
DESCRIPTION: This asynchronous Python snippet demonstrates using Playwright's async API to launch Firefox, navigate to a website, and recursively dump the frame tree. It defines an async `run` function and a helper `dump_frame_tree` function that prints the name and URL of each frame, indenting child frames. The script uses `asyncio` to run the main async function.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    firefox = playwright.firefox
    browser = await firefox.launch()
    page = await browser.new_page()
    await page.goto("https://www.theverge.com")
    dump_frame_tree(page.main_frame, "")
    await browser.close()

def dump_frame_tree(frame, indent):
    print(indent + frame.name + '@' + frame.url)
    for child in frame.child_frames:
        dump_frame_tree(child, indent + "    ")

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())
```

----------------------------------------

TITLE: Testing Pinch Zoom Out - Playwright Python Sync
DESCRIPTION: A synchronous test function that navigates to Google Maps, handles the consent dialog, locates the map element, and repeatedly calls the `pinch` function to simulate a pinch-in gesture, effectively zooming out. It uses Playwright's page navigation, element location, and assertion capabilities. Requires a Playwright Page object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#_snippet_17

LANGUAGE: Python
CODE:
```
def test_pinch_in_gesture_to_zoom_out_the_map(page):
    page.goto('https://www.google.com/maps/place/@37.4117722,-122.0713234,15z', wait_until='commit')
    page.get_by_role('button', name='Keep using web').click()
    expect(page.get_by_role('button', name='Keep using web')).not_to_be_visible()
    met = page.locator('[data-test-id="met"]')
    for _ in range(5):
        pinch(met, {'deltaX': 40, 'direction': 'in'})
    page.screenshot(path="screenshot.png")
```

----------------------------------------

TITLE: Evaluating Expressions on Frame in Python (Async)
DESCRIPTION: Shows the asynchronous usage of the evaluate method in Python to execute a JavaScript expression within a frame and return its result.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_20

LANGUAGE: python
CODE:
```
result = await frame.evaluate("([x, y]) => Promise.resolve(x * y)", [7, 8])
print(result) # prints "56"
```

----------------------------------------

TITLE: Locating Elements by Alt Text
DESCRIPTION: Shows how to locate elements using the alt text attribute, commonly used for images.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_129

LANGUAGE: html
CODE:
```
<img alt='Playwright logo'>
```

LANGUAGE: javascript
CODE:
```
await page.getByAltText('Playwright logo').click();
```

----------------------------------------

TITLE: Passing Arguments to Frame.wait_for_function in Python (Async)
DESCRIPTION: This asynchronous Python example shows how to pass an argument to the predicate function in Frame.wait_for_function. It waits for an element matching a specific selector to appear in the document.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_42

LANGUAGE: python
CODE:
```
selector = ".foo"
await frame.wait_for_function("selector => !!document.querySelector(selector)", selector)
```

----------------------------------------

TITLE: Adding and Removing Locator Handlers in Playwright C#
DESCRIPTION: Provides an example of adding a locator handler using `Page.AddLocatorHandlerAsync` with options like `Times` and `NoWaitAfter`, and subsequently removing it with `Page.RemoveLocatorHandlerAsync`. Handlers are useful for automatically interacting with elements that might appear during test execution.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_16

LANGUAGE: C#
CODE:
```
var locator = Page.GetByText("This interstitial covers the button");
await Page.AddLocatorHandlerAsync(locator, async (overlay) =>
{
    await overlay.Locator("#close").ClickAsync();
}, new() { Times = 3, NoWaitAfter = true });
// Run your tests that can be interrupted by the overlay.
// ...
await Page.RemoveLocatorHandlerAsync(locator);
```

----------------------------------------

TITLE: Recording HAR with Automatic Zipping in Playwright
DESCRIPTION: Example of recording a HAR file with automatic zipping by using a .zip file extension in the recordHar option.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_45

LANGUAGE: javascript
CODE:
```
const context = await browser.newContext({
  recordHar: {
    path: 'github.har.zip',
  }
});
```

----------------------------------------

TITLE: Accessing Video Path (JavaScript)
DESCRIPTION: This snippet demonstrates how to access the path of the recorded video file associated with a page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
const path = await page.video().path();
```

----------------------------------------

TITLE: Setting Forced Colors Emulation for C# and Python Browser Context
DESCRIPTION: Defines the forcedColors option for browser contexts in C# and Python. This emulates the forced-colors media feature with values 'active', 'none', or 'null' to reset to system defaults.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_68

LANGUAGE: csharp
CODE:
```
- `forcedColors` <[ForcedColors]<"active"|"none"|"null">>

Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See [`method: Page.emulateMedia`] for more details. Passing `'null'` resets emulation to system defaults. Defaults to `'none'`.
```

----------------------------------------

TITLE: Using matchesAriaSnapshot with an inline snapshot in Java
DESCRIPTION: Java example of verifying accessibility structure using matchesAriaSnapshot (alias for toMatchAriaSnapshot). The method confirms that the body element contains the expected accessibility elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_42

LANGUAGE: java
CODE:
```
page.navigate("https://demo.playwright.dev/todomvc/");
assertThat(page.locator("body")).matchesAriaSnapshot("""
  - heading "todos"
  - textbox "What needs to be done?"
""");
```

----------------------------------------

TITLE: Configuring Service Workers in Playwright Test
DESCRIPTION: Sets the service workers policy for tests using the TestOptions.serviceWorkers property in the Playwright configuration file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_36

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    serviceWorkers: 'allow'
  },
});
```

----------------------------------------

TITLE: Evaluating Selectors on Frame in Python (Async)
DESCRIPTION: Demonstrates the async usage of eval_on_selector_all method in Python to evaluate a selector on a frame and return a result based on the number of matching elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_15

LANGUAGE: python
CODE:
```
divs_counts = await frame.eval_on_selector_all("div", "(divs, min) => divs.length >= min", 10)
```

----------------------------------------

TITLE: Evaluating JavaScript on All Matching Elements with Locator.evaluate_all in Python (Sync)
DESCRIPTION: Demonstrates how to execute JavaScript code on all matching elements using the evaluate_all method in Python sync mode. Passes an array of matching elements to the evaluation function.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_57

LANGUAGE: python
CODE:
```
locator = page.locator("div")
more_than_ten = locator.evaluate_all("(divs, min) => divs.length > min", 10)
```

----------------------------------------

TITLE: Emulating Offline Mode in Python (Sync)
DESCRIPTION: Creates a new browser context with offline mode enabled using the Playwright Python sync API. This allows testing how applications handle network unavailability.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_72

LANGUAGE: python
CODE:
```
context = browser.new_context(
  offline=True
)
```

----------------------------------------

TITLE: Capturing Aria Snapshots in Playwright C#
DESCRIPTION: Utilizes the C# API for Playwright to asynchronously retrieve the ARIA snapshot for a 'link' role element, providing a YAML accessibility representation for later validation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_24

LANGUAGE: C#
CODE:
```
await page.GetByRole(AriaRole.Link).AriaSnapshotAsync();
```

----------------------------------------

TITLE: C# Init Script Configuration
DESCRIPTION: Example of adding an initialization script in C# using Playwright
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_11

LANGUAGE: csharp
CODE:
```
// In your test, assuming the "preload.js" file is in the "mocks" directory.
await Page.AddInitScriptAsync(scriptPath: "mocks/preload.js");
```

----------------------------------------

TITLE: Recording Playwright Tests with Custom Setup in C#
DESCRIPTION: C# example demonstrating Playwright recording in a custom environment. The code launches Chrome in headed mode, creates a new browser context with route handling, and pauses the page to enable manual recording through codegen.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_32

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;

using var playwright = await Playwright.CreateAsync();
var chromium = playwright.Chromium;
// Make sure to run headed.
var browser = await chromium.LaunchAsync(new() { Headless = false });

// Setup context however you like.
var context = await browser.NewContextAsync(); // Pass any options
await context.RouteAsync("**/*", route => route.ContinueAsync());

// Pause the page, and start recording manually.
var page = await context.NewPageAsync();
await page.PauseAsync();
```

----------------------------------------

TITLE: Retrieving Video Path in Playwright - C#
DESCRIPTION: An example in C# for retrieving the path of a video recorded by Playwright when the recordVideo option is active. The method asynchronously fetches the path which will become accessible after the browser context is closed and the video fully recorded.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-video.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
Console.WriteLine(await page.Video.GetPathAsync());
```

----------------------------------------

TITLE: Override and Reset Base URL per File/Describe (TypeScript)
DESCRIPTION: Shows how to override the 'baseURL' for an entire test file using `test.use()` and how to reset it back to the config-defined value within a `test.describe` block by setting it to `undefined`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_20

LANGUAGE: TypeScript
CODE:
```
import { test } from '@playwright/test';

// Configure baseURL for this file.
test.use({ baseURL: 'https://playwright.dev/docs/intro' });

test('check intro contents', async ({ page }) => {
  // This test will use "https://playwright.dev/docs/intro" base url as defined above.
});

test.describe(() => {
  // Reset the value to a config-defined one.
  test.use({ baseURL: undefined });

  test('can navigate to intro from the home page', async ({ page }) => {
    // This test will use "https://playwright.dev" base url as defined in the config.
  });
});
```

----------------------------------------

TITLE: Recording Trace in Python (Async)
DESCRIPTION: Demonstrates how to programmatically record a trace using Python's async API. Includes browser launch, context creation, and trace configuration with screenshots and snapshots.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-java-python.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
browser = await chromium.launch()
context = await browser.new_context()

# Start tracing before creating / navigating a page.
await context.tracing.start(screenshots=True, snapshots=True, sources=True)

page = await context.new_page()
await page.goto("https://playwright.dev")

# Stop tracing and export it into a zip archive.
await context.tracing.stop(path = "trace.zip")
```

----------------------------------------

TITLE: Configure Global Locale in Playwright
DESCRIPTION: This snippet shows how to set a default locale globally for all tests by adding the 'locale' option to the 'use' property in the Playwright configuration file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#_snippet_8

LANGUAGE: TypeScript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    locale: 'en-GB'
  }
});
```

----------------------------------------

TITLE: Conditional Routing by HTTP Method (GET/POST) with Route.fallback - Python (Sync)
DESCRIPTION: Synchronous Playwright Python route handlers that differentiate by HTTP method. Each handler chooses fallback or processes the request, enabling clear separation of GET and POST logic in synchronous test environments.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_13

LANGUAGE: python
CODE:
```
# Handle GET requests.
def handle_get(route):
    if route.request.method != "GET":
        route.fallback()
        return
  # Handling GET only.
  # ...
```

----------------------------------------

TITLE: Comparing Test Status and Expected Status in Playwright JS
DESCRIPTION: This example demonstrates using the testInfo.status and testInfo.expectedStatus properties within an afterEach hook to determine if a test completed with the anticipated outcome (e.g., passed, failed, skipped). It logs a message if the actual status does not match the expected status. Requires @playwright/test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfo.md#_snippet_3

LANGUAGE: js
CODE:
```
import { test, expect } from '@playwright/test';

test.afterEach(async ({}, testInfo) => {
  if (testInfo.status !== testInfo.expectedStatus)
    console.log(`${testInfo.title} did not run as expected!`);
});
```

----------------------------------------

TITLE: Recording Multiple Trace Chunks (Python Sync)
DESCRIPTION: Shows how to record separate trace chunks synchronously in Python using `context.tracing.start_chunk()` and `context.tracing.stop_chunk()`. Global tracing must be active (`context.tracing.start()`). Each chunk captures intermediate actions and saves them to a specified file path.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_13

LANGUAGE: python
CODE:
```
context.tracing.start(screenshots=True, snapshots=True)
page = context.new_page()
page.goto("https://playwright.dev")

context.tracing.start_chunk()
page.get_by_text("Get Started").click()
# Everything between start_chunk and stop_chunk will be recorded in the trace.
context.tracing.stop_chunk(path = "trace1.zip")

context.tracing.start_chunk()
page.goto("http://example.com")
# Save a second trace file with different actions.
context.tracing.stop_chunk(path = "trace2.zip")
```

----------------------------------------

TITLE: Configuring JUnit Reporter in Playwright Config (JS/TS)
DESCRIPTION: Shows how to configure the JUnit reporter directly within the `playwright.config.ts` file, specifying the output file path using the `outputFile` option. This is an alternative to using environment variables.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_25

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: [['junit', { outputFile: 'results.xml' }]],
});
```

----------------------------------------

TITLE: Retrieving Request Timing with Playwright in Python (Synchronous)
DESCRIPTION: Illustrates synchronous event handling with Playwright in Python, waiting for a request to finish, navigating to a page, and then printing timing metrics. Requires Playwright and a page object. Uses a context manager without async. The timing data is printed after the 'requestfinished' event. Suitable for synchronous Playwright APIs.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_9

LANGUAGE: python
CODE:
```
with page.expect_event(\"requestfinished\") as request_info:\n    page.goto(\"http://example.com\")\nrequest = request_info.value\nprint(request.timing)
```

----------------------------------------

TITLE: Getting Document Handle in Playwright
DESCRIPTION: Examples demonstrating how to get a handle for the document object using a string expression with Page.evaluateHandle.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_57

LANGUAGE: javascript
CODE:
```
const aHandle = await page.evaluateHandle('document'); // Handle for the 'document'
```

LANGUAGE: java
CODE:
```
JSHandle aHandle = page.evaluateHandle("document"); // Handle for the "document".
```

LANGUAGE: python
CODE:
```
a_handle = await page.evaluate_handle("document") # handle for the "document"
```

LANGUAGE: csharp
CODE:
```
var docHandle = await page.EvaluateHandleAsync("document"); // Handle for the `document`
```

----------------------------------------

TITLE: Setting JUnit Output File via Environment Variable
DESCRIPTION: Demonstrates how to specify the output file name for the JUnit reporter using the `PLAYWRIGHT_JUNIT_OUTPUT_NAME` environment variable before running Playwright tests. This directs the report output to a file instead of stdout.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_24

LANGUAGE: bash
CODE:
```
PLAYWRIGHT_JUNIT_OUTPUT_NAME=results.xml npx playwright test --reporter=junit
```

LANGUAGE: batch
CODE:
```
set PLAYWRIGHT_JUNIT_OUTPUT_NAME=results.xml
npx playwright test --reporter=junit
```

LANGUAGE: powershell
CODE:
```
$env:PLAYWRIGHT_JUNIT_OUTPUT_NAME="results.xml"
npx playwright test --reporter=junit
```

----------------------------------------

TITLE: Dispatching Events with Playwright Frame - Python
DESCRIPTION: Provides Python examples for dispatching events on frame elements using Playwright. Supports both asynchronous and synchronous execution of event dispatch with configuration of event properties such as data transfer.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_7

LANGUAGE: Python
CODE:
```
await frame.dispatch_event("button#submit", "click")
```

LANGUAGE: Python
CODE:
```
data_transfer = await frame.evaluate_handle("new DataTransfer()")
await frame.dispatch_event("#source", "dragstart", { "dataTransfer": data_transfer })
```

LANGUAGE: Python
CODE:
```
frame.dispatch_event("button#submit", "click")
```

LANGUAGE: Python
CODE:
```
data_transfer = frame.evaluate_handle("new DataTransfer()")
frame.dispatch_event("#source", "dragstart", { "dataTransfer": data_transfer })
```

----------------------------------------

TITLE: Setting Locale and Timezone via Context Options (C#)
DESCRIPTION: This C# snippet shows setting the `Locale` and `TimezoneId` properties when creating a new browser context using `Microsoft.Playwright`. These properties are set on the options object passed to `NewContextAsync`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_26

LANGUAGE: csharp
CODE:
```
```csharp
await using var context = await browser.NewContextAsync(new()
{
    Locale = "de-DE",
    TimezoneId = "Europe/Berlin"
});
```
```

----------------------------------------

TITLE: Using XPath Locator in Playwright
DESCRIPTION: XPath locators allow finding elements using XPath expressions. This example demonstrates clicking on a button using XPath selector.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
await page.locator('xpath=//button').click();
```

LANGUAGE: java
CODE:
```
page.locator("xpath=//button").click();
```

LANGUAGE: python
CODE:
```
await page.locator("xpath=//button").click()
```

LANGUAGE: python
CODE:
```
page.locator("xpath=//button").click()
```

LANGUAGE: csharp
CODE:
```
await page.Locator("xpath=//button").ClickAsync();
```

----------------------------------------

TITLE: Evaluating Selectors on Frame in JavaScript
DESCRIPTION: Demonstrates how to use the evalOnSelectorAll method to evaluate a selector on a frame and return a boolean result based on the number of matching elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
const divsCounts = await frame.$$eval('div', (divs, min) => divs.length >= min, 10);
```

----------------------------------------

TITLE: Playwright Proxy Configuration in Node.js
DESCRIPTION: This snippet configures a proxy server for tests using Playwright. The proxy settings include a server address, username, and password. It requires Node.js and Playwright to be configured in conjunction with an active proxy server.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-js.md#2025-04-22_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { defineConfig } from '@playwright/test';
export default defineConfig({
  use: {
    proxy: {
      server: 'http://my-proxy:8080',
      username: 'user',
      password: 'secret'
    },
  }
});
```

----------------------------------------

TITLE: Teardown Configuration in Playwright Config
DESCRIPTION: Configuration example showing how to set up project teardown after all dependent projects have run.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  testDir: './tests',
  // ...
  projects: [
    {
      name: 'setup db',
      testMatch: /global\.setup\.ts/,
      teardown: 'cleanup db',
    },
    {
      name: 'cleanup db',
      testMatch: /global\.teardown\.ts/,
    },
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
      dependencies: ['setup db'],
    },
  ]
});
```

----------------------------------------

TITLE: Asserting Element CSS Property with Playwright TypeScript
DESCRIPTION: Asserts that the element located by the locator has a specific CSS property. This assertion automatically retries until the condition is met or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_19

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toHaveCSS()
```

----------------------------------------

TITLE: Exposing Page URL Using Python Async in Playwright
DESCRIPTION: Asynchronous Python example demonstrating page URL exposure through context binding. Includes async context management and event handling.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_12

LANGUAGE: python
CODE:
```
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = await webkit.launch(headless=False)
    context = await browser.new_context()
    await context.expose_binding("pageURL", lambda source: source["page"].url)
    page = await context.new_page()
    await page.set_content("""
    <script>
      async function onClick() {
        document.querySelector('div').textContent = await window.pageURL();
      }
    </script>
    <button onclick="onClick()">Click me</button>
    <div></div>
    """)
    await page.get_by_role("button").click()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())
```

----------------------------------------

TITLE: Using the BrowserName Fixture for Test Annotations
DESCRIPTION: Demonstrates how to use the browserName fixture to conditionally skip tests based on the browser being used. Useful for browser-specific test annotations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-fixtures.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
test('skip this test in Firefox', async ({ page, browserName }) => {
  test.skip(browserName === 'firefox', 'Still working on it');
  // ...
});
```

----------------------------------------

TITLE: Inserting Text with Keyboard.insert_text in Playwright (Python Async)
DESCRIPTION: Demonstrates using `page.keyboard.insert_text` in asynchronous Python to dispatch an `input` event with the specified text ('嗨'). This method bypasses `keydown`, `keyup`, and `keypress` events and is useful for directly inserting text, including non-ASCII characters. Modifier keys do not affect this method.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_17

LANGUAGE: python
CODE:
```
```python async
await page.keyboard.insert_text("嗨")
```
```

----------------------------------------

TITLE: Evaluating JavaScript with Locator.evaluate in Java
DESCRIPTION: Shows how to execute JavaScript code on a matched element using Locator.evaluate in Java. Demonstrates passing arguments to the evaluation function.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_50

LANGUAGE: java
CODE:
```
Object result = page.getByTestId("myId").evaluate("(element, [x, y]) => {\n" +
  "  return element.textContent + ' ' + x * y;\n" +
  "}", Arrays.asList(7, 8));
System.out.println(result); // prints "myId text 56"
```

----------------------------------------

TITLE: Fetch Response URL
DESCRIPTION: Use the `Response.url` method to access the URL of the response, useful for debugging and verifying redirection paths. It provides a simple string output of the URL.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_17

LANGUAGE: javascript
CODE:
```
const url = response.url();\nconsole.log('URL:', url);
```

----------------------------------------

TITLE: Typing Text with Playwright Keyboard in Python (Sync)
DESCRIPTION: Shows how to use the Keyboard.type method in Python with synchronous syntax for both instant and delayed typing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_28

LANGUAGE: python
CODE:
```
page.keyboard.type("Hello") # types instantly
page.keyboard.type("World", delay=100) # types slower, like a user
```

----------------------------------------

TITLE: Typing Text with Playwright Keyboard in Java
DESCRIPTION: Shows how to use the Keyboard.type method in Java to input text instantly and with a delay to simulate user typing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_26

LANGUAGE: java
CODE:
```
// Types instantly
page.keyboard().type("Hello");
// Types slower, like a user
page.keyboard().type("World", new Keyboard.TypeOptions().setDelay(100));
```

----------------------------------------

TITLE: Running Tests in Parallel
DESCRIPTION: Command to run tests in parallel using multiple processes with pytest-xdist.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
pytest --numprocesses 2
```

----------------------------------------

TITLE: Updating Svelte Components in Playwright Tests
DESCRIPTION: Shows how to update props, slots, and events of a mounted Svelte component in Playwright component tests. This allows testing component reactivity to changing inputs.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_19

LANGUAGE: javascript
CODE:
```
import { test } from '@playwright/experimental-ct-svelte';

test('update', async ({ mount }) => {
  const component = await mount(Component);
  await component.update({
    props: { msg: 'greetings' },
    on: { click() {} },
    slots: { default: 'Child' }
  });
});
```

----------------------------------------

TITLE: Clearing Browser Permissions in JavaScript
DESCRIPTION: Revokes all previously granted permissions for the browser context using the Playwright JavaScript library. This removes any permission settings that were applied earlier.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_38

LANGUAGE: javascript
CODE:
```
// Library
await context.clearPermissions();
```

----------------------------------------

TITLE: Setting HTTP Authentication Credentials for Browser Context
DESCRIPTION: Defines the httpCredentials option for browser contexts. This allows setting username and password for HTTP authentication, with optional origin restriction.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_62

LANGUAGE: js
CODE:
```
- `httpCredentials` <[Object]>
  - `username` <[string]>
  - `password` <[string]>
  - `origin` ?<[string]> Restrain sending http credentials on specific origin (scheme://host:port).
  - `send` ?<[HttpCredentialsSend]<"unauthorized"|"always">> This option only applies to the requests sent from corresponding [APIRequestContext] and does not affect requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.

Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication).
If no origin is specified, the username and password are sent to any servers upon unauthorized responses.
```

----------------------------------------

TITLE: Injecting Initialization Script via Path (C#)
DESCRIPTION: Calls the AddInitScriptAsync method in Playwright for C# to inject an initialization script file into every new page/frame. The preload.js file must exist at the specified path. Used to ensure consistent test setup. C# Playwright bindings are required.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_27

LANGUAGE: csharp
CODE:
```
await Page.AddInitScriptAsync(scriptPath: "./preload.js");
```

----------------------------------------

TITLE: Extract Comprehensive HTTP Headers as Array
DESCRIPTION: The `Response.headersArray` method returns headers in an array structure, allowing inspection of individual entries, even with duplicates like `Set-Cookie`. Requires async context to execute.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
async function headersArray() {\n  const headers = await response.headersArray();\n  console.log(headers);\n}
```

----------------------------------------

TITLE: Passing Arguments to Frame.WaitForFunctionAsync in C#
DESCRIPTION: This C# example shows how to pass an argument to the predicate function in Frame.WaitForFunctionAsync. It waits for an element matching a specific selector to appear in the document.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_44

LANGUAGE: csharp
CODE:
```
var selector = ".foo";
await page.MainFrame.WaitForFunctionAsync("selector => !!document.querySelector(selector)", selector);
```

----------------------------------------

TITLE: Intercepting WebSocket Messages with Playwright in Python (Asynchronous)
DESCRIPTION: An asynchronous setup using Playwright to intercept and modify messages before they're relayed to a WebSocket server. Python environment setup with Playwright is necessary.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_12

LANGUAGE: python
CODE:
```
def message_handler(server: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    server.send("request2")
  else:
    server.send(message)

def handler(ws: WebSocketRoute):
  server = ws.connect_to_server()
  ws.on_message(lambda message: message_handler(server, message))

await page.route_web_socket("/ws", handler)
```

----------------------------------------

TITLE: Dispatching Events with Playwright Locator
DESCRIPTION: Shows how to programmatically dispatch events on elements using Playwright's dispatchEvent method, including basic events and complex events with custom initialization.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_38

LANGUAGE: javascript
CODE:
```
await locator.dispatchEvent('click');

const dataTransfer = await page.evaluateHandle(() => new DataTransfer());
await locator.dispatchEvent('dragstart', { dataTransfer });
```

LANGUAGE: java
CODE:
```
locator.dispatchEvent("click");

JSHandle dataTransfer = page.evaluateHandle("() => new DataTransfer()");
Map<String, Object> arg = new HashMap<>();
arg.put("dataTransfer", dataTransfer);
locator.dispatchEvent("dragstart", arg);
```

LANGUAGE: python
CODE:
```
await locator.dispatch_event("click")

data_transfer = await page.evaluate_handle("new DataTransfer()")
await locator.dispatch_event("#source", "dragstart", {"dataTransfer": data_transfer})
```

----------------------------------------

TITLE: Selecting Options from Dropdown using Frame.selectOption in JavaScript
DESCRIPTION: Examples of how to select options from a dropdown element using the Frame.selectOption method in JavaScript. Shows single selection by value/label or multiple selections.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_30

LANGUAGE: javascript
CODE:
```
// Single selection matching the value or label
frame.selectOption('select#colors', 'blue');

// single selection matching both the value and the label
frame.selectOption('select#colors', { label: 'Blue' });

// multiple selection
frame.selectOption('select#colors', 'red', 'green', 'blue');
```

----------------------------------------

TITLE: Handling Uncaught Page Exceptions in Playwright (JavaScript)
DESCRIPTION: This snippet demonstrates how to listen for the 'weberror' event on a Playwright BrowserContext in JavaScript. It registers an event listener that logs the message of any unhandled exception caught within the page's context to the console using `webError.error()`. It also includes code to navigate to a page specifically designed to throw an error, triggering the event listener.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-weberror.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
// Log all uncaught errors to the terminal
context.on('weberror', webError => {
  console.log(`Uncaught exception: "${webError.error()}"`);
});

// Navigate to a page with an exception.
await page.goto('data:text/html,<script>throw new Error("Test")</script>');
```

----------------------------------------

TITLE: Setting Viewport and High-DPI via Context/Page (Java)
DESCRIPTION: This Java snippet demonstrates using the Playwright Java library for: creating a context with a specific viewport using `setViewportSize`, resizing the viewport for an individual page using `page.setViewportSize`, and creating a context that emulates a high-DPI screen by setting both `setViewportSize` and `setDeviceScaleFactor`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_11

LANGUAGE: java
CODE:
```
```java
// Create context with given viewport
BrowserContext context = browser.newContext(new Browser.NewContextOptions()
  .setViewportSize(1280, 1024));

// Resize viewport for individual page
page.setViewportSize(1600, 1200);

// Emulate high-DPI
BrowserContext context = browser.newContext(new Browser.NewContextOptions()
  .setViewportSize(2560, 1440)
  .setDeviceScaleFactor(2));
```
```

----------------------------------------

TITLE: Asserting Banner ARIA Snapshot using Playwright Python (Sync)
DESCRIPTION: This Python snippet shows the synchronous usage of ARIA snapshot testing. It navigates to 'https://playwright.dev/', selects the 'banner' element using a query selector, and asserts its accessibility tree against the provided YAML snapshot template using `to_match_aria_snapshot`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
```python sync
page.goto('https://playwright.dev/')
expect(page.query_selector('banner')).to_match_aria_snapshot("""
  - banner:
    - heading /Playwright enables reliable end-to-end/ [level=1]
    - link "Get started"
    - link "Star microsoft/playwright on GitHub"
    - link /[\\d]+k\\+ stargazers on GitHub/
""")
```
```

----------------------------------------

TITLE: Setting Viewport and High-DPI via Context/Page (C#)
DESCRIPTION: This C# snippet shows using `Microsoft.Playwright` for: creating a context with a specific viewport using `ViewportSize`, resizing a page's viewport with `page.SetViewportSizeAsync`, and creating a high-DPI context using `ViewportSize` and `DeviceScaleFactor` options in `NewContextAsync`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_14

LANGUAGE: csharp
CODE:
```
```csharp
// Create context with given viewport
await using var context = await browser.NewContextAsync(new()
{
    ViewportSize = new ViewportSize() { Width = 1280, Height = 1024 }
});

// Resize viewport for individual page
await page.SetViewportSizeAsync(1600, 1200);

// Emulate high-DPI
await using var context = await browser.NewContextAsync(new()
{
    ViewportSize = new ViewportSize() { Width = 2560, Height = 1440 },
    DeviceScaleFactor = 2
});
```
```

----------------------------------------

TITLE: Waiting for Image Elements Across Multiple URLs in C#
DESCRIPTION: This snippet demonstrates how to use Frame.WaitForSelectorAsync to wait for and retrieve image elements across multiple URLs in a Playwright script using C#.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_49

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using System;
using System.Threading.Tasks;

class FrameExamples
{
    public static async Task Main()
    {
        using var playwright = await Playwright.CreateAsync();
        await using var browser = await playwright.Chromium.LaunchAsync();
        var page = await browser.NewPageAsync();

        foreach (var currentUrl in new[] { "https://www.google.com", "https://bbc.com" })
        {
            await page.GotoAsync(currentUrl);
            element = await page.MainFrame.WaitForSelectorAsync("img");
            Console.WriteLine($"Loaded image: {await element.GetAttributeAsync("src")}");
        }
    }
}
```

----------------------------------------

TITLE: Using Page.evalOnSelectorAll in Java
DESCRIPTION: Example of using the evalOnSelectorAll method in Java to evaluate expressions on all elements matching a selector. This method finds all matching elements and passes them as an array to the provided JavaScript expression.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_47

LANGUAGE: java
CODE:
```
boolean divCounts = (boolean) page.evalOnSelectorAll("div", "(divs, min) => divs.length >= min", 10);
```

----------------------------------------

TITLE: Using expect_event with sync context in Python
DESCRIPTION: Demonstrates using Python's synchronous context manager to wait for a framenavigated event while performing an action. The function returns the navigation event data after completion.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_109

LANGUAGE: python
CODE:
```
with page.expect_event("framenavigated") as event_info:
    page.get_by_role("button")
frame = event_info.value
```

----------------------------------------

TITLE: Emulating Offline Network in Browser Context
DESCRIPTION: Defines the offline option for browser contexts. This allows emulating a disconnected network state, defaulting to false.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_61

LANGUAGE: js
CODE:
```
- `offline` <[boolean]>

Whether to emulate network being offline. Defaults to `false`. Learn more about [network emulation](../emulation.md#offline).
```

----------------------------------------

TITLE: Configuring Drone CI for Playwright Tests (JavaScript)
DESCRIPTION: This YAML configuration sets up Drone CI to run Playwright tests using the official Playwright Docker image for JavaScript projects. It defines a single step that runs the Playwright tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_40

LANGUAGE: yml
CODE:
```
kind: pipeline
name: default
type: docker

steps:
  - name: test
    image: mcr.microsoft.com/playwright:v%%VERSION%%-noble
    commands:
      - npx playwright test
```

----------------------------------------

TITLE: Running Playwright Codegen in C#
DESCRIPTION: This PowerShell command launches the Playwright code generator for a specified URL in a C# environment, storing interactions to construct tests. Requires Playwright setup in C#, with an optional URL to initiate testing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen-intro.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
pwsh bin/Debug/net8.0/playwright.ps1 codegen demo.playwright.dev/todomvc
```

----------------------------------------

TITLE: Waiting for Specific URL After Click in C#
DESCRIPTION: Demonstrates how to explicitly wait for navigation to a specific URL pattern after clicking an element in C#.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_14

LANGUAGE: csharp
CODE:
```
await page.GetByText("Click me").ClickAsync();
await page.WaitForURL("**/login");
```

----------------------------------------

TITLE: Event Action for Wait For Event (C#)
DESCRIPTION: Specifies the action that triggers the event when waiting for an event in C#. This action is executed to generate the event being waited for.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_93

LANGUAGE: csharp
CODE:
```
- `action` <[Func<Task>]>
```

----------------------------------------

TITLE: Adding and Removing Locator Handlers in Playwright Java
DESCRIPTION: Demonstrates how to add a locator handler using page.addLocatorHandler to automatically handle elements like overlays, specifying options like setTimes and setNoWaitAfter. It also shows how to remove the handler later using page.removeLocatorHandler. The handler function receives the triggering locator as an argument.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_15

LANGUAGE: java
CODE:
```
Locator locator = page.getByText("This interstitial covers the button");
page.addLocatorHandler(locator, overlay -> {
  overlay.locator("#close").click();
}, new Page.AddLocatorHandlerOptions().setTimes(3).setNoWaitAfter(true));
// Run your tests that can be interrupted by the overlay.
// ...
page.removeLocatorHandler(locator);
```

----------------------------------------

TITLE: Creating Browser Context with Geolocation in Python (Async)
DESCRIPTION: Creates a new browser context with geolocation settings and permissions using the Playwright Python async API. This sets up the browser environment to emulate a specific geographic location.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_47

LANGUAGE: python
CODE:
```
context = await browser.new_context(
  geolocation={"longitude": 41.890221, "latitude": 12.492348},
  permissions=["geolocation"]
)
```

----------------------------------------

TITLE: Using Label-to-Control Retargeting for Input Fields
DESCRIPTION: Playwright can automatically target the associated input control when you interact with a label element. This example demonstrates filling a password field by targeting its label.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
// Fill the input by targeting the label.
await page.getByText('Password').fill('secret');
```

LANGUAGE: java
CODE:
```
// Fill the input by targeting the label.
page.getByText("Password").fill("secret");
```

LANGUAGE: python
CODE:
```
# Fill the input by targeting the label.
await page.get_by_text("Password").fill("secret")
```

LANGUAGE: python
CODE:
```
# Fill the input by targeting the label.
page.get_by_text("Password").fill("secret")
```

LANGUAGE: csharp
CODE:
```
// Fill the input by targeting the label.
await page.GetByText("Password").FillAsync("secret");
```

----------------------------------------

TITLE: Interacting with an Element using ElementHandle (Stale Potential) in JavaScript
DESCRIPTION: Shows finding an element using `page.$` to get an [ElementHandle] and performing actions (hover, click) in JavaScript. This method can lead to errors if the element becomes stale due to page updates.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
```js
const handle = await page.$('text=Submit');
// ...
await handle.hover();
await handle.click();
```
```

----------------------------------------

TITLE: Waiting for Specific URL After Click in Java
DESCRIPTION: Demonstrates how to explicitly wait for navigation to a specific URL pattern after clicking an element in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_11

LANGUAGE: java
CODE:
```
page.getByText("Click me").click();
page.waitForURL("**/login");
```

----------------------------------------

TITLE: Launching a Browser with Custom Arguments Using Playwright Java
DESCRIPTION: Illustrates launching a browser and omitting default launch arguments, such as '--mute-audio', using Playwright's Java API. Requires Java Playwright bindings. Main input is configuration options; output is the browser instance. Only recognized options will apply.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_11

LANGUAGE: java
CODE:
```
// Or \"firefox\" or \"webkit\".\nBrowser browser = chromium.launch(new BrowserType.LaunchOptions()\n  .setIgnoreDefaultArgs(Arrays.asList(\"--mute-audio\")));
```

----------------------------------------

TITLE: Adding and Removing Event Listeners in Playwright (Sync Python)
DESCRIPTION: Illustrates adding event listeners using `page.on` and removing them using `page.remove_listener` in synchronous Playwright for Python. Separate functions handle 'request' and 'requestfinished' events. The 'requestfinished' listener is removed by passing the event name and the function reference.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_13

LANGUAGE: python
CODE:
```
```python sync
def print_request_sent(request):
  print("Request sent: " + request.url)

def print_request_finished(request):
  print("Request finished: " + request.url)

page.on("request", print_request_sent)
page.on("requestfinished", print_request_finished)
page.goto("https://wikipedia.org")

page.remove_listener("requestfinished", print_request_finished)
page.goto("https://www.openstreetmap.org/")
```
```

----------------------------------------

TITLE: Evaluating Window Handle in Playwright
DESCRIPTION: Examples showing how to get a handle for the window object using Page.evaluateHandle across different languages. Returns a JSHandle that resolves to the window object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_56

LANGUAGE: javascript
CODE:
```
const aWindowHandle = await page.evaluateHandle(() => Promise.resolve(window));
```

LANGUAGE: java
CODE:
```
JSHandle aWindowHandle = page.evaluateHandle("() => Promise.resolve(window)");
```

LANGUAGE: python
CODE:
```
a_window_handle = await page.evaluate_handle("Promise.resolve(window)")
a_window_handle # handle for the window object.
```

LANGUAGE: csharp
CODE:
```
var aWindowHandle = await page.EvaluateHandleAsync("() => Promise.resolve(window)");
```

----------------------------------------

TITLE: Handling JSON WebSocket Messages with Playwright in JavaScript
DESCRIPTION: Demonstrates handling JSON messages over a WebSocket connection using Playwright in JavaScript. Parses incoming messages and responds based on message content. Requires JSON support in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
await page.routeWebSocket('wss://example.com/ws', ws => {
  ws.onMessage(message => {
    const json = JSON.parse(message);
    if (json.request === 'question')
      ws.send(JSON.stringify({ response: 'answer' }));
  });
});
```

----------------------------------------

TITLE: Recording Trace in Python (Sync)
DESCRIPTION: Shows how to record a trace using Python's synchronous API. Includes browser launch, context creation, and trace configuration.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-java-python.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
browser = chromium.launch()
context = browser.new_context()

# Start tracing before creating / navigating a page.
context.tracing.start(screenshots=True, snapshots=True, sources=True)

page = context.new_page()
page.goto("https://playwright.dev")

# Stop tracing and export it into a zip archive.
context.tracing.stop(path = "trace.zip")
```

----------------------------------------

TITLE: Pulling Playwright Docker Image for Python
DESCRIPTION: Command to pull the Playwright Docker image for Python applications from Microsoft Artifact Registry.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
docker pull mcr.microsoft.com/playwright/python:v%%VERSION%%-noble
```

----------------------------------------

TITLE: Recording HAR File in C#
DESCRIPTION: C# implementation for recording network traffic to a HAR file using Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_13

LANGUAGE: csharp
CODE:
```
// Get the response from the HAR file
await page.RouteFromHARAsync("./hars/fruit.har", new () {
  Url = "*/**/api/v1/fruits",
  Update = true,
});

// Go to the page
await page.GotoAsync("https://demo.playwright.dev/api-mocking");

// Assert that the fruit is visible
await Expect(page.GetByText("Strawberry")).ToBeVisibleAsync();
```

----------------------------------------

TITLE: Evaluating JavaScript with Locator.EvaluateAsync in C#
DESCRIPTION: Demonstrates how to execute JavaScript code on a matched element using the EvaluateAsync method in C#. Includes passing arguments to the evaluation function.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_53

LANGUAGE: csharp
CODE:
```
var result = await page.GetByTestId("myId").EvaluateAsync<string>("(element, [x, y]) => element.textContent + ' ' + x * y)", new[] { 7, 8 });
Console.WriteLine(result); // prints "myId text 56"
```

----------------------------------------

TITLE: Testing with Chrome Extensions - JavaScript
DESCRIPTION: This test script defines functions to validate that a Chrome extension is affecting web pages as expected. It checks for specific text changes made by an extension, utilizing earlier fixture setups and Playwright's testing capabilities.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/chrome-extensions-js-python.md#2025-04-22_snippet_5

LANGUAGE: JavaScript
CODE:
```
import { test, expect } from './fixtures';

test('example test', async ({ page }) => {
  await page.goto('https://example.com');
  await expect(page.locator('body')).toHaveText('Changed by my-extension');
});

test('popup page', async ({ page, extensionId }) => {
  await page.goto(`chrome-extension://${extensionId}/popup.html`);
  await expect(page.locator('body')).toHaveText('my-extension popup');
});
```

----------------------------------------

TITLE: Using ControlOrMeta Modifier in Playwright Python
DESCRIPTION: Demonstrates the use of the `ControlOrMeta` modifier key in Playwright Python for keyboard actions. This modifier automatically maps to `Meta` on macOS and `Control` on Windows/Linux, providing a cross-platform way to simulate common shortcuts like 'Save' (Control+S or Meta+S).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_11

LANGUAGE: python
CODE:
```
# Press the common keyboard shortcut Control+S or Meta+S to trigger a "Save" operation.
page.keyboard.press("ControlOrMeta+S")
```

----------------------------------------

TITLE: Disabling Specific Accessibility Rules with axe-core and Playwright - JavaScript
DESCRIPTION: This example shows how to disable specific accessibility rules with AxeBuilder.disableRules when certain rules are met with preexisting violations. The scan is performed on a particular page after disabling the 'duplicate-id' rule, and asserts that no violations remain except those intentionally excluded. The code depends on Playwright and @axe-core/playwright; rule IDs are passed as an array.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_5

LANGUAGE: js
CODE:
```
test('should not have any accessibility violations outside of rules with known issues', async ({
  page,
}) => {
  await page.goto('https://your-site.com/page-with-known-issues');

  const accessibilityScanResults = await new AxeBuilder({ page })
      .disableRules(['duplicate-id'])
      .analyze();

  expect(accessibilityScanResults.violations).toEqual([]);
});
```

----------------------------------------

TITLE: Using Playwright Asynchronously (Python)
DESCRIPTION: This code block initializes Playwright asynchronously, launches a Chromium browser instance, creates a new browser context emulating a 'Pixel 7' device, opens a new page within that context, calls a hypothetical test function, and finally closes the browser.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#_snippet_6

LANGUAGE: Python
CODE:
```
async with async_playwright() as p:
    browser = await p.chromium.launch()
    context = await browser.new_context(**p.devices['Pixel 7'])
    page = await context.new_page()
    await test_pan_gesture_to_move_the_map(page)
    await browser.close()
```

----------------------------------------

TITLE: Setting Color Scheme in Playwright Tests
DESCRIPTION: Example showing how to set the preferred color scheme for pages (dark or light mode), which affects CSS media queries and the color-scheme meta tag.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    colorScheme: 'dark',
  },
});
```

----------------------------------------

TITLE: Exposing SHA256 Function to BrowserContext in Java
DESCRIPTION: This Java example shows how to expose a SHA256 hashing function to all pages in a browser context using Playwright. It creates a new context, exposes the function, and then uses it in a page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_16

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.*;

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      BrowserType webkit = playwright.webkit();
      Browser browser = webkit.launch(new BrowserType.LaunchOptions().setHeadless(false));
      BrowserContext context = browser.newContext();
      context.exposeFunction("sha256", args -> {
        String text = (String) args[0];
        MessageDigest crypto;
        try {
          crypto = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
          return null;
        }
        byte[] token = crypto.digest(text.getBytes(StandardCharsets.UTF_8));
        return Base64.getEncoder().encodeToString(token);
      });
      Page page = context.newPage();
      page.setContent("<script>\n" +
        "  async function onClick() {\n" +
        "    document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');\n" +
        "  }\n" +
        "</script>\n" +
        "<button onclick=\"onClick()\">Click me</button>\n" +
        "<div></div>\n");
      page.getByRole(AriaRole.BUTTON).click();
    }
  }
}
```

----------------------------------------

TITLE: Running Single Test File
DESCRIPTION: Command to run a specific test file by providing the file name.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
pytest test_login.py
```

----------------------------------------

TITLE: Mocking WebSocket Communication with Playwright Java
DESCRIPTION: Provides a basic example of using `page.routeWebSocket` in Playwright Java to intercept and mock WebSocket messages. It sets up a route for `/ws` that listens for a "request" message and sends back a "response".
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_7

LANGUAGE: java
CODE:
```
page.routeWebSocket("/ws", ws -> {
  ws.onMessage(frame -> {
    if ("request".equals(frame.text()))
      ws.send("response");
  });
});
```

----------------------------------------

TITLE: Creating Pre-configured Expect Instances with expect.configure
DESCRIPTION: Shows how to create customized expect instances with specific configuration for timeouts and soft assertions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_27

LANGUAGE: javascript
CODE:
```
const slowExpect = expect.configure({ timeout: 10000 });
await slowExpect(locator).toHaveText('Submit');

// Always do soft assertions.
const softExpect = expect.configure({ soft: true });
```

----------------------------------------

TITLE: Configuring Browser Options via CLI
DESCRIPTION: Command line configuration for customizing browser launch options.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-csharp.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
dotnet test -- Playwright.BrowserName=chromium Playwright.LaunchOptions.Headless=false Playwright.LaunchOptions.Channel=msedge
```

----------------------------------------

TITLE: Excluding Elements from Accessibility Scans
DESCRIPTION: Example of how to exclude specific elements from accessibility scanning when dealing with known issues.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-java.md#2025-04-22_snippet_3

LANGUAGE: java
CODE:
```
AxeResults accessibilityScanResults = new AxeBuilder(page)
  .exclude(Arrays.asList("#element-with-known-issue"))
  .analyze();

AssertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());
```

----------------------------------------

TITLE: Triggering Select-All Keyboard Shortcut in Playwright (Python Async)
DESCRIPTION: This asynchronous Python snippet shows how to simulate the 'Select All' keyboard shortcut (Ctrl+A or Cmd+A) using Playwright's `page.keyboard.press` method. The 'ControlOrMeta' modifier automatically resolves to 'Control' on Windows/Linux and 'Meta' (Command) on macOS.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_12

LANGUAGE: python
CODE:
```
```python async
await page.keyboard.press("ControlOrMeta+A")
```
```

----------------------------------------

TITLE: Waiting for Navigation After Timeout Click in Python (Async)
DESCRIPTION: Demonstrates how to wait for navigation that happens after a timeout-based click in Python using async syntax. Resolves after navigation has finished.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_132

LANGUAGE: python
CODE:
```
async with page.expect_navigation():
    # This action triggers the navigation after a timeout.
    await page.get_by_text("Navigate after timeout").click()
# Resolves after navigation has finished
```

----------------------------------------

TITLE: Evaluating JavaScript Expressions in Browser Context
DESCRIPTION: Specifies the expression parameter for browser evaluation functions. Allows executing JavaScript expressions in the browser context, automatically invoking expressions that evaluate to functions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_42

LANGUAGE: js
CODE:
```
- `expression` <[string]>

JavaScript expression to be evaluated in the browser context. If the expression evaluates
to a function, the function is automatically invoked.
```

----------------------------------------

TITLE: Clicking Element in Shadow DOM using Playwright
DESCRIPTION: This code demonstrates how to click the 'Details' div within a Shadow DOM using Playwright in different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
await page.getByText('Details').click();
```

LANGUAGE: java
CODE:
```
page.getByText("Details").click();
```

LANGUAGE: python
CODE:
```
await page.get_by_text("Details").click()
```

LANGUAGE: csharp
CODE:
```
await page.GetByText("Details").ClickAsync();
```

----------------------------------------

TITLE: Configuring Retries for Specific Test Groups in Playwright
DESCRIPTION: This JavaScript code demonstrates how to configure retries for a specific group of tests using the test.describe.configure method in Playwright. It sets 2 retry attempts for all tests within the describe block.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-retries-js.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.describe(() => {
  // All tests in this describe group will get 2 retry attempts.
  test.describe.configure({ retries: 2 });

  test('test 1', async ({ page }) => {
    // ...
  });

  test('test 2', async ({ page }) => {
    // ...
  });
});
```

----------------------------------------

TITLE: Accessing Project Configuration in JavaScript
DESCRIPTION: Retrieves the processed project configuration from the configuration file. This property provides access to the full project configuration object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-workerinfo.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
workerInfo.project
```

----------------------------------------

TITLE: GitHub Actions Job for Merging Reports
DESCRIPTION: GitHub Actions job configuration that merges blob reports from all shards into a single HTML report after the test shards have completed.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-sharding-js.md#2025-04-22_snippet_4

LANGUAGE: yaml
CODE:
```
jobs:
...
  merge-reports:
    # Merge reports after playwright-tests, even if some shards have failed
    if: ${{ !cancelled() }}
    needs: [playwright-tests]

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Install dependencies
      run: npm ci

    - name: Download blob reports from GitHub Actions Artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-blob-reports
        pattern: blob-report-*
        merge-multiple: true

    - name: Merge into HTML Report
      run: npx playwright merge-reports --reporter html ./all-blob-reports

    - name: Upload HTML report
      uses: actions/upload-artifact@v4
      with:
        name: html-report--attempt-${{ github.run_attempt }}
        path: playwright-report
        retention-days: 14
```

----------------------------------------

TITLE: Declaring a Focused Failing Test in Playwright
DESCRIPTION: This snippet demonstrates how to declare a focused failing test using test.fail.only. It ensures that Playwright runs only this test and verifies that it actually fails.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_28

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.fail.only('focused failing test', async ({ page }) => {
  // This test is expected to fail
});
test('not in the focused group', async ({ page }) => {
  // This test will not run
});
```

----------------------------------------

TITLE: Using toContainEqual Method for Deep Equality Checking in Arrays
DESCRIPTION: Shows how to use the 'toContainEqual' method to check if an array or Set contains an item that is deeply equal to the expected value.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_16

LANGUAGE: javascript
CODE:
```
const value = [
  { example: 1 },
  { another: 2 },
  { more: 3 },
];
expect(value).toContainEqual({ another: 2 });
expect(new Set(value)).toContainEqual({ another: 2 });
```

----------------------------------------

TITLE: Recording Video with Browser Context (JavaScript)
DESCRIPTION: This code demonstrates how to create a new browser context with video recording enabled, specifying the directory where videos will be saved.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
const context = await browser.newContext({ recordVideo: { dir: 'videos/' } });
// Make sure to await close, so that videos are saved.
await context.close();
```

----------------------------------------

TITLE: Checking a Checkbox or Radio via Playwright Python (Async)
DESCRIPTION: Asynchronously checks a checkbox or radio button found with Playwright's async Python API. Handles actionability checks and ensures the checked state. Throws if type is incorrect or if DOM changes during execution.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_32

LANGUAGE: Python
CODE:
```
await page.get_by_role("checkbox").check()
```

----------------------------------------

TITLE: Setting isMobile via Context Options (Java)
DESCRIPTION: This Java snippet shows how to set the `isMobile` property when creating a new browser context using the Playwright Java library. The `setIsMobile` method is used on the `NewContextOptions` object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_16

LANGUAGE: java
CODE:
```
```java
BrowserContext context = browser.newContext(new Browser.NewContextOptions()
  .isMobile(false));
```
```

----------------------------------------

TITLE: Running Playwright Tests in UI Mode
DESCRIPTION: Execute tests in UI mode for a better developer experience with visual step-by-step debugging and additional features like locator picker and watch mode.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx playwright test --ui
```

----------------------------------------

TITLE: Dispatching Dragstart Event with DataTransfer in JavaScript
DESCRIPTION: Demonstrates how to dispatch a dragstart event with a DataTransfer object on an ElementHandle in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_25

LANGUAGE: javascript
CODE:
```
const dataTransfer = await page.evaluateHandle(() => new DataTransfer());
await elementHandle.dispatchEvent('dragstart', { dataTransfer });
```

----------------------------------------

TITLE: Selecting Last Element in Playwright
DESCRIPTION: Demonstrates how to select the last matching element using Playwright's last method across different programming languages. Returns a locator to the last matching element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_70

LANGUAGE: javascript
CODE:
```
const banana = await page.getByRole('listitem').last();
```

LANGUAGE: python-async
CODE:
```
banana = await page.get_by_role("listitem").last
```

LANGUAGE: python-sync
CODE:
```
banana = page.get_by_role("listitem").last
```

LANGUAGE: java
CODE:
```
Locator banana = page.getByRole(AriaRole.LISTITEM).last();
```

LANGUAGE: csharp
CODE:
```
var banana = await page.GetByRole(AriaRole.Listitem).Last(1);
```

----------------------------------------

TITLE: Running Playwright Server in Docker
DESCRIPTION: Command to start a Playwright server in Docker that allows for remote connections from host systems or other machines.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_13

LANGUAGE: bash
CODE:
```
docker run -p 3000:3000 --rm --init -it --workdir /home/pwuser --user pwuser mcr.microsoft.com/playwright:v%%VERSION%%-noble /bin/sh -c "npx -y playwright@%%VERSION%% run-server --port 3000 --host 0.0.0.0"
```

----------------------------------------

TITLE: Asserting Element Accessible Description with Playwright TypeScript
DESCRIPTION: Asserts that the element located by the locator has a matching accessible description. This assertion automatically retries until the condition is met or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_14

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toHaveAccessibleDescription()
```

----------------------------------------

TITLE: Managing Color Scheme and Media in Python (Async)
DESCRIPTION: Creates browser contexts and pages with specific color schemes, and demonstrates how to update color scheme and media type during test execution using the Playwright Python async API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_60

LANGUAGE: python
CODE:
```
# Create context with dark mode
context = await browser.new_context(
  color_scheme='dark' # or 'light'
)

# Create page with dark mode
page = await browser.new_page(
  color_scheme='dark' # or 'light'
)

# Change color scheme for the page
await page.emulate_media(color_scheme='dark')

# Change media for page
await page.emulate_media(media='print')
```

----------------------------------------

TITLE: Evaluating Multiple Selectors on ElementHandle in Python (Async)
DESCRIPTION: Illustrates evaluating multiple selectors on an ElementHandle and extracting inner text from multiple elements in Python using async syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_37

LANGUAGE: python
CODE:
```
feed_handle = await page.query_selector(".feed")
assert await feed_handle.eval_on_selector_all(".tweet", "nodes => nodes.map(n => n.innerText)") == ["hello!", "hi!"]
```

----------------------------------------

TITLE: Evaluating JavaScript on All Matching Elements with Locator.EvaluateAllAsync in C#
DESCRIPTION: Shows how to execute JavaScript code on all matching elements using the EvaluateAllAsync method in C#. Passes the array of matching elements to the evaluation function.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_58

LANGUAGE: csharp
CODE:
```
var locator = page.Locator("div");
var moreThanTen = await locator.EvaluateAllAsync<bool>("(divs, min) => divs.length > min", 10);
```

----------------------------------------

TITLE: Uploading Directory with Locator.SetInputFilesAsync (C#)
DESCRIPTION: Shows how to upload an entire directory using the SetInputFilesAsync method on a Locator targeting an input element with the webkitdirectory attribute.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_11

LANGUAGE: csharp
CODE:
```
await page.GetByLabel("Upload directory").SetInputFilesAsync("mydir");
```

----------------------------------------

TITLE: Fulfilling Routes with Custom Responses in JavaScript
DESCRIPTION: Demonstrates how to fulfill routes with custom responses using Playwright in JavaScript. This example shows how to respond with a 404 status code and a custom message for all requests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_26

LANGUAGE: javascript
CODE:
```
await page.route('**/*', async route => {
  await route.fulfill({
    status: 404,
    contentType: 'text/plain',
    body: 'Not Found!'
  });
});
```

----------------------------------------

TITLE: Handling GET and POST Requests in C#
DESCRIPTION: Shows how to set up separate route handlers for GET and POST requests using Playwright in C#. The handlers check the request method and either process the request or fall back to the default behavior.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_15

LANGUAGE: csharp
CODE:
```
// Handle GET requests.
await page.RouteAsync("**/*", route => {
    if (route.Request.Method != "GET") {
        await route.FallbackAsync();
        return;
    }
    // Handling GET only.
    // ...
});

// Handle POST requests.
await page.RouteAsync("**/*", route => {
    if (route.Request.Method != "POST") {
        await route.FallbackAsync();
        return;
    }
    // Handling POST only.
    // ...
});
```

----------------------------------------

TITLE: Evaluating JavaScript with Locator.evaluate in Python (Async)
DESCRIPTION: Demonstrates how to execute JavaScript code on a matched element using the evaluate method in Python async mode. Includes passing arguments to the evaluation function.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_51

LANGUAGE: python
CODE:
```
result = await page.get_by_testid("myId").evaluate("(element, [x, y]) => element.textContent + ' ' + x * y", [7, 8])
print(result) # prints "myId text 56"
```

----------------------------------------

TITLE: Registering and Using Custom Tag Name Selector in Playwright for C#
DESCRIPTION: This C# code demonstrates how to register and make use of a tag name-based custom selector engine with Playwright. It includes steps for registration and how to perform actions on elements found with custom selectors.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/extensibility.md#2025-04-22_snippet_5

LANGUAGE: C#
CODE:
```
// Register the engine. Selectors will be prefixed with "tag=".
// The script is evaluated in the page context.
await playwright.Selectors.Register("tag", new() {
  Script = @"
  // Must evaluate to a selector engine instance.
  {
    // Returns the first element matching given selector in the root's subtree.
    query(root, selector) {
      return root.querySelector(selector);
    },

    // Returns all elements matching given selector in the root's subtree.
    queryAll(root, selector) {
      return Array.from(root.querySelectorAll(selector));
    }
  }"
});

// Now we can use "tag=" selectors.
await page.Locator("tag=button").ClickAsync();

// We can combine it with built-in locators.
await page.Locator("tag=div").GetByText("Click me").ClickAsync();
```

----------------------------------------

TITLE: Waiting for Locator Element (C#)
DESCRIPTION: Illustrates how to use the `Locator.WaitForAsync` method in C# to pause execution until the element identified by the locator (`#order-sent`) meets the default waiting condition (visible). This ensures the element is ready before further interaction.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_50

LANGUAGE: csharp
CODE:
```
var orderSent = page.Locator("#order-sent");
orderSent.WaitForAsync();
```

----------------------------------------

TITLE: Capturing Git Information in Playwright Test Configuration
DESCRIPTION: Configuration to capture git commit information and diff data in test metadata, useful for reporting and debugging.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  captureGitInfo: { commit: true, diff: true }
});
```

----------------------------------------

TITLE: Configuring WCAG Compliance Scanning with Axe
DESCRIPTION: Shows how to configure Axe to specifically check for WCAG A and AA compliance violations using tag filtering.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-java.md#2025-04-22_snippet_2

LANGUAGE: java
CODE:
```
AxeResults accessibilityScanResults = new AxeBuilder(page)
  .withTags(Arrays.asList("wcag2a", "wcag2aa", "wcag21a", "wcag21aa"))
  .analyze();

AssertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());
```

----------------------------------------

TITLE: Using waitForCondition in Java
DESCRIPTION: This snippet shows how to use the waitForCondition method to wait for a condition that depends on page events in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_149

LANGUAGE: java
CODE:
```
List<String> messages = new ArrayList<>();
page.onConsoleMessage(m -> messages.add(m.text()));
page.getByText("Submit button").click();
page.waitForCondition(() -> messages.size() > 3);
```

----------------------------------------

TITLE: Performing Trial Run (Actionability Check Only) in Playwright
DESCRIPTION: Defines the `trial` boolean option for Playwright actions. When set to `true`, the method only performs actionability checks (e.g., visibility, enabled) without executing the actual action. Useful for waiting until an element is ready. Defaults to `false`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_20

LANGUAGE: markdown
CODE:
```
- `trial` <[boolean]>
```

----------------------------------------

TITLE: JavaScript Class Assertion Implementation
DESCRIPTION: Demonstrates how to assert CSS classes on a located element using Playwright's expect API in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_19

LANGUAGE: javascript
CODE:
```
const locator = page.locator('#component');
await expect(locator).toContainClass('middle selected row');
await expect(locator).toContainClass('selected');
await expect(locator).toContainClass('row middle');
```

----------------------------------------

TITLE: Setting Video Size with Browser Context (Python)
DESCRIPTION: These snippets demonstrate how to create a new browser context with video recording enabled in Python, specifying both the directory and the video size, using both async and sync syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
context = await browser.new_context(
    record_video_dir="videos/",
    record_video_size={"width": 640, "height": 480}
)
```

LANGUAGE: python
CODE:
```
context = browser.new_context(
    record_video_dir="videos/",
    record_video_size={"width": 640, "height": 480}
)
```

----------------------------------------

TITLE: Debugging Playwright Tests with Inspector (Bash)
DESCRIPTION: Command to debug Playwright tests using the Playwright Inspector in Bash.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_16

LANGUAGE: csharp
CODE:
```
PWDEBUG=1 dotnet test
```

----------------------------------------

TITLE: Running Playwright Tests on Specific Browser (Batch)
DESCRIPTION: Commands to run Playwright tests on a specific browser (WebKit in this example) using environment variable in Batch.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_5

LANGUAGE: csharp
CODE:
```
set BROWSER=webkit
dotnet test
```

----------------------------------------

TITLE: Handling Security Details Confirmation with Locator Handler in Python (Asynchronous)
DESCRIPTION: Asynchronous Python implementation of a locator handler to automatically skip a security details confirmation page. The handler detects text matching 'Confirm your security details' and clicks the 'Remind me later' button.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_84

LANGUAGE: python
CODE:
```
# Setup the handler.
def handler():
  await page.get_by_role("button", name="Remind me later").click()
await page.add_locator_handler(page.get_by_text("Confirm your security details"), handler)

# Write the test as usual.
await page.goto("https://example.com")
await page.get_by_role("button", name="Start here").click()
```

----------------------------------------

TITLE: Setting Context Options in Playwright Tests
DESCRIPTION: Example showing how to provide specific browser context options, such as reducedMotion setting, which can be useful for accessibility testing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_11

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    contextOptions: {
      reducedMotion: 'reduce',
    },
  },
});
```

----------------------------------------

TITLE: Blocking WebSocket Messages in Both Directions with Playwright in Python (Synchronous)
DESCRIPTION: Handles blocking of messages in both directions using Playwright in a synchronous Python setup. Involves setting up message handlers and WebSocket configuration.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_18

LANGUAGE: python
CODE:
```
def ws_message_handler(server: WebSocketRoute, message: Union[str, bytes]):
  if message != "blocked-from-the-page":
    server.send(message)

def server_message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  if message != "blocked-from-the-server":
    ws.send(message)

def handler(ws: WebSocketRoute):
  server = ws.connect_to_server()
  ws.on_message(lambda message: ws_message_handler(server, message))
  server.on_message(lambda message: server_message_handler(ws, message))

page.route_web_socket("/ws", handler)
```

----------------------------------------

TITLE: Converting Locator to FrameLocator in Playwright C#
DESCRIPTION: Illustrates how to use the new `Locator.ContentFrame` property in C# to obtain a `FrameLocator` from an existing `Locator` that points to an iframe element. Useful for interacting with content inside a frame located dynamically.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_19

LANGUAGE: C#
CODE:
```
var locator = Page.Locator("iframe[name='embedded']");
// ...
var frameLocator = locator.ContentFrame;
await frameLocator.GetByRole(AriaRole.Button).ClickAsync();
```

----------------------------------------

TITLE: Dispatching Events with Playwright Frame - C#
DESCRIPTION: Shows how to use Playwright in C# to dispatch events on elements inside a frame. The example demonstrates event dispatch involving data transfer objects, suitable for drag operations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_8

LANGUAGE: C#
CODE:
```
await frame.DispatchEventAsync("button#submit", "click");
```

LANGUAGE: C#
CODE:
```
var dataTransfer = await frame.EvaluateHandleAsync("() => new DataTransfer()");
await frame.DispatchEventAsync("#source", "dragstart", new { dataTransfer });
```

----------------------------------------

TITLE: Clearing Browser Permissions in Python (Sync)
DESCRIPTION: Revokes all previously granted permissions for the browser context using the Playwright Python sync API. This removes any permission settings that were applied earlier.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_41

LANGUAGE: python
CODE:
```
context.clear_permissions()
```

----------------------------------------

TITLE: Setting Locale and Timezone via Context Options (Java)
DESCRIPTION: This Java snippet demonstrates setting the locale and timezone when creating a new browser context using the Playwright Java library. The `setLocale` and `setTimezoneId` methods are used on the `NewContextOptions` object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_23

LANGUAGE: java
CODE:
```
```java
BrowserContext context = browser.newContext(new Browser.NewContextOptions()
  .setLocale("de-DE")
  .setTimezoneId("Europe/Berlin"));
```
```

----------------------------------------

TITLE: Granting Domain-Specific Permissions in C#
DESCRIPTION: Grants notification permissions for a specific domain (skype.com) using the Playwright C# client. This allows showing notifications only for the specified origin.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_37

LANGUAGE: csharp
CODE:
```
await context.GrantPermissionsAsync(new[] { "notifications" }, origin: "https://skype.com");
```

----------------------------------------

TITLE: Configuring Playwright to Use a Specific tsconfig File
DESCRIPTION: This TypeScript snippet shows how to configure Playwright to use a specific tsconfig file in the playwright.config.ts file. This configuration will be used for loading test files and reporters.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-typescript-js.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  tsconfig: './tsconfig.test.json',
});
```

----------------------------------------

TITLE: Clearing Browser Permissions in Java
DESCRIPTION: Revokes all previously granted permissions for the browser context using the Playwright Java client. This removes any permission settings that were applied earlier.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_39

LANGUAGE: java
CODE:
```
context.clearPermissions();
```

----------------------------------------

TITLE: Asynchronous Frame.wait_for_function Example in Python
DESCRIPTION: This Python snippet demonstrates the asynchronous usage of Frame.wait_for_function. It launches a WebKit browser, creates a new page, sets a timeout to change a variable, and then waits for that variable to change using wait_for_function.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_37

LANGUAGE: python
CODE:
```
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = await webkit.launch()
    page = await browser.new_page()
    await page.evaluate("window.x = 0; setTimeout(() => { window.x = 100 }, 1000);")
    await page.main_frame.wait_for_function("() => window.x > 0")
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())
```

----------------------------------------

TITLE: Configure HTML Reporter Open Option (JS)
DESCRIPTION: Example configuration in playwright.config.ts to set the HTML reporter and prevent it from automatically opening in the browser after the test run, regardless of test results. The 'open' option can be 'always', 'never', or 'on-failure'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_13

LANGUAGE: js
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: [['html', { open: 'never' }]],
});
```

----------------------------------------

TITLE: Creating Browser Context with Geolocation in Python (Sync)
DESCRIPTION: Creates a new browser context with geolocation settings and permissions using the Playwright Python sync API. This sets up the browser environment to emulate a specific geographic location.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_48

LANGUAGE: python
CODE:
```
context = browser.new_context(
  geolocation={"longitude": 41.890221, "latitude": 12.492348},
  permissions=["geolocation"]
)
```

----------------------------------------

TITLE: Starting Playwright Tracing (Python Sync)
DESCRIPTION: Demonstrates starting synchronous Playwright tracing in Python using `context.tracing.start()`. Options like `screenshots` and `snapshots` are passed as arguments. Recording continues until `context.tracing.stop()` is called.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
context.tracing.start(screenshots=True, snapshots=True)
page = context.new_page()
page.goto("https://playwright.dev")
context.tracing.stop(path = "trace.zip")
```

----------------------------------------

TITLE: Pulling Playwright Docker Image for Java
DESCRIPTION: Command to pull the Playwright Docker image for Java applications from Microsoft Artifact Registry.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
docker pull mcr.microsoft.com/playwright/java:v%%VERSION%%-noble
```

----------------------------------------

TITLE: Using Fixme in beforeEach Hook
DESCRIPTION: Shows how to use fixme annotation in test hooks to conditionally skip setup for certain conditions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-annotations-js.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
test.beforeEach(async ({ page, isMobile }) => {
  test.fixme(isMobile, 'Settings page does not work in mobile yet');

  await page.goto('http://localhost:3000/settings');
});

test('user profile', async ({ page }) => {
  await page.getByText('My Profile').click();
  // ...
});
```

----------------------------------------

TITLE: Pressing an Uppercase Character using Shift in Playwright (JavaScript)
DESCRIPTION: Demonstrates pressing an uppercase 'A' using the Playwright Keyboard API in JavaScript. It shows two ways to achieve this using `page.keyboard.press`: combining 'Shift' with the specific key code 'KeyA', or combining 'Shift' with the character 'A'. Both methods simulate pressing Shift, then A, then releasing both.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
```js
await page.keyboard.press('Shift+KeyA');
// or
await page.keyboard.press('Shift+A');
```
```

----------------------------------------

TITLE: Using firstWindow Method to Access Initial Electron Window
DESCRIPTION: Demonstrates how to wait for and access the first window opened by an Electron application, which is a common pattern when automating Electron apps.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-electronapplication.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
const electronApp = await electron.launch({
  args: ['main.js']
});
const window = await electronApp.firstWindow();
// ...
```

----------------------------------------

TITLE: Managing Color Scheme and Media in JavaScript
DESCRIPTION: Creates browser contexts and pages with specific color schemes, and demonstrates how to update color scheme and media type during test execution using the Playwright JavaScript library.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_58

LANGUAGE: javascript
CODE:
```
// Create context with dark mode
const context = await browser.newContext({
  colorScheme: 'dark' // or 'light'
});

// Create page with dark mode
const page = await browser.newPage({
  colorScheme: 'dark' // or 'light'
});

// Change color scheme for the page
await page.emulateMedia({ colorScheme: 'dark' });

// Change media for page
await page.emulateMedia({ media: 'print' });
```

----------------------------------------

TITLE: HTML Checkbox for Partial ARIA Snapshot Matching Example
DESCRIPTION: This HTML snippet shows an input element of type checkbox, which is checked. It is used to illustrate partial ARIA snapshot matching where attributes like 'checked' can be omitted in the snapshot template.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_14

LANGUAGE: html
CODE:
```
```html
<input type="checkbox" checked>
```
```

----------------------------------------

TITLE: Evaluating JavaScript on DOM Elements by Selector
DESCRIPTION: Defines the pageFunction parameter for evalOnSelector method in JavaScript. This function will be evaluated in the page context with the selected DOM element as its argument.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_44

LANGUAGE: js
CODE:
```
- `pageFunction` <[function]\([Element]\)|[string]>

Function to be evaluated in the page context.
```

----------------------------------------

TITLE: Dispatching Events with Playwright Frame - JavaScript
DESCRIPTION: Dispatches the specified event type, such as 'click', on an element within a frame. Supported in JavaScript with various initialization options provided by event-specific parameters. Handles async event initialization and bubbling.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_5

LANGUAGE: JavaScript
CODE:
```
await frame.dispatchEvent('button#submit', 'click');
```

LANGUAGE: JavaScript
CODE:
```
const dataTransfer = await frame.evaluateHandle(() => new DataTransfer());
await frame.dispatchEvent('#source', 'dragstart', { dataTransfer });
```

----------------------------------------

TITLE: Running Tests with Custom Browser Channel
DESCRIPTION: Example of running tests with a specific browser channel like Chrome or Edge from the command line.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
pytest --browser-channel chrome
```

----------------------------------------

TITLE: Setting Custom User Agent in Python (Async)
DESCRIPTION: Creates a new browser context with a custom user agent string using the Playwright Python async API. This allows testing how websites respond to different browser identifications.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_66

LANGUAGE: python
CODE:
```
context = await browser.new_context(
  user_agent='My user agent'
)
```

----------------------------------------

TITLE: Setting Maximum Test Failures in Playwright
DESCRIPTION: Configuration to set maximum number of test failures before stopping test execution, with different values for CI and local environments.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  maxFailures: process.env.CI ? 1 : 0,
});
```

----------------------------------------

TITLE: Applying Custom Stylesheet for Screenshot Comparison (CSS)
DESCRIPTION: This CSS snippet shows how to create a custom stylesheet to hide specific elements (in this case, iframes) during screenshot capture, improving determinism.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-snapshots-js.md#2025-04-22_snippet_3

LANGUAGE: css
CODE:
```
iframe {
  visibility: hidden;
}
```

----------------------------------------

TITLE: Recording Video with Browser Context (C#)
DESCRIPTION: This code shows how to create a new browser context with video recording enabled in C#, specifying the directory where videos will be saved.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_9

LANGUAGE: csharp
CODE:
```
var context = await browser.NewContextAsync(new()
{
    RecordVideoDir = "videos/"
});
// Make sure to close, so that videos are saved.
await context.CloseAsync();
```

----------------------------------------

TITLE: Combining browser and system dependencies installation
DESCRIPTION: This snippet demonstrates how to combine installation of both browsers and their system dependencies with one command. This is an efficient way to set up the testing environment, particularly when dealing with fresh CI server setups.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_5

LANGUAGE: js
CODE:
```
npx playwright install --with-deps chromium
```

LANGUAGE: java
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install --with-deps chromium\"
```

LANGUAGE: python
CODE:
```
playwright install --with-deps chromium
```

LANGUAGE: csharp
CODE:
```
pwsh bin/Debug/netX/playwright.ps1 install --with-deps chromium
```

----------------------------------------

TITLE: Calculating Locator Bounding Box in Playwright Python (Sync)
DESCRIPTION: Shows the synchronous Playwright Python call to get a bounding box and click its center for a 'button' element. Output is interaction and the box dictionary or None.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_28

LANGUAGE: Python
CODE:
```
box = page.get_by_role("button").bounding_box()
page.mouse.click(box["x"] + box["width"] / 2, box["y"] + box["height"] / 2)
```

----------------------------------------

TITLE: Using isOK assertion with Java
DESCRIPTION: Usage example of the isOK method which ensures the response status code is within 200-299 range in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponseassertions.md#2025-04-22_snippet_7

LANGUAGE: java
CODE:
```
assertThat(response).isOK();
```

----------------------------------------

TITLE: Configuring Snapshot Path Templates in Playwright Config
DESCRIPTION: Demonstrates how to configure snapshot path templates globally and for specific assertion types using TestConfig. Shows both single template and assertion-specific template configurations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_133

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  testDir: './tests',

  // Single template for all assertions
  snapshotPathTemplate: '{testDir}/__screenshots__/{testFilePath}/{arg}{ext}',

  // Assertion-specific templates
  expect: {
    toHaveScreenshot: {
      pathTemplate: '{testDir}/__screenshots__{/projectName}/{testFilePath}/{arg}{ext}',
    },
    toMatchAriaSnapshot: {
      pathTemplate: '{testDir}/__snapshots__/{testFilePath}/{arg}{ext}',
    },
  },
});
```

----------------------------------------

TITLE: ARIA Pressed Option for Role Selectors
DESCRIPTION: Defines the `pressed` option for role-based selectors to match elements with a specific pressed state.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_125

LANGUAGE: typescript
CODE:
```
* since: v1.27
- `pressed` <[boolean]>
```

----------------------------------------

TITLE: Managing Color Scheme and Media in Java
DESCRIPTION: Creates browser contexts and pages with specific color schemes, and demonstrates how to update color scheme and media type during test execution using the Playwright Java client.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_59

LANGUAGE: java
CODE:
```
// Create context with dark mode
BrowserContext context = browser.newContext(new Browser.NewContextOptions()
  .setColorScheme(ColorScheme.DARK)); // or "light"

// Create page with dark mode
Page page = browser.newPage(new Browser.NewPageOptions()
  .setColorScheme(ColorScheme.DARK)); // or "light"

// Change color scheme for the page
page.emulateMedia(new Page.EmulateMediaOptions().setColorScheme(ColorScheme.DARK));

// Change media for page
page.emulateMedia(new Page.EmulateMediaOptions().setMedia(Media.PRINT));
```

----------------------------------------

TITLE: Configuring Playwright APIRequestContext for GitHub API in Java
DESCRIPTION: This snippet demonstrates the initial setup for API testing using Playwright and JUnit 5. It initializes Playwright and creates an APIRequestContext configured with a base URL for the GitHub API and necessary HTTP headers, including Accept and Authorization (using an environment variable for the token). Setup (@BeforeAll) and teardown (@AfterAll) methods manage the lifecycle of the Playwright and APIRequestContext instances.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-java.md#2025-04-22_snippet_0

LANGUAGE: java
CODE:
```
package org.example;

import com.microsoft.playwright.APIRequest;
import com.microsoft.playwright.APIRequestContext;
import com.microsoft.playwright.Playwright;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.TestInstance;

import java.util.HashMap;
import java.util.Map;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class TestGitHubAPI {
  private static final String API_TOKEN = System.getenv("GITHUB_API_TOKEN");

  private Playwright playwright;
  private APIRequestContext request;

  void createPlaywright() {
    playwright = Playwright.create();
  }

  void createAPIRequestContext() {
    Map<String, String> headers = new HashMap<>();
    // We set this header per GitHub guidelines.
    headers.put("Accept", "application/vnd.github.v3+json");
    // Add authorization token to all requests.
    // Assuming personal access token available in the environment.
    headers.put("Authorization", "token " + API_TOKEN);

    request = playwright.request().newContext(new APIRequest.NewContextOptions()
      // All requests we send go to this API endpoint.
      .setBaseURL("https://api.github.com")
      .setExtraHTTPHeaders(headers));
  }

  @BeforeAll
  void beforeAll() {
    createPlaywright();
    createAPIRequestContext();
  }

  void disposeAPIRequestContext() {
    if (request != null) {
      request.dispose();
      request = null;
    }
  }

  void closePlaywright() {
    if (playwright != null) {
      playwright.close();
      playwright = null;
    }
  }

  @AfterAll
  void afterAll() {
    disposeAPIRequestContext();
    closePlaywright();
  }
}

```

----------------------------------------

TITLE: Creating Page within Viewport-Configured Context (JavaScript Library)
DESCRIPTION: This snippet demonstrates creating a new browser context with a specified viewport size and then creating a new page within that context using the Playwright JavaScript library.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
```js tab=js-library
// Create context with given viewport
const context = await browser.newContext({
  viewport: { width: 1600, height: 1200 }
});
const page = await context.newPage();
```
```

----------------------------------------

TITLE: Playwright Test Migration of AngularJS Todo List
DESCRIPTION: The equivalent Playwright Test implementation of the Protractor example, showing the proper use of async/await, locators, and expectations in Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/protractor-js.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
const { test, expect } = require('@playwright/test'); // 1

test.describe('angularjs homepage todo list', () => {
  test('should add a todo', async ({ page }) => { // 2, 3
    await page.goto('https://angularjs.org'); // 4

    await page.locator('[ng-model="todoList.todoText"]').fill('first test');
    await page.locator('[value="add"]').click();

    const todoList = page.locator('[ng-repeat="todo in todoList.todos"]'); // 5
    await expect(todoList).toHaveCount(3);
    await expect(todoList.nth(2)).toHaveText('first test', {
      useInnerText: true,
    });

    // You wrote your first test, cross it off the list
    await todoList.nth(2).getByRole('textbox').click();
    const completedAmount = page.locator('.done-true');
    await expect(completedAmount).toHaveCount(2);
  });
});
```

----------------------------------------

TITLE: Disabling Service Workers via Context Option in Playwright Java
DESCRIPTION: Shows how to disable service workers for a browser context by setting the `serviceWorkers` option to `ServiceWorkerPolicy.BLOCK` when creating a new context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_41

LANGUAGE: java
CODE:
```
BrowserContext context = browser.newContext(new Browser.NewContextOptions()
      .setServiceWorkers(ServiceWorkerPolicy.BLOCK));
```

----------------------------------------

TITLE: Loading Chrome Extension with Playwright in Headless Mode - Python Async
DESCRIPTION: This Python script showcases how to run a Chrome extension in headless mode using Playwright asynchronously. It launches a persistent browser context similar to JavaScript, checking for a background page and performing tests before closing the context. The Playwright library is required as a dependency.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/chrome-extensions-js-python.md#2025-04-22_snippet_1

LANGUAGE: Python
CODE:
```
import asyncio
from playwright.async_api import async_playwright, Playwright

path_to_extension = "./my-extension"
user_data_dir = "/tmp/test-user-data-dir"


async def run(playwright: Playwright):
    context = await playwright.chromium.launch_persistent_context(
        user_data_dir,
        channel="chromium",
        args=[
            f"--disable-extensions-except={path_to_extension}",
            f"--load-extension={path_to_extension}",
        ],
    )

    if len(context.background_pages) == 0:
        background_page = await context.wait_for_event('backgroundpage')
    else:
        background_page = context.background_pages[0]

    # Test the background page as you would any other page.
    await context.close()


async def main():
    async with async_playwright() as playwright:
        await run(playwright)


asyncio.run(main())
```

----------------------------------------

TITLE: Retrieving Bounding Box with ElementHandle in JavaScript
DESCRIPTION: Illustrates using ElementHandle to obtain the bounding box of an element in JavaScript. Using these coordinates, it performs a mouse click in the element's center.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_15

LANGUAGE: JavaScript
CODE:
```
const box = await elementHandle.boundingBox();
await page.mouse.click(box.x + box.width / 2, box.y + box.height / 2);
```

----------------------------------------

TITLE: Forcing a Mouse Click in Playwright
DESCRIPTION: Explains how to bypass Playwright's actionability checks (like visibility, stability, and pointer-events) and force a click action on an element. This is achieved by setting the `force: true` option (or `Force = true` in C#, `setForce(true)` in Java) within the `click` (or `ClickAsync`) method options. This can be useful in scenarios where an element is interactable but gets covered by another element just before the click, which Playwright might otherwise interpret as non-actionable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
```js
await page.getByRole('button').click({ force: true });
```
```

LANGUAGE: java
CODE:
```
```java
page.getByRole(AriaRole.BUTTON).click(new Locator.ClickOptions().setForce(true));
```
```

LANGUAGE: python
CODE:
```
```python async
await page.get_by_role("button").click(force=True)
```
```

LANGUAGE: python
CODE:
```
```python sync
page.get_by_role("button").click(force=True)
```
```

LANGUAGE: csharp
CODE:
```
```csharp
await page.GetByRole(AriaRole.Button).ClickAsync(new() { Force = true });
```
```

----------------------------------------

TITLE: Hidden Elements Option for Role Selectors
DESCRIPTION: Defines the `includeHidden` option for role-based selectors to control whether hidden elements are matched. By default, only visible elements are matched.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_121

LANGUAGE: typescript
CODE:
```
* since: v1.27
- `includeHidden` <[boolean]>
```

----------------------------------------

TITLE: Emulating Viewport Size with Playwright Codegen - JavaScript - Bash
DESCRIPTION: This snippet demonstrates setting a custom viewport size in the Playwright code generator for JavaScript/Node.js environments. The '--viewport-size' option is passed as a command-line argument to specify the width and height in pixels. Prerequisite: Playwright must be installed locally, and 'npx' present. The command launches the recording session with a browser window sized as requested.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
npx playwright codegen --viewport-size=\"800,600\" playwright.dev
```

----------------------------------------

TITLE: Manual File Payload Upload in Java
DESCRIPTION: Shows how to manually construct and upload a file payload using FilePayload class.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-requestoptions.md#2025-04-22_snippet_3

LANGUAGE: java
CODE:
```
FilePayload filePayload = new FilePayload("members.csv", "text/csv",
  "Alice, 33\nJohn, 35\n".getBytes(StandardCharsets.UTF_8));
APIResponse response = context.request().post("https://example.com/upload_members",
  RequestOptions.create().setMultipart(FormData.create().set("membersList", filePayload)));
```

----------------------------------------

TITLE: Generating Tests with Assertions in Playwright
DESCRIPTION: Example test script demonstrating generated assertions using Playwright Test Generator, including visibility checks, value assertions, and text content verification.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_20

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('test', async ({ page }) => {
  await page.goto('https://playwright.dev/');
  await page.getByRole('link', { name: 'Get started' }).click();
  await expect(page.getByLabel('Breadcrumbs').getByRole('list')).toContainText('Installation');
  await expect(page.getByLabel('Search')).toBeVisible();
  await page.getByLabel('Search').click();
  await page.getByPlaceholder('Search docs').fill('locator');
  await expect(page.getByPlaceholder('Search docs')).toHaveValue('locator');
});
```

----------------------------------------

TITLE: Simulate Pinch Gesture via Touch Events (Python)
DESCRIPTION: An asynchronous Python function using Playwright to simulate a pinch gesture on a given locator by dispatching touchstart and touchmove events. It calculates touch point positions based on the locator's bounding box and updates them over steps to simulate the movement. Note: The provided snippet is incomplete, missing the touchend event dispatch.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#_snippet_12

LANGUAGE: Python
CODE:
```
from playwright.async_api import async_playwright, expect

async def pinch(locator, arg):
    bounds = await locator.bounding_box()
    centerX = bounds['x'] + bounds['width'] / 2
    centerY = bounds['y'] + bounds['height'] / 2

    deltaX = arg.get('deltaX', 50)
    steps = arg.get('steps', 5)
    stepDeltaX = deltaX / (steps + 1)

    touches = [
        {
            'identifier': 0,
            'clientX': centerX - (deltaX if arg.get('direction') == 'in' else stepDeltaX),
            'clientY': centerY,
        },
        {
            'identifier': 1,
            'clientX': centerX + (deltaX if arg.get('direction') == 'in' else stepDeltaX),
            'clientY': centerY,
        },
    ]
    await locator.dispatch_event('touchstart', {
        'touches': touches,
        'changedTouches': touches,
        'targetTouches': touches
    })

    for i in range(1, steps + 1):
        offset = deltaX - i * stepDeltaX if arg.get('direction') == 'in' else stepDeltaX * (i + 1)
        touches = [
            {
                'identifier': 0,
                'clientX': centerX - offset,
                'clientY': centerY,
            },
            {
                'identifier': 1,
                'clientX': centerX + offset,
                'clientY': centerY,
            },
        ]
        await locator.dispatch_event('touchmove', {
            'touches': touches,
            'changedTouches': touches,
            'targetTouches': touches

```

----------------------------------------

TITLE: Granting Domain-Specific Permissions in JavaScript
DESCRIPTION: Grants notification permissions for a specific domain (skype.com) using the Playwright JavaScript library. This allows showing notifications only for the specified origin.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_33

LANGUAGE: javascript
CODE:
```
await context.grantPermissions(['notifications'], { origin: 'https://skype.com' });
```

----------------------------------------

TITLE: Recording Minimal HAR Data via Context Option in Playwright Java
DESCRIPTION: Explains how to record only essential information for HAR replay by setting the `setRecordHarMode` context option to `HarMode.MINIMAL` when creating a new context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_43

LANGUAGE: java
CODE:
```
BrowserContext context = browser.newContext(new Browser.NewContextOptions()
      .setRecordHarPath(Paths.get("example.har"))
      .setRecordHarMode(HarMode.MINIMAL));
```

----------------------------------------

TITLE: Handling Uncaught Page Exceptions in Playwright (C#)
DESCRIPTION: This C# snippet demonstrates attaching an event handler to the `WebError` event of a Playwright BrowserContext. It uses an event subscription `+=` with a lambda expression to define the handler, which writes the error message obtained from `webError.Error` to the console when an unhandled exception occurs in the page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-weberror.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
// Log all uncaught errors to the terminal
context.WebError += (_, webError) =>
{
  Console.WriteLine("Uncaught exception: " + webError.Error);
};
```

----------------------------------------

TITLE: Adding Annotations to Tests in Playwright
DESCRIPTION: Demonstrates how to add annotations to tests using the test details object. Annotations provide additional context like issue links that get displayed in test reports.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('basic test', {
  annotation: {
    type: 'issue',
    description: 'https://github.com/microsoft/playwright/issues/23180',
  },
}, async ({ page }) => {
  await page.goto('https://playwright.dev/');
  // ...
});
```

----------------------------------------

TITLE: Configuring Network Proxy Settings
DESCRIPTION: Sets up network proxy configuration for browser context. Supports HTTP and SOCKS proxies with optional authentication and domain bypass.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_83

LANGUAGE: javascript
CODE:
```
- `proxy` <[Object]>
  - `server` <[string]> Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example
    `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.
  - `bypass` ?<[string]> Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.
  - `username` ?<[string]> Optional username to use if HTTP proxy requires authentication.
  - `password` ?<[string]> Optional password to use if HTTP proxy requires authentication.
```

----------------------------------------

TITLE: Dynamic Battery Status Mock Updates
DESCRIPTION: Implements a complete mock class for battery API with support for dynamic updates and event listeners to test UI reactions to battery status changes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock-browser-js.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
test('update battery status (no golden)', async ({ page }) => {
  await page.addInitScript(() => {
    // Mock class that will notify corresponding listeners when battery status changes.
    class BatteryMock {
      level = 0.10;
      charging = false;
      chargingTime = 1800;
      dischargingTime = Infinity;
      _chargingListeners = [];
      _levelListeners = [];
      addEventListener(eventName, listener) {
        if (eventName === 'chargingchange')
          this._chargingListeners.push(listener);
        if (eventName === 'levelchange')
          this._levelListeners.push(listener);
      }
      // Will be called by the test.
      _setLevel(value) {
        this.level = value;
        this._levelListeners.forEach(cb => cb());
      }
      _setCharging(value) {
        this.charging = value;
        this._chargingListeners.forEach(cb => cb());
      }
    }
    const mockBattery = new BatteryMock();
    // Override the method to always return mock battery info.
    window.navigator.getBattery = async () => mockBattery;
    // Save the mock object on window for easier access.
    window.mockBattery = mockBattery;
  });

  await page.goto('/');
  await expect(page.locator('.battery-percentage')).toHaveText('10%');

  // Update level to 27.5%
  await page.evaluate(() => window.mockBattery._setLevel(0.275));
  await expect(page.locator('.battery-percentage')).toHaveText('27.5%');
  await expect(page.locator('.battery-status')).toHaveText('Battery');

  // Emulate connected adapter
  await page.evaluate(() => window.mockBattery._setCharging(true));
  await expect(page.locator('.battery-status')).toHaveText('Adapter');
  await expect(page.locator('.battery-fully')).toHaveText('00:30');
});
```

----------------------------------------

TITLE: Handling Worker Events in Playwright using C#
DESCRIPTION: This C# snippet illustrates how to subscribe to the `Worker` event on the Playwright Page object and the `Close` event on the Worker object using event handlers (`+=`). It logs messages to the console when a worker is created or closed, including the worker's URL. The example also shows how to loop through the `page.Workers` collection to list the URLs of all currently active workers.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-worker.md#2025-04-22_snippet_3

LANGUAGE: csharp
CODE:
```
page.Worker += (_, worker) =>
{
    Console.WriteLine($"Worker created: {worker.Url}");
    worker.Close += (_, _) => Console.WriteLine($"Worker closed {worker.Url}");
};

Console.WriteLine("Current Workers:");
foreach(var pageWorker in page.Workers)
{
    Console.WriteLine($"\tWorker: {pageWorker.Url}");
}
```

----------------------------------------

TITLE: Configure Playwright Test with Single List Reporter
DESCRIPTION: Configure Playwright Test to use the 'list' reporter programmatically in the configuration file. This reporter is the default except when running on CI.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_5

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: 'list',
});
```

----------------------------------------

TITLE: Accessing Playwright CLI Help (Bash/Python)
DESCRIPTION: This command demonstrates how to access the help documentation for the Playwright command-line interface. It shows the available commands and options for interacting with Playwright from the terminal.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_57

LANGUAGE: bash
CODE:
```
playwright --help
```

LANGUAGE: python
CODE:
```
playwright --help
```

----------------------------------------

TITLE: Testing a Wrapped Component with Playwright
DESCRIPTION: This snippet demonstrates how to test a wrapped component using Playwright Test. It shows mounting the test wrapper, simulating file input, and asserting the expected behavior.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
import { test, expect } from '@playwright/experimental-ct-react';
import { InputMediaForTest } from './input-media.story.tsx';

test('changes the image', async ({ mount }) => {
  let mediaSelected: string | null = null;

  const component = await mount(
    <InputMediaForTest
      onMediaChange={mediaName => {
        mediaSelected = mediaName;
      }}
    />
  );
  await component
    .getByTestId('imageInput')
    .setInputFiles('src/assets/logo.png');

  await expect(component.getByAltText(/selected image/i)).toBeVisible();
  await expect.poll(() => mediaSelected).toBe('logo.png');
});
```

----------------------------------------

TITLE: Navigating Page with DOMContentLoaded Wait in Playwright Java
DESCRIPTION: Demonstrates navigating a page using the `page.navigate` method with the `setWaitUntil(WaitUntilState.DOMCONTENTLOADED)` option. Note that as of Playwright 1.26, this option only waits for the target frame's DOMContentLoaded event, not all iframes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_36

LANGUAGE: java
CODE:
```
page.navigate("https://playwright.dev", new Page.NavigateOptions().setWaitUntil(WaitUntilState.DOMCONTENTLOADLOADED));
```

----------------------------------------

TITLE: Configuring Parameterized Projects in TypeScript
DESCRIPTION: This TypeScript configuration file defines multiple test projects with different values for the custom 'person' option, allowing tests to be run in multiple configurations with proper type checking.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';
import type { TestOptions } from './my-test';

export default defineConfig<TestOptions>({
  projects: [
    {
      name: 'alice',
      use: { person: 'Alice' },
    },
    {
      name: 'bob',
      use: { person: 'Bob' },
    },
  ]
});
```

----------------------------------------

TITLE: Advanced Routing with Fallback in Playwright
DESCRIPTION: Examples of using route.fallback for advanced routing scenarios in Playwright. This allows chaining multiple routing handlers and selectively handling requests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_43

LANGUAGE: javascript
CODE:
```
// Remove a header from all requests.
test.beforeEach(async ({ page }) => {
  await page.route('**/*', async route => {
    const headers = await route.request().allHeaders();
    delete headers['if-none-match'];
    await route.fallback({ headers });
  });
});

test('should work', async ({ page }) => {
  await page.route('**/*', async route => {
    if (route.request().resourceType() === 'image')
      await route.abort();
    else
      await route.fallback();
  });
});
```

----------------------------------------

TITLE: Pressing ControlOrMeta Key with Playwright Java
DESCRIPTION: Demonstrates using the `keyboard.press` method with the `ControlOrMeta` modifier key to simulate pressing the platform-appropriate shortcut for saving (Control+S on Windows/Linux, Meta+S on macOS).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_11

LANGUAGE: Java
CODE:
```
// Press the common keyboard shortcut Control+S or Meta+S to trigger a "Save" operation.
page.keyboard.press("ControlOrMeta+S");
```

----------------------------------------

TITLE: Configuring Expect Assertion Settings in Playwright Test
DESCRIPTION: Configuration for the expect assertion library, including timeout settings and screenshot comparison options.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  expect: {
    timeout: 10000,
    toMatchSnapshot: {
      maxDiffPixels: 10,
    },
  },
});
```

----------------------------------------

TITLE: Evaluating Selectors with Playwright Frame - JavaScript
DESCRIPTION: Evaluates JavaScript expressions on elements matching a selector within the frame. Commonly retrieves or manipulates element properties and attributes, and handles promises via await syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_9

LANGUAGE: JavaScript
CODE:
```
const searchValue = await frame.$eval('#search', el => el.value);
const preloadHref = await frame.$eval('link[rel=preload]', el => el.href);
const html = await frame.$eval('.main-container', (e, suffix) => e.outerHTML + suffix, 'hello');
```

----------------------------------------

TITLE: Handling beforeunload Dialogs with Playwright (C#)
DESCRIPTION: Registers an asynchronous event handler for `Page.Dialog` to manage `beforeunload` dialogs triggered by `Page.CloseAsync(new() { RunBeforeUnload = true })`. The handler asserts the dialog type and then dismisses it using `dialog.DismissAsync()`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_14

LANGUAGE: csharp
CODE:
```
```csharp
Page.Dialog += async (_, dialog) =>
{
    Assert.AreEqual("beforeunload", dialog.Type);
    await dialog.DismissAsync();
};
await Page.CloseAsync(new() { RunBeforeUnload = true });
```
```

----------------------------------------

TITLE: Creating Browser Context with Permissions in Java
DESCRIPTION: Creates a new browser context with notification permissions using the Playwright Java client. This allows pages within this context to display notifications.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_29

LANGUAGE: java
CODE:
```
BrowserContext context = browser.newContext(new Browser.NewContextOptions()
  .setPermissions(Arrays.asList("notifications")));
```

----------------------------------------

TITLE: Recording Traces with MSTest in Playwright
DESCRIPTION: Example showing how to configure trace recording in an MSTest class using Playwright. Implements trace recording in TestInitialize and TestCleanup methods with screenshots, snapshots and source capture.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-csharp.md#2025-04-22_snippet_1

LANGUAGE: csharp
CODE:
```
using System.Text.RegularExpressions;
using Microsoft.Playwright;
using Microsoft.Playwright.MSTest;

namespace PlaywrightTests;

[TestClass]
public class ExampleTest : PageTest
{
    [TestInitialize]
    public async Task TestInitialize()
    {
         await Context.Tracing.StartAsync(new()
        {
            Title = $"{TestContext.FullyQualifiedTestClassName}.{TestContext.TestName}",
            Screenshots = true,
            Snapshots = true,
            Sources = true
        });
    }

    [TestCleanup]
    public async Task TestCleanup()
    {
        await Context.Tracing.StopAsync(new()
        {
            Path = Path.Combine(
                Environment.CurrentDirectory,
                "playwright-traces",
                $"{TestContext.FullyQualifiedTestClassName}.{TestContext.TestName}.zip"
            )
        });
    }

    [TestMethod]
    public async Task GetStartedLink()
    {
        // ...
    }
}
```

----------------------------------------

TITLE: Mocking WebSocket Responses in JavaScript
DESCRIPTION: This code snippet demonstrates how to intercept WebSocket connections and mock the entire communication in JavaScript. It responds to a 'request' message with a 'response'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_16

LANGUAGE: javascript
CODE:
```
await page.routeWebSocket('wss://example.com/ws', ws => {
  ws.onMessage(message => {
    if (message === 'request')
      ws.send('response');
  });
});
```

----------------------------------------

TITLE: Asserting Banner ARIA Snapshot using Playwright Python (Async)
DESCRIPTION: This Python snippet demonstrates the asynchronous usage of ARIA snapshot testing. It asynchronously navigates to 'https://playwright.dev/', selects the 'banner' element using a query selector, and awaits the assertion of its accessibility tree against the provided YAML snapshot template using `to_match_aria_snapshot`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
```python async
await page.goto('https://playwright.dev/')
await expect(page.query_selector('banner')).to_match_aria_snapshot("""
  - banner:
    - heading /Playwright enables reliable end-to-end/ [level=1]
    - link "Get started"
    - link "Star microsoft/playwright on GitHub"
    - link /[\\d]+k\\+ stargazers on GitHub/
""")
```
```

----------------------------------------

TITLE: Manually Creating a Browser Context in Playwright Library (JavaScript)
DESCRIPTION: Illustrates how to manually create an isolated `BrowserContext` and a new `Page` within it using the Playwright library in JavaScript. This approach requires launching a browser instance first and is used when not utilizing the Playwright Test Runner's automatic context management.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
const browser = await chromium.launch();
const context = await browser.newContext();
const page = await context.newPage();
```

----------------------------------------

TITLE: Simulating Tap Gestures on AndroidDevice with Playwright JS
DESCRIPTION: androidDevice.tap performs a tap on a UI element specified by selector. Optional duration and timeout parameters control the tap length and operation deadline. Used for UI interactions triggering click or select. Input: selector, optional duration/timeout. Output: none.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_20

LANGUAGE: js
CODE:
```
// Tap a widget.
await androidDevice.tap({
  selector: mySelector,
  duration: 150, // Optional
  timeout: 1500 // Optional
});
```

----------------------------------------

TITLE: Evaluating Selectors with Playwright Frame - Java
DESCRIPTION: Demonstrates selector evaluation in Java using Playwright. Allows Java expressions on frame elements to access and manipulate element attributes, string conversion, or DOM node properties.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_10

LANGUAGE: Java
CODE:
```
String searchValue = (String) frame.evalOnSelector("#search", "el => el.value");
String preloadHref = (String) frame.evalOnSelector("link[rel=preload", "el => el.href");
String html = (String) frame.evalOnSelector(".main-container", "(e, suffix) => e.outerHTML + suffix", "hello");
```

----------------------------------------

TITLE: Evaluating JavaScript with Locator.evaluate in JavaScript
DESCRIPTION: Demonstrates how to execute JavaScript code on a matched element using Locator.evaluate in JavaScript. Includes passing arguments to the evaluation function.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_49

LANGUAGE: javascript
CODE:
```
const result = await page.getByTestId('myId').evaluate((element, [x, y]) => {
  return element.textContent + ' ' + x * y;
}, [7, 8]);
console.log(result); // prints "myId text 56"
```

----------------------------------------

TITLE: Matching Body ARIA Snapshot using Playwright Python (Async)
DESCRIPTION: This Python snippet demonstrates the asynchronous way to match the ARIA snapshot of the body element. It uses `await expect(page.locator("body")).to_match_aria_snapshot()` with a template defining the expected 'heading' role and its name 'title'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_9

LANGUAGE: python
CODE:
```
```python async
await expect(page.locator("body")).to_match_aria_snapshot("""
  - heading "title"
""")
```
```

----------------------------------------

TITLE: Asserting Accessible Name with Playwright C#
DESCRIPTION: Demonstrates how to use the `LocatorAssertions.toHaveAccessibleName` method in C# to verify if a locator element has a specific accessible name. This is useful for ensuring web accessibility compliance.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_13

LANGUAGE: C#
CODE:
```
var locator = Page.GetByRole(AriaRole.Button);
await Expect(locator).ToHaveAccessibleNameAsync("Submit");
```

----------------------------------------

TITLE: File Upload with Multipart Form Data in Java
DESCRIPTION: Demonstrates how to upload files using multipart/form-data encoding with a file path.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-requestoptions.md#2025-04-22_snippet_2

LANGUAGE: java
CODE:
```
Path path = Paths.get("members.csv");
APIResponse response = context.request().post("https://example.com/upload_members",
  RequestOptions.create().setMultipart(FormData.create().set("membersList", path)));
```

----------------------------------------

TITLE: Setting User Agent in Playwright Test
DESCRIPTION: Configures a custom user agent for tests using the TestOptions.userAgent property in the Playwright configuration file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_33

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    userAgent: 'some custom ua',
  },
});
```

----------------------------------------

TITLE: Setting Form Fields with Files in C#
DESCRIPTION: Shows how to use the Set method to add text and file fields to a FormData object in C#, including creating FilePayload objects with specific MIME types and file contents.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-formdata.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
var multipart = Context.APIRequest.CreateFormData();
// Only name and value are set.
multipart.Set("firstName", "John");
// Name, value, filename and Content-Type are set.
multipart.Set("profilePicture", new FilePayload()
{
    Name = "john.jpg",
    MimeType = "image/jpeg",
    Buffer = File.ReadAllBytes("john.jpg")
});
multipart.Set("age", 30);
await Page.APIRequest.PostAsync("https://localhost/submit", new() { Multipart = multipart });
```

----------------------------------------

TITLE: Creating JSHandle with Page.evaluateHandle in JavaScript
DESCRIPTION: Demonstrates how to create a JSHandle for the window object using Page.evaluateHandle method in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const windowHandle = await page.evaluateHandle(() => window);
```

----------------------------------------

TITLE: Mounting React Component for Testing in Playwright
DESCRIPTION: Demonstrates how to test a React component using Playwright's experimental component testing feature. It shows mounting the component, making assertions, and taking screenshots.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_47

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/experimental-ct-react';
import App from './App';

// Let's test component in a dark scheme!
test.use({ colorScheme: 'dark' });

test('should render', async ({ mount }) => {
  const component = await mount(<App></App>);

  // As with any Playwright test, assert locator text.
  await expect(component).toContainText('React');
  // Or do a screenshot 🚀
  await expect(component).toHaveScreenshot();
  // Or use any Playwright method
  await component.click();
});
```

----------------------------------------

TITLE: Matching Body ARIA Snapshot using Playwright JS
DESCRIPTION: This JavaScript snippet demonstrates how to match the ARIA snapshot of the entire body element containing a simple heading. It uses `expect(page.locator('body')).toMatchAriaSnapshot()` with a template matching the 'heading' role and its name 'title'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
```js
await expect(page.locator('body')).toMatchAriaSnapshot(`
  - heading "title"
`);
```
```

----------------------------------------

TITLE: Handling Worker Events in Playwright using Java
DESCRIPTION: This Java snippet shows how to use event listeners (`onWorker`, `onClose`) in Playwright's Java binding to react to WebWorker creation and destruction. It registers listeners using lambda expressions to print the worker's URL upon creation and destruction. The snippet also demonstrates how to retrieve and iterate over the list of current workers associated with the page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-worker.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
page.onWorker(worker -> {
  System.out.println("Worker created: " + worker.url());
  worker.onClose(worker1 -> System.out.println("Worker destroyed: " + worker1.url()));
});
System.out.println("Current workers:");
for (Worker worker : page.workers())
  System.out.println("  " + worker.url());
```

----------------------------------------

TITLE: Using waitForEvent to Respond to Electron Window Creation
DESCRIPTION: Example showing how to wait for a window to be created in response to a user action, using the waitForEvent method to handle asynchronous events.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-electronapplication.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
const windowPromise = electronApp.waitForEvent('window');
await mainWindow.click('button');
const window = await windowPromise;
```

----------------------------------------

TITLE: Mocking WebSocket Connections with Python Playwright
DESCRIPTION: Provides an example of using `page.route_web_socket` in Playwright for Python to intercept and mock WebSocket communication. It defines a message handler that sends a 'response' back when a 'request' message is received on a specific WebSocket URL.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_7

LANGUAGE: python
CODE:
```
def message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    ws.send("response")

page.route_web_socket("/ws", lambda ws: ws.on_message(
    lambda message: message_handler(ws, message)
))
```

----------------------------------------

TITLE: JavaScript Test Init Script Setup
DESCRIPTION: Test setup using Playwright test framework with initialization script
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';
import path from 'path';

test.beforeEach(async ({ page }) => {
  // Add script for every test in the beforeEach hook.
  // Make sure to correctly resolve the script path.
  await page.addInitScript({ path: path.resolve(__dirname, '../mocks/preload.js') });
});
```

----------------------------------------

TITLE: Implementing Custom Reporter in TypeScript
DESCRIPTION: TypeScript implementation of a custom test reporter with proper type annotations. Provides the same functionality as the JavaScript version but with type safety.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporter-api/class-reporter.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type {
  Reporter, FullConfig, Suite, TestCase, TestResult, FullResult
} from '@playwright/test/reporter';

class MyReporter implements Reporter {
  constructor(options: { customOption?: string } = {}) {
    console.log(`my-awesome-reporter setup with customOption set to ${options.customOption}`);
  }

  onBegin(config: FullConfig, suite: Suite) {
    console.log(`Starting the run with ${suite.allTests().length} tests`);
  }

  onTestBegin(test: TestCase) {
    console.log(`Starting test ${test.title}`);
  }

  onTestEnd(test: TestCase, result: TestResult) {
    console.log(`Finished test ${test.title}: ${result.status}`);
  }

  onEnd(result: FullResult) {
    console.log(`Finished the run: ${result.status}`);
  }
}
export default MyReporter;
```

----------------------------------------

TITLE: Starting Playwright Tracing (JavaScript)
DESCRIPTION: Shows how to initiate Playwright tracing using `context.tracing.start()` in JavaScript, typically enabling options like `screenshots` and `snapshots`. This call begins the trace recording, which must be concluded with `context.tracing.stop()` to save the file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_5

LANGUAGE: js
CODE:
```
await context.tracing.start({ screenshots: true, snapshots: true });
const page = await context.newPage();
await page.goto('https://playwright.dev');
await context.tracing.stop({ path: 'trace.zip' });
```

----------------------------------------

TITLE: Updating Geolocation During Test in Playwright
DESCRIPTION: Changes the geolocation during test execution using Playwright Test. This allows testing how an application responds to location changes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_50

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.use({
  geolocation: { longitude: 41.890221, latitude: 12.492348 },
  permissions: ['geolocation'],
});

test('my test with geolocation', async ({ page, context }) => {
  // overwrite the location for this test
  await context.setGeolocation({ longitude: 48.858455, latitude: 2.294474 });
});
```

----------------------------------------

TITLE: Setting Timezone for Browser Context
DESCRIPTION: Defines the timezoneId option for browser contexts. This changes the timezone of the context using ICU timezone identifiers, defaulting to the system timezone.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_56

LANGUAGE: js
CODE:
```
- `timezoneId` <[string]>

Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1)
for a list of supported timezone IDs. Defaults to the system timezone.
```

----------------------------------------

TITLE: Unsubscribing from Page Events in Multiple Languages
DESCRIPTION: These snippets demonstrate how to unsubscribe from page events in JavaScript, Java, Python, and C#.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
function logRequest(interceptedRequest) {
  console.log('A request was made:', interceptedRequest.url());
}
page.on('request', logRequest);
// Sometime later...
page.removeListener('request', logRequest);
```

LANGUAGE: java
CODE:
```
Consumer<Request> logRequest = interceptedRequest -> {
  System.out.println("A request was made: " + interceptedRequest.url());
};
page.onRequest(logRequest);
// Sometime later...
page.offRequest(logRequest);
```

LANGUAGE: python
CODE:
```
def log_request(intercepted_request):
    print("a request was made:", intercepted_request.url)
page.on("request", log_request)
# sometime later...
page.remove_listener("request", log_request)
```

LANGUAGE: csharp
CODE:
```
void PageLoadHandler(object _, IPage p) {
    Console.WriteLine("Page loaded!");
};

page.Load += PageLoadHandler;
// Do some work...
page.Load -= PageLoadHandler;
```

----------------------------------------

TITLE: Asserting ARIA Roles with toHaveRole in C#
DESCRIPTION: Demonstrates how to use the toHaveRole method to ensure a locator points to an element with a specific ARIA role. This example checks if an element with test ID 'save-button' has the role 'button'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_33

LANGUAGE: csharp
CODE:
```
var locator = Page.GetByTestId("save-button");
await Expect(locator).ToHaveRoleAsync(AriaRole.Button);
```

----------------------------------------

TITLE: Waiting for Page Load in JavaScript
DESCRIPTION: Example of using the waitUntil option when navigating to a page. The 'domcontentloaded' value now only waits for the target frame's DOMContentLoaded event, not iframes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_35

LANGUAGE: javascript
CODE:
```
await page.goto('https://playwright.dev', {
  waitUntil: 'domcontentloaded',
});
```

----------------------------------------

TITLE: Custom Expect Messages in Playwright Tests
DESCRIPTION: Demonstrates how to specify a custom error message for expect assertions in Playwright tests. This can provide more context when a test fails.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_53

LANGUAGE: javascript
CODE:
```
await expect(page.locator('text=Name'), 'should be logged in').toBeVisible();
```

----------------------------------------

TITLE: Triggering Select-All Keyboard Shortcut in Playwright (Python Sync)
DESCRIPTION: This synchronous Python snippet shows how to simulate the 'Select All' keyboard shortcut (Ctrl+A or Cmd+A) using Playwright's `page.keyboard.press` method. The 'ControlOrMeta' modifier automatically resolves to 'Control' on Windows/Linux and 'Meta' (Command) on macOS.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_13

LANGUAGE: python
CODE:
```
```python sync
page.keyboard.press("ControlOrMeta+A")
```
```

----------------------------------------

TITLE: Recording Playwright Tests with Custom Setup in JavaScript
DESCRIPTION: JavaScript example showing how to use Playwright codegen with a custom setup including request routing. The script launches Chrome in headed mode, configures the browser context with routing, and then pauses execution to allow manual recording.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_28

LANGUAGE: javascript
CODE:
```
const { chromium } = require('@playwright/test');

(async () => {
  // Make sure to run headed.
  const browser = await chromium.launch({ headless: false });

  // Setup context however you like.
  const context = await browser.newContext({ /* pass any options */ });
  await context.route('**/*', route => route.continue());

  // Pause the page, and start recording manually.
  const page = await context.newPage();
  await page.pause();
})();
```

----------------------------------------

TITLE: Converting FrameLocator to Locator in Playwright C#
DESCRIPTION: Demonstrates using the new `FrameLocator.Owner` property in C# to get a `Locator` for the iframe element itself from a `FrameLocator`. Useful for interacting with the iframe element after obtaining a frame locator.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_20

LANGUAGE: C#
CODE:
```
var frameLocator = page.FrameLocator("iframe[name='embedded']");
// ...
var locator = frameLocator.Owner;
await Expect(locator).ToBeVisibleAsync();
```

----------------------------------------

TITLE: Manually Creating a Browser Context with Sync Playwright (Python)
DESCRIPTION: Provides the synchronous Python code for launching a browser (`playwright.chromium.launch()`), creating an isolated `BrowserContext` (`browser.new_context()`), and obtaining a `Page` (`context.new_page()`) using the `playwright.sync_api`. This demonstrates manual context creation in a synchronous Python script.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
browser = playwright.chromium.launch()
context = browser.new_context()
page = context.new_page()
```

----------------------------------------

TITLE: Correct Way to Configure Custom Parameters in Playwright Config
DESCRIPTION: Example showing the correct approach to defining custom parameters in Playwright configuration in v1.18 and later, using the option: true flag to make fixtures configurable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_59

LANGUAGE: javascript
CODE:
```
// CORRECT: THIS SNIPPET WORKS SINCE v1.18.

// fixtures.js
const test = base.extend({
  // Fixtures marked as "option: true" will get a value specified in the config,
  // or fallback to the default value.
  myParameter: ['default', { option: true }],
});

// playwright.config.js
module.exports = {
  use: {
    myParameter: 'value',
  },
};
```

----------------------------------------

TITLE: Marking Tests as Expected to Fail in JavaScript
DESCRIPTION: Shows how to mark a test as 'should fail' using test.fail(). This is useful for documenting known issues or acknowledging broken functionality until it's fixed.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_27

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.fail('not yet ready', async ({ page }) => {
  // ...
});
```

----------------------------------------

TITLE: Programmatically Recording Network Traffic to HAR in Playwright Java
DESCRIPTION: Shows how to record network traffic programmatically by configuring a `BrowserContext` with `setRecordHarPath` and `setRecordHarUrlFilter`. The HAR file is saved upon closing the context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_38

LANGUAGE: java
CODE:
```
BrowserContext context = browser.newContext(new Browser.NewContextOptions()
    .setRecordHarPath(Paths.get("example.har"))
    .setRecordHarUrlFilter("**/api/**"));

// ... Perform actions ...

// Close context to ensure HAR is saved to disk.
context.close();
```

----------------------------------------

TITLE: Recording HAR File in Java
DESCRIPTION: Java implementation for recording network traffic to a HAR file using Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_14

LANGUAGE: java
CODE:
```
// Get the response from the HAR file
page.routeFromHAR(Path.of("./hars/fruit.har"), new RouteFromHAROptions()
  .setUrl("*/**/api/v1/fruits")
  .setUpdate(true)
);

// Go to the page
page.navigate("https://demo.playwright.dev/api-mocking");

// Assert that the fruit is visible
assertThat(page.getByText("Strawberry")).isVisible();
```

----------------------------------------

TITLE: Isolated API Request Context Cookie Management
DESCRIPTION: Shows how to create and use an isolated APIRequestContext that maintains its own cookie storage separate from the browser context, with manual cookie state management.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-js.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
test('global context request has isolated cookie storage', async ({
  page,
  context,
  browser,
  playwright
}) => {
  // Create a new instance of APIRequestContext with isolated cookie storage.
  const request = await playwright.request.newContext();
  await context.route('https://www.github.com/', async route => {
    const response = await request.fetch(route.request());
    const responseHeaders = response.headers();

    const responseCookies = new Map(responseHeaders['set-cookie']
        .split('\n')
        .map(c => c.split(';', 2)[0].split('=')));
    // The response will have 3 cookies in 'Set-Cookie' header.
    expect(responseCookies.size).toBe(3);
    const contextCookies = await context.cookies();
    // The browser context will not have any cookies from the isolated API request.
    expect(contextCookies.length).toBe(0);

    // Manually export cookie storage.
    const storageState = await request.storageState();
    // Create a new context and initialize it with the cookies from the global request.
    const browserContext2 = await browser.newContext({ storageState });
    const contextCookies2 = await browserContext2.cookies();
    // The new browser context will already contain all the cookies from the API response.
    expect(
        new Map(contextCookies2.map(({ name, value }) => [name, value]))
    ).toEqual(responseCookies);

    await route.fulfill({
      response,
      headers: { ...responseHeaders, foo: 'bar' },
    });
  });
  await page.goto('https://www.github.com/');
  await request.dispose();
});
```

----------------------------------------

TITLE: Using Viewport Assertions in Playwright
DESCRIPTION: Shows how to use the new toBeInViewport assertion to verify element visibility within the viewport using different ratio options.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_33

LANGUAGE: javascript
CODE:
```
const button = page.getByRole('button');

// Make sure at least some part of element intersects viewport.
await expect(button).toBeInViewport();

// Make sure element is fully outside of viewport.
await expect(button).not.toBeInViewport();

// Make sure that at least half of the element intersects viewport.
await expect(button).toBeInViewport({ ratio: 0.5 });
```

----------------------------------------

TITLE: Dragging Elements with Locator.DragToAsync in C#
DESCRIPTION: Shows how to drag a source element to a target element in C# using Playwright's DragToAsync method. Demonstrates basic usage and advanced positioning options.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_43

LANGUAGE: csharp
CODE:
```
var source = Page.Locator("#source");
var target = Page.Locator("#target");

await source.DragToAsync(target);
// or specify exact positions relative to the top-left corners of the elements:
await source.DragToAsync(target, new()
{
    SourcePosition = new() { X = 34, Y = 7 },
    TargetPosition = new() { X = 10, Y = 20 },
});
```

----------------------------------------

TITLE: Launching a Browser with Custom Arguments Using Playwright Python (Async)
DESCRIPTION: Shows how to specify launch options (ignore default args) when starting a browser using Playwright's async Python API. Requires Playwright Python async bindings. Inputs include browser options like 'ignore_default_args'. Returns a browser instance with customized settings.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_12

LANGUAGE: python
CODE:
```
browser = await playwright.chromium.launch( # or \"firefox\" or \"webkit\".\n    ignore_default_args=[\"--mute-audio\"]\n)
```

----------------------------------------

TITLE: Configuring Default Pytest Options in pytest.ini
DESCRIPTION: Example configuration file for setting default pytest options to run tests in Firefox with UI.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_1

LANGUAGE: ini
CODE:
```
# content of pytest.ini
[pytest]
# Run firefox with UI
addopts = --headed --browser firefox
```

----------------------------------------

TITLE: Debugging Playwright Tests with Inspector (PowerShell)
DESCRIPTION: Commands to debug Playwright tests using the Playwright Inspector in PowerShell.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_18

LANGUAGE: csharp
CODE:
```
$env:PWDEBUG=1
dotnet test
```

----------------------------------------

TITLE: Detecting Print Dialogs with Playwright (Java)
DESCRIPTION: Demonstrates how to detect if a print dialog was triggered by `window.print()`. It uses `page.evaluate` to inject JavaScript that replaces `window.print` with a function resolving a Promise, then uses `page.waitForFunction` to wait for the promise after clicking the print trigger.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_16

LANGUAGE: java
CODE:
```
```java
page.navigate("<url>");

page.evaluate("(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()");
page.getByText("Print it!").click();

page.waitForFunction("window.waitForPrintDialog");
```
```

----------------------------------------

TITLE: Updating Geolocation in Java
DESCRIPTION: Changes the geolocation of a browser context using the Playwright Java client. This allows testing how an application responds to location changes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_52

LANGUAGE: java
CODE:
```
context.setGeolocation(new Geolocation(48.858455, 2.294474));
```

----------------------------------------

TITLE: Monitoring JavaScript variables with sync Python
DESCRIPTION: Shows how to wait for a JavaScript variable to change using wait_for_function in synchronous Python. The script sets a timer to change a variable and waits for that change to occur.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_113

LANGUAGE: python
CODE:
```
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = webkit.launch()
    page = browser.new_page()
    page.evaluate("window.x = 0; setTimeout(() => { window.x = 100 }, 1000);")
    page.wait_for_function("() => window.x > 0")
    browser.close()

with sync_playwright() as playwright:
    run(playwright)
```

----------------------------------------

TITLE: Test File Using Global Setup
DESCRIPTION: Example test file that depends on the globally setup database.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { test, expect } from '@playwright/test';

test('menu', async ({ page }) => {
  // Your test that depends on the database
});
```

----------------------------------------

TITLE: Modifying Request Headers in C#
DESCRIPTION: Demonstrates how to modify request headers while falling back to the subsequent handler in Playwright using C#. This allows for intermediate route handlers to modify the URL, method, headers, and post data of the request.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_20

LANGUAGE: csharp
CODE:
```
await page.RouteAsync("**/*", async route =>
{
    var headers = new Dictionary<string, string>(route.Request.Headers) { { "foo", "foo-value" } };
    headers.Remove("bar");
    await route.FallbackAsync(new() { Headers = headers });
});
```

----------------------------------------

TITLE: Python Page Evaluation Example
DESCRIPTION: Demonstrates evaluating JavaScript with mixed serializable objects and handles in Python using Playwright
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
page.evaluate("""
    x => x.button1.textContent + x.list[0].textContent + String(x.foo)""",
    { 'button1': button1, 'list': [button2], 'foo': None })
```

----------------------------------------

TITLE: Configuring Output Directory in Playwright
DESCRIPTION: Configuration to specify custom output directory for test execution files and example of creating temporary files during tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_16

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  outputDir: './test-results',
});
```

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';
import fs from 'fs';

test('example test', async ({}, testInfo) => {
  const file = testInfo.outputPath('temporary-file.txt');
  await fs.promises.writeFile(file, 'Put some data to the file', 'utf8');
});
```

----------------------------------------

TITLE: Passing a JSHandle as an Argument to page.evaluate in Java
DESCRIPTION: Illustrates creating a JavaScript array in the page using `page.evaluateHandle`, obtaining a [JSHandle] to it. Subsequently demonstrates passing this handle into `page.evaluate` to interact with the array (get length, add elements) and finally disposing of the handle using `dispose()`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_11

LANGUAGE: java
CODE:
```
```java
// Create new array in page.
JSHandle myArrayHandle = page.evaluateHandle("() => {\n" +
  "  window.myArray = [1];\n" +
  "  return myArray;\n" +
  "}");

// Get the length of the array.
int length = (int) page.evaluate("a => a.length", myArrayHandle);

// Add one more element to the array using the handle
Map<String, Object> arg = new HashMap<>();
arg.put("myArray", myArrayHandle);
arg.put("newElement", 2);
page.evaluate("arg => arg.myArray.add(arg.newElement)", arg);

// Release the object when it is no longer needed.
myArrayHandle.dispose();
```
```

----------------------------------------

TITLE: Generating PDF with Screen Media Type - Python
DESCRIPTION: Demonstrates how to generate a PDF with screen media type using Playwright in Python. Sets the media type to screen and saves the PDF to a file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_72

LANGUAGE: python
CODE:
```
page.emulate_media(media="screen")
page.pdf(path="page.pdf")
```

----------------------------------------

TITLE: Hover and Click Using ElementHandle in CSharp
DESCRIPTION: Shows hovering and clicking operations on a text element in CSharp using ElementHandle in Playwright. Utilizes async selectors for interaction.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_9

LANGUAGE: CSharp
CODE:
```
var handle = await page.QuerySelectorAsync("text=Submit");
await handle.HoverAsync();
await handle.ClickAsync();
```

----------------------------------------

TITLE: Exposing SHA256 Function to BrowserContext in JavaScript
DESCRIPTION: This snippet demonstrates how to expose a SHA256 hashing function to all pages in a browser context using Playwright with JavaScript. It creates a new context, exposes the function, and then uses it in a page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
const { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.
const crypto = require('crypto');

(async () => {
  const browser = await webkit.launch({ headless: false });
  const context = await browser.newContext();
  await context.exposeFunction('sha256', text =>
    crypto.createHash('sha256').update(text).digest('hex'),
  );
  const page = await context.newPage();
  await page.setContent(`
    <script>
      async function onClick() {
        document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');
      }
    </script>
    <button onclick="onClick()">Click me</button>
    <div></div>
  `);
  await page.getByRole('button').click();
})();
```

----------------------------------------

TITLE: Record Network Traffic Programmatically in Playwright Python
DESCRIPTION: Illustrates how to programmatically record network traffic into a HAR file by creating a new browser context with the `record_har_path` option. The async and sync versions are shown.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_33

LANGUAGE: python
CODE:
```
context = await browser.new_context(record_har_path="github.har.zip")
# ... do stuff ...
await context.close()
```

LANGUAGE: python
CODE:
```
context = browser.new_context(record_har_path="github.har.zip")
# ... do stuff ...
context.close()
```

----------------------------------------

TITLE: Clearing Browser Cookies with Filters in Playwright C#
DESCRIPTION: Shows how to use the updated `BrowserContext.ClearCookiesAsync` method in C# to clear all cookies or filter them by name or domain. This provides granular control over cookie management during tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_18

LANGUAGE: C#
CODE:
```
// Clear all cookies.
await Context.ClearCookiesAsync();
// New: clear cookies with a particular name.
await Context.ClearCookiesAsync(new() { Name = "session-id" });
// New: clear cookies for a particular domain.
await Context.ClearCookiesAsync(new() { Domain = "my-origin.com" });
```

----------------------------------------

TITLE: Specify Custom Expect Message in Playwright Python
DESCRIPTION: Demonstrates how to add a custom message to a Playwright Python assertion using the second argument of the `expect` function. This message will be included in the error output if the assertion fails, providing more context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-csharp-java-python.md#_snippet_0

LANGUAGE: python
CODE:
```
expect(page.get_by_text("Name"), "should be logged in").to_be_visible()
```

----------------------------------------

TITLE: Configuring Playwright Expect Timeout (JS)
DESCRIPTION: Illustrates creating a new `expect` instance with a default timeout value using `expect.configure`. This allows applying a specific timeout to a group of assertions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_37

LANGUAGE: js
CODE:
```
const slowExpect = expect.configure({ timeout: 10000 });
await slowExpect(locator).toHaveText('Submit');
```

----------------------------------------

TITLE: Handling Failed HTTP Requests (Java)
DESCRIPTION: Sets up Playwright for Java's onRequestFailed handler to print failed request URLs and details. Used for logging and troubleshooting failed page resources. The snippet assumes a running Playwright session and a ready page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_19

LANGUAGE: java
CODE:
```
page.onRequestFailed(request -> {
  System.out.println(request.url() + " " + request.failure());
});
```

----------------------------------------

TITLE: Accessible Name Option for Role Selectors
DESCRIPTION: Defines the `name` option for role-based selectors to match elements by their accessible name, with case-insensitive substring matching by default.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_123

LANGUAGE: typescript
CODE:
```
* since: v1.27
- `name` <[string]|[RegExp]>
```

----------------------------------------

TITLE: Disabling JavaScript in Playwright Test
DESCRIPTION: Configures a specific test to run with JavaScript disabled using Playwright Test. This allows testing how web applications behave in environments without JavaScript support.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_74

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.use({ javaScriptEnabled: false });

test('test with no JavaScript', async ({ page }) => {
  // ...
});
```

----------------------------------------

TITLE: Basic Test Step Usage with Skip Condition
DESCRIPTION: Demonstrates how to use test steps with conditional skipping based on browser type.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-teststepinfo.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('basic test', async ({ page, browserName }) => {
  await test.step('check some behavior', async step => {
    step.skip(browserName === 'webkit', 'The feature is not available in WebKit');
    // ... rest of the step code
  });
});
```

----------------------------------------

TITLE: Using toBeDefined Method in GenericAssertions
DESCRIPTION: Shows how to use the 'toBeDefined' method to ensure a value is not undefined. This example demonstrates a passing test with a null value.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
const value = null;
expect(value).toBeDefined();
```

----------------------------------------

TITLE: Opening Remote Traces Using CLI
DESCRIPTION: Commands to open remote trace files directly from URLs using Playwright CLI.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx playwright show-trace https://example.com/trace.zip
```

LANGUAGE: bash
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="show-trace https://example.com/trace.zip"
```

LANGUAGE: bash
CODE:
```
playwright show-trace https://example.com/trace.zip
```

LANGUAGE: bash
CODE:
```
pwsh bin/Debug/netX/playwright.ps1 show-trace https://example.com/trace.zip
```

----------------------------------------

TITLE: Handling JSON WebSocket Messages with Playwright in C#
DESCRIPTION: Uses Playwright for C# to process JSON messages, utilizing System.Text.Json for JSON parsing and response construction. Requires a setup with Playwright in C#.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_9

LANGUAGE: csharp
CODE:
```
await page.RouteWebSocketAsync("wss://example.com/ws", ws => {
  ws.OnMessage(frame => {
    using var jsonDoc = JsonDocument.Parse(frame.Text);
    JsonElement root = jsonDoc.RootElement;
    if (root.TryGetProperty("request", out JsonElement requestElement) && requestElement.GetString() == "question")
    {
      var response = new Dictionary<string, string> { ["response"] = "answer" };
      string jsonResponse = JsonSerializer.Serialize(response);
      ws.Send(jsonResponse);
    }
  });
});
```

----------------------------------------

TITLE: Launching a Browser with Custom Arguments Using Playwright JavaScript
DESCRIPTION: Demonstrates launching a browser while filtering out default arguments such as '--mute-audio' with Playwright JS. Requires Playwright Node.js, and the browser type (e.g., chromium). The input is an options object with 'ignoreDefaultArgs'. Output is a browser instance with altered launch parameters.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
const browser = await chromium.launch({  // Or 'firefox' or 'webkit'.\n  ignoreDefaultArgs: ['--mute-audio']\n});
```

----------------------------------------

TITLE: Using Aria Snapshots for Accessibility Testing in Playwright
DESCRIPTION: This snippet demonstrates how to use the new toMatchAriaSnapshot assertion to verify page structure by comparing it to an expected accessibility tree represented as YAML.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
await page.goto('https://playwright.dev');
await expect(page.locator('body')).toMatchAriaSnapshot(`
  - banner:
    - heading /Playwright enables reliable/ [level=1]
    - link "Get started"
    - link "Star microsoft/playwright on GitHub"
  - main:
    - img "Browsers (Chromium, Firefox, WebKit)"
    - heading "Any browser • Any platform • One API"
`);
```

----------------------------------------

TITLE: Launching and Connecting to Playwright Android Server in JavaScript
DESCRIPTION: This snippet shows how to launch a Playwright Android server and connect a client to it. The server-side code launches the server and retrieves the WebSocket endpoint, while the client-side connects to the server using this endpoint. Required dependencies include an Android device and the Playwright library. The server setup includes optional parameters like device serial number and host settings. Outputs include server endpoint and connected device details.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-android.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
const { _android } = require('playwright');

(async () => {
  const browserServer = await _android.launchServer({
    // If you have multiple devices connected and want to use a specific one.
    // deviceSerialNumber: '<deviceSerialNumber>',
  });
  const wsEndpoint = browserServer.wsEndpoint();
  console.log(wsEndpoint);
})();
```

LANGUAGE: js
CODE:
```
const { _android } = require('playwright');

(async () => {
  const device = await _android.connect('<wsEndpoint>');

  console.log(device.model());
  console.log(device.serial());
  await device.shell('am force-stop com.android.chrome');
  const context = await device.launchBrowser();

  const page = await context.newPage();
  await page.goto('https://webkit.org/');
  console.log(await page.evaluate(() => window.location.href));
  await page.screenshot({ path: 'page-chrome-1.png' });

  await context.close();
})();
```

----------------------------------------

TITLE: Authentication Setup with IndexedDB Storage in Playwright v1.51
DESCRIPTION: Example code demonstrating how to set up authentication that saves IndexedDB content using the storageState method with the indexedDB option.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { test as setup, expect } from '@playwright/test';
import path from 'path';

const authFile = path.join(__dirname, '../playwright/.auth/user.json');

setup('authenticate', async ({ page }) => {
  await page.goto('/');
  // ... perform authentication steps ...

  // make sure to save indexedDB
  await page.context().storageState({ path: authFile, indexedDB: true });
});
```

----------------------------------------

TITLE: Evaluating Selectors with Playwright Frame - C#
DESCRIPTION: Illustrates how to use Playwright in C# for selector evaluation on frame elements. Suitable for accessing element values or HTML content, while supporting tasks like joining HTML strings.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_12

LANGUAGE: C#
CODE:
```
var searchValue = await frame.EvalOnSelectorAsync<string>("#search", "el => el.value");
var preloadHref = await frame.EvalOnSelectorAsync<string>("link[rel=preload]", "el => el.href");
var html = await frame.EvalOnSelectorAsync(".main-container", "(e, suffix) => e.outerHTML + suffix", "hello");
```

----------------------------------------

TITLE: Intercepting and Modifying WebSocket Messages in Java
DESCRIPTION: This code snippet demonstrates how to connect to the actual WebSocket server while intercepting and modifying messages in Java. It modifies 'request' messages to 'request2' and passes through other messages unmodified.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_22

LANGUAGE: java
CODE:
```
page.routeWebSocket("wss://example.com/ws", ws -> {
  WebSocketRoute server = ws.connectToServer();
  ws.onMessage(frame -> {
    if ("request".equals(frame.text()))
      server.send("request2");
    else
      server.send(frame.text());
  });
});
```

----------------------------------------

TITLE: Starting and Stopping Chromium Tracing with Playwright - JavaScript
DESCRIPTION: Demonstrates how to start and stop Chromium tracing using Playwright in JavaScript. The browser.startTracing method initiates the tracing session, optionally scoped to a page and with the output written to a specified JSON file. After performing actions such as navigation, call browser.stopTracing to end tracing and persist the trace file. Requires Playwright for JavaScript; expects a Browser and Page object. Inputs include the page object and options such as the output path. Outputs a trace file for analysis in Chrome DevTools. Screenshots and custom categories are optionally configurable. Not compatible with Playwright's own tracing feature.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
await browser.startTracing(page, { path: 'trace.json' });
await page.goto('https://www.google.com');
await browser.stopTracing();
```

----------------------------------------

TITLE: Using CDPSession with Chrome DevTools Protocol in Python (Sync)
DESCRIPTION: Shows synchronous Python code for working with CDPSession, enabling animation tracking, handling events, and modifying playback rates. This is the non-async version of the Python CDPSession API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-cdpsession.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
client = page.context.new_cdp_session(page)
client.send("Animation.enable")
client.on("Animation.animationCreated", lambda: print("animation created!"))
response = client.send("Animation.getPlaybackRate")
print("playback rate is " + str(response["playbackRate"]))
client.send("Animation.setPlaybackRate", {
    "playbackRate": response["playbackRate"] / 2
})
```

----------------------------------------

TITLE: Injecting Initialization Script via Path (JavaScript)
DESCRIPTION: Illustrates injecting a JavaScript initialization file into the page before scripts run using addInitScript with a file path. The preload.js file should be present in the current directory. Used to manipulate or seed the page's environment prior to any user scripts. Requires Playwright and access to the file system.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_22

LANGUAGE: js
CODE:
```
// In your playwright script, assuming the preload.js file is in same directory
await page.addInitScript({ path: './preload.js' });
```

----------------------------------------

TITLE: Scanning Specific Page Elements for Accessibility Issues
DESCRIPTION: Demonstrates how to test a specific part of a page for accessibility violations, particularly focusing on dynamic elements that appear after user interaction like navigation menus.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-java.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
public class HomepageTests {
  @Test
  void navigationMenuFlyoutShouldNotHaveAutomaticallyDetectableAccessibilityViolations() throws Exception {
    page.navigate("https://your-site.com/");

    page.locator("button[aria-label=\"Navigation Menu\"]").click();

    page.locator("#navigation-menu-flyout").waitFor();

    AxeResults accessibilityScanResults = new AxeBuilder(page)
      .include(Arrays.asList("#navigation-menu-flyout"))
      .analyze();

    assertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());
  }
}
```

----------------------------------------

TITLE: Matching Body ARIA Snapshot using Playwright Python (Sync)
DESCRIPTION: This Python snippet shows the synchronous way to match the ARIA snapshot of the body element. It uses `expect(page.locator("body")).to_match_aria_snapshot()` with a template defining the expected 'heading' role and its name 'title'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
```python sync
expect(page.locator("body")).to_match_aria_snapshot("""
  - heading "title"
""")
```
```

----------------------------------------

TITLE: Pressing ControlOrMeta Modifier Key with Keyboard.PressAsync (C#)
DESCRIPTION: Demonstrates using the 'ControlOrMeta' modifier key with Keyboard.PressAsync. This key automatically maps to 'Meta' on macOS and 'Control' on Windows/Linux for cross-platform shortcuts.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_12

LANGUAGE: csharp
CODE:
```
// Press the common keyboard shortcut Control+S or Meta+S to trigger a "Save" operation.
await page.Keyboard.PressAsync("ControlOrMeta+S");
```

----------------------------------------

TITLE: Custom Matcher Extension in Playwright
DESCRIPTION: Example of extending Playwright assertions with custom matchers using expect.extend(), showing how to add custom assertion methods.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_21

LANGUAGE: javascript
CODE:
```
import { expect as baseExpect } from '@playwright/test';
export const expect = baseExpect.extend({
  async toHaveAmount(locator: Locator, expected: number, options?: { timeout?: number }) {
    // ... see documentation for how to write matchers.
  },
});

test('pass', async ({ page }) => {
  await expect(page.getByTestId('cart')).toHaveAmount(5);
});
```

----------------------------------------

TITLE: Installing default browsers using Playwright CLI
DESCRIPTION: This snippet shows how to install the default set of browsers supported by Playwright using the command line interface in different languages. It's essential to use Playwright's CLI tool for browser installation to ensure compatibility with the testing framework.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
npx playwright install
```

LANGUAGE: java
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"
```

LANGUAGE: python
CODE:
```
playwright install
```

LANGUAGE: csharp
CODE:
```
pwsh bin/Debug/netX/playwright.ps1 install
```

----------------------------------------

TITLE: Passing arguments to waitForFunction in Java
DESCRIPTION: Demonstrates how to pass a selector argument to the waitForFunction predicate in Java. The function waits until an element matching the selector appears in the DOM.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_116

LANGUAGE: java
CODE:
```
String selector = ".foo";
page.waitForFunction("selector => !!document.querySelector(selector)", selector);
```

----------------------------------------

TITLE: Creating JSHandle with Page.evaluate_handle in Python (Async)
DESCRIPTION: Illustrates creating a JSHandle for the window object using Page.evaluate_handle method in Python with async syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
window_handle = await page.evaluate_handle("window")
```

----------------------------------------

TITLE: Running Playwright Docker for Java Web Scraping
DESCRIPTION: Command to run the Playwright Docker container for Java web scraping with security measures for untrusted websites.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_11

LANGUAGE: bash
CODE:
```
docker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright/java:v%%VERSION%%-noble /bin/bash
```

----------------------------------------

TITLE: File Path Option for Saving Screenshots
DESCRIPTION: Defines the `path` option that specifies where to save screenshot images. The image type is inferred from the file extension.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_105

LANGUAGE: typescript
CODE:
```
- `path` <[path]>
```

----------------------------------------

TITLE: Handling WebSocket Events in Python
DESCRIPTION: This snippet illustrates how to manage WebSocket events in Playwright using Python. It shows how to log WebSocket opening, frame sending/receiving, and closing events.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_34

LANGUAGE: python
CODE:
```
def on_web_socket(ws):
    print(f"WebSocket opened: {ws.url}")
    ws.on("framesent", lambda payload: print(payload))
    ws.on("framereceived", lambda payload: print(payload))
    ws.on("close", lambda payload: print("WebSocket closed"))

page.on("websocket", on_web_socket)
```

----------------------------------------

TITLE: Retrieving Storage State in APIRequestContext (Java/C#)
DESCRIPTION: Returns the current storage state for an API request context as a string. This variant is specific to Java and C# languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_18

LANGUAGE: markdown
CODE:
```
## async method: APIRequestContext.storageState
* since: v1.16
* langs: java, csharp
- returns: <[string]>

### option: APIRequestContext.storageState.path = %%-storagestate-option-path-%%
* since: v1.16

### option: APIRequestContext.storageState.indexedDB
* since: v1.51
- `indexedDB` ?<boolean>

Set to `true` to include IndexedDB in the storage state snapshot.
```

----------------------------------------

TITLE: Creating and Using Chrome DevTools Protocol Session (Java)
DESCRIPTION: Shows how to create a Chrome DevTools Protocol (CDP) session for a page using the Java API, enable a domain (Runtime), send CDP commands (Runtime.evaluate), and evaluate JavaScript on the page. Requires importing CDPSession and JsonObject.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_24

LANGUAGE: Java
CODE:
```
CDPSession cdpSession = page.context().newCDPSession(page);
cdpSession.send("Runtime.enable");

JsonObject params = new JsonObject();
params.addProperty("expression", "window.foo = 'bar'");
cdpSession.send("Runtime.evaluate", params);

Object foo = page.evaluate("window['foo']");
assertEquals("bar", foo);
```

----------------------------------------

TITLE: Recording HAR via Playwright CLI Bash
DESCRIPTION: Shows the Bash command to open a URL using the Playwright CLI and record network traffic into a HAR file. The --save-har-glob option filters which URLs are included in the recording. Useful for generating HAR files from the command line.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_36

LANGUAGE: bash
CODE:
```
pwsh bin/Debug/netX/playwright.ps1 open --save-har=example.har --save-har-glob="**/api/**" https://example.com
```

----------------------------------------

TITLE: Combine Locators with And (C#)
DESCRIPTION: Shows how to use the new `Locator.And` method in C# to create a composite locator that matches elements satisfying the conditions of *both* the initial locator (`page.GetByRole(AriaRole.BUTTON)`) and the chained locator (`page.GetByTitle("Subscribe")`).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_24

LANGUAGE: csharp
CODE:
```
var button = page.GetByRole(AriaRole.BUTTON).And(page.GetByTitle("Subscribe"));
```

----------------------------------------

TITLE: Configuring Polling Strategy for Playwright `waitForFunction` (JS/Python)
DESCRIPTION: Defines the `polling` parameter for Playwright's `waitForFunction` in JavaScript and Python. It controls how often the provided expression is evaluated. It can be set to 'raf' (use `requestAnimationFrame`, default) or a number specifying the polling interval in milliseconds.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_29

LANGUAGE: markdown
CODE:
```
- `polling` <[float]|"raf">
```

----------------------------------------

TITLE: Recording HAR to Zip File in Playwright Context (Python)
DESCRIPTION: Configures a new Playwright browser context to record HTTP Archive (HAR) data and automatically compress it into a zip file by specifying a `.zip` path for the `record_har_path` option.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_37

LANGUAGE: python async
CODE:
```
context = await browser.new_context(record_har_path="github.har.zip")
```

LANGUAGE: python sync
CODE:
```
context = browser.new_context(record_har_path="github.har.zip")
```

----------------------------------------

TITLE: Using ElementHandle.waitForSelector in JavaScript
DESCRIPTION: Demonstrates how to use the waitForSelector method on an ElementHandle to wait for a child element to appear in the DOM.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_44

LANGUAGE: javascript
CODE:
```
await page.setContent(`<div><span></span></div>`);
const div = await page.$('div');
// Waiting for the 'span' selector relative to the div.
const span = await div.waitForSelector('span', { state: 'attached' });
```

----------------------------------------

TITLE: Pressing an Uppercase Character using Shift in Playwright (Python Async)
DESCRIPTION: Demonstrates pressing an uppercase 'A' using the Playwright Keyboard API in asynchronous Python. It shows two ways to achieve this using `page.keyboard.press`: combining 'Shift' with the specific key code 'KeyA', or combining 'Shift' with the character 'A'. Both methods simulate pressing Shift, then A, then releasing both.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
```python async
await page.keyboard.press("Shift+KeyA")
# or
await page.keyboard.press("Shift+A")
```
```

----------------------------------------

TITLE: Matching Body ARIA Snapshot using Playwright Java
DESCRIPTION: This Java snippet demonstrates matching the ARIA snapshot of the body element using Playwright Java. It uses `assertThat(page.locator("body")).matchesAriaSnapshot()` with a template specifying the expected 'heading' role and its name 'title'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_10

LANGUAGE: java
CODE:
```
```java
assertThat(page.locator("body")).matchesAriaSnapshot("""
  - heading "title"
""");
```
```

----------------------------------------

TITLE: C# Page Evaluation Examples
DESCRIPTION: Comprehensive examples of page evaluation in C# showing different data types and handle operations
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_6

LANGUAGE: csharp
CODE:
```
// A primitive value.
await page.EvaluateAsync<int>("num => num", 42);

// An array.
await page.EvaluateAsync<int[]>("array => array.length", new[] { 1, 2, 3 });

// An object.
await page.EvaluateAsync<object>("object => object.foo", new { foo = "bar" });

// A single handle.
var button = await page.EvaluateHandleAsync("window.button");
await page.EvaluateAsync<IJSHandle>("button => button.textContent", button);

// Alternative notation using JSHandle.EvaluateAsync.
await button.EvaluateAsync<string>("(button, from) => button.textContent.substring(from)", 5);

// Object with multiple handles.
var button1 = await page.EvaluateHandleAsync("window.button1");
var button2 = await page.EvaluateHandleAsync("window.button2");
await page.EvaluateAsync("o => o.button1.textContent + o.button2.textContent", new { button1, button2 });

// Object destructuring works. Note that property names must match
// between the destructured object and the argument.
// Also note the required parenthesis.
await page.EvaluateAsync("({ button1, button2 }) => button1.textContent + button2.textContent", new { button1, button2 });

// Array works as well. Arbitrary names can be used for destructuring.
// Note the required parenthesis.
await page.EvaluateAsync("([b1, b2]) => b1.textContent + b2.textContent", new[] { button1, button2 });

// Any mix of serializables and handles works.
await page.EvaluateAsync("x => x.button1.textContent + x.list[0].textContent + String(x.foo)", new { button1, list = new[] { button2 }, foo = null as object });
```

----------------------------------------

TITLE: Setting Custom User Agent in Java
DESCRIPTION: Creates a new browser context with a custom user agent string using the Playwright Java client. This allows testing how websites respond to different browser identifications.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_65

LANGUAGE: java
CODE:
```
BrowserContext context = browser.newContext(new Browser.NewContextOptions()
  .setUserAgent("My user agent"));
```

----------------------------------------

TITLE: Conditional Test Step Skip with Description
DESCRIPTION: Demonstrates conditional test step skipping with a custom description based on a mobile condition.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-teststepinfo.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('my test', async ({ page, isMobile }) => {
  await test.step('check desktop expectations', async step => {
    step.skip(isMobile, 'not present in the mobile layout');
    // step body below will not run
    // ...
  });
});
```

----------------------------------------

TITLE: Completely Unset Base URL using Fixture in Playwright
DESCRIPTION: This snippet demonstrates how to completely remove a configuration option, such as 'baseURL', for a specific test file by using the long-form fixture notation with 'test.use()' and setting the value to 'undefined' with a 'test' scope.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#_snippet_14

LANGUAGE: TypeScript
CODE:
```
import { test } from '@playwright/test';

// Completely unset baseURL for this file.
test.use({
  baseURL: [async ({}, use) => use(undefined), { scope: 'test' }]
});

test('no base url', async ({ page }) => {
  // This test will not have a base url.
});
```

----------------------------------------

TITLE: Connecting to a Browser via CDP Using Playwright Java
DESCRIPTION: Demonstrates using Playwright Java API to attach to an existing Chromium instance over the Chrome DevTools Protocol (CDP). Requires a running browser with the correct debugging port exposed and the Playwright library. Inputs are the CDP URL endpoint. Expected output is access to browser context/pages; not all features may be available.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_6

LANGUAGE: java
CODE:
```
Browser browser = playwright.chromium().connectOverCDP(\"http://localhost:9222\");\nBrowserContext defaultContext = browser.contexts().get(0);\nPage page = defaultContext.pages().get(0);
```

----------------------------------------

TITLE: Passing a JSHandle as an Argument to page.evaluate in Python (Async)
DESCRIPTION: Illustrates creating a JavaScript array in the page using `page.evaluate_handle`, obtaining a [JSHandle] to it. Subsequently demonstrates passing this handle into `page.evaluate` to interact with the array (get length, add elements) and finally disposing of the handle using `dispose()`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_12

LANGUAGE: python
CODE:
```
```python async
# Create new array in page.
my_array_handle = await page.evaluate_handle("""() => {
  window.myArray = [1];
  return myArray;
}""")

# Get current length of the array.
length = await page.evaluate("a => a.length", my_array_handle)

# Add one more element to the array using the handle
await page.evaluate("(arg) => arg.myArray.push(arg.newElement)", {
  'myArray': my_array_handle,
  'newElement': 2
})

# Release the object when it's no longer needed.
await my_array_handle.dispose()
```
```

----------------------------------------

TITLE: Handling JSON WebSocket Messages with Playwright in Python (Asynchronous)
DESCRIPTION: Asynchronously handles JSON messages using Playwright's async API in Python. Requires json module for parsing and Playwright setup.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
def message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  json_message = json.loads(message)
  if json_message["request"] == "question":
    ws.send(json.dumps({ "response": "answer" }))

await page.route_web_socket("wss://example.com/ws", lambda ws: ws.on_message(
    lambda message: message_handler(ws, message)
))
```

----------------------------------------

TITLE: Converting Locator to FrameLocator with ContentFrame in C#
DESCRIPTION: Demonstrates how to convert a Locator object to a FrameLocator in C# using the ContentFrame property to interact with elements inside an iframe.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_48

LANGUAGE: csharp
CODE:
```
var locator = Page.Locator("iframe[name=\"embedded\"]");
// ...
var frameLocator = locator.ContentFrame;
await frameLocator.GetByRole(AriaRole.Button).ClickAsync();
```

----------------------------------------

TITLE: Creating Browser Context with Permissions in Python (Sync)
DESCRIPTION: Creates a new browser context with notification permissions using the Playwright Python sync API. This enables notification capabilities for all pages within the context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_31

LANGUAGE: python
CODE:
```
context = browser.new_context(
  permissions=['notifications'],
)
```

----------------------------------------

TITLE: Setting Reduced Motion Emulation for C# and Python Browser Context
DESCRIPTION: Defines the reducedMotion option for browser contexts in C# and Python. This emulates the prefers-reduced-motion media feature with values 'reduce', 'no-preference', or 'null' to reset to system defaults.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_66

LANGUAGE: csharp
CODE:
```
- `reducedMotion` <[ReducedMotion]<"reduce"|"no-preference"|"null">>

Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. See [`method: Page.emulateMedia`] for more details. Passing `'null'` resets emulation to system defaults. Defaults to `'no-preference'`.
```

----------------------------------------

TITLE: Configuring Device Scale Factor in Playwright Tests
DESCRIPTION: Example showing how to set the device scale factor (pixel ratio) for testing high-DPI or Retina display scenarios, typically used together with viewport settings.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    viewport: { width: 2560, height: 1440 },
    deviceScaleFactor: 2,
  },
});
```

----------------------------------------

TITLE: Using XPath Union in Playwright
DESCRIPTION: XPath union allows selecting elements that match any of multiple XPath expressions using the pipe (|) operator. This example demonstrates waiting for either a spinner or confirmation dialog.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_14

LANGUAGE: javascript
CODE:
```
// Waits for either confirmation dialog or load spinner.
await page.locator(
    `//span[contains(@class, 'spinner__loading')]|//div[@id='confirmation']`
).waitFor();
```

LANGUAGE: java
CODE:
```
// Waits for either confirmation dialog or load spinner.
page.locator("//span[contains(@class, 'spinner__loading')]|//div[@id='confirmation']").waitFor();
```

LANGUAGE: python
CODE:
```
# Waits for either confirmation dialog or load spinner.
await page.locator("//span[contains(@class, 'spinner__loading')]|//div[@id='confirmation']").wait_for()
```

LANGUAGE: python
CODE:
```
# Waits for either confirmation dialog or load spinner.
page.locator("//span[contains(@class, 'spinner__loading')]|//div[@id='confirmation']").wait_for()
```

LANGUAGE: csharp
CODE:
```
// Waits for either confirmation dialog or load spinner.
await page.Locator("//span[contains(@class, 'spinner__loading')]|//div[@id='confirmation']").WaitForAsync();
```

----------------------------------------

TITLE: Retrieving Request Timing with Playwright in JavaScript
DESCRIPTION: Demonstrates how to wait for a finished request event in Playwright, navigate to a page, and then retrieve detailed timing metrics for the request using the timing() method. Requires Playwright installed and a browser page object. Key parameters include the event name ('requestfinished') and the page navigation URL. Outputs timing data to the console. Limitations include that most timing values are only available after the response is received, and responseEnd after the request fully finishes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
const requestFinishedPromise = page.waitForEvent('requestfinished');\nawait page.goto('http://example.com');\nconst request = await requestFinishedPromise;\nconsole.log(request.timing());
```

----------------------------------------

TITLE: Configuring Browser Proxy Settings in Playwright
DESCRIPTION: Defines the `proxy` object for configuring network proxy settings when launching a browser with Playwright. Requires a `server` (URL like `http://myproxy.com:3128` or `socks5://myproxy.com:3128`). Optionally takes `bypass` (comma-separated domains), `username`, and `password` for authentication.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_34

LANGUAGE: markdown
CODE:
```
- `proxy` <[Object]>
  - `server` <[string]> Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example
    `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP
    proxy.
  - `bypass` ?<[string]> Optional comma-separated domains to bypass proxy, for example `".com, chromium.org,
    .domain.com"`.
  - `username` ?<[string]> Optional username to use if HTTP proxy requires authentication.
  - `password` ?<[string]> Optional password to use if HTTP proxy requires authentication.
```

----------------------------------------

TITLE: Get Server Address for Response
DESCRIPTION: By using the `Response.serverAddr` method, one can retrieve the IP address and port of the server responding to the request, useful for diagnosing network paths. It's an async operation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
async function serverAddress() {\n  const address = await response.serverAddr();\n  console.log('Server Address:', address);\n}
```

----------------------------------------

TITLE: Configuring Playwright for Sequential Test Execution with Test List File
DESCRIPTION: This Playwright configuration file disables parallel execution by setting workers to 1 and specifies the test list file to use. These settings are necessary when using the test list approach to control test execution order.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_13

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  workers: 1,
  testMatch: 'test.list.ts',
});
```

----------------------------------------

TITLE: Using Locator Handlers in Playwright
DESCRIPTION: Implementation of locator handlers with options for overlay handling and maximum execution times
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_17

LANGUAGE: javascript
CODE:
```
const locator = page.getByText('This interstitial covers the button');
await page.addLocatorHandler(locator, async overlay => {
  await overlay.locator('#close').click();
}, { times: 3, noWaitAfter: true });
// Run your tests that can be interrupted by the overlay.
// ...
await page.removeLocatorHandler(locator);
```

----------------------------------------

TITLE: Using Mapped Paths in Playwright TypeScript Tests
DESCRIPTION: This TypeScript snippet demonstrates how to use mapped paths in a Playwright test file. It imports credentials from a custom path and uses them in a login test scenario.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-typescript-js.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { test, expect } from '@playwright/test';
import { username, password } from '@myhelper/credentials';

test('example', async ({ page }) => {
  await page.getByLabel('User Name').fill(username);
  await page.getByLabel('Password').fill(password);
});
```

----------------------------------------

TITLE: Using toBeInstanceOf Method for Type Checking
DESCRIPTION: Shows how to use the 'toBeInstanceOf' method to check if a value is an instance of a specific class or constructor function.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
expect(page).toBeInstanceOf(Page);

class Example {}
expect(new Example()).toBeInstanceOf(Example);
```

----------------------------------------

TITLE: Creating DataTransfer and Dispatching DragStart Event in C#
DESCRIPTION: This snippet shows how to create a DataTransfer object and use it to dispatch a dragstart event in C#. Note that DataTransfer can only be created in Chromium and Firefox.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_37

LANGUAGE: csharp
CODE:
```
var dataTransfer = await page.EvaluateHandleAsync("() => new DataTransfer()");
await page.DispatchEventAsync("#source", "dragstart", new { dataTransfer });
```

----------------------------------------

TITLE: Attaching Screenshot Buffer with TestInfo in Playwright JS
DESCRIPTION: This example demonstrates using the testInfo.attach method to add a screenshot captured as a buffer to the test's report. It specifies the attachment name, the buffer body, and the content type ('image/png'). Requires @playwright/test and a page fixture.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfo.md#_snippet_1

LANGUAGE: js
CODE:
```
import { test, expect } from '@playwright/test';

test('basic test', async ({ page }, testInfo) => {
  await page.goto('https://playwright.dev');
  const screenshot = await page.screenshot();
  await testInfo.attach('screenshot', { body: screenshot, contentType: 'image/png' });
});
```

----------------------------------------

TITLE: Emulating Geolocation, Language and Timezone with Playwright Codegen for Python
DESCRIPTION: Command to generate code while emulating Rome, Italy location, Italian language, and European/Rome timezone for Bing Maps using Python. This demonstrates testing location-aware applications.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_18

LANGUAGE: bash
CODE:
```
playwright codegen --timezone="Europe/Rome" --geolocation="41.890221,12.492348" --lang="it-IT" bing.com/maps
```

----------------------------------------

TITLE: Tracing a Square with Mouse Movements in Java
DESCRIPTION: This snippet shows how to use the 'page.mouse()' object in Java to trace a 100x100 square by moving the mouse and performing click actions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-mouse.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
// Using 'page.mouse' to trace a 100x100 square.
page.mouse().move(0, 0);
page.mouse().down();
page.mouse().move(0, 100);
page.mouse().move(100, 100);
page.mouse().move(100, 0);
page.mouse().move(0, 0);
page.mouse().up();
```

----------------------------------------

TITLE: Declaring a Test to be Fixed in Playwright
DESCRIPTION: This example shows how to declare a test as 'to be fixed' using test.fixme. Playwright will not run tests marked with fixme.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_29

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.fixme('to be fixed', async ({ page }) => {
  // ...
});
```

----------------------------------------

TITLE: Configuring package.json for Manual TypeScript Compilation
DESCRIPTION: This JSON snippet shows how to configure package.json scripts for manual TypeScript compilation before running Playwright tests. It includes a pretest script for compilation and a test script to run the compiled tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-typescript-js.md#2025-04-22_snippet_6

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "pretest": "tsc --incremental -p tests/tsconfig.json",
    "test": "playwright test -c tests-out"
  }
}
```

----------------------------------------

TITLE: Intercepting and Modifying WebSocket Messages in Python (Async)
DESCRIPTION: This code snippet shows how to connect to the actual WebSocket server while intercepting and modifying messages in Python using async syntax. It modifies 'request' messages to 'request2' and passes through other messages unmodified.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_23

LANGUAGE: python
CODE:
```
def message_handler(server: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    server.send("request2")
  else:
    server.send(message)

def handler(ws: WebSocketRoute):
  server = ws.connect_to_server()
  ws.on_message(lambda message: message_handler(server, message))

await page.route_web_socket("wss://example.com/ws", handler)
```

----------------------------------------

TITLE: Routing WebSocket Connections in C#
DESCRIPTION: Example of routing WebSocket connections using Page.RouteWebSocketAsync method in C#. It demonstrates how to intercept and respond to specific WebSocket messages asynchronously.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_100

LANGUAGE: csharp
CODE:
```
await page.RouteWebSocketAsync("/ws", ws => {
  ws.OnMessage(frame => {
    if (frame.Text == "request")
      ws.Send("response");
  });
});
```

----------------------------------------

TITLE: Testing Battery Status with Mock API
DESCRIPTION: Shows a complete test setup using the battery API mock, including beforeEach hook and assertions to verify UI updates based on mock data.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock-browser-js.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
test.beforeEach(async ({ page }) => {
  await page.addInitScript(() => {
    const mockBattery = {
      level: 0.90,
      charging: true,
      chargingTime: 1800, // seconds
      dischargingTime: Infinity,
      addEventListener: () => { }
    };
    // Override the method to always return mock battery info.
    window.navigator.getBattery = async () => mockBattery;
  });
});

test('show battery status', async ({ page }) => {
  await page.goto('/');
  await expect(page.locator('.battery-percentage')).toHaveText('90%');
  await expect(page.locator('.battery-status')).toHaveText('Adapter');
  await expect(page.locator('.battery-fully')).toHaveText('00:30');
});
```

----------------------------------------

TITLE: Intercepting and Modifying WebSocket Messages in Python (Sync)
DESCRIPTION: This code snippet demonstrates how to connect to the actual WebSocket server while intercepting and modifying messages in Python using synchronous syntax. It modifies 'request' messages to 'request2' and passes through other messages unmodified.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_24

LANGUAGE: python
CODE:
```
def message_handler(server: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    server.send("request2")
  else:
    server.send(message)

def handler(ws: WebSocketRoute):
  server = ws.connect_to_server()
  ws.on_message(lambda message: message_handler(server, message))

page.route_web_socket("wss://example.com/ws", handler)
```

----------------------------------------

TITLE: Emulating Mobile Devices with Playwright Codegen for Java
DESCRIPTION: Command to generate code while emulating an iPhone 13 for the playwright.dev website using Java. This Maven execution sets device-specific configurations like viewport size and user agent.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args='codegen --device="iPhone 13" playwright.dev'
```

----------------------------------------

TITLE: Connecting to Remote Playwright Server with Python Sync API
DESCRIPTION: Python code to connect to a remote Playwright server using the synchronous API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
from playwright.sync_api import sync_playwright

with sync_playwright() as p:
    browser = p.chromium.connect("ws://127.0.0.1:3000/")
```

----------------------------------------

TITLE: Configuring Custom Playwright JUnit Options (Java)
DESCRIPTION: Illustrates how to provide custom configuration for Playwright fixtures in JUnit tests by implementing the `OptionsFactory` interface. The example shows setting headless mode, base URLs for browser context and API requests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_21

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.junit.Options;
import com.microsoft.playwright.junit.OptionsFactory;
import com.microsoft.playwright.junit.UsePlaywright;

@UsePlaywright(MyTest.CustomOptions.class)
public class MyTest {

  public static class CustomOptions implements OptionsFactory {
    @Override
    public Options getOptions() {
      return new Options()
          .setHeadless(false)
          .setContextOption(new Browser.NewContextOptions()
              .setBaseURL("https://github.com"))
          .setApiRequestOptions(new APIRequest.NewContextOptions()
              .setBaseURL("https://playwright.dev"));
    }
  }

  @Test
  public void testWithCustomOptions(Page page, APIRequestContext request) {
    page.navigate("/");
    assertThat(page).hasURL(Pattern.compile("github"));

    APIResponse response = request.get("/");
    assertTrue(response.text().contains("Playwright"));
  }
}
```

----------------------------------------

TITLE: Viewing supported browsers with Playwright CLI
DESCRIPTION: This snippet shows how to use the Playwright CLI to view all supported browsers available for installation. This information is critical for selecting the right browser for testing purposes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
npx playwright install --help
```

LANGUAGE: java
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install --help\"
```

LANGUAGE: python
CODE:
```
playwright install --help
```

LANGUAGE: csharp
CODE:
```
pwsh bin/Debug/netX/playwright.ps1 install --help
```

----------------------------------------

TITLE: Evaluating Multiple Selectors on ElementHandle in Java
DESCRIPTION: Shows how to evaluate multiple selectors on an ElementHandle and extract inner text from multiple elements in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_36

LANGUAGE: java
CODE:
```
ElementHandle feedHandle = page.querySelector(".feed");
assertEquals(Arrays.asList("Hello!", "Hi!"), feedHandle.evalOnSelectorAll(".tweet", "nodes => nodes.map(n => n.innerText)"));
```

----------------------------------------

TITLE: Launching and Controlling an Electron Application with Playwright
DESCRIPTION: Example demonstrating how to launch an Electron app, evaluate expressions in the main process, interact with windows, and capture screenshots using Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-electronapplication.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const { _electron: electron } = require('playwright');

(async () => {
  // Launch Electron app.
  const electronApp = await electron.launch({ args: ['main.js'] });

  // Evaluation expression in the Electron context.
  const appPath = await electronApp.evaluate(async ({ app }) => {
    // This runs in the main Electron process, parameter here is always
    // the result of the require('electron') in the main app script.
    return app.getAppPath();
  });
  console.log(appPath);

  // Get the first window that the app opens, wait if necessary.
  const window = await electronApp.firstWindow();
  // Print the title.
  console.log(await window.title());
  // Capture a screenshot.
  await window.screenshot({ path: 'intro.png' });
  // Direct Electron console to Node terminal.
  window.on('console', console.log);
  // Click button.
  await window.click('text=Click me');
  // Exit app.
  await electronApp.close();
})();
```

----------------------------------------

TITLE: Retrieving Bounding Box with ElementHandle in Python Sync
DESCRIPTION: Illustrates how to get an element's bounding box and click its center using ElementHandle in sync Python.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_18

LANGUAGE: Python
CODE:
```
box = element_handle.bounding_box()
page.mouse.click(box["x"] + box["width"] / 2, box["y"] + box["height"] / 2)
```

----------------------------------------

TITLE: Using Custom Playwright Matcher in Test (TypeScript)
DESCRIPTION: This snippet shows how to use the previously defined custom `toHaveAmount` matcher within a Playwright test file. It imports the extended `test` and `expect` objects from the local `fixtures` file and applies the custom assertion to a locator on the `page` object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_45

LANGUAGE: typescript
CODE:
```
import { test, expect } from './fixtures';

test('amount', async () => {
  await expect(page.locator('.cart')).toHaveAmount(4);
});
```

----------------------------------------

TITLE: Matching Body ARIA Snapshot using Playwright C#
DESCRIPTION: This C# snippet shows how to asynchronously match the ARIA snapshot of the body element. It uses `await Expect(page.Locator("body")).ToMatchAriaSnapshotAsync()` with a verbatim string literal template specifying the 'heading' role and its name 'title'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_11

LANGUAGE: csharp
CODE:
```
```csharp
await Expect(page.Locator("body")).ToMatchAriaSnapshotAsync(@"
  - heading ""title""
");
```
```

----------------------------------------

TITLE: Configuring Browser Launch Options in Playwright Tests
DESCRIPTION: Example showing how to pass custom arguments to the browser when launching it, such as starting Chrome in maximized window mode, with a warning about potential risks.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_21

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'chromium',
      use: {
        ...devices['Desktop Chrome'],
        launchOptions: {
          args: ['--start-maximized']
        }
      }
    }
  ]
});
```

----------------------------------------

TITLE: Precise Scrolling Control
DESCRIPTION: Demonstrates precise scrolling control using mouse wheel events or programmatic scrolling with evaluate(). Includes both mouse-based and programmatic approaches.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_14

LANGUAGE: javascript
CODE:
```
await page.getByTestId('scrolling-container').hover();
await page.mouse.wheel(0, 10);

await page.getByTestId('scrolling-container').evaluate(e => e.scrollTop += 100);
```

LANGUAGE: java
CODE:
```
page.getByTestId("scrolling-container").hover();
page.mouse.wheel(0, 10);

page.getByTestId("scrolling-container").evaluate("e => e.scrollTop += 100");
```

LANGUAGE: python
CODE:
```
await page.get_by_test_id("scrolling-container").hover()
await page.mouse.wheel(0, 10)

await page.get_by_test_id("scrolling-container").evaluate("e => e.scrollTop += 100")
```

LANGUAGE: csharp
CODE:
```
await page.GetByTestId("scrolling-container").HoverAsync();
await page.Mouse.WheelAsync(0, 10);

await page.GetByTestId("scrolling-container").EvaluateAsync("e => e.scrollTop += 100");
```

----------------------------------------

TITLE: Conditionally Marking a Test as Fixme in Playwright
DESCRIPTION: This snippet demonstrates how to conditionally mark a test as 'fixme' based on a specific browser. The test will be aborted immediately after the test.fixme call in the specified condition.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_30

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('to be fixed in Safari', async ({ page, browserName }) => {
  test.fixme(browserName === 'webkit', 'This feature breaks in Safari for some reason');
  // ...
});
```

----------------------------------------

TITLE: Configure HTML Reporter Attachments Base URL (JS)
DESCRIPTION: Example configuration in playwright.config.ts to specify a base URL for attachments in the HTML report. This is useful when attachments are stored separately from the report itself, for example, on external storage.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_15

LANGUAGE: js
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: [['html', { attachmentsBaseURL: 'https://external-storage.com/' }]],
});
```

----------------------------------------

TITLE: Using Page.evalOnSelectorAll in JavaScript
DESCRIPTION: Example of using the evalOnSelectorAll (alias $$eval) method in JavaScript to evaluate expressions on all elements matching a selector. This method finds all matching elements and passes them as an array to the provided function.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_46

LANGUAGE: javascript
CODE:
```
const divCounts = await page.$$eval('div', (divs, min) => divs.length >= min, 10);
```

----------------------------------------

TITLE: Disabling JavaScript in Java
DESCRIPTION: Creates a new browser context with JavaScript disabled using the Playwright Java client. This allows testing how web applications behave in environments without JavaScript support.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_76

LANGUAGE: java
CODE:
```
BrowserContext context = browser.newContext(new Browser.NewContextOptions()
  .javaScriptEnabled(false));
```

----------------------------------------

TITLE: Using toBeGreaterThan Method for Numeric Comparisons
DESCRIPTION: Shows how to use the 'toBeGreaterThan' method to compare numeric values. This example checks if a value is greater than 1.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
const value = 42;
expect(value).toBeGreaterThan(1);
```

----------------------------------------

TITLE: Using Playwright with unittest.TestCase
DESCRIPTION: Example of integrating Playwright with Python's unittest framework by using pytest fixtures in a TestCase class.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_14

LANGUAGE: python
CODE:
```
import pytest
import unittest

from playwright.sync_api import Page


class MyTest(unittest.TestCase):
    @pytest.fixture(autouse=True)
    def setup(self, page: Page):
        self.page = page

    def test_foobar(self):
        self.page.goto("https://microsoft.com")
        self.page.locator("#foobar").click()
        assert self.page.evaluate("1 + 1") == 2
```

----------------------------------------

TITLE: Running UI Mode in Docker/Codespaces with External Access
DESCRIPTION: Command to run Playwright UI Mode with host binding for Docker and GitHub Codespaces environments
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-ui-mode-js.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx playwright test --ui-host=0.0.0.0
```

----------------------------------------

TITLE: Configuring xUnit Playwright Tests with .runsettings
DESCRIPTION: This XML configuration specifies xUnit-specific settings for parallelization, environment variables for debugging, and Playwright options such as browser selection and launch parameters.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-csharp.md#2025-04-22_snippet_8

LANGUAGE: XML
CODE:
```
<?xml version="1.0" encoding="utf-8"?>
<RunSettings>
  <!-- See https://xunit.net/docs/runsettings -->
  <xUnit>
    <MaxParallelThreads>1</MaxParallelThreads>
  </xUnit>
  <!-- General run configuration -->
  <RunConfiguration>
    <EnvironmentVariables>
      <!-- For debugging selectors, it's recommend to set the following environment variable -->
      <DEBUG>pw:api</DEBUG>
    </EnvironmentVariables>
  </RunConfiguration>
  <!-- Playwright -->  
  <Playwright>
    <BrowserName>chromium</BrowserName>
    <ExpectTimeout>5000</ExpectTimeout>
    <LaunchOptions>
      <Headless>false</Headless>
      <Channel>msedge</Channel>
    </LaunchOptions>
  </Playwright>
</RunSettings>
```

----------------------------------------

TITLE: Enabling Verbose API Logs in Java
DESCRIPTION: Commands to enable verbose API logging in Playwright Java tests using the DEBUG environment variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_11

LANGUAGE: bash
CODE:
```
DEBUG=pw:api mvn test
```

LANGUAGE: batch
CODE:
```
set DEBUG=pw:api
mvn test
```

LANGUAGE: powershell
CODE:
```
$env:DEBUG="pw:api"
mvn test
```

----------------------------------------

TITLE: Creating DataTransfer and Dispatching DragStart Event in JavaScript
DESCRIPTION: This snippet demonstrates how to create a DataTransfer object and use it to dispatch a dragstart event in JavaScript. Note that DataTransfer can only be created in Chromium and Firefox.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_33

LANGUAGE: javascript
CODE:
```
const dataTransfer = await page.evaluateHandle(() => new DataTransfer());
await page.dispatchEvent('#source', 'dragstart', { dataTransfer });
```

----------------------------------------

TITLE: Handling Console Messages in JavaScript
DESCRIPTION: Demonstrates how to listen for console messages, filter by type, wait for console events, and extract argument values in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-consolemessage.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
// Listen for all console logs
page.on('console', msg => console.log(msg.text()));

// Listen for all console events and handle errors
page.on('console', msg => {
  if (msg.type() === 'error')
    console.log(`Error text: "${msg.text()}"`);
});

// Get the next console log
const msgPromise = page.waitForEvent('console');
await page.evaluate(() => {
  console.log('hello', 42, { foo: 'bar' });  // Issue console.log inside the page
});
const msg = await msgPromise;

// Deconstruct console log arguments
await msg.args()[0].jsonValue(); // hello
await msg.args()[1].jsonValue(); // 42
```

----------------------------------------

TITLE: Installing APK Files onto AndroidDevice with Playwright JS
DESCRIPTION: AndroidDevice.installApk installs an APK file via a file path or Buffer. Optional args (array of strings) may be supplied for shell:cmd package install. This enables automation of app deployment for testing. Inputs: file path/Buffer, optional shell arguments. No outputs; throws on error.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_7

LANGUAGE: js
CODE:
```
// Installs an apk on the device.
await androidDevice.installApk({
  file: '/path/to/app.apk',
  args: ['-r', '-t', '-S'] // Optional
});
```

----------------------------------------

TITLE: Enabling Verbose API Logs in C#
DESCRIPTION: Commands to enable verbose API logging in Playwright C# tests using the DEBUG environment variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_13

LANGUAGE: bash
CODE:
```
DEBUG=pw:api dotnet run
```

LANGUAGE: batch
CODE:
```
set DEBUG=pw:api
dotnet run
```

LANGUAGE: powershell
CODE:
```
$env:DEBUG="pw:api"
dotnet run
```

----------------------------------------

TITLE: Hermetic Browser Installation
DESCRIPTION: Commands to install browsers in a local folder for hermetic installations
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_39

LANGUAGE: bash
CODE:
```
# Places binaries to node_modules/playwright-core/.local-browsers
PLAYWRIGHT_BROWSERS_PATH=0 npx playwright install
```

LANGUAGE: batch
CODE:
```
# Places binaries to node_modules\playwright-core\.local-browsers
set PLAYWRIGHT_BROWSERS_PATH=0
npx playwright install
```

LANGUAGE: powershell
CODE:
```
# Places binaries to node_modules\playwright-core\.local-browsers
$Env:PLAYWRIGHT_BROWSERS_PATH=0
npx playwright install
```

----------------------------------------

TITLE: Using toContainClass Assertion in Playwright v1.52
DESCRIPTION: Code example demonstrating the new toContainClass method in LocatorAssertions to assert that an element contains a specific class name.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
await expect(page.getByRole('listitem', { name: 'Ship v1.52' })).toContainClass('done');
```

----------------------------------------

TITLE: Recording Multiple Trace Chunks (Java)
DESCRIPTION: Demonstrates how to record multiple, distinct trace files in Java using `tracing().startChunk()` and `tracing().stopChunk()`. Requires `tracing().start()` to be called beforehand. Each chunk records the actions executed between its start and stop points, saving to the specified path via `Tracing.StopChunkOptions`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_11

LANGUAGE: java
CODE:
```
context.tracing().start(new Tracing.StartOptions()
  .setScreenshots(true)
  .setSnapshots(true));
Page page = context.newPage();
page.navigate("https://playwright.dev");

context.tracing().startChunk();
page.getByText("Get Started").click();
// Everything between startChunk and stopChunk will be recorded in the trace.
context.tracing().stopChunk(new Tracing.StopChunkOptions()
  .setPath(Paths.get("trace1.zip")));

context.tracing().startChunk();
page.navigate("http://example.com");
// Save a second trace file with different actions.
context.tracing().stopChunk(new Tracing.StopChunkOptions()
  .setPath(Paths.get("trace2.zip")));
```

----------------------------------------

TITLE: Recording Minimal HAR File with Playwright .NET
DESCRIPTION: Explains how to record a HAR file containing only essential information for replaying in Playwright for .NET. The Browser.NewContextAsync method is used with the RecordHarMode option set to HarMode.Minimal. This is useful if the HAR file is intended for manual editing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_42

LANGUAGE: csharp
CODE:
```
var context = await Browser.NewContextAsync(new() { RecordHarPath = "example.har", RecordHarMode = HarMode.Minimal });
```

----------------------------------------

TITLE: Getting Properties from JSHandle in Python (Sync)
DESCRIPTION: Illustrates getting properties from a JSHandle, specifically window and document objects, in Python with synchronous syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_13

LANGUAGE: python
CODE:
```
handle = page.evaluate_handle("({ window, document })")
properties = handle.get_properties()
window_handle = properties.get("window")
document_handle = properties.get("document")
handle.dispose()
```

----------------------------------------

TITLE: Configure Dot Reporter in Playwright Config (JS)
DESCRIPTION: Example configuration in playwright.config.ts to set the default reporter to 'dot'. This ensures the dot reporter is used for all test runs unless overridden via the command line.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_10

LANGUAGE: js
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: 'dot',
});
```

----------------------------------------

TITLE: Detecting Print Dialogs with Playwright (Python Async)
DESCRIPTION: Demonstrates how to detect if a print dialog was triggered by `window.print()` in an async context. It uses `page.evaluate` to inject JavaScript replacing `window.print` with a function resolving a Promise, then uses `page.wait_for_function` to await the promise after clicking the print trigger.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_17

LANGUAGE: python
CODE:
```
```python async
await page.goto("<url>")

await page.evaluate("(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()")
await page.get_by_text("Print it!").click()

await page.wait_for_function("window.waitForPrintDialog")
```
```

----------------------------------------

TITLE: Connecting to Remote Playwright Server with Environment Variable
DESCRIPTION: Command to connect Playwright tests to a remote Playwright server using an environment variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_14

LANGUAGE: bash
CODE:
```
PW_TEST_CONNECT_WS_ENDPOINT=ws://127.0.0.1:3000/ npx playwright test
```

----------------------------------------

TITLE: Getting Properties from JSHandle in JavaScript
DESCRIPTION: Illustrates how to get properties from a JSHandle, specifically window and document objects, in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
const handle = await page.evaluateHandle(() => ({ window, document }));
const properties = await handle.getProperties();
const windowHandle = properties.get('window');
const documentHandle = properties.get('document');
await handle.dispose();
```

----------------------------------------

TITLE: Intercepting and Modifying WebSocket Messages in C#
DESCRIPTION: This code snippet shows how to connect to the actual WebSocket server while intercepting and modifying messages in C#. It modifies 'request' messages to 'request2' and passes through other messages unmodified.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_25

LANGUAGE: csharp
CODE:
```
await page.RouteWebSocketAsync("wss://example.com/ws", ws => {
  var server = ws.ConnectToServer();
  ws.OnMessage(frame => {
    if (frame.Text == "request")
      server.Send("request2");
    else
      server.Send(frame.Text);
  });
});
```

----------------------------------------

TITLE: Locating Parent Elements in Playwright
DESCRIPTION: Shows techniques for locating parent elements, including using the filter method with a child locator and using XPath for direct parent selection.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
const child = page.getByText('Hello');
const parent = page.getByRole('listitem').filter({ has: child });

const parent = page.getByText('Hello').locator('xpath=..');
```

LANGUAGE: java
CODE:
```
Locator child = page.getByText("Hello");
Locator parent = page.getByRole(AriaRole.LISTITEM).filter(new Locator.FilterOptions().setHas(child));

Locator parent = page.getByText("Hello").locator("xpath=..");
```

LANGUAGE: python
CODE:
```
child = page.get_by_text("Hello")
parent = page.get_by_role("listitem").filter(has=child)

parent = page.get_by_text("Hello").locator('xpath=..')
```

LANGUAGE: csharp
CODE:
```
var child = page.GetByText("Hello");
var parent = page.GetByRole(AriaRole.Listitem).Filter(new () { Has = child });

var parent = page.GetByText("Hello").Locator("xpath=..");
```

----------------------------------------

TITLE: Opening Trace in Java
DESCRIPTION: Command to open and view a recorded trace file using Playwright CLI with Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-java-python.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="show-trace trace.zip"
```

----------------------------------------

TITLE: Connecting Playwright to Selenium Grid
DESCRIPTION: Commands to run Playwright tests connected to a Selenium Grid using the SELENIUM_REMOTE_URL environment variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/selenium-grid.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 npx playwright test
```

LANGUAGE: bash
CODE:
```
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 pytest --browser chromium
```

LANGUAGE: bash
CODE:
```
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 mvn test
```

LANGUAGE: bash
CODE:
```
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 dotnet test
```

----------------------------------------

TITLE: Dumping Frame Tree using Playwright in C#
DESCRIPTION: This C# example demonstrates initializing Playwright asynchronously, launching Firefox, navigating to a URL, and then dumping the frame tree structure. It uses a recursive static method `DumpFrameTree` which takes an `IFrame` and an indent string, printing the frame's URL and iterating through `frame.ChildFrames` to process child frames.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using System;
using System.Threading.Tasks;

class FrameExamples
{
    public static async Task Main()
    {
        using var playwright = await Playwright.CreateAsync();
        await using var browser = await playwright.Firefox.LaunchAsync();
        var page = await browser.NewPageAsync();

        await page.GotoAsync("https://www.bing.com");
        DumpFrameTree(page.MainFrame, string.Empty);
    }

    private static void DumpFrameTree(IFrame frame, string indent)
    {
        Console.WriteLine($"{indent}{frame.Url}");
        foreach (var child in frame.ChildFrames)
            DumpFrameTree(child, indent + " ");
    }
}
```

----------------------------------------

TITLE: Converting Locator to FrameLocator with content_frame in Python (Async)
DESCRIPTION: Demonstrates how to convert a Locator object to a FrameLocator in Python async mode using the content_frame property to interact with elements inside an iframe.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_46

LANGUAGE: python
CODE:
```
locator = page.locator("iframe[name=\"embedded\"]")
# ...
frame_locator = locator.content_frame
await frame_locator.get_by_role("button").click()
```

----------------------------------------

TITLE: Waiting for Console Message in Playwright (Java)
DESCRIPTION: Shows how to wait for a specific console message in Playwright using Java. This method waits for a condition based on page events and console messages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_21

LANGUAGE: java
CODE:
```
List<String> failedUrls = new ArrayList<>();
context.onResponse(response -> {
  if (!response.ok()) {
    failedUrls.add(response.url());
  }
});
page1.getByText("Create user").click();
page2.getByText("Submit button").click();
context.waitForCondition(() -> failedUrls.size() > 3);
```

----------------------------------------

TITLE: Converting Locator to FrameLocator with content_frame in Python (Sync)
DESCRIPTION: Shows how to convert a Locator object to a FrameLocator in Python sync mode using the content_frame property to interact with elements inside an iframe.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_47

LANGUAGE: python
CODE:
```
locator = page.locator("iframe[name=\"embedded\"]")
# ...
frame_locator = locator.content_frame
frame_locator.get_by_role("button").click()
```

----------------------------------------

TITLE: Setting a Custom Timeout for a Playwright Test Fixture (JS)
DESCRIPTION: This snippet demonstrates how to assign a specific timeout value to a fixture using the `{ timeout: ... }` option. This is particularly useful for slow fixtures, allowing them more time than the default test timeout. The example defines a `slowFixture` with a 60-second timeout.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
import { test as base, expect } from '@playwright/test';

const test = base.extend<{ slowFixture: string }>( {
  slowFixture: [async ({}, use) => {
    // ... perform a slow operation ...
    await use('hello');
  }, { timeout: 60000 }]
});

test('example test', async ({ slowFixture }) => {
  // ...
});
```

----------------------------------------

TITLE: Granting Domain-Specific Permissions in Java
DESCRIPTION: Grants notification permissions for a specific domain (skype.com) using the Playwright Java client. This allows showing notifications only for the specified origin.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_34

LANGUAGE: java
CODE:
```
context.grantPermissions(Arrays.asList("notifications"),
  new BrowserContext.GrantPermissionsOptions().setOrigin("https://skype.com"));
```

----------------------------------------

TITLE: Pressing an Uppercase Character using Shift in Playwright (C#)
DESCRIPTION: Demonstrates pressing an uppercase 'A' using the Playwright Keyboard API in C#. It shows two ways to achieve this using `page.Keyboard.PressAsync`: combining 'Shift' with the specific key code 'KeyA', or combining 'Shift' with the character 'A'. Both methods simulate pressing Shift, then A, then releasing both.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_9

LANGUAGE: csharp
CODE:
```
```csharp
await page.Keyboard.PressAsync("Shift+KeyA");
// or
await page.Keyboard.PressAsync("Shift+A");
```
```

----------------------------------------

TITLE: Negating Locator Assertions with '.Not' in C#
DESCRIPTION: Example of using the `.Not` property with Playwright MSTest assertions (`Expect`) in C#. This code asynchronously asserts that the provided `locator` does *not* contain the text "error".
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_7

LANGUAGE: csharp
CODE:
```
```csharp
await Expect(locator).Not.ToContainTextAsync("error");
```
```

----------------------------------------

TITLE: Modifying Network Requests in Python (Sync)
DESCRIPTION: Shows how to modify outgoing network requests in synchronous Python. Examples include deleting headers from requests and changing the HTTP method to POST.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_20

LANGUAGE: python
CODE:
```
# Delete header
def handle_route(route):
    headers = route.request.headers
    del headers["x-secret"]
    route.continue_(headers=headers)
page.route("**/*", handle_route)

# Continue requests as POST.
page.route("**/*", lambda route: route.continue_(method="POST"))
```

----------------------------------------

TITLE: Obtaining a JSHandle using evaluateHandle in Python (Async)
DESCRIPTION: Demonstrates how to get a reference ([JSHandle]) to the global `window` object within the browser context using the `page.evaluate_handle` method in asynchronous Python. This handle can subsequently be used for further JavaScript evaluations within the page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
```python async
js_handle = await page.evaluate_handle('window')
#  Use jsHandle for evaluations.
```
```

----------------------------------------

TITLE: Emulating Geolocation, Language and Timezone with Playwright Codegen for JavaScript
DESCRIPTION: Command to generate code while emulating Rome, Italy location, Italian language, and European/Rome timezone for Bing Maps using JavaScript. This demonstrates testing location-aware applications.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_16

LANGUAGE: bash
CODE:
```
npx playwright codegen --timezone="Europe/Rome" --geolocation="41.890221,12.492348" --lang="it-IT" bing.com/maps
```

----------------------------------------

TITLE: Disabling JavaScript in Python (Sync)
DESCRIPTION: Creates a new browser context with JavaScript disabled using the Playwright Python sync API. This allows testing how web applications behave in environments without JavaScript support.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_78

LANGUAGE: python
CODE:
```
context = browser.new_context(
  java_script_enabled=False
)
```

----------------------------------------

TITLE: Accessing Service Workers and Waiting for Registration in Playwright
DESCRIPTION: Demonstrates how to wait for a Service Worker to be registered when a page loads. This snippet uses the waitForEvent method to capture the Service Worker instance when it's registered by the page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/service-workers-experimental-network-events-js.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const serviceWorkerPromise = context.waitForEvent('serviceworker');
await page.goto('/example-with-a-service-worker.html');
const serviceworker = await serviceWorkerPromise;
```

----------------------------------------

TITLE: Setting Fixture Timeout (TypeScript)
DESCRIPTION: This code demonstrates how to set a separate timeout for a fixture, particularly useful for slow fixtures. It sets a 60-second timeout for a custom fixture named 'slowFixture'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-timeouts-js.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
import { test as base, expect } from '@playwright/test';

const test = base.extend<{ slowFixture: string }>({
  slowFixture: [async ({}, use) => {
    // ... perform a slow operation ...
    await use('hello');
  }, { timeout: 60_000 }]
});

test('example test', async ({ slowFixture }) => {
  // ...
});
```

----------------------------------------

TITLE: Using Playwright Python Locator Handler with Options
DESCRIPTION: Demonstrates adding and removing a locator handler using `page.addLocatorHandler` and `page.removeLocatorHandler`. Shows how to use the `times` and `no_wait_after` options and how the handler receives the locator as an argument.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_15

LANGUAGE: python
CODE:
```
locator = page.get_by_text("This interstitial covers the button")
page.add_locator_handler(locator, lambda overlay: overlay.locator("#close").click(), times=3, no_wait_after=True)
# Run your tests that can be interrupted by the overlay.
# ...
page.remove_locator_handler(locator)
```

----------------------------------------

TITLE: Migrating Puppeteer tests to Playwright Test
DESCRIPTION: Equivalent testing example using Playwright Test, showcasing the simplified syntax and built-in fixtures for web testing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/puppeteer-js.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.describe('Playwright homepage', () => {
  test('contains hero title', async ({ page }) => {
    await page.goto('https://playwright.dev/');
    const titleLocator = page.locator('.hero__title');
    await expect(titleLocator).toContainText(
        'Playwright enables reliable end-to-end testing'
    );
  });
});
```

----------------------------------------

TITLE: Grouping Actions in Playwright Trace Viewer with Python
DESCRIPTION: Illustrates how to use `page.context.tracing.group` and `group_end` in Playwright for Python to define logical groups of actions. These groups are then visually represented in the Playwright trace viewer for better debugging and analysis.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_5

LANGUAGE: python
CODE:
```
# All actions between group and group_end
# will be shown in the trace viewer as a group.
page.context.tracing.group("Open Playwright.dev > API")
page.goto("https://playwright.dev/")
page.get_by_role("link", name="API").click()
page.context.tracing.group_end()
```

----------------------------------------

TITLE: Limited-Use Locator Handler with Times Option in Python (Synchronous)
DESCRIPTION: Synchronous Python implementation of a locator handler that automatically removes itself after one use by setting the times parameter to 1. This handler clicks on a close button when it appears.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_93

LANGUAGE: python
CODE:
```
def handler(locator):
  locator.click()
page.add_locator_handler(page.get_by_label("Close"), handler, times=1)
```

----------------------------------------

TITLE: Getting Response Body as Buffer (JavaScript and Python)
DESCRIPTION: This method, `Response.body`, returns the response body as a Buffer, allowing binary data manipulation. It is useful for working with non-textual responses. Since it is an asynchronous method, it must be called within an async function.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
async function responseBody() {\n  const buffer = await response.body();\n  console.log(buffer);\n}
```

----------------------------------------

TITLE: Handling Security Details Confirmation with Locator Handler in Java
DESCRIPTION: Java implementation of a locator handler to automatically skip a security details confirmation page. The handler detects text matching 'Confirm your security details' and clicks the 'Remind me later' button.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_82

LANGUAGE: java
CODE:
```
// Setup the handler.
page.addLocatorHandler(page.getByText("Confirm your security details"), () -> {
  page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Remind me later")).click();
});

// Write the test as usual.
page.navigate("https://example.com");
page.getByRole("button", Page.GetByRoleOptions().setName("Start here")).click();
```

----------------------------------------

TITLE: Matching Aria Snapshot in C#
DESCRIPTION: Shows how to use ToMatchAriaSnapshotAsync with new properties like /children for strict matching and /url for links within the snapshot definition. The snapshot definition is provided as a multi-line string.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_1

LANGUAGE: csharp
CODE:
```
await Expect(locator).ToMatchAriaSnapshotAsync(@"
    - list
      - /children: equal
      - listitem: Feature A
      - listitem:
        - link ""Feature B"":
          - /url: ""https://playwright.dev""
  ");
```

----------------------------------------

TITLE: Running Playwright Docker for Python Web Scraping
DESCRIPTION: Command to run the Playwright Docker container for Python web scraping with security measures for untrusted websites.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
docker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright/python:v%%VERSION%%-noble /bin/bash
```

----------------------------------------

TITLE: WebSocketRoute.onMessage Handler - C#/Java
DESCRIPTION: WebSocket message handler implementation for C# and Java. Processes WebSocketFrame objects.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_24

LANGUAGE: java
CODE:
```
function(WebSocketFrame)
```

----------------------------------------

TITLE: Emulating Dark Color Scheme with Playwright Codegen for Java
DESCRIPTION: Command to generate code while emulating dark color scheme for the playwright.dev website using Java. This Maven execution allows testing appearance and functionality in dark mode.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_13

LANGUAGE: bash
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="codegen --color-scheme=dark playwright.dev"
```

----------------------------------------

TITLE: Granting Domain-Specific Permissions in Python (Sync)
DESCRIPTION: Grants notification permissions for a specific domain (skype.com) using the Playwright Python sync API. This allows showing notifications only for the specified origin.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_36

LANGUAGE: python
CODE:
```
context.grant_permissions(['notifications'], origin='https://skype.com')
```

----------------------------------------

TITLE: Mocking Read-only Browser APIs
DESCRIPTION: Demonstrates how to mock read-only browser APIs using Object.defineProperty to override navigator properties.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock-browser-js.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
await page.addInitScript(() => {
  Object.defineProperty(Object.getPrototypeOf(navigator), 'cookieEnabled', { value: false });
});
```

----------------------------------------

TITLE: Visibility Option for Locators in Playwright
DESCRIPTION: Defines the `visible` option for locators that allows matching only visible or invisible elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_101

LANGUAGE: typescript
CODE:
```
- `visible` <[boolean]>
```

----------------------------------------

TITLE: Injecting Initialization Script via Path (Java)
DESCRIPTION: Uses Playwright for Java's addInitScript with a file path to inject JavaScript before any document scripts run. The preload.js file must be located in the working directory. Ensures a controlled browser context on navigation or frame creation. Java Playwright required.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_24

LANGUAGE: java
CODE:
```
// In your playwright script, assuming the preload.js file is in same directory
page.addInitScript(Paths.get("./preload.js"));
```

----------------------------------------

TITLE: Waiting for Custom Events on AndroidDevice with Playwright JS
DESCRIPTION: androidDevice.waitForEvent asynchronously waits for an event to fire and resolves when a provided predicate evaluates truthy. Useful for handling asynchronous UI or device behavior. Input: event name (string), optional predicate. Output: value passed to predicate.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_22

LANGUAGE: js
CODE:
```
// Waits for an event and processes its value.
await androidDevice.waitForEvent('webView', webView => webView.url().includes('login'));
```

----------------------------------------

TITLE: Using Comma-separated CSS Selectors in Playwright
DESCRIPTION: Demonstrates how to use comma-separated selectors to match elements that fulfill any of multiple conditions, such as buttons with different text content.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
// Clicks a <button> that has either a "Log in" or "Sign in" text.
await page.locator('button:has-text("Log in"), button:has-text("Sign in")').click();
```

LANGUAGE: java
CODE:
```
// Clicks a <button> that has either a "Log in" or "Sign in" text.
page.locator("button:has-text(\"Log in\"), button:has-text(\"Sign in\")").click();
```

LANGUAGE: python
CODE:
```
# Clicks a <button> that has either a "Log in" or "Sign in" text.
await page.locator('button:has-text("Log in"), button:has-text("Sign in")').click()
```

LANGUAGE: python
CODE:
```
# Clicks a <button> that has either a "Log in" or "Sign in" text.
page.locator('button:has-text("Log in"), button:has-text("Sign in")').click()
```

LANGUAGE: csharp
CODE:
```
// Clicks a <button> that has either a "Log in" or "Sign in" text.
await page.Locator("button:has-text(\"Log in\"), button:has-text(\"Sign in\")").ClickAsync();
```

----------------------------------------

TITLE: Bypassing Actionability Checks with Playwright `force` Option
DESCRIPTION: Defines the `force` boolean option for Playwright actions. When set to `true`, it bypasses the standard actionability checks (e.g., visibility, enabled state) before performing the action. Defaults to `false`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_10

LANGUAGE: markdown
CODE:
```
- `force` <[boolean]>
```

----------------------------------------

TITLE: Emulating Dark Color Scheme with Playwright Codegen for JavaScript
DESCRIPTION: Command to generate code while emulating dark color scheme for the playwright.dev website using JavaScript. This allows testing appearance and functionality in dark mode.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_12

LANGUAGE: bash
CODE:
```
npx playwright codegen --color-scheme=dark playwright.dev
```

----------------------------------------

TITLE: Capturing Aria Snapshots in Playwright Python (Async)
DESCRIPTION: Demonstrates use of async Playwright Python to extract a YAML-formatted ARIA tree from a 'link' element, facilitating accessibility checks and assertions in test code.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_22

LANGUAGE: Python
CODE:
```
await page.get_by_role("link").aria_snapshot()
```

----------------------------------------

TITLE: Creating JSHandle with Page.EvaluateHandleAsync in C#
DESCRIPTION: Demonstrates creating a JSHandle for the window object using Page.EvaluateHandleAsync method in C#.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
var windowHandle = await page.EvaluateHandleAsync("() => window");
```

----------------------------------------

TITLE: Asserting Element Aria Snapshot with Playwright TypeScript
DESCRIPTION: Asserts that the element located by the locator matches the Aria snapshot. This assertion automatically retries until the condition is met or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_27

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toMatchAriaSnapshot()
```

----------------------------------------

TITLE: Extracting Specific HTTP Headers
DESCRIPTION: The `Response.headers` and `Response.allHeaders` methods extract HTTP headers from responses, with `headers` excluding security-related headers and `allHeaders` including them. Asynchronous calls are necessary for fetching headers accurately.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
const headers = response.headers();\nconsole.log('Headers:', headers);
```

----------------------------------------

TITLE: Exposing SHA256 Function to BrowserContext in Python (Sync)
DESCRIPTION: This Python synchronous example shows how to expose a SHA256 hashing function to all pages in a browser context using Playwright. It creates a new context, exposes the function, and then uses it in a page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_18

LANGUAGE: python
CODE:
```
import hashlib
from playwright.sync_api import sync_playwright

def sha256(text: str) -> str:
    m = hashlib.sha256()
    m.update(bytes(text, "utf8"))
    return m.hexdigest()


def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = webkit.launch(headless=False)
    context = browser.new_context()
    context.expose_function("sha256", sha256)
    page = context.new_page()
    page.set_content("""
        <script>
          async function onClick() {
            document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');
          }
        </script>
        <button onclick="onClick()">Click me</button>
        <div></div>
    """)
    page.get_by_role("button").click()

with sync_playwright() as playwright:
    run(playwright)
```

----------------------------------------

TITLE: Asserting List Count with Playwright TypeScript
DESCRIPTION: Asserts that the list element located by the locator has an exact number of children. This assertion automatically retries until the condition is met or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_18

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toHaveCount()
```

----------------------------------------

TITLE: Java Init Script Implementation
DESCRIPTION: Example of adding an initialization script in Java using Playwright
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_9

LANGUAGE: java
CODE:
```
// In your test, assuming the "preload.js" file is in the "mocks" directory.
page.addInitScript(Paths.get("mocks/preload.js"));
```

----------------------------------------

TITLE: Passing Arguments to Frame.waitForFunction in JavaScript
DESCRIPTION: This JavaScript example shows how to pass an argument to the predicate function in Frame.waitForFunction. It waits for an element matching a specific selector to appear in the document.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_40

LANGUAGE: javascript
CODE:
```
const selector = '.foo';
await frame.waitForFunction(selector => !!document.querySelector(selector), selector);
```

----------------------------------------

TITLE: Visual Regression Test with Tolerance
DESCRIPTION: This test compares images with a specified tolerance level for differences.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/image_tools/fixtures/should-match/looks-same-tests/README.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
test('should return true for different images when tolerance is higher than difference', async ({ page }) => {
  const image1 = await page.screenshot();
  await compareImageFile(image1, 'different/1.png', { tolerance: 50 });
});
```

----------------------------------------

TITLE: Routing WebSocket Connections in Python (Async)
DESCRIPTION: Example of routing WebSocket connections using Page.route_web_socket method in Python with async syntax. It demonstrates how to handle WebSocket messages asynchronously.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_98

LANGUAGE: python
CODE:
```
def message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    ws.send("response")

def handler(ws: WebSocketRoute):
  ws.on_message(lambda message: message_handler(ws, message))

await page.route_web_socket("/ws", handler)
```

----------------------------------------

TITLE: Evaluating Handles on Frame in JavaScript
DESCRIPTION: Demonstrates how to use the evaluateHandle method to evaluate an expression and return a JSHandle for the window object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_23

LANGUAGE: javascript
CODE:
```
// Handle for the window object
const aWindowHandle = await frame.evaluateHandle(() => Promise.resolve(window));
```

----------------------------------------

TITLE: Emulating Pinch Gesture with Playwright - JavaScript
DESCRIPTION: This snippet defines an asynchronous function `pinch` that emulates a pinch gesture on a given Playwright locator by dispatching `touchstart`, `touchmove`, and `touchend` events. It calculates touch point coordinates relative to the element's center and moves them closer or further apart. The snippet also includes a test case demonstrating how to use the `pinch` function to zoom out a map on Google Maps.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
import { test, expect, devices, type Locator } from '@playwright/test';

test.use({ ...devices['Pixel 7'] });

async function pinch(locator: Locator,
  arg: { deltaX?: number, deltaY?: number, steps?: number, direction?: 'in' | 'out' }) {
  const { centerX, centerY } = await locator.evaluate((target: HTMLElement) => {
    const bounds = target.getBoundingClientRect();
    const centerX = bounds.left + bounds.width / 2;
    const centerY = bounds.top + bounds.height / 2;
    return { centerX, centerY };
  });

  const deltaX = arg.deltaX ?? 50;
  const steps = arg.steps ?? 5;
  const stepDeltaX = deltaX / (steps + 1);

  // Two touch points equally distant from the center of the element.
  const touches = [
    {
      identifier: 0,
      clientX: centerX - (arg.direction === 'in' ? deltaX : stepDeltaX),
      clientY: centerY,
    },
    {
      identifier: 1,
      clientX: centerX + (arg.direction === 'in' ? deltaX : stepDeltaX),
      clientY: centerY,
    },
  ];
  await locator.dispatchEvent('touchstart',
      { touches, changedTouches: touches, targetTouches: touches });

  // Move the touch points towards or away from each other.
  for (let i = 1; i <= steps; i++) {
    const offset = (arg.direction === 'in' ? (deltaX - i * stepDeltaX) : (stepDeltaX * (i + 1)));
    const touches = [
      {
        identifier: 0,
        clientX: centerX - offset,
        clientY: centerY,
      },
      {
        identifier: 0,
        clientX: centerX + offset,
        clientY: centerY,
      },
    ];
    await locator.dispatchEvent('touchmove',
        { touches, changedTouches: touches, targetTouches: touches });
  }

  await locator.dispatchEvent('touchend', { touches: [], changedTouches: [], targetTouches: [] });
}

test(`pinch in gesture to zoom out the map`, async ({ page }) => {
  await page.goto('https://www.google.com/maps/place/@37.4117722,-122.0713234,15z',
      { waitUntil: 'commit' });
  await page.getByRole('button', { name: 'Keep using web' }).click();
  await expect(page.getByRole('button', { name: 'Keep using web' })).not.toBeVisible();
  // Get the map element.
  const met = page.locator('[data-test-id="met"]');
  for (let i = 0; i < 5; i++)
    await pinch(met, { deltaX: 40, direction: 'in' });
  // Ensure the map has been zoomed out.
  await expect(met).toHaveScreenshot();
});
```

----------------------------------------

TITLE: Launching a Browser with Custom Arguments Using Playwright C#
DESCRIPTION: Shows launching a Chromium browser while excluding specific default arguments, using C# Playwright. Requires Microsoft.Playwright and browser options object with IgnoreDefaultArgs. Output is a browser instance suitable for custom automation flows.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_14

LANGUAGE: csharp
CODE:
```
var browser = await playwright.Chromium.LaunchAsync(new() {\n    IgnoreDefaultArgs = new[] { \"--mute-audio\" }\n});
```

----------------------------------------

TITLE: Mocking WebSocket Messages with Playwright in JavaScript
DESCRIPTION: Sets up a WebSocket route to mock communication by responding to messages with predefined responses. Dependencies include Playwright for JavaScript. Requires setting up a page instance to route WebSockets.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
await page.routeWebSocket('wss://example.com/ws', ws => {
  ws.onMessage(message => {
    if (message === 'request')
      ws.send('response');
  });
});
```

----------------------------------------

TITLE: Obtaining a JSHandle using evaluateHandle in Python (Sync)
DESCRIPTION: Demonstrates how to get a reference ([JSHandle]) to the global `window` object within the browser context using the `page.evaluate_handle` method in synchronous Python. This handle can subsequently be used for further JavaScript evaluations within the page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
```python sync
js_handle = page.evaluate_handle('window')
#  Use jsHandle for evaluations.
```
```

----------------------------------------

TITLE: Manual Drag and Drop Control
DESCRIPTION: Provides fine-grained control over drag and drop operations using individual mouse events like hover(), down(), and up().
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_11

LANGUAGE: javascript
CODE:
```
await page.locator('#item-to-be-dragged').hover();
await page.mouse.down();
await page.locator('#item-to-drop-at').hover();
await page.mouse.up();
```

LANGUAGE: java
CODE:
```
page.locator("#item-to-be-dragged").hover();
page.mouse().down();
page.locator("#item-to-drop-at").hover();
page.mouse().up();
```

LANGUAGE: python
CODE:
```
await page.locator("#item-to-be-dragged").hover()
await page.mouse.down()
await page.locator("#item-to-drop-at").hover()
await page.mouse.up()
```

LANGUAGE: csharp
CODE:
```
await page.Locator("#item-to-be-dragged").HoverAsync();
await page.Mouse.DownAsync();
await page.Locator("#item-to-drop-at").HoverAsync();
await page.Mouse.UpAsync();
```

----------------------------------------

TITLE: Inserting Text with Keyboard.insertText in Playwright (JavaScript)
DESCRIPTION: Demonstrates using `page.keyboard.insertText` in JavaScript to dispatch an `input` event with the specified text ('嗨'). This method bypasses `keydown`, `keyup`, and `keypress` events and is useful for directly inserting text, including non-ASCII characters. Modifier keys do not affect this method.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
```js
page.keyboard.insertText('嗨');
```
```

----------------------------------------

TITLE: Connecting to Remote Playwright Server with JavaScript API
DESCRIPTION: JavaScript code to connect to a remote Playwright server using the BrowserType.connect API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_15

LANGUAGE: js
CODE:
```
const browser = await playwright['chromium'].connect('ws://127.0.0.1:3000/');
```

----------------------------------------

TITLE: Obtaining a JSHandle using EvaluateHandleAsync in C#
DESCRIPTION: Demonstrates how to get a reference ([JSHandle]) to the global `window` object within the browser context using the `page.EvaluateHandleAsync` method in C#. This handle can subsequently be used for further JavaScript evaluations within the page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
```csharp
var jsHandle = await page.EvaluateHandleAsync("window");
//  Use jsHandle for evaluations.
```
```

----------------------------------------

TITLE: Configure Playwright Test with Single Line Reporter
DESCRIPTION: Configure Playwright Test to use the 'line' reporter programmatically within the playwright.config.ts file. This sets the default reporter for test runs.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: 'line',
});
```

----------------------------------------

TITLE: Using to_match_aria_snapshot with an inline snapshot in Python (sync)
DESCRIPTION: Synchronous Python example of verifying accessibility structure using to_match_aria_snapshot. The method confirms that the body element contains the expected accessibility elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_40

LANGUAGE: python
CODE:
```
page.goto("https://demo.playwright.dev/todomvc/")
expect(page.locator('body')).to_match_aria_snapshot('''
  - heading "todos"
  - textbox "What needs to be done?"
''')
```

----------------------------------------

TITLE: Mocking WebSocket Responses in C#
DESCRIPTION: This code snippet demonstrates how to intercept WebSocket connections and mock the entire communication in C#. It responds to a 'request' message with a 'response'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_20

LANGUAGE: csharp
CODE:
```
await page.RouteWebSocketAsync("wss://example.com/ws", ws => {
  ws.OnMessage(frame => {
    if (frame.Text == "request")
      ws.Send("response");
  });
});
```

----------------------------------------

TITLE: Using Exact Text Matching in Playwright
DESCRIPTION: Shows how to use exact text matching with single or double quotes. This method is case-sensitive and matches the entire text content after trimming whitespace.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_18

LANGUAGE: javascript
CODE:
```
await page.locator('text="Log in"').click();
```

LANGUAGE: java
CODE:
```
page.locator("text='Log in'").click();
```

LANGUAGE: python
CODE:
```
await page.locator("text='Log in'").click()
```

LANGUAGE: csharp
CODE:
```
await page.Locator("text='Log in'").ClickAsync();
```

----------------------------------------

TITLE: Setting Expect Timeout in Playwright Config (TypeScript)
DESCRIPTION: This snippet shows how to set a global expect timeout in the Playwright configuration file. It sets the timeout to 10,000 milliseconds (10 seconds) for all expect assertions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-timeouts-js.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  expect: {
    timeout: 10_000,
  },
});
```

----------------------------------------

TITLE: Retrieving Request Timing with Playwright in Java
DESCRIPTION: Shows how to attach an event handler for finished requests with Playwright in Java, access timing information from the request object, and compute timing deltas. Requires Playwright for Java and an initialized page object. It uses onRequestFinished event handling and prints the difference between responseEnd and startTime. Input is the page navigation URL; output is timing metrics written to standard output. Timing properties are only available when the request finishes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_7

LANGUAGE: java
CODE:
```
page.onRequestFinished(request -> {\n  Timing timing = request.timing();\n  System.out.println(timing.responseEnd - timing.startTime);\n});\npage.navigate(\"http://example.com\");
```

----------------------------------------

TITLE: Defining ARIA Snapshot Element Structure in YAML
DESCRIPTION: This YAML snippet illustrates the format used for representing an accessible element within a Playwright ARIA snapshot. It shows the structure including the element's role, optional accessible name (which can be an exact string or a regex pattern), and optional attributes with their values enclosed in square brackets.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_5

LANGUAGE: yaml
CODE:
```
```yaml
- role "name" [attribute=value]
```
```

----------------------------------------

TITLE: Setting HAR Recording Mode (C#, Java, Python)
DESCRIPTION: Configures the detail level of HAR recording for non-JavaScript language bindings. Minimal mode only records information needed for routing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_78

LANGUAGE: python
CODE:
```
- `recordHarMode` ?<[HarMode]<"full"|"minimal">>
```

----------------------------------------

TITLE: Waiting for Image Elements Across Multiple URLs in JavaScript
DESCRIPTION: This snippet demonstrates how to use Frame.waitForSelector to wait for and retrieve image elements across multiple URLs in a Playwright script using JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_45

LANGUAGE: javascript
CODE:
```
const { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.

(async () => {
  const browser = await chromium.launch();
  const page = await browser.newPage();
  for (const currentURL of ['https://google.com', 'https://bbc.com']) {
    await page.goto(currentURL);
    const element = await page.mainFrame().waitForSelector('img');
    console.log('Loaded image: ' + await element.getAttribute('src'));
  }
  await browser.close();
})();
```

----------------------------------------

TITLE: Runtime Annotations in Playwright
DESCRIPTION: Demonstrates how to add annotations during test execution using test.info().annotations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-annotations-js.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
test('example test', async ({ page, browser }) => {
  test.info().annotations.push({
    type: 'browser version',
    description: browser.version(),
  });

  // ...
});
```

----------------------------------------

TITLE: Retrieve Multiple Header Values
DESCRIPTION: The `Response.headerValues` method returns an array of values for specified header names, handling repeated headers comprehensively. It's asynchronous and should be used within an async function.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
async function headerValues(headerName) {\n  const values = await response.headerValues(headerName);\n  console.log(`${headerName} values:`, values);\n}
```

----------------------------------------

TITLE: Configuring Custom Reporter in Playwright Config
DESCRIPTION: Example of how to configure a custom reporter in the Playwright configuration file using defineConfig.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporter-api/class-reporter.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: [['./my-awesome-reporter.ts', { customOption: 'some value' }]],
});
```

----------------------------------------

TITLE: Setting Permissions for Browser Context
DESCRIPTION: Defines the permissions option for browser contexts. This allows granting a list of permissions to all pages in the context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_59

LANGUAGE: js
CODE:
```
- `permissions` <[Array]<[string]>>

A list of permissions to grant to all pages in this context. See
[`method: BrowserContext.grantPermissions`] for more details. Defaults to none.
```

----------------------------------------

TITLE: Using toMatchAriaSnapshot with an inline snapshot in JavaScript
DESCRIPTION: Example of using the toMatchAriaSnapshot method to verify the accessibility structure of a page in JavaScript. The snapshot defines the expected accessibility elements like headings and textboxes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_38

LANGUAGE: javascript
CODE:
```
await page.goto('https://demo.playwright.dev/todomvc/');
await expect(page.locator('body')).toMatchAriaSnapshot(`
  - heading "todos"
  - textbox "What needs to be done?"
`);
```

----------------------------------------

TITLE: Mocking WebSocket Messages in C#
DESCRIPTION: Demonstrates how to use `Page.RouteWebSocketAsync` in C# to intercept WebSocket connections and mock messages. The example shows how to listen for a specific message ('request') and send a predefined response ('response').
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_8

LANGUAGE: csharp
CODE:
```
await page.RouteWebSocketAsync("/ws", ws => {
  ws.OnMessage(frame => {
    if (frame.Text == "request")
      ws.Send("response");
  });
});
```

----------------------------------------

TITLE: Setting Browser Locale in Playwright Tests
DESCRIPTION: Example showing how to specify the user locale for tests, affecting language settings, date formatting, and Accept-Language headers in the browser.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_22

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    locale: 'it-IT',
  },
});
```

----------------------------------------

TITLE: Custom Callback on Every Actionability Check with Locator Handler in Java
DESCRIPTION: Java implementation of a locator handler with the body element that runs a custom JavaScript function before every actionability check. Uses the noWaitAfter option since the handler doesn't hide the body element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_87

LANGUAGE: java
CODE:
```
// Setup the handler.
page.addLocatorHandler(page.locator("body"), () -> {
  page.evaluate("window.removeObstructionsForTestIfNeeded()");
}, new Page.AddLocatorHandlerOptions().setNoWaitAfter(true));

// Write the test as usual.
page.navigate("https://example.com");
page.getByRole("button", Page.GetByRoleOptions().setName("Start here")).click();
```

----------------------------------------

TITLE: JavaScript Inline Init Script
DESCRIPTION: Example of using an inline initialization script with a parameter in JavaScript
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_12

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

// Add script for every test in the beforeEach hook.
test.beforeEach(async ({ page }) => {
  const value = 42;
  await page.addInitScript(value => {
    Math.random = () => value;
  }, value);
});
```

----------------------------------------

TITLE: Emulating Offline Mode in Python (Async)
DESCRIPTION: Creates a new browser context with offline mode enabled using the Playwright Python async API. This allows testing how applications handle network unavailability.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_71

LANGUAGE: python
CODE:
```
context = await browser.new_context(
  offline=True
)
```

----------------------------------------

TITLE: Retrieving All Response Headers in Playwright (JavaScript and Python)
DESCRIPTION: The `Response.allHeaders` method retrieves an object containing all HTTP headers associated with the response. It returns header names in their original casing and includes security-related headers, such as cookies. This method requires async context, as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
async function allHeaders() {\n  const headers = await response.allHeaders();\n  console.log(headers);\n}
```

----------------------------------------

TITLE: Exposing Page URL Using Python Sync in Playwright
DESCRIPTION: Synchronous Python implementation showing how to expose page URL through context binding. Demonstrates synchronous context management and event handling.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_13

LANGUAGE: python
CODE:
```
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = webkit.launch(headless=False)
    context = browser.new_context()
    context.expose_binding("pageURL", lambda source: source["page"].url)
    page = context.new_page()
    page.set_content("""
    <script>
      async function onClick() {
        document.querySelector('div').textContent = await window.pageURL();
      }
    </script>
    <button onclick="onClick()">Click me</button>
    <div></div>
    """)
    page.get_by_role("button").click()

with sync_playwright() as playwright:
    run(playwright)
```

----------------------------------------

TITLE: Handling Network Requests in Playwright Component Tests
DESCRIPTION: Demonstrates how to handle network requests in Playwright component tests using the experimental router fixture. It shows how to use MSW library handlers for mocking network requests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_21

LANGUAGE: javascript
CODE:
```
import { handlers } from '@src/mocks/handlers';

test.beforeEach(async ({ router }) => {
  // install common handlers before each test
  await router.use(...handlers);
});

test('example test', async ({ mount }) => {
  // test as usual, your handlers are active
  // ...
});
```

LANGUAGE: javascript
CODE:
```
import { http, HttpResponse } from 'msw';

test('example test', async ({ mount, router }) => {
  await router.use(http.get('/data', async ({ request }) => {
    return HttpResponse.json({ value: 'mocked' });
  }));

  // test as usual, your handler is active
  // ...
});
```

----------------------------------------

TITLE: Uploading Directory with Playwright Java
DESCRIPTION: Shows how to use the `setInputFiles` method on a Locator to upload an entire directory, which is useful for `<input type=file webkitdirectory>` elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_10

LANGUAGE: Java
CODE:
```
page.getByLabel("Upload directory").setInputFiles(Paths.get("mydir"));
```

----------------------------------------

TITLE: Fast Forwarding and Pausing Time - Playwright C#
DESCRIPTION: Leverages Playwright's C# bindings to manipulate the page clock in end-to-end tests through async methods. It demonstrates clock installation, pausing at specific times, fast forwarding, and verifying time-related changes on the page. Prerequisites are Playwright C#, async/await constructs, and correct date/time use.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_7

LANGUAGE: csharp
CODE:
```
// Initialize clock with some time before the test time and let the page load naturally.
// `Date.now` will progress as the timers fire.
await Page.Clock.InstallAsync(new()
{
  TimeDate = new DateTime(2024, 2, 2, 8, 0, 0)
});
await Page.GotoAsync("http://localhost:3333");

// Pretend that the user closed the laptop lid and opened it again at 10am.
// Pause the time once reached that point.
await Page.Clock.PauseAtAsync(new DateTime(2024, 2, 2, 10, 0, 0));

// Assert the page state.
await Expect(Page.GetByTestId("current-time")).ToHaveTextAsync("2/2/2024, 10:00:00 AM");

// Close the laptop lid again and open it at 10:30am.
await Page.Clock.FastForwardAsync("30:00");
await Expect(Page.GetByTestId("current-time")).ToHaveTextAsync("2/2/2024, 10:30:00 AM");
```

----------------------------------------

TITLE: Specifying Target Position for Playwright Drop Actions
DESCRIPTION: Defines the `targetPosition` object parameter for Playwright drag-and-drop actions. It specifies the coordinates (`x`, `y`) relative to the top-left corner of the target element's padding box where the drop should occur. If not provided, a visible point on the element is used.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_23

LANGUAGE: markdown
CODE:
```
- `targetPosition` <[Object]>
  - `x` <[float]>
  - `y` <[float]>
```

----------------------------------------

TITLE: Triggering Select-All Keyboard Shortcut in Playwright (Java)
DESCRIPTION: This Java snippet shows how to simulate the 'Select All' keyboard shortcut (Ctrl+A or Cmd+A) using Playwright's `page.keyboard().press()` method. The 'ControlOrMeta' modifier automatically resolves to 'Control' on Windows/Linux and 'Meta' (Command) on macOS.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_11

LANGUAGE: java
CODE:
```
```java
page.keyboard().press("ControlOrMeta+A");
```
```

----------------------------------------

TITLE: Connecting to AndroidWebView and Returning a Page
DESCRIPTION: This method connects to the WebView and returns a regular Playwright Page object for interaction. It is an asynchronous method that returns a Promise resolving to a Page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androidwebview.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
async method: AndroidWebView.page
- returns: <[Page]>
```

----------------------------------------

TITLE: Injecting Initialization Script via Path (Python Sync)
DESCRIPTION: Uses Playwright's sync Python API to inject a script file for all newly created documents or frames. Ensures environment consistency before application scripts run. Path can be absolute or relative. Python Playwright (sync API) is needed.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_26

LANGUAGE: python sync
CODE:
```
# in your playwright script, assuming the preload.js file is in same directory
page.add_init_script(path="./preload.js")
```

----------------------------------------

TITLE: Installing Playwright with HTTPS Proxy (C#)
DESCRIPTION: Commands to install Playwright browsers through an HTTPS proxy for C# implementations. Includes examples for bash, batch, and powershell environments.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_22

LANGUAGE: bash
CODE:
```
HTTPS_PROXY=https://192.0.2.1 pwsh bin/Debug/netX/playwright.ps1 install
```

LANGUAGE: batch
CODE:
```
set HTTPS_PROXY=https://192.0.2.1
pwsh bin/Debug/netX/playwright.ps1 install
```

LANGUAGE: powershell
CODE:
```
$Env:HTTPS_PROXY="https://192.0.2.1"
pwsh bin/Debug/netX/playwright.ps1 install
```

----------------------------------------

TITLE: Setting TLS Client Certificates with Browser.NewContextAsync (C#)
DESCRIPTION: Demonstrates how to configure TLS client certificates when creating a new browser context using Browser.NewContextAsync. This allows the client to authenticate with a server requiring client certificates.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_9

LANGUAGE: csharp
CODE:
```
var context = await Browser.NewContextAsync(new() {
  ClientCertificates = [
    new() {
      Origin = "https://example.com",
      CertPath = "client-certificates/cert.pem",
      KeyPath = "client-certificates/key.pem",
    }
  ]
});
```

----------------------------------------

TITLE: Configuring Video Recording (JavaScript)
DESCRIPTION: Sets up video recording for browser context in JavaScript. Specifies directory and optional video dimensions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_80

LANGUAGE: javascript
CODE:
```
- `recordVideo` <[Object]>
  - `dir` <[path]> Path to the directory to put videos into.
  - `size` ?<[Object]> Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport`
    scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450.
    Actual picture of each page will be scaled down if necessary to fit the specified size.
    - `width` <[int]> Video frame width.
    - `height` <[int]> Video frame height.
```

----------------------------------------

TITLE: Disabling Specific Accessibility Rules
DESCRIPTION: Shows how to disable individual accessibility rules when dealing with known violations that cannot be immediately fixed.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-java.md#2025-04-22_snippet_4

LANGUAGE: java
CODE:
```
AxeResults accessibilityScanResults = new AxeBuilder(page)
  .disableRules(Arrays.asList("duplicate-id"))
  .analyze();

AssertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());
```

----------------------------------------

TITLE: Blocking WebSocket Messages in Both Directions with Playwright in JavaScript
DESCRIPTION: Demonstrates Playwright's capability to block specific messages in both directions over a WebSocket connection using JavaScript. Requires a WebSocket setup and configured route.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
await page.routeWebSocket('/ws', ws => {
  const server = ws.connectToServer();
  ws.onMessage(message => {
    if (message !== 'blocked-from-the-page')
      server.send(message);
  });
  server.onMessage(message => {
    if (message !== 'blocked-from-the-server')
      ws.send(message);
  });
});
```

----------------------------------------

TITLE: Handling WebSocket Events in Java
DESCRIPTION: This snippet shows how to handle WebSocket events in Playwright using Java. It demonstrates logging WebSocket opening, frame sending/receiving, and closing events.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_33

LANGUAGE: java
CODE:
```
page.onWebSocket(ws -> {
  log("WebSocket opened: " + ws.url());
  ws.onFrameSent(frameData -> log(frameData.text()));
  ws.onFrameReceived(frameData -> log(frameData.text()));
  ws.onClose(ws1 -> log("WebSocket closed"));
});
```

----------------------------------------

TITLE: Setting Timezone in Playwright Test
DESCRIPTION: Configures the timezone for the test environment using the TestOptions.timezoneId property in the Playwright configuration file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_31

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    timezoneId: 'Europe/Rome',
  },
});
```

----------------------------------------

TITLE: Accessing Error Stack in JavaScript
DESCRIPTION: Retrieves the error stack trace. This is set when an Error (or its subclass) has been thrown during test execution.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfoerror.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
testInfoError.stack
```

----------------------------------------

TITLE: Configuring Client Certificates in Playwright Tests
DESCRIPTION: Example showing how to provide client certificates for authentication with websites that require certificate-based authentication.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    clientCertificates: [{
      origin: 'https://example.com',
      certPath: './cert.pem',
      keyPath: './key.pem',
      passphrase: 'mysecretpassword',
    }],
  },
});
```

----------------------------------------

TITLE: Overriding Math.random in Page Initialization Script (JavaScript - Browser Context)
DESCRIPTION: Demonstrates a preload script (`preload.js`) that overrides Math.random to always return 42. The script is meant to be injected into all new pages/frames via Playwright's addInitScript. Raw script for use with addInitScript in supported languages. No dependencies besides Node.js if run standalone.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_21

LANGUAGE: js browser
CODE:
```
// preload.js
Math.random = () => 42;
```

----------------------------------------

TITLE: Running Playwright Tests with Blob Reporter (Bash)
DESCRIPTION: Executes Playwright tests from the command line, configuring the test runner to use the 'blob' reporter. This reporter generates a zip file containing detailed test run information, primarily used for merging reports from sharded test runs.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_18

LANGUAGE: bash
CODE:
```
npx playwright test --reporter=blob
```

----------------------------------------

TITLE: Saving Authentication State with Playwright Codegen for C#
DESCRIPTION: Command to generate code for GitHub while saving authentication state (cookies, localStorage, IndexedDB) to auth.json using C#. This PowerShell execution allows reusing authentication in subsequent test recordings.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_23

LANGUAGE: bash
CODE:
```
pwsh bin/Debug/netX/playwright.ps1 codegen github.com/microsoft/playwright --save-storage=auth.json
```

----------------------------------------

TITLE: Synchronous Frame.wait_for_function Example in Python
DESCRIPTION: This Python example shows the synchronous usage of Frame.wait_for_function. It performs the same operation as the asynchronous example, launching a WebKit browser, setting a timeout to change a variable, and waiting for that change.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_38

LANGUAGE: python
CODE:
```
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = webkit.launch()
    page = browser.new_page()
    page.evaluate("window.x = 0; setTimeout(() => { window.x = 100 }, 1000);")
    page.main_frame.wait_for_function("() => window.x > 0")
    browser.close()

with sync_playwright() as playwright:
    run(playwright)
```

----------------------------------------

TITLE: Setting Locale Option for Tests in Playwright
DESCRIPTION: Demonstrates how to use `test.use` to set the locale option for all tests in a file. This affects the default context and page configurations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_42

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.use({ locale: 'en-US' });

test('test with locale', async ({ page }) => {
  // Default context and page have locale as specified
});
```

----------------------------------------

TITLE: Appending Files to FormData for Multipart Requests in Playwright Java
DESCRIPTION: Shows how to use FormData.create and formData.append with FilePayload to construct multipart form data containing multiple files with the same field name. This FormData object is then used with RequestOptions.setMultipart for making an API request.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_16

LANGUAGE: java
CODE:
```
FormData formData = FormData.create();
formData.append("file", new FilePayload("f1.js", "text/javascript",
"var x = 2024;".getBytes(StandardCharsets.UTF_8)));
formData.append("file", new FilePayload("f2.txt", "text/plain",
  "hello".getBytes(StandardCharsets.UTF_8)));
APIResponse response = context.request().post("https://example.com/uploadFile", RequestOptions.create().setMultipart(formData));
```

----------------------------------------

TITLE: Limited-Use Locator Handler with Times Option in C#
DESCRIPTION: C# implementation of a locator handler that automatically removes itself after one use by setting the Times option to 1. This handler clicks on a newsletter dialog when it appears.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_95

LANGUAGE: csharp
CODE:
```
await page.AddLocatorHandlerAsync(page.GetByText("Sign up to the newsletter"), async locator => {
  await locator.ClickAsync();
}, new() { Times = 1 });
```

----------------------------------------

TITLE: Accessing TestResult Properties in JavaScript
DESCRIPTION: This snippet demonstrates how to access various properties of a TestResult object in JavaScript. It includes examples of accessing attachments, annotations, duration, errors, and other test execution details.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporter-api/class-testresult.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
// Accessing TestResult properties
const testResult = getTestResult(); // Assume we have a TestResult object

// Attachments
const attachments = testResult.attachments;
attachments.forEach(attachment => {
  console.log(`Attachment: ${attachment.name}, Type: ${attachment.contentType}`);
});

// Annotations
const annotations = testResult.annotations;
annnotations.forEach(annotation => {
  console.log(`Annotation: ${annotation.type}, Description: ${annotation.description}`);
});

// Duration and status
console.log(`Test duration: ${testResult.duration}ms`);
console.log(`Test status: ${testResult.status}`);

// Errors
if (testResult.error) {
  console.error(`Test error: ${testResult.error}`);
}

// Steps
testResult.steps.forEach(step => {
  console.log(`Step: ${step.title}`);
});

// Worker information
console.log(`Worker index: ${testResult.workerIndex}`);
console.log(`Parallel index: ${testResult.parallelIndex}`);
```

----------------------------------------

TITLE: Hover and Click Using ElementHandle in Java
DESCRIPTION: Illustrates the use of ElementHandle in Java to hover and click on a text element. This requires querying the DOM for the text and performing hover and click actions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_6

LANGUAGE: Java
CODE:
```
ElementHandle handle = page.querySelector("text=Submit");
handle.hover();
handle.click();
```

----------------------------------------

TITLE: Form Data Submission with RequestOptions in Java
DESCRIPTION: Shows how to submit form data using application/x-www-form-urlencoded encoding.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-requestoptions.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
context.request().post("https://example.com/signup", RequestOptions.create().setForm(
  FormData.create()
    .set("firstName", "John")
    .set("lastName", "Doe")));
```

----------------------------------------

TITLE: Setting Viewport Per Test in Playwright Test (JavaScript)
DESCRIPTION: This snippet demonstrates how to set a specific viewport size for an individual test using `test.use` within a Playwright Test file (`example.spec.ts`). This setting overrides any globally configured viewport for this specific test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
```js tab=js-test title="tests/example.spec.ts"
import { test, expect } from '@playwright/test';

test.use({
  viewport: { width: 1600, height: 1200 },
});

test('my test', async ({ page }) => {
  // ...
});
```
```

----------------------------------------

TITLE: Using toEqual with Pattern Matching in GenericAssertions
DESCRIPTION: Shows an advanced use of 'toEqual' method with pattern matching. It uses various matchers to partially compare complex objects and arrays.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_18

LANGUAGE: javascript
CODE:
```
expect({
  list: [1, 2, 3],
  obj: { prop: 'Hello world!', another: 'some other value' },
  extra: 'extra',
}).toEqual(expect.objectContaining({
  list: expect.arrayContaining([2, 3]),
  obj: expect.objectContaining({ prop: expect.stringContaining('Hello') }),
}));
```

----------------------------------------

TITLE: Evaluating JavaScript on Multiple DOM Elements by Selector
DESCRIPTION: Defines the pageFunction parameter for evalOnSelectorAll method in JavaScript. This function will be evaluated with an array of selected DOM elements as its argument.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_45

LANGUAGE: js
CODE:
```
- `pageFunction` <[function]\([Array]<[Element]>\)|[string]>

Function to be evaluated in the page context.
```

----------------------------------------

TITLE: Swiping Gestures on AndroidDevice with Playwright JS
DESCRIPTION: androidDevice.swipe performs a swipe in a given direction across a percentage of a widget's size. Supports speed and timeout options for fine tuning. Inputs: selector, direction, percent. Used to automate UI nav and list movement. No return value.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_19

LANGUAGE: js
CODE:
```
// Swipe a widget.
await androidDevice.swipe({
  selector: mySelector,
  direction: 'left',
  percent: 1.0,
  speed: 500, // Optional
  timeout: 2500 // Optional
});
```

----------------------------------------

TITLE: Emulating Geolocation, Language and Timezone with Playwright Codegen for Java
DESCRIPTION: Command to generate code while emulating Rome, Italy location, Italian language, and European/Rome timezone for Bing Maps using Java. This Maven execution demonstrates testing location-aware applications.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_17

LANGUAGE: bash
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args='codegen --timezone="Europe/Rome" --geolocation="41.890221,12.492348" --lang="it-IT" bing.com/maps'
```

----------------------------------------

TITLE: Boxing Test Steps in Playwright
DESCRIPTION: Explains how to use the 'box' option in test.step() to change error reporting behavior. Boxed steps report errors at the step call site rather than inside the step implementation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_39

LANGUAGE: javascript
CODE:
```
async function login(page) {
  await test.step('login', async () => {
    // ...
  }, { box: true });  // Note the "box" option here.
}

test('example', async ({ page }) => {
  await page.goto('https://github.com/login');
  await login(page);
});
```

----------------------------------------

TITLE: Capturing Screenshots on AndroidDevice with Playwright JS
DESCRIPTION: AndroidDevice.screenshot captures the device's current screen buffer, optionally saving to a file path. Returns a Buffer of the image. Used for regression, validation, or visual monitoring. Input: path (optional). Output: image buffer.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_15

LANGUAGE: js
CODE:
```
// Take a screenshot and save to a file.
const buffer = await androidDevice.screenshot({ path: 'screen.jpg' });
```

----------------------------------------

TITLE: Filter Locators with hasNot and hasNotText Playwright Python
DESCRIPTION: Demonstrates the new `has_not` and `has_not_text` options within the `Locator.filter` method in Playwright Python version 1.33. These options allow filtering elements based on whether they *do not* contain a specific locator or text, respectively.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_24

LANGUAGE: python
CODE:
```
row_locator = page.locator("tr")
row_locator.filter(has_not_text="text in column 1").filter(
    has_not=page.get_by_role("button", name="column 2 button")
).screenshot()
```

----------------------------------------

TITLE: Connecting to Remote Playwright Server with C# API
DESCRIPTION: C# code to connect to a remote Playwright server using the Playwright API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_18

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;

using var playwright = await Playwright.CreateAsync();
await using var browser = await playwright.Chromium.ConnectAsync("ws://127.0.0.1:3000/");
```

----------------------------------------

TITLE: Setting Forced Colors Emulation for JavaScript Browser Context
DESCRIPTION: Defines the forcedColors option for browser contexts in JavaScript and Java. This emulates the forced-colors media feature with values 'active' or 'none'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_67

LANGUAGE: js
CODE:
```
- `forcedColors` <null|[ForcedColors]<"active"|"none">>

Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See [`method: Page.emulateMedia`] for more details. Passing `null` resets emulation to system defaults. Defaults to `'none'`.
```

----------------------------------------

TITLE: Blocking WebSocket Messages in Both Directions with Playwright in C#
DESCRIPTION: Configures Playwright in C# to block specific WebSocket messages in both client and server directions. Requires .NET environment with Playwright setup.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_19

LANGUAGE: csharp
CODE:
```
await page.RouteWebSocketAsync("/ws", ws => {
  var server = ws.ConnectToServer();
  ws.OnMessage(frame => {
    if (frame.Text != "blocked-from-the-page")
      server.Send(frame.Text);
  });
  server.OnMessage(frame => {
    if (frame.Text != "blocked-from-the-server")
      ws.Send(frame.Text);
  });
});
```

----------------------------------------

TITLE: Partial ARIA Snapshot Matching Checkbox Role in YAML
DESCRIPTION: This YAML snippet provides a partial ARIA snapshot template for a checkbox. By specifying only '- checkbox', it matches any element with the checkbox role, ignoring its attributes like the 'checked' state. This allows the test to pass regardless of whether the checkbox is checked or not.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_15

LANGUAGE: yaml
CODE:
```
```yaml
- checkbox
```
```

----------------------------------------

TITLE: Exact Name Matching Option for Role Selectors
DESCRIPTION: Defines the `exact` option for role-based name matching to enable case-sensitive whole-string comparison when searching by accessible name.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_124

LANGUAGE: typescript
CODE:
```
* since: v1.28
- `exact` <[boolean]>
```

----------------------------------------

TITLE: Logging Focused Node Name in Accessibility Snapshot with Python (Async)
DESCRIPTION: Analyzes the accessibility snapshot to find and log the name of the focused node in a web page using Python's async features. Utilizes a helper function `find_focused_node()` to recursively find focused nodes within the structure. Requires Playwright setup and Python's async capabilities.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-accessibility.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
def find_focused_node(node):
    if node.get("focused"):
        return node
    for child in (node.get("children") or []):
        found_node = find_focused_node(child)
        if found_node:
            return found_node
    return None

snapshot = await page.accessibility.snapshot()
node = find_focused_node(snapshot)
if node:
    print(node["name"])
```

----------------------------------------

TITLE: Running tests in Chromium headless shell using Playwright
DESCRIPTION: This snippet shows how to install only the headless shell of Chromium when running tests in headless mode only, which is particularly useful in CI environments where minimal resources are desired.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_10

LANGUAGE: js
CODE:
```
npx playwright install --with-deps --only-shell
```

----------------------------------------

TITLE: Using Visible Selector String in Playwright Python
DESCRIPTION: `visible` selector engine is equivalent to the `:visible` pseudo class, but could be combined with other selector engines. Click a visible button.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_54

LANGUAGE: Python
CODE:
```
button.click("button >> visible=true")
```

----------------------------------------

TITLE: Configuring Playwright with .runsettings XML
DESCRIPTION: Provides an example of a .runsettings XML file used with Microsoft.Playwright.NUnit and Microsoft.Playwright.MSTest to configure Playwright settings like browser name, timeout, and launch options.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_34

LANGUAGE: xml
CODE:
```
<?xml version="1.0" encoding="utf-8"?>
<RunSettings>
  <!-- Playwright -->
  <Playwright>
    <BrowserName>chromium</BrowserName>
    <ExpectTimeout>5000</ExpectTimeout>
    <LaunchOptions>
      <Headless>true</Headless>
      <Channel>msedge</Channel>
    </LaunchOptions>
  </Playwright>
  <!-- General run configuration -->
  <RunConfiguration>
    <EnvironmentVariables>
      <!-- For debugging selectors, it's recommend to set the following environment variable -->
      <DEBUG>pw:api</DEBUG>
    </EnvironmentVariables>
  </RunConfiguration>
</RunSettings>
```

----------------------------------------

TITLE: Incorrect Dialog Handling Causing Stall (Java)
DESCRIPTION: Demonstrates incorrect usage where a dialog listener (`onDialog`) is registered but does not handle the dialog (e.g., by accepting or dismissing it). This causes the script execution to hang at the action that triggered the dialog because web dialogs are modal.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_6

LANGUAGE: java
CODE:
```
```java
page.onDialog(dialog -> System.out.println(dialog.message()));
page.getByRole(AriaRole.BUTTON).click(); // Will hang here
```
```

----------------------------------------

TITLE: Getting Worker Parallel Index in JavaScript
DESCRIPTION: Retrieves the index of the worker between 0 and workers - 1. This index is unique for concurrently running workers and is also available as an environment variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-workerinfo.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
workerInfo.parallelIndex
```

LANGUAGE: javascript
CODE:
```
process.env.TEST_PARALLEL_INDEX
```

----------------------------------------

TITLE: Declaring Parallel-Only Test Group in JavaScript
DESCRIPTION: Demonstrates how to declare a focused group of tests that run in parallel using test.describe.parallel.only(). This method is used when you want to run only this specific group of tests in parallel.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_22

LANGUAGE: javascript
CODE:
```
test.describe.parallel.only('group', () => {
  test('runs first', async ({ page }) => {});
  test('runs second', async ({ page }) => {});
});
```

----------------------------------------

TITLE: URL Matching for Navigation Waiting
DESCRIPTION: Specifies URL patterns to match when waiting for navigation. Supports string, regular expression, or predicate function that receives URL.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_89

LANGUAGE: javascript
CODE:
```
- `url` <[string]|[RegExp]|[function]\([URL]\):[boolean]>
```

----------------------------------------

TITLE: Python Init Script Examples
DESCRIPTION: Async and sync examples of adding initialization scripts in Python
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
# In your test, assuming the "preload.js" file is in the "mocks" directory.
await page.add_init_script(path="mocks/preload.js")

# In your test, assuming the "preload.js" file is in the "mocks" directory.
page.add_init_script(path="mocks/preload.js")
```

----------------------------------------

TITLE: Installing System Dependencies with Proxy for Playwright (Linux)
DESCRIPTION: Commands to install Playwright system dependencies through a proxy on Linux. These commands must be run as root to properly pass proxy environment variables to the system package manager.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_28

LANGUAGE: bash
CODE:
```
sudo HTTPS_PROXY=https://192.0.2.1 npx playwright install-deps
```

LANGUAGE: bash
CODE:
```
sudo HTTPS_PROXY=https://192.0.2.1 mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install-deps"
```

LANGUAGE: bash
CODE:
```
sudo HTTPS_PROXY=https://192.0.2.1 playwright install-deps
```

LANGUAGE: bash
CODE:
```
sudo HTTPS_PROXY=https://192.0.2.1 pwsh bin/Debug/netX/playwright.ps1 install-deps
```

----------------------------------------

TITLE: Clearing Permission Overrides in Playwright BrowserContext (JS, Java, Python, C#)
DESCRIPTION: Provides examples for using `clearPermissions` to remove all previously set permission overrides for the BrowserContext. This is typically called after specific permissions (like 'clipboard-read') were granted using `grantPermissions` for testing purposes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
const context = await browser.newContext();
await context.grantPermissions(['clipboard-read']);
// do stuff ..
context.clearPermissions();
```

LANGUAGE: java
CODE:
```
BrowserContext context = browser.newContext();
context.grantPermissions(Arrays.asList("clipboard-read"));
// do stuff ..
context.clearPermissions();
```

LANGUAGE: python
CODE:
```
context = await browser.new_context()
await context.grant_permissions(["clipboard-read"])
# do stuff ..
context.clear_permissions()
```

LANGUAGE: python
CODE:
```
context = browser.new_context()
context.grant_permissions(["clipboard-read"])
# do stuff ..
context.clear_permissions()
```

LANGUAGE: csharp
CODE:
```
var context = await browser.NewContextAsync();
await context.GrantPermissionsAsync(new[] { "clipboard-read" });
// Alternatively, you can use the helper class ContextPermissions
//  to specify the permissions...
// do stuff ...
await context.ClearPermissionsAsync();
```

----------------------------------------

TITLE: Scrolling Widgets on AndroidDevice with Playwright JS
DESCRIPTION: AndroidDevice.scroll scrolls a widget in a specified direction ("up","down","left","right") by a percent of widget size. Supports optional speed and timeout. Inputs: selector, direction, percent. No return value. Used to trigger UI scrolling.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_16

LANGUAGE: js
CODE:
```
// Scroll a widget.
await androidDevice.scroll({
  selector: mySelector,
  direction: 'down',
  percent: 0.5,
  speed: 300, // Optional
  timeout: 2000 // Optional
});
```

----------------------------------------

TITLE: Retrieving Video Path in Playwright - Python Async
DESCRIPTION: This Python asynchronous code snippet prints the path of the video recorded in a Playwright browser context when the recordVideo option is enabled. The method is expected to be called asynchronously and waits until the path is finalized once the context is closed.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-video.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
print(await page.video.path())
```

----------------------------------------

TITLE: Using Custom Stylesheet in Screenshot Comparison (JavaScript)
DESCRIPTION: This example demonstrates how to use a custom stylesheet in the `toHaveScreenshot()` method to modify the page appearance during screenshot capture.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-snapshots-js.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('example test', async ({ page }) => {
  await page.goto('https://playwright.dev');
  await expect(page).toHaveScreenshot({ stylePath: path.join(__dirname, 'screenshot.css') });
});
```

----------------------------------------

TITLE: Triggering Select-All Keyboard Shortcut in Playwright (C#)
DESCRIPTION: This C# snippet shows how to simulate the 'Select All' keyboard shortcut (Ctrl+A or Cmd+A) using Playwright's `page.Keyboard.PressAsync` method. The 'ControlOrMeta' modifier automatically resolves to 'Control' on Windows/Linux and 'Meta' (Command) on macOS.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_14

LANGUAGE: csharp
CODE:
```
```csharp
await page.Keyboard.PressAsync("ControlOrMeta+A");
```
```

----------------------------------------

TITLE: Configuring Web Server Output in Playwright Config
DESCRIPTION: Shows how to configure output handling for the web server in Playwright configuration.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_28

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  // Run your local dev server before starting the tests
  webServer: {
    command: 'npm run start',
    url: 'http://127.0.0.1:3000',
    reuseExistingServer: !process.env.CI,
    stdout: 'pipe',
    stderr: 'pipe',
  },
});
```

----------------------------------------

TITLE: Creating Separate Playwright Instances on Different Threads in Java
DESCRIPTION: Example showing how to create multiple Playwright instances each on its own thread. The implementation creates a thread for each browser type (Chromium, WebKit, Firefox), launches a browser process, and captures a screenshot from each browser.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/threading-java.md#2025-04-22_snippet_0

LANGUAGE: java
CODE:
```
package org.example;

import com.microsoft.playwright.*;

import java.nio.file.Paths;

import static java.util.Arrays.asList;

public class PlaywrightThread extends Thread {
  private final String browserName;

  private PlaywrightThread(String browserName) {
    this.browserName = browserName;
  }

  public static void main(String[] args) throws InterruptedException {
    // Create separate playwright thread for each browser.
    for (String browserName: asList("chromium", "webkit", "firefox")) {
      Thread thread = new PlaywrightThread(browserName);
      thread.start();
    }
  }

  @Override
  public void run() {
    try (Playwright playwright = Playwright.create()) {
      BrowserType browserType = getBrowserType(playwright, browserName);
      Browser browser = browserType.launch();
      Page page = browser.newPage();
      page.navigate("https://playwright.dev/");
      page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get("user-agent-" + browserName + ".png")));
    }
  }

  private static BrowserType getBrowserType(Playwright playwright, String browserName) {
    switch (browserName) {
      case "chromium":
        return playwright.chromium();
      case "webkit":
        return playwright.webkit();
      case "firefox":
        return playwright.firefox();
      default:
        throw new IllegalArgumentException();
    }
  }
}
```

----------------------------------------

TITLE: Element Masking for Screenshots
DESCRIPTION: Defines the `mask` option that allows specifying elements to be masked when taking screenshots. Masked elements are covered with a pink overlay box.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_107

LANGUAGE: typescript
CODE:
```
- `mask` <[Array]<[Locator]>>
```

----------------------------------------

TITLE: Using Specific Browser Channel in Playwright Tests
DESCRIPTION: Example showing how to configure a specific browser channel (e.g., 'msedge' for Microsoft Edge) to use for testing instead of the default browser version.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'Microsoft Edge',
      use: {
        ...devices['Desktop Edge'],
        channel: 'msedge'
      },
    },
  ]
});
```

----------------------------------------

TITLE: Using afterAll Hook with Title in Playwright Tests
DESCRIPTION: Demonstrates how to create an afterAll hook with a descriptive title, which can make test reports more readable and provide better context for the hook's purpose.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
test.afterAll('Teardown', async () => {
  console.log('Done with tests');
  // ...
});
```

----------------------------------------

TITLE: Using Screenshot Assertions in JavaScript
DESCRIPTION: Example of using screenshot assertions in JavaScript to verify visual appearance of a page. This waits for consistent screenshots before comparing with the expected image.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
await expect(page).toHaveScreenshot('image.png');
```

----------------------------------------

TITLE: Full Page Screenshot Option
DESCRIPTION: Defines the `fullPage` option that enables capturing the entire scrollable page instead of just the visible viewport.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_109

LANGUAGE: typescript
CODE:
```
- `fullPage` <[boolean]>
```

----------------------------------------

TITLE: Connecting to Remote Browser in Playwright Tests
DESCRIPTION: Example showing how to connect to a remote browser instance using WebSocket endpoint instead of launching a browser locally, useful for special testing environments.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    connectOptions: {
      wsEndpoint: 'ws://localhost:5678',
    },
  },
});
```

----------------------------------------

TITLE: Emulating Media Features in Playwright
DESCRIPTION: Shows how to use the emulateMedia method to change CSS media type and emulate color schemes. It includes examples of changing media type between 'screen' and 'print', and setting color scheme to 'dark'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_39

LANGUAGE: javascript
CODE:
```
await page.evaluate(() => matchMedia('screen').matches);
// → true
await page.evaluate(() => matchMedia('print').matches);
// → false

await page.emulateMedia({ media: 'print' });
await page.evaluate(() => matchMedia('screen').matches);
// → false
await page.evaluate(() => matchMedia('print').matches);
// → true

await page.emulateMedia({});
await page.evaluate(() => matchMedia('screen').matches);
// → true
await page.evaluate(() => matchMedia('print').matches);
// → false
```

LANGUAGE: java
CODE:
```
page.evaluate("() => matchMedia('screen').matches");
// → true
page.evaluate("() => matchMedia('print').matches");
// → false

page.emulateMedia(new Page.EmulateMediaOptions().setMedia(Media.PRINT));
page.evaluate("() => matchMedia('screen').matches");
// → false
page.evaluate("() => matchMedia('print').matches");
// → true

page.emulateMedia(new Page.EmulateMediaOptions());
page.evaluate("() => matchMedia('screen').matches");
// → true
page.evaluate("() => matchMedia('print').matches");
// → false
```

LANGUAGE: python
CODE:
```
await page.evaluate("matchMedia('screen').matches")
# → True
await page.evaluate("matchMedia('print').matches")
# → False

await page.emulate_media(media="print")
await page.evaluate("matchMedia('screen').matches")
# → False
await page.evaluate("matchMedia('print').matches")
# → True

await page.emulate_media()
await page.evaluate("matchMedia('screen').matches")
# → True
await page.evaluate("matchMedia('print').matches")
# → False
```

LANGUAGE: csharp
CODE:
```
await page.EvaluateAsync("() => matchMedia('screen').matches");
// → true
await page.EvaluateAsync("() => matchMedia('print').matches");
// → false

await page.EmulateMediaAsync(new() { Media = Media.Print });
await page.EvaluateAsync("() => matchMedia('screen').matches");
// → false
await page.EvaluateAsync("() => matchMedia('print').matches");
// → true

await page.EmulateMediaAsync(new() { Media = Media.Screen });
await page.EvaluateAsync("() => matchMedia('screen').matches");
// → true
await page.EvaluateAsync("() => matchMedia('print').matches");
// → false
```

----------------------------------------

TITLE: Grouping Trace Actions in C#
DESCRIPTION: Illustrates the use of `Tracing.GroupAsync` and `GroupEndAsync` in C# to visually group related actions within the Playwright trace viewer, improving the organization and readability of trace logs.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_5

LANGUAGE: csharp
CODE:
```
// All actions between GroupAsync and GroupEndAsync
// will be shown in the trace viewer as a group.
await Page.Context.Tracing.GroupAsync("Open Playwright.dev > API");
await Page.GotoAsync("https://playwright.dev/");
await Page.GetByRole(AriaRole.Link, new() { Name = "API" }).ClickAsync();
await Page.Context.Tracing.GroupEndAsync();
```

----------------------------------------

TITLE: Routing WebSocket Connections in Java
DESCRIPTION: Example of routing WebSocket connections using Page.routeWebSocket method in Java. It shows how to intercept and respond to specific WebSocket messages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_97

LANGUAGE: java
CODE:
```
page.routeWebSocket("/ws", ws -> {
  ws.onMessage(frame -> {
    if ("request".equals(frame.text()))
      ws.send("response");
  });
});
```

----------------------------------------

TITLE: Setting Color Scheme for Specific Test in Playwright
DESCRIPTION: Configures the color scheme for a specific test using Playwright Test. This allows testing the site's appearance in dark or light mode for individual tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_57

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.use({
  colorScheme: 'dark' // or 'light'
});

test('my test with dark mode', async ({ page }) => {
  // ...
});
```

----------------------------------------

TITLE: Matching Any Non-Null/Undefined Value with expect.anything in JavaScript
DESCRIPTION: Shows how to use `expect.anything()` inside `expect().toEqual()` for pattern matching in Playwright assertions. This matcher matches any value except for `null` and `undefined`, useful when the presence of a property matters more than its specific value.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_27

LANGUAGE: javascript
CODE:
```
```js
const value = { prop: 1 };
expect(value).toEqual({ prop: expect.anything() });
expect(value).not.toEqual({ otherProp: expect.anything() });
```
```

----------------------------------------

TITLE: Passing a JSHandle as an Argument to page.evaluate in Python (Sync)
DESCRIPTION: Illustrates creating a JavaScript array in the page using `page.evaluate_handle`, obtaining a [JSHandle] to it. Subsequently demonstrates passing this handle into `page.evaluate` to interact with the array (get length, add elements) and finally disposing of the handle using `dispose()`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_13

LANGUAGE: python
CODE:
```
```python sync
# Create new array in page.
my_array_handle = page.evaluate_handle("""() => {
  window.myArray = [1];
  return myArray;
}""")

# Get current length of the array.
length = page.evaluate("a => a.length", my_array_handle)

# Add one more element to the array using the handle
page.evaluate("(arg) => arg.myArray.push(arg.newElement)", {
  'myArray': my_array_handle,
  'newElement': 2
})

# Release the object when it's no longer needed.
my_array_handle.dispose()
```
```

----------------------------------------

TITLE: Installing Playwright Test for End-to-End Testing
DESCRIPTION: Command to install the Playwright Test package, which is a test runner built specifically for end-to-end testing needs, supporting parallel test execution and browser automation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_68

LANGUAGE: bash
CODE:
```
npm i -D @playwright/test
```

----------------------------------------

TITLE: Clearing Browser Permissions in Python (Async)
DESCRIPTION: Revokes all previously granted permissions for the browser context using the Playwright Python async API. This removes any permission settings that were applied earlier.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_40

LANGUAGE: python
CODE:
```
await context.clear_permissions()
```

----------------------------------------

TITLE: Declaring a Fixme Test Group with Test.describe.fixme in JavaScript
DESCRIPTION: Demonstrates how to use test.describe.fixme to declare a group of tests that are marked as "fixme" and will not be executed.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_18

LANGUAGE: javascript
CODE:
```
test.describe.fixme('broken tests that should be fixed', () => {
  test('example', async ({ page }) => {
    // This test will not run
  });
});
```

----------------------------------------

TITLE: Obtain Response Status Text
DESCRIPTION: The `Response.statusText` method returns a string representing the status text of a response, such as 'OK' for successful requests. This is useful for readability and logging purposes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
const statusText = response.statusText();\nconsole.log('Status Text:', statusText);
```

----------------------------------------

TITLE: Ignoring HTTPS Errors in Playwright Tests
DESCRIPTION: Example showing how to configure tests to ignore HTTPS errors, which is useful for testing sites with self-signed certificates or in development environments.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_18

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    ignoreHTTPSErrors: true,
  },
});
```

----------------------------------------

TITLE: Set Custom Title for Playwright Fixtures - JS
DESCRIPTION: Shows how to assign a custom title to a fixture using the `title` option in its definition. This custom title will be displayed in test reports and error messages instead of the default fixture name, providing more descriptive output.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_25

LANGUAGE: TypeScript
CODE:
```
import { test as base } from '@playwright/test';

export const test = base.extend({
  innerFixture: [async ({}, use, testInfo) => {
    // ...
  }, { title: 'my fixture' }],
});
```

----------------------------------------

TITLE: Connecting Playwright to WebView2 using C#
DESCRIPTION: This snippet demonstrates how to connect Playwright to a running WebView2 application using C#. It establishes a connection over CDP and retrieves the browser context and page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_5

LANGUAGE: csharp
CODE:
```
var browser = await playwright.Chromium.ConnectOverCDPAsync("http://localhost:9222");
var context = browser.Contexts[0];
var page = context.Pages[0];
```

----------------------------------------

TITLE: Registering and Using Custom Tag Name Selector in Playwright for Java
DESCRIPTION: This Java snippet shows how to register and use a custom selector engine that selects elements by tag name in Playwright. It operates in a Java context, demonstrating selector registration and element interaction through Playwright's API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/extensibility.md#2025-04-22_snippet_2

LANGUAGE: Java
CODE:
```
// Must be a script that evaluates to a selector engine instance.  The script is evaluated in the page context.
String createTagNameEngine = "{\n" +
  "  // Returns the first element matching given selector in the root's subtree.\n" +
  "  query(root, selector) {\n" +
  "    return root.querySelector(selector);\n" +
  "  },\n" +
  "\n" +
  "  // Returns all elements matching given selector in the root's subtree.\n" +
  "  queryAll(root, selector) {\n" +
  "    return Array.from(root.querySelectorAll(selector));\n" +
  "  }\n" +
  "}";

// Register the engine. Selectors will be prefixed with "tag=".
playwright.selectors().register("tag", createTagNameEngine);

// Now we can use "tag=" selectors.
Locator button = page.locator("tag=button");
button.click();

// We can combine it with built-in locators.
page.locator("tag=div").getByText("Click me").click();

// We can use it in any methods supporting selectors.
int buttonCount = (int) page.locator("tag=button").count();
```

----------------------------------------

TITLE: Passing arguments to wait_for_function in sync Python
DESCRIPTION: Demonstrates how to pass a selector argument to the wait_for_function predicate in synchronous Python. The function waits until an element matching the selector appears in the DOM.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_118

LANGUAGE: python
CODE:
```
selector = ".foo"
page.wait_for_function("selector => !!document.querySelector(selector)", selector)
```

----------------------------------------

TITLE: Intercepting WebSocket Messages with Playwright in C#
DESCRIPTION: Configure Playwright in C# to intercept and possibly modify WebSocket messages before forwarding them to a server. Requires a Playwright setup in a C# environment.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_14

LANGUAGE: csharp
CODE:
```
await page.RouteWebSocketAsync("/ws", ws => {
  var server = ws.ConnectToServer();
  ws.OnMessage(frame => {
    if (frame.Text == "request")
      server.Send("request2");
    else
      server.Send(frame.Text);
  });
});
```

----------------------------------------

TITLE: Creating Anonymous Test Suites in Playwright
DESCRIPTION: Example of using test.describe without a title to create an anonymous suite. This is useful for grouping tests with common options using test.use.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_38

LANGUAGE: javascript
CODE:
```
test.describe(() => {
  test.use({ colorScheme: 'dark' });

  test('one', async ({ page }) => {
    // ...
  });

  test('two', async ({ page }) => {
    // ...
  });
});
```

----------------------------------------

TITLE: Using Merged Playwright Matchers in Test (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the merged `expect` object containing custom matchers from multiple sources within a test file. It imports the merged `test` and `expect` from the local `fixtures` file and uses a custom matcher (`toHaveDatabaseUser`) provided by one of the merged modules (`database-test-utils`) on a test fixture (`database`).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_47

LANGUAGE: typescript
CODE:
```
import { test, expect } from './fixtures';

test('passes', async ({ database }) => {
  await expect(database).toHaveDatabaseUser('admin');
});
```

----------------------------------------

TITLE: Implementing Custom Reporter in JavaScript
DESCRIPTION: Example of implementing a custom test reporter class in JavaScript that logs test execution events. The reporter includes handlers for test begin/end events and overall test run lifecycle.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporter-api/class-reporter.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
// @ts-check

/** @implements {import('@playwright/test/reporter').Reporter} */
class MyReporter {
  constructor(options) {
    console.log(`my-awesome-reporter setup with customOption set to ${options.customOption}`);
  }

  onBegin(config, suite) {
    console.log(`Starting the run with ${suite.allTests().length} tests`);
  }

  onTestBegin(test) {
    console.log(`Starting test ${test.title}`);
  }

  onTestEnd(test, result) {
    console.log(`Finished test ${test.title}: ${result.status}`);
  }

  onEnd(result) {
    console.log(`Finished the run: ${result.status}`);
  }
}

module.exports = MyReporter;
```

----------------------------------------

TITLE: Retrieving Video Path in Playwright - JavaScript
DESCRIPTION: The purpose of this code is to demonstrate how to retrieve the file system path of a video recording in Playwright using JavaScript. This process requires creating a browser context with the recordVideo option enabled. The output provides the path where the video will be stored once the browser context closes. This method throws an error if connected remotely.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-video.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
console.log(await page.video().path());
```

----------------------------------------

TITLE: Running C# Tests with Console Debugging
DESCRIPTION: Commands to run Playwright C# tests with console debugging enabled using dotnet test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
PWDEBUG=console dotnet test
```

LANGUAGE: batch
CODE:
```
set PWDEBUG=console
dotnet test
```

LANGUAGE: powershell
CODE:
```
$env:PWDEBUG=console
dotnet test
```

----------------------------------------

TITLE: Skipping Browser Download in PowerShell
DESCRIPTION: Prevents browser downloads during package installation by setting the PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD environment variable in PowerShell
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-js.md#2025-04-22_snippet_6

LANGUAGE: powershell
CODE:
```
$Env:PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1
npm install
```

----------------------------------------

TITLE: Running Playwright in Non-Headless Mode with SlowMo
DESCRIPTION: C# code demonstrating how to launch Firefox in non-headless mode with slowed execution for debugging purposes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-csharp.md#2025-04-23_snippet_2

LANGUAGE: csharp
CODE:
```
await using var browser = await playwright.Firefox.LaunchAsync(new()
{
    Headless = false,
    SlowMo = 50,
});
```

----------------------------------------

TITLE: Scanning Entire Page for Accessibility with Playwright and axe-core - JavaScript ES6
DESCRIPTION: This snippet demonstrates how to use Playwright Test with the @axe-core/playwright library to scan an entire page for accessibility violations. It uses modern ES6 syntax (import statements) and defines a test that navigates to a given URL, runs AxeBuilder.analyze to detect accessibility issues, and asserts that there are no violations. Dependencies include @playwright/test and @axe-core/playwright, and the key parameter is the page object passed into the test function.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
import { test, expect } from '@playwright/test';
import AxeBuilder from '@axe-core/playwright'; // 1

test.describe('homepage', () => { // 2
  test('should not have any automatically detectable accessibility issues', async ({ page }) => {
    await page.goto('https://your-site.com/'); // 3

    const accessibilityScanResults = await new AxeBuilder({ page }).analyze(); // 4

    expect(accessibilityScanResults.violations).toEqual([]); // 5
  });
});
```

----------------------------------------

TITLE: Recording Video with Browser Context (Java)
DESCRIPTION: This code shows how to create a new browser context with video recording enabled in Java, specifying the directory where videos will be saved.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_5

LANGUAGE: java
CODE:
```
context = browser.newContext(new Browser.NewContextOptions().setRecordVideoDir(Paths.get("videos/")));
// Make sure to close, so that videos are saved.
context.close();
```

----------------------------------------

TITLE: Using Playwright for JavaScript Coverage Analysis
DESCRIPTION: This JavaScript snippet demonstrates how to use Playwright to gather JavaScript coverage data and convert it into an Istanbul report format. It initializes a Chromium browser instance, starts JavaScript coverage, navigates to a URL, and then processes the coverage information using the v8-to-istanbul library.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-coverage.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
const { chromium } = require('playwright');
const v8toIstanbul = require('v8-to-istanbul');

(async () => {
  const browser = await chromium.launch();
  const page = await browser.newPage();
  await page.coverage.startJSCoverage();
  await page.goto('https://chromium.org');
  const coverage = await page.coverage.stopJSCoverage();
  for (const entry of coverage) {
    const converter = v8toIstanbul('', 0, { source: entry.source });
    await converter.load();
    converter.applyCoverage(entry.functions);
    console.log(JSON.stringify(converter.toIstanbul()));
  }
  await browser.close();
})();
```

----------------------------------------

TITLE: Building Custom Playwright Docker Image for Python
DESCRIPTION: Dockerfile to build a custom Docker image with Python and Playwright for Python applications.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_23

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.12-bookworm

RUN pip install playwright==@%%VERSION%% && \
    playwright install --with-deps
```

----------------------------------------

TITLE: Testing Events in Vue Components with Playwright
DESCRIPTION: Illustrates testing events in Vue components using Playwright's component testing framework. It shows two approaches: using the options API and the JSX-style syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
import { test } from '@playwright/experimental-ct-vue';

test('event', async ({ mount }) => {
  const component = await mount(Component, { on: { click() {} } });
});
```

LANGUAGE: javascript
CODE:
```
// Or alternatively, using the `jsx` style
import { test } from '@playwright/experimental-ct-vue';

test('event', async ({ mount }) => {
  const component = await mount(<Component v-on:click={() => {}} />);
});
```

----------------------------------------

TITLE: Hover and Click Using ElementHandle in Python Sync
DESCRIPTION: Explains how to hover and click a specific DOM element using ElementHandle in sync Python. Uses a text selector to identify the element for user interaction.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_8

LANGUAGE: Python
CODE:
```
handle = page.query_selector("text=Submit")
handle.hover()
handle.click()
```

----------------------------------------

TITLE: YAML Regex Pattern Match
DESCRIPTION: YAML snapshot using regular expression to match dynamic heading content
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_22

LANGUAGE: yaml
CODE:
```
- heading /Issues \d+/
```

----------------------------------------

TITLE: Creating and Validating GitHub Issues with Playwright Test
DESCRIPTION: This code demonstrates how to use Playwright to create and validate GitHub issues as part of automated tests. It uses Playwright's request fixture and assumes a repository already exists. Dependencies include Playwright and a valid GitHub personal access token.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-js.md#2025-04-22_snippet_2

LANGUAGE: JavaScript
CODE:
```
const REPO = 'test-repo-1';
const USER = 'github-username';

test('should create a bug report', async ({ request }) => {
  const newIssue = await request.post(`/repos/${USER}/${REPO}/issues`, {
    data: {
      title: '[Bug] report 1',
      body: 'Bug description',
    }
  });
  expect(newIssue.ok()).toBeTruthy();

  const issues = await request.get(`/repos/${USER}/${REPO}/issues`);
  expect(issues.ok()).toBeTruthy();
  expect(await issues.json()).toContainEqual(expect.objectContaining({
    title: '[Bug] report 1',
    body: 'Bug description'
  }));
});

test('should create a feature request', async ({ request }) => {
  const newIssue = await request.post(`/repos/${USER}/${REPO}/issues`, {
    data: {
      title: '[Feature] request 1',
      body: 'Feature description',
    }
  });
  expect(newIssue.ok()).toBeTruthy();

  const issues = await request.get(`/repos/${USER}/${REPO}/issues`);
  expect(issues.ok()).toBeTruthy();
  expect(await issues.json()).toContainEqual(expect.objectContaining({
    title: '[Feature] request 1',
    body: 'Feature description'
  }));
});
```

----------------------------------------

TITLE: Accessing Error Cause in JavaScript
DESCRIPTION: Retrieves the cause of the error, if available. The cause is set when there is a cause for the error and it's an instance of Error.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfoerror.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
testInfoError.cause
```

----------------------------------------

TITLE: Using Test Steps with Attachments and Skip Conditions in Playwright v1.51
DESCRIPTION: Example demonstrating how to work with the new TestStepInfo object to add attachments or conditionally skip test steps.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
test('some test', async ({ page, isMobile }) => {
  // Note the new "step" argument:
  await test.step('here is my step', async step => {
    step.skip(isMobile, 'not relevant on mobile layouts');

    // ...
    await step.attach('my attachment', { body: 'some text' });
    // ...
  });
});
```

----------------------------------------

TITLE: Waiting for Image Elements Across Multiple URLs in Java
DESCRIPTION: This snippet shows how to use Frame.waitForSelector to wait for and retrieve image elements across multiple URLs in a Playwright script using Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_46

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      BrowserType chromium = playwright.chromium();
      Browser browser = chromium.launch();
      Page page = browser.newPage();
      for (String currentURL : Arrays.asList("https://google.com", "https://bbc.com")) {
        page.navigate(currentURL);
        ElementHandle element = page.mainFrame().waitForSelector("img");
        System.out.println("Loaded image: " + element.getAttribute("src"));
      }
      browser.close();
    }
  }
}
```

----------------------------------------

TITLE: WebSocketRoute.onClose Handler - C#
DESCRIPTION: C# implementation of WebSocket closure handler. Accepts nullable int for code and string for reason.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_22

LANGUAGE: csharp
CODE:
```
function(int?, string)
```

----------------------------------------

TITLE: Using a Custom Reporter via Command Line (Bash)
DESCRIPTION: Demonstrates how to specify a custom reporter file directly when running Playwright tests from the command line using the `--reporter` flag, providing the path to the custom reporter implementation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_29

LANGUAGE: bash
CODE:
```
npx playwright test --reporter="./myreporter/my-awesome-reporter.ts"
```

----------------------------------------

TITLE: Appending Form Fields with Files in C#
DESCRIPTION: Shows how to append multiple values to form fields in C#, including text fields and file uploads with explicit MIME types and filenames using FilePayload objects.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-formdata.md#2025-04-22_snippet_2

LANGUAGE: csharp
CODE:
```
var multipart = Context.APIRequest.CreateFormData();
// Only name and value are set.
multipart.Append("firstName", "John");
// Name, value, filename and Content-Type are set.
multipart.Append("attachment", new FilePayload()
{
    Name = "pic.jpg",
    MimeType = "image/jpeg",
    Buffer = File.ReadAllBytes("john.jpg")
});
// Name, value, filename and Content-Type are set.
multipart.Append("attachment", new FilePayload()
{
    Name = "table.csv",
    MimeType = "text/csv",
    Buffer = File.ReadAllBytes("my-tble.csv")
});
await Page.APIRequest.PostAsync("https://localhost/submit", new() { Multipart = multipart });
```

----------------------------------------

TITLE: Polling with Custom Intervals (JS)
DESCRIPTION: Illustrates how to specify custom polling intervals for `expect.poll` using the `intervals` option. This allows fine-grained control over the wait times between retries.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_40

LANGUAGE: js
CODE:
```
await expect.poll(async () => {
  const response = await page.request.get('https://api.example.com');
  return response.status();
}, {
  // Probe, wait 1s, probe, wait 2s, probe, wait 10s, probe, wait 10s, probe
  // ... Defaults to [100, 250, 500, 1000].
  intervals: [1_000, 2_000, 10_000],
  timeout: 60_000
}).toBe(200);
```

----------------------------------------

TITLE: Loading Authentication State with Playwright Codegen for C#
DESCRIPTION: Command to generate code for GitHub while loading previously saved authentication state from auth.json using C#. This PowerShell execution maintains login sessions without requiring re-authentication.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_27

LANGUAGE: bash
CODE:
```
pwsh bin/Debug/netX/playwright.ps1 codegen --load-storage=auth.json github.com/microsoft/playwright
```

----------------------------------------

TITLE: Loading Authentication State with Playwright Codegen for Python
DESCRIPTION: Command to generate code for GitHub while loading previously saved authentication state from auth.json using Python. This maintains login sessions without requiring re-authentication.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_26

LANGUAGE: bash
CODE:
```
playwright codegen --load-storage=auth.json github.com/microsoft/playwright
```

----------------------------------------

TITLE: Naming Test Configuration in Playwright
DESCRIPTION: Configuration to set a custom name for the test configuration that appears in reports and during test execution.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_15

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  name: 'acceptance tests',
});
```

----------------------------------------

TITLE: Detecting Print Dialogs with Playwright (JavaScript)
DESCRIPTION: Demonstrates how to detect if a print dialog was triggered by `window.print()`. It injects JavaScript to replace `window.print` with a function that resolves a Promise, then waits for that Promise to be resolved after clicking the print trigger element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
```js
await page.goto('<url>');

await page.evaluate('(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()');
await page.getByText('Print it!').click();

await page.waitForFunction('window.waitForPrintDialog');
```
```

----------------------------------------

TITLE: Using Nth Selector String in Playwright Python
DESCRIPTION: `nth` selector engine is equivalent to the `:nth-match` pseudo class, but could be combined with other selector engines. Select the first button among all buttons.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_52

LANGUAGE: Python
CODE:
```
button.click("button >> nth=0")
```

----------------------------------------

TITLE: Configuring Client Certificates for TLS Authentication
DESCRIPTION: Defines the clientCertificates option for browser contexts. This allows setting up TLS client authentication by providing certificate and key information for specific origins.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_50

LANGUAGE: js
CODE:
```
- `clientCertificates` <[Array]<[Object]>>
  - `origin` <[string]> Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.
  - `certPath` ?<[path]> Path to the file with the certificate in PEM format.
  - `cert` ?<[Buffer]> Direct value of the certificate in PEM format.
  - `keyPath` ?<[path]> Path to the file with the private key in PEM format.
  - `key` ?<[Buffer]> Direct value of the private key in PEM format.
  - `pfxPath` ?<[path]> Path to the PFX or PKCS12 encoded private key and certificate chain.
  - `pfx` ?<[Buffer]> Direct value of the PFX or PKCS12 encoded private key and certificate chain.
  - `passphrase` ?<[string]> Passphrase for the private key (PEM or PFX).

TLS Client Authentication allows the server to request a client certificate and verify it.

**Details**

An array of client certificates to be used. Each certificate object must have either both `certPath` and `keyPath`, a single `pfxPath`, or their corresponding direct value equivalents (`cert` and `key`, or `pfx`). Optionally, `passphrase` property should be provided if the certificate is encrypted. The `origin` property should be provided with an exact match to the request origin that the certificate is valid for.

:::note
When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it work by replacing `localhost` with `local.playwright`.
:::
```

----------------------------------------

TITLE: Setting HAR Recording Path in Browser Context (C#, Java, Python)
DESCRIPTION: Specifies the path for HAR recording in non-JavaScript language bindings. This enables HTTP Archive recording for all pages in a browser context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_75

LANGUAGE: python
CODE:
```
- `recordHarPath` <[path]>
```

----------------------------------------

TITLE: Emulating Dark Color Scheme with Playwright Codegen for Python
DESCRIPTION: Command to generate code while emulating dark color scheme for the playwright.dev website using Python. This allows testing appearance and functionality in dark mode.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_14

LANGUAGE: bash
CODE:
```
playwright codegen --color-scheme=dark playwright.dev
```

----------------------------------------

TITLE: Running Tests on Specific Browser Types
DESCRIPTION: Example of using the only_browser marker to run tests exclusively on a specific browser.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
import pytest

@pytest.mark.only_browser("chromium")
def test_visit_example(page):
    page.goto("https://example.com")
    # ...
```

----------------------------------------

TITLE: Tracing a Square with Mouse Movements in Python (Async)
DESCRIPTION: This snippet demonstrates how to use the 'page.mouse' object in Python with async/await syntax to trace a 100x100 square by moving the mouse and performing click actions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-mouse.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
# using 'page.mouse' to trace a 100x100 square.
await page.mouse.move(0, 0)
await page.mouse.down()
await page.mouse.move(0, 100)
await page.mouse.move(100, 100)
await page.mouse.move(100, 0)
await page.mouse.move(0, 0)
await page.mouse.up()
```

----------------------------------------

TITLE: Hide Playwright Helper Fixtures with Boxing - JS
DESCRIPTION: Explains how to use the `box: true` option when defining a fixture to prevent it from being displayed as a separate step in test reports, UI mode, and Trace Viewer. This is useful for reducing noise from non-essential helper or automatic fixtures.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_24

LANGUAGE: TypeScript
CODE:
```
import { test as base } from '@playwright/test';

export const test = base.extend({
  helperFixture: [async ({}, use, testInfo) => {
    // ...
  }, { box: true }],
});
```

----------------------------------------

TITLE: Simulating Keyboard Input with Shift Modifier in Playwright (JavaScript)
DESCRIPTION: This snippet demonstrates how to use the Playwright Keyboard API in JavaScript to simulate complex keyboard interactions. It types initial text, moves the cursor, holds the 'Shift' key down, moves the cursor again (selecting text), releases 'Shift', and presses 'Backspace' to delete the selected text. It relies on the `page.keyboard` object and its methods `type`, `press`, `down`, and `up`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
```js
await page.keyboard.type('Hello World!');
await page.keyboard.press('ArrowLeft');

await page.keyboard.down('Shift');
for (let i = 0; i < ' World'.length; i++)
  await page.keyboard.press('ArrowLeft');
await page.keyboard.up('Shift');

await page.keyboard.press('Backspace');
// Result text will end up saying 'Hello!'
```
```

----------------------------------------

TITLE: Dumping Frame Tree using Playwright in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to use Playwright to launch a Firefox browser, navigate to a specific URL, and then recursively dump the frame tree structure to the console. It utilizes the `page.mainFrame()` method to get the root frame and `frame.childFrames()` to access child frames, printing each frame's URL with indentation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
const { firefox } = require('playwright');  // Or 'chromium' or 'webkit'.

(async () => {
  const browser = await firefox.launch();
  const page = await browser.newPage();
  await page.goto('https://www.google.com/chrome/browser/canary.html');
  dumpFrameTree(page.mainFrame(), '');
  await browser.close();

  function dumpFrameTree(frame, indent) {
    console.log(indent + frame.url());
    for (const child of frame.childFrames())
      dumpFrameTree(child, indent + '  ');
  }
})();
```

----------------------------------------

TITLE: Element Handle Selection for Python
DESCRIPTION: Python-specific option for selecting elements by ElementHandle in dropdowns. Allows passing element handles directly.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_94

LANGUAGE: python
CODE:
```
- `element` ?<[ElementHandle]|[Array]<[ElementHandle]>>
```

----------------------------------------

TITLE: Setting Custom Certificate Authority for Playwright Install
DESCRIPTION: Commands to set custom root certificates when using a proxy that intercepts requests with a custom untrusted certificate authority. This prevents 'self signed certificate in certificate chain' errors during browser downloads.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_23

LANGUAGE: bash
CODE:
```
export NODE_EXTRA_CA_CERTS="/path/to/cert.pem"
```

LANGUAGE: batch
CODE:
```
set NODE_EXTRA_CA_CERTS="C:\certs\root.crt"
```

LANGUAGE: powershell
CODE:
```
$Env:NODE_EXTRA_CA_CERTS="C:\certs\root.crt"
```

----------------------------------------

TITLE: Installing Playwright with HTTPS Proxy (Python)
DESCRIPTION: Commands to install Playwright browsers through an HTTPS proxy for Python implementations. Includes examples for bash, batch, and powershell environments.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_20

LANGUAGE: bash
CODE:
```
pip install playwright
HTTPS_PROXY=https://192.0.2.1 playwright install
```

LANGUAGE: batch
CODE:
```
set HTTPS_PROXY=https://192.0.2.1
pip install playwright
playwright install
```

LANGUAGE: powershell
CODE:
```
$Env:HTTPS_PROXY="https://192.0.2.1"
pip install playwright
playwright install
```

----------------------------------------

TITLE: Setting Video Size with Browser Context (C#)
DESCRIPTION: This snippet demonstrates how to create a new browser context with video recording enabled in C#, specifying both the directory and the video size.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_10

LANGUAGE: csharp
CODE:
```
var context = await browser.NewContextAsync(new()
{
    RecordVideoDir = "videos/",
    RecordVideoSize = new RecordVideoSize() { Width = 640, Height = 480 }
});
// Make sure to close, so that videos are saved.
await context.CloseAsync();
```

----------------------------------------

TITLE: Evaluating Expressions on Frame in Python (Sync)
DESCRIPTION: Demonstrates the synchronous usage of the evaluate method in Python to execute a JavaScript expression within a frame and return its result.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_21

LANGUAGE: python
CODE:
```
result = frame.evaluate("([x, y]) => Promise.resolve(x * y)", [7, 8])
print(result) # prints "56"
```

----------------------------------------

TITLE: Setting Video Recording Directory (C#, Java, Python)
DESCRIPTION: Specifies the directory for video recording in non-JavaScript language bindings. Enables video recording for all pages in the context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_81

LANGUAGE: python
CODE:
```
- `recordVideoDir` <[path]>
```

----------------------------------------

TITLE: Exposing SHA256 Function in Playwright Page (Python Async)
DESCRIPTION: This Python code demonstrates how to expose a SHA256 function to the browser page using Playwright's async API. It creates a new page, exposes the function, sets page content with a button, and handles the button click to display the hash.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_62

LANGUAGE: python
CODE:
```
import asyncio
import hashlib
from playwright.async_api import async_playwright, Playwright

def sha256(text):
    m = hashlib.sha256()
    m.update(bytes(text, "utf8"))
    return m.hexdigest()


async def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = await webkit.launch(headless=False)
    page = await browser.new_page()
    await page.expose_function("sha256", sha256)
    await page.set_content("""
        <script>
          async function onClick() {
            document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');
          }
        </script>
        <button onclick="onClick()">Click me</button>
        <div></div>
    """)
    await page.click("button")

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())
```

----------------------------------------

TITLE: Creating Browser Context with Permissions in Python (Async)
DESCRIPTION: Creates a new browser context with notification permissions using the Playwright Python async API. This enables notification capabilities for all pages within the context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_30

LANGUAGE: python
CODE:
```
context = await browser.new_context(
  permissions=['notifications'],
)
```

----------------------------------------

TITLE: Creating Browser Context with Permissions in JavaScript
DESCRIPTION: Creates a new browser context with notification permissions using the Playwright JavaScript library. This enables notification capabilities for all pages within the context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_28

LANGUAGE: javascript
CODE:
```
const context = await browser.newContext({
  permissions: ['notifications'],
});
```

----------------------------------------

TITLE: Setting Device Scale Factor for Emulation
DESCRIPTION: Defines the deviceScaleFactor option for browser contexts. This allows specifying the device pixel ratio for emulation, defaulting to 1.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_52

LANGUAGE: js
CODE:
```
- `deviceScaleFactor` <[float]>

Specify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about [emulating devices with device scale factor](../emulation.md#devices).
```

----------------------------------------

TITLE: Tracing a Square with Mouse Movements in JavaScript
DESCRIPTION: This snippet demonstrates how to use the 'page.mouse' object to trace a 100x100 square by moving the mouse and performing click actions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-mouse.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
// Using 'page.mouse' to trace a 100x100 square.
await page.mouse.move(0, 0);
await page.mouse.down();
await page.mouse.move(0, 100);
await page.mouse.move(100, 100);
await page.mouse.move(100, 0);
await page.mouse.move(0, 0);
await page.mouse.up();
```

----------------------------------------

TITLE: Configuring Chromium Channel for New Headless Mode in Playwright
DESCRIPTION: This code snippet shows how to opt into the new headless mode for Chromium by using the 'chromium' channel in the Playwright test configuration.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'], channel: 'chromium' },
    },
  ],
});
```

----------------------------------------

TITLE: Interacting with an Element using ElementHandle (Stale Potential) in Python (Sync)
DESCRIPTION: Shows finding an element using `page.query_selector` to get an [ElementHandle] and performing actions (hover, click) in synchronous Python. This method can lead to errors if the element becomes stale due to page updates.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_18

LANGUAGE: python
CODE:
```
```python sync
handle = page.query_selector("text=Submit")
handle.hover()
handle.click()
```
```

----------------------------------------

TITLE: Recording HAR File in Python (Sync)
DESCRIPTION: Synchronous Python implementation for recording network traffic to a HAR file using Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_12

LANGUAGE: python
CODE:
```
def test_records_or_updates_the_har_file(page: Page):
    # Get the response from the HAR file
    page.route_from_har("./hars/fruit.har", url="*/**/api/v1/fruits", update=True)

    # Go to the page
    page.goto("https://demo.playwright.dev/api-mocking")

    # Assert that the fruit is visible
    expect(page.get_by_text("Strawberry")).to_be_visible()
```

----------------------------------------

TITLE: Setting Contrast Emulation for JavaScript Browser Context
DESCRIPTION: Defines the contrast option for browser contexts in JavaScript and Java. This emulates the prefers-contrast media feature with values 'no-preference' or 'more'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_69

LANGUAGE: js
CODE:
```
- `contrast` <null|[Contrast]<"no-preference"|"more">>

Emulates `'prefers-contrast'` media feature, supported values are `'no-preference'`, `'more'`. See [`method: Page.emulateMedia`] for more details. Passing `null` resets emulation to system defaults. Defaults to `'no-preference'`.
```

----------------------------------------

TITLE: Dumping Frame Tree using Playwright in Java
DESCRIPTION: This Java example shows how to initialize Playwright, launch a Firefox browser instance, navigate to a URL, and recursively print the frame tree. It uses `page.mainFrame()` to get the main frame and `frame.childFrames()` to iterate through child frames, outputting each frame's URL along with indentation to the standard output.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      BrowserType firefox = playwright.firefox();
      Browser browser = firefox.launch();
      Page page = browser.newPage();
      page.navigate("https://www.google.com/chrome/browser/canary.html");
      dumpFrameTree(page.mainFrame(), "");
      browser.close();
    }
  }
  static void dumpFrameTree(Frame frame, String indent) {
    System.out.println(indent + frame.url());
    for (Frame child : frame.childFrames()) {
      dumpFrameTree(child, indent + "  ");
    }
  }
}
```

----------------------------------------

TITLE: Routing WebSocket Connections in JavaScript
DESCRIPTION: Example of routing WebSocket connections using Page.routeWebSocket method in JavaScript. It demonstrates how to intercept and respond to specific WebSocket messages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_96

LANGUAGE: javascript
CODE:
```
await page.routeWebSocket('/ws', ws => {
  ws.onMessage(message => {
    if (message === 'request')
      ws.send('response');
  });
});
```

----------------------------------------

TITLE: Using ToMatchAriaSnapshotAsync with an inline snapshot in C#
DESCRIPTION: C# example of verifying accessibility structure using ToMatchAriaSnapshotAsync. The method confirms that the body element contains the expected accessibility elements, with proper escaping for nested quotes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_41

LANGUAGE: csharp
CODE:
```
await page.GotoAsync("https://demo.playwright.dev/todomvc/");
await Expect(page.Locator("body")).ToMatchAriaSnapshotAsync(@"
  - heading ""todos""
  - textbox ""What needs to be done?""
");
```

----------------------------------------

TITLE: Recording Playwright Tests with Custom Setup in Python (Sync)
DESCRIPTION: Synchronous Python implementation for Playwright recording with custom configuration. This script launches a headed Chrome browser, configures a context with request routing, and pauses execution to start manual recording.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_31

LANGUAGE: python
CODE:
```
from playwright.sync_api import sync_playwright

with sync_playwright() as p:
    # Make sure to run headed.
    browser = p.chromium.launch(headless=False)

    # Setup context however you like.
    context = browser.new_context() # Pass any options
    context.route('**/*', lambda route: route.continue_())

    # Pause the page, and start recording manually.
    page = context.new_page()
    page.pause()
```

----------------------------------------

TITLE: Asserting Aria Snapshot with Playwright Java
DESCRIPTION: Shows how to use the new `toMatchAriaSnapshot` assertion in Playwright Java to verify the accessibility tree of an element against an expected YAML structure. It navigates to a page and asserts the body's aria snapshot.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_4

LANGUAGE: java
CODE:
```
page.navigate("https://playwright.dev");
assertThat(page.locator("body")).matchesAriaSnapshot("""
  - banner:
    - heading /Playwright enables reliable/ [level=1]
    - link "Get started"
    - link "Star microsoft/playwright on GitHub"
  - main:
    - img "Browsers (Chromium, Firefox, WebKit)"
    - heading "Any browser • Any platform • One API"
""");
```

----------------------------------------

TITLE: Set Global Assertion Timeout in Playwright Python
DESCRIPTION: Configures the default timeout for all Playwright assertions globally in Python. This is typically done in a configuration file like `conftest.py`. The example sets the timeout to 10 seconds (10,000 milliseconds).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-csharp-java-python.md#_snippet_1

LANGUAGE: python
CODE:
```
from playwright.sync_api import expect

expect.set_options(timeout=10_000)
```

----------------------------------------

TITLE: Setting Up Proxy in Playwright Test
DESCRIPTION: Configures proxy settings for the test environment using the TestOptions.proxy property in the Playwright configuration file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_26

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    proxy: {
      server: 'http://myproxy.com:3128',
      bypass: 'localhost',
    },
  },
});
```

----------------------------------------

TITLE: Asserting Banner ARIA Snapshot using Playwright Java
DESCRIPTION: This Java snippet demonstrates ARIA snapshot testing using Playwright's Java binding. It navigates to 'https://playwright.dev/', locates the 'banner' element, and uses `assertThat` with `matchesAriaSnapshot` to compare its accessibility tree against the provided YAML snapshot template.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_3

LANGUAGE: java
CODE:
```
```java
page.navigate("https://playwright.dev/");
assertThat(page.locator("banner")).matchesAriaSnapshot("""
  - banner:
    - heading /Playwright enables reliable end-to-end/ [level=1]
    - link "Get started"
    - link "Star microsoft/playwright on GitHub"
    - link /[\\d]+k\\+ stargazers on GitHub/
""");
```
```

----------------------------------------

TITLE: Disabling Fixed Viewport in Python Browser Context
DESCRIPTION: Defines the noViewport option for browser contexts in Python. When set to true, it allows resizing the window in headed mode without enforcing a fixed viewport.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_49

LANGUAGE: python
CODE:
```
- `noViewport` <[boolean]>

Does not enforce fixed viewport, allows resizing window in the headed mode.
```

----------------------------------------

TITLE: Service Worker Registration in HTML Page
DESCRIPTION: HTML snippet showing how to register a Service Worker in a web page. The registration promise is stored in a window variable for later access.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/service-workers-experimental-network-events-js.md#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<!-- filename: index.html -->
<script>
  window.registrationPromise = navigator.serviceWorker.register('/transparent-service-worker.js');
</script>
```

----------------------------------------

TITLE: Loading Authentication State with Playwright Codegen for JavaScript
DESCRIPTION: Command to generate code for GitHub while loading previously saved authentication state from auth.json using JavaScript. This maintains login sessions without requiring re-authentication.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_24

LANGUAGE: bash
CODE:
```
npx playwright codegen --load-storage=auth.json github.com/microsoft/playwright
```

----------------------------------------

TITLE: Emulating Dark Color Scheme with Playwright Codegen for C#
DESCRIPTION: Command to generate code while emulating dark color scheme for the playwright.dev website using C#. This PowerShell execution allows testing appearance and functionality in dark mode.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_15

LANGUAGE: bash
CODE:
```
pwsh bin/Debug/netX/playwright.ps1 codegen --color-scheme=dark playwright.dev
```

----------------------------------------

TITLE: Using Aria Snapshots with Strict Matching in Playwright v1.52
DESCRIPTION: Code example showing how to use Aria Snapshots with the new /children property for strict matching and /url property for links.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
await expect(locator).toMatchAriaSnapshot(`
    - list
      - /children: equal
      - listitem: Feature A
      - listitem:
        - link "Feature B":
          - /url: "https://playwright.dev"
  `);
```

----------------------------------------

TITLE: Connecting to a Browser via CDP Using Playwright Python (Sync)
DESCRIPTION: Shows Playwright's synchronous CDP connection to a Chromium browser running with debugging enabled. Requires Playwright's sync API and a valid CDP endpoint. Expected returns are browser context and page objects; limited to Chromium-derived browsers.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
browser = playwright.chromium.connect_over_cdp(\"http://localhost:9222\")\ndefault_context = browser.contexts[0]\npage = default_context.pages[0]
```

----------------------------------------

TITLE: Asserting Element Accessible Name with Playwright TypeScript
DESCRIPTION: Asserts that the element located by the locator has a matching accessible name. This assertion automatically retries until the condition is met or a timeout occurs. It must be awaited as it is asynchronous.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_15

LANGUAGE: TypeScript
CODE:
```
await expect(locator).toHaveAccessibleName()
```

----------------------------------------

TITLE: Blocking Service Workers with Playwright .NET
DESCRIPTION: Shows how to disable service workers for a browser context in Playwright for .NET. The Browser.NewContextAsync method is used with the ServiceWorkers option set to ServiceWorkerPolicy.Block. This is useful when service workers interfere with testing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_40

LANGUAGE: csharp
CODE:
```
var context = await Browser.NewContextAsync(new()
{
    ServiceWorkers = ServiceWorkerPolicy.Block
});
```

----------------------------------------

TITLE: Installing Browsers with Custom Path - Multiple Languages
DESCRIPTION: Commands to install Playwright browsers in a custom location using environment variables across different shells and programming languages
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_38

LANGUAGE: bash
CODE:
```
PLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers npx playwright install
```

LANGUAGE: batch
CODE:
```
set PLAYWRIGHT_BROWSERS_PATH=%USERPROFILE%\pw-browsers
npx playwright install
```

LANGUAGE: powershell
CODE:
```
$Env:PLAYWRIGHT_BROWSERS_PATH="$Env:USERPROFILE\pw-browsers"
npx playwright install
```

----------------------------------------

TITLE: Simulating Touch Pan Gesture with Playwright Python Async
DESCRIPTION: This snippet provides asynchronous Python code for simulating a touch pan gesture on a Playwright `Locator`. It includes an async helper function `pan` that awaits the dispatching of `touchstart`, `touchmove`, and `touchend` events. An example async test function demonstrates its usage by panning a map element on Google Maps within an asynchronous Playwright context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#_snippet_5

LANGUAGE: python async
CODE:
```
from playwright.async_api import async_playwright, expect

async def pan(locator, deltaX=0, deltaY=0, steps=5):
    bounds = await locator.bounding_box()
    centerX = bounds['x'] + bounds['width'] / 2
    centerY = bounds['y'] + bounds['height'] / 2

    touches = [{
        'identifier': 0,
        'clientX': centerX,
        'clientY': centerY,
    }]
    await locator.dispatch_event('touchstart', {
        'touches': touches,
        'changedTouches': touches,
        'targetTouches': touches
    })

    for i in range(1, steps + 1):
        touches = [{
            'identifier': 0,
            'clientX': centerX + deltaX * i / steps,
            'clientY': centerY + deltaY * i / steps,
        }]
        await locator.dispatch_event('touchmove', {
            'touches': touches,
            'changedTouches': touches,
            'targetTouches': touches
        })

    await locator.dispatch_event('touchend')

async def test_pan_gesture_to_move_the_map(page):
    await page.goto('https://www.google.com/maps/place/@37.4117722,-122.0713234,15z', wait_until='commit')
    await page.get_by_role('button', name='Keep using web').click()
    await expect(page.get_by_role('button', name='Keep using web')).not_to_be_visible()
    met = page.locator('[data-test-id="met"]')
    for _ in range(5):
        await pan(met, 200, 100)
    await page.screenshot(path="screenshot.png")

async def main():
```

----------------------------------------

TITLE: Frame.WaitForFunctionAsync Example in C#
DESCRIPTION: This C# snippet demonstrates the use of Frame.WaitForFunctionAsync to wait for a specific condition related to the viewport size. It launches a Firefox browser, creates a new page, sets the viewport size, and waits for the inner width to become less than 100 pixels.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_39

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using System.Threading.Tasks;

class FrameExamples
{
    public static async Task Main()
    {
        using var playwright = await Playwright.CreateAsync();
        await using var browser = await playwright.Firefox.LaunchAsync();
        var page = await browser.NewPageAsync();
        await page.SetViewportSizeAsync(50, 50);
        await page.MainFrame.WaitForFunctionAsync("window.innerWidth < 100");
    }
}
```

----------------------------------------

TITLE: Dispatching Click Event in C#
DESCRIPTION: This snippet shows how to dispatch a click event on a button element using the Page.DispatchEventAsync method in C#.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_32

LANGUAGE: csharp
CODE:
```
await page.DispatchEventAsync("button#submit", "click");
```

----------------------------------------

TITLE: Returning Step Value in Playwright Test
DESCRIPTION: Example of using test.step to return a value from a test step. This allows capturing and using the result of a step in subsequent test code.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_36

LANGUAGE: javascript
CODE:
```
test('should work', async ({ page }) => {
  const pageTitle = await test.step('get title', async () => {
    await page.goto('https://playwright.dev');
    return await page.title();
  });
  console.log(pageTitle);
});
```

----------------------------------------

TITLE: Comparing Floating Point Numbers Approximately with expect.closeTo in JavaScript
DESCRIPTION: Demonstrates using `expect.closeTo(expected, numDigits)` within `expect().toEqual()` for approximate equality checks of floating-point numbers in Playwright. This is useful for avoiding precision issues inherent in floating-point arithmetic. The optional `numDigits` parameter specifies the number of decimal places to compare.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_29

LANGUAGE: javascript
CODE:
```
```js
expect({ prop: 0.1 + 0.2 }).not.toEqual({ prop: 0.3 });
expect({ prop: 0.1 + 0.2 }).toEqual({ prop: expect.closeTo(0.3, 5) });
```
```

----------------------------------------

TITLE: Evaluating Selector on ElementHandle in Python (Async)
DESCRIPTION: Illustrates evaluating a selector on an ElementHandle and extracting inner text in Python using async syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_32

LANGUAGE: python
CODE:
```
tweet_handle = await page.query_selector(".tweet")
assert await tweet_handle.eval_on_selector(".like", "node => node.innerText") == "100"
assert await tweet_handle.eval_on_selector(".retweets", "node => node.innerText") == "10"
```

----------------------------------------

TITLE: Recording HAR File in Python (Async)
DESCRIPTION: Asynchronous Python implementation for recording network traffic to a HAR file using Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_11

LANGUAGE: python
CODE:
```
async def test_records_or_updates_the_har_file(page: Page):
    # Get the response from the HAR file
    await page.route_from_har("./hars/fruit.har", url="*/**/api/v1/fruits", update=True)

    # Go to the page
    await page.goto("https://demo.playwright.dev/api-mocking")

    # Assert that the fruit is visible
    await expect(page.get_by_text("Strawberry")).to_be_visible()
```

----------------------------------------

TITLE: Exposing SHA256 Function in Playwright Page (Java)
DESCRIPTION: This Java code exposes a SHA256 function to the browser page using Playwright. It creates a new page, exposes the function, sets page content with a button, and handles the button click to display the hash.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_61

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.*;

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      BrowserType webkit = playwright.webkit();
      Browser browser = webkit.launch(new BrowserType.LaunchOptions().setHeadless(false));
      Page page = browser.newPage();
      page.exposeFunction("sha256", args -> {
        try {
          String text = (String) args[0];
          MessageDigest crypto = MessageDigest.getInstance("SHA-256");
          byte[] token = crypto.digest(text.getBytes(StandardCharsets.UTF_8));
          return Base64.getEncoder().encodeToString(token);
        } catch (NoSuchAlgorithmException e) {
          return null;
        }
      });
      page.setContent(
        "<script>\n" +
        "  async function onClick() {\n" +
        "    document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');\n" +
        "  }\n" +
        "</script>\n" +
        "<button onclick=\"onClick()\">Click me</button>\n" +
        "<div></div>"
      );
      page.click("button");
    }
  }
}
```

----------------------------------------

TITLE: Evaluating Selectors with Playwright Frame - Python
DESCRIPTION: Performs element selection evaluations in Python using Playwright. It facilitates retrieving or altering element properties, and supports asynchronous and synchronous operations with selector targeting.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_11

LANGUAGE: Python
CODE:
```
search_value = await frame.eval_on_selector("#search", "el => el.value")
preload_href = await frame.eval_on_selector("link[rel=preload]", "el => el.href")
html = await frame.eval_on_selector(".main-container", "(e, suffix) => e.outerHTML + suffix", "hello")
```

LANGUAGE: Python
CODE:
```
search_value = frame.eval_on_selector("#search", "el => el.value")
preload_href = frame.eval_on_selector("link[rel=preload]", "el => el.href")
html = frame.eval_on_selector(".main-container", "(e, suffix) => e.outerHTML + suffix", "hello")
```

----------------------------------------

TITLE: Evaluating Handles on Frame in Java
DESCRIPTION: Shows how to use the evaluateHandle method in Java to evaluate an expression and return a JSHandle for the window object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_24

LANGUAGE: java
CODE:
```
// Handle for the window object.
JSHandle aWindowHandle = frame.evaluateHandle("() => Promise.resolve(window)");
```

----------------------------------------

TITLE: Filtering URLs in HAR Recording (C#, Java, Python)
DESCRIPTION: Allows filtering which requests are stored in the HAR file based on URL patterns for non-JavaScript language bindings.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_79

LANGUAGE: python
CODE:
```
- `recordHarUrlFilter` ?<[string]|[RegExp]>
```

----------------------------------------

TITLE: Partial ARIA Snapshot Matching Button Role in YAML
DESCRIPTION: This YAML snippet demonstrates a partial ARIA snapshot template for a button. By specifying only '- button', it matches any element with the button role, regardless of its accessible name (like 'Submit' in the example HTML).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_13

LANGUAGE: yaml
CODE:
```
```yaml
- button
```
```

----------------------------------------

TITLE: Using toBeTruthy Method for Truthy Checking
DESCRIPTION: Demonstrates the use of 'toBeTruthy' method to check if a value is truthy in a boolean context. This is useful when you don't care about the specific truthy value.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
const value = { example: 'value' };
expect(value).toBeTruthy();
```

----------------------------------------

TITLE: Configuring Snapshot Updates
DESCRIPTION: Controls how test snapshots are updated with actual results. Supports 'all', 'changed', 'missing', or 'none' modes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_19

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  updateSnapshots: 'missing',
});
```

----------------------------------------

TITLE: Test Annotations in Playwright
DESCRIPTION: Shows how to add detailed annotations to tests with type and description fields.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-annotations-js.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('test login page', {
  annotation: {
    type: 'issue',
    description: 'https://github.com/microsoft/playwright/issues/23180',
  },
}, async ({ page }) => {
  // ...
});
```

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.describe('report tests', {
  annotation: { type: 'category', description: 'report' },
}, () => {
  test('test report header', async ({ page }) => {
    // ...
  });

  test('test full report', {
    annotation: [
      { type: 'issue', description: 'https://github.com/microsoft/playwright/issues/23180' },
      { type: 'performance', description: 'very slow test!' },
    ],
  }, async ({ page }) => {
    // ...
  });
});
```

----------------------------------------

TITLE: Updating Geolocation in C#
DESCRIPTION: Changes the geolocation of a browser context using the Playwright C# client. This allows testing how an application responds to location changes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_55

LANGUAGE: csharp
CODE:
```
await context.SetGeolocationAsync(new Geolocation() { Longitude = 48.858455, Latitude = 2.294474 });
```

----------------------------------------

TITLE: Exposing SHA256 Function in Playwright Page (Python Sync)
DESCRIPTION: This Python code shows how to expose a SHA256 function to the browser page using Playwright's sync API. It creates a new page, exposes the function, sets page content with a button, and handles the button click to display the hash.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_63

LANGUAGE: python
CODE:
```
import hashlib
from playwright.sync_api import sync_playwright, Playwright

def sha256(text):
    m = hashlib.sha256()
    m.update(bytes(text, "utf8"))
    return m.hexdigest()


def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = webkit.launch(headless=False)
    page = browser.new_page()
    page.expose_function("sha256", sha256)
    page.set_content("""
        <script>
          async function onClick() {
            document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');
          }
        </script>
        <button onclick="onClick()">Click me</button>
        <div></div>
    """)
    page.click("button")

with sync_playwright() as playwright:
    run(playwright)
```

----------------------------------------

TITLE: Using Negated PageAssertions in C#
DESCRIPTION: Example of using the .Not property to negate an assertion in C#, checking that a page URL doesn't contain 'error'. This demonstrates how to verify the absence of a pattern.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_7

LANGUAGE: csharp
CODE:
```
await Expect(Page).Not.ToHaveURLAsync("error");
```

----------------------------------------

TITLE: Access Response Request
DESCRIPTION: The `Response.request` method provides access to the associated Request object, allowing further inspection of the original request that triggered the response.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_11

LANGUAGE: javascript
CODE:
```
const request = response.request();\nconsole.log('Request:', request);
```

----------------------------------------

TITLE: Uninstalling Playwright Browser Binaries (Bash)
DESCRIPTION: Provides examples of using the Playwright CLI uninstall command via Maven to remove installed browser binaries. Shows how to remove browsers installed by the current installation or all ever-installed browsers.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_25

LANGUAGE: Bash
CODE:
```
$ mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="uninstall" # remove browsers installed by this installation
$ mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="uninstall --all" # remove all ever-install Playwright browsers
```

----------------------------------------

TITLE: Await Response Completion (JavaScript)
DESCRIPTION: The `Response.finished` method pauses the execution until the response has completely loaded. It returns `null` on completion, signifying no further data is expected. In JavaScript, this method can also return an error if something goes wrong.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
async function awaitFinish() {\n  await response.finished();\n  console.log('Response finished loading.');\n}
```

----------------------------------------

TITLE: Using ElementHandle.waitForSelector in Python (sync)
DESCRIPTION: Shows how to use the waitForSelector method on an ElementHandle in synchronous Python to wait for a child element to appear in the DOM.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_47

LANGUAGE: python
CODE:
```
page.set_content("<div><span></span></div>")
div = page.query_selector("div")
# waiting for the "span" selector relative to the div.
span = div.wait_for_selector("span", state="attached")
```

----------------------------------------

TITLE: Clicking Anchor Element with ElementHandle in Java
DESCRIPTION: Shows how to click an anchor ('a') DOM element using ElementHandle in Java. Involves obtaining an ElementHandle from a queried selector and clicking the element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_1

LANGUAGE: Java
CODE:
```
ElementHandle hrefElement = page.querySelector("a");
hrefElement.click();
```

----------------------------------------

TITLE: Using CSS :has() Pseudo-class in Playwright
DESCRIPTION: Shows how to use the :has() pseudo-class to find elements that contain other specific elements, in this example finding article elements that contain a div with class 'promo'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
await page.locator('article:has(div.promo)').textContent();
```

LANGUAGE: java
CODE:
```
page.locator("article:has(div.promo)").textContent();
```

LANGUAGE: python
CODE:
```
await page.locator("article:has(div.promo)").text_content()
```

LANGUAGE: python
CODE:
```
page.locator("article:has(div.promo)").text_content()
```

LANGUAGE: csharp
CODE:
```
await page.Locator("article:has(div.promo)").TextContentAsync();
```

----------------------------------------

TITLE: Generating PDF with Screen Media Type - C#
DESCRIPTION: Shows PDF generation with screen media type using Playwright in C#. Uses async/await pattern to set media type and generate PDF.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_73

LANGUAGE: csharp
CODE:
```
await page.EmulateMediaAsync(new() { Media = Media.Screen });
await page.PdfAsync(new() { Path = "page.pdf" });
```

----------------------------------------

TITLE: Installing Dependencies for a Svelte Project
DESCRIPTION: Commands to navigate to the project directory and install the required Node.js dependencies using npm.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
cd svelte-app
npm install
```

----------------------------------------

TITLE: Clicking Anchor Element with ElementHandle in Python Async
DESCRIPTION: Illustrates clicking an anchor ('a') DOM element in Python using Playwright's async API with ElementHandle. The element is retrieved asynchronously and clicked.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_2

LANGUAGE: Python
CODE:
```
href_element = await page.query_selector("a")
await href_element.click()
```

----------------------------------------

TITLE: HTML Button Example
DESCRIPTION: Simple HTML button element example used to demonstrate role-based location.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<button>Sign in</button>
```

----------------------------------------

TITLE: Exposing Page URL Using JavaScript in Playwright
DESCRIPTION: Example showing how to expose a page URL using a binding in JavaScript. Creates a browser context, exposes a pageURL function, and demonstrates its usage in page content.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
const { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.

(async () => {
  const browser = await webkit.launch({ headless: false });
  const context = await browser.newContext();
  await context.exposeBinding('pageURL', ({ page }) => page.url());
  const page = await context.newPage();
  await page.setContent(`
    <script>
      async function onClick() {
        document.querySelector('div').textContent = await window.pageURL();
      }
    </script>
    <button onclick="onClick()">Click me</button>
    <div></div>
  `);
  await page.getByRole('button').click();
})();
```

----------------------------------------

TITLE: Installing Playwright with Browser-Specific Download Hosts (JavaScript)
DESCRIPTION: Commands to install Playwright browsers using different download hosts for specific browsers. These use browser-specific environment variables that take precedence over the general PLAYWRIGHT_DOWNLOAD_HOST variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_33

LANGUAGE: bash
CODE:
```
PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3 PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 npx playwright install
```

LANGUAGE: batch
CODE:
```
set PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3
set PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1
npx playwright install
```

LANGUAGE: powershell
CODE:
```
$Env:PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST="http://203.0.113.3"
$Env:PLAYWRIGHT_DOWNLOAD_HOST="http://192.0.2.1"
npx playwright install
```

----------------------------------------

TITLE: Grouping Trace Actions with Tracing.group (Python Sync)
DESCRIPTION: Shows how to group related synchronous actions in a Python Playwright trace using `context.tracing.group()` and `context.tracing.group_end()`. The actions executed between these calls are visually grouped under the provided title ('Open Playwright.dev > API') in the Trace Viewer.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_17

LANGUAGE: python
CODE:
```
# All actions between group and group_end
# will be shown in the trace viewer as a group.
page.context.tracing.group("Open Playwright.dev > API")
page.goto("https://playwright.dev/")
page.get_by_role("link", name="API").click()
page.context.tracing.group_end()
```

----------------------------------------

TITLE: Observing Viewport Size Change with Frame.waitForFunction in JavaScript
DESCRIPTION: This snippet demonstrates how to use Frame.waitForFunction to observe changes in the viewport size. It launches a Firefox browser, creates a new page, sets up a watchdog to wait for the inner width to become less than 100 pixels, and then changes the viewport size.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_35

LANGUAGE: javascript
CODE:
```
const { firefox } = require('playwright');  // Or 'chromium' or 'webkit'.

(async () => {
  const browser = await firefox.launch();
  const page = await browser.newPage();
  const watchDog = page.mainFrame().waitForFunction('window.innerWidth < 100');
  await page.setViewportSize({ width: 50, height: 50 });
  await watchDog;
  await browser.close();
})();
```

----------------------------------------

TITLE: Recording Multiple Trace Chunks (C#)
DESCRIPTION: Illustrates recording multiple trace files asynchronously in C# using `await context.Tracing.StartChunkAsync()` and `await context.Tracing.StopChunkAsync()`. Requires tracing to be started first via `StartAsync`. Each chunk captures actions between its start/stop calls and saves to the path specified in `StopChunkAsync` options.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_14

LANGUAGE: csharp
CODE:
```
using var playwright = await Playwright.CreateAsync();
var browser = await playwright.Chromium.LaunchAsync();
await using var context = await browser.NewContextAsync();
await context.Tracing.StartAsync(new()
{
  Screenshots = true,
  Snapshots = true
});
var page = await context.NewPageAsync();
await page.GotoAsync("https://playwright.dev");

await context.Tracing.StartChunkAsync();
await page.GetByText("Get Started").ClickAsync();
// Everything between StartChunkAsync and StopChunkAsync will be recorded in the trace.
await context.Tracing.StopChunkAsync(new()
{
  Path = "trace1.zip"
});

await context.Tracing.StartChunkAsync();
await page.GotoAsync("http://example.com");
// Save a second trace file with different actions.
await context.Tracing.StopChunkAsync(new()
{
  Path = "trace2.zip"
});
```

----------------------------------------

TITLE: Creating DataTransfer and Dispatching DragStart Event in Java
DESCRIPTION: This snippet shows how to create a DataTransfer object and use it to dispatch a dragstart event in Java. Note that DataTransfer can only be created in Chromium and Firefox.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_34

LANGUAGE: java
CODE:
```
JSHandle dataTransfer = page.evaluateHandle("() => new DataTransfer()");
Map<String, Object> arg = new HashMap<>();
arg.put("dataTransfer", dataTransfer);
page.dispatchEvent("#source", "dragstart", arg);
```

----------------------------------------

TITLE: Evaluating Selectors on Frame in C#
DESCRIPTION: Demonstrates how to use the EvalOnSelectorAllAsync method in C# to evaluate a selector on a frame and return a boolean result based on the number of matching elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_17

LANGUAGE: csharp
CODE:
```
var divsCount = await frame.EvalOnSelectorAllAsync<bool>("div", "(divs, min) => divs.length >= min", 10);
```

----------------------------------------

TITLE: Configuring Fetch Retry Options in Playwright
DESCRIPTION: Defines the maxRetries option for network requests, which specifies the maximum number of times network errors (specifically ECONNRESET) should be retried. Defaults to 0 (no retries).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_41

LANGUAGE: js
CODE:
```
- `maxRetries` <[int]>

Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.
```

----------------------------------------

TITLE: Calculating Locator Bounding Box in Playwright JavaScript
DESCRIPTION: Retrieves the bounding box of a 'button' element then performs a click at its center using Playwright for JS. The method returns an object with x, y, width, height used to calculate click position. Returns null if not visible.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_25

LANGUAGE: JavaScript
CODE:
```
const box = await page.getByRole('button').boundingBox();
await page.mouse.click(box.x + box.width / 2, box.y + box.height / 2);
```

----------------------------------------

TITLE: Evaluating Handles on Frame in Python (Async)
DESCRIPTION: Demonstrates the asynchronous usage of evaluate_handle method in Python to evaluate an expression and return a handle for the window object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_25

LANGUAGE: python
CODE:
```
a_window_handle = await frame.evaluate_handle("Promise.resolve(window)")
a_window_handle # handle for the window object.
```

----------------------------------------

TITLE: Default Project Structure Created by Playwright - Bash
DESCRIPTION: Shows the directory and file structure generated by Playwright after initialization. Includes configuration, example tests, and dependency declarations. Contains no direct executable command but documents what files/folders users should expect after setup.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
playwright.config.ts
package.json
package-lock.json
tests/
  example.spec.ts
tests-examples/
  demo-todo-app.spec.ts
```

----------------------------------------

TITLE: Setting Reduced Motion Emulation for JavaScript Browser Context
DESCRIPTION: Defines the reducedMotion option for browser contexts in JavaScript and Java. This emulates the prefers-reduced-motion media feature with values 'reduce' or 'no-preference'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_65

LANGUAGE: js
CODE:
```
- `reducedMotion` <null|[ReducedMotion]<"reduce"|"no-preference">>

Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. See [`method: Page.emulateMedia`] for more details. Passing `null` resets emulation to system defaults. Defaults to `'no-preference'`.
```

----------------------------------------

TITLE: Retrieving Bounding Box with ElementHandle in CSharp
DESCRIPTION: Demonstrates obtaining an element's bounding box and performing a center click using ElementHandle in CSharp. This is used to interact with the element based on its dimensions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_19

LANGUAGE: CSharp
CODE:
```
var box = await elementHandle.BoundingBoxAsync();
await page.Mouse.ClickAsync(box.X + box.Width / 2, box.Y + box.Height / 2);
```

----------------------------------------

TITLE: Retrieving Bounding Box with ElementHandle in Python Async
DESCRIPTION: Describes retrieving the bounding box of an element in async Python using ElementHandle and subsequently clicking the element's center.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_17

LANGUAGE: Python
CODE:
```
box = await element_handle.bounding_box()
await page.mouse.click(box["x"] + box["width"] / 2, box["y"] + box["height"] / 2)
```

----------------------------------------

TITLE: Creating Browser Context with Geolocation in C#
DESCRIPTION: Creates a new browser context with geolocation settings and permissions using the Playwright C# client. This sets up the browser environment to emulate a specific geographic location.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_49

LANGUAGE: csharp
CODE:
```
await using var context = await browser.NewContextAsync(new()
{
    Permissions = new[] { "geolocation" },
    Geolocation = new Geolocation() { Longitude = 41.890221, Latitude = 12.492348 }
});
```

----------------------------------------

TITLE: Calculating Locator Bounding Box in Playwright Python (Async)
DESCRIPTION: Asynchronously retrieves bounding box coordinates for a 'button' role element in Playwright Python, clicking the element's center. Returns None if not found or visible.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_27

LANGUAGE: Python
CODE:
```
box = await page.get_by_role("button").bounding_box()
await page.mouse.click(box["x"] + box["width"] / 2, box["y"] + box["height"] / 2)
```

----------------------------------------

TITLE: Capturing Aria Snapshots in Playwright JavaScript
DESCRIPTION: Uses Playwright's `ariaSnapshot` to capture an accessible snapshot (YAML representation) of a 'link' role element. Playwright for JavaScript must be available, the output is a string reflecting the element's ARIA tree for later assertions or comparisons.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_20

LANGUAGE: JavaScript
CODE:
```
await page.getByRole('link').ariaSnapshot();
```

----------------------------------------

TITLE: Disabling JavaScript in Playwright Tests
DESCRIPTION: Example showing how to disable JavaScript execution in the browser for tests, which can be useful for testing graceful degradation scenarios or fallback behavior.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_20

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    javaScriptEnabled: false,
  },
});
```

----------------------------------------

TITLE: Intercepting WebSocket Messages with Playwright in Python (Synchronous)
DESCRIPTION: Synchronously intercept and modify certain WebSocket messages before they are handled by a server, using Playwright for Python. Requires WebSocket server setup and Playwright configuration.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_13

LANGUAGE: python
CODE:
```
def message_handler(server: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    server.send("request2")
  else:
    server.send(message)

def handler(ws: WebSocketRoute):
  server = ws.connect_to_server()
  ws.on_message(lambda message: message_handler(server, message))

page.route_web_socket("/ws", handler)
```

----------------------------------------

TITLE: Launching Chrome Browser on AndroidDevice with Playwright JS
DESCRIPTION: AndroidDevice.launchBrowser starts the default or specified browser package and returns its BrowserContext. Optional pkg, proxy, and args parameters configure launch. Used for web testing or automation in an Android browser environment. Inputs: parameters for customization. Output: BrowserContext handle.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_8

LANGUAGE: js
CODE:
```
// Launches Chrome browser on the device.
const context = await androidDevice.launchBrowser({
  pkg: 'com.android.chrome', // Optional
  proxy: { server: 'http://proxy:3128' }, // Optional
  args: [ '--no-sandbox' ]   // Optional
});
```

----------------------------------------

TITLE: Custom Callback on Every Actionability Check with Locator Handler in C#
DESCRIPTION: C# implementation of a locator handler with the body element that runs a custom JavaScript function before every actionability check. Uses the NoWaitAfter option since the handler doesn't hide the body element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_90

LANGUAGE: csharp
CODE:
```
// Setup the handler.
await page.AddLocatorHandlerAsync(page.Locator("body"), async () => {
  await page.EvaluateAsync("window.removeObstructionsForTestIfNeeded()");
}, new() { NoWaitAfter = true });

// Write the test as usual.
await page.GotoAsync("https://example.com");
await page.GetByRole("button", new() { Name = "Start here" }).ClickAsync();
```

----------------------------------------

TITLE: Setting isMobile via Context Options (C#)
DESCRIPTION: This C# snippet demonstrates setting the `IsMobile` property when creating a new browser context using `Microsoft.Playwright`. The `IsMobile` property is set on the options object passed to `NewContextAsync`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_19

LANGUAGE: csharp
CODE:
```
```csharp
await using var context = await browser.NewContextAsync(new()
{
    IsMobile = false
});
```
```

----------------------------------------

TITLE: Handling Console Messages in Python (Sync)
DESCRIPTION: Shows synchronous Python code for console message handling, including event listeners, error filtering, and argument extraction.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-consolemessage.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
# Listen for all console logs
page.on("console", lambda msg: print(msg.text))

# Listen for all console events and handle errors
page.on("console", lambda msg: print(f"error: {msg.text}") if msg.type == "error" else None)

# Get the next console log
with page.expect_console_message() as msg_info:
    # Issue console.log inside the page
    page.evaluate("console.log('hello', 42, { foo: 'bar' })")
msg = msg_info.value

# Deconstruct print arguments
msg.args[0].json_value() # hello
msg.args[1].json_value() # 42
```

----------------------------------------

TITLE: Set Global Assertion Timeout in Playwright C# NUnit
DESCRIPTION: Configures the default timeout for all Playwright assertions globally within an NUnit test class in C#. This is achieved by calling `SetDefaultExpectTimeout` in the `[OneTimeSetUp]` method of a class inheriting from `PageTest`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-csharp-java-python.md#_snippet_2

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using Microsoft.Playwright.NUnit;
using NUnit.Framework;

namespace PlaywrightTests;

[Parallelizable(ParallelScope.Self)]
[TestFixture]
public class Tests : PageTest
{
    [OneTimeSetUp]
    public void GlobalSetup()
    {
        SetDefaultExpectTimeout(10_000);
    }
    // ...
}
```

----------------------------------------

TITLE: Asserting Accessible Description with Playwright Python
DESCRIPTION: Shows how to use the `toHaveAccessibleDescription` assertion on a Locator object to check if an element has a specific accessible description. Requires a Playwright page and locator.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_13

LANGUAGE: python
CODE:
```
locator = page.get_by_role("button")
expect(locator).to_have_accessible_description("Upload a photo")
```

----------------------------------------

TITLE: Automating Android Devices with Playwright in JavaScript
DESCRIPTION: This snippet demonstrates how to automate Android devices with Playwright, including device connections, interacting with WebView and Browser, and taking screenshots. Dependencies include an Android device or AVD Emulator and ADB daemon. Key parameters include the device model and serial, and paths for screenshots. The output includes device model, serial, and screenshot files.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-android.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
const { _android: android } = require('playwright');

(async () => {
  // Connect to the device.
  const [device] = await android.devices();
  console.log(`Model: ${device.model()}`);
  console.log(`Serial: ${device.serial()}`);
  // Take screenshot of the whole device.
  await device.screenshot({ path: 'device.png' });

  {
    // --------------------- WebView -----------------------

    // Launch an application with WebView.
    await device.shell('am force-stop org.chromium.webview_shell');
    await device.shell('am start org.chromium.webview_shell/.WebViewBrowserActivity');
    // Get the WebView.
    const webview = await device.webView({ pkg: 'org.chromium.webview_shell' });

    // Fill the input box.
    await device.fill({
      res: 'org.chromium.webview_shell:id/url_field',
    }, 'github.com/microsoft/playwright');
    await device.press({
      res: 'org.chromium.webview_shell:id/url_field',
    }, 'Enter');

    // Work with WebView's page as usual.
    const page = await webview.page();
    await page.waitForNavigation({ url: /.*microsoft\/playwright.*/ });
    console.log(await page.title());
  }

  {
    // --------------------- Browser -----------------------

    // Launch Chrome browser.
    await device.shell('am force-stop com.android.chrome');
    const context = await device.launchBrowser();

    // Use BrowserContext as usual.
    const page = await context.newPage();
    await page.goto('https://webkit.org/');
    console.log(await page.evaluate(() => window.location.href));
    await page.screenshot({ path: 'page.png' });

    await context.close();
  }

  // Close the device.
  await device.close();
})();
```

----------------------------------------

TITLE: Converting FrameLocator to Locator in Playwright Java
DESCRIPTION: Shows how to use the new FrameLocator.owner method in Playwright Java. This method converts a FrameLocator back into a Locator that points to the iframe element itself, enabling assertions or interactions with the iframe element rather than its content.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_19

LANGUAGE: java
CODE:
```
FrameLocator frameLocator = page.frameLocator("iframe[name='embedded']");
// ...
Locator locator = frameLocator.owner();
assertThat(locator).isVisible();
```

----------------------------------------

TITLE: Customizing Test ID Attribute in Playwright Test
DESCRIPTION: Sets a custom attribute for test IDs using the TestOptions.testIdAttribute property in the Playwright configuration file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_30

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    testIdAttribute: 'pw-test-id',
  },
});
```

----------------------------------------

TITLE: Specifying Playwright Drag Source Element Selector
DESCRIPTION: Defines the `source` string parameter, which is a selector used to find the element to be dragged in a Playwright drag-and-drop operation. If multiple elements match, the first one is selected.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_12

LANGUAGE: markdown
CODE:
```
- `source` <[string]>
```

----------------------------------------

TITLE: Identifying Response Frame in Playwright
DESCRIPTION: The `Response.frame` method returns the frame associated with the given response. This is useful for understanding which iframe or main frame initiated the HTTP request behind the response.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
const frame = response.frame();\nconsole.log('Response initiated by frame:', frame);
```

----------------------------------------

TITLE: Capturing Aria Snapshots in Playwright Python (Sync)
DESCRIPTION: Shows a sync Playwright Python call to acquire the ARIA snapshot (in YAML format) of a 'link' role node for comparison or assertion in accessibility testing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_23

LANGUAGE: Python
CODE:
```
page.get_by_role("link").aria_snapshot()
```

----------------------------------------

TITLE: Accessing the Initiating Frame URL with Playwright Request (Multi-Language)
DESCRIPTION: Illustrates how to retrieve the URL of the Frame that initiated a specific network Request using the `request.frame().url()` method chain. This is useful for understanding the context from which a request originated.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
```js
const frameUrl = request.frame().url();
```
```

LANGUAGE: java
CODE:
```
```java
String frameUrl = request.frame().url();
```
```

LANGUAGE: python
CODE:
```
```py
frame_url = request.frame.url
```
```

LANGUAGE: csharp
CODE:
```
```csharp
var frameUrl = request.Frame.Url;
```
```

----------------------------------------

TITLE: Fast Forwarding and Pausing Time - Playwright Python Sync
DESCRIPTION: Exploits Playwright's synchronous Python API to manage the virtual clock, including pausing, fast forwarding, and asserting changes in the UI. The snippet is meant for synchronous test environments and expects datetime and a browser page. Dependencies are Playwright sync Python bindings.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_5

LANGUAGE: python
CODE:
```
# Initialize clock with some time before the test time and let the page load
# naturally. `Date.now` will progress as the timers fire.
page.clock.install(time=datetime.datetime(2024, 2, 2, 8, 0, 0))
page.goto("http://localhost:3333")

# Pretend that the user closed the laptop lid and opened it again at 10am.
# Pause the time once reached that point.
page.clock.pause_at(datetime.datetime(2024, 2, 2, 10, 0, 0))

# Assert the page state.
expect(page.get_by_test_id("current-time")).to_have_text("2/2/2024, 10:00:00 AM")

# Close the laptop lid again and open it at 10:30am.
page.clock.fast_forward("30:00")
expect(page.get_by_test_id("current-time")).to_have_text("2/2/2024, 10:30:00 AM")
```

----------------------------------------

TITLE: Handling Console Messages in Python (Async)
DESCRIPTION: Demonstrates asyncio-based console message handling in Python, including listening for events, filtering by type, and accessing message arguments.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-consolemessage.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
# Listen for all console logs
page.on("console", lambda msg: print(msg.text))

# Listen for all console events and handle errors
page.on("console", lambda msg: print(f"error: {msg.text}") if msg.type == "error" else None)

# Get the next console log
async with page.expect_console_message() as msg_info:
    # Issue console.log inside the page
    await page.evaluate("console.log('hello', 42, { foo: 'bar' })")
msg = await msg_info.value

# Deconstruct print arguments
await msg.args[0].json_value() # hello
await msg.args[1].json_value() # 42
```

----------------------------------------

TITLE: Setting Color Scheme Emulation for C# and Python Browser Context
DESCRIPTION: Defines the colorScheme option for browser contexts in C# and Python. This emulates the prefers-color-scheme media feature with values 'light', 'dark', or 'null' to reset to system defaults.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_64

LANGUAGE: csharp
CODE:
```
- `colorScheme` <[ColorScheme]<"light"|"dark"|"no-preference"|"null">>

Emulates [prefers-colors-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme) media feature, supported values are `'light'` and `'dark'`. See
[`method: Page.emulateMedia`] for more details. Passing `'null'` resets emulation to system defaults. Defaults to `'light'`.
```

----------------------------------------

TITLE: Merging Blob Reports from Shards
DESCRIPTION: Command to merge blob reports from multiple shards into a single HTML report, allowing a comprehensive view of test results across all shards.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-sharding-js.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npx playwright merge-reports --reporter html ./all-blob-reports
```

----------------------------------------

TITLE: Running Playwright Server with Host Access
DESCRIPTION: Command to run Playwright server in Docker with access to local servers on the host machine through 'hostmachine' hostname.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_20

LANGUAGE: bash
CODE:
```
docker run --add-host=hostmachine:host-gateway -p 3000:3000 --rm --init -it --workdir /home/pwuser --user pwuser mcr.microsoft.com/playwright:v%%VERSION%%-noble /bin/sh -c "npx -y playwright@%%VERSION%% run-server --port 3000 --host 0.0.0.0"
```

----------------------------------------

TITLE: Working with JSHandle Arguments in Playwright
DESCRIPTION: Examples showing how to pass JSHandle instances as arguments to Page.evaluateHandle and process the results.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_58

LANGUAGE: javascript
CODE:
```
const aHandle = await page.evaluateHandle(() => document.body);
const resultHandle = await page.evaluateHandle(body => body.innerHTML, aHandle);
console.log(await resultHandle.jsonValue());
await resultHandle.dispose();
```

LANGUAGE: java
CODE:
```
JSHandle aHandle = page.evaluateHandle("() => document.body");
JSHandle resultHandle = page.evaluateHandle("([body, suffix]) => body.innerHTML + suffix", Arrays.asList(aHandle, "hello"));
System.out.println(resultHandle.jsonValue());
resultHandle.dispose();
```

LANGUAGE: python
CODE:
```
a_handle = await page.evaluate_handle("document.body")
result_handle = await page.evaluate_handle("body => body.innerHTML", a_handle)
print(await result_handle.json_value())
await result_handle.dispose()
```

LANGUAGE: csharp
CODE:
```
var handle = await page.EvaluateHandleAsync("() => document.body");
var resultHandle = await page.EvaluateHandleAsync("([body, suffix]) => body.innerHTML + suffix", new object[] { handle, "hello" });
Console.WriteLine(await resultHandle.JsonValueAsync<string>());
await resultHandle.DisposeAsync();
```

----------------------------------------

TITLE: Getting Properties from JSHandle in C#
DESCRIPTION: Shows how to get properties from a JSHandle, specifically window and document objects, in C#.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_14

LANGUAGE: csharp
CODE:
```
var handle = await page.EvaluateHandleAsync("() => ({ window, document }");
var properties = await handle.GetPropertiesAsync();
var windowHandle = properties["window"];
var documentHandle = properties["document"];
await handle.DisposeAsync();
```

----------------------------------------

TITLE: Completely Unset Base URL using Long-Form Fixture (TypeScript)
DESCRIPTION: Demonstrates how to completely remove a configuration option like 'baseURL' for a test file by using the long-form fixture definition syntax with `test.use()` and providing `undefined` via the `use` callback.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_21

LANGUAGE: TypeScript
CODE:
```
import { test } from '@playwright/test';

// Completely unset baseURL for this file.
test.use({
  baseURL: [async ({}, use) => use(undefined), { scope: 'test' }],
});

test('no base url', async ({ page }) => {
  // This test will not have a base url.
});
```

----------------------------------------

TITLE: Mocking WebSocket Messages with Playwright in Python (Synchronous)
DESCRIPTION: Synchronously sets up a WebSocket route using Playwright for Python, handling and responding to messages. Requires defining a handler function and setting up a page instance to route WebSockets.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
def message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    ws.send("response")

page.route_web_socket("wss://example.com/ws", lambda ws: ws.on_message(
    lambda message: message_handler(ws, message)
))
```

----------------------------------------

TITLE: Using CDPSession with Chrome DevTools Protocol in Java
DESCRIPTION: Java implementation for CDPSession that shows how to create a session, enable runtime features, listen for animation creation events, retrieve and modify animation playback rates using the Chrome DevTools Protocol.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-cdpsession.md#2025-04-22_snippet_4

LANGUAGE: java
CODE:
```
CDPSession client = page.context().newCDPSession(page);
client.send("Runtime.enable");

client.on("Animation.animationCreated", (event) -> System.out.println("Animation created!"));

JsonObject response = client.send("Animation.getPlaybackRate");
double playbackRate = response.get("playbackRate").getAsDouble();
System.out.println("playback rate is " + playbackRate);

JsonObject params = new JsonObject();
params.addProperty("playbackRate", playbackRate / 2);
client.send("Animation.setPlaybackRate", params);
```

----------------------------------------

TITLE: Setting Browser Environment Variables in Playwright (CSharp/Java)
DESCRIPTION: Defines the `env` browser launch option for Playwright in C# and Java. It accepts an object mapping string keys to string values, specifying environment variables to be made visible to the launched browser process. Defaults to the environment variables of the parent process.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_35

LANGUAGE: markdown
CODE:
```
- `env` <[Object]<[string], [string]>>
```

----------------------------------------

TITLE: Optimizing Playwright Browser Downloads in CI Workflows (Bash)
DESCRIPTION: Presents bash commands to selectively install only required browsers with Playwright for CI optimization, reducing download size and time. Demonstrates how to install all browsers or just Chromium. Prerequisite: Playwright installed in CI environment. Parameters: browser names as arguments. Inputs: target browsers. Output: installed browsers and system dependencies.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_12

LANGUAGE: bash
CODE:
```
npx playwright install --with-deps
```

LANGUAGE: bash
CODE:
```
npx playwright install chromium --with-deps
```

----------------------------------------

TITLE: Setting Video Size with Browser Context (JavaScript)
DESCRIPTION: This code shows how to create a new browser context with video recording enabled, specifying both the directory and the video size.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
const context = await browser.newContext({
  recordVideo: {
    dir: 'videos/',
    size: { width: 640, height: 480 },
  }
});
```

----------------------------------------

TITLE: Pinia Store Test Example
DESCRIPTION: Example of testing a Vue component with Pinia store state override.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_28

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/experimental-ct-vue';
import type { HooksConfig } from '../playwright';
import Store from './Store.vue';

test('override initialState ', async ({ mount }) => {
  const component = await mount<HooksConfig>(Store, {
    hooksConfig: {
      store: { name: 'override initialState' }
    }
  });
  await expect(component).toContainText('override initialState');
});
```

----------------------------------------

TITLE: Custom Callback on Every Actionability Check with Locator Handler in Python (Synchronous)
DESCRIPTION: Synchronous Python implementation of a locator handler with the body element that runs a custom JavaScript function before every actionability check. Uses the no_wait_after parameter since the handler doesn't hide the body element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_88

LANGUAGE: python
CODE:
```
# Setup the handler.
def handler():
  page.evaluate("window.removeObstructionsForTestIfNeeded()")
page.add_locator_handler(page.locator("body"), handler, no_wait_after=True)

# Write the test as usual.
page.goto("https://example.com")
page.get_by_role("button", name="Start here").click()
```

----------------------------------------

TITLE: Routing Service Worker Requests in Playwright
DESCRIPTION: JavaScript code demonstrating how to selectively intercept and handle only requests made by Service Workers in Playwright. It uses the request().serviceWorker() method to identify Service Worker-originated requests and fulfill them with custom content.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/service-workers-experimental-network-events-js.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
await context.route('**', async route => {
  if (route.request().serviceWorker()) {
    // NB: calling route.request().frame() here would THROW
    return route.fulfill({
      contentType: 'text/plain',
      status: 200,
      body: 'from sw',
    });
  } else {
    return route.continue();
  }
});
```

----------------------------------------

TITLE: Using toBeLessThan Method for Numeric Comparisons
DESCRIPTION: Demonstrates the use of 'toBeLessThan' method to check if a value is less than another value.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
const value = 42;
expect(value).toBeLessThan(100);
```

----------------------------------------

TITLE: Capturing Aria Snapshots in Playwright Java
DESCRIPTION: Requests an ARIA snapshot of a 'link' role node using Playwright's Java API for accessibility inspection. The output is a YAML string representing the accessibility structure.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_21

LANGUAGE: Java
CODE:
```
page.getByRole(AriaRole.LINK).ariaSnapshot();
```

----------------------------------------

TITLE: Setting Geolocation for Browser Context
DESCRIPTION: Defines the geolocation option for browser contexts. This allows specifying latitude, longitude, and optional accuracy for geolocation emulation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_57

LANGUAGE: js
CODE:
```
- `geolocation` <[Object]>
  - `latitude` <[float]> Latitude between -90 and 90.
  - `longitude` <[float]> Longitude between -180 and 180.
  - `accuracy` ?<[float]> Non-negative accuracy value. Defaults to `0`.
```

----------------------------------------

TITLE: Grouping Trace Actions with Tracing.group (Java)
DESCRIPTION: Demonstrates how to explicitly group related actions within a Playwright trace in Java using `tracing().group()` and `tracing().groupEnd()`. Actions performed between these calls will appear under the specified group title ('Open Playwright.dev > API') in the Trace Viewer, improving readability for complex sequences.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_16

LANGUAGE: java
CODE:
```
// All actions between group and groupEnd
// will be shown in the trace viewer as a group.
page.context().tracing().group("Open Playwright.dev > API");
page.navigate("https://playwright.dev/");
page.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName("API")).click();
page.context().tracing().groupEnd();
```

----------------------------------------

TITLE: Configure Playwright Test List Reporter with Options
DESCRIPTION: Configure the 'list' reporter with specific options, such as enabling `printSteps` to show each test step on a new line in the output.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_6

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: [['list', { printSteps: true }]],
});
```

----------------------------------------

TITLE: Creating JSHandle with Page.evaluateHandle in Java
DESCRIPTION: Shows how to create a JSHandle for the window object using Page.evaluateHandle method in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
JSHandle windowHandle = page.evaluateHandle("() => window");
```

----------------------------------------

TITLE: Checking for Redirects with Playwright Request (Multi-Language)
DESCRIPTION: Demonstrates the behavior of `request.redirectedFrom()` when navigating to a URL that does not involve any server redirects. In such cases, the `redirectedFrom()` method returns null (or None in Python, or null check needed in C#), indicating that the request was not the result of a redirection.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
```js
const response = await page.goto('https://google.com');
console.log(response.request().redirectedFrom()); // null
```
```

LANGUAGE: java
CODE:
```
```java
Response response = page.navigate("https://google.com");
System.out.println(response.request().redirectedFrom()); // null
```
```

LANGUAGE: python
CODE:
```
```python async
response = await page.goto("https://google.com")
print(response.request.redirected_from) # None
```
```

LANGUAGE: python
CODE:
```
```python sync
response = page.goto("https://google.com")
print(response.request.redirected_from) # None
```
```

LANGUAGE: csharp
CODE:
```
```csharp
var response = await page.GotoAsync("https://www.google.com");
Console.WriteLine(response.Request.RedirectedFrom?.Url); // null
```
```

----------------------------------------

TITLE: HTML Structure for Shadow DOM Example
DESCRIPTION: This HTML snippet shows the structure of a custom web component with Shadow DOM, used to demonstrate element location techniques.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_11

LANGUAGE: html
CODE:
```
<x-details role=button aria-expanded=true aria-controls=inner-details>
  <div>Title</div>
  #shadow-root
    <div id=inner-details>Details</div>
</x-details>
```

----------------------------------------

TITLE: Configuring Default Stylesheet in Playwright Config (JavaScript)
DESCRIPTION: This snippet shows how to set a default custom stylesheet for all screenshot comparisons in the Playwright configuration file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-snapshots-js.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';
export default defineConfig({
  expect: {
    toHaveScreenshot: {
      stylePath: './screenshot.css'
    },
  },
});
```

----------------------------------------

TITLE: Migrating Puppeteer automation to Playwright
DESCRIPTION: Equivalent browser automation example using Playwright, demonstrating the differences in API and syntax compared to Puppeteer.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/puppeteer-js.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
const { chromium } = require('playwright');

(async () => {
  const browser = await chromium.launch();
  const page = await browser.newPage();
  await page.setViewportSize({ width: 1280, height: 800 });
  await page.goto('https://playwright.dev/', {
    waitUntil: 'networkidle',
  });
  await page.screenshot({ path: 'example.png' });
  await browser.close();
})();
```

----------------------------------------

TITLE: Screenshot Clipping Area Configuration
DESCRIPTION: Defines the `clip` option for specifying a rectangular area to capture in screenshots. Requires x, y coordinates and width, height dimensions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_110

LANGUAGE: typescript
CODE:
```
- `clip` <[Object]>
  - `x` <[float]> x-coordinate of top-left corner of clip area
  - `y` <[float]> y-coordinate of top-left corner of clip area
  - `width` <[float]> width of clipping area
  - `height` <[float]> height of clipping area
```

----------------------------------------

TITLE: Setting Extra HTTP Headers for Browser Context
DESCRIPTION: Defines the extraHTTPHeaders option for browser contexts. This allows specifying additional HTTP headers to be sent with every request.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_60

LANGUAGE: js
CODE:
```
- `extraHTTPHeaders` <[Object]<[string], [string]>>

An object containing additional HTTP headers to be sent with every request. Defaults to none.
```

----------------------------------------

TITLE: Evaluating Selectors on Frame in Python (Sync)
DESCRIPTION: Shows the synchronous usage of eval_on_selector_all method in Python to evaluate a selector on a frame and return a result based on the number of matching elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_16

LANGUAGE: python
CODE:
```
divs_counts = frame.eval_on_selector_all("div", "(divs, min) => divs.length >= min", 10)
```

----------------------------------------

TITLE: Updating Vue Components in Playwright Tests
DESCRIPTION: Illustrates how to update props, slots, and events of a mounted Vue component in Playwright component tests. It shows two approaches: using the options API and the JSX-style syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_20

LANGUAGE: javascript
CODE:
```
import { test } from '@playwright/experimental-ct-vue';

test('update', async ({ mount }) => {
  const component = await mount(Component);
  await component.update({
    props: { msg: 'greetings' },
    on: { click() {} },
    slots: { default: 'Child' }
  });
});
```

LANGUAGE: javascript
CODE:
```
// Or alternatively, using the `jsx` style
import { test } from '@playwright/experimental-ct-vue';

test('update', async ({ mount }) => {
  const component = await mount(<Component/>);
  await component.update(
      <Component msg="greetings" v-on:click={() => {}}>Child</Component>
  );
});
```

----------------------------------------

TITLE: Configuring Source Location for Java Debugging in Playwright
DESCRIPTION: Commands to configure source code locations for Java debugging by setting the PLAYWRIGHT_JAVA_SRC environment variable. This tells Playwright where to look for the source code being debugged.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
# Source directories in the list are separated by : on macos and linux and by ; on win.
PWDEBUG=1 PLAYWRIGHT_JAVA_SRC=<java source dirs> mvn test
```

LANGUAGE: batch
CODE:
```
# Source directories in the list are separated by : on macos and linux and by ; on win.
set PLAYWRIGHT_JAVA_SRC=<java source dirs>
set PWDEBUG=1
mvn test
```

LANGUAGE: powershell
CODE:
```
# Source directories in the list are separated by : on macos and linux and by ; on win.
$env:PLAYWRIGHT_JAVA_SRC="<java source dirs>"
$env:PWDEBUG=1
mvn test
```

----------------------------------------

TITLE: Exposing Page URL Binding in Playwright
DESCRIPTION: Examples demonstrating how to expose a page URL function to all frames using Page.exposeBinding across different languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_59

LANGUAGE: javascript
CODE:
```
const { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.

(async () => {
  const browser = await webkit.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();
  await page.exposeBinding('pageURL', ({ page }) => page.url());
  await page.setContent(`
    <script>
      async function onClick() {
        document.querySelector('div').textContent = await window.pageURL();
      }
    </script>
    <button onclick="onClick()">Click me</button>
    <div></div>
  `);
  await page.click('button');
})();
```

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      BrowserType webkit = playwright.webkit();
      Browser browser = webkit.launch(new BrowserType.LaunchOptions().setHeadless(false));
      BrowserContext context = browser.newContext();
      Page page = context.newPage();
      page.exposeBinding("pageURL", (source, args) -> source.page().url());
      page.setContent("<script>\n" +
        "  async function onClick() {\n" +
        "    document.querySelector('div').textContent = await window.pageURL();\n" +
        "  }\n" +
        "</script>\n" +
        "<button onclick=\"onClick()\">Click me</button>\n" +
        "<div></div>");
      page.click("button");
    }
  }
}
```

LANGUAGE: python
CODE:
```
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = await webkit.launch(headless=False)
    context = await browser.new_context()
    page = await context.new_page()
    await page.expose_binding("pageURL", lambda source: source["page"].url)
    await page.set_content("""
    <script>
      async function onClick() {
        document.querySelector('div').textContent = await window.pageURL();
      }
    </script>
    <button onclick="onClick()">Click me</button>
    <div></div>
    """)
    await page.click("button")

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())
```

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using System.Threading.Tasks;

class PageExamples
{
    public static async Task Main()
    {
        using var playwright = await Playwright.CreateAsync();
        await using var browser = await playwright.Webkit.LaunchAsync(new()
        {
            Headless = false,
        });
        var page = await browser.NewPageAsync();

        await page.ExposeBindingAsync("pageUrl", (source) => source.Page.Url);
        await page.SetContentAsync("<script>\n" +
        "  async function onClick() {\n" +
        "    document.querySelector('div').textContent = await window.pageURL();\n" +
        "  }\n" +
        "</script>\n" +
        "<button onclick=\"onClick()\">Click me</button>\n" +
        "<div></div>");

        await page.ClickAsync("button");
    }
}
```

----------------------------------------

TITLE: Using nth-match CSS Selector in Playwright
DESCRIPTION: Shows how to use the :nth-match CSS selector to pick a specific element from multiple matches, and how to wait for a certain number of elements to appear.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
// Click the third "Buy" button
await page.locator(':nth-match(:text("Buy"), 3)').click();

// Wait until all three buttons are visible
await page.locator(':nth-match(:text("Buy"), 3)').waitFor();
```

LANGUAGE: java
CODE:
```
// Click the third "Buy" button
page.locator(":nth-match(:text('Buy'), 3)").click();

// Wait until all three buttons are visible
page.locator(":nth-match(:text('Buy'), 3)").waitFor();
```

LANGUAGE: python
CODE:
```
# Click the third "Buy" button
await page.locator(":nth-match(:text('Buy'), 3)").click()

# Wait until all three buttons are visible
await page.locator(":nth-match(:text('Buy'), 3)").wait_for()
```

LANGUAGE: csharp
CODE:
```
// Click the third "Buy" button
await page.Locator(":nth-match(:text('Buy'), 3)").ClickAsync();

// Wait until all three buttons are visible
await page.Locator(":nth-match(:text('Buy'), 3)").WaitForAsync();
```

----------------------------------------

TITLE: Tagging Tests with Test.describe in JavaScript
DESCRIPTION: Demonstrates how to tag all tests in a group by providing additional details. Each tag must start with the @ symbol.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_14

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.describe('two tagged tests', {
  tag: '@smoke',
}, () => {
  test('one', async ({ page }) => {
    // ...
  });

  test('two', async ({ page }) => {
    // ...
  });
});
```

----------------------------------------

TITLE: Excluding Tests with GrepInvert Pattern in Playwright Test
DESCRIPTION: Configuration to exclude tests with titles matching a specific pattern, useful for skipping certain categories of tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_11

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  grepInvert: /manual/,
});
```

----------------------------------------

TITLE: Playwright Browser Configuration in RunSettings
DESCRIPTION: XML configuration for customizing browser launch options using a RunSettings file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-csharp.md#2025-04-22_snippet_4

LANGUAGE: xml
CODE:
```
<?xml version="1.0" encoding="utf-8"?>
<RunSettings>
  <Playwright>
    <BrowserName>chromium</BrowserName>
    <LaunchOptions>
      <Headless>false</Headless>
      <Channel>msedge</Channel>
    </LaunchOptions>
  </Playwright>
</RunSettings>
```

----------------------------------------

TITLE: Installing Playwright with HTTPS Proxy (JavaScript)
DESCRIPTION: Commands to install Playwright browsers through an HTTPS proxy for JavaScript implementations. Includes examples for bash, batch, and powershell environments.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_19

LANGUAGE: bash
CODE:
```
HTTPS_PROXY=https://192.0.2.1 npx playwright install
```

LANGUAGE: batch
CODE:
```
set HTTPS_PROXY=https://192.0.2.1
npx playwright install
```

LANGUAGE: powershell
CODE:
```
$Env:HTTPS_PROXY="https://192.0.2.1"
npx playwright install
```

----------------------------------------

TITLE: Using ElementHandle.waitForSelector in C#
DESCRIPTION: Demonstrates the usage of waitForSelector method on an ElementHandle in C# to wait for a child element to appear in the DOM.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_48

LANGUAGE: csharp
CODE:
```
await page.SetContentAsync("<div><span></span></div>");
var div = await page.QuerySelectorAsync("div");
// Waiting for the "span" selector relative to the div.
var span = await page.WaitForSelectorAsync("span", WaitForSelectorState.Attached);
```

----------------------------------------

TITLE: WebView2 Browser Process Configuration and Connection
DESCRIPTION: Sets up WebView2 browser process with debugging port, manages process output, and establishes connection through CDP. Includes cleanup logic to properly terminate the browser instance.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_14

LANGUAGE: csharp
CODE:
```
{
    ["WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS"] = $"--remote-debugging-port={cdpPort}",
    ["WEBVIEW2_USER_DATA_FOLDER"] = _userDataDir,
},
    RedirectStandardOutput = true,
});
while (!_webView2Process!.HasExited)
{
    var output = await _webView2Process!.StandardOutput.ReadLineAsync();
    if (_webView2Process!.HasExited)
    {
        throw new Exception("WebView2 process exited unexpectedly");
    }
    if (output != null && output.Contains("WebView2 initialized"))
    {
        break;
    }
}
var cdpAddress = $"http://127.0.0.1:{cdpPort}";
Browser = await Playwright.Chromium.ConnectOverCDPAsync(cdpAddress);
Context = Browser.Contexts[0];
Page = Context.Pages[0];
```

----------------------------------------

TITLE: Detecting Print Dialogs with Playwright (Python Sync)
DESCRIPTION: Demonstrates how to detect if a print dialog was triggered by `window.print()` in a sync context. It uses `page.evaluate` to inject JavaScript replacing `window.print` with a function resolving a Promise, then uses `page.wait_for_function` to wait for the promise after clicking the print trigger.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_18

LANGUAGE: python
CODE:
```
```python sync
page.goto("<url>")

page.evaluate("(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()")
page.get_by_text("Print it!").click()

page.wait_for_function("window.waitForPrintDialog")
```
```

----------------------------------------

TITLE: Using Frame.waitForFunction in Java
DESCRIPTION: This example shows how to use Frame.waitForFunction in Java to wait for a specific condition related to the viewport size. It launches a Firefox browser, creates a new page, sets the viewport size, and waits for the inner width to become less than 100 pixels.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_36

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      BrowserType firefox = playwright.firefox();
      Browser browser = firefox.launch();
      Page page = browser.newPage();
      page.setViewportSize(50, 50);
      page.mainFrame().waitForFunction("window.innerWidth < 100");
      browser.close();
    }
  }
}
```

----------------------------------------

TITLE: Handling JSON WebSocket Messages with Playwright in Java
DESCRIPTION: Utilizes Playwright for Java to parse JSON messages and respond accordingly. Relies on Gson for JSON handling and Playwright setup in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_6

LANGUAGE: java
CODE:
```
page.routeWebSocket("wss://example.com/ws", ws -> {
  ws.onMessage(frame -> {
    JsonObject json = new JsonParser().parse(frame.text()).getAsJsonObject();
    if ("question".equals(json.get("request").getAsString())) {
      Map<String, String> result = new HashMap();
      result.put("response", "answer");
      ws.send(gson.toJson(result));
    }
  });
});
```

----------------------------------------

TITLE: Blocking WebSocket Messages in Both Directions with Playwright in Python (Asynchronous)
DESCRIPTION: An asynchronous approach using Playwright in Python to block specific messages between client and server over WebSocket. Requires asyncio setup and WebSocket configuration.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_17

LANGUAGE: python
CODE:
```
def ws_message_handler(server: WebSocketRoute, message: Union[str, bytes]):
  if message != "blocked-from-the-page":
    server.send(message)

def server_message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  if message != "blocked-from-the-server":
    ws.send(message)

def handler(ws: WebSocketRoute):
  server = ws.connect_to_server()
  ws.on_message(lambda message: ws_message_handler(server, message))
  server.on_message(lambda message: server_message_handler(ws, message))

await page.route_web_socket("/ws", handler)
```

----------------------------------------

TITLE: Mocking WebSocket Messages with Playwright in C#
DESCRIPTION: Setting up WebSocket routes using Playwright in C# to mock server communication by intercepting and responding to messages. Requires Playwright setup in C# and a page instance for routing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
await page.RouteWebSocketAsync("wss://example.com/ws", ws => {
  ws.OnMessage(frame => {
    if (frame.Text == "request")
      ws.Send("response");
  });
});
```

----------------------------------------

TITLE: Blocking WebSocket Messages in Both Directions with Playwright in Java
DESCRIPTION: Using Playwright in Java, block specified messages from being sent in both directions over a WebSocket. Requires connection to a WebSocket and Java environment with Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_16

LANGUAGE: java
CODE:
```
page.routeWebSocket("/ws", ws -> {
  WebSocketRoute server = ws.connectToServer();
  ws.onMessage(frame -> {
    if (!"blocked-from-the-page".equals(frame.text()))
      server.send(frame.text());
  });
  server.onMessage(frame -> {
    if (!"blocked-from-the-server".equals(frame.text()))
      ws.send(frame.text());
  });
});
```

----------------------------------------

TITLE: Emulating Mobile Devices with Playwright Codegen for C#
DESCRIPTION: Command to generate code while emulating an iPhone 13 for the playwright.dev website using C#. This PowerShell execution sets device-specific configurations like viewport size and user agent.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_11

LANGUAGE: bash
CODE:
```
pwsh bin/Debug/netX/playwright.ps1 codegen --device="iPhone 13" playwright.dev
```

----------------------------------------

TITLE: Retrieving Request from Route in Playwright
DESCRIPTION: This snippet documents the Route.request method, which returns the Request object associated with the route. This method has been available since version 1.8 of Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_37

LANGUAGE: typescript
CODE:
```
## method: Route.request
* since: v1.8
- returns: <[Request]>

A request to be routed.
```

----------------------------------------

TITLE: Uninstalling Browsers
DESCRIPTION: Commands to uninstall Playwright browsers for different programming languages
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_41

LANGUAGE: bash
CODE:
```
npx playwright uninstall
npx playwright uninstall --all
```

LANGUAGE: java
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="uninstall"
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="uninstall --all"
```

LANGUAGE: python
CODE:
```
playwright uninstall
playwright uninstall --all
```

LANGUAGE: csharp
CODE:
```
pwsh bin/Debug/netX/playwright.ps1 uninstall
pwsh bin/Debug/netX/playwright.ps1 uninstall --all
```

----------------------------------------

TITLE: Verifying Aria Snapshot with C#
DESCRIPTION: Demonstrates how to use the new `toMatchAriaSnapshot` assertion in C# to verify the accessibility tree of a page element. The assertion compares the live accessibility tree against a provided YAML string representation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_4

LANGUAGE: csharp
CODE:
```
await page.GotoAsync("https://playwright.dev");
await Expect(page.Locator("body")).ToMatchAriaSnapshotAsync(@"
  - banner:
    - heading /Playwright enables reliable/ [level=1]
    - link ""Get started""
    - link ""Star microsoft/playwright on GitHub""
  - main:
    - img ""Browsers (Chromium, Firefox, WebKit)""
    - heading ""Any browser • Any platform • One API""
");
```

----------------------------------------

TITLE: Manual Scrolling with ScrollIntoView
DESCRIPTION: Shows how to manually scroll elements into view, useful for infinite lists or specific positioning needs.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
await page.getByText('Footer text').scrollIntoViewIfNeeded();
```

LANGUAGE: java
CODE:
```
page.getByText("Footer text").scrollIntoViewIfNeeded();
```

LANGUAGE: python
CODE:
```
await page.get_by_text("Footer text").scroll_into_view_if_needed()
```

LANGUAGE: csharp
CODE:
```
await page.GetByText("Footer text").ScrollIntoViewIfNeededAsync();
```

----------------------------------------

TITLE: Match Aria Snapshot with Children and URL (Java)
DESCRIPTION: Shows how to use `locator.toMatchAriaSnapshot` in Java with the new `/children` and `/url` properties for strict matching and link URL assertion within an Aria snapshot.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_1

LANGUAGE: Java
CODE:
```
assertThat(locator).toMatchAriaSnapshot("""
  - list
    - /children: equal
    - listitem: Feature A
    - listitem:
      - link "Feature B":
        - /url: "https://playwright.dev"
""");
```

----------------------------------------

TITLE: Fulfilling Route with APIResponse in Playwright
DESCRIPTION: This snippet documents the 'response' option for the Route.fulfill method. It allows fulfilling a route's request with an APIResponse object. Individual fields of the response can be overridden using additional fulfill options.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_36

LANGUAGE: typescript
CODE:
```
### option: Route.fulfill.response
* since: v1.15
- `response` <[APIResponse]>

[APIResponse] to fulfill route's request with. Individual fields of the response (such as headers) can be overridden using fulfill options.
```

----------------------------------------

TITLE: Bash Update Snapshots Command
DESCRIPTION: Command to update Playwright snapshots using the test runner
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_23

LANGUAGE: bash
CODE:
```
npx playwright test --update-snapshots
```

----------------------------------------

TITLE: Generating PDF with Screen Media in Python (Async)
DESCRIPTION: Demonstrates how to generate a PDF with 'screen' media type using Playwright in Python with async syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_71

LANGUAGE: python
CODE:
```
# generates a pdf with "screen" media type.
await page.emulate_media(media="screen")
await page.pdf(path="page.pdf")
```

----------------------------------------

TITLE: Running Playwright Tests with New Chromium Headless Mode via CLI
DESCRIPTION: Shows how to run Playwright tests written in Python using `pytest` while explicitly specifying the `'chromium'` browser channel via the command line. This opts into the new Chromium headless mode for testing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_6

LANGUAGE: bash
CODE:
```
pytest test_login.py --browser-channel chromium
```

----------------------------------------

TITLE: Using toBeUndefined Method for Undefined Checking
DESCRIPTION: Shows how to use the 'toBeUndefined' method to check if a value is undefined.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_14

LANGUAGE: javascript
CODE:
```
const value = undefined;
expect(value).toBeUndefined();
```

----------------------------------------

TITLE: Configuring Chromium Headless in runsettings.xml
DESCRIPTION: Provides an example of configuring the test runner using `runsettings.xml` to opt into the new Chromium headless mode by specifying the 'chromium' browser name and channel within the Playwright settings.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_6

LANGUAGE: xml
CODE:
```
<?xml version="1.0" encoding="utf-8"?>
<RunSettings>
  <Playwright>
    <BrowserName>chromium</BrowserName>
    <LaunchOptions>
      <Channel>chromium</Channel>
    </LaunchOptions>
  </Playwright>
</RunSettings>
```

----------------------------------------

TITLE: Python Select Options Value Configuration
DESCRIPTION: Configuration for selecting options by value in a select element. Supports both single and multiple selections.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_96

LANGUAGE: python
CODE:
```
value: Union[str, List[str]]
```

----------------------------------------

TITLE: Dispatching Events with Playwright Frame - Java
DESCRIPTION: Demonstrates how to dispatch events on frame elements in Java using Playwright. Provides examples for handling event types like 'click' and 'dragstart', including setting event-specific properties.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_6

LANGUAGE: Java
CODE:
```
frame.dispatchEvent("button#submit", "click");
```

LANGUAGE: Java
CODE:
```
JSHandle dataTransfer = frame.evaluateHandle("() => new DataTransfer()");
Map<String, Object> arg = new HashMap<>();
arg.put("dataTransfer", dataTransfer);
frame.dispatchEvent("#source", "dragstart", arg);
```

----------------------------------------

TITLE: Retrieving Video Path in Playwright - Python Sync
DESCRIPTION: This code snippet in Python (synchronous) demonstrates how to obtain the path for a video recorded with Playwright's recordVideo option enabled. The method should be called to fetch the evolving path that is ultimately returned after the page closure.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-video.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
print(page.video.path())
```

----------------------------------------

TITLE: Dispatching Click Event on ElementHandle in Python (Async)
DESCRIPTION: Illustrates dispatching a click event on an ElementHandle using the dispatch_event method in Python with async syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_22

LANGUAGE: python
CODE:
```
await element_handle.dispatch_event("click")
```

----------------------------------------

TITLE: Checking Accessible Description with Playwright Java
DESCRIPTION: Shows how to use LocatorAssertions.toHaveAccessibleDescription in Playwright Java to assert that a locator element has a particular accessible description. Requires a Locator object and the expected description string.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_13

LANGUAGE: java
CODE:
```
Locator locator = page.getByRole(AriaRole.BUTTON);
assertThat(locator).hasAccessibleDescription("Upload a photo");
```

----------------------------------------

TITLE: HTML Password Input Example
DESCRIPTION: Example showing password input with label for demonstrating label-based location.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<label>Password <input type="password" /></label>
```

----------------------------------------

TITLE: Disabling Service Workers in Playwright Context (Python)
DESCRIPTION: Configures a new Playwright browser context to block service workers using the `service_workers` option, preventing them from interfering with page interactions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_36

LANGUAGE: python async
CODE:
```
context = await browser.new_context(service_workers="block")
page = await context.new_page()
```

LANGUAGE: python sync
CODE:
```
context = browser.new_context(service_workers="block")
page = context.new_page()
```

----------------------------------------

TITLE: Specifying Mouse Button for Playwright Click Actions
DESCRIPTION: Defines the `button` parameter for Playwright click-related actions, specifying which mouse button to use ('left', 'right', or 'middle'). Defaults to 'left'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_16

LANGUAGE: markdown
CODE:
```
- `button` <[MouseButton]<"left"|"right"|"middle">>
```

----------------------------------------

TITLE: Dragging UI Elements on AndroidDevice with Playwright JS
DESCRIPTION: The AndroidDevice.drag async method performs a drag gesture from a selected widget to a destination point. Requires selector (AndroidSelector) and dest ({x, y}). Optional speed (pixels/sec) and timeout are supported. Useful for simulating user drags in UI automation. Inputs: UI selector and destination. Outputs: None, but UI effect is observable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
// Drags a widget towards a point.
await androidDevice.drag({
  selector: mySelector,
  dest: { x: 100, y: 200 },
  speed: 400,    // Optional
  timeout: 5000  // Optional
});
```

----------------------------------------

TITLE: Performing Trial Run with Modifiers in Playwright
DESCRIPTION: Defines the `trial` boolean option for Playwright actions, specifically noting behavior with modifiers. When `true`, only actionability checks are performed, skipping the action itself. However, specified keyboard `modifiers` will still be pressed, allowing testing of elements visible only when those keys are active. Defaults to `false`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_21

LANGUAGE: markdown
CODE:
```
- `trial` <[boolean]>
```

----------------------------------------

TITLE: Recording Minimal HAR in Playwright Context (Python)
DESCRIPTION: Configures a new Playwright browser context to record only the essential information required for replaying network activity in the HTTP Archive (HAR) using the `record_har_mode="minimal"` option.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_38

LANGUAGE: python async
CODE:
```
context = await browser.new_context(record_har_mode="minimal", record_har_path="har.har")
```

LANGUAGE: python sync
CODE:
```
context = browser.new_context(record_har_mode="minimal", record_har_path="har.har")
```

----------------------------------------

TITLE: Recording Minimal HAR in Playwright
DESCRIPTION: Example of recording a minimal HAR file containing only essential information for replaying, useful for manual editing of HAR files.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_46

LANGUAGE: javascript
CODE:
```
const context = await browser.newContext({
  recordHar: {
    path: 'github.har',
    mode: 'minimal',
  }
});
```

----------------------------------------

TITLE: Asserting Error Throwing with toThrow in JavaScript
DESCRIPTION: Shows how to use `expect().toThrow()` in Playwright to assert that a function call throws an error. It can optionally compare the thrown error against an expected value, which can be a regular expression (to match the message), a string (to check for substring inclusion in the message), an Error object (to match the message exactly), or an Error class (to check the instance type).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_24

LANGUAGE: javascript
CODE:
```
```js
expect(() => {
  throw new Error('Something bad');
}).toThrow();

expect(() => {
  throw new Error('Something bad');
}).toThrow(/something/);

expect(() => {
  throw new Error('Something bad');
}).toThrow(Error);
```
```

----------------------------------------

TITLE: Omitting Content from HAR Recording (C#, Java, Python)
DESCRIPTION: Controls whether to include request content in HAR recordings for non-JavaScript language bindings. Defaults to false, which includes content.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_76

LANGUAGE: python
CODE:
```
- `recordHarOmitContent` ?<[boolean]>
```

----------------------------------------

TITLE: Evaluating Multiple Selectors on ElementHandle in Python (Sync)
DESCRIPTION: Demonstrates evaluating multiple selectors on an ElementHandle and extracting inner text from multiple elements in Python using synchronous syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_38

LANGUAGE: python
CODE:
```
feed_handle = page.query_selector(".feed")
assert feed_handle.eval_on_selector_all(".tweet", "nodes => nodes.map(n => n.innerText)") == ["hello!", "hi!"]
```

----------------------------------------

TITLE: Configuring Screenshot Masking Color in JavaScript
DESCRIPTION: Shows how to use the maskColor option when taking screenshots to change the default color used for masking elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_22

LANGUAGE: javascript
CODE:
```
await page.goto('https://playwright.dev');
await expect(page).toHaveScreenshot({
  mask: [page.locator('img')],
  maskColor: '#00FF00', // green
});
```

----------------------------------------

TITLE: Custom Callback on Every Actionability Check with Locator Handler in Python (Asynchronous)
DESCRIPTION: Asynchronous Python implementation of a locator handler with the body element that runs a custom JavaScript function before every actionability check. Uses the no_wait_after parameter since the handler doesn't hide the body element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_89

LANGUAGE: python
CODE:
```
# Setup the handler.
def handler():
  await page.evaluate("window.removeObstructionsForTestIfNeeded()")
await page.add_locator_handler(page.locator("body"), handler, no_wait_after=True)

# Write the test as usual.
await page.goto("https://example.com")
await page.get_by_role("button", name="Start here").click()
```

----------------------------------------

TITLE: Evaluating JSHandle in Python (Sync)
DESCRIPTION: Shows how to evaluate a JSHandle to get the innerText of a tweet's retweets element in Python with synchronous syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
tweet_handle = page.query_selector(".tweet .retweets")
assert tweet_handle.evaluate("node => node.innerText") == "10 retweets"
```

----------------------------------------

TITLE: Configuring JSON Reporter Output File in Playwright (JS)
DESCRIPTION: Shows how to configure the 'json' reporter within the Playwright configuration file (playwright.config.ts). It uses the outputFile option within the reporter configuration array to specify the path where the JSON report should be saved, directing the output away from standard output. Requires importing defineConfig from @playwright/test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_23

LANGUAGE: js
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: [['json', { outputFile: 'results.json' }]],
});
```

----------------------------------------

TITLE: Configuring tsconfig.json for Path Mapping in Playwright
DESCRIPTION: This JSON snippet shows a tsconfig.json configuration that enables path mapping in Playwright. It sets the baseUrl and defines a custom path mapping for a 'myhelper' package.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-typescript-js.md#2025-04-22_snippet_2

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@myhelper/*": ["packages/myhelper/*"] // This mapping is relative to "baseUrl".
    }
  }
}
```

----------------------------------------

TITLE: Using Page.evalOnSelectorAll in Python (Sync)
DESCRIPTION: Example of using the eval_on_selector_all method in Python with synchronous calls to evaluate expressions on all elements matching a selector. This method finds all matching elements and passes them to the provided JavaScript expression.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_49

LANGUAGE: python
CODE:
```
div_counts = page.eval_on_selector_all("div", "(divs, min) => divs.length >= min", 10)
```

----------------------------------------

TITLE: Dispatching Click Event on ElementHandle in C#
DESCRIPTION: Shows how to dispatch a click event on an ElementHandle using the DispatchEventAsync method in C#.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_24

LANGUAGE: csharp
CODE:
```
await elementHandle.DispatchEventAsync("click");
```

----------------------------------------

TITLE: Emulating Offline Mode in C#
DESCRIPTION: Creates a new browser context with offline mode enabled using the Playwright C# client. This allows testing how applications handle network unavailability.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_73

LANGUAGE: csharp
CODE:
```
var context = await browser.NewContextAsync(new() { Offline = true });
```

----------------------------------------

TITLE: Creating a Test Wrapper for Complex Components
DESCRIPTION: This example shows how to create a test wrapper for a component that uses complex objects. It demonstrates converting complex props into simple ones that can be easily tested.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
import React from 'react';
import InputMedia from './import-media';

type InputMediaForTestProps = {
  onMediaChange(mediaName: string): void;
};

export function InputMediaForTest(props: InputMediaForTestProps) {
  // Instead of sending a complex `media` object to the test, send the media name.
  return <InputMedia onChange={media => props.onMediaChange(media.name)} />;
}
// Export more stories here.
```

----------------------------------------

TITLE: Configure Playwright Emulation Options (TypeScript)
DESCRIPTION: This code block shows how to configure various emulation settings in the Playwright test config, including color scheme, geolocation, locale, permissions, timezone, and viewport. These options allow tests to simulate different user environments and device characteristics.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    // Emulates `'prefers-colors-scheme'` media feature.
    colorScheme: 'dark',

    // Context geolocation.
    geolocation: { longitude: 12.492507, latitude: 41.889938 },

    // Emulates the user locale.
    locale: 'en-GB',

    // Grants specified permissions to the browser context.
    permissions: ['geolocation'],

    // Emulates the user timezone.
    timezoneId: 'Europe/Paris',

    // Viewport used for all pages in the context.
    viewport: { width: 1280, height: 720 },
  },
});
```

----------------------------------------

TITLE: Implementing Advanced Routing with Playwright .NET
DESCRIPTION: Provides an example of using page.RouteAsync to implement custom request routing logic in Playwright for .NET. The first handler removes a header, and the second handler aborts image requests while using route.FallbackAsync to allow other handlers (like the first one) to process non-image requests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_39

LANGUAGE: csharp
CODE:
```
// Remove a header from all requests.
await page.RouteAsync("**/*", async route =>
{
    var headers = route.Request.Headers;
    headers.Remove("X-Secret");
    await route.ContinueAsync(new() { Headers = headers });
});

// Abort all images.
await page.RouteAsync("**/*", async route =>
{
    if (route.Request.ResourceType == "image")
    {
        await route.AbortAsync();
    }
    else
    {
        await route.FallbackAsync();
    }
});
```

----------------------------------------

TITLE: Generating PDF with Screen Media in Java
DESCRIPTION: Shows how to generate a PDF with 'screen' media type using Playwright in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_70

LANGUAGE: java
CODE:
```
// Generates a PDF with "screen" media type.
page.emulateMedia(new Page.EmulateMediaOptions().setMedia(Media.SCREEN));
page.pdf(new Page.PdfOptions().setPath(Paths.get("page.pdf")));
```

----------------------------------------

TITLE: Mocking API Requests in Java
DESCRIPTION: This Java example shows how to intercept a network request to a fruit API and return mock data. It demonstrates creating a dictionary with custom fruit data, fulfilling the route with this mock data, and asserting that the mocked content is visible on the page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_4

LANGUAGE: java
CODE:
```
// Intercept the route to the fruit API
page.route("https://fruit.ceo/api/breeds/image/random", route -> {
    List<Dictionary<String, Object>> data = new ArrayList<Dictionary<String, Object>>();
    Hashtable<String, Object> dict = new Hashtable<String, Object>();
    dict.put("name", "Strawberry");
    dict.put("id", 21);
    data.add(dict);
  // fulfill the route with the mock data
  route.fulfill(RequestOptions.create().setData(data));
});

// Go to the page
page.navigate("https://demo.playwright.dev/api-mocking");

// Assert that the Strawberry fruit is visible
assertThat(page.getByText("Strawberry")).isVisible();
```

----------------------------------------

TITLE: Manually Creating a Browser Context in Playwright (.NET/C#)
DESCRIPTION: Demonstrates the C# code for initializing Playwright (`Playwright.CreateAsync()`), launching a Chromium browser (`playwright.Chromium.LaunchAsync()`), creating a new isolated `BrowserContext` (`browser.NewContextAsync()`), and then opening a `Page` (`context.NewPageAsync()`) within that context using the `Microsoft.Playwright` library. This illustrates manual context creation in C#.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_5

LANGUAGE: csharp
CODE:
```
using var playwright = await Playwright.CreateAsync();
var browser = await playwright.Chromium.LaunchAsync();
var context = await browser.NewContextAsync();
var page = await context.NewPageAsync();
```

----------------------------------------

TITLE: Using Vue Locator in Playwright
DESCRIPTION: Vue locator allows finding elements by their component name and property values. Component names are transcribed with kebab-case. This example demonstrates clicking on a book-item component.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
await page.locator('_vue=book-item').click();
```

LANGUAGE: java
CODE:
```
page.locator("_vue=book-item").click();
```

LANGUAGE: python
CODE:
```
await page.locator("_vue=book-item").click()
```

LANGUAGE: python
CODE:
```
page.locator("_vue=book-item").click()
```

LANGUAGE: csharp
CODE:
```
await page.Locator("_vue=book-item").ClickAsync();
```

----------------------------------------

TITLE: Specifying Playwright Drop Target Element Selector
DESCRIPTION: Defines the `target` string parameter, which is a selector used to find the element onto which another element will be dropped in a Playwright drag-and-drop operation. If multiple elements match, the first one is selected.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_13

LANGUAGE: markdown
CODE:
```
- `target` <[string]>
```

----------------------------------------

TITLE: Configuring Polling Interval for Playwright `waitForFunction` (CSharp/Java)
DESCRIPTION: Defines the `pollingInterval` parameter for Playwright's `waitForFunction` in C# and Java. If specified, it sets the interval in milliseconds at which the expression is evaluated. If omitted, the expression is evaluated using `requestAnimationFrame`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_30

LANGUAGE: markdown
CODE:
```
- `pollingInterval` <[float]>
```

----------------------------------------

TITLE: Fast Forwarding and Pausing Time - Playwright Python Async
DESCRIPTION: Uses Playwright's Python async API to manipulate the browser's clock, pausing and fast forwarding time during tests. The test sets up the clock state, simulates user inactivity, and checks UI updates. Requires Playwright Python async API, datetime for date input, and page context; inputs include datetime values and string durations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
# Initialize clock with some time before the test time and let the page load
# naturally. `Date.now` will progress as the timers fire.
await page.clock.install(time=datetime.datetime(2024, 2, 2, 8, 0, 0))
await page.goto("http://localhost:3333")

# Pretend that the user closed the laptop lid and opened it again at 10am.
# Pause the time once reached that point.
await page.clock.pause_at(datetime.datetime(2024, 2, 2, 10, 0, 0))

# Assert the page state.
await expect(page.get_by_test_id("current-time")).to_have_text("2/2/2024, 10:00:00 AM")

# Close the laptop lid again and open it at 10:30am.
await page.clock.fast_forward("30:00")
await expect(page.get_by_test_id("current-time")).to_have_text("2/2/2024, 10:30:00 AM")
```

----------------------------------------

TITLE: Inserting Text with Keyboard.insert_text in Playwright (Python Sync)
DESCRIPTION: Demonstrates using `page.keyboard.insert_text` in synchronous Python to dispatch an `input` event with the specified text ('嗨'). This method bypasses `keydown`, `keyup`, and `keypress` events and is useful for directly inserting text, including non-ASCII characters. Modifier keys do not affect this method.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_18

LANGUAGE: python
CODE:
```
```python sync
page.keyboard.insert_text("嗨")
```
```

----------------------------------------

TITLE: Performing Fling Gestures on AndroidDevice with Playwright JS
DESCRIPTION: AndroidDevice.fling simulates a fast swipe in a specified direction on a widget. Needs selector and direction ("down","up","left","right"). Optional speed and timeout tweak behavior. Used to quickly scroll UI lists or pages. Inputs: selector and direction. No return value.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_5

LANGUAGE: js
CODE:
```
// Performs a fling gesture.
await androidDevice.fling({
  selector: mySelector,
  direction: 'up',
  speed: 800,     // Optional
  timeout: 2000   // Optional
});
```

----------------------------------------

TITLE: Image Quality Setting for Screenshots
DESCRIPTION: Defines the `quality` option that controls the quality of screenshot images on a scale of 0-100. This option is not applicable to PNG images.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_104

LANGUAGE: typescript
CODE:
```
- `quality` <[int]>
```

----------------------------------------

TITLE: Bypassing Content Security Policy in Playwright Tests
DESCRIPTION: Example showing how to bypass website's Content Security Policy (CSP) by enabling the bypassCSP option, which can be useful for testing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    bypassCSP: true,
  }
});
```

----------------------------------------

TITLE: Run Clock For Duration Example
DESCRIPTION: Shows how to advance the clock while firing all time-related callbacks
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-clock.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
await page.clock.runFor(1000);
await page.clock.runFor('30:00');
```

LANGUAGE: python
CODE:
```
await page.clock.run_for(1000);
await page.clock.run_for("30:00")
```

LANGUAGE: java
CODE:
```
page.clock().runFor(1000);
page.clock().runFor("30:00");
```

LANGUAGE: csharp
CODE:
```
await page.Clock.RunForAsync(1000);
await page.Clock.RunForAsync("30:00");
```

----------------------------------------

TITLE: Attaching Downloaded Files to Test Steps
DESCRIPTION: Demonstrates how to attach files from custom download operations to test steps.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-teststepinfo.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';
import { download } from './my-custom-helpers';

test('basic test', async ({}) => {
  await test.step('check download behavior', async step => {
    const tmpPath = await download('a');
    await step.attach('downloaded', { path: tmpPath });
  });
});
```

----------------------------------------

TITLE: Using beforeMount Hook in Vue.js Component Tests
DESCRIPTION: Example of using the beforeMount hook in Playwright component tests for Vue.js. This allows setting up the app configuration before mounting components.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_39

LANGUAGE: javascript
CODE:
```
import { test } from '@playwright/experimental-ct-vue';
import { Component } from './mycomponent';

test('should work', async ({ mount }) => {
  const component = await mount(Component, {
    hooksConfig: {
      /* anything to configure your app */
    }
  });
});
```

LANGUAGE: javascript
CODE:
```
import { router } from '../router';
import { beforeMount } from '@playwright/experimental-ct-vue/hooks';

beforeMount(async ({ app, hooksConfig }) => {
  app.use(router);
});
```

----------------------------------------

TITLE: Specifying Keyboard Modifiers for Playwright Input Actions
DESCRIPTION: Defines the `modifiers` array parameter for Playwright input actions, specifying which modifier keys (Alt, Control, Meta, Shift, ControlOrMeta) should be pressed during the operation. Only the specified modifiers will be active, and the original state is restored afterward. 'ControlOrMeta' adapts based on the operating system (Control for Windows/Linux, Meta for macOS). If unspecified, current modifiers are used.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_15

LANGUAGE: markdown
CODE:
```
- `modifiers` <[Array]<[KeyboardModifier]<"Alt"|"Control"|"ControlOrMeta"|"Meta"|"Shift">>>
```

----------------------------------------

TITLE: Advanced Vite Configuration with Plugins
DESCRIPTION: Comprehensive Vite configuration example including plugins and path resolution for Vue testing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_26

LANGUAGE: javascript
CODE:
```
import { defineConfig, devices } from '@playwright/experimental-ct-vue';

import { resolve } from 'path';
import vue from '@vitejs/plugin-vue';
import AutoImport from 'unplugin-auto-import/vite';
import Components from 'unplugin-vue-components/vite';

export default defineConfig({
  testDir: './tests/component',
  use: {
    trace: 'on-first-retry',
    ctViteConfig: {
      plugins: [
        vue(),
        AutoImport({
          imports: [
            'vue',
            'vue-router',
            '@vueuse/head',
            'pinia',
            {
              '@/store': ['useStore'],
            },
          ],
          dts: 'src/auto-imports.d.ts',
          eslintrc: {
            enabled: true,
          },
        }),
        Components({
          dirs: ['src/components'],
          extensions: ['vue'],
        }),
      ],
      resolve: {
        alias: {
          '@': resolve(__dirname, './src'),
        },
      },
    },
  },
});
```

----------------------------------------

TITLE: Evaluating Selector on ElementHandle in Java
DESCRIPTION: Shows how to evaluate a selector on an ElementHandle and extract inner text in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_31

LANGUAGE: java
CODE:
```
ElementHandle tweetHandle = page.querySelector(".tweet");
assertEquals("100", tweetHandle.evalOnSelector(".like", "node => node.innerText"));
assertEquals("10", tweetHandle.evalOnSelector(".retweets", "node => node.innerText"));
```

----------------------------------------

TITLE: Setting TypeScript Configuration Path
DESCRIPTION: Specifies a single tsconfig path applicable to all imported files. Overrides default behavior of looking up tsconfig for each file separately.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_18

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  tsconfig: './tsconfig.test.json',
});
```

----------------------------------------

TITLE: Marking Tests as Slow in Playwright
DESCRIPTION: Demonstrates how to mark tests as slow using test.slow() in Playwright. This can be done for individual tests, conditionally, or for all tests in a file or group.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_36

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('slow test', async ({ page }) => {
  test.slow();
  // ...
});

test('slow in Safari', async ({ page, browserName }) => {
  test.slow(browserName === 'webkit', 'This feature is slow in Safari');
  // ...
});

test.slow(({ browserName }) => browserName === 'webkit', 'all tests are slow in Safari');

test('slow in Safari 1', async ({ page }) => {
  // ...
});
test('fail in Safari 2', async ({ page }) => {
  // ...
});
```

----------------------------------------

TITLE: Listening for Device Connection Close Event with Playwright JS
DESCRIPTION: The AndroidDevice.close event signals when the device connection is closed, allowing for teardown or cleanup logic. No explicit parameters other than the AndroidDevice instance itself are required. The event is emitted by Playwright during the device lifecycle. Input is a device instance; there is no output except the notification.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
// Emitted when the device connection gets closed.
androidDevice.on('close', () => {
  // Handle device disconnect logic
});
```

----------------------------------------

TITLE: Detecting New WebView Instances on AndroidDevice with Playwright JS
DESCRIPTION: The AndroidDevice.webView event fires whenever a new WebView appears on the device, enabling automation or inspection. The event receives an AndroidWebView argument upon occurrence. Requires an active device connection; passes the new WebView instance as input and triggers associated handlers.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
// Emitted when a new WebView instance is detected.
androidDevice.on('webView', webView => {
  // Inspect or automate the webView
});
```

----------------------------------------

TITLE: Configuring Chromium Channel - C# RunSettings
DESCRIPTION: XML RunSettings configuration for using Chromium channel in C# tests
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_17

LANGUAGE: xml
CODE:
```
<?xml version="1.0" encoding="utf-8"?>
<RunSettings>
  <Playwright>
    <BrowserName>chromium</BrowserName>
    <LaunchOptions>
      <Channel>chromium</Channel>
    </LaunchOptions>
  </Playwright>
</RunSettings>
```

----------------------------------------

TITLE: Emulating Mobile Devices with Playwright Codegen for JavaScript
DESCRIPTION: Command to generate code while emulating an iPhone 13 for the playwright.dev website using JavaScript. This sets appropriate viewport size, user agent, and other device-specific configurations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
npx playwright codegen --device="iPhone 13" playwright.dev
```

----------------------------------------

TITLE: Evaluating Selector on ElementHandle in C#
DESCRIPTION: Shows how to evaluate a selector on an ElementHandle and extract inner text in C#.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_34

LANGUAGE: csharp
CODE:
```
var tweetHandle = await page.QuerySelectorAsync(".tweet");
Assert.AreEqual("100", await tweetHandle.EvalOnSelectorAsync(".like", "node => node.innerText"));
Assert.AreEqual("10", await tweetHandle.EvalOnSelectorAsync(".retweets", "node => node.innerText"));
```

----------------------------------------

TITLE: Simulating Long Tap on AndroidDevice with Playwright JS
DESCRIPTION: AndroidDevice.longTap simulates a long tap on a UI element identified by selector. Optional timeout sets operation wait. Used for invoking context menus or other long press behaviors. Input: selector and optional timeout. Output: none.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_9

LANGUAGE: js
CODE:
```
// Performs a long tap gesture.
await androidDevice.longTap({
  selector: mySelector,
  timeout: 2000 // Optional
});
```

----------------------------------------

TITLE: Installing Firefox Beta Channel
DESCRIPTION: Command to install the beta version of Firefox browser using Puppeteer's browser installation utility.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/bidi/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
npx -y @puppeteer/browsers install firefox@beta
```

----------------------------------------

TITLE: Emulating Pinch Gesture with Playwright - C#
DESCRIPTION: This C# snippet provides a static asynchronous method `Pinch` that emulates a pinch gesture on a Playwright `ILocator`. It calculates touch point positions relative to the element's bounding box and dispatches `touchstart`, `touchmove`, and `touchend` events with updated coordinates. The snippet also includes the start of a test method demonstrating its potential usage.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#_snippet_9

LANGUAGE: C#
CODE:
```
using Microsoft.Playwright;
using System.Collections.Generic;
using System.Threading.Tasks;

public class TouchEvents
{
    public static async Task Pinch(ILocator locator, int deltaX = 50, int steps = 5, string direction = "in")
    {
        var bounds = await locator.BoundingBoxAsync();
        double centerX = bounds.X + bounds.Width / 2;
        double centerY = bounds.Y + bounds.Height / 2;
        double stepDeltaX = deltaX / (steps + 1.0);

        var touches = new List<Dictionary<string, object>>
        {
            new Dictionary<string, object>
            {
                { "identifier", 0 },
                { "clientX", centerX - (direction == "in" ? deltaX : stepDeltaX) },
                { "clientY", centerY }
            },
            new Dictionary<string, object>
            {
                { "identifier", 1 },
                { "clientX", centerX + (direction == "in" ? deltaX : stepDeltaX) },
                { "clientY", centerY }
            }
        };
        await locator.DispatchEventAsync("touchstart", new { touches, changedTouches = touches, targetTouches = touches });

        for (int i = 1; i <= steps; i++)
        {
            double offset = direction == "in" ? (deltaX - i * stepDeltaX) : (stepDeltaX * (i + 1));
            touches = new List<Dictionary<string, object>>
            {
                new Dictionary<string, object>
                {
                    { "identifier", 0 },
                    { "clientX", centerX - offset },
                    { "clientY", centerY }
                },
                new Dictionary<string, object>
                {
                    { "identifier", 1 },
                    { "clientX", centerX + offset },
                    { "clientY", centerY }
                }
            };
            await locator.DispatchEventAsync("touchmove", new { touches, changedTouches = touches, targetTouches = touches });
        }

        await locator.DispatchEventAsync("touchend", new { touches = new List<object>(), changedTouches = new List<object>(), targetTouches = new List<object>() });
    }

    public static async Task TestPinchInGestureToZoomOutTheMap(IPage page)
    {

```

----------------------------------------

TITLE: Returning Open Browser Contexts in Playwright JavaScript
DESCRIPTION: This JavaScript code example uses Playwright to print the number of open browser contexts after initialization and after creating a new one. It demonstrates leveraging Playwright for context management. Requires Playwright package and Node.js.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_5

LANGUAGE: JavaScript
CODE:
```
const browser = await pw.webkit.launch();
console.log(browser.contexts().length); // prints `0`

const context = await browser.newContext();
console.log(browser.contexts().length); // prints `1`
```

----------------------------------------

TITLE: HTML Email Input Example
DESCRIPTION: Example showing email input with placeholder for demonstrating placeholder-based location.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_4

LANGUAGE: html
CODE:
```
<input type="email" placeholder="name@example.com" />
```

----------------------------------------

TITLE: Uninstall Playwright Browsers CLI (Bash)
DESCRIPTION: Demonstrates the new `uninstall` command for the Playwright CLI using PowerShell (`pwsh`). It shows how to remove browsers installed by the current installation or all Playwright browsers ever installed using the `--all` flag.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_23

LANGUAGE: bash
CODE:
```
$ pwsh bin/Debug/netX/playwright.ps1 uninstall # remove browsers installed by this installation
$ pwsh bin/Debug/netX/playwright.ps1 uninstall --all # remove all ever-install Playwright browsers
```

----------------------------------------

TITLE: Connecting to a Browser via CDP Using Playwright JavaScript
DESCRIPTION: Shows how to connect to an existing Chromium-based browser via Chrome DevTools Protocol (CDP) using Playwright JS API. Requires Playwright and a running browser exposing its debug endpoint (e.g., with '--remote-debugging-port'). Input parameter is the CDP endpoint URL; output is access to the default context and open pages. Limitation: only Chromium-based browsers are supported and fidelity is lower than protocol connection.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
const browser = await playwright.chromium.connectOverCDP('http://localhost:9222');\nconst defaultContext = browser.contexts()[0];\nconst page = defaultContext.pages()[0];
```

----------------------------------------

TITLE: Set Fixed Clock Time Example
DESCRIPTION: Shows how to set a fixed time for Date.now and new Date() while keeping timers running
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-clock.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
await page.clock.setFixedTime(Date.now());
await page.clock.setFixedTime(new Date('2020-02-02'));
await page.clock.setFixedTime('2020-02-02');
```

LANGUAGE: python
CODE:
```
await page.clock.set_fixed_time(datetime.datetime.now())
await page.clock.set_fixed_time(datetime.datetime(2020, 2, 2))
await page.clock.set_fixed_time("2020-02-02")
```

LANGUAGE: java
CODE:
```
page.clock().setFixedTime(new Date());
page.clock().setFixedTime(new SimpleDateFormat("yyy-MM-dd").parse("2020-02-02"));
page.clock().setFixedTime("2020-02-02");
```

LANGUAGE: csharp
CODE:
```
await page.Clock.SetFixedTimeAsync(DateTime.Now);
await page.Clock.SetFixedTimeAsync(new DateTime(2020, 2, 2));
await page.Clock.SetFixedTimeAsync("2020-02-02");
```

----------------------------------------

TITLE: Running Sync Playwright Test - Python
DESCRIPTION: The main synchronous execution block that sets up the Playwright environment. It launches a Chromium browser, creates a new context configured for a 'Pixel 7' device, opens a new page, calls the `test_pinch_in_gesture_to_zoom_out_the_map` function, and finally closes the browser. This is the entry point for running the sync test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#_snippet_18

LANGUAGE: Python
CODE:
```
with sync_playwright() as p:
    browser = p.chromium.launch()
    context = browser.new_context(**p.devices['Pixel 7'])
    page = context.new_page()
    test_pinch_in_gesture_to_zoom_out_the_map(page)
    browser.close()
```

----------------------------------------

TITLE: Uninstall Playwright Browsers CLI Bash
DESCRIPTION: Demonstrates the new `playwright uninstall` CLI command introduced in version 1.35. This command allows users to remove browser binaries installed by Playwright. The `--all` flag removes all browsers ever installed by Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_21

LANGUAGE: bash
CODE:
```
$ playwright uninstall # remove browsers installed by this installation
$ playwright uninstall --all # remove all ever-install Playwright browsers
```

----------------------------------------

TITLE: Handling Security Details Confirmation with Locator Handler in C#
DESCRIPTION: C# implementation of a locator handler to automatically skip a security details confirmation page. The handler detects text matching 'Confirm your security details' and clicks the 'Remind me later' button.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_85

LANGUAGE: csharp
CODE:
```
// Setup the handler.
await page.AddLocatorHandlerAsync(page.GetByText("Confirm your security details"), async () => {
  await page.GetByRole(AriaRole.Button, new() { Name = "Remind me later" }).ClickAsync();
});

// Write the test as usual.
await page.GotoAsync("https://example.com");
await page.GetByRole("button", new() { Name = "Start here" }).ClickAsync();
```

----------------------------------------

TITLE: Evaluating JavaScript in Worker Context
DESCRIPTION: Defines the pageFunction parameter for worker evaluation functions in JavaScript. This allows executing JavaScript functions in a web worker context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_46

LANGUAGE: js
CODE:
```
- `pageFunction` <[function]|[string]>

Function to be evaluated in the worker context.
```

----------------------------------------

TITLE: Asserting Missing Attribute with `toHaveAttribute` in Playwright Python
DESCRIPTION: Demonstrates a behavior change in `LocatorAssertions.toHaveAttribute`. When used with an empty string value, this assertion now specifically matches elements that *do not* have the specified attribute, rather than matching an attribute with an empty value.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_30

LANGUAGE: python
CODE:
```
expect(page.get_by_role("button")).to_have_attribute("disabled", "")
```

----------------------------------------

TITLE: Advanced Merge-Reports CLI Usage
DESCRIPTION: Example of using the merge-reports CLI with multiple reporters, showing how to combine different report types like HTML and GitHub in a single command.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-sharding-js.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
npx playwright merge-reports --reporter=html,github ./blob-reports
```

----------------------------------------

TITLE: Using Vue Selector in Playwright Python
DESCRIPTION: React and Vue selectors allow selecting elements by its component name and/or property values. The syntax is very similar to attribute selectors and supports all attribute selector operators.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_51

LANGUAGE: Python
CODE:
```
page.locator("_vue=submit-button[enabled=true]").click()
```

----------------------------------------

TITLE: Using Custom Tag Name Selector in Playwright for JavaScript
DESCRIPTION: Illustrates the usage of a custom tag name selector in a Playwright test suite. It shows how to interact with elements selected using custom selectors alongside built-in locators. The test sets up a page context and performs actions on selected elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/extensibility.md#2025-04-22_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { test, expect } from './baseTest';

test('selector engine test', async ({ page }) => {
  // Now we can use 'tag=' selectors.
  const button = page.locator('tag=button');
  await button.click();

  // We can combine it with built-in locators.
  await page.locator('tag=div').getByText('Click me').click();

  // We can use it in any methods supporting selectors.
  await expect(page.locator('tag=button')).toHaveCount(3);
});
```

----------------------------------------

TITLE: Calculating Locator Bounding Box in Playwright C#
DESCRIPTION: Obtains the bounding box for a button and clicks its center using Playwright for C#. Coordinates are relative to the main content viewport, returns null if invisible.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_29

LANGUAGE: C#
CODE:
```
var box = await page.GetByRole(AriaRole.Button).BoundingBoxAsync();
await page.Mouse.ClickAsync(box.X + box.Width / 2, box.Y + box.Height / 2);
```

----------------------------------------

TITLE: Testing with Chrome Extensions - Python
DESCRIPTION: This Python test file includes test functions to assert that a Chrome extension correctly modifies web pages and its popup content. It uses Playwright functions like expect to verify text changes, leveraging predefined fixtures.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/chrome-extensions-js-python.md#2025-04-22_snippet_6

LANGUAGE: Python
CODE:
```
from playwright.sync_api import expect, Page


def test_example_test(page: Page) -> None:
    page.goto("https://example.com")
    expect(page.locator("body")).to_contain_text("Changed by my-extension")


def test_popup_page(page: Page, extension_id: str) -> None:
    page.goto(f"chrome-extension://{extension_id}/popup.html")
    expect(page.locator("body")).to_have_text("my-extension popup")
```

----------------------------------------

TITLE: Configuring TLS Client Certificates in Playwright
DESCRIPTION: This configuration snippet demonstrates how to set up client-side certificates for TLS Client Authentication in Playwright tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  // ...
  use: {
    clientCertificates: [{
      origin: 'https://example.com',
      certPath: './cert.pem',
      keyPath: './key.pem',
      passphrase: 'mysecretpassword',
    }],
  },
  // ...
});
```

----------------------------------------

TITLE: TestError Class Properties Implementation
DESCRIPTION: Properties definition of TestError class for handling test execution errors in Playwright. Includes properties for error cause, message, stack trace, thrown value, location, and code snippet.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporter-api/class-testerror.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
class TestError {
  cause: ?TestError;       // Error cause when available
  message: ?string;       // Error message for Error instances
  stack: ?string;         // Error stack trace
  value: ?string;         // Thrown value for non-Error instances
  location: ?Location;    // Error location in source code
  snippet: ?string;       // Source code snippet with error highlight
}
```

----------------------------------------

TITLE: Configuring WebView2 Test Environment in Python
DESCRIPTION: This Python code sets up fixtures for testing WebView2 applications with Playwright. It manages the WebView2 process, connects Playwright to it, and provides isolated contexts for each test run.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_11

LANGUAGE: python
CODE:
```
import os
import socket
import tempfile
import pytest
from pathlib import Path
from playwright.sync_api import Playwright, Browser, BrowserContext
import subprocess

EXECUTABLE_PATH = (
    Path(__file__).parent
    / ".."
    / "webview2-app"
    / "bin"
    / "Debug"
    / "net8.0-windows"
    / "webview2.exe"
)


@pytest.fixture(scope="session")
def data_dir():
    with tempfile.TemporaryDirectory(
        prefix="playwright-webview2-tests", ignore_cleanup_errors=True
    ) as tmpdirname:
        yield tmpdirname


@pytest.fixture(scope="session")
def webview2_process_cdp_port(data_dir: str):
    cdp_port = _find_free_port()
    process = subprocess.Popen(
        [EXECUTABLE_PATH],
        env={
            **dict(os.environ),
            "WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS": f"--remote-debugging-port={cdp_port}",
            "WEBVIEW2_USER_DATA_FOLDER": data_dir,
        },
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        universal_newlines=True,
    )
    while True:
        line = process.stdout.readline()
        if "WebView2 initialized" in line:
            break
    yield cdp_port
    process.terminate()


@pytest.fixture(scope="session")
def browser(playwright: Playwright, webview2_process_cdp_port: int):
    browser = playwright.chromium.connect_over_cdp(
        f"http://127.0.0.1:{webview2_process_cdp_port}"
    )
    yield browser


@pytest.fixture(scope="function")
def context(browser: Browser):
    context = browser.contexts[0]
    yield context


@pytest.fixture(scope="function")
def page(context: BrowserContext):
    page = context.pages[0]
    yield page


def _find_free_port(port=9000, max_port=65535):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    while port <= max_port:
        try:
            sock.bind(("", port))
            sock.close()
            return port
        except OSError:
            port += 1
    raise IOError("no free ports")
```

----------------------------------------

TITLE: Marking Multiple Tests as Fixme in Playwright
DESCRIPTION: This example shows how to mark multiple tests in a file or group as 'fixme' based on a condition using a single test.fixme call.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_31

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.fixme(({ browserName }) => browserName === 'webkit', 'Should figure out the issue');

test('to be fixed in Safari 1', async ({ page }) => {
  // ...
});
test('to be fixed in Safari 2', async ({ page }) => {
  // ...
});
```

----------------------------------------

TITLE: Emulating Offline Mode in Playwright Config
DESCRIPTION: Configures all tests to run in offline mode using the Playwright Test configuration file. This allows testing how applications handle network unavailability.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_69

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    offline: true
  },
});
```

----------------------------------------

TITLE: Getting Properties from JSHandle in Java
DESCRIPTION: Shows how to get properties from a JSHandle, specifically window and document objects, in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_11

LANGUAGE: java
CODE:
```
JSHandle handle = page.evaluateHandle("() => ({ window, document })");
Map<String, JSHandle> properties = handle.getProperties();
JSHandle windowHandle = properties.get("window");
JSHandle documentHandle = properties.get("document");
handle.dispose();
```

----------------------------------------

TITLE: WebSocketRoute.onMessage Handler - JavaScript/Python
DESCRIPTION: Handler for processing WebSocket messages. Can be used to handle messages from page or server.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_23

LANGUAGE: javascript
CODE:
```
function(string): Promise<any>|any
```

----------------------------------------

TITLE: Hover and Click Using ElementHandle in Python Async
DESCRIPTION: Depicts the use of async Python to hover and click a text element using ElementHandle in Playwright. The text 'Submit' is queried asynchronously and manipulated.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_7

LANGUAGE: Python
CODE:
```
handle = await page.query_selector("text=Submit")
await handle.hover()
await handle.click()
```

----------------------------------------

TITLE: Evaluating Multiple Selectors on ElementHandle in JavaScript
DESCRIPTION: Demonstrates how to evaluate multiple selectors on an ElementHandle and extract inner text from multiple elements in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_35

LANGUAGE: javascript
CODE:
```
const feedHandle = await page.$('.feed');
expect(await feedHandle.$$eval('.tweet', nodes =>
  nodes.map(n => n.innerText))).toEqual(['Hello!', 'Hi!'],
);
```

----------------------------------------

TITLE: Registering and Using Custom Tag Name Selector in Playwright for Async Python
DESCRIPTION: This Python async example demonstrates how to register and use a custom selector engine in Playwright to query elements by tag name. It details interactions with page elements using asynchronous methods to perform actions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/extensibility.md#2025-04-22_snippet_3

LANGUAGE: Python
CODE:
```
tag_selector = """
    // Must evaluate to a selector engine instance.
    {
      // Returns the first element matching given selector in the root's subtree.
      query(root, selector) {
        return root.querySelector(selector);
      },

      // Returns all elements matching given selector in the root's subtree.
      queryAll(root, selector) {
        return Array.from(root.querySelectorAll(selector));
      }
    }"""

# register the engine. selectors will be prefixed with "tag=".
await playwright.selectors.register("tag", tag_selector)

# now we can use "tag=" selectors.
button = page.locator("tag=button")
await button.click()

# we can combine it with built-in locators.
await page.locator("tag=div").get_by_text("click me").click()

# we can use it in any methods supporting selectors.
button_count = await page.locator("tag=button").count()
```

----------------------------------------

TITLE: Loading Chrome Extension with Playwright in Headless Mode - Python Sync
DESCRIPTION: This snippet runs a Chrome extension in headless mode using Playwright in synchronous Python. It involves launching a persistent browser context, handling the background page, and closing it after running tests, relying on the Playwright library.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/chrome-extensions-js-python.md#2025-04-22_snippet_2

LANGUAGE: Python
CODE:
```
from playwright.sync_api import sync_playwright, Playwright

path_to_extension = "./my-extension"
user_data_dir = "/tmp/test-user-data-dir"


def run(playwright: Playwright):
    context = playwright.chromium.launch_persistent_context(
        user_data_dir,
        channel="chromium",
        args=[
            f"--disable-extensions-except={path_to_extension}",
            f"--load-extension={path_to_extension}",
        ],
    )
    if len(context.background_pages) == 0:
        background_page = context.wait_for_event('backgroundpage')
    else:
        background_page = context.background_pages[0]

    # Test the background page as you would any other page.
    context.close()


with sync_playwright() as playwright:
    run(playwright)
```

----------------------------------------

TITLE: Simulating Pinch Gesture - Playwright Python Async
DESCRIPTION: Defines an asynchronous function to simulate a pinch gesture on a given Playwright locator. It calculates touch points based on the locator's bounding box and dispatches 'touchstart', 'touchmove', and 'touchend' events with appropriate touch data to simulate the gesture. Requires a Playwright Locator object and an argument dictionary specifying deltaX, steps, and direction ('in' or 'out').
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#_snippet_13

LANGUAGE: Python
CODE:
```
    await locator.dispatch_event('touchend', {
        'touches': [],
        'changedTouches': [],
        'targetTouches': []
    })
```

----------------------------------------

TITLE: Connecting to a Browser via CDP Using Playwright Python (Async)
DESCRIPTION: Displays connecting asynchronously to a running Chromium browser over CDP using Playwright Python async API. Requires 'playwright' Python package and a properly configured debug port. Input is a CDP endpoint URL; returns browser and page objects. Limitations: async environment required; only Chromium is supported.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
browser = await playwright.chromium.connect_over_cdp(\"http://localhost:9222\")\ndefault_context = browser.contexts[0]\npage = default_context.pages[0]
```

----------------------------------------

TITLE: Basic Playwright Trace Recording (Java)
DESCRIPTION: Shows the basic process for recording a Playwright trace in Java. It involves creating a browser context, starting tracing using `Tracing.StartOptions` (enabling screenshots and snapshots), performing page navigation, and stopping the trace with `Tracing.StopOptions` to specify the output file path ('trace.zip'). Requires a Playwright BrowserContext.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
Browser browser = chromium.launch();
BrowserContext context = browser.newContext();
context.tracing().start(new Tracing.StartOptions()
  .setScreenshots(true)
  .setSnapshots(true));
Page page = context.newPage();
page.navigate("https://playwright.dev");
context.tracing().stop(new Tracing.StopOptions()
  .setPath(Paths.get("trace.zip")));
```

----------------------------------------

TITLE: Configuring Failure on Flaky Tests in Playwright Test
DESCRIPTION: Configuration to exit with an error if any tests are marked as flaky, especially useful in CI environments.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  failOnFlakyTests: !!process.env.CI,
});
```

----------------------------------------

TITLE: Using Playwright Clock API in Java
DESCRIPTION: Shows how to use the Clock API to control time in tests. It demonstrates installing the clock, pausing time at a specific point, and fast-forwarding time to simulate time progression.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_9

LANGUAGE: Java
CODE:
```
// Initialize clock with some time before the test time and let the page load
// naturally. `Date.now` will progress as the timers fire.
page.clock().install(new Clock.InstallOptions().setTime("2024-02-02T08:00:00"));
page.navigate("http://localhost:3333");
Locator locator = page.getByTestId("current-time");

// Pretend that the user closed the laptop lid and opened it again at 10am.
// Pause the time once reached that point.
page.clock().pauseAt("2024-02-02T10:00:00");

// Assert the page state.
assertThat(locator).hasText("2/2/2024, 10:00:00 AM");

// Close the laptop lid again and open it at 10:30am.
page.clock().fastForward("30:00");
assertThat(locator).hasText("2/2/2024, 10:30:00 AM");
```

----------------------------------------

TITLE: Evaluating Selector on ElementHandle in JavaScript
DESCRIPTION: Demonstrates how to evaluate a selector on an ElementHandle and extract inner text in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_30

LANGUAGE: javascript
CODE:
```
const tweetHandle = await page.$('.tweet');
expect(await tweetHandle.$eval('.like', node => node.innerText)).toBe('100');
expect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe('10');
```

----------------------------------------

TITLE: Disabling JavaScript in C#
DESCRIPTION: Creates a new browser context with JavaScript disabled using the Playwright C# client. This allows testing how web applications behave in environments without JavaScript support.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_79

LANGUAGE: csharp
CODE:
```
var context = await browser.NewContextAsync(new() { JavaScriptEnabled = false });
```

----------------------------------------

TITLE: Controlling JavaScript Execution in Browser Context
DESCRIPTION: Defines the javaScriptEnabled option for browser contexts. This controls whether JavaScript execution is enabled in the context, defaulting to true.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_55

LANGUAGE: js
CODE:
```
- `javaScriptEnabled` <[boolean]>

Whether or not to enable JavaScript in the context. Defaults to `true`. Learn more about [disabling JavaScript](../emulation.md#javascript-enabled).
```

----------------------------------------

TITLE: Waiting for Service Worker Activation in Playwright
DESCRIPTION: Shows how to wait for a Service Worker to be fully activated before proceeding. This implementation-agnostic approach waits for the 'controllerchange' event which indicates the Service Worker has taken control of the page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/service-workers-experimental-network-events-js.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
await page.evaluate(async () => {
  const registration = await window.navigator.serviceWorker.getRegistration();
  if (registration.active?.state === 'activated')
    return;
  await new Promise(res =>
    window.navigator.serviceWorker.addEventListener('controllerchange', res),
  );
});
```

----------------------------------------

TITLE: Installing Playwright from Custom Artifact Repository (JavaScript)
DESCRIPTION: Commands to install Playwright browsers from a custom artifact repository for JavaScript implementations using the PLAYWRIGHT_DOWNLOAD_HOST environment variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_29

LANGUAGE: bash
CODE:
```
PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 npx playwright install
```

LANGUAGE: batch
CODE:
```
set PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1
npx playwright install
```

LANGUAGE: powershell
CODE:
```
$Env:PLAYWRIGHT_DOWNLOAD_HOST="http://192.0.2.1"
npx playwright install
```

----------------------------------------

TITLE: Configuring WebView2 Test Environment in C#
DESCRIPTION: This C# code sets up a test class for WebView2 applications using Playwright. It manages the WebView2 process, connects Playwright to it, and provides an isolated environment for each test run.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_13

LANGUAGE: csharp
CODE:
```
// WebView2Test.cs
using System.Diagnostics;
using Microsoft.Playwright;
using Microsoft.Playwright.MSTest;

namespace PlaywrightTests;

[TestClass]
public class ExampleTest : PlaywrightTest
{
    public IBrowser Browser { get; internal set; } = null!;
    public IBrowserContext Context { get; internal set; } = null!;
    public IPage Page { get; internal set; } = null!;
    private Process? _webView2Process = null;
    private string _userDataDir = null!;
    private string _executablePath = Path.Join(Directory.GetCurrentDirectory(), @"..\..\..\..\webview2-app\bin\Debug\net8.0-windows\webview2.exe");

    [TestInitialize]
    public async Task BrowserTestInitialize()
    {
        var cdpPort = 10000 + WorkerIndex;
        Assert.IsTrue(File.Exists(_executablePath), "Make sure that the executable exists");
        _userDataDir = Path.Join(Path.GetTempPath(), $"playwright-webview2-tests/user-data-dir-{WorkerIndex}");
        // WebView2 does some lazy cleanups on shutdown so we can't clean it up after each test
        if (Directory.Exists(_userDataDir))
        {
            Directory.Delete(_userDataDir, true);
        }
        _webView2Process = Process.Start(new ProcessStartInfo(_executablePath)
        {
            EnvironmentVariables =
```

----------------------------------------

TITLE: Configuring tsconfig.json for Manual TypeScript Compilation
DESCRIPTION: This JSON snippet provides a tsconfig.json configuration for manually compiling TypeScript tests. It sets the target to ESNext, uses CommonJS modules, and specifies an output directory for compiled files.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-typescript-js.md#2025-04-22_snippet_5

LANGUAGE: json
CODE:
```
{
    "compilerOptions": {
        "target": "ESNext",
        "module": "commonjs",
        "moduleResolution": "Node",
        "sourceMap": true,
        "outDir": "../tests-out",
    }
}
```

----------------------------------------

TITLE: Passing Arguments to Frame.wait_for_function in Python (Sync)
DESCRIPTION: This synchronous Python snippet demonstrates how to pass an argument to the predicate function in Frame.wait_for_function. It waits for an element matching a specific selector to appear in the document.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_43

LANGUAGE: python
CODE:
```
selector = ".foo"
frame.wait_for_function("selector => !!document.querySelector(selector)", selector)
```

----------------------------------------

TITLE: Pass Array as Playwright Test Option Value (JavaScript)
DESCRIPTION: Illustrates the correct and incorrect ways to provide an array value for a Playwright option using `test.use()`. The correct method requires wrapping the array value in an extra array `[actualValue, { scope: 'test' }]`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
type Person = { name: string };
const test = base.extend<{ persons: Person[] }>({
  // Declare the option, default value is an empty array.
  persons: [[], { option: true }],
});

// Option value is an array of persons.
const actualPersons = [{ name: 'Alice' }, { name: 'Bob' }];
test.use({
  // CORRECT: Wrap the value into an array and pass the scope.
  persons: [actualPersons, { scope: 'test' }],
});

test.use({
  // WRONG: passing an array value directly will not work.
  persons: actualPersons,
});
```

----------------------------------------

TITLE: Initializing Playwright Project via yarn - Bash
DESCRIPTION: Sets up a new Playwright project using yarn, interactively scaffolding configuration and directory structure for end-to-end tests. Requires Node.js and yarn. Prompts the user for choices on test folder, setup language, CI integration, and browsers. Installs and configures Playwright as a development dependency.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
yarn create playwright
```

----------------------------------------

TITLE: Running WebView2 Test with Playwright in Java
DESCRIPTION: This Java test class demonstrates how to set up and run a test for a WebView2 application using Playwright. It initializes the WebView2 process, connects Playwright to it, and performs a simple navigation and element check.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_10

LANGUAGE: java
CODE:
```
package com.example;

import com.microsoft.playwright.Browser;
import com.microsoft.playwright.BrowserContext;
import com.microsoft.playwright.Locator;
import com.microsoft.playwright.Page;
import com.microsoft.playwright.Playwright;
import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

import java.io.IOException;

public class TestExample {
  // Shared between all tests in this class.
  static WebView2Process webview2Process;
  static Playwright playwright;
  static Browser browser;
  static BrowserContext context;
  static Page page;

  @BeforeAll
  static void launchBrowser() throws IOException {
    playwright = Playwright.create();
    webview2Process = new WebView2Process();
    browser = playwright.chromium().connectOverCDP("http://127.0.0.1:" + webview2Process.cdpPort);
    context = browser.contexts().get(0);
    page = context.pages().get(0);
  }

  @AfterAll
  static void closeBrowser() {
    webview2Process.dispose();
  }

  @Test
  public void shouldClickButton() {
    page.navigate("https://playwright.dev");
    Locator gettingStarted = page.getByText("Get started");
    assertThat(gettingStarted).isVisible();
  }
}
```

----------------------------------------

TITLE: Installing Playwright with Browser-Specific Download Hosts (Python)
DESCRIPTION: Commands to install Playwright browsers using different download hosts for specific browsers. These use browser-specific environment variables that take precedence over the general PLAYWRIGHT_DOWNLOAD_HOST variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_34

LANGUAGE: bash
CODE:
```
pip install playwright
PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3 PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 playwright install
```

LANGUAGE: batch
CODE:
```
set PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3
set PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1
pip install playwright
playwright install
```

LANGUAGE: powershell
CODE:
```
$Env:PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST="http://203.0.113.3"
$Env:PLAYWRIGHT_DOWNLOAD_HOST="http://192.0.2.1"
pip install playwright
playwright install
```

----------------------------------------

TITLE: Creating Boxed Step Decorators in Playwright
DESCRIPTION: Shows how to create a TypeScript decorator for boxed steps in Playwright. This combines the step decorator approach with the boxing feature for improved error reporting.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_40

LANGUAGE: typescript
CODE:
```
function boxedStep(target: Function, context: ClassMethodDecoratorContext) {
  return function replacementMethod(...args: any) {
    const name = this.constructor.name + '.' + (context.name as string);
    return test.step(name, async () => {
      return await target.call(this, ...args);
    }, { box: true });  // Note the "box" option here.
  };
}

class LoginPage {
  constructor(readonly page: Page) {}

  @boxedStep
  async login() {
    // ....
  }
}

test('example', async ({ page }) => {
  const loginPage = new LoginPage(page);
  await loginPage.login();  // <-- Error will be reported on this line.
});
```

----------------------------------------

TITLE: Declaring a Focused Parallel Test Group with Test.describe.parallel.only in JavaScript
DESCRIPTION: Shows how to use test.describe.parallel.only to declare a focused group of tests that could be run in parallel.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_21

LANGUAGE: javascript
CODE:
```
test.describe.parallel.only('group', () => {
  test('runs in parallel 1', async ({ page }) => {});
  test('runs in parallel 2', async ({ page }) => {});
});
```

----------------------------------------

TITLE: Example Test Implementation in C#
DESCRIPTION: Sample end-to-end tests using Playwright with different test frameworks, demonstrating page navigation and assertions
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-csharp.md#2025-04-23_snippet_3

LANGUAGE: csharp
CODE:
```
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Microsoft.Playwright;
using Microsoft.Playwright.NUnit;
using NUnit.Framework;

namespace PlaywrightTests;

[Parallelizable(ParallelScope.Self)]
[TestFixture]
public class ExampleTest : PageTest
{
    [Test]
    public async Task HasTitle()
    {
        await Page.GotoAsync("https://playwright.dev");

        // Expect a title "to contain" a substring.
        await Expect(Page).ToHaveTitleAsync(new Regex("Playwright"));
    }

    [Test]
    public async Task GetStartedLink()
    {
        await Page.GotoAsync("https://playwright.dev");

        // Click the get started link.
        await Page.GetByRole(AriaRole.Link, new() { Name = "Get started" }).ClickAsync();

        // Expects page to have a heading with the name of Installation.
        await Expect(Page.GetByRole(AriaRole.Heading, new() { Name = "Installation" })).ToBeVisibleAsync();
    } 
}
```

----------------------------------------

TITLE: Accepting Standard Dialogs with Playwright (C#)
DESCRIPTION: Registers an asynchronous event handler for the `Page.Dialog` event. The handler automatically accepts any dialog (`alert`, `confirm`, `prompt`) that appears using `dialog.AcceptAsync()`. This listener must be registered *before* the asynchronous action that triggers the dialog (e.g., clicking a button).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
```csharp
Page.Dialog += async (_, dialog) =>
{
    await dialog.AcceptAsync();
};
await Page.GetByRole(AriaRole.Button).ClickAsync();
```
```

----------------------------------------

TITLE: Logging Focused Node Name in Accessibility Snapshot with Python (Sync)
DESCRIPTION: Searches and logs the name of the focused node within an accessibility snapshot in a synchronous Python environment. Utilizes `find_focused_node()`, a helper function for recursive node analysis, provided a snapshot captured through Playwright's deprecated method.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-accessibility.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
def find_focused_node(node):
    if node.get("focused"):
        return node
    for child in (node.get("children") or []):
        found_node = find_focused_node(child)
        if found_node:
            return found_node
    return None

snapshot = page.accessibility.snapshot()
node = find_focused_node(snapshot)
if node:
    print(node["name"])
```

----------------------------------------

TITLE: Handling Dialog Events with Python Async in Playwright
DESCRIPTION: Example of handling a browser dialog event in Playwright using Python's async API. The code defines a dialog handler function, launches Chromium asynchronously, registers the handler, and triggers an alert dialog.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-dialog.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
import asyncio
from playwright.async_api import async_playwright, Playwright

async def handle_dialog(dialog):
    print(dialog.message)
    await dialog.dismiss()

async def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = await chromium.launch()
    page = await browser.new_page()
    page.on("dialog", handle_dialog)
    page.evaluate("alert('1')")
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())
```

----------------------------------------

TITLE: xUnit Test Class with Custom Context Options
DESCRIPTION: Example of an xUnit test class that customizes BrowserContext options including color scheme, viewport size, and base URL.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-csharp.md#2025-04-22_snippet_3

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using Microsoft.Playwright.Xunit;

namespace PlaywrightTests;

public class UnitTest1 : PageTest
{
    [Fact]
    public async Task TestWithCustomContextOptions()
    {
        // The following Page (and BrowserContext) instance has the custom colorScheme, viewport and baseURL set:
        await Page.GotoAsync("/login");
    }
    public override BrowserNewContextOptions ContextOptions()
    {
        return new BrowserNewContextOptions()
        {
            ColorScheme = ColorScheme.Light,
            ViewportSize = new()
            {
                Width = 1920,
                Height = 1080
            },
            BaseURL = "https://github.com",
        };
    }
}
```

----------------------------------------

TITLE: Configuring Service Worker Policy
DESCRIPTION: Controls whether Service Workers can be registered in the browser context. Can be set to allow or block Service Workers.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_85

LANGUAGE: javascript
CODE:
```
- `serviceWorkers` <[ServiceWorkerPolicy]<"allow"|"block">>
```

----------------------------------------

TITLE: Creating DataTransfer and Dispatching DragStart Event in Python (Sync)
DESCRIPTION: This snippet demonstrates how to create a DataTransfer object and use it to dispatch a dragstart event in Python with synchronous syntax. Note that DataTransfer can only be created in Chromium and Firefox.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_36

LANGUAGE: python
CODE:
```
data_transfer = page.evaluate_handle("new DataTransfer()")
page.dispatch_event("#source", "dragstart", { "dataTransfer": data_transfer })
```

----------------------------------------

TITLE: Screenshot Scale Option for Device vs CSS Pixels
DESCRIPTION: Defines the `scale` option that determines whether screenshots use CSS pixels or device pixels, affecting image size on high-DPI devices.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_111

LANGUAGE: typescript
CODE:
```
- `scale` <[ScreenshotScale]<"css"|"device">>
```

----------------------------------------

TITLE: Screenshot Animation Control in Playwright
DESCRIPTION: Defines the `animations` option for screenshots that can disable CSS animations and transitions. When set to 'disabled', it handles finite and infinite animations differently.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_102

LANGUAGE: typescript
CODE:
```
- `animations` <[ScreenshotAnimations]<"disabled"|"allow">>
```

----------------------------------------

TITLE: Limited-Use Locator Handler with Times Option in Java
DESCRIPTION: Java implementation of a locator handler that automatically removes itself after one use by setting the times option to 1. This handler clicks on a close button when it appears.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_92

LANGUAGE: java
CODE:
```
page.addLocatorHandler(page.getByLabel("Close"), locator -> {
  locator.click();
}, new Page.AddLocatorHandlerOptions().setTimes(1));
```

----------------------------------------

TITLE: Evaluating Selector on ElementHandle in Python (Sync)
DESCRIPTION: Demonstrates evaluating a selector on an ElementHandle and extracting inner text in Python using synchronous syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_33

LANGUAGE: python
CODE:
```
tweet_handle = page.query_selector(".tweet")
assert tweet_handle.eval_on_selector(".like", "node => node.innerText") == "100"
assert tweet_handle.eval_on_selector(".retweets", "node => node.innerText") == "10"
```

----------------------------------------

TITLE: Setting Default Timeout for AndroidDevice Methods with Playwright JS
DESCRIPTION: androidDevice.setDefaultTimeout(timeout) sets the default maximum time in milliseconds for all device-level operations that accept a timeout option. Useful for configuring global responsiveness. Input: timeout (float, ms). No output.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_18

LANGUAGE: js
CODE:
```
// Set the default timeout for device actions.
androidDevice.setDefaultTimeout(10000); // 10 seconds
```

----------------------------------------

TITLE: Using toBeNaN Method for NaN Checking
DESCRIPTION: Demonstrates how to use the 'toBeNaN' method to check if a value is NaN (Not a Number).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_11

LANGUAGE: javascript
CODE:
```
const value = NaN;
expect(value).toBeNaN();
```

----------------------------------------

TITLE: Using Playwright React and Vue Selectors in Java
DESCRIPTION: Provides examples of using the experimental React (`_react`) and Vue (`_vue`) selector engines in Playwright Java. These selectors allow targeting elements based on their component name and properties.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_55

LANGUAGE: java
CODE:
```
page.locator("_react=SubmitButton[enabled=true]").click();
page.locator("_vue=submit-button[enabled=true]").click();
```

----------------------------------------

TITLE: Frame Locator Owner Example
DESCRIPTION: Demonstrates how to convert a FrameLocator back to a Locator using the owner() method for iframe element interaction.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-framelocator.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
const frameLocator = page.locator('iframe[name="embedded"]').contentFrame();
// ...
const locator = frameLocator.owner();
await expect(locator).toBeVisible();
```

LANGUAGE: java
CODE:
```
FrameLocator frameLocator = page.locator("iframe[name=\"embedded\"]").contentFrame();
// ...
Locator locator = frameLocator.owner();
assertThat(locator).isVisible();
```

LANGUAGE: python
CODE:
```
frame_locator = page.locator("iframe[name=\"embedded\"]").content_frame
# ...
locator = frame_locator.owner
await expect(locator).to_be_visible()
```

LANGUAGE: csharp
CODE:
```
var frameLocator = Page.Locator("iframe[name=\"embedded\"]").ContentFrame;
// ...
var locator = frameLocator.Owner;
await Expect(locator).ToBeVisibleAsync();
```

----------------------------------------

TITLE: Configuring Permissions in Playwright Test
DESCRIPTION: Sets up permissions for the test environment using the TestOptions.permissions property in the Playwright configuration file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_25

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    permissions: ['notifications'],
  },
});
```

----------------------------------------

TITLE: Pushing Files to AndroidDevice Using Playwright JS
DESCRIPTION: AndroidDevice.push copies files onto the device by accepting a local file path or Buffer and remote path. Optional mode (default 644) sets file permissions. Used for test assets or data injection. Inputs: file data and target path. No return values.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_14

LANGUAGE: js
CODE:
```
// Push a file onto the device.
await androidDevice.push({
  file: Buffer.from('testdata'),
  path: '/data/local/tmp/testfile.txt',
  mode: 600 // Optional
});
```

----------------------------------------

TITLE: Basic Vite Configuration for Playwright
DESCRIPTION: Basic configuration setup for using Vite with Playwright component testing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_25

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/experimental-ct-react';

export default defineConfig({
  use: {
    ctViteConfig: {
      // ...
    },
  },
});
```

----------------------------------------

TITLE: Installing Playwright with Browser-Specific Download Hosts (Java)
DESCRIPTION: Commands to install Playwright browsers using different download hosts for specific browsers. These use browser-specific environment variables that take precedence over the general PLAYWRIGHT_DOWNLOAD_HOST variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_35

LANGUAGE: bash
CODE:
```
PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3 PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install"
```

LANGUAGE: batch
CODE:
```
set PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3
set PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install"
```

LANGUAGE: powershell
CODE:
```
$Env:PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST="http://203.0.113.3"
$Env:PLAYWRIGHT_DOWNLOAD_HOST="http://192.0.2.1"
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install"
```

----------------------------------------

TITLE: Interacting with an Element using ElementHandle (Stale Potential) in Java
DESCRIPTION: Shows finding an element using `page.querySelector` to get an [ElementHandle] and performing actions (hover, click) in Java. This method can lead to errors if the element becomes stale due to page updates.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_16

LANGUAGE: java
CODE:
```
```java
ElementHandle handle = page.querySelector("text=Submit");
handle.hover();
handle.click();
```
```

----------------------------------------

TITLE: Testing Slots in Svelte Components with Playwright
DESCRIPTION: Illustrates testing slots in Svelte components using Playwright's component testing framework. It shows how to mount a component with slot content.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_11

LANGUAGE: javascript
CODE:
```
import { test } from '@playwright/experimental-ct-svelte';

test('slot', async ({ mount }) => {
  const component = await mount(Component, { slots: { default: 'Slot' } });
});
```

----------------------------------------

TITLE: Emulate Pan Gesture with Playwright (C#)
DESCRIPTION: This C# snippet provides a 'Pan' method within a 'TouchEvents' class to emulate a touch pan gesture using Playwright. It calculates the bounding box of the locator and dispatches 'touchstart', 'touchmove', and 'touchend' events with updated 'clientX/clientY' coordinates. The 'Main' method demonstrates launching a browser, navigating to Google Maps, and calling the 'Pan' method.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#_snippet_1

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using System.Collections.Generic;
using System.Threading.Tasks;

public class TouchEvents
{
    public static async Task Main(string[] args)
    {
        using var playwright = await Playwright.CreateAsync();
        var browser = await playwright.Chromium.LaunchAsync();
        var context = await browser.NewContextAsync(playwright.Devices["Pixel 7"]);
        var page = await context.NewPageAsync();

        await page.GotoAsync(
            "https://www.google.com/maps/place/@37.4117722,-122.0713234,15z",
            new PageGotoOptions { WaitUntil = WaitUntilState.Commit }
        );
        await page.GetByRole(AriaRole.Button, new PageGetByRoleOptions { Name = "Keep using web" }).ClickAsync();
        await page.GetByRole(AriaRole.Button, new PageGetByRoleOptions { Name = "Keep using web" })
            .WaitForAsync(new LocatorWaitForOptions { State = WaitForSelectorState.Hidden });

        var met = page.Locator("[data-test-id='met']");
        for (int i = 0; i < 5; i++)
        {
            await Pan(met, 200, 100);
        }
        await page.ScreenshotAsync(new PageScreenshotOptions { Path = "screenshot.png" });
    }

    public static async Task Pan(ILocator locator, int deltaX, int deltaY, int steps = 5)
    {
        var bounds = await locator.BoundingBoxAsync();
        double centerX = bounds.X + bounds.Width / 2;
        double centerY = bounds.Y + bounds.Height / 2;

        var touches = new List<Dictionary<string, object>>
        {
            new Dictionary<string, object>
            {
                { "identifier", 0 },
                { "clientX", centerX },
                { "clientY", centerY }
            }
        };
        await locator.DispatchEventAsync("touchstart", new { touches, changedTouches = touches, targetTouches = touches });

        for (int i = 1; i <= steps; i++)
        {
            touches = new List<Dictionary<string, object>>
            {
                new Dictionary<string, object>
                {
                    { "identifier", 0 },
                    { "clientX", centerX + deltaX * i / steps },
                    { "clientY", centerY + deltaY * i / steps }
                }
            };
            await locator.DispatchEventAsync("touchmove", new { touches, changedTouches = touches, targetTouches = touches });
        }

        await locator.DispatchEventAsync("touchend");
    }
}
```

----------------------------------------

TITLE: Asserting Attribute Absence with hasAttribute in Playwright Java
DESCRIPTION: Explains a behavior change in LocatorAssertions.toHaveAttribute where asserting with an empty value now matches the absence of the attribute, not an empty string value. Requires Playwright Java and assertions library.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_35

LANGUAGE: Java
CODE:
```
assertThat(page.getByRole(AriaRole.BUTTON)).hasAttribute("disabled", "");
```

----------------------------------------

TITLE: Docker seccomp Profile for Chromium Sandbox
DESCRIPTION: JSON configuration for a Docker seccomp profile that allows user namespace cloning permissions, needed to run Chromium with sandbox.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_12

LANGUAGE: json
CODE:
```
{
  "comment": "Allow create user namespaces",
  "names": [
    "clone",
    "setns",
    "unshare"
  ],
  "action": "SCMP_ACT_ALLOW",
  "args": [],
  "includes": {},
  "excludes": {}
}
```

----------------------------------------

TITLE: Starting Selenium Standalone Docker Container
DESCRIPTION: Command to start a Selenium standalone Docker container with Chrome support.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/selenium-grid.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
docker run -d -p 4444:4444 --shm-size="2g" -e SE_NODE_GRID_URL="http://localhost:4444" selenium/standalone-chromium:latest
```

----------------------------------------

TITLE: Installing Playwright Headless Shell - C#
DESCRIPTION: PowerShell command to install Playwright with headless shell dependencies for C#
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_13

LANGUAGE: bash
CODE:
```
pwsh bin/Debug/netX/playwright.ps1 install --with-deps --only-shell
```

----------------------------------------

TITLE: Evaluating JSHandle in C#
DESCRIPTION: Demonstrates evaluating a JSHandle to get the innerText of a tweet's retweets element in C#.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_9

LANGUAGE: csharp
CODE:
```
var tweetHandle = await page.QuerySelectorAsync(".tweet .retweets");
Assert.AreEqual("10 retweets", await tweetHandle.EvaluateAsync("node => node.innerText"));
```

----------------------------------------

TITLE: Skipping Browser Downloads
DESCRIPTION: Commands to skip browser downloads when browsers are managed separately
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_40

LANGUAGE: bash
CODE:
```
PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 mvn test
```

LANGUAGE: batch
CODE:
```
set PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1
mvn test
```

LANGUAGE: powershell
CODE:
```
$Env:PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1
mvn test
```

----------------------------------------

TITLE: Basic Test with Custom Browser Channel
DESCRIPTION: A simple test that uses the specified browser channel from the command line.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
def test_example(page):
    page.goto("https://example.com")
```

----------------------------------------

TITLE: Testing with Puppeteer and Jest
DESCRIPTION: Example of using Puppeteer with Jest for web testing, including setup, navigation, and element assertion.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/puppeteer-js.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import puppeteer from 'puppeteer';

describe('Playwright homepage', () => {
  let browser;
  let page;

  beforeAll(async () => {
    browser = await puppeteer.launch();
    page = await browser.newPage();
  });

  it('contains hero title', async () => {
    await page.goto('https://playwright.dev/');
    await page.waitForSelector('.hero__title');
    const text = await page.$eval('.hero__title', e => e.textContent);
    expect(text).toContain('Playwright enables reliable end-to-end testing');
  });

  afterAll(() => browser.close());
});
```

----------------------------------------

TITLE: Logging Focused Node Name in Accessibility Snapshot with JavaScript
DESCRIPTION: Traverses the accessibility snapshot to find and log the name of the focused node. Uses a recursive helper function `findFocusedNode()` to extract focused nodes from a snapshot structure. The snapshot itself is captured using Playwright's Accessibility class.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-accessibility.md#2025-04-22_snippet_5

LANGUAGE: js
CODE:
```
const snapshot = await page.accessibility.snapshot();
const node = findFocusedNode(snapshot);
console.log(node && node.name);

function findFocusedNode(node) {
  if (node.focused)
    return node;
  for (const child of node.children || []) {
    const foundNode = findFocusedNode(child);
    if (foundNode)
      return foundNode;
  }
  return null;
}
```

----------------------------------------

TITLE: Zipping Recorded HAR File via Context Option in Playwright Java
DESCRIPTION: Illustrates how to automatically compress the recorded HAR file into a zip archive by providing a path ending with `.zip` to the `setRecordHarPath` context option.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_42

LANGUAGE: java
CODE:
```
BrowserContext context = browser.newContext(new Browser.NewContextOptions()
      .setRecordHarPath(Paths.get("example.har.zip")));
```

----------------------------------------

TITLE: TypeScript Type Declaration
DESCRIPTION: Shows explicit type importing and declaration in TypeScript files
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-js.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
let page: import('playwright').Page;
```

----------------------------------------

TITLE: Playwright Merge Config for Cross-OS Reports
DESCRIPTION: Example of a custom merge configuration file for merging reports from different operating systems, specifying the test directory and HTML reporter options.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-sharding-js.md#2025-04-22_snippet_5

LANGUAGE: js
CODE:
```
export default {
  testDir: 'e2e',
  reporter: [['html', { open: 'never' }]],
};
```

----------------------------------------

TITLE: Configuring Fetch Options in JavaScript
DESCRIPTION: Shows how to set various options for the fetch method in JavaScript, including URL parameters, headers, and request body.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_40

LANGUAGE: javascript
CODE:
```
{
  params: { key: "value" },
  headers: { "Content-Type": "application/json" },
  timeout: 30000,
  failOnStatusCode: false,
  form: { username: "john", password: "doe" },
  multipart: new FormData(),
  data: JSON.stringify({ key: "value" }),
  ignoreHTTPSErrors: false,
  maxRedirects: 20
}
```

----------------------------------------

TITLE: Defining Error.name Property in Playwright (Python)
DESCRIPTION: Describes the optional name property for the Playwright Error class. This string property provides the name of the error thrown inside the browser, if available. It enables more granular error categorization when handling exceptions. The value can be None if not set, and this property relies only on information from the error itself.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-error.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
    @property
    def name(self) -> str:
        """Name of the error which got thrown inside the browser. Optional."""
        return getattr(self, '_error_name', None)

```

----------------------------------------

TITLE: Visual Regression Test with Antialiasing
DESCRIPTION: This test compares images while considering antialiasing effects.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/image_tools/fixtures/should-match/looks-same-tests/README.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
test('should return true for different images when antialiasing is disabled', async ({ page }) => {
  const image1 = await page.screenshot();
  await compareImageFile(image1, 'different/2.png', { antialiasing: false });
});
```

----------------------------------------

TITLE: Using ElementHandle.waitForSelector in Java
DESCRIPTION: Shows how to use the waitForSelector method on an ElementHandle in Java to wait for a child element to appear in the DOM.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_45

LANGUAGE: java
CODE:
```
page.setContent("<div><span></span></div>");
ElementHandle div = page.querySelector("div");
// Waiting for the "span" selector relative to the div.
ElementHandle span = div.waitForSelector("span", new ElementHandle.WaitForSelectorOptions()
  .setState(WaitForSelectorState.ATTACHED));
```

----------------------------------------

TITLE: Defining Playwright Error Class in Python
DESCRIPTION: Defines the base Error class specific to Playwright as a subclass of Python's Exception. This class is raised for abnormal terminations, such as when the browser closes unexpectedly during an operation like Page.evaluate. It features properties like message, name, and stack to provide detailed error context. This structure helps developers uniformly handle and inspect errors encountered during browser automation tasks. This class has no external dependencies other than Python 3 and acts as the superclass for all custom Playwright exceptions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-error.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
# class: Error
# * since: v1.11
# * langs: python
# * extends: [Exception]
#
# Error is raised whenever certain operations are terminated abnormally, e.g.
# browser closes while [`method: Page.evaluate`] is running. All Playwright exceptions
# inherit from this class.

class Error(Exception):
    """Base class for Playwright errors raised for abnormal operation terminations."""
    pass

```

----------------------------------------

TITLE: ARIA Disabled Option for Role Selectors
DESCRIPTION: Defines the `disabled` option for role-based selectors to match elements with a specific disabled state. This attribute is inherited through the DOM hierarchy.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_119

LANGUAGE: typescript
CODE:
```
* since: v1.27
- `disabled` <[boolean]>
```

----------------------------------------

TITLE: Configure Project-Specific Locale in Playwright
DESCRIPTION: This snippet demonstrates how to override the global locale setting for a specific project (e.g., 'chromium') by defining the 'locale' option within the project's 'use' property in the Playwright configuration file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#_snippet_9

LANGUAGE: TypeScript
CODE:
```
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'chromium',
      use: {
        ...devices['Desktop Chrome'],
        locale: 'de-DE'
      }
    }
  ]
});
```

----------------------------------------

TITLE: Clearing Browser Permissions in C#
DESCRIPTION: Revokes all previously granted permissions for the browser context using the Playwright C# client. This removes any permission settings that were applied earlier.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_42

LANGUAGE: csharp
CODE:
```
await context.ClearPermissionsAsync();
```

----------------------------------------

TITLE: Connecting to a Browser via CDP Using Playwright C#
DESCRIPTION: Demonstrates connecting to a Chromium browser's debug endpoint with Playwright C# library. Needs 'Microsoft.Playwright' NuGet package and a running browser with the debug endpoint exposed. Input is the endpoint URL; output is access to contexts and pages. Only Chromium-based browsers are supported.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_9

LANGUAGE: csharp
CODE:
```
var browser = await playwright.Chromium.ConnectOverCDPAsync(\"http://localhost:9222\");\nvar defaultContext = browser.Contexts[0];\nvar page = defaultContext.Pages[0];
```

----------------------------------------

TITLE: Handling beforeunload Dialogs with Playwright (Python Sync)
DESCRIPTION: Registers a synchronous handler for the 'dialog' event to manage `beforeunload` dialogs triggered by `page.close(run_before_unload=True)`. The handler function asserts the dialog type and then dismisses it.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_13

LANGUAGE: python
CODE:
```
```python sync
def handle_dialog(dialog):
    assert dialog.type == 'beforeunload'
    dialog.dismiss()

page.on('dialog', lambda: handle_dialog)
page.close(run_before_unload=True)
```
```

----------------------------------------

TITLE: Using CDPSession with Chrome DevTools Protocol in JavaScript
DESCRIPTION: Creates a new CDP session, enables animation tracking, sets up an event listener, gets the current playback rate and modifies it. This demonstrates the core functionality of CDPSession for working with Chrome DevTools Protocol.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-cdpsession.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const client = await page.context().newCDPSession(page);
await client.send('Animation.enable');
client.on('Animation.animationCreated', () => console.log('Animation created!'));
const response = await client.send('Animation.getPlaybackRate');
console.log('playback rate is ' + response.playbackRate);
await client.send('Animation.setPlaybackRate', {
  playbackRate: response.playbackRate / 2
});
```

----------------------------------------

TITLE: Dispatching Click Event on ElementHandle in JavaScript
DESCRIPTION: Demonstrates how to dispatch a click event on an ElementHandle using the dispatchEvent method in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_20

LANGUAGE: javascript
CODE:
```
await elementHandle.dispatchEvent('click');
```

----------------------------------------

TITLE: Connecting to Remote Playwright Server with Java API
DESCRIPTION: Java code to connect to a remote Playwright server using the Playwright API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_19

LANGUAGE: java
CODE:
```
package org.example;

import com.microsoft.playwright.*;
import java.nio.file.Paths;

public class App {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      Browser browser = playwright.chromium().connect("ws://127.0.0.1:3000/");
    }
  }
}
```

----------------------------------------

TITLE: Limited-Use Locator Handler with Times Option in JavaScript
DESCRIPTION: Example of a locator handler that automatically removes itself after one use by setting the times option to 1. This handler clicks on a close button when it appears.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_91

LANGUAGE: javascript
CODE:
```
await page.addLocatorHandler(page.getByLabel('Close'), async locator => {
  await locator.click();
}, { times: 1 });
```

----------------------------------------

TITLE: Implementing Programmatic Click Events in Playwright
DESCRIPTION: Demonstrates how to simulate click events programmatically using the dispatchEvent method across different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
await page.getByRole('button').dispatchEvent('click');
```

LANGUAGE: java
CODE:
```
page.getByRole(AriaRole.BUTTON).dispatchEvent("click");
```

LANGUAGE: python
CODE:
```
await page.get_by_role("button").dispatch_event('click')
```

LANGUAGE: csharp
CODE:
```
await page.GetByRole(AriaRole.Button).DispatchEventAsync("click");
```

----------------------------------------

TITLE: Accessing WebSocket Frame Text Payload – Playwright SDK – Java
DESCRIPTION: The WebSocketFrame.text method retrieves text payloads from WebSocket frames in Playwright for Java, returning the string data or null if the payload is not text. This requires an existing WebSocketFrame instance from an active Playwright session. Inputs: None. Output: string|null. Useful for message inspection and validating communication via text-based WebSocket messages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketframe.md#2025-04-22_snippet_3

LANGUAGE: java
CODE:
```
String textPayload = webSocketFrame.text(); // returns String|null
```

----------------------------------------

TITLE: Unmounting React Components in Playwright Tests
DESCRIPTION: Demonstrates how to unmount a mounted React component in Playwright component tests. This is useful for testing component behavior upon unmounting.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
import { test } from '@playwright/experimental-ct-react';

test('unmount', async ({ mount }) => {
  const component = await mount(<Component/>);
  await component.unmount();
});
```

----------------------------------------

TITLE: Using waitForAngular Polyfill in Playwright Tests
DESCRIPTION: An example showing how to use the waitForAngular polyfill function in a Playwright test scenario.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/protractor-js.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
const page = await context.newPage();
await page.goto('https://example.org');
await waitForAngular(page);
```

----------------------------------------

TITLE: Accessing WebSocket Frame Binary Payload – Playwright SDK – C#
DESCRIPTION: This method, WebSocketFrame.binary, retrieves the binary payload from a WebSocket frame in Playwright (C#). It returns either a Buffer object containing binary data or null if no binary data is present. Users must have an active Playwright session and a valid WebSocketFrame instance. Inputs: None. Output: Buffer|null. The method is intended for inspecting WebSocket traffic whose payload is not plain text.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketframe.md#2025-04-22_snippet_0

LANGUAGE: csharp
CODE:
```
var binaryPayload = webSocketFrame.binary(); // returns Buffer|null
```

----------------------------------------

TITLE: Returning Open Browser Contexts in Playwright Java
DESCRIPTION: This Java snippet shows how to use Playwright to return the count of open browser contexts before and after creating a new one. It highlights Playwright’s context management capabilities. Requires Playwright Java library and a Java development setup.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_6

LANGUAGE: Java
CODE:
```
Browser browser = pw.webkit().launch();
System.out.println(browser.contexts().size()); // prints "0"
BrowserContext context = browser.newContext();
System.out.println(browser.contexts().size()); // prints "1"
```

----------------------------------------

TITLE: Setting Logger for JavaScript Browser Context
DESCRIPTION: Defines the logger option for browser contexts in JavaScript. This allows setting a custom logger sink for Playwright logging.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_71

LANGUAGE: js
CODE:
```
- `logger` <[Logger]>

Logger sink for Playwright logging.
```

----------------------------------------

TITLE: Querying Widget Information on AndroidDevice with Playwright JS
DESCRIPTION: AndroidDevice.info retrieves metadata about a widget specified by selector. The method returns an AndroidElementInfo object with details such as position, bounds, and attributes. Input: selector. Output: structured widget information for assertions or UI introspection.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_6

LANGUAGE: js
CODE:
```
// Gets information about a widget.
const info = await androidDevice.info({ selector: mySelector });
console.log(info);
```

----------------------------------------

TITLE: Install Microsoft Edge with Playwright CLI via Maven
DESCRIPTION: Command line example using Maven (`mvn exec:java`) to execute the Playwright CLI (`com.microsoft.playwright.CLI`) with arguments (`exec.args`) to install the stable version of Microsoft Edge (`install msedge`). Useful for setting up browsers in a Java/Maven project.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_51

LANGUAGE: Bash
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install msedge"
```

----------------------------------------

TITLE: Watching viewport size changes in JavaScript
DESCRIPTION: Example of using waitForFunction to monitor changes in the viewport size. The function resolves when the window's inner width becomes less than 100 pixels, typically after resizing the viewport.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_110

LANGUAGE: javascript
CODE:
```
const { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.

(async () => {
  const browser = await webkit.launch();
  const page = await browser.newPage();
  const watchDog = page.waitForFunction(() => window.innerWidth < 100);
  await page.setViewportSize({ width: 50, height: 50 });
  await watchDog;
  await browser.close();
})();
```

----------------------------------------

TITLE: Fetching and Using an ElementHandle with waitForSelector in Java
DESCRIPTION: Shows how to obtain an [ElementHandle] for a DOM element (`#box`) using `page.waitForSelector` in Java, which waits for visibility. It then demonstrates asserting the element's bounding box dimensions and class attribute. Note: Using [ElementHandle] is discouraged in favor of [Locator].
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_6

LANGUAGE: java
CODE:
```
```java
// Get the element handle
JSHandle jsHandle = page.waitForSelector("#box");
ElementHandle elementHandle = jsHandle.asElement();

// Assert bounding box for the element
BoundingBox boundingBox = elementHandle.boundingBox();
assertEquals(100, boundingBox.width);

// Assert attribute for the element
String classNames = elementHandle.getAttribute("class");
assertTrue(classNames.contains("highlighted"));
```
```

----------------------------------------

TITLE: Using Custom Configuration with Merge-Reports
DESCRIPTION: Command to merge blob reports using a custom configuration file, allowing for more control over the report generation process.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-sharding-js.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
npx playwright merge-reports --config=merge.config.ts ./blob-reports
```

----------------------------------------

TITLE: Handling Background Page Events - Multiple Languages
DESCRIPTION: Shows how to listen for and handle background page creation events in a browser context, specific to Chromium browser's persistent context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
const backgroundPage = await context.waitForEvent('backgroundpage');
```

LANGUAGE: java
CODE:
```
context.onBackgroundPage(backgroundPage -> {
  System.out.println(backgroundPage.url());
});
```

LANGUAGE: python
CODE:
```
background_page = context.wait_for_event("backgroundpage")
```

LANGUAGE: csharp
CODE:
```
context.BackgroundPage += (_, backgroundPage) =>
{
    Console.WriteLine(backgroundPage.Url);
};
```

----------------------------------------

TITLE: Detecting Print Dialogs with Playwright (C#)
DESCRIPTION: Demonstrates how to detect if a print dialog was triggered by `window.print()`. It uses `Page.EvaluateAsync` to inject JavaScript that replaces `window.print` with a function resolving a Promise, then uses `Page.WaitForFunctionAsync` to await the promise after clicking the print trigger.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_19

LANGUAGE: csharp
CODE:
```
```csharp
await Page.GotoAsync("<url>");

await Page.EvaluateAsync("(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()");
await Page.GetByText("Print it!").ClickAsync();

await Page.WaitForFunctionAsync("window.waitForPrintDialog");
```
```

----------------------------------------

TITLE: Increasing Connection Timeout for Playwright Install (Java)
DESCRIPTION: Commands to increase the connection timeout when downloading Playwright browsers on slow networks for Java implementations. The PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT value is in milliseconds.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_26

LANGUAGE: bash
CODE:
```
PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000 mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install"
```

LANGUAGE: batch
CODE:
```
set PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install"
```

LANGUAGE: powershell
CODE:
```
$Env:PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT="120000"
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install"
```

----------------------------------------

TITLE: Obtain Response Security Details
DESCRIPTION: The `Response.securityDetails` method gives SSL and other security information associated with a response. It includes details like the protocol, issuer, and validity period, obtainable asynchronously.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
async function securityDetails() {\n  const security = await response.securityDetails();\n  console.log('Security Details:', security);\n}
```

----------------------------------------

TITLE: Simple Test Step Skip Example
DESCRIPTION: Shows how to unconditionally skip a test step.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-teststepinfo.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('my test', async ({ page }) => {
  await test.step('check expectations', async step => {
    step.skip();
    // step body below will not run
    // ...
  });
});
```

----------------------------------------

TITLE: Waiting for Navigation After Timeout Click in JavaScript
DESCRIPTION: Demonstrates how to wait for navigation that happens after a timeout-based click in JavaScript. This pattern is useful when navigation is triggered indirectly after some delay.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_130

LANGUAGE: javascript
CODE:
```
// Start waiting for navigation before clicking. Note no await.
const navigationPromise = page.waitForNavigation();
await page.getByText('Navigate after timeout').click();
await navigationPromise;
```

----------------------------------------

TITLE: Using SocksProxyAgent with TypeScript and HTTPS
DESCRIPTION: Example showing how to create a SOCKS proxy agent and make HTTPS requests in TypeScript. Demonstrates configuring proxy credentials and making a request to jsonip.org.
SOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
import https from 'https';
import { SocksProxyAgent } from 'socks-proxy-agent';

const info = {
	host: 'br41.nordvpn.com',
	userId: 'your-name@gmail.com',
	password: 'abcdef12345124'
};
const agent = new SocksProxyAgent(info);

https.get('https://jsonip.org', { agent }, (res) => {
	console.log(res.headers);
	res.pipe(process.stdout);
});
```

----------------------------------------

TITLE: Configuring New Chromium Headless Mode - JavaScript
DESCRIPTION: JavaScript configuration for using the new Chromium headless mode in Playwright tests
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_14

LANGUAGE: javascript
CODE:
```
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'], channel: 'chromium' },
    },
  ],
});
```

----------------------------------------

TITLE: Creating New Browser Context in Playwright JavaScript
DESCRIPTION: This JavaScript example uses Playwright to create a new browser context and page, highlighting the isolation between contexts. It includes navigation to a webpage and proper cleanup. Requires Node.js and the Playwright package.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_10

LANGUAGE: JavaScript
CODE:
```
(async () => {
  const browser = await playwright.firefox.launch();  // Or 'chromium' or 'webkit'.
  // Create a new incognito browser context.
  const context = await browser.newContext();
  // Create a new page in a pristine context.
  const page = await context.newPage();
  await page.goto('https://example.com');

  // Gracefully close up everything
  await context.close();
  await browser.close();
})();
```

----------------------------------------

TITLE: Using Playwright nth and visible Selectors/Locators in Java
DESCRIPTION: Illustrates how to use the `nth` and `visible` selector engines in Playwright Java, both directly in selectors and via Locator methods (`first()`, `nth()`). `nth` targets elements by index, while `visible` targets only visible elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_56

LANGUAGE: java
CODE:
```
// select the first button among all buttons
button.click("button >> nth=0");
// or if you are using locators, you can use first(), nth() and last()
page.locator("button").first().click();

// click a visible button
button.click("button >> visible=true");
```

----------------------------------------

TITLE: Filtering Locators by Text in C#
DESCRIPTION: Illustrates filtering an existing Playwright Locator using the `Filter` API. It first finds all elements with the role "button" and then filters this collection to find the specific button that contains the text "Sign up", finally clicking it.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_44

LANGUAGE: csharp
CODE:
```
var buttons = page.Locator("role=button");
// ...
var submitLocator = buttons.Filter(new() { HasText = "Sign up" });
await submitLocator.ClickAsync();
```

----------------------------------------

TITLE: Reusing a Single Page Between Tests in Playwright (JavaScript)
DESCRIPTION: This JavaScript code demonstrates how to reuse a single Page object between multiple tests in Playwright. It creates a page in beforeAll, uses it in tests, and closes it in afterAll.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-retries-js.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
// @ts-check

const { test } = require('@playwright/test');

test.describe.configure({ mode: 'serial' });

/** @type {import('@playwright/test').Page} */
let page;

test.beforeAll(async ({ browser }) => {
  page = await browser.newPage();
});

test.afterAll(async () => {
  await page.close();
});

test('runs first', async () => {
  await page.goto('https://playwright.dev/');
});

test('runs second', async () => {
  await page.getByText('Get Started').click();
});
```

----------------------------------------

TITLE: Waiting for Network Responses with Regular Expressions in Python (Sync)
DESCRIPTION: Shows how to wait for a network response using a regular expression pattern or a predicate function in synchronous Python. The code waits for a response that ends with .jpeg or contains a specific token.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
# Use a regular expression
with page.expect_response(re.compile(r"\.jpeg$")) as response_info:
    page.get_by_text("Update").click()
response = response_info.value

# Use a predicate taking a response object
with page.expect_response(lambda response: token in response.url) as response_info:
    page.get_by_text("Update").click()
response = response_info.value
```

----------------------------------------

TITLE: Creating New Browser Context in Playwright C#
DESCRIPTION: This C# snippet uses Playwright to create and manage a new browser context for isolated sessions, with demonstration of context cleanup and navigation. It requires .NET and the Playwright C# library to execute asynchronous operations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_14

LANGUAGE: C#
CODE:
```
using var playwright = await Playwright.CreateAsync();
var browser = await playwright.Firefox.LaunchAsync();
// Create a new incognito browser context.
var context = await browser.NewContextAsync();
// Create a new page in a pristine context.
var page = await context.NewPageAsync(); ;
await page.GotoAsync("https://www.bing.com");

// Gracefully close up everything
await context.CloseAsync();
await browser.CloseAsync();
```

----------------------------------------

TITLE: Handling Newsletter Dialog with Locator Handler in C#
DESCRIPTION: C# implementation of a locator handler that automatically closes a newsletter signup dialog when it appears. The handler detects text matching 'Sign up to the newsletter' and clicks the 'No thanks' button.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_80

LANGUAGE: csharp
CODE:
```
// Setup the handler.
await page.AddLocatorHandlerAsync(page.GetByText("Sign up to the newsletter"), async () => {
  await page.GetByRole(AriaRole.Button, new() { Name = "No thanks" }).ClickAsync();
});

// Write the test as usual.
await page.GotoAsync("https://example.com");
await page.GetByRole("button", new() { Name = "Start here" }).ClickAsync();
```

----------------------------------------

TITLE: Implementing waitForAngular Polyfill Using Protractor
DESCRIPTION: A function that polyfills Protractor's waitForAngular functionality in Playwright by utilizing Protractor's clientSideScripts. This is useful for edge cases where auto-waiting is insufficient.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/protractor-js.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
async function waitForAngular(page) {
  const clientSideScripts = require('protractor/built/clientsidescripts.js');

  async function executeScriptAsync(page, script, ...scriptArgs) {
    await page.evaluate(`
      new Promise((resolve, reject) => {
        const callback = (errMessage) => {
          if (errMessage)
            reject(new Error(errMessage));
          else
            resolve();
        };
        (function() {${script}}).apply(null, [...${JSON.stringify(scriptArgs)}, callback]);
      })
    `);
  }

  await executeScriptAsync(page, clientSideScripts.waitForAngular, '');
}
```

----------------------------------------

TITLE: Retrying Code Block with Custom Intervals (JS)
DESCRIPTION: Shows how to specify custom retry intervals and timeout for `expect(...).toPass()` using the options object. This provides control over the retry behavior.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_43

LANGUAGE: js
CODE:
```
await expect(async () => {
  const response = await page.request.get('https://api.example.com');
  expect(response.status()).toBe(200);
}).toPass({
  // Probe, wait 1s, probe, wait 2s, probe, wait 10s, probe, wait 10s, probe
  // ... Defaults to [100, 250, 500, 1000].
  intervals: [1_000, 2_000, 10_000],
  timeout: 60_000
});
```

----------------------------------------

TITLE: Testing Playwright Context Option Inheritance (JS)
DESCRIPTION: A Playwright test example demonstrating that context options configured in `playwright.config.ts` are correctly inherited when creating a new context via the `browser` fixture. It verifies the inherited `userAgent` and `viewport`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
test('should inherit use options on context when using built-in browser fixture', async ({
  browser,
}) => {
  const context = await browser.newContext();
  const page = await context.newPage();
  expect(await page.evaluate(() => navigator.userAgent)).toBe('some custom ua');
  expect(await page.evaluate(() => window.innerWidth)).toBe(100);
  await context.close();
});
```

----------------------------------------

TITLE: Running Tests with Chromium Channel - Python
DESCRIPTION: Python pytest command for running tests with Chromium channel
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_16

LANGUAGE: bash
CODE:
```
pytest test_login.py --browser-channel chromium
```

----------------------------------------

TITLE: Evaluating JSHandle in JavaScript
DESCRIPTION: Shows how to evaluate a JSHandle to get the innerText of a tweet's retweets element in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
const tweetHandle = await page.$('.tweet .retweets');
expect(await tweetHandle.evaluate(node => node.innerText)).toBe('10 retweets');
```

----------------------------------------

TITLE: Creating New Browser Context in Async Playwright Python
DESCRIPTION: This async Python snippet demonstrates using Playwright to create a new browser context and page with isolation from others. It showcases context management using Playwright’s async API, requiring the Playwright package and Python asyncio.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_12

LANGUAGE: Python
CODE:
```
browser = await playwright.firefox.launch() # or "chromium" or "webkit".
# create a new incognito browser context.
context = await browser.new_context()
# create a new page in a pristine context.
page = await context.new_page()
await page.goto("https://example.com")

# gracefully close up everything
await context.close()
await browser.close()
```

----------------------------------------

TITLE: Using afterEach Hook in Playwright Tests
DESCRIPTION: Shows how to use the afterEach hook that runs after each test. This example demonstrates accessing test information and logging test status and current page URL.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.afterEach(async ({ page }) => {
  console.log(`Finished ${test.info().title} with status ${test.info().status}`);

  if (test.info().status !== test.info().expectedStatus)
    console.log(`Did not run as expected, ended up at ${page.url()}`);
});

test('my test', async ({ page }) => {
  // ...
});
```

----------------------------------------

TITLE: Obtaining a JSHandle using evaluateHandle in Java
DESCRIPTION: Demonstrates how to get a reference ([JSHandle]) to the global `window` object within the browser context using the `page.evaluateHandle` method in Java. This handle can subsequently be used for further JavaScript evaluations within the page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
```java
JSHandle jsHandle = page.evaluateHandle("window");
//  Use jsHandle for evaluations.
```
```

----------------------------------------

TITLE: Returning Open Browser Contexts in Sync Playwright Python
DESCRIPTION: This Python snippet uses Playwright’s sync API to print the number of open browser contexts in a browser instance. It requires the Playwright sync API and a Python environment. Demonstrates checking context count before and after creating a new context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_8

LANGUAGE: Python
CODE:
```
browser = pw.webkit.launch()
print(len(browser.contexts)) # prints `0`
context = browser.new_context()
print(len(browser.contexts)) # prints `1`
```

----------------------------------------

TITLE: Example Playwright Test in Python
DESCRIPTION: A sample Playwright test script demonstrating how to navigate to a webpage, check its title, click a link, and verify page content.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-python.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
import re
from playwright.sync_api import Page, expect

def test_has_title(page: Page):
    page.goto("https://playwright.dev/")

    # Expect a title "to contain" a substring.
    expect(page).to_have_title(re.compile("Playwright"))

def test_get_started_link(page: Page):
    page.goto("https://playwright.dev/")

    # Click the get started link.
    page.get_by_role("link", name="Get started").click()

    # Expects page to have a heading with the name of Installation.
    expect(page.get_by_role("heading", name="Installation")).to_be_visible()
```

----------------------------------------

TITLE: Interacting with Page Elements using Playwright Locators
DESCRIPTION: Demonstrates how to create a locator for a page element and interact with it. The example shows both a verbose and a concise way to click a 'Get started' link.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-js.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
// Create a locator.
const getStarted = page.getByRole('link', { name: 'Get started' });

// Click it.
await getStarted.click();

// Concise version:
await page.getByRole('link', { name: 'Get started' }).click();
```

----------------------------------------

TITLE: Tracing a Square with Mouse Movements in Python (Sync)
DESCRIPTION: This snippet shows how to use the 'page.mouse' object in Python with synchronous syntax to trace a 100x100 square by moving the mouse and performing click actions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-mouse.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
# using 'page.mouse' to trace a 100x100 square.
page.mouse.move(0, 0)
page.mouse.down()
page.mouse.move(0, 100)
page.mouse.move(100, 100)
page.mouse.move(100, 0)
page.mouse.move(0, 0)
page.mouse.up()
```

----------------------------------------

TITLE: Declaring Serial Test Group in JavaScript
DESCRIPTION: Shows how to declare a group of tests that should always be run serially using test.describe.serial(). This is used when tests need to be executed in a specific order, but is generally discouraged in favor of isolated tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_23

LANGUAGE: javascript
CODE:
```
test.describe.serial('group', () => {
  test('runs first', async ({ page }) => {});
  test('runs second', async ({ page }) => {});
});
```

----------------------------------------

TITLE: Uploading Directory with Playwright Python
DESCRIPTION: Shows how to upload an entire directory using `Locator.set_input_files` in Playwright Python. This method now supports elements with the `webkitdirectory` attribute, allowing a single call to select and upload all files within the specified local directory.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_10

LANGUAGE: python
CODE:
```
page.get_by_label("Upload directory").set_input_files('mydir')
```

----------------------------------------

TITLE: Enabling Touch Events in Browser Context
DESCRIPTION: Defines the hasTouch option for browser contexts. This specifies whether the viewport supports touch events, defaulting to false.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_54

LANGUAGE: js
CODE:
```
- `hasTouch` <[boolean]>

Specifies if viewport supports touch events. Defaults to false. Learn more about [mobile emulation](../emulation.md#devices).
```

----------------------------------------

TITLE: Overriding Request Headers with Playwright Route.continue_ - Python (Sync)
DESCRIPTION: Shows synchronous usage of Playwright's route.continue_ for overriding headers in Python. Requires the synchronous Playwright API. The handler is registered via page.route, modifies headers, and calls route.continue_. Limitations: does not allow overriding 'Cookie', and must be run in an environment where synchronous handlers are supported.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
def handle(route, request):
    # override headers
    headers = {
        **request.headers,
        "foo": "foo-value", # set "foo" header
        "bar": None # remove "bar" header
    }
    route.continue_(headers=headers)

page.route("**/*", handle)
```

----------------------------------------

TITLE: Getting Properties from JSHandle in Python (Async)
DESCRIPTION: Demonstrates getting properties from a JSHandle, specifically window and document objects, in Python with async syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_12

LANGUAGE: python
CODE:
```
handle = await page.evaluate_handle("({ window, document })")
properties = await handle.get_properties()
window_handle = properties.get("window")
document_handle = properties.get("document")
await handle.dispose()
```

----------------------------------------

TITLE: Evaluating Multiple Selectors on ElementHandle in C#
DESCRIPTION: Shows how to evaluate multiple selectors on an ElementHandle and extract inner text from multiple elements in C#.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_39

LANGUAGE: csharp
CODE:
```
var feedHandle = await page.QuerySelectorAsync(".feed");
Assert.AreEqual(new [] { "Hello!", "Hi!" }, await feedHandle.EvalOnSelectorAllAsync<string[]>(".tweet", "nodes => nodes.map(n => n.innerText)"));
```

----------------------------------------

TITLE: Configuring Service Workers in Playwright
DESCRIPTION: Example of disabling service workers in Playwright tests using the serviceWorkers option in the configuration file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_44

LANGUAGE: typescript
CODE:
```
export default {
  use: {
    serviceWorkers: 'block',
  }
};
```

----------------------------------------

TITLE: Changing Timeout from beforeEach Hook (TypeScript)
DESCRIPTION: This code demonstrates how to extend the timeout for all tests running a specific beforeEach hook. It adds 30 seconds to the existing timeout for each test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-timeouts-js.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { test, expect } from '@playwright/test';

test.beforeEach(async ({ page }, testInfo) => {
  // Extend timeout for all tests running this hook by 30 seconds.
  testInfo.setTimeout(testInfo.timeout + 30_000);
});
```

----------------------------------------

TITLE: Converting Playwright Python FrameLocator to Locator
DESCRIPTION: Shows how to use the `FrameLocator.owner` property to convert a FrameLocator back into a Locator pointing to the iframe element itself, enabling assertions or interactions with the iframe element. Requires a Playwright page and a frame locator.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_18

LANGUAGE: python
CODE:
```
frame_locator = page.frame_locator("iframe[name='embedded']")
# ...
locator = frame_locator.owner
expect(locator).to_be_visible()
```

----------------------------------------

TITLE: Interacting with an Element using Locator (Recommended) in JavaScript
DESCRIPTION: Demonstrates the recommended approach using Playwright Locators (`page.getByText`) in JavaScript to interact with elements. Locators automatically re-fetch the element before each action (e.g., hover, click), avoiding staleness issues.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_20

LANGUAGE: javascript
CODE:
```
```js
const locator = page.getByText('Submit');
// ...
await locator.hover();
await locator.click();
```
```

----------------------------------------

TITLE: Creating DataTransfer and Dispatching DragStart Event in Python (Async)
DESCRIPTION: This snippet illustrates how to create a DataTransfer object and use it to dispatch a dragstart event in Python with async syntax. Note that DataTransfer can only be created in Chromium and Firefox.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_35

LANGUAGE: python
CODE:
```
data_transfer = await page.evaluate_handle("new DataTransfer()")
await page.dispatch_event("#source", "dragstart", { "dataTransfer": data_transfer })
```

----------------------------------------

TITLE: Checking Playwright Version via pnpm - Bash
DESCRIPTION: Invokes Playwright via pnpm to show the package's current version. Suitable for verifying installation status or after a dependency update. Outputs version information to the terminal.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_18

LANGUAGE: bash
CODE:
```
pnpm exec playwright --version
```

----------------------------------------

TITLE: Setting Timeouts for Individual Actions (TypeScript)
DESCRIPTION: This snippet demonstrates how to set timeouts for individual actions within a test. It sets a 30-second timeout for navigation and a 10-second timeout for a click action.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-timeouts-js.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
import { test, expect } from '@playwright/test';

test('basic test', async ({ page }) => {
  await page.goto('https://playwright.dev', { timeout: 30000 });
  await page.getByText('Get Started').click({ timeout: 10000 });
});
```

----------------------------------------

TITLE: Using beforeAll and afterAll Hooks Together in Playwright Tests
DESCRIPTION: Shows how to use beforeAll and afterAll hooks together to set up and teardown resources for all tests in a file or group. This is useful for one-time setup operations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test.beforeAll(async () => {
  console.log('Before tests');
});

test.afterAll(async () => {
  console.log('After tests');
});

test('my test', async ({ page }) => {
  // ...
});
```

----------------------------------------

TITLE: Event Callback for Wait For Event (Java)
DESCRIPTION: Specifies the callback that triggers the event when waiting for an event in Java. The callback performs the action that should generate the event.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_92

LANGUAGE: java
CODE:
```
- `callback` <[Runnable]>
```

----------------------------------------

TITLE: Open Specific HTML Report Folder (CLI)
DESCRIPTION: Command to open an HTML report located in a specified custom folder (e.g., 'my-report') in the default web browser.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_17

LANGUAGE: bash
CODE:
```
npx playwright show-report my-report
```

----------------------------------------

TITLE: Incorrect Variable Usage Across Environments
DESCRIPTION: Demonstrates an incorrect approach to accessing test environment variables in browser context. This example shows what NOT to do, as variables from the test script are not directly accessible in the browser.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
const data = 'some data';
const result = await page.evaluate(() => {
  // WRONG: there is no "data" in the web page.
  window.myApp.use(data);
});
```

LANGUAGE: java
CODE:
```
String data = "some data";
Object result = page.evaluate("() => {\n" +
  "  // WRONG: there is no 'data' in the web page.\n" +
  "  window.myApp.use(data);\n" +
  "}");
```

LANGUAGE: python
CODE:
```
data = "some data"
result = await page.evaluate("""() => {
  // WRONG: there is no "data" in the web page.
  window.myApp.use(data)
}""")
```

LANGUAGE: csharp
CODE:
```
var data = "some data";
var result = await page.EvaluateAsync(@"() => {
  // WRONG: there is no 'data' in the web page.
  window.myApp.use(data);
}");
```

----------------------------------------

TITLE: Dispatching Click Event on ElementHandle in Java
DESCRIPTION: Shows how to dispatch a click event on an ElementHandle using the dispatchEvent method in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_21

LANGUAGE: java
CODE:
```
elementHandle.dispatchEvent("click");
```

----------------------------------------

TITLE: Determining Response Origin from Service Worker
DESCRIPTION: The `Response.fromServiceWorker` method indicates whether a response was served by a Service Worker's Fetch Handler, which may have modified the response differently compared to direct network responses.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
const isFromServiceWorker = response.fromServiceWorker();\nconsole.log('Is from Service Worker:', isFromServiceWorker);
```

----------------------------------------

TITLE: ARIA Level Option for Role Selectors
DESCRIPTION: Defines the `level` option for role-based selectors to match elements with a specific level number, typically used with headings and list items.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_122

LANGUAGE: typescript
CODE:
```
* since: v1.27
- `level` <[int]>
```

----------------------------------------

TITLE: Increasing Connection Timeout for Playwright Install (Python)
DESCRIPTION: Commands to increase the connection timeout when downloading Playwright browsers on slow networks for Python implementations. The PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT value is in milliseconds.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_25

LANGUAGE: bash
CODE:
```
pip install playwright
PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000 playwright install
```

LANGUAGE: batch
CODE:
```
set PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000
pip install playwright
playwright install
```

LANGUAGE: powershell
CODE:
```
$Env:PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT="120000"
pip install playwright
playwright install
```

----------------------------------------

TITLE: Event Name for Wait For Event (JavaScript, Python, Java)
DESCRIPTION: Specifies the event name to wait for when using waitForEvent method. Uses the same event names as those passed to event listeners.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_90

LANGUAGE: javascript
CODE:
```
- `event` <[string]>
```

----------------------------------------

TITLE: Mask Color Customization for Screenshots
DESCRIPTION: Defines the `maskColor` option for customizing the color of masked element overlays in screenshots. Defaults to pink (#FF00FF).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_108

LANGUAGE: typescript
CODE:
```
* since: v1.35
- `maskColor` <[string]>
```

----------------------------------------

TITLE: Passing a JSHandle as an Argument to page.evaluate in JavaScript
DESCRIPTION: Illustrates creating a JavaScript array in the page using `page.evaluateHandle`, obtaining a [JSHandle] to it. Subsequently demonstrates passing this handle into `page.evaluate` to interact with the array (get length, add elements) and finally disposing of the handle using `dispose()`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
```js
// Create new array in page.
const myArrayHandle = await page.evaluateHandle(() => {
  window.myArray = [1];
  return myArray;
});

// Get the length of the array.
const length = await page.evaluate(a => a.length, myArrayHandle);

// Add one more element to the array using the handle
await page.evaluate(arg => arg.myArray.push(arg.newElement), {
  myArray: myArrayHandle,
  newElement: 2
});

// Release the object when it's no longer needed.
await myArrayHandle.dispose();
```
```

----------------------------------------

TITLE: Connecting Playwright to WebView2 using Java
DESCRIPTION: This snippet shows how to connect Playwright to a running WebView2 application using Java. It establishes a connection over CDP and retrieves the browser context and page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_2

LANGUAGE: java
CODE:
```
Browser browser = playwright.chromium().connectOverCDP("http://localhost:9222");
BrowserContext context = browser.contexts().get(0);
Page page = context.pages().get(0);
```

----------------------------------------

TITLE: Getting Unique Worker Index in JavaScript
DESCRIPTION: Retrieves the unique index of the worker process running the test. This index changes when a worker is restarted and is also available as an environment variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-workerinfo.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
workerInfo.workerIndex
```

LANGUAGE: javascript
CODE:
```
process.env.TEST_WORKER_INDEX
```

----------------------------------------

TITLE: Uninstalling Browser Binaries with Playwright CLI
DESCRIPTION: Demonstrates CLI commands for uninstalling Playwright browser binaries, either for the current installation or all installations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_23

LANGUAGE: bash
CODE:
```
$ npx playwright uninstall # remove browsers installed by this installation
$ npx playwright uninstall --all # remove all ever-install Playwright browsers
```

----------------------------------------

TITLE: Loading Chrome Extension with Playwright in Headless Mode - JavaScript
DESCRIPTION: This snippet demonstrates loading and running a Chrome extension in headless mode using the Playwright library in JavaScript. It launches a persistent browser context with specified extension-related arguments. It waits for the background page of the extension and closes the browser context after testing. Dependencies include the Playwright library.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/chrome-extensions-js-python.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
const { chromium } = require('playwright');

(async () => {
  const pathToExtension = require('path').join(__dirname, 'my-extension');
  const userDataDir = '/tmp/test-user-data-dir';
  const browserContext = await chromium.launchPersistentContext(userDataDir, {
    channel: 'chromium',
    args: [
      `--disable-extensions-except=${pathToExtension}`,
      `--load-extension=${pathToExtension}`
    ]
  });
  let [backgroundPage] = browserContext.backgroundPages();
  if (!backgroundPage)
    backgroundPage = await browserContext.waitForEvent('backgroundpage');

  // Test the background page as you would any other page.
  await browserContext.close();
})();
```

----------------------------------------

TITLE: Setting Contrast Emulation for C# and Python Browser Context
DESCRIPTION: Defines the contrast option for browser contexts in C# and Python. This emulates the prefers-contrast media feature with values 'no-preference', 'more', or 'null' to reset to system defaults.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_70

LANGUAGE: csharp
CODE:
```
- `contrast` <[Contrast]<"no-preference"|"more"|"null">>

Emulates `'prefers-contrast'` media feature, supported values are `'no-preference'`, `'more'`. See [`method: Page.emulateMedia`] for more details. Passing `'null'` resets emulation to system defaults. Defaults to `'no-preference'`.
```

----------------------------------------

TITLE: Defining Web Crawler Access Rules in robots.txt
DESCRIPTION: This configuration allows all web crawlers unrestricted access to the website. It specifies that any user agent (*) has no disallowed paths, effectively permitting complete crawling of the site.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-react17/public/robots.txt#2025-04-22_snippet_0

LANGUAGE: robotstxt
CODE:
```
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:
```

----------------------------------------

TITLE: Run Playwright CLI Help via Maven
DESCRIPTION: This command demonstrates how to execute the Playwright command line interface (CLI) using the Maven exec:java plugin to display the help documentation. It is relevant for Java projects using Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_59

LANGUAGE: bash
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="--help"
```

LANGUAGE: java
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="--help"
```

----------------------------------------

TITLE: Using beforeMount Hook in Next.js Component Tests
DESCRIPTION: Example of using the beforeMount hook in Playwright component tests for Next.js. This demonstrates mocking the router for component testing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_40

LANGUAGE: javascript
CODE:
```
import { test } from '@playwright/experimental-ct-react';
import { Component } from './mycomponent';

test('should work', async ({ mount }) => {
  const component = await mount(<Component></Component>, {
    // Pass mock value from test into `beforeMount`.
    hooksConfig: {
      router: {
        query: { page: 1, per_page: 10 },
        asPath: '/posts'
      }
    }
  });
});
```

LANGUAGE: javascript
CODE:
```
import router from 'next/router';
import { beforeMount } from '@playwright/experimental-ct-react/hooks';

beforeMount(async ({ hooksConfig }) => {
  // Before mount, redefine useRouter to return mock value from test.
  router.useRouter = () => hooksConfig.router;
});
```

----------------------------------------

TITLE: Adding Custom Message to Playwright Expect (JS)
DESCRIPTION: Demonstrates how to add a custom string message as the second argument to the `expect` function. This message is included in test reports for both passing and failing assertions, providing additional context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#_snippet_35

LANGUAGE: js
CODE:
```
await expect(page.getByText('Name'), 'should be logged in').toBeVisible();
```

----------------------------------------

TITLE: Hover and Click on Locator Object in JavaScript
DESCRIPTION: Illustrates the use of a locator to hover and click a text element in JavaScript. Each action performs a fresh DOM query to ensure it targets the correct element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_10

LANGUAGE: JavaScript
CODE:
```
const locator = page.getByText('Submit');
// ...
await locator.hover();
await locator.click();
```

----------------------------------------

TITLE: Configuring Android Device Event Waiting Parameters
DESCRIPTION: Defines parameters for waiting on Android Device events, including predicate function and timeout options. Default timeout is 30 seconds but can be modified using setDefaultTimeout method.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_23

LANGUAGE: typescript
CODE:
```
{
  predicate: function,
  timeout: number
}
```

----------------------------------------

TITLE: Enabling Touch Support in Playwright Tests
DESCRIPTION: Example showing how to enable touch support for tests to simulate touch devices, which affects the presence of the 'ontouchstart' property and touch-related events.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    hasTouch: true
  },
});
```

----------------------------------------

TITLE: Defining SettingsPage POM Class in Playwright
DESCRIPTION: Defines a simple Page Object Model class for a settings page, showing a placeholder method for switching dark mode. This class serves as an example for structuring page interactions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#_snippet_6

LANGUAGE: TypeScript
CODE:
```
import type { Page } from '@playwright/test';

export class SettingsPage {
  constructor(public readonly page: Page) {
  }

  async switchToDarkMode() {
    // ...
  }
}
```

----------------------------------------

TITLE: Using APIResponseAssertions to verify API response in Python Async
DESCRIPTION: Example of making a GET request to a website and asserting that the response is OK (status code 200-299) using Python with async/await in Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponseassertions.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
from playwright.async_api import Page, expect

async def test_navigates_to_login_page(page: Page) -> None:
    # ..
    response = await page.request.get('https://playwright.dev')
    await expect(response).to_be_ok()
```

----------------------------------------

TITLE: Sending POST Request with JSON Data in JavaScript
DESCRIPTION: Example of sending a POST request with JSON data using Playwright's API request context in JavaScript. The data is passed directly in the request options and is automatically serialized.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
await request.post('https://example.com/api/createBook', {
  data: {
    title: 'Book Title',
    author: 'John Doe',
  }
});
```

----------------------------------------

TITLE: JavaScript Empty Snapshot Generation
DESCRIPTION: Code showing how to generate a new snapshot using an empty template
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_24

LANGUAGE: javascript
CODE:
```
await expect(locator).toMatchAriaSnapshot('');
```

----------------------------------------

TITLE: Configure Playwright Test with Single Line Reporter (Detailed)
DESCRIPTION: Shows how to configure the 'line' reporter programmatically in the playwright.config.ts file, emphasizing its benefit for large test suites by providing concise progress updates.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_8

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: 'line',
});
```

----------------------------------------

TITLE: Configuring Video Recording Size (C#, Java, Python)
DESCRIPTION: Sets the dimensions for recorded videos in non-JavaScript language bindings. Defaults to viewport size scaled to fit 800x800.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_82

LANGUAGE: python
CODE:
```
- `recordVideoSize` <[Object]>
  - `width` <[int]> Video frame width.
  - `height` <[int]> Video frame height.
```

----------------------------------------

TITLE: Retrieving Video Path in Playwright - Java
DESCRIPTION: This snippet demonstrates the use of Playwright to obtain the path of a video recording in Java. Users must ensure that the browser context is created with the recordVideo option for the path retrieval to function. It outputs the video path which is guaranteed to be complete and written upon closing the browser context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-video.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
System.out.println(page.video().path());
```

----------------------------------------

TITLE: Running Playwright Tests in Headed Mode (PowerShell)
DESCRIPTION: Commands to run Playwright tests in headed mode, opening a browser window for each test, using PowerShell.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_3

LANGUAGE: csharp
CODE:
```
$env:HEADED="1"
dotnet test
```

----------------------------------------

TITLE: Unmounting Vue Components in Playwright Tests
DESCRIPTION: Illustrates how to unmount a mounted Vue component in Playwright component tests. It shows two approaches: using the options API and the JSX-style syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_17

LANGUAGE: javascript
CODE:
```
import { test } from '@playwright/experimental-ct-vue';

test('unmount', async ({ mount }) => {
  const component = await mount(Component);
  await component.unmount();
});
```

LANGUAGE: javascript
CODE:
```
// Or alternatively, using the `jsx` style
import { test } from '@playwright/experimental-ct-vue';

test('unmount', async ({ mount }) => {
  const component = await mount(<Component/>);
  await component.unmount();
});
```

----------------------------------------

TITLE: Retrieving Device Model Name from AndroidDevice with Playwright JS
DESCRIPTION: AndroidDevice.model returns the device model as a string synchronously. Requires no parameters, outputs a string identifier for the hardware—useful for device-specific logic branches.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_10

LANGUAGE: js
CODE:
```
// Gets the device model.
const model = androidDevice.model();
console.log(model);
```

----------------------------------------

TITLE: Taking Page Screenshot with Playwright
DESCRIPTION: Shows how to use the new toHaveScreenshot assertion for taking screenshots of a page. This method waits for screenshot stabilization and enhances test reliability.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_50

LANGUAGE: javascript
CODE:
```
await page.goto('https://playwright.dev');
await expect(page).toHaveScreenshot();
```

----------------------------------------

TITLE: Setting Up Routes on Browser Context in JavaScript
DESCRIPTION: Shows how to set up route handling on the entire browser context using BrowserContext.route() in JavaScript. This applies to popup windows and opened links.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
await browserContext.route('**/api/login', route => route.fulfill({
  status: 200,
  body: 'accept',
}));
await page.goto('https://example.com');
```

----------------------------------------

TITLE: Mocking API Endpoints in JavaScript
DESCRIPTION: Shows how to intercept and mock API endpoints by handling network requests in JavaScript. The example fulfills a request with custom status code and body data.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
await page.route('**/api/fetch_data', route => route.fulfill({
  status: 200,
  body: testData,
}));
await page.goto('https://example.com');
```

----------------------------------------

TITLE: Setting Expect Timeout for Individual Assertions (TypeScript)
DESCRIPTION: This code demonstrates how to set a timeout for a single expect assertion. It sets a 10-second timeout for a specific toHaveText assertion.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-timeouts-js.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
import { test, expect } from '@playwright/test';

test('example', async ({ page }) => {
  await expect(locator).toHaveText('hello', { timeout: 10_000 });
});
```

----------------------------------------

TITLE: Declaring an Anonymous Test Group with Test.describe in JavaScript
DESCRIPTION: Shows how to declare a test group without a title, which is useful for giving a group of tests a common option with test.use.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
test.describe(() => {
  test.use({ colorScheme: 'dark' });

  test('one', async ({ page }) => {
    // ...
  });

  test('two', async ({ page }) => {
    // ...
  });
});
```

----------------------------------------

TITLE: Handling New Page Events - Multiple Languages
DESCRIPTION: Demonstrates how to wait for and handle new page creation events in the browser context, including popup windows.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
const newPagePromise = context.waitForEvent('page');
await page.getByText('open new page').click();
const newPage = await newPagePromise;
console.log(await newPage.evaluate('location.href'));
```

LANGUAGE: java
CODE:
```
Page newPage = context.waitForPage(() -> {
  page.getByText("open new page").click();
});
System.out.println(newPage.evaluate("location.href"));
```

LANGUAGE: python
CODE:
```
with context.expect_page() as page_info:
    page.get_by_text("open new page").click(),
page = page_info.value
print(page.evaluate("location.href"))
```

LANGUAGE: csharp
CODE:
```
var popup = await context.RunAndWaitForPageAsync(async =>
{
    await page.GetByText("open new page").ClickAsync();
});
Console.WriteLine(await popup.EvaluateAsync<string>("location.href"));
```

----------------------------------------

TITLE: Specifying Source Position for Playwright Drag Actions
DESCRIPTION: Defines the `sourcePosition` object parameter for Playwright drag-and-drop actions. It specifies the coordinates (`x`, `y`) relative to the top-left corner of the source element's padding box where the drag should initiate. If not provided, a visible point on the element is used.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_22

LANGUAGE: markdown
CODE:
```
- `sourcePosition` <[Object]>
  - `x` <[float]>
  - `y` <[float]>
```

----------------------------------------

TITLE: Setting Checkbox State in Playwright
DESCRIPTION: Defines the `checked` boolean parameter (aliased as `checkedState` in C#) for Playwright actions interacting with checkboxes. It determines whether the checkbox should be checked (`true`) or unchecked (`false`).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_24

LANGUAGE: markdown
CODE:
```
- `checked` <[boolean]>
```

----------------------------------------

TITLE: Text Caret Handling in Screenshots
DESCRIPTION: Defines the `caret` option for controlling whether the text cursor is hidden in screenshots. Defaults to hiding the caret.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_112

LANGUAGE: typescript
CODE:
```
- `caret` <[ScreenshotCaret]<"hide"|"initial">>
```

----------------------------------------

TITLE: Configuring Event Listener Removal Behavior (JavaScript)
DESCRIPTION: Specifies how to handle currently running event listeners when removing all listeners. Controls whether to wait for completion and error handling.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_86

LANGUAGE: javascript
CODE:
```
- `behavior` <[RemoveAllListenersBehavior]<"wait"|"ignoreErrors"|"default">>
```

----------------------------------------

TITLE: Evaluating Handles on Frame in Python (Sync)
DESCRIPTION: Shows the synchronous usage of evaluate_handle method in Python to evaluate an expression and return a handle for the window object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_26

LANGUAGE: python
CODE:
```
a_window_handle = frame.evaluate_handle("Promise.resolve(window)")
a_window_handle # handle for the window object.
```

----------------------------------------

TITLE: Dispatching Click Event in Python (Sync)
DESCRIPTION: This snippet demonstrates how to dispatch a click event on a button element using the Page.dispatch_event method in Python with synchronous syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_31

LANGUAGE: python
CODE:
```
page.dispatch_event("button#submit", "click")
```

----------------------------------------

TITLE: Enabling Strict Selectors Mode
DESCRIPTION: Controls whether to enable strict selectors mode for browser context. In strict mode, operations that target a single element will throw if multiple elements match.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_84

LANGUAGE: javascript
CODE:
```
- `strictSelectors` <[boolean]>
```

----------------------------------------

TITLE: Configuring Client Certificates with Playwright Java
DESCRIPTION: Demonstrates how to set client-side certificates when creating a new browser context using `browser.newContext`. It shows how to specify the certificate and key file paths for a specific origin.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_8

LANGUAGE: Java
CODE:
```
BrowserContext context = browser.newContext(new Browser.NewContextOptions()
    .setClientCertificates(asList(new ClientCertificate("https://example.com")
          .setCertPath(Paths.get("client-certificates/cert.pem"))
          .setKeyPath(Paths.get("client-certificates/key.pem")))));
```

----------------------------------------

TITLE: PyInstaller Script Example
DESCRIPTION: Sample script for creating standalone executables with PyInstaller
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-python.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
from playwright.sync_api import sync_playwright

with sync_playwright() as p:
    browser = p.chromium.launch()
    page = browser.new_page()
    page.goto("https://playwright.dev/")
    page.screenshot(path="example.png")
    browser.close()
```

----------------------------------------

TITLE: Installing Playwright Canary Release via NPM in Bash
DESCRIPTION: This Bash snippet installs the latest canary (unreleased) version of the @playwright/test package using npm with the '@next' tag. To use, developers should have Node.js and npm installed, and should run this in the root directory of their Node.js project. The '@next' tag ensures that the prerelease version is installed as a dev dependency, unlocking access to daily features before they reach stable release. The command takes no parameters and produces no direct output; instead, it updates the project's package.json and installs the prerelease package.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/canary-releases-js.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install -D @playwright/test@next
```

----------------------------------------

TITLE: Configuring TLS Client Certificates with Playwright Python
DESCRIPTION: Demonstrates how to configure TLS client certificates for a new browser context in Playwright using Python. It shows how to pass certificate details, including origin, certificate path, and key path, as a list of dictionaries to the `client_certificates` option of `browser.new_context`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#_snippet_8

LANGUAGE: python
CODE:
```
context = browser.new_context(
    client_certificates=[
        {
            "origin": "https://example.com",
            "certPath": "client-certificates/cert.pem",
            "keyPath": "client-certificates/key.pem",
        }
    ],
)
```

----------------------------------------

TITLE: Getting Thrown Value in JavaScript
DESCRIPTION: Retrieves the value that was thrown. This is set when anything except an Error (or its subclass) has been thrown during test execution.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfoerror.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
testInfoError.value
```

----------------------------------------

TITLE: Running Async Playwright Test - Python
DESCRIPTION: The main asynchronous execution block that sets up the Playwright environment. It launches a Chromium browser, creates a new context configured for a 'Pixel 7' device, opens a new page, calls the `test_pinch_in_gesture_to_zoom_out_the_map` function, and finally closes the browser. This is the entry point for running the async test.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#_snippet_15

LANGUAGE: Python
CODE:
```
async def main():
    async with async_playwright() as p:
        browser = await p.chromium.launch()
        context = await browser.new_context(**p.devices['Pixel 7'])
        page = await context.new_page()
        await test_pinch_in_gesture_to_zoom_out_the_map(page)
        await browser.close()

import asyncio
asyncio.run(main())
```

----------------------------------------

TITLE: Project Configuration with Conditional Path Templates
DESCRIPTION: Demonstrates configuration using conditional path templates based on project names, showing how paths are resolved differently for named and unnamed projects.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_136

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  snapshotPathTemplate: '__screenshots__{/projectName}/{testFilePath}/{arg}{ext}',
  testMatch: 'example.spec.ts',
  projects: [
    { use: { browserName: 'firefox' } },
    { name: 'chromium', use: { browserName: 'chromium' } },
  ],
});
```

----------------------------------------

TITLE: Deploying a Svelte App to Vercel
DESCRIPTION: Commands to navigate to the public directory and deploy the Svelte application to Vercel with a custom project name.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
cd public
vercel deploy --name my-project
```

----------------------------------------

TITLE: Exposing Page URL Using C# in Playwright
DESCRIPTION: C# implementation of page URL exposure using browser context binding. Shows context creation, binding exposure, and interaction with the bound function.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_14

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;

using var playwright = await Playwright.CreateAsync();
var browser = await playwright.Webkit.LaunchAsync(new() { Headless = false });
var context = await browser.NewContextAsync();

await context.ExposeBindingAsync("pageURL", source => source.Page.Url);
var page = await context.NewPageAsync();
await page.SetContentAsync("<script>\n" +
"  async function onClick() {\n" +
"    document.querySelector('div').textContent = await window.pageURL();\n" +
"  }\n" +
"</script>\n" +
"<button onclick=\"onClick()\">Click me</button>\n" +
"<div></div>");
await page.GetByRole(AriaRole.Button).ClickAsync();
```

----------------------------------------

TITLE: Generating Server Certificate with OpenSSL
DESCRIPTION: Creates a self-signed server certificate and private key for localhost testing. Includes subject alternative names for localhost and local.playwright domains.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/client-certificates/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
openssl req \
	-x509 \
	-newkey rsa:4096 \
	-keyout server/server_key.pem \
	-out server/server_cert.pem \
	-nodes \
	-days 365 \
	-subj "/CN=localhost/O=Client\ Certificate\ Demo" \
	-addext "subjectAltName=DNS:localhost,DNS:local.playwright"
```

----------------------------------------

TITLE: Android WebView Selector Configuration
DESCRIPTION: Defines the selector object structure for identifying Android WebViews. Includes optional package identifier and socket name parameters.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_24

LANGUAGE: typescript
CODE:
```
{
  pkg?: string,
  socketName?: string
}
```

----------------------------------------

TITLE: Hover and Click Using ElementHandle in JavaScript
DESCRIPTION: Demonstrates how to use ElementHandle to hover and click a specific text element in JavaScript. This involves querying the element and invoking hover and click methods on it.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_5

LANGUAGE: JavaScript
CODE:
```
const handle = await page.$('text=Submit');
// ...
await handle.hover();
await handle.click();
```

----------------------------------------

TITLE: Visual Regression Test for Different Images
DESCRIPTION: This test compares two different images to ensure they are recognized as different.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/image_tools/fixtures/should-match/looks-same-tests/README.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
test('should return false for different images', async ({ page }) => {
  const image1 = await page.screenshot();
  await expect(compareImageFile(image1, 'different/1.png')).rejects.toThrow();
});
```

----------------------------------------

TITLE: Enabling CDP in WebView2 using C#
DESCRIPTION: This snippet shows how to enable CDP connections in a WebView2 control by setting the AdditionalBrowserArguments when creating the CoreWebView2Environment.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_0

LANGUAGE: csharp
CODE:
```
await this.webView.EnsureCoreWebView2Async(await CoreWebView2Environment.CreateAsync(null, null, new CoreWebView2EnvironmentOptions()
{
  AdditionalBrowserArguments = "--remote-debugging-port=9222",
})).ConfigureAwait(false);
```

----------------------------------------

TITLE: HTML List Structure Example
DESCRIPTION: Example HTML structure showing an unordered list with three features for demonstrating partial matching
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_18

LANGUAGE: html
CODE:
```
<ul>
  <li>Feature A</li>
  <li>Feature B</li>
  <li>Feature C</li>
</ul>
```

----------------------------------------

TITLE: Simple HTML Structure for Snapshot Matching Example
DESCRIPTION: This HTML snippet provides a basic example of an H1 heading element within the document structure. This simple DOM is used in subsequent code examples to demonstrate basic ARIA snapshot matching.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_6

LANGUAGE: html
CODE:
```
```html
<h1>title</h1>
```
```

----------------------------------------

TITLE: Dispatching Click Event in JavaScript
DESCRIPTION: This snippet demonstrates how to dispatch a click event on a button element using the Page.dispatchEvent method in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_28

LANGUAGE: javascript
CODE:
```
await page.dispatchEvent('button#submit', 'click');
```

----------------------------------------

TITLE: Running Playwright Test with Snapshot Update Options in v1.50
DESCRIPTION: Command line example showing how to update only changed snapshots and specify a 3-way merge source update method.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
npx playwright test --update-snapshots=changed --update-source-method=3way
```

----------------------------------------

TITLE: Running Async Main Function (Python)
DESCRIPTION: This snippet imports the asyncio library and serves as the entry point for the script, running the main asynchronous function to execute the Playwright automation logic.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#_snippet_7

LANGUAGE: Python
CODE:
```
import asyncio
asyncio.run(main())
```

----------------------------------------

TITLE: Configuring New Chromium Headless Mode - Java
DESCRIPTION: Java code example for launching Chromium browser with new headless mode
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_15

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setChannel("chromium"));
      Page page = browser.newPage();
      // ...
    }
  }
}
```

----------------------------------------

TITLE: Using toBeCloseTo Method for Floating Point Comparisons
DESCRIPTION: Demonstrates the use of 'toBeCloseTo' method for comparing floating point numbers with a specified precision. This is useful for avoiding issues with floating point arithmetic.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
expect(0.1 + 0.2).not.toBe(0.3);
expect(0.1 + 0.2).toBeCloseTo(0.3, 5);
```

----------------------------------------

TITLE: ARIA Selected Option for Role Selectors
DESCRIPTION: Defines the `selected` option for role-based selectors to match elements with a specific selected state.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_126

LANGUAGE: typescript
CODE:
```
* since: v1.27
- `selected` <boolean>
```

----------------------------------------

TITLE: Recording Zipped HAR File with Playwright .NET
DESCRIPTION: Demonstrates how to automatically zip the resulting HAR file when recording network traffic programmatically in Playwright for .NET. By providing a .zip file path to the RecordHarPath option in Browser.NewContextAsync, Playwright will compress the HAR file upon context closure.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_41

LANGUAGE: csharp
CODE:
```
var context = await Browser.NewContextAsync(new() { RecordHarPath = "example.har.zip" });
```

----------------------------------------

TITLE: Protractor Example for AngularJS Todo List
DESCRIPTION: A typical Protractor test example for an AngularJS todo list application, demonstrating element selection, interaction, and expectations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/protractor-js.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
describe('angularjs homepage todo list', function() {
  it('should add a todo', function() {
    browser.get('https://angularjs.org');

    element(by.model('todoList.todoText')).sendKeys('first test');
    element(by.css('[value="add"]')).click();

    const todoList = element.all(by.repeater('todo in todoList.todos'));
    expect(todoList.count()).toEqual(3);
    expect(todoList.get(2).getText()).toEqual('first test');

    // You wrote your first test, cross it off the list
    todoList.get(2).element(by.css('input')).click();
    const completedAmount = element.all(by.css('.done-true'));
    expect(completedAmount.count()).toEqual(2);
  });
});
```

----------------------------------------

TITLE: Registering Custom Selector Engine with Playwright in Python (Asynchronous)
DESCRIPTION: This Python async example demonstrates how to set up a custom selector engine for tag-based queries by registering JavaScript code as a string with Playwright's async API. It requires the 'playwright.async_api' dependency, provides selector and locator usage, and counts elements matching the tag. Inputs are the JS engine code and the selector name; outputs are button element objects or their counts. Must be run within an asynchronous context using asyncio and async_playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-selectors.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
import asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nasync def run(playwright: Playwright):\n    tag_selector = """\n      {\n          // Returns the first element matching given selector in the root's subtree.\n          query(root, selector) {\n              return root.querySelector(selector);\n          },\n          // Returns all elements matching given selector in the root's subtree.\n          queryAll(root, selector) {\n              return Array.from(root.querySelectorAll(selector));\n          }\n      }"""\n\n    # Register the engine. Selectors will be prefixed with \"tag=\".\n    await playwright.selectors.register(\"tag\", tag_selector)\n    browser = await playwright.chromium.launch()\n    page = await browser.new_page()\n    await page.set_content('<div><button>Click me</button></div>')\n\n    # Use the selector prefixed with its name.\n    button = await page.query_selector('tag=button')\n    # Combine it with built-in locators.\n    await page.locator('tag=div').get_by_text('Click me').click()\n    # Can use it in any methods supporting selectors.\n    button_count = await page.locator('tag=button').count()\n    print(button_count)\n    await browser.close()\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\n\nasyncio.run(main())
```

----------------------------------------

TITLE: ARIA Expanded Option for Role Selectors
DESCRIPTION: Defines the `expanded` option for role-based selectors to match elements with a specific expanded state.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_120

LANGUAGE: typescript
CODE:
```
* since: v1.27
- `expanded` <[boolean]>
```

----------------------------------------

TITLE: Installing Playwright Pytest via Anaconda
DESCRIPTION: Commands to install the Playwright Pytest plugin using Anaconda package manager, including adding necessary channels.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-python.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
conda config --add channels conda-forge
conda config --add channels microsoft
conda install pytest-playwright
```

----------------------------------------

TITLE: Handling WebView2 Initialization in C#
DESCRIPTION: This snippet shows how to handle the CoreWebView2InitializationCompleted event in C# to ensure that the WebView2 control is ready for use.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_6

LANGUAGE: csharp
CODE:
```
this.webView.CoreWebView2InitializationCompleted += (_, e) =>
{
    if (e.IsSuccess)
    {
        Console.WriteLine("WebView2 initialized");
    }
};
```

----------------------------------------

TITLE: Installing Playwright via conda
DESCRIPTION: Commands to install Playwright using conda package manager by adding required channels
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-python.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
conda config --add channels conda-forge
conda config --add channels microsoft
conda install playwright
playwright install
```

----------------------------------------

TITLE: Initialize Playwright Browser Context (Java)
DESCRIPTION: This Java snippet shows the basic setup for initializing Playwright, launching a Chromium browser, and creating a new browser context with specific viewport size and device scale factor options. It's an incomplete example of setting up a Playwright test environment.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#_snippet_2

LANGUAGE: java
CODE:
```
import com.microsoft.playwright.*;
import com.microsoft.playwright.options.*;

public class TouchEvents {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      Browser browser = playwright.chromium().launch();
      BrowserContext context = browser.newContext(new Browser.NewContextOptions()
        .setViewportSize(412, 839)
        .setDeviceScaleFactor(2.625)
```

----------------------------------------

TITLE: Implementing waitForAngular Polyfill for Angular 2+
DESCRIPTION: A simpler implementation of waitForAngular specifically for Angular 2+ applications, without requiring the Protractor dependency.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/protractor-js.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
async function waitForAngular(page) {
  await page.evaluate(async () => {
    // @ts-expect-error
    if (window.getAllAngularTestabilities) {
      // @ts-expect-error
      await Promise.all(window.getAllAngularTestabilities().map(whenStable));
      // @ts-expect-error
      async function whenStable(testability) {
        return new Promise(res => testability.whenStable(res));
      }
    }
  });
}
```

----------------------------------------

TITLE: Connecting Playwright to WebView2 using JavaScript
DESCRIPTION: This snippet demonstrates how to connect Playwright to a running WebView2 application using JavaScript. It establishes a connection over CDP and retrieves the browser context and page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
const browser = await playwright.chromium.connectOverCDP('http://localhost:9222');
const context = browser.contexts()[0];
const page = context.pages()[0];
```

----------------------------------------

TITLE: Configure Mobile Context and Navigate Google Maps (Java)
DESCRIPTION: Initializes Playwright in Java, setting up a browser context to simulate a mobile device with specific viewport, scale, user agent, and touch capabilities. It navigates to Google Maps, interacts with an initial dialog, locates an element, and calls the local pinch function multiple times.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#_snippet_11

LANGUAGE: Java
CODE:
```
import com.microsoft.playwright.*;
import com.microsoft.playwright.options.*;

public class TouchEvents {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      Browser browser = playwright.chromium().launch();
      BrowserContext context = browser.newContext(new Browser.NewContextOptions()
        .setViewportSize(412, 839)
        .setDeviceScaleFactor(2.625)
        .setUserAgent("Mozilla/5.0 (Linux; Android 12; Pixel 7 Build/SP1A.210812.015) AppleWebKit/537.36" +
          " (KHTML, like Gecko) Chrome/94.0.4606.71 Mobile Safari/537.36")
        .setHasTouch(true)
        .setIsMobile(true)
      );
      Page page = context.newPage();

      page.navigate("https://www.google.com/maps/place/@37.4117722,-122.0713234,15z", new Page.NavigateOptions().setWaitUntil(WaitUntilState.COMMIT));
      page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Keep using web")).click();
      page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Keep using web")).waitFor(
        new Locator.WaitForOptions().setState(WaitForSelectorState.HIDDEN));

      Locator met = page.locator("[data-test-id='met']");
      for (int i = 0; i < 5; i++) {
        pinch(met, 40, "in");
      }
      page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get("screenshot.png")));
    }
  }

  public static void pinch(Locator locator, int deltaX, String direction) {
    pinch(locator, deltaX, direction, 5);
  }

  public static void pinch(Locator locator, int deltaX, String direction, int steps) {
    BoundingBox bounds = locator.boundingBox();
    double centerX = bounds.x + bounds.width / 2;
    double centerY = bounds.y + bounds.height / 2;
    double stepDeltaX = deltaX / (steps + 1.0);

    List<Map<String, Object>> touches = List.of(
      Map.of("identifier", 0, "clientX", centerX - (direction.equals("in") ? deltaX : stepDeltaX), "clientY", centerY),
      Map.of("identifier", 1, "clientX", centerX + (direction.equals("in") ? deltaX : stepDeltaX), "clientY", centerY)
    );
    locator.dispatchEvent("touchstart", Map.of("touches", touches, "changedTouches", touches, "targetTouches", touches));

    for (int i = 1; i <= steps; i++) {
      double offset = direction.equals("in") ? (deltaX - i * stepDeltaX) : (stepDeltaX * (i + 1));
      touches = List.of(
        Map.of("identifier", 0, "clientX", centerX - offset, "clientY", centerY),
        Map.of("identifier", 1, "clientX", centerX + offset, "clientY", centerY)
      );
      locator.dispatchEvent("touchmove", Map.of("touches", touches, "changedTouches", touches, "targetTouches", touches));
    }

    locator.dispatchEvent("touchend", Map.of("touches", List.of(), "changedTouches", List.of(), "targetTouches", List.of()));
  }
}
```

----------------------------------------

TITLE: Evaluating JSHandle in Python (Async)
DESCRIPTION: Illustrates evaluating a JSHandle to get the innerText of a tweet's retweets element in Python with async syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
tweet_handle = await page.query_selector(".tweet .retweets")
assert await tweet_handle.evaluate("node => node.innerText") == "10 retweets"
```

----------------------------------------

TITLE: Managing HAR Content Policy (C#, Java, Python)
DESCRIPTION: Controls how resource content is managed in HAR recordings for non-JavaScript language bindings. Supports omitting, embedding, or attaching content separately.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_77

LANGUAGE: python
CODE:
```
- `recordHarContent` ?<[HarContentPolicy]<"omit"|"embed"|"attach">>
```

----------------------------------------

TITLE: Multi-language Aria Snapshot Examples
DESCRIPTION: Examples of programmatically creating aria snapshots in different programming languages
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_26

LANGUAGE: javascript
CODE:
```
const snapshot = await page.locator('body').ariaSnapshot();
console.log(snapshot);
```

LANGUAGE: python
CODE:
```
snapshot = page.locator("body").aria_snapshot()
print(snapshot)
```

LANGUAGE: java
CODE:
```
String snapshot = page.locator("body").ariaSnapshot();
System.out.println(snapshot);
```

LANGUAGE: csharp
CODE:
```
var snapshot = await page.Locator("body").AriaSnapshotAsync();
Console.WriteLine(snapshot);
```

----------------------------------------

TITLE: Example Test File Structure
DESCRIPTION: Shows the directory structure for test files using snapshot assertions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_134

LANGUAGE: plaintext
CODE:
```
playwright.config.ts
tests/
└── page/
    └── page-click.spec.ts
```

----------------------------------------

TITLE: WebSocketRoute.onClose Handler - JavaScript/Python
DESCRIPTION: Function handler for WebSocket closure events. Receives optional close code and reason. Disables default forwarding of closure when set.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_20

LANGUAGE: javascript
CODE:
```
function(code, reason): Promise<any>|any
```

----------------------------------------

TITLE: Accessing WebSocket Frame Binary Payload – Playwright SDK – Java
DESCRIPTION: The WebSocketFrame.binary method retrieves binary payloads from WebSocket frames in Playwright for Java. It produces a Buffer object with the binary content or null when the frame contains no binary data. To use, instantiate or receive a WebSocketFrame via the Playwright API. Output: Buffer|null. This supports binary message analysis or data synchronization use cases.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketframe.md#2025-04-22_snippet_2

LANGUAGE: java
CODE:
```
Buffer binaryPayload = webSocketFrame.binary(); // returns Buffer|null
```

----------------------------------------

TITLE: Using TestInfo.outputPath to Create Temporary Files in Playwright Tests
DESCRIPTION: Example that demonstrates how to use the outputPath method from TestInfo to create a temporary file during test execution. This creates a unique file in the test's output directory to avoid conflicts when running tests in parallel.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testproject.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
import { test, expect } from '@playwright/test';
import fs from 'fs';

test('example test', async ({}, testInfo) => {
  const file = testInfo.outputPath('temporary-file.txt');
  await fs.promises.writeFile(file, 'Put some data to the file', 'utf8');
});
```

----------------------------------------

TITLE: Setting Browser Environment Variables in Playwright (JS/Python)
DESCRIPTION: Defines the `env` browser launch option for Playwright in JavaScript and Python. It accepts an object mapping string keys to string, number, or boolean values, specifying environment variables for the launched browser process. Defaults to `process.env`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_36

LANGUAGE: markdown
CODE:
```
- `env` <[Object]<[string], [string]|[float]|[boolean]>>
```

----------------------------------------

TITLE: Dispatching Click Event on ElementHandle in Python (Sync)
DESCRIPTION: Demonstrates dispatching a click event on an ElementHandle using the dispatch_event method in Python with synchronous syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_23

LANGUAGE: python
CODE:
```
element_handle.dispatch_event("click")
```

----------------------------------------

TITLE: Configuring Video Size in Playwright Test (JavaScript)
DESCRIPTION: This snippet shows how to set both the video recording mode and the video size in the Playwright Test configuration file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';
export default defineConfig({
  use: {
    video: {
      mode: 'on-first-retry',
      size: { width: 640, height: 480 }
    }
  },
});
```

----------------------------------------

TITLE: Installing Browsers with playwright-core CLI
DESCRIPTION: Demonstrates how to install browsers when using the playwright-core package with the renamed binary.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_25

LANGUAGE: bash
CODE:
```
$ npx playwright-core install # the new way to install browsers when using playwright-core
```

----------------------------------------

TITLE: Generating PDF with Screen Media in JavaScript
DESCRIPTION: Demonstrates how to generate a PDF with 'screen' media type using Playwright in JavaScript.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_69

LANGUAGE: javascript
CODE:
```
// Generates a PDF with 'screen' media type.
await page.emulateMedia({ media: 'screen' });
await page.pdf({ path: 'page.pdf' });
```

----------------------------------------

TITLE: WebSocketRoute.onClose Handler - Java
DESCRIPTION: Java implementation of WebSocket closure handler. Takes nullable Integer code and String reason parameters.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_21

LANGUAGE: java
CODE:
```
function(Integer code, String reason)
```

----------------------------------------

TITLE: Using waitForTimeout for debugging in JavaScript
DESCRIPTION: This snippet demonstrates how to use the waitForTimeout method for debugging purposes in JavaScript. It waits for 1 second.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_150

LANGUAGE: javascript
CODE:
```
// wait for 1 second
await page.waitForTimeout(1000);
```

----------------------------------------

TITLE: Configuring HTTPS Error Handling in Playwright
DESCRIPTION: Example of customizing browser context arguments to ignore HTTPS errors across all tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_11

LANGUAGE: python
CODE:
```
import pytest

@pytest.fixture(scope="session")
def browser_context_args(browser_context_args):
    return {
        **browser_context_args,
        "ignore_https_errors": True
    }
```

----------------------------------------

TITLE: Creating Test Module with Helper Function in Playwright (Feature A)
DESCRIPTION: This TypeScript file defines tests for 'feature-a' using a wrapper function pattern rather than direct test definitions. Tests are encapsulated in an exported function that will be called by a test list file.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
import { test, expect } from '@playwright/test';

export default function createTests() {
  test('feature-a example test', async ({ page }) => {
    // ... test goes here
  });
}

```

----------------------------------------

TITLE: Using CDPSession with Chrome DevTools Protocol in Python (Async)
DESCRIPTION: Demonstrates using the CDPSession in async Python code to enable animation tracking, set up an event listener, get the playback rate and modify it. Shows how to work with Chrome DevTools Protocol methods and events asynchronously.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-cdpsession.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
client = await page.context.new_cdp_session(page)
await client.send("Animation.enable")
client.on("Animation.animationCreated", lambda: print("animation created!"))
response = await client.send("Animation.getPlaybackRate")
print("playback rate is " + str(response["playbackRate"]))
await client.send("Animation.setPlaybackRate", {
    "playbackRate": response["playbackRate"] / 2
})
```

----------------------------------------

TITLE: Running Vue project in development mode
DESCRIPTION: Starts the development server with hot-reload functionality for real-time updates during development.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-vue-cli/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npm run serve
```

----------------------------------------

TITLE: Disconnecting from Android Device with Playwright JS
DESCRIPTION: The AndroidDevice.close async method severs the connection to the associated device. No parameters are required. The method must be awaited; it returns after disconnect ceremony completes. It is used for cleanup; no output is returned.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
// Disconnects from the device.
await androidDevice.close();
```

----------------------------------------

TITLE: Navigate and Interact on Google Maps (C#)
DESCRIPTION: Uses Playwright for C# to navigate to a Google Maps URL, handle an initial dialog by clicking and waiting for a button to hide, locate a specific element, and then call a Pinch function (implementation not shown) multiple times before taking a screenshot.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#_snippet_10

LANGUAGE: C#
CODE:
```
        await page.GotoAsync("https://www.google.com/maps/place/@37.4117722,-122.0713234,15z", new PageGotoOptions { WaitUntil = WaitUntilState.Commit });
        await page.GetByRole(AriaRole.Button, new PageGetByRoleOptions { Name = "Keep using web" }).ClickAsync();
        await page.GetByRole(AriaRole.Button, new PageGetByRoleOptions { Name = "Keep using web" }).WaitForAsync(new LocatorWaitForOptions { State = WaitForSelectorState.Hidden });

        var met = page.Locator("[data-test-id='met']");
        for (int i = 0; i < 5; i++)
        {
            await Pinch(met, 40, 5, "in");
        }
        await page.ScreenshotAsync(new PageScreenshotOptions { Path = "screenshot.png" });
    }
}
```

----------------------------------------

TITLE: Event Predicate Configuration
DESCRIPTION: Function configuration for event handling that determines when waiting should resolve based on event data.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_98

LANGUAGE: javascript
CODE:
```
predicate: (eventData) => boolean
```

----------------------------------------

TITLE: Unmounting Svelte Components in Playwright Tests
DESCRIPTION: Shows how to unmount a mounted Svelte component in Playwright component tests. This can be used to test cleanup behavior or unmounting effects.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_16

LANGUAGE: javascript
CODE:
```
import { test } from '@playwright/experimental-ct-svelte';

test('unmount', async ({ mount }) => {
  const component = await mount(Component);
  await component.unmount();
});
```

----------------------------------------

TITLE: Converting Locator to FrameLocator with contentFrame in Java
DESCRIPTION: Shows how to convert a Locator object to a FrameLocator in Java using the contentFrame method to interact with elements inside an iframe.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_45

LANGUAGE: java
CODE:
```
Locator locator = page.locator("iframe[name=\"embedded\"]");
// ...
FrameLocator frameLocator = locator.contentFrame();
frameLocator.getByRole(AriaRole.BUTTON).click();
```

----------------------------------------

TITLE: Browser Launch Configuration
DESCRIPTION: Configuration options for launching a browser instance, including command line arguments, headless mode, and timeout settings.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_99

LANGUAGE: javascript
CODE:
```
{
  args: string[],
  channel: string,
  chromiumSandbox: boolean,
  downloadsPath: string,
  executablePath: string,
  headless: boolean,
  timeout: number
}
```

----------------------------------------

TITLE: Filtering Tests with Grep Pattern in Playwright Test
DESCRIPTION: Configuration to run only tests with titles matching a specific pattern, useful for running subsets of tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  grep: /smoke/,
});
```

----------------------------------------

TITLE: Dispatching Click Event in Python (Async)
DESCRIPTION: This snippet illustrates how to dispatch a click event on a button element using the Page.dispatch_event method in Python with async syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_30

LANGUAGE: python
CODE:
```
await page.dispatch_event("button#submit", "click")
```

----------------------------------------

TITLE: Registering Custom Tag Name Selector in Playwright for JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to register a custom selector engine in Playwright that selects elements based on their tag name. Dependencies include Playwright library and a test base. Inputs include a root element and a selector string, with outputs being queried DOM elements.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/extensibility.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { test as base } from '@playwright/test';

export { expect } from '@playwright/test';

// Must be a function that evaluates to a selector engine instance.
const createTagNameEngine = () => ({
  // Returns the first element matching given selector in the root's subtree.
  query(root, selector) {
    return root.querySelector(selector);
  },

  // Returns all elements matching given selector in the root's subtree.
  queryAll(root, selector) {
    return Array.from(root.querySelectorAll(selector));
  }
});

export const test = base.extend<{}, { selectorRegistration: void }>({
  // Register selectors once per worker.
  selectorRegistration: [async ({ playwright }, use) => {
    // Register the engine. Selectors will be prefixed with "tag=".
    await playwright.selectors.register('tag', createTagNameEngine);
    await use();
  }, { scope: 'worker', auto: true }],
});
```

----------------------------------------

TITLE: Counting Elements with Playwright Locator
DESCRIPTION: Demonstrates how to count elements matching a locator using Playwright's count method. Returns the number of elements matching the specified locator.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_37

LANGUAGE: javascript
CODE:
```
const count = await page.getByRole('listitem').count();
```

LANGUAGE: java
CODE:
```
int count = page.getByRole(AriaRole.LISTITEM).count();
```

LANGUAGE: python
CODE:
```
count = await page.get_by_role("listitem").count()
```

LANGUAGE: csharp
CODE:
```
int count = await page.GetByRole(AriaRole.Listitem).CountAsync();
```

----------------------------------------

TITLE: Dispatching Dragstart Event with DataTransfer in C#
DESCRIPTION: Shows how to dispatch a dragstart event with a DataTransfer object on an ElementHandle in C#.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_29

LANGUAGE: csharp
CODE:
```
var dataTransfer = await page.EvaluateHandleAsync("() => new DataTransfer()");
await elementHandle.DispatchEventAsync("dragstart", new Dictionary<string, object>
{
    { "dataTransfer", dataTransfer }
});
```

----------------------------------------

TITLE: CSS and XPath Selector Examples
DESCRIPTION: Examples of using CSS and XPath selectors to locate elements, though not recommended as primary approach.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
await page.locator('css=button').click();
await page.locator('xpath=//button').click();

await page.locator('button').click();
await page.locator('//button').click();
```

LANGUAGE: java
CODE:
```
page.locator("css=button").click();
page.locator("xpath=//button").click();

page.locator("button").click();
page.locator("//button").click();
```

----------------------------------------

TITLE: Limiting Test Failures in Playwright Config (TypeScript)
DESCRIPTION: Configures Playwright Test to limit the number of test failures before stopping the test run, particularly useful in CI environments.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  // Limit the number of failures on CI to save resources
  maxFailures: process.env.CI ? 10 : undefined,
});
```

----------------------------------------

TITLE: Creating New Test Project with .NET CLI
DESCRIPTION: Commands to create a new test project using dotnet CLI for different test frameworks (NUnit, MSTest, xUnit)
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-csharp.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
dotnet new nunit -n PlaywrightTests
cd PlaywrightTests
```

LANGUAGE: bash
CODE:
```
dotnet new mstest -n PlaywrightTests
cd PlaywrightTests
```

LANGUAGE: bash
CODE:
```
dotnet new xunit -n PlaywrightTests
cd PlaywrightTests
```

----------------------------------------

TITLE: Transparent Background Option for Screenshots
DESCRIPTION: Defines the `omitBackground` option that allows capturing screenshots with transparency by hiding the default white background.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_103

LANGUAGE: typescript
CODE:
```
- `omitBackground` <[boolean]>
```

----------------------------------------

TITLE: Installing Surge CLI for Deployment
DESCRIPTION: Command to globally install the Surge CLI tool, which is needed for deploying Svelte applications to Surge's hosting platform.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
npm install -g surge
```

----------------------------------------

TITLE: Running Playwright Docker for .NET Web Scraping
DESCRIPTION: Command to run the Playwright Docker container for .NET web scraping with security measures for untrusted websites.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
docker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble /bin/bash
```

----------------------------------------

TITLE: Synchronous REPL Usage
DESCRIPTION: Interactive REPL example showing Playwright usage in synchronous mode
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-python.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
from playwright.sync_api import sync_playwright
playwright = sync_playwright().start()
# Use playwright.chromium, playwright.firefox or playwright.webkit
# Pass headless=False to launch() to see the browser UI
browser = playwright.chromium.launch()
page = browser.new_page()
page.goto("https://playwright.dev/")
page.screenshot(path="example.png")
browser.close()
playwright.stop()
```

----------------------------------------

TITLE: Creating a Test List File to Control Test Execution Order in Playwright
DESCRIPTION: This TypeScript file serves as a test list that controls the execution order of tests. It imports test modules and uses test.describe() to wrap each imported function, ensuring that test.use() calls are properly scoped.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_12

LANGUAGE: typescript
CODE:
```
import { test } from '@playwright/test';
import featureBTests from './feature-b.spec.ts';
import featureATests from './feature-a.spec.ts';

test.describe(featureBTests);
test.describe(featureATests);
```

----------------------------------------

TITLE: Dispatching Dragstart Event with DataTransfer in Python (Sync)
DESCRIPTION: Demonstrates dispatching a dragstart event with a DataTransfer object on an ElementHandle in Python using synchronous syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_28

LANGUAGE: python
CODE:
```
data_transfer = page.evaluate_handle("new DataTransfer()")
element_handle.dispatch_event("#source", "dragstart", {"dataTransfer": data_transfer})
```

----------------------------------------

TITLE: JavaScript Snapshot Configuration
DESCRIPTION: Configuration example for customizing snapshot file paths
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_25

LANGUAGE: javascript
CODE:
```
export default defineConfig({
  expect: {
    toMatchAriaSnapshot: {
      pathTemplate: '__snapshots__/{testFilePath}/{arg}{ext}',
    },
  },
});
```

----------------------------------------

TITLE: Asynchronous REPL Usage
DESCRIPTION: Interactive REPL example showing Playwright usage in asynchronous mode
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-python.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
from playwright.async_api import async_playwright
playwright = await async_playwright().start()
browser = await playwright.chromium.launch()
page = await browser.new_page()
await page.goto("https://playwright.dev/")
await page.screenshot(path="example.png")
await browser.close()
await playwright.stop()
```

----------------------------------------

TITLE: Running WebView2 Test with Playwright in JavaScript
DESCRIPTION: This code demonstrates how to write a simple test for a WebView2 application using the custom test environment set up in JavaScript. It navigates to a webpage and checks for the presence of an element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
import { test, expect } from './webView2Test';

test('test WebView2', async ({ page }) => {
  await page.goto('https://playwright.dev');
  const getStarted = page.getByText('Get Started');
  await expect(getStarted).toBeVisible();
});
```

----------------------------------------

TITLE: Asserting JavaScript Properties with toHaveJSProperty in Python
DESCRIPTION: Illustrates the use of toHaveJSProperty method to check if a locator points to an element with a specific JavaScript property. This example verifies if an element with class 'component' has a 'loaded' property set to True.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_32

LANGUAGE: python
CODE:
```
locator = page.locator(".component")
expect(locator).to_have_js_property("loaded", True)
```

----------------------------------------

TITLE: Intercepting WebSocket Messages with Playwright in Java
DESCRIPTION: Using Playwright for Java, set up WebSocket communication to intercept and modify outgoing messages before they reach the server. Requires Playwright setup and a WebSocket server.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_11

LANGUAGE: java
CODE:
```
page.routeWebSocket("/ws", ws -> {
  WebSocketRoute server = ws.connectToServer();
  ws.onMessage(frame -> {
    if ("request".equals(frame.text()))
      server.send("request2");
    else
      server.send(frame.text());
  });
});
```

----------------------------------------

TITLE: Installing Playwright from Custom Artifact Repository (Python)
DESCRIPTION: Commands to install Playwright browsers from a custom artifact repository for Python implementations using the PLAYWRIGHT_DOWNLOAD_HOST environment variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_30

LANGUAGE: bash
CODE:
```
pip install playwright
PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 playwright install
```

LANGUAGE: batch
CODE:
```
set PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1
pip install playwright
playwright install
```

LANGUAGE: powershell
CODE:
```
$Env:PLAYWRIGHT_DOWNLOAD_HOST="http://192.0.2.1"
pip install playwright
playwright install
```

----------------------------------------

TITLE: Pinia Store Testing Configuration
DESCRIPTION: Setup for testing Vue components that use Pinia state management, including hook configuration.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_27

LANGUAGE: javascript
CODE:
```
import { beforeMount, afterMount } from '@playwright/experimental-ct-vue/hooks';
import { createTestingPinia } from '@pinia/testing';
import type { StoreState } from 'pinia';
import type { useStore } from '../src/store';

export type HooksConfig = {
  store?: StoreState<ReturnType<typeof useStore>>;
}

beforeMount<HooksConfig>(async ({ hooksConfig }) => {
  createTestingPinia({
    initialState: hooksConfig?.store,
    stubActions: false,
    createSpy(args) {
      console.log('spy', args)
      return () => console.log('spy-returns')
    },
  });
});
```

----------------------------------------

TITLE: Defining Error.message Property in Playwright (Python)
DESCRIPTION: Declares the message property on the Playwright Error class, available since v1.11. This property returns a string representing the message of the error for programmatic access, allowing error details to be examined in exception handling logic. It is useful for logging or displaying user-friendly error messages and does not require additional dependencies.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-error.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
    @property
    def message(self) -> str:
        """Message of the error."""
        return str(self)

```

----------------------------------------

TITLE: Defining Error.stack Property in Playwright (Python)
DESCRIPTION: Implements the optional stack property for the Playwright Error class. When available, this string property contains the stack trace of the error occurring inside the browser, providing valuable debugging context. It may be None if the stack information is not available, and it does not require external libraries.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-error.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
    @property
    def stack(self) -> str:
        """Stack of the error which got thrown inside the browser. Optional."""
        return getattr(self, '_error_stack', None)

```

----------------------------------------

TITLE: Stylesheet Path for Screenshots
DESCRIPTION: Defines the `stylePath` option for specifying file(s) containing CSS to apply when taking screenshots.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_114

LANGUAGE: typescript
CODE:
```
- `stylePath` <[string]|[Array]<[string]>>
```

----------------------------------------

TITLE: Dispatching Click Event in Java
DESCRIPTION: This snippet shows how to dispatch a click event on a button element using the Page.dispatchEvent method in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_29

LANGUAGE: java
CODE:
```
page.dispatchEvent("button#submit", "click");
```

----------------------------------------

TITLE: Creating JSHandle with Page.evaluate_handle in Python (Sync)
DESCRIPTION: Shows how to create a JSHandle for the window object using Page.evaluate_handle method in Python with synchronous syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
window_handle = page.evaluate_handle("window")
```

----------------------------------------

TITLE: Running UI Mode with Custom Port
DESCRIPTION: Command to run Playwright UI Mode with a specific port and host binding for external access
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-ui-mode-js.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npx playwright test --ui-port=8080 --ui-host=0.0.0.0
```

----------------------------------------

TITLE: Python Select Options Label Configuration
DESCRIPTION: Configuration for selecting options by label in a select element. Supports both single and multiple selections.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_97

LANGUAGE: python
CODE:
```
label: Union[str, List[str]]
```

----------------------------------------

TITLE: Conditional Trace Recording on Test Failure with NUnit
DESCRIPTION: Implements conditional trace recording that only saves traces when tests fail in NUnit. Includes configuration for screenshots, snapshots, and source capturing.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer.md#2025-04-22_snippet_8

LANGUAGE: csharp
CODE:
```
namespace PlaywrightTests;

[Parallelizable(ParallelScope.Self)]
[TestFixture]
public class ExampleTest : PageTest
{
    [SetUp]
    public async Task Setup()
    {
        await Context.Tracing.StartAsync(new()
        {
            Title = $"{TestContext.CurrentContext.Test.ClassName}.{TestContext.CurrentContext.Test.Name}",
            Screenshots = true,
            Snapshots = true,
            Sources = true
        });
    }

    [TearDown]
    public async Task TearDown()
    {
        var failed = TestContext.CurrentContext.Result.Outcome == NUnit.Framework.Interfaces.ResultState.Error
            || TestContext.CurrentContext.Result.Outcome == NUnit.Framework.Interfaces.ResultState.Failure;

        await Context.Tracing.StopAsync(new()
        {
            Path = failed ? Path.Combine(
                TestContext.CurrentContext.WorkDirectory,
                "playwright-traces",
                $"{TestContext.CurrentContext.Test.ClassName}.{TestContext.CurrentContext.Test.Name}.zip"
            ) : null,
        });
    }

    [Test]
    public async Task GetStartedLink()
    {
        // ..
    }
}
```

----------------------------------------

TITLE: Updating Playwright and Pytest Plugin
DESCRIPTION: Command to update both Playwright and the Pytest plugin to their latest versions using pip.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-python.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
pip install pytest-playwright playwright -U
```

----------------------------------------

TITLE: HTML List Structure Example
DESCRIPTION: Basic HTML unordered list structure used as example DOM for locator demonstrations
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_29

LANGUAGE: html
CODE:
```
<ul>
  <li>apple</li>
  <li>banana</li>
  <li>orange</li>
</ul>
```

----------------------------------------

TITLE: Running Vue 3 Development Server with Hot-Reload
DESCRIPTION: Command to start the development server with hot-reload functionality for local development.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-vue-vite/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Locating Elements by Text Content in HTML
DESCRIPTION: Example HTML structure showing a simple span element with text content.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_5

LANGUAGE: html
CODE:
```
<span>Welcome, John</span>
```

----------------------------------------

TITLE: Implementing a Custom Playwright Reporter (JS/TS)
DESCRIPTION: Provides a basic example of how to create a custom reporter by implementing the `Reporter` interface from `@playwright/test/reporter`. It shows the structure and common methods like `onBegin`, `onTestBegin`, `onTestEnd`, and `onEnd`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_27

LANGUAGE: typescript
CODE:
```
import type {
  FullConfig, FullResult, Reporter, Suite, TestCase, TestResult
} from '@playwright/test/reporter';

class MyReporter implements Reporter {
  onBegin(config: FullConfig, suite: Suite) {
    console.log(`Starting the run with ${suite.allTests().length} tests`);
  }

  onTestBegin(test: TestCase, result: TestResult) {
    console.log(`Starting test ${test.title}`);
  }

  onTestEnd(test: TestCase, result: TestResult) {
    console.log(`Finished test ${test.title}: ${result.status}`);
  }

  onEnd(result: FullResult) {
    console.log(`Finished the run: ${result.status}`);
  }
}

export default MyReporter;
```

----------------------------------------

TITLE: Using CDPSession with Chrome DevTools Protocol in C#
DESCRIPTION: C# implementation for working with CDPSession. Demonstrates creating a session, enabling runtime features, handling animation events, and adjusting playback rates using the Chrome DevTools Protocol API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-cdpsession.md#2025-04-22_snippet_3

LANGUAGE: csharp
CODE:
```
var client = await Page.Context.NewCDPSessionAsync(Page);
await client.SendAsync("Runtime.enable");
client.Event("Animation.animationCreated").OnEvent += (_, _) => Console.WriteLine("Animation created!");
var response = await client.SendAsync("Animation.getPlaybackRate");
var playbackRate = response.Value.GetProperty("playbackRate").GetDouble();
Console.WriteLine("playback rate is " + playbackRate);
await client.SendAsync("Animation.setPlaybackRate", new() { { "playbackRate", playbackRate / 2 } });
```

----------------------------------------

TITLE: Screenshot Type Selection Option
DESCRIPTION: Defines the `type` option that allows specifying whether screenshots should be saved as PNG or JPEG. Defaults to PNG.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_106

LANGUAGE: typescript
CODE:
```
- `type` <[ScreenshotType]<"png"|"jpeg">>
```

----------------------------------------

TITLE: Asserting Specific Accessibility Violations Using Fingerprints in Java Playwright Tests
DESCRIPTION: This Java snippet demonstrates how to test for specific, known accessibility violations using Playwright and Axe. It performs a scan using `AxeBuilder.analyze()`, converts the resulting violations into custom `ViolationFingerprint` record objects (containing rule ID and target selector), and then asserts that these generated fingerprints match an expected list using JUnit's `assertEquals`. This approach allows for precise tracking of expected violations without broadly excluding rules or elements. Requires Playwright, Axe core, and JUnit dependencies.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-java.md#2025-04-22_snippet_5

LANGUAGE: java
CODE:
```
public class HomepageTests {
  @Test
  shouldOnlyHaveAccessibilityViolationsMatchingKnownFingerprints() throws Exception {
    page.navigate("https://your-site.com/");

    AxeResults accessibilityScanResults = new AxeBuilder(page).analyze();

    List<ViolationFingerprint> violationFingerprints = fingerprintsFromScanResults(accessibilityScanResults);

    assertEquals(Arrays.asList(
      new ViolationFingerprint("aria-roles", "[span[role=\"invalid\"]]"),
      new ViolationFingerprint("color-contrast", "[li:nth-child(2) > span]"),
      new ViolationFingerprint("label", "[input]")
    ), violationFingerprints);
  }

  // You can make your "fingerprint" as specific as you like. This one considers a violation to be
  // "the same" if it corresponds the same Axe rule on the same element.
  //
  // Using a record type makes it easy to compare fingerprints with assertEquals
  public record ViolationFingerprint(String ruleId, String target) { }

  public List<ViolationFingerprint> fingerprintsFromScanResults(AxeResults results) {
    return results.getViolations().stream()
      // Each violation refers to one rule and multiple "nodes" which violate it
      .flatMap(violation -> violation.getNodes().stream()
        .map(node -> new ViolationFingerprint(
          violation.getId(),
          // Each node contains a "target", which is a CSS selector that uniquely identifies it
          // If the page involves iframes or shadow DOMs, it may be a chain of CSS selectors
          node.getTarget().toString()
        )))
      .collect(Collectors.toList());
  }
}
```

----------------------------------------

TITLE: Configuring Git Information Capture in Playwright v1.51
DESCRIPTION: Example configuration showing how to enable git information capture in the HTML report using the captureGitInfo option.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  captureGitInfo: { commit: true, diff: true }
});
```

----------------------------------------

TITLE: PyInstaller Browser Bundling Commands
DESCRIPTION: Commands for bundling browsers with PyInstaller executables in different shells
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-python.md#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
PLAYWRIGHT_BROWSERS_PATH=0 playwright install chromium
pyinstaller -F main.py
```

LANGUAGE: batch
CODE:
```
set PLAYWRIGHT_BROWSERS_PATH=0
playwright install chromium
pyinstaller -F main.py
```

LANGUAGE: powershell
CODE:
```
$env:PLAYWRIGHT_BROWSERS_PATH="0"
playwright install chromium
pyinstaller -F main.py
```

----------------------------------------

TITLE: Initializing Playwright Logger with Custom Implementation in JavaScript
DESCRIPTION: This snippet demonstrates how to launch a Chromium browser with a custom logger implementation. The logger is configured to only enable logs for the 'api' name and to log messages to the console.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-logger.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.

(async () => {
  const browser = await chromium.launch({
    logger: {
      isEnabled: (name, severity) => name === 'api',
      log: (name, severity, message, args) => console.log(`${name} ${message}`)
    }
  });
  // ...
})();
```

----------------------------------------

TITLE: Updating Playwright via pnpm - Bash
DESCRIPTION: Updates the Playwright dev dependency via pnpm and downloads the latest supported browser binaries and dependencies. Keeps both test runner and browser infrastructure up to date. Should be run periodically or after significant Playwright releases.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_15

LANGUAGE: bash
CODE:
```
pnpm install --save-dev @playwright/test@latest
# Also download new browser binaries and their dependencies:
pnm exec playwright install --with-deps
```

----------------------------------------

TITLE: Running NUnit Tests in Parallel Using CLI
DESCRIPTION: Command to configure the number of parallel test workers for NUnit test execution.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-csharp.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
dotnet test -- NUnit.NumberOfTestWorkers=5
```

----------------------------------------

TITLE: Run Playwright Test with Line Reporter via CLI (Detailed)
DESCRIPTION: Demonstrates running Playwright tests with the 'line' reporter via the command line, highlighting its use for large test suites to show progress without excessive output.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_7

LANGUAGE: bash
CODE:
```
npx playwright test --reporter=line
```

----------------------------------------

TITLE: Installing and Building Playwright for Bidi Testing
DESCRIPTION: Initial setup commands to clone Playwright repository, build the project, install Chromium, and run Bidi tests for Firefox projects.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/bidi/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
git clone https://github.com/microsoft/playwright.git
cd playwright
npm run build # call `npm run watch` for watch mode
npx playwright install chromium
npm run biditest -- --project='moz-firefox-*'
```

----------------------------------------

TITLE: Installing Different .NET Version in Docker
DESCRIPTION: Command to install a different version of .NET SDK in the Playwright Docker container using the .NET install script.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_21

LANGUAGE: bash
CODE:
```
curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --install-dir /usr/share/dotnet --channel 9.0
```

----------------------------------------

TITLE: Emulating Viewport Size with Playwright Codegen - Java - Bash
DESCRIPTION: This Maven-based command runs Playwright's CLI for Java with a specified viewport size for the browser instance. The '--viewport-size' option controls the browser's width and height, and can be essential for testing responsive behavior within recorded tests. Requirements include Maven and the Playwright Java package. Outputs a browser at the set resolution for recording user flows.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"codegen --viewport-size='800,600' playwright.dev\"
```

----------------------------------------

TITLE: Capturing Accessibility Snapshot with Playwright in Java
DESCRIPTION: Captures the current state of the accessibility tree in a web page using Playwright's deprecated Accessibility class method `snapshot()`. Logs the snapshot to the console. Requires setup with Playwright and a page instance. The returned object is a string representation of the accessibility data.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-accessibility.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
String snapshot = page.accessibility().snapshot();
System.out.println(snapshot);
```

----------------------------------------

TITLE: Dispatching Dragstart Event with DataTransfer in Python (Async)
DESCRIPTION: Illustrates dispatching a dragstart event with a DataTransfer object on an ElementHandle in Python using async syntax.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_27

LANGUAGE: python
CODE:
```
data_transfer = await page.evaluate_handle("new DataTransfer()")
await element_handle.dispatch_event("#source", "dragstart", {"dataTransfer": data_transfer})
```

----------------------------------------

TITLE: Defining Selector for Playwright Element Resolution
DESCRIPTION: Defines the `selector` string parameter used specifically for resolving a DOM element in certain Playwright contexts.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_26

LANGUAGE: markdown
CODE:
```
- `selector` <[string]>
```

----------------------------------------

TITLE: Ignoring Specific Default Browser Arguments in Playwright (CSharp/Java)
DESCRIPTION: Defines the `ignoreDefaultArgs` browser launch option for Playwright in C# and Java. Expects an array of strings specifying which default launch arguments to filter out. This is a potentially dangerous option.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_32

LANGUAGE: markdown
CODE:
```
- `ignoreDefaultArgs` <[Array]<[string]>>
```

----------------------------------------

TITLE: Configuring Route Removal Behavior (JavaScript, C#, Python)
DESCRIPTION: Controls how to handle currently running route handlers when removing routes. Specifies waiting behavior and error handling.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_87

LANGUAGE: javascript
CODE:
```
- `behavior` <[UnrouteBehavior]<"wait"|"ignoreErrors"|"default">>
```

----------------------------------------

TITLE: Memory Leak Detection with requestGC
DESCRIPTION: Shows how to detect memory leaks using WeakRef and garbage collection requests in different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_66

LANGUAGE: javascript
CODE:
```
await page.evaluate(() => globalThis.suspectWeakRef = new WeakRef(suspect));
await page.requestGC();
expect(await page.evaluate(() => !globalThis.suspectWeakRef.deref())).toBe(true);
```

LANGUAGE: java
CODE:
```
page.evaluate("globalThis.suspectWeakRef = new WeakRef(suspect)");
page.requestGC();
assertTrue(page.evaluate("!globalThis.suspectWeakRef.deref()"));
```

LANGUAGE: python
CODE:
```
await page.evaluate("globalThis.suspectWeakRef = new WeakRef(suspect)")
await page.request_gc()
assert await page.evaluate("!globalThis.suspectWeakRef.deref()")
```

LANGUAGE: csharp
CODE:
```
await Page.EvaluateAsync("globalThis.suspectWeakRef = new WeakRef(suspect)");
await Page.RequestGCAsync();
Assert.True(await Page.EvaluateAsync("!globalThis.suspectWeakRef.deref()"));
```

----------------------------------------

TITLE: Retrieving Bounding Box with ElementHandle in Java
DESCRIPTION: Depicts obtaining an element's bounding box using ElementHandle in Java. It uses the resulting coordinates to perform a centered mouse click.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_16

LANGUAGE: Java
CODE:
```
BoundingBox box = elementHandle.boundingBox();
page.mouse().click(box.x + box.width / 2, box.y + box.height / 2);
```

----------------------------------------

TITLE: Installing Chromium Package Reference
DESCRIPTION: Package name reference for installing Chromium browser support in Playwright, with a recommendation to use @playwright/test for end-to-end testing.
SOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-browser-chromium/README.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
# @playwright/browser-chromium
```

----------------------------------------

TITLE: Handling Console Messages from Electron Main Process
DESCRIPTION: Shows how to listen for console events from the Electron main process and process the arguments passed to console methods.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-electronapplication.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
electronApp.on('console', async msg => {
  const values = [];
  for (const arg of msg.args())
    values.push(await arg.jsonValue());
  console.log(...values);
});
await electronApp.evaluate(() => console.log('hello', 5, { foo: 'bar' }));
```

----------------------------------------

TITLE: Running Playwright Docker for JavaScript Web Scraping
DESCRIPTION: Command to run the Playwright Docker container for JavaScript web scraping with security measures for untrusted websites.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
docker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright:v%%VERSION%%-noble /bin/bash
```

----------------------------------------

TITLE: Custom Callback on Every Actionability Check with Locator Handler in JavaScript
DESCRIPTION: Sets up a locator handler with the body element to run a custom JavaScript function before every actionability check. Uses the noWaitAfter option since the handler doesn't hide the body element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_86

LANGUAGE: javascript
CODE:
```
// Setup the handler.
await page.addLocatorHandler(page.locator('body'), async () => {
  await page.evaluate(() => window.removeObstructionsForTestIfNeeded());
}, { noWaitAfter: true });

// Write the test as usual.
await page.goto('https://example.com');
await page.getByRole('button', { name: 'Start here' }).click();
```

----------------------------------------

TITLE: Installing Playwright with Browser-Specific Download Hosts (C#)
DESCRIPTION: Commands to install Playwright browsers using different download hosts for specific browsers. These use browser-specific environment variables that take precedence over the general PLAYWRIGHT_DOWNLOAD_HOST variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_36

LANGUAGE: bash
CODE:
```
PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3 PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 pwsh bin/Debug/netX/playwright.ps1 install
```

LANGUAGE: batch
CODE:
```
set PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3
set PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1
pwsh bin/Debug/netX/playwright.ps1 install
```

LANGUAGE: powershell
CODE:
```
$Env:PLAYWRIGHT_DOWNLOAD_HOST="http://192.0.2.1"
$Env:PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST="http://203.0.113.3"
pwsh bin/Debug/netX/playwright.ps1 install
```

----------------------------------------

TITLE: Controlling Navigation Wait Behavior with Playwright `noWaitAfter` (Deprecated)
DESCRIPTION: Defines the `noWaitAfter` boolean option for Playwright actions that trigger navigation. When true, Playwright does not wait for the navigation to complete or the page to start loading. This is intended for exceptional cases like navigating to inaccessible pages. Defaults to `false`, but will default to `true` in the future. (Deprecated - Behavior is changing).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_8

LANGUAGE: markdown
CODE:
```
- `noWaitAfter` <[boolean]>
```

----------------------------------------

TITLE: Interacting with an Element using ElementHandle (Stale Potential) in Python (Async)
DESCRIPTION: Shows finding an element using `page.query_selector` to get an [ElementHandle] and performing actions (hover, click) in asynchronous Python. This method can lead to errors if the element becomes stale due to page updates.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_17

LANGUAGE: python
CODE:
```
```python async
handle = await page.query_selector("text=Submit")
await handle.hover()
await handle.click()
```
```

----------------------------------------

TITLE: Playwright Test Configuration in XML
DESCRIPTION: XML configuration for specifying browser name in a runsettings file for Playwright tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_9

LANGUAGE: xml
CODE:
```
<?xml version="1.0" encoding="utf-8"?>
  <RunSettings>
    <Playwright>
      <BrowserName>chromium</BrowserName>
    </Playwright>
  </RunSettings>
```

----------------------------------------

TITLE: Checking Playwright Version via npx - Bash
DESCRIPTION: Displays the currently installed version of Playwright using npx. Useful for debugging environment issues, ensuring compatibility, and confirming updates. Outputs the version string to standard output.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_16

LANGUAGE: bash
CODE:
```
npx playwright --version
```

----------------------------------------

TITLE: Installing Playwright from Custom Artifact Repository (C#)
DESCRIPTION: Commands to install Playwright browsers from a custom artifact repository for C# implementations using the PLAYWRIGHT_DOWNLOAD_HOST environment variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_32

LANGUAGE: bash
CODE:
```
PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 pwsh bin/Debug/netX/playwright.ps1 install
```

LANGUAGE: batch
CODE:
```
set PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1
pwsh bin/Debug/netX/playwright.ps1 install
```

LANGUAGE: powershell
CODE:
```
$Env:PLAYWRIGHT_DOWNLOAD_HOST="http://192.0.2.1"
pwsh bin/Debug/netX/playwright.ps1 install
```

----------------------------------------

TITLE: Installing Playwright Headless Shell - Maven
DESCRIPTION: Maven command to install Playwright with headless shell dependencies
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_11

LANGUAGE: bash
CODE:
```
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install --with-deps --only-shell"
```

----------------------------------------

TITLE: Creating Azure Service Principal for Storage Access
DESCRIPTION: Azure CLI command to create a service principal with Storage Blob Data Contributor role for accessing Azure Storage.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci-intro.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
az ad sp create-for-rbac --name "github-actions" --role "Storage Blob Data Contributor" --scopes /subscriptions/<SUBSCRIPTION_ID>/resourceGroups/<RESOURCE_GROUP_NAME>/providers/Microsoft.Storage/storageAccounts/<STORAGE_ACCOUNT_NAME>
```

----------------------------------------

TITLE: Increasing Connection Timeout for Playwright Install (JavaScript)
DESCRIPTION: Commands to increase the connection timeout when downloading Playwright browsers on slow networks for JavaScript implementations. The PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT value is in milliseconds.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_24

LANGUAGE: bash
CODE:
```
PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000 npx playwright install
```

LANGUAGE: batch
CODE:
```
set PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000
npx playwright install
```

LANGUAGE: powershell
CODE:
```
$Env:PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT="120000"
npx playwright install
```

----------------------------------------

TITLE: Dumping Frame Tree using Playwright Sync API in Python
DESCRIPTION: This synchronous Python snippet shows how to use Playwright's sync API to launch Firefox, navigate to a webpage, and recursively print the frame hierarchy. It defines a `run` function and a helper `dump_frame_tree` function that outputs the name and URL of each frame, using indentation for child frames. The script executes synchronously using a `with` statement for the Playwright context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    firefox = playwright.firefox
    browser = firefox.launch()
    page = browser.new_page()
    page.goto("https://www.theverge.com")
    dump_frame_tree(page.main_frame, "")
    browser.close()

def dump_frame_tree(frame, indent):
    print(indent + frame.name + '@' + frame.url)
    for child in frame.child_frames:
        dump_frame_tree(child, indent + "    ")

with sync_playwright() as playwright:
    run(playwright)
```

----------------------------------------

TITLE: Running React Development Server
DESCRIPTION: Starts the React application in development mode with hot-reloading enabled, serving on localhost:3000.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-react17/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm start
```

----------------------------------------

TITLE: Compiling and Running Playwright Java Programs with Maven - Bash
DESCRIPTION: Repeats the command to compile and execute Playwright main programs via Maven. This is identical in function to the earlier bash snippet, reinforcing usage patterns for running examples and scripts. No inputs or outputs beyond main class execution.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-java.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
mvn compile exec:java -D exec.mainClass=\"org.example.App\"
```

----------------------------------------

TITLE: Returning Open Browser Contexts in Playwright C#
DESCRIPTION: This C# code snippet demonstrates using Playwright to get the number of open browser contexts. The example shows Playwright’s capability for context management and requires .NET and the Playwright C# library.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_9

LANGUAGE: C#
CODE:
```
using var playwright = await Playwright.CreateAsync();
var browser = await playwright.Webkit.LaunchAsync();
System.Console.WriteLine(browser.Contexts.Count); // prints "0"
var context = await browser.NewContextAsync();
System.Console.WriteLine(browser.Contexts.Count); // prints "1"
```

----------------------------------------

TITLE: Gradle Configuration for Playwright in Kotlin
DESCRIPTION: Gradle build configuration script in Kotlin DSL for a Playwright Java project. It configures the project dependencies, creates a custom task for Playwright CLI access, and sets up test logging.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-java.md#2025-04-22_snippet_4

LANGUAGE: kotlin
CODE:
```
plugins {
  application
  id("java")
}

repositories {
  mavenCentral()
}

dependencies {
  implementation("com.microsoft.playwright:playwright:%%VERSION%%")
}

application {
  mainClass.set("org.example.App")
}

// Usage: ./gradlew playwright --args="help"
tasks.register<JavaExec>("playwright") {
  classpath(sourceSets["test"].runtimeClasspath)
  mainClass.set("com.microsoft.playwright.CLI")
}

tasks.test {
  useJUnitPlatform()
  testLogging {
    events("passed", "skipped", "failed")
  }
}
```

----------------------------------------

TITLE: Installing Playwright from Custom Artifact Repository (Java)
DESCRIPTION: Commands to install Playwright browsers from a custom artifact repository for Java implementations using the PLAYWRIGHT_DOWNLOAD_HOST environment variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_31

LANGUAGE: bash
CODE:
```
PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install"
```

LANGUAGE: batch
CODE:
```
set PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install"
```

LANGUAGE: powershell
CODE:
```
$Env:PLAYWRIGHT_DOWNLOAD_HOST="http://192.0.2.1"
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install"
```

----------------------------------------

TITLE: Using toHaveProperty Method for Object Property Checking
DESCRIPTION: Shows various uses of the 'toHaveProperty' method to check for the existence and value of properties in objects, including nested properties and array items.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_20

LANGUAGE: javascript
CODE:
```
const value = {
  a: {
    b: [42],
  },
  c: true,
};
expect(value).toHaveProperty('a.b');
expect(value).toHaveProperty('a.b', [42]);
expect(value).toHaveProperty('a.b[0]', 42);
expect(value).toHaveProperty('c');
expect(value).toHaveProperty('c', true);
```

----------------------------------------

TITLE: Configuring WebView2 Test Environment in JavaScript
DESCRIPTION: This code sets up a custom test environment for WebView2 applications using Playwright in JavaScript. It launches a WebView2 process, connects Playwright to it, and provides isolated contexts for each test run.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
import { test as base } from '@playwright/test';
import fs from 'fs';
import os from 'os';
import path from 'path';
import childProcess from 'child_process';

const EXECUTABLE_PATH = path.join(
    __dirname,
    '../../webview2-app/bin/Debug/net8.0-windows/webview2.exe',
);

export const test = base.extend({
  browser: async ({ playwright }, use, testInfo) => {
    const cdpPort = 10000 + testInfo.workerIndex;
    // Make sure that the executable exists and is executable
    fs.accessSync(EXECUTABLE_PATH, fs.constants.X_OK);
    const userDataDir = path.join(
        fs.realpathSync.native(os.tmpdir()),
        `playwright-webview2-tests/user-data-dir-${testInfo.workerIndex}`,
    );
    const webView2Process = childProcess.spawn(EXECUTABLE_PATH, [], {
      shell: true,
      env: {
        ...process.env,
        WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS: `--remote-debugging-port=${cdpPort}`,
        WEBVIEW2_USER_DATA_FOLDER: userDataDir,
      }
    });
    await new Promise<void>(resolve => webView2Process.stdout.on('data', data => {
      if (data.toString().includes('WebView2 initialized'))
        resolve();
    }));
    const browser = await playwright.chromium.connectOverCDP(`http://127.0.0.1:${cdpPort}`);
    await use(browser);
    await browser.close();
    childProcess.execSync(`taskkill /pid ${webView2Process.pid} /T /F`);
    fs.rmdirSync(userDataDir, { recursive: true });
  },
  context: async ({ browser }, use) => {
    const context = browser.contexts()[0];
    await use(context);
  },
  page: async ({ context }, use) => {
    const page = context.pages()[0];
    await use(page);
  },
});

export { expect } from '@playwright/test';
```

----------------------------------------

TITLE: Using JSDoc Type Annotations
DESCRIPTION: Demonstrates how to use JSDoc annotations to specify Playwright types in JavaScript
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-js.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
/** @type {import('playwright').Page} */
let page;
```

----------------------------------------

TITLE: Running Playwright Docker for .NET E2E Tests
DESCRIPTION: Command to run the Playwright Docker container for .NET end-to-end testing where code is trusted.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
docker run -it --rm --ipc=host mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble /bin/bash
```

----------------------------------------

TITLE: Returning Open Browser Contexts in Async Playwright Python
DESCRIPTION: This Python snippet demonstrates using Playwright's async API to return the number of open browser contexts. It is part of context management, showcasing Playwright's features for handling browser contexts. Requires Playwright installed in a Python async environment.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_7

LANGUAGE: Python
CODE:
```
browser = await pw.webkit.launch()
print(len(browser.contexts)) # prints `0`
context = await browser.new_context()
print(len(browser.contexts)) # prints `1`
```

----------------------------------------

TITLE: Building Custom Playwright Docker Image for JavaScript
DESCRIPTION: Dockerfile to build a custom Docker image with Node.js and Playwright for JavaScript applications.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_22

LANGUAGE: Dockerfile
CODE:
```
FROM node:20-bookworm

RUN npx -y playwright@%%VERSION%% install --with-deps
```

----------------------------------------

TITLE: Describing Playwright-Core Package in Markdown
DESCRIPTION: A simple Markdown snippet that introduces the playwright-core package. It explains that this is a no-browser version of the main Playwright library.
SOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/README.md#2025-04-22_snippet_0

LANGUAGE: Markdown
CODE:
```
# playwright-core

This package contains the no-browser flavor of [Playwright](http://github.com/microsoft/playwright).
```

----------------------------------------

TITLE: Checking the Installed Version of Playwright (Bash)
DESCRIPTION: Lists commands to display the currently installed version of Playwright via the command line. Works with NPM, Yarn, and PNPM executions. Input: none. Output: Playwright version string to STDOUT. Requires the Playwright CLI to be installed.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_11

LANGUAGE: bash
CODE:
```
npx playwright --version
```

LANGUAGE: bash
CODE:
```
yarn playwright --version
```

LANGUAGE: bash
CODE:
```
pnpm exec playwright --version
```

----------------------------------------

TITLE: Building Project and Installing Browsers
DESCRIPTION: Commands to build the project and install required browser dependencies using PowerShell
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-csharp.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
dotnet build
```

LANGUAGE: bash
CODE:
```
pwsh bin/Debug/net8.0/playwright.ps1 install
```

----------------------------------------

TITLE: Checking Browser Storage Usage
DESCRIPTION: Command to check disk space usage of installed browsers in the cache directory
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_37

LANGUAGE: bash
CODE:
```
du -hs ~/Library/Caches/ms-playwright/*
281M  chromium-XXXXXX
187M  firefox-XXXX
180M  webkit-XXXX
```

----------------------------------------

TITLE: Installing Dependencies for Vue 3 Project
DESCRIPTION: Command to install all required dependencies for the Vue 3 project as defined in package.json.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-vue-vite/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
npm install
```

----------------------------------------

TITLE: Enabling TypeScript Checking in JavaScript
DESCRIPTION: Adds TypeScript checking to JavaScript files using @ts-check directive
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-js.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
// @ts-check
// ...
```

----------------------------------------

TITLE: Cloning and Setting Up Playwright Repository
DESCRIPTION: Instructions for cloning the Playwright repository, installing dependencies, and running the build in watch mode. Also includes steps for installing Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
git clone https://github.com/microsoft/playwright
cd playwright
npm ci
npm run watch
npx playwright install
```

----------------------------------------

TITLE: Using toBeNull Method for Null Checking
DESCRIPTION: Shows how to use the 'toBeNull' method to check if a value is null.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
const value = null;
expect(value).toBeNull();
```

----------------------------------------

TITLE: Ignoring Default Browser Arguments in Playwright (JS/Python)
DESCRIPTION: Defines the `ignoreDefaultArgs` browser launch option for Playwright in JavaScript and Python. If `true`, Playwright omits its default launch arguments, using only those provided in `args`. If an array of strings is given, only those specific default arguments are filtered out. This is a potentially dangerous option. Defaults to `false`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_31

LANGUAGE: markdown
CODE:
```
- `ignoreDefaultArgs` <[boolean]|[Array]<[string]>>
```

----------------------------------------

TITLE: Text Content Assertion HTML List
DESCRIPTION: HTML list structure for demonstrating text content assertions with multiple list items.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_21

LANGUAGE: html
CODE:
```
<ul>
  <li>Item Text 1</li>
  <li>Item Text 2</li>
  <li>Item Text 3</li>
</ul>
```

----------------------------------------

TITLE: Specifying Click Count for Playwright Mouse Actions
DESCRIPTION: Defines the `clickCount` integer parameter for Playwright click actions, simulating multiple clicks (e.g., double-click). Defaults to 1. Corresponds to the `UIEvent.detail` property.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_19

LANGUAGE: markdown
CODE:
```
- `clickCount` <[int]>
```

----------------------------------------

TITLE: Starting Selenium Node with Grid URL
DESCRIPTION: Command to start a Selenium node with the SE_NODE_GRID_URL environment variable set to point to the Selenium hub.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/selenium-grid.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
SE_NODE_GRID_URL="http://<selenium-hub-ip>:4444" java -jar selenium-server-<version>.jar node
```

----------------------------------------

TITLE: Importing Playwright Electron Module in JavaScript
DESCRIPTION: Demonstrates how to import the experimental Electron module from the Playwright library in a Node.js environment. This is the necessary first step to utilize Playwright's Electron automation capabilities.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-electron.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
const { _electron } = require('playwright');
```

----------------------------------------

TITLE: Capturing Accessibility Snapshot with Playwright in JavaScript
DESCRIPTION: Captures the current state of the accessibility tree in a web page using Playwright's deprecated Accessibility class method `snapshot()`. The function logs the snapshot to the console. Requires setup with Playwright and a page instance. Returns the root accessible node as a JavaScript object.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-accessibility.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
const snapshot = await page.accessibility.snapshot();
console.log(snapshot);
```

----------------------------------------

TITLE: Checking Playwright Version via yarn - Bash
DESCRIPTION: Uses yarn to print the installed Playwright version in the current project context. Assists in version tracking and troubleshooting. Outputs the version to console.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_17

LANGUAGE: bash
CODE:
```
yarn playwright --version
```

----------------------------------------

TITLE: Managing WebView2 Process in Java
DESCRIPTION: This Java class handles the launching and management of a WebView2 process for testing. It sets up a unique user data directory and CDP port for each instance, ensuring isolated test environments.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_9

LANGUAGE: java
CODE:
```
package com.example;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

public class WebView2Process {
  public int cdpPort;
  private Path _dataDir;
  private Process _process;
  private Path _executablePath = Path.of("../webview2-app/bin/Debug/net8.0-windows/webview2.exe");

  public WebView2Process() throws IOException {
    cdpPort = nextFreePort();
    _dataDir = Files.createTempDirectory("pw-java-webview2-tests-");

    if (!Files.exists(_executablePath)) {
      throw new RuntimeException("Executable not found: " + _executablePath);
    }
    ProcessBuilder pb = new ProcessBuilder().command(_executablePath.toAbsolutePath().toString());
    Map<String, String> envMap = pb.environment();
    envMap.put("WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS", "--remote-debugging-port=" + cdpPort);
    envMap.put("WEBVIEW2_USER_DATA_FOLDER", _dataDir.toString());
    _process = pb.start();
    // wait until "WebView2 initialized" got printed
    BufferedReader reader = new BufferedReader(new InputStreamReader(_process.getInputStream()));
    while (true) {
      String line = reader.readLine();
      if (line == null) {
        throw new RuntimeException("WebView2 process exited");
      }
      if (line.contains("WebView2 initialized")) {
        break;
      }
    }
  }

  private static final AtomicInteger nextUnusedPort = new AtomicInteger(9000);

  private static boolean available(int port) {
    try (ServerSocket ignored = new ServerSocket(port)) {
      return true;
    } catch (IOException ignored) {
      return false;
    }
  }

  static int nextFreePort() {
    for (int i = 0; i < 100; i++) {
      int port = nextUnusedPort.getAndIncrement();
      if (available(port)) {
        return port;
      }
    }
    throw new RuntimeException("Cannot find free port: " + nextUnusedPort.get());
  }

  public void dispose() {
    _process.destroy();
    try {
      _process.waitFor();
    } catch (InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
}
```

----------------------------------------

TITLE: Configuring Playwright Platform Drivers in .NET Project Files
DESCRIPTION: XML configuration options for specifying which platform drivers to include when bundling Playwright in a .NET project.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-csharp.md#2025-04-23_snippet_4

LANGUAGE: xml
CODE:
```
<PropertyGroup>
  <PlaywrightPlatform>all</PlaywrightPlatform>
</PropertyGroup>
```

LANGUAGE: xml
CODE:
```
<PropertyGroup>
  <PlaywrightPlatform>osx;linux</PlaywrightPlatform>
</PropertyGroup>
```

----------------------------------------

TITLE: Component Testing with MSW Router Integration
DESCRIPTION: Example showing how to use the new router fixture to intercept network requests in component testing by integrating with MSW library handlers.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_14

LANGUAGE: javascript
CODE:
```
import { handlers } from '@src/mocks/handlers';

test.beforeEach(async ({ router }) => {
  // install common handlers before each test
  await router.use(...handlers);
});

test('example test', async ({ mount }) => {
  // test as usual, your handlers are active
  // ...
});
```

----------------------------------------

TITLE: Increasing Connection Timeout for Playwright Install (C#)
DESCRIPTION: Commands to increase the connection timeout when downloading Playwright browsers on slow networks for C# implementations. The PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT value is in milliseconds.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_27

LANGUAGE: bash
CODE:
```
PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000 pwsh bin/Debug/netX/playwright.ps1 install
```

LANGUAGE: batch
CODE:
```
set PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000
pwsh bin/Debug/netX/playwright.ps1 install
```

LANGUAGE: powershell
CODE:
```
$Env:PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT="120000"
pwsh bin/Debug/netX/playwright.ps1 install
```

----------------------------------------

TITLE: Exposing SHA256 Function to BrowserContext in Python (Async)
DESCRIPTION: This Python async example demonstrates how to expose a SHA256 hashing function to all pages in a browser context using Playwright. It creates a new context, exposes the function, and then uses it in a page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_17

LANGUAGE: python
CODE:
```
import asyncio
import hashlib
from playwright.async_api import async_playwright, Playwright

def sha256(text: str) -> str:
    m = hashlib.sha256()
    m.update(bytes(text, "utf8"))
    return m.hexdigest()


async def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = await webkit.launch(headless=False)
    context = await browser.new_context()
    await context.expose_function("sha256", sha256)
    page = await context.new_page()
    await page.set_content("""
        <script>
          async function onClick() {
            document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');
          }
        </script>
        <button onclick="onClick()">Click me</button>
        <div></div>
    """)
    await page.get_by_role("button").click()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())
```

----------------------------------------

TITLE: Accessing WebSocket Frame Text Payload – Playwright SDK – C#
DESCRIPTION: This method, WebSocketFrame.text, fetches the text payload from a WebSocket frame using Playwright in C#. It returns either a string containing the text data or null if the frame is not text. Requires an active Playwright environment and a valid WebSocketFrame object. Inputs: None. Output: string|null. Use this to handle WebSocket events or inspect textual messages passed through WebSocket connections.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketframe.md#2025-04-22_snippet_1

LANGUAGE: csharp
CODE:
```
var textPayload = webSocketFrame.text(); // returns string|null
```

----------------------------------------

TITLE: Passing Additional Headers to Selenium Grid
DESCRIPTION: Commands to run Playwright tests with additional headers for the Selenium Grid using the SELENIUM_REMOTE_HEADERS environment variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/selenium-grid.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_HEADERS="{'Authorization':'Basic b64enc'}" npx playwright test
```

LANGUAGE: bash
CODE:
```
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_HEADERS="{'Authorization':'Basic b64enc'}" pytest --browser chromium
```

LANGUAGE: bash
CODE:
```
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_HEADERS="{'Authorization':'Basic b64enc'}" mvn test
```

LANGUAGE: bash
CODE:
```
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_HEADERS="{'Authorization':'Basic b64enc'}" dotnet test
```

----------------------------------------

TITLE: Building a Svelte App for Production
DESCRIPTION: Command to create an optimized production build of the Svelte application, which will generate files in the public directory.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
npm run build
```

----------------------------------------

TITLE: Installing browsers via .NET API
DESCRIPTION: This snippet illustrates how to install browsers using the .NET API, allowing the integration of browser installation into .NET applications.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_3

LANGUAGE: csharp
CODE:
```
var exitCode = Microsoft.Playwright.Program.Main(new[] {\"install\"});
if (exitCode != 0)
{
    throw new Exception($\"Playwright exited with code {exitCode}\");
}
```

----------------------------------------

TITLE: Querying Device Serial Number from AndroidDevice with Playwright JS
DESCRIPTION: androidDevice.serial() synchronously returns the device's unique serial number as a string. Helps distinguish multiple devices in test environments. Input: none. Output: serial string.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_17

LANGUAGE: js
CODE:
```
// Get device serial number.
const serial = androidDevice.serial();
console.log(serial);
```

----------------------------------------

TITLE: Setting Custom Download Host in PowerShell
DESCRIPTION: Configures a custom download host for Playwright browser binaries using PowerShell environment variables
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-js.md#2025-04-22_snippet_3

LANGUAGE: powershell
CODE:
```
$Env:PLAYWRIGHT_DOWNLOAD_HOST=192.0.2.1
npx playwright install
```

----------------------------------------

TITLE: Publishing the Flakiness Dashboard Function to Azure
DESCRIPTION: Command to publish the flakiness dashboard function to Azure using Azure Functions Core Tools.
SOURCE: https://github.com/microsoft/playwright/blob/main/utils/flakiness-dashboard/README.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
func azure functionapp publish folio-flakiness-dashboard --javascript
```

----------------------------------------

TITLE: Dispatching Dragstart Event with DataTransfer in Java
DESCRIPTION: Shows how to dispatch a dragstart event with a DataTransfer object on an ElementHandle in Java.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_26

LANGUAGE: java
CODE:
```
JSHandle dataTransfer = page.evaluateHandle("() => new DataTransfer()");
Map<String, Object> arg = new HashMap<>();
arg.put("dataTransfer", dataTransfer);
elementHandle.dispatchEvent("dragstart", arg);
```

----------------------------------------

TITLE: Exposing SHA256 Function in Playwright Page (C#)
DESCRIPTION: This C# code demonstrates how to expose a SHA256 function to the browser page using Playwright. It creates a new page, exposes the function, sets page content with a button, and handles the button click to display the hash.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_64

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using System;
using System.Security.Cryptography;
using System.Threading.Tasks;

class PageExamples
{
    public static async Task Main()
    {
        using var playwright = await Playwright.CreateAsync();
        await using var browser = await playwright.Webkit.LaunchAsync(new()
        {
            Headless = false
        });
        var page = await browser.NewPageAsync();

        await page.ExposeFunctionAsync("sha256", (string input) =>
        {
            return Convert.ToBase64String(
                SHA256.Create().ComputeHash(System.Text.Encoding.UTF8.GetBytes(input)));
        });

        await page.SetContentAsync("<script>\n" +
        "  async function onClick() {\n" +
        "    document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');\n" +
        "  }\n" +
        "</script>\n" +
        "<button onclick=\"onClick()\">Click me</button>\n" +
        "<div></div>");

        await page.ClickAsync("button");
        Console.WriteLine(await page.TextContentAsync("div"));
    }
}
```

----------------------------------------

TITLE: Registering Custom Selector Engine with Playwright in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to define and register a custom selector engine with Playwright, enabling selection of elements by tag name using a 'tag=' prefix. It requires the Playwright test runner (or appropriate browser module), uses an async registration method via selectors.register, and provides querying and usage examples. Key parameters include the engine name ('tag') and the engine factory function; inputs are the selector engine logic and selected elements, outputting matched DOM elements or their counts.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-selectors.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const { selectors, firefox } = require('@playwright/test');  // Or 'chromium' or 'webkit'.\n\n(async () => {\n  // Must be a function that evaluates to a selector engine instance.\n  const createTagNameEngine = () => ({\n    // Returns the first element matching given selector in the root's subtree.\n    query(root, selector) {\n      return root.querySelector(selector);\n    },\n\n    // Returns all elements matching given selector in the root's subtree.\n    queryAll(root, selector) {\n      return Array.from(root.querySelectorAll(selector));\n    }\n  });\n\n  // Register the engine. Selectors will be prefixed with \"tag=\".\n  await selectors.register('tag', createTagNameEngine);\n\n  const browser = await firefox.launch();\n  const page = await browser.newPage();\n  await page.setContent(`\u003cdiv\u003e\u003cbutton\u003eClick me\u003c/button\u003e\u003c/div\u003e`);\n\n  // Use the selector prefixed with its name.\n  const button = page.locator('tag=button');\n  // We can combine it with built-in locators.\n  await page.locator('tag=div').getByText('Click me').click();\n  // Can use it in any methods supporting selectors.\n  const buttonCount = await page.locator('tag=button').count();\n\n  await browser.close();\n})();
```

----------------------------------------

TITLE: Configuring Transpiler Build Settings in Playwright Test
DESCRIPTION: Configuration for Playwright's transpiler to exclude specific files from transpilation using glob patterns.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
import { defineConfig } from '@playwright/test';

export default defineConfig({
  build: {
    external: ['**/*bundle.js'],
  },
});
```

----------------------------------------

TITLE: Running WebView2 Test with Playwright in Python
DESCRIPTION: This Python test demonstrates how to use the custom WebView2 test environment to run a simple test. It navigates to a webpage and checks for the presence of an element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_12

LANGUAGE: python
CODE:
```
from playwright.sync_api import Page, expect


def test_webview2(page: Page):
    page.goto("https://playwright.dev")
    get_started = page.get_by_text("Get Started")
    expect(get_started).to_be_visible()
```

----------------------------------------

TITLE: Install Microsoft Edge Browser (Bash)
DESCRIPTION: Provides the command-line instruction using the Playwright PowerShell script (`playwright.ps1`) to install the stable version of the Microsoft Edge browser (`msedge`). This command is typically run from a terminal or script.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#_snippet_49

LANGUAGE: bash
CODE:
```
pwsh bin/Debug/netX/playwright.ps1 install msedge
```

----------------------------------------

TITLE: Evaluating JavaScript on All Matching Elements with Locator.evaluateAll in Java
DESCRIPTION: Demonstrates how to execute JavaScript code on all matching elements using Locator.evaluateAll in Java. Passes an array of matching elements to the evaluation function.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_55

LANGUAGE: java
CODE:
```
Locator locator = page.locator("div");
boolean moreThanTen = (boolean) locator.evaluateAll("(divs, min) => divs.length > min", 10);
```

----------------------------------------

TITLE: Waiting on Selector State or Presence with AndroidDevice in Playwright JS
DESCRIPTION: androidDevice.wait pauses test execution until a given selector is present or absent (with 'state' option). Supports waiting for UI to appear or disappear, vital for synchronization. Input: selector, optional state ('gone'), and timeout. No output except synchronization.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_21

LANGUAGE: js
CODE:
```
// Wait for a UI element to disappear.
await androidDevice.wait({
  selector: mySelector,
  state: 'gone', // Waits for element to be removed
  timeout: 3000  // Optional
});
```

----------------------------------------

TITLE: Registering and Using Custom Tag Name Selector in Playwright for Sync Python
DESCRIPTION: This Python synchronous example illustrates how to register and employ a custom selector engine with Playwright to select elements based on tag names. It involves selector engine registration and element querying with Playwright’s API synchronously.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/extensibility.md#2025-04-22_snippet_4

LANGUAGE: Python
CODE:
```
tag_selector = """
    // Must evaluate to a selector engine instance.
    {
      // Returns the first element matching given selector in the root's subtree.
      query(root, selector) {
        return root.querySelector(selector);
      },

      // Returns all elements matching given selector in the root's subtree.
      queryAll(root, selector) {
        return Array.from(root.querySelectorAll(selector));
      }
    }"""

# register the engine. selectors will be prefixed with "tag=".
playwright.selectors.register("tag", tag_selector)

# now we can use "tag=" selectors.
button = page.locator("tag=button")
button.click()

# we can combine it with built-in locators.
page.locator("tag=div").get_by_text("click me").click()

# we can use it in any methods supporting selectors.
button_count = page.locator("tag=button").count()
```

----------------------------------------

TITLE: Fetching and Using an ElementHandle with waitForSelector in Python (Sync)
DESCRIPTION: Shows how to obtain an [ElementHandle] for a DOM element (`#box`) using `page.wait_for_selector` in synchronous Python, which waits for visibility. It then demonstrates asserting the element's bounding box dimensions and class attribute. Note: Using [ElementHandle] is discouraged in favor of [Locator].
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
```python sync
# Get the element handle
element_handle = page.wait_for_selector('#box')

# Assert bounding box for the element
bounding_box = element_handle.bounding_box()
assert bounding_box.width == 100

# Assert attribute for the element
class_names = element_handle.get_attribute('class')
assert 'highlighted' in class_names
```
```

----------------------------------------

TITLE: Specifying Black Formatter Version
DESCRIPTION: Defines the exact version of the Black code formatter required for the project. This specification ensures consistent code formatting across all development environments.
SOURCE: https://github.com/microsoft/playwright/blob/main/utils/doclint/linting-code-snippets/python/requirements.txt#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
black==24.3.0
```

----------------------------------------

TITLE: YAML Equal Children Match
DESCRIPTION: YAML snapshot demonstrating exact children matching with equal property
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_20

LANGUAGE: yaml
CODE:
```
- list
  - /children: equal
  - listitem: Feature A
  - listitem: Feature B
```

----------------------------------------

TITLE: Executing Playwright C# Console Application
DESCRIPTION: Command to run the .NET console application that uses Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-csharp.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
dotnet run
```

----------------------------------------

TITLE: TypeScript Interface Definition - TestStep Properties
DESCRIPTION: Type definitions for TestStep class properties including category, duration, location, error handling, timing, and test hierarchy information.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporter-api/class-teststep.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
interface TestStep {
  category: string;  // Step category (hook, expect, pw:api, test.step)
  duration: number;  // Running time in milliseconds
  location?: Location;  // Source location of step definition
  error?: TestError;  // Error thrown during execution
  parent?: TestStep;  // Parent step reference
  startTime: Date;  // Start time of test step
  steps: TestStep[];  // Nested steps
  annotations: Array<{
    type: string,
    description?: string
  }>;  // Test step annotations
  attachments: Array<{
    name: string,
    contentType: string,
    path?: string,
    body?: Buffer
  }>;  // Attached files/buffers
  title: string;  // User-friendly step title
  titlePath(): string[];  // Path of step titles from root
}
```

----------------------------------------

TITLE: Serving Modernizr Test File in Markdown
DESCRIPTION: Instructions for serving the Modernizr test file from a remote HTTPS origin and navigating to it using specific browsers. This is crucial for updating test expectations in the Playwright project.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/modernizr/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
1. Serve `tests/assets/modernizr/index.html` from a remote (localhost results will be different) https origin (e.g. https://pages.github.com).
1. Navigate to `https://your-domain.com/tests/assets/modernizr/index.html`

Do this with:

- Safari Technology Preview
- Apple iPhone

Make sure to change the updated file's name.
```

----------------------------------------

TITLE: Partial ARIA Snapshot Matching List with Specific Child in YAML
DESCRIPTION: This YAML snippet demonstrates a partial ARIA snapshot template for a list. It matches the 'list' role and specifically requires a child 'listitem' with the name 'Feature B'. Other list items ('Feature A', 'Feature C') are ignored, showcasing how to verify specific parts of a structure while allowing variations elsewhere.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_17

LANGUAGE: yaml
CODE:
```
```yaml
- list
  - listitem: Feature B
```
```

----------------------------------------

TITLE: ElementHandle Methods Overview
DESCRIPTION: Collection of element interaction methods including getAttribute, hover, innerHTML, innerText, inputValue, and various state checks. Many methods are marked as discouraged in favor of Locator-based alternatives.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_40

LANGUAGE: typescript
CODE:
```
// Example method signatures
async getAttribute(name: string): Promise<string|null>;
async hover(options?: HoverOptions): Promise<void>;
async innerHTML(): Promise<string>;
async innerText(): Promise<string>;
async inputValue(): Promise<string>;
async isChecked(): Promise<boolean>;
async isDisabled(): Promise<boolean>;
async isEditable(): Promise<boolean>;
async isEnabled(): Promise<boolean>;
async isHidden(): Promise<boolean>;
async isVisible(): Promise<boolean>;
```

----------------------------------------

TITLE: Simulating Pinch Close and Open Gestures on AndroidDevice with Playwright JS
DESCRIPTION: AndroidDevice.pinchClose and pinchOpen simulate pinch gestures on a widget—closing or opening—specified by a selector. Both take percent (float for size relative to widget), optional speed, and timeout. Used for automating zoom controls. Input: selector and gesture parameters. No return value. Both gestures are similar but for inverse operations.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_12

LANGUAGE: js
CODE:
```
// Pinch close gesture.
await androidDevice.pinchClose({
  selector: mySelector,
  percent: 0.8,
  speed: 200, // Optional
  timeout: 1500 // Optional
});

// Pinch open gesture.
await androidDevice.pinchOpen({
  selector: mySelector,
  percent: 1.2,
  speed: 200, // Optional
  timeout: 1500 // Optional
});
```

----------------------------------------

TITLE: Configuring Video Size in Browser Context (JavaScript)
DESCRIPTION: Defines the videoSize option for browser context. This option is deprecated in favor of recordVideo. It allows setting video frame dimensions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_73

LANGUAGE: javascript
CODE:
```
- `videoSize` <[Object]>
  - `width` <[int]> Video frame width.
  - `height` <[int]> Video frame height.
```

----------------------------------------

TITLE: Running Playwright with Experimental TypeScript ESM Support
DESCRIPTION: Command for running Playwright tests with experimental TypeScript ESM module support enabled, which allows importing ESM modules in TypeScript code without requiring a compile step.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_56

LANGUAGE: bash
CODE:
```
npm i --save-dev @playwright/test@1.18.0-rc1
PW_EXPERIMENTAL_TS_ESM=1 npx playwright test
```

----------------------------------------

TITLE: Evaluating JavaScript in Electron Main Process
DESCRIPTION: Defines the pageFunction parameter for Electron evaluation functions in JavaScript. This allows executing JavaScript functions in the main Electron process.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_47

LANGUAGE: js
CODE:
```
- `pageFunction` <[function]|[Electron]>

Function to be evaluated in the main Electron process.
```

----------------------------------------

TITLE: Registering Custom Selector Engine with Playwright in Python (Synchronous)
DESCRIPTION: This Python sync Playwright snippet shows registration of a custom selector engine for tag-based selection, utilizing the synchronous API with the Playwright context manager. It depends on 'playwright.sync_api', and demonstrates usage for element querying and combination with built-in locators. Inputs are the engine's JavaScript code and engine name; outputs include button locators and their counts. Code must be run inside a sync_playwright context.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-selectors.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
from playwright.sync_api import sync_playwright, Playwright\n\ndef run(playwright: Playwright):\n    tag_selector = """\n      {\n          // Returns the first element matching given selector in the root's subtree.\n          query(root, selector) {\n              return root.querySelector(selector);\n          },\n          // Returns all elements matching given selector in the root's subtree.\n          queryAll(root, selector) {\n              return Array.from(root.querySelectorAll(selector));\n          }\n      }"""\n\n    # Register the engine. Selectors will be prefixed with \"tag=\".\n    playwright.selectors.register(\"tag\", tag_selector)\n    browser = playwright.chromium.launch()\n    page = browser.new_page()\n    page.set_content('<div><button>Click me</button></div>')\n\n    # Use the selector prefixed with its name.\n    button = page.locator('tag=button')\n    # Combine it with built-in locators.\n    page.locator('tag=div').get_by_text('Click me').click()\n    # Can use it in any methods supporting selectors.\n    button_count = page.locator('tag=button').count()\n    print(button_count)\n    browser.close()\n\nwith sync_playwright() as playwright:\n    run(playwright)
```

----------------------------------------

TITLE: HTML List for Partial ARIA Snapshot Matching Example
DESCRIPTION: This HTML snippet presents an unordered list (ul) containing three list items (li). It serves as an example for demonstrating partial matching of child elements within a parent in an ARIA snapshot.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_16

LANGUAGE: html
CODE:
```
```html
<ul>
  <li>Feature A</li>
  <li>Feature B</li>
  <li>Feature C</li>
</ul>
```
```

----------------------------------------

TITLE: Accessing CDPSessionEvent Name in C#
DESCRIPTION: The CDPSessionEvent class has a property called eventName that returns the name of the event as a string. This property can be used to identify the specific event being handled.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-cdpsessionevent.md#2025-04-22_snippet_1

LANGUAGE: csharp
CODE:
```
property: CDPSessionEvent.eventName
- returns: <[string]>
```

----------------------------------------

TITLE: Running Playwright Tests with Custom Browser Executable
DESCRIPTION: Example of how to run Playwright tests using a custom browser executable by specifying the path using environment variables.
SOURCE: https://github.com/microsoft/playwright/blob/main/CONTRIBUTING.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
CRPATH=<path-to-executable> npm run ctest
```

----------------------------------------

TITLE: HTTPS Proxy Connection Example with Node.js https Module
DESCRIPTION: Example showing how to create an HTTPS connection through a proxy server using the https-proxy-agent module. Uses the built-in https module to make a GET request to an HTTPS endpoint via a proxy.
SOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
var url = require('url');
var https = require('https');
var HttpsProxyAgent = require('https-proxy-agent');

// HTTP/HTTPS proxy to connect to
var proxy = process.env.http_proxy || 'http://168.63.76.32:3128';
console.log('using proxy server %j', proxy);

// HTTPS endpoint for the proxy to connect to
var endpoint = process.argv[2] || 'https://graph.facebook.com/tootallnate';
console.log('attempting to GET %j', endpoint);
var options = url.parse(endpoint);

// create an instance of the `HttpsProxyAgent` class with the proxy server information
var agent = new HttpsProxyAgent(proxy);
options.agent = agent;

https.get(options, function (res) {
  console.log('"response" event!', res.headers);
  res.pipe(process.stdout);
});
```

----------------------------------------

TITLE: Registering Custom Selector Engine with Playwright in C#
DESCRIPTION: This C# code sample registers a custom selector engine by supplying JavaScript as a string to the Playwright Selectors API, enabling element selection with the 'tag=' prefix in test queries. It uses async/await patterns, dependencies include Microsoft.Playwright, and the selector can be used in combination with other locators for interaction and counting. Engine script, name, and selectors are inputs; outputs are found DOM elements. Must be run in an async context and uses Playwright's browser automation capabilities.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-selectors.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;\n\nusing var playwright = await Playwright.CreateAsync();\n// Script that evaluates to a selector engine instance. The script is evaluated in the page context.\nawait playwright.Selectors.RegisterAsync(\"tag\", new()\n{\n    Script = @\"{\n    // Returns the first element matching given selector in the root's subtree.\n    query(root, selector) {\n        return root.querySelector(selector);\n      },\n      // Returns all elements matching given selector in the root's subtree.\n      queryAll(root, selector) {\n        return Array.from(root.querySelectorAll(selector));\n      }\n    }\"\n});\n\nawait using var browser = await playwright.Chromium.LaunchAsync();\nvar page = await browser.NewPageAsync();\nawait page.SetContentAsync(\"<div><button>Click me</button></div>\");\n// Use the selector prefixed with its name.\nvar button = page.Locator(\"tag=button\");\n// Combine it with built-in locators.\nawait page.Locator(\"tag=div\").GetByText(\"Click me\").ClickAsync();\n// Can use it in any methods supporting selectors.\nint buttonCount = await page.Locator(\"tag=button\").CountAsync();
```

----------------------------------------

TITLE: Generating Trusted Client Certificate
DESCRIPTION: Creates a server-signed client certificate for valid authentication testing. Includes steps for generating the certificate request, signing with server certificate, and creating a PFX file with password protection.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/client-certificates/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
mkdir -p client/trusted
# generate server-signed (valid) certifcate
openssl req \
	-newkey rsa:4096 \
	-keyout client/trusted/key.pem \
	-out client/trusted/csr.pem \
	-nodes \
	-days 365 \
	-subj "/CN=Alice"

# sign with server_cert.pem
openssl x509 \
	-req \
	-in client/trusted/csr.pem \
	-CA server/server_cert.pem \
	-CAkey server/server_key.pem \
	-out client/trusted/cert.pem \
	-set_serial 01 \
	-days 365
# create pfx
openssl pkcs12 -export -out client/trusted/cert.pfx -inkey client/trusted/key.pem -in client/trusted/cert.pem -passout pass:secure
```

----------------------------------------

TITLE: Handling CDPSessionEvent in C#
DESCRIPTION: The CDPSessionEvent class provides an onEvent method for handling named events. It takes a JsonElement? argument and is used to process events raised by the CDPSession.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-cdpsessionevent.md#2025-04-22_snippet_0

LANGUAGE: csharp
CODE:
```
event: CDPSessionEvent.onEvent
- argument: <[JsonElement?]>
```

----------------------------------------

TITLE: Executing Shell Commands on AndroidDevice with Playwright JS
DESCRIPTION: AndroidDevice.open and AndroidDevice.shell allow execution of shell commands. open launches a shell process and returns a socket for interaction; shell executes a command and returns output buffer. Inputs: shell command (string). Outputs: AndroidSocket or Buffer. Used for advanced OS-level scripting.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_11

LANGUAGE: js
CODE:
```
// Launches a process and returns a socket.
const socket = await androidDevice.open({ command: 'logcat' });

// Executes a shell command and returns output.
const output = await androidDevice.shell({ command: 'ls /data/local/tmp' });
```

----------------------------------------

TITLE: Installing Azure Functions Core Tools for macOS
DESCRIPTION: Commands to install Azure Functions Core Tools version 4 using Homebrew on macOS, including a note for upgrading from previous versions.
SOURCE: https://github.com/microsoft/playwright/blob/main/utils/flakiness-dashboard/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
brew tap azure/functions
brew install azure-functions-core-tools@4
# if upgrading on a machine that has 2.x or 3.x installed:
brew link --overwrite azure-functions-core-tools@4
```

----------------------------------------

TITLE: HTML Structure for Filtering Locators Example
DESCRIPTION: This HTML snippet shows the structure of a product list, used to demonstrate locator filtering techniques.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_15

LANGUAGE: html
CODE:
```
<ul>
  <li>
    <h3>Product 1</h3>
    <button>Add to cart</button>
  </li>
  <li>
    <h3>Product 2</h3>
    <button>Add to cart</button>
  </li>
</ul>
```

----------------------------------------

TITLE: Component Testing Configuration Update
DESCRIPTION: Demonstrates the breaking change in component testing configuration requiring the use of defineConfig function.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_34

LANGUAGE: javascript
CODE:
```
// Before

import { type PlaywrightTestConfig, devices } from '@playwright/experimental-ct-react';
const config: PlaywrightTestConfig = {
  // ... config goes here ...
};
export default config;
```

LANGUAGE: javascript
CODE:
```
// After

import { defineConfig, devices } from '@playwright/experimental-ct-react';
export default defineConfig({
  // ... config goes here ...
});
```

----------------------------------------

TITLE: Testing Inactivity Logout - Playwright JavaScript
DESCRIPTION: Demonstrates controlling the clock to simulate user inactivity for inactivity timeout feature tests using Playwright in JavaScript. Clock installation, page interaction, fast forwarding, and assertion of logout messages are shown. Requires Playwright and a page with inactivity logic; expects accurate assertion of logout due to lack of interaction.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
// Initial time does not matter for the test, so we can pick current time.
await page.clock.install();
await page.goto('http://localhost:3333');
// Interact with the page
await page.getByRole('button').click();

// Fast forward time 5 minutes as if the user did not do anything.
// Fast forward is like closing the laptop lid and opening it after 5 minutes.
// All the timers due will fire once immediately, as in the real browser.
await page.clock.fastForward('05:00');

// Check that the user was logged out automatically.
await expect(page.getByText('You have been logged out due to inactivity.')).toBeVisible();
```

----------------------------------------

TITLE: Installing Playwright with HTTPS Proxy (Java)
DESCRIPTION: Commands to install Playwright browsers through an HTTPS proxy for Java implementations. Includes examples for bash, batch, and powershell environments.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_21

LANGUAGE: bash
CODE:
```
HTTPS_PROXY=https://192.0.2.1 mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install"
```

LANGUAGE: batch
CODE:
```
set HTTPS_PROXY=https://192.0.2.1
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install"
```

LANGUAGE: powershell
CODE:
```
$Env:HTTPS_PROXY="https://192.0.2.1"
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install"
```

----------------------------------------

TITLE: Using Legacy Text Locator in Playwright
DESCRIPTION: Demonstrates how to use the legacy text locator to click on an element containing specific text. This method is case-insensitive, trims whitespace, and searches for substrings.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_17

LANGUAGE: javascript
CODE:
```
await page.locator('text=Log in').click();
```

LANGUAGE: java
CODE:
```
page.locator("text=Log in").click();
```

LANGUAGE: python
CODE:
```
await page.locator("text=Log in").click()
```

LANGUAGE: csharp
CODE:
```
await page.Locator("text=Log in").ClickAsync();
```

----------------------------------------

TITLE: Linting Vue project files
DESCRIPTION: Runs linting tools to check for code errors and enforce coding standards, with automatic fixes where possible.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-vue-cli/README.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
npm run lint
```

----------------------------------------

TITLE: Registering Custom Selector Engine with Playwright in Java
DESCRIPTION: This Java snippet shows how to register a custom selector engine by providing an engine script as a string, enabling element selection by tag with the 'tag=' prefix. It uses the Playwright Java API, requires script definition matching the engine interface, and demonstrates interactions with the browser, page, and locators. Inputs include the engine name and script; outputs include located elements and their counts. Dependencies: Playwright Java APIs and a supported browser driver.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-selectors.md#2025-04-22_snippet_1

LANGUAGE: java
CODE:
```
// Script that evaluates to a selector engine instance. The script is evaluated in the page context.\nString createTagNameEngine = \"{\n\" +\n  \"  // Returns the first element matching given selector in the root's subtree.\\n\" +\n  \"  query(root, selector) {\\n\" +\n  \"    return root.querySelector(selector);\\n\" +\n  \"  },\\n\" +\n  \"  // Returns all elements matching given selector in the root's subtree.\\n\" +\n  \"  queryAll(root, selector) {\\n\" +\n  \"    return Array.from(root.querySelectorAll(selector));\\n\" +\n  \"  }\\n\" +\n  \"}\";\n// Register the engine. Selectors will be prefixed with \"tag=\".\nplaywright.selectors().register(\"tag\", createTagNameEngine);\nBrowser browser = playwright.firefox().launch();\nPage page = browser.newPage();\npage.setContent(\"\u003cdiv\u003e\u003cbutton\u003eClick me\u003c/button\u003e\u003c/div\u003e\");\n// Use the selector prefixed with its name.\nLocator button = page.locator(\"tag=button\");\n// Combine it with built-in locators.\npage.locator(\"tag=div\").getByText(\"Click me\").click();\n// Can use it in any methods supporting selectors.\nint buttonCount = (int) page.locator(\"tag=button\").count();\nbrowser.close();
```

----------------------------------------

TITLE: Setting Custom Chromium Path
DESCRIPTION: Example of setting a custom Chromium binary path using the BIDI_CRPATH environment variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/bidi/README.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
BIDI_CRPATH='/Users/myself/Downloads/chrome-mac-arm64/Google Chrome for Testing.app/Contents/MacOS/Google Chrome for Testing'
```

----------------------------------------

TITLE: Ignoring All Default Browser Arguments in Playwright (CSharp/Java)
DESCRIPTION: Defines the `ignoreAllDefaultArgs` boolean browser launch option for Playwright in C# and Java. If `true`, Playwright omits all its default launch arguments, using only those provided in `args`. This is a potentially dangerous option. Defaults to `false`.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_33

LANGUAGE: markdown
CODE:
```
- `ignoreAllDefaultArgs` <[boolean]>
```

----------------------------------------

TITLE: Locating Element by Title Attribute in HTML
DESCRIPTION: Example showing HTML element with title attribute for locating.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_7

LANGUAGE: html
CODE:
```
<span title='Issues count'>25 issues</span>
```

----------------------------------------

TITLE: Mocking WebSocket Messages with Playwright in Python (Asynchronous)
DESCRIPTION: Implements a WebSocket route to mock responses asynchronously using Playwright's async API for Python. Requires asyncio setup and Playwright for Python. A page instance is needed to route WebSockets.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
async def message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    ws.send("response")

await page.route_web_socket("wss://example.com/ws", lambda ws: ws.on_message(
    lambda message: message_handler(ws, message)
))
```

----------------------------------------

TITLE: Starting Selenium Hub and Node Docker Containers
DESCRIPTION: Commands to start Selenium hub and node Docker containers for a distributed setup.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/selenium-grid.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
docker run -d -p 4442-4444:4442-4444 --name selenium-hub selenium/hub:4.25.0
docker run -d -p 5555:5555 \
    --shm-size="2g" \
    -e SE_EVENT_BUS_HOST=<selenium-hub-ip> \
    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \
    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \
    -e SE_NODE_GRID_URL="http://<selenium-hub-ip>:4444"
    selenium/node-chromium:4.25.0
```

----------------------------------------

TITLE: Defining PlaywrightException Class Structure - Java
DESCRIPTION: Class declaration showing PlaywrightException extending RuntimeException. This exception is thrown when Playwright operations terminate abnormally, such as when a browser closes during page evaluation.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-playwrightexception.md#2025-04-22_snippet_0

LANGUAGE: java
CODE:
```
public class PlaywrightException extends RuntimeException {
    // Implementation details not shown
}
```

----------------------------------------

TITLE: Capturing Accessibility Snapshot with Playwright in Python (Sync)
DESCRIPTION: Captures the current state of the accessibility tree in a web page using Playwright's deprecated Accessibility class method `snapshot()`. Logs the snapshot to the console. Requires setup with Playwright and a page instance using synchronous Python code. Returns the root accessible node as a Python dictionary.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-accessibility.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
snapshot = page.accessibility.snapshot()
print(snapshot)
```

----------------------------------------

TITLE: Connecting to Remote Playwright Server with Python Async API
DESCRIPTION: Python code to connect to a remote Playwright server using the asynchronous API.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
from playwright.async_api import async_playwright

async with async_playwright() as p:
    browser = await p.chromium.connect("ws://127.0.0.1:3000/")
```

----------------------------------------

TITLE: Capturing Accessibility Snapshot with Playwright in C#
DESCRIPTION: Captures the current state of the accessibility tree in a web page using Playwright's deprecated Accessibility class method `SnapshotAsync()`. Logs the JSON serialized snapshot to the console. Requires setup with Playwright and a page instance in C#. Returns a JsonElement representing the accessible node tree.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-accessibility.md#2025-04-22_snippet_4

LANGUAGE: csharp
CODE:
```
var accessibilitySnapshot = await page.Accessibility.SnapshotAsync();
Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(accessibilitySnapshot));
```

----------------------------------------

TITLE: Configuring sirv for Single-Page Application Mode
DESCRIPTION: JavaScript configuration in package.json to enable single-page application mode in sirv, allowing it to respond to requests for any path rather than just matching files.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
"start": "sirv public --single"
```

----------------------------------------

TITLE: Visual Regression Test for Identical Images
DESCRIPTION: This test compares two identical images to ensure they are recognized as the same.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/image_tools/fixtures/should-match/looks-same-tests/README.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
test('should return true for similar images', async ({ page }) => {
  const image1 = await page.screenshot();
  await compareImageFile(image1, 'identical/1.png');
});
```

----------------------------------------

TITLE: Inactivity Monitoring Demo - HTML
DESCRIPTION: Provides sample HTML and JavaScript for an inactivity timeout feature. The code counts down the time remaining and updates the DOM, logging out the user after a 5-minute window. No external requirements; serves as a basis for automated UI tests of inactivity logic.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_8

LANGUAGE: html
CODE:
```
<div id=\"remaining-time\" data-testid=\"remaining-time\"></div>\n<script>\n  const endTime = Date.now() + 5 * 60_000;\n  const renderTime = () => {\n    const diffInSeconds = Math.round((endTime - Date.now()) / 1000);\n    if (diffInSeconds <= 0) {\n      document.getElementById('remaining-time').textContent =\n        'You have been logged out due to inactivity.';\n    } else {\n      document.getElementById('remaining-time').textContent =\n        `You will be logged out in ${diffInSeconds} seconds.`;\n    }\n    setTimeout(renderTime, 1000);\n  };\n  renderTime();\n</script>\n<button type=\"button\">Interaction</button>
```

----------------------------------------

TITLE: HTML Select Element Example
DESCRIPTION: Provides an example of an HTML <select> element with multiple options, used as context for demonstrating how to select options using Playwright locators.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#_snippet_32

LANGUAGE: HTML
CODE:
```
<select multiple>
  <option value="red">Red</option>
  <option value="green">Green</option>
  <option value="blue">Blue</option>
</select>
```

----------------------------------------

TITLE: Fetching and Using an ElementHandle with waitForSelector in JavaScript
DESCRIPTION: Shows how to obtain an [ElementHandle] for a DOM element (`#box`) using `page.waitForSelector` in JavaScript, which waits for visibility. It then demonstrates asserting the element's bounding box dimensions and class attribute. Note: Using [ElementHandle] is discouraged in favor of [Locator].
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
```js
// Get the element handle
const elementHandle = page.waitForSelector('#box');

// Assert bounding box for the element
const boundingBox = await elementHandle.boundingBox();
expect(boundingBox.width).toBe(100);

// Assert attribute for the element
const classNames = await elementHandle.getAttribute('class');
expect(classNames.includes('highlighted')).toBeTruthy();
```
```

----------------------------------------

TITLE: Retrieving WebView Process PID
DESCRIPTION: This method returns the process ID (PID) of the WebView. It is a synchronous method that returns an integer.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androidwebview.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
method: AndroidWebView.pid
- returns: <[int]>
```

----------------------------------------

TITLE: Connecting Playwright to WebView2 using Python (Async)
DESCRIPTION: This snippet demonstrates how to connect Playwright to a running WebView2 application using Python's async syntax. It establishes a connection over CDP and retrieves the browser context and page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
browser = await playwright.chromium.connect_over_cdp("http://localhost:9222")
context = browser.contexts[0]
page = context.pages[0]
```

----------------------------------------

TITLE: Connecting Playwright to WebView2 using Python (Sync)
DESCRIPTION: This snippet shows how to connect Playwright to a running WebView2 application using Python's synchronous syntax. It establishes a connection over CDP and retrieves the browser context and page.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
browser = playwright.chromium.connect_over_cdp("http://localhost:9222")
context = browser.contexts[0]
page = context.pages[0]
```

----------------------------------------

TITLE: Getting WebView Package Identifier
DESCRIPTION: This method returns the package identifier of the WebView. It is a synchronous method that returns a string.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androidwebview.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
method: AndroidWebView.pkg
- returns: <[string]>
```

----------------------------------------

TITLE: Registering Service Worker in HTML Page
DESCRIPTION: A simple HTML page that registers the complex Service Worker using the navigator.serviceWorker API. The registration promise is stored in the window object for later reference.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/service-workers-experimental-network-events-js.md#2025-04-22_snippet_5

LANGUAGE: html
CODE:
```
<!-- filename: index.html -->
<script>
  window.registrationPromise = navigator.serviceWorker.register('/complex-service-worker.js');
</script>
```

----------------------------------------

TITLE: Custom Stylesheet for Screenshots
DESCRIPTION: Defines the `style` option for applying custom CSS while capturing screenshots, useful for hiding dynamic elements or modifying appearance.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_113

LANGUAGE: typescript
CODE:
```
- `style` <string>
```

----------------------------------------

TITLE: Removing the TypeScript Setup Script
DESCRIPTION: Command to remove the TypeScript setup script if you don't plan to use TypeScript in your Svelte project.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
rm scripts/setupTypeScript.js
```

----------------------------------------

TITLE: Pressing Keys on Widgets with AndroidDevice in Playwright JS
DESCRIPTION: AndroidDevice.press simulates a key press (AndroidKey) within the context of a selector. Optional timeout is available. Useful for filling forms or triggering key events on UI components. Inputs: selector and key. No returned value.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_13

LANGUAGE: js
CODE:
```
// Press a key in the context of a selector.
await androidDevice.press({
  selector: mySelector,
  key: 'Enter',
  timeout: 1000 // Optional
});
```

----------------------------------------

TITLE: Verifying Node.js Version for Playwright Development
DESCRIPTION: Checks the installed Node.js version to ensure it's 20 or later, which is required for Playwright development.
SOURCE: https://github.com/microsoft/playwright/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
node --version
```

----------------------------------------

TITLE: Playwright WebView2 Test Example
DESCRIPTION: Example test class demonstrating navigation to Playwright website and verifying visibility of 'Get Started' link using WebView2 test base class.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_15

LANGUAGE: csharp
CODE:
```
using Microsoft.Playwright;
using Microsoft.Playwright.MSTest;

namespace PlaywrightTests;

[TestClass]
public class ExampleTest : WebView2Test
{
    [TestMethod]
    public async Task HomepageHasPlaywrightInTitleAndGetStartedLinkLinkingtoTheIntroPage()
    {
        await Page.GotoAsync("https://playwright.dev");
        var getStarted = Page.GetByText("Get Started");
        await Expect(getStarted).ToBeVisibleAsync();
    }
}
```

----------------------------------------

TITLE: YAML Partial Match Snapshot
DESCRIPTION: YAML snapshot showing partial matching of list elements
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_19

LANGUAGE: yaml
CODE:
```
- list
  - listitem: Feature B
```

----------------------------------------

TITLE: Running Bidi Tests with Custom Firefox Path
DESCRIPTION: Command to run Bidi tests with a custom Firefox binary path specified through the BIDI_FFPATH environment variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/bidi/README.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
BIDI_FFPATH='/Users/myself/playwright/firefox/mac_arm-beta_138.0b5/Firefox.app/Contents/MacOS/firefox' npm run biditest -- --project='moz-firefox-*'
```

----------------------------------------

TITLE: Capturing Accessibility Snapshot with Playwright in Python (Async)
DESCRIPTION: Captures the current state of the accessibility tree in a web page using Playwright's deprecated Accessibility class method `snapshot()`. Logs the snapshot to the console. Requires setup with Playwright and a page instance, utilizing Python's async capabilities. Returns the root accessible node as a Python dictionary.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-accessibility.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
snapshot = await page.accessibility.snapshot()
print(snapshot)
```

----------------------------------------

TITLE: ElementHandle Selector Methods
DESCRIPTION: Methods for finding elements within the subtree of an ElementHandle using CSS selectors. These methods are discouraged in favor of Locator-based alternatives.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_41

LANGUAGE: typescript
CODE:
```
async querySelector(selector: string): Promise<ElementHandle|null>;
async querySelectorAll(selector: string): Promise<Array<ElementHandle>>;
```

----------------------------------------

TITLE: Clicking Anchor Element with ElementHandle in CSharp
DESCRIPTION: Describes clicking an anchor ('a') DOM element using ElementHandle in CSharp with Playwright. It involves asynchronous querying and clicking of the DOM element.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_4

LANGUAGE: CSharp
CODE:
```
var handle = await page.QuerySelectorAsync("a");
await handle.ClickAsync();
```

----------------------------------------

TITLE: Fetching and Using an ElementHandle with waitForSelector in Python (Async)
DESCRIPTION: Shows how to obtain an [ElementHandle] for a DOM element (`#box`) using `page.wait_for_selector` in asynchronous Python, which waits for visibility. It then demonstrates asserting the element's bounding box dimensions and class attribute. Note: Using [ElementHandle] is discouraged in favor of [Locator].
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
```python async
# Get the element handle
element_handle = page.wait_for_selector('#box')

# Assert bounding box for the element
bounding_box = await element_handle.bounding_box()
assert bounding_box.width == 100

# Assert attribute for the element
class_names = await element_handle.get_attribute('class')
assert 'highlighted' in class_names
```
```

----------------------------------------

TITLE: Building Vue 3 Project for Production
DESCRIPTION: Command to compile and minify the Vue 3 project for production deployment.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-vue-vite/README.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
npm run build
```

----------------------------------------

TITLE: Transparent Service Worker Implementation
DESCRIPTION: Example of a Service Worker that acts as a transparent proxy, forwarding fetch requests and immediately claiming clients upon activation. This is a common pattern for Service Workers that provide optimization without changing functionality.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/service-workers-experimental-network-events-js.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
self.addEventListener('fetch', event => {
  // actually make the request
  const responsePromise = fetch(event.request);
  // send it back to the page
  event.respondWith(responsePromise);
});

self.addEventListener('activate', event => {
  event.waitUntil(clients.claim());
});
```

----------------------------------------

TITLE: Interacting with an Element using ElementHandle (Stale Potential) in C#
DESCRIPTION: Shows finding an element using `page.QuerySelectorAsync` to get an [ElementHandle] and performing actions (hover, click) in C#. This method can lead to errors if the element becomes stale due to page updates.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_19

LANGUAGE: csharp
CODE:
```
```csharp
var handle = await page.QuerySelectorAsync("text=Submit");
await handle.HoverAsync();
await handle.ClickAsync();
```
```

----------------------------------------

TITLE: Multiple Elements Class List HTML
DESCRIPTION: HTML structure showing a list of div elements with different class combinations for testing array-based class assertions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_20

LANGUAGE: html
CODE:
```
<div class='list'></div>
  <div class='component inactive'></div>
  <div class='component active'></div>
  <div class='component inactive'></div>
</div>
```

----------------------------------------

TITLE: Running Playwright Tools in Experimental Dev Mode with HMR
DESCRIPTION: Commands for running various Playwright tools in experimental development mode with Hot Module Replacement (HMR) enabled.
SOURCE: https://github.com/microsoft/playwright/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
PW_HMR=1 npm run watch
PW_HMR=1 npx playwright show-trace
PW_HMR=1 npm run ctest -- --ui
PW_HMR=1 npx playwright codegen
PW_HMR=1 npx playwright show-report
```

----------------------------------------

TITLE: Using SocksProxyAgent with HTTPS Module
DESCRIPTION: Example showing how to use SocksProxyAgent with Node.js HTTPS module for secure requests through a SOCKS proxy. Demonstrates proxy setup and HTTPS request handling.
SOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
var url = require('url');
var https = require('https');
var SocksProxyAgent = require('socks-proxy-agent');

var proxy = process.env.socks_proxy || 'socks://127.0.0.1:1080';
console.log('using proxy server %j', proxy);

var endpoint = process.argv[2] || 'https://encrypted.google.com/';
console.log('attempting to GET %j', endpoint);
var opts = url.parse(endpoint);

var agent = new SocksProxyAgent(proxy);
opts.agent = agent;

https.get(opts, function (res) {
	console.log('"response" event!', res.headers);
	res.pipe(process.stdout);
});
```

----------------------------------------

TITLE: Deploying a Svelte App to Surge
DESCRIPTION: Commands to build the Svelte application and then deploy the compiled files in the public directory to Surge with a custom domain.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_10

LANGUAGE: bash
CODE:
```
npm run build
surge public my-project.surge.sh
```

----------------------------------------

TITLE: Setting Required Libraries for Playwright in CMake
DESCRIPTION: Defines the libraries that Playwright depends on, with WebKit as the primary dependency.
SOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/mac/CMakeLists.txt#2025-04-22_snippet_3

LANGUAGE: cmake
CODE:
```
set(Playwright_LIBRARIES
    WebKit
)
```

----------------------------------------

TITLE: Incorrect Way to Configure Custom Parameters in Playwright Config
DESCRIPTION: Example showing the incorrect approach to defining custom parameters in Playwright configuration prior to v1.18, which no longer works in the current version.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_58

LANGUAGE: javascript
CODE:
```
// WRONG: THIS SNIPPET DOES NOT WORK SINCE v1.18.

// fixtures.js
const test = base.extend({
  myParameter: 'default',
});

// playwright.config.js
module.exports = {
  use: {
    myParameter: 'value',
  },
};
```

----------------------------------------

TITLE: Location Class Properties Definition in Playwright JavaScript API
DESCRIPTION: Defines three core properties of the Location class: file path as string, line number as integer, and column number as integer. Used to pinpoint exact positions of test cases and suites in source code.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-location.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
class Location {
  file: string;    // Path to the source file
  line: number;    // Line number in the source file
  column: number;  // Column number in the source file
}
```

----------------------------------------

TITLE: CLI Commands for Recording HAR
DESCRIPTION: Command line interface commands for recording HAR files across different programming languages.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_15

LANGUAGE: bash
CODE:
```
# JavaScript
npx playwright open --save-har=example.har --save-har-glob="**/api/**" https://example.com

# Java
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="open --save-har=example.har --save-har-glob='**/api/**' https://example.com"

# Python
playwright open --save-har=example.har --save-har-glob="**/api/**" https://example.com

# C#
pwsh bin/Debug/netX/playwright.ps1 open --save-har=example.har --save-har-glob="**/api/**" https://example.com
```

----------------------------------------

TITLE: HTML Structure for Select Element
DESCRIPTION: HTML markup showing a <select> element with multiple selection enabled and three color options (Red, Green, Blue).
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_83

LANGUAGE: html
CODE:
```
<select multiple>
  <option value="red">Red</option>
  <option value="green">Green</option>
  <option value="blue">Blue</option>
</select>
```

----------------------------------------

TITLE: Building Vue project for production
DESCRIPTION: Compiles and minifies the Vue.js application for production deployment, creating optimized assets.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-vue-cli/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npm run build
```

----------------------------------------

TITLE: Building React Production Bundle
DESCRIPTION: Creates an optimized production build in the build folder with minified bundles and hashed filenames.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-react17/README.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
npm run build
```

----------------------------------------

TITLE: Running Playwright Tests with Browser Configuration
DESCRIPTION: Command to run Playwright tests specifying the browser using launch configuration options.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
dotnet test -- Playwright.BrowserName=webkit
```

----------------------------------------

TITLE: Setting Up TypeScript in a Svelte Project
DESCRIPTION: Command to run the included setup script that configures a TypeScript development environment for a Svelte project.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
node scripts/setupTypeScript.js
```

----------------------------------------

TITLE: Setting Private Definitions and Libraries for Playwright in CMake
DESCRIPTION: Defines the private compiler definitions and required libraries for the Playwright executable, including Windows-specific libraries and WebKit dependencies.
SOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/win/CMakeLists.txt#2025-04-22_snippet_2

LANGUAGE: cmake
CODE:
```
set(Playwright_PRIVATE_DEFINITIONS _UNICODE)
set(Playwright_PRIVATE_LIBRARIES
    WebKit::WTF
    comctl32
    shlwapi
    user32
)
```

----------------------------------------

TITLE: Running Playwright Test Runner Tests
DESCRIPTION: Command for running the test runner tests in Playwright.
SOURCE: https://github.com/microsoft/playwright/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
npm run ttest
```

----------------------------------------

TITLE: Simulating Current Time Display - HTML
DESCRIPTION: This HTML snippet dynamically updates a page element to show the current time every second using setInterval and toLocaleString. It's typically used as a simple time renderer for demonstration, highlighting the effect of clock manipulation in tests. No external dependencies are required; expected input is a loaded web page and output is an incrementing time displayed inside an element with id 'current-time'.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<div id=\"current-time\" data-testid=\"current-time\"></div>\n<script>\n  const renderTime = () => {\n    document.getElementById('current-time').textContent =\n        new Date().toLocaleString();\n  };\n  setInterval(renderTime, 1000);\n</script>
```

----------------------------------------

TITLE: Running Dependency Mapping Script for Ubuntu Bionic
DESCRIPTION: This command demonstrates how to run the mapping script for Ubuntu Bionic. The script executes in a Docker container with the specified distribution and saves results to a 'RUN_RESULT' file.
SOURCE: https://github.com/microsoft/playwright/blob/main/utils/linux-browser-dependencies/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
./run.sh ubuntu:bionic
```

----------------------------------------

TITLE: Creating an External Svelte Store for HMR State Preservation
DESCRIPTION: This code demonstrates how to create a simple external store in Svelte to preserve component state during Hot Module Replacement (HMR). By using an external store, the state remains intact when components are reloaded during development.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte-vite/README.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// store.ts
// An extremely simple external store
import { writable } from 'svelte/store'
export default writable(0)
```

----------------------------------------

TITLE: Running Playwright Tests on Specific Browser (PowerShell)
DESCRIPTION: Commands to run Playwright tests on a specific browser (WebKit in this example) using environment variable in PowerShell.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_6

LANGUAGE: csharp
CODE:
```
$env:BROWSER="webkit"
dotnet test
```

----------------------------------------

TITLE: Building PrintDeps on Windows
DESCRIPTION: Instructions for building the PrintDeps tool using Visual Studio 2019. The tool is built in x64/Release configuration and the output binary is committed to bin/PrintDeps.exe for npm distribution.
SOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/winldd/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
PrintDeps.sln
```

----------------------------------------

TITLE: Running Playwright Linter
DESCRIPTION: Command to run the linter for checking coding style and other issues in the Playwright codebase.
SOURCE: https://github.com/microsoft/playwright/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
npm run lint
```

----------------------------------------

TITLE: Running Playwright Library Tests
DESCRIPTION: Commands for running library tests in Playwright, including a fast path for Chromium and a slow path for all three browsers.
SOURCE: https://github.com/microsoft/playwright/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
# fast path runs all tests in Chromium
npm run ctest

# slow path runs all tests in three browsers
npm run test
```

----------------------------------------

TITLE: HTML Form Controls Example
DESCRIPTION: Example HTML structure showing heading, checkbox and button elements for demonstrating role-based locators.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_2

LANGUAGE: html
CODE:
```
<h3>Sign up</h3>
<label>
  <input type="checkbox" /> Subscribe
</label>
<br/>
<button>Submit</button>
```

----------------------------------------

TITLE: Removed Playwright `noWaitAfter` Option (Deprecated)
DESCRIPTION: Defines the `noWaitAfter` boolean option for Playwright actions. This option is deprecated and currently has no effect on execution.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_9

LANGUAGE: markdown
CODE:
```
- `noWaitAfter` <[boolean]>
```

----------------------------------------

TITLE: Starting the Development Server with Rollup
DESCRIPTION: Command to launch the development server using Rollup, which enables hot reloading for a smoother development experience.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Installing Vercel CLI for Deployment
DESCRIPTION: Command to globally install the Vercel CLI tool, which is needed for deploying Svelte applications to Vercel's hosting platform.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
npm install -g vercel
```

----------------------------------------

TITLE: Defining Source Files for Playwright in CMake
DESCRIPTION: Specifies the source files to be compiled for the Playwright executable, including the main window implementation, WebKit browser window, and Windows entry point.
SOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/win/CMakeLists.txt#2025-04-22_snippet_1

LANGUAGE: cmake
CODE:
```
set(Playwright_SOURCES
    Common.cpp
    MainWindow.cpp
    PlaywrightLib.rc
    WebKitBrowserWindow.cpp
    WinMain.cpp
    stdafx.cpp
)
```

----------------------------------------

TITLE: Implementing Complex Service Worker with Custom Request Handling in JavaScript
DESCRIPTION: A Service Worker implementation that demonstrates various request handling strategies including caching, request rewriting, response generation, and fallthrough. It pre-caches an addressbook.json file during installation and handles different URL patterns differently.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/service-workers-experimental-network-events-js.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
self.addEventListener('install', function(event) {
  event.waitUntil(
      caches.open('v1').then(function(cache) {
      // 1. Pre-fetches and caches /addressbook.json
        return cache.add('/addressbook.json');
      })
  );
});

// Opt to handle FetchEvent's from the page
self.addEventListener('fetch', event => {
  event.respondWith(
      (async () => {
        // 1. Try to first serve directly from caches
        const response = await caches.match(event.request);
        if (response)
          return response;

        // 2. Re-write request for /foo to /bar
        if (event.request.url.endsWith('foo'))
          return fetch('./bar');

        // 3. Prevent tracker.js from being retrieved, and returns a placeholder response
        if (event.request.url.endsWith('tracker.js')) {
          return new Response('console.log("no trackers!")', {
            status: 200,
            headers: { 'Content-Type': 'text/javascript' },
          });
        }

        // 4. Otherwise, fallthrough, perform the fetch and respond
        return fetch(event.request);
      })()
  );
});

self.addEventListener('activate', event => {
  event.waitUntil(clients.claim());
});
```

----------------------------------------

TITLE: Building the Playwright Application in CMake
DESCRIPTION: Finalizes the build configuration by including the necessary directories, defining the macOS bundle executable target, setting the Info.plist file, linking libraries, and establishing dependencies on the NIB resources.
SOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/mac/CMakeLists.txt#2025-04-22_snippet_6

LANGUAGE: cmake
CODE:
```
include_directories(${Playwright_INCLUDE_DIRECTORIES})
add_executable(Playwright MACOSX_BUNDLE ${Playwright_SOURCES})
set_target_properties(Playwright PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${PLAYWRIGHT_DIR}/Info.plist)
target_link_libraries(Playwright ${Playwright_LIBRARIES})
add_dependencies(Playwright PlaywrightNibs)
```

----------------------------------------

TITLE: Installing Azure CLI on macOS
DESCRIPTION: Command to install the Azure Command Line Interface (CLI) using Homebrew on macOS.
SOURCE: https://github.com/microsoft/playwright/blob/main/utils/flakiness-dashboard/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
brew update && brew install azure-cli
```

----------------------------------------

TITLE: Setting Include Directories for Playwright in CMake
DESCRIPTION: Defines the private include directories for the Playwright executable, including the binary directory and WebCore framework headers.
SOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/win/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
set(Playwright_PRIVATE_INCLUDE_DIRECTORIES
    ${CMAKE_BINARY_DIR}
    ${WebCore_PRIVATE_FRAMEWORK_HEADERS_DIR}
)
```

----------------------------------------

TITLE: Logging into Azure CLI
DESCRIPTION: Command to log into Azure CLI, which will open a popup for authentication.
SOURCE: https://github.com/microsoft/playwright/blob/main/utils/flakiness-dashboard/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
az login
```

----------------------------------------

TITLE: Time Display HTML Implementation with Interval Timer
DESCRIPTION: HTML implementation of a time display component that updates every second using setInterval. This component displays the current time in a div element with a data-testid attribute for testing purposes.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_15

LANGUAGE: html
CODE:
```
<div id="current-time" data-testid="current-time"></div>
<script>
  const renderTime = () => {
    document.getElementById('current-time').textContent =
        new Date().toLocaleString();
  };
  setInterval(renderTime, 1000);
</script>
```

----------------------------------------

TITLE: HttpsProxyAgent Class Configuration Options
DESCRIPTION: Configuration options for initializing an HttpsProxyAgent instance that implements an http.Agent subclass for proxying HTTPS and WebSocket requests through an HTTP CONNECT tunnel.
SOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_6

LANGUAGE: text
CODE:
```
{
  host: String,     // Proxy host to connect to (may use hostname as well)
  port: Number,     // Proxy port to connect to
  protocol: String, // If 'https:', then use TLS to connect to the proxy
  headers: Object,  // Additional HTTP headers for CONNECT method
  // Any other options are passed to net.connect()/tls.connect()
}
```

----------------------------------------

TITLE: Handling HTTP Client Requests in Node.js
DESCRIPTION: This function allows access to HTTP client requests with options for socket creation. It enables customization of how socket connections are established for HTTP requests, with special handling for HTTPS requests.
SOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
callback(http.ClientRequest req, Object options, Function cb) → undefined
```

----------------------------------------

TITLE: HTML Template for Component Testing with Playwright
DESCRIPTION: This HTML file serves as the template for rendering components during testing. It includes a root div for mounting components and links to a script file for runtime setup.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<html lang="en">
  <body>
    <div id="root"></div>
    <script type="module" src="./index.ts"></script>
  </body>
</html>
```

----------------------------------------

TITLE: Using SocksProxyAgent with HTTP Module
DESCRIPTION: Example demonstrating how to use SocksProxyAgent with Node.js HTTP module to make requests through a SOCKS proxy. Shows proxy configuration and request handling.
SOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
var url = require('url');
var http = require('http');
var SocksProxyAgent = require('socks-proxy-agent');

var proxy = process.env.socks_proxy || 'socks://127.0.0.1:1080';
console.log('using proxy server %j', proxy);

var endpoint = process.argv[2] || 'http://nodejs.org/api/';
console.log('attempting to GET %j', endpoint);
var opts = url.parse(endpoint);

var agent = new SocksProxyAgent(proxy);
opts.agent = agent;

http.get(opts, function (res) {
	console.log('"response" event!', res.headers);
	res.pipe(process.stdout);
});
```

----------------------------------------

TITLE: HTML Dynamic Header Example
DESCRIPTION: Sample HTML heading with dynamic number for regex matching demonstration
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_21

LANGUAGE: html
CODE:
```
<h1>Issues 12</h1>
```

----------------------------------------

TITLE: Configuring Linker Flags and Application Names in CMake
DESCRIPTION: Sets the linker flags to include the Cocoa framework and defines the executable and product names for the Playwright application.
SOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/mac/CMakeLists.txt#2025-04-22_snippet_4

LANGUAGE: cmake
CODE:
```
set(CMAKE_EXE_LINKER_FLAGS "-framework Cocoa")

set(EXECUTABLE_NAME Playwright)
set(PRODUCT_NAME Playwright)
```

----------------------------------------

TITLE: Configuring Include Directories for Playwright in CMake
DESCRIPTION: Sets up the include directories for the Playwright build, including the main source directory, forwarding headers directory, and the Playwright-specific directory.
SOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/mac/CMakeLists.txt#2025-04-22_snippet_2

LANGUAGE: cmake
CODE:
```
set(Playwright_INCLUDE_DIRECTORIES
    ${CMAKE_SOURCE_DIR}/Source
    ${FORWARDING_HEADERS_DIR}
    ${PLAYWRIGHT_DIR}
)
```

----------------------------------------

TITLE: HTTP Agent Passthrough Example
DESCRIPTION: Example showing how to create an HTTP agent that delegates requests to the global HTTP or HTTPS agent based on the endpoint security.
SOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_2

LANGUAGE: JavaScript
CODE:
```
agent(function (req, opts) {
  return opts.secureEndpoint ? https.globalAgent : http.globalAgent;
});
```

----------------------------------------

TITLE: Describing Injected Directory Contents in Markdown
DESCRIPTION: This markdown snippet explains the purpose of the 'injected' directory, which contains helper sources injected into the page. It also mentions that these sources are bundled into the build process.
SOURCE: https://github.com/microsoft/playwright/blob/main/packages/injected/src/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# Injected

This directory contains helper sources which are injected into the page.

These sources are bundled with the ebuild into `src/generated` as compile-time source constants. See `utils/generate_injected` for details.
```

----------------------------------------

TITLE: Automating browser actions with Puppeteer
DESCRIPTION: Example of browser automation using Puppeteer, including launching a browser, navigating to a page, and taking a screenshot.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/puppeteer-js.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const puppeteer = require('puppeteer');

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.setViewport({ width: 1280, height: 800 });
  await page.goto('https://playwright.dev/', {
    waitUntil: 'networkidle2',
  });
  await page.screenshot({ path: 'example.png' });
  await browser.close();
})();
```

----------------------------------------

TITLE: Installing NPM Dependencies for Flakiness Dashboard
DESCRIPTION: Commands to navigate to the flakiness dashboard directory and install NPM dependencies, which will be published as-is.
SOURCE: https://github.com/microsoft/playwright/blob/main/utils/flakiness-dashboard/README.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
cd utils/flakiness-dashboard/
npm install
```

----------------------------------------

TITLE: Installing dependencies for Vue CLI project
DESCRIPTION: Installs all required dependencies for the Vue.js project as defined in package.json.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-vue-cli/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install
```

----------------------------------------

TITLE: Ejecting from Create React App
DESCRIPTION: Removes the single build dependency and copies all configuration files into the project for full control. This is a one-way operation that cannot be reversed.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-react17/README.md#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
npm run eject
```

----------------------------------------

TITLE: CSS Styling for To-Do List Application
DESCRIPTION: The CSS styles define the visual appearance of the to-do list application. It includes styles for the task list items, form elements, and buttons, providing a clean and organized user interface.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/to-do-notifications/README.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-family: sans-serif;
}

body {
  margin: 50px auto;
  max-width: 800px;
}

h1 {
  margin-bottom: 16px;
  font-size: 2rem;
}

.note-wrapper {
  margin-bottom: 16px;
}

#new-task-form div {
  margin-bottom: 10px;
}

#new-task-form label, #new-task-form input {
  display: inline-block;
}

#new-task-form label {
  margin-right: 10px;
  width: 30%;
}

#task-title {
  width: 65%;
}

#deadline-hours, #deadline-minutes {
  width: 30%;
  margin-right: 3%;
}

#new-task-form button {
  width: 100px;
  height: 30px;
  margin-left: 30%;
  background-color: #666;
  color: white;
  border: 0;
  border-radius: 6px;
  cursor: pointer;
}

#task-list {
  list-style-type: none;
}

#task-list li {
  padding: 16px;
  width: 100%;
  border-bottom: 1px solid #eee;
}

.task-list-item {
  padding: 16px;
  width: 100%;
  border-bottom: 1px solid #eee;
  display: flex;
  flex-direction: column;
}

.task-title {
  font-weight: bold;
  margin-bottom: 6px;
}

.task-deadline {
  margin-bottom: 6px;
  color: #aaa;
}

.task-controls {
  display: flex;
}

.task-controls button {
  width: 100px;
  height: 30px;
  background-color: #666;
  color: white;
  border: 0;
  border-radius: 6px;
  cursor: pointer;
  margin-right: 16px;
}
```

----------------------------------------

TITLE: Passing Additional Capabilities to Selenium Grid
DESCRIPTION: Commands to run Playwright tests with additional capabilities for the Selenium Grid using the SELENIUM_REMOTE_CAPABILITIES environment variable.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/selenium-grid.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_CAPABILITIES="{'mygrid:options':{os:'windows',username:'John',password:'secure'}}" npx playwright test
```

LANGUAGE: bash
CODE:
```
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_CAPABILITIES="{'mygrid:options':{os:'windows',username:'John',password:'secure'}}" pytest --browser chromium
```

LANGUAGE: bash
CODE:
```
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_CAPABILITIES="{'mygrid:options':{os:'windows',username:'John',password:'secure'}}" mvn test
```

LANGUAGE: bash
CODE:
```
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_CAPABILITIES="{'mygrid:options':{os:'windows',username:'John',password:'secure'}}" dotnet test
```

----------------------------------------

TITLE: Simulating Current Time Display with Timers - HTML
DESCRIPTION: This HTML snippet sets up a demo page element that continually displays the current time. It uses setInterval to re-render the time every second. Intended for use with time manipulation tests, it relies on basic web APIs and targets an element by id.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_2

LANGUAGE: html
CODE:
```
<div id=\"current-time\" data-testid=\"current-time\"></div>\n<script>\n  const renderTime = () => {\n    document.getElementById('current-time').textContent =\n        new Date().toLocaleString();\n  };\n  setInterval(renderTime, 1000);\n</script>
```

----------------------------------------

TITLE: Defining Playwright Source Files in CMake
DESCRIPTION: Specifies the source files to be compiled for the Playwright application, including Objective-C files for the app delegate, browser window controller, main entry point, and a toolbar item.
SOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/mac/CMakeLists.txt#2025-04-22_snippet_1

LANGUAGE: cmake
CODE:
```
set(Playwright_SOURCES
    ${PLAYWRIGHT_DIR}/AppDelegate.m
    ${PLAYWRIGHT_DIR}/BrowserWindowController.m
    ${PLAYWRIGHT_DIR}/main.m
    ${TOOLS_DIR}/Playwright/MBToolbarItem.m
)
```

----------------------------------------

TITLE: Setting Videos Path for JavaScript Browser Context (Deprecated)
DESCRIPTION: Defines the deprecated videosPath option for browser contexts in JavaScript. This has been replaced by the recordVideo option.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_72

LANGUAGE: js
CODE:
```
- `videosPath` <[path]>

```

----------------------------------------

TITLE: Defining FullConfig Class Properties in Markdown
DESCRIPTION: This snippet defines the structure and properties of the FullConfig class using Markdown syntax. It includes type information, descriptions, and references to related TestConfig properties.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-fullconfig.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# class: FullConfig
* since: v1.10
* langs: js

Resolved configuration which is accessible via [`property: TestInfo.config`] and is passed to the test reporters. To see the format of Playwright configuration file, please see [TestConfig] instead.

## property: FullConfig.configFile
* since: v1.20
- type: ?<[string]>

Path to the configuration file used to run the tests. The value is an empty string if no config file was used.

## property: FullConfig.forbidOnly
* since: v1.10
- type: <[boolean]>

See [`property: TestConfig.forbidOnly`].

## property: FullConfig.fullyParallel
* since: v1.20
- type: <[boolean]>

See [`property: TestConfig.fullyParallel`].

## property: FullConfig.globalSetup
* since: v1.10
- type: <[null]|[string]>

See [`property: TestConfig.globalSetup`].

## property: FullConfig.globalTeardown
* since: v1.10
- type: <[null]|[string]>

See [`property: TestConfig.globalTeardown`].

## property: FullConfig.globalTimeout
* since: v1.10
- type: <[int]>

See [`property: TestConfig.globalTimeout`].

## property: FullConfig.grep
* since: v1.10
- type: <[RegExp]|[Array]<[RegExp]>>

See [`property: TestConfig.grep`].

## property: FullConfig.grepInvert
* since: v1.10
- type: <[null]|[RegExp]|[Array]<[RegExp]>>

See [`property: TestConfig.grepInvert`].

## property: FullConfig.maxFailures
* since: v1.10
- type: <[int]>

See [`property: TestConfig.maxFailures`].

## property: FullConfig.metadata
* since: v1.10
- type: <[Metadata]>

See [`property: TestConfig.metadata`].

## property: FullConfig.preserveOutput
* since: v1.10
- type: <[PreserveOutput]<"always"|"never"|"failures-only">>

See [`property: TestConfig.preserveOutput`].

## property: FullConfig.projects
* since: v1.10
- type: <[Array]<[FullProject]>>

List of resolved projects.

## property: FullConfig.quiet
* since: v1.10
- type: <[boolean]>

See [`property: TestConfig.quiet`].

## property: FullConfig.reporter
* since: v1.10
- type: <[string]|[Array]<[Object]>|[BuiltInReporter]<"list"|"dot"|"line"|"github"|"json"|"junit"|"null"|"html">>
  - `0` <[string]> Reporter name or module or file path
  - `1` <[Object]> An object with reporter options if any

See [`property: TestConfig.reporter`].

## property: FullConfig.reportSlowTests
* since: v1.10
- type: <[null]|[Object]>
  - `max` <[int]> The maximum number of slow test files to report.
  - `threshold` <[float]> Test file duration in milliseconds that is considered slow.

See [`property: TestConfig.reportSlowTests`].

## property: FullConfig.rootDir
* since: v1.20
- type: <[string]>

Base directory for all relative paths used in the reporters.

## property: FullConfig.shard
* since: v1.10
- type: <[null]|[Object]>
  - `total` <[int]> The total number of shards.
  - `current` <[int]> The index of the shard to execute, one-based.

See [`property: TestConfig.shard`].

## property: FullConfig.updateSnapshots
* since: v1.10
- type: <[UpdateSnapshots]<"all"|"changed"|"missing"|"none">>

See [`property: TestConfig.updateSnapshots`].

## property: FullConfig.updateSourceMethod
* since: v1.50
- type: <[UpdateSourceMethod]<"overwrite"|"3way"|"patch">>

See [`property: TestConfig.updateSourceMethod`].

## property: FullConfig.version
* since: v1.20
- type: <[string]>

Playwright version.

## property: FullConfig.webServer
* since: v1.10
- type: <[null]|[Object]>

See [`property: TestConfig.webServer`].

## property: FullConfig.workers
* since: v1.10
- type: <[int]>

See [`property: TestConfig.workers`].
```

----------------------------------------

TITLE: Displaying Warning Message in Markdown
DESCRIPTION: This snippet uses Markdown syntax to create a prominent warning message about the experimental nature of a Playwright package. It includes a link to the official documentation for further details.
SOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-ct-core/README.md#2025-04-22_snippet_0

LANGUAGE: Markdown
CODE:
```
> **BEWARE** This package is EXPERIMENTAL and does not respect semver.

Read more at https://playwright.dev/docs/test-components
```

----------------------------------------

TITLE: WebSocket Proxy Connection Example with ws Module
DESCRIPTION: Example demonstrating how to establish a WebSocket connection through a proxy server using the https-proxy-agent module with the ws WebSocket client library.
SOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
var url = require('url');
var WebSocket = require('ws');
var HttpsProxyAgent = require('https-proxy-agent');

// HTTP/HTTPS proxy to connect to
var proxy = process.env.http_proxy || 'http://168.63.76.32:3128';
console.log('using proxy server %j', proxy);

// WebSocket endpoint for the proxy to connect to
var endpoint = process.argv[2] || 'ws://echo.websocket.org';
var parsed = url.parse(endpoint);
console.log('attempting to connect to WebSocket %j', endpoint);

// create an instance of the `HttpsProxyAgent` class with the proxy server information
var options = url.parse(proxy);

var agent = new HttpsProxyAgent(options);

// finally, initiate the WebSocket connection
var socket = new WebSocket(endpoint, { agent: agent });

socket.on('open', function () {
  console.log('"open" event!');
  socket.send('hello world');
});

socket.on('message', function (data, flags) {
  console.log('"message" event! %j %j', data, flags);
  socket.close();
});
```

----------------------------------------

TITLE: JavaScript Implementation for To-Do List with Notifications
DESCRIPTION: This JavaScript code implements the functionality for a to-do list application with browser notifications. It handles task creation, editing, deletion, and sending notifications when tasks are due. The code utilizes the Notifications API and manages task deadlines with timers.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/to-do-notifications/README.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
// Retrieve the elements we'll be using
const form = document.querySelector('#new-task-form');
const taskTitle = document.querySelector('#task-title');
const deadlineHours = document.querySelector('#deadline-hours');
const deadlineMinutes = document.querySelector('#deadline-minutes');
const taskList = document.querySelector('#task-list');

// Store tasks in an array
let tasks = [];

// Request notification permission when the page loads
document.addEventListener('DOMContentLoaded', () => {
  if ("Notification" in window && Notification.permission !== "denied") {
    Notification.requestPermission();
  }
});

// Function to format time based on hours and minutes
function getTimeString(hours, minutes) {
  let timeString = '';
  if (hours > 0) {
    timeString += `${hours} hour${hours !== 1 ? 's' : ''} `;
  }
  if (minutes > 0) {
    timeString += `${minutes} minute${minutes !== 1 ? 's' : ''}`;
  }
  return timeString;
}

// Add a new task when the form is submitted
form.addEventListener('submit', (e) => {
  e.preventDefault();
  
  // Get form values
  const title = taskTitle.value.trim();
  const hours = parseInt(deadlineHours.value) || 0;
  const minutes = parseInt(deadlineMinutes.value) || 0;
  
  if (title === '' || (hours === 0 && minutes === 0)) {
    alert('Please enter a task title and deadline.');
    return;
  }
  
  // Create a new task object
  const task = {
    id: Date.now(),
    title,
    hours,
    minutes,
    deadline: Date.now() + (hours * 60 * 60 * 1000) + (minutes * 60 * 1000)
  };
  
  // Add the task to our array
  tasks.push(task);
  
  // Add the task to the UI
  renderTask(task);
  
  // Schedule a notification for this task
  scheduleNotification(task);
  
  // Reset the form
  form.reset();
});

// Render a task in the UI
function renderTask(task) {
  const taskElement = document.createElement('div');
  taskElement.className = 'task-list-item';
  taskElement.dataset.id = task.id;
  
  const titleElement = document.createElement('div');
  titleElement.className = 'task-title';
  titleElement.textContent = task.title;
  
  const deadlineElement = document.createElement('div');
  deadlineElement.className = 'task-deadline';
  deadlineElement.textContent = `Time left: ${getTimeString(task.hours, task.minutes)}`;
  
  const controlsElement = document.createElement('div');
  controlsElement.className = 'task-controls';
  
  const editButton = document.createElement('button');
  editButton.className = 'edit';
  editButton.textContent = 'Edit';
  editButton.addEventListener('click', () => editTask(task.id));
  
  const deleteButton = document.createElement('button');
  deleteButton.className = 'delete';
  deleteButton.textContent = 'Delete';
  deleteButton.addEventListener('click', () => deleteTask(task.id));
  
  controlsElement.appendChild(editButton);
  controlsElement.appendChild(deleteButton);
  
  taskElement.appendChild(titleElement);
  taskElement.appendChild(deadlineElement);
  taskElement.appendChild(controlsElement);
  
  // Replace the example task if it exists, otherwise append the new task
  const existingTask = document.querySelector('.task-list-item');
  if (existingTask && existingTask.querySelector('.task-title').textContent === 'My Task Title') {
    taskList.replaceChild(taskElement, existingTask);
  } else {
    taskList.appendChild(taskElement);
  }
  
  // Update the time remaining every minute
  const intervalId = setInterval(() => {
    const now = Date.now();
    const timeLeft = task.deadline - now;
    
    if (timeLeft <= 0) {
      deadlineElement.textContent = 'Time up!';
      clearInterval(intervalId);
    } else {
      const hoursLeft = Math.floor(timeLeft / (1000 * 60 * 60));
      const minutesLeft = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
      deadlineElement.textContent = `Time left: ${getTimeString(hoursLeft, minutesLeft)}`;
    }
  }, 60000); // Update every minute
}

// Edit a task
function editTask(id) {
  const task = tasks.find(task => task.id === id);
  if (!task) return;
  
  const newTitle = prompt('Enter new task title:', task.title);
  if (!newTitle) return;
  
  const newHours = parseInt(prompt('Enter new deadline hours:', task.hours));
  const newMinutes = parseInt(prompt('Enter new deadline minutes:', task.minutes));
  
  if (isNaN(newHours) || isNaN(newMinutes)) return;
  
  // Update the task
  task.title = newTitle;
  task.hours = newHours;
  task.minutes = newMinutes;
  task.deadline = Date.now() + (newHours * 60 * 60 * 1000) + (newMinutes * 60 * 1000);
  
  // Update the UI
  const taskElement = document.querySelector(`[data-id="${id}"] .task-title`);
  const deadlineElement = document.querySelector(`[data-id="${id}"] .task-deadline`);
  
  if (taskElement) taskElement.textContent = task.title;
  if (deadlineElement) deadlineElement.textContent = `Time left: ${getTimeString(task.hours, task.minutes)}`;
  
  // Reschedule notification
  scheduleNotification(task);
}

// Delete a task
function deleteTask(id) {
  const taskIndex = tasks.findIndex(task => task.id === id);
  if (taskIndex === -1) return;
  
  // Remove from array
  tasks.splice(taskIndex, 1);
  
  // Remove from UI
  const taskElement = document.querySelector(`[data-id="${id}"]`);
  if (taskElement) taskElement.remove();
}

// Schedule a notification for when the task is due
function scheduleNotification(task) {
  if (!window.Notification || Notification.permission !== "granted") {
    return;
  }
  
  const timeToNotify = task.deadline - Date.now();
  
  if (timeToNotify <= 0) return;
  
  setTimeout(() => {
    const notification = new Notification('Task Due!', {
      body: `Your task "${task.title}" is now due.`,
      icon: '/path/to/icon.png' // You would need to provide an actual icon
    });
    
    notification.onclick = function() {
      window.focus();
      this.close();
    };
  }, timeToNotify);
}
```

----------------------------------------

TITLE: Setting Up NIB Resources Compilation in CMake
DESCRIPTION: Creates the directory structure for the application bundle and sets up custom commands to compile XIB interface files into NIB format using the ibtool utility.
SOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/mac/CMakeLists.txt#2025-04-22_snippet_5

LANGUAGE: cmake
CODE:
```
set(Playwright_Contents_Directory ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Playwright.app/Contents)
make_directory(${Playwright_Contents_Directory}/Resources)
add_custom_command(OUTPUT ${Playwright_Contents_Directory}/Resources/BrowserWindow.nib
    COMMAND ibtool --compile ${Playwright_Contents_Directory}/Resources/BrowserWindow.nib ${PLAYWRIGHT_DIR}/BrowserWindow.xib VERBATIM)
add_custom_command(OUTPUT ${Playwright_Contents_Directory}/Resources/MainMenu.nib
    COMMAND ibtool --compile ${Playwright_Contents_Directory}/Resources/MainMenu.nib ${PLAYWRIGHT_DIR}/MainMenu.xib VERBATIM)
add_custom_target(PlaywrightNibs ALL DEPENDS
    ${Playwright_Contents_Directory}/Resources/BrowserWindow.nib
    ${Playwright_Contents_Directory}/Resources/MainMenu.nib
)
```

----------------------------------------

TITLE: HTML Button for Partial ARIA Snapshot Matching Example
DESCRIPTION: This HTML snippet provides a simple button element. It serves as the basis for demonstrating partial ARIA snapshot matching where the snapshot template might only match the role, ignoring the name.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_12

LANGUAGE: html
CODE:
```
```html
<button>Submit</button>
```
```

----------------------------------------

TITLE: CSS Class Assertion HTML Example
DESCRIPTION: HTML structure showing a div element with multiple CSS classes for testing class assertions.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_18

LANGUAGE: html
CODE:
```
<div class='middle selected row' id='component'></div>
```

----------------------------------------

TITLE: HTML Structure for To-Do List Application with Notifications
DESCRIPTION: The HTML structure defines the UI for a to-do list application with notification support. It includes a form for adding new tasks, a list to display existing tasks, and references to the necessary JavaScript and CSS files.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/to-do-notifications/README.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width">

    <title>To-do list with notifications example</title>

    <link rel="stylesheet" href="style.css">
  </head>

  <body>
    <h1>My to-do list</h1>
    <div class="note-wrapper">
      <form id="new-task-form">
        <div>
          <label for="task-title">Task title:</label>
          <input type="text" id="task-title" name="task-title">
        </div>
        <div>
          <label for="deadline-hours">Deadline:</label>
          <input type="text" id="deadline-hours" name="deadline-hours" placeholder="Hours">
          <input type="text" id="deadline-minutes" name="deadline-minutes" placeholder="Minutes">
        </div>
        <button>Add Task</button>
      </form>
    </div>

    <div id="task-list">
      <div class="task-list-item">
        <div class="task-title">My Task Title</div>
        <div class="task-deadline">Time left: 4 hours 30 minutes</div>
        <div class="task-controls">
          <button class="edit">Edit</button>
          <button class="delete">Delete</button>
        </div>
      </div>
    </div>
    <script src="scripts/todo.js"></script>
  </body>
</html>
```

----------------------------------------

TITLE: Generating Self-Signed Client Certificate
DESCRIPTION: Creates a self-signed client certificate for invalid authentication testing. Includes steps for generating the certificate request and self-signing it.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/client-certificates/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
mkdir -p client/self-signed
openssl req \
	-newkey rsa:4096 \
	-keyout client/self-signed/key.pem \
	-out client/self-signed/csr.pem \
	-nodes \
	-days 365 \
	-subj "/CN=Bob"

# sign with self-signed/key.pem
openssl x509 \
	-req \
	-in client/self-signed/csr.pem \
	-signkey client/self-signed/key.pem \
	-out client/self-signed/cert.pem \
	-days 365
```

----------------------------------------

TITLE: Setting Up Playwright in a .NET Console Project
DESCRIPTION: Commands to create a new console project, add the Playwright package, build the project, and install required browsers.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-csharp.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
# Create project
dotnet new console -n PlaywrightDemo
cd PlaywrightDemo

# Add project dependency
dotnet add package Microsoft.Playwright
# Build the project
dotnet build
# Install required browsers - replace netX with actual output folder name, e.g. net8.0.
pwsh bin/Debug/netX/playwright.ps1 install

# If the pwsh command does not work (throws TypeNotFound), make sure to use an up-to-date version of PowerShell.
dotnet tool update --global PowerShell
```

----------------------------------------

TITLE: Creating WebSocket Connection through SOCKS Proxy using Node.js
DESCRIPTION: This code demonstrates how to establish a WebSocket connection through a SOCKS proxy server. It uses the 'ws' package for WebSocket functionality and 'socks-proxy-agent' to route the connection through a SOCKS proxy. The example connects to a WebSocket endpoint, sends a message, and handles responses.
SOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
var WebSocket = require('ws');
var SocksProxyAgent = require('socks-proxy-agent');

// SOCKS proxy to connect to
var proxy = process.env.socks_proxy || 'socks://127.0.0.1:1080';
console.log('using proxy server %j', proxy);

// WebSocket endpoint for the proxy to connect to
var endpoint = process.argv[2] || 'ws://echo.websocket.org';
console.log('attempting to connect to WebSocket %j', endpoint);

// create an instance of the `SocksProxyAgent` class with the proxy server information
var agent = new SocksProxyAgent(proxy);

// initiate the WebSocket connection
var socket = new WebSocket(endpoint, { agent: agent });

socket.on('open', function () {
	console.log('"open" event!');
	socket.send('hello world');
});

socket.on('message', function (data, flags) {
	console.log('"message" event! %j %j', data, flags);
	socket.close();
});
```

----------------------------------------

TITLE: Git Commit Reference for WPT Source
DESCRIPTION: Git commit hash reference indicating the specific version of web-platform-tests from which files were copied.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/wpt/README.md#2025-04-22_snippet_0

LANGUAGE: text
CODE:
```
5adfe4e8cd223779aa2942915e8a515c079ed0ef
```

----------------------------------------

TITLE: Creating a New Svelte Project with degit
DESCRIPTION: Commands to create a new Svelte application using the degit tool to clone the official template repository and navigate to the project directory.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx degit sveltejs/template svelte-app
cd svelte-app
```

----------------------------------------

TITLE: Declaring and Creating Playwright Executable in CMake
DESCRIPTION: Uses WebKit-specific CMake macros to declare and create the Playwright executable target with the previously defined sources and dependencies.
SOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/win/CMakeLists.txt#2025-04-22_snippet_4

LANGUAGE: cmake
CODE:
```
WEBKIT_EXECUTABLE_DECLARE(Playwright)
WEBKIT_EXECUTABLE(Playwright)
```

----------------------------------------

TITLE: Configuring Web Crawler Access in robots.txt
DESCRIPTION: A standard robots.txt configuration that allows all web crawlers and search engine bots to access all parts of the website. The file includes a reference to the robots.txt standard documentation.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/stress/robots.txt#2025-04-22_snippet_0

LANGUAGE: robots.txt
CODE:
```
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:
```

----------------------------------------

TITLE: Enabling WebKit in Playwright CMake Configuration
DESCRIPTION: Adds WebKit-specific definitions, source files, and libraries to the Playwright build configuration, ensuring WebKit integration is enabled and properly linked.
SOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/win/CMakeLists.txt#2025-04-22_snippet_3

LANGUAGE: cmake
CODE:
```
list(APPEND Playwright_PRIVATE_DEFINITIONS ENABLE_WEBKIT)
list(APPEND Playwright_SOURCES
    WebKitBrowserWindow.cpp
)
list(APPEND Playwright_PRIVATE_LIBRARIES
    WebKit::WebKit
)
```

----------------------------------------

TITLE: Skipping Browser Download in Batch
DESCRIPTION: Prevents browser downloads during package installation by setting the PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD environment variable in Windows Batch
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-js.md#2025-04-22_snippet_5

LANGUAGE: batch
CODE:
```
set PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1
npm install
```

----------------------------------------

TITLE: Implementing Custom HTTP Agent with agent-base
DESCRIPTION: Example showing how to create a custom HTTP agent that establishes new socket connections for each request using the agent-base module. Demonstrates both HTTP and HTTPS connection handling.
SOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
var net = require('net');
var tls = require('tls');
var url = require('url');
var http = require('http');
var agent = require('agent-base');

var endpoint = 'http://nodejs.org/api/';
var parsed = url.parse(endpoint);

// This is the important part!
parsed.agent = agent(function (req, opts) {
  var socket;
  // `secureEndpoint` is true when using the https module
  if (opts.secureEndpoint) {
    socket = tls.connect(opts);
  } else {
    socket = net.connect(opts);
  }
  return socket;
});
```

----------------------------------------

TITLE: Setting Up Playwright Build Directories and Definitions in CMake
DESCRIPTION: Defines the Playwright directory path and adds compiler definitions including a prefix header. The definition includes setting WEBCORE_EXPORT to an empty string which is noted as a FIXME item.
SOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/mac/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
set(PLAYWRIGHT_DIR "${TOOLS_DIR}/Playwright/mac")

#FIXME: This should not need WEBCORE_EXPORT defined.  This means we are including WebCore headers, and we should not.
add_definitions("-include Playwright_Prefix.pch -DWEBCORE_EXPORT=")
```

----------------------------------------

TITLE: Example Dot Reporter Output (Bash)
DESCRIPTION: Illustrates the output format of the dot reporter during a test execution, showing characters representing test status (e.g., '.' for passed, 'F' for failed) and summary information.
SOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#_snippet_11

LANGUAGE: bash
CODE:
```
npx playwright test --reporter=dot
Running 124 tests using 6 workers
······F·············································
```

----------------------------------------

TITLE: Importing Playwright and Test Utilities for Visual Regression Testing
DESCRIPTION: This snippet imports the necessary modules from Playwright and sets up test utility functions for visual comparison testing.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/image_tools/fixtures/should-match/looks-same-tests/README.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const { test, expect } = require('./fixture');
const fs = require('fs');
const path = require('path');

function compareImages(image1, image2, options = {}) {
  return expect(image1).toMatchImage(image2, options);
}

function compareImageFile(image1, image2File, options = {}) {
  const buffer = fs.readFileSync(path.join(__dirname, 'data', image2File));
  return compareImages(image1, buffer, options);
}
```

----------------------------------------

TITLE: Visual Regression Test with Pixel Comparison
DESCRIPTION: This test compares specific pixels between two images.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/image_tools/fixtures/should-match/looks-same-tests/README.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
test('should return true for different images when comparing specific pixels', async ({ page }) => {
  const image1 = await page.screenshot();
  await compareImageFile(image1, 'different/3.png', { includeAA: false });
});
```

----------------------------------------

TITLE: Running React Test Suite
DESCRIPTION: Launches the test runner in interactive watch mode for running application tests.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-react17/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
npm test
```

----------------------------------------

TITLE: Defining Markdown Links in Playwright Support Documentation
DESCRIPTION: This snippet defines markdown links used throughout the document for easy reference to important resources such as GitHub issues, documentation, and the Discord server.
SOURCE: https://github.com/microsoft/playwright/blob/main/SUPPORT.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
[gh-issues]: https://github.com/microsoft/playwright/issues/
[docs]: https://playwright.dev/
[discord-server]: https://aka.ms/playwright/discord
```

----------------------------------------

TITLE: React License Headers for Production Files
DESCRIPTION: This snippet contains the license headers for multiple React production minified JavaScript files including react-dom, react-jsx-runtime, react, and scheduler. Each header indicates that the respective file is licensed under the MIT license by Facebook, Inc.
SOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/stress/static/js/main.cc4a7955.js.LICENSE.txt#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
```

----------------------------------------

TITLE: Creating Async HTTP Agent with Promises
DESCRIPTION: Example demonstrating how to create an HTTP agent using async/await and Promises with the agent-base module.
SOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_1

LANGUAGE: JavaScript
CODE:
```
agent(async function (req, opts) {
  await sleep(1000);
  // etc…
});
```

----------------------------------------

TITLE: Configuring Windows-Specific Properties for Playwright in CMake
DESCRIPTION: Sets Windows-specific properties for the Playwright executable and adds conditional compile definitions for the Cairo platform if needed.
SOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/win/CMakeLists.txt#2025-04-22_snippet_5

LANGUAGE: cmake
CODE:
```
set_target_properties(Playwright PROPERTIES WIN32_EXECUTABLE ON)
if (${WTF_PLATFORM_WIN_CAIRO})
    target_compile_definitions(Playwright PRIVATE WIN_CAIRO)
endif ()
```